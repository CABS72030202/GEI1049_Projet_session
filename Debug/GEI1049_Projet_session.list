
GEI1049_Projet_session.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008318  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002dd4  080084e8  080084e8  000094e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b2bc  0800b2bc  0000d090  2**0
                  CONTENTS
  4 .ARM          00000008  0800b2bc  0800b2bc  0000c2bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b2c4  0800b2c4  0000d090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b2c4  0800b2c4  0000c2c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b2c8  0800b2c8  0000c2c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000090  20000000  0800b2cc  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000420  20000090  0800b35c  0000d090  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004b0  0800b35c  0000d4b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d090  2**0
                  CONTENTS, READONLY
 12 .debug_info   000172ed  00000000  00000000  0000d0c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003a2b  00000000  00000000  000243ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014c0  00000000  00000000  00027dd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001009  00000000  00000000  00029298  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002678e  00000000  00000000  0002a2a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e0c3  00000000  00000000  00050a2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d897e  00000000  00000000  0006eaf2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00147470  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005e90  00000000  00000000  001474b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  0014d344  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000090 	.word	0x20000090
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080084d0 	.word	0x080084d0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000094 	.word	0x20000094
 800020c:	080084d0 	.word	0x080084d0

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	@ 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__aeabi_d2iz>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a54:	d215      	bcs.n	8000a82 <__aeabi_d2iz+0x36>
 8000a56:	d511      	bpl.n	8000a7c <__aeabi_d2iz+0x30>
 8000a58:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d912      	bls.n	8000a88 <__aeabi_d2iz+0x3c>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a72:	fa23 f002 	lsr.w	r0, r3, r2
 8000a76:	bf18      	it	ne
 8000a78:	4240      	negne	r0, r0
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a86:	d105      	bne.n	8000a94 <__aeabi_d2iz+0x48>
 8000a88:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a8c:	bf08      	it	eq
 8000a8e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a92:	4770      	bx	lr
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop

08000a9c <__aeabi_d2uiz>:
 8000a9c:	004a      	lsls	r2, r1, #1
 8000a9e:	d211      	bcs.n	8000ac4 <__aeabi_d2uiz+0x28>
 8000aa0:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000aa4:	d211      	bcs.n	8000aca <__aeabi_d2uiz+0x2e>
 8000aa6:	d50d      	bpl.n	8000ac4 <__aeabi_d2uiz+0x28>
 8000aa8:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000aac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab0:	d40e      	bmi.n	8000ad0 <__aeabi_d2uiz+0x34>
 8000ab2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000abe:	fa23 f002 	lsr.w	r0, r3, r2
 8000ac2:	4770      	bx	lr
 8000ac4:	f04f 0000 	mov.w	r0, #0
 8000ac8:	4770      	bx	lr
 8000aca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ace:	d102      	bne.n	8000ad6 <__aeabi_d2uiz+0x3a>
 8000ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ad4:	4770      	bx	lr
 8000ad6:	f04f 0000 	mov.w	r0, #0
 8000ada:	4770      	bx	lr

08000adc <__aeabi_d2f>:
 8000adc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ae0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ae4:	bf24      	itt	cs
 8000ae6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000aea:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000aee:	d90d      	bls.n	8000b0c <__aeabi_d2f+0x30>
 8000af0:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000af4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000af8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000afc:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b00:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b04:	bf08      	it	eq
 8000b06:	f020 0001 	biceq.w	r0, r0, #1
 8000b0a:	4770      	bx	lr
 8000b0c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b10:	d121      	bne.n	8000b56 <__aeabi_d2f+0x7a>
 8000b12:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b16:	bfbc      	itt	lt
 8000b18:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b1c:	4770      	bxlt	lr
 8000b1e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b22:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b26:	f1c2 0218 	rsb	r2, r2, #24
 8000b2a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b2e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b32:	fa20 f002 	lsr.w	r0, r0, r2
 8000b36:	bf18      	it	ne
 8000b38:	f040 0001 	orrne.w	r0, r0, #1
 8000b3c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b40:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b44:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b48:	ea40 000c 	orr.w	r0, r0, ip
 8000b4c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b50:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b54:	e7cc      	b.n	8000af0 <__aeabi_d2f+0x14>
 8000b56:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b5a:	d107      	bne.n	8000b6c <__aeabi_d2f+0x90>
 8000b5c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b60:	bf1e      	ittt	ne
 8000b62:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b66:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b6a:	4770      	bxne	lr
 8000b6c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b70:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b74:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <__aeabi_uldivmod>:
 8000b7c:	b953      	cbnz	r3, 8000b94 <__aeabi_uldivmod+0x18>
 8000b7e:	b94a      	cbnz	r2, 8000b94 <__aeabi_uldivmod+0x18>
 8000b80:	2900      	cmp	r1, #0
 8000b82:	bf08      	it	eq
 8000b84:	2800      	cmpeq	r0, #0
 8000b86:	bf1c      	itt	ne
 8000b88:	f04f 31ff 	movne.w	r1, #4294967295
 8000b8c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b90:	f000 b96a 	b.w	8000e68 <__aeabi_idiv0>
 8000b94:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b98:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b9c:	f000 f806 	bl	8000bac <__udivmoddi4>
 8000ba0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ba4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ba8:	b004      	add	sp, #16
 8000baa:	4770      	bx	lr

08000bac <__udivmoddi4>:
 8000bac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bb0:	9d08      	ldr	r5, [sp, #32]
 8000bb2:	460c      	mov	r4, r1
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d14e      	bne.n	8000c56 <__udivmoddi4+0xaa>
 8000bb8:	4694      	mov	ip, r2
 8000bba:	458c      	cmp	ip, r1
 8000bbc:	4686      	mov	lr, r0
 8000bbe:	fab2 f282 	clz	r2, r2
 8000bc2:	d962      	bls.n	8000c8a <__udivmoddi4+0xde>
 8000bc4:	b14a      	cbz	r2, 8000bda <__udivmoddi4+0x2e>
 8000bc6:	f1c2 0320 	rsb	r3, r2, #32
 8000bca:	4091      	lsls	r1, r2
 8000bcc:	fa20 f303 	lsr.w	r3, r0, r3
 8000bd0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bd4:	4319      	orrs	r1, r3
 8000bd6:	fa00 fe02 	lsl.w	lr, r0, r2
 8000bda:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bde:	fa1f f68c 	uxth.w	r6, ip
 8000be2:	fbb1 f4f7 	udiv	r4, r1, r7
 8000be6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bea:	fb07 1114 	mls	r1, r7, r4, r1
 8000bee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bf2:	fb04 f106 	mul.w	r1, r4, r6
 8000bf6:	4299      	cmp	r1, r3
 8000bf8:	d90a      	bls.n	8000c10 <__udivmoddi4+0x64>
 8000bfa:	eb1c 0303 	adds.w	r3, ip, r3
 8000bfe:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c02:	f080 8112 	bcs.w	8000e2a <__udivmoddi4+0x27e>
 8000c06:	4299      	cmp	r1, r3
 8000c08:	f240 810f 	bls.w	8000e2a <__udivmoddi4+0x27e>
 8000c0c:	3c02      	subs	r4, #2
 8000c0e:	4463      	add	r3, ip
 8000c10:	1a59      	subs	r1, r3, r1
 8000c12:	fa1f f38e 	uxth.w	r3, lr
 8000c16:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c1a:	fb07 1110 	mls	r1, r7, r0, r1
 8000c1e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c22:	fb00 f606 	mul.w	r6, r0, r6
 8000c26:	429e      	cmp	r6, r3
 8000c28:	d90a      	bls.n	8000c40 <__udivmoddi4+0x94>
 8000c2a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c32:	f080 80fc 	bcs.w	8000e2e <__udivmoddi4+0x282>
 8000c36:	429e      	cmp	r6, r3
 8000c38:	f240 80f9 	bls.w	8000e2e <__udivmoddi4+0x282>
 8000c3c:	4463      	add	r3, ip
 8000c3e:	3802      	subs	r0, #2
 8000c40:	1b9b      	subs	r3, r3, r6
 8000c42:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c46:	2100      	movs	r1, #0
 8000c48:	b11d      	cbz	r5, 8000c52 <__udivmoddi4+0xa6>
 8000c4a:	40d3      	lsrs	r3, r2
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	e9c5 3200 	strd	r3, r2, [r5]
 8000c52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c56:	428b      	cmp	r3, r1
 8000c58:	d905      	bls.n	8000c66 <__udivmoddi4+0xba>
 8000c5a:	b10d      	cbz	r5, 8000c60 <__udivmoddi4+0xb4>
 8000c5c:	e9c5 0100 	strd	r0, r1, [r5]
 8000c60:	2100      	movs	r1, #0
 8000c62:	4608      	mov	r0, r1
 8000c64:	e7f5      	b.n	8000c52 <__udivmoddi4+0xa6>
 8000c66:	fab3 f183 	clz	r1, r3
 8000c6a:	2900      	cmp	r1, #0
 8000c6c:	d146      	bne.n	8000cfc <__udivmoddi4+0x150>
 8000c6e:	42a3      	cmp	r3, r4
 8000c70:	d302      	bcc.n	8000c78 <__udivmoddi4+0xcc>
 8000c72:	4290      	cmp	r0, r2
 8000c74:	f0c0 80f0 	bcc.w	8000e58 <__udivmoddi4+0x2ac>
 8000c78:	1a86      	subs	r6, r0, r2
 8000c7a:	eb64 0303 	sbc.w	r3, r4, r3
 8000c7e:	2001      	movs	r0, #1
 8000c80:	2d00      	cmp	r5, #0
 8000c82:	d0e6      	beq.n	8000c52 <__udivmoddi4+0xa6>
 8000c84:	e9c5 6300 	strd	r6, r3, [r5]
 8000c88:	e7e3      	b.n	8000c52 <__udivmoddi4+0xa6>
 8000c8a:	2a00      	cmp	r2, #0
 8000c8c:	f040 8090 	bne.w	8000db0 <__udivmoddi4+0x204>
 8000c90:	eba1 040c 	sub.w	r4, r1, ip
 8000c94:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c98:	fa1f f78c 	uxth.w	r7, ip
 8000c9c:	2101      	movs	r1, #1
 8000c9e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000ca2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ca6:	fb08 4416 	mls	r4, r8, r6, r4
 8000caa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cae:	fb07 f006 	mul.w	r0, r7, r6
 8000cb2:	4298      	cmp	r0, r3
 8000cb4:	d908      	bls.n	8000cc8 <__udivmoddi4+0x11c>
 8000cb6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cba:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cbe:	d202      	bcs.n	8000cc6 <__udivmoddi4+0x11a>
 8000cc0:	4298      	cmp	r0, r3
 8000cc2:	f200 80cd 	bhi.w	8000e60 <__udivmoddi4+0x2b4>
 8000cc6:	4626      	mov	r6, r4
 8000cc8:	1a1c      	subs	r4, r3, r0
 8000cca:	fa1f f38e 	uxth.w	r3, lr
 8000cce:	fbb4 f0f8 	udiv	r0, r4, r8
 8000cd2:	fb08 4410 	mls	r4, r8, r0, r4
 8000cd6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cda:	fb00 f707 	mul.w	r7, r0, r7
 8000cde:	429f      	cmp	r7, r3
 8000ce0:	d908      	bls.n	8000cf4 <__udivmoddi4+0x148>
 8000ce2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ce6:	f100 34ff 	add.w	r4, r0, #4294967295
 8000cea:	d202      	bcs.n	8000cf2 <__udivmoddi4+0x146>
 8000cec:	429f      	cmp	r7, r3
 8000cee:	f200 80b0 	bhi.w	8000e52 <__udivmoddi4+0x2a6>
 8000cf2:	4620      	mov	r0, r4
 8000cf4:	1bdb      	subs	r3, r3, r7
 8000cf6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cfa:	e7a5      	b.n	8000c48 <__udivmoddi4+0x9c>
 8000cfc:	f1c1 0620 	rsb	r6, r1, #32
 8000d00:	408b      	lsls	r3, r1
 8000d02:	fa22 f706 	lsr.w	r7, r2, r6
 8000d06:	431f      	orrs	r7, r3
 8000d08:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d0c:	fa04 f301 	lsl.w	r3, r4, r1
 8000d10:	ea43 030c 	orr.w	r3, r3, ip
 8000d14:	40f4      	lsrs	r4, r6
 8000d16:	fa00 f801 	lsl.w	r8, r0, r1
 8000d1a:	0c38      	lsrs	r0, r7, #16
 8000d1c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d20:	fbb4 fef0 	udiv	lr, r4, r0
 8000d24:	fa1f fc87 	uxth.w	ip, r7
 8000d28:	fb00 441e 	mls	r4, r0, lr, r4
 8000d2c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d30:	fb0e f90c 	mul.w	r9, lr, ip
 8000d34:	45a1      	cmp	r9, r4
 8000d36:	fa02 f201 	lsl.w	r2, r2, r1
 8000d3a:	d90a      	bls.n	8000d52 <__udivmoddi4+0x1a6>
 8000d3c:	193c      	adds	r4, r7, r4
 8000d3e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d42:	f080 8084 	bcs.w	8000e4e <__udivmoddi4+0x2a2>
 8000d46:	45a1      	cmp	r9, r4
 8000d48:	f240 8081 	bls.w	8000e4e <__udivmoddi4+0x2a2>
 8000d4c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d50:	443c      	add	r4, r7
 8000d52:	eba4 0409 	sub.w	r4, r4, r9
 8000d56:	fa1f f983 	uxth.w	r9, r3
 8000d5a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d5e:	fb00 4413 	mls	r4, r0, r3, r4
 8000d62:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d66:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d6a:	45a4      	cmp	ip, r4
 8000d6c:	d907      	bls.n	8000d7e <__udivmoddi4+0x1d2>
 8000d6e:	193c      	adds	r4, r7, r4
 8000d70:	f103 30ff 	add.w	r0, r3, #4294967295
 8000d74:	d267      	bcs.n	8000e46 <__udivmoddi4+0x29a>
 8000d76:	45a4      	cmp	ip, r4
 8000d78:	d965      	bls.n	8000e46 <__udivmoddi4+0x29a>
 8000d7a:	3b02      	subs	r3, #2
 8000d7c:	443c      	add	r4, r7
 8000d7e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000d82:	fba0 9302 	umull	r9, r3, r0, r2
 8000d86:	eba4 040c 	sub.w	r4, r4, ip
 8000d8a:	429c      	cmp	r4, r3
 8000d8c:	46ce      	mov	lr, r9
 8000d8e:	469c      	mov	ip, r3
 8000d90:	d351      	bcc.n	8000e36 <__udivmoddi4+0x28a>
 8000d92:	d04e      	beq.n	8000e32 <__udivmoddi4+0x286>
 8000d94:	b155      	cbz	r5, 8000dac <__udivmoddi4+0x200>
 8000d96:	ebb8 030e 	subs.w	r3, r8, lr
 8000d9a:	eb64 040c 	sbc.w	r4, r4, ip
 8000d9e:	fa04 f606 	lsl.w	r6, r4, r6
 8000da2:	40cb      	lsrs	r3, r1
 8000da4:	431e      	orrs	r6, r3
 8000da6:	40cc      	lsrs	r4, r1
 8000da8:	e9c5 6400 	strd	r6, r4, [r5]
 8000dac:	2100      	movs	r1, #0
 8000dae:	e750      	b.n	8000c52 <__udivmoddi4+0xa6>
 8000db0:	f1c2 0320 	rsb	r3, r2, #32
 8000db4:	fa20 f103 	lsr.w	r1, r0, r3
 8000db8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dbc:	fa24 f303 	lsr.w	r3, r4, r3
 8000dc0:	4094      	lsls	r4, r2
 8000dc2:	430c      	orrs	r4, r1
 8000dc4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000dc8:	fa00 fe02 	lsl.w	lr, r0, r2
 8000dcc:	fa1f f78c 	uxth.w	r7, ip
 8000dd0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dd4:	fb08 3110 	mls	r1, r8, r0, r3
 8000dd8:	0c23      	lsrs	r3, r4, #16
 8000dda:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dde:	fb00 f107 	mul.w	r1, r0, r7
 8000de2:	4299      	cmp	r1, r3
 8000de4:	d908      	bls.n	8000df8 <__udivmoddi4+0x24c>
 8000de6:	eb1c 0303 	adds.w	r3, ip, r3
 8000dea:	f100 36ff 	add.w	r6, r0, #4294967295
 8000dee:	d22c      	bcs.n	8000e4a <__udivmoddi4+0x29e>
 8000df0:	4299      	cmp	r1, r3
 8000df2:	d92a      	bls.n	8000e4a <__udivmoddi4+0x29e>
 8000df4:	3802      	subs	r0, #2
 8000df6:	4463      	add	r3, ip
 8000df8:	1a5b      	subs	r3, r3, r1
 8000dfa:	b2a4      	uxth	r4, r4
 8000dfc:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e00:	fb08 3311 	mls	r3, r8, r1, r3
 8000e04:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e08:	fb01 f307 	mul.w	r3, r1, r7
 8000e0c:	42a3      	cmp	r3, r4
 8000e0e:	d908      	bls.n	8000e22 <__udivmoddi4+0x276>
 8000e10:	eb1c 0404 	adds.w	r4, ip, r4
 8000e14:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e18:	d213      	bcs.n	8000e42 <__udivmoddi4+0x296>
 8000e1a:	42a3      	cmp	r3, r4
 8000e1c:	d911      	bls.n	8000e42 <__udivmoddi4+0x296>
 8000e1e:	3902      	subs	r1, #2
 8000e20:	4464      	add	r4, ip
 8000e22:	1ae4      	subs	r4, r4, r3
 8000e24:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e28:	e739      	b.n	8000c9e <__udivmoddi4+0xf2>
 8000e2a:	4604      	mov	r4, r0
 8000e2c:	e6f0      	b.n	8000c10 <__udivmoddi4+0x64>
 8000e2e:	4608      	mov	r0, r1
 8000e30:	e706      	b.n	8000c40 <__udivmoddi4+0x94>
 8000e32:	45c8      	cmp	r8, r9
 8000e34:	d2ae      	bcs.n	8000d94 <__udivmoddi4+0x1e8>
 8000e36:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e3a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e3e:	3801      	subs	r0, #1
 8000e40:	e7a8      	b.n	8000d94 <__udivmoddi4+0x1e8>
 8000e42:	4631      	mov	r1, r6
 8000e44:	e7ed      	b.n	8000e22 <__udivmoddi4+0x276>
 8000e46:	4603      	mov	r3, r0
 8000e48:	e799      	b.n	8000d7e <__udivmoddi4+0x1d2>
 8000e4a:	4630      	mov	r0, r6
 8000e4c:	e7d4      	b.n	8000df8 <__udivmoddi4+0x24c>
 8000e4e:	46d6      	mov	lr, sl
 8000e50:	e77f      	b.n	8000d52 <__udivmoddi4+0x1a6>
 8000e52:	4463      	add	r3, ip
 8000e54:	3802      	subs	r0, #2
 8000e56:	e74d      	b.n	8000cf4 <__udivmoddi4+0x148>
 8000e58:	4606      	mov	r6, r0
 8000e5a:	4623      	mov	r3, r4
 8000e5c:	4608      	mov	r0, r1
 8000e5e:	e70f      	b.n	8000c80 <__udivmoddi4+0xd4>
 8000e60:	3e02      	subs	r6, #2
 8000e62:	4463      	add	r3, ip
 8000e64:	e730      	b.n	8000cc8 <__udivmoddi4+0x11c>
 8000e66:	bf00      	nop

08000e68 <__aeabi_idiv0>:
 8000e68:	4770      	bx	lr
 8000e6a:	bf00      	nop

08000e6c <Get_Mode>:
int current_speed = 0;
volatile int timer_count = 0;
float turning_time = 0;
int save[4] = {0, 0, 0, 0};

int Get_Mode(int MSB_state, int LSB_state) {
 8000e6c:	b480      	push	{r7}
 8000e6e:	b085      	sub	sp, #20
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
 8000e74:	6039      	str	r1, [r7, #0]
	static const int id_lookup[4] = {MANUAL_MODE, CIRCLE_MODE,  BACK_FORTH_MODE, SQUARE_MODE};
	int bin = ((MSB_state & 1) << 1) | (LSB_state & 1);
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	005b      	lsls	r3, r3, #1
 8000e7a:	f003 0202 	and.w	r2, r3, #2
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	f003 0301 	and.w	r3, r3, #1
 8000e84:	4313      	orrs	r3, r2
 8000e86:	60fb      	str	r3, [r7, #12]
	return id_lookup[bin];
 8000e88:	4a04      	ldr	r2, [pc, #16]	@ (8000e9c <Get_Mode+0x30>)
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8000e90:	4618      	mov	r0, r3
 8000e92:	3714      	adds	r7, #20
 8000e94:	46bd      	mov	sp, r7
 8000e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9a:	4770      	bx	lr
 8000e9c:	080088d0 	.word	0x080088d0

08000ea0 <Get_Mode_String>:

char* Get_Mode_String() {
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b082      	sub	sp, #8
 8000ea4:	af00      	add	r7, sp, #0
	const size_t buffer_size = 8;
 8000ea6:	2308      	movs	r3, #8
 8000ea8:	603b      	str	r3, [r7, #0]
	char* str = malloc(buffer_size);
 8000eaa:	6838      	ldr	r0, [r7, #0]
 8000eac:	f006 fb72 	bl	8007594 <malloc>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	607b      	str	r3, [r7, #4]
	switch(curr_mode) {
 8000eb4:	4b11      	ldr	r3, [pc, #68]	@ (8000efc <Get_Mode_String+0x5c>)
 8000eb6:	781b      	ldrb	r3, [r3, #0]
 8000eb8:	2b03      	cmp	r3, #3
 8000eba:	d817      	bhi.n	8000eec <Get_Mode_String+0x4c>
 8000ebc:	a201      	add	r2, pc, #4	@ (adr r2, 8000ec4 <Get_Mode_String+0x24>)
 8000ebe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ec2:	bf00      	nop
 8000ec4:	08000ed5 	.word	0x08000ed5
 8000ec8:	08000edb 	.word	0x08000edb
 8000ecc:	08000ee1 	.word	0x08000ee1
 8000ed0:	08000ee7 	.word	0x08000ee7
		case MANUAL_MODE:
			str = "MANUAL";
 8000ed4:	4b0a      	ldr	r3, [pc, #40]	@ (8000f00 <Get_Mode_String+0x60>)
 8000ed6:	607b      	str	r3, [r7, #4]
			break;
 8000ed8:	e00b      	b.n	8000ef2 <Get_Mode_String+0x52>
		case CIRCLE_MODE:
			str = "CIRCLE";
 8000eda:	4b0a      	ldr	r3, [pc, #40]	@ (8000f04 <Get_Mode_String+0x64>)
 8000edc:	607b      	str	r3, [r7, #4]
			break;
 8000ede:	e008      	b.n	8000ef2 <Get_Mode_String+0x52>
		case BACK_FORTH_MODE:
			str = "LINE";
 8000ee0:	4b09      	ldr	r3, [pc, #36]	@ (8000f08 <Get_Mode_String+0x68>)
 8000ee2:	607b      	str	r3, [r7, #4]
			break;
 8000ee4:	e005      	b.n	8000ef2 <Get_Mode_String+0x52>
		case SQUARE_MODE:
			str = "SQUARE";
 8000ee6:	4b09      	ldr	r3, [pc, #36]	@ (8000f0c <Get_Mode_String+0x6c>)
 8000ee8:	607b      	str	r3, [r7, #4]
			break;
 8000eea:	e002      	b.n	8000ef2 <Get_Mode_String+0x52>
		default:
			str = "ERROR";
 8000eec:	4b08      	ldr	r3, [pc, #32]	@ (8000f10 <Get_Mode_String+0x70>)
 8000eee:	607b      	str	r3, [r7, #4]
			break;
 8000ef0:	bf00      	nop
	}
	return str;
 8000ef2:	687b      	ldr	r3, [r7, #4]
}
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	3708      	adds	r7, #8
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	200000ae 	.word	0x200000ae
 8000f00:	080084e8 	.word	0x080084e8
 8000f04:	080084f0 	.word	0x080084f0
 8000f08:	080084f8 	.word	0x080084f8
 8000f0c:	08008500 	.word	0x08008500
 8000f10:	08008508 	.word	0x08008508
 8000f14:	00000000 	.word	0x00000000

08000f18 <Auto_Angle>:

void Auto_Angle(float value, TIM_HandleTypeDef* htim3) {
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b082      	sub	sp, #8
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	ed87 0a01 	vstr	s0, [r7, #4]
 8000f22:	6038      	str	r0, [r7, #0]
	// Initial setup
	if(timer_count == 0) {
 8000f24:	4b36      	ldr	r3, [pc, #216]	@ (8001000 <Auto_Angle+0xe8>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d146      	bne.n	8000fba <Auto_Angle+0xa2>
		// Calculate the duration for the turn
		turning_time = fabs(value) * TRACK_WIDTH;
 8000f2c:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f30:	eef0 7ae7 	vabs.f32	s15, s15
 8000f34:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 8001004 <Auto_Angle+0xec>
 8000f38:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f3c:	4b32      	ldr	r3, [pc, #200]	@ (8001008 <Auto_Angle+0xf0>)
 8000f3e:	edc3 7a00 	vstr	s15, [r3]

		// Determine direction of turn
		if (value > 0) {
 8000f42:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f46:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000f4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f4e:	dd18      	ble.n	8000f82 <Auto_Angle+0x6a>
			turning_time /= (360.0 * CLOCKWISE_FACTOR);
 8000f50:	4b2d      	ldr	r3, [pc, #180]	@ (8001008 <Auto_Angle+0xf0>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	4618      	mov	r0, r3
 8000f56:	f7ff fb0f 	bl	8000578 <__aeabi_f2d>
 8000f5a:	a327      	add	r3, pc, #156	@ (adr r3, 8000ff8 <Auto_Angle+0xe0>)
 8000f5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f60:	f7ff fc8c 	bl	800087c <__aeabi_ddiv>
 8000f64:	4602      	mov	r2, r0
 8000f66:	460b      	mov	r3, r1
 8000f68:	4610      	mov	r0, r2
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	f7ff fdb6 	bl	8000adc <__aeabi_d2f>
 8000f70:	4603      	mov	r3, r0
 8000f72:	4a25      	ldr	r2, [pc, #148]	@ (8001008 <Auto_Angle+0xf0>)
 8000f74:	6013      	str	r3, [r2, #0]
			Droite(BASE_SPEED, htim3);
 8000f76:	6839      	ldr	r1, [r7, #0]
 8000f78:	f44f 70e1 	mov.w	r0, #450	@ 0x1c2
 8000f7c:	f000 fb00 	bl	8001580 <Droite>
 8000f80:	e00e      	b.n	8000fa0 <Auto_Angle+0x88>
		}
		else {
			turning_time /= (360.0 * COUNTER_CLW_FACTOR);
 8000f82:	4b21      	ldr	r3, [pc, #132]	@ (8001008 <Auto_Angle+0xf0>)
 8000f84:	ed93 7a00 	vldr	s14, [r3]
 8000f88:	eddf 6a20 	vldr	s13, [pc, #128]	@ 800100c <Auto_Angle+0xf4>
 8000f8c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f90:	4b1d      	ldr	r3, [pc, #116]	@ (8001008 <Auto_Angle+0xf0>)
 8000f92:	edc3 7a00 	vstr	s15, [r3]
			Gauche(BASE_SPEED, htim3);
 8000f96:	6839      	ldr	r1, [r7, #0]
 8000f98:	f44f 70e1 	mov.w	r0, #450	@ 0x1c2
 8000f9c:	f000 fb28 	bl	80015f0 <Gauche>
		}

		// Convert turning time in µs
		turning_time *= 1e6;
 8000fa0:	4b19      	ldr	r3, [pc, #100]	@ (8001008 <Auto_Angle+0xf0>)
 8000fa2:	edd3 7a00 	vldr	s15, [r3]
 8000fa6:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 8001010 <Auto_Angle+0xf8>
 8000faa:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000fae:	4b16      	ldr	r3, [pc, #88]	@ (8001008 <Auto_Angle+0xf0>)
 8000fb0:	edc3 7a00 	vstr	s15, [r3]

		// Start timer
	    HAL_TIM_Base_Start_IT(&htim7);
 8000fb4:	4817      	ldr	r0, [pc, #92]	@ (8001014 <Auto_Angle+0xfc>)
 8000fb6:	f004 facd 	bl	8005554 <HAL_TIM_Base_Start_IT>
	}

    // Stop when finished
	if(timer_count > (int)turning_time) {
 8000fba:	4b13      	ldr	r3, [pc, #76]	@ (8001008 <Auto_Angle+0xf0>)
 8000fbc:	edd3 7a00 	vldr	s15, [r3]
 8000fc0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000fc4:	ee17 2a90 	vmov	r2, s15
 8000fc8:	4b0d      	ldr	r3, [pc, #52]	@ (8001000 <Auto_Angle+0xe8>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	429a      	cmp	r2, r3
 8000fce:	da0f      	bge.n	8000ff0 <Auto_Angle+0xd8>

		// Stop timer
		HAL_TIM_Base_Stop_IT(&htim7);
 8000fd0:	4810      	ldr	r0, [pc, #64]	@ (8001014 <Auto_Angle+0xfc>)
 8000fd2:	f004 fb2f 	bl	8005634 <HAL_TIM_Base_Stop_IT>

		// Stop the motors
		Stop(htim3);
 8000fd6:	6838      	ldr	r0, [r7, #0]
 8000fd8:	f000 fb7a 	bl	80016d0 <Stop>

		// Reset temporal counter
		timer_count = 0;
 8000fdc:	4b08      	ldr	r3, [pc, #32]	@ (8001000 <Auto_Angle+0xe8>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	601a      	str	r2, [r3, #0]

		// Ready for next step
		curr_step++;
 8000fe2:	4b0d      	ldr	r3, [pc, #52]	@ (8001018 <Auto_Angle+0x100>)
 8000fe4:	781b      	ldrb	r3, [r3, #0]
 8000fe6:	3301      	adds	r3, #1
 8000fe8:	b2da      	uxtb	r2, r3
 8000fea:	4b0b      	ldr	r3, [pc, #44]	@ (8001018 <Auto_Angle+0x100>)
 8000fec:	701a      	strb	r2, [r3, #0]
	}

	return;
 8000fee:	bf00      	nop
 8000ff0:	bf00      	nop
}
 8000ff2:	3708      	adds	r7, #8
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	b020c49b 	.word	0xb020c49b
 8000ffc:	40d2cab2 	.word	0x40d2cab2
 8001000:	200000c4 	.word	0x200000c4
 8001004:	43880000 	.word	0x43880000
 8001008:	200000c8 	.word	0x200000c8
 800100c:	468ca000 	.word	0x468ca000
 8001010:	49742400 	.word	0x49742400
 8001014:	200002b0 	.word	0x200002b0
 8001018:	20000000 	.word	0x20000000
 800101c:	00000000 	.word	0x00000000

08001020 <Auto_Line>:

void Auto_Line(int dist, int min_speed, int max_speed, TIM_HandleTypeDef* htim3) {
 8001020:	b580      	push	{r7, lr}
 8001022:	b088      	sub	sp, #32
 8001024:	af00      	add	r7, sp, #0
 8001026:	60f8      	str	r0, [r7, #12]
 8001028:	60b9      	str	r1, [r7, #8]
 800102a:	607a      	str	r2, [r7, #4]
 800102c:	603b      	str	r3, [r7, #0]
    // Constants
    const float accel_fraction = 0.4; // 40% of total time for acceleration
 800102e:	4b68      	ldr	r3, [pc, #416]	@ (80011d0 <Auto_Line+0x1b0>)
 8001030:	61fb      	str	r3, [r7, #28]
    const float decel_fraction = 0.4; // 40% of total time for deceleration
 8001032:	4b67      	ldr	r3, [pc, #412]	@ (80011d0 <Auto_Line+0x1b0>)
 8001034:	61bb      	str	r3, [r7, #24]

    // Initial setup
    if (timer_count == 0) {
 8001036:	4b67      	ldr	r3, [pc, #412]	@ (80011d4 <Auto_Line+0x1b4>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	2b00      	cmp	r3, #0
 800103c:	d163      	bne.n	8001106 <Auto_Line+0xe6>
    	// Calculate total pulses required
    	int total_pulses = (int)(dist / TRACK_RESOLUTION);
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	2b00      	cmp	r3, #0
 8001042:	da00      	bge.n	8001046 <Auto_Line+0x26>
 8001044:	3303      	adds	r3, #3
 8001046:	109b      	asrs	r3, r3, #2
 8001048:	617b      	str	r3, [r7, #20]

        // Calculate total time
        turning_time = (min_speed + max_speed) / 2.0;
 800104a:	68ba      	ldr	r2, [r7, #8]
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	4413      	add	r3, r2
 8001050:	4618      	mov	r0, r3
 8001052:	f7ff fa7f 	bl	8000554 <__aeabi_i2d>
 8001056:	f04f 0200 	mov.w	r2, #0
 800105a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800105e:	f7ff fc0d 	bl	800087c <__aeabi_ddiv>
 8001062:	4602      	mov	r2, r0
 8001064:	460b      	mov	r3, r1
 8001066:	4610      	mov	r0, r2
 8001068:	4619      	mov	r1, r3
 800106a:	f7ff fd37 	bl	8000adc <__aeabi_d2f>
 800106e:	4603      	mov	r3, r0
 8001070:	4a59      	ldr	r2, [pc, #356]	@ (80011d8 <Auto_Line+0x1b8>)
 8001072:	6013      	str	r3, [r2, #0]
        total_time = (int)((total_pulses / turning_time) * 1e7);
 8001074:	697b      	ldr	r3, [r7, #20]
 8001076:	ee07 3a90 	vmov	s15, r3
 800107a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800107e:	4b56      	ldr	r3, [pc, #344]	@ (80011d8 <Auto_Line+0x1b8>)
 8001080:	edd3 7a00 	vldr	s15, [r3]
 8001084:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001088:	ee16 0a90 	vmov	r0, s13
 800108c:	f7ff fa74 	bl	8000578 <__aeabi_f2d>
 8001090:	a34d      	add	r3, pc, #308	@ (adr r3, 80011c8 <Auto_Line+0x1a8>)
 8001092:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001096:	f7ff fac7 	bl	8000628 <__aeabi_dmul>
 800109a:	4602      	mov	r2, r0
 800109c:	460b      	mov	r3, r1
 800109e:	4610      	mov	r0, r2
 80010a0:	4619      	mov	r1, r3
 80010a2:	f7ff fcd3 	bl	8000a4c <__aeabi_d2iz>
 80010a6:	4603      	mov	r3, r0
 80010a8:	4a4c      	ldr	r2, [pc, #304]	@ (80011dc <Auto_Line+0x1bc>)
 80010aa:	6013      	str	r3, [r2, #0]

        // Calculate time for each phase
        accel_time = (int)(total_time * accel_fraction);
 80010ac:	4b4b      	ldr	r3, [pc, #300]	@ (80011dc <Auto_Line+0x1bc>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	ee07 3a90 	vmov	s15, r3
 80010b4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80010b8:	edd7 7a07 	vldr	s15, [r7, #28]
 80010bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010c0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80010c4:	ee17 2a90 	vmov	r2, s15
 80010c8:	4b45      	ldr	r3, [pc, #276]	@ (80011e0 <Auto_Line+0x1c0>)
 80010ca:	601a      	str	r2, [r3, #0]
        decel_time = (int)(total_time * decel_fraction);
 80010cc:	4b43      	ldr	r3, [pc, #268]	@ (80011dc <Auto_Line+0x1bc>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	ee07 3a90 	vmov	s15, r3
 80010d4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80010d8:	edd7 7a06 	vldr	s15, [r7, #24]
 80010dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010e0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80010e4:	ee17 2a90 	vmov	r2, s15
 80010e8:	4b3e      	ldr	r3, [pc, #248]	@ (80011e4 <Auto_Line+0x1c4>)
 80010ea:	601a      	str	r2, [r3, #0]
        mid_time = total_time - accel_time - decel_time;
 80010ec:	4b3b      	ldr	r3, [pc, #236]	@ (80011dc <Auto_Line+0x1bc>)
 80010ee:	681a      	ldr	r2, [r3, #0]
 80010f0:	4b3b      	ldr	r3, [pc, #236]	@ (80011e0 <Auto_Line+0x1c0>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	1ad2      	subs	r2, r2, r3
 80010f6:	4b3b      	ldr	r3, [pc, #236]	@ (80011e4 <Auto_Line+0x1c4>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	1ad3      	subs	r3, r2, r3
 80010fc:	4a3a      	ldr	r2, [pc, #232]	@ (80011e8 <Auto_Line+0x1c8>)
 80010fe:	6013      	str	r3, [r2, #0]

        // Start timer
        HAL_TIM_Base_Start_IT(&htim7);
 8001100:	483a      	ldr	r0, [pc, #232]	@ (80011ec <Auto_Line+0x1cc>)
 8001102:	f004 fa27 	bl	8005554 <HAL_TIM_Base_Start_IT>
    }

    // Acceleration phase
    if (timer_count < accel_time) {
 8001106:	4b33      	ldr	r3, [pc, #204]	@ (80011d4 <Auto_Line+0x1b4>)
 8001108:	681a      	ldr	r2, [r3, #0]
 800110a:	4b35      	ldr	r3, [pc, #212]	@ (80011e0 <Auto_Line+0x1c0>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	429a      	cmp	r2, r3
 8001110:	da0f      	bge.n	8001132 <Auto_Line+0x112>
        current_speed = min_speed + (max_speed - min_speed) * timer_count / accel_time;
 8001112:	687a      	ldr	r2, [r7, #4]
 8001114:	68bb      	ldr	r3, [r7, #8]
 8001116:	1ad3      	subs	r3, r2, r3
 8001118:	4a2e      	ldr	r2, [pc, #184]	@ (80011d4 <Auto_Line+0x1b4>)
 800111a:	6812      	ldr	r2, [r2, #0]
 800111c:	fb03 f202 	mul.w	r2, r3, r2
 8001120:	4b2f      	ldr	r3, [pc, #188]	@ (80011e0 <Auto_Line+0x1c0>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	fb92 f2f3 	sdiv	r2, r2, r3
 8001128:	68bb      	ldr	r3, [r7, #8]
 800112a:	4413      	add	r3, r2
 800112c:	4a30      	ldr	r2, [pc, #192]	@ (80011f0 <Auto_Line+0x1d0>)
 800112e:	6013      	str	r3, [r2, #0]
 8001130:	e03a      	b.n	80011a8 <Auto_Line+0x188>
    }

    // Constant speed phase
    else if (timer_count < accel_time + mid_time) {
 8001132:	4b2b      	ldr	r3, [pc, #172]	@ (80011e0 <Auto_Line+0x1c0>)
 8001134:	681a      	ldr	r2, [r3, #0]
 8001136:	4b2c      	ldr	r3, [pc, #176]	@ (80011e8 <Auto_Line+0x1c8>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	441a      	add	r2, r3
 800113c:	4b25      	ldr	r3, [pc, #148]	@ (80011d4 <Auto_Line+0x1b4>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	429a      	cmp	r2, r3
 8001142:	dd03      	ble.n	800114c <Auto_Line+0x12c>
        current_speed = max_speed;
 8001144:	4a2a      	ldr	r2, [pc, #168]	@ (80011f0 <Auto_Line+0x1d0>)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	6013      	str	r3, [r2, #0]
 800114a:	e02d      	b.n	80011a8 <Auto_Line+0x188>
    }

    // Deceleration phase
    else if (timer_count < total_time) {
 800114c:	4b21      	ldr	r3, [pc, #132]	@ (80011d4 <Auto_Line+0x1b4>)
 800114e:	681a      	ldr	r2, [r3, #0]
 8001150:	4b22      	ldr	r3, [pc, #136]	@ (80011dc <Auto_Line+0x1bc>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	429a      	cmp	r2, r3
 8001156:	da17      	bge.n	8001188 <Auto_Line+0x168>
        int decel_time_elapsed = timer_count - (accel_time + mid_time);
 8001158:	4b1e      	ldr	r3, [pc, #120]	@ (80011d4 <Auto_Line+0x1b4>)
 800115a:	681a      	ldr	r2, [r3, #0]
 800115c:	4b20      	ldr	r3, [pc, #128]	@ (80011e0 <Auto_Line+0x1c0>)
 800115e:	6819      	ldr	r1, [r3, #0]
 8001160:	4b21      	ldr	r3, [pc, #132]	@ (80011e8 <Auto_Line+0x1c8>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	440b      	add	r3, r1
 8001166:	1ad3      	subs	r3, r2, r3
 8001168:	613b      	str	r3, [r7, #16]
        current_speed = max_speed - (max_speed - min_speed) * decel_time_elapsed / decel_time;
 800116a:	687a      	ldr	r2, [r7, #4]
 800116c:	68bb      	ldr	r3, [r7, #8]
 800116e:	1ad3      	subs	r3, r2, r3
 8001170:	693a      	ldr	r2, [r7, #16]
 8001172:	fb03 f202 	mul.w	r2, r3, r2
 8001176:	4b1b      	ldr	r3, [pc, #108]	@ (80011e4 <Auto_Line+0x1c4>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	fb92 f3f3 	sdiv	r3, r2, r3
 800117e:	687a      	ldr	r2, [r7, #4]
 8001180:	1ad3      	subs	r3, r2, r3
 8001182:	4a1b      	ldr	r2, [pc, #108]	@ (80011f0 <Auto_Line+0x1d0>)
 8001184:	6013      	str	r3, [r2, #0]
 8001186:	e00f      	b.n	80011a8 <Auto_Line+0x188>
    }

    // Stop when finished
    else {
        // Stop timer
        HAL_TIM_Base_Stop_IT(&htim7);
 8001188:	4818      	ldr	r0, [pc, #96]	@ (80011ec <Auto_Line+0x1cc>)
 800118a:	f004 fa53 	bl	8005634 <HAL_TIM_Base_Stop_IT>

        // Stop the motors
        Stop(htim3);
 800118e:	6838      	ldr	r0, [r7, #0]
 8001190:	f000 fa9e 	bl	80016d0 <Stop>

        // Reset temporal counter
        timer_count = 0;
 8001194:	4b0f      	ldr	r3, [pc, #60]	@ (80011d4 <Auto_Line+0x1b4>)
 8001196:	2200      	movs	r2, #0
 8001198:	601a      	str	r2, [r3, #0]

        // Ready for next step
        curr_step++;
 800119a:	4b16      	ldr	r3, [pc, #88]	@ (80011f4 <Auto_Line+0x1d4>)
 800119c:	781b      	ldrb	r3, [r3, #0]
 800119e:	3301      	adds	r3, #1
 80011a0:	b2da      	uxtb	r2, r3
 80011a2:	4b14      	ldr	r3, [pc, #80]	@ (80011f4 <Auto_Line+0x1d4>)
 80011a4:	701a      	strb	r2, [r3, #0]

        // Exit
        return;
 80011a6:	e00a      	b.n	80011be <Auto_Line+0x19e>
    }

    // Adjust speed every iteration
    if(!pause)
 80011a8:	4b13      	ldr	r3, [pc, #76]	@ (80011f8 <Auto_Line+0x1d8>)
 80011aa:	781b      	ldrb	r3, [r3, #0]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d105      	bne.n	80011bc <Auto_Line+0x19c>
    	Avancer(current_speed, htim3);
 80011b0:	4b0f      	ldr	r3, [pc, #60]	@ (80011f0 <Auto_Line+0x1d0>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	6839      	ldr	r1, [r7, #0]
 80011b6:	4618      	mov	r0, r3
 80011b8:	f000 f9aa 	bl	8001510 <Avancer>

    return;
 80011bc:	bf00      	nop
}
 80011be:	3720      	adds	r7, #32
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	f3af 8000 	nop.w
 80011c8:	00000000 	.word	0x00000000
 80011cc:	416312d0 	.word	0x416312d0
 80011d0:	3ecccccd 	.word	0x3ecccccd
 80011d4:	200000c4 	.word	0x200000c4
 80011d8:	200000c8 	.word	0x200000c8
 80011dc:	200000b0 	.word	0x200000b0
 80011e0:	200000b4 	.word	0x200000b4
 80011e4:	200000b8 	.word	0x200000b8
 80011e8:	200000bc 	.word	0x200000bc
 80011ec:	200002b0 	.word	0x200002b0
 80011f0:	200000c0 	.word	0x200000c0
 80011f4:	20000000 	.word	0x20000000
 80011f8:	200000ac 	.word	0x200000ac
 80011fc:	00000000 	.word	0x00000000

08001200 <Auto_Circle>:


void Auto_Circle(TIM_HandleTypeDef* htim3) {
 8001200:	b580      	push	{r7, lr}
 8001202:	b084      	sub	sp, #16
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
	// Initial setup
	if(timer_count == 0) {
 8001208:	4b3b      	ldr	r3, [pc, #236]	@ (80012f8 <Auto_Circle+0xf8>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	2b00      	cmp	r3, #0
 800120e:	d14f      	bne.n	80012b0 <Auto_Circle+0xb0>

		// Calculate total steps required
		int total_steps = (int)((PI * DISTANCE) / TRACK_RESOLUTION);
 8001210:	f240 3311 	movw	r3, #785	@ 0x311
 8001214:	60fb      	str	r3, [r7, #12]

		// Calculate required time
		turning_time = (BASE_SPEED / total_steps) * 1e6;
 8001216:	f44f 72e1 	mov.w	r2, #450	@ 0x1c2
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	fb92 f3f3 	sdiv	r3, r2, r3
 8001220:	4618      	mov	r0, r3
 8001222:	f7ff f997 	bl	8000554 <__aeabi_i2d>
 8001226:	a330      	add	r3, pc, #192	@ (adr r3, 80012e8 <Auto_Circle+0xe8>)
 8001228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800122c:	f7ff f9fc 	bl	8000628 <__aeabi_dmul>
 8001230:	4602      	mov	r2, r0
 8001232:	460b      	mov	r3, r1
 8001234:	4610      	mov	r0, r2
 8001236:	4619      	mov	r1, r3
 8001238:	f7ff fc50 	bl	8000adc <__aeabi_d2f>
 800123c:	4603      	mov	r3, r0
 800123e:	4a2f      	ldr	r2, [pc, #188]	@ (80012fc <Auto_Circle+0xfc>)
 8001240:	6013      	str	r3, [r2, #0]

		// Calculate wheel inner wheel ratio
		float ratio = 0.9 * ((int)((2 * PI * ((DISTANCE * 0.5) - TRACK_WIDTH)) / TRACK_RESOLUTION) / total_steps);
 8001242:	f44f 72b3 	mov.w	r2, #358	@ 0x166
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	fb92 f3f3 	sdiv	r3, r2, r3
 800124c:	4618      	mov	r0, r3
 800124e:	f7ff f981 	bl	8000554 <__aeabi_i2d>
 8001252:	a327      	add	r3, pc, #156	@ (adr r3, 80012f0 <Auto_Circle+0xf0>)
 8001254:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001258:	f7ff f9e6 	bl	8000628 <__aeabi_dmul>
 800125c:	4602      	mov	r2, r0
 800125e:	460b      	mov	r3, r1
 8001260:	4610      	mov	r0, r2
 8001262:	4619      	mov	r1, r3
 8001264:	f7ff fc3a 	bl	8000adc <__aeabi_d2f>
 8001268:	4603      	mov	r3, r0
 800126a:	60bb      	str	r3, [r7, #8]

		// Constant speed
		htim3->Instance -> CCR2 = 0;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	2200      	movs	r2, #0
 8001272:	639a      	str	r2, [r3, #56]	@ 0x38
		htim3->Instance -> CCR4 = 0;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	2200      	movs	r2, #0
 800127a:	641a      	str	r2, [r3, #64]	@ 0x40
		htim3->Instance -> CCR1 = BASE_SPEED;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f44f 72e1 	mov.w	r2, #450	@ 0x1c2
 8001284:	635a      	str	r2, [r3, #52]	@ 0x34
		htim3->Instance -> CCR3 = htim3->Instance -> CCR1 * ratio;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800128c:	ee07 3a90 	vmov	s15, r3
 8001290:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001294:	edd7 7a02 	vldr	s15, [r7, #8]
 8001298:	ee67 7a27 	vmul.f32	s15, s14, s15
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80012a4:	ee17 2a90 	vmov	r2, s15
 80012a8:	63da      	str	r2, [r3, #60]	@ 0x3c
		HAL_TIM_Base_Start_IT(&htim7);
 80012aa:	4815      	ldr	r0, [pc, #84]	@ (8001300 <Auto_Circle+0x100>)
 80012ac:	f004 f952 	bl	8005554 <HAL_TIM_Base_Start_IT>
	}

	// Stop when finished
	if(timer_count > (int)turning_time) {
 80012b0:	4b12      	ldr	r3, [pc, #72]	@ (80012fc <Auto_Circle+0xfc>)
 80012b2:	edd3 7a00 	vldr	s15, [r3]
 80012b6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012ba:	ee17 2a90 	vmov	r2, s15
 80012be:	4b0e      	ldr	r3, [pc, #56]	@ (80012f8 <Auto_Circle+0xf8>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	429a      	cmp	r2, r3
 80012c4:	da09      	bge.n	80012da <Auto_Circle+0xda>

		// Stop timer
		HAL_TIM_Base_Stop_IT(&htim7);
 80012c6:	480e      	ldr	r0, [pc, #56]	@ (8001300 <Auto_Circle+0x100>)
 80012c8:	f004 f9b4 	bl	8005634 <HAL_TIM_Base_Stop_IT>

		// Stop the motors
		Stop(htim3);
 80012cc:	6878      	ldr	r0, [r7, #4]
 80012ce:	f000 f9ff 	bl	80016d0 <Stop>

		// Reset temporal counter
		timer_count = 0;
 80012d2:	4b09      	ldr	r3, [pc, #36]	@ (80012f8 <Auto_Circle+0xf8>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	601a      	str	r2, [r3, #0]
	}

	return;
 80012d8:	bf00      	nop
 80012da:	bf00      	nop
}
 80012dc:	3710      	adds	r7, #16
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	f3af 8000 	nop.w
 80012e8:	00000000 	.word	0x00000000
 80012ec:	412e8480 	.word	0x412e8480
 80012f0:	cccccccd 	.word	0xcccccccd
 80012f4:	3feccccc 	.word	0x3feccccc
 80012f8:	200000c4 	.word	0x200000c4
 80012fc:	200000c8 	.word	0x200000c8
 8001300:	200002b0 	.word	0x200002b0

08001304 <Auto_Back_Forth>:

void Auto_Back_Forth(TIM_HandleTypeDef* htim3) {
 8001304:	b580      	push	{r7, lr}
 8001306:	b082      	sub	sp, #8
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
	// Manage ongoing step
	switch(curr_step) {
 800130c:	4b1d      	ldr	r3, [pc, #116]	@ (8001384 <Auto_Back_Forth+0x80>)
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	3b01      	subs	r3, #1
 8001312:	2b03      	cmp	r3, #3
 8001314:	d82a      	bhi.n	800136c <Auto_Back_Forth+0x68>
 8001316:	a201      	add	r2, pc, #4	@ (adr r2, 800131c <Auto_Back_Forth+0x18>)
 8001318:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800131c:	0800132d 	.word	0x0800132d
 8001320:	08001341 	.word	0x08001341
 8001324:	0800134d 	.word	0x0800134d
 8001328:	08001361 	.word	0x08001361
	case 1:
		// Step 1: Move forward 1 meter
		Auto_Line(DISTANCE, BASE_SPEED, BASE_SPEED, htim3);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	f44f 72e1 	mov.w	r2, #450	@ 0x1c2
 8001332:	f44f 71e1 	mov.w	r1, #450	@ 0x1c2
 8001336:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800133a:	f7ff fe71 	bl	8001020 <Auto_Line>
		break;
 800133e:	e01c      	b.n	800137a <Auto_Back_Forth+0x76>

	case 2:
		// Step 2: Turn 180 degrees
		Auto_Angle(180.0, htim3);
 8001340:	6878      	ldr	r0, [r7, #4]
 8001342:	ed9f 0a11 	vldr	s0, [pc, #68]	@ 8001388 <Auto_Back_Forth+0x84>
 8001346:	f7ff fde7 	bl	8000f18 <Auto_Angle>
		break;
 800134a:	e016      	b.n	800137a <Auto_Back_Forth+0x76>

	case 3:
		// Step 3: Move backward 1 meter
		Auto_Line(DISTANCE, BASE_SPEED, BASE_SPEED, htim3);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	f44f 72e1 	mov.w	r2, #450	@ 0x1c2
 8001352:	f44f 71e1 	mov.w	r1, #450	@ 0x1c2
 8001356:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800135a:	f7ff fe61 	bl	8001020 <Auto_Line>
		break;
 800135e:	e00c      	b.n	800137a <Auto_Back_Forth+0x76>

	case 4:
		// Step 4: Turn 180 degrees again to face the original direction
	    Auto_Angle(180.0, htim3);
 8001360:	6878      	ldr	r0, [r7, #4]
 8001362:	ed9f 0a09 	vldr	s0, [pc, #36]	@ 8001388 <Auto_Back_Forth+0x84>
 8001366:	f7ff fdd7 	bl	8000f18 <Auto_Angle>
		break;
 800136a:	e006      	b.n	800137a <Auto_Back_Forth+0x76>

	default:
		// End of sequence : reset current step and set to manual mode after drawing shape
		curr_step = 1;
 800136c:	4b05      	ldr	r3, [pc, #20]	@ (8001384 <Auto_Back_Forth+0x80>)
 800136e:	2201      	movs	r2, #1
 8001370:	701a      	strb	r2, [r3, #0]
		curr_mode = MANUAL_MODE;
 8001372:	4b06      	ldr	r3, [pc, #24]	@ (800138c <Auto_Back_Forth+0x88>)
 8001374:	2200      	movs	r2, #0
 8001376:	701a      	strb	r2, [r3, #0]
		break;
 8001378:	bf00      	nop
	}
	return;
 800137a:	bf00      	nop
}
 800137c:	3708      	adds	r7, #8
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	20000000 	.word	0x20000000
 8001388:	43340000 	.word	0x43340000
 800138c:	200000ae 	.word	0x200000ae

08001390 <Auto_Square>:

void Auto_Square(TIM_HandleTypeDef* htim3) {
 8001390:	b580      	push	{r7, lr}
 8001392:	b082      	sub	sp, #8
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
	// Manage ongoing step
	switch(curr_step) {
 8001398:	4b1b      	ldr	r3, [pc, #108]	@ (8001408 <Auto_Square+0x78>)
 800139a:	781b      	ldrb	r3, [r3, #0]
 800139c:	2b08      	cmp	r3, #8
 800139e:	bf8c      	ite	hi
 80013a0:	2201      	movhi	r2, #1
 80013a2:	2200      	movls	r2, #0
 80013a4:	b2d2      	uxtb	r2, r2
 80013a6:	2a00      	cmp	r2, #0
 80013a8:	d123      	bne.n	80013f2 <Auto_Square+0x62>
 80013aa:	2201      	movs	r2, #1
 80013ac:	fa02 f303 	lsl.w	r3, r2, r3
 80013b0:	f403 72aa 	and.w	r2, r3, #340	@ 0x154
 80013b4:	2a00      	cmp	r2, #0
 80013b6:	bf14      	ite	ne
 80013b8:	2201      	movne	r2, #1
 80013ba:	2200      	moveq	r2, #0
 80013bc:	b2d2      	uxtb	r2, r2
 80013be:	2a00      	cmp	r2, #0
 80013c0:	d111      	bne.n	80013e6 <Auto_Square+0x56>
 80013c2:	f003 03aa 	and.w	r3, r3, #170	@ 0xaa
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	bf14      	ite	ne
 80013ca:	2301      	movne	r3, #1
 80013cc:	2300      	moveq	r3, #0
 80013ce:	b2db      	uxtb	r3, r3
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d00e      	beq.n	80013f2 <Auto_Square+0x62>
	case 1:
	case 3:
	case 5:
	case 7:
		// Odd steps: Move forward
		Auto_Line(DISTANCE, (BASE_SPEED * 0.333), BASE_SPEED, htim3);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	f44f 72e1 	mov.w	r2, #450	@ 0x1c2
 80013da:	2195      	movs	r1, #149	@ 0x95
 80013dc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80013e0:	f7ff fe1e 	bl	8001020 <Auto_Line>
		break;
 80013e4:	e00c      	b.n	8001400 <Auto_Square+0x70>
	case 2:
	case 4:
	case 6:
	case 8:
		// Even steps: Turn 90 degrees
		Auto_Angle(90.0, htim3);
 80013e6:	6878      	ldr	r0, [r7, #4]
 80013e8:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 800140c <Auto_Square+0x7c>
 80013ec:	f7ff fd94 	bl	8000f18 <Auto_Angle>
		break;
 80013f0:	e006      	b.n	8001400 <Auto_Square+0x70>

	default:
		// End of sequence : reset current step and set to manual mode after drawing shape
		curr_step = 1;
 80013f2:	4b05      	ldr	r3, [pc, #20]	@ (8001408 <Auto_Square+0x78>)
 80013f4:	2201      	movs	r2, #1
 80013f6:	701a      	strb	r2, [r3, #0]
		curr_mode = MANUAL_MODE;
 80013f8:	4b05      	ldr	r3, [pc, #20]	@ (8001410 <Auto_Square+0x80>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	701a      	strb	r2, [r3, #0]
		break;
 80013fe:	bf00      	nop
	}
	return;
 8001400:	bf00      	nop
}
 8001402:	3708      	adds	r7, #8
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}
 8001408:	20000000 	.word	0x20000000
 800140c:	42b40000 	.word	0x42b40000
 8001410:	200000ae 	.word	0x200000ae

08001414 <Pause>:

void Pause(TIM_HandleTypeDef* htim3) {
 8001414:	b580      	push	{r7, lr}
 8001416:	b082      	sub	sp, #8
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
	pause = pause ^ 1;
 800141c:	4b1a      	ldr	r3, [pc, #104]	@ (8001488 <Pause+0x74>)
 800141e:	781b      	ldrb	r3, [r3, #0]
 8001420:	f083 0301 	eor.w	r3, r3, #1
 8001424:	b2da      	uxtb	r2, r3
 8001426:	4b18      	ldr	r3, [pc, #96]	@ (8001488 <Pause+0x74>)
 8001428:	701a      	strb	r2, [r3, #0]

	// Save currrent CCR values
	save[0] = htim3->Instance -> CCR1;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001430:	461a      	mov	r2, r3
 8001432:	4b16      	ldr	r3, [pc, #88]	@ (800148c <Pause+0x78>)
 8001434:	601a      	str	r2, [r3, #0]
	save[1] = htim3->Instance -> CCR2;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800143c:	461a      	mov	r2, r3
 800143e:	4b13      	ldr	r3, [pc, #76]	@ (800148c <Pause+0x78>)
 8001440:	605a      	str	r2, [r3, #4]
	save[2] = htim3->Instance -> CCR3;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001448:	461a      	mov	r2, r3
 800144a:	4b10      	ldr	r3, [pc, #64]	@ (800148c <Pause+0x78>)
 800144c:	609a      	str	r2, [r3, #8]
	save[3] = htim3->Instance -> CCR4;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001454:	461a      	mov	r2, r3
 8001456:	4b0d      	ldr	r3, [pc, #52]	@ (800148c <Pause+0x78>)
 8001458:	60da      	str	r2, [r3, #12]

	// Stop
	HAL_TIM_PWM_Stop(htim3, TIM_CHANNEL_1);
 800145a:	2100      	movs	r1, #0
 800145c:	6878      	ldr	r0, [r7, #4]
 800145e:	f004 fa39 	bl	80058d4 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(htim3, TIM_CHANNEL_2);
 8001462:	2104      	movs	r1, #4
 8001464:	6878      	ldr	r0, [r7, #4]
 8001466:	f004 fa35 	bl	80058d4 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(htim3, TIM_CHANNEL_3);
 800146a:	2108      	movs	r1, #8
 800146c:	6878      	ldr	r0, [r7, #4]
 800146e:	f004 fa31 	bl	80058d4 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(htim3, TIM_CHANNEL_4);
 8001472:	210c      	movs	r1, #12
 8001474:	6878      	ldr	r0, [r7, #4]
 8001476:	f004 fa2d 	bl	80058d4 <HAL_TIM_PWM_Stop>
	HAL_TIM_Base_Stop_IT(&htim7);
 800147a:	4805      	ldr	r0, [pc, #20]	@ (8001490 <Pause+0x7c>)
 800147c:	f004 f8da 	bl	8005634 <HAL_TIM_Base_Stop_IT>

	return;
 8001480:	bf00      	nop
}
 8001482:	3708      	adds	r7, #8
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}
 8001488:	200000ac 	.word	0x200000ac
 800148c:	200000cc 	.word	0x200000cc
 8001490:	200002b0 	.word	0x200002b0

08001494 <Resume>:

void Resume(TIM_HandleTypeDef* htim3) {
 8001494:	b580      	push	{r7, lr}
 8001496:	b082      	sub	sp, #8
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
	pause = pause ^ 1;
 800149c:	4b18      	ldr	r3, [pc, #96]	@ (8001500 <Resume+0x6c>)
 800149e:	781b      	ldrb	r3, [r3, #0]
 80014a0:	f083 0301 	eor.w	r3, r3, #1
 80014a4:	b2da      	uxtb	r2, r3
 80014a6:	4b16      	ldr	r3, [pc, #88]	@ (8001500 <Resume+0x6c>)
 80014a8:	701a      	strb	r2, [r3, #0]

	// Restore saved CCR values
	HAL_TIM_PWM_Start(htim3, TIM_CHANNEL_1);
 80014aa:	2100      	movs	r1, #0
 80014ac:	6878      	ldr	r0, [r7, #4]
 80014ae:	f004 f949 	bl	8005744 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(htim3, TIM_CHANNEL_2);
 80014b2:	2104      	movs	r1, #4
 80014b4:	6878      	ldr	r0, [r7, #4]
 80014b6:	f004 f945 	bl	8005744 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(htim3, TIM_CHANNEL_3);
 80014ba:	2108      	movs	r1, #8
 80014bc:	6878      	ldr	r0, [r7, #4]
 80014be:	f004 f941 	bl	8005744 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(htim3, TIM_CHANNEL_4);
 80014c2:	210c      	movs	r1, #12
 80014c4:	6878      	ldr	r0, [r7, #4]
 80014c6:	f004 f93d 	bl	8005744 <HAL_TIM_PWM_Start>
	htim3->Instance -> CCR1 = save[0];
 80014ca:	4b0e      	ldr	r3, [pc, #56]	@ (8001504 <Resume+0x70>)
 80014cc:	681a      	ldr	r2, [r3, #0]
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	635a      	str	r2, [r3, #52]	@ 0x34
	htim3->Instance -> CCR2 = save[1];
 80014d4:	4b0b      	ldr	r3, [pc, #44]	@ (8001504 <Resume+0x70>)
 80014d6:	685a      	ldr	r2, [r3, #4]
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	639a      	str	r2, [r3, #56]	@ 0x38
	htim3->Instance -> CCR3 = save[2];
 80014de:	4b09      	ldr	r3, [pc, #36]	@ (8001504 <Resume+0x70>)
 80014e0:	689a      	ldr	r2, [r3, #8]
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	63da      	str	r2, [r3, #60]	@ 0x3c
	htim3->Instance -> CCR4 = save[3];
 80014e8:	4b06      	ldr	r3, [pc, #24]	@ (8001504 <Resume+0x70>)
 80014ea:	68da      	ldr	r2, [r3, #12]
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	641a      	str	r2, [r3, #64]	@ 0x40
	HAL_TIM_Base_Start_IT(&htim7);
 80014f2:	4805      	ldr	r0, [pc, #20]	@ (8001508 <Resume+0x74>)
 80014f4:	f004 f82e 	bl	8005554 <HAL_TIM_Base_Start_IT>

	return;
 80014f8:	bf00      	nop
}
 80014fa:	3708      	adds	r7, #8
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	200000ac 	.word	0x200000ac
 8001504:	200000cc 	.word	0x200000cc
 8001508:	200002b0 	.word	0x200002b0
 800150c:	00000000 	.word	0x00000000

08001510 <Avancer>:
 *      Author: sebas
 */

#include "gestion_moteurs.h"

void Avancer(int Pulse, TIM_HandleTypeDef* htim3){
 8001510:	b590      	push	{r4, r7, lr}
 8001512:	b083      	sub	sp, #12
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
 8001518:	6039      	str	r1, [r7, #0]

	htim3->Instance -> CCR2 = 0;
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	2200      	movs	r2, #0
 8001520:	639a      	str	r2, [r3, #56]	@ 0x38
	htim3->Instance -> CCR4 = 0;
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	2200      	movs	r2, #0
 8001528:	641a      	str	r2, [r3, #64]	@ 0x40

	if(Pulse > 499){
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001530:	db02      	blt.n	8001538 <Avancer+0x28>
		Pulse = 499;
 8001532:	f240 13f3 	movw	r3, #499	@ 0x1f3
 8001536:	607b      	str	r3, [r7, #4]
	}

	htim3->Instance -> CCR1 = Pulse;
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	687a      	ldr	r2, [r7, #4]
 800153e:	635a      	str	r2, [r3, #52]	@ 0x34
	htim3->Instance -> CCR3 = htim3->Instance -> CCR1 * 0.9;
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001546:	4618      	mov	r0, r3
 8001548:	f7fe fff4 	bl	8000534 <__aeabi_ui2d>
 800154c:	a30a      	add	r3, pc, #40	@ (adr r3, 8001578 <Avancer+0x68>)
 800154e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001552:	f7ff f869 	bl	8000628 <__aeabi_dmul>
 8001556:	4602      	mov	r2, r0
 8001558:	460b      	mov	r3, r1
 800155a:	4610      	mov	r0, r2
 800155c:	4619      	mov	r1, r3
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	681c      	ldr	r4, [r3, #0]
 8001562:	f7ff fa9b 	bl	8000a9c <__aeabi_d2uiz>
 8001566:	4603      	mov	r3, r0
 8001568:	63e3      	str	r3, [r4, #60]	@ 0x3c

	return;
 800156a:	bf00      	nop
}
 800156c:	370c      	adds	r7, #12
 800156e:	46bd      	mov	sp, r7
 8001570:	bd90      	pop	{r4, r7, pc}
 8001572:	bf00      	nop
 8001574:	f3af 8000 	nop.w
 8001578:	cccccccd 	.word	0xcccccccd
 800157c:	3feccccc 	.word	0x3feccccc

08001580 <Droite>:

void Droite(int Pulse, TIM_HandleTypeDef* htim3){
 8001580:	b590      	push	{r4, r7, lr}
 8001582:	b083      	sub	sp, #12
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
 8001588:	6039      	str	r1, [r7, #0]

	htim3->Instance -> CCR2 = 0;
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	2200      	movs	r2, #0
 8001590:	639a      	str	r2, [r3, #56]	@ 0x38
	htim3->Instance -> CCR3 = 0;
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	2200      	movs	r2, #0
 8001598:	63da      	str	r2, [r3, #60]	@ 0x3c

	if(Pulse > 499){
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80015a0:	db02      	blt.n	80015a8 <Droite+0x28>
		Pulse = 499;
 80015a2:	f240 13f3 	movw	r3, #499	@ 0x1f3
 80015a6:	607b      	str	r3, [r7, #4]
	}
	htim3->Instance -> CCR1 = Pulse;
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	687a      	ldr	r2, [r7, #4]
 80015ae:	635a      	str	r2, [r3, #52]	@ 0x34
	htim3->Instance -> CCR4 = htim3->Instance -> CCR1 * 0.9;
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80015b6:	4618      	mov	r0, r3
 80015b8:	f7fe ffbc 	bl	8000534 <__aeabi_ui2d>
 80015bc:	a30a      	add	r3, pc, #40	@ (adr r3, 80015e8 <Droite+0x68>)
 80015be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015c2:	f7ff f831 	bl	8000628 <__aeabi_dmul>
 80015c6:	4602      	mov	r2, r0
 80015c8:	460b      	mov	r3, r1
 80015ca:	4610      	mov	r0, r2
 80015cc:	4619      	mov	r1, r3
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	681c      	ldr	r4, [r3, #0]
 80015d2:	f7ff fa63 	bl	8000a9c <__aeabi_d2uiz>
 80015d6:	4603      	mov	r3, r0
 80015d8:	6423      	str	r3, [r4, #64]	@ 0x40
}
 80015da:	bf00      	nop
 80015dc:	370c      	adds	r7, #12
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd90      	pop	{r4, r7, pc}
 80015e2:	bf00      	nop
 80015e4:	f3af 8000 	nop.w
 80015e8:	cccccccd 	.word	0xcccccccd
 80015ec:	3feccccc 	.word	0x3feccccc

080015f0 <Gauche>:

void Gauche(int Pulse, TIM_HandleTypeDef* htim3){
 80015f0:	b590      	push	{r4, r7, lr}
 80015f2:	b083      	sub	sp, #12
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
 80015f8:	6039      	str	r1, [r7, #0]

	htim3->Instance -> CCR1 = 0;
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	2200      	movs	r2, #0
 8001600:	635a      	str	r2, [r3, #52]	@ 0x34
	htim3->Instance -> CCR4 = 0;
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	2200      	movs	r2, #0
 8001608:	641a      	str	r2, [r3, #64]	@ 0x40

	if(Pulse > 499){
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001610:	db02      	blt.n	8001618 <Gauche+0x28>
		Pulse = 499;
 8001612:	f240 13f3 	movw	r3, #499	@ 0x1f3
 8001616:	607b      	str	r3, [r7, #4]
	}
	htim3->Instance -> CCR2 = Pulse;
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	687a      	ldr	r2, [r7, #4]
 800161e:	639a      	str	r2, [r3, #56]	@ 0x38
	htim3->Instance -> CCR3 = htim3->Instance -> CCR2 * 0.9;
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001626:	4618      	mov	r0, r3
 8001628:	f7fe ff84 	bl	8000534 <__aeabi_ui2d>
 800162c:	a30a      	add	r3, pc, #40	@ (adr r3, 8001658 <Gauche+0x68>)
 800162e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001632:	f7fe fff9 	bl	8000628 <__aeabi_dmul>
 8001636:	4602      	mov	r2, r0
 8001638:	460b      	mov	r3, r1
 800163a:	4610      	mov	r0, r2
 800163c:	4619      	mov	r1, r3
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	681c      	ldr	r4, [r3, #0]
 8001642:	f7ff fa2b 	bl	8000a9c <__aeabi_d2uiz>
 8001646:	4603      	mov	r3, r0
 8001648:	63e3      	str	r3, [r4, #60]	@ 0x3c
}
 800164a:	bf00      	nop
 800164c:	370c      	adds	r7, #12
 800164e:	46bd      	mov	sp, r7
 8001650:	bd90      	pop	{r4, r7, pc}
 8001652:	bf00      	nop
 8001654:	f3af 8000 	nop.w
 8001658:	cccccccd 	.word	0xcccccccd
 800165c:	3feccccc 	.word	0x3feccccc

08001660 <Reculer>:

void Reculer(int Pulse,TIM_HandleTypeDef* htim3){
 8001660:	b590      	push	{r4, r7, lr}
 8001662:	b083      	sub	sp, #12
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
 8001668:	6039      	str	r1, [r7, #0]

	htim3->Instance -> CCR1 = 0;
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	2200      	movs	r2, #0
 8001670:	635a      	str	r2, [r3, #52]	@ 0x34
	htim3->Instance -> CCR3 = 0;
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	2200      	movs	r2, #0
 8001678:	63da      	str	r2, [r3, #60]	@ 0x3c

	if(Pulse > 499){
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001680:	db02      	blt.n	8001688 <Reculer+0x28>
		Pulse = 499;
 8001682:	f240 13f3 	movw	r3, #499	@ 0x1f3
 8001686:	607b      	str	r3, [r7, #4]
	}

	htim3->Instance -> CCR4 = Pulse;
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	687a      	ldr	r2, [r7, #4]
 800168e:	641a      	str	r2, [r3, #64]	@ 0x40
	htim3->Instance -> CCR2 = htim3->Instance -> CCR4 * 0.95;
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001696:	4618      	mov	r0, r3
 8001698:	f7fe ff4c 	bl	8000534 <__aeabi_ui2d>
 800169c:	a30a      	add	r3, pc, #40	@ (adr r3, 80016c8 <Reculer+0x68>)
 800169e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016a2:	f7fe ffc1 	bl	8000628 <__aeabi_dmul>
 80016a6:	4602      	mov	r2, r0
 80016a8:	460b      	mov	r3, r1
 80016aa:	4610      	mov	r0, r2
 80016ac:	4619      	mov	r1, r3
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	681c      	ldr	r4, [r3, #0]
 80016b2:	f7ff f9f3 	bl	8000a9c <__aeabi_d2uiz>
 80016b6:	4603      	mov	r3, r0
 80016b8:	63a3      	str	r3, [r4, #56]	@ 0x38

	return;
 80016ba:	bf00      	nop
}
 80016bc:	370c      	adds	r7, #12
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd90      	pop	{r4, r7, pc}
 80016c2:	bf00      	nop
 80016c4:	f3af 8000 	nop.w
 80016c8:	66666666 	.word	0x66666666
 80016cc:	3fee6666 	.word	0x3fee6666

080016d0 <Stop>:
void Stop(TIM_HandleTypeDef* htim3){
 80016d0:	b480      	push	{r7}
 80016d2:	b083      	sub	sp, #12
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
	htim3->Instance -> CCR1 = 0;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	2200      	movs	r2, #0
 80016de:	635a      	str	r2, [r3, #52]	@ 0x34
	htim3->Instance -> CCR2 = 0;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	2200      	movs	r2, #0
 80016e6:	639a      	str	r2, [r3, #56]	@ 0x38
	htim3->Instance -> CCR3 = 0;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	2200      	movs	r2, #0
 80016ee:	63da      	str	r2, [r3, #60]	@ 0x3c
	htim3->Instance -> CCR4 = 0;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	2200      	movs	r2, #0
 80016f6:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80016f8:	bf00      	nop
 80016fa:	370c      	adds	r7, #12
 80016fc:	46bd      	mov	sp, r7
 80016fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001702:	4770      	bx	lr

08001704 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b08a      	sub	sp, #40	@ 0x28
 8001708:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800170a:	f107 0314 	add.w	r3, r7, #20
 800170e:	2200      	movs	r2, #0
 8001710:	601a      	str	r2, [r3, #0]
 8001712:	605a      	str	r2, [r3, #4]
 8001714:	609a      	str	r2, [r3, #8]
 8001716:	60da      	str	r2, [r3, #12]
 8001718:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800171a:	2300      	movs	r3, #0
 800171c:	613b      	str	r3, [r7, #16]
 800171e:	4b4d      	ldr	r3, [pc, #308]	@ (8001854 <MX_GPIO_Init+0x150>)
 8001720:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001722:	4a4c      	ldr	r2, [pc, #304]	@ (8001854 <MX_GPIO_Init+0x150>)
 8001724:	f043 0304 	orr.w	r3, r3, #4
 8001728:	6313      	str	r3, [r2, #48]	@ 0x30
 800172a:	4b4a      	ldr	r3, [pc, #296]	@ (8001854 <MX_GPIO_Init+0x150>)
 800172c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800172e:	f003 0304 	and.w	r3, r3, #4
 8001732:	613b      	str	r3, [r7, #16]
 8001734:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001736:	2300      	movs	r3, #0
 8001738:	60fb      	str	r3, [r7, #12]
 800173a:	4b46      	ldr	r3, [pc, #280]	@ (8001854 <MX_GPIO_Init+0x150>)
 800173c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800173e:	4a45      	ldr	r2, [pc, #276]	@ (8001854 <MX_GPIO_Init+0x150>)
 8001740:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001744:	6313      	str	r3, [r2, #48]	@ 0x30
 8001746:	4b43      	ldr	r3, [pc, #268]	@ (8001854 <MX_GPIO_Init+0x150>)
 8001748:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800174a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800174e:	60fb      	str	r3, [r7, #12]
 8001750:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001752:	2300      	movs	r3, #0
 8001754:	60bb      	str	r3, [r7, #8]
 8001756:	4b3f      	ldr	r3, [pc, #252]	@ (8001854 <MX_GPIO_Init+0x150>)
 8001758:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800175a:	4a3e      	ldr	r2, [pc, #248]	@ (8001854 <MX_GPIO_Init+0x150>)
 800175c:	f043 0301 	orr.w	r3, r3, #1
 8001760:	6313      	str	r3, [r2, #48]	@ 0x30
 8001762:	4b3c      	ldr	r3, [pc, #240]	@ (8001854 <MX_GPIO_Init+0x150>)
 8001764:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001766:	f003 0301 	and.w	r3, r3, #1
 800176a:	60bb      	str	r3, [r7, #8]
 800176c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800176e:	2300      	movs	r3, #0
 8001770:	607b      	str	r3, [r7, #4]
 8001772:	4b38      	ldr	r3, [pc, #224]	@ (8001854 <MX_GPIO_Init+0x150>)
 8001774:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001776:	4a37      	ldr	r2, [pc, #220]	@ (8001854 <MX_GPIO_Init+0x150>)
 8001778:	f043 0302 	orr.w	r3, r3, #2
 800177c:	6313      	str	r3, [r2, #48]	@ 0x30
 800177e:	4b35      	ldr	r3, [pc, #212]	@ (8001854 <MX_GPIO_Init+0x150>)
 8001780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001782:	f003 0302 	and.w	r3, r3, #2
 8001786:	607b      	str	r3, [r7, #4]
 8001788:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800178a:	2200      	movs	r2, #0
 800178c:	2120      	movs	r1, #32
 800178e:	4832      	ldr	r0, [pc, #200]	@ (8001858 <MX_GPIO_Init+0x154>)
 8001790:	f001 fdd2 	bl	8003338 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI_RST_Pin|SPI_CS_Pin|SPI_DC_Pin, GPIO_PIN_RESET);
 8001794:	2200      	movs	r2, #0
 8001796:	f44f 4160 	mov.w	r1, #57344	@ 0xe000
 800179a:	4830      	ldr	r0, [pc, #192]	@ (800185c <MX_GPIO_Init+0x158>)
 800179c:	f001 fdcc 	bl	8003338 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Blue_Button_Pin;
 80017a0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80017a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80017a6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80017aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ac:	2300      	movs	r3, #0
 80017ae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Blue_Button_GPIO_Port, &GPIO_InitStruct);
 80017b0:	f107 0314 	add.w	r3, r7, #20
 80017b4:	4619      	mov	r1, r3
 80017b6:	482a      	ldr	r0, [pc, #168]	@ (8001860 <MX_GPIO_Init+0x15c>)
 80017b8:	f001 fc12 	bl	8002fe0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = Dipswitch_MSB_Pin|Dipswitch_LSB_Pin|Encodeur_D_B_Pin;
 80017bc:	238c      	movs	r3, #140	@ 0x8c
 80017be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017c0:	2300      	movs	r3, #0
 80017c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80017c4:	2302      	movs	r3, #2
 80017c6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017c8:	f107 0314 	add.w	r3, r7, #20
 80017cc:	4619      	mov	r1, r3
 80017ce:	4824      	ldr	r0, [pc, #144]	@ (8001860 <MX_GPIO_Init+0x15c>)
 80017d0:	f001 fc06 	bl	8002fe0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80017d4:	2320      	movs	r3, #32
 80017d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017d8:	2301      	movs	r3, #1
 80017da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017dc:	2300      	movs	r3, #0
 80017de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017e0:	2300      	movs	r3, #0
 80017e2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80017e4:	f107 0314 	add.w	r3, r7, #20
 80017e8:	4619      	mov	r1, r3
 80017ea:	481b      	ldr	r0, [pc, #108]	@ (8001858 <MX_GPIO_Init+0x154>)
 80017ec:	f001 fbf8 	bl	8002fe0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = SPI_RST_Pin|SPI_CS_Pin|SPI_DC_Pin;
 80017f0:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 80017f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017f6:	2301      	movs	r3, #1
 80017f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017fa:	2300      	movs	r3, #0
 80017fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017fe:	2300      	movs	r3, #0
 8001800:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001802:	f107 0314 	add.w	r3, r7, #20
 8001806:	4619      	mov	r1, r3
 8001808:	4814      	ldr	r0, [pc, #80]	@ (800185c <MX_GPIO_Init+0x158>)
 800180a:	f001 fbe9 	bl	8002fe0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = Encodeur_G_A_Pin|Encodeur_D_A_Pin;
 800180e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001812:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001814:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001818:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800181a:	2302      	movs	r3, #2
 800181c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800181e:	f107 0314 	add.w	r3, r7, #20
 8001822:	4619      	mov	r1, r3
 8001824:	480c      	ldr	r0, [pc, #48]	@ (8001858 <MX_GPIO_Init+0x154>)
 8001826:	f001 fbdb 	bl	8002fe0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800182a:	2200      	movs	r2, #0
 800182c:	2100      	movs	r1, #0
 800182e:	2017      	movs	r0, #23
 8001830:	f001 fb9f 	bl	8002f72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001834:	2017      	movs	r0, #23
 8001836:	f001 fbb8 	bl	8002faa <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800183a:	2200      	movs	r2, #0
 800183c:	2100      	movs	r1, #0
 800183e:	2028      	movs	r0, #40	@ 0x28
 8001840:	f001 fb97 	bl	8002f72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001844:	2028      	movs	r0, #40	@ 0x28
 8001846:	f001 fbb0 	bl	8002faa <HAL_NVIC_EnableIRQ>

}
 800184a:	bf00      	nop
 800184c:	3728      	adds	r7, #40	@ 0x28
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	40023800 	.word	0x40023800
 8001858:	40020000 	.word	0x40020000
 800185c:	40020400 	.word	0x40020400
 8001860:	40020800 	.word	0x40020800

08001864 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001868:	4b12      	ldr	r3, [pc, #72]	@ (80018b4 <MX_I2C1_Init+0x50>)
 800186a:	4a13      	ldr	r2, [pc, #76]	@ (80018b8 <MX_I2C1_Init+0x54>)
 800186c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800186e:	4b11      	ldr	r3, [pc, #68]	@ (80018b4 <MX_I2C1_Init+0x50>)
 8001870:	4a12      	ldr	r2, [pc, #72]	@ (80018bc <MX_I2C1_Init+0x58>)
 8001872:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001874:	4b0f      	ldr	r3, [pc, #60]	@ (80018b4 <MX_I2C1_Init+0x50>)
 8001876:	2200      	movs	r2, #0
 8001878:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800187a:	4b0e      	ldr	r3, [pc, #56]	@ (80018b4 <MX_I2C1_Init+0x50>)
 800187c:	2200      	movs	r2, #0
 800187e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001880:	4b0c      	ldr	r3, [pc, #48]	@ (80018b4 <MX_I2C1_Init+0x50>)
 8001882:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001886:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001888:	4b0a      	ldr	r3, [pc, #40]	@ (80018b4 <MX_I2C1_Init+0x50>)
 800188a:	2200      	movs	r2, #0
 800188c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800188e:	4b09      	ldr	r3, [pc, #36]	@ (80018b4 <MX_I2C1_Init+0x50>)
 8001890:	2200      	movs	r2, #0
 8001892:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001894:	4b07      	ldr	r3, [pc, #28]	@ (80018b4 <MX_I2C1_Init+0x50>)
 8001896:	2200      	movs	r2, #0
 8001898:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800189a:	4b06      	ldr	r3, [pc, #24]	@ (80018b4 <MX_I2C1_Init+0x50>)
 800189c:	2200      	movs	r2, #0
 800189e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80018a0:	4804      	ldr	r0, [pc, #16]	@ (80018b4 <MX_I2C1_Init+0x50>)
 80018a2:	f001 fd7b 	bl	800339c <HAL_I2C_Init>
 80018a6:	4603      	mov	r3, r0
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d001      	beq.n	80018b0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80018ac:	f000 f9f4 	bl	8001c98 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80018b0:	bf00      	nop
 80018b2:	bd80      	pop	{r7, pc}
 80018b4:	200000dc 	.word	0x200000dc
 80018b8:	40005400 	.word	0x40005400
 80018bc:	000186a0 	.word	0x000186a0

080018c0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b08a      	sub	sp, #40	@ 0x28
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018c8:	f107 0314 	add.w	r3, r7, #20
 80018cc:	2200      	movs	r2, #0
 80018ce:	601a      	str	r2, [r3, #0]
 80018d0:	605a      	str	r2, [r3, #4]
 80018d2:	609a      	str	r2, [r3, #8]
 80018d4:	60da      	str	r2, [r3, #12]
 80018d6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a19      	ldr	r2, [pc, #100]	@ (8001944 <HAL_I2C_MspInit+0x84>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d12c      	bne.n	800193c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018e2:	2300      	movs	r3, #0
 80018e4:	613b      	str	r3, [r7, #16]
 80018e6:	4b18      	ldr	r3, [pc, #96]	@ (8001948 <HAL_I2C_MspInit+0x88>)
 80018e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ea:	4a17      	ldr	r2, [pc, #92]	@ (8001948 <HAL_I2C_MspInit+0x88>)
 80018ec:	f043 0302 	orr.w	r3, r3, #2
 80018f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80018f2:	4b15      	ldr	r3, [pc, #84]	@ (8001948 <HAL_I2C_MspInit+0x88>)
 80018f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018f6:	f003 0302 	and.w	r3, r3, #2
 80018fa:	613b      	str	r3, [r7, #16]
 80018fc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80018fe:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001902:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001904:	2312      	movs	r3, #18
 8001906:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001908:	2300      	movs	r3, #0
 800190a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800190c:	2303      	movs	r3, #3
 800190e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001910:	2304      	movs	r3, #4
 8001912:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001914:	f107 0314 	add.w	r3, r7, #20
 8001918:	4619      	mov	r1, r3
 800191a:	480c      	ldr	r0, [pc, #48]	@ (800194c <HAL_I2C_MspInit+0x8c>)
 800191c:	f001 fb60 	bl	8002fe0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001920:	2300      	movs	r3, #0
 8001922:	60fb      	str	r3, [r7, #12]
 8001924:	4b08      	ldr	r3, [pc, #32]	@ (8001948 <HAL_I2C_MspInit+0x88>)
 8001926:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001928:	4a07      	ldr	r2, [pc, #28]	@ (8001948 <HAL_I2C_MspInit+0x88>)
 800192a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800192e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001930:	4b05      	ldr	r3, [pc, #20]	@ (8001948 <HAL_I2C_MspInit+0x88>)
 8001932:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001934:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001938:	60fb      	str	r3, [r7, #12]
 800193a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800193c:	bf00      	nop
 800193e:	3728      	adds	r7, #40	@ 0x28
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}
 8001944:	40005400 	.word	0x40005400
 8001948:	40023800 	.word	0x40023800
 800194c:	40020400 	.word	0x40020400

08001950 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001954:	f001 f99c 	bl	8002c90 <HAL_Init>

  /* USER CODE BEGIN Init */

  Initialisation_manette();
 8001958:	f000 f9f8 	bl	8001d4c <Initialisation_manette>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800195c:	f000 f864 	bl	8001a28 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001960:	f7ff fed0 	bl	8001704 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001964:	f000 ffea 	bl	800293c <MX_USART2_UART_Init>
  MX_TIM6_Init();
 8001968:	f000 fe8c 	bl	8002684 <MX_TIM6_Init>
  MX_TIM3_Init();
 800196c:	f000 fd7a 	bl	8002464 <MX_TIM3_Init>
  MX_TIM7_Init();
 8001970:	f000 febe 	bl	80026f0 <MX_TIM7_Init>
  MX_I2C1_Init();
 8001974:	f7ff ff76 	bl	8001864 <MX_I2C1_Init>
  MX_SPI2_Init();
 8001978:	f000 fb9e 	bl	80020b8 <MX_SPI2_Init>
  MX_TIM4_Init();
 800197c:	f000 fe0a 	bl	8002594 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim6);
 8001980:	4825      	ldr	r0, [pc, #148]	@ (8001a18 <main+0xc8>)
 8001982:	f003 fde7 	bl	8005554 <HAL_TIM_Base_Start_IT>

  if (HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1) != HAL_OK)
 8001986:	2100      	movs	r1, #0
 8001988:	4824      	ldr	r0, [pc, #144]	@ (8001a1c <main+0xcc>)
 800198a:	f003 fedb 	bl	8005744 <HAL_TIM_PWM_Start>
 800198e:	4603      	mov	r3, r0
 8001990:	2b00      	cmp	r3, #0
 8001992:	d001      	beq.n	8001998 <main+0x48>
  {
      Error_Handler();
 8001994:	f000 f980 	bl	8001c98 <Error_Handler>
  }

  if (HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2) != HAL_OK)
 8001998:	2104      	movs	r1, #4
 800199a:	4820      	ldr	r0, [pc, #128]	@ (8001a1c <main+0xcc>)
 800199c:	f003 fed2 	bl	8005744 <HAL_TIM_PWM_Start>
 80019a0:	4603      	mov	r3, r0
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d001      	beq.n	80019aa <main+0x5a>
  {
      Error_Handler();
 80019a6:	f000 f977 	bl	8001c98 <Error_Handler>
  }

  if (HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3) != HAL_OK)
 80019aa:	2108      	movs	r1, #8
 80019ac:	481b      	ldr	r0, [pc, #108]	@ (8001a1c <main+0xcc>)
 80019ae:	f003 fec9 	bl	8005744 <HAL_TIM_PWM_Start>
 80019b2:	4603      	mov	r3, r0
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d001      	beq.n	80019bc <main+0x6c>
  {
      Error_Handler();
 80019b8:	f000 f96e 	bl	8001c98 <Error_Handler>
  }

  if (HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4) != HAL_OK)
 80019bc:	210c      	movs	r1, #12
 80019be:	4817      	ldr	r0, [pc, #92]	@ (8001a1c <main+0xcc>)
 80019c0:	f003 fec0 	bl	8005744 <HAL_TIM_PWM_Start>
 80019c4:	4603      	mov	r3, r0
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d001      	beq.n	80019ce <main+0x7e>
  {
      Error_Handler();
 80019ca:	f000 f965 	bl	8001c98 <Error_Handler>
  }

  LCD_Init(&LCD_Init_OK);
 80019ce:	4814      	ldr	r0, [pc, #80]	@ (8001a20 <main+0xd0>)
 80019d0:	f001 f826 	bl	8002a20 <LCD_Init>
  curr_mode = MANUAL_MODE;
 80019d4:	4b13      	ldr	r3, [pc, #76]	@ (8001a24 <main+0xd4>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	701a      	strb	r2, [r3, #0]
  {

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	if(curr_mode != MANUAL_MODE) { 	// Toggle auto mode
 80019da:	4b12      	ldr	r3, [pc, #72]	@ (8001a24 <main+0xd4>)
 80019dc:	781b      	ldrb	r3, [r3, #0]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d016      	beq.n	8001a10 <main+0xc0>
		switch(curr_mode) {
 80019e2:	4b10      	ldr	r3, [pc, #64]	@ (8001a24 <main+0xd4>)
 80019e4:	781b      	ldrb	r3, [r3, #0]
 80019e6:	2b03      	cmp	r3, #3
 80019e8:	d00e      	beq.n	8001a08 <main+0xb8>
 80019ea:	2b03      	cmp	r3, #3
 80019ec:	dcf5      	bgt.n	80019da <main+0x8a>
 80019ee:	2b01      	cmp	r3, #1
 80019f0:	d002      	beq.n	80019f8 <main+0xa8>
 80019f2:	2b02      	cmp	r3, #2
 80019f4:	d004      	beq.n	8001a00 <main+0xb0>
 80019f6:	e00d      	b.n	8001a14 <main+0xc4>
			case CIRCLE_MODE:
				Auto_Circle(&htim3);
 80019f8:	4808      	ldr	r0, [pc, #32]	@ (8001a1c <main+0xcc>)
 80019fa:	f7ff fc01 	bl	8001200 <Auto_Circle>
				break;
 80019fe:	e009      	b.n	8001a14 <main+0xc4>
			case BACK_FORTH_MODE:
				Auto_Back_Forth(&htim3);
 8001a00:	4806      	ldr	r0, [pc, #24]	@ (8001a1c <main+0xcc>)
 8001a02:	f7ff fc7f 	bl	8001304 <Auto_Back_Forth>
				break;
 8001a06:	e005      	b.n	8001a14 <main+0xc4>
			case SQUARE_MODE:
				Auto_Square(&htim3);
 8001a08:	4804      	ldr	r0, [pc, #16]	@ (8001a1c <main+0xcc>)
 8001a0a:	f7ff fcc1 	bl	8001390 <Auto_Square>
				break;
 8001a0e:	e001      	b.n	8001a14 <main+0xc4>
		}
	}

	else { 	// Manual mode
		Controller();
 8001a10:	f000 f9be 	bl	8001d90 <Controller>
	if(curr_mode != MANUAL_MODE) { 	// Toggle auto mode
 8001a14:	e7e1      	b.n	80019da <main+0x8a>
 8001a16:	bf00      	nop
 8001a18:	20000268 	.word	0x20000268
 8001a1c:	200001d8 	.word	0x200001d8
 8001a20:	20000138 	.word	0x20000138
 8001a24:	200000ae 	.word	0x200000ae

08001a28 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b094      	sub	sp, #80	@ 0x50
 8001a2c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a2e:	f107 031c 	add.w	r3, r7, #28
 8001a32:	2234      	movs	r2, #52	@ 0x34
 8001a34:	2100      	movs	r1, #0
 8001a36:	4618      	mov	r0, r3
 8001a38:	f006 f86c 	bl	8007b14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a3c:	f107 0308 	add.w	r3, r7, #8
 8001a40:	2200      	movs	r2, #0
 8001a42:	601a      	str	r2, [r3, #0]
 8001a44:	605a      	str	r2, [r3, #4]
 8001a46:	609a      	str	r2, [r3, #8]
 8001a48:	60da      	str	r2, [r3, #12]
 8001a4a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	607b      	str	r3, [r7, #4]
 8001a50:	4b2a      	ldr	r3, [pc, #168]	@ (8001afc <SystemClock_Config+0xd4>)
 8001a52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a54:	4a29      	ldr	r2, [pc, #164]	@ (8001afc <SystemClock_Config+0xd4>)
 8001a56:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a5a:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a5c:	4b27      	ldr	r3, [pc, #156]	@ (8001afc <SystemClock_Config+0xd4>)
 8001a5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a60:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a64:	607b      	str	r3, [r7, #4]
 8001a66:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001a68:	2300      	movs	r3, #0
 8001a6a:	603b      	str	r3, [r7, #0]
 8001a6c:	4b24      	ldr	r3, [pc, #144]	@ (8001b00 <SystemClock_Config+0xd8>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001a74:	4a22      	ldr	r2, [pc, #136]	@ (8001b00 <SystemClock_Config+0xd8>)
 8001a76:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a7a:	6013      	str	r3, [r2, #0]
 8001a7c:	4b20      	ldr	r3, [pc, #128]	@ (8001b00 <SystemClock_Config+0xd8>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001a84:	603b      	str	r3, [r7, #0]
 8001a86:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001a88:	2302      	movs	r3, #2
 8001a8a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001a90:	2310      	movs	r3, #16
 8001a92:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a94:	2302      	movs	r3, #2
 8001a96:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001a9c:	2310      	movs	r3, #16
 8001a9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001aa0:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001aa4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001aa6:	2304      	movs	r3, #4
 8001aa8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001aaa:	2302      	movs	r3, #2
 8001aac:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001aae:	2302      	movs	r3, #2
 8001ab0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ab2:	f107 031c 	add.w	r3, r7, #28
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f002 ffb4 	bl	8004a24 <HAL_RCC_OscConfig>
 8001abc:	4603      	mov	r3, r0
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d001      	beq.n	8001ac6 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001ac2:	f000 f8e9 	bl	8001c98 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ac6:	230f      	movs	r3, #15
 8001ac8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001aca:	2302      	movs	r3, #2
 8001acc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001ad2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ad6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001adc:	f107 0308 	add.w	r3, r7, #8
 8001ae0:	2102      	movs	r1, #2
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f002 fc54 	bl	8004390 <HAL_RCC_ClockConfig>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d001      	beq.n	8001af2 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8001aee:	f000 f8d3 	bl	8001c98 <Error_Handler>
  }
}
 8001af2:	bf00      	nop
 8001af4:	3750      	adds	r7, #80	@ 0x50
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	40023800 	.word	0x40023800
 8001b00:	40007000 	.word	0x40007000

08001b04 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001b04:	b590      	push	{r4, r7, lr}
 8001b06:	b083      	sub	sp, #12
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	80fb      	strh	r3, [r7, #6]

	if(GPIO_Pin == GPIO_PIN_9)
 8001b0e:	88fb      	ldrh	r3, [r7, #6]
 8001b10:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001b14:	d106      	bne.n	8001b24 <HAL_GPIO_EXTI_Callback+0x20>
	{
		nbPulseD++ ; // compte les pulses de lencodeur droit
 8001b16:	4b25      	ldr	r3, [pc, #148]	@ (8001bac <HAL_GPIO_EXTI_Callback+0xa8>)
 8001b18:	881b      	ldrh	r3, [r3, #0]
 8001b1a:	b29b      	uxth	r3, r3
 8001b1c:	3301      	adds	r3, #1
 8001b1e:	b29a      	uxth	r2, r3
 8001b20:	4b22      	ldr	r3, [pc, #136]	@ (8001bac <HAL_GPIO_EXTI_Callback+0xa8>)
 8001b22:	801a      	strh	r2, [r3, #0]
	}

	if(GPIO_Pin == GPIO_PIN_8)
 8001b24:	88fb      	ldrh	r3, [r7, #6]
 8001b26:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001b2a:	d106      	bne.n	8001b3a <HAL_GPIO_EXTI_Callback+0x36>
	{
		nbPulseG++ ; // compte les pulses de lencodeur droit
 8001b2c:	4b20      	ldr	r3, [pc, #128]	@ (8001bb0 <HAL_GPIO_EXTI_Callback+0xac>)
 8001b2e:	881b      	ldrh	r3, [r3, #0]
 8001b30:	b29b      	uxth	r3, r3
 8001b32:	3301      	adds	r3, #1
 8001b34:	b29a      	uxth	r2, r3
 8001b36:	4b1e      	ldr	r3, [pc, #120]	@ (8001bb0 <HAL_GPIO_EXTI_Callback+0xac>)
 8001b38:	801a      	strh	r2, [r3, #0]
	}

	if(GPIO_Pin == Blue_Button_Pin) {
 8001b3a:	88fb      	ldrh	r3, [r7, #6]
 8001b3c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001b40:	d12f      	bne.n	8001ba2 <HAL_GPIO_EXTI_Callback+0x9e>
		dip_state = Get_Mode(HAL_GPIO_ReadPin(Dipswitch_MSB_GPIO_Port, Dipswitch_MSB_Pin), HAL_GPIO_ReadPin(Dipswitch_LSB_GPIO_Port, Dipswitch_LSB_Pin));
 8001b42:	2104      	movs	r1, #4
 8001b44:	481b      	ldr	r0, [pc, #108]	@ (8001bb4 <HAL_GPIO_EXTI_Callback+0xb0>)
 8001b46:	f001 fbdf 	bl	8003308 <HAL_GPIO_ReadPin>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	461c      	mov	r4, r3
 8001b4e:	2108      	movs	r1, #8
 8001b50:	4818      	ldr	r0, [pc, #96]	@ (8001bb4 <HAL_GPIO_EXTI_Callback+0xb0>)
 8001b52:	f001 fbd9 	bl	8003308 <HAL_GPIO_ReadPin>
 8001b56:	4603      	mov	r3, r0
 8001b58:	4619      	mov	r1, r3
 8001b5a:	4620      	mov	r0, r4
 8001b5c:	f7ff f986 	bl	8000e6c <Get_Mode>
 8001b60:	4603      	mov	r3, r0
 8001b62:	b2da      	uxtb	r2, r3
 8001b64:	4b14      	ldr	r3, [pc, #80]	@ (8001bb8 <HAL_GPIO_EXTI_Callback+0xb4>)
 8001b66:	701a      	strb	r2, [r3, #0]

		// Resume if paused
		if(pause)
 8001b68:	4b14      	ldr	r3, [pc, #80]	@ (8001bbc <HAL_GPIO_EXTI_Callback+0xb8>)
 8001b6a:	781b      	ldrb	r3, [r3, #0]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d003      	beq.n	8001b78 <HAL_GPIO_EXTI_Callback+0x74>
			Resume(&htim3);
 8001b70:	4813      	ldr	r0, [pc, #76]	@ (8001bc0 <HAL_GPIO_EXTI_Callback+0xbc>)
 8001b72:	f7ff fc8f 	bl	8001494 <Resume>
 8001b76:	e00c      	b.n	8001b92 <HAL_GPIO_EXTI_Callback+0x8e>

		// Pause if button pressed while auto mode on
		else if(curr_mode == dip_state && curr_mode != MANUAL_MODE)
 8001b78:	4b12      	ldr	r3, [pc, #72]	@ (8001bc4 <HAL_GPIO_EXTI_Callback+0xc0>)
 8001b7a:	781a      	ldrb	r2, [r3, #0]
 8001b7c:	4b0e      	ldr	r3, [pc, #56]	@ (8001bb8 <HAL_GPIO_EXTI_Callback+0xb4>)
 8001b7e:	781b      	ldrb	r3, [r3, #0]
 8001b80:	429a      	cmp	r2, r3
 8001b82:	d106      	bne.n	8001b92 <HAL_GPIO_EXTI_Callback+0x8e>
 8001b84:	4b0f      	ldr	r3, [pc, #60]	@ (8001bc4 <HAL_GPIO_EXTI_Callback+0xc0>)
 8001b86:	781b      	ldrb	r3, [r3, #0]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d002      	beq.n	8001b92 <HAL_GPIO_EXTI_Callback+0x8e>
			Pause(&htim3);
 8001b8c:	480c      	ldr	r0, [pc, #48]	@ (8001bc0 <HAL_GPIO_EXTI_Callback+0xbc>)
 8001b8e:	f7ff fc41 	bl	8001414 <Pause>

		// Change current mode only on manual mode
		if(curr_mode == MANUAL_MODE)
 8001b92:	4b0c      	ldr	r3, [pc, #48]	@ (8001bc4 <HAL_GPIO_EXTI_Callback+0xc0>)
 8001b94:	781b      	ldrb	r3, [r3, #0]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d103      	bne.n	8001ba2 <HAL_GPIO_EXTI_Callback+0x9e>
			curr_mode = dip_state;
 8001b9a:	4b07      	ldr	r3, [pc, #28]	@ (8001bb8 <HAL_GPIO_EXTI_Callback+0xb4>)
 8001b9c:	781a      	ldrb	r2, [r3, #0]
 8001b9e:	4b09      	ldr	r3, [pc, #36]	@ (8001bc4 <HAL_GPIO_EXTI_Callback+0xc0>)
 8001ba0:	701a      	strb	r2, [r3, #0]
	}
}
 8001ba2:	bf00      	nop
 8001ba4:	370c      	adds	r7, #12
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd90      	pop	{r4, r7, pc}
 8001baa:	bf00      	nop
 8001bac:	20000130 	.word	0x20000130
 8001bb0:	20000132 	.word	0x20000132
 8001bb4:	40020800 	.word	0x40020800
 8001bb8:	200000ad 	.word	0x200000ad
 8001bbc:	200000ac 	.word	0x200000ac
 8001bc0:	200001d8 	.word	0x200001d8
 8001bc4:	200000ae 	.word	0x200000ae

08001bc8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b083      	sub	sp, #12
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
    if(htim->Instance == TIM6)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4a27      	ldr	r2, [pc, #156]	@ (8001c74 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d13b      	bne.n	8001c52 <HAL_TIM_PeriodElapsedCallback+0x8a>
    {
    	vitesseD = CIRCONFERENCE * nbPulseD / PULSE_PAR_TOUR * 2000 / (arrTimerVitesse + 1) ; // calcule la vitesse de la chenille droite en m/s
 8001bda:	4b27      	ldr	r3, [pc, #156]	@ (8001c78 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8001bdc:	881b      	ldrh	r3, [r3, #0]
 8001bde:	b29b      	uxth	r3, r3
 8001be0:	461a      	mov	r2, r3
 8001be2:	239d      	movs	r3, #157	@ 0x9d
 8001be4:	fb02 f303 	mul.w	r3, r2, r3
 8001be8:	4a24      	ldr	r2, [pc, #144]	@ (8001c7c <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8001bea:	fb82 1203 	smull	r1, r2, r2, r3
 8001bee:	441a      	add	r2, r3
 8001bf0:	1192      	asrs	r2, r2, #6
 8001bf2:	17db      	asrs	r3, r3, #31
 8001bf4:	1ad3      	subs	r3, r2, r3
 8001bf6:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8001bfa:	fb03 f202 	mul.w	r2, r3, r2
 8001bfe:	4b20      	ldr	r3, [pc, #128]	@ (8001c80 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8001c00:	881b      	ldrh	r3, [r3, #0]
 8001c02:	b29b      	uxth	r3, r3
 8001c04:	3301      	adds	r3, #1
 8001c06:	fb92 f3f3 	sdiv	r3, r2, r3
 8001c0a:	b29a      	uxth	r2, r3
 8001c0c:	4b1d      	ldr	r3, [pc, #116]	@ (8001c84 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8001c0e:	801a      	strh	r2, [r3, #0]
    	vitesseG = CIRCONFERENCE * nbPulseG / PULSE_PAR_TOUR * 2000 / (arrTimerVitesse + 1) ;
 8001c10:	4b1d      	ldr	r3, [pc, #116]	@ (8001c88 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8001c12:	881b      	ldrh	r3, [r3, #0]
 8001c14:	b29b      	uxth	r3, r3
 8001c16:	461a      	mov	r2, r3
 8001c18:	239d      	movs	r3, #157	@ 0x9d
 8001c1a:	fb02 f303 	mul.w	r3, r2, r3
 8001c1e:	4a17      	ldr	r2, [pc, #92]	@ (8001c7c <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8001c20:	fb82 1203 	smull	r1, r2, r2, r3
 8001c24:	441a      	add	r2, r3
 8001c26:	1192      	asrs	r2, r2, #6
 8001c28:	17db      	asrs	r3, r3, #31
 8001c2a:	1ad3      	subs	r3, r2, r3
 8001c2c:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8001c30:	fb03 f202 	mul.w	r2, r3, r2
 8001c34:	4b12      	ldr	r3, [pc, #72]	@ (8001c80 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8001c36:	881b      	ldrh	r3, [r3, #0]
 8001c38:	b29b      	uxth	r3, r3
 8001c3a:	3301      	adds	r3, #1
 8001c3c:	fb92 f3f3 	sdiv	r3, r2, r3
 8001c40:	b29a      	uxth	r2, r3
 8001c42:	4b12      	ldr	r3, [pc, #72]	@ (8001c8c <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8001c44:	801a      	strh	r2, [r3, #0]

    	nbPulseD = 0 ;
 8001c46:	4b0c      	ldr	r3, [pc, #48]	@ (8001c78 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	801a      	strh	r2, [r3, #0]
    	nbPulseG = 0;
 8001c4c:	4b0e      	ldr	r3, [pc, #56]	@ (8001c88 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	801a      	strh	r2, [r3, #0]
    	//HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
    }

    if(htim->Instance == TIM7) {	// Triggered every 10 µs
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4a0e      	ldr	r2, [pc, #56]	@ (8001c90 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	d104      	bne.n	8001c66 <HAL_TIM_PeriodElapsedCallback+0x9e>
    	timer_count += 10;
 8001c5c:	4b0d      	ldr	r3, [pc, #52]	@ (8001c94 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	330a      	adds	r3, #10
 8001c62:	4a0c      	ldr	r2, [pc, #48]	@ (8001c94 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8001c64:	6013      	str	r3, [r2, #0]
    }
}
 8001c66:	bf00      	nop
 8001c68:	370c      	adds	r7, #12
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c70:	4770      	bx	lr
 8001c72:	bf00      	nop
 8001c74:	40001000 	.word	0x40001000
 8001c78:	20000130 	.word	0x20000130
 8001c7c:	dd67c8a7 	.word	0xdd67c8a7
 8001c80:	20000002 	.word	0x20000002
 8001c84:	20000134 	.word	0x20000134
 8001c88:	20000132 	.word	0x20000132
 8001c8c:	20000136 	.word	0x20000136
 8001c90:	40001400 	.word	0x40001400
 8001c94:	200000c4 	.word	0x200000c4

08001c98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c9c:	b672      	cpsid	i
}
 8001c9e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ca0:	bf00      	nop
 8001ca2:	e7fd      	b.n	8001ca0 <Error_Handler+0x8>

08001ca4 <Format_Data>:
int maxInverse = 250;
int sendPulseMotor;

int toggle;

void Format_Data() {
 8001ca4:	b480      	push	{r7}
 8001ca6:	af00      	add	r7, sp, #0
	/*FROM LAB7*/
	formatted_data[0] = data[0];
 8001ca8:	4b20      	ldr	r3, [pc, #128]	@ (8001d2c <Format_Data+0x88>)
 8001caa:	781b      	ldrb	r3, [r3, #0]
 8001cac:	461a      	mov	r2, r3
 8001cae:	4b20      	ldr	r3, [pc, #128]	@ (8001d30 <Format_Data+0x8c>)
 8001cb0:	601a      	str	r2, [r3, #0]
	formatted_data[1] = data[1];
 8001cb2:	4b1e      	ldr	r3, [pc, #120]	@ (8001d2c <Format_Data+0x88>)
 8001cb4:	785b      	ldrb	r3, [r3, #1]
 8001cb6:	461a      	mov	r2, r3
 8001cb8:	4b1d      	ldr	r3, [pc, #116]	@ (8001d30 <Format_Data+0x8c>)
 8001cba:	605a      	str	r2, [r3, #4]
	formatted_data[5] = (data[5] & 0x02);
 8001cbc:	4b1b      	ldr	r3, [pc, #108]	@ (8001d2c <Format_Data+0x88>)
 8001cbe:	795b      	ldrb	r3, [r3, #5]
 8001cc0:	f003 0302 	and.w	r3, r3, #2
 8001cc4:	4a1a      	ldr	r2, [pc, #104]	@ (8001d30 <Format_Data+0x8c>)
 8001cc6:	6153      	str	r3, [r2, #20]
	if(formatted_data[5] == 2)
 8001cc8:	4b19      	ldr	r3, [pc, #100]	@ (8001d30 <Format_Data+0x8c>)
 8001cca:	695b      	ldr	r3, [r3, #20]
 8001ccc:	2b02      	cmp	r3, #2
 8001cce:	d102      	bne.n	8001cd6 <Format_Data+0x32>
		formatted_data[5] = 1;
 8001cd0:	4b17      	ldr	r3, [pc, #92]	@ (8001d30 <Format_Data+0x8c>)
 8001cd2:	2201      	movs	r2, #1
 8001cd4:	615a      	str	r2, [r3, #20]
	formatted_data[6] = (data[5] & 0x01);
 8001cd6:	4b15      	ldr	r3, [pc, #84]	@ (8001d2c <Format_Data+0x88>)
 8001cd8:	795b      	ldrb	r3, [r3, #5]
 8001cda:	f003 0301 	and.w	r3, r3, #1
 8001cde:	4a14      	ldr	r2, [pc, #80]	@ (8001d30 <Format_Data+0x8c>)
 8001ce0:	6193      	str	r3, [r2, #24]

	/*MY DATA*/
	Xdata = data[0];
 8001ce2:	4b12      	ldr	r3, [pc, #72]	@ (8001d2c <Format_Data+0x88>)
 8001ce4:	781b      	ldrb	r3, [r3, #0]
 8001ce6:	461a      	mov	r2, r3
 8001ce8:	4b12      	ldr	r3, [pc, #72]	@ (8001d34 <Format_Data+0x90>)
 8001cea:	601a      	str	r2, [r3, #0]
	Ydata = data[1];
 8001cec:	4b0f      	ldr	r3, [pc, #60]	@ (8001d2c <Format_Data+0x88>)
 8001cee:	785b      	ldrb	r3, [r3, #1]
 8001cf0:	461a      	mov	r2, r3
 8001cf2:	4b11      	ldr	r3, [pc, #68]	@ (8001d38 <Format_Data+0x94>)
 8001cf4:	601a      	str	r2, [r3, #0]
	Xpulse = data[0];
 8001cf6:	4b0d      	ldr	r3, [pc, #52]	@ (8001d2c <Format_Data+0x88>)
 8001cf8:	781b      	ldrb	r3, [r3, #0]
 8001cfa:	461a      	mov	r2, r3
 8001cfc:	4b0f      	ldr	r3, [pc, #60]	@ (8001d3c <Format_Data+0x98>)
 8001cfe:	601a      	str	r2, [r3, #0]
	Ypulse = data[1];
 8001d00:	4b0a      	ldr	r3, [pc, #40]	@ (8001d2c <Format_Data+0x88>)
 8001d02:	785b      	ldrb	r3, [r3, #1]
 8001d04:	461a      	mov	r2, r3
 8001d06:	4b0e      	ldr	r3, [pc, #56]	@ (8001d40 <Format_Data+0x9c>)
 8001d08:	601a      	str	r2, [r3, #0]
	Cbutton = (data[5] & 0x02);
 8001d0a:	4b08      	ldr	r3, [pc, #32]	@ (8001d2c <Format_Data+0x88>)
 8001d0c:	795b      	ldrb	r3, [r3, #5]
 8001d0e:	f003 0302 	and.w	r3, r3, #2
 8001d12:	4a0c      	ldr	r2, [pc, #48]	@ (8001d44 <Format_Data+0xa0>)
 8001d14:	6013      	str	r3, [r2, #0]
	Zbutton = (data[5] & 0x01);
 8001d16:	4b05      	ldr	r3, [pc, #20]	@ (8001d2c <Format_Data+0x88>)
 8001d18:	795b      	ldrb	r3, [r3, #5]
 8001d1a:	f003 0301 	and.w	r3, r3, #1
 8001d1e:	4a0a      	ldr	r2, [pc, #40]	@ (8001d48 <Format_Data+0xa4>)
 8001d20:	6013      	str	r3, [r2, #0]
	/* neutral x and y data: 128
	max x and y data: 1-254 */

}
 8001d22:	bf00      	nop
 8001d24:	46bd      	mov	sp, r7
 8001d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2a:	4770      	bx	lr
 8001d2c:	2000013c 	.word	0x2000013c
 8001d30:	20000144 	.word	0x20000144
 8001d34:	20000160 	.word	0x20000160
 8001d38:	20000164 	.word	0x20000164
 8001d3c:	20000168 	.word	0x20000168
 8001d40:	2000016c 	.word	0x2000016c
 8001d44:	20000170 	.word	0x20000170
 8001d48:	20000174 	.word	0x20000174

08001d4c <Initialisation_manette>:


void Initialisation_manette(){
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b082      	sub	sp, #8
 8001d50:	af02      	add	r7, sp, #8

	HAL_I2C_Master_Transmit(&hi2c1, NUNCHUK_ADDRESS, initcomm1, 2, HAL_MAX_DELAY);
 8001d52:	f04f 33ff 	mov.w	r3, #4294967295
 8001d56:	9300      	str	r3, [sp, #0]
 8001d58:	2302      	movs	r3, #2
 8001d5a:	4a0a      	ldr	r2, [pc, #40]	@ (8001d84 <Initialisation_manette+0x38>)
 8001d5c:	21a4      	movs	r1, #164	@ 0xa4
 8001d5e:	480a      	ldr	r0, [pc, #40]	@ (8001d88 <Initialisation_manette+0x3c>)
 8001d60:	f001 fc60 	bl	8003624 <HAL_I2C_Master_Transmit>
	HAL_Delay(10);
 8001d64:	200a      	movs	r0, #10
 8001d66:	f001 f805 	bl	8002d74 <HAL_Delay>
	HAL_I2C_Master_Transmit(&hi2c1, NUNCHUK_ADDRESS, initcomm2, 2, HAL_MAX_DELAY);
 8001d6a:	f04f 33ff 	mov.w	r3, #4294967295
 8001d6e:	9300      	str	r3, [sp, #0]
 8001d70:	2302      	movs	r3, #2
 8001d72:	4a06      	ldr	r2, [pc, #24]	@ (8001d8c <Initialisation_manette+0x40>)
 8001d74:	21a4      	movs	r1, #164	@ 0xa4
 8001d76:	4804      	ldr	r0, [pc, #16]	@ (8001d88 <Initialisation_manette+0x3c>)
 8001d78:	f001 fc54 	bl	8003624 <HAL_I2C_Master_Transmit>

}
 8001d7c:	bf00      	nop
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	bf00      	nop
 8001d84:	20000004 	.word	0x20000004
 8001d88:	200000dc 	.word	0x200000dc
 8001d8c:	20000008 	.word	0x20000008

08001d90 <Controller>:


void Controller(){
 8001d90:	b5b0      	push	{r4, r5, r7, lr}
 8001d92:	b082      	sub	sp, #8
 8001d94:	af02      	add	r7, sp, #8

	HAL_I2C_Master_Transmit(&hi2c1, NUNCHUK_ADDRESS, 0x00, 1, HAL_MAX_DELAY);
 8001d96:	f04f 33ff 	mov.w	r3, #4294967295
 8001d9a:	9300      	str	r3, [sp, #0]
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	2200      	movs	r2, #0
 8001da0:	21a4      	movs	r1, #164	@ 0xa4
 8001da2:	48ad      	ldr	r0, [pc, #692]	@ (8002058 <Controller+0x2c8>)
 8001da4:	f001 fc3e 	bl	8003624 <HAL_I2C_Master_Transmit>
	HAL_Delay(10);
 8001da8:	200a      	movs	r0, #10
 8001daa:	f000 ffe3 	bl	8002d74 <HAL_Delay>
	HAL_I2C_Master_Receive(&hi2c1, NUNCHUK_ADDRESS, data, 6, HAL_MAX_DELAY);
 8001dae:	f04f 33ff 	mov.w	r3, #4294967295
 8001db2:	9300      	str	r3, [sp, #0]
 8001db4:	2306      	movs	r3, #6
 8001db6:	4aa9      	ldr	r2, [pc, #676]	@ (800205c <Controller+0x2cc>)
 8001db8:	21a4      	movs	r1, #164	@ 0xa4
 8001dba:	48a7      	ldr	r0, [pc, #668]	@ (8002058 <Controller+0x2c8>)
 8001dbc:	f001 fd30 	bl	8003820 <HAL_I2C_Master_Receive>
	Format_Data();
 8001dc0:	f7ff ff70 	bl	8001ca4 <Format_Data>



	if(Cbutton == 1){
 8001dc4:	4ba6      	ldr	r3, [pc, #664]	@ (8002060 <Controller+0x2d0>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	2b01      	cmp	r3, #1
 8001dca:	f040 812f 	bne.w	800202c <Controller+0x29c>


		if(Xdata && Ydata == 128){
 8001dce:	4ba5      	ldr	r3, [pc, #660]	@ (8002064 <Controller+0x2d4>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d007      	beq.n	8001de6 <Controller+0x56>
 8001dd6:	4ba4      	ldr	r3, [pc, #656]	@ (8002068 <Controller+0x2d8>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	2b80      	cmp	r3, #128	@ 0x80
 8001ddc:	d103      	bne.n	8001de6 <Controller+0x56>
				Stop(&htim3);
 8001dde:	48a3      	ldr	r0, [pc, #652]	@ (800206c <Controller+0x2dc>)
 8001de0:	f7ff fc76 	bl	80016d0 <Stop>
 8001de4:	e11b      	b.n	800201e <Controller+0x28e>

		else{

			/* Adjustment of data according to mode */

		if(modeVitesse==1){
 8001de6:	4ba2      	ldr	r3, [pc, #648]	@ (8002070 <Controller+0x2e0>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	2b01      	cmp	r3, #1
 8001dec:	d156      	bne.n	8001e9c <Controller+0x10c>
			Xpulse = Xdata * 0.33 * pulseCoeff;
 8001dee:	4b9d      	ldr	r3, [pc, #628]	@ (8002064 <Controller+0x2d4>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4618      	mov	r0, r3
 8001df4:	f7fe fbae 	bl	8000554 <__aeabi_i2d>
 8001df8:	a393      	add	r3, pc, #588	@ (adr r3, 8002048 <Controller+0x2b8>)
 8001dfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dfe:	f7fe fc13 	bl	8000628 <__aeabi_dmul>
 8001e02:	4602      	mov	r2, r0
 8001e04:	460b      	mov	r3, r1
 8001e06:	4614      	mov	r4, r2
 8001e08:	461d      	mov	r5, r3
 8001e0a:	4b9a      	ldr	r3, [pc, #616]	@ (8002074 <Controller+0x2e4>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f7fe fbb2 	bl	8000578 <__aeabi_f2d>
 8001e14:	4602      	mov	r2, r0
 8001e16:	460b      	mov	r3, r1
 8001e18:	4620      	mov	r0, r4
 8001e1a:	4629      	mov	r1, r5
 8001e1c:	f7fe fc04 	bl	8000628 <__aeabi_dmul>
 8001e20:	4602      	mov	r2, r0
 8001e22:	460b      	mov	r3, r1
 8001e24:	4610      	mov	r0, r2
 8001e26:	4619      	mov	r1, r3
 8001e28:	f7fe fe10 	bl	8000a4c <__aeabi_d2iz>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	4a92      	ldr	r2, [pc, #584]	@ (8002078 <Controller+0x2e8>)
 8001e30:	6013      	str	r3, [r2, #0]
			Ypulse = Ydata * 0.33 * pulseCoeff;
 8001e32:	4b8d      	ldr	r3, [pc, #564]	@ (8002068 <Controller+0x2d8>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4618      	mov	r0, r3
 8001e38:	f7fe fb8c 	bl	8000554 <__aeabi_i2d>
 8001e3c:	a382      	add	r3, pc, #520	@ (adr r3, 8002048 <Controller+0x2b8>)
 8001e3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e42:	f7fe fbf1 	bl	8000628 <__aeabi_dmul>
 8001e46:	4602      	mov	r2, r0
 8001e48:	460b      	mov	r3, r1
 8001e4a:	4614      	mov	r4, r2
 8001e4c:	461d      	mov	r5, r3
 8001e4e:	4b89      	ldr	r3, [pc, #548]	@ (8002074 <Controller+0x2e4>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4618      	mov	r0, r3
 8001e54:	f7fe fb90 	bl	8000578 <__aeabi_f2d>
 8001e58:	4602      	mov	r2, r0
 8001e5a:	460b      	mov	r3, r1
 8001e5c:	4620      	mov	r0, r4
 8001e5e:	4629      	mov	r1, r5
 8001e60:	f7fe fbe2 	bl	8000628 <__aeabi_dmul>
 8001e64:	4602      	mov	r2, r0
 8001e66:	460b      	mov	r3, r1
 8001e68:	4610      	mov	r0, r2
 8001e6a:	4619      	mov	r1, r3
 8001e6c:	f7fe fdee 	bl	8000a4c <__aeabi_d2iz>
 8001e70:	4603      	mov	r3, r0
 8001e72:	4a82      	ldr	r2, [pc, #520]	@ (800207c <Controller+0x2ec>)
 8001e74:	6013      	str	r3, [r2, #0]
			maxInverse = maxInverse * 0.33;
 8001e76:	4b82      	ldr	r3, [pc, #520]	@ (8002080 <Controller+0x2f0>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f7fe fb6a 	bl	8000554 <__aeabi_i2d>
 8001e80:	a371      	add	r3, pc, #452	@ (adr r3, 8002048 <Controller+0x2b8>)
 8001e82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e86:	f7fe fbcf 	bl	8000628 <__aeabi_dmul>
 8001e8a:	4602      	mov	r2, r0
 8001e8c:	460b      	mov	r3, r1
 8001e8e:	4610      	mov	r0, r2
 8001e90:	4619      	mov	r1, r3
 8001e92:	f7fe fddb 	bl	8000a4c <__aeabi_d2iz>
 8001e96:	4603      	mov	r3, r0
 8001e98:	4a79      	ldr	r2, [pc, #484]	@ (8002080 <Controller+0x2f0>)
 8001e9a:	6013      	str	r3, [r2, #0]
		}

		if(modeVitesse==2){
 8001e9c:	4b74      	ldr	r3, [pc, #464]	@ (8002070 <Controller+0x2e0>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	2b02      	cmp	r3, #2
 8001ea2:	d156      	bne.n	8001f52 <Controller+0x1c2>
			Xpulse = Xdata * 0.66 * pulseCoeff;
 8001ea4:	4b6f      	ldr	r3, [pc, #444]	@ (8002064 <Controller+0x2d4>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f7fe fb53 	bl	8000554 <__aeabi_i2d>
 8001eae:	a368      	add	r3, pc, #416	@ (adr r3, 8002050 <Controller+0x2c0>)
 8001eb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eb4:	f7fe fbb8 	bl	8000628 <__aeabi_dmul>
 8001eb8:	4602      	mov	r2, r0
 8001eba:	460b      	mov	r3, r1
 8001ebc:	4614      	mov	r4, r2
 8001ebe:	461d      	mov	r5, r3
 8001ec0:	4b6c      	ldr	r3, [pc, #432]	@ (8002074 <Controller+0x2e4>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f7fe fb57 	bl	8000578 <__aeabi_f2d>
 8001eca:	4602      	mov	r2, r0
 8001ecc:	460b      	mov	r3, r1
 8001ece:	4620      	mov	r0, r4
 8001ed0:	4629      	mov	r1, r5
 8001ed2:	f7fe fba9 	bl	8000628 <__aeabi_dmul>
 8001ed6:	4602      	mov	r2, r0
 8001ed8:	460b      	mov	r3, r1
 8001eda:	4610      	mov	r0, r2
 8001edc:	4619      	mov	r1, r3
 8001ede:	f7fe fdb5 	bl	8000a4c <__aeabi_d2iz>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	4a64      	ldr	r2, [pc, #400]	@ (8002078 <Controller+0x2e8>)
 8001ee6:	6013      	str	r3, [r2, #0]
			Ypulse = Ydata * 0.66 * pulseCoeff;
 8001ee8:	4b5f      	ldr	r3, [pc, #380]	@ (8002068 <Controller+0x2d8>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4618      	mov	r0, r3
 8001eee:	f7fe fb31 	bl	8000554 <__aeabi_i2d>
 8001ef2:	a357      	add	r3, pc, #348	@ (adr r3, 8002050 <Controller+0x2c0>)
 8001ef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ef8:	f7fe fb96 	bl	8000628 <__aeabi_dmul>
 8001efc:	4602      	mov	r2, r0
 8001efe:	460b      	mov	r3, r1
 8001f00:	4614      	mov	r4, r2
 8001f02:	461d      	mov	r5, r3
 8001f04:	4b5b      	ldr	r3, [pc, #364]	@ (8002074 <Controller+0x2e4>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f7fe fb35 	bl	8000578 <__aeabi_f2d>
 8001f0e:	4602      	mov	r2, r0
 8001f10:	460b      	mov	r3, r1
 8001f12:	4620      	mov	r0, r4
 8001f14:	4629      	mov	r1, r5
 8001f16:	f7fe fb87 	bl	8000628 <__aeabi_dmul>
 8001f1a:	4602      	mov	r2, r0
 8001f1c:	460b      	mov	r3, r1
 8001f1e:	4610      	mov	r0, r2
 8001f20:	4619      	mov	r1, r3
 8001f22:	f7fe fd93 	bl	8000a4c <__aeabi_d2iz>
 8001f26:	4603      	mov	r3, r0
 8001f28:	4a54      	ldr	r2, [pc, #336]	@ (800207c <Controller+0x2ec>)
 8001f2a:	6013      	str	r3, [r2, #0]
			maxInverse = maxInverse * 0.66;
 8001f2c:	4b54      	ldr	r3, [pc, #336]	@ (8002080 <Controller+0x2f0>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4618      	mov	r0, r3
 8001f32:	f7fe fb0f 	bl	8000554 <__aeabi_i2d>
 8001f36:	a346      	add	r3, pc, #280	@ (adr r3, 8002050 <Controller+0x2c0>)
 8001f38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f3c:	f7fe fb74 	bl	8000628 <__aeabi_dmul>
 8001f40:	4602      	mov	r2, r0
 8001f42:	460b      	mov	r3, r1
 8001f44:	4610      	mov	r0, r2
 8001f46:	4619      	mov	r1, r3
 8001f48:	f7fe fd80 	bl	8000a4c <__aeabi_d2iz>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	4a4c      	ldr	r2, [pc, #304]	@ (8002080 <Controller+0x2f0>)
 8001f50:	6013      	str	r3, [r2, #0]
		}

		if(modeVitesse==3){
 8001f52:	4b47      	ldr	r3, [pc, #284]	@ (8002070 <Controller+0x2e0>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	2b03      	cmp	r3, #3
 8001f58:	d121      	bne.n	8001f9e <Controller+0x20e>
			Xpulse = Xdata * pulseCoeff;
 8001f5a:	4b42      	ldr	r3, [pc, #264]	@ (8002064 <Controller+0x2d4>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	ee07 3a90 	vmov	s15, r3
 8001f62:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f66:	4b43      	ldr	r3, [pc, #268]	@ (8002074 <Controller+0x2e4>)
 8001f68:	edd3 7a00 	vldr	s15, [r3]
 8001f6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f70:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f74:	ee17 2a90 	vmov	r2, s15
 8001f78:	4b3f      	ldr	r3, [pc, #252]	@ (8002078 <Controller+0x2e8>)
 8001f7a:	601a      	str	r2, [r3, #0]
			Ypulse = Ydata * pulseCoeff;
 8001f7c:	4b3a      	ldr	r3, [pc, #232]	@ (8002068 <Controller+0x2d8>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	ee07 3a90 	vmov	s15, r3
 8001f84:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f88:	4b3a      	ldr	r3, [pc, #232]	@ (8002074 <Controller+0x2e4>)
 8001f8a:	edd3 7a00 	vldr	s15, [r3]
 8001f8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f92:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f96:	ee17 2a90 	vmov	r2, s15
 8001f9a:	4b38      	ldr	r3, [pc, #224]	@ (800207c <Controller+0x2ec>)
 8001f9c:	601a      	str	r2, [r3, #0]
		}


		/* Sending pulse to motor */

		if(Xdata>128){
 8001f9e:	4b31      	ldr	r3, [pc, #196]	@ (8002064 <Controller+0x2d4>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	2b80      	cmp	r3, #128	@ 0x80
 8001fa4:	dd0a      	ble.n	8001fbc <Controller+0x22c>
			sendPulseMotor = Xpulse;
 8001fa6:	4b34      	ldr	r3, [pc, #208]	@ (8002078 <Controller+0x2e8>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4a36      	ldr	r2, [pc, #216]	@ (8002084 <Controller+0x2f4>)
 8001fac:	6013      	str	r3, [r2, #0]
			Droite(sendPulseMotor,&htim3);
 8001fae:	4b35      	ldr	r3, [pc, #212]	@ (8002084 <Controller+0x2f4>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	492e      	ldr	r1, [pc, #184]	@ (800206c <Controller+0x2dc>)
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f7ff fae3 	bl	8001580 <Droite>
 8001fba:	e010      	b.n	8001fde <Controller+0x24e>
		}

		else if(Xdata<128) {
 8001fbc:	4b29      	ldr	r3, [pc, #164]	@ (8002064 <Controller+0x2d4>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	2b7f      	cmp	r3, #127	@ 0x7f
 8001fc2:	dc0c      	bgt.n	8001fde <Controller+0x24e>
				sendPulseMotor = maxInverse - Xpulse;
 8001fc4:	4b2e      	ldr	r3, [pc, #184]	@ (8002080 <Controller+0x2f0>)
 8001fc6:	681a      	ldr	r2, [r3, #0]
 8001fc8:	4b2b      	ldr	r3, [pc, #172]	@ (8002078 <Controller+0x2e8>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	1ad3      	subs	r3, r2, r3
 8001fce:	4a2d      	ldr	r2, [pc, #180]	@ (8002084 <Controller+0x2f4>)
 8001fd0:	6013      	str	r3, [r2, #0]
				Gauche(sendPulseMotor,&htim3);
 8001fd2:	4b2c      	ldr	r3, [pc, #176]	@ (8002084 <Controller+0x2f4>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4925      	ldr	r1, [pc, #148]	@ (800206c <Controller+0x2dc>)
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f7ff fb09 	bl	80015f0 <Gauche>
			}


		if(Ydata>128){
 8001fde:	4b22      	ldr	r3, [pc, #136]	@ (8002068 <Controller+0x2d8>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	2b80      	cmp	r3, #128	@ 0x80
 8001fe4:	dd0a      	ble.n	8001ffc <Controller+0x26c>
			sendPulseMotor = Ypulse;
 8001fe6:	4b25      	ldr	r3, [pc, #148]	@ (800207c <Controller+0x2ec>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4a26      	ldr	r2, [pc, #152]	@ (8002084 <Controller+0x2f4>)
 8001fec:	6013      	str	r3, [r2, #0]
			Avancer(sendPulseMotor,&htim3);
 8001fee:	4b25      	ldr	r3, [pc, #148]	@ (8002084 <Controller+0x2f4>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	491e      	ldr	r1, [pc, #120]	@ (800206c <Controller+0x2dc>)
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f7ff fa8b 	bl	8001510 <Avancer>
 8001ffa:	e010      	b.n	800201e <Controller+0x28e>
		}

		else if(Ydata<128){
 8001ffc:	4b1a      	ldr	r3, [pc, #104]	@ (8002068 <Controller+0x2d8>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	2b7f      	cmp	r3, #127	@ 0x7f
 8002002:	dc0c      	bgt.n	800201e <Controller+0x28e>
				sendPulseMotor = maxInverse - Ypulse;
 8002004:	4b1e      	ldr	r3, [pc, #120]	@ (8002080 <Controller+0x2f0>)
 8002006:	681a      	ldr	r2, [r3, #0]
 8002008:	4b1c      	ldr	r3, [pc, #112]	@ (800207c <Controller+0x2ec>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	1ad3      	subs	r3, r2, r3
 800200e:	4a1d      	ldr	r2, [pc, #116]	@ (8002084 <Controller+0x2f4>)
 8002010:	6013      	str	r3, [r2, #0]
				Reculer(sendPulseMotor,&htim3);
 8002012:	4b1c      	ldr	r3, [pc, #112]	@ (8002084 <Controller+0x2f4>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4915      	ldr	r1, [pc, #84]	@ (800206c <Controller+0x2dc>)
 8002018:	4618      	mov	r0, r3
 800201a:	f7ff fb21 	bl	8001660 <Reculer>
			}
		}


		if(Zbutton == 0){
 800201e:	4b1a      	ldr	r3, [pc, #104]	@ (8002088 <Controller+0x2f8>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d10b      	bne.n	800203e <Controller+0x2ae>
			ToggleModeVit();
 8002026:	f000 f831 	bl	800208c <ToggleModeVit>
		if(Zbutton == 0){
			ToggleModeVit();
		}

	}
}
 800202a:	e008      	b.n	800203e <Controller+0x2ae>
		Stop(&htim3);
 800202c:	480f      	ldr	r0, [pc, #60]	@ (800206c <Controller+0x2dc>)
 800202e:	f7ff fb4f 	bl	80016d0 <Stop>
		if(Zbutton == 0){
 8002032:	4b15      	ldr	r3, [pc, #84]	@ (8002088 <Controller+0x2f8>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d101      	bne.n	800203e <Controller+0x2ae>
			ToggleModeVit();
 800203a:	f000 f827 	bl	800208c <ToggleModeVit>
}
 800203e:	bf00      	nop
 8002040:	46bd      	mov	sp, r7
 8002042:	bdb0      	pop	{r4, r5, r7, pc}
 8002044:	f3af 8000 	nop.w
 8002048:	51eb851f 	.word	0x51eb851f
 800204c:	3fd51eb8 	.word	0x3fd51eb8
 8002050:	51eb851f 	.word	0x51eb851f
 8002054:	3fe51eb8 	.word	0x3fe51eb8
 8002058:	200000dc 	.word	0x200000dc
 800205c:	2000013c 	.word	0x2000013c
 8002060:	20000170 	.word	0x20000170
 8002064:	20000160 	.word	0x20000160
 8002068:	20000164 	.word	0x20000164
 800206c:	200001d8 	.word	0x200001d8
 8002070:	2000000c 	.word	0x2000000c
 8002074:	20000010 	.word	0x20000010
 8002078:	20000168 	.word	0x20000168
 800207c:	2000016c 	.word	0x2000016c
 8002080:	20000014 	.word	0x20000014
 8002084:	20000178 	.word	0x20000178
 8002088:	20000174 	.word	0x20000174

0800208c <ToggleModeVit>:

void ToggleModeVit() {
 800208c:	b480      	push	{r7}
 800208e:	af00      	add	r7, sp, #0
	if(modeVitesse == 3) {
 8002090:	4b08      	ldr	r3, [pc, #32]	@ (80020b4 <ToggleModeVit+0x28>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	2b03      	cmp	r3, #3
 8002096:	d103      	bne.n	80020a0 <ToggleModeVit+0x14>
		modeVitesse = 1;
 8002098:	4b06      	ldr	r3, [pc, #24]	@ (80020b4 <ToggleModeVit+0x28>)
 800209a:	2201      	movs	r2, #1
 800209c:	601a      	str	r2, [r3, #0]
	}
	else {
		modeVitesse++;
	}
}
 800209e:	e004      	b.n	80020aa <ToggleModeVit+0x1e>
		modeVitesse++;
 80020a0:	4b04      	ldr	r3, [pc, #16]	@ (80020b4 <ToggleModeVit+0x28>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	3301      	adds	r3, #1
 80020a6:	4a03      	ldr	r2, [pc, #12]	@ (80020b4 <ToggleModeVit+0x28>)
 80020a8:	6013      	str	r3, [r2, #0]
}
 80020aa:	bf00      	nop
 80020ac:	46bd      	mov	sp, r7
 80020ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b2:	4770      	bx	lr
 80020b4:	2000000c 	.word	0x2000000c

080020b8 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80020bc:	4b18      	ldr	r3, [pc, #96]	@ (8002120 <MX_SPI2_Init+0x68>)
 80020be:	4a19      	ldr	r2, [pc, #100]	@ (8002124 <MX_SPI2_Init+0x6c>)
 80020c0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80020c2:	4b17      	ldr	r3, [pc, #92]	@ (8002120 <MX_SPI2_Init+0x68>)
 80020c4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80020c8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_1LINE;
 80020ca:	4b15      	ldr	r3, [pc, #84]	@ (8002120 <MX_SPI2_Init+0x68>)
 80020cc:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80020d0:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80020d2:	4b13      	ldr	r3, [pc, #76]	@ (8002120 <MX_SPI2_Init+0x68>)
 80020d4:	2200      	movs	r2, #0
 80020d6:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80020d8:	4b11      	ldr	r3, [pc, #68]	@ (8002120 <MX_SPI2_Init+0x68>)
 80020da:	2200      	movs	r2, #0
 80020dc:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80020de:	4b10      	ldr	r3, [pc, #64]	@ (8002120 <MX_SPI2_Init+0x68>)
 80020e0:	2200      	movs	r2, #0
 80020e2:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80020e4:	4b0e      	ldr	r3, [pc, #56]	@ (8002120 <MX_SPI2_Init+0x68>)
 80020e6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80020ea:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80020ec:	4b0c      	ldr	r3, [pc, #48]	@ (8002120 <MX_SPI2_Init+0x68>)
 80020ee:	2208      	movs	r2, #8
 80020f0:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80020f2:	4b0b      	ldr	r3, [pc, #44]	@ (8002120 <MX_SPI2_Init+0x68>)
 80020f4:	2200      	movs	r2, #0
 80020f6:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80020f8:	4b09      	ldr	r3, [pc, #36]	@ (8002120 <MX_SPI2_Init+0x68>)
 80020fa:	2200      	movs	r2, #0
 80020fc:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80020fe:	4b08      	ldr	r3, [pc, #32]	@ (8002120 <MX_SPI2_Init+0x68>)
 8002100:	2200      	movs	r2, #0
 8002102:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8002104:	4b06      	ldr	r3, [pc, #24]	@ (8002120 <MX_SPI2_Init+0x68>)
 8002106:	220a      	movs	r2, #10
 8002108:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800210a:	4805      	ldr	r0, [pc, #20]	@ (8002120 <MX_SPI2_Init+0x68>)
 800210c:	f002 ff28 	bl	8004f60 <HAL_SPI_Init>
 8002110:	4603      	mov	r3, r0
 8002112:	2b00      	cmp	r3, #0
 8002114:	d001      	beq.n	800211a <MX_SPI2_Init+0x62>
  {
    Error_Handler();
 8002116:	f7ff fdbf 	bl	8001c98 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800211a:	bf00      	nop
 800211c:	bd80      	pop	{r7, pc}
 800211e:	bf00      	nop
 8002120:	2000017c 	.word	0x2000017c
 8002124:	40003800 	.word	0x40003800

08002128 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b08a      	sub	sp, #40	@ 0x28
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002130:	f107 0314 	add.w	r3, r7, #20
 8002134:	2200      	movs	r2, #0
 8002136:	601a      	str	r2, [r3, #0]
 8002138:	605a      	str	r2, [r3, #4]
 800213a:	609a      	str	r2, [r3, #8]
 800213c:	60da      	str	r2, [r3, #12]
 800213e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a28      	ldr	r2, [pc, #160]	@ (80021e8 <HAL_SPI_MspInit+0xc0>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d14a      	bne.n	80021e0 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800214a:	2300      	movs	r3, #0
 800214c:	613b      	str	r3, [r7, #16]
 800214e:	4b27      	ldr	r3, [pc, #156]	@ (80021ec <HAL_SPI_MspInit+0xc4>)
 8002150:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002152:	4a26      	ldr	r2, [pc, #152]	@ (80021ec <HAL_SPI_MspInit+0xc4>)
 8002154:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002158:	6413      	str	r3, [r2, #64]	@ 0x40
 800215a:	4b24      	ldr	r3, [pc, #144]	@ (80021ec <HAL_SPI_MspInit+0xc4>)
 800215c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800215e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002162:	613b      	str	r3, [r7, #16]
 8002164:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002166:	2300      	movs	r3, #0
 8002168:	60fb      	str	r3, [r7, #12]
 800216a:	4b20      	ldr	r3, [pc, #128]	@ (80021ec <HAL_SPI_MspInit+0xc4>)
 800216c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800216e:	4a1f      	ldr	r2, [pc, #124]	@ (80021ec <HAL_SPI_MspInit+0xc4>)
 8002170:	f043 0304 	orr.w	r3, r3, #4
 8002174:	6313      	str	r3, [r2, #48]	@ 0x30
 8002176:	4b1d      	ldr	r3, [pc, #116]	@ (80021ec <HAL_SPI_MspInit+0xc4>)
 8002178:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800217a:	f003 0304 	and.w	r3, r3, #4
 800217e:	60fb      	str	r3, [r7, #12]
 8002180:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002182:	2300      	movs	r3, #0
 8002184:	60bb      	str	r3, [r7, #8]
 8002186:	4b19      	ldr	r3, [pc, #100]	@ (80021ec <HAL_SPI_MspInit+0xc4>)
 8002188:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800218a:	4a18      	ldr	r2, [pc, #96]	@ (80021ec <HAL_SPI_MspInit+0xc4>)
 800218c:	f043 0302 	orr.w	r3, r3, #2
 8002190:	6313      	str	r3, [r2, #48]	@ 0x30
 8002192:	4b16      	ldr	r3, [pc, #88]	@ (80021ec <HAL_SPI_MspInit+0xc4>)
 8002194:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002196:	f003 0302 	and.w	r3, r3, #2
 800219a:	60bb      	str	r3, [r7, #8]
 800219c:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC1     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800219e:	2302      	movs	r3, #2
 80021a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021a2:	2302      	movs	r3, #2
 80021a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a6:	2300      	movs	r3, #0
 80021a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021aa:	2303      	movs	r3, #3
 80021ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 80021ae:	2307      	movs	r3, #7
 80021b0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021b2:	f107 0314 	add.w	r3, r7, #20
 80021b6:	4619      	mov	r1, r3
 80021b8:	480d      	ldr	r0, [pc, #52]	@ (80021f0 <HAL_SPI_MspInit+0xc8>)
 80021ba:	f000 ff11 	bl	8002fe0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80021be:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80021c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021c4:	2302      	movs	r3, #2
 80021c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021c8:	2300      	movs	r3, #0
 80021ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021cc:	2303      	movs	r3, #3
 80021ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80021d0:	2305      	movs	r3, #5
 80021d2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021d4:	f107 0314 	add.w	r3, r7, #20
 80021d8:	4619      	mov	r1, r3
 80021da:	4806      	ldr	r0, [pc, #24]	@ (80021f4 <HAL_SPI_MspInit+0xcc>)
 80021dc:	f000 ff00 	bl	8002fe0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80021e0:	bf00      	nop
 80021e2:	3728      	adds	r7, #40	@ 0x28
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}
 80021e8:	40003800 	.word	0x40003800
 80021ec:	40023800 	.word	0x40023800
 80021f0:	40020800 	.word	0x40020800
 80021f4:	40020400 	.word	0x40020400

080021f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b082      	sub	sp, #8
 80021fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021fe:	2300      	movs	r3, #0
 8002200:	607b      	str	r3, [r7, #4]
 8002202:	4b10      	ldr	r3, [pc, #64]	@ (8002244 <HAL_MspInit+0x4c>)
 8002204:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002206:	4a0f      	ldr	r2, [pc, #60]	@ (8002244 <HAL_MspInit+0x4c>)
 8002208:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800220c:	6453      	str	r3, [r2, #68]	@ 0x44
 800220e:	4b0d      	ldr	r3, [pc, #52]	@ (8002244 <HAL_MspInit+0x4c>)
 8002210:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002212:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002216:	607b      	str	r3, [r7, #4]
 8002218:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800221a:	2300      	movs	r3, #0
 800221c:	603b      	str	r3, [r7, #0]
 800221e:	4b09      	ldr	r3, [pc, #36]	@ (8002244 <HAL_MspInit+0x4c>)
 8002220:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002222:	4a08      	ldr	r2, [pc, #32]	@ (8002244 <HAL_MspInit+0x4c>)
 8002224:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002228:	6413      	str	r3, [r2, #64]	@ 0x40
 800222a:	4b06      	ldr	r3, [pc, #24]	@ (8002244 <HAL_MspInit+0x4c>)
 800222c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800222e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002232:	603b      	str	r3, [r7, #0]
 8002234:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002236:	2007      	movs	r0, #7
 8002238:	f000 fe90 	bl	8002f5c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800223c:	bf00      	nop
 800223e:	3708      	adds	r7, #8
 8002240:	46bd      	mov	sp, r7
 8002242:	bd80      	pop	{r7, pc}
 8002244:	40023800 	.word	0x40023800

08002248 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002248:	b480      	push	{r7}
 800224a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800224c:	bf00      	nop
 800224e:	e7fd      	b.n	800224c <NMI_Handler+0x4>

08002250 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002250:	b480      	push	{r7}
 8002252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002254:	bf00      	nop
 8002256:	e7fd      	b.n	8002254 <HardFault_Handler+0x4>

08002258 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002258:	b480      	push	{r7}
 800225a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800225c:	bf00      	nop
 800225e:	e7fd      	b.n	800225c <MemManage_Handler+0x4>

08002260 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002260:	b480      	push	{r7}
 8002262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002264:	bf00      	nop
 8002266:	e7fd      	b.n	8002264 <BusFault_Handler+0x4>

08002268 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002268:	b480      	push	{r7}
 800226a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800226c:	bf00      	nop
 800226e:	e7fd      	b.n	800226c <UsageFault_Handler+0x4>

08002270 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002270:	b480      	push	{r7}
 8002272:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002274:	bf00      	nop
 8002276:	46bd      	mov	sp, r7
 8002278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227c:	4770      	bx	lr

0800227e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800227e:	b480      	push	{r7}
 8002280:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002282:	bf00      	nop
 8002284:	46bd      	mov	sp, r7
 8002286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228a:	4770      	bx	lr

0800228c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800228c:	b480      	push	{r7}
 800228e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002290:	bf00      	nop
 8002292:	46bd      	mov	sp, r7
 8002294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002298:	4770      	bx	lr

0800229a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800229a:	b580      	push	{r7, lr}
 800229c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800229e:	f000 fd49 	bl	8002d34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80022a2:	bf00      	nop
 80022a4:	bd80      	pop	{r7, pc}

080022a6 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80022a6:	b580      	push	{r7, lr}
 80022a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Encodeur_G_A_Pin);
 80022aa:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80022ae:	f001 f85d 	bl	800336c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Encodeur_D_A_Pin);
 80022b2:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80022b6:	f001 f859 	bl	800336c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80022ba:	bf00      	nop
 80022bc:	bd80      	pop	{r7, pc}

080022be <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80022be:	b580      	push	{r7, lr}
 80022c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Blue_Button_Pin);
 80022c2:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80022c6:	f001 f851 	bl	800336c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80022ca:	bf00      	nop
 80022cc:	bd80      	pop	{r7, pc}
	...

080022d0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80022d4:	4802      	ldr	r0, [pc, #8]	@ (80022e0 <TIM6_DAC_IRQHandler+0x10>)
 80022d6:	f003 fb6d 	bl	80059b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80022da:	bf00      	nop
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	bf00      	nop
 80022e0:	20000268 	.word	0x20000268

080022e4 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80022e8:	4802      	ldr	r0, [pc, #8]	@ (80022f4 <TIM7_IRQHandler+0x10>)
 80022ea:	f003 fb63 	bl	80059b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80022ee:	bf00      	nop
 80022f0:	bd80      	pop	{r7, pc}
 80022f2:	bf00      	nop
 80022f4:	200002b0 	.word	0x200002b0

080022f8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b086      	sub	sp, #24
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	60f8      	str	r0, [r7, #12]
 8002300:	60b9      	str	r1, [r7, #8]
 8002302:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002304:	2300      	movs	r3, #0
 8002306:	617b      	str	r3, [r7, #20]
 8002308:	e00a      	b.n	8002320 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800230a:	f3af 8000 	nop.w
 800230e:	4601      	mov	r1, r0
 8002310:	68bb      	ldr	r3, [r7, #8]
 8002312:	1c5a      	adds	r2, r3, #1
 8002314:	60ba      	str	r2, [r7, #8]
 8002316:	b2ca      	uxtb	r2, r1
 8002318:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800231a:	697b      	ldr	r3, [r7, #20]
 800231c:	3301      	adds	r3, #1
 800231e:	617b      	str	r3, [r7, #20]
 8002320:	697a      	ldr	r2, [r7, #20]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	429a      	cmp	r2, r3
 8002326:	dbf0      	blt.n	800230a <_read+0x12>
  }

  return len;
 8002328:	687b      	ldr	r3, [r7, #4]
}
 800232a:	4618      	mov	r0, r3
 800232c:	3718      	adds	r7, #24
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}

08002332 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002332:	b580      	push	{r7, lr}
 8002334:	b086      	sub	sp, #24
 8002336:	af00      	add	r7, sp, #0
 8002338:	60f8      	str	r0, [r7, #12]
 800233a:	60b9      	str	r1, [r7, #8]
 800233c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800233e:	2300      	movs	r3, #0
 8002340:	617b      	str	r3, [r7, #20]
 8002342:	e009      	b.n	8002358 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002344:	68bb      	ldr	r3, [r7, #8]
 8002346:	1c5a      	adds	r2, r3, #1
 8002348:	60ba      	str	r2, [r7, #8]
 800234a:	781b      	ldrb	r3, [r3, #0]
 800234c:	4618      	mov	r0, r3
 800234e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002352:	697b      	ldr	r3, [r7, #20]
 8002354:	3301      	adds	r3, #1
 8002356:	617b      	str	r3, [r7, #20]
 8002358:	697a      	ldr	r2, [r7, #20]
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	429a      	cmp	r2, r3
 800235e:	dbf1      	blt.n	8002344 <_write+0x12>
  }
  return len;
 8002360:	687b      	ldr	r3, [r7, #4]
}
 8002362:	4618      	mov	r0, r3
 8002364:	3718      	adds	r7, #24
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}

0800236a <_close>:

int _close(int file)
{
 800236a:	b480      	push	{r7}
 800236c:	b083      	sub	sp, #12
 800236e:	af00      	add	r7, sp, #0
 8002370:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002372:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002376:	4618      	mov	r0, r3
 8002378:	370c      	adds	r7, #12
 800237a:	46bd      	mov	sp, r7
 800237c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002380:	4770      	bx	lr

08002382 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002382:	b480      	push	{r7}
 8002384:	b083      	sub	sp, #12
 8002386:	af00      	add	r7, sp, #0
 8002388:	6078      	str	r0, [r7, #4]
 800238a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002392:	605a      	str	r2, [r3, #4]
  return 0;
 8002394:	2300      	movs	r3, #0
}
 8002396:	4618      	mov	r0, r3
 8002398:	370c      	adds	r7, #12
 800239a:	46bd      	mov	sp, r7
 800239c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a0:	4770      	bx	lr

080023a2 <_isatty>:

int _isatty(int file)
{
 80023a2:	b480      	push	{r7}
 80023a4:	b083      	sub	sp, #12
 80023a6:	af00      	add	r7, sp, #0
 80023a8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80023aa:	2301      	movs	r3, #1
}
 80023ac:	4618      	mov	r0, r3
 80023ae:	370c      	adds	r7, #12
 80023b0:	46bd      	mov	sp, r7
 80023b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b6:	4770      	bx	lr

080023b8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80023b8:	b480      	push	{r7}
 80023ba:	b085      	sub	sp, #20
 80023bc:	af00      	add	r7, sp, #0
 80023be:	60f8      	str	r0, [r7, #12]
 80023c0:	60b9      	str	r1, [r7, #8]
 80023c2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80023c4:	2300      	movs	r3, #0
}
 80023c6:	4618      	mov	r0, r3
 80023c8:	3714      	adds	r7, #20
 80023ca:	46bd      	mov	sp, r7
 80023cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d0:	4770      	bx	lr
	...

080023d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b086      	sub	sp, #24
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80023dc:	4a14      	ldr	r2, [pc, #80]	@ (8002430 <_sbrk+0x5c>)
 80023de:	4b15      	ldr	r3, [pc, #84]	@ (8002434 <_sbrk+0x60>)
 80023e0:	1ad3      	subs	r3, r2, r3
 80023e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80023e4:	697b      	ldr	r3, [r7, #20]
 80023e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80023e8:	4b13      	ldr	r3, [pc, #76]	@ (8002438 <_sbrk+0x64>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d102      	bne.n	80023f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80023f0:	4b11      	ldr	r3, [pc, #68]	@ (8002438 <_sbrk+0x64>)
 80023f2:	4a12      	ldr	r2, [pc, #72]	@ (800243c <_sbrk+0x68>)
 80023f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80023f6:	4b10      	ldr	r3, [pc, #64]	@ (8002438 <_sbrk+0x64>)
 80023f8:	681a      	ldr	r2, [r3, #0]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	4413      	add	r3, r2
 80023fe:	693a      	ldr	r2, [r7, #16]
 8002400:	429a      	cmp	r2, r3
 8002402:	d207      	bcs.n	8002414 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002404:	f005 fbe4 	bl	8007bd0 <__errno>
 8002408:	4603      	mov	r3, r0
 800240a:	220c      	movs	r2, #12
 800240c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800240e:	f04f 33ff 	mov.w	r3, #4294967295
 8002412:	e009      	b.n	8002428 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002414:	4b08      	ldr	r3, [pc, #32]	@ (8002438 <_sbrk+0x64>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800241a:	4b07      	ldr	r3, [pc, #28]	@ (8002438 <_sbrk+0x64>)
 800241c:	681a      	ldr	r2, [r3, #0]
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	4413      	add	r3, r2
 8002422:	4a05      	ldr	r2, [pc, #20]	@ (8002438 <_sbrk+0x64>)
 8002424:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002426:	68fb      	ldr	r3, [r7, #12]
}
 8002428:	4618      	mov	r0, r3
 800242a:	3718      	adds	r7, #24
 800242c:	46bd      	mov	sp, r7
 800242e:	bd80      	pop	{r7, pc}
 8002430:	20020000 	.word	0x20020000
 8002434:	00000400 	.word	0x00000400
 8002438:	200001d4 	.word	0x200001d4
 800243c:	200004b0 	.word	0x200004b0

08002440 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002440:	b480      	push	{r7}
 8002442:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002444:	4b06      	ldr	r3, [pc, #24]	@ (8002460 <SystemInit+0x20>)
 8002446:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800244a:	4a05      	ldr	r2, [pc, #20]	@ (8002460 <SystemInit+0x20>)
 800244c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002450:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002454:	bf00      	nop
 8002456:	46bd      	mov	sp, r7
 8002458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245c:	4770      	bx	lr
 800245e:	bf00      	nop
 8002460:	e000ed00 	.word	0xe000ed00

08002464 <MX_TIM3_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim7;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b08e      	sub	sp, #56	@ 0x38
 8002468:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800246a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800246e:	2200      	movs	r2, #0
 8002470:	601a      	str	r2, [r3, #0]
 8002472:	605a      	str	r2, [r3, #4]
 8002474:	609a      	str	r2, [r3, #8]
 8002476:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002478:	f107 0320 	add.w	r3, r7, #32
 800247c:	2200      	movs	r2, #0
 800247e:	601a      	str	r2, [r3, #0]
 8002480:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002482:	1d3b      	adds	r3, r7, #4
 8002484:	2200      	movs	r2, #0
 8002486:	601a      	str	r2, [r3, #0]
 8002488:	605a      	str	r2, [r3, #4]
 800248a:	609a      	str	r2, [r3, #8]
 800248c:	60da      	str	r2, [r3, #12]
 800248e:	611a      	str	r2, [r3, #16]
 8002490:	615a      	str	r2, [r3, #20]
 8002492:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002494:	4b3d      	ldr	r3, [pc, #244]	@ (800258c <MX_TIM3_Init+0x128>)
 8002496:	4a3e      	ldr	r2, [pc, #248]	@ (8002590 <MX_TIM3_Init+0x12c>)
 8002498:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84-1;
 800249a:	4b3c      	ldr	r3, [pc, #240]	@ (800258c <MX_TIM3_Init+0x128>)
 800249c:	2253      	movs	r2, #83	@ 0x53
 800249e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024a0:	4b3a      	ldr	r3, [pc, #232]	@ (800258c <MX_TIM3_Init+0x128>)
 80024a2:	2200      	movs	r2, #0
 80024a4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 500-1;
 80024a6:	4b39      	ldr	r3, [pc, #228]	@ (800258c <MX_TIM3_Init+0x128>)
 80024a8:	f240 12f3 	movw	r2, #499	@ 0x1f3
 80024ac:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024ae:	4b37      	ldr	r3, [pc, #220]	@ (800258c <MX_TIM3_Init+0x128>)
 80024b0:	2200      	movs	r2, #0
 80024b2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024b4:	4b35      	ldr	r3, [pc, #212]	@ (800258c <MX_TIM3_Init+0x128>)
 80024b6:	2200      	movs	r2, #0
 80024b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80024ba:	4834      	ldr	r0, [pc, #208]	@ (800258c <MX_TIM3_Init+0x128>)
 80024bc:	f002 fffa 	bl	80054b4 <HAL_TIM_Base_Init>
 80024c0:	4603      	mov	r3, r0
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d001      	beq.n	80024ca <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80024c6:	f7ff fbe7 	bl	8001c98 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80024ca:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80024ce:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80024d0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80024d4:	4619      	mov	r1, r3
 80024d6:	482d      	ldr	r0, [pc, #180]	@ (800258c <MX_TIM3_Init+0x128>)
 80024d8:	f003 fc1e 	bl	8005d18 <HAL_TIM_ConfigClockSource>
 80024dc:	4603      	mov	r3, r0
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d001      	beq.n	80024e6 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80024e2:	f7ff fbd9 	bl	8001c98 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80024e6:	4829      	ldr	r0, [pc, #164]	@ (800258c <MX_TIM3_Init+0x128>)
 80024e8:	f003 f8d3 	bl	8005692 <HAL_TIM_PWM_Init>
 80024ec:	4603      	mov	r3, r0
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d001      	beq.n	80024f6 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80024f2:	f7ff fbd1 	bl	8001c98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024f6:	2300      	movs	r3, #0
 80024f8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024fa:	2300      	movs	r3, #0
 80024fc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80024fe:	f107 0320 	add.w	r3, r7, #32
 8002502:	4619      	mov	r1, r3
 8002504:	4821      	ldr	r0, [pc, #132]	@ (800258c <MX_TIM3_Init+0x128>)
 8002506:	f004 f813 	bl	8006530 <HAL_TIMEx_MasterConfigSynchronization>
 800250a:	4603      	mov	r3, r0
 800250c:	2b00      	cmp	r3, #0
 800250e:	d001      	beq.n	8002514 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8002510:	f7ff fbc2 	bl	8001c98 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002514:	2360      	movs	r3, #96	@ 0x60
 8002516:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002518:	2300      	movs	r3, #0
 800251a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800251c:	2300      	movs	r3, #0
 800251e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002520:	2300      	movs	r3, #0
 8002522:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002524:	1d3b      	adds	r3, r7, #4
 8002526:	2200      	movs	r2, #0
 8002528:	4619      	mov	r1, r3
 800252a:	4818      	ldr	r0, [pc, #96]	@ (800258c <MX_TIM3_Init+0x128>)
 800252c:	f003 fb32 	bl	8005b94 <HAL_TIM_PWM_ConfigChannel>
 8002530:	4603      	mov	r3, r0
 8002532:	2b00      	cmp	r3, #0
 8002534:	d001      	beq.n	800253a <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8002536:	f7ff fbaf 	bl	8001c98 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800253a:	1d3b      	adds	r3, r7, #4
 800253c:	2204      	movs	r2, #4
 800253e:	4619      	mov	r1, r3
 8002540:	4812      	ldr	r0, [pc, #72]	@ (800258c <MX_TIM3_Init+0x128>)
 8002542:	f003 fb27 	bl	8005b94 <HAL_TIM_PWM_ConfigChannel>
 8002546:	4603      	mov	r3, r0
 8002548:	2b00      	cmp	r3, #0
 800254a:	d001      	beq.n	8002550 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 800254c:	f7ff fba4 	bl	8001c98 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002550:	1d3b      	adds	r3, r7, #4
 8002552:	2208      	movs	r2, #8
 8002554:	4619      	mov	r1, r3
 8002556:	480d      	ldr	r0, [pc, #52]	@ (800258c <MX_TIM3_Init+0x128>)
 8002558:	f003 fb1c 	bl	8005b94 <HAL_TIM_PWM_ConfigChannel>
 800255c:	4603      	mov	r3, r0
 800255e:	2b00      	cmp	r3, #0
 8002560:	d001      	beq.n	8002566 <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 8002562:	f7ff fb99 	bl	8001c98 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002566:	1d3b      	adds	r3, r7, #4
 8002568:	220c      	movs	r2, #12
 800256a:	4619      	mov	r1, r3
 800256c:	4807      	ldr	r0, [pc, #28]	@ (800258c <MX_TIM3_Init+0x128>)
 800256e:	f003 fb11 	bl	8005b94 <HAL_TIM_PWM_ConfigChannel>
 8002572:	4603      	mov	r3, r0
 8002574:	2b00      	cmp	r3, #0
 8002576:	d001      	beq.n	800257c <MX_TIM3_Init+0x118>
  {
    Error_Handler();
 8002578:	f7ff fb8e 	bl	8001c98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800257c:	4803      	ldr	r0, [pc, #12]	@ (800258c <MX_TIM3_Init+0x128>)
 800257e:	f000 f95d 	bl	800283c <HAL_TIM_MspPostInit>

}
 8002582:	bf00      	nop
 8002584:	3738      	adds	r7, #56	@ 0x38
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}
 800258a:	bf00      	nop
 800258c:	200001d8 	.word	0x200001d8
 8002590:	40000400 	.word	0x40000400

08002594 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b08e      	sub	sp, #56	@ 0x38
 8002598:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800259a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800259e:	2200      	movs	r2, #0
 80025a0:	601a      	str	r2, [r3, #0]
 80025a2:	605a      	str	r2, [r3, #4]
 80025a4:	609a      	str	r2, [r3, #8]
 80025a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025a8:	f107 0320 	add.w	r3, r7, #32
 80025ac:	2200      	movs	r2, #0
 80025ae:	601a      	str	r2, [r3, #0]
 80025b0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80025b2:	1d3b      	adds	r3, r7, #4
 80025b4:	2200      	movs	r2, #0
 80025b6:	601a      	str	r2, [r3, #0]
 80025b8:	605a      	str	r2, [r3, #4]
 80025ba:	609a      	str	r2, [r3, #8]
 80025bc:	60da      	str	r2, [r3, #12]
 80025be:	611a      	str	r2, [r3, #16]
 80025c0:	615a      	str	r2, [r3, #20]
 80025c2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80025c4:	4b2d      	ldr	r3, [pc, #180]	@ (800267c <MX_TIM4_Init+0xe8>)
 80025c6:	4a2e      	ldr	r2, [pc, #184]	@ (8002680 <MX_TIM4_Init+0xec>)
 80025c8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 300-1;
 80025ca:	4b2c      	ldr	r3, [pc, #176]	@ (800267c <MX_TIM4_Init+0xe8>)
 80025cc:	f240 122b 	movw	r2, #299	@ 0x12b
 80025d0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025d2:	4b2a      	ldr	r3, [pc, #168]	@ (800267c <MX_TIM4_Init+0xe8>)
 80025d4:	2200      	movs	r2, #0
 80025d6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000-1;
 80025d8:	4b28      	ldr	r3, [pc, #160]	@ (800267c <MX_TIM4_Init+0xe8>)
 80025da:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80025de:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025e0:	4b26      	ldr	r3, [pc, #152]	@ (800267c <MX_TIM4_Init+0xe8>)
 80025e2:	2200      	movs	r2, #0
 80025e4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025e6:	4b25      	ldr	r3, [pc, #148]	@ (800267c <MX_TIM4_Init+0xe8>)
 80025e8:	2200      	movs	r2, #0
 80025ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80025ec:	4823      	ldr	r0, [pc, #140]	@ (800267c <MX_TIM4_Init+0xe8>)
 80025ee:	f002 ff61 	bl	80054b4 <HAL_TIM_Base_Init>
 80025f2:	4603      	mov	r3, r0
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d001      	beq.n	80025fc <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 80025f8:	f7ff fb4e 	bl	8001c98 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80025fc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002600:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002602:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002606:	4619      	mov	r1, r3
 8002608:	481c      	ldr	r0, [pc, #112]	@ (800267c <MX_TIM4_Init+0xe8>)
 800260a:	f003 fb85 	bl	8005d18 <HAL_TIM_ConfigClockSource>
 800260e:	4603      	mov	r3, r0
 8002610:	2b00      	cmp	r3, #0
 8002612:	d001      	beq.n	8002618 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8002614:	f7ff fb40 	bl	8001c98 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002618:	4818      	ldr	r0, [pc, #96]	@ (800267c <MX_TIM4_Init+0xe8>)
 800261a:	f003 f83a 	bl	8005692 <HAL_TIM_PWM_Init>
 800261e:	4603      	mov	r3, r0
 8002620:	2b00      	cmp	r3, #0
 8002622:	d001      	beq.n	8002628 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8002624:	f7ff fb38 	bl	8001c98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002628:	2300      	movs	r3, #0
 800262a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800262c:	2300      	movs	r3, #0
 800262e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002630:	f107 0320 	add.w	r3, r7, #32
 8002634:	4619      	mov	r1, r3
 8002636:	4811      	ldr	r0, [pc, #68]	@ (800267c <MX_TIM4_Init+0xe8>)
 8002638:	f003 ff7a 	bl	8006530 <HAL_TIMEx_MasterConfigSynchronization>
 800263c:	4603      	mov	r3, r0
 800263e:	2b00      	cmp	r3, #0
 8002640:	d001      	beq.n	8002646 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8002642:	f7ff fb29 	bl	8001c98 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002646:	2360      	movs	r3, #96	@ 0x60
 8002648:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800264a:	2300      	movs	r3, #0
 800264c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800264e:	2300      	movs	r3, #0
 8002650:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002652:	2300      	movs	r3, #0
 8002654:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002656:	1d3b      	adds	r3, r7, #4
 8002658:	2204      	movs	r2, #4
 800265a:	4619      	mov	r1, r3
 800265c:	4807      	ldr	r0, [pc, #28]	@ (800267c <MX_TIM4_Init+0xe8>)
 800265e:	f003 fa99 	bl	8005b94 <HAL_TIM_PWM_ConfigChannel>
 8002662:	4603      	mov	r3, r0
 8002664:	2b00      	cmp	r3, #0
 8002666:	d001      	beq.n	800266c <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8002668:	f7ff fb16 	bl	8001c98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800266c:	4803      	ldr	r0, [pc, #12]	@ (800267c <MX_TIM4_Init+0xe8>)
 800266e:	f000 f8e5 	bl	800283c <HAL_TIM_MspPostInit>

}
 8002672:	bf00      	nop
 8002674:	3738      	adds	r7, #56	@ 0x38
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}
 800267a:	bf00      	nop
 800267c:	20000220 	.word	0x20000220
 8002680:	40000800 	.word	0x40000800

08002684 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b082      	sub	sp, #8
 8002688:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800268a:	463b      	mov	r3, r7
 800268c:	2200      	movs	r2, #0
 800268e:	601a      	str	r2, [r3, #0]
 8002690:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002692:	4b15      	ldr	r3, [pc, #84]	@ (80026e8 <MX_TIM6_Init+0x64>)
 8002694:	4a15      	ldr	r2, [pc, #84]	@ (80026ec <MX_TIM6_Init+0x68>)
 8002696:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 42000-1;
 8002698:	4b13      	ldr	r3, [pc, #76]	@ (80026e8 <MX_TIM6_Init+0x64>)
 800269a:	f24a 420f 	movw	r2, #41999	@ 0xa40f
 800269e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026a0:	4b11      	ldr	r3, [pc, #68]	@ (80026e8 <MX_TIM6_Init+0x64>)
 80026a2:	2200      	movs	r2, #0
 80026a4:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 200-1;
 80026a6:	4b10      	ldr	r3, [pc, #64]	@ (80026e8 <MX_TIM6_Init+0x64>)
 80026a8:	22c7      	movs	r2, #199	@ 0xc7
 80026aa:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026ac:	4b0e      	ldr	r3, [pc, #56]	@ (80026e8 <MX_TIM6_Init+0x64>)
 80026ae:	2200      	movs	r2, #0
 80026b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80026b2:	480d      	ldr	r0, [pc, #52]	@ (80026e8 <MX_TIM6_Init+0x64>)
 80026b4:	f002 fefe 	bl	80054b4 <HAL_TIM_Base_Init>
 80026b8:	4603      	mov	r3, r0
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d001      	beq.n	80026c2 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 80026be:	f7ff faeb 	bl	8001c98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80026c2:	2320      	movs	r3, #32
 80026c4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026c6:	2300      	movs	r3, #0
 80026c8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80026ca:	463b      	mov	r3, r7
 80026cc:	4619      	mov	r1, r3
 80026ce:	4806      	ldr	r0, [pc, #24]	@ (80026e8 <MX_TIM6_Init+0x64>)
 80026d0:	f003 ff2e 	bl	8006530 <HAL_TIMEx_MasterConfigSynchronization>
 80026d4:	4603      	mov	r3, r0
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d001      	beq.n	80026de <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 80026da:	f7ff fadd 	bl	8001c98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80026de:	bf00      	nop
 80026e0:	3708      	adds	r7, #8
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}
 80026e6:	bf00      	nop
 80026e8:	20000268 	.word	0x20000268
 80026ec:	40001000 	.word	0x40001000

080026f0 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b082      	sub	sp, #8
 80026f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80026f6:	463b      	mov	r3, r7
 80026f8:	2200      	movs	r2, #0
 80026fa:	601a      	str	r2, [r3, #0]
 80026fc:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80026fe:	4b14      	ldr	r3, [pc, #80]	@ (8002750 <MX_TIM7_Init+0x60>)
 8002700:	4a14      	ldr	r2, [pc, #80]	@ (8002754 <MX_TIM7_Init+0x64>)
 8002702:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 83;
 8002704:	4b12      	ldr	r3, [pc, #72]	@ (8002750 <MX_TIM7_Init+0x60>)
 8002706:	2253      	movs	r2, #83	@ 0x53
 8002708:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800270a:	4b11      	ldr	r3, [pc, #68]	@ (8002750 <MX_TIM7_Init+0x60>)
 800270c:	2200      	movs	r2, #0
 800270e:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 9;
 8002710:	4b0f      	ldr	r3, [pc, #60]	@ (8002750 <MX_TIM7_Init+0x60>)
 8002712:	2209      	movs	r2, #9
 8002714:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002716:	4b0e      	ldr	r3, [pc, #56]	@ (8002750 <MX_TIM7_Init+0x60>)
 8002718:	2200      	movs	r2, #0
 800271a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800271c:	480c      	ldr	r0, [pc, #48]	@ (8002750 <MX_TIM7_Init+0x60>)
 800271e:	f002 fec9 	bl	80054b4 <HAL_TIM_Base_Init>
 8002722:	4603      	mov	r3, r0
 8002724:	2b00      	cmp	r3, #0
 8002726:	d001      	beq.n	800272c <MX_TIM7_Init+0x3c>
  {
    Error_Handler();
 8002728:	f7ff fab6 	bl	8001c98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800272c:	2300      	movs	r3, #0
 800272e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002730:	2300      	movs	r3, #0
 8002732:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8002734:	463b      	mov	r3, r7
 8002736:	4619      	mov	r1, r3
 8002738:	4805      	ldr	r0, [pc, #20]	@ (8002750 <MX_TIM7_Init+0x60>)
 800273a:	f003 fef9 	bl	8006530 <HAL_TIMEx_MasterConfigSynchronization>
 800273e:	4603      	mov	r3, r0
 8002740:	2b00      	cmp	r3, #0
 8002742:	d001      	beq.n	8002748 <MX_TIM7_Init+0x58>
  {
    Error_Handler();
 8002744:	f7ff faa8 	bl	8001c98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8002748:	bf00      	nop
 800274a:	3708      	adds	r7, #8
 800274c:	46bd      	mov	sp, r7
 800274e:	bd80      	pop	{r7, pc}
 8002750:	200002b0 	.word	0x200002b0
 8002754:	40001400 	.word	0x40001400

08002758 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b086      	sub	sp, #24
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a30      	ldr	r2, [pc, #192]	@ (8002828 <HAL_TIM_Base_MspInit+0xd0>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d10e      	bne.n	8002788 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800276a:	2300      	movs	r3, #0
 800276c:	617b      	str	r3, [r7, #20]
 800276e:	4b2f      	ldr	r3, [pc, #188]	@ (800282c <HAL_TIM_Base_MspInit+0xd4>)
 8002770:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002772:	4a2e      	ldr	r2, [pc, #184]	@ (800282c <HAL_TIM_Base_MspInit+0xd4>)
 8002774:	f043 0302 	orr.w	r3, r3, #2
 8002778:	6413      	str	r3, [r2, #64]	@ 0x40
 800277a:	4b2c      	ldr	r3, [pc, #176]	@ (800282c <HAL_TIM_Base_MspInit+0xd4>)
 800277c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800277e:	f003 0302 	and.w	r3, r3, #2
 8002782:	617b      	str	r3, [r7, #20]
 8002784:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8002786:	e04a      	b.n	800281e <HAL_TIM_Base_MspInit+0xc6>
  else if(tim_baseHandle->Instance==TIM4)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a28      	ldr	r2, [pc, #160]	@ (8002830 <HAL_TIM_Base_MspInit+0xd8>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d10e      	bne.n	80027b0 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002792:	2300      	movs	r3, #0
 8002794:	613b      	str	r3, [r7, #16]
 8002796:	4b25      	ldr	r3, [pc, #148]	@ (800282c <HAL_TIM_Base_MspInit+0xd4>)
 8002798:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800279a:	4a24      	ldr	r2, [pc, #144]	@ (800282c <HAL_TIM_Base_MspInit+0xd4>)
 800279c:	f043 0304 	orr.w	r3, r3, #4
 80027a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80027a2:	4b22      	ldr	r3, [pc, #136]	@ (800282c <HAL_TIM_Base_MspInit+0xd4>)
 80027a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027a6:	f003 0304 	and.w	r3, r3, #4
 80027aa:	613b      	str	r3, [r7, #16]
 80027ac:	693b      	ldr	r3, [r7, #16]
}
 80027ae:	e036      	b.n	800281e <HAL_TIM_Base_MspInit+0xc6>
  else if(tim_baseHandle->Instance==TIM6)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a1f      	ldr	r2, [pc, #124]	@ (8002834 <HAL_TIM_Base_MspInit+0xdc>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d116      	bne.n	80027e8 <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80027ba:	2300      	movs	r3, #0
 80027bc:	60fb      	str	r3, [r7, #12]
 80027be:	4b1b      	ldr	r3, [pc, #108]	@ (800282c <HAL_TIM_Base_MspInit+0xd4>)
 80027c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027c2:	4a1a      	ldr	r2, [pc, #104]	@ (800282c <HAL_TIM_Base_MspInit+0xd4>)
 80027c4:	f043 0310 	orr.w	r3, r3, #16
 80027c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80027ca:	4b18      	ldr	r3, [pc, #96]	@ (800282c <HAL_TIM_Base_MspInit+0xd4>)
 80027cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027ce:	f003 0310 	and.w	r3, r3, #16
 80027d2:	60fb      	str	r3, [r7, #12]
 80027d4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80027d6:	2200      	movs	r2, #0
 80027d8:	2100      	movs	r1, #0
 80027da:	2036      	movs	r0, #54	@ 0x36
 80027dc:	f000 fbc9 	bl	8002f72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80027e0:	2036      	movs	r0, #54	@ 0x36
 80027e2:	f000 fbe2 	bl	8002faa <HAL_NVIC_EnableIRQ>
}
 80027e6:	e01a      	b.n	800281e <HAL_TIM_Base_MspInit+0xc6>
  else if(tim_baseHandle->Instance==TIM7)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a12      	ldr	r2, [pc, #72]	@ (8002838 <HAL_TIM_Base_MspInit+0xe0>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d115      	bne.n	800281e <HAL_TIM_Base_MspInit+0xc6>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80027f2:	2300      	movs	r3, #0
 80027f4:	60bb      	str	r3, [r7, #8]
 80027f6:	4b0d      	ldr	r3, [pc, #52]	@ (800282c <HAL_TIM_Base_MspInit+0xd4>)
 80027f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027fa:	4a0c      	ldr	r2, [pc, #48]	@ (800282c <HAL_TIM_Base_MspInit+0xd4>)
 80027fc:	f043 0320 	orr.w	r3, r3, #32
 8002800:	6413      	str	r3, [r2, #64]	@ 0x40
 8002802:	4b0a      	ldr	r3, [pc, #40]	@ (800282c <HAL_TIM_Base_MspInit+0xd4>)
 8002804:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002806:	f003 0320 	and.w	r3, r3, #32
 800280a:	60bb      	str	r3, [r7, #8]
 800280c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 800280e:	2200      	movs	r2, #0
 8002810:	2100      	movs	r1, #0
 8002812:	2037      	movs	r0, #55	@ 0x37
 8002814:	f000 fbad 	bl	8002f72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002818:	2037      	movs	r0, #55	@ 0x37
 800281a:	f000 fbc6 	bl	8002faa <HAL_NVIC_EnableIRQ>
}
 800281e:	bf00      	nop
 8002820:	3718      	adds	r7, #24
 8002822:	46bd      	mov	sp, r7
 8002824:	bd80      	pop	{r7, pc}
 8002826:	bf00      	nop
 8002828:	40000400 	.word	0x40000400
 800282c:	40023800 	.word	0x40023800
 8002830:	40000800 	.word	0x40000800
 8002834:	40001000 	.word	0x40001000
 8002838:	40001400 	.word	0x40001400

0800283c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b08a      	sub	sp, #40	@ 0x28
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002844:	f107 0314 	add.w	r3, r7, #20
 8002848:	2200      	movs	r2, #0
 800284a:	601a      	str	r2, [r3, #0]
 800284c:	605a      	str	r2, [r3, #4]
 800284e:	609a      	str	r2, [r3, #8]
 8002850:	60da      	str	r2, [r3, #12]
 8002852:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a33      	ldr	r2, [pc, #204]	@ (8002928 <HAL_TIM_MspPostInit+0xec>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d13c      	bne.n	80028d8 <HAL_TIM_MspPostInit+0x9c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800285e:	2300      	movs	r3, #0
 8002860:	613b      	str	r3, [r7, #16]
 8002862:	4b32      	ldr	r3, [pc, #200]	@ (800292c <HAL_TIM_MspPostInit+0xf0>)
 8002864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002866:	4a31      	ldr	r2, [pc, #196]	@ (800292c <HAL_TIM_MspPostInit+0xf0>)
 8002868:	f043 0301 	orr.w	r3, r3, #1
 800286c:	6313      	str	r3, [r2, #48]	@ 0x30
 800286e:	4b2f      	ldr	r3, [pc, #188]	@ (800292c <HAL_TIM_MspPostInit+0xf0>)
 8002870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002872:	f003 0301 	and.w	r3, r3, #1
 8002876:	613b      	str	r3, [r7, #16]
 8002878:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800287a:	2300      	movs	r3, #0
 800287c:	60fb      	str	r3, [r7, #12]
 800287e:	4b2b      	ldr	r3, [pc, #172]	@ (800292c <HAL_TIM_MspPostInit+0xf0>)
 8002880:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002882:	4a2a      	ldr	r2, [pc, #168]	@ (800292c <HAL_TIM_MspPostInit+0xf0>)
 8002884:	f043 0302 	orr.w	r3, r3, #2
 8002888:	6313      	str	r3, [r2, #48]	@ 0x30
 800288a:	4b28      	ldr	r3, [pc, #160]	@ (800292c <HAL_TIM_MspPostInit+0xf0>)
 800288c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800288e:	f003 0302 	and.w	r3, r3, #2
 8002892:	60fb      	str	r3, [r7, #12]
 8002894:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = Gauche_av_Pin|Gauche_re_Pin;
 8002896:	23c0      	movs	r3, #192	@ 0xc0
 8002898:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800289a:	2302      	movs	r3, #2
 800289c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800289e:	2300      	movs	r3, #0
 80028a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028a2:	2300      	movs	r3, #0
 80028a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80028a6:	2302      	movs	r3, #2
 80028a8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028aa:	f107 0314 	add.w	r3, r7, #20
 80028ae:	4619      	mov	r1, r3
 80028b0:	481f      	ldr	r0, [pc, #124]	@ (8002930 <HAL_TIM_MspPostInit+0xf4>)
 80028b2:	f000 fb95 	bl	8002fe0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Droit_av_Pin|Droit_re_Pin;
 80028b6:	2303      	movs	r3, #3
 80028b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028ba:	2302      	movs	r3, #2
 80028bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028be:	2300      	movs	r3, #0
 80028c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028c2:	2300      	movs	r3, #0
 80028c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80028c6:	2302      	movs	r3, #2
 80028c8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028ca:	f107 0314 	add.w	r3, r7, #20
 80028ce:	4619      	mov	r1, r3
 80028d0:	4818      	ldr	r0, [pc, #96]	@ (8002934 <HAL_TIM_MspPostInit+0xf8>)
 80028d2:	f000 fb85 	bl	8002fe0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80028d6:	e022      	b.n	800291e <HAL_TIM_MspPostInit+0xe2>
  else if(timHandle->Instance==TIM4)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a16      	ldr	r2, [pc, #88]	@ (8002938 <HAL_TIM_MspPostInit+0xfc>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d11d      	bne.n	800291e <HAL_TIM_MspPostInit+0xe2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028e2:	2300      	movs	r3, #0
 80028e4:	60bb      	str	r3, [r7, #8]
 80028e6:	4b11      	ldr	r3, [pc, #68]	@ (800292c <HAL_TIM_MspPostInit+0xf0>)
 80028e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028ea:	4a10      	ldr	r2, [pc, #64]	@ (800292c <HAL_TIM_MspPostInit+0xf0>)
 80028ec:	f043 0302 	orr.w	r3, r3, #2
 80028f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80028f2:	4b0e      	ldr	r3, [pc, #56]	@ (800292c <HAL_TIM_MspPostInit+0xf0>)
 80028f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028f6:	f003 0302 	and.w	r3, r3, #2
 80028fa:	60bb      	str	r3, [r7, #8]
 80028fc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = LCD_BL_Pin;
 80028fe:	2380      	movs	r3, #128	@ 0x80
 8002900:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002902:	2302      	movs	r3, #2
 8002904:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002906:	2300      	movs	r3, #0
 8002908:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800290a:	2300      	movs	r3, #0
 800290c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800290e:	2302      	movs	r3, #2
 8002910:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(LCD_BL_GPIO_Port, &GPIO_InitStruct);
 8002912:	f107 0314 	add.w	r3, r7, #20
 8002916:	4619      	mov	r1, r3
 8002918:	4806      	ldr	r0, [pc, #24]	@ (8002934 <HAL_TIM_MspPostInit+0xf8>)
 800291a:	f000 fb61 	bl	8002fe0 <HAL_GPIO_Init>
}
 800291e:	bf00      	nop
 8002920:	3728      	adds	r7, #40	@ 0x28
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}
 8002926:	bf00      	nop
 8002928:	40000400 	.word	0x40000400
 800292c:	40023800 	.word	0x40023800
 8002930:	40020000 	.word	0x40020000
 8002934:	40020400 	.word	0x40020400
 8002938:	40000800 	.word	0x40000800

0800293c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002940:	4b11      	ldr	r3, [pc, #68]	@ (8002988 <MX_USART2_UART_Init+0x4c>)
 8002942:	4a12      	ldr	r2, [pc, #72]	@ (800298c <MX_USART2_UART_Init+0x50>)
 8002944:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002946:	4b10      	ldr	r3, [pc, #64]	@ (8002988 <MX_USART2_UART_Init+0x4c>)
 8002948:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800294c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800294e:	4b0e      	ldr	r3, [pc, #56]	@ (8002988 <MX_USART2_UART_Init+0x4c>)
 8002950:	2200      	movs	r2, #0
 8002952:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002954:	4b0c      	ldr	r3, [pc, #48]	@ (8002988 <MX_USART2_UART_Init+0x4c>)
 8002956:	2200      	movs	r2, #0
 8002958:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800295a:	4b0b      	ldr	r3, [pc, #44]	@ (8002988 <MX_USART2_UART_Init+0x4c>)
 800295c:	2200      	movs	r2, #0
 800295e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002960:	4b09      	ldr	r3, [pc, #36]	@ (8002988 <MX_USART2_UART_Init+0x4c>)
 8002962:	220c      	movs	r2, #12
 8002964:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002966:	4b08      	ldr	r3, [pc, #32]	@ (8002988 <MX_USART2_UART_Init+0x4c>)
 8002968:	2200      	movs	r2, #0
 800296a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800296c:	4b06      	ldr	r3, [pc, #24]	@ (8002988 <MX_USART2_UART_Init+0x4c>)
 800296e:	2200      	movs	r2, #0
 8002970:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002972:	4805      	ldr	r0, [pc, #20]	@ (8002988 <MX_USART2_UART_Init+0x4c>)
 8002974:	f003 fe6c 	bl	8006650 <HAL_UART_Init>
 8002978:	4603      	mov	r3, r0
 800297a:	2b00      	cmp	r3, #0
 800297c:	d001      	beq.n	8002982 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800297e:	f7ff f98b 	bl	8001c98 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002982:	bf00      	nop
 8002984:	bd80      	pop	{r7, pc}
 8002986:	bf00      	nop
 8002988:	200002f8 	.word	0x200002f8
 800298c:	40004400 	.word	0x40004400

08002990 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b08a      	sub	sp, #40	@ 0x28
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002998:	f107 0314 	add.w	r3, r7, #20
 800299c:	2200      	movs	r2, #0
 800299e:	601a      	str	r2, [r3, #0]
 80029a0:	605a      	str	r2, [r3, #4]
 80029a2:	609a      	str	r2, [r3, #8]
 80029a4:	60da      	str	r2, [r3, #12]
 80029a6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a19      	ldr	r2, [pc, #100]	@ (8002a14 <HAL_UART_MspInit+0x84>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d12b      	bne.n	8002a0a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80029b2:	2300      	movs	r3, #0
 80029b4:	613b      	str	r3, [r7, #16]
 80029b6:	4b18      	ldr	r3, [pc, #96]	@ (8002a18 <HAL_UART_MspInit+0x88>)
 80029b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029ba:	4a17      	ldr	r2, [pc, #92]	@ (8002a18 <HAL_UART_MspInit+0x88>)
 80029bc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80029c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80029c2:	4b15      	ldr	r3, [pc, #84]	@ (8002a18 <HAL_UART_MspInit+0x88>)
 80029c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029ca:	613b      	str	r3, [r7, #16]
 80029cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029ce:	2300      	movs	r3, #0
 80029d0:	60fb      	str	r3, [r7, #12]
 80029d2:	4b11      	ldr	r3, [pc, #68]	@ (8002a18 <HAL_UART_MspInit+0x88>)
 80029d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029d6:	4a10      	ldr	r2, [pc, #64]	@ (8002a18 <HAL_UART_MspInit+0x88>)
 80029d8:	f043 0301 	orr.w	r3, r3, #1
 80029dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80029de:	4b0e      	ldr	r3, [pc, #56]	@ (8002a18 <HAL_UART_MspInit+0x88>)
 80029e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029e2:	f003 0301 	and.w	r3, r3, #1
 80029e6:	60fb      	str	r3, [r7, #12]
 80029e8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80029ea:	230c      	movs	r3, #12
 80029ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029ee:	2302      	movs	r3, #2
 80029f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029f2:	2300      	movs	r3, #0
 80029f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029f6:	2303      	movs	r3, #3
 80029f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80029fa:	2307      	movs	r3, #7
 80029fc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029fe:	f107 0314 	add.w	r3, r7, #20
 8002a02:	4619      	mov	r1, r3
 8002a04:	4805      	ldr	r0, [pc, #20]	@ (8002a1c <HAL_UART_MspInit+0x8c>)
 8002a06:	f000 faeb 	bl	8002fe0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002a0a:	bf00      	nop
 8002a0c:	3728      	adds	r7, #40	@ 0x28
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}
 8002a12:	bf00      	nop
 8002a14:	40004400 	.word	0x40004400
 8002a18:	40023800 	.word	0x40023800
 8002a1c:	40020000 	.word	0x40020000

08002a20 <LCD_Init>:
	Paint_DrawString_EN (190, 100, buffVG,        &Font20,    MAGENTA,  WHITE);
	Paint_DrawString_EN (190, 125, buffVD,        &Font20,    MAGENTA,  WHITE);
}

void LCD_Init(uint8_t* a)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b088      	sub	sp, #32
 8002a24:	af02      	add	r7, sp, #8
 8002a26:	6078      	str	r0, [r7, #4]
	char charMode[12];
//	printf("LCD_2IN_test Demo\r\n");
	DEV_Module_Init();
 8002a28:	f004 f8e8 	bl	8006bfc <DEV_Module_Init>

//  printf("LCD_2IN_ Init and Clear...\r\n");
	LCD_2IN_SetBackLight(1000);
 8002a2c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002a30:	f004 fda0 	bl	8007574 <LCD_2IN_SetBackLight>
	LCD_2IN_Init();
 8002a34:	f004 fbe6 	bl	8007204 <LCD_2IN_Init>
	LCD_2IN_Clear(WHITE);
 8002a38:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8002a3c:	f004 fd52 	bl	80074e4 <LCD_2IN_Clear>

//  printf("Paint_NewImage\r\n");
	Paint_NewImage(LCD_2IN_WIDTH,LCD_2IN_HEIGHT, ROTATE_90, WHITE);
 8002a40:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002a44:	225a      	movs	r2, #90	@ 0x5a
 8002a46:	f44f 71a0 	mov.w	r1, #320	@ 0x140
 8002a4a:	20f0      	movs	r0, #240	@ 0xf0
 8002a4c:	f004 f8f6 	bl	8006c3c <Paint_NewImage>

//  printf("Set Clear and Display Funtion\r\n");
	Paint_SetClearFuntion(LCD_2IN_Clear);
 8002a50:	486a      	ldr	r0, [pc, #424]	@ (8002bfc <LCD_Init+0x1dc>)
 8002a52:	f004 f93f 	bl	8006cd4 <Paint_SetClearFuntion>
	Paint_SetDisplayFuntion(LCD_2IN_DrawPaint);
 8002a56:	486a      	ldr	r0, [pc, #424]	@ (8002c00 <LCD_Init+0x1e0>)
 8002a58:	f004 f94c 	bl	8006cf4 <Paint_SetDisplayFuntion>

  printf("Paint_Clear\r\n");
 8002a5c:	4869      	ldr	r0, [pc, #420]	@ (8002c04 <LCD_Init+0x1e4>)
 8002a5e:	f004 ff79 	bl	8007954 <puts>
	Paint_Clear(MAGENTA);
 8002a62:	f64f 001f 	movw	r0, #63519	@ 0xf81f
 8002a66:	f004 fa2f 	bl	8006ec8 <Paint_Clear>
	DEV_Delay_ms(500);
 8002a6a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002a6e:	f000 f981 	bl	8002d74 <HAL_Delay>

	//  printf("Painting...\r\n");
	Paint_SetRotate(ROTATE_270);
 8002a72:	f44f 7087 	mov.w	r0, #270	@ 0x10e
 8002a76:	f004 f94d 	bl	8006d14 <Paint_SetRotate>
	Paint_DrawString_EN (50, 100, "DEMARRAGE DU",        &Font24,    MAGENTA,  WHITE);
 8002a7a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002a7e:	9301      	str	r3, [sp, #4]
 8002a80:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 8002a84:	9300      	str	r3, [sp, #0]
 8002a86:	4b60      	ldr	r3, [pc, #384]	@ (8002c08 <LCD_Init+0x1e8>)
 8002a88:	4a60      	ldr	r2, [pc, #384]	@ (8002c0c <LCD_Init+0x1ec>)
 8002a8a:	2164      	movs	r1, #100	@ 0x64
 8002a8c:	2032      	movs	r0, #50	@ 0x32
 8002a8e:	f004 fad7 	bl	8007040 <Paint_DrawString_EN>
	Paint_DrawString_EN (100, 125, "PROJET",        &Font24,    MAGENTA,  WHITE);
 8002a92:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002a96:	9301      	str	r3, [sp, #4]
 8002a98:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 8002a9c:	9300      	str	r3, [sp, #0]
 8002a9e:	4b5a      	ldr	r3, [pc, #360]	@ (8002c08 <LCD_Init+0x1e8>)
 8002aa0:	4a5b      	ldr	r2, [pc, #364]	@ (8002c10 <LCD_Init+0x1f0>)
 8002aa2:	217d      	movs	r1, #125	@ 0x7d
 8002aa4:	2064      	movs	r0, #100	@ 0x64
 8002aa6:	f004 facb 	bl	8007040 <Paint_DrawString_EN>
	Paint_DrawString_EN (70, 150, "VROUM-VROUM",        &Font24,    MAGENTA,  WHITE);
 8002aaa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002aae:	9301      	str	r3, [sp, #4]
 8002ab0:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 8002ab4:	9300      	str	r3, [sp, #0]
 8002ab6:	4b54      	ldr	r3, [pc, #336]	@ (8002c08 <LCD_Init+0x1e8>)
 8002ab8:	4a56      	ldr	r2, [pc, #344]	@ (8002c14 <LCD_Init+0x1f4>)
 8002aba:	2196      	movs	r1, #150	@ 0x96
 8002abc:	2046      	movs	r0, #70	@ 0x46
 8002abe:	f004 fabf 	bl	8007040 <Paint_DrawString_EN>
	DEV_Delay_ms(500);
 8002ac2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002ac6:	f000 f955 	bl	8002d74 <HAL_Delay>
	Paint_Clear(MAGENTA);
 8002aca:	f64f 001f 	movw	r0, #63519	@ 0xf81f
 8002ace:	f004 f9fb 	bl	8006ec8 <Paint_Clear>

	Paint_DrawString_EN (85, 100, "LE PROJET",        &Font24,    MAGENTA,  WHITE);
 8002ad2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002ad6:	9301      	str	r3, [sp, #4]
 8002ad8:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 8002adc:	9300      	str	r3, [sp, #0]
 8002ade:	4b4a      	ldr	r3, [pc, #296]	@ (8002c08 <LCD_Init+0x1e8>)
 8002ae0:	4a4d      	ldr	r2, [pc, #308]	@ (8002c18 <LCD_Init+0x1f8>)
 8002ae2:	2164      	movs	r1, #100	@ 0x64
 8002ae4:	2055      	movs	r0, #85	@ 0x55
 8002ae6:	f004 faab 	bl	8007040 <Paint_DrawString_EN>
	Paint_DrawString_EN (70, 125, "VROUM-VROUM",        &Font24,    MAGENTA,  WHITE);
 8002aea:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002aee:	9301      	str	r3, [sp, #4]
 8002af0:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 8002af4:	9300      	str	r3, [sp, #0]
 8002af6:	4b44      	ldr	r3, [pc, #272]	@ (8002c08 <LCD_Init+0x1e8>)
 8002af8:	4a46      	ldr	r2, [pc, #280]	@ (8002c14 <LCD_Init+0x1f4>)
 8002afa:	217d      	movs	r1, #125	@ 0x7d
 8002afc:	2046      	movs	r0, #70	@ 0x46
 8002afe:	f004 fa9f 	bl	8007040 <Paint_DrawString_EN>
	Paint_DrawString_EN (85, 150, "VOUS SALUT",        &Font24,    MAGENTA,  WHITE);
 8002b02:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002b06:	9301      	str	r3, [sp, #4]
 8002b08:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 8002b0c:	9300      	str	r3, [sp, #0]
 8002b0e:	4b3e      	ldr	r3, [pc, #248]	@ (8002c08 <LCD_Init+0x1e8>)
 8002b10:	4a42      	ldr	r2, [pc, #264]	@ (8002c1c <LCD_Init+0x1fc>)
 8002b12:	2196      	movs	r1, #150	@ 0x96
 8002b14:	2055      	movs	r0, #85	@ 0x55
 8002b16:	f004 fa93 	bl	8007040 <Paint_DrawString_EN>
	DEV_Delay_ms(500);
 8002b1a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002b1e:	f000 f929 	bl	8002d74 <HAL_Delay>
	Paint_Clear(MAGENTA);
 8002b22:	f64f 001f 	movw	r0, #63519	@ 0xf81f
 8002b26:	f004 f9cf 	bl	8006ec8 <Paint_Clear>

	Paint_DrawString_EN (5, 1, "La date : ",        &Font24,    MAGENTA,  WHITE);
 8002b2a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002b2e:	9301      	str	r3, [sp, #4]
 8002b30:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 8002b34:	9300      	str	r3, [sp, #0]
 8002b36:	4b34      	ldr	r3, [pc, #208]	@ (8002c08 <LCD_Init+0x1e8>)
 8002b38:	4a39      	ldr	r2, [pc, #228]	@ (8002c20 <LCD_Init+0x200>)
 8002b3a:	2101      	movs	r1, #1
 8002b3c:	2005      	movs	r0, #5
 8002b3e:	f004 fa7f 	bl	8007040 <Paint_DrawString_EN>
	Paint_DrawString_EN (5, 25, "L'heure : ",        &Font24,    MAGENTA,  WHITE);
 8002b42:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002b46:	9301      	str	r3, [sp, #4]
 8002b48:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 8002b4c:	9300      	str	r3, [sp, #0]
 8002b4e:	4b2e      	ldr	r3, [pc, #184]	@ (8002c08 <LCD_Init+0x1e8>)
 8002b50:	4a34      	ldr	r2, [pc, #208]	@ (8002c24 <LCD_Init+0x204>)
 8002b52:	2119      	movs	r1, #25
 8002b54:	2005      	movs	r0, #5
 8002b56:	f004 fa73 	bl	8007040 <Paint_DrawString_EN>
	Paint_DrawString_EN (5, 50, "Mode actuel : ",        &Font24,    MAGENTA,  WHITE);
 8002b5a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002b5e:	9301      	str	r3, [sp, #4]
 8002b60:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 8002b64:	9300      	str	r3, [sp, #0]
 8002b66:	4b28      	ldr	r3, [pc, #160]	@ (8002c08 <LCD_Init+0x1e8>)
 8002b68:	4a2f      	ldr	r2, [pc, #188]	@ (8002c28 <LCD_Init+0x208>)
 8002b6a:	2132      	movs	r1, #50	@ 0x32
 8002b6c:	2005      	movs	r0, #5
 8002b6e:	f004 fa67 	bl	8007040 <Paint_DrawString_EN>


	Paint_DrawString_EN (250, 50, charMode,        &Font24,    MAGENTA,  WHITE);
 8002b72:	f107 020c 	add.w	r2, r7, #12
 8002b76:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002b7a:	9301      	str	r3, [sp, #4]
 8002b7c:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 8002b80:	9300      	str	r3, [sp, #0]
 8002b82:	4b21      	ldr	r3, [pc, #132]	@ (8002c08 <LCD_Init+0x1e8>)
 8002b84:	2132      	movs	r1, #50	@ 0x32
 8002b86:	20fa      	movs	r0, #250	@ 0xfa
 8002b88:	f004 fa5a 	bl	8007040 <Paint_DrawString_EN>

	Paint_DrawString_EN (5, 100, "Vitesse G : ",        &Font24,    MAGENTA,  WHITE);
 8002b8c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002b90:	9301      	str	r3, [sp, #4]
 8002b92:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 8002b96:	9300      	str	r3, [sp, #0]
 8002b98:	4b1b      	ldr	r3, [pc, #108]	@ (8002c08 <LCD_Init+0x1e8>)
 8002b9a:	4a24      	ldr	r2, [pc, #144]	@ (8002c2c <LCD_Init+0x20c>)
 8002b9c:	2164      	movs	r1, #100	@ 0x64
 8002b9e:	2005      	movs	r0, #5
 8002ba0:	f004 fa4e 	bl	8007040 <Paint_DrawString_EN>
	Paint_DrawString_EN (5, 125, "Vitesse D : ",        &Font24,    MAGENTA,  WHITE);
 8002ba4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002ba8:	9301      	str	r3, [sp, #4]
 8002baa:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 8002bae:	9300      	str	r3, [sp, #0]
 8002bb0:	4b15      	ldr	r3, [pc, #84]	@ (8002c08 <LCD_Init+0x1e8>)
 8002bb2:	4a1f      	ldr	r2, [pc, #124]	@ (8002c30 <LCD_Init+0x210>)
 8002bb4:	217d      	movs	r1, #125	@ 0x7d
 8002bb6:	2005      	movs	r0, #5
 8002bb8:	f004 fa42 	bl	8007040 <Paint_DrawString_EN>
	Paint_DrawString_EN (10, 220, "Attention aux enfants",        &Font20,    YELLOW,  RED);
 8002bbc:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8002bc0:	9301      	str	r3, [sp, #4]
 8002bc2:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8002bc6:	9300      	str	r3, [sp, #0]
 8002bc8:	4b1a      	ldr	r3, [pc, #104]	@ (8002c34 <LCD_Init+0x214>)
 8002bca:	4a1b      	ldr	r2, [pc, #108]	@ (8002c38 <LCD_Init+0x218>)
 8002bcc:	21dc      	movs	r1, #220	@ 0xdc
 8002bce:	200a      	movs	r0, #10
 8002bd0:	f004 fa36 	bl	8007040 <Paint_DrawString_EN>

	DEV_Delay_ms(3000);
 8002bd4:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8002bd8:	f000 f8cc 	bl	8002d74 <HAL_Delay>
	strcpy(charMode, Get_Mode_String());
 8002bdc:	f7fe f960 	bl	8000ea0 <Get_Mode_String>
 8002be0:	4602      	mov	r2, r0
 8002be2:	f107 030c 	add.w	r3, r7, #12
 8002be6:	4611      	mov	r1, r2
 8002be8:	4618      	mov	r0, r3
 8002bea:	f005 f81e 	bl	8007c2a <strcpy>

	*a = 1;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2201      	movs	r2, #1
 8002bf2:	701a      	strb	r2, [r3, #0]
	//DEV_Module_Exit();

}
 8002bf4:	bf00      	nop
 8002bf6:	3718      	adds	r7, #24
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bd80      	pop	{r7, pc}
 8002bfc:	080074e5 	.word	0x080074e5
 8002c00:	08007545 	.word	0x08007545
 8002c04:	08008530 	.word	0x08008530
 8002c08:	2000002c 	.word	0x2000002c
 8002c0c:	08008540 	.word	0x08008540
 8002c10:	08008550 	.word	0x08008550
 8002c14:	08008558 	.word	0x08008558
 8002c18:	08008564 	.word	0x08008564
 8002c1c:	08008570 	.word	0x08008570
 8002c20:	0800857c 	.word	0x0800857c
 8002c24:	08008588 	.word	0x08008588
 8002c28:	08008594 	.word	0x08008594
 8002c2c:	080085a4 	.word	0x080085a4
 8002c30:	080085b4 	.word	0x080085b4
 8002c34:	20000024 	.word	0x20000024
 8002c38:	080085c4 	.word	0x080085c4

08002c3c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002c3c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002c74 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002c40:	f7ff fbfe 	bl	8002440 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002c44:	480c      	ldr	r0, [pc, #48]	@ (8002c78 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002c46:	490d      	ldr	r1, [pc, #52]	@ (8002c7c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002c48:	4a0d      	ldr	r2, [pc, #52]	@ (8002c80 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002c4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002c4c:	e002      	b.n	8002c54 <LoopCopyDataInit>

08002c4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002c4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002c50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002c52:	3304      	adds	r3, #4

08002c54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002c54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002c56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002c58:	d3f9      	bcc.n	8002c4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002c5a:	4a0a      	ldr	r2, [pc, #40]	@ (8002c84 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002c5c:	4c0a      	ldr	r4, [pc, #40]	@ (8002c88 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002c5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002c60:	e001      	b.n	8002c66 <LoopFillZerobss>

08002c62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002c62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002c64:	3204      	adds	r2, #4

08002c66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002c66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002c68:	d3fb      	bcc.n	8002c62 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002c6a:	f004 ffb7 	bl	8007bdc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002c6e:	f7fe fe6f 	bl	8001950 <main>
  bx  lr    
 8002c72:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002c74:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002c78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002c7c:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8002c80:	0800b2cc 	.word	0x0800b2cc
  ldr r2, =_sbss
 8002c84:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8002c88:	200004b0 	.word	0x200004b0

08002c8c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002c8c:	e7fe      	b.n	8002c8c <ADC_IRQHandler>
	...

08002c90 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002c94:	4b0e      	ldr	r3, [pc, #56]	@ (8002cd0 <HAL_Init+0x40>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4a0d      	ldr	r2, [pc, #52]	@ (8002cd0 <HAL_Init+0x40>)
 8002c9a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002c9e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002ca0:	4b0b      	ldr	r3, [pc, #44]	@ (8002cd0 <HAL_Init+0x40>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a0a      	ldr	r2, [pc, #40]	@ (8002cd0 <HAL_Init+0x40>)
 8002ca6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002caa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002cac:	4b08      	ldr	r3, [pc, #32]	@ (8002cd0 <HAL_Init+0x40>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a07      	ldr	r2, [pc, #28]	@ (8002cd0 <HAL_Init+0x40>)
 8002cb2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002cb6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002cb8:	2003      	movs	r0, #3
 8002cba:	f000 f94f 	bl	8002f5c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002cbe:	2000      	movs	r0, #0
 8002cc0:	f000 f808 	bl	8002cd4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002cc4:	f7ff fa98 	bl	80021f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002cc8:	2300      	movs	r3, #0
}
 8002cca:	4618      	mov	r0, r3
 8002ccc:	bd80      	pop	{r7, pc}
 8002cce:	bf00      	nop
 8002cd0:	40023c00 	.word	0x40023c00

08002cd4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b082      	sub	sp, #8
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002cdc:	4b12      	ldr	r3, [pc, #72]	@ (8002d28 <HAL_InitTick+0x54>)
 8002cde:	681a      	ldr	r2, [r3, #0]
 8002ce0:	4b12      	ldr	r3, [pc, #72]	@ (8002d2c <HAL_InitTick+0x58>)
 8002ce2:	781b      	ldrb	r3, [r3, #0]
 8002ce4:	4619      	mov	r1, r3
 8002ce6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002cea:	fbb3 f3f1 	udiv	r3, r3, r1
 8002cee:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f000 f967 	bl	8002fc6 <HAL_SYSTICK_Config>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d001      	beq.n	8002d02 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	e00e      	b.n	8002d20 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2b0f      	cmp	r3, #15
 8002d06:	d80a      	bhi.n	8002d1e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d08:	2200      	movs	r2, #0
 8002d0a:	6879      	ldr	r1, [r7, #4]
 8002d0c:	f04f 30ff 	mov.w	r0, #4294967295
 8002d10:	f000 f92f 	bl	8002f72 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002d14:	4a06      	ldr	r2, [pc, #24]	@ (8002d30 <HAL_InitTick+0x5c>)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	e000      	b.n	8002d20 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002d1e:	2301      	movs	r3, #1
}
 8002d20:	4618      	mov	r0, r3
 8002d22:	3708      	adds	r7, #8
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bd80      	pop	{r7, pc}
 8002d28:	20000018 	.word	0x20000018
 8002d2c:	20000020 	.word	0x20000020
 8002d30:	2000001c 	.word	0x2000001c

08002d34 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d34:	b480      	push	{r7}
 8002d36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002d38:	4b06      	ldr	r3, [pc, #24]	@ (8002d54 <HAL_IncTick+0x20>)
 8002d3a:	781b      	ldrb	r3, [r3, #0]
 8002d3c:	461a      	mov	r2, r3
 8002d3e:	4b06      	ldr	r3, [pc, #24]	@ (8002d58 <HAL_IncTick+0x24>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4413      	add	r3, r2
 8002d44:	4a04      	ldr	r2, [pc, #16]	@ (8002d58 <HAL_IncTick+0x24>)
 8002d46:	6013      	str	r3, [r2, #0]
}
 8002d48:	bf00      	nop
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d50:	4770      	bx	lr
 8002d52:	bf00      	nop
 8002d54:	20000020 	.word	0x20000020
 8002d58:	20000340 	.word	0x20000340

08002d5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	af00      	add	r7, sp, #0
  return uwTick;
 8002d60:	4b03      	ldr	r3, [pc, #12]	@ (8002d70 <HAL_GetTick+0x14>)
 8002d62:	681b      	ldr	r3, [r3, #0]
}
 8002d64:	4618      	mov	r0, r3
 8002d66:	46bd      	mov	sp, r7
 8002d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6c:	4770      	bx	lr
 8002d6e:	bf00      	nop
 8002d70:	20000340 	.word	0x20000340

08002d74 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b084      	sub	sp, #16
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002d7c:	f7ff ffee 	bl	8002d5c <HAL_GetTick>
 8002d80:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d8c:	d005      	beq.n	8002d9a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002d8e:	4b0a      	ldr	r3, [pc, #40]	@ (8002db8 <HAL_Delay+0x44>)
 8002d90:	781b      	ldrb	r3, [r3, #0]
 8002d92:	461a      	mov	r2, r3
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	4413      	add	r3, r2
 8002d98:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002d9a:	bf00      	nop
 8002d9c:	f7ff ffde 	bl	8002d5c <HAL_GetTick>
 8002da0:	4602      	mov	r2, r0
 8002da2:	68bb      	ldr	r3, [r7, #8]
 8002da4:	1ad3      	subs	r3, r2, r3
 8002da6:	68fa      	ldr	r2, [r7, #12]
 8002da8:	429a      	cmp	r2, r3
 8002daa:	d8f7      	bhi.n	8002d9c <HAL_Delay+0x28>
  {
  }
}
 8002dac:	bf00      	nop
 8002dae:	bf00      	nop
 8002db0:	3710      	adds	r7, #16
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bd80      	pop	{r7, pc}
 8002db6:	bf00      	nop
 8002db8:	20000020 	.word	0x20000020

08002dbc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b085      	sub	sp, #20
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	f003 0307 	and.w	r3, r3, #7
 8002dca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002dcc:	4b0c      	ldr	r3, [pc, #48]	@ (8002e00 <__NVIC_SetPriorityGrouping+0x44>)
 8002dce:	68db      	ldr	r3, [r3, #12]
 8002dd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002dd2:	68ba      	ldr	r2, [r7, #8]
 8002dd4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002dd8:	4013      	ands	r3, r2
 8002dda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002de0:	68bb      	ldr	r3, [r7, #8]
 8002de2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002de4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002de8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002dec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002dee:	4a04      	ldr	r2, [pc, #16]	@ (8002e00 <__NVIC_SetPriorityGrouping+0x44>)
 8002df0:	68bb      	ldr	r3, [r7, #8]
 8002df2:	60d3      	str	r3, [r2, #12]
}
 8002df4:	bf00      	nop
 8002df6:	3714      	adds	r7, #20
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfe:	4770      	bx	lr
 8002e00:	e000ed00 	.word	0xe000ed00

08002e04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e04:	b480      	push	{r7}
 8002e06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e08:	4b04      	ldr	r3, [pc, #16]	@ (8002e1c <__NVIC_GetPriorityGrouping+0x18>)
 8002e0a:	68db      	ldr	r3, [r3, #12]
 8002e0c:	0a1b      	lsrs	r3, r3, #8
 8002e0e:	f003 0307 	and.w	r3, r3, #7
}
 8002e12:	4618      	mov	r0, r3
 8002e14:	46bd      	mov	sp, r7
 8002e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1a:	4770      	bx	lr
 8002e1c:	e000ed00 	.word	0xe000ed00

08002e20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e20:	b480      	push	{r7}
 8002e22:	b083      	sub	sp, #12
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	4603      	mov	r3, r0
 8002e28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	db0b      	blt.n	8002e4a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e32:	79fb      	ldrb	r3, [r7, #7]
 8002e34:	f003 021f 	and.w	r2, r3, #31
 8002e38:	4907      	ldr	r1, [pc, #28]	@ (8002e58 <__NVIC_EnableIRQ+0x38>)
 8002e3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e3e:	095b      	lsrs	r3, r3, #5
 8002e40:	2001      	movs	r0, #1
 8002e42:	fa00 f202 	lsl.w	r2, r0, r2
 8002e46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002e4a:	bf00      	nop
 8002e4c:	370c      	adds	r7, #12
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e54:	4770      	bx	lr
 8002e56:	bf00      	nop
 8002e58:	e000e100 	.word	0xe000e100

08002e5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b083      	sub	sp, #12
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	4603      	mov	r3, r0
 8002e64:	6039      	str	r1, [r7, #0]
 8002e66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	db0a      	blt.n	8002e86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	b2da      	uxtb	r2, r3
 8002e74:	490c      	ldr	r1, [pc, #48]	@ (8002ea8 <__NVIC_SetPriority+0x4c>)
 8002e76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e7a:	0112      	lsls	r2, r2, #4
 8002e7c:	b2d2      	uxtb	r2, r2
 8002e7e:	440b      	add	r3, r1
 8002e80:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e84:	e00a      	b.n	8002e9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	b2da      	uxtb	r2, r3
 8002e8a:	4908      	ldr	r1, [pc, #32]	@ (8002eac <__NVIC_SetPriority+0x50>)
 8002e8c:	79fb      	ldrb	r3, [r7, #7]
 8002e8e:	f003 030f 	and.w	r3, r3, #15
 8002e92:	3b04      	subs	r3, #4
 8002e94:	0112      	lsls	r2, r2, #4
 8002e96:	b2d2      	uxtb	r2, r2
 8002e98:	440b      	add	r3, r1
 8002e9a:	761a      	strb	r2, [r3, #24]
}
 8002e9c:	bf00      	nop
 8002e9e:	370c      	adds	r7, #12
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea6:	4770      	bx	lr
 8002ea8:	e000e100 	.word	0xe000e100
 8002eac:	e000ed00 	.word	0xe000ed00

08002eb0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	b089      	sub	sp, #36	@ 0x24
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	60f8      	str	r0, [r7, #12]
 8002eb8:	60b9      	str	r1, [r7, #8]
 8002eba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	f003 0307 	and.w	r3, r3, #7
 8002ec2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ec4:	69fb      	ldr	r3, [r7, #28]
 8002ec6:	f1c3 0307 	rsb	r3, r3, #7
 8002eca:	2b04      	cmp	r3, #4
 8002ecc:	bf28      	it	cs
 8002ece:	2304      	movcs	r3, #4
 8002ed0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ed2:	69fb      	ldr	r3, [r7, #28]
 8002ed4:	3304      	adds	r3, #4
 8002ed6:	2b06      	cmp	r3, #6
 8002ed8:	d902      	bls.n	8002ee0 <NVIC_EncodePriority+0x30>
 8002eda:	69fb      	ldr	r3, [r7, #28]
 8002edc:	3b03      	subs	r3, #3
 8002ede:	e000      	b.n	8002ee2 <NVIC_EncodePriority+0x32>
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ee4:	f04f 32ff 	mov.w	r2, #4294967295
 8002ee8:	69bb      	ldr	r3, [r7, #24]
 8002eea:	fa02 f303 	lsl.w	r3, r2, r3
 8002eee:	43da      	mvns	r2, r3
 8002ef0:	68bb      	ldr	r3, [r7, #8]
 8002ef2:	401a      	ands	r2, r3
 8002ef4:	697b      	ldr	r3, [r7, #20]
 8002ef6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ef8:	f04f 31ff 	mov.w	r1, #4294967295
 8002efc:	697b      	ldr	r3, [r7, #20]
 8002efe:	fa01 f303 	lsl.w	r3, r1, r3
 8002f02:	43d9      	mvns	r1, r3
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f08:	4313      	orrs	r3, r2
         );
}
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	3724      	adds	r7, #36	@ 0x24
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f14:	4770      	bx	lr
	...

08002f18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b082      	sub	sp, #8
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	3b01      	subs	r3, #1
 8002f24:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002f28:	d301      	bcc.n	8002f2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	e00f      	b.n	8002f4e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f2e:	4a0a      	ldr	r2, [pc, #40]	@ (8002f58 <SysTick_Config+0x40>)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	3b01      	subs	r3, #1
 8002f34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f36:	210f      	movs	r1, #15
 8002f38:	f04f 30ff 	mov.w	r0, #4294967295
 8002f3c:	f7ff ff8e 	bl	8002e5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f40:	4b05      	ldr	r3, [pc, #20]	@ (8002f58 <SysTick_Config+0x40>)
 8002f42:	2200      	movs	r2, #0
 8002f44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f46:	4b04      	ldr	r3, [pc, #16]	@ (8002f58 <SysTick_Config+0x40>)
 8002f48:	2207      	movs	r2, #7
 8002f4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f4c:	2300      	movs	r3, #0
}
 8002f4e:	4618      	mov	r0, r3
 8002f50:	3708      	adds	r7, #8
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}
 8002f56:	bf00      	nop
 8002f58:	e000e010 	.word	0xe000e010

08002f5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b082      	sub	sp, #8
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f64:	6878      	ldr	r0, [r7, #4]
 8002f66:	f7ff ff29 	bl	8002dbc <__NVIC_SetPriorityGrouping>
}
 8002f6a:	bf00      	nop
 8002f6c:	3708      	adds	r7, #8
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}

08002f72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002f72:	b580      	push	{r7, lr}
 8002f74:	b086      	sub	sp, #24
 8002f76:	af00      	add	r7, sp, #0
 8002f78:	4603      	mov	r3, r0
 8002f7a:	60b9      	str	r1, [r7, #8]
 8002f7c:	607a      	str	r2, [r7, #4]
 8002f7e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002f80:	2300      	movs	r3, #0
 8002f82:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002f84:	f7ff ff3e 	bl	8002e04 <__NVIC_GetPriorityGrouping>
 8002f88:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f8a:	687a      	ldr	r2, [r7, #4]
 8002f8c:	68b9      	ldr	r1, [r7, #8]
 8002f8e:	6978      	ldr	r0, [r7, #20]
 8002f90:	f7ff ff8e 	bl	8002eb0 <NVIC_EncodePriority>
 8002f94:	4602      	mov	r2, r0
 8002f96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f9a:	4611      	mov	r1, r2
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	f7ff ff5d 	bl	8002e5c <__NVIC_SetPriority>
}
 8002fa2:	bf00      	nop
 8002fa4:	3718      	adds	r7, #24
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}

08002faa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002faa:	b580      	push	{r7, lr}
 8002fac:	b082      	sub	sp, #8
 8002fae:	af00      	add	r7, sp, #0
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002fb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fb8:	4618      	mov	r0, r3
 8002fba:	f7ff ff31 	bl	8002e20 <__NVIC_EnableIRQ>
}
 8002fbe:	bf00      	nop
 8002fc0:	3708      	adds	r7, #8
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bd80      	pop	{r7, pc}

08002fc6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002fc6:	b580      	push	{r7, lr}
 8002fc8:	b082      	sub	sp, #8
 8002fca:	af00      	add	r7, sp, #0
 8002fcc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002fce:	6878      	ldr	r0, [r7, #4]
 8002fd0:	f7ff ffa2 	bl	8002f18 <SysTick_Config>
 8002fd4:	4603      	mov	r3, r0
}
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	3708      	adds	r7, #8
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bd80      	pop	{r7, pc}
	...

08002fe0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	b089      	sub	sp, #36	@ 0x24
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
 8002fe8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002fea:	2300      	movs	r3, #0
 8002fec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002fee:	2300      	movs	r3, #0
 8002ff0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	61fb      	str	r3, [r7, #28]
 8002ffa:	e165      	b.n	80032c8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002ffc:	2201      	movs	r2, #1
 8002ffe:	69fb      	ldr	r3, [r7, #28]
 8003000:	fa02 f303 	lsl.w	r3, r2, r3
 8003004:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	697a      	ldr	r2, [r7, #20]
 800300c:	4013      	ands	r3, r2
 800300e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003010:	693a      	ldr	r2, [r7, #16]
 8003012:	697b      	ldr	r3, [r7, #20]
 8003014:	429a      	cmp	r2, r3
 8003016:	f040 8154 	bne.w	80032c2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	f003 0303 	and.w	r3, r3, #3
 8003022:	2b01      	cmp	r3, #1
 8003024:	d005      	beq.n	8003032 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800302e:	2b02      	cmp	r3, #2
 8003030:	d130      	bne.n	8003094 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	689b      	ldr	r3, [r3, #8]
 8003036:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003038:	69fb      	ldr	r3, [r7, #28]
 800303a:	005b      	lsls	r3, r3, #1
 800303c:	2203      	movs	r2, #3
 800303e:	fa02 f303 	lsl.w	r3, r2, r3
 8003042:	43db      	mvns	r3, r3
 8003044:	69ba      	ldr	r2, [r7, #24]
 8003046:	4013      	ands	r3, r2
 8003048:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	68da      	ldr	r2, [r3, #12]
 800304e:	69fb      	ldr	r3, [r7, #28]
 8003050:	005b      	lsls	r3, r3, #1
 8003052:	fa02 f303 	lsl.w	r3, r2, r3
 8003056:	69ba      	ldr	r2, [r7, #24]
 8003058:	4313      	orrs	r3, r2
 800305a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	69ba      	ldr	r2, [r7, #24]
 8003060:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003068:	2201      	movs	r2, #1
 800306a:	69fb      	ldr	r3, [r7, #28]
 800306c:	fa02 f303 	lsl.w	r3, r2, r3
 8003070:	43db      	mvns	r3, r3
 8003072:	69ba      	ldr	r2, [r7, #24]
 8003074:	4013      	ands	r3, r2
 8003076:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	091b      	lsrs	r3, r3, #4
 800307e:	f003 0201 	and.w	r2, r3, #1
 8003082:	69fb      	ldr	r3, [r7, #28]
 8003084:	fa02 f303 	lsl.w	r3, r2, r3
 8003088:	69ba      	ldr	r2, [r7, #24]
 800308a:	4313      	orrs	r3, r2
 800308c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	69ba      	ldr	r2, [r7, #24]
 8003092:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	f003 0303 	and.w	r3, r3, #3
 800309c:	2b03      	cmp	r3, #3
 800309e:	d017      	beq.n	80030d0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	68db      	ldr	r3, [r3, #12]
 80030a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80030a6:	69fb      	ldr	r3, [r7, #28]
 80030a8:	005b      	lsls	r3, r3, #1
 80030aa:	2203      	movs	r2, #3
 80030ac:	fa02 f303 	lsl.w	r3, r2, r3
 80030b0:	43db      	mvns	r3, r3
 80030b2:	69ba      	ldr	r2, [r7, #24]
 80030b4:	4013      	ands	r3, r2
 80030b6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	689a      	ldr	r2, [r3, #8]
 80030bc:	69fb      	ldr	r3, [r7, #28]
 80030be:	005b      	lsls	r3, r3, #1
 80030c0:	fa02 f303 	lsl.w	r3, r2, r3
 80030c4:	69ba      	ldr	r2, [r7, #24]
 80030c6:	4313      	orrs	r3, r2
 80030c8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	69ba      	ldr	r2, [r7, #24]
 80030ce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	f003 0303 	and.w	r3, r3, #3
 80030d8:	2b02      	cmp	r3, #2
 80030da:	d123      	bne.n	8003124 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80030dc:	69fb      	ldr	r3, [r7, #28]
 80030de:	08da      	lsrs	r2, r3, #3
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	3208      	adds	r2, #8
 80030e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80030ea:	69fb      	ldr	r3, [r7, #28]
 80030ec:	f003 0307 	and.w	r3, r3, #7
 80030f0:	009b      	lsls	r3, r3, #2
 80030f2:	220f      	movs	r2, #15
 80030f4:	fa02 f303 	lsl.w	r3, r2, r3
 80030f8:	43db      	mvns	r3, r3
 80030fa:	69ba      	ldr	r2, [r7, #24]
 80030fc:	4013      	ands	r3, r2
 80030fe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	691a      	ldr	r2, [r3, #16]
 8003104:	69fb      	ldr	r3, [r7, #28]
 8003106:	f003 0307 	and.w	r3, r3, #7
 800310a:	009b      	lsls	r3, r3, #2
 800310c:	fa02 f303 	lsl.w	r3, r2, r3
 8003110:	69ba      	ldr	r2, [r7, #24]
 8003112:	4313      	orrs	r3, r2
 8003114:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003116:	69fb      	ldr	r3, [r7, #28]
 8003118:	08da      	lsrs	r2, r3, #3
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	3208      	adds	r2, #8
 800311e:	69b9      	ldr	r1, [r7, #24]
 8003120:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800312a:	69fb      	ldr	r3, [r7, #28]
 800312c:	005b      	lsls	r3, r3, #1
 800312e:	2203      	movs	r2, #3
 8003130:	fa02 f303 	lsl.w	r3, r2, r3
 8003134:	43db      	mvns	r3, r3
 8003136:	69ba      	ldr	r2, [r7, #24]
 8003138:	4013      	ands	r3, r2
 800313a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	f003 0203 	and.w	r2, r3, #3
 8003144:	69fb      	ldr	r3, [r7, #28]
 8003146:	005b      	lsls	r3, r3, #1
 8003148:	fa02 f303 	lsl.w	r3, r2, r3
 800314c:	69ba      	ldr	r2, [r7, #24]
 800314e:	4313      	orrs	r3, r2
 8003150:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	69ba      	ldr	r2, [r7, #24]
 8003156:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003160:	2b00      	cmp	r3, #0
 8003162:	f000 80ae 	beq.w	80032c2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003166:	2300      	movs	r3, #0
 8003168:	60fb      	str	r3, [r7, #12]
 800316a:	4b5d      	ldr	r3, [pc, #372]	@ (80032e0 <HAL_GPIO_Init+0x300>)
 800316c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800316e:	4a5c      	ldr	r2, [pc, #368]	@ (80032e0 <HAL_GPIO_Init+0x300>)
 8003170:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003174:	6453      	str	r3, [r2, #68]	@ 0x44
 8003176:	4b5a      	ldr	r3, [pc, #360]	@ (80032e0 <HAL_GPIO_Init+0x300>)
 8003178:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800317a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800317e:	60fb      	str	r3, [r7, #12]
 8003180:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003182:	4a58      	ldr	r2, [pc, #352]	@ (80032e4 <HAL_GPIO_Init+0x304>)
 8003184:	69fb      	ldr	r3, [r7, #28]
 8003186:	089b      	lsrs	r3, r3, #2
 8003188:	3302      	adds	r3, #2
 800318a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800318e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003190:	69fb      	ldr	r3, [r7, #28]
 8003192:	f003 0303 	and.w	r3, r3, #3
 8003196:	009b      	lsls	r3, r3, #2
 8003198:	220f      	movs	r2, #15
 800319a:	fa02 f303 	lsl.w	r3, r2, r3
 800319e:	43db      	mvns	r3, r3
 80031a0:	69ba      	ldr	r2, [r7, #24]
 80031a2:	4013      	ands	r3, r2
 80031a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	4a4f      	ldr	r2, [pc, #316]	@ (80032e8 <HAL_GPIO_Init+0x308>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d025      	beq.n	80031fa <HAL_GPIO_Init+0x21a>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	4a4e      	ldr	r2, [pc, #312]	@ (80032ec <HAL_GPIO_Init+0x30c>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d01f      	beq.n	80031f6 <HAL_GPIO_Init+0x216>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	4a4d      	ldr	r2, [pc, #308]	@ (80032f0 <HAL_GPIO_Init+0x310>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d019      	beq.n	80031f2 <HAL_GPIO_Init+0x212>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	4a4c      	ldr	r2, [pc, #304]	@ (80032f4 <HAL_GPIO_Init+0x314>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d013      	beq.n	80031ee <HAL_GPIO_Init+0x20e>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	4a4b      	ldr	r2, [pc, #300]	@ (80032f8 <HAL_GPIO_Init+0x318>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d00d      	beq.n	80031ea <HAL_GPIO_Init+0x20a>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	4a4a      	ldr	r2, [pc, #296]	@ (80032fc <HAL_GPIO_Init+0x31c>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d007      	beq.n	80031e6 <HAL_GPIO_Init+0x206>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	4a49      	ldr	r2, [pc, #292]	@ (8003300 <HAL_GPIO_Init+0x320>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d101      	bne.n	80031e2 <HAL_GPIO_Init+0x202>
 80031de:	2306      	movs	r3, #6
 80031e0:	e00c      	b.n	80031fc <HAL_GPIO_Init+0x21c>
 80031e2:	2307      	movs	r3, #7
 80031e4:	e00a      	b.n	80031fc <HAL_GPIO_Init+0x21c>
 80031e6:	2305      	movs	r3, #5
 80031e8:	e008      	b.n	80031fc <HAL_GPIO_Init+0x21c>
 80031ea:	2304      	movs	r3, #4
 80031ec:	e006      	b.n	80031fc <HAL_GPIO_Init+0x21c>
 80031ee:	2303      	movs	r3, #3
 80031f0:	e004      	b.n	80031fc <HAL_GPIO_Init+0x21c>
 80031f2:	2302      	movs	r3, #2
 80031f4:	e002      	b.n	80031fc <HAL_GPIO_Init+0x21c>
 80031f6:	2301      	movs	r3, #1
 80031f8:	e000      	b.n	80031fc <HAL_GPIO_Init+0x21c>
 80031fa:	2300      	movs	r3, #0
 80031fc:	69fa      	ldr	r2, [r7, #28]
 80031fe:	f002 0203 	and.w	r2, r2, #3
 8003202:	0092      	lsls	r2, r2, #2
 8003204:	4093      	lsls	r3, r2
 8003206:	69ba      	ldr	r2, [r7, #24]
 8003208:	4313      	orrs	r3, r2
 800320a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800320c:	4935      	ldr	r1, [pc, #212]	@ (80032e4 <HAL_GPIO_Init+0x304>)
 800320e:	69fb      	ldr	r3, [r7, #28]
 8003210:	089b      	lsrs	r3, r3, #2
 8003212:	3302      	adds	r3, #2
 8003214:	69ba      	ldr	r2, [r7, #24]
 8003216:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800321a:	4b3a      	ldr	r3, [pc, #232]	@ (8003304 <HAL_GPIO_Init+0x324>)
 800321c:	689b      	ldr	r3, [r3, #8]
 800321e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003220:	693b      	ldr	r3, [r7, #16]
 8003222:	43db      	mvns	r3, r3
 8003224:	69ba      	ldr	r2, [r7, #24]
 8003226:	4013      	ands	r3, r2
 8003228:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003232:	2b00      	cmp	r3, #0
 8003234:	d003      	beq.n	800323e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003236:	69ba      	ldr	r2, [r7, #24]
 8003238:	693b      	ldr	r3, [r7, #16]
 800323a:	4313      	orrs	r3, r2
 800323c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800323e:	4a31      	ldr	r2, [pc, #196]	@ (8003304 <HAL_GPIO_Init+0x324>)
 8003240:	69bb      	ldr	r3, [r7, #24]
 8003242:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003244:	4b2f      	ldr	r3, [pc, #188]	@ (8003304 <HAL_GPIO_Init+0x324>)
 8003246:	68db      	ldr	r3, [r3, #12]
 8003248:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800324a:	693b      	ldr	r3, [r7, #16]
 800324c:	43db      	mvns	r3, r3
 800324e:	69ba      	ldr	r2, [r7, #24]
 8003250:	4013      	ands	r3, r2
 8003252:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800325c:	2b00      	cmp	r3, #0
 800325e:	d003      	beq.n	8003268 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003260:	69ba      	ldr	r2, [r7, #24]
 8003262:	693b      	ldr	r3, [r7, #16]
 8003264:	4313      	orrs	r3, r2
 8003266:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003268:	4a26      	ldr	r2, [pc, #152]	@ (8003304 <HAL_GPIO_Init+0x324>)
 800326a:	69bb      	ldr	r3, [r7, #24]
 800326c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800326e:	4b25      	ldr	r3, [pc, #148]	@ (8003304 <HAL_GPIO_Init+0x324>)
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003274:	693b      	ldr	r3, [r7, #16]
 8003276:	43db      	mvns	r3, r3
 8003278:	69ba      	ldr	r2, [r7, #24]
 800327a:	4013      	ands	r3, r2
 800327c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003286:	2b00      	cmp	r3, #0
 8003288:	d003      	beq.n	8003292 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800328a:	69ba      	ldr	r2, [r7, #24]
 800328c:	693b      	ldr	r3, [r7, #16]
 800328e:	4313      	orrs	r3, r2
 8003290:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003292:	4a1c      	ldr	r2, [pc, #112]	@ (8003304 <HAL_GPIO_Init+0x324>)
 8003294:	69bb      	ldr	r3, [r7, #24]
 8003296:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003298:	4b1a      	ldr	r3, [pc, #104]	@ (8003304 <HAL_GPIO_Init+0x324>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800329e:	693b      	ldr	r3, [r7, #16]
 80032a0:	43db      	mvns	r3, r3
 80032a2:	69ba      	ldr	r2, [r7, #24]
 80032a4:	4013      	ands	r3, r2
 80032a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d003      	beq.n	80032bc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80032b4:	69ba      	ldr	r2, [r7, #24]
 80032b6:	693b      	ldr	r3, [r7, #16]
 80032b8:	4313      	orrs	r3, r2
 80032ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80032bc:	4a11      	ldr	r2, [pc, #68]	@ (8003304 <HAL_GPIO_Init+0x324>)
 80032be:	69bb      	ldr	r3, [r7, #24]
 80032c0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80032c2:	69fb      	ldr	r3, [r7, #28]
 80032c4:	3301      	adds	r3, #1
 80032c6:	61fb      	str	r3, [r7, #28]
 80032c8:	69fb      	ldr	r3, [r7, #28]
 80032ca:	2b0f      	cmp	r3, #15
 80032cc:	f67f ae96 	bls.w	8002ffc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80032d0:	bf00      	nop
 80032d2:	bf00      	nop
 80032d4:	3724      	adds	r7, #36	@ 0x24
 80032d6:	46bd      	mov	sp, r7
 80032d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032dc:	4770      	bx	lr
 80032de:	bf00      	nop
 80032e0:	40023800 	.word	0x40023800
 80032e4:	40013800 	.word	0x40013800
 80032e8:	40020000 	.word	0x40020000
 80032ec:	40020400 	.word	0x40020400
 80032f0:	40020800 	.word	0x40020800
 80032f4:	40020c00 	.word	0x40020c00
 80032f8:	40021000 	.word	0x40021000
 80032fc:	40021400 	.word	0x40021400
 8003300:	40021800 	.word	0x40021800
 8003304:	40013c00 	.word	0x40013c00

08003308 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003308:	b480      	push	{r7}
 800330a:	b085      	sub	sp, #20
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
 8003310:	460b      	mov	r3, r1
 8003312:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	691a      	ldr	r2, [r3, #16]
 8003318:	887b      	ldrh	r3, [r7, #2]
 800331a:	4013      	ands	r3, r2
 800331c:	2b00      	cmp	r3, #0
 800331e:	d002      	beq.n	8003326 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003320:	2301      	movs	r3, #1
 8003322:	73fb      	strb	r3, [r7, #15]
 8003324:	e001      	b.n	800332a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003326:	2300      	movs	r3, #0
 8003328:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800332a:	7bfb      	ldrb	r3, [r7, #15]
}
 800332c:	4618      	mov	r0, r3
 800332e:	3714      	adds	r7, #20
 8003330:	46bd      	mov	sp, r7
 8003332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003336:	4770      	bx	lr

08003338 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003338:	b480      	push	{r7}
 800333a:	b083      	sub	sp, #12
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
 8003340:	460b      	mov	r3, r1
 8003342:	807b      	strh	r3, [r7, #2]
 8003344:	4613      	mov	r3, r2
 8003346:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003348:	787b      	ldrb	r3, [r7, #1]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d003      	beq.n	8003356 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800334e:	887a      	ldrh	r2, [r7, #2]
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003354:	e003      	b.n	800335e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003356:	887b      	ldrh	r3, [r7, #2]
 8003358:	041a      	lsls	r2, r3, #16
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	619a      	str	r2, [r3, #24]
}
 800335e:	bf00      	nop
 8003360:	370c      	adds	r7, #12
 8003362:	46bd      	mov	sp, r7
 8003364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003368:	4770      	bx	lr
	...

0800336c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b082      	sub	sp, #8
 8003370:	af00      	add	r7, sp, #0
 8003372:	4603      	mov	r3, r0
 8003374:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003376:	4b08      	ldr	r3, [pc, #32]	@ (8003398 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003378:	695a      	ldr	r2, [r3, #20]
 800337a:	88fb      	ldrh	r3, [r7, #6]
 800337c:	4013      	ands	r3, r2
 800337e:	2b00      	cmp	r3, #0
 8003380:	d006      	beq.n	8003390 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003382:	4a05      	ldr	r2, [pc, #20]	@ (8003398 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003384:	88fb      	ldrh	r3, [r7, #6]
 8003386:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003388:	88fb      	ldrh	r3, [r7, #6]
 800338a:	4618      	mov	r0, r3
 800338c:	f7fe fbba 	bl	8001b04 <HAL_GPIO_EXTI_Callback>
  }
}
 8003390:	bf00      	nop
 8003392:	3708      	adds	r7, #8
 8003394:	46bd      	mov	sp, r7
 8003396:	bd80      	pop	{r7, pc}
 8003398:	40013c00 	.word	0x40013c00

0800339c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b084      	sub	sp, #16
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d101      	bne.n	80033ae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80033aa:	2301      	movs	r3, #1
 80033ac:	e12b      	b.n	8003606 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80033b4:	b2db      	uxtb	r3, r3
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d106      	bne.n	80033c8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2200      	movs	r2, #0
 80033be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80033c2:	6878      	ldr	r0, [r7, #4]
 80033c4:	f7fe fa7c 	bl	80018c0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2224      	movs	r2, #36	@ 0x24
 80033cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	681a      	ldr	r2, [r3, #0]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f022 0201 	bic.w	r2, r2, #1
 80033de:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	681a      	ldr	r2, [r3, #0]
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80033ee:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	681a      	ldr	r2, [r3, #0]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80033fe:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003400:	f001 f8b8 	bl	8004574 <HAL_RCC_GetPCLK1Freq>
 8003404:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	4a81      	ldr	r2, [pc, #516]	@ (8003610 <HAL_I2C_Init+0x274>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d807      	bhi.n	8003420 <HAL_I2C_Init+0x84>
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	4a80      	ldr	r2, [pc, #512]	@ (8003614 <HAL_I2C_Init+0x278>)
 8003414:	4293      	cmp	r3, r2
 8003416:	bf94      	ite	ls
 8003418:	2301      	movls	r3, #1
 800341a:	2300      	movhi	r3, #0
 800341c:	b2db      	uxtb	r3, r3
 800341e:	e006      	b.n	800342e <HAL_I2C_Init+0x92>
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	4a7d      	ldr	r2, [pc, #500]	@ (8003618 <HAL_I2C_Init+0x27c>)
 8003424:	4293      	cmp	r3, r2
 8003426:	bf94      	ite	ls
 8003428:	2301      	movls	r3, #1
 800342a:	2300      	movhi	r3, #0
 800342c:	b2db      	uxtb	r3, r3
 800342e:	2b00      	cmp	r3, #0
 8003430:	d001      	beq.n	8003436 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003432:	2301      	movs	r3, #1
 8003434:	e0e7      	b.n	8003606 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	4a78      	ldr	r2, [pc, #480]	@ (800361c <HAL_I2C_Init+0x280>)
 800343a:	fba2 2303 	umull	r2, r3, r2, r3
 800343e:	0c9b      	lsrs	r3, r3, #18
 8003440:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	68ba      	ldr	r2, [r7, #8]
 8003452:	430a      	orrs	r2, r1
 8003454:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	6a1b      	ldr	r3, [r3, #32]
 800345c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	4a6a      	ldr	r2, [pc, #424]	@ (8003610 <HAL_I2C_Init+0x274>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d802      	bhi.n	8003470 <HAL_I2C_Init+0xd4>
 800346a:	68bb      	ldr	r3, [r7, #8]
 800346c:	3301      	adds	r3, #1
 800346e:	e009      	b.n	8003484 <HAL_I2C_Init+0xe8>
 8003470:	68bb      	ldr	r3, [r7, #8]
 8003472:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003476:	fb02 f303 	mul.w	r3, r2, r3
 800347a:	4a69      	ldr	r2, [pc, #420]	@ (8003620 <HAL_I2C_Init+0x284>)
 800347c:	fba2 2303 	umull	r2, r3, r2, r3
 8003480:	099b      	lsrs	r3, r3, #6
 8003482:	3301      	adds	r3, #1
 8003484:	687a      	ldr	r2, [r7, #4]
 8003486:	6812      	ldr	r2, [r2, #0]
 8003488:	430b      	orrs	r3, r1
 800348a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	69db      	ldr	r3, [r3, #28]
 8003492:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003496:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	495c      	ldr	r1, [pc, #368]	@ (8003610 <HAL_I2C_Init+0x274>)
 80034a0:	428b      	cmp	r3, r1
 80034a2:	d819      	bhi.n	80034d8 <HAL_I2C_Init+0x13c>
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	1e59      	subs	r1, r3, #1
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	005b      	lsls	r3, r3, #1
 80034ae:	fbb1 f3f3 	udiv	r3, r1, r3
 80034b2:	1c59      	adds	r1, r3, #1
 80034b4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80034b8:	400b      	ands	r3, r1
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d00a      	beq.n	80034d4 <HAL_I2C_Init+0x138>
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	1e59      	subs	r1, r3, #1
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	005b      	lsls	r3, r3, #1
 80034c8:	fbb1 f3f3 	udiv	r3, r1, r3
 80034cc:	3301      	adds	r3, #1
 80034ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034d2:	e051      	b.n	8003578 <HAL_I2C_Init+0x1dc>
 80034d4:	2304      	movs	r3, #4
 80034d6:	e04f      	b.n	8003578 <HAL_I2C_Init+0x1dc>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	689b      	ldr	r3, [r3, #8]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d111      	bne.n	8003504 <HAL_I2C_Init+0x168>
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	1e58      	subs	r0, r3, #1
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6859      	ldr	r1, [r3, #4]
 80034e8:	460b      	mov	r3, r1
 80034ea:	005b      	lsls	r3, r3, #1
 80034ec:	440b      	add	r3, r1
 80034ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80034f2:	3301      	adds	r3, #1
 80034f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	bf0c      	ite	eq
 80034fc:	2301      	moveq	r3, #1
 80034fe:	2300      	movne	r3, #0
 8003500:	b2db      	uxtb	r3, r3
 8003502:	e012      	b.n	800352a <HAL_I2C_Init+0x18e>
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	1e58      	subs	r0, r3, #1
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6859      	ldr	r1, [r3, #4]
 800350c:	460b      	mov	r3, r1
 800350e:	009b      	lsls	r3, r3, #2
 8003510:	440b      	add	r3, r1
 8003512:	0099      	lsls	r1, r3, #2
 8003514:	440b      	add	r3, r1
 8003516:	fbb0 f3f3 	udiv	r3, r0, r3
 800351a:	3301      	adds	r3, #1
 800351c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003520:	2b00      	cmp	r3, #0
 8003522:	bf0c      	ite	eq
 8003524:	2301      	moveq	r3, #1
 8003526:	2300      	movne	r3, #0
 8003528:	b2db      	uxtb	r3, r3
 800352a:	2b00      	cmp	r3, #0
 800352c:	d001      	beq.n	8003532 <HAL_I2C_Init+0x196>
 800352e:	2301      	movs	r3, #1
 8003530:	e022      	b.n	8003578 <HAL_I2C_Init+0x1dc>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	689b      	ldr	r3, [r3, #8]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d10e      	bne.n	8003558 <HAL_I2C_Init+0x1bc>
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	1e58      	subs	r0, r3, #1
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6859      	ldr	r1, [r3, #4]
 8003542:	460b      	mov	r3, r1
 8003544:	005b      	lsls	r3, r3, #1
 8003546:	440b      	add	r3, r1
 8003548:	fbb0 f3f3 	udiv	r3, r0, r3
 800354c:	3301      	adds	r3, #1
 800354e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003552:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003556:	e00f      	b.n	8003578 <HAL_I2C_Init+0x1dc>
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	1e58      	subs	r0, r3, #1
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6859      	ldr	r1, [r3, #4]
 8003560:	460b      	mov	r3, r1
 8003562:	009b      	lsls	r3, r3, #2
 8003564:	440b      	add	r3, r1
 8003566:	0099      	lsls	r1, r3, #2
 8003568:	440b      	add	r3, r1
 800356a:	fbb0 f3f3 	udiv	r3, r0, r3
 800356e:	3301      	adds	r3, #1
 8003570:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003574:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003578:	6879      	ldr	r1, [r7, #4]
 800357a:	6809      	ldr	r1, [r1, #0]
 800357c:	4313      	orrs	r3, r2
 800357e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	69da      	ldr	r2, [r3, #28]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6a1b      	ldr	r3, [r3, #32]
 8003592:	431a      	orrs	r2, r3
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	430a      	orrs	r2, r1
 800359a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	689b      	ldr	r3, [r3, #8]
 80035a2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80035a6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80035aa:	687a      	ldr	r2, [r7, #4]
 80035ac:	6911      	ldr	r1, [r2, #16]
 80035ae:	687a      	ldr	r2, [r7, #4]
 80035b0:	68d2      	ldr	r2, [r2, #12]
 80035b2:	4311      	orrs	r1, r2
 80035b4:	687a      	ldr	r2, [r7, #4]
 80035b6:	6812      	ldr	r2, [r2, #0]
 80035b8:	430b      	orrs	r3, r1
 80035ba:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	68db      	ldr	r3, [r3, #12]
 80035c2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	695a      	ldr	r2, [r3, #20]
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	699b      	ldr	r3, [r3, #24]
 80035ce:	431a      	orrs	r2, r3
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	430a      	orrs	r2, r1
 80035d6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	681a      	ldr	r2, [r3, #0]
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f042 0201 	orr.w	r2, r2, #1
 80035e6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2200      	movs	r2, #0
 80035ec:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2220      	movs	r2, #32
 80035f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2200      	movs	r2, #0
 80035fa:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2200      	movs	r2, #0
 8003600:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003604:	2300      	movs	r3, #0
}
 8003606:	4618      	mov	r0, r3
 8003608:	3710      	adds	r7, #16
 800360a:	46bd      	mov	sp, r7
 800360c:	bd80      	pop	{r7, pc}
 800360e:	bf00      	nop
 8003610:	000186a0 	.word	0x000186a0
 8003614:	001e847f 	.word	0x001e847f
 8003618:	003d08ff 	.word	0x003d08ff
 800361c:	431bde83 	.word	0x431bde83
 8003620:	10624dd3 	.word	0x10624dd3

08003624 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b088      	sub	sp, #32
 8003628:	af02      	add	r7, sp, #8
 800362a:	60f8      	str	r0, [r7, #12]
 800362c:	607a      	str	r2, [r7, #4]
 800362e:	461a      	mov	r2, r3
 8003630:	460b      	mov	r3, r1
 8003632:	817b      	strh	r3, [r7, #10]
 8003634:	4613      	mov	r3, r2
 8003636:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003638:	f7ff fb90 	bl	8002d5c <HAL_GetTick>
 800363c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003644:	b2db      	uxtb	r3, r3
 8003646:	2b20      	cmp	r3, #32
 8003648:	f040 80e0 	bne.w	800380c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800364c:	697b      	ldr	r3, [r7, #20]
 800364e:	9300      	str	r3, [sp, #0]
 8003650:	2319      	movs	r3, #25
 8003652:	2201      	movs	r2, #1
 8003654:	4970      	ldr	r1, [pc, #448]	@ (8003818 <HAL_I2C_Master_Transmit+0x1f4>)
 8003656:	68f8      	ldr	r0, [r7, #12]
 8003658:	f000 fc64 	bl	8003f24 <I2C_WaitOnFlagUntilTimeout>
 800365c:	4603      	mov	r3, r0
 800365e:	2b00      	cmp	r3, #0
 8003660:	d001      	beq.n	8003666 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003662:	2302      	movs	r3, #2
 8003664:	e0d3      	b.n	800380e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800366c:	2b01      	cmp	r3, #1
 800366e:	d101      	bne.n	8003674 <HAL_I2C_Master_Transmit+0x50>
 8003670:	2302      	movs	r3, #2
 8003672:	e0cc      	b.n	800380e <HAL_I2C_Master_Transmit+0x1ea>
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	2201      	movs	r2, #1
 8003678:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f003 0301 	and.w	r3, r3, #1
 8003686:	2b01      	cmp	r3, #1
 8003688:	d007      	beq.n	800369a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	681a      	ldr	r2, [r3, #0]
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f042 0201 	orr.w	r2, r2, #1
 8003698:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	681a      	ldr	r2, [r3, #0]
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80036a8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	2221      	movs	r2, #33	@ 0x21
 80036ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	2210      	movs	r2, #16
 80036b6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	2200      	movs	r2, #0
 80036be:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	687a      	ldr	r2, [r7, #4]
 80036c4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	893a      	ldrh	r2, [r7, #8]
 80036ca:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036d0:	b29a      	uxth	r2, r3
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	4a50      	ldr	r2, [pc, #320]	@ (800381c <HAL_I2C_Master_Transmit+0x1f8>)
 80036da:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80036dc:	8979      	ldrh	r1, [r7, #10]
 80036de:	697b      	ldr	r3, [r7, #20]
 80036e0:	6a3a      	ldr	r2, [r7, #32]
 80036e2:	68f8      	ldr	r0, [r7, #12]
 80036e4:	f000 face 	bl	8003c84 <I2C_MasterRequestWrite>
 80036e8:	4603      	mov	r3, r0
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d001      	beq.n	80036f2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80036ee:	2301      	movs	r3, #1
 80036f0:	e08d      	b.n	800380e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036f2:	2300      	movs	r3, #0
 80036f4:	613b      	str	r3, [r7, #16]
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	695b      	ldr	r3, [r3, #20]
 80036fc:	613b      	str	r3, [r7, #16]
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	699b      	ldr	r3, [r3, #24]
 8003704:	613b      	str	r3, [r7, #16]
 8003706:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003708:	e066      	b.n	80037d8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800370a:	697a      	ldr	r2, [r7, #20]
 800370c:	6a39      	ldr	r1, [r7, #32]
 800370e:	68f8      	ldr	r0, [r7, #12]
 8003710:	f000 fd22 	bl	8004158 <I2C_WaitOnTXEFlagUntilTimeout>
 8003714:	4603      	mov	r3, r0
 8003716:	2b00      	cmp	r3, #0
 8003718:	d00d      	beq.n	8003736 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800371e:	2b04      	cmp	r3, #4
 8003720:	d107      	bne.n	8003732 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	681a      	ldr	r2, [r3, #0]
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003730:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003732:	2301      	movs	r3, #1
 8003734:	e06b      	b.n	800380e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800373a:	781a      	ldrb	r2, [r3, #0]
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003746:	1c5a      	adds	r2, r3, #1
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003750:	b29b      	uxth	r3, r3
 8003752:	3b01      	subs	r3, #1
 8003754:	b29a      	uxth	r2, r3
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800375e:	3b01      	subs	r3, #1
 8003760:	b29a      	uxth	r2, r3
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	695b      	ldr	r3, [r3, #20]
 800376c:	f003 0304 	and.w	r3, r3, #4
 8003770:	2b04      	cmp	r3, #4
 8003772:	d11b      	bne.n	80037ac <HAL_I2C_Master_Transmit+0x188>
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003778:	2b00      	cmp	r3, #0
 800377a:	d017      	beq.n	80037ac <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003780:	781a      	ldrb	r2, [r3, #0]
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800378c:	1c5a      	adds	r2, r3, #1
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003796:	b29b      	uxth	r3, r3
 8003798:	3b01      	subs	r3, #1
 800379a:	b29a      	uxth	r2, r3
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037a4:	3b01      	subs	r3, #1
 80037a6:	b29a      	uxth	r2, r3
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037ac:	697a      	ldr	r2, [r7, #20]
 80037ae:	6a39      	ldr	r1, [r7, #32]
 80037b0:	68f8      	ldr	r0, [r7, #12]
 80037b2:	f000 fd19 	bl	80041e8 <I2C_WaitOnBTFFlagUntilTimeout>
 80037b6:	4603      	mov	r3, r0
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d00d      	beq.n	80037d8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037c0:	2b04      	cmp	r3, #4
 80037c2:	d107      	bne.n	80037d4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	681a      	ldr	r2, [r3, #0]
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80037d2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80037d4:	2301      	movs	r3, #1
 80037d6:	e01a      	b.n	800380e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d194      	bne.n	800370a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	681a      	ldr	r2, [r3, #0]
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80037ee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	2220      	movs	r2, #32
 80037f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	2200      	movs	r2, #0
 80037fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	2200      	movs	r2, #0
 8003804:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003808:	2300      	movs	r3, #0
 800380a:	e000      	b.n	800380e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800380c:	2302      	movs	r3, #2
  }
}
 800380e:	4618      	mov	r0, r3
 8003810:	3718      	adds	r7, #24
 8003812:	46bd      	mov	sp, r7
 8003814:	bd80      	pop	{r7, pc}
 8003816:	bf00      	nop
 8003818:	00100002 	.word	0x00100002
 800381c:	ffff0000 	.word	0xffff0000

08003820 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b08c      	sub	sp, #48	@ 0x30
 8003824:	af02      	add	r7, sp, #8
 8003826:	60f8      	str	r0, [r7, #12]
 8003828:	607a      	str	r2, [r7, #4]
 800382a:	461a      	mov	r2, r3
 800382c:	460b      	mov	r3, r1
 800382e:	817b      	strh	r3, [r7, #10]
 8003830:	4613      	mov	r3, r2
 8003832:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003834:	f7ff fa92 	bl	8002d5c <HAL_GetTick>
 8003838:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003840:	b2db      	uxtb	r3, r3
 8003842:	2b20      	cmp	r3, #32
 8003844:	f040 8217 	bne.w	8003c76 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003848:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800384a:	9300      	str	r3, [sp, #0]
 800384c:	2319      	movs	r3, #25
 800384e:	2201      	movs	r2, #1
 8003850:	497c      	ldr	r1, [pc, #496]	@ (8003a44 <HAL_I2C_Master_Receive+0x224>)
 8003852:	68f8      	ldr	r0, [r7, #12]
 8003854:	f000 fb66 	bl	8003f24 <I2C_WaitOnFlagUntilTimeout>
 8003858:	4603      	mov	r3, r0
 800385a:	2b00      	cmp	r3, #0
 800385c:	d001      	beq.n	8003862 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800385e:	2302      	movs	r3, #2
 8003860:	e20a      	b.n	8003c78 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003868:	2b01      	cmp	r3, #1
 800386a:	d101      	bne.n	8003870 <HAL_I2C_Master_Receive+0x50>
 800386c:	2302      	movs	r3, #2
 800386e:	e203      	b.n	8003c78 <HAL_I2C_Master_Receive+0x458>
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	2201      	movs	r2, #1
 8003874:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f003 0301 	and.w	r3, r3, #1
 8003882:	2b01      	cmp	r3, #1
 8003884:	d007      	beq.n	8003896 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	681a      	ldr	r2, [r3, #0]
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f042 0201 	orr.w	r2, r2, #1
 8003894:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	681a      	ldr	r2, [r3, #0]
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80038a4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	2222      	movs	r2, #34	@ 0x22
 80038aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	2210      	movs	r2, #16
 80038b2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	2200      	movs	r2, #0
 80038ba:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	687a      	ldr	r2, [r7, #4]
 80038c0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	893a      	ldrh	r2, [r7, #8]
 80038c6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038cc:	b29a      	uxth	r2, r3
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	4a5c      	ldr	r2, [pc, #368]	@ (8003a48 <HAL_I2C_Master_Receive+0x228>)
 80038d6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80038d8:	8979      	ldrh	r1, [r7, #10]
 80038da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80038de:	68f8      	ldr	r0, [r7, #12]
 80038e0:	f000 fa52 	bl	8003d88 <I2C_MasterRequestRead>
 80038e4:	4603      	mov	r3, r0
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d001      	beq.n	80038ee <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80038ea:	2301      	movs	r3, #1
 80038ec:	e1c4      	b.n	8003c78 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d113      	bne.n	800391e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038f6:	2300      	movs	r3, #0
 80038f8:	623b      	str	r3, [r7, #32]
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	695b      	ldr	r3, [r3, #20]
 8003900:	623b      	str	r3, [r7, #32]
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	699b      	ldr	r3, [r3, #24]
 8003908:	623b      	str	r3, [r7, #32]
 800390a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	681a      	ldr	r2, [r3, #0]
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800391a:	601a      	str	r2, [r3, #0]
 800391c:	e198      	b.n	8003c50 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003922:	2b01      	cmp	r3, #1
 8003924:	d11b      	bne.n	800395e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	681a      	ldr	r2, [r3, #0]
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003934:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003936:	2300      	movs	r3, #0
 8003938:	61fb      	str	r3, [r7, #28]
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	695b      	ldr	r3, [r3, #20]
 8003940:	61fb      	str	r3, [r7, #28]
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	699b      	ldr	r3, [r3, #24]
 8003948:	61fb      	str	r3, [r7, #28]
 800394a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	681a      	ldr	r2, [r3, #0]
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800395a:	601a      	str	r2, [r3, #0]
 800395c:	e178      	b.n	8003c50 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003962:	2b02      	cmp	r3, #2
 8003964:	d11b      	bne.n	800399e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	681a      	ldr	r2, [r3, #0]
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003974:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	681a      	ldr	r2, [r3, #0]
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003984:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003986:	2300      	movs	r3, #0
 8003988:	61bb      	str	r3, [r7, #24]
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	695b      	ldr	r3, [r3, #20]
 8003990:	61bb      	str	r3, [r7, #24]
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	699b      	ldr	r3, [r3, #24]
 8003998:	61bb      	str	r3, [r7, #24]
 800399a:	69bb      	ldr	r3, [r7, #24]
 800399c:	e158      	b.n	8003c50 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	681a      	ldr	r2, [r3, #0]
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80039ac:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039ae:	2300      	movs	r3, #0
 80039b0:	617b      	str	r3, [r7, #20]
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	695b      	ldr	r3, [r3, #20]
 80039b8:	617b      	str	r3, [r7, #20]
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	699b      	ldr	r3, [r3, #24]
 80039c0:	617b      	str	r3, [r7, #20]
 80039c2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80039c4:	e144      	b.n	8003c50 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039ca:	2b03      	cmp	r3, #3
 80039cc:	f200 80f1 	bhi.w	8003bb2 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039d4:	2b01      	cmp	r3, #1
 80039d6:	d123      	bne.n	8003a20 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80039d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039da:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80039dc:	68f8      	ldr	r0, [r7, #12]
 80039de:	f000 fc4b 	bl	8004278 <I2C_WaitOnRXNEFlagUntilTimeout>
 80039e2:	4603      	mov	r3, r0
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d001      	beq.n	80039ec <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80039e8:	2301      	movs	r3, #1
 80039ea:	e145      	b.n	8003c78 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	691a      	ldr	r2, [r3, #16]
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039f6:	b2d2      	uxtb	r2, r2
 80039f8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039fe:	1c5a      	adds	r2, r3, #1
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a08:	3b01      	subs	r3, #1
 8003a0a:	b29a      	uxth	r2, r3
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a14:	b29b      	uxth	r3, r3
 8003a16:	3b01      	subs	r3, #1
 8003a18:	b29a      	uxth	r2, r3
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003a1e:	e117      	b.n	8003c50 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a24:	2b02      	cmp	r3, #2
 8003a26:	d14e      	bne.n	8003ac6 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003a28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a2a:	9300      	str	r3, [sp, #0]
 8003a2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a2e:	2200      	movs	r2, #0
 8003a30:	4906      	ldr	r1, [pc, #24]	@ (8003a4c <HAL_I2C_Master_Receive+0x22c>)
 8003a32:	68f8      	ldr	r0, [r7, #12]
 8003a34:	f000 fa76 	bl	8003f24 <I2C_WaitOnFlagUntilTimeout>
 8003a38:	4603      	mov	r3, r0
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d008      	beq.n	8003a50 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8003a3e:	2301      	movs	r3, #1
 8003a40:	e11a      	b.n	8003c78 <HAL_I2C_Master_Receive+0x458>
 8003a42:	bf00      	nop
 8003a44:	00100002 	.word	0x00100002
 8003a48:	ffff0000 	.word	0xffff0000
 8003a4c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	681a      	ldr	r2, [r3, #0]
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a5e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	691a      	ldr	r2, [r3, #16]
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a6a:	b2d2      	uxtb	r2, r2
 8003a6c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a72:	1c5a      	adds	r2, r3, #1
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a7c:	3b01      	subs	r3, #1
 8003a7e:	b29a      	uxth	r2, r3
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a88:	b29b      	uxth	r3, r3
 8003a8a:	3b01      	subs	r3, #1
 8003a8c:	b29a      	uxth	r2, r3
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	691a      	ldr	r2, [r3, #16]
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a9c:	b2d2      	uxtb	r2, r2
 8003a9e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003aa4:	1c5a      	adds	r2, r3, #1
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003aae:	3b01      	subs	r3, #1
 8003ab0:	b29a      	uxth	r2, r3
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003aba:	b29b      	uxth	r3, r3
 8003abc:	3b01      	subs	r3, #1
 8003abe:	b29a      	uxth	r2, r3
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003ac4:	e0c4      	b.n	8003c50 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003ac6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ac8:	9300      	str	r3, [sp, #0]
 8003aca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003acc:	2200      	movs	r2, #0
 8003ace:	496c      	ldr	r1, [pc, #432]	@ (8003c80 <HAL_I2C_Master_Receive+0x460>)
 8003ad0:	68f8      	ldr	r0, [r7, #12]
 8003ad2:	f000 fa27 	bl	8003f24 <I2C_WaitOnFlagUntilTimeout>
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d001      	beq.n	8003ae0 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8003adc:	2301      	movs	r3, #1
 8003ade:	e0cb      	b.n	8003c78 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	681a      	ldr	r2, [r3, #0]
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003aee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	691a      	ldr	r2, [r3, #16]
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003afa:	b2d2      	uxtb	r2, r2
 8003afc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b02:	1c5a      	adds	r2, r3, #1
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b0c:	3b01      	subs	r3, #1
 8003b0e:	b29a      	uxth	r2, r3
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b18:	b29b      	uxth	r3, r3
 8003b1a:	3b01      	subs	r3, #1
 8003b1c:	b29a      	uxth	r2, r3
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003b22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b24:	9300      	str	r3, [sp, #0]
 8003b26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b28:	2200      	movs	r2, #0
 8003b2a:	4955      	ldr	r1, [pc, #340]	@ (8003c80 <HAL_I2C_Master_Receive+0x460>)
 8003b2c:	68f8      	ldr	r0, [r7, #12]
 8003b2e:	f000 f9f9 	bl	8003f24 <I2C_WaitOnFlagUntilTimeout>
 8003b32:	4603      	mov	r3, r0
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d001      	beq.n	8003b3c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8003b38:	2301      	movs	r3, #1
 8003b3a:	e09d      	b.n	8003c78 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	681a      	ldr	r2, [r3, #0]
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b4a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	691a      	ldr	r2, [r3, #16]
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b56:	b2d2      	uxtb	r2, r2
 8003b58:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b5e:	1c5a      	adds	r2, r3, #1
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b68:	3b01      	subs	r3, #1
 8003b6a:	b29a      	uxth	r2, r3
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b74:	b29b      	uxth	r3, r3
 8003b76:	3b01      	subs	r3, #1
 8003b78:	b29a      	uxth	r2, r3
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	691a      	ldr	r2, [r3, #16]
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b88:	b2d2      	uxtb	r2, r2
 8003b8a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b90:	1c5a      	adds	r2, r3, #1
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b9a:	3b01      	subs	r3, #1
 8003b9c:	b29a      	uxth	r2, r3
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ba6:	b29b      	uxth	r3, r3
 8003ba8:	3b01      	subs	r3, #1
 8003baa:	b29a      	uxth	r2, r3
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003bb0:	e04e      	b.n	8003c50 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003bb2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003bb4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003bb6:	68f8      	ldr	r0, [r7, #12]
 8003bb8:	f000 fb5e 	bl	8004278 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003bbc:	4603      	mov	r3, r0
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d001      	beq.n	8003bc6 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	e058      	b.n	8003c78 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	691a      	ldr	r2, [r3, #16]
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bd0:	b2d2      	uxtb	r2, r2
 8003bd2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bd8:	1c5a      	adds	r2, r3, #1
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003be2:	3b01      	subs	r3, #1
 8003be4:	b29a      	uxth	r2, r3
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bee:	b29b      	uxth	r3, r3
 8003bf0:	3b01      	subs	r3, #1
 8003bf2:	b29a      	uxth	r2, r3
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	695b      	ldr	r3, [r3, #20]
 8003bfe:	f003 0304 	and.w	r3, r3, #4
 8003c02:	2b04      	cmp	r3, #4
 8003c04:	d124      	bne.n	8003c50 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c0a:	2b03      	cmp	r3, #3
 8003c0c:	d107      	bne.n	8003c1e <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	681a      	ldr	r2, [r3, #0]
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003c1c:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	691a      	ldr	r2, [r3, #16]
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c28:	b2d2      	uxtb	r2, r2
 8003c2a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c30:	1c5a      	adds	r2, r3, #1
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c3a:	3b01      	subs	r3, #1
 8003c3c:	b29a      	uxth	r2, r3
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c46:	b29b      	uxth	r3, r3
 8003c48:	3b01      	subs	r3, #1
 8003c4a:	b29a      	uxth	r2, r3
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	f47f aeb6 	bne.w	80039c6 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	2220      	movs	r2, #32
 8003c5e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	2200      	movs	r2, #0
 8003c66:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003c72:	2300      	movs	r3, #0
 8003c74:	e000      	b.n	8003c78 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8003c76:	2302      	movs	r3, #2
  }
}
 8003c78:	4618      	mov	r0, r3
 8003c7a:	3728      	adds	r7, #40	@ 0x28
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	bd80      	pop	{r7, pc}
 8003c80:	00010004 	.word	0x00010004

08003c84 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b088      	sub	sp, #32
 8003c88:	af02      	add	r7, sp, #8
 8003c8a:	60f8      	str	r0, [r7, #12]
 8003c8c:	607a      	str	r2, [r7, #4]
 8003c8e:	603b      	str	r3, [r7, #0]
 8003c90:	460b      	mov	r3, r1
 8003c92:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c98:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003c9a:	697b      	ldr	r3, [r7, #20]
 8003c9c:	2b08      	cmp	r3, #8
 8003c9e:	d006      	beq.n	8003cae <I2C_MasterRequestWrite+0x2a>
 8003ca0:	697b      	ldr	r3, [r7, #20]
 8003ca2:	2b01      	cmp	r3, #1
 8003ca4:	d003      	beq.n	8003cae <I2C_MasterRequestWrite+0x2a>
 8003ca6:	697b      	ldr	r3, [r7, #20]
 8003ca8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003cac:	d108      	bne.n	8003cc0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	681a      	ldr	r2, [r3, #0]
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003cbc:	601a      	str	r2, [r3, #0]
 8003cbe:	e00b      	b.n	8003cd8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cc4:	2b12      	cmp	r3, #18
 8003cc6:	d107      	bne.n	8003cd8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	681a      	ldr	r2, [r3, #0]
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003cd6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	9300      	str	r3, [sp, #0]
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2200      	movs	r2, #0
 8003ce0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003ce4:	68f8      	ldr	r0, [r7, #12]
 8003ce6:	f000 f91d 	bl	8003f24 <I2C_WaitOnFlagUntilTimeout>
 8003cea:	4603      	mov	r3, r0
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d00d      	beq.n	8003d0c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cfa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003cfe:	d103      	bne.n	8003d08 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003d06:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003d08:	2303      	movs	r3, #3
 8003d0a:	e035      	b.n	8003d78 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	691b      	ldr	r3, [r3, #16]
 8003d10:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003d14:	d108      	bne.n	8003d28 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003d16:	897b      	ldrh	r3, [r7, #10]
 8003d18:	b2db      	uxtb	r3, r3
 8003d1a:	461a      	mov	r2, r3
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003d24:	611a      	str	r2, [r3, #16]
 8003d26:	e01b      	b.n	8003d60 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003d28:	897b      	ldrh	r3, [r7, #10]
 8003d2a:	11db      	asrs	r3, r3, #7
 8003d2c:	b2db      	uxtb	r3, r3
 8003d2e:	f003 0306 	and.w	r3, r3, #6
 8003d32:	b2db      	uxtb	r3, r3
 8003d34:	f063 030f 	orn	r3, r3, #15
 8003d38:	b2da      	uxtb	r2, r3
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	687a      	ldr	r2, [r7, #4]
 8003d44:	490e      	ldr	r1, [pc, #56]	@ (8003d80 <I2C_MasterRequestWrite+0xfc>)
 8003d46:	68f8      	ldr	r0, [r7, #12]
 8003d48:	f000 f966 	bl	8004018 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003d4c:	4603      	mov	r3, r0
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d001      	beq.n	8003d56 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003d52:	2301      	movs	r3, #1
 8003d54:	e010      	b.n	8003d78 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003d56:	897b      	ldrh	r3, [r7, #10]
 8003d58:	b2da      	uxtb	r2, r3
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	687a      	ldr	r2, [r7, #4]
 8003d64:	4907      	ldr	r1, [pc, #28]	@ (8003d84 <I2C_MasterRequestWrite+0x100>)
 8003d66:	68f8      	ldr	r0, [r7, #12]
 8003d68:	f000 f956 	bl	8004018 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003d6c:	4603      	mov	r3, r0
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d001      	beq.n	8003d76 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003d72:	2301      	movs	r3, #1
 8003d74:	e000      	b.n	8003d78 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003d76:	2300      	movs	r3, #0
}
 8003d78:	4618      	mov	r0, r3
 8003d7a:	3718      	adds	r7, #24
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	bd80      	pop	{r7, pc}
 8003d80:	00010008 	.word	0x00010008
 8003d84:	00010002 	.word	0x00010002

08003d88 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b088      	sub	sp, #32
 8003d8c:	af02      	add	r7, sp, #8
 8003d8e:	60f8      	str	r0, [r7, #12]
 8003d90:	607a      	str	r2, [r7, #4]
 8003d92:	603b      	str	r3, [r7, #0]
 8003d94:	460b      	mov	r3, r1
 8003d96:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d9c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	681a      	ldr	r2, [r3, #0]
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003dac:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003dae:	697b      	ldr	r3, [r7, #20]
 8003db0:	2b08      	cmp	r3, #8
 8003db2:	d006      	beq.n	8003dc2 <I2C_MasterRequestRead+0x3a>
 8003db4:	697b      	ldr	r3, [r7, #20]
 8003db6:	2b01      	cmp	r3, #1
 8003db8:	d003      	beq.n	8003dc2 <I2C_MasterRequestRead+0x3a>
 8003dba:	697b      	ldr	r3, [r7, #20]
 8003dbc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003dc0:	d108      	bne.n	8003dd4 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	681a      	ldr	r2, [r3, #0]
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003dd0:	601a      	str	r2, [r3, #0]
 8003dd2:	e00b      	b.n	8003dec <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dd8:	2b11      	cmp	r3, #17
 8003dda:	d107      	bne.n	8003dec <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	681a      	ldr	r2, [r3, #0]
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003dea:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	9300      	str	r3, [sp, #0]
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2200      	movs	r2, #0
 8003df4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003df8:	68f8      	ldr	r0, [r7, #12]
 8003dfa:	f000 f893 	bl	8003f24 <I2C_WaitOnFlagUntilTimeout>
 8003dfe:	4603      	mov	r3, r0
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d00d      	beq.n	8003e20 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e0e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003e12:	d103      	bne.n	8003e1c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003e1a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003e1c:	2303      	movs	r3, #3
 8003e1e:	e079      	b.n	8003f14 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	691b      	ldr	r3, [r3, #16]
 8003e24:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003e28:	d108      	bne.n	8003e3c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003e2a:	897b      	ldrh	r3, [r7, #10]
 8003e2c:	b2db      	uxtb	r3, r3
 8003e2e:	f043 0301 	orr.w	r3, r3, #1
 8003e32:	b2da      	uxtb	r2, r3
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	611a      	str	r2, [r3, #16]
 8003e3a:	e05f      	b.n	8003efc <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003e3c:	897b      	ldrh	r3, [r7, #10]
 8003e3e:	11db      	asrs	r3, r3, #7
 8003e40:	b2db      	uxtb	r3, r3
 8003e42:	f003 0306 	and.w	r3, r3, #6
 8003e46:	b2db      	uxtb	r3, r3
 8003e48:	f063 030f 	orn	r3, r3, #15
 8003e4c:	b2da      	uxtb	r2, r3
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	687a      	ldr	r2, [r7, #4]
 8003e58:	4930      	ldr	r1, [pc, #192]	@ (8003f1c <I2C_MasterRequestRead+0x194>)
 8003e5a:	68f8      	ldr	r0, [r7, #12]
 8003e5c:	f000 f8dc 	bl	8004018 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003e60:	4603      	mov	r3, r0
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d001      	beq.n	8003e6a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8003e66:	2301      	movs	r3, #1
 8003e68:	e054      	b.n	8003f14 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003e6a:	897b      	ldrh	r3, [r7, #10]
 8003e6c:	b2da      	uxtb	r2, r3
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	687a      	ldr	r2, [r7, #4]
 8003e78:	4929      	ldr	r1, [pc, #164]	@ (8003f20 <I2C_MasterRequestRead+0x198>)
 8003e7a:	68f8      	ldr	r0, [r7, #12]
 8003e7c:	f000 f8cc 	bl	8004018 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003e80:	4603      	mov	r3, r0
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d001      	beq.n	8003e8a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8003e86:	2301      	movs	r3, #1
 8003e88:	e044      	b.n	8003f14 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	613b      	str	r3, [r7, #16]
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	695b      	ldr	r3, [r3, #20]
 8003e94:	613b      	str	r3, [r7, #16]
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	699b      	ldr	r3, [r3, #24]
 8003e9c:	613b      	str	r3, [r7, #16]
 8003e9e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	681a      	ldr	r2, [r3, #0]
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003eae:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	9300      	str	r3, [sp, #0]
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003ebc:	68f8      	ldr	r0, [r7, #12]
 8003ebe:	f000 f831 	bl	8003f24 <I2C_WaitOnFlagUntilTimeout>
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d00d      	beq.n	8003ee4 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ed2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003ed6:	d103      	bne.n	8003ee0 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003ede:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8003ee0:	2303      	movs	r3, #3
 8003ee2:	e017      	b.n	8003f14 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003ee4:	897b      	ldrh	r3, [r7, #10]
 8003ee6:	11db      	asrs	r3, r3, #7
 8003ee8:	b2db      	uxtb	r3, r3
 8003eea:	f003 0306 	and.w	r3, r3, #6
 8003eee:	b2db      	uxtb	r3, r3
 8003ef0:	f063 030e 	orn	r3, r3, #14
 8003ef4:	b2da      	uxtb	r2, r3
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	687a      	ldr	r2, [r7, #4]
 8003f00:	4907      	ldr	r1, [pc, #28]	@ (8003f20 <I2C_MasterRequestRead+0x198>)
 8003f02:	68f8      	ldr	r0, [r7, #12]
 8003f04:	f000 f888 	bl	8004018 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003f08:	4603      	mov	r3, r0
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d001      	beq.n	8003f12 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8003f0e:	2301      	movs	r3, #1
 8003f10:	e000      	b.n	8003f14 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8003f12:	2300      	movs	r3, #0
}
 8003f14:	4618      	mov	r0, r3
 8003f16:	3718      	adds	r7, #24
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	bd80      	pop	{r7, pc}
 8003f1c:	00010008 	.word	0x00010008
 8003f20:	00010002 	.word	0x00010002

08003f24 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b084      	sub	sp, #16
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	60f8      	str	r0, [r7, #12]
 8003f2c:	60b9      	str	r1, [r7, #8]
 8003f2e:	603b      	str	r3, [r7, #0]
 8003f30:	4613      	mov	r3, r2
 8003f32:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003f34:	e048      	b.n	8003fc8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f3c:	d044      	beq.n	8003fc8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f3e:	f7fe ff0d 	bl	8002d5c <HAL_GetTick>
 8003f42:	4602      	mov	r2, r0
 8003f44:	69bb      	ldr	r3, [r7, #24]
 8003f46:	1ad3      	subs	r3, r2, r3
 8003f48:	683a      	ldr	r2, [r7, #0]
 8003f4a:	429a      	cmp	r2, r3
 8003f4c:	d302      	bcc.n	8003f54 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d139      	bne.n	8003fc8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003f54:	68bb      	ldr	r3, [r7, #8]
 8003f56:	0c1b      	lsrs	r3, r3, #16
 8003f58:	b2db      	uxtb	r3, r3
 8003f5a:	2b01      	cmp	r3, #1
 8003f5c:	d10d      	bne.n	8003f7a <I2C_WaitOnFlagUntilTimeout+0x56>
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	695b      	ldr	r3, [r3, #20]
 8003f64:	43da      	mvns	r2, r3
 8003f66:	68bb      	ldr	r3, [r7, #8]
 8003f68:	4013      	ands	r3, r2
 8003f6a:	b29b      	uxth	r3, r3
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	bf0c      	ite	eq
 8003f70:	2301      	moveq	r3, #1
 8003f72:	2300      	movne	r3, #0
 8003f74:	b2db      	uxtb	r3, r3
 8003f76:	461a      	mov	r2, r3
 8003f78:	e00c      	b.n	8003f94 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	699b      	ldr	r3, [r3, #24]
 8003f80:	43da      	mvns	r2, r3
 8003f82:	68bb      	ldr	r3, [r7, #8]
 8003f84:	4013      	ands	r3, r2
 8003f86:	b29b      	uxth	r3, r3
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	bf0c      	ite	eq
 8003f8c:	2301      	moveq	r3, #1
 8003f8e:	2300      	movne	r3, #0
 8003f90:	b2db      	uxtb	r3, r3
 8003f92:	461a      	mov	r2, r3
 8003f94:	79fb      	ldrb	r3, [r7, #7]
 8003f96:	429a      	cmp	r2, r3
 8003f98:	d116      	bne.n	8003fc8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	2220      	movs	r2, #32
 8003fa4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	2200      	movs	r2, #0
 8003fac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fb4:	f043 0220 	orr.w	r2, r3, #32
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	e023      	b.n	8004010 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003fc8:	68bb      	ldr	r3, [r7, #8]
 8003fca:	0c1b      	lsrs	r3, r3, #16
 8003fcc:	b2db      	uxtb	r3, r3
 8003fce:	2b01      	cmp	r3, #1
 8003fd0:	d10d      	bne.n	8003fee <I2C_WaitOnFlagUntilTimeout+0xca>
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	695b      	ldr	r3, [r3, #20]
 8003fd8:	43da      	mvns	r2, r3
 8003fda:	68bb      	ldr	r3, [r7, #8]
 8003fdc:	4013      	ands	r3, r2
 8003fde:	b29b      	uxth	r3, r3
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	bf0c      	ite	eq
 8003fe4:	2301      	moveq	r3, #1
 8003fe6:	2300      	movne	r3, #0
 8003fe8:	b2db      	uxtb	r3, r3
 8003fea:	461a      	mov	r2, r3
 8003fec:	e00c      	b.n	8004008 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	699b      	ldr	r3, [r3, #24]
 8003ff4:	43da      	mvns	r2, r3
 8003ff6:	68bb      	ldr	r3, [r7, #8]
 8003ff8:	4013      	ands	r3, r2
 8003ffa:	b29b      	uxth	r3, r3
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	bf0c      	ite	eq
 8004000:	2301      	moveq	r3, #1
 8004002:	2300      	movne	r3, #0
 8004004:	b2db      	uxtb	r3, r3
 8004006:	461a      	mov	r2, r3
 8004008:	79fb      	ldrb	r3, [r7, #7]
 800400a:	429a      	cmp	r2, r3
 800400c:	d093      	beq.n	8003f36 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800400e:	2300      	movs	r3, #0
}
 8004010:	4618      	mov	r0, r3
 8004012:	3710      	adds	r7, #16
 8004014:	46bd      	mov	sp, r7
 8004016:	bd80      	pop	{r7, pc}

08004018 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b084      	sub	sp, #16
 800401c:	af00      	add	r7, sp, #0
 800401e:	60f8      	str	r0, [r7, #12]
 8004020:	60b9      	str	r1, [r7, #8]
 8004022:	607a      	str	r2, [r7, #4]
 8004024:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004026:	e071      	b.n	800410c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	695b      	ldr	r3, [r3, #20]
 800402e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004032:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004036:	d123      	bne.n	8004080 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	681a      	ldr	r2, [r3, #0]
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004046:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004050:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	2200      	movs	r2, #0
 8004056:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	2220      	movs	r2, #32
 800405c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	2200      	movs	r2, #0
 8004064:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800406c:	f043 0204 	orr.w	r2, r3, #4
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	2200      	movs	r2, #0
 8004078:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800407c:	2301      	movs	r3, #1
 800407e:	e067      	b.n	8004150 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004086:	d041      	beq.n	800410c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004088:	f7fe fe68 	bl	8002d5c <HAL_GetTick>
 800408c:	4602      	mov	r2, r0
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	1ad3      	subs	r3, r2, r3
 8004092:	687a      	ldr	r2, [r7, #4]
 8004094:	429a      	cmp	r2, r3
 8004096:	d302      	bcc.n	800409e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d136      	bne.n	800410c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800409e:	68bb      	ldr	r3, [r7, #8]
 80040a0:	0c1b      	lsrs	r3, r3, #16
 80040a2:	b2db      	uxtb	r3, r3
 80040a4:	2b01      	cmp	r3, #1
 80040a6:	d10c      	bne.n	80040c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	695b      	ldr	r3, [r3, #20]
 80040ae:	43da      	mvns	r2, r3
 80040b0:	68bb      	ldr	r3, [r7, #8]
 80040b2:	4013      	ands	r3, r2
 80040b4:	b29b      	uxth	r3, r3
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	bf14      	ite	ne
 80040ba:	2301      	movne	r3, #1
 80040bc:	2300      	moveq	r3, #0
 80040be:	b2db      	uxtb	r3, r3
 80040c0:	e00b      	b.n	80040da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	699b      	ldr	r3, [r3, #24]
 80040c8:	43da      	mvns	r2, r3
 80040ca:	68bb      	ldr	r3, [r7, #8]
 80040cc:	4013      	ands	r3, r2
 80040ce:	b29b      	uxth	r3, r3
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	bf14      	ite	ne
 80040d4:	2301      	movne	r3, #1
 80040d6:	2300      	moveq	r3, #0
 80040d8:	b2db      	uxtb	r3, r3
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d016      	beq.n	800410c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	2200      	movs	r2, #0
 80040e2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	2220      	movs	r2, #32
 80040e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	2200      	movs	r2, #0
 80040f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040f8:	f043 0220 	orr.w	r2, r3, #32
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	2200      	movs	r2, #0
 8004104:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004108:	2301      	movs	r3, #1
 800410a:	e021      	b.n	8004150 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800410c:	68bb      	ldr	r3, [r7, #8]
 800410e:	0c1b      	lsrs	r3, r3, #16
 8004110:	b2db      	uxtb	r3, r3
 8004112:	2b01      	cmp	r3, #1
 8004114:	d10c      	bne.n	8004130 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	695b      	ldr	r3, [r3, #20]
 800411c:	43da      	mvns	r2, r3
 800411e:	68bb      	ldr	r3, [r7, #8]
 8004120:	4013      	ands	r3, r2
 8004122:	b29b      	uxth	r3, r3
 8004124:	2b00      	cmp	r3, #0
 8004126:	bf14      	ite	ne
 8004128:	2301      	movne	r3, #1
 800412a:	2300      	moveq	r3, #0
 800412c:	b2db      	uxtb	r3, r3
 800412e:	e00b      	b.n	8004148 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	699b      	ldr	r3, [r3, #24]
 8004136:	43da      	mvns	r2, r3
 8004138:	68bb      	ldr	r3, [r7, #8]
 800413a:	4013      	ands	r3, r2
 800413c:	b29b      	uxth	r3, r3
 800413e:	2b00      	cmp	r3, #0
 8004140:	bf14      	ite	ne
 8004142:	2301      	movne	r3, #1
 8004144:	2300      	moveq	r3, #0
 8004146:	b2db      	uxtb	r3, r3
 8004148:	2b00      	cmp	r3, #0
 800414a:	f47f af6d 	bne.w	8004028 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800414e:	2300      	movs	r3, #0
}
 8004150:	4618      	mov	r0, r3
 8004152:	3710      	adds	r7, #16
 8004154:	46bd      	mov	sp, r7
 8004156:	bd80      	pop	{r7, pc}

08004158 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b084      	sub	sp, #16
 800415c:	af00      	add	r7, sp, #0
 800415e:	60f8      	str	r0, [r7, #12]
 8004160:	60b9      	str	r1, [r7, #8]
 8004162:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004164:	e034      	b.n	80041d0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004166:	68f8      	ldr	r0, [r7, #12]
 8004168:	f000 f8e3 	bl	8004332 <I2C_IsAcknowledgeFailed>
 800416c:	4603      	mov	r3, r0
 800416e:	2b00      	cmp	r3, #0
 8004170:	d001      	beq.n	8004176 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004172:	2301      	movs	r3, #1
 8004174:	e034      	b.n	80041e0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004176:	68bb      	ldr	r3, [r7, #8]
 8004178:	f1b3 3fff 	cmp.w	r3, #4294967295
 800417c:	d028      	beq.n	80041d0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800417e:	f7fe fded 	bl	8002d5c <HAL_GetTick>
 8004182:	4602      	mov	r2, r0
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	1ad3      	subs	r3, r2, r3
 8004188:	68ba      	ldr	r2, [r7, #8]
 800418a:	429a      	cmp	r2, r3
 800418c:	d302      	bcc.n	8004194 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800418e:	68bb      	ldr	r3, [r7, #8]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d11d      	bne.n	80041d0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	695b      	ldr	r3, [r3, #20]
 800419a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800419e:	2b80      	cmp	r3, #128	@ 0x80
 80041a0:	d016      	beq.n	80041d0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	2200      	movs	r2, #0
 80041a6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	2220      	movs	r2, #32
 80041ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	2200      	movs	r2, #0
 80041b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041bc:	f043 0220 	orr.w	r2, r3, #32
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	2200      	movs	r2, #0
 80041c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80041cc:	2301      	movs	r3, #1
 80041ce:	e007      	b.n	80041e0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	695b      	ldr	r3, [r3, #20]
 80041d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041da:	2b80      	cmp	r3, #128	@ 0x80
 80041dc:	d1c3      	bne.n	8004166 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80041de:	2300      	movs	r3, #0
}
 80041e0:	4618      	mov	r0, r3
 80041e2:	3710      	adds	r7, #16
 80041e4:	46bd      	mov	sp, r7
 80041e6:	bd80      	pop	{r7, pc}

080041e8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b084      	sub	sp, #16
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	60f8      	str	r0, [r7, #12]
 80041f0:	60b9      	str	r1, [r7, #8]
 80041f2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80041f4:	e034      	b.n	8004260 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80041f6:	68f8      	ldr	r0, [r7, #12]
 80041f8:	f000 f89b 	bl	8004332 <I2C_IsAcknowledgeFailed>
 80041fc:	4603      	mov	r3, r0
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d001      	beq.n	8004206 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004202:	2301      	movs	r3, #1
 8004204:	e034      	b.n	8004270 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004206:	68bb      	ldr	r3, [r7, #8]
 8004208:	f1b3 3fff 	cmp.w	r3, #4294967295
 800420c:	d028      	beq.n	8004260 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800420e:	f7fe fda5 	bl	8002d5c <HAL_GetTick>
 8004212:	4602      	mov	r2, r0
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	1ad3      	subs	r3, r2, r3
 8004218:	68ba      	ldr	r2, [r7, #8]
 800421a:	429a      	cmp	r2, r3
 800421c:	d302      	bcc.n	8004224 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800421e:	68bb      	ldr	r3, [r7, #8]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d11d      	bne.n	8004260 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	695b      	ldr	r3, [r3, #20]
 800422a:	f003 0304 	and.w	r3, r3, #4
 800422e:	2b04      	cmp	r3, #4
 8004230:	d016      	beq.n	8004260 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	2200      	movs	r2, #0
 8004236:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	2220      	movs	r2, #32
 800423c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	2200      	movs	r2, #0
 8004244:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800424c:	f043 0220 	orr.w	r2, r3, #32
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	2200      	movs	r2, #0
 8004258:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800425c:	2301      	movs	r3, #1
 800425e:	e007      	b.n	8004270 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	695b      	ldr	r3, [r3, #20]
 8004266:	f003 0304 	and.w	r3, r3, #4
 800426a:	2b04      	cmp	r3, #4
 800426c:	d1c3      	bne.n	80041f6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800426e:	2300      	movs	r3, #0
}
 8004270:	4618      	mov	r0, r3
 8004272:	3710      	adds	r7, #16
 8004274:	46bd      	mov	sp, r7
 8004276:	bd80      	pop	{r7, pc}

08004278 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b084      	sub	sp, #16
 800427c:	af00      	add	r7, sp, #0
 800427e:	60f8      	str	r0, [r7, #12]
 8004280:	60b9      	str	r1, [r7, #8]
 8004282:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004284:	e049      	b.n	800431a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	695b      	ldr	r3, [r3, #20]
 800428c:	f003 0310 	and.w	r3, r3, #16
 8004290:	2b10      	cmp	r3, #16
 8004292:	d119      	bne.n	80042c8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f06f 0210 	mvn.w	r2, #16
 800429c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	2200      	movs	r2, #0
 80042a2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	2220      	movs	r2, #32
 80042a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	2200      	movs	r2, #0
 80042b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	2200      	movs	r2, #0
 80042c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80042c4:	2301      	movs	r3, #1
 80042c6:	e030      	b.n	800432a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042c8:	f7fe fd48 	bl	8002d5c <HAL_GetTick>
 80042cc:	4602      	mov	r2, r0
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	1ad3      	subs	r3, r2, r3
 80042d2:	68ba      	ldr	r2, [r7, #8]
 80042d4:	429a      	cmp	r2, r3
 80042d6:	d302      	bcc.n	80042de <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80042d8:	68bb      	ldr	r3, [r7, #8]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d11d      	bne.n	800431a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	695b      	ldr	r3, [r3, #20]
 80042e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042e8:	2b40      	cmp	r3, #64	@ 0x40
 80042ea:	d016      	beq.n	800431a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	2200      	movs	r2, #0
 80042f0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	2220      	movs	r2, #32
 80042f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	2200      	movs	r2, #0
 80042fe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004306:	f043 0220 	orr.w	r2, r3, #32
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	2200      	movs	r2, #0
 8004312:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004316:	2301      	movs	r3, #1
 8004318:	e007      	b.n	800432a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	695b      	ldr	r3, [r3, #20]
 8004320:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004324:	2b40      	cmp	r3, #64	@ 0x40
 8004326:	d1ae      	bne.n	8004286 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004328:	2300      	movs	r3, #0
}
 800432a:	4618      	mov	r0, r3
 800432c:	3710      	adds	r7, #16
 800432e:	46bd      	mov	sp, r7
 8004330:	bd80      	pop	{r7, pc}

08004332 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004332:	b480      	push	{r7}
 8004334:	b083      	sub	sp, #12
 8004336:	af00      	add	r7, sp, #0
 8004338:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	695b      	ldr	r3, [r3, #20]
 8004340:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004344:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004348:	d11b      	bne.n	8004382 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004352:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2200      	movs	r2, #0
 8004358:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2220      	movs	r2, #32
 800435e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2200      	movs	r2, #0
 8004366:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800436e:	f043 0204 	orr.w	r2, r3, #4
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2200      	movs	r2, #0
 800437a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800437e:	2301      	movs	r3, #1
 8004380:	e000      	b.n	8004384 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004382:	2300      	movs	r3, #0
}
 8004384:	4618      	mov	r0, r3
 8004386:	370c      	adds	r7, #12
 8004388:	46bd      	mov	sp, r7
 800438a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438e:	4770      	bx	lr

08004390 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b084      	sub	sp, #16
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
 8004398:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d101      	bne.n	80043a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80043a0:	2301      	movs	r3, #1
 80043a2:	e0cc      	b.n	800453e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80043a4:	4b68      	ldr	r3, [pc, #416]	@ (8004548 <HAL_RCC_ClockConfig+0x1b8>)
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f003 030f 	and.w	r3, r3, #15
 80043ac:	683a      	ldr	r2, [r7, #0]
 80043ae:	429a      	cmp	r2, r3
 80043b0:	d90c      	bls.n	80043cc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043b2:	4b65      	ldr	r3, [pc, #404]	@ (8004548 <HAL_RCC_ClockConfig+0x1b8>)
 80043b4:	683a      	ldr	r2, [r7, #0]
 80043b6:	b2d2      	uxtb	r2, r2
 80043b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80043ba:	4b63      	ldr	r3, [pc, #396]	@ (8004548 <HAL_RCC_ClockConfig+0x1b8>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f003 030f 	and.w	r3, r3, #15
 80043c2:	683a      	ldr	r2, [r7, #0]
 80043c4:	429a      	cmp	r2, r3
 80043c6:	d001      	beq.n	80043cc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80043c8:	2301      	movs	r3, #1
 80043ca:	e0b8      	b.n	800453e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f003 0302 	and.w	r3, r3, #2
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d020      	beq.n	800441a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f003 0304 	and.w	r3, r3, #4
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d005      	beq.n	80043f0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80043e4:	4b59      	ldr	r3, [pc, #356]	@ (800454c <HAL_RCC_ClockConfig+0x1bc>)
 80043e6:	689b      	ldr	r3, [r3, #8]
 80043e8:	4a58      	ldr	r2, [pc, #352]	@ (800454c <HAL_RCC_ClockConfig+0x1bc>)
 80043ea:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80043ee:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f003 0308 	and.w	r3, r3, #8
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d005      	beq.n	8004408 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80043fc:	4b53      	ldr	r3, [pc, #332]	@ (800454c <HAL_RCC_ClockConfig+0x1bc>)
 80043fe:	689b      	ldr	r3, [r3, #8]
 8004400:	4a52      	ldr	r2, [pc, #328]	@ (800454c <HAL_RCC_ClockConfig+0x1bc>)
 8004402:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004406:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004408:	4b50      	ldr	r3, [pc, #320]	@ (800454c <HAL_RCC_ClockConfig+0x1bc>)
 800440a:	689b      	ldr	r3, [r3, #8]
 800440c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	689b      	ldr	r3, [r3, #8]
 8004414:	494d      	ldr	r1, [pc, #308]	@ (800454c <HAL_RCC_ClockConfig+0x1bc>)
 8004416:	4313      	orrs	r3, r2
 8004418:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f003 0301 	and.w	r3, r3, #1
 8004422:	2b00      	cmp	r3, #0
 8004424:	d044      	beq.n	80044b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	685b      	ldr	r3, [r3, #4]
 800442a:	2b01      	cmp	r3, #1
 800442c:	d107      	bne.n	800443e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800442e:	4b47      	ldr	r3, [pc, #284]	@ (800454c <HAL_RCC_ClockConfig+0x1bc>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004436:	2b00      	cmp	r3, #0
 8004438:	d119      	bne.n	800446e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800443a:	2301      	movs	r3, #1
 800443c:	e07f      	b.n	800453e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	685b      	ldr	r3, [r3, #4]
 8004442:	2b02      	cmp	r3, #2
 8004444:	d003      	beq.n	800444e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800444a:	2b03      	cmp	r3, #3
 800444c:	d107      	bne.n	800445e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800444e:	4b3f      	ldr	r3, [pc, #252]	@ (800454c <HAL_RCC_ClockConfig+0x1bc>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004456:	2b00      	cmp	r3, #0
 8004458:	d109      	bne.n	800446e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800445a:	2301      	movs	r3, #1
 800445c:	e06f      	b.n	800453e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800445e:	4b3b      	ldr	r3, [pc, #236]	@ (800454c <HAL_RCC_ClockConfig+0x1bc>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f003 0302 	and.w	r3, r3, #2
 8004466:	2b00      	cmp	r3, #0
 8004468:	d101      	bne.n	800446e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800446a:	2301      	movs	r3, #1
 800446c:	e067      	b.n	800453e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800446e:	4b37      	ldr	r3, [pc, #220]	@ (800454c <HAL_RCC_ClockConfig+0x1bc>)
 8004470:	689b      	ldr	r3, [r3, #8]
 8004472:	f023 0203 	bic.w	r2, r3, #3
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	685b      	ldr	r3, [r3, #4]
 800447a:	4934      	ldr	r1, [pc, #208]	@ (800454c <HAL_RCC_ClockConfig+0x1bc>)
 800447c:	4313      	orrs	r3, r2
 800447e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004480:	f7fe fc6c 	bl	8002d5c <HAL_GetTick>
 8004484:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004486:	e00a      	b.n	800449e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004488:	f7fe fc68 	bl	8002d5c <HAL_GetTick>
 800448c:	4602      	mov	r2, r0
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	1ad3      	subs	r3, r2, r3
 8004492:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004496:	4293      	cmp	r3, r2
 8004498:	d901      	bls.n	800449e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800449a:	2303      	movs	r3, #3
 800449c:	e04f      	b.n	800453e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800449e:	4b2b      	ldr	r3, [pc, #172]	@ (800454c <HAL_RCC_ClockConfig+0x1bc>)
 80044a0:	689b      	ldr	r3, [r3, #8]
 80044a2:	f003 020c 	and.w	r2, r3, #12
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	685b      	ldr	r3, [r3, #4]
 80044aa:	009b      	lsls	r3, r3, #2
 80044ac:	429a      	cmp	r2, r3
 80044ae:	d1eb      	bne.n	8004488 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80044b0:	4b25      	ldr	r3, [pc, #148]	@ (8004548 <HAL_RCC_ClockConfig+0x1b8>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f003 030f 	and.w	r3, r3, #15
 80044b8:	683a      	ldr	r2, [r7, #0]
 80044ba:	429a      	cmp	r2, r3
 80044bc:	d20c      	bcs.n	80044d8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044be:	4b22      	ldr	r3, [pc, #136]	@ (8004548 <HAL_RCC_ClockConfig+0x1b8>)
 80044c0:	683a      	ldr	r2, [r7, #0]
 80044c2:	b2d2      	uxtb	r2, r2
 80044c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80044c6:	4b20      	ldr	r3, [pc, #128]	@ (8004548 <HAL_RCC_ClockConfig+0x1b8>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f003 030f 	and.w	r3, r3, #15
 80044ce:	683a      	ldr	r2, [r7, #0]
 80044d0:	429a      	cmp	r2, r3
 80044d2:	d001      	beq.n	80044d8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80044d4:	2301      	movs	r3, #1
 80044d6:	e032      	b.n	800453e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f003 0304 	and.w	r3, r3, #4
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d008      	beq.n	80044f6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80044e4:	4b19      	ldr	r3, [pc, #100]	@ (800454c <HAL_RCC_ClockConfig+0x1bc>)
 80044e6:	689b      	ldr	r3, [r3, #8]
 80044e8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	68db      	ldr	r3, [r3, #12]
 80044f0:	4916      	ldr	r1, [pc, #88]	@ (800454c <HAL_RCC_ClockConfig+0x1bc>)
 80044f2:	4313      	orrs	r3, r2
 80044f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f003 0308 	and.w	r3, r3, #8
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d009      	beq.n	8004516 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004502:	4b12      	ldr	r3, [pc, #72]	@ (800454c <HAL_RCC_ClockConfig+0x1bc>)
 8004504:	689b      	ldr	r3, [r3, #8]
 8004506:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	691b      	ldr	r3, [r3, #16]
 800450e:	00db      	lsls	r3, r3, #3
 8004510:	490e      	ldr	r1, [pc, #56]	@ (800454c <HAL_RCC_ClockConfig+0x1bc>)
 8004512:	4313      	orrs	r3, r2
 8004514:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004516:	f000 f855 	bl	80045c4 <HAL_RCC_GetSysClockFreq>
 800451a:	4602      	mov	r2, r0
 800451c:	4b0b      	ldr	r3, [pc, #44]	@ (800454c <HAL_RCC_ClockConfig+0x1bc>)
 800451e:	689b      	ldr	r3, [r3, #8]
 8004520:	091b      	lsrs	r3, r3, #4
 8004522:	f003 030f 	and.w	r3, r3, #15
 8004526:	490a      	ldr	r1, [pc, #40]	@ (8004550 <HAL_RCC_ClockConfig+0x1c0>)
 8004528:	5ccb      	ldrb	r3, [r1, r3]
 800452a:	fa22 f303 	lsr.w	r3, r2, r3
 800452e:	4a09      	ldr	r2, [pc, #36]	@ (8004554 <HAL_RCC_ClockConfig+0x1c4>)
 8004530:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004532:	4b09      	ldr	r3, [pc, #36]	@ (8004558 <HAL_RCC_ClockConfig+0x1c8>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4618      	mov	r0, r3
 8004538:	f7fe fbcc 	bl	8002cd4 <HAL_InitTick>

  return HAL_OK;
 800453c:	2300      	movs	r3, #0
}
 800453e:	4618      	mov	r0, r3
 8004540:	3710      	adds	r7, #16
 8004542:	46bd      	mov	sp, r7
 8004544:	bd80      	pop	{r7, pc}
 8004546:	bf00      	nop
 8004548:	40023c00 	.word	0x40023c00
 800454c:	40023800 	.word	0x40023800
 8004550:	080088e0 	.word	0x080088e0
 8004554:	20000018 	.word	0x20000018
 8004558:	2000001c 	.word	0x2000001c

0800455c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800455c:	b480      	push	{r7}
 800455e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004560:	4b03      	ldr	r3, [pc, #12]	@ (8004570 <HAL_RCC_GetHCLKFreq+0x14>)
 8004562:	681b      	ldr	r3, [r3, #0]
}
 8004564:	4618      	mov	r0, r3
 8004566:	46bd      	mov	sp, r7
 8004568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456c:	4770      	bx	lr
 800456e:	bf00      	nop
 8004570:	20000018 	.word	0x20000018

08004574 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004578:	f7ff fff0 	bl	800455c <HAL_RCC_GetHCLKFreq>
 800457c:	4602      	mov	r2, r0
 800457e:	4b05      	ldr	r3, [pc, #20]	@ (8004594 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004580:	689b      	ldr	r3, [r3, #8]
 8004582:	0a9b      	lsrs	r3, r3, #10
 8004584:	f003 0307 	and.w	r3, r3, #7
 8004588:	4903      	ldr	r1, [pc, #12]	@ (8004598 <HAL_RCC_GetPCLK1Freq+0x24>)
 800458a:	5ccb      	ldrb	r3, [r1, r3]
 800458c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004590:	4618      	mov	r0, r3
 8004592:	bd80      	pop	{r7, pc}
 8004594:	40023800 	.word	0x40023800
 8004598:	080088f0 	.word	0x080088f0

0800459c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80045a0:	f7ff ffdc 	bl	800455c <HAL_RCC_GetHCLKFreq>
 80045a4:	4602      	mov	r2, r0
 80045a6:	4b05      	ldr	r3, [pc, #20]	@ (80045bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80045a8:	689b      	ldr	r3, [r3, #8]
 80045aa:	0b5b      	lsrs	r3, r3, #13
 80045ac:	f003 0307 	and.w	r3, r3, #7
 80045b0:	4903      	ldr	r1, [pc, #12]	@ (80045c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80045b2:	5ccb      	ldrb	r3, [r1, r3]
 80045b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80045b8:	4618      	mov	r0, r3
 80045ba:	bd80      	pop	{r7, pc}
 80045bc:	40023800 	.word	0x40023800
 80045c0:	080088f0 	.word	0x080088f0

080045c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80045c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80045c8:	b0ae      	sub	sp, #184	@ 0xb8
 80045ca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80045cc:	2300      	movs	r3, #0
 80045ce:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 80045d2:	2300      	movs	r3, #0
 80045d4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80045d8:	2300      	movs	r3, #0
 80045da:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 80045de:	2300      	movs	r3, #0
 80045e0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 80045e4:	2300      	movs	r3, #0
 80045e6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80045ea:	4bcb      	ldr	r3, [pc, #812]	@ (8004918 <HAL_RCC_GetSysClockFreq+0x354>)
 80045ec:	689b      	ldr	r3, [r3, #8]
 80045ee:	f003 030c 	and.w	r3, r3, #12
 80045f2:	2b0c      	cmp	r3, #12
 80045f4:	f200 8206 	bhi.w	8004a04 <HAL_RCC_GetSysClockFreq+0x440>
 80045f8:	a201      	add	r2, pc, #4	@ (adr r2, 8004600 <HAL_RCC_GetSysClockFreq+0x3c>)
 80045fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045fe:	bf00      	nop
 8004600:	08004635 	.word	0x08004635
 8004604:	08004a05 	.word	0x08004a05
 8004608:	08004a05 	.word	0x08004a05
 800460c:	08004a05 	.word	0x08004a05
 8004610:	0800463d 	.word	0x0800463d
 8004614:	08004a05 	.word	0x08004a05
 8004618:	08004a05 	.word	0x08004a05
 800461c:	08004a05 	.word	0x08004a05
 8004620:	08004645 	.word	0x08004645
 8004624:	08004a05 	.word	0x08004a05
 8004628:	08004a05 	.word	0x08004a05
 800462c:	08004a05 	.word	0x08004a05
 8004630:	08004835 	.word	0x08004835
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004634:	4bb9      	ldr	r3, [pc, #740]	@ (800491c <HAL_RCC_GetSysClockFreq+0x358>)
 8004636:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800463a:	e1e7      	b.n	8004a0c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800463c:	4bb8      	ldr	r3, [pc, #736]	@ (8004920 <HAL_RCC_GetSysClockFreq+0x35c>)
 800463e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004642:	e1e3      	b.n	8004a0c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004644:	4bb4      	ldr	r3, [pc, #720]	@ (8004918 <HAL_RCC_GetSysClockFreq+0x354>)
 8004646:	685b      	ldr	r3, [r3, #4]
 8004648:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800464c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004650:	4bb1      	ldr	r3, [pc, #708]	@ (8004918 <HAL_RCC_GetSysClockFreq+0x354>)
 8004652:	685b      	ldr	r3, [r3, #4]
 8004654:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004658:	2b00      	cmp	r3, #0
 800465a:	d071      	beq.n	8004740 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800465c:	4bae      	ldr	r3, [pc, #696]	@ (8004918 <HAL_RCC_GetSysClockFreq+0x354>)
 800465e:	685b      	ldr	r3, [r3, #4]
 8004660:	099b      	lsrs	r3, r3, #6
 8004662:	2200      	movs	r2, #0
 8004664:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004668:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 800466c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004670:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004674:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004678:	2300      	movs	r3, #0
 800467a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800467e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004682:	4622      	mov	r2, r4
 8004684:	462b      	mov	r3, r5
 8004686:	f04f 0000 	mov.w	r0, #0
 800468a:	f04f 0100 	mov.w	r1, #0
 800468e:	0159      	lsls	r1, r3, #5
 8004690:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004694:	0150      	lsls	r0, r2, #5
 8004696:	4602      	mov	r2, r0
 8004698:	460b      	mov	r3, r1
 800469a:	4621      	mov	r1, r4
 800469c:	1a51      	subs	r1, r2, r1
 800469e:	6439      	str	r1, [r7, #64]	@ 0x40
 80046a0:	4629      	mov	r1, r5
 80046a2:	eb63 0301 	sbc.w	r3, r3, r1
 80046a6:	647b      	str	r3, [r7, #68]	@ 0x44
 80046a8:	f04f 0200 	mov.w	r2, #0
 80046ac:	f04f 0300 	mov.w	r3, #0
 80046b0:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 80046b4:	4649      	mov	r1, r9
 80046b6:	018b      	lsls	r3, r1, #6
 80046b8:	4641      	mov	r1, r8
 80046ba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80046be:	4641      	mov	r1, r8
 80046c0:	018a      	lsls	r2, r1, #6
 80046c2:	4641      	mov	r1, r8
 80046c4:	1a51      	subs	r1, r2, r1
 80046c6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80046c8:	4649      	mov	r1, r9
 80046ca:	eb63 0301 	sbc.w	r3, r3, r1
 80046ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80046d0:	f04f 0200 	mov.w	r2, #0
 80046d4:	f04f 0300 	mov.w	r3, #0
 80046d8:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 80046dc:	4649      	mov	r1, r9
 80046de:	00cb      	lsls	r3, r1, #3
 80046e0:	4641      	mov	r1, r8
 80046e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80046e6:	4641      	mov	r1, r8
 80046e8:	00ca      	lsls	r2, r1, #3
 80046ea:	4610      	mov	r0, r2
 80046ec:	4619      	mov	r1, r3
 80046ee:	4603      	mov	r3, r0
 80046f0:	4622      	mov	r2, r4
 80046f2:	189b      	adds	r3, r3, r2
 80046f4:	633b      	str	r3, [r7, #48]	@ 0x30
 80046f6:	462b      	mov	r3, r5
 80046f8:	460a      	mov	r2, r1
 80046fa:	eb42 0303 	adc.w	r3, r2, r3
 80046fe:	637b      	str	r3, [r7, #52]	@ 0x34
 8004700:	f04f 0200 	mov.w	r2, #0
 8004704:	f04f 0300 	mov.w	r3, #0
 8004708:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800470c:	4629      	mov	r1, r5
 800470e:	024b      	lsls	r3, r1, #9
 8004710:	4621      	mov	r1, r4
 8004712:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004716:	4621      	mov	r1, r4
 8004718:	024a      	lsls	r2, r1, #9
 800471a:	4610      	mov	r0, r2
 800471c:	4619      	mov	r1, r3
 800471e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004722:	2200      	movs	r2, #0
 8004724:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004728:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800472c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8004730:	f7fc fa24 	bl	8000b7c <__aeabi_uldivmod>
 8004734:	4602      	mov	r2, r0
 8004736:	460b      	mov	r3, r1
 8004738:	4613      	mov	r3, r2
 800473a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800473e:	e067      	b.n	8004810 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004740:	4b75      	ldr	r3, [pc, #468]	@ (8004918 <HAL_RCC_GetSysClockFreq+0x354>)
 8004742:	685b      	ldr	r3, [r3, #4]
 8004744:	099b      	lsrs	r3, r3, #6
 8004746:	2200      	movs	r2, #0
 8004748:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800474c:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8004750:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004754:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004758:	67bb      	str	r3, [r7, #120]	@ 0x78
 800475a:	2300      	movs	r3, #0
 800475c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800475e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8004762:	4622      	mov	r2, r4
 8004764:	462b      	mov	r3, r5
 8004766:	f04f 0000 	mov.w	r0, #0
 800476a:	f04f 0100 	mov.w	r1, #0
 800476e:	0159      	lsls	r1, r3, #5
 8004770:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004774:	0150      	lsls	r0, r2, #5
 8004776:	4602      	mov	r2, r0
 8004778:	460b      	mov	r3, r1
 800477a:	4621      	mov	r1, r4
 800477c:	1a51      	subs	r1, r2, r1
 800477e:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004780:	4629      	mov	r1, r5
 8004782:	eb63 0301 	sbc.w	r3, r3, r1
 8004786:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004788:	f04f 0200 	mov.w	r2, #0
 800478c:	f04f 0300 	mov.w	r3, #0
 8004790:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8004794:	4649      	mov	r1, r9
 8004796:	018b      	lsls	r3, r1, #6
 8004798:	4641      	mov	r1, r8
 800479a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800479e:	4641      	mov	r1, r8
 80047a0:	018a      	lsls	r2, r1, #6
 80047a2:	4641      	mov	r1, r8
 80047a4:	ebb2 0a01 	subs.w	sl, r2, r1
 80047a8:	4649      	mov	r1, r9
 80047aa:	eb63 0b01 	sbc.w	fp, r3, r1
 80047ae:	f04f 0200 	mov.w	r2, #0
 80047b2:	f04f 0300 	mov.w	r3, #0
 80047b6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80047ba:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80047be:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80047c2:	4692      	mov	sl, r2
 80047c4:	469b      	mov	fp, r3
 80047c6:	4623      	mov	r3, r4
 80047c8:	eb1a 0303 	adds.w	r3, sl, r3
 80047cc:	623b      	str	r3, [r7, #32]
 80047ce:	462b      	mov	r3, r5
 80047d0:	eb4b 0303 	adc.w	r3, fp, r3
 80047d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80047d6:	f04f 0200 	mov.w	r2, #0
 80047da:	f04f 0300 	mov.w	r3, #0
 80047de:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80047e2:	4629      	mov	r1, r5
 80047e4:	028b      	lsls	r3, r1, #10
 80047e6:	4621      	mov	r1, r4
 80047e8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80047ec:	4621      	mov	r1, r4
 80047ee:	028a      	lsls	r2, r1, #10
 80047f0:	4610      	mov	r0, r2
 80047f2:	4619      	mov	r1, r3
 80047f4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80047f8:	2200      	movs	r2, #0
 80047fa:	673b      	str	r3, [r7, #112]	@ 0x70
 80047fc:	677a      	str	r2, [r7, #116]	@ 0x74
 80047fe:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8004802:	f7fc f9bb 	bl	8000b7c <__aeabi_uldivmod>
 8004806:	4602      	mov	r2, r0
 8004808:	460b      	mov	r3, r1
 800480a:	4613      	mov	r3, r2
 800480c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004810:	4b41      	ldr	r3, [pc, #260]	@ (8004918 <HAL_RCC_GetSysClockFreq+0x354>)
 8004812:	685b      	ldr	r3, [r3, #4]
 8004814:	0c1b      	lsrs	r3, r3, #16
 8004816:	f003 0303 	and.w	r3, r3, #3
 800481a:	3301      	adds	r3, #1
 800481c:	005b      	lsls	r3, r3, #1
 800481e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8004822:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004826:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800482a:	fbb2 f3f3 	udiv	r3, r2, r3
 800482e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004832:	e0eb      	b.n	8004a0c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004834:	4b38      	ldr	r3, [pc, #224]	@ (8004918 <HAL_RCC_GetSysClockFreq+0x354>)
 8004836:	685b      	ldr	r3, [r3, #4]
 8004838:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800483c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004840:	4b35      	ldr	r3, [pc, #212]	@ (8004918 <HAL_RCC_GetSysClockFreq+0x354>)
 8004842:	685b      	ldr	r3, [r3, #4]
 8004844:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004848:	2b00      	cmp	r3, #0
 800484a:	d06b      	beq.n	8004924 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800484c:	4b32      	ldr	r3, [pc, #200]	@ (8004918 <HAL_RCC_GetSysClockFreq+0x354>)
 800484e:	685b      	ldr	r3, [r3, #4]
 8004850:	099b      	lsrs	r3, r3, #6
 8004852:	2200      	movs	r2, #0
 8004854:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004856:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004858:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800485a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800485e:	663b      	str	r3, [r7, #96]	@ 0x60
 8004860:	2300      	movs	r3, #0
 8004862:	667b      	str	r3, [r7, #100]	@ 0x64
 8004864:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8004868:	4622      	mov	r2, r4
 800486a:	462b      	mov	r3, r5
 800486c:	f04f 0000 	mov.w	r0, #0
 8004870:	f04f 0100 	mov.w	r1, #0
 8004874:	0159      	lsls	r1, r3, #5
 8004876:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800487a:	0150      	lsls	r0, r2, #5
 800487c:	4602      	mov	r2, r0
 800487e:	460b      	mov	r3, r1
 8004880:	4621      	mov	r1, r4
 8004882:	1a51      	subs	r1, r2, r1
 8004884:	61b9      	str	r1, [r7, #24]
 8004886:	4629      	mov	r1, r5
 8004888:	eb63 0301 	sbc.w	r3, r3, r1
 800488c:	61fb      	str	r3, [r7, #28]
 800488e:	f04f 0200 	mov.w	r2, #0
 8004892:	f04f 0300 	mov.w	r3, #0
 8004896:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800489a:	4659      	mov	r1, fp
 800489c:	018b      	lsls	r3, r1, #6
 800489e:	4651      	mov	r1, sl
 80048a0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80048a4:	4651      	mov	r1, sl
 80048a6:	018a      	lsls	r2, r1, #6
 80048a8:	4651      	mov	r1, sl
 80048aa:	ebb2 0801 	subs.w	r8, r2, r1
 80048ae:	4659      	mov	r1, fp
 80048b0:	eb63 0901 	sbc.w	r9, r3, r1
 80048b4:	f04f 0200 	mov.w	r2, #0
 80048b8:	f04f 0300 	mov.w	r3, #0
 80048bc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80048c0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80048c4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80048c8:	4690      	mov	r8, r2
 80048ca:	4699      	mov	r9, r3
 80048cc:	4623      	mov	r3, r4
 80048ce:	eb18 0303 	adds.w	r3, r8, r3
 80048d2:	613b      	str	r3, [r7, #16]
 80048d4:	462b      	mov	r3, r5
 80048d6:	eb49 0303 	adc.w	r3, r9, r3
 80048da:	617b      	str	r3, [r7, #20]
 80048dc:	f04f 0200 	mov.w	r2, #0
 80048e0:	f04f 0300 	mov.w	r3, #0
 80048e4:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80048e8:	4629      	mov	r1, r5
 80048ea:	024b      	lsls	r3, r1, #9
 80048ec:	4621      	mov	r1, r4
 80048ee:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80048f2:	4621      	mov	r1, r4
 80048f4:	024a      	lsls	r2, r1, #9
 80048f6:	4610      	mov	r0, r2
 80048f8:	4619      	mov	r1, r3
 80048fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80048fe:	2200      	movs	r2, #0
 8004900:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004902:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8004904:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004908:	f7fc f938 	bl	8000b7c <__aeabi_uldivmod>
 800490c:	4602      	mov	r2, r0
 800490e:	460b      	mov	r3, r1
 8004910:	4613      	mov	r3, r2
 8004912:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004916:	e065      	b.n	80049e4 <HAL_RCC_GetSysClockFreq+0x420>
 8004918:	40023800 	.word	0x40023800
 800491c:	00f42400 	.word	0x00f42400
 8004920:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004924:	4b3d      	ldr	r3, [pc, #244]	@ (8004a1c <HAL_RCC_GetSysClockFreq+0x458>)
 8004926:	685b      	ldr	r3, [r3, #4]
 8004928:	099b      	lsrs	r3, r3, #6
 800492a:	2200      	movs	r2, #0
 800492c:	4618      	mov	r0, r3
 800492e:	4611      	mov	r1, r2
 8004930:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004934:	653b      	str	r3, [r7, #80]	@ 0x50
 8004936:	2300      	movs	r3, #0
 8004938:	657b      	str	r3, [r7, #84]	@ 0x54
 800493a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800493e:	4642      	mov	r2, r8
 8004940:	464b      	mov	r3, r9
 8004942:	f04f 0000 	mov.w	r0, #0
 8004946:	f04f 0100 	mov.w	r1, #0
 800494a:	0159      	lsls	r1, r3, #5
 800494c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004950:	0150      	lsls	r0, r2, #5
 8004952:	4602      	mov	r2, r0
 8004954:	460b      	mov	r3, r1
 8004956:	4641      	mov	r1, r8
 8004958:	1a51      	subs	r1, r2, r1
 800495a:	60b9      	str	r1, [r7, #8]
 800495c:	4649      	mov	r1, r9
 800495e:	eb63 0301 	sbc.w	r3, r3, r1
 8004962:	60fb      	str	r3, [r7, #12]
 8004964:	f04f 0200 	mov.w	r2, #0
 8004968:	f04f 0300 	mov.w	r3, #0
 800496c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8004970:	4659      	mov	r1, fp
 8004972:	018b      	lsls	r3, r1, #6
 8004974:	4651      	mov	r1, sl
 8004976:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800497a:	4651      	mov	r1, sl
 800497c:	018a      	lsls	r2, r1, #6
 800497e:	4651      	mov	r1, sl
 8004980:	1a54      	subs	r4, r2, r1
 8004982:	4659      	mov	r1, fp
 8004984:	eb63 0501 	sbc.w	r5, r3, r1
 8004988:	f04f 0200 	mov.w	r2, #0
 800498c:	f04f 0300 	mov.w	r3, #0
 8004990:	00eb      	lsls	r3, r5, #3
 8004992:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004996:	00e2      	lsls	r2, r4, #3
 8004998:	4614      	mov	r4, r2
 800499a:	461d      	mov	r5, r3
 800499c:	4643      	mov	r3, r8
 800499e:	18e3      	adds	r3, r4, r3
 80049a0:	603b      	str	r3, [r7, #0]
 80049a2:	464b      	mov	r3, r9
 80049a4:	eb45 0303 	adc.w	r3, r5, r3
 80049a8:	607b      	str	r3, [r7, #4]
 80049aa:	f04f 0200 	mov.w	r2, #0
 80049ae:	f04f 0300 	mov.w	r3, #0
 80049b2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80049b6:	4629      	mov	r1, r5
 80049b8:	028b      	lsls	r3, r1, #10
 80049ba:	4621      	mov	r1, r4
 80049bc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80049c0:	4621      	mov	r1, r4
 80049c2:	028a      	lsls	r2, r1, #10
 80049c4:	4610      	mov	r0, r2
 80049c6:	4619      	mov	r1, r3
 80049c8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80049cc:	2200      	movs	r2, #0
 80049ce:	64bb      	str	r3, [r7, #72]	@ 0x48
 80049d0:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80049d2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80049d6:	f7fc f8d1 	bl	8000b7c <__aeabi_uldivmod>
 80049da:	4602      	mov	r2, r0
 80049dc:	460b      	mov	r3, r1
 80049de:	4613      	mov	r3, r2
 80049e0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80049e4:	4b0d      	ldr	r3, [pc, #52]	@ (8004a1c <HAL_RCC_GetSysClockFreq+0x458>)
 80049e6:	685b      	ldr	r3, [r3, #4]
 80049e8:	0f1b      	lsrs	r3, r3, #28
 80049ea:	f003 0307 	and.w	r3, r3, #7
 80049ee:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 80049f2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80049f6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80049fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80049fe:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004a02:	e003      	b.n	8004a0c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004a04:	4b06      	ldr	r3, [pc, #24]	@ (8004a20 <HAL_RCC_GetSysClockFreq+0x45c>)
 8004a06:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004a0a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004a0c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8004a10:	4618      	mov	r0, r3
 8004a12:	37b8      	adds	r7, #184	@ 0xb8
 8004a14:	46bd      	mov	sp, r7
 8004a16:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a1a:	bf00      	nop
 8004a1c:	40023800 	.word	0x40023800
 8004a20:	00f42400 	.word	0x00f42400

08004a24 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b086      	sub	sp, #24
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d101      	bne.n	8004a36 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004a32:	2301      	movs	r3, #1
 8004a34:	e28d      	b.n	8004f52 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f003 0301 	and.w	r3, r3, #1
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	f000 8083 	beq.w	8004b4a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004a44:	4b94      	ldr	r3, [pc, #592]	@ (8004c98 <HAL_RCC_OscConfig+0x274>)
 8004a46:	689b      	ldr	r3, [r3, #8]
 8004a48:	f003 030c 	and.w	r3, r3, #12
 8004a4c:	2b04      	cmp	r3, #4
 8004a4e:	d019      	beq.n	8004a84 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004a50:	4b91      	ldr	r3, [pc, #580]	@ (8004c98 <HAL_RCC_OscConfig+0x274>)
 8004a52:	689b      	ldr	r3, [r3, #8]
 8004a54:	f003 030c 	and.w	r3, r3, #12
        || \
 8004a58:	2b08      	cmp	r3, #8
 8004a5a:	d106      	bne.n	8004a6a <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004a5c:	4b8e      	ldr	r3, [pc, #568]	@ (8004c98 <HAL_RCC_OscConfig+0x274>)
 8004a5e:	685b      	ldr	r3, [r3, #4]
 8004a60:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004a64:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004a68:	d00c      	beq.n	8004a84 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004a6a:	4b8b      	ldr	r3, [pc, #556]	@ (8004c98 <HAL_RCC_OscConfig+0x274>)
 8004a6c:	689b      	ldr	r3, [r3, #8]
 8004a6e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004a72:	2b0c      	cmp	r3, #12
 8004a74:	d112      	bne.n	8004a9c <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004a76:	4b88      	ldr	r3, [pc, #544]	@ (8004c98 <HAL_RCC_OscConfig+0x274>)
 8004a78:	685b      	ldr	r3, [r3, #4]
 8004a7a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004a7e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004a82:	d10b      	bne.n	8004a9c <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a84:	4b84      	ldr	r3, [pc, #528]	@ (8004c98 <HAL_RCC_OscConfig+0x274>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d05b      	beq.n	8004b48 <HAL_RCC_OscConfig+0x124>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	685b      	ldr	r3, [r3, #4]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d157      	bne.n	8004b48 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004a98:	2301      	movs	r3, #1
 8004a9a:	e25a      	b.n	8004f52 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	685b      	ldr	r3, [r3, #4]
 8004aa0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004aa4:	d106      	bne.n	8004ab4 <HAL_RCC_OscConfig+0x90>
 8004aa6:	4b7c      	ldr	r3, [pc, #496]	@ (8004c98 <HAL_RCC_OscConfig+0x274>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	4a7b      	ldr	r2, [pc, #492]	@ (8004c98 <HAL_RCC_OscConfig+0x274>)
 8004aac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ab0:	6013      	str	r3, [r2, #0]
 8004ab2:	e01d      	b.n	8004af0 <HAL_RCC_OscConfig+0xcc>
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004abc:	d10c      	bne.n	8004ad8 <HAL_RCC_OscConfig+0xb4>
 8004abe:	4b76      	ldr	r3, [pc, #472]	@ (8004c98 <HAL_RCC_OscConfig+0x274>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	4a75      	ldr	r2, [pc, #468]	@ (8004c98 <HAL_RCC_OscConfig+0x274>)
 8004ac4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004ac8:	6013      	str	r3, [r2, #0]
 8004aca:	4b73      	ldr	r3, [pc, #460]	@ (8004c98 <HAL_RCC_OscConfig+0x274>)
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	4a72      	ldr	r2, [pc, #456]	@ (8004c98 <HAL_RCC_OscConfig+0x274>)
 8004ad0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ad4:	6013      	str	r3, [r2, #0]
 8004ad6:	e00b      	b.n	8004af0 <HAL_RCC_OscConfig+0xcc>
 8004ad8:	4b6f      	ldr	r3, [pc, #444]	@ (8004c98 <HAL_RCC_OscConfig+0x274>)
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	4a6e      	ldr	r2, [pc, #440]	@ (8004c98 <HAL_RCC_OscConfig+0x274>)
 8004ade:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004ae2:	6013      	str	r3, [r2, #0]
 8004ae4:	4b6c      	ldr	r3, [pc, #432]	@ (8004c98 <HAL_RCC_OscConfig+0x274>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	4a6b      	ldr	r2, [pc, #428]	@ (8004c98 <HAL_RCC_OscConfig+0x274>)
 8004aea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004aee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	685b      	ldr	r3, [r3, #4]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d013      	beq.n	8004b20 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004af8:	f7fe f930 	bl	8002d5c <HAL_GetTick>
 8004afc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004afe:	e008      	b.n	8004b12 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b00:	f7fe f92c 	bl	8002d5c <HAL_GetTick>
 8004b04:	4602      	mov	r2, r0
 8004b06:	693b      	ldr	r3, [r7, #16]
 8004b08:	1ad3      	subs	r3, r2, r3
 8004b0a:	2b64      	cmp	r3, #100	@ 0x64
 8004b0c:	d901      	bls.n	8004b12 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004b0e:	2303      	movs	r3, #3
 8004b10:	e21f      	b.n	8004f52 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b12:	4b61      	ldr	r3, [pc, #388]	@ (8004c98 <HAL_RCC_OscConfig+0x274>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d0f0      	beq.n	8004b00 <HAL_RCC_OscConfig+0xdc>
 8004b1e:	e014      	b.n	8004b4a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b20:	f7fe f91c 	bl	8002d5c <HAL_GetTick>
 8004b24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b26:	e008      	b.n	8004b3a <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b28:	f7fe f918 	bl	8002d5c <HAL_GetTick>
 8004b2c:	4602      	mov	r2, r0
 8004b2e:	693b      	ldr	r3, [r7, #16]
 8004b30:	1ad3      	subs	r3, r2, r3
 8004b32:	2b64      	cmp	r3, #100	@ 0x64
 8004b34:	d901      	bls.n	8004b3a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004b36:	2303      	movs	r3, #3
 8004b38:	e20b      	b.n	8004f52 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b3a:	4b57      	ldr	r3, [pc, #348]	@ (8004c98 <HAL_RCC_OscConfig+0x274>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d1f0      	bne.n	8004b28 <HAL_RCC_OscConfig+0x104>
 8004b46:	e000      	b.n	8004b4a <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f003 0302 	and.w	r3, r3, #2
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d06f      	beq.n	8004c36 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004b56:	4b50      	ldr	r3, [pc, #320]	@ (8004c98 <HAL_RCC_OscConfig+0x274>)
 8004b58:	689b      	ldr	r3, [r3, #8]
 8004b5a:	f003 030c 	and.w	r3, r3, #12
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d017      	beq.n	8004b92 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004b62:	4b4d      	ldr	r3, [pc, #308]	@ (8004c98 <HAL_RCC_OscConfig+0x274>)
 8004b64:	689b      	ldr	r3, [r3, #8]
 8004b66:	f003 030c 	and.w	r3, r3, #12
        || \
 8004b6a:	2b08      	cmp	r3, #8
 8004b6c:	d105      	bne.n	8004b7a <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004b6e:	4b4a      	ldr	r3, [pc, #296]	@ (8004c98 <HAL_RCC_OscConfig+0x274>)
 8004b70:	685b      	ldr	r3, [r3, #4]
 8004b72:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d00b      	beq.n	8004b92 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004b7a:	4b47      	ldr	r3, [pc, #284]	@ (8004c98 <HAL_RCC_OscConfig+0x274>)
 8004b7c:	689b      	ldr	r3, [r3, #8]
 8004b7e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004b82:	2b0c      	cmp	r3, #12
 8004b84:	d11c      	bne.n	8004bc0 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004b86:	4b44      	ldr	r3, [pc, #272]	@ (8004c98 <HAL_RCC_OscConfig+0x274>)
 8004b88:	685b      	ldr	r3, [r3, #4]
 8004b8a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d116      	bne.n	8004bc0 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b92:	4b41      	ldr	r3, [pc, #260]	@ (8004c98 <HAL_RCC_OscConfig+0x274>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f003 0302 	and.w	r3, r3, #2
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d005      	beq.n	8004baa <HAL_RCC_OscConfig+0x186>
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	68db      	ldr	r3, [r3, #12]
 8004ba2:	2b01      	cmp	r3, #1
 8004ba4:	d001      	beq.n	8004baa <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004ba6:	2301      	movs	r3, #1
 8004ba8:	e1d3      	b.n	8004f52 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004baa:	4b3b      	ldr	r3, [pc, #236]	@ (8004c98 <HAL_RCC_OscConfig+0x274>)
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	691b      	ldr	r3, [r3, #16]
 8004bb6:	00db      	lsls	r3, r3, #3
 8004bb8:	4937      	ldr	r1, [pc, #220]	@ (8004c98 <HAL_RCC_OscConfig+0x274>)
 8004bba:	4313      	orrs	r3, r2
 8004bbc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004bbe:	e03a      	b.n	8004c36 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	68db      	ldr	r3, [r3, #12]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d020      	beq.n	8004c0a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004bc8:	4b34      	ldr	r3, [pc, #208]	@ (8004c9c <HAL_RCC_OscConfig+0x278>)
 8004bca:	2201      	movs	r2, #1
 8004bcc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bce:	f7fe f8c5 	bl	8002d5c <HAL_GetTick>
 8004bd2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bd4:	e008      	b.n	8004be8 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004bd6:	f7fe f8c1 	bl	8002d5c <HAL_GetTick>
 8004bda:	4602      	mov	r2, r0
 8004bdc:	693b      	ldr	r3, [r7, #16]
 8004bde:	1ad3      	subs	r3, r2, r3
 8004be0:	2b02      	cmp	r3, #2
 8004be2:	d901      	bls.n	8004be8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004be4:	2303      	movs	r3, #3
 8004be6:	e1b4      	b.n	8004f52 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004be8:	4b2b      	ldr	r3, [pc, #172]	@ (8004c98 <HAL_RCC_OscConfig+0x274>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f003 0302 	and.w	r3, r3, #2
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d0f0      	beq.n	8004bd6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bf4:	4b28      	ldr	r3, [pc, #160]	@ (8004c98 <HAL_RCC_OscConfig+0x274>)
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	691b      	ldr	r3, [r3, #16]
 8004c00:	00db      	lsls	r3, r3, #3
 8004c02:	4925      	ldr	r1, [pc, #148]	@ (8004c98 <HAL_RCC_OscConfig+0x274>)
 8004c04:	4313      	orrs	r3, r2
 8004c06:	600b      	str	r3, [r1, #0]
 8004c08:	e015      	b.n	8004c36 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c0a:	4b24      	ldr	r3, [pc, #144]	@ (8004c9c <HAL_RCC_OscConfig+0x278>)
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c10:	f7fe f8a4 	bl	8002d5c <HAL_GetTick>
 8004c14:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c16:	e008      	b.n	8004c2a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c18:	f7fe f8a0 	bl	8002d5c <HAL_GetTick>
 8004c1c:	4602      	mov	r2, r0
 8004c1e:	693b      	ldr	r3, [r7, #16]
 8004c20:	1ad3      	subs	r3, r2, r3
 8004c22:	2b02      	cmp	r3, #2
 8004c24:	d901      	bls.n	8004c2a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004c26:	2303      	movs	r3, #3
 8004c28:	e193      	b.n	8004f52 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c2a:	4b1b      	ldr	r3, [pc, #108]	@ (8004c98 <HAL_RCC_OscConfig+0x274>)
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f003 0302 	and.w	r3, r3, #2
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d1f0      	bne.n	8004c18 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f003 0308 	and.w	r3, r3, #8
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d036      	beq.n	8004cb0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	695b      	ldr	r3, [r3, #20]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d016      	beq.n	8004c78 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004c4a:	4b15      	ldr	r3, [pc, #84]	@ (8004ca0 <HAL_RCC_OscConfig+0x27c>)
 8004c4c:	2201      	movs	r2, #1
 8004c4e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c50:	f7fe f884 	bl	8002d5c <HAL_GetTick>
 8004c54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c56:	e008      	b.n	8004c6a <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c58:	f7fe f880 	bl	8002d5c <HAL_GetTick>
 8004c5c:	4602      	mov	r2, r0
 8004c5e:	693b      	ldr	r3, [r7, #16]
 8004c60:	1ad3      	subs	r3, r2, r3
 8004c62:	2b02      	cmp	r3, #2
 8004c64:	d901      	bls.n	8004c6a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004c66:	2303      	movs	r3, #3
 8004c68:	e173      	b.n	8004f52 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c6a:	4b0b      	ldr	r3, [pc, #44]	@ (8004c98 <HAL_RCC_OscConfig+0x274>)
 8004c6c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c6e:	f003 0302 	and.w	r3, r3, #2
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d0f0      	beq.n	8004c58 <HAL_RCC_OscConfig+0x234>
 8004c76:	e01b      	b.n	8004cb0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004c78:	4b09      	ldr	r3, [pc, #36]	@ (8004ca0 <HAL_RCC_OscConfig+0x27c>)
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c7e:	f7fe f86d 	bl	8002d5c <HAL_GetTick>
 8004c82:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c84:	e00e      	b.n	8004ca4 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c86:	f7fe f869 	bl	8002d5c <HAL_GetTick>
 8004c8a:	4602      	mov	r2, r0
 8004c8c:	693b      	ldr	r3, [r7, #16]
 8004c8e:	1ad3      	subs	r3, r2, r3
 8004c90:	2b02      	cmp	r3, #2
 8004c92:	d907      	bls.n	8004ca4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004c94:	2303      	movs	r3, #3
 8004c96:	e15c      	b.n	8004f52 <HAL_RCC_OscConfig+0x52e>
 8004c98:	40023800 	.word	0x40023800
 8004c9c:	42470000 	.word	0x42470000
 8004ca0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ca4:	4b8a      	ldr	r3, [pc, #552]	@ (8004ed0 <HAL_RCC_OscConfig+0x4ac>)
 8004ca6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ca8:	f003 0302 	and.w	r3, r3, #2
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d1ea      	bne.n	8004c86 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f003 0304 	and.w	r3, r3, #4
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	f000 8097 	beq.w	8004dec <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004cc2:	4b83      	ldr	r3, [pc, #524]	@ (8004ed0 <HAL_RCC_OscConfig+0x4ac>)
 8004cc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cc6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d10f      	bne.n	8004cee <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004cce:	2300      	movs	r3, #0
 8004cd0:	60bb      	str	r3, [r7, #8]
 8004cd2:	4b7f      	ldr	r3, [pc, #508]	@ (8004ed0 <HAL_RCC_OscConfig+0x4ac>)
 8004cd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cd6:	4a7e      	ldr	r2, [pc, #504]	@ (8004ed0 <HAL_RCC_OscConfig+0x4ac>)
 8004cd8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004cdc:	6413      	str	r3, [r2, #64]	@ 0x40
 8004cde:	4b7c      	ldr	r3, [pc, #496]	@ (8004ed0 <HAL_RCC_OscConfig+0x4ac>)
 8004ce0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ce2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004ce6:	60bb      	str	r3, [r7, #8]
 8004ce8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004cea:	2301      	movs	r3, #1
 8004cec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cee:	4b79      	ldr	r3, [pc, #484]	@ (8004ed4 <HAL_RCC_OscConfig+0x4b0>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d118      	bne.n	8004d2c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004cfa:	4b76      	ldr	r3, [pc, #472]	@ (8004ed4 <HAL_RCC_OscConfig+0x4b0>)
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	4a75      	ldr	r2, [pc, #468]	@ (8004ed4 <HAL_RCC_OscConfig+0x4b0>)
 8004d00:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004d04:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d06:	f7fe f829 	bl	8002d5c <HAL_GetTick>
 8004d0a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d0c:	e008      	b.n	8004d20 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d0e:	f7fe f825 	bl	8002d5c <HAL_GetTick>
 8004d12:	4602      	mov	r2, r0
 8004d14:	693b      	ldr	r3, [r7, #16]
 8004d16:	1ad3      	subs	r3, r2, r3
 8004d18:	2b02      	cmp	r3, #2
 8004d1a:	d901      	bls.n	8004d20 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004d1c:	2303      	movs	r3, #3
 8004d1e:	e118      	b.n	8004f52 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d20:	4b6c      	ldr	r3, [pc, #432]	@ (8004ed4 <HAL_RCC_OscConfig+0x4b0>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d0f0      	beq.n	8004d0e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	689b      	ldr	r3, [r3, #8]
 8004d30:	2b01      	cmp	r3, #1
 8004d32:	d106      	bne.n	8004d42 <HAL_RCC_OscConfig+0x31e>
 8004d34:	4b66      	ldr	r3, [pc, #408]	@ (8004ed0 <HAL_RCC_OscConfig+0x4ac>)
 8004d36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d38:	4a65      	ldr	r2, [pc, #404]	@ (8004ed0 <HAL_RCC_OscConfig+0x4ac>)
 8004d3a:	f043 0301 	orr.w	r3, r3, #1
 8004d3e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004d40:	e01c      	b.n	8004d7c <HAL_RCC_OscConfig+0x358>
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	689b      	ldr	r3, [r3, #8]
 8004d46:	2b05      	cmp	r3, #5
 8004d48:	d10c      	bne.n	8004d64 <HAL_RCC_OscConfig+0x340>
 8004d4a:	4b61      	ldr	r3, [pc, #388]	@ (8004ed0 <HAL_RCC_OscConfig+0x4ac>)
 8004d4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d4e:	4a60      	ldr	r2, [pc, #384]	@ (8004ed0 <HAL_RCC_OscConfig+0x4ac>)
 8004d50:	f043 0304 	orr.w	r3, r3, #4
 8004d54:	6713      	str	r3, [r2, #112]	@ 0x70
 8004d56:	4b5e      	ldr	r3, [pc, #376]	@ (8004ed0 <HAL_RCC_OscConfig+0x4ac>)
 8004d58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d5a:	4a5d      	ldr	r2, [pc, #372]	@ (8004ed0 <HAL_RCC_OscConfig+0x4ac>)
 8004d5c:	f043 0301 	orr.w	r3, r3, #1
 8004d60:	6713      	str	r3, [r2, #112]	@ 0x70
 8004d62:	e00b      	b.n	8004d7c <HAL_RCC_OscConfig+0x358>
 8004d64:	4b5a      	ldr	r3, [pc, #360]	@ (8004ed0 <HAL_RCC_OscConfig+0x4ac>)
 8004d66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d68:	4a59      	ldr	r2, [pc, #356]	@ (8004ed0 <HAL_RCC_OscConfig+0x4ac>)
 8004d6a:	f023 0301 	bic.w	r3, r3, #1
 8004d6e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004d70:	4b57      	ldr	r3, [pc, #348]	@ (8004ed0 <HAL_RCC_OscConfig+0x4ac>)
 8004d72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d74:	4a56      	ldr	r2, [pc, #344]	@ (8004ed0 <HAL_RCC_OscConfig+0x4ac>)
 8004d76:	f023 0304 	bic.w	r3, r3, #4
 8004d7a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	689b      	ldr	r3, [r3, #8]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d015      	beq.n	8004db0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d84:	f7fd ffea 	bl	8002d5c <HAL_GetTick>
 8004d88:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d8a:	e00a      	b.n	8004da2 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d8c:	f7fd ffe6 	bl	8002d5c <HAL_GetTick>
 8004d90:	4602      	mov	r2, r0
 8004d92:	693b      	ldr	r3, [r7, #16]
 8004d94:	1ad3      	subs	r3, r2, r3
 8004d96:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d901      	bls.n	8004da2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004d9e:	2303      	movs	r3, #3
 8004da0:	e0d7      	b.n	8004f52 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004da2:	4b4b      	ldr	r3, [pc, #300]	@ (8004ed0 <HAL_RCC_OscConfig+0x4ac>)
 8004da4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004da6:	f003 0302 	and.w	r3, r3, #2
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d0ee      	beq.n	8004d8c <HAL_RCC_OscConfig+0x368>
 8004dae:	e014      	b.n	8004dda <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004db0:	f7fd ffd4 	bl	8002d5c <HAL_GetTick>
 8004db4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004db6:	e00a      	b.n	8004dce <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004db8:	f7fd ffd0 	bl	8002d5c <HAL_GetTick>
 8004dbc:	4602      	mov	r2, r0
 8004dbe:	693b      	ldr	r3, [r7, #16]
 8004dc0:	1ad3      	subs	r3, r2, r3
 8004dc2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d901      	bls.n	8004dce <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004dca:	2303      	movs	r3, #3
 8004dcc:	e0c1      	b.n	8004f52 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004dce:	4b40      	ldr	r3, [pc, #256]	@ (8004ed0 <HAL_RCC_OscConfig+0x4ac>)
 8004dd0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004dd2:	f003 0302 	and.w	r3, r3, #2
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d1ee      	bne.n	8004db8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004dda:	7dfb      	ldrb	r3, [r7, #23]
 8004ddc:	2b01      	cmp	r3, #1
 8004dde:	d105      	bne.n	8004dec <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004de0:	4b3b      	ldr	r3, [pc, #236]	@ (8004ed0 <HAL_RCC_OscConfig+0x4ac>)
 8004de2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004de4:	4a3a      	ldr	r2, [pc, #232]	@ (8004ed0 <HAL_RCC_OscConfig+0x4ac>)
 8004de6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004dea:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	699b      	ldr	r3, [r3, #24]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	f000 80ad 	beq.w	8004f50 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004df6:	4b36      	ldr	r3, [pc, #216]	@ (8004ed0 <HAL_RCC_OscConfig+0x4ac>)
 8004df8:	689b      	ldr	r3, [r3, #8]
 8004dfa:	f003 030c 	and.w	r3, r3, #12
 8004dfe:	2b08      	cmp	r3, #8
 8004e00:	d060      	beq.n	8004ec4 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	699b      	ldr	r3, [r3, #24]
 8004e06:	2b02      	cmp	r3, #2
 8004e08:	d145      	bne.n	8004e96 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e0a:	4b33      	ldr	r3, [pc, #204]	@ (8004ed8 <HAL_RCC_OscConfig+0x4b4>)
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e10:	f7fd ffa4 	bl	8002d5c <HAL_GetTick>
 8004e14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e16:	e008      	b.n	8004e2a <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e18:	f7fd ffa0 	bl	8002d5c <HAL_GetTick>
 8004e1c:	4602      	mov	r2, r0
 8004e1e:	693b      	ldr	r3, [r7, #16]
 8004e20:	1ad3      	subs	r3, r2, r3
 8004e22:	2b02      	cmp	r3, #2
 8004e24:	d901      	bls.n	8004e2a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004e26:	2303      	movs	r3, #3
 8004e28:	e093      	b.n	8004f52 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e2a:	4b29      	ldr	r3, [pc, #164]	@ (8004ed0 <HAL_RCC_OscConfig+0x4ac>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d1f0      	bne.n	8004e18 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	69da      	ldr	r2, [r3, #28]
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6a1b      	ldr	r3, [r3, #32]
 8004e3e:	431a      	orrs	r2, r3
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e44:	019b      	lsls	r3, r3, #6
 8004e46:	431a      	orrs	r2, r3
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e4c:	085b      	lsrs	r3, r3, #1
 8004e4e:	3b01      	subs	r3, #1
 8004e50:	041b      	lsls	r3, r3, #16
 8004e52:	431a      	orrs	r2, r3
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e58:	061b      	lsls	r3, r3, #24
 8004e5a:	431a      	orrs	r2, r3
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e60:	071b      	lsls	r3, r3, #28
 8004e62:	491b      	ldr	r1, [pc, #108]	@ (8004ed0 <HAL_RCC_OscConfig+0x4ac>)
 8004e64:	4313      	orrs	r3, r2
 8004e66:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004e68:	4b1b      	ldr	r3, [pc, #108]	@ (8004ed8 <HAL_RCC_OscConfig+0x4b4>)
 8004e6a:	2201      	movs	r2, #1
 8004e6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e6e:	f7fd ff75 	bl	8002d5c <HAL_GetTick>
 8004e72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e74:	e008      	b.n	8004e88 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e76:	f7fd ff71 	bl	8002d5c <HAL_GetTick>
 8004e7a:	4602      	mov	r2, r0
 8004e7c:	693b      	ldr	r3, [r7, #16]
 8004e7e:	1ad3      	subs	r3, r2, r3
 8004e80:	2b02      	cmp	r3, #2
 8004e82:	d901      	bls.n	8004e88 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004e84:	2303      	movs	r3, #3
 8004e86:	e064      	b.n	8004f52 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e88:	4b11      	ldr	r3, [pc, #68]	@ (8004ed0 <HAL_RCC_OscConfig+0x4ac>)
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d0f0      	beq.n	8004e76 <HAL_RCC_OscConfig+0x452>
 8004e94:	e05c      	b.n	8004f50 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e96:	4b10      	ldr	r3, [pc, #64]	@ (8004ed8 <HAL_RCC_OscConfig+0x4b4>)
 8004e98:	2200      	movs	r2, #0
 8004e9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e9c:	f7fd ff5e 	bl	8002d5c <HAL_GetTick>
 8004ea0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ea2:	e008      	b.n	8004eb6 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ea4:	f7fd ff5a 	bl	8002d5c <HAL_GetTick>
 8004ea8:	4602      	mov	r2, r0
 8004eaa:	693b      	ldr	r3, [r7, #16]
 8004eac:	1ad3      	subs	r3, r2, r3
 8004eae:	2b02      	cmp	r3, #2
 8004eb0:	d901      	bls.n	8004eb6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004eb2:	2303      	movs	r3, #3
 8004eb4:	e04d      	b.n	8004f52 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004eb6:	4b06      	ldr	r3, [pc, #24]	@ (8004ed0 <HAL_RCC_OscConfig+0x4ac>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d1f0      	bne.n	8004ea4 <HAL_RCC_OscConfig+0x480>
 8004ec2:	e045      	b.n	8004f50 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	699b      	ldr	r3, [r3, #24]
 8004ec8:	2b01      	cmp	r3, #1
 8004eca:	d107      	bne.n	8004edc <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004ecc:	2301      	movs	r3, #1
 8004ece:	e040      	b.n	8004f52 <HAL_RCC_OscConfig+0x52e>
 8004ed0:	40023800 	.word	0x40023800
 8004ed4:	40007000 	.word	0x40007000
 8004ed8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004edc:	4b1f      	ldr	r3, [pc, #124]	@ (8004f5c <HAL_RCC_OscConfig+0x538>)
 8004ede:	685b      	ldr	r3, [r3, #4]
 8004ee0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	699b      	ldr	r3, [r3, #24]
 8004ee6:	2b01      	cmp	r3, #1
 8004ee8:	d030      	beq.n	8004f4c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ef4:	429a      	cmp	r2, r3
 8004ef6:	d129      	bne.n	8004f4c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f02:	429a      	cmp	r2, r3
 8004f04:	d122      	bne.n	8004f4c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004f06:	68fa      	ldr	r2, [r7, #12]
 8004f08:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004f0c:	4013      	ands	r3, r2
 8004f0e:	687a      	ldr	r2, [r7, #4]
 8004f10:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004f12:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d119      	bne.n	8004f4c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f22:	085b      	lsrs	r3, r3, #1
 8004f24:	3b01      	subs	r3, #1
 8004f26:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004f28:	429a      	cmp	r2, r3
 8004f2a:	d10f      	bne.n	8004f4c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f36:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004f38:	429a      	cmp	r2, r3
 8004f3a:	d107      	bne.n	8004f4c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f46:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004f48:	429a      	cmp	r2, r3
 8004f4a:	d001      	beq.n	8004f50 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004f4c:	2301      	movs	r3, #1
 8004f4e:	e000      	b.n	8004f52 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004f50:	2300      	movs	r3, #0
}
 8004f52:	4618      	mov	r0, r3
 8004f54:	3718      	adds	r7, #24
 8004f56:	46bd      	mov	sp, r7
 8004f58:	bd80      	pop	{r7, pc}
 8004f5a:	bf00      	nop
 8004f5c:	40023800 	.word	0x40023800

08004f60 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b082      	sub	sp, #8
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d101      	bne.n	8004f72 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004f6e:	2301      	movs	r3, #1
 8004f70:	e07b      	b.n	800506a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d108      	bne.n	8004f8c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	685b      	ldr	r3, [r3, #4]
 8004f7e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004f82:	d009      	beq.n	8004f98 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2200      	movs	r2, #0
 8004f88:	61da      	str	r2, [r3, #28]
 8004f8a:	e005      	b.n	8004f98 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2200      	movs	r2, #0
 8004f90:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	2200      	movs	r2, #0
 8004f96:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004fa4:	b2db      	uxtb	r3, r3
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d106      	bne.n	8004fb8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2200      	movs	r2, #0
 8004fae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004fb2:	6878      	ldr	r0, [r7, #4]
 8004fb4:	f7fd f8b8 	bl	8002128 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2202      	movs	r2, #2
 8004fbc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	681a      	ldr	r2, [r3, #0]
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004fce:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	685b      	ldr	r3, [r3, #4]
 8004fd4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	689b      	ldr	r3, [r3, #8]
 8004fdc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004fe0:	431a      	orrs	r2, r3
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	68db      	ldr	r3, [r3, #12]
 8004fe6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004fea:	431a      	orrs	r2, r3
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	691b      	ldr	r3, [r3, #16]
 8004ff0:	f003 0302 	and.w	r3, r3, #2
 8004ff4:	431a      	orrs	r2, r3
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	695b      	ldr	r3, [r3, #20]
 8004ffa:	f003 0301 	and.w	r3, r3, #1
 8004ffe:	431a      	orrs	r2, r3
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	699b      	ldr	r3, [r3, #24]
 8005004:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005008:	431a      	orrs	r2, r3
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	69db      	ldr	r3, [r3, #28]
 800500e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005012:	431a      	orrs	r2, r3
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6a1b      	ldr	r3, [r3, #32]
 8005018:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800501c:	ea42 0103 	orr.w	r1, r2, r3
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005024:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	430a      	orrs	r2, r1
 800502e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	699b      	ldr	r3, [r3, #24]
 8005034:	0c1b      	lsrs	r3, r3, #16
 8005036:	f003 0104 	and.w	r1, r3, #4
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800503e:	f003 0210 	and.w	r2, r3, #16
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	430a      	orrs	r2, r1
 8005048:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	69da      	ldr	r2, [r3, #28]
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005058:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2200      	movs	r2, #0
 800505e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2201      	movs	r2, #1
 8005064:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005068:	2300      	movs	r3, #0
}
 800506a:	4618      	mov	r0, r3
 800506c:	3708      	adds	r7, #8
 800506e:	46bd      	mov	sp, r7
 8005070:	bd80      	pop	{r7, pc}

08005072 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005072:	b580      	push	{r7, lr}
 8005074:	b088      	sub	sp, #32
 8005076:	af00      	add	r7, sp, #0
 8005078:	60f8      	str	r0, [r7, #12]
 800507a:	60b9      	str	r1, [r7, #8]
 800507c:	603b      	str	r3, [r7, #0]
 800507e:	4613      	mov	r3, r2
 8005080:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005082:	f7fd fe6b 	bl	8002d5c <HAL_GetTick>
 8005086:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8005088:	88fb      	ldrh	r3, [r7, #6]
 800508a:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005092:	b2db      	uxtb	r3, r3
 8005094:	2b01      	cmp	r3, #1
 8005096:	d001      	beq.n	800509c <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8005098:	2302      	movs	r3, #2
 800509a:	e12a      	b.n	80052f2 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 800509c:	68bb      	ldr	r3, [r7, #8]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d002      	beq.n	80050a8 <HAL_SPI_Transmit+0x36>
 80050a2:	88fb      	ldrh	r3, [r7, #6]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d101      	bne.n	80050ac <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80050a8:	2301      	movs	r3, #1
 80050aa:	e122      	b.n	80052f2 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80050b2:	2b01      	cmp	r3, #1
 80050b4:	d101      	bne.n	80050ba <HAL_SPI_Transmit+0x48>
 80050b6:	2302      	movs	r3, #2
 80050b8:	e11b      	b.n	80052f2 <HAL_SPI_Transmit+0x280>
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	2201      	movs	r2, #1
 80050be:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	2203      	movs	r2, #3
 80050c6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	2200      	movs	r2, #0
 80050ce:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	68ba      	ldr	r2, [r7, #8]
 80050d4:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	88fa      	ldrh	r2, [r7, #6]
 80050da:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	88fa      	ldrh	r2, [r7, #6]
 80050e0:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	2200      	movs	r2, #0
 80050e6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	2200      	movs	r2, #0
 80050ec:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	2200      	movs	r2, #0
 80050f2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	2200      	movs	r2, #0
 80050f8:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	2200      	movs	r2, #0
 80050fe:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	689b      	ldr	r3, [r3, #8]
 8005104:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005108:	d10f      	bne.n	800512a <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	681a      	ldr	r2, [r3, #0]
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005118:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	681a      	ldr	r2, [r3, #0]
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005128:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005134:	2b40      	cmp	r3, #64	@ 0x40
 8005136:	d007      	beq.n	8005148 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	681a      	ldr	r2, [r3, #0]
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005146:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	68db      	ldr	r3, [r3, #12]
 800514c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005150:	d152      	bne.n	80051f8 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	685b      	ldr	r3, [r3, #4]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d002      	beq.n	8005160 <HAL_SPI_Transmit+0xee>
 800515a:	8b7b      	ldrh	r3, [r7, #26]
 800515c:	2b01      	cmp	r3, #1
 800515e:	d145      	bne.n	80051ec <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005164:	881a      	ldrh	r2, [r3, #0]
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005170:	1c9a      	adds	r2, r3, #2
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800517a:	b29b      	uxth	r3, r3
 800517c:	3b01      	subs	r3, #1
 800517e:	b29a      	uxth	r2, r3
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005184:	e032      	b.n	80051ec <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	689b      	ldr	r3, [r3, #8]
 800518c:	f003 0302 	and.w	r3, r3, #2
 8005190:	2b02      	cmp	r3, #2
 8005192:	d112      	bne.n	80051ba <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005198:	881a      	ldrh	r2, [r3, #0]
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051a4:	1c9a      	adds	r2, r3, #2
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80051ae:	b29b      	uxth	r3, r3
 80051b0:	3b01      	subs	r3, #1
 80051b2:	b29a      	uxth	r2, r3
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	86da      	strh	r2, [r3, #54]	@ 0x36
 80051b8:	e018      	b.n	80051ec <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80051ba:	f7fd fdcf 	bl	8002d5c <HAL_GetTick>
 80051be:	4602      	mov	r2, r0
 80051c0:	69fb      	ldr	r3, [r7, #28]
 80051c2:	1ad3      	subs	r3, r2, r3
 80051c4:	683a      	ldr	r2, [r7, #0]
 80051c6:	429a      	cmp	r2, r3
 80051c8:	d803      	bhi.n	80051d2 <HAL_SPI_Transmit+0x160>
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051d0:	d102      	bne.n	80051d8 <HAL_SPI_Transmit+0x166>
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d109      	bne.n	80051ec <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	2201      	movs	r2, #1
 80051dc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	2200      	movs	r2, #0
 80051e4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80051e8:	2303      	movs	r3, #3
 80051ea:	e082      	b.n	80052f2 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80051f0:	b29b      	uxth	r3, r3
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d1c7      	bne.n	8005186 <HAL_SPI_Transmit+0x114>
 80051f6:	e053      	b.n	80052a0 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	685b      	ldr	r3, [r3, #4]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d002      	beq.n	8005206 <HAL_SPI_Transmit+0x194>
 8005200:	8b7b      	ldrh	r3, [r7, #26]
 8005202:	2b01      	cmp	r3, #1
 8005204:	d147      	bne.n	8005296 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	330c      	adds	r3, #12
 8005210:	7812      	ldrb	r2, [r2, #0]
 8005212:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005218:	1c5a      	adds	r2, r3, #1
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005222:	b29b      	uxth	r3, r3
 8005224:	3b01      	subs	r3, #1
 8005226:	b29a      	uxth	r2, r3
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800522c:	e033      	b.n	8005296 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	689b      	ldr	r3, [r3, #8]
 8005234:	f003 0302 	and.w	r3, r3, #2
 8005238:	2b02      	cmp	r3, #2
 800523a:	d113      	bne.n	8005264 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	330c      	adds	r3, #12
 8005246:	7812      	ldrb	r2, [r2, #0]
 8005248:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800524e:	1c5a      	adds	r2, r3, #1
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005258:	b29b      	uxth	r3, r3
 800525a:	3b01      	subs	r3, #1
 800525c:	b29a      	uxth	r2, r3
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005262:	e018      	b.n	8005296 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005264:	f7fd fd7a 	bl	8002d5c <HAL_GetTick>
 8005268:	4602      	mov	r2, r0
 800526a:	69fb      	ldr	r3, [r7, #28]
 800526c:	1ad3      	subs	r3, r2, r3
 800526e:	683a      	ldr	r2, [r7, #0]
 8005270:	429a      	cmp	r2, r3
 8005272:	d803      	bhi.n	800527c <HAL_SPI_Transmit+0x20a>
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	f1b3 3fff 	cmp.w	r3, #4294967295
 800527a:	d102      	bne.n	8005282 <HAL_SPI_Transmit+0x210>
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	2b00      	cmp	r3, #0
 8005280:	d109      	bne.n	8005296 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	2201      	movs	r2, #1
 8005286:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	2200      	movs	r2, #0
 800528e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005292:	2303      	movs	r3, #3
 8005294:	e02d      	b.n	80052f2 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800529a:	b29b      	uxth	r3, r3
 800529c:	2b00      	cmp	r3, #0
 800529e:	d1c6      	bne.n	800522e <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80052a0:	69fa      	ldr	r2, [r7, #28]
 80052a2:	6839      	ldr	r1, [r7, #0]
 80052a4:	68f8      	ldr	r0, [r7, #12]
 80052a6:	f000 f8b1 	bl	800540c <SPI_EndRxTxTransaction>
 80052aa:	4603      	mov	r3, r0
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d002      	beq.n	80052b6 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	2220      	movs	r2, #32
 80052b4:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	689b      	ldr	r3, [r3, #8]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d10a      	bne.n	80052d4 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80052be:	2300      	movs	r3, #0
 80052c0:	617b      	str	r3, [r7, #20]
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	68db      	ldr	r3, [r3, #12]
 80052c8:	617b      	str	r3, [r7, #20]
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	689b      	ldr	r3, [r3, #8]
 80052d0:	617b      	str	r3, [r7, #20]
 80052d2:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	2201      	movs	r2, #1
 80052d8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	2200      	movs	r2, #0
 80052e0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d001      	beq.n	80052f0 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80052ec:	2301      	movs	r3, #1
 80052ee:	e000      	b.n	80052f2 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80052f0:	2300      	movs	r3, #0
  }
}
 80052f2:	4618      	mov	r0, r3
 80052f4:	3720      	adds	r7, #32
 80052f6:	46bd      	mov	sp, r7
 80052f8:	bd80      	pop	{r7, pc}
	...

080052fc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b088      	sub	sp, #32
 8005300:	af00      	add	r7, sp, #0
 8005302:	60f8      	str	r0, [r7, #12]
 8005304:	60b9      	str	r1, [r7, #8]
 8005306:	603b      	str	r3, [r7, #0]
 8005308:	4613      	mov	r3, r2
 800530a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800530c:	f7fd fd26 	bl	8002d5c <HAL_GetTick>
 8005310:	4602      	mov	r2, r0
 8005312:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005314:	1a9b      	subs	r3, r3, r2
 8005316:	683a      	ldr	r2, [r7, #0]
 8005318:	4413      	add	r3, r2
 800531a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800531c:	f7fd fd1e 	bl	8002d5c <HAL_GetTick>
 8005320:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005322:	4b39      	ldr	r3, [pc, #228]	@ (8005408 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	015b      	lsls	r3, r3, #5
 8005328:	0d1b      	lsrs	r3, r3, #20
 800532a:	69fa      	ldr	r2, [r7, #28]
 800532c:	fb02 f303 	mul.w	r3, r2, r3
 8005330:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005332:	e054      	b.n	80053de <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	f1b3 3fff 	cmp.w	r3, #4294967295
 800533a:	d050      	beq.n	80053de <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800533c:	f7fd fd0e 	bl	8002d5c <HAL_GetTick>
 8005340:	4602      	mov	r2, r0
 8005342:	69bb      	ldr	r3, [r7, #24]
 8005344:	1ad3      	subs	r3, r2, r3
 8005346:	69fa      	ldr	r2, [r7, #28]
 8005348:	429a      	cmp	r2, r3
 800534a:	d902      	bls.n	8005352 <SPI_WaitFlagStateUntilTimeout+0x56>
 800534c:	69fb      	ldr	r3, [r7, #28]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d13d      	bne.n	80053ce <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	685a      	ldr	r2, [r3, #4]
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005360:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	685b      	ldr	r3, [r3, #4]
 8005366:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800536a:	d111      	bne.n	8005390 <SPI_WaitFlagStateUntilTimeout+0x94>
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	689b      	ldr	r3, [r3, #8]
 8005370:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005374:	d004      	beq.n	8005380 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	689b      	ldr	r3, [r3, #8]
 800537a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800537e:	d107      	bne.n	8005390 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	681a      	ldr	r2, [r3, #0]
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800538e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005394:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005398:	d10f      	bne.n	80053ba <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	681a      	ldr	r2, [r3, #0]
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80053a8:	601a      	str	r2, [r3, #0]
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	681a      	ldr	r2, [r3, #0]
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80053b8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	2201      	movs	r2, #1
 80053be:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	2200      	movs	r2, #0
 80053c6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80053ca:	2303      	movs	r3, #3
 80053cc:	e017      	b.n	80053fe <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80053ce:	697b      	ldr	r3, [r7, #20]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d101      	bne.n	80053d8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80053d4:	2300      	movs	r3, #0
 80053d6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80053d8:	697b      	ldr	r3, [r7, #20]
 80053da:	3b01      	subs	r3, #1
 80053dc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	689a      	ldr	r2, [r3, #8]
 80053e4:	68bb      	ldr	r3, [r7, #8]
 80053e6:	4013      	ands	r3, r2
 80053e8:	68ba      	ldr	r2, [r7, #8]
 80053ea:	429a      	cmp	r2, r3
 80053ec:	bf0c      	ite	eq
 80053ee:	2301      	moveq	r3, #1
 80053f0:	2300      	movne	r3, #0
 80053f2:	b2db      	uxtb	r3, r3
 80053f4:	461a      	mov	r2, r3
 80053f6:	79fb      	ldrb	r3, [r7, #7]
 80053f8:	429a      	cmp	r2, r3
 80053fa:	d19b      	bne.n	8005334 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80053fc:	2300      	movs	r3, #0
}
 80053fe:	4618      	mov	r0, r3
 8005400:	3720      	adds	r7, #32
 8005402:	46bd      	mov	sp, r7
 8005404:	bd80      	pop	{r7, pc}
 8005406:	bf00      	nop
 8005408:	20000018 	.word	0x20000018

0800540c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800540c:	b580      	push	{r7, lr}
 800540e:	b088      	sub	sp, #32
 8005410:	af02      	add	r7, sp, #8
 8005412:	60f8      	str	r0, [r7, #12]
 8005414:	60b9      	str	r1, [r7, #8]
 8005416:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	9300      	str	r3, [sp, #0]
 800541c:	68bb      	ldr	r3, [r7, #8]
 800541e:	2201      	movs	r2, #1
 8005420:	2102      	movs	r1, #2
 8005422:	68f8      	ldr	r0, [r7, #12]
 8005424:	f7ff ff6a 	bl	80052fc <SPI_WaitFlagStateUntilTimeout>
 8005428:	4603      	mov	r3, r0
 800542a:	2b00      	cmp	r3, #0
 800542c:	d007      	beq.n	800543e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005432:	f043 0220 	orr.w	r2, r3, #32
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800543a:	2303      	movs	r3, #3
 800543c:	e032      	b.n	80054a4 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800543e:	4b1b      	ldr	r3, [pc, #108]	@ (80054ac <SPI_EndRxTxTransaction+0xa0>)
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	4a1b      	ldr	r2, [pc, #108]	@ (80054b0 <SPI_EndRxTxTransaction+0xa4>)
 8005444:	fba2 2303 	umull	r2, r3, r2, r3
 8005448:	0d5b      	lsrs	r3, r3, #21
 800544a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800544e:	fb02 f303 	mul.w	r3, r2, r3
 8005452:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	685b      	ldr	r3, [r3, #4]
 8005458:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800545c:	d112      	bne.n	8005484 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	9300      	str	r3, [sp, #0]
 8005462:	68bb      	ldr	r3, [r7, #8]
 8005464:	2200      	movs	r2, #0
 8005466:	2180      	movs	r1, #128	@ 0x80
 8005468:	68f8      	ldr	r0, [r7, #12]
 800546a:	f7ff ff47 	bl	80052fc <SPI_WaitFlagStateUntilTimeout>
 800546e:	4603      	mov	r3, r0
 8005470:	2b00      	cmp	r3, #0
 8005472:	d016      	beq.n	80054a2 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005478:	f043 0220 	orr.w	r2, r3, #32
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005480:	2303      	movs	r3, #3
 8005482:	e00f      	b.n	80054a4 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005484:	697b      	ldr	r3, [r7, #20]
 8005486:	2b00      	cmp	r3, #0
 8005488:	d00a      	beq.n	80054a0 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800548a:	697b      	ldr	r3, [r7, #20]
 800548c:	3b01      	subs	r3, #1
 800548e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	689b      	ldr	r3, [r3, #8]
 8005496:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800549a:	2b80      	cmp	r3, #128	@ 0x80
 800549c:	d0f2      	beq.n	8005484 <SPI_EndRxTxTransaction+0x78>
 800549e:	e000      	b.n	80054a2 <SPI_EndRxTxTransaction+0x96>
        break;
 80054a0:	bf00      	nop
  }

  return HAL_OK;
 80054a2:	2300      	movs	r3, #0
}
 80054a4:	4618      	mov	r0, r3
 80054a6:	3718      	adds	r7, #24
 80054a8:	46bd      	mov	sp, r7
 80054aa:	bd80      	pop	{r7, pc}
 80054ac:	20000018 	.word	0x20000018
 80054b0:	165e9f81 	.word	0x165e9f81

080054b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b082      	sub	sp, #8
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d101      	bne.n	80054c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80054c2:	2301      	movs	r3, #1
 80054c4:	e041      	b.n	800554a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80054cc:	b2db      	uxtb	r3, r3
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d106      	bne.n	80054e0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	2200      	movs	r2, #0
 80054d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80054da:	6878      	ldr	r0, [r7, #4]
 80054dc:	f7fd f93c 	bl	8002758 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2202      	movs	r2, #2
 80054e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681a      	ldr	r2, [r3, #0]
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	3304      	adds	r3, #4
 80054f0:	4619      	mov	r1, r3
 80054f2:	4610      	mov	r0, r2
 80054f4:	f000 fd00 	bl	8005ef8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2201      	movs	r2, #1
 80054fc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2201      	movs	r2, #1
 8005504:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2201      	movs	r2, #1
 800550c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2201      	movs	r2, #1
 8005514:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2201      	movs	r2, #1
 800551c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2201      	movs	r2, #1
 8005524:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2201      	movs	r2, #1
 800552c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2201      	movs	r2, #1
 8005534:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2201      	movs	r2, #1
 800553c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2201      	movs	r2, #1
 8005544:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005548:	2300      	movs	r3, #0
}
 800554a:	4618      	mov	r0, r3
 800554c:	3708      	adds	r7, #8
 800554e:	46bd      	mov	sp, r7
 8005550:	bd80      	pop	{r7, pc}
	...

08005554 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005554:	b480      	push	{r7}
 8005556:	b085      	sub	sp, #20
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005562:	b2db      	uxtb	r3, r3
 8005564:	2b01      	cmp	r3, #1
 8005566:	d001      	beq.n	800556c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005568:	2301      	movs	r3, #1
 800556a:	e04e      	b.n	800560a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2202      	movs	r2, #2
 8005570:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	68da      	ldr	r2, [r3, #12]
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f042 0201 	orr.w	r2, r2, #1
 8005582:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	4a23      	ldr	r2, [pc, #140]	@ (8005618 <HAL_TIM_Base_Start_IT+0xc4>)
 800558a:	4293      	cmp	r3, r2
 800558c:	d022      	beq.n	80055d4 <HAL_TIM_Base_Start_IT+0x80>
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005596:	d01d      	beq.n	80055d4 <HAL_TIM_Base_Start_IT+0x80>
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	4a1f      	ldr	r2, [pc, #124]	@ (800561c <HAL_TIM_Base_Start_IT+0xc8>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	d018      	beq.n	80055d4 <HAL_TIM_Base_Start_IT+0x80>
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	4a1e      	ldr	r2, [pc, #120]	@ (8005620 <HAL_TIM_Base_Start_IT+0xcc>)
 80055a8:	4293      	cmp	r3, r2
 80055aa:	d013      	beq.n	80055d4 <HAL_TIM_Base_Start_IT+0x80>
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	4a1c      	ldr	r2, [pc, #112]	@ (8005624 <HAL_TIM_Base_Start_IT+0xd0>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d00e      	beq.n	80055d4 <HAL_TIM_Base_Start_IT+0x80>
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	4a1b      	ldr	r2, [pc, #108]	@ (8005628 <HAL_TIM_Base_Start_IT+0xd4>)
 80055bc:	4293      	cmp	r3, r2
 80055be:	d009      	beq.n	80055d4 <HAL_TIM_Base_Start_IT+0x80>
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	4a19      	ldr	r2, [pc, #100]	@ (800562c <HAL_TIM_Base_Start_IT+0xd8>)
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d004      	beq.n	80055d4 <HAL_TIM_Base_Start_IT+0x80>
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	4a18      	ldr	r2, [pc, #96]	@ (8005630 <HAL_TIM_Base_Start_IT+0xdc>)
 80055d0:	4293      	cmp	r3, r2
 80055d2:	d111      	bne.n	80055f8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	689b      	ldr	r3, [r3, #8]
 80055da:	f003 0307 	and.w	r3, r3, #7
 80055de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	2b06      	cmp	r3, #6
 80055e4:	d010      	beq.n	8005608 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	681a      	ldr	r2, [r3, #0]
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f042 0201 	orr.w	r2, r2, #1
 80055f4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055f6:	e007      	b.n	8005608 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	681a      	ldr	r2, [r3, #0]
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f042 0201 	orr.w	r2, r2, #1
 8005606:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005608:	2300      	movs	r3, #0
}
 800560a:	4618      	mov	r0, r3
 800560c:	3714      	adds	r7, #20
 800560e:	46bd      	mov	sp, r7
 8005610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005614:	4770      	bx	lr
 8005616:	bf00      	nop
 8005618:	40010000 	.word	0x40010000
 800561c:	40000400 	.word	0x40000400
 8005620:	40000800 	.word	0x40000800
 8005624:	40000c00 	.word	0x40000c00
 8005628:	40010400 	.word	0x40010400
 800562c:	40014000 	.word	0x40014000
 8005630:	40001800 	.word	0x40001800

08005634 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8005634:	b480      	push	{r7}
 8005636:	b083      	sub	sp, #12
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	68da      	ldr	r2, [r3, #12]
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f022 0201 	bic.w	r2, r2, #1
 800564a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	6a1a      	ldr	r2, [r3, #32]
 8005652:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005656:	4013      	ands	r3, r2
 8005658:	2b00      	cmp	r3, #0
 800565a:	d10f      	bne.n	800567c <HAL_TIM_Base_Stop_IT+0x48>
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	6a1a      	ldr	r2, [r3, #32]
 8005662:	f240 4344 	movw	r3, #1092	@ 0x444
 8005666:	4013      	ands	r3, r2
 8005668:	2b00      	cmp	r3, #0
 800566a:	d107      	bne.n	800567c <HAL_TIM_Base_Stop_IT+0x48>
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	681a      	ldr	r2, [r3, #0]
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f022 0201 	bic.w	r2, r2, #1
 800567a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2201      	movs	r2, #1
 8005680:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8005684:	2300      	movs	r3, #0
}
 8005686:	4618      	mov	r0, r3
 8005688:	370c      	adds	r7, #12
 800568a:	46bd      	mov	sp, r7
 800568c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005690:	4770      	bx	lr

08005692 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005692:	b580      	push	{r7, lr}
 8005694:	b082      	sub	sp, #8
 8005696:	af00      	add	r7, sp, #0
 8005698:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d101      	bne.n	80056a4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80056a0:	2301      	movs	r3, #1
 80056a2:	e041      	b.n	8005728 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80056aa:	b2db      	uxtb	r3, r3
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d106      	bne.n	80056be <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2200      	movs	r2, #0
 80056b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80056b8:	6878      	ldr	r0, [r7, #4]
 80056ba:	f000 f839 	bl	8005730 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2202      	movs	r2, #2
 80056c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681a      	ldr	r2, [r3, #0]
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	3304      	adds	r3, #4
 80056ce:	4619      	mov	r1, r3
 80056d0:	4610      	mov	r0, r2
 80056d2:	f000 fc11 	bl	8005ef8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2201      	movs	r2, #1
 80056da:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	2201      	movs	r2, #1
 80056e2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2201      	movs	r2, #1
 80056ea:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2201      	movs	r2, #1
 80056f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2201      	movs	r2, #1
 80056fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2201      	movs	r2, #1
 8005702:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	2201      	movs	r2, #1
 800570a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	2201      	movs	r2, #1
 8005712:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2201      	movs	r2, #1
 800571a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	2201      	movs	r2, #1
 8005722:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005726:	2300      	movs	r3, #0
}
 8005728:	4618      	mov	r0, r3
 800572a:	3708      	adds	r7, #8
 800572c:	46bd      	mov	sp, r7
 800572e:	bd80      	pop	{r7, pc}

08005730 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005730:	b480      	push	{r7}
 8005732:	b083      	sub	sp, #12
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005738:	bf00      	nop
 800573a:	370c      	adds	r7, #12
 800573c:	46bd      	mov	sp, r7
 800573e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005742:	4770      	bx	lr

08005744 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005744:	b580      	push	{r7, lr}
 8005746:	b084      	sub	sp, #16
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
 800574c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800574e:	683b      	ldr	r3, [r7, #0]
 8005750:	2b00      	cmp	r3, #0
 8005752:	d109      	bne.n	8005768 <HAL_TIM_PWM_Start+0x24>
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800575a:	b2db      	uxtb	r3, r3
 800575c:	2b01      	cmp	r3, #1
 800575e:	bf14      	ite	ne
 8005760:	2301      	movne	r3, #1
 8005762:	2300      	moveq	r3, #0
 8005764:	b2db      	uxtb	r3, r3
 8005766:	e022      	b.n	80057ae <HAL_TIM_PWM_Start+0x6a>
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	2b04      	cmp	r3, #4
 800576c:	d109      	bne.n	8005782 <HAL_TIM_PWM_Start+0x3e>
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005774:	b2db      	uxtb	r3, r3
 8005776:	2b01      	cmp	r3, #1
 8005778:	bf14      	ite	ne
 800577a:	2301      	movne	r3, #1
 800577c:	2300      	moveq	r3, #0
 800577e:	b2db      	uxtb	r3, r3
 8005780:	e015      	b.n	80057ae <HAL_TIM_PWM_Start+0x6a>
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	2b08      	cmp	r3, #8
 8005786:	d109      	bne.n	800579c <HAL_TIM_PWM_Start+0x58>
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800578e:	b2db      	uxtb	r3, r3
 8005790:	2b01      	cmp	r3, #1
 8005792:	bf14      	ite	ne
 8005794:	2301      	movne	r3, #1
 8005796:	2300      	moveq	r3, #0
 8005798:	b2db      	uxtb	r3, r3
 800579a:	e008      	b.n	80057ae <HAL_TIM_PWM_Start+0x6a>
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80057a2:	b2db      	uxtb	r3, r3
 80057a4:	2b01      	cmp	r3, #1
 80057a6:	bf14      	ite	ne
 80057a8:	2301      	movne	r3, #1
 80057aa:	2300      	moveq	r3, #0
 80057ac:	b2db      	uxtb	r3, r3
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d001      	beq.n	80057b6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80057b2:	2301      	movs	r3, #1
 80057b4:	e07c      	b.n	80058b0 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d104      	bne.n	80057c6 <HAL_TIM_PWM_Start+0x82>
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2202      	movs	r2, #2
 80057c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80057c4:	e013      	b.n	80057ee <HAL_TIM_PWM_Start+0xaa>
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	2b04      	cmp	r3, #4
 80057ca:	d104      	bne.n	80057d6 <HAL_TIM_PWM_Start+0x92>
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2202      	movs	r2, #2
 80057d0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80057d4:	e00b      	b.n	80057ee <HAL_TIM_PWM_Start+0xaa>
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	2b08      	cmp	r3, #8
 80057da:	d104      	bne.n	80057e6 <HAL_TIM_PWM_Start+0xa2>
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2202      	movs	r2, #2
 80057e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80057e4:	e003      	b.n	80057ee <HAL_TIM_PWM_Start+0xaa>
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2202      	movs	r2, #2
 80057ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	2201      	movs	r2, #1
 80057f4:	6839      	ldr	r1, [r7, #0]
 80057f6:	4618      	mov	r0, r3
 80057f8:	f000 fe74 	bl	80064e4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	4a2d      	ldr	r2, [pc, #180]	@ (80058b8 <HAL_TIM_PWM_Start+0x174>)
 8005802:	4293      	cmp	r3, r2
 8005804:	d004      	beq.n	8005810 <HAL_TIM_PWM_Start+0xcc>
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	4a2c      	ldr	r2, [pc, #176]	@ (80058bc <HAL_TIM_PWM_Start+0x178>)
 800580c:	4293      	cmp	r3, r2
 800580e:	d101      	bne.n	8005814 <HAL_TIM_PWM_Start+0xd0>
 8005810:	2301      	movs	r3, #1
 8005812:	e000      	b.n	8005816 <HAL_TIM_PWM_Start+0xd2>
 8005814:	2300      	movs	r3, #0
 8005816:	2b00      	cmp	r3, #0
 8005818:	d007      	beq.n	800582a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005828:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	4a22      	ldr	r2, [pc, #136]	@ (80058b8 <HAL_TIM_PWM_Start+0x174>)
 8005830:	4293      	cmp	r3, r2
 8005832:	d022      	beq.n	800587a <HAL_TIM_PWM_Start+0x136>
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800583c:	d01d      	beq.n	800587a <HAL_TIM_PWM_Start+0x136>
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	4a1f      	ldr	r2, [pc, #124]	@ (80058c0 <HAL_TIM_PWM_Start+0x17c>)
 8005844:	4293      	cmp	r3, r2
 8005846:	d018      	beq.n	800587a <HAL_TIM_PWM_Start+0x136>
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	4a1d      	ldr	r2, [pc, #116]	@ (80058c4 <HAL_TIM_PWM_Start+0x180>)
 800584e:	4293      	cmp	r3, r2
 8005850:	d013      	beq.n	800587a <HAL_TIM_PWM_Start+0x136>
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	4a1c      	ldr	r2, [pc, #112]	@ (80058c8 <HAL_TIM_PWM_Start+0x184>)
 8005858:	4293      	cmp	r3, r2
 800585a:	d00e      	beq.n	800587a <HAL_TIM_PWM_Start+0x136>
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	4a16      	ldr	r2, [pc, #88]	@ (80058bc <HAL_TIM_PWM_Start+0x178>)
 8005862:	4293      	cmp	r3, r2
 8005864:	d009      	beq.n	800587a <HAL_TIM_PWM_Start+0x136>
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	4a18      	ldr	r2, [pc, #96]	@ (80058cc <HAL_TIM_PWM_Start+0x188>)
 800586c:	4293      	cmp	r3, r2
 800586e:	d004      	beq.n	800587a <HAL_TIM_PWM_Start+0x136>
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	4a16      	ldr	r2, [pc, #88]	@ (80058d0 <HAL_TIM_PWM_Start+0x18c>)
 8005876:	4293      	cmp	r3, r2
 8005878:	d111      	bne.n	800589e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	689b      	ldr	r3, [r3, #8]
 8005880:	f003 0307 	and.w	r3, r3, #7
 8005884:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	2b06      	cmp	r3, #6
 800588a:	d010      	beq.n	80058ae <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	681a      	ldr	r2, [r3, #0]
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f042 0201 	orr.w	r2, r2, #1
 800589a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800589c:	e007      	b.n	80058ae <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	681a      	ldr	r2, [r3, #0]
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f042 0201 	orr.w	r2, r2, #1
 80058ac:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80058ae:	2300      	movs	r3, #0
}
 80058b0:	4618      	mov	r0, r3
 80058b2:	3710      	adds	r7, #16
 80058b4:	46bd      	mov	sp, r7
 80058b6:	bd80      	pop	{r7, pc}
 80058b8:	40010000 	.word	0x40010000
 80058bc:	40010400 	.word	0x40010400
 80058c0:	40000400 	.word	0x40000400
 80058c4:	40000800 	.word	0x40000800
 80058c8:	40000c00 	.word	0x40000c00
 80058cc:	40014000 	.word	0x40014000
 80058d0:	40001800 	.word	0x40001800

080058d4 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80058d4:	b580      	push	{r7, lr}
 80058d6:	b082      	sub	sp, #8
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
 80058dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	2200      	movs	r2, #0
 80058e4:	6839      	ldr	r1, [r7, #0]
 80058e6:	4618      	mov	r0, r3
 80058e8:	f000 fdfc 	bl	80064e4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	4a2e      	ldr	r2, [pc, #184]	@ (80059ac <HAL_TIM_PWM_Stop+0xd8>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d004      	beq.n	8005900 <HAL_TIM_PWM_Stop+0x2c>
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	4a2d      	ldr	r2, [pc, #180]	@ (80059b0 <HAL_TIM_PWM_Stop+0xdc>)
 80058fc:	4293      	cmp	r3, r2
 80058fe:	d101      	bne.n	8005904 <HAL_TIM_PWM_Stop+0x30>
 8005900:	2301      	movs	r3, #1
 8005902:	e000      	b.n	8005906 <HAL_TIM_PWM_Stop+0x32>
 8005904:	2300      	movs	r3, #0
 8005906:	2b00      	cmp	r3, #0
 8005908:	d017      	beq.n	800593a <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	6a1a      	ldr	r2, [r3, #32]
 8005910:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005914:	4013      	ands	r3, r2
 8005916:	2b00      	cmp	r3, #0
 8005918:	d10f      	bne.n	800593a <HAL_TIM_PWM_Stop+0x66>
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	6a1a      	ldr	r2, [r3, #32]
 8005920:	f240 4344 	movw	r3, #1092	@ 0x444
 8005924:	4013      	ands	r3, r2
 8005926:	2b00      	cmp	r3, #0
 8005928:	d107      	bne.n	800593a <HAL_TIM_PWM_Stop+0x66>
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005938:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	6a1a      	ldr	r2, [r3, #32]
 8005940:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005944:	4013      	ands	r3, r2
 8005946:	2b00      	cmp	r3, #0
 8005948:	d10f      	bne.n	800596a <HAL_TIM_PWM_Stop+0x96>
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	6a1a      	ldr	r2, [r3, #32]
 8005950:	f240 4344 	movw	r3, #1092	@ 0x444
 8005954:	4013      	ands	r3, r2
 8005956:	2b00      	cmp	r3, #0
 8005958:	d107      	bne.n	800596a <HAL_TIM_PWM_Stop+0x96>
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	681a      	ldr	r2, [r3, #0]
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f022 0201 	bic.w	r2, r2, #1
 8005968:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800596a:	683b      	ldr	r3, [r7, #0]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d104      	bne.n	800597a <HAL_TIM_PWM_Stop+0xa6>
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2201      	movs	r2, #1
 8005974:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005978:	e013      	b.n	80059a2 <HAL_TIM_PWM_Stop+0xce>
 800597a:	683b      	ldr	r3, [r7, #0]
 800597c:	2b04      	cmp	r3, #4
 800597e:	d104      	bne.n	800598a <HAL_TIM_PWM_Stop+0xb6>
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2201      	movs	r2, #1
 8005984:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005988:	e00b      	b.n	80059a2 <HAL_TIM_PWM_Stop+0xce>
 800598a:	683b      	ldr	r3, [r7, #0]
 800598c:	2b08      	cmp	r3, #8
 800598e:	d104      	bne.n	800599a <HAL_TIM_PWM_Stop+0xc6>
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2201      	movs	r2, #1
 8005994:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005998:	e003      	b.n	80059a2 <HAL_TIM_PWM_Stop+0xce>
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	2201      	movs	r2, #1
 800599e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 80059a2:	2300      	movs	r3, #0
}
 80059a4:	4618      	mov	r0, r3
 80059a6:	3708      	adds	r7, #8
 80059a8:	46bd      	mov	sp, r7
 80059aa:	bd80      	pop	{r7, pc}
 80059ac:	40010000 	.word	0x40010000
 80059b0:	40010400 	.word	0x40010400

080059b4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b084      	sub	sp, #16
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	68db      	ldr	r3, [r3, #12]
 80059c2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	691b      	ldr	r3, [r3, #16]
 80059ca:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80059cc:	68bb      	ldr	r3, [r7, #8]
 80059ce:	f003 0302 	and.w	r3, r3, #2
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d020      	beq.n	8005a18 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	f003 0302 	and.w	r3, r3, #2
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d01b      	beq.n	8005a18 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f06f 0202 	mvn.w	r2, #2
 80059e8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	2201      	movs	r2, #1
 80059ee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	699b      	ldr	r3, [r3, #24]
 80059f6:	f003 0303 	and.w	r3, r3, #3
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d003      	beq.n	8005a06 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80059fe:	6878      	ldr	r0, [r7, #4]
 8005a00:	f000 fa5b 	bl	8005eba <HAL_TIM_IC_CaptureCallback>
 8005a04:	e005      	b.n	8005a12 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a06:	6878      	ldr	r0, [r7, #4]
 8005a08:	f000 fa4d 	bl	8005ea6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a0c:	6878      	ldr	r0, [r7, #4]
 8005a0e:	f000 fa5e 	bl	8005ece <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	2200      	movs	r2, #0
 8005a16:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005a18:	68bb      	ldr	r3, [r7, #8]
 8005a1a:	f003 0304 	and.w	r3, r3, #4
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d020      	beq.n	8005a64 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	f003 0304 	and.w	r3, r3, #4
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d01b      	beq.n	8005a64 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f06f 0204 	mvn.w	r2, #4
 8005a34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	2202      	movs	r2, #2
 8005a3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	699b      	ldr	r3, [r3, #24]
 8005a42:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d003      	beq.n	8005a52 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a4a:	6878      	ldr	r0, [r7, #4]
 8005a4c:	f000 fa35 	bl	8005eba <HAL_TIM_IC_CaptureCallback>
 8005a50:	e005      	b.n	8005a5e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a52:	6878      	ldr	r0, [r7, #4]
 8005a54:	f000 fa27 	bl	8005ea6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a58:	6878      	ldr	r0, [r7, #4]
 8005a5a:	f000 fa38 	bl	8005ece <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	2200      	movs	r2, #0
 8005a62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005a64:	68bb      	ldr	r3, [r7, #8]
 8005a66:	f003 0308 	and.w	r3, r3, #8
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d020      	beq.n	8005ab0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	f003 0308 	and.w	r3, r3, #8
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d01b      	beq.n	8005ab0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f06f 0208 	mvn.w	r2, #8
 8005a80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	2204      	movs	r2, #4
 8005a86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	69db      	ldr	r3, [r3, #28]
 8005a8e:	f003 0303 	and.w	r3, r3, #3
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d003      	beq.n	8005a9e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a96:	6878      	ldr	r0, [r7, #4]
 8005a98:	f000 fa0f 	bl	8005eba <HAL_TIM_IC_CaptureCallback>
 8005a9c:	e005      	b.n	8005aaa <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a9e:	6878      	ldr	r0, [r7, #4]
 8005aa0:	f000 fa01 	bl	8005ea6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005aa4:	6878      	ldr	r0, [r7, #4]
 8005aa6:	f000 fa12 	bl	8005ece <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	2200      	movs	r2, #0
 8005aae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005ab0:	68bb      	ldr	r3, [r7, #8]
 8005ab2:	f003 0310 	and.w	r3, r3, #16
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d020      	beq.n	8005afc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	f003 0310 	and.w	r3, r3, #16
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d01b      	beq.n	8005afc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f06f 0210 	mvn.w	r2, #16
 8005acc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2208      	movs	r2, #8
 8005ad2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	69db      	ldr	r3, [r3, #28]
 8005ada:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d003      	beq.n	8005aea <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ae2:	6878      	ldr	r0, [r7, #4]
 8005ae4:	f000 f9e9 	bl	8005eba <HAL_TIM_IC_CaptureCallback>
 8005ae8:	e005      	b.n	8005af6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005aea:	6878      	ldr	r0, [r7, #4]
 8005aec:	f000 f9db 	bl	8005ea6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005af0:	6878      	ldr	r0, [r7, #4]
 8005af2:	f000 f9ec 	bl	8005ece <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	2200      	movs	r2, #0
 8005afa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005afc:	68bb      	ldr	r3, [r7, #8]
 8005afe:	f003 0301 	and.w	r3, r3, #1
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d00c      	beq.n	8005b20 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	f003 0301 	and.w	r3, r3, #1
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d007      	beq.n	8005b20 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f06f 0201 	mvn.w	r2, #1
 8005b18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005b1a:	6878      	ldr	r0, [r7, #4]
 8005b1c:	f7fc f854 	bl	8001bc8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005b20:	68bb      	ldr	r3, [r7, #8]
 8005b22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d00c      	beq.n	8005b44 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d007      	beq.n	8005b44 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005b3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005b3e:	6878      	ldr	r0, [r7, #4]
 8005b40:	f000 fd7c 	bl	800663c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005b44:	68bb      	ldr	r3, [r7, #8]
 8005b46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d00c      	beq.n	8005b68 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d007      	beq.n	8005b68 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005b60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005b62:	6878      	ldr	r0, [r7, #4]
 8005b64:	f000 f9bd 	bl	8005ee2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005b68:	68bb      	ldr	r3, [r7, #8]
 8005b6a:	f003 0320 	and.w	r3, r3, #32
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d00c      	beq.n	8005b8c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	f003 0320 	and.w	r3, r3, #32
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d007      	beq.n	8005b8c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f06f 0220 	mvn.w	r2, #32
 8005b84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005b86:	6878      	ldr	r0, [r7, #4]
 8005b88:	f000 fd4e 	bl	8006628 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005b8c:	bf00      	nop
 8005b8e:	3710      	adds	r7, #16
 8005b90:	46bd      	mov	sp, r7
 8005b92:	bd80      	pop	{r7, pc}

08005b94 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b086      	sub	sp, #24
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	60f8      	str	r0, [r7, #12]
 8005b9c:	60b9      	str	r1, [r7, #8]
 8005b9e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005baa:	2b01      	cmp	r3, #1
 8005bac:	d101      	bne.n	8005bb2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005bae:	2302      	movs	r3, #2
 8005bb0:	e0ae      	b.n	8005d10 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	2201      	movs	r2, #1
 8005bb6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	2b0c      	cmp	r3, #12
 8005bbe:	f200 809f 	bhi.w	8005d00 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005bc2:	a201      	add	r2, pc, #4	@ (adr r2, 8005bc8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005bc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bc8:	08005bfd 	.word	0x08005bfd
 8005bcc:	08005d01 	.word	0x08005d01
 8005bd0:	08005d01 	.word	0x08005d01
 8005bd4:	08005d01 	.word	0x08005d01
 8005bd8:	08005c3d 	.word	0x08005c3d
 8005bdc:	08005d01 	.word	0x08005d01
 8005be0:	08005d01 	.word	0x08005d01
 8005be4:	08005d01 	.word	0x08005d01
 8005be8:	08005c7f 	.word	0x08005c7f
 8005bec:	08005d01 	.word	0x08005d01
 8005bf0:	08005d01 	.word	0x08005d01
 8005bf4:	08005d01 	.word	0x08005d01
 8005bf8:	08005cbf 	.word	0x08005cbf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	68b9      	ldr	r1, [r7, #8]
 8005c02:	4618      	mov	r0, r3
 8005c04:	f000 fa24 	bl	8006050 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	699a      	ldr	r2, [r3, #24]
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f042 0208 	orr.w	r2, r2, #8
 8005c16:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	699a      	ldr	r2, [r3, #24]
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f022 0204 	bic.w	r2, r2, #4
 8005c26:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	6999      	ldr	r1, [r3, #24]
 8005c2e:	68bb      	ldr	r3, [r7, #8]
 8005c30:	691a      	ldr	r2, [r3, #16]
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	430a      	orrs	r2, r1
 8005c38:	619a      	str	r2, [r3, #24]
      break;
 8005c3a:	e064      	b.n	8005d06 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	68b9      	ldr	r1, [r7, #8]
 8005c42:	4618      	mov	r0, r3
 8005c44:	f000 fa74 	bl	8006130 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	699a      	ldr	r2, [r3, #24]
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005c56:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	699a      	ldr	r2, [r3, #24]
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005c66:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	6999      	ldr	r1, [r3, #24]
 8005c6e:	68bb      	ldr	r3, [r7, #8]
 8005c70:	691b      	ldr	r3, [r3, #16]
 8005c72:	021a      	lsls	r2, r3, #8
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	430a      	orrs	r2, r1
 8005c7a:	619a      	str	r2, [r3, #24]
      break;
 8005c7c:	e043      	b.n	8005d06 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	68b9      	ldr	r1, [r7, #8]
 8005c84:	4618      	mov	r0, r3
 8005c86:	f000 fac9 	bl	800621c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	69da      	ldr	r2, [r3, #28]
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f042 0208 	orr.w	r2, r2, #8
 8005c98:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	69da      	ldr	r2, [r3, #28]
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f022 0204 	bic.w	r2, r2, #4
 8005ca8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	69d9      	ldr	r1, [r3, #28]
 8005cb0:	68bb      	ldr	r3, [r7, #8]
 8005cb2:	691a      	ldr	r2, [r3, #16]
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	430a      	orrs	r2, r1
 8005cba:	61da      	str	r2, [r3, #28]
      break;
 8005cbc:	e023      	b.n	8005d06 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	68b9      	ldr	r1, [r7, #8]
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	f000 fb1d 	bl	8006304 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	69da      	ldr	r2, [r3, #28]
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005cd8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	69da      	ldr	r2, [r3, #28]
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005ce8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	69d9      	ldr	r1, [r3, #28]
 8005cf0:	68bb      	ldr	r3, [r7, #8]
 8005cf2:	691b      	ldr	r3, [r3, #16]
 8005cf4:	021a      	lsls	r2, r3, #8
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	430a      	orrs	r2, r1
 8005cfc:	61da      	str	r2, [r3, #28]
      break;
 8005cfe:	e002      	b.n	8005d06 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005d00:	2301      	movs	r3, #1
 8005d02:	75fb      	strb	r3, [r7, #23]
      break;
 8005d04:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	2200      	movs	r2, #0
 8005d0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005d0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d10:	4618      	mov	r0, r3
 8005d12:	3718      	adds	r7, #24
 8005d14:	46bd      	mov	sp, r7
 8005d16:	bd80      	pop	{r7, pc}

08005d18 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	b084      	sub	sp, #16
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]
 8005d20:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005d22:	2300      	movs	r3, #0
 8005d24:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005d2c:	2b01      	cmp	r3, #1
 8005d2e:	d101      	bne.n	8005d34 <HAL_TIM_ConfigClockSource+0x1c>
 8005d30:	2302      	movs	r3, #2
 8005d32:	e0b4      	b.n	8005e9e <HAL_TIM_ConfigClockSource+0x186>
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2201      	movs	r2, #1
 8005d38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2202      	movs	r2, #2
 8005d40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	689b      	ldr	r3, [r3, #8]
 8005d4a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005d4c:	68bb      	ldr	r3, [r7, #8]
 8005d4e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005d52:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005d54:	68bb      	ldr	r3, [r7, #8]
 8005d56:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005d5a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	68ba      	ldr	r2, [r7, #8]
 8005d62:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005d6c:	d03e      	beq.n	8005dec <HAL_TIM_ConfigClockSource+0xd4>
 8005d6e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005d72:	f200 8087 	bhi.w	8005e84 <HAL_TIM_ConfigClockSource+0x16c>
 8005d76:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005d7a:	f000 8086 	beq.w	8005e8a <HAL_TIM_ConfigClockSource+0x172>
 8005d7e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005d82:	d87f      	bhi.n	8005e84 <HAL_TIM_ConfigClockSource+0x16c>
 8005d84:	2b70      	cmp	r3, #112	@ 0x70
 8005d86:	d01a      	beq.n	8005dbe <HAL_TIM_ConfigClockSource+0xa6>
 8005d88:	2b70      	cmp	r3, #112	@ 0x70
 8005d8a:	d87b      	bhi.n	8005e84 <HAL_TIM_ConfigClockSource+0x16c>
 8005d8c:	2b60      	cmp	r3, #96	@ 0x60
 8005d8e:	d050      	beq.n	8005e32 <HAL_TIM_ConfigClockSource+0x11a>
 8005d90:	2b60      	cmp	r3, #96	@ 0x60
 8005d92:	d877      	bhi.n	8005e84 <HAL_TIM_ConfigClockSource+0x16c>
 8005d94:	2b50      	cmp	r3, #80	@ 0x50
 8005d96:	d03c      	beq.n	8005e12 <HAL_TIM_ConfigClockSource+0xfa>
 8005d98:	2b50      	cmp	r3, #80	@ 0x50
 8005d9a:	d873      	bhi.n	8005e84 <HAL_TIM_ConfigClockSource+0x16c>
 8005d9c:	2b40      	cmp	r3, #64	@ 0x40
 8005d9e:	d058      	beq.n	8005e52 <HAL_TIM_ConfigClockSource+0x13a>
 8005da0:	2b40      	cmp	r3, #64	@ 0x40
 8005da2:	d86f      	bhi.n	8005e84 <HAL_TIM_ConfigClockSource+0x16c>
 8005da4:	2b30      	cmp	r3, #48	@ 0x30
 8005da6:	d064      	beq.n	8005e72 <HAL_TIM_ConfigClockSource+0x15a>
 8005da8:	2b30      	cmp	r3, #48	@ 0x30
 8005daa:	d86b      	bhi.n	8005e84 <HAL_TIM_ConfigClockSource+0x16c>
 8005dac:	2b20      	cmp	r3, #32
 8005dae:	d060      	beq.n	8005e72 <HAL_TIM_ConfigClockSource+0x15a>
 8005db0:	2b20      	cmp	r3, #32
 8005db2:	d867      	bhi.n	8005e84 <HAL_TIM_ConfigClockSource+0x16c>
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d05c      	beq.n	8005e72 <HAL_TIM_ConfigClockSource+0x15a>
 8005db8:	2b10      	cmp	r3, #16
 8005dba:	d05a      	beq.n	8005e72 <HAL_TIM_ConfigClockSource+0x15a>
 8005dbc:	e062      	b.n	8005e84 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005dce:	f000 fb69 	bl	80064a4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	689b      	ldr	r3, [r3, #8]
 8005dd8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005dda:	68bb      	ldr	r3, [r7, #8]
 8005ddc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005de0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	68ba      	ldr	r2, [r7, #8]
 8005de8:	609a      	str	r2, [r3, #8]
      break;
 8005dea:	e04f      	b.n	8005e8c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005df0:	683b      	ldr	r3, [r7, #0]
 8005df2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005df4:	683b      	ldr	r3, [r7, #0]
 8005df6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005df8:	683b      	ldr	r3, [r7, #0]
 8005dfa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005dfc:	f000 fb52 	bl	80064a4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	689a      	ldr	r2, [r3, #8]
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005e0e:	609a      	str	r2, [r3, #8]
      break;
 8005e10:	e03c      	b.n	8005e8c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005e16:	683b      	ldr	r3, [r7, #0]
 8005e18:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e1e:	461a      	mov	r2, r3
 8005e20:	f000 fac6 	bl	80063b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	2150      	movs	r1, #80	@ 0x50
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	f000 fb1f 	bl	800646e <TIM_ITRx_SetConfig>
      break;
 8005e30:	e02c      	b.n	8005e8c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005e3e:	461a      	mov	r2, r3
 8005e40:	f000 fae5 	bl	800640e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	2160      	movs	r1, #96	@ 0x60
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	f000 fb0f 	bl	800646e <TIM_ITRx_SetConfig>
      break;
 8005e50:	e01c      	b.n	8005e8c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e5e:	461a      	mov	r2, r3
 8005e60:	f000 faa6 	bl	80063b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	2140      	movs	r1, #64	@ 0x40
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	f000 faff 	bl	800646e <TIM_ITRx_SetConfig>
      break;
 8005e70:	e00c      	b.n	8005e8c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681a      	ldr	r2, [r3, #0]
 8005e76:	683b      	ldr	r3, [r7, #0]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	4619      	mov	r1, r3
 8005e7c:	4610      	mov	r0, r2
 8005e7e:	f000 faf6 	bl	800646e <TIM_ITRx_SetConfig>
      break;
 8005e82:	e003      	b.n	8005e8c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005e84:	2301      	movs	r3, #1
 8005e86:	73fb      	strb	r3, [r7, #15]
      break;
 8005e88:	e000      	b.n	8005e8c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005e8a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2201      	movs	r2, #1
 8005e90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2200      	movs	r2, #0
 8005e98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005e9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	3710      	adds	r7, #16
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	bd80      	pop	{r7, pc}

08005ea6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005ea6:	b480      	push	{r7}
 8005ea8:	b083      	sub	sp, #12
 8005eaa:	af00      	add	r7, sp, #0
 8005eac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005eae:	bf00      	nop
 8005eb0:	370c      	adds	r7, #12
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb8:	4770      	bx	lr

08005eba <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005eba:	b480      	push	{r7}
 8005ebc:	b083      	sub	sp, #12
 8005ebe:	af00      	add	r7, sp, #0
 8005ec0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005ec2:	bf00      	nop
 8005ec4:	370c      	adds	r7, #12
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ecc:	4770      	bx	lr

08005ece <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005ece:	b480      	push	{r7}
 8005ed0:	b083      	sub	sp, #12
 8005ed2:	af00      	add	r7, sp, #0
 8005ed4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005ed6:	bf00      	nop
 8005ed8:	370c      	adds	r7, #12
 8005eda:	46bd      	mov	sp, r7
 8005edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee0:	4770      	bx	lr

08005ee2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005ee2:	b480      	push	{r7}
 8005ee4:	b083      	sub	sp, #12
 8005ee6:	af00      	add	r7, sp, #0
 8005ee8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005eea:	bf00      	nop
 8005eec:	370c      	adds	r7, #12
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef4:	4770      	bx	lr
	...

08005ef8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005ef8:	b480      	push	{r7}
 8005efa:	b085      	sub	sp, #20
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
 8005f00:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	4a46      	ldr	r2, [pc, #280]	@ (8006024 <TIM_Base_SetConfig+0x12c>)
 8005f0c:	4293      	cmp	r3, r2
 8005f0e:	d013      	beq.n	8005f38 <TIM_Base_SetConfig+0x40>
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f16:	d00f      	beq.n	8005f38 <TIM_Base_SetConfig+0x40>
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	4a43      	ldr	r2, [pc, #268]	@ (8006028 <TIM_Base_SetConfig+0x130>)
 8005f1c:	4293      	cmp	r3, r2
 8005f1e:	d00b      	beq.n	8005f38 <TIM_Base_SetConfig+0x40>
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	4a42      	ldr	r2, [pc, #264]	@ (800602c <TIM_Base_SetConfig+0x134>)
 8005f24:	4293      	cmp	r3, r2
 8005f26:	d007      	beq.n	8005f38 <TIM_Base_SetConfig+0x40>
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	4a41      	ldr	r2, [pc, #260]	@ (8006030 <TIM_Base_SetConfig+0x138>)
 8005f2c:	4293      	cmp	r3, r2
 8005f2e:	d003      	beq.n	8005f38 <TIM_Base_SetConfig+0x40>
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	4a40      	ldr	r2, [pc, #256]	@ (8006034 <TIM_Base_SetConfig+0x13c>)
 8005f34:	4293      	cmp	r3, r2
 8005f36:	d108      	bne.n	8005f4a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f3e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	685b      	ldr	r3, [r3, #4]
 8005f44:	68fa      	ldr	r2, [r7, #12]
 8005f46:	4313      	orrs	r3, r2
 8005f48:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	4a35      	ldr	r2, [pc, #212]	@ (8006024 <TIM_Base_SetConfig+0x12c>)
 8005f4e:	4293      	cmp	r3, r2
 8005f50:	d02b      	beq.n	8005faa <TIM_Base_SetConfig+0xb2>
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f58:	d027      	beq.n	8005faa <TIM_Base_SetConfig+0xb2>
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	4a32      	ldr	r2, [pc, #200]	@ (8006028 <TIM_Base_SetConfig+0x130>)
 8005f5e:	4293      	cmp	r3, r2
 8005f60:	d023      	beq.n	8005faa <TIM_Base_SetConfig+0xb2>
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	4a31      	ldr	r2, [pc, #196]	@ (800602c <TIM_Base_SetConfig+0x134>)
 8005f66:	4293      	cmp	r3, r2
 8005f68:	d01f      	beq.n	8005faa <TIM_Base_SetConfig+0xb2>
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	4a30      	ldr	r2, [pc, #192]	@ (8006030 <TIM_Base_SetConfig+0x138>)
 8005f6e:	4293      	cmp	r3, r2
 8005f70:	d01b      	beq.n	8005faa <TIM_Base_SetConfig+0xb2>
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	4a2f      	ldr	r2, [pc, #188]	@ (8006034 <TIM_Base_SetConfig+0x13c>)
 8005f76:	4293      	cmp	r3, r2
 8005f78:	d017      	beq.n	8005faa <TIM_Base_SetConfig+0xb2>
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	4a2e      	ldr	r2, [pc, #184]	@ (8006038 <TIM_Base_SetConfig+0x140>)
 8005f7e:	4293      	cmp	r3, r2
 8005f80:	d013      	beq.n	8005faa <TIM_Base_SetConfig+0xb2>
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	4a2d      	ldr	r2, [pc, #180]	@ (800603c <TIM_Base_SetConfig+0x144>)
 8005f86:	4293      	cmp	r3, r2
 8005f88:	d00f      	beq.n	8005faa <TIM_Base_SetConfig+0xb2>
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	4a2c      	ldr	r2, [pc, #176]	@ (8006040 <TIM_Base_SetConfig+0x148>)
 8005f8e:	4293      	cmp	r3, r2
 8005f90:	d00b      	beq.n	8005faa <TIM_Base_SetConfig+0xb2>
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	4a2b      	ldr	r2, [pc, #172]	@ (8006044 <TIM_Base_SetConfig+0x14c>)
 8005f96:	4293      	cmp	r3, r2
 8005f98:	d007      	beq.n	8005faa <TIM_Base_SetConfig+0xb2>
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	4a2a      	ldr	r2, [pc, #168]	@ (8006048 <TIM_Base_SetConfig+0x150>)
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	d003      	beq.n	8005faa <TIM_Base_SetConfig+0xb2>
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	4a29      	ldr	r2, [pc, #164]	@ (800604c <TIM_Base_SetConfig+0x154>)
 8005fa6:	4293      	cmp	r3, r2
 8005fa8:	d108      	bne.n	8005fbc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005fb0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005fb2:	683b      	ldr	r3, [r7, #0]
 8005fb4:	68db      	ldr	r3, [r3, #12]
 8005fb6:	68fa      	ldr	r2, [r7, #12]
 8005fb8:	4313      	orrs	r3, r2
 8005fba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	695b      	ldr	r3, [r3, #20]
 8005fc6:	4313      	orrs	r3, r2
 8005fc8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	68fa      	ldr	r2, [r7, #12]
 8005fce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	689a      	ldr	r2, [r3, #8]
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	681a      	ldr	r2, [r3, #0]
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	4a10      	ldr	r2, [pc, #64]	@ (8006024 <TIM_Base_SetConfig+0x12c>)
 8005fe4:	4293      	cmp	r3, r2
 8005fe6:	d003      	beq.n	8005ff0 <TIM_Base_SetConfig+0xf8>
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	4a12      	ldr	r2, [pc, #72]	@ (8006034 <TIM_Base_SetConfig+0x13c>)
 8005fec:	4293      	cmp	r3, r2
 8005fee:	d103      	bne.n	8005ff8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	691a      	ldr	r2, [r3, #16]
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2201      	movs	r2, #1
 8005ffc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	691b      	ldr	r3, [r3, #16]
 8006002:	f003 0301 	and.w	r3, r3, #1
 8006006:	2b01      	cmp	r3, #1
 8006008:	d105      	bne.n	8006016 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	691b      	ldr	r3, [r3, #16]
 800600e:	f023 0201 	bic.w	r2, r3, #1
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	611a      	str	r2, [r3, #16]
  }
}
 8006016:	bf00      	nop
 8006018:	3714      	adds	r7, #20
 800601a:	46bd      	mov	sp, r7
 800601c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006020:	4770      	bx	lr
 8006022:	bf00      	nop
 8006024:	40010000 	.word	0x40010000
 8006028:	40000400 	.word	0x40000400
 800602c:	40000800 	.word	0x40000800
 8006030:	40000c00 	.word	0x40000c00
 8006034:	40010400 	.word	0x40010400
 8006038:	40014000 	.word	0x40014000
 800603c:	40014400 	.word	0x40014400
 8006040:	40014800 	.word	0x40014800
 8006044:	40001800 	.word	0x40001800
 8006048:	40001c00 	.word	0x40001c00
 800604c:	40002000 	.word	0x40002000

08006050 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006050:	b480      	push	{r7}
 8006052:	b087      	sub	sp, #28
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
 8006058:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6a1b      	ldr	r3, [r3, #32]
 800605e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	6a1b      	ldr	r3, [r3, #32]
 8006064:	f023 0201 	bic.w	r2, r3, #1
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	685b      	ldr	r3, [r3, #4]
 8006070:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	699b      	ldr	r3, [r3, #24]
 8006076:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800607e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	f023 0303 	bic.w	r3, r3, #3
 8006086:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	68fa      	ldr	r2, [r7, #12]
 800608e:	4313      	orrs	r3, r2
 8006090:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006092:	697b      	ldr	r3, [r7, #20]
 8006094:	f023 0302 	bic.w	r3, r3, #2
 8006098:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800609a:	683b      	ldr	r3, [r7, #0]
 800609c:	689b      	ldr	r3, [r3, #8]
 800609e:	697a      	ldr	r2, [r7, #20]
 80060a0:	4313      	orrs	r3, r2
 80060a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	4a20      	ldr	r2, [pc, #128]	@ (8006128 <TIM_OC1_SetConfig+0xd8>)
 80060a8:	4293      	cmp	r3, r2
 80060aa:	d003      	beq.n	80060b4 <TIM_OC1_SetConfig+0x64>
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	4a1f      	ldr	r2, [pc, #124]	@ (800612c <TIM_OC1_SetConfig+0xdc>)
 80060b0:	4293      	cmp	r3, r2
 80060b2:	d10c      	bne.n	80060ce <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80060b4:	697b      	ldr	r3, [r7, #20]
 80060b6:	f023 0308 	bic.w	r3, r3, #8
 80060ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80060bc:	683b      	ldr	r3, [r7, #0]
 80060be:	68db      	ldr	r3, [r3, #12]
 80060c0:	697a      	ldr	r2, [r7, #20]
 80060c2:	4313      	orrs	r3, r2
 80060c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80060c6:	697b      	ldr	r3, [r7, #20]
 80060c8:	f023 0304 	bic.w	r3, r3, #4
 80060cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	4a15      	ldr	r2, [pc, #84]	@ (8006128 <TIM_OC1_SetConfig+0xd8>)
 80060d2:	4293      	cmp	r3, r2
 80060d4:	d003      	beq.n	80060de <TIM_OC1_SetConfig+0x8e>
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	4a14      	ldr	r2, [pc, #80]	@ (800612c <TIM_OC1_SetConfig+0xdc>)
 80060da:	4293      	cmp	r3, r2
 80060dc:	d111      	bne.n	8006102 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80060de:	693b      	ldr	r3, [r7, #16]
 80060e0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80060e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80060e6:	693b      	ldr	r3, [r7, #16]
 80060e8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80060ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80060ee:	683b      	ldr	r3, [r7, #0]
 80060f0:	695b      	ldr	r3, [r3, #20]
 80060f2:	693a      	ldr	r2, [r7, #16]
 80060f4:	4313      	orrs	r3, r2
 80060f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80060f8:	683b      	ldr	r3, [r7, #0]
 80060fa:	699b      	ldr	r3, [r3, #24]
 80060fc:	693a      	ldr	r2, [r7, #16]
 80060fe:	4313      	orrs	r3, r2
 8006100:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	693a      	ldr	r2, [r7, #16]
 8006106:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	68fa      	ldr	r2, [r7, #12]
 800610c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800610e:	683b      	ldr	r3, [r7, #0]
 8006110:	685a      	ldr	r2, [r3, #4]
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	697a      	ldr	r2, [r7, #20]
 800611a:	621a      	str	r2, [r3, #32]
}
 800611c:	bf00      	nop
 800611e:	371c      	adds	r7, #28
 8006120:	46bd      	mov	sp, r7
 8006122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006126:	4770      	bx	lr
 8006128:	40010000 	.word	0x40010000
 800612c:	40010400 	.word	0x40010400

08006130 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006130:	b480      	push	{r7}
 8006132:	b087      	sub	sp, #28
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
 8006138:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	6a1b      	ldr	r3, [r3, #32]
 800613e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	6a1b      	ldr	r3, [r3, #32]
 8006144:	f023 0210 	bic.w	r2, r3, #16
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	685b      	ldr	r3, [r3, #4]
 8006150:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	699b      	ldr	r3, [r3, #24]
 8006156:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800615e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006166:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	021b      	lsls	r3, r3, #8
 800616e:	68fa      	ldr	r2, [r7, #12]
 8006170:	4313      	orrs	r3, r2
 8006172:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006174:	697b      	ldr	r3, [r7, #20]
 8006176:	f023 0320 	bic.w	r3, r3, #32
 800617a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	689b      	ldr	r3, [r3, #8]
 8006180:	011b      	lsls	r3, r3, #4
 8006182:	697a      	ldr	r2, [r7, #20]
 8006184:	4313      	orrs	r3, r2
 8006186:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	4a22      	ldr	r2, [pc, #136]	@ (8006214 <TIM_OC2_SetConfig+0xe4>)
 800618c:	4293      	cmp	r3, r2
 800618e:	d003      	beq.n	8006198 <TIM_OC2_SetConfig+0x68>
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	4a21      	ldr	r2, [pc, #132]	@ (8006218 <TIM_OC2_SetConfig+0xe8>)
 8006194:	4293      	cmp	r3, r2
 8006196:	d10d      	bne.n	80061b4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006198:	697b      	ldr	r3, [r7, #20]
 800619a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800619e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	68db      	ldr	r3, [r3, #12]
 80061a4:	011b      	lsls	r3, r3, #4
 80061a6:	697a      	ldr	r2, [r7, #20]
 80061a8:	4313      	orrs	r3, r2
 80061aa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80061ac:	697b      	ldr	r3, [r7, #20]
 80061ae:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80061b2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	4a17      	ldr	r2, [pc, #92]	@ (8006214 <TIM_OC2_SetConfig+0xe4>)
 80061b8:	4293      	cmp	r3, r2
 80061ba:	d003      	beq.n	80061c4 <TIM_OC2_SetConfig+0x94>
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	4a16      	ldr	r2, [pc, #88]	@ (8006218 <TIM_OC2_SetConfig+0xe8>)
 80061c0:	4293      	cmp	r3, r2
 80061c2:	d113      	bne.n	80061ec <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80061c4:	693b      	ldr	r3, [r7, #16]
 80061c6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80061ca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80061cc:	693b      	ldr	r3, [r7, #16]
 80061ce:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80061d2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80061d4:	683b      	ldr	r3, [r7, #0]
 80061d6:	695b      	ldr	r3, [r3, #20]
 80061d8:	009b      	lsls	r3, r3, #2
 80061da:	693a      	ldr	r2, [r7, #16]
 80061dc:	4313      	orrs	r3, r2
 80061de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	699b      	ldr	r3, [r3, #24]
 80061e4:	009b      	lsls	r3, r3, #2
 80061e6:	693a      	ldr	r2, [r7, #16]
 80061e8:	4313      	orrs	r3, r2
 80061ea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	693a      	ldr	r2, [r7, #16]
 80061f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	68fa      	ldr	r2, [r7, #12]
 80061f6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	685a      	ldr	r2, [r3, #4]
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	697a      	ldr	r2, [r7, #20]
 8006204:	621a      	str	r2, [r3, #32]
}
 8006206:	bf00      	nop
 8006208:	371c      	adds	r7, #28
 800620a:	46bd      	mov	sp, r7
 800620c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006210:	4770      	bx	lr
 8006212:	bf00      	nop
 8006214:	40010000 	.word	0x40010000
 8006218:	40010400 	.word	0x40010400

0800621c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800621c:	b480      	push	{r7}
 800621e:	b087      	sub	sp, #28
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
 8006224:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	6a1b      	ldr	r3, [r3, #32]
 800622a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	6a1b      	ldr	r3, [r3, #32]
 8006230:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	685b      	ldr	r3, [r3, #4]
 800623c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	69db      	ldr	r3, [r3, #28]
 8006242:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800624a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	f023 0303 	bic.w	r3, r3, #3
 8006252:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006254:	683b      	ldr	r3, [r7, #0]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	68fa      	ldr	r2, [r7, #12]
 800625a:	4313      	orrs	r3, r2
 800625c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800625e:	697b      	ldr	r3, [r7, #20]
 8006260:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006264:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	689b      	ldr	r3, [r3, #8]
 800626a:	021b      	lsls	r3, r3, #8
 800626c:	697a      	ldr	r2, [r7, #20]
 800626e:	4313      	orrs	r3, r2
 8006270:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	4a21      	ldr	r2, [pc, #132]	@ (80062fc <TIM_OC3_SetConfig+0xe0>)
 8006276:	4293      	cmp	r3, r2
 8006278:	d003      	beq.n	8006282 <TIM_OC3_SetConfig+0x66>
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	4a20      	ldr	r2, [pc, #128]	@ (8006300 <TIM_OC3_SetConfig+0xe4>)
 800627e:	4293      	cmp	r3, r2
 8006280:	d10d      	bne.n	800629e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006282:	697b      	ldr	r3, [r7, #20]
 8006284:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006288:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800628a:	683b      	ldr	r3, [r7, #0]
 800628c:	68db      	ldr	r3, [r3, #12]
 800628e:	021b      	lsls	r3, r3, #8
 8006290:	697a      	ldr	r2, [r7, #20]
 8006292:	4313      	orrs	r3, r2
 8006294:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006296:	697b      	ldr	r3, [r7, #20]
 8006298:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800629c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	4a16      	ldr	r2, [pc, #88]	@ (80062fc <TIM_OC3_SetConfig+0xe0>)
 80062a2:	4293      	cmp	r3, r2
 80062a4:	d003      	beq.n	80062ae <TIM_OC3_SetConfig+0x92>
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	4a15      	ldr	r2, [pc, #84]	@ (8006300 <TIM_OC3_SetConfig+0xe4>)
 80062aa:	4293      	cmp	r3, r2
 80062ac:	d113      	bne.n	80062d6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80062ae:	693b      	ldr	r3, [r7, #16]
 80062b0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80062b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80062b6:	693b      	ldr	r3, [r7, #16]
 80062b8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80062bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80062be:	683b      	ldr	r3, [r7, #0]
 80062c0:	695b      	ldr	r3, [r3, #20]
 80062c2:	011b      	lsls	r3, r3, #4
 80062c4:	693a      	ldr	r2, [r7, #16]
 80062c6:	4313      	orrs	r3, r2
 80062c8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	699b      	ldr	r3, [r3, #24]
 80062ce:	011b      	lsls	r3, r3, #4
 80062d0:	693a      	ldr	r2, [r7, #16]
 80062d2:	4313      	orrs	r3, r2
 80062d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	693a      	ldr	r2, [r7, #16]
 80062da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	68fa      	ldr	r2, [r7, #12]
 80062e0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80062e2:	683b      	ldr	r3, [r7, #0]
 80062e4:	685a      	ldr	r2, [r3, #4]
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	697a      	ldr	r2, [r7, #20]
 80062ee:	621a      	str	r2, [r3, #32]
}
 80062f0:	bf00      	nop
 80062f2:	371c      	adds	r7, #28
 80062f4:	46bd      	mov	sp, r7
 80062f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fa:	4770      	bx	lr
 80062fc:	40010000 	.word	0x40010000
 8006300:	40010400 	.word	0x40010400

08006304 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006304:	b480      	push	{r7}
 8006306:	b087      	sub	sp, #28
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
 800630c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	6a1b      	ldr	r3, [r3, #32]
 8006312:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	6a1b      	ldr	r3, [r3, #32]
 8006318:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	685b      	ldr	r3, [r3, #4]
 8006324:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	69db      	ldr	r3, [r3, #28]
 800632a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006332:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800633a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800633c:	683b      	ldr	r3, [r7, #0]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	021b      	lsls	r3, r3, #8
 8006342:	68fa      	ldr	r2, [r7, #12]
 8006344:	4313      	orrs	r3, r2
 8006346:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006348:	693b      	ldr	r3, [r7, #16]
 800634a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800634e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006350:	683b      	ldr	r3, [r7, #0]
 8006352:	689b      	ldr	r3, [r3, #8]
 8006354:	031b      	lsls	r3, r3, #12
 8006356:	693a      	ldr	r2, [r7, #16]
 8006358:	4313      	orrs	r3, r2
 800635a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	4a12      	ldr	r2, [pc, #72]	@ (80063a8 <TIM_OC4_SetConfig+0xa4>)
 8006360:	4293      	cmp	r3, r2
 8006362:	d003      	beq.n	800636c <TIM_OC4_SetConfig+0x68>
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	4a11      	ldr	r2, [pc, #68]	@ (80063ac <TIM_OC4_SetConfig+0xa8>)
 8006368:	4293      	cmp	r3, r2
 800636a:	d109      	bne.n	8006380 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800636c:	697b      	ldr	r3, [r7, #20]
 800636e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006372:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	695b      	ldr	r3, [r3, #20]
 8006378:	019b      	lsls	r3, r3, #6
 800637a:	697a      	ldr	r2, [r7, #20]
 800637c:	4313      	orrs	r3, r2
 800637e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	697a      	ldr	r2, [r7, #20]
 8006384:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	68fa      	ldr	r2, [r7, #12]
 800638a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	685a      	ldr	r2, [r3, #4]
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	693a      	ldr	r2, [r7, #16]
 8006398:	621a      	str	r2, [r3, #32]
}
 800639a:	bf00      	nop
 800639c:	371c      	adds	r7, #28
 800639e:	46bd      	mov	sp, r7
 80063a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a4:	4770      	bx	lr
 80063a6:	bf00      	nop
 80063a8:	40010000 	.word	0x40010000
 80063ac:	40010400 	.word	0x40010400

080063b0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80063b0:	b480      	push	{r7}
 80063b2:	b087      	sub	sp, #28
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	60f8      	str	r0, [r7, #12]
 80063b8:	60b9      	str	r1, [r7, #8]
 80063ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	6a1b      	ldr	r3, [r3, #32]
 80063c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	6a1b      	ldr	r3, [r3, #32]
 80063c6:	f023 0201 	bic.w	r2, r3, #1
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	699b      	ldr	r3, [r3, #24]
 80063d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80063d4:	693b      	ldr	r3, [r7, #16]
 80063d6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80063da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	011b      	lsls	r3, r3, #4
 80063e0:	693a      	ldr	r2, [r7, #16]
 80063e2:	4313      	orrs	r3, r2
 80063e4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80063e6:	697b      	ldr	r3, [r7, #20]
 80063e8:	f023 030a 	bic.w	r3, r3, #10
 80063ec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80063ee:	697a      	ldr	r2, [r7, #20]
 80063f0:	68bb      	ldr	r3, [r7, #8]
 80063f2:	4313      	orrs	r3, r2
 80063f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	693a      	ldr	r2, [r7, #16]
 80063fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	697a      	ldr	r2, [r7, #20]
 8006400:	621a      	str	r2, [r3, #32]
}
 8006402:	bf00      	nop
 8006404:	371c      	adds	r7, #28
 8006406:	46bd      	mov	sp, r7
 8006408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640c:	4770      	bx	lr

0800640e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800640e:	b480      	push	{r7}
 8006410:	b087      	sub	sp, #28
 8006412:	af00      	add	r7, sp, #0
 8006414:	60f8      	str	r0, [r7, #12]
 8006416:	60b9      	str	r1, [r7, #8]
 8006418:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	6a1b      	ldr	r3, [r3, #32]
 800641e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	6a1b      	ldr	r3, [r3, #32]
 8006424:	f023 0210 	bic.w	r2, r3, #16
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	699b      	ldr	r3, [r3, #24]
 8006430:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006432:	693b      	ldr	r3, [r7, #16]
 8006434:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006438:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	031b      	lsls	r3, r3, #12
 800643e:	693a      	ldr	r2, [r7, #16]
 8006440:	4313      	orrs	r3, r2
 8006442:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006444:	697b      	ldr	r3, [r7, #20]
 8006446:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800644a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800644c:	68bb      	ldr	r3, [r7, #8]
 800644e:	011b      	lsls	r3, r3, #4
 8006450:	697a      	ldr	r2, [r7, #20]
 8006452:	4313      	orrs	r3, r2
 8006454:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	693a      	ldr	r2, [r7, #16]
 800645a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	697a      	ldr	r2, [r7, #20]
 8006460:	621a      	str	r2, [r3, #32]
}
 8006462:	bf00      	nop
 8006464:	371c      	adds	r7, #28
 8006466:	46bd      	mov	sp, r7
 8006468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646c:	4770      	bx	lr

0800646e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800646e:	b480      	push	{r7}
 8006470:	b085      	sub	sp, #20
 8006472:	af00      	add	r7, sp, #0
 8006474:	6078      	str	r0, [r7, #4]
 8006476:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	689b      	ldr	r3, [r3, #8]
 800647c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006484:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006486:	683a      	ldr	r2, [r7, #0]
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	4313      	orrs	r3, r2
 800648c:	f043 0307 	orr.w	r3, r3, #7
 8006490:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	68fa      	ldr	r2, [r7, #12]
 8006496:	609a      	str	r2, [r3, #8]
}
 8006498:	bf00      	nop
 800649a:	3714      	adds	r7, #20
 800649c:	46bd      	mov	sp, r7
 800649e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a2:	4770      	bx	lr

080064a4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80064a4:	b480      	push	{r7}
 80064a6:	b087      	sub	sp, #28
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	60f8      	str	r0, [r7, #12]
 80064ac:	60b9      	str	r1, [r7, #8]
 80064ae:	607a      	str	r2, [r7, #4]
 80064b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	689b      	ldr	r3, [r3, #8]
 80064b6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80064b8:	697b      	ldr	r3, [r7, #20]
 80064ba:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80064be:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80064c0:	683b      	ldr	r3, [r7, #0]
 80064c2:	021a      	lsls	r2, r3, #8
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	431a      	orrs	r2, r3
 80064c8:	68bb      	ldr	r3, [r7, #8]
 80064ca:	4313      	orrs	r3, r2
 80064cc:	697a      	ldr	r2, [r7, #20]
 80064ce:	4313      	orrs	r3, r2
 80064d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	697a      	ldr	r2, [r7, #20]
 80064d6:	609a      	str	r2, [r3, #8]
}
 80064d8:	bf00      	nop
 80064da:	371c      	adds	r7, #28
 80064dc:	46bd      	mov	sp, r7
 80064de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e2:	4770      	bx	lr

080064e4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80064e4:	b480      	push	{r7}
 80064e6:	b087      	sub	sp, #28
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	60f8      	str	r0, [r7, #12]
 80064ec:	60b9      	str	r1, [r7, #8]
 80064ee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80064f0:	68bb      	ldr	r3, [r7, #8]
 80064f2:	f003 031f 	and.w	r3, r3, #31
 80064f6:	2201      	movs	r2, #1
 80064f8:	fa02 f303 	lsl.w	r3, r2, r3
 80064fc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	6a1a      	ldr	r2, [r3, #32]
 8006502:	697b      	ldr	r3, [r7, #20]
 8006504:	43db      	mvns	r3, r3
 8006506:	401a      	ands	r2, r3
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	6a1a      	ldr	r2, [r3, #32]
 8006510:	68bb      	ldr	r3, [r7, #8]
 8006512:	f003 031f 	and.w	r3, r3, #31
 8006516:	6879      	ldr	r1, [r7, #4]
 8006518:	fa01 f303 	lsl.w	r3, r1, r3
 800651c:	431a      	orrs	r2, r3
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	621a      	str	r2, [r3, #32]
}
 8006522:	bf00      	nop
 8006524:	371c      	adds	r7, #28
 8006526:	46bd      	mov	sp, r7
 8006528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652c:	4770      	bx	lr
	...

08006530 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006530:	b480      	push	{r7}
 8006532:	b085      	sub	sp, #20
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
 8006538:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006540:	2b01      	cmp	r3, #1
 8006542:	d101      	bne.n	8006548 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006544:	2302      	movs	r3, #2
 8006546:	e05a      	b.n	80065fe <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2201      	movs	r2, #1
 800654c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	2202      	movs	r2, #2
 8006554:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	685b      	ldr	r3, [r3, #4]
 800655e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	689b      	ldr	r3, [r3, #8]
 8006566:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800656e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006570:	683b      	ldr	r3, [r7, #0]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	68fa      	ldr	r2, [r7, #12]
 8006576:	4313      	orrs	r3, r2
 8006578:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	68fa      	ldr	r2, [r7, #12]
 8006580:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	4a21      	ldr	r2, [pc, #132]	@ (800660c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006588:	4293      	cmp	r3, r2
 800658a:	d022      	beq.n	80065d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006594:	d01d      	beq.n	80065d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	4a1d      	ldr	r2, [pc, #116]	@ (8006610 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800659c:	4293      	cmp	r3, r2
 800659e:	d018      	beq.n	80065d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	4a1b      	ldr	r2, [pc, #108]	@ (8006614 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80065a6:	4293      	cmp	r3, r2
 80065a8:	d013      	beq.n	80065d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	4a1a      	ldr	r2, [pc, #104]	@ (8006618 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80065b0:	4293      	cmp	r3, r2
 80065b2:	d00e      	beq.n	80065d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	4a18      	ldr	r2, [pc, #96]	@ (800661c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80065ba:	4293      	cmp	r3, r2
 80065bc:	d009      	beq.n	80065d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	4a17      	ldr	r2, [pc, #92]	@ (8006620 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80065c4:	4293      	cmp	r3, r2
 80065c6:	d004      	beq.n	80065d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	4a15      	ldr	r2, [pc, #84]	@ (8006624 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80065ce:	4293      	cmp	r3, r2
 80065d0:	d10c      	bne.n	80065ec <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80065d2:	68bb      	ldr	r3, [r7, #8]
 80065d4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80065d8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80065da:	683b      	ldr	r3, [r7, #0]
 80065dc:	685b      	ldr	r3, [r3, #4]
 80065de:	68ba      	ldr	r2, [r7, #8]
 80065e0:	4313      	orrs	r3, r2
 80065e2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	68ba      	ldr	r2, [r7, #8]
 80065ea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2201      	movs	r2, #1
 80065f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2200      	movs	r2, #0
 80065f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80065fc:	2300      	movs	r3, #0
}
 80065fe:	4618      	mov	r0, r3
 8006600:	3714      	adds	r7, #20
 8006602:	46bd      	mov	sp, r7
 8006604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006608:	4770      	bx	lr
 800660a:	bf00      	nop
 800660c:	40010000 	.word	0x40010000
 8006610:	40000400 	.word	0x40000400
 8006614:	40000800 	.word	0x40000800
 8006618:	40000c00 	.word	0x40000c00
 800661c:	40010400 	.word	0x40010400
 8006620:	40014000 	.word	0x40014000
 8006624:	40001800 	.word	0x40001800

08006628 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006628:	b480      	push	{r7}
 800662a:	b083      	sub	sp, #12
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006630:	bf00      	nop
 8006632:	370c      	adds	r7, #12
 8006634:	46bd      	mov	sp, r7
 8006636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663a:	4770      	bx	lr

0800663c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800663c:	b480      	push	{r7}
 800663e:	b083      	sub	sp, #12
 8006640:	af00      	add	r7, sp, #0
 8006642:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006644:	bf00      	nop
 8006646:	370c      	adds	r7, #12
 8006648:	46bd      	mov	sp, r7
 800664a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664e:	4770      	bx	lr

08006650 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006650:	b580      	push	{r7, lr}
 8006652:	b082      	sub	sp, #8
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	2b00      	cmp	r3, #0
 800665c:	d101      	bne.n	8006662 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800665e:	2301      	movs	r3, #1
 8006660:	e042      	b.n	80066e8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006668:	b2db      	uxtb	r3, r3
 800666a:	2b00      	cmp	r3, #0
 800666c:	d106      	bne.n	800667c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	2200      	movs	r2, #0
 8006672:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006676:	6878      	ldr	r0, [r7, #4]
 8006678:	f7fc f98a 	bl	8002990 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2224      	movs	r2, #36	@ 0x24
 8006680:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	68da      	ldr	r2, [r3, #12]
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006692:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006694:	6878      	ldr	r0, [r7, #4]
 8006696:	f000 f82b 	bl	80066f0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	691a      	ldr	r2, [r3, #16]
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80066a8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	695a      	ldr	r2, [r3, #20]
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80066b8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	68da      	ldr	r2, [r3, #12]
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80066c8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	2200      	movs	r2, #0
 80066ce:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2220      	movs	r2, #32
 80066d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2220      	movs	r2, #32
 80066dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2200      	movs	r2, #0
 80066e4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80066e6:	2300      	movs	r3, #0
}
 80066e8:	4618      	mov	r0, r3
 80066ea:	3708      	adds	r7, #8
 80066ec:	46bd      	mov	sp, r7
 80066ee:	bd80      	pop	{r7, pc}

080066f0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80066f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80066f4:	b0c0      	sub	sp, #256	@ 0x100
 80066f6:	af00      	add	r7, sp, #0
 80066f8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80066fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	691b      	ldr	r3, [r3, #16]
 8006704:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006708:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800670c:	68d9      	ldr	r1, [r3, #12]
 800670e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006712:	681a      	ldr	r2, [r3, #0]
 8006714:	ea40 0301 	orr.w	r3, r0, r1
 8006718:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800671a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800671e:	689a      	ldr	r2, [r3, #8]
 8006720:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006724:	691b      	ldr	r3, [r3, #16]
 8006726:	431a      	orrs	r2, r3
 8006728:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800672c:	695b      	ldr	r3, [r3, #20]
 800672e:	431a      	orrs	r2, r3
 8006730:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006734:	69db      	ldr	r3, [r3, #28]
 8006736:	4313      	orrs	r3, r2
 8006738:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800673c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	68db      	ldr	r3, [r3, #12]
 8006744:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006748:	f021 010c 	bic.w	r1, r1, #12
 800674c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006750:	681a      	ldr	r2, [r3, #0]
 8006752:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006756:	430b      	orrs	r3, r1
 8006758:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800675a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	695b      	ldr	r3, [r3, #20]
 8006762:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006766:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800676a:	6999      	ldr	r1, [r3, #24]
 800676c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006770:	681a      	ldr	r2, [r3, #0]
 8006772:	ea40 0301 	orr.w	r3, r0, r1
 8006776:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006778:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800677c:	681a      	ldr	r2, [r3, #0]
 800677e:	4b8f      	ldr	r3, [pc, #572]	@ (80069bc <UART_SetConfig+0x2cc>)
 8006780:	429a      	cmp	r2, r3
 8006782:	d005      	beq.n	8006790 <UART_SetConfig+0xa0>
 8006784:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006788:	681a      	ldr	r2, [r3, #0]
 800678a:	4b8d      	ldr	r3, [pc, #564]	@ (80069c0 <UART_SetConfig+0x2d0>)
 800678c:	429a      	cmp	r2, r3
 800678e:	d104      	bne.n	800679a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006790:	f7fd ff04 	bl	800459c <HAL_RCC_GetPCLK2Freq>
 8006794:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006798:	e003      	b.n	80067a2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800679a:	f7fd feeb 	bl	8004574 <HAL_RCC_GetPCLK1Freq>
 800679e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80067a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80067a6:	69db      	ldr	r3, [r3, #28]
 80067a8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80067ac:	f040 810c 	bne.w	80069c8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80067b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80067b4:	2200      	movs	r2, #0
 80067b6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80067ba:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80067be:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80067c2:	4622      	mov	r2, r4
 80067c4:	462b      	mov	r3, r5
 80067c6:	1891      	adds	r1, r2, r2
 80067c8:	65b9      	str	r1, [r7, #88]	@ 0x58
 80067ca:	415b      	adcs	r3, r3
 80067cc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80067ce:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80067d2:	4621      	mov	r1, r4
 80067d4:	eb12 0801 	adds.w	r8, r2, r1
 80067d8:	4629      	mov	r1, r5
 80067da:	eb43 0901 	adc.w	r9, r3, r1
 80067de:	f04f 0200 	mov.w	r2, #0
 80067e2:	f04f 0300 	mov.w	r3, #0
 80067e6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80067ea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80067ee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80067f2:	4690      	mov	r8, r2
 80067f4:	4699      	mov	r9, r3
 80067f6:	4623      	mov	r3, r4
 80067f8:	eb18 0303 	adds.w	r3, r8, r3
 80067fc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006800:	462b      	mov	r3, r5
 8006802:	eb49 0303 	adc.w	r3, r9, r3
 8006806:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800680a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800680e:	685b      	ldr	r3, [r3, #4]
 8006810:	2200      	movs	r2, #0
 8006812:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006816:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800681a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800681e:	460b      	mov	r3, r1
 8006820:	18db      	adds	r3, r3, r3
 8006822:	653b      	str	r3, [r7, #80]	@ 0x50
 8006824:	4613      	mov	r3, r2
 8006826:	eb42 0303 	adc.w	r3, r2, r3
 800682a:	657b      	str	r3, [r7, #84]	@ 0x54
 800682c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006830:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006834:	f7fa f9a2 	bl	8000b7c <__aeabi_uldivmod>
 8006838:	4602      	mov	r2, r0
 800683a:	460b      	mov	r3, r1
 800683c:	4b61      	ldr	r3, [pc, #388]	@ (80069c4 <UART_SetConfig+0x2d4>)
 800683e:	fba3 2302 	umull	r2, r3, r3, r2
 8006842:	095b      	lsrs	r3, r3, #5
 8006844:	011c      	lsls	r4, r3, #4
 8006846:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800684a:	2200      	movs	r2, #0
 800684c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006850:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006854:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006858:	4642      	mov	r2, r8
 800685a:	464b      	mov	r3, r9
 800685c:	1891      	adds	r1, r2, r2
 800685e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006860:	415b      	adcs	r3, r3
 8006862:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006864:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006868:	4641      	mov	r1, r8
 800686a:	eb12 0a01 	adds.w	sl, r2, r1
 800686e:	4649      	mov	r1, r9
 8006870:	eb43 0b01 	adc.w	fp, r3, r1
 8006874:	f04f 0200 	mov.w	r2, #0
 8006878:	f04f 0300 	mov.w	r3, #0
 800687c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006880:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006884:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006888:	4692      	mov	sl, r2
 800688a:	469b      	mov	fp, r3
 800688c:	4643      	mov	r3, r8
 800688e:	eb1a 0303 	adds.w	r3, sl, r3
 8006892:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006896:	464b      	mov	r3, r9
 8006898:	eb4b 0303 	adc.w	r3, fp, r3
 800689c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80068a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80068a4:	685b      	ldr	r3, [r3, #4]
 80068a6:	2200      	movs	r2, #0
 80068a8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80068ac:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80068b0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80068b4:	460b      	mov	r3, r1
 80068b6:	18db      	adds	r3, r3, r3
 80068b8:	643b      	str	r3, [r7, #64]	@ 0x40
 80068ba:	4613      	mov	r3, r2
 80068bc:	eb42 0303 	adc.w	r3, r2, r3
 80068c0:	647b      	str	r3, [r7, #68]	@ 0x44
 80068c2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80068c6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80068ca:	f7fa f957 	bl	8000b7c <__aeabi_uldivmod>
 80068ce:	4602      	mov	r2, r0
 80068d0:	460b      	mov	r3, r1
 80068d2:	4611      	mov	r1, r2
 80068d4:	4b3b      	ldr	r3, [pc, #236]	@ (80069c4 <UART_SetConfig+0x2d4>)
 80068d6:	fba3 2301 	umull	r2, r3, r3, r1
 80068da:	095b      	lsrs	r3, r3, #5
 80068dc:	2264      	movs	r2, #100	@ 0x64
 80068de:	fb02 f303 	mul.w	r3, r2, r3
 80068e2:	1acb      	subs	r3, r1, r3
 80068e4:	00db      	lsls	r3, r3, #3
 80068e6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80068ea:	4b36      	ldr	r3, [pc, #216]	@ (80069c4 <UART_SetConfig+0x2d4>)
 80068ec:	fba3 2302 	umull	r2, r3, r3, r2
 80068f0:	095b      	lsrs	r3, r3, #5
 80068f2:	005b      	lsls	r3, r3, #1
 80068f4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80068f8:	441c      	add	r4, r3
 80068fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80068fe:	2200      	movs	r2, #0
 8006900:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006904:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006908:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800690c:	4642      	mov	r2, r8
 800690e:	464b      	mov	r3, r9
 8006910:	1891      	adds	r1, r2, r2
 8006912:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006914:	415b      	adcs	r3, r3
 8006916:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006918:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800691c:	4641      	mov	r1, r8
 800691e:	1851      	adds	r1, r2, r1
 8006920:	6339      	str	r1, [r7, #48]	@ 0x30
 8006922:	4649      	mov	r1, r9
 8006924:	414b      	adcs	r3, r1
 8006926:	637b      	str	r3, [r7, #52]	@ 0x34
 8006928:	f04f 0200 	mov.w	r2, #0
 800692c:	f04f 0300 	mov.w	r3, #0
 8006930:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006934:	4659      	mov	r1, fp
 8006936:	00cb      	lsls	r3, r1, #3
 8006938:	4651      	mov	r1, sl
 800693a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800693e:	4651      	mov	r1, sl
 8006940:	00ca      	lsls	r2, r1, #3
 8006942:	4610      	mov	r0, r2
 8006944:	4619      	mov	r1, r3
 8006946:	4603      	mov	r3, r0
 8006948:	4642      	mov	r2, r8
 800694a:	189b      	adds	r3, r3, r2
 800694c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006950:	464b      	mov	r3, r9
 8006952:	460a      	mov	r2, r1
 8006954:	eb42 0303 	adc.w	r3, r2, r3
 8006958:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800695c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006960:	685b      	ldr	r3, [r3, #4]
 8006962:	2200      	movs	r2, #0
 8006964:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006968:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800696c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006970:	460b      	mov	r3, r1
 8006972:	18db      	adds	r3, r3, r3
 8006974:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006976:	4613      	mov	r3, r2
 8006978:	eb42 0303 	adc.w	r3, r2, r3
 800697c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800697e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006982:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006986:	f7fa f8f9 	bl	8000b7c <__aeabi_uldivmod>
 800698a:	4602      	mov	r2, r0
 800698c:	460b      	mov	r3, r1
 800698e:	4b0d      	ldr	r3, [pc, #52]	@ (80069c4 <UART_SetConfig+0x2d4>)
 8006990:	fba3 1302 	umull	r1, r3, r3, r2
 8006994:	095b      	lsrs	r3, r3, #5
 8006996:	2164      	movs	r1, #100	@ 0x64
 8006998:	fb01 f303 	mul.w	r3, r1, r3
 800699c:	1ad3      	subs	r3, r2, r3
 800699e:	00db      	lsls	r3, r3, #3
 80069a0:	3332      	adds	r3, #50	@ 0x32
 80069a2:	4a08      	ldr	r2, [pc, #32]	@ (80069c4 <UART_SetConfig+0x2d4>)
 80069a4:	fba2 2303 	umull	r2, r3, r2, r3
 80069a8:	095b      	lsrs	r3, r3, #5
 80069aa:	f003 0207 	and.w	r2, r3, #7
 80069ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	4422      	add	r2, r4
 80069b6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80069b8:	e106      	b.n	8006bc8 <UART_SetConfig+0x4d8>
 80069ba:	bf00      	nop
 80069bc:	40011000 	.word	0x40011000
 80069c0:	40011400 	.word	0x40011400
 80069c4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80069c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80069cc:	2200      	movs	r2, #0
 80069ce:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80069d2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80069d6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80069da:	4642      	mov	r2, r8
 80069dc:	464b      	mov	r3, r9
 80069de:	1891      	adds	r1, r2, r2
 80069e0:	6239      	str	r1, [r7, #32]
 80069e2:	415b      	adcs	r3, r3
 80069e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80069e6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80069ea:	4641      	mov	r1, r8
 80069ec:	1854      	adds	r4, r2, r1
 80069ee:	4649      	mov	r1, r9
 80069f0:	eb43 0501 	adc.w	r5, r3, r1
 80069f4:	f04f 0200 	mov.w	r2, #0
 80069f8:	f04f 0300 	mov.w	r3, #0
 80069fc:	00eb      	lsls	r3, r5, #3
 80069fe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006a02:	00e2      	lsls	r2, r4, #3
 8006a04:	4614      	mov	r4, r2
 8006a06:	461d      	mov	r5, r3
 8006a08:	4643      	mov	r3, r8
 8006a0a:	18e3      	adds	r3, r4, r3
 8006a0c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006a10:	464b      	mov	r3, r9
 8006a12:	eb45 0303 	adc.w	r3, r5, r3
 8006a16:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006a1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a1e:	685b      	ldr	r3, [r3, #4]
 8006a20:	2200      	movs	r2, #0
 8006a22:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006a26:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006a2a:	f04f 0200 	mov.w	r2, #0
 8006a2e:	f04f 0300 	mov.w	r3, #0
 8006a32:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006a36:	4629      	mov	r1, r5
 8006a38:	008b      	lsls	r3, r1, #2
 8006a3a:	4621      	mov	r1, r4
 8006a3c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006a40:	4621      	mov	r1, r4
 8006a42:	008a      	lsls	r2, r1, #2
 8006a44:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006a48:	f7fa f898 	bl	8000b7c <__aeabi_uldivmod>
 8006a4c:	4602      	mov	r2, r0
 8006a4e:	460b      	mov	r3, r1
 8006a50:	4b60      	ldr	r3, [pc, #384]	@ (8006bd4 <UART_SetConfig+0x4e4>)
 8006a52:	fba3 2302 	umull	r2, r3, r3, r2
 8006a56:	095b      	lsrs	r3, r3, #5
 8006a58:	011c      	lsls	r4, r3, #4
 8006a5a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006a5e:	2200      	movs	r2, #0
 8006a60:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006a64:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006a68:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006a6c:	4642      	mov	r2, r8
 8006a6e:	464b      	mov	r3, r9
 8006a70:	1891      	adds	r1, r2, r2
 8006a72:	61b9      	str	r1, [r7, #24]
 8006a74:	415b      	adcs	r3, r3
 8006a76:	61fb      	str	r3, [r7, #28]
 8006a78:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006a7c:	4641      	mov	r1, r8
 8006a7e:	1851      	adds	r1, r2, r1
 8006a80:	6139      	str	r1, [r7, #16]
 8006a82:	4649      	mov	r1, r9
 8006a84:	414b      	adcs	r3, r1
 8006a86:	617b      	str	r3, [r7, #20]
 8006a88:	f04f 0200 	mov.w	r2, #0
 8006a8c:	f04f 0300 	mov.w	r3, #0
 8006a90:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006a94:	4659      	mov	r1, fp
 8006a96:	00cb      	lsls	r3, r1, #3
 8006a98:	4651      	mov	r1, sl
 8006a9a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006a9e:	4651      	mov	r1, sl
 8006aa0:	00ca      	lsls	r2, r1, #3
 8006aa2:	4610      	mov	r0, r2
 8006aa4:	4619      	mov	r1, r3
 8006aa6:	4603      	mov	r3, r0
 8006aa8:	4642      	mov	r2, r8
 8006aaa:	189b      	adds	r3, r3, r2
 8006aac:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006ab0:	464b      	mov	r3, r9
 8006ab2:	460a      	mov	r2, r1
 8006ab4:	eb42 0303 	adc.w	r3, r2, r3
 8006ab8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006abc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ac0:	685b      	ldr	r3, [r3, #4]
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006ac6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006ac8:	f04f 0200 	mov.w	r2, #0
 8006acc:	f04f 0300 	mov.w	r3, #0
 8006ad0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006ad4:	4649      	mov	r1, r9
 8006ad6:	008b      	lsls	r3, r1, #2
 8006ad8:	4641      	mov	r1, r8
 8006ada:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006ade:	4641      	mov	r1, r8
 8006ae0:	008a      	lsls	r2, r1, #2
 8006ae2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006ae6:	f7fa f849 	bl	8000b7c <__aeabi_uldivmod>
 8006aea:	4602      	mov	r2, r0
 8006aec:	460b      	mov	r3, r1
 8006aee:	4611      	mov	r1, r2
 8006af0:	4b38      	ldr	r3, [pc, #224]	@ (8006bd4 <UART_SetConfig+0x4e4>)
 8006af2:	fba3 2301 	umull	r2, r3, r3, r1
 8006af6:	095b      	lsrs	r3, r3, #5
 8006af8:	2264      	movs	r2, #100	@ 0x64
 8006afa:	fb02 f303 	mul.w	r3, r2, r3
 8006afe:	1acb      	subs	r3, r1, r3
 8006b00:	011b      	lsls	r3, r3, #4
 8006b02:	3332      	adds	r3, #50	@ 0x32
 8006b04:	4a33      	ldr	r2, [pc, #204]	@ (8006bd4 <UART_SetConfig+0x4e4>)
 8006b06:	fba2 2303 	umull	r2, r3, r2, r3
 8006b0a:	095b      	lsrs	r3, r3, #5
 8006b0c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006b10:	441c      	add	r4, r3
 8006b12:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006b16:	2200      	movs	r2, #0
 8006b18:	673b      	str	r3, [r7, #112]	@ 0x70
 8006b1a:	677a      	str	r2, [r7, #116]	@ 0x74
 8006b1c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006b20:	4642      	mov	r2, r8
 8006b22:	464b      	mov	r3, r9
 8006b24:	1891      	adds	r1, r2, r2
 8006b26:	60b9      	str	r1, [r7, #8]
 8006b28:	415b      	adcs	r3, r3
 8006b2a:	60fb      	str	r3, [r7, #12]
 8006b2c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006b30:	4641      	mov	r1, r8
 8006b32:	1851      	adds	r1, r2, r1
 8006b34:	6039      	str	r1, [r7, #0]
 8006b36:	4649      	mov	r1, r9
 8006b38:	414b      	adcs	r3, r1
 8006b3a:	607b      	str	r3, [r7, #4]
 8006b3c:	f04f 0200 	mov.w	r2, #0
 8006b40:	f04f 0300 	mov.w	r3, #0
 8006b44:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006b48:	4659      	mov	r1, fp
 8006b4a:	00cb      	lsls	r3, r1, #3
 8006b4c:	4651      	mov	r1, sl
 8006b4e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006b52:	4651      	mov	r1, sl
 8006b54:	00ca      	lsls	r2, r1, #3
 8006b56:	4610      	mov	r0, r2
 8006b58:	4619      	mov	r1, r3
 8006b5a:	4603      	mov	r3, r0
 8006b5c:	4642      	mov	r2, r8
 8006b5e:	189b      	adds	r3, r3, r2
 8006b60:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006b62:	464b      	mov	r3, r9
 8006b64:	460a      	mov	r2, r1
 8006b66:	eb42 0303 	adc.w	r3, r2, r3
 8006b6a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006b6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b70:	685b      	ldr	r3, [r3, #4]
 8006b72:	2200      	movs	r2, #0
 8006b74:	663b      	str	r3, [r7, #96]	@ 0x60
 8006b76:	667a      	str	r2, [r7, #100]	@ 0x64
 8006b78:	f04f 0200 	mov.w	r2, #0
 8006b7c:	f04f 0300 	mov.w	r3, #0
 8006b80:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006b84:	4649      	mov	r1, r9
 8006b86:	008b      	lsls	r3, r1, #2
 8006b88:	4641      	mov	r1, r8
 8006b8a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006b8e:	4641      	mov	r1, r8
 8006b90:	008a      	lsls	r2, r1, #2
 8006b92:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006b96:	f7f9 fff1 	bl	8000b7c <__aeabi_uldivmod>
 8006b9a:	4602      	mov	r2, r0
 8006b9c:	460b      	mov	r3, r1
 8006b9e:	4b0d      	ldr	r3, [pc, #52]	@ (8006bd4 <UART_SetConfig+0x4e4>)
 8006ba0:	fba3 1302 	umull	r1, r3, r3, r2
 8006ba4:	095b      	lsrs	r3, r3, #5
 8006ba6:	2164      	movs	r1, #100	@ 0x64
 8006ba8:	fb01 f303 	mul.w	r3, r1, r3
 8006bac:	1ad3      	subs	r3, r2, r3
 8006bae:	011b      	lsls	r3, r3, #4
 8006bb0:	3332      	adds	r3, #50	@ 0x32
 8006bb2:	4a08      	ldr	r2, [pc, #32]	@ (8006bd4 <UART_SetConfig+0x4e4>)
 8006bb4:	fba2 2303 	umull	r2, r3, r2, r3
 8006bb8:	095b      	lsrs	r3, r3, #5
 8006bba:	f003 020f 	and.w	r2, r3, #15
 8006bbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	4422      	add	r2, r4
 8006bc6:	609a      	str	r2, [r3, #8]
}
 8006bc8:	bf00      	nop
 8006bca:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006bd4:	51eb851f 	.word	0x51eb851f

08006bd8 <DEV_SPI_WRite>:
	HAL_Delay(xms);
}


void DEV_SPI_WRite(UBYTE _dat)
{
 8006bd8:	b580      	push	{r7, lr}
 8006bda:	b082      	sub	sp, #8
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	4603      	mov	r3, r0
 8006be0:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&hspi2, (uint8_t *)&_dat, 1, 500);
 8006be2:	1df9      	adds	r1, r7, #7
 8006be4:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8006be8:	2201      	movs	r2, #1
 8006bea:	4803      	ldr	r0, [pc, #12]	@ (8006bf8 <DEV_SPI_WRite+0x20>)
 8006bec:	f7fe fa41 	bl	8005072 <HAL_SPI_Transmit>
}
 8006bf0:	bf00      	nop
 8006bf2:	3708      	adds	r7, #8
 8006bf4:	46bd      	mov	sp, r7
 8006bf6:	bd80      	pop	{r7, pc}
 8006bf8:	2000017c 	.word	0x2000017c

08006bfc <DEV_Module_Init>:

int DEV_Module_Init(void)
{
 8006bfc:	b580      	push	{r7, lr}
 8006bfe:	af00      	add	r7, sp, #0
    DEV_Digital_Write(DEV_DC_PIN, 1);
 8006c00:	2201      	movs	r2, #1
 8006c02:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006c06:	480b      	ldr	r0, [pc, #44]	@ (8006c34 <DEV_Module_Init+0x38>)
 8006c08:	f7fc fb96 	bl	8003338 <HAL_GPIO_WritePin>
    DEV_Digital_Write(DEV_CS_PIN, 1);
 8006c0c:	2201      	movs	r2, #1
 8006c0e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8006c12:	4808      	ldr	r0, [pc, #32]	@ (8006c34 <DEV_Module_Init+0x38>)
 8006c14:	f7fc fb90 	bl	8003338 <HAL_GPIO_WritePin>
    DEV_Digital_Write(DEV_RST_PIN, 1);
 8006c18:	2201      	movs	r2, #1
 8006c1a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8006c1e:	4805      	ldr	r0, [pc, #20]	@ (8006c34 <DEV_Module_Init+0x38>)
 8006c20:	f7fc fb8a 	bl	8003338 <HAL_GPIO_WritePin>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8006c24:	2104      	movs	r1, #4
 8006c26:	4804      	ldr	r0, [pc, #16]	@ (8006c38 <DEV_Module_Init+0x3c>)
 8006c28:	f7fe fd8c 	bl	8005744 <HAL_TIM_PWM_Start>
		return 0;
 8006c2c:	2300      	movs	r3, #0
}
 8006c2e:	4618      	mov	r0, r3
 8006c30:	bd80      	pop	{r7, pc}
 8006c32:	bf00      	nop
 8006c34:	40020400 	.word	0x40020400
 8006c38:	200001d8 	.word	0x200001d8

08006c3c <Paint_NewImage>:
    width   :   The width of the picture
    Height  :   The height of the picture
    Color   :   Whether the picture is inverted
******************************************************************************/
void Paint_NewImage(UWORD Width, UWORD Height, UWORD Rotate, UWORD Color)
{
 8006c3c:	b590      	push	{r4, r7, lr}
 8006c3e:	b083      	sub	sp, #12
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	4604      	mov	r4, r0
 8006c44:	4608      	mov	r0, r1
 8006c46:	4611      	mov	r1, r2
 8006c48:	461a      	mov	r2, r3
 8006c4a:	4623      	mov	r3, r4
 8006c4c:	80fb      	strh	r3, [r7, #6]
 8006c4e:	4603      	mov	r3, r0
 8006c50:	80bb      	strh	r3, [r7, #4]
 8006c52:	460b      	mov	r3, r1
 8006c54:	807b      	strh	r3, [r7, #2]
 8006c56:	4613      	mov	r3, r2
 8006c58:	803b      	strh	r3, [r7, #0]
    Paint.WidthMemory = Width;
 8006c5a:	4a1c      	ldr	r2, [pc, #112]	@ (8006ccc <Paint_NewImage+0x90>)
 8006c5c:	88fb      	ldrh	r3, [r7, #6]
 8006c5e:	8113      	strh	r3, [r2, #8]
    Paint.HeightMemory = Height;
 8006c60:	4a1a      	ldr	r2, [pc, #104]	@ (8006ccc <Paint_NewImage+0x90>)
 8006c62:	88bb      	ldrh	r3, [r7, #4]
 8006c64:	8153      	strh	r3, [r2, #10]
    Paint.Color = Color;    
 8006c66:	4a19      	ldr	r2, [pc, #100]	@ (8006ccc <Paint_NewImage+0x90>)
 8006c68:	883b      	ldrh	r3, [r7, #0]
 8006c6a:	8193      	strh	r3, [r2, #12]
    Paint.WidthByte = Width;
 8006c6c:	4a17      	ldr	r2, [pc, #92]	@ (8006ccc <Paint_NewImage+0x90>)
 8006c6e:	88fb      	ldrh	r3, [r7, #6]
 8006c70:	8253      	strh	r3, [r2, #18]
    Paint.HeightByte = Height;    
 8006c72:	4a16      	ldr	r2, [pc, #88]	@ (8006ccc <Paint_NewImage+0x90>)
 8006c74:	88bb      	ldrh	r3, [r7, #4]
 8006c76:	8293      	strh	r3, [r2, #20]
    printf("WidthByte = %d, HeightByte = %d\r\n", Paint.WidthByte, Paint.HeightByte);
 8006c78:	4b14      	ldr	r3, [pc, #80]	@ (8006ccc <Paint_NewImage+0x90>)
 8006c7a:	8a5b      	ldrh	r3, [r3, #18]
 8006c7c:	b29b      	uxth	r3, r3
 8006c7e:	4619      	mov	r1, r3
 8006c80:	4b12      	ldr	r3, [pc, #72]	@ (8006ccc <Paint_NewImage+0x90>)
 8006c82:	8a9b      	ldrh	r3, [r3, #20]
 8006c84:	b29b      	uxth	r3, r3
 8006c86:	461a      	mov	r2, r3
 8006c88:	4811      	ldr	r0, [pc, #68]	@ (8006cd0 <Paint_NewImage+0x94>)
 8006c8a:	f000 fdfb 	bl	8007884 <iprintf>
   
    Paint.Rotate = Rotate;
 8006c8e:	4a0f      	ldr	r2, [pc, #60]	@ (8006ccc <Paint_NewImage+0x90>)
 8006c90:	887b      	ldrh	r3, [r7, #2]
 8006c92:	81d3      	strh	r3, [r2, #14]
    Paint.Mirror = MIRROR_NONE;
 8006c94:	4b0d      	ldr	r3, [pc, #52]	@ (8006ccc <Paint_NewImage+0x90>)
 8006c96:	2200      	movs	r2, #0
 8006c98:	821a      	strh	r2, [r3, #16]
    
    if(Rotate == ROTATE_0 || Rotate == ROTATE_180) {
 8006c9a:	887b      	ldrh	r3, [r7, #2]
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d002      	beq.n	8006ca6 <Paint_NewImage+0x6a>
 8006ca0:	887b      	ldrh	r3, [r7, #2]
 8006ca2:	2bb4      	cmp	r3, #180	@ 0xb4
 8006ca4:	d106      	bne.n	8006cb4 <Paint_NewImage+0x78>
        Paint.Width = Width;
 8006ca6:	4a09      	ldr	r2, [pc, #36]	@ (8006ccc <Paint_NewImage+0x90>)
 8006ca8:	88fb      	ldrh	r3, [r7, #6]
 8006caa:	8093      	strh	r3, [r2, #4]
        Paint.Height = Height;
 8006cac:	4a07      	ldr	r2, [pc, #28]	@ (8006ccc <Paint_NewImage+0x90>)
 8006cae:	88bb      	ldrh	r3, [r7, #4]
 8006cb0:	80d3      	strh	r3, [r2, #6]
 8006cb2:	e006      	b.n	8006cc2 <Paint_NewImage+0x86>
    } else {
        Paint.Width = Height;
 8006cb4:	4a05      	ldr	r2, [pc, #20]	@ (8006ccc <Paint_NewImage+0x90>)
 8006cb6:	88bb      	ldrh	r3, [r7, #4]
 8006cb8:	8093      	strh	r3, [r2, #4]
        Paint.Height = Width;
 8006cba:	4a04      	ldr	r2, [pc, #16]	@ (8006ccc <Paint_NewImage+0x90>)
 8006cbc:	88fb      	ldrh	r3, [r7, #6]
 8006cbe:	80d3      	strh	r3, [r2, #6]
    }
}
 8006cc0:	bf00      	nop
 8006cc2:	bf00      	nop
 8006cc4:	370c      	adds	r7, #12
 8006cc6:	46bd      	mov	sp, r7
 8006cc8:	bd90      	pop	{r4, r7, pc}
 8006cca:	bf00      	nop
 8006ccc:	20000344 	.word	0x20000344
 8006cd0:	080085dc 	.word	0x080085dc

08006cd4 <Paint_SetClearFuntion>:
function:	Select Clear Funtion
parameter:
      Clear :   Pointer to Clear funtion 
******************************************************************************/
void Paint_SetClearFuntion(void (*Clear)(UWORD))
{
 8006cd4:	b480      	push	{r7}
 8006cd6:	b083      	sub	sp, #12
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	6078      	str	r0, [r7, #4]
  CLEAR=Clear;
 8006cdc:	4a04      	ldr	r2, [pc, #16]	@ (8006cf0 <Paint_SetClearFuntion+0x1c>)
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	6013      	str	r3, [r2, #0]
}
 8006ce2:	bf00      	nop
 8006ce4:	370c      	adds	r7, #12
 8006ce6:	46bd      	mov	sp, r7
 8006ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cec:	4770      	bx	lr
 8006cee:	bf00      	nop
 8006cf0:	20000360 	.word	0x20000360

08006cf4 <Paint_SetDisplayFuntion>:
function:	Select DisplayF untion
parameter:
      Display :   Pointer to display funtion 
******************************************************************************/
void Paint_SetDisplayFuntion(void (*Display)(UWORD,UWORD,UWORD))
{
 8006cf4:	b480      	push	{r7}
 8006cf6:	b083      	sub	sp, #12
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
  DISPLAY=Display;
 8006cfc:	4a04      	ldr	r2, [pc, #16]	@ (8006d10 <Paint_SetDisplayFuntion+0x1c>)
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	6013      	str	r3, [r2, #0]
}
 8006d02:	bf00      	nop
 8006d04:	370c      	adds	r7, #12
 8006d06:	46bd      	mov	sp, r7
 8006d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0c:	4770      	bx	lr
 8006d0e:	bf00      	nop
 8006d10:	2000035c 	.word	0x2000035c

08006d14 <Paint_SetRotate>:
function:	Select Image Rotate
parameter:
    Rotate   :   0,90,180,270
******************************************************************************/
void Paint_SetRotate(UWORD Rotate)
{
 8006d14:	b580      	push	{r7, lr}
 8006d16:	b082      	sub	sp, #8
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	4603      	mov	r3, r0
 8006d1c:	80fb      	strh	r3, [r7, #6]
    if(Rotate == ROTATE_0 || Rotate == ROTATE_90 || Rotate == ROTATE_180 || Rotate == ROTATE_270) {
 8006d1e:	88fb      	ldrh	r3, [r7, #6]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d009      	beq.n	8006d38 <Paint_SetRotate+0x24>
 8006d24:	88fb      	ldrh	r3, [r7, #6]
 8006d26:	2b5a      	cmp	r3, #90	@ 0x5a
 8006d28:	d006      	beq.n	8006d38 <Paint_SetRotate+0x24>
 8006d2a:	88fb      	ldrh	r3, [r7, #6]
 8006d2c:	2bb4      	cmp	r3, #180	@ 0xb4
 8006d2e:	d003      	beq.n	8006d38 <Paint_SetRotate+0x24>
 8006d30:	88fb      	ldrh	r3, [r7, #6]
 8006d32:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 8006d36:	d108      	bne.n	8006d4a <Paint_SetRotate+0x36>
        Debug("Set image Rotate %d\r\n", Rotate);
 8006d38:	88fb      	ldrh	r3, [r7, #6]
 8006d3a:	4619      	mov	r1, r3
 8006d3c:	4807      	ldr	r0, [pc, #28]	@ (8006d5c <Paint_SetRotate+0x48>)
 8006d3e:	f000 fda1 	bl	8007884 <iprintf>
        Paint.Rotate = Rotate;
 8006d42:	4a07      	ldr	r2, [pc, #28]	@ (8006d60 <Paint_SetRotate+0x4c>)
 8006d44:	88fb      	ldrh	r3, [r7, #6]
 8006d46:	81d3      	strh	r3, [r2, #14]
 8006d48:	e003      	b.n	8006d52 <Paint_SetRotate+0x3e>
    } else {
        Debug("rotate = 0, 90, 180, 270\r\n");
 8006d4a:	4806      	ldr	r0, [pc, #24]	@ (8006d64 <Paint_SetRotate+0x50>)
 8006d4c:	f000 fe02 	bl	8007954 <puts>
      //  exit(0);
    }
}
 8006d50:	bf00      	nop
 8006d52:	bf00      	nop
 8006d54:	3708      	adds	r7, #8
 8006d56:	46bd      	mov	sp, r7
 8006d58:	bd80      	pop	{r7, pc}
 8006d5a:	bf00      	nop
 8006d5c:	08008600 	.word	0x08008600
 8006d60:	20000344 	.word	0x20000344
 8006d64:	08008620 	.word	0x08008620

08006d68 <Paint_SetPixel>:
    Xpoint  :   At point X
    Ypoint  :   At point Y
    Color   :   Painted colors
******************************************************************************/
void Paint_SetPixel(UWORD Xpoint, UWORD Ypoint, UWORD Color)
{
 8006d68:	b580      	push	{r7, lr}
 8006d6a:	b084      	sub	sp, #16
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	4603      	mov	r3, r0
 8006d70:	80fb      	strh	r3, [r7, #6]
 8006d72:	460b      	mov	r3, r1
 8006d74:	80bb      	strh	r3, [r7, #4]
 8006d76:	4613      	mov	r3, r2
 8006d78:	807b      	strh	r3, [r7, #2]
    if(Xpoint > Paint.Width || Ypoint > Paint.Height){
 8006d7a:	4b50      	ldr	r3, [pc, #320]	@ (8006ebc <Paint_SetPixel+0x154>)
 8006d7c:	889b      	ldrh	r3, [r3, #4]
 8006d7e:	b29b      	uxth	r3, r3
 8006d80:	88fa      	ldrh	r2, [r7, #6]
 8006d82:	429a      	cmp	r2, r3
 8006d84:	d805      	bhi.n	8006d92 <Paint_SetPixel+0x2a>
 8006d86:	4b4d      	ldr	r3, [pc, #308]	@ (8006ebc <Paint_SetPixel+0x154>)
 8006d88:	88db      	ldrh	r3, [r3, #6]
 8006d8a:	b29b      	uxth	r3, r3
 8006d8c:	88ba      	ldrh	r2, [r7, #4]
 8006d8e:	429a      	cmp	r2, r3
 8006d90:	d903      	bls.n	8006d9a <Paint_SetPixel+0x32>
        Debug("Exceeding display boundaries\r\n");
 8006d92:	484b      	ldr	r0, [pc, #300]	@ (8006ec0 <Paint_SetPixel+0x158>)
 8006d94:	f000 fdde 	bl	8007954 <puts>
        return;
 8006d98:	e08c      	b.n	8006eb4 <Paint_SetPixel+0x14c>
    }      
    UWORD X, Y;

    switch(Paint.Rotate) {
 8006d9a:	4b48      	ldr	r3, [pc, #288]	@ (8006ebc <Paint_SetPixel+0x154>)
 8006d9c:	89db      	ldrh	r3, [r3, #14]
 8006d9e:	b29b      	uxth	r3, r3
 8006da0:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 8006da4:	d02d      	beq.n	8006e02 <Paint_SetPixel+0x9a>
 8006da6:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 8006daa:	f300 8080 	bgt.w	8006eae <Paint_SetPixel+0x146>
 8006dae:	2bb4      	cmp	r3, #180	@ 0xb4
 8006db0:	d016      	beq.n	8006de0 <Paint_SetPixel+0x78>
 8006db2:	2bb4      	cmp	r3, #180	@ 0xb4
 8006db4:	dc7b      	bgt.n	8006eae <Paint_SetPixel+0x146>
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d002      	beq.n	8006dc0 <Paint_SetPixel+0x58>
 8006dba:	2b5a      	cmp	r3, #90	@ 0x5a
 8006dbc:	d005      	beq.n	8006dca <Paint_SetPixel+0x62>
        X = Ypoint;
        Y = Paint.HeightMemory - Xpoint - 1;
        break;

    default:
        return;
 8006dbe:	e076      	b.n	8006eae <Paint_SetPixel+0x146>
        X = Xpoint;
 8006dc0:	88fb      	ldrh	r3, [r7, #6]
 8006dc2:	81fb      	strh	r3, [r7, #14]
        Y = Ypoint;  
 8006dc4:	88bb      	ldrh	r3, [r7, #4]
 8006dc6:	81bb      	strh	r3, [r7, #12]
        break;
 8006dc8:	e026      	b.n	8006e18 <Paint_SetPixel+0xb0>
        X = Paint.WidthMemory - Ypoint - 1;
 8006dca:	4b3c      	ldr	r3, [pc, #240]	@ (8006ebc <Paint_SetPixel+0x154>)
 8006dcc:	891b      	ldrh	r3, [r3, #8]
 8006dce:	b29a      	uxth	r2, r3
 8006dd0:	88bb      	ldrh	r3, [r7, #4]
 8006dd2:	1ad3      	subs	r3, r2, r3
 8006dd4:	b29b      	uxth	r3, r3
 8006dd6:	3b01      	subs	r3, #1
 8006dd8:	81fb      	strh	r3, [r7, #14]
        Y = Xpoint;
 8006dda:	88fb      	ldrh	r3, [r7, #6]
 8006ddc:	81bb      	strh	r3, [r7, #12]
        break;
 8006dde:	e01b      	b.n	8006e18 <Paint_SetPixel+0xb0>
        X = Paint.WidthMemory - Xpoint - 1;
 8006de0:	4b36      	ldr	r3, [pc, #216]	@ (8006ebc <Paint_SetPixel+0x154>)
 8006de2:	891b      	ldrh	r3, [r3, #8]
 8006de4:	b29a      	uxth	r2, r3
 8006de6:	88fb      	ldrh	r3, [r7, #6]
 8006de8:	1ad3      	subs	r3, r2, r3
 8006dea:	b29b      	uxth	r3, r3
 8006dec:	3b01      	subs	r3, #1
 8006dee:	81fb      	strh	r3, [r7, #14]
        Y = Paint.HeightMemory - Ypoint - 1;
 8006df0:	4b32      	ldr	r3, [pc, #200]	@ (8006ebc <Paint_SetPixel+0x154>)
 8006df2:	895b      	ldrh	r3, [r3, #10]
 8006df4:	b29a      	uxth	r2, r3
 8006df6:	88bb      	ldrh	r3, [r7, #4]
 8006df8:	1ad3      	subs	r3, r2, r3
 8006dfa:	b29b      	uxth	r3, r3
 8006dfc:	3b01      	subs	r3, #1
 8006dfe:	81bb      	strh	r3, [r7, #12]
        break;
 8006e00:	e00a      	b.n	8006e18 <Paint_SetPixel+0xb0>
        X = Ypoint;
 8006e02:	88bb      	ldrh	r3, [r7, #4]
 8006e04:	81fb      	strh	r3, [r7, #14]
        Y = Paint.HeightMemory - Xpoint - 1;
 8006e06:	4b2d      	ldr	r3, [pc, #180]	@ (8006ebc <Paint_SetPixel+0x154>)
 8006e08:	895b      	ldrh	r3, [r3, #10]
 8006e0a:	b29a      	uxth	r2, r3
 8006e0c:	88fb      	ldrh	r3, [r7, #6]
 8006e0e:	1ad3      	subs	r3, r2, r3
 8006e10:	b29b      	uxth	r3, r3
 8006e12:	3b01      	subs	r3, #1
 8006e14:	81bb      	strh	r3, [r7, #12]
        break;
 8006e16:	bf00      	nop
    }
    
    switch(Paint.Mirror) {
 8006e18:	4b28      	ldr	r3, [pc, #160]	@ (8006ebc <Paint_SetPixel+0x154>)
 8006e1a:	8a1b      	ldrh	r3, [r3, #16]
 8006e1c:	b29b      	uxth	r3, r3
 8006e1e:	2b03      	cmp	r3, #3
 8006e20:	d847      	bhi.n	8006eb2 <Paint_SetPixel+0x14a>
 8006e22:	a201      	add	r2, pc, #4	@ (adr r2, 8006e28 <Paint_SetPixel+0xc0>)
 8006e24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e28:	08006e7f 	.word	0x08006e7f
 8006e2c:	08006e39 	.word	0x08006e39
 8006e30:	08006e4b 	.word	0x08006e4b
 8006e34:	08006e5d 	.word	0x08006e5d
    case MIRROR_NONE:
        break;
    case MIRROR_HORIZONTAL:
        X = Paint.WidthMemory - X - 1;
 8006e38:	4b20      	ldr	r3, [pc, #128]	@ (8006ebc <Paint_SetPixel+0x154>)
 8006e3a:	891b      	ldrh	r3, [r3, #8]
 8006e3c:	b29a      	uxth	r2, r3
 8006e3e:	89fb      	ldrh	r3, [r7, #14]
 8006e40:	1ad3      	subs	r3, r2, r3
 8006e42:	b29b      	uxth	r3, r3
 8006e44:	3b01      	subs	r3, #1
 8006e46:	81fb      	strh	r3, [r7, #14]
        break;
 8006e48:	e01a      	b.n	8006e80 <Paint_SetPixel+0x118>
    case MIRROR_VERTICAL:
        Y = Paint.HeightMemory - Y - 1;
 8006e4a:	4b1c      	ldr	r3, [pc, #112]	@ (8006ebc <Paint_SetPixel+0x154>)
 8006e4c:	895b      	ldrh	r3, [r3, #10]
 8006e4e:	b29a      	uxth	r2, r3
 8006e50:	89bb      	ldrh	r3, [r7, #12]
 8006e52:	1ad3      	subs	r3, r2, r3
 8006e54:	b29b      	uxth	r3, r3
 8006e56:	3b01      	subs	r3, #1
 8006e58:	81bb      	strh	r3, [r7, #12]
        break;
 8006e5a:	e011      	b.n	8006e80 <Paint_SetPixel+0x118>
    case MIRROR_ORIGIN:
        X = Paint.WidthMemory - X - 1;
 8006e5c:	4b17      	ldr	r3, [pc, #92]	@ (8006ebc <Paint_SetPixel+0x154>)
 8006e5e:	891b      	ldrh	r3, [r3, #8]
 8006e60:	b29a      	uxth	r2, r3
 8006e62:	89fb      	ldrh	r3, [r7, #14]
 8006e64:	1ad3      	subs	r3, r2, r3
 8006e66:	b29b      	uxth	r3, r3
 8006e68:	3b01      	subs	r3, #1
 8006e6a:	81fb      	strh	r3, [r7, #14]
        Y = Paint.HeightMemory - Y - 1;
 8006e6c:	4b13      	ldr	r3, [pc, #76]	@ (8006ebc <Paint_SetPixel+0x154>)
 8006e6e:	895b      	ldrh	r3, [r3, #10]
 8006e70:	b29a      	uxth	r2, r3
 8006e72:	89bb      	ldrh	r3, [r7, #12]
 8006e74:	1ad3      	subs	r3, r2, r3
 8006e76:	b29b      	uxth	r3, r3
 8006e78:	3b01      	subs	r3, #1
 8006e7a:	81bb      	strh	r3, [r7, #12]
        break;
 8006e7c:	e000      	b.n	8006e80 <Paint_SetPixel+0x118>
        break;
 8006e7e:	bf00      	nop
    default:
        return;
    }

    // printf("x = %d, y = %d\r\n", X, Y);
    if(X > Paint.WidthMemory || Y > Paint.HeightMemory){
 8006e80:	4b0e      	ldr	r3, [pc, #56]	@ (8006ebc <Paint_SetPixel+0x154>)
 8006e82:	891b      	ldrh	r3, [r3, #8]
 8006e84:	b29b      	uxth	r3, r3
 8006e86:	89fa      	ldrh	r2, [r7, #14]
 8006e88:	429a      	cmp	r2, r3
 8006e8a:	d805      	bhi.n	8006e98 <Paint_SetPixel+0x130>
 8006e8c:	4b0b      	ldr	r3, [pc, #44]	@ (8006ebc <Paint_SetPixel+0x154>)
 8006e8e:	895b      	ldrh	r3, [r3, #10]
 8006e90:	b29b      	uxth	r3, r3
 8006e92:	89ba      	ldrh	r2, [r7, #12]
 8006e94:	429a      	cmp	r2, r3
 8006e96:	d903      	bls.n	8006ea0 <Paint_SetPixel+0x138>
        Debug("Exceeding display boundaries\r\n");
 8006e98:	4809      	ldr	r0, [pc, #36]	@ (8006ec0 <Paint_SetPixel+0x158>)
 8006e9a:	f000 fd5b 	bl	8007954 <puts>
        return;
 8006e9e:	e009      	b.n	8006eb4 <Paint_SetPixel+0x14c>
    }
    
   // UDOUBLE Addr = X / 8 + Y * Paint.WidthByte;
		DISPLAY(X,Y, Color);
 8006ea0:	4b08      	ldr	r3, [pc, #32]	@ (8006ec4 <Paint_SetPixel+0x15c>)
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	887a      	ldrh	r2, [r7, #2]
 8006ea6:	89b9      	ldrh	r1, [r7, #12]
 8006ea8:	89f8      	ldrh	r0, [r7, #14]
 8006eaa:	4798      	blx	r3
 8006eac:	e002      	b.n	8006eb4 <Paint_SetPixel+0x14c>
        return;
 8006eae:	bf00      	nop
 8006eb0:	e000      	b.n	8006eb4 <Paint_SetPixel+0x14c>
        return;
 8006eb2:	bf00      	nop
}
 8006eb4:	3710      	adds	r7, #16
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	bd80      	pop	{r7, pc}
 8006eba:	bf00      	nop
 8006ebc:	20000344 	.word	0x20000344
 8006ec0:	080086dc 	.word	0x080086dc
 8006ec4:	2000035c 	.word	0x2000035c

08006ec8 <Paint_Clear>:
function:	Clear the color of the picture
parameter:
    Color   :   Painted colors
******************************************************************************/
void Paint_Clear(UWORD Color)
{	
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	b082      	sub	sp, #8
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	4603      	mov	r3, r0
 8006ed0:	80fb      	strh	r3, [r7, #6]
	CLEAR(Color);
 8006ed2:	4b04      	ldr	r3, [pc, #16]	@ (8006ee4 <Paint_Clear+0x1c>)
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	88fa      	ldrh	r2, [r7, #6]
 8006ed8:	4610      	mov	r0, r2
 8006eda:	4798      	blx	r3
}
 8006edc:	bf00      	nop
 8006ede:	3708      	adds	r7, #8
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	bd80      	pop	{r7, pc}
 8006ee4:	20000360 	.word	0x20000360

08006ee8 <Paint_DrawChar>:
    Color_Background : Select the background color of the English character
    Color_Foreground : Select the foreground color of the English character
******************************************************************************/
void Paint_DrawChar(UWORD Xpoint, UWORD Ypoint, const char Acsii_Char,
                    sFONT* Font, UWORD Color_Background, UWORD Color_Foreground)
{
 8006ee8:	b580      	push	{r7, lr}
 8006eea:	b088      	sub	sp, #32
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	607b      	str	r3, [r7, #4]
 8006ef0:	4603      	mov	r3, r0
 8006ef2:	81fb      	strh	r3, [r7, #14]
 8006ef4:	460b      	mov	r3, r1
 8006ef6:	81bb      	strh	r3, [r7, #12]
 8006ef8:	4613      	mov	r3, r2
 8006efa:	72fb      	strb	r3, [r7, #11]
    UWORD Page, Column;

    if (Xpoint > Paint.Width || Ypoint > Paint.Height) {
 8006efc:	4b4e      	ldr	r3, [pc, #312]	@ (8007038 <Paint_DrawChar+0x150>)
 8006efe:	889b      	ldrh	r3, [r3, #4]
 8006f00:	b29b      	uxth	r3, r3
 8006f02:	89fa      	ldrh	r2, [r7, #14]
 8006f04:	429a      	cmp	r2, r3
 8006f06:	d805      	bhi.n	8006f14 <Paint_DrawChar+0x2c>
 8006f08:	4b4b      	ldr	r3, [pc, #300]	@ (8007038 <Paint_DrawChar+0x150>)
 8006f0a:	88db      	ldrh	r3, [r3, #6]
 8006f0c:	b29b      	uxth	r3, r3
 8006f0e:	89ba      	ldrh	r2, [r7, #12]
 8006f10:	429a      	cmp	r2, r3
 8006f12:	d903      	bls.n	8006f1c <Paint_DrawChar+0x34>
        Debug("Paint_DrawChar Input exceeds the normal display range\r\n");
 8006f14:	4849      	ldr	r0, [pc, #292]	@ (800703c <Paint_DrawChar+0x154>)
 8006f16:	f000 fd1d 	bl	8007954 <puts>
        return;
 8006f1a:	e089      	b.n	8007030 <Paint_DrawChar+0x148>
    }

    uint32_t Char_Offset = (Acsii_Char - ' ') * Font->Height * (Font->Width / 8 + (Font->Width % 8 ? 1 : 0));
 8006f1c:	7afb      	ldrb	r3, [r7, #11]
 8006f1e:	3b20      	subs	r3, #32
 8006f20:	687a      	ldr	r2, [r7, #4]
 8006f22:	88d2      	ldrh	r2, [r2, #6]
 8006f24:	fb02 f303 	mul.w	r3, r2, r3
 8006f28:	687a      	ldr	r2, [r7, #4]
 8006f2a:	8892      	ldrh	r2, [r2, #4]
 8006f2c:	08d2      	lsrs	r2, r2, #3
 8006f2e:	b292      	uxth	r2, r2
 8006f30:	4611      	mov	r1, r2
 8006f32:	687a      	ldr	r2, [r7, #4]
 8006f34:	8892      	ldrh	r2, [r2, #4]
 8006f36:	f002 0207 	and.w	r2, r2, #7
 8006f3a:	b292      	uxth	r2, r2
 8006f3c:	2a00      	cmp	r2, #0
 8006f3e:	bf14      	ite	ne
 8006f40:	2201      	movne	r2, #1
 8006f42:	2200      	moveq	r2, #0
 8006f44:	b2d2      	uxtb	r2, r2
 8006f46:	440a      	add	r2, r1
 8006f48:	fb02 f303 	mul.w	r3, r2, r3
 8006f4c:	617b      	str	r3, [r7, #20]
    const unsigned char *ptr = &Font->table[Char_Offset];
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681a      	ldr	r2, [r3, #0]
 8006f52:	697b      	ldr	r3, [r7, #20]
 8006f54:	4413      	add	r3, r2
 8006f56:	61bb      	str	r3, [r7, #24]

    for (Page = 0; Page < Font->Height; Page ++ ) {
 8006f58:	2300      	movs	r3, #0
 8006f5a:	83fb      	strh	r3, [r7, #30]
 8006f5c:	e063      	b.n	8007026 <Paint_DrawChar+0x13e>
        for (Column = 0; Column < Font->Width; Column ++ ) {
 8006f5e:	2300      	movs	r3, #0
 8006f60:	83bb      	strh	r3, [r7, #28]
 8006f62:	e04e      	b.n	8007002 <Paint_DrawChar+0x11a>

            //To determine whether the font background color and screen background color is consistent
            if (FONT_BACKGROUND == Color_Background) { //this process is to speed up the scan
 8006f64:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8006f66:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006f6a:	4293      	cmp	r3, r2
 8006f6c:	d118      	bne.n	8006fa0 <Paint_DrawChar+0xb8>
                if (*ptr & (0x80 >> (Column % 8)))
 8006f6e:	69bb      	ldr	r3, [r7, #24]
 8006f70:	781b      	ldrb	r3, [r3, #0]
 8006f72:	4619      	mov	r1, r3
 8006f74:	8bbb      	ldrh	r3, [r7, #28]
 8006f76:	f003 0307 	and.w	r3, r3, #7
 8006f7a:	2280      	movs	r2, #128	@ 0x80
 8006f7c:	fa42 f303 	asr.w	r3, r2, r3
 8006f80:	400b      	ands	r3, r1
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d031      	beq.n	8006fea <Paint_DrawChar+0x102>
                    Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Foreground);
 8006f86:	89fa      	ldrh	r2, [r7, #14]
 8006f88:	8bbb      	ldrh	r3, [r7, #28]
 8006f8a:	4413      	add	r3, r2
 8006f8c:	b298      	uxth	r0, r3
 8006f8e:	89ba      	ldrh	r2, [r7, #12]
 8006f90:	8bfb      	ldrh	r3, [r7, #30]
 8006f92:	4413      	add	r3, r2
 8006f94:	b29b      	uxth	r3, r3
 8006f96:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8006f98:	4619      	mov	r1, r3
 8006f9a:	f7ff fee5 	bl	8006d68 <Paint_SetPixel>
 8006f9e:	e024      	b.n	8006fea <Paint_DrawChar+0x102>
                    // Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Foreground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
            } else {
                if (*ptr & (0x80 >> (Column % 8))) {
 8006fa0:	69bb      	ldr	r3, [r7, #24]
 8006fa2:	781b      	ldrb	r3, [r3, #0]
 8006fa4:	4619      	mov	r1, r3
 8006fa6:	8bbb      	ldrh	r3, [r7, #28]
 8006fa8:	f003 0307 	and.w	r3, r3, #7
 8006fac:	2280      	movs	r2, #128	@ 0x80
 8006fae:	fa42 f303 	asr.w	r3, r2, r3
 8006fb2:	400b      	ands	r3, r1
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d00c      	beq.n	8006fd2 <Paint_DrawChar+0xea>
                    Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Foreground);
 8006fb8:	89fa      	ldrh	r2, [r7, #14]
 8006fba:	8bbb      	ldrh	r3, [r7, #28]
 8006fbc:	4413      	add	r3, r2
 8006fbe:	b298      	uxth	r0, r3
 8006fc0:	89ba      	ldrh	r2, [r7, #12]
 8006fc2:	8bfb      	ldrh	r3, [r7, #30]
 8006fc4:	4413      	add	r3, r2
 8006fc6:	b29b      	uxth	r3, r3
 8006fc8:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8006fca:	4619      	mov	r1, r3
 8006fcc:	f7ff fecc 	bl	8006d68 <Paint_SetPixel>
 8006fd0:	e00b      	b.n	8006fea <Paint_DrawChar+0x102>
                    // Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Foreground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
                } else {
                    Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Background);
 8006fd2:	89fa      	ldrh	r2, [r7, #14]
 8006fd4:	8bbb      	ldrh	r3, [r7, #28]
 8006fd6:	4413      	add	r3, r2
 8006fd8:	b298      	uxth	r0, r3
 8006fda:	89ba      	ldrh	r2, [r7, #12]
 8006fdc:	8bfb      	ldrh	r3, [r7, #30]
 8006fde:	4413      	add	r3, r2
 8006fe0:	b29b      	uxth	r3, r3
 8006fe2:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8006fe4:	4619      	mov	r1, r3
 8006fe6:	f7ff febf 	bl	8006d68 <Paint_SetPixel>
                    // Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Background, DOT_PIXEL_DFT, DOT_STYLE_DFT);
                }
            }
            //One pixel is 8 bits
            if (Column % 8 == 7)
 8006fea:	8bbb      	ldrh	r3, [r7, #28]
 8006fec:	f003 0307 	and.w	r3, r3, #7
 8006ff0:	b29b      	uxth	r3, r3
 8006ff2:	2b07      	cmp	r3, #7
 8006ff4:	d102      	bne.n	8006ffc <Paint_DrawChar+0x114>
                ptr++;
 8006ff6:	69bb      	ldr	r3, [r7, #24]
 8006ff8:	3301      	adds	r3, #1
 8006ffa:	61bb      	str	r3, [r7, #24]
        for (Column = 0; Column < Font->Width; Column ++ ) {
 8006ffc:	8bbb      	ldrh	r3, [r7, #28]
 8006ffe:	3301      	adds	r3, #1
 8007000:	83bb      	strh	r3, [r7, #28]
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	889b      	ldrh	r3, [r3, #4]
 8007006:	8bba      	ldrh	r2, [r7, #28]
 8007008:	429a      	cmp	r2, r3
 800700a:	d3ab      	bcc.n	8006f64 <Paint_DrawChar+0x7c>
        }// Write a line
        if (Font->Width % 8 != 0)
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	889b      	ldrh	r3, [r3, #4]
 8007010:	f003 0307 	and.w	r3, r3, #7
 8007014:	b29b      	uxth	r3, r3
 8007016:	2b00      	cmp	r3, #0
 8007018:	d002      	beq.n	8007020 <Paint_DrawChar+0x138>
            ptr++;
 800701a:	69bb      	ldr	r3, [r7, #24]
 800701c:	3301      	adds	r3, #1
 800701e:	61bb      	str	r3, [r7, #24]
    for (Page = 0; Page < Font->Height; Page ++ ) {
 8007020:	8bfb      	ldrh	r3, [r7, #30]
 8007022:	3301      	adds	r3, #1
 8007024:	83fb      	strh	r3, [r7, #30]
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	88db      	ldrh	r3, [r3, #6]
 800702a:	8bfa      	ldrh	r2, [r7, #30]
 800702c:	429a      	cmp	r2, r3
 800702e:	d396      	bcc.n	8006f5e <Paint_DrawChar+0x76>
    }// Write all
}
 8007030:	3720      	adds	r7, #32
 8007032:	46bd      	mov	sp, r7
 8007034:	bd80      	pop	{r7, pc}
 8007036:	bf00      	nop
 8007038:	20000344 	.word	0x20000344
 800703c:	080087f8 	.word	0x080087f8

08007040 <Paint_DrawString_EN>:
    Color_Background : Select the background color of the English character
    Color_Foreground : Select the foreground color of the English character
******************************************************************************/
void Paint_DrawString_EN(UWORD Xstart, UWORD Ystart, const char * pString,
                         sFONT* Font, UWORD Color_Background, UWORD Color_Foreground )
{
 8007040:	b580      	push	{r7, lr}
 8007042:	b088      	sub	sp, #32
 8007044:	af02      	add	r7, sp, #8
 8007046:	60ba      	str	r2, [r7, #8]
 8007048:	607b      	str	r3, [r7, #4]
 800704a:	4603      	mov	r3, r0
 800704c:	81fb      	strh	r3, [r7, #14]
 800704e:	460b      	mov	r3, r1
 8007050:	81bb      	strh	r3, [r7, #12]
    UWORD Xpoint = Xstart;
 8007052:	89fb      	ldrh	r3, [r7, #14]
 8007054:	82fb      	strh	r3, [r7, #22]
    UWORD Ypoint = Ystart;
 8007056:	89bb      	ldrh	r3, [r7, #12]
 8007058:	82bb      	strh	r3, [r7, #20]

    if (Xstart > Paint.Width || Ystart > Paint.Height) {
 800705a:	4b23      	ldr	r3, [pc, #140]	@ (80070e8 <Paint_DrawString_EN+0xa8>)
 800705c:	889b      	ldrh	r3, [r3, #4]
 800705e:	b29b      	uxth	r3, r3
 8007060:	89fa      	ldrh	r2, [r7, #14]
 8007062:	429a      	cmp	r2, r3
 8007064:	d805      	bhi.n	8007072 <Paint_DrawString_EN+0x32>
 8007066:	4b20      	ldr	r3, [pc, #128]	@ (80070e8 <Paint_DrawString_EN+0xa8>)
 8007068:	88db      	ldrh	r3, [r3, #6]
 800706a:	b29b      	uxth	r3, r3
 800706c:	89ba      	ldrh	r2, [r7, #12]
 800706e:	429a      	cmp	r2, r3
 8007070:	d933      	bls.n	80070da <Paint_DrawString_EN+0x9a>
        Debug("Paint_DrawString_EN Input exceeds the normal display range\r\n");
 8007072:	481e      	ldr	r0, [pc, #120]	@ (80070ec <Paint_DrawString_EN+0xac>)
 8007074:	f000 fc6e 	bl	8007954 <puts>
        return;
 8007078:	e033      	b.n	80070e2 <Paint_DrawString_EN+0xa2>
    }

    while (* pString != '\0') {
        //if X direction filled , reposition to(Xstart,Ypoint),Ypoint is Y direction plus the Height of the character
        if ((Xpoint + Font->Width ) > Paint.Width ) {
 800707a:	8afb      	ldrh	r3, [r7, #22]
 800707c:	687a      	ldr	r2, [r7, #4]
 800707e:	8892      	ldrh	r2, [r2, #4]
 8007080:	4413      	add	r3, r2
 8007082:	4a19      	ldr	r2, [pc, #100]	@ (80070e8 <Paint_DrawString_EN+0xa8>)
 8007084:	8892      	ldrh	r2, [r2, #4]
 8007086:	b292      	uxth	r2, r2
 8007088:	4293      	cmp	r3, r2
 800708a:	dd06      	ble.n	800709a <Paint_DrawString_EN+0x5a>
            Xpoint = Xstart;
 800708c:	89fb      	ldrh	r3, [r7, #14]
 800708e:	82fb      	strh	r3, [r7, #22]
            Ypoint += Font->Height;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	88da      	ldrh	r2, [r3, #6]
 8007094:	8abb      	ldrh	r3, [r7, #20]
 8007096:	4413      	add	r3, r2
 8007098:	82bb      	strh	r3, [r7, #20]
        }

        // If the Y direction is full, reposition to(Xstart, Ystart)
        if ((Ypoint  + Font->Height ) > Paint.Height ) {
 800709a:	8abb      	ldrh	r3, [r7, #20]
 800709c:	687a      	ldr	r2, [r7, #4]
 800709e:	88d2      	ldrh	r2, [r2, #6]
 80070a0:	4413      	add	r3, r2
 80070a2:	4a11      	ldr	r2, [pc, #68]	@ (80070e8 <Paint_DrawString_EN+0xa8>)
 80070a4:	88d2      	ldrh	r2, [r2, #6]
 80070a6:	b292      	uxth	r2, r2
 80070a8:	4293      	cmp	r3, r2
 80070aa:	dd03      	ble.n	80070b4 <Paint_DrawString_EN+0x74>
            Xpoint = Xstart;
 80070ac:	89fb      	ldrh	r3, [r7, #14]
 80070ae:	82fb      	strh	r3, [r7, #22]
            Ypoint = Ystart;
 80070b0:	89bb      	ldrh	r3, [r7, #12]
 80070b2:	82bb      	strh	r3, [r7, #20]
        }
        Paint_DrawChar(Xpoint, Ypoint, * pString, Font, Color_Background, Color_Foreground);
 80070b4:	68bb      	ldr	r3, [r7, #8]
 80070b6:	781a      	ldrb	r2, [r3, #0]
 80070b8:	8ab9      	ldrh	r1, [r7, #20]
 80070ba:	8af8      	ldrh	r0, [r7, #22]
 80070bc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80070be:	9301      	str	r3, [sp, #4]
 80070c0:	8c3b      	ldrh	r3, [r7, #32]
 80070c2:	9300      	str	r3, [sp, #0]
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	f7ff ff0f 	bl	8006ee8 <Paint_DrawChar>

        //The next character of the address
        pString ++;
 80070ca:	68bb      	ldr	r3, [r7, #8]
 80070cc:	3301      	adds	r3, #1
 80070ce:	60bb      	str	r3, [r7, #8]

        //The next word of the abscissa increases the font of the broadband
        Xpoint += Font->Width;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	889a      	ldrh	r2, [r3, #4]
 80070d4:	8afb      	ldrh	r3, [r7, #22]
 80070d6:	4413      	add	r3, r2
 80070d8:	82fb      	strh	r3, [r7, #22]
    while (* pString != '\0') {
 80070da:	68bb      	ldr	r3, [r7, #8]
 80070dc:	781b      	ldrb	r3, [r3, #0]
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d1cb      	bne.n	800707a <Paint_DrawString_EN+0x3a>
    }
}
 80070e2:	3718      	adds	r7, #24
 80070e4:	46bd      	mov	sp, r7
 80070e6:	bd80      	pop	{r7, pc}
 80070e8:	20000344 	.word	0x20000344
 80070ec:	08008838 	.word	0x08008838

080070f0 <LCD_2IN_Reset>:
/*******************************************************************************
function:
	Hardware reset
*******************************************************************************/
static void LCD_2IN_Reset(void)
{
 80070f0:	b580      	push	{r7, lr}
 80070f2:	af00      	add	r7, sp, #0
	LCD_2IN_RST_1;
 80070f4:	2201      	movs	r2, #1
 80070f6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80070fa:	480d      	ldr	r0, [pc, #52]	@ (8007130 <LCD_2IN_Reset+0x40>)
 80070fc:	f7fc f91c 	bl	8003338 <HAL_GPIO_WritePin>
	DEV_Delay_ms(100);
 8007100:	2064      	movs	r0, #100	@ 0x64
 8007102:	f7fb fe37 	bl	8002d74 <HAL_Delay>
	LCD_2IN_RST_0;
 8007106:	2200      	movs	r2, #0
 8007108:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800710c:	4808      	ldr	r0, [pc, #32]	@ (8007130 <LCD_2IN_Reset+0x40>)
 800710e:	f7fc f913 	bl	8003338 <HAL_GPIO_WritePin>
	DEV_Delay_ms(100);
 8007112:	2064      	movs	r0, #100	@ 0x64
 8007114:	f7fb fe2e 	bl	8002d74 <HAL_Delay>
	LCD_2IN_RST_1;
 8007118:	2201      	movs	r2, #1
 800711a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800711e:	4804      	ldr	r0, [pc, #16]	@ (8007130 <LCD_2IN_Reset+0x40>)
 8007120:	f7fc f90a 	bl	8003338 <HAL_GPIO_WritePin>
	DEV_Delay_ms(100);
 8007124:	2064      	movs	r0, #100	@ 0x64
 8007126:	f7fb fe25 	bl	8002d74 <HAL_Delay>
}
 800712a:	bf00      	nop
 800712c:	bd80      	pop	{r7, pc}
 800712e:	bf00      	nop
 8007130:	40020400 	.word	0x40020400

08007134 <LCD_2IN_Write_Command>:
/*******************************************************************************
function:
		Write data and commands
*******************************************************************************/
static void LCD_2IN_Write_Command(UBYTE data)	 
{	
 8007134:	b580      	push	{r7, lr}
 8007136:	b082      	sub	sp, #8
 8007138:	af00      	add	r7, sp, #0
 800713a:	4603      	mov	r3, r0
 800713c:	71fb      	strb	r3, [r7, #7]
	LCD_2IN_CS_0;
 800713e:	2200      	movs	r2, #0
 8007140:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8007144:	4808      	ldr	r0, [pc, #32]	@ (8007168 <LCD_2IN_Write_Command+0x34>)
 8007146:	f7fc f8f7 	bl	8003338 <HAL_GPIO_WritePin>
	LCD_2IN_DC_0;
 800714a:	2200      	movs	r2, #0
 800714c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8007150:	4805      	ldr	r0, [pc, #20]	@ (8007168 <LCD_2IN_Write_Command+0x34>)
 8007152:	f7fc f8f1 	bl	8003338 <HAL_GPIO_WritePin>
	DEV_SPI_WRITE(data);
 8007156:	79fb      	ldrb	r3, [r7, #7]
 8007158:	4618      	mov	r0, r3
 800715a:	f7ff fd3d 	bl	8006bd8 <DEV_SPI_WRite>
}
 800715e:	bf00      	nop
 8007160:	3708      	adds	r7, #8
 8007162:	46bd      	mov	sp, r7
 8007164:	bd80      	pop	{r7, pc}
 8007166:	bf00      	nop
 8007168:	40020400 	.word	0x40020400

0800716c <LCD_2IN_WriteData_Byte>:

static void LCD_2IN_WriteData_Byte(UBYTE data) 
{	
 800716c:	b580      	push	{r7, lr}
 800716e:	b082      	sub	sp, #8
 8007170:	af00      	add	r7, sp, #0
 8007172:	4603      	mov	r3, r0
 8007174:	71fb      	strb	r3, [r7, #7]
	LCD_2IN_CS_0;
 8007176:	2200      	movs	r2, #0
 8007178:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800717c:	480b      	ldr	r0, [pc, #44]	@ (80071ac <LCD_2IN_WriteData_Byte+0x40>)
 800717e:	f7fc f8db 	bl	8003338 <HAL_GPIO_WritePin>
	LCD_2IN_DC_1;
 8007182:	2201      	movs	r2, #1
 8007184:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8007188:	4808      	ldr	r0, [pc, #32]	@ (80071ac <LCD_2IN_WriteData_Byte+0x40>)
 800718a:	f7fc f8d5 	bl	8003338 <HAL_GPIO_WritePin>
	DEV_SPI_WRITE(data);  
 800718e:	79fb      	ldrb	r3, [r7, #7]
 8007190:	4618      	mov	r0, r3
 8007192:	f7ff fd21 	bl	8006bd8 <DEV_SPI_WRite>
	LCD_2IN_CS_1;
 8007196:	2201      	movs	r2, #1
 8007198:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800719c:	4803      	ldr	r0, [pc, #12]	@ (80071ac <LCD_2IN_WriteData_Byte+0x40>)
 800719e:	f7fc f8cb 	bl	8003338 <HAL_GPIO_WritePin>
}  
 80071a2:	bf00      	nop
 80071a4:	3708      	adds	r7, #8
 80071a6:	46bd      	mov	sp, r7
 80071a8:	bd80      	pop	{r7, pc}
 80071aa:	bf00      	nop
 80071ac:	40020400 	.word	0x40020400

080071b0 <LCD_2IN_WriteData_Word>:

void LCD_2IN_WriteData_Word(UWORD data)
{
 80071b0:	b580      	push	{r7, lr}
 80071b2:	b082      	sub	sp, #8
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	4603      	mov	r3, r0
 80071b8:	80fb      	strh	r3, [r7, #6]
	LCD_2IN_CS_0;
 80071ba:	2200      	movs	r2, #0
 80071bc:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80071c0:	480f      	ldr	r0, [pc, #60]	@ (8007200 <LCD_2IN_WriteData_Word+0x50>)
 80071c2:	f7fc f8b9 	bl	8003338 <HAL_GPIO_WritePin>
	LCD_2IN_DC_1;
 80071c6:	2201      	movs	r2, #1
 80071c8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80071cc:	480c      	ldr	r0, [pc, #48]	@ (8007200 <LCD_2IN_WriteData_Word+0x50>)
 80071ce:	f7fc f8b3 	bl	8003338 <HAL_GPIO_WritePin>
	DEV_SPI_WRITE((data>>8) & 0xff);
 80071d2:	88fb      	ldrh	r3, [r7, #6]
 80071d4:	0a1b      	lsrs	r3, r3, #8
 80071d6:	b29b      	uxth	r3, r3
 80071d8:	b2db      	uxtb	r3, r3
 80071da:	4618      	mov	r0, r3
 80071dc:	f7ff fcfc 	bl	8006bd8 <DEV_SPI_WRite>
	DEV_SPI_WRITE(data);
 80071e0:	88fb      	ldrh	r3, [r7, #6]
 80071e2:	b2db      	uxtb	r3, r3
 80071e4:	4618      	mov	r0, r3
 80071e6:	f7ff fcf7 	bl	8006bd8 <DEV_SPI_WRite>
	LCD_2IN_CS_1;
 80071ea:	2201      	movs	r2, #1
 80071ec:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80071f0:	4803      	ldr	r0, [pc, #12]	@ (8007200 <LCD_2IN_WriteData_Word+0x50>)
 80071f2:	f7fc f8a1 	bl	8003338 <HAL_GPIO_WritePin>
}	  
 80071f6:	bf00      	nop
 80071f8:	3708      	adds	r7, #8
 80071fa:	46bd      	mov	sp, r7
 80071fc:	bd80      	pop	{r7, pc}
 80071fe:	bf00      	nop
 8007200:	40020400 	.word	0x40020400

08007204 <LCD_2IN_Init>:
/******************************************************************************
function:	
		Common register initialization
******************************************************************************/
void LCD_2IN_Init(void)
{
 8007204:	b580      	push	{r7, lr}
 8007206:	af00      	add	r7, sp, #0
	LCD_2IN_Reset();
 8007208:	f7ff ff72 	bl	80070f0 <LCD_2IN_Reset>

	LCD_2IN_Write_Command(0x36);
 800720c:	2036      	movs	r0, #54	@ 0x36
 800720e:	f7ff ff91 	bl	8007134 <LCD_2IN_Write_Command>
	LCD_2IN_WriteData_Byte(0x00); 
 8007212:	2000      	movs	r0, #0
 8007214:	f7ff ffaa 	bl	800716c <LCD_2IN_WriteData_Byte>

	LCD_2IN_Write_Command(0x3A); 
 8007218:	203a      	movs	r0, #58	@ 0x3a
 800721a:	f7ff ff8b 	bl	8007134 <LCD_2IN_Write_Command>
	LCD_2IN_WriteData_Byte(0x05);
 800721e:	2005      	movs	r0, #5
 8007220:	f7ff ffa4 	bl	800716c <LCD_2IN_WriteData_Byte>

	LCD_2IN_Write_Command(0x21); 
 8007224:	2021      	movs	r0, #33	@ 0x21
 8007226:	f7ff ff85 	bl	8007134 <LCD_2IN_Write_Command>

	LCD_2IN_Write_Command(0x2A);
 800722a:	202a      	movs	r0, #42	@ 0x2a
 800722c:	f7ff ff82 	bl	8007134 <LCD_2IN_Write_Command>
	LCD_2IN_WriteData_Byte(0x00);
 8007230:	2000      	movs	r0, #0
 8007232:	f7ff ff9b 	bl	800716c <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x00);
 8007236:	2000      	movs	r0, #0
 8007238:	f7ff ff98 	bl	800716c <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x01);
 800723c:	2001      	movs	r0, #1
 800723e:	f7ff ff95 	bl	800716c <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x3F);
 8007242:	203f      	movs	r0, #63	@ 0x3f
 8007244:	f7ff ff92 	bl	800716c <LCD_2IN_WriteData_Byte>

	LCD_2IN_Write_Command(0x2B);
 8007248:	202b      	movs	r0, #43	@ 0x2b
 800724a:	f7ff ff73 	bl	8007134 <LCD_2IN_Write_Command>
	LCD_2IN_WriteData_Byte(0x00);
 800724e:	2000      	movs	r0, #0
 8007250:	f7ff ff8c 	bl	800716c <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x00);
 8007254:	2000      	movs	r0, #0
 8007256:	f7ff ff89 	bl	800716c <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x00);
 800725a:	2000      	movs	r0, #0
 800725c:	f7ff ff86 	bl	800716c <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0xEF);
 8007260:	20ef      	movs	r0, #239	@ 0xef
 8007262:	f7ff ff83 	bl	800716c <LCD_2IN_WriteData_Byte>

	LCD_2IN_Write_Command(0xB2);
 8007266:	20b2      	movs	r0, #178	@ 0xb2
 8007268:	f7ff ff64 	bl	8007134 <LCD_2IN_Write_Command>
	LCD_2IN_WriteData_Byte(0x0C);
 800726c:	200c      	movs	r0, #12
 800726e:	f7ff ff7d 	bl	800716c <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x0C);
 8007272:	200c      	movs	r0, #12
 8007274:	f7ff ff7a 	bl	800716c <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x00);
 8007278:	2000      	movs	r0, #0
 800727a:	f7ff ff77 	bl	800716c <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x33);
 800727e:	2033      	movs	r0, #51	@ 0x33
 8007280:	f7ff ff74 	bl	800716c <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x33);
 8007284:	2033      	movs	r0, #51	@ 0x33
 8007286:	f7ff ff71 	bl	800716c <LCD_2IN_WriteData_Byte>

	LCD_2IN_Write_Command(0xB7);
 800728a:	20b7      	movs	r0, #183	@ 0xb7
 800728c:	f7ff ff52 	bl	8007134 <LCD_2IN_Write_Command>
	LCD_2IN_WriteData_Byte(0x35); 
 8007290:	2035      	movs	r0, #53	@ 0x35
 8007292:	f7ff ff6b 	bl	800716c <LCD_2IN_WriteData_Byte>

	LCD_2IN_Write_Command(0xBB);
 8007296:	20bb      	movs	r0, #187	@ 0xbb
 8007298:	f7ff ff4c 	bl	8007134 <LCD_2IN_Write_Command>
	LCD_2IN_WriteData_Byte(0x1F);
 800729c:	201f      	movs	r0, #31
 800729e:	f7ff ff65 	bl	800716c <LCD_2IN_WriteData_Byte>

	LCD_2IN_Write_Command(0xC0);
 80072a2:	20c0      	movs	r0, #192	@ 0xc0
 80072a4:	f7ff ff46 	bl	8007134 <LCD_2IN_Write_Command>
	LCD_2IN_WriteData_Byte(0x2C);
 80072a8:	202c      	movs	r0, #44	@ 0x2c
 80072aa:	f7ff ff5f 	bl	800716c <LCD_2IN_WriteData_Byte>

	LCD_2IN_Write_Command(0xC2);
 80072ae:	20c2      	movs	r0, #194	@ 0xc2
 80072b0:	f7ff ff40 	bl	8007134 <LCD_2IN_Write_Command>
	LCD_2IN_WriteData_Byte(0x01);
 80072b4:	2001      	movs	r0, #1
 80072b6:	f7ff ff59 	bl	800716c <LCD_2IN_WriteData_Byte>

	LCD_2IN_Write_Command(0xC3);
 80072ba:	20c3      	movs	r0, #195	@ 0xc3
 80072bc:	f7ff ff3a 	bl	8007134 <LCD_2IN_Write_Command>
	LCD_2IN_WriteData_Byte(0x12);   
 80072c0:	2012      	movs	r0, #18
 80072c2:	f7ff ff53 	bl	800716c <LCD_2IN_WriteData_Byte>

	LCD_2IN_Write_Command(0xC4);
 80072c6:	20c4      	movs	r0, #196	@ 0xc4
 80072c8:	f7ff ff34 	bl	8007134 <LCD_2IN_Write_Command>
	LCD_2IN_WriteData_Byte(0x20);
 80072cc:	2020      	movs	r0, #32
 80072ce:	f7ff ff4d 	bl	800716c <LCD_2IN_WriteData_Byte>

	LCD_2IN_Write_Command(0xC6);
 80072d2:	20c6      	movs	r0, #198	@ 0xc6
 80072d4:	f7ff ff2e 	bl	8007134 <LCD_2IN_Write_Command>
	LCD_2IN_WriteData_Byte(0x0F); 
 80072d8:	200f      	movs	r0, #15
 80072da:	f7ff ff47 	bl	800716c <LCD_2IN_WriteData_Byte>

	LCD_2IN_Write_Command(0xD0);
 80072de:	20d0      	movs	r0, #208	@ 0xd0
 80072e0:	f7ff ff28 	bl	8007134 <LCD_2IN_Write_Command>
	LCD_2IN_WriteData_Byte(0xA4);
 80072e4:	20a4      	movs	r0, #164	@ 0xa4
 80072e6:	f7ff ff41 	bl	800716c <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0xA1);
 80072ea:	20a1      	movs	r0, #161	@ 0xa1
 80072ec:	f7ff ff3e 	bl	800716c <LCD_2IN_WriteData_Byte>

	LCD_2IN_Write_Command(0xE0);
 80072f0:	20e0      	movs	r0, #224	@ 0xe0
 80072f2:	f7ff ff1f 	bl	8007134 <LCD_2IN_Write_Command>
	LCD_2IN_WriteData_Byte(0xD0);
 80072f6:	20d0      	movs	r0, #208	@ 0xd0
 80072f8:	f7ff ff38 	bl	800716c <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x08);
 80072fc:	2008      	movs	r0, #8
 80072fe:	f7ff ff35 	bl	800716c <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x11);
 8007302:	2011      	movs	r0, #17
 8007304:	f7ff ff32 	bl	800716c <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x08);
 8007308:	2008      	movs	r0, #8
 800730a:	f7ff ff2f 	bl	800716c <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x0C);
 800730e:	200c      	movs	r0, #12
 8007310:	f7ff ff2c 	bl	800716c <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x15);
 8007314:	2015      	movs	r0, #21
 8007316:	f7ff ff29 	bl	800716c <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x39);
 800731a:	2039      	movs	r0, #57	@ 0x39
 800731c:	f7ff ff26 	bl	800716c <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x33);
 8007320:	2033      	movs	r0, #51	@ 0x33
 8007322:	f7ff ff23 	bl	800716c <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x50);
 8007326:	2050      	movs	r0, #80	@ 0x50
 8007328:	f7ff ff20 	bl	800716c <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x36);
 800732c:	2036      	movs	r0, #54	@ 0x36
 800732e:	f7ff ff1d 	bl	800716c <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x13);
 8007332:	2013      	movs	r0, #19
 8007334:	f7ff ff1a 	bl	800716c <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x14);
 8007338:	2014      	movs	r0, #20
 800733a:	f7ff ff17 	bl	800716c <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x29);
 800733e:	2029      	movs	r0, #41	@ 0x29
 8007340:	f7ff ff14 	bl	800716c <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x2D);
 8007344:	202d      	movs	r0, #45	@ 0x2d
 8007346:	f7ff ff11 	bl	800716c <LCD_2IN_WriteData_Byte>

	LCD_2IN_Write_Command(0xE1);
 800734a:	20e1      	movs	r0, #225	@ 0xe1
 800734c:	f7ff fef2 	bl	8007134 <LCD_2IN_Write_Command>
	LCD_2IN_WriteData_Byte(0xD0);
 8007350:	20d0      	movs	r0, #208	@ 0xd0
 8007352:	f7ff ff0b 	bl	800716c <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x08);
 8007356:	2008      	movs	r0, #8
 8007358:	f7ff ff08 	bl	800716c <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x10);
 800735c:	2010      	movs	r0, #16
 800735e:	f7ff ff05 	bl	800716c <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x08);
 8007362:	2008      	movs	r0, #8
 8007364:	f7ff ff02 	bl	800716c <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x06);
 8007368:	2006      	movs	r0, #6
 800736a:	f7ff feff 	bl	800716c <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x06);
 800736e:	2006      	movs	r0, #6
 8007370:	f7ff fefc 	bl	800716c <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x39);
 8007374:	2039      	movs	r0, #57	@ 0x39
 8007376:	f7ff fef9 	bl	800716c <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x44);
 800737a:	2044      	movs	r0, #68	@ 0x44
 800737c:	f7ff fef6 	bl	800716c <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x51);
 8007380:	2051      	movs	r0, #81	@ 0x51
 8007382:	f7ff fef3 	bl	800716c <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x0B);
 8007386:	200b      	movs	r0, #11
 8007388:	f7ff fef0 	bl	800716c <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x16);
 800738c:	2016      	movs	r0, #22
 800738e:	f7ff feed 	bl	800716c <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x14);
 8007392:	2014      	movs	r0, #20
 8007394:	f7ff feea 	bl	800716c <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x2F);
 8007398:	202f      	movs	r0, #47	@ 0x2f
 800739a:	f7ff fee7 	bl	800716c <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x31);
 800739e:	2031      	movs	r0, #49	@ 0x31
 80073a0:	f7ff fee4 	bl	800716c <LCD_2IN_WriteData_Byte>
	LCD_2IN_Write_Command(0x21);
 80073a4:	2021      	movs	r0, #33	@ 0x21
 80073a6:	f7ff fec5 	bl	8007134 <LCD_2IN_Write_Command>

	LCD_2IN_Write_Command(0x11);
 80073aa:	2011      	movs	r0, #17
 80073ac:	f7ff fec2 	bl	8007134 <LCD_2IN_Write_Command>

	LCD_2IN_Write_Command(0x29);
 80073b0:	2029      	movs	r0, #41	@ 0x29
 80073b2:	f7ff febf 	bl	8007134 <LCD_2IN_Write_Command>
}
 80073b6:	bf00      	nop
 80073b8:	bd80      	pop	{r7, pc}

080073ba <LCD_2IN_SetWindow>:
	  Ystart:	Start UWORD y coordinate
	  Xend  :	End UWORD coordinates
	  Yend  :	End UWORD coordinatesen
******************************************************************************/
void LCD_2IN_SetWindow(UWORD Xstart, UWORD Ystart, UWORD Xend, UWORD  Yend)
{ 
 80073ba:	b590      	push	{r4, r7, lr}
 80073bc:	b083      	sub	sp, #12
 80073be:	af00      	add	r7, sp, #0
 80073c0:	4604      	mov	r4, r0
 80073c2:	4608      	mov	r0, r1
 80073c4:	4611      	mov	r1, r2
 80073c6:	461a      	mov	r2, r3
 80073c8:	4623      	mov	r3, r4
 80073ca:	80fb      	strh	r3, [r7, #6]
 80073cc:	4603      	mov	r3, r0
 80073ce:	80bb      	strh	r3, [r7, #4]
 80073d0:	460b      	mov	r3, r1
 80073d2:	807b      	strh	r3, [r7, #2]
 80073d4:	4613      	mov	r3, r2
 80073d6:	803b      	strh	r3, [r7, #0]
	LCD_2IN_Write_Command(0x2a);
 80073d8:	202a      	movs	r0, #42	@ 0x2a
 80073da:	f7ff feab 	bl	8007134 <LCD_2IN_Write_Command>
	LCD_2IN_WriteData_Byte(Xstart >>8);
 80073de:	88fb      	ldrh	r3, [r7, #6]
 80073e0:	0a1b      	lsrs	r3, r3, #8
 80073e2:	b29b      	uxth	r3, r3
 80073e4:	b2db      	uxtb	r3, r3
 80073e6:	4618      	mov	r0, r3
 80073e8:	f7ff fec0 	bl	800716c <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(Xstart & 0xff);
 80073ec:	88fb      	ldrh	r3, [r7, #6]
 80073ee:	b2db      	uxtb	r3, r3
 80073f0:	4618      	mov	r0, r3
 80073f2:	f7ff febb 	bl	800716c <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte((Xend - 1) >> 8);
 80073f6:	887b      	ldrh	r3, [r7, #2]
 80073f8:	3b01      	subs	r3, #1
 80073fa:	121b      	asrs	r3, r3, #8
 80073fc:	b2db      	uxtb	r3, r3
 80073fe:	4618      	mov	r0, r3
 8007400:	f7ff feb4 	bl	800716c <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte((Xend - 1) & 0xff);
 8007404:	887b      	ldrh	r3, [r7, #2]
 8007406:	b2db      	uxtb	r3, r3
 8007408:	3b01      	subs	r3, #1
 800740a:	b2db      	uxtb	r3, r3
 800740c:	4618      	mov	r0, r3
 800740e:	f7ff fead 	bl	800716c <LCD_2IN_WriteData_Byte>

	LCD_2IN_Write_Command(0x2b);
 8007412:	202b      	movs	r0, #43	@ 0x2b
 8007414:	f7ff fe8e 	bl	8007134 <LCD_2IN_Write_Command>
	LCD_2IN_WriteData_Byte(Ystart >>8);
 8007418:	88bb      	ldrh	r3, [r7, #4]
 800741a:	0a1b      	lsrs	r3, r3, #8
 800741c:	b29b      	uxth	r3, r3
 800741e:	b2db      	uxtb	r3, r3
 8007420:	4618      	mov	r0, r3
 8007422:	f7ff fea3 	bl	800716c <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(Ystart & 0xff);
 8007426:	88bb      	ldrh	r3, [r7, #4]
 8007428:	b2db      	uxtb	r3, r3
 800742a:	4618      	mov	r0, r3
 800742c:	f7ff fe9e 	bl	800716c <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte((Yend - 1) >> 8);
 8007430:	883b      	ldrh	r3, [r7, #0]
 8007432:	3b01      	subs	r3, #1
 8007434:	121b      	asrs	r3, r3, #8
 8007436:	b2db      	uxtb	r3, r3
 8007438:	4618      	mov	r0, r3
 800743a:	f7ff fe97 	bl	800716c <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte((Yend - 1) & 0xff);
 800743e:	883b      	ldrh	r3, [r7, #0]
 8007440:	b2db      	uxtb	r3, r3
 8007442:	3b01      	subs	r3, #1
 8007444:	b2db      	uxtb	r3, r3
 8007446:	4618      	mov	r0, r3
 8007448:	f7ff fe90 	bl	800716c <LCD_2IN_WriteData_Byte>

	LCD_2IN_Write_Command(0x2C);
 800744c:	202c      	movs	r0, #44	@ 0x2c
 800744e:	f7ff fe71 	bl	8007134 <LCD_2IN_Write_Command>
}
 8007452:	bf00      	nop
 8007454:	370c      	adds	r7, #12
 8007456:	46bd      	mov	sp, r7
 8007458:	bd90      	pop	{r4, r7, pc}

0800745a <LCD_2IN_SetCursor>:
	  Xstart: 	Start UWORD x coordinate
	  Ystart:	Start UWORD y coordinate

******************************************************************************/
void LCD_2IN_SetCursor(UWORD X, UWORD Y)
{ 
 800745a:	b580      	push	{r7, lr}
 800745c:	b082      	sub	sp, #8
 800745e:	af00      	add	r7, sp, #0
 8007460:	4603      	mov	r3, r0
 8007462:	460a      	mov	r2, r1
 8007464:	80fb      	strh	r3, [r7, #6]
 8007466:	4613      	mov	r3, r2
 8007468:	80bb      	strh	r3, [r7, #4]
	LCD_2IN_Write_Command(0x2a);
 800746a:	202a      	movs	r0, #42	@ 0x2a
 800746c:	f7ff fe62 	bl	8007134 <LCD_2IN_Write_Command>
	LCD_2IN_WriteData_Byte(X >> 8);
 8007470:	88fb      	ldrh	r3, [r7, #6]
 8007472:	0a1b      	lsrs	r3, r3, #8
 8007474:	b29b      	uxth	r3, r3
 8007476:	b2db      	uxtb	r3, r3
 8007478:	4618      	mov	r0, r3
 800747a:	f7ff fe77 	bl	800716c <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(X);
 800747e:	88fb      	ldrh	r3, [r7, #6]
 8007480:	b2db      	uxtb	r3, r3
 8007482:	4618      	mov	r0, r3
 8007484:	f7ff fe72 	bl	800716c <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(X >> 8);
 8007488:	88fb      	ldrh	r3, [r7, #6]
 800748a:	0a1b      	lsrs	r3, r3, #8
 800748c:	b29b      	uxth	r3, r3
 800748e:	b2db      	uxtb	r3, r3
 8007490:	4618      	mov	r0, r3
 8007492:	f7ff fe6b 	bl	800716c <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(X);
 8007496:	88fb      	ldrh	r3, [r7, #6]
 8007498:	b2db      	uxtb	r3, r3
 800749a:	4618      	mov	r0, r3
 800749c:	f7ff fe66 	bl	800716c <LCD_2IN_WriteData_Byte>

	LCD_2IN_Write_Command(0x2b);
 80074a0:	202b      	movs	r0, #43	@ 0x2b
 80074a2:	f7ff fe47 	bl	8007134 <LCD_2IN_Write_Command>
	LCD_2IN_WriteData_Byte(Y >> 8);
 80074a6:	88bb      	ldrh	r3, [r7, #4]
 80074a8:	0a1b      	lsrs	r3, r3, #8
 80074aa:	b29b      	uxth	r3, r3
 80074ac:	b2db      	uxtb	r3, r3
 80074ae:	4618      	mov	r0, r3
 80074b0:	f7ff fe5c 	bl	800716c <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(Y);
 80074b4:	88bb      	ldrh	r3, [r7, #4]
 80074b6:	b2db      	uxtb	r3, r3
 80074b8:	4618      	mov	r0, r3
 80074ba:	f7ff fe57 	bl	800716c <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(Y >> 8);
 80074be:	88bb      	ldrh	r3, [r7, #4]
 80074c0:	0a1b      	lsrs	r3, r3, #8
 80074c2:	b29b      	uxth	r3, r3
 80074c4:	b2db      	uxtb	r3, r3
 80074c6:	4618      	mov	r0, r3
 80074c8:	f7ff fe50 	bl	800716c <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(Y);
 80074cc:	88bb      	ldrh	r3, [r7, #4]
 80074ce:	b2db      	uxtb	r3, r3
 80074d0:	4618      	mov	r0, r3
 80074d2:	f7ff fe4b 	bl	800716c <LCD_2IN_WriteData_Byte>

	LCD_2IN_Write_Command(0x2C);
 80074d6:	202c      	movs	r0, #44	@ 0x2c
 80074d8:	f7ff fe2c 	bl	8007134 <LCD_2IN_Write_Command>
}
 80074dc:	bf00      	nop
 80074de:	3708      	adds	r7, #8
 80074e0:	46bd      	mov	sp, r7
 80074e2:	bd80      	pop	{r7, pc}

080074e4 <LCD_2IN_Clear>:
function:	Clear screen function, refresh the screen to a certain color
parameter	:
	  Color :		The color you want to clear all the screen
******************************************************************************/
void LCD_2IN_Clear(UWORD Color)
{
 80074e4:	b580      	push	{r7, lr}
 80074e6:	b084      	sub	sp, #16
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	4603      	mov	r3, r0
 80074ec:	80fb      	strh	r3, [r7, #6]
    UWORD i,j;
    LCD_2IN_SetWindow(0, 0, LCD_2IN_WIDTH, LCD_2IN_HEIGHT);
 80074ee:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 80074f2:	22f0      	movs	r2, #240	@ 0xf0
 80074f4:	2100      	movs	r1, #0
 80074f6:	2000      	movs	r0, #0
 80074f8:	f7ff ff5f 	bl	80073ba <LCD_2IN_SetWindow>

	DEV_Digital_Write(DEV_DC_PIN, 1);
 80074fc:	2201      	movs	r2, #1
 80074fe:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8007502:	480f      	ldr	r0, [pc, #60]	@ (8007540 <LCD_2IN_Clear+0x5c>)
 8007504:	f7fb ff18 	bl	8003338 <HAL_GPIO_WritePin>
	for(i = 0; i < LCD_2IN_WIDTH; i++){
 8007508:	2300      	movs	r3, #0
 800750a:	81fb      	strh	r3, [r7, #14]
 800750c:	e010      	b.n	8007530 <LCD_2IN_Clear+0x4c>
		for(j = 0; j < LCD_2IN_HEIGHT; j++){
 800750e:	2300      	movs	r3, #0
 8007510:	81bb      	strh	r3, [r7, #12]
 8007512:	e006      	b.n	8007522 <LCD_2IN_Clear+0x3e>
			LCD_2IN_WriteData_Word(Color);
 8007514:	88fb      	ldrh	r3, [r7, #6]
 8007516:	4618      	mov	r0, r3
 8007518:	f7ff fe4a 	bl	80071b0 <LCD_2IN_WriteData_Word>
		for(j = 0; j < LCD_2IN_HEIGHT; j++){
 800751c:	89bb      	ldrh	r3, [r7, #12]
 800751e:	3301      	adds	r3, #1
 8007520:	81bb      	strh	r3, [r7, #12]
 8007522:	89bb      	ldrh	r3, [r7, #12]
 8007524:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8007528:	d3f4      	bcc.n	8007514 <LCD_2IN_Clear+0x30>
	for(i = 0; i < LCD_2IN_WIDTH; i++){
 800752a:	89fb      	ldrh	r3, [r7, #14]
 800752c:	3301      	adds	r3, #1
 800752e:	81fb      	strh	r3, [r7, #14]
 8007530:	89fb      	ldrh	r3, [r7, #14]
 8007532:	2bef      	cmp	r3, #239	@ 0xef
 8007534:	d9eb      	bls.n	800750e <LCD_2IN_Clear+0x2a>
		}
	 }
}
 8007536:	bf00      	nop
 8007538:	bf00      	nop
 800753a:	3710      	adds	r7, #16
 800753c:	46bd      	mov	sp, r7
 800753e:	bd80      	pop	{r7, pc}
 8007540:	40020400 	.word	0x40020400

08007544 <LCD_2IN_DrawPaint>:
	    X	: 	Set the X coordinate
	    Y	:	Set the Y coordinate
	  Color :	Set the color
******************************************************************************/
void LCD_2IN_DrawPaint(UWORD x, UWORD y, UWORD Color)
{
 8007544:	b580      	push	{r7, lr}
 8007546:	b082      	sub	sp, #8
 8007548:	af00      	add	r7, sp, #0
 800754a:	4603      	mov	r3, r0
 800754c:	80fb      	strh	r3, [r7, #6]
 800754e:	460b      	mov	r3, r1
 8007550:	80bb      	strh	r3, [r7, #4]
 8007552:	4613      	mov	r3, r2
 8007554:	807b      	strh	r3, [r7, #2]
	LCD_2IN_SetCursor(x, y);
 8007556:	88ba      	ldrh	r2, [r7, #4]
 8007558:	88fb      	ldrh	r3, [r7, #6]
 800755a:	4611      	mov	r1, r2
 800755c:	4618      	mov	r0, r3
 800755e:	f7ff ff7c 	bl	800745a <LCD_2IN_SetCursor>
	LCD_2IN_WriteData_Word(Color); 	    
 8007562:	887b      	ldrh	r3, [r7, #2]
 8007564:	4618      	mov	r0, r3
 8007566:	f7ff fe23 	bl	80071b0 <LCD_2IN_WriteData_Word>
}
 800756a:	bf00      	nop
 800756c:	3708      	adds	r7, #8
 800756e:	46bd      	mov	sp, r7
 8007570:	bd80      	pop	{r7, pc}
	...

08007574 <LCD_2IN_SetBackLight>:
	Setting backlight
parameter	:
	  value : Range 0~1000   Duty cycle is value/1000	
*******************************************************************************/
void LCD_2IN_SetBackLight(UWORD Value)
{
 8007574:	b480      	push	{r7}
 8007576:	b083      	sub	sp, #12
 8007578:	af00      	add	r7, sp, #0
 800757a:	4603      	mov	r3, r0
 800757c:	80fb      	strh	r3, [r7, #6]
	DEV_Set_PWM(Value);
 800757e:	4a04      	ldr	r2, [pc, #16]	@ (8007590 <LCD_2IN_SetBackLight+0x1c>)
 8007580:	88fb      	ldrh	r3, [r7, #6]
 8007582:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8007584:	bf00      	nop
 8007586:	370c      	adds	r7, #12
 8007588:	46bd      	mov	sp, r7
 800758a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800758e:	4770      	bx	lr
 8007590:	40000800 	.word	0x40000800

08007594 <malloc>:
 8007594:	4b02      	ldr	r3, [pc, #8]	@ (80075a0 <malloc+0xc>)
 8007596:	4601      	mov	r1, r0
 8007598:	6818      	ldr	r0, [r3, #0]
 800759a:	f000 b825 	b.w	80075e8 <_malloc_r>
 800759e:	bf00      	nop
 80075a0:	20000040 	.word	0x20000040

080075a4 <sbrk_aligned>:
 80075a4:	b570      	push	{r4, r5, r6, lr}
 80075a6:	4e0f      	ldr	r6, [pc, #60]	@ (80075e4 <sbrk_aligned+0x40>)
 80075a8:	460c      	mov	r4, r1
 80075aa:	6831      	ldr	r1, [r6, #0]
 80075ac:	4605      	mov	r5, r0
 80075ae:	b911      	cbnz	r1, 80075b6 <sbrk_aligned+0x12>
 80075b0:	f000 faec 	bl	8007b8c <_sbrk_r>
 80075b4:	6030      	str	r0, [r6, #0]
 80075b6:	4621      	mov	r1, r4
 80075b8:	4628      	mov	r0, r5
 80075ba:	f000 fae7 	bl	8007b8c <_sbrk_r>
 80075be:	1c43      	adds	r3, r0, #1
 80075c0:	d103      	bne.n	80075ca <sbrk_aligned+0x26>
 80075c2:	f04f 34ff 	mov.w	r4, #4294967295
 80075c6:	4620      	mov	r0, r4
 80075c8:	bd70      	pop	{r4, r5, r6, pc}
 80075ca:	1cc4      	adds	r4, r0, #3
 80075cc:	f024 0403 	bic.w	r4, r4, #3
 80075d0:	42a0      	cmp	r0, r4
 80075d2:	d0f8      	beq.n	80075c6 <sbrk_aligned+0x22>
 80075d4:	1a21      	subs	r1, r4, r0
 80075d6:	4628      	mov	r0, r5
 80075d8:	f000 fad8 	bl	8007b8c <_sbrk_r>
 80075dc:	3001      	adds	r0, #1
 80075de:	d1f2      	bne.n	80075c6 <sbrk_aligned+0x22>
 80075e0:	e7ef      	b.n	80075c2 <sbrk_aligned+0x1e>
 80075e2:	bf00      	nop
 80075e4:	20000364 	.word	0x20000364

080075e8 <_malloc_r>:
 80075e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80075ec:	1ccd      	adds	r5, r1, #3
 80075ee:	f025 0503 	bic.w	r5, r5, #3
 80075f2:	3508      	adds	r5, #8
 80075f4:	2d0c      	cmp	r5, #12
 80075f6:	bf38      	it	cc
 80075f8:	250c      	movcc	r5, #12
 80075fa:	2d00      	cmp	r5, #0
 80075fc:	4606      	mov	r6, r0
 80075fe:	db01      	blt.n	8007604 <_malloc_r+0x1c>
 8007600:	42a9      	cmp	r1, r5
 8007602:	d904      	bls.n	800760e <_malloc_r+0x26>
 8007604:	230c      	movs	r3, #12
 8007606:	6033      	str	r3, [r6, #0]
 8007608:	2000      	movs	r0, #0
 800760a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800760e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80076e4 <_malloc_r+0xfc>
 8007612:	f000 f869 	bl	80076e8 <__malloc_lock>
 8007616:	f8d8 3000 	ldr.w	r3, [r8]
 800761a:	461c      	mov	r4, r3
 800761c:	bb44      	cbnz	r4, 8007670 <_malloc_r+0x88>
 800761e:	4629      	mov	r1, r5
 8007620:	4630      	mov	r0, r6
 8007622:	f7ff ffbf 	bl	80075a4 <sbrk_aligned>
 8007626:	1c43      	adds	r3, r0, #1
 8007628:	4604      	mov	r4, r0
 800762a:	d158      	bne.n	80076de <_malloc_r+0xf6>
 800762c:	f8d8 4000 	ldr.w	r4, [r8]
 8007630:	4627      	mov	r7, r4
 8007632:	2f00      	cmp	r7, #0
 8007634:	d143      	bne.n	80076be <_malloc_r+0xd6>
 8007636:	2c00      	cmp	r4, #0
 8007638:	d04b      	beq.n	80076d2 <_malloc_r+0xea>
 800763a:	6823      	ldr	r3, [r4, #0]
 800763c:	4639      	mov	r1, r7
 800763e:	4630      	mov	r0, r6
 8007640:	eb04 0903 	add.w	r9, r4, r3
 8007644:	f000 faa2 	bl	8007b8c <_sbrk_r>
 8007648:	4581      	cmp	r9, r0
 800764a:	d142      	bne.n	80076d2 <_malloc_r+0xea>
 800764c:	6821      	ldr	r1, [r4, #0]
 800764e:	1a6d      	subs	r5, r5, r1
 8007650:	4629      	mov	r1, r5
 8007652:	4630      	mov	r0, r6
 8007654:	f7ff ffa6 	bl	80075a4 <sbrk_aligned>
 8007658:	3001      	adds	r0, #1
 800765a:	d03a      	beq.n	80076d2 <_malloc_r+0xea>
 800765c:	6823      	ldr	r3, [r4, #0]
 800765e:	442b      	add	r3, r5
 8007660:	6023      	str	r3, [r4, #0]
 8007662:	f8d8 3000 	ldr.w	r3, [r8]
 8007666:	685a      	ldr	r2, [r3, #4]
 8007668:	bb62      	cbnz	r2, 80076c4 <_malloc_r+0xdc>
 800766a:	f8c8 7000 	str.w	r7, [r8]
 800766e:	e00f      	b.n	8007690 <_malloc_r+0xa8>
 8007670:	6822      	ldr	r2, [r4, #0]
 8007672:	1b52      	subs	r2, r2, r5
 8007674:	d420      	bmi.n	80076b8 <_malloc_r+0xd0>
 8007676:	2a0b      	cmp	r2, #11
 8007678:	d917      	bls.n	80076aa <_malloc_r+0xc2>
 800767a:	1961      	adds	r1, r4, r5
 800767c:	42a3      	cmp	r3, r4
 800767e:	6025      	str	r5, [r4, #0]
 8007680:	bf18      	it	ne
 8007682:	6059      	strne	r1, [r3, #4]
 8007684:	6863      	ldr	r3, [r4, #4]
 8007686:	bf08      	it	eq
 8007688:	f8c8 1000 	streq.w	r1, [r8]
 800768c:	5162      	str	r2, [r4, r5]
 800768e:	604b      	str	r3, [r1, #4]
 8007690:	4630      	mov	r0, r6
 8007692:	f000 f82f 	bl	80076f4 <__malloc_unlock>
 8007696:	f104 000b 	add.w	r0, r4, #11
 800769a:	1d23      	adds	r3, r4, #4
 800769c:	f020 0007 	bic.w	r0, r0, #7
 80076a0:	1ac2      	subs	r2, r0, r3
 80076a2:	bf1c      	itt	ne
 80076a4:	1a1b      	subne	r3, r3, r0
 80076a6:	50a3      	strne	r3, [r4, r2]
 80076a8:	e7af      	b.n	800760a <_malloc_r+0x22>
 80076aa:	6862      	ldr	r2, [r4, #4]
 80076ac:	42a3      	cmp	r3, r4
 80076ae:	bf0c      	ite	eq
 80076b0:	f8c8 2000 	streq.w	r2, [r8]
 80076b4:	605a      	strne	r2, [r3, #4]
 80076b6:	e7eb      	b.n	8007690 <_malloc_r+0xa8>
 80076b8:	4623      	mov	r3, r4
 80076ba:	6864      	ldr	r4, [r4, #4]
 80076bc:	e7ae      	b.n	800761c <_malloc_r+0x34>
 80076be:	463c      	mov	r4, r7
 80076c0:	687f      	ldr	r7, [r7, #4]
 80076c2:	e7b6      	b.n	8007632 <_malloc_r+0x4a>
 80076c4:	461a      	mov	r2, r3
 80076c6:	685b      	ldr	r3, [r3, #4]
 80076c8:	42a3      	cmp	r3, r4
 80076ca:	d1fb      	bne.n	80076c4 <_malloc_r+0xdc>
 80076cc:	2300      	movs	r3, #0
 80076ce:	6053      	str	r3, [r2, #4]
 80076d0:	e7de      	b.n	8007690 <_malloc_r+0xa8>
 80076d2:	230c      	movs	r3, #12
 80076d4:	6033      	str	r3, [r6, #0]
 80076d6:	4630      	mov	r0, r6
 80076d8:	f000 f80c 	bl	80076f4 <__malloc_unlock>
 80076dc:	e794      	b.n	8007608 <_malloc_r+0x20>
 80076de:	6005      	str	r5, [r0, #0]
 80076e0:	e7d6      	b.n	8007690 <_malloc_r+0xa8>
 80076e2:	bf00      	nop
 80076e4:	20000368 	.word	0x20000368

080076e8 <__malloc_lock>:
 80076e8:	4801      	ldr	r0, [pc, #4]	@ (80076f0 <__malloc_lock+0x8>)
 80076ea:	f000 ba9c 	b.w	8007c26 <__retarget_lock_acquire_recursive>
 80076ee:	bf00      	nop
 80076f0:	200004ac 	.word	0x200004ac

080076f4 <__malloc_unlock>:
 80076f4:	4801      	ldr	r0, [pc, #4]	@ (80076fc <__malloc_unlock+0x8>)
 80076f6:	f000 ba97 	b.w	8007c28 <__retarget_lock_release_recursive>
 80076fa:	bf00      	nop
 80076fc:	200004ac 	.word	0x200004ac

08007700 <std>:
 8007700:	2300      	movs	r3, #0
 8007702:	b510      	push	{r4, lr}
 8007704:	4604      	mov	r4, r0
 8007706:	e9c0 3300 	strd	r3, r3, [r0]
 800770a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800770e:	6083      	str	r3, [r0, #8]
 8007710:	8181      	strh	r1, [r0, #12]
 8007712:	6643      	str	r3, [r0, #100]	@ 0x64
 8007714:	81c2      	strh	r2, [r0, #14]
 8007716:	6183      	str	r3, [r0, #24]
 8007718:	4619      	mov	r1, r3
 800771a:	2208      	movs	r2, #8
 800771c:	305c      	adds	r0, #92	@ 0x5c
 800771e:	f000 f9f9 	bl	8007b14 <memset>
 8007722:	4b0d      	ldr	r3, [pc, #52]	@ (8007758 <std+0x58>)
 8007724:	6263      	str	r3, [r4, #36]	@ 0x24
 8007726:	4b0d      	ldr	r3, [pc, #52]	@ (800775c <std+0x5c>)
 8007728:	62a3      	str	r3, [r4, #40]	@ 0x28
 800772a:	4b0d      	ldr	r3, [pc, #52]	@ (8007760 <std+0x60>)
 800772c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800772e:	4b0d      	ldr	r3, [pc, #52]	@ (8007764 <std+0x64>)
 8007730:	6323      	str	r3, [r4, #48]	@ 0x30
 8007732:	4b0d      	ldr	r3, [pc, #52]	@ (8007768 <std+0x68>)
 8007734:	6224      	str	r4, [r4, #32]
 8007736:	429c      	cmp	r4, r3
 8007738:	d006      	beq.n	8007748 <std+0x48>
 800773a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800773e:	4294      	cmp	r4, r2
 8007740:	d002      	beq.n	8007748 <std+0x48>
 8007742:	33d0      	adds	r3, #208	@ 0xd0
 8007744:	429c      	cmp	r4, r3
 8007746:	d105      	bne.n	8007754 <std+0x54>
 8007748:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800774c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007750:	f000 ba68 	b.w	8007c24 <__retarget_lock_init_recursive>
 8007754:	bd10      	pop	{r4, pc}
 8007756:	bf00      	nop
 8007758:	08007965 	.word	0x08007965
 800775c:	08007987 	.word	0x08007987
 8007760:	080079bf 	.word	0x080079bf
 8007764:	080079e3 	.word	0x080079e3
 8007768:	2000036c 	.word	0x2000036c

0800776c <stdio_exit_handler>:
 800776c:	4a02      	ldr	r2, [pc, #8]	@ (8007778 <stdio_exit_handler+0xc>)
 800776e:	4903      	ldr	r1, [pc, #12]	@ (800777c <stdio_exit_handler+0x10>)
 8007770:	4803      	ldr	r0, [pc, #12]	@ (8007780 <stdio_exit_handler+0x14>)
 8007772:	f000 b869 	b.w	8007848 <_fwalk_sglue>
 8007776:	bf00      	nop
 8007778:	20000034 	.word	0x20000034
 800777c:	08008379 	.word	0x08008379
 8007780:	20000044 	.word	0x20000044

08007784 <cleanup_stdio>:
 8007784:	6841      	ldr	r1, [r0, #4]
 8007786:	4b0c      	ldr	r3, [pc, #48]	@ (80077b8 <cleanup_stdio+0x34>)
 8007788:	4299      	cmp	r1, r3
 800778a:	b510      	push	{r4, lr}
 800778c:	4604      	mov	r4, r0
 800778e:	d001      	beq.n	8007794 <cleanup_stdio+0x10>
 8007790:	f000 fdf2 	bl	8008378 <_fflush_r>
 8007794:	68a1      	ldr	r1, [r4, #8]
 8007796:	4b09      	ldr	r3, [pc, #36]	@ (80077bc <cleanup_stdio+0x38>)
 8007798:	4299      	cmp	r1, r3
 800779a:	d002      	beq.n	80077a2 <cleanup_stdio+0x1e>
 800779c:	4620      	mov	r0, r4
 800779e:	f000 fdeb 	bl	8008378 <_fflush_r>
 80077a2:	68e1      	ldr	r1, [r4, #12]
 80077a4:	4b06      	ldr	r3, [pc, #24]	@ (80077c0 <cleanup_stdio+0x3c>)
 80077a6:	4299      	cmp	r1, r3
 80077a8:	d004      	beq.n	80077b4 <cleanup_stdio+0x30>
 80077aa:	4620      	mov	r0, r4
 80077ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80077b0:	f000 bde2 	b.w	8008378 <_fflush_r>
 80077b4:	bd10      	pop	{r4, pc}
 80077b6:	bf00      	nop
 80077b8:	2000036c 	.word	0x2000036c
 80077bc:	200003d4 	.word	0x200003d4
 80077c0:	2000043c 	.word	0x2000043c

080077c4 <global_stdio_init.part.0>:
 80077c4:	b510      	push	{r4, lr}
 80077c6:	4b0b      	ldr	r3, [pc, #44]	@ (80077f4 <global_stdio_init.part.0+0x30>)
 80077c8:	4c0b      	ldr	r4, [pc, #44]	@ (80077f8 <global_stdio_init.part.0+0x34>)
 80077ca:	4a0c      	ldr	r2, [pc, #48]	@ (80077fc <global_stdio_init.part.0+0x38>)
 80077cc:	601a      	str	r2, [r3, #0]
 80077ce:	4620      	mov	r0, r4
 80077d0:	2200      	movs	r2, #0
 80077d2:	2104      	movs	r1, #4
 80077d4:	f7ff ff94 	bl	8007700 <std>
 80077d8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80077dc:	2201      	movs	r2, #1
 80077de:	2109      	movs	r1, #9
 80077e0:	f7ff ff8e 	bl	8007700 <std>
 80077e4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80077e8:	2202      	movs	r2, #2
 80077ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80077ee:	2112      	movs	r1, #18
 80077f0:	f7ff bf86 	b.w	8007700 <std>
 80077f4:	200004a4 	.word	0x200004a4
 80077f8:	2000036c 	.word	0x2000036c
 80077fc:	0800776d 	.word	0x0800776d

08007800 <__sfp_lock_acquire>:
 8007800:	4801      	ldr	r0, [pc, #4]	@ (8007808 <__sfp_lock_acquire+0x8>)
 8007802:	f000 ba10 	b.w	8007c26 <__retarget_lock_acquire_recursive>
 8007806:	bf00      	nop
 8007808:	200004ad 	.word	0x200004ad

0800780c <__sfp_lock_release>:
 800780c:	4801      	ldr	r0, [pc, #4]	@ (8007814 <__sfp_lock_release+0x8>)
 800780e:	f000 ba0b 	b.w	8007c28 <__retarget_lock_release_recursive>
 8007812:	bf00      	nop
 8007814:	200004ad 	.word	0x200004ad

08007818 <__sinit>:
 8007818:	b510      	push	{r4, lr}
 800781a:	4604      	mov	r4, r0
 800781c:	f7ff fff0 	bl	8007800 <__sfp_lock_acquire>
 8007820:	6a23      	ldr	r3, [r4, #32]
 8007822:	b11b      	cbz	r3, 800782c <__sinit+0x14>
 8007824:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007828:	f7ff bff0 	b.w	800780c <__sfp_lock_release>
 800782c:	4b04      	ldr	r3, [pc, #16]	@ (8007840 <__sinit+0x28>)
 800782e:	6223      	str	r3, [r4, #32]
 8007830:	4b04      	ldr	r3, [pc, #16]	@ (8007844 <__sinit+0x2c>)
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	2b00      	cmp	r3, #0
 8007836:	d1f5      	bne.n	8007824 <__sinit+0xc>
 8007838:	f7ff ffc4 	bl	80077c4 <global_stdio_init.part.0>
 800783c:	e7f2      	b.n	8007824 <__sinit+0xc>
 800783e:	bf00      	nop
 8007840:	08007785 	.word	0x08007785
 8007844:	200004a4 	.word	0x200004a4

08007848 <_fwalk_sglue>:
 8007848:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800784c:	4607      	mov	r7, r0
 800784e:	4688      	mov	r8, r1
 8007850:	4614      	mov	r4, r2
 8007852:	2600      	movs	r6, #0
 8007854:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007858:	f1b9 0901 	subs.w	r9, r9, #1
 800785c:	d505      	bpl.n	800786a <_fwalk_sglue+0x22>
 800785e:	6824      	ldr	r4, [r4, #0]
 8007860:	2c00      	cmp	r4, #0
 8007862:	d1f7      	bne.n	8007854 <_fwalk_sglue+0xc>
 8007864:	4630      	mov	r0, r6
 8007866:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800786a:	89ab      	ldrh	r3, [r5, #12]
 800786c:	2b01      	cmp	r3, #1
 800786e:	d907      	bls.n	8007880 <_fwalk_sglue+0x38>
 8007870:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007874:	3301      	adds	r3, #1
 8007876:	d003      	beq.n	8007880 <_fwalk_sglue+0x38>
 8007878:	4629      	mov	r1, r5
 800787a:	4638      	mov	r0, r7
 800787c:	47c0      	blx	r8
 800787e:	4306      	orrs	r6, r0
 8007880:	3568      	adds	r5, #104	@ 0x68
 8007882:	e7e9      	b.n	8007858 <_fwalk_sglue+0x10>

08007884 <iprintf>:
 8007884:	b40f      	push	{r0, r1, r2, r3}
 8007886:	b507      	push	{r0, r1, r2, lr}
 8007888:	4906      	ldr	r1, [pc, #24]	@ (80078a4 <iprintf+0x20>)
 800788a:	ab04      	add	r3, sp, #16
 800788c:	6808      	ldr	r0, [r1, #0]
 800788e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007892:	6881      	ldr	r1, [r0, #8]
 8007894:	9301      	str	r3, [sp, #4]
 8007896:	f000 fa45 	bl	8007d24 <_vfiprintf_r>
 800789a:	b003      	add	sp, #12
 800789c:	f85d eb04 	ldr.w	lr, [sp], #4
 80078a0:	b004      	add	sp, #16
 80078a2:	4770      	bx	lr
 80078a4:	20000040 	.word	0x20000040

080078a8 <_puts_r>:
 80078a8:	6a03      	ldr	r3, [r0, #32]
 80078aa:	b570      	push	{r4, r5, r6, lr}
 80078ac:	6884      	ldr	r4, [r0, #8]
 80078ae:	4605      	mov	r5, r0
 80078b0:	460e      	mov	r6, r1
 80078b2:	b90b      	cbnz	r3, 80078b8 <_puts_r+0x10>
 80078b4:	f7ff ffb0 	bl	8007818 <__sinit>
 80078b8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80078ba:	07db      	lsls	r3, r3, #31
 80078bc:	d405      	bmi.n	80078ca <_puts_r+0x22>
 80078be:	89a3      	ldrh	r3, [r4, #12]
 80078c0:	0598      	lsls	r0, r3, #22
 80078c2:	d402      	bmi.n	80078ca <_puts_r+0x22>
 80078c4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80078c6:	f000 f9ae 	bl	8007c26 <__retarget_lock_acquire_recursive>
 80078ca:	89a3      	ldrh	r3, [r4, #12]
 80078cc:	0719      	lsls	r1, r3, #28
 80078ce:	d502      	bpl.n	80078d6 <_puts_r+0x2e>
 80078d0:	6923      	ldr	r3, [r4, #16]
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d135      	bne.n	8007942 <_puts_r+0x9a>
 80078d6:	4621      	mov	r1, r4
 80078d8:	4628      	mov	r0, r5
 80078da:	f000 f8c5 	bl	8007a68 <__swsetup_r>
 80078de:	b380      	cbz	r0, 8007942 <_puts_r+0x9a>
 80078e0:	f04f 35ff 	mov.w	r5, #4294967295
 80078e4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80078e6:	07da      	lsls	r2, r3, #31
 80078e8:	d405      	bmi.n	80078f6 <_puts_r+0x4e>
 80078ea:	89a3      	ldrh	r3, [r4, #12]
 80078ec:	059b      	lsls	r3, r3, #22
 80078ee:	d402      	bmi.n	80078f6 <_puts_r+0x4e>
 80078f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80078f2:	f000 f999 	bl	8007c28 <__retarget_lock_release_recursive>
 80078f6:	4628      	mov	r0, r5
 80078f8:	bd70      	pop	{r4, r5, r6, pc}
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	da04      	bge.n	8007908 <_puts_r+0x60>
 80078fe:	69a2      	ldr	r2, [r4, #24]
 8007900:	429a      	cmp	r2, r3
 8007902:	dc17      	bgt.n	8007934 <_puts_r+0x8c>
 8007904:	290a      	cmp	r1, #10
 8007906:	d015      	beq.n	8007934 <_puts_r+0x8c>
 8007908:	6823      	ldr	r3, [r4, #0]
 800790a:	1c5a      	adds	r2, r3, #1
 800790c:	6022      	str	r2, [r4, #0]
 800790e:	7019      	strb	r1, [r3, #0]
 8007910:	68a3      	ldr	r3, [r4, #8]
 8007912:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007916:	3b01      	subs	r3, #1
 8007918:	60a3      	str	r3, [r4, #8]
 800791a:	2900      	cmp	r1, #0
 800791c:	d1ed      	bne.n	80078fa <_puts_r+0x52>
 800791e:	2b00      	cmp	r3, #0
 8007920:	da11      	bge.n	8007946 <_puts_r+0x9e>
 8007922:	4622      	mov	r2, r4
 8007924:	210a      	movs	r1, #10
 8007926:	4628      	mov	r0, r5
 8007928:	f000 f85f 	bl	80079ea <__swbuf_r>
 800792c:	3001      	adds	r0, #1
 800792e:	d0d7      	beq.n	80078e0 <_puts_r+0x38>
 8007930:	250a      	movs	r5, #10
 8007932:	e7d7      	b.n	80078e4 <_puts_r+0x3c>
 8007934:	4622      	mov	r2, r4
 8007936:	4628      	mov	r0, r5
 8007938:	f000 f857 	bl	80079ea <__swbuf_r>
 800793c:	3001      	adds	r0, #1
 800793e:	d1e7      	bne.n	8007910 <_puts_r+0x68>
 8007940:	e7ce      	b.n	80078e0 <_puts_r+0x38>
 8007942:	3e01      	subs	r6, #1
 8007944:	e7e4      	b.n	8007910 <_puts_r+0x68>
 8007946:	6823      	ldr	r3, [r4, #0]
 8007948:	1c5a      	adds	r2, r3, #1
 800794a:	6022      	str	r2, [r4, #0]
 800794c:	220a      	movs	r2, #10
 800794e:	701a      	strb	r2, [r3, #0]
 8007950:	e7ee      	b.n	8007930 <_puts_r+0x88>
	...

08007954 <puts>:
 8007954:	4b02      	ldr	r3, [pc, #8]	@ (8007960 <puts+0xc>)
 8007956:	4601      	mov	r1, r0
 8007958:	6818      	ldr	r0, [r3, #0]
 800795a:	f7ff bfa5 	b.w	80078a8 <_puts_r>
 800795e:	bf00      	nop
 8007960:	20000040 	.word	0x20000040

08007964 <__sread>:
 8007964:	b510      	push	{r4, lr}
 8007966:	460c      	mov	r4, r1
 8007968:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800796c:	f000 f8fc 	bl	8007b68 <_read_r>
 8007970:	2800      	cmp	r0, #0
 8007972:	bfab      	itete	ge
 8007974:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007976:	89a3      	ldrhlt	r3, [r4, #12]
 8007978:	181b      	addge	r3, r3, r0
 800797a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800797e:	bfac      	ite	ge
 8007980:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007982:	81a3      	strhlt	r3, [r4, #12]
 8007984:	bd10      	pop	{r4, pc}

08007986 <__swrite>:
 8007986:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800798a:	461f      	mov	r7, r3
 800798c:	898b      	ldrh	r3, [r1, #12]
 800798e:	05db      	lsls	r3, r3, #23
 8007990:	4605      	mov	r5, r0
 8007992:	460c      	mov	r4, r1
 8007994:	4616      	mov	r6, r2
 8007996:	d505      	bpl.n	80079a4 <__swrite+0x1e>
 8007998:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800799c:	2302      	movs	r3, #2
 800799e:	2200      	movs	r2, #0
 80079a0:	f000 f8d0 	bl	8007b44 <_lseek_r>
 80079a4:	89a3      	ldrh	r3, [r4, #12]
 80079a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80079aa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80079ae:	81a3      	strh	r3, [r4, #12]
 80079b0:	4632      	mov	r2, r6
 80079b2:	463b      	mov	r3, r7
 80079b4:	4628      	mov	r0, r5
 80079b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80079ba:	f000 b8f7 	b.w	8007bac <_write_r>

080079be <__sseek>:
 80079be:	b510      	push	{r4, lr}
 80079c0:	460c      	mov	r4, r1
 80079c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079c6:	f000 f8bd 	bl	8007b44 <_lseek_r>
 80079ca:	1c43      	adds	r3, r0, #1
 80079cc:	89a3      	ldrh	r3, [r4, #12]
 80079ce:	bf15      	itete	ne
 80079d0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80079d2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80079d6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80079da:	81a3      	strheq	r3, [r4, #12]
 80079dc:	bf18      	it	ne
 80079de:	81a3      	strhne	r3, [r4, #12]
 80079e0:	bd10      	pop	{r4, pc}

080079e2 <__sclose>:
 80079e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079e6:	f000 b89d 	b.w	8007b24 <_close_r>

080079ea <__swbuf_r>:
 80079ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079ec:	460e      	mov	r6, r1
 80079ee:	4614      	mov	r4, r2
 80079f0:	4605      	mov	r5, r0
 80079f2:	b118      	cbz	r0, 80079fc <__swbuf_r+0x12>
 80079f4:	6a03      	ldr	r3, [r0, #32]
 80079f6:	b90b      	cbnz	r3, 80079fc <__swbuf_r+0x12>
 80079f8:	f7ff ff0e 	bl	8007818 <__sinit>
 80079fc:	69a3      	ldr	r3, [r4, #24]
 80079fe:	60a3      	str	r3, [r4, #8]
 8007a00:	89a3      	ldrh	r3, [r4, #12]
 8007a02:	071a      	lsls	r2, r3, #28
 8007a04:	d501      	bpl.n	8007a0a <__swbuf_r+0x20>
 8007a06:	6923      	ldr	r3, [r4, #16]
 8007a08:	b943      	cbnz	r3, 8007a1c <__swbuf_r+0x32>
 8007a0a:	4621      	mov	r1, r4
 8007a0c:	4628      	mov	r0, r5
 8007a0e:	f000 f82b 	bl	8007a68 <__swsetup_r>
 8007a12:	b118      	cbz	r0, 8007a1c <__swbuf_r+0x32>
 8007a14:	f04f 37ff 	mov.w	r7, #4294967295
 8007a18:	4638      	mov	r0, r7
 8007a1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007a1c:	6823      	ldr	r3, [r4, #0]
 8007a1e:	6922      	ldr	r2, [r4, #16]
 8007a20:	1a98      	subs	r0, r3, r2
 8007a22:	6963      	ldr	r3, [r4, #20]
 8007a24:	b2f6      	uxtb	r6, r6
 8007a26:	4283      	cmp	r3, r0
 8007a28:	4637      	mov	r7, r6
 8007a2a:	dc05      	bgt.n	8007a38 <__swbuf_r+0x4e>
 8007a2c:	4621      	mov	r1, r4
 8007a2e:	4628      	mov	r0, r5
 8007a30:	f000 fca2 	bl	8008378 <_fflush_r>
 8007a34:	2800      	cmp	r0, #0
 8007a36:	d1ed      	bne.n	8007a14 <__swbuf_r+0x2a>
 8007a38:	68a3      	ldr	r3, [r4, #8]
 8007a3a:	3b01      	subs	r3, #1
 8007a3c:	60a3      	str	r3, [r4, #8]
 8007a3e:	6823      	ldr	r3, [r4, #0]
 8007a40:	1c5a      	adds	r2, r3, #1
 8007a42:	6022      	str	r2, [r4, #0]
 8007a44:	701e      	strb	r6, [r3, #0]
 8007a46:	6962      	ldr	r2, [r4, #20]
 8007a48:	1c43      	adds	r3, r0, #1
 8007a4a:	429a      	cmp	r2, r3
 8007a4c:	d004      	beq.n	8007a58 <__swbuf_r+0x6e>
 8007a4e:	89a3      	ldrh	r3, [r4, #12]
 8007a50:	07db      	lsls	r3, r3, #31
 8007a52:	d5e1      	bpl.n	8007a18 <__swbuf_r+0x2e>
 8007a54:	2e0a      	cmp	r6, #10
 8007a56:	d1df      	bne.n	8007a18 <__swbuf_r+0x2e>
 8007a58:	4621      	mov	r1, r4
 8007a5a:	4628      	mov	r0, r5
 8007a5c:	f000 fc8c 	bl	8008378 <_fflush_r>
 8007a60:	2800      	cmp	r0, #0
 8007a62:	d0d9      	beq.n	8007a18 <__swbuf_r+0x2e>
 8007a64:	e7d6      	b.n	8007a14 <__swbuf_r+0x2a>
	...

08007a68 <__swsetup_r>:
 8007a68:	b538      	push	{r3, r4, r5, lr}
 8007a6a:	4b29      	ldr	r3, [pc, #164]	@ (8007b10 <__swsetup_r+0xa8>)
 8007a6c:	4605      	mov	r5, r0
 8007a6e:	6818      	ldr	r0, [r3, #0]
 8007a70:	460c      	mov	r4, r1
 8007a72:	b118      	cbz	r0, 8007a7c <__swsetup_r+0x14>
 8007a74:	6a03      	ldr	r3, [r0, #32]
 8007a76:	b90b      	cbnz	r3, 8007a7c <__swsetup_r+0x14>
 8007a78:	f7ff fece 	bl	8007818 <__sinit>
 8007a7c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007a80:	0719      	lsls	r1, r3, #28
 8007a82:	d422      	bmi.n	8007aca <__swsetup_r+0x62>
 8007a84:	06da      	lsls	r2, r3, #27
 8007a86:	d407      	bmi.n	8007a98 <__swsetup_r+0x30>
 8007a88:	2209      	movs	r2, #9
 8007a8a:	602a      	str	r2, [r5, #0]
 8007a8c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007a90:	81a3      	strh	r3, [r4, #12]
 8007a92:	f04f 30ff 	mov.w	r0, #4294967295
 8007a96:	e033      	b.n	8007b00 <__swsetup_r+0x98>
 8007a98:	0758      	lsls	r0, r3, #29
 8007a9a:	d512      	bpl.n	8007ac2 <__swsetup_r+0x5a>
 8007a9c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007a9e:	b141      	cbz	r1, 8007ab2 <__swsetup_r+0x4a>
 8007aa0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007aa4:	4299      	cmp	r1, r3
 8007aa6:	d002      	beq.n	8007aae <__swsetup_r+0x46>
 8007aa8:	4628      	mov	r0, r5
 8007aaa:	f000 f8c7 	bl	8007c3c <_free_r>
 8007aae:	2300      	movs	r3, #0
 8007ab0:	6363      	str	r3, [r4, #52]	@ 0x34
 8007ab2:	89a3      	ldrh	r3, [r4, #12]
 8007ab4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007ab8:	81a3      	strh	r3, [r4, #12]
 8007aba:	2300      	movs	r3, #0
 8007abc:	6063      	str	r3, [r4, #4]
 8007abe:	6923      	ldr	r3, [r4, #16]
 8007ac0:	6023      	str	r3, [r4, #0]
 8007ac2:	89a3      	ldrh	r3, [r4, #12]
 8007ac4:	f043 0308 	orr.w	r3, r3, #8
 8007ac8:	81a3      	strh	r3, [r4, #12]
 8007aca:	6923      	ldr	r3, [r4, #16]
 8007acc:	b94b      	cbnz	r3, 8007ae2 <__swsetup_r+0x7a>
 8007ace:	89a3      	ldrh	r3, [r4, #12]
 8007ad0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007ad4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007ad8:	d003      	beq.n	8007ae2 <__swsetup_r+0x7a>
 8007ada:	4621      	mov	r1, r4
 8007adc:	4628      	mov	r0, r5
 8007ade:	f000 fc99 	bl	8008414 <__smakebuf_r>
 8007ae2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007ae6:	f013 0201 	ands.w	r2, r3, #1
 8007aea:	d00a      	beq.n	8007b02 <__swsetup_r+0x9a>
 8007aec:	2200      	movs	r2, #0
 8007aee:	60a2      	str	r2, [r4, #8]
 8007af0:	6962      	ldr	r2, [r4, #20]
 8007af2:	4252      	negs	r2, r2
 8007af4:	61a2      	str	r2, [r4, #24]
 8007af6:	6922      	ldr	r2, [r4, #16]
 8007af8:	b942      	cbnz	r2, 8007b0c <__swsetup_r+0xa4>
 8007afa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007afe:	d1c5      	bne.n	8007a8c <__swsetup_r+0x24>
 8007b00:	bd38      	pop	{r3, r4, r5, pc}
 8007b02:	0799      	lsls	r1, r3, #30
 8007b04:	bf58      	it	pl
 8007b06:	6962      	ldrpl	r2, [r4, #20]
 8007b08:	60a2      	str	r2, [r4, #8]
 8007b0a:	e7f4      	b.n	8007af6 <__swsetup_r+0x8e>
 8007b0c:	2000      	movs	r0, #0
 8007b0e:	e7f7      	b.n	8007b00 <__swsetup_r+0x98>
 8007b10:	20000040 	.word	0x20000040

08007b14 <memset>:
 8007b14:	4402      	add	r2, r0
 8007b16:	4603      	mov	r3, r0
 8007b18:	4293      	cmp	r3, r2
 8007b1a:	d100      	bne.n	8007b1e <memset+0xa>
 8007b1c:	4770      	bx	lr
 8007b1e:	f803 1b01 	strb.w	r1, [r3], #1
 8007b22:	e7f9      	b.n	8007b18 <memset+0x4>

08007b24 <_close_r>:
 8007b24:	b538      	push	{r3, r4, r5, lr}
 8007b26:	4d06      	ldr	r5, [pc, #24]	@ (8007b40 <_close_r+0x1c>)
 8007b28:	2300      	movs	r3, #0
 8007b2a:	4604      	mov	r4, r0
 8007b2c:	4608      	mov	r0, r1
 8007b2e:	602b      	str	r3, [r5, #0]
 8007b30:	f7fa fc1b 	bl	800236a <_close>
 8007b34:	1c43      	adds	r3, r0, #1
 8007b36:	d102      	bne.n	8007b3e <_close_r+0x1a>
 8007b38:	682b      	ldr	r3, [r5, #0]
 8007b3a:	b103      	cbz	r3, 8007b3e <_close_r+0x1a>
 8007b3c:	6023      	str	r3, [r4, #0]
 8007b3e:	bd38      	pop	{r3, r4, r5, pc}
 8007b40:	200004a8 	.word	0x200004a8

08007b44 <_lseek_r>:
 8007b44:	b538      	push	{r3, r4, r5, lr}
 8007b46:	4d07      	ldr	r5, [pc, #28]	@ (8007b64 <_lseek_r+0x20>)
 8007b48:	4604      	mov	r4, r0
 8007b4a:	4608      	mov	r0, r1
 8007b4c:	4611      	mov	r1, r2
 8007b4e:	2200      	movs	r2, #0
 8007b50:	602a      	str	r2, [r5, #0]
 8007b52:	461a      	mov	r2, r3
 8007b54:	f7fa fc30 	bl	80023b8 <_lseek>
 8007b58:	1c43      	adds	r3, r0, #1
 8007b5a:	d102      	bne.n	8007b62 <_lseek_r+0x1e>
 8007b5c:	682b      	ldr	r3, [r5, #0]
 8007b5e:	b103      	cbz	r3, 8007b62 <_lseek_r+0x1e>
 8007b60:	6023      	str	r3, [r4, #0]
 8007b62:	bd38      	pop	{r3, r4, r5, pc}
 8007b64:	200004a8 	.word	0x200004a8

08007b68 <_read_r>:
 8007b68:	b538      	push	{r3, r4, r5, lr}
 8007b6a:	4d07      	ldr	r5, [pc, #28]	@ (8007b88 <_read_r+0x20>)
 8007b6c:	4604      	mov	r4, r0
 8007b6e:	4608      	mov	r0, r1
 8007b70:	4611      	mov	r1, r2
 8007b72:	2200      	movs	r2, #0
 8007b74:	602a      	str	r2, [r5, #0]
 8007b76:	461a      	mov	r2, r3
 8007b78:	f7fa fbbe 	bl	80022f8 <_read>
 8007b7c:	1c43      	adds	r3, r0, #1
 8007b7e:	d102      	bne.n	8007b86 <_read_r+0x1e>
 8007b80:	682b      	ldr	r3, [r5, #0]
 8007b82:	b103      	cbz	r3, 8007b86 <_read_r+0x1e>
 8007b84:	6023      	str	r3, [r4, #0]
 8007b86:	bd38      	pop	{r3, r4, r5, pc}
 8007b88:	200004a8 	.word	0x200004a8

08007b8c <_sbrk_r>:
 8007b8c:	b538      	push	{r3, r4, r5, lr}
 8007b8e:	4d06      	ldr	r5, [pc, #24]	@ (8007ba8 <_sbrk_r+0x1c>)
 8007b90:	2300      	movs	r3, #0
 8007b92:	4604      	mov	r4, r0
 8007b94:	4608      	mov	r0, r1
 8007b96:	602b      	str	r3, [r5, #0]
 8007b98:	f7fa fc1c 	bl	80023d4 <_sbrk>
 8007b9c:	1c43      	adds	r3, r0, #1
 8007b9e:	d102      	bne.n	8007ba6 <_sbrk_r+0x1a>
 8007ba0:	682b      	ldr	r3, [r5, #0]
 8007ba2:	b103      	cbz	r3, 8007ba6 <_sbrk_r+0x1a>
 8007ba4:	6023      	str	r3, [r4, #0]
 8007ba6:	bd38      	pop	{r3, r4, r5, pc}
 8007ba8:	200004a8 	.word	0x200004a8

08007bac <_write_r>:
 8007bac:	b538      	push	{r3, r4, r5, lr}
 8007bae:	4d07      	ldr	r5, [pc, #28]	@ (8007bcc <_write_r+0x20>)
 8007bb0:	4604      	mov	r4, r0
 8007bb2:	4608      	mov	r0, r1
 8007bb4:	4611      	mov	r1, r2
 8007bb6:	2200      	movs	r2, #0
 8007bb8:	602a      	str	r2, [r5, #0]
 8007bba:	461a      	mov	r2, r3
 8007bbc:	f7fa fbb9 	bl	8002332 <_write>
 8007bc0:	1c43      	adds	r3, r0, #1
 8007bc2:	d102      	bne.n	8007bca <_write_r+0x1e>
 8007bc4:	682b      	ldr	r3, [r5, #0]
 8007bc6:	b103      	cbz	r3, 8007bca <_write_r+0x1e>
 8007bc8:	6023      	str	r3, [r4, #0]
 8007bca:	bd38      	pop	{r3, r4, r5, pc}
 8007bcc:	200004a8 	.word	0x200004a8

08007bd0 <__errno>:
 8007bd0:	4b01      	ldr	r3, [pc, #4]	@ (8007bd8 <__errno+0x8>)
 8007bd2:	6818      	ldr	r0, [r3, #0]
 8007bd4:	4770      	bx	lr
 8007bd6:	bf00      	nop
 8007bd8:	20000040 	.word	0x20000040

08007bdc <__libc_init_array>:
 8007bdc:	b570      	push	{r4, r5, r6, lr}
 8007bde:	4d0d      	ldr	r5, [pc, #52]	@ (8007c14 <__libc_init_array+0x38>)
 8007be0:	4c0d      	ldr	r4, [pc, #52]	@ (8007c18 <__libc_init_array+0x3c>)
 8007be2:	1b64      	subs	r4, r4, r5
 8007be4:	10a4      	asrs	r4, r4, #2
 8007be6:	2600      	movs	r6, #0
 8007be8:	42a6      	cmp	r6, r4
 8007bea:	d109      	bne.n	8007c00 <__libc_init_array+0x24>
 8007bec:	4d0b      	ldr	r5, [pc, #44]	@ (8007c1c <__libc_init_array+0x40>)
 8007bee:	4c0c      	ldr	r4, [pc, #48]	@ (8007c20 <__libc_init_array+0x44>)
 8007bf0:	f000 fc6e 	bl	80084d0 <_init>
 8007bf4:	1b64      	subs	r4, r4, r5
 8007bf6:	10a4      	asrs	r4, r4, #2
 8007bf8:	2600      	movs	r6, #0
 8007bfa:	42a6      	cmp	r6, r4
 8007bfc:	d105      	bne.n	8007c0a <__libc_init_array+0x2e>
 8007bfe:	bd70      	pop	{r4, r5, r6, pc}
 8007c00:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c04:	4798      	blx	r3
 8007c06:	3601      	adds	r6, #1
 8007c08:	e7ee      	b.n	8007be8 <__libc_init_array+0xc>
 8007c0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c0e:	4798      	blx	r3
 8007c10:	3601      	adds	r6, #1
 8007c12:	e7f2      	b.n	8007bfa <__libc_init_array+0x1e>
 8007c14:	0800b2c4 	.word	0x0800b2c4
 8007c18:	0800b2c4 	.word	0x0800b2c4
 8007c1c:	0800b2c4 	.word	0x0800b2c4
 8007c20:	0800b2c8 	.word	0x0800b2c8

08007c24 <__retarget_lock_init_recursive>:
 8007c24:	4770      	bx	lr

08007c26 <__retarget_lock_acquire_recursive>:
 8007c26:	4770      	bx	lr

08007c28 <__retarget_lock_release_recursive>:
 8007c28:	4770      	bx	lr

08007c2a <strcpy>:
 8007c2a:	4603      	mov	r3, r0
 8007c2c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007c30:	f803 2b01 	strb.w	r2, [r3], #1
 8007c34:	2a00      	cmp	r2, #0
 8007c36:	d1f9      	bne.n	8007c2c <strcpy+0x2>
 8007c38:	4770      	bx	lr
	...

08007c3c <_free_r>:
 8007c3c:	b538      	push	{r3, r4, r5, lr}
 8007c3e:	4605      	mov	r5, r0
 8007c40:	2900      	cmp	r1, #0
 8007c42:	d041      	beq.n	8007cc8 <_free_r+0x8c>
 8007c44:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007c48:	1f0c      	subs	r4, r1, #4
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	bfb8      	it	lt
 8007c4e:	18e4      	addlt	r4, r4, r3
 8007c50:	f7ff fd4a 	bl	80076e8 <__malloc_lock>
 8007c54:	4a1d      	ldr	r2, [pc, #116]	@ (8007ccc <_free_r+0x90>)
 8007c56:	6813      	ldr	r3, [r2, #0]
 8007c58:	b933      	cbnz	r3, 8007c68 <_free_r+0x2c>
 8007c5a:	6063      	str	r3, [r4, #4]
 8007c5c:	6014      	str	r4, [r2, #0]
 8007c5e:	4628      	mov	r0, r5
 8007c60:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007c64:	f7ff bd46 	b.w	80076f4 <__malloc_unlock>
 8007c68:	42a3      	cmp	r3, r4
 8007c6a:	d908      	bls.n	8007c7e <_free_r+0x42>
 8007c6c:	6820      	ldr	r0, [r4, #0]
 8007c6e:	1821      	adds	r1, r4, r0
 8007c70:	428b      	cmp	r3, r1
 8007c72:	bf01      	itttt	eq
 8007c74:	6819      	ldreq	r1, [r3, #0]
 8007c76:	685b      	ldreq	r3, [r3, #4]
 8007c78:	1809      	addeq	r1, r1, r0
 8007c7a:	6021      	streq	r1, [r4, #0]
 8007c7c:	e7ed      	b.n	8007c5a <_free_r+0x1e>
 8007c7e:	461a      	mov	r2, r3
 8007c80:	685b      	ldr	r3, [r3, #4]
 8007c82:	b10b      	cbz	r3, 8007c88 <_free_r+0x4c>
 8007c84:	42a3      	cmp	r3, r4
 8007c86:	d9fa      	bls.n	8007c7e <_free_r+0x42>
 8007c88:	6811      	ldr	r1, [r2, #0]
 8007c8a:	1850      	adds	r0, r2, r1
 8007c8c:	42a0      	cmp	r0, r4
 8007c8e:	d10b      	bne.n	8007ca8 <_free_r+0x6c>
 8007c90:	6820      	ldr	r0, [r4, #0]
 8007c92:	4401      	add	r1, r0
 8007c94:	1850      	adds	r0, r2, r1
 8007c96:	4283      	cmp	r3, r0
 8007c98:	6011      	str	r1, [r2, #0]
 8007c9a:	d1e0      	bne.n	8007c5e <_free_r+0x22>
 8007c9c:	6818      	ldr	r0, [r3, #0]
 8007c9e:	685b      	ldr	r3, [r3, #4]
 8007ca0:	6053      	str	r3, [r2, #4]
 8007ca2:	4408      	add	r0, r1
 8007ca4:	6010      	str	r0, [r2, #0]
 8007ca6:	e7da      	b.n	8007c5e <_free_r+0x22>
 8007ca8:	d902      	bls.n	8007cb0 <_free_r+0x74>
 8007caa:	230c      	movs	r3, #12
 8007cac:	602b      	str	r3, [r5, #0]
 8007cae:	e7d6      	b.n	8007c5e <_free_r+0x22>
 8007cb0:	6820      	ldr	r0, [r4, #0]
 8007cb2:	1821      	adds	r1, r4, r0
 8007cb4:	428b      	cmp	r3, r1
 8007cb6:	bf04      	itt	eq
 8007cb8:	6819      	ldreq	r1, [r3, #0]
 8007cba:	685b      	ldreq	r3, [r3, #4]
 8007cbc:	6063      	str	r3, [r4, #4]
 8007cbe:	bf04      	itt	eq
 8007cc0:	1809      	addeq	r1, r1, r0
 8007cc2:	6021      	streq	r1, [r4, #0]
 8007cc4:	6054      	str	r4, [r2, #4]
 8007cc6:	e7ca      	b.n	8007c5e <_free_r+0x22>
 8007cc8:	bd38      	pop	{r3, r4, r5, pc}
 8007cca:	bf00      	nop
 8007ccc:	20000368 	.word	0x20000368

08007cd0 <__sfputc_r>:
 8007cd0:	6893      	ldr	r3, [r2, #8]
 8007cd2:	3b01      	subs	r3, #1
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	b410      	push	{r4}
 8007cd8:	6093      	str	r3, [r2, #8]
 8007cda:	da08      	bge.n	8007cee <__sfputc_r+0x1e>
 8007cdc:	6994      	ldr	r4, [r2, #24]
 8007cde:	42a3      	cmp	r3, r4
 8007ce0:	db01      	blt.n	8007ce6 <__sfputc_r+0x16>
 8007ce2:	290a      	cmp	r1, #10
 8007ce4:	d103      	bne.n	8007cee <__sfputc_r+0x1e>
 8007ce6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007cea:	f7ff be7e 	b.w	80079ea <__swbuf_r>
 8007cee:	6813      	ldr	r3, [r2, #0]
 8007cf0:	1c58      	adds	r0, r3, #1
 8007cf2:	6010      	str	r0, [r2, #0]
 8007cf4:	7019      	strb	r1, [r3, #0]
 8007cf6:	4608      	mov	r0, r1
 8007cf8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007cfc:	4770      	bx	lr

08007cfe <__sfputs_r>:
 8007cfe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d00:	4606      	mov	r6, r0
 8007d02:	460f      	mov	r7, r1
 8007d04:	4614      	mov	r4, r2
 8007d06:	18d5      	adds	r5, r2, r3
 8007d08:	42ac      	cmp	r4, r5
 8007d0a:	d101      	bne.n	8007d10 <__sfputs_r+0x12>
 8007d0c:	2000      	movs	r0, #0
 8007d0e:	e007      	b.n	8007d20 <__sfputs_r+0x22>
 8007d10:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d14:	463a      	mov	r2, r7
 8007d16:	4630      	mov	r0, r6
 8007d18:	f7ff ffda 	bl	8007cd0 <__sfputc_r>
 8007d1c:	1c43      	adds	r3, r0, #1
 8007d1e:	d1f3      	bne.n	8007d08 <__sfputs_r+0xa>
 8007d20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007d24 <_vfiprintf_r>:
 8007d24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d28:	460d      	mov	r5, r1
 8007d2a:	b09d      	sub	sp, #116	@ 0x74
 8007d2c:	4614      	mov	r4, r2
 8007d2e:	4698      	mov	r8, r3
 8007d30:	4606      	mov	r6, r0
 8007d32:	b118      	cbz	r0, 8007d3c <_vfiprintf_r+0x18>
 8007d34:	6a03      	ldr	r3, [r0, #32]
 8007d36:	b90b      	cbnz	r3, 8007d3c <_vfiprintf_r+0x18>
 8007d38:	f7ff fd6e 	bl	8007818 <__sinit>
 8007d3c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007d3e:	07d9      	lsls	r1, r3, #31
 8007d40:	d405      	bmi.n	8007d4e <_vfiprintf_r+0x2a>
 8007d42:	89ab      	ldrh	r3, [r5, #12]
 8007d44:	059a      	lsls	r2, r3, #22
 8007d46:	d402      	bmi.n	8007d4e <_vfiprintf_r+0x2a>
 8007d48:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007d4a:	f7ff ff6c 	bl	8007c26 <__retarget_lock_acquire_recursive>
 8007d4e:	89ab      	ldrh	r3, [r5, #12]
 8007d50:	071b      	lsls	r3, r3, #28
 8007d52:	d501      	bpl.n	8007d58 <_vfiprintf_r+0x34>
 8007d54:	692b      	ldr	r3, [r5, #16]
 8007d56:	b99b      	cbnz	r3, 8007d80 <_vfiprintf_r+0x5c>
 8007d58:	4629      	mov	r1, r5
 8007d5a:	4630      	mov	r0, r6
 8007d5c:	f7ff fe84 	bl	8007a68 <__swsetup_r>
 8007d60:	b170      	cbz	r0, 8007d80 <_vfiprintf_r+0x5c>
 8007d62:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007d64:	07dc      	lsls	r4, r3, #31
 8007d66:	d504      	bpl.n	8007d72 <_vfiprintf_r+0x4e>
 8007d68:	f04f 30ff 	mov.w	r0, #4294967295
 8007d6c:	b01d      	add	sp, #116	@ 0x74
 8007d6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d72:	89ab      	ldrh	r3, [r5, #12]
 8007d74:	0598      	lsls	r0, r3, #22
 8007d76:	d4f7      	bmi.n	8007d68 <_vfiprintf_r+0x44>
 8007d78:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007d7a:	f7ff ff55 	bl	8007c28 <__retarget_lock_release_recursive>
 8007d7e:	e7f3      	b.n	8007d68 <_vfiprintf_r+0x44>
 8007d80:	2300      	movs	r3, #0
 8007d82:	9309      	str	r3, [sp, #36]	@ 0x24
 8007d84:	2320      	movs	r3, #32
 8007d86:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007d8a:	f8cd 800c 	str.w	r8, [sp, #12]
 8007d8e:	2330      	movs	r3, #48	@ 0x30
 8007d90:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007f40 <_vfiprintf_r+0x21c>
 8007d94:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007d98:	f04f 0901 	mov.w	r9, #1
 8007d9c:	4623      	mov	r3, r4
 8007d9e:	469a      	mov	sl, r3
 8007da0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007da4:	b10a      	cbz	r2, 8007daa <_vfiprintf_r+0x86>
 8007da6:	2a25      	cmp	r2, #37	@ 0x25
 8007da8:	d1f9      	bne.n	8007d9e <_vfiprintf_r+0x7a>
 8007daa:	ebba 0b04 	subs.w	fp, sl, r4
 8007dae:	d00b      	beq.n	8007dc8 <_vfiprintf_r+0xa4>
 8007db0:	465b      	mov	r3, fp
 8007db2:	4622      	mov	r2, r4
 8007db4:	4629      	mov	r1, r5
 8007db6:	4630      	mov	r0, r6
 8007db8:	f7ff ffa1 	bl	8007cfe <__sfputs_r>
 8007dbc:	3001      	adds	r0, #1
 8007dbe:	f000 80a7 	beq.w	8007f10 <_vfiprintf_r+0x1ec>
 8007dc2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007dc4:	445a      	add	r2, fp
 8007dc6:	9209      	str	r2, [sp, #36]	@ 0x24
 8007dc8:	f89a 3000 	ldrb.w	r3, [sl]
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	f000 809f 	beq.w	8007f10 <_vfiprintf_r+0x1ec>
 8007dd2:	2300      	movs	r3, #0
 8007dd4:	f04f 32ff 	mov.w	r2, #4294967295
 8007dd8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007ddc:	f10a 0a01 	add.w	sl, sl, #1
 8007de0:	9304      	str	r3, [sp, #16]
 8007de2:	9307      	str	r3, [sp, #28]
 8007de4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007de8:	931a      	str	r3, [sp, #104]	@ 0x68
 8007dea:	4654      	mov	r4, sl
 8007dec:	2205      	movs	r2, #5
 8007dee:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007df2:	4853      	ldr	r0, [pc, #332]	@ (8007f40 <_vfiprintf_r+0x21c>)
 8007df4:	f7f8 fa0c 	bl	8000210 <memchr>
 8007df8:	9a04      	ldr	r2, [sp, #16]
 8007dfa:	b9d8      	cbnz	r0, 8007e34 <_vfiprintf_r+0x110>
 8007dfc:	06d1      	lsls	r1, r2, #27
 8007dfe:	bf44      	itt	mi
 8007e00:	2320      	movmi	r3, #32
 8007e02:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007e06:	0713      	lsls	r3, r2, #28
 8007e08:	bf44      	itt	mi
 8007e0a:	232b      	movmi	r3, #43	@ 0x2b
 8007e0c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007e10:	f89a 3000 	ldrb.w	r3, [sl]
 8007e14:	2b2a      	cmp	r3, #42	@ 0x2a
 8007e16:	d015      	beq.n	8007e44 <_vfiprintf_r+0x120>
 8007e18:	9a07      	ldr	r2, [sp, #28]
 8007e1a:	4654      	mov	r4, sl
 8007e1c:	2000      	movs	r0, #0
 8007e1e:	f04f 0c0a 	mov.w	ip, #10
 8007e22:	4621      	mov	r1, r4
 8007e24:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007e28:	3b30      	subs	r3, #48	@ 0x30
 8007e2a:	2b09      	cmp	r3, #9
 8007e2c:	d94b      	bls.n	8007ec6 <_vfiprintf_r+0x1a2>
 8007e2e:	b1b0      	cbz	r0, 8007e5e <_vfiprintf_r+0x13a>
 8007e30:	9207      	str	r2, [sp, #28]
 8007e32:	e014      	b.n	8007e5e <_vfiprintf_r+0x13a>
 8007e34:	eba0 0308 	sub.w	r3, r0, r8
 8007e38:	fa09 f303 	lsl.w	r3, r9, r3
 8007e3c:	4313      	orrs	r3, r2
 8007e3e:	9304      	str	r3, [sp, #16]
 8007e40:	46a2      	mov	sl, r4
 8007e42:	e7d2      	b.n	8007dea <_vfiprintf_r+0xc6>
 8007e44:	9b03      	ldr	r3, [sp, #12]
 8007e46:	1d19      	adds	r1, r3, #4
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	9103      	str	r1, [sp, #12]
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	bfbb      	ittet	lt
 8007e50:	425b      	neglt	r3, r3
 8007e52:	f042 0202 	orrlt.w	r2, r2, #2
 8007e56:	9307      	strge	r3, [sp, #28]
 8007e58:	9307      	strlt	r3, [sp, #28]
 8007e5a:	bfb8      	it	lt
 8007e5c:	9204      	strlt	r2, [sp, #16]
 8007e5e:	7823      	ldrb	r3, [r4, #0]
 8007e60:	2b2e      	cmp	r3, #46	@ 0x2e
 8007e62:	d10a      	bne.n	8007e7a <_vfiprintf_r+0x156>
 8007e64:	7863      	ldrb	r3, [r4, #1]
 8007e66:	2b2a      	cmp	r3, #42	@ 0x2a
 8007e68:	d132      	bne.n	8007ed0 <_vfiprintf_r+0x1ac>
 8007e6a:	9b03      	ldr	r3, [sp, #12]
 8007e6c:	1d1a      	adds	r2, r3, #4
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	9203      	str	r2, [sp, #12]
 8007e72:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007e76:	3402      	adds	r4, #2
 8007e78:	9305      	str	r3, [sp, #20]
 8007e7a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007f50 <_vfiprintf_r+0x22c>
 8007e7e:	7821      	ldrb	r1, [r4, #0]
 8007e80:	2203      	movs	r2, #3
 8007e82:	4650      	mov	r0, sl
 8007e84:	f7f8 f9c4 	bl	8000210 <memchr>
 8007e88:	b138      	cbz	r0, 8007e9a <_vfiprintf_r+0x176>
 8007e8a:	9b04      	ldr	r3, [sp, #16]
 8007e8c:	eba0 000a 	sub.w	r0, r0, sl
 8007e90:	2240      	movs	r2, #64	@ 0x40
 8007e92:	4082      	lsls	r2, r0
 8007e94:	4313      	orrs	r3, r2
 8007e96:	3401      	adds	r4, #1
 8007e98:	9304      	str	r3, [sp, #16]
 8007e9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e9e:	4829      	ldr	r0, [pc, #164]	@ (8007f44 <_vfiprintf_r+0x220>)
 8007ea0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007ea4:	2206      	movs	r2, #6
 8007ea6:	f7f8 f9b3 	bl	8000210 <memchr>
 8007eaa:	2800      	cmp	r0, #0
 8007eac:	d03f      	beq.n	8007f2e <_vfiprintf_r+0x20a>
 8007eae:	4b26      	ldr	r3, [pc, #152]	@ (8007f48 <_vfiprintf_r+0x224>)
 8007eb0:	bb1b      	cbnz	r3, 8007efa <_vfiprintf_r+0x1d6>
 8007eb2:	9b03      	ldr	r3, [sp, #12]
 8007eb4:	3307      	adds	r3, #7
 8007eb6:	f023 0307 	bic.w	r3, r3, #7
 8007eba:	3308      	adds	r3, #8
 8007ebc:	9303      	str	r3, [sp, #12]
 8007ebe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ec0:	443b      	add	r3, r7
 8007ec2:	9309      	str	r3, [sp, #36]	@ 0x24
 8007ec4:	e76a      	b.n	8007d9c <_vfiprintf_r+0x78>
 8007ec6:	fb0c 3202 	mla	r2, ip, r2, r3
 8007eca:	460c      	mov	r4, r1
 8007ecc:	2001      	movs	r0, #1
 8007ece:	e7a8      	b.n	8007e22 <_vfiprintf_r+0xfe>
 8007ed0:	2300      	movs	r3, #0
 8007ed2:	3401      	adds	r4, #1
 8007ed4:	9305      	str	r3, [sp, #20]
 8007ed6:	4619      	mov	r1, r3
 8007ed8:	f04f 0c0a 	mov.w	ip, #10
 8007edc:	4620      	mov	r0, r4
 8007ede:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007ee2:	3a30      	subs	r2, #48	@ 0x30
 8007ee4:	2a09      	cmp	r2, #9
 8007ee6:	d903      	bls.n	8007ef0 <_vfiprintf_r+0x1cc>
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d0c6      	beq.n	8007e7a <_vfiprintf_r+0x156>
 8007eec:	9105      	str	r1, [sp, #20]
 8007eee:	e7c4      	b.n	8007e7a <_vfiprintf_r+0x156>
 8007ef0:	fb0c 2101 	mla	r1, ip, r1, r2
 8007ef4:	4604      	mov	r4, r0
 8007ef6:	2301      	movs	r3, #1
 8007ef8:	e7f0      	b.n	8007edc <_vfiprintf_r+0x1b8>
 8007efa:	ab03      	add	r3, sp, #12
 8007efc:	9300      	str	r3, [sp, #0]
 8007efe:	462a      	mov	r2, r5
 8007f00:	4b12      	ldr	r3, [pc, #72]	@ (8007f4c <_vfiprintf_r+0x228>)
 8007f02:	a904      	add	r1, sp, #16
 8007f04:	4630      	mov	r0, r6
 8007f06:	f3af 8000 	nop.w
 8007f0a:	4607      	mov	r7, r0
 8007f0c:	1c78      	adds	r0, r7, #1
 8007f0e:	d1d6      	bne.n	8007ebe <_vfiprintf_r+0x19a>
 8007f10:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007f12:	07d9      	lsls	r1, r3, #31
 8007f14:	d405      	bmi.n	8007f22 <_vfiprintf_r+0x1fe>
 8007f16:	89ab      	ldrh	r3, [r5, #12]
 8007f18:	059a      	lsls	r2, r3, #22
 8007f1a:	d402      	bmi.n	8007f22 <_vfiprintf_r+0x1fe>
 8007f1c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007f1e:	f7ff fe83 	bl	8007c28 <__retarget_lock_release_recursive>
 8007f22:	89ab      	ldrh	r3, [r5, #12]
 8007f24:	065b      	lsls	r3, r3, #25
 8007f26:	f53f af1f 	bmi.w	8007d68 <_vfiprintf_r+0x44>
 8007f2a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007f2c:	e71e      	b.n	8007d6c <_vfiprintf_r+0x48>
 8007f2e:	ab03      	add	r3, sp, #12
 8007f30:	9300      	str	r3, [sp, #0]
 8007f32:	462a      	mov	r2, r5
 8007f34:	4b05      	ldr	r3, [pc, #20]	@ (8007f4c <_vfiprintf_r+0x228>)
 8007f36:	a904      	add	r1, sp, #16
 8007f38:	4630      	mov	r0, r6
 8007f3a:	f000 f879 	bl	8008030 <_printf_i>
 8007f3e:	e7e4      	b.n	8007f0a <_vfiprintf_r+0x1e6>
 8007f40:	0800b288 	.word	0x0800b288
 8007f44:	0800b292 	.word	0x0800b292
 8007f48:	00000000 	.word	0x00000000
 8007f4c:	08007cff 	.word	0x08007cff
 8007f50:	0800b28e 	.word	0x0800b28e

08007f54 <_printf_common>:
 8007f54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f58:	4616      	mov	r6, r2
 8007f5a:	4698      	mov	r8, r3
 8007f5c:	688a      	ldr	r2, [r1, #8]
 8007f5e:	690b      	ldr	r3, [r1, #16]
 8007f60:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007f64:	4293      	cmp	r3, r2
 8007f66:	bfb8      	it	lt
 8007f68:	4613      	movlt	r3, r2
 8007f6a:	6033      	str	r3, [r6, #0]
 8007f6c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007f70:	4607      	mov	r7, r0
 8007f72:	460c      	mov	r4, r1
 8007f74:	b10a      	cbz	r2, 8007f7a <_printf_common+0x26>
 8007f76:	3301      	adds	r3, #1
 8007f78:	6033      	str	r3, [r6, #0]
 8007f7a:	6823      	ldr	r3, [r4, #0]
 8007f7c:	0699      	lsls	r1, r3, #26
 8007f7e:	bf42      	ittt	mi
 8007f80:	6833      	ldrmi	r3, [r6, #0]
 8007f82:	3302      	addmi	r3, #2
 8007f84:	6033      	strmi	r3, [r6, #0]
 8007f86:	6825      	ldr	r5, [r4, #0]
 8007f88:	f015 0506 	ands.w	r5, r5, #6
 8007f8c:	d106      	bne.n	8007f9c <_printf_common+0x48>
 8007f8e:	f104 0a19 	add.w	sl, r4, #25
 8007f92:	68e3      	ldr	r3, [r4, #12]
 8007f94:	6832      	ldr	r2, [r6, #0]
 8007f96:	1a9b      	subs	r3, r3, r2
 8007f98:	42ab      	cmp	r3, r5
 8007f9a:	dc26      	bgt.n	8007fea <_printf_common+0x96>
 8007f9c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007fa0:	6822      	ldr	r2, [r4, #0]
 8007fa2:	3b00      	subs	r3, #0
 8007fa4:	bf18      	it	ne
 8007fa6:	2301      	movne	r3, #1
 8007fa8:	0692      	lsls	r2, r2, #26
 8007faa:	d42b      	bmi.n	8008004 <_printf_common+0xb0>
 8007fac:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007fb0:	4641      	mov	r1, r8
 8007fb2:	4638      	mov	r0, r7
 8007fb4:	47c8      	blx	r9
 8007fb6:	3001      	adds	r0, #1
 8007fb8:	d01e      	beq.n	8007ff8 <_printf_common+0xa4>
 8007fba:	6823      	ldr	r3, [r4, #0]
 8007fbc:	6922      	ldr	r2, [r4, #16]
 8007fbe:	f003 0306 	and.w	r3, r3, #6
 8007fc2:	2b04      	cmp	r3, #4
 8007fc4:	bf02      	ittt	eq
 8007fc6:	68e5      	ldreq	r5, [r4, #12]
 8007fc8:	6833      	ldreq	r3, [r6, #0]
 8007fca:	1aed      	subeq	r5, r5, r3
 8007fcc:	68a3      	ldr	r3, [r4, #8]
 8007fce:	bf0c      	ite	eq
 8007fd0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007fd4:	2500      	movne	r5, #0
 8007fd6:	4293      	cmp	r3, r2
 8007fd8:	bfc4      	itt	gt
 8007fda:	1a9b      	subgt	r3, r3, r2
 8007fdc:	18ed      	addgt	r5, r5, r3
 8007fde:	2600      	movs	r6, #0
 8007fe0:	341a      	adds	r4, #26
 8007fe2:	42b5      	cmp	r5, r6
 8007fe4:	d11a      	bne.n	800801c <_printf_common+0xc8>
 8007fe6:	2000      	movs	r0, #0
 8007fe8:	e008      	b.n	8007ffc <_printf_common+0xa8>
 8007fea:	2301      	movs	r3, #1
 8007fec:	4652      	mov	r2, sl
 8007fee:	4641      	mov	r1, r8
 8007ff0:	4638      	mov	r0, r7
 8007ff2:	47c8      	blx	r9
 8007ff4:	3001      	adds	r0, #1
 8007ff6:	d103      	bne.n	8008000 <_printf_common+0xac>
 8007ff8:	f04f 30ff 	mov.w	r0, #4294967295
 8007ffc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008000:	3501      	adds	r5, #1
 8008002:	e7c6      	b.n	8007f92 <_printf_common+0x3e>
 8008004:	18e1      	adds	r1, r4, r3
 8008006:	1c5a      	adds	r2, r3, #1
 8008008:	2030      	movs	r0, #48	@ 0x30
 800800a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800800e:	4422      	add	r2, r4
 8008010:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008014:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008018:	3302      	adds	r3, #2
 800801a:	e7c7      	b.n	8007fac <_printf_common+0x58>
 800801c:	2301      	movs	r3, #1
 800801e:	4622      	mov	r2, r4
 8008020:	4641      	mov	r1, r8
 8008022:	4638      	mov	r0, r7
 8008024:	47c8      	blx	r9
 8008026:	3001      	adds	r0, #1
 8008028:	d0e6      	beq.n	8007ff8 <_printf_common+0xa4>
 800802a:	3601      	adds	r6, #1
 800802c:	e7d9      	b.n	8007fe2 <_printf_common+0x8e>
	...

08008030 <_printf_i>:
 8008030:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008034:	7e0f      	ldrb	r7, [r1, #24]
 8008036:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008038:	2f78      	cmp	r7, #120	@ 0x78
 800803a:	4691      	mov	r9, r2
 800803c:	4680      	mov	r8, r0
 800803e:	460c      	mov	r4, r1
 8008040:	469a      	mov	sl, r3
 8008042:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008046:	d807      	bhi.n	8008058 <_printf_i+0x28>
 8008048:	2f62      	cmp	r7, #98	@ 0x62
 800804a:	d80a      	bhi.n	8008062 <_printf_i+0x32>
 800804c:	2f00      	cmp	r7, #0
 800804e:	f000 80d2 	beq.w	80081f6 <_printf_i+0x1c6>
 8008052:	2f58      	cmp	r7, #88	@ 0x58
 8008054:	f000 80b9 	beq.w	80081ca <_printf_i+0x19a>
 8008058:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800805c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008060:	e03a      	b.n	80080d8 <_printf_i+0xa8>
 8008062:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008066:	2b15      	cmp	r3, #21
 8008068:	d8f6      	bhi.n	8008058 <_printf_i+0x28>
 800806a:	a101      	add	r1, pc, #4	@ (adr r1, 8008070 <_printf_i+0x40>)
 800806c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008070:	080080c9 	.word	0x080080c9
 8008074:	080080dd 	.word	0x080080dd
 8008078:	08008059 	.word	0x08008059
 800807c:	08008059 	.word	0x08008059
 8008080:	08008059 	.word	0x08008059
 8008084:	08008059 	.word	0x08008059
 8008088:	080080dd 	.word	0x080080dd
 800808c:	08008059 	.word	0x08008059
 8008090:	08008059 	.word	0x08008059
 8008094:	08008059 	.word	0x08008059
 8008098:	08008059 	.word	0x08008059
 800809c:	080081dd 	.word	0x080081dd
 80080a0:	08008107 	.word	0x08008107
 80080a4:	08008197 	.word	0x08008197
 80080a8:	08008059 	.word	0x08008059
 80080ac:	08008059 	.word	0x08008059
 80080b0:	080081ff 	.word	0x080081ff
 80080b4:	08008059 	.word	0x08008059
 80080b8:	08008107 	.word	0x08008107
 80080bc:	08008059 	.word	0x08008059
 80080c0:	08008059 	.word	0x08008059
 80080c4:	0800819f 	.word	0x0800819f
 80080c8:	6833      	ldr	r3, [r6, #0]
 80080ca:	1d1a      	adds	r2, r3, #4
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	6032      	str	r2, [r6, #0]
 80080d0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80080d4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80080d8:	2301      	movs	r3, #1
 80080da:	e09d      	b.n	8008218 <_printf_i+0x1e8>
 80080dc:	6833      	ldr	r3, [r6, #0]
 80080de:	6820      	ldr	r0, [r4, #0]
 80080e0:	1d19      	adds	r1, r3, #4
 80080e2:	6031      	str	r1, [r6, #0]
 80080e4:	0606      	lsls	r6, r0, #24
 80080e6:	d501      	bpl.n	80080ec <_printf_i+0xbc>
 80080e8:	681d      	ldr	r5, [r3, #0]
 80080ea:	e003      	b.n	80080f4 <_printf_i+0xc4>
 80080ec:	0645      	lsls	r5, r0, #25
 80080ee:	d5fb      	bpl.n	80080e8 <_printf_i+0xb8>
 80080f0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80080f4:	2d00      	cmp	r5, #0
 80080f6:	da03      	bge.n	8008100 <_printf_i+0xd0>
 80080f8:	232d      	movs	r3, #45	@ 0x2d
 80080fa:	426d      	negs	r5, r5
 80080fc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008100:	4859      	ldr	r0, [pc, #356]	@ (8008268 <_printf_i+0x238>)
 8008102:	230a      	movs	r3, #10
 8008104:	e011      	b.n	800812a <_printf_i+0xfa>
 8008106:	6821      	ldr	r1, [r4, #0]
 8008108:	6833      	ldr	r3, [r6, #0]
 800810a:	0608      	lsls	r0, r1, #24
 800810c:	f853 5b04 	ldr.w	r5, [r3], #4
 8008110:	d402      	bmi.n	8008118 <_printf_i+0xe8>
 8008112:	0649      	lsls	r1, r1, #25
 8008114:	bf48      	it	mi
 8008116:	b2ad      	uxthmi	r5, r5
 8008118:	2f6f      	cmp	r7, #111	@ 0x6f
 800811a:	4853      	ldr	r0, [pc, #332]	@ (8008268 <_printf_i+0x238>)
 800811c:	6033      	str	r3, [r6, #0]
 800811e:	bf14      	ite	ne
 8008120:	230a      	movne	r3, #10
 8008122:	2308      	moveq	r3, #8
 8008124:	2100      	movs	r1, #0
 8008126:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800812a:	6866      	ldr	r6, [r4, #4]
 800812c:	60a6      	str	r6, [r4, #8]
 800812e:	2e00      	cmp	r6, #0
 8008130:	bfa2      	ittt	ge
 8008132:	6821      	ldrge	r1, [r4, #0]
 8008134:	f021 0104 	bicge.w	r1, r1, #4
 8008138:	6021      	strge	r1, [r4, #0]
 800813a:	b90d      	cbnz	r5, 8008140 <_printf_i+0x110>
 800813c:	2e00      	cmp	r6, #0
 800813e:	d04b      	beq.n	80081d8 <_printf_i+0x1a8>
 8008140:	4616      	mov	r6, r2
 8008142:	fbb5 f1f3 	udiv	r1, r5, r3
 8008146:	fb03 5711 	mls	r7, r3, r1, r5
 800814a:	5dc7      	ldrb	r7, [r0, r7]
 800814c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008150:	462f      	mov	r7, r5
 8008152:	42bb      	cmp	r3, r7
 8008154:	460d      	mov	r5, r1
 8008156:	d9f4      	bls.n	8008142 <_printf_i+0x112>
 8008158:	2b08      	cmp	r3, #8
 800815a:	d10b      	bne.n	8008174 <_printf_i+0x144>
 800815c:	6823      	ldr	r3, [r4, #0]
 800815e:	07df      	lsls	r7, r3, #31
 8008160:	d508      	bpl.n	8008174 <_printf_i+0x144>
 8008162:	6923      	ldr	r3, [r4, #16]
 8008164:	6861      	ldr	r1, [r4, #4]
 8008166:	4299      	cmp	r1, r3
 8008168:	bfde      	ittt	le
 800816a:	2330      	movle	r3, #48	@ 0x30
 800816c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008170:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008174:	1b92      	subs	r2, r2, r6
 8008176:	6122      	str	r2, [r4, #16]
 8008178:	f8cd a000 	str.w	sl, [sp]
 800817c:	464b      	mov	r3, r9
 800817e:	aa03      	add	r2, sp, #12
 8008180:	4621      	mov	r1, r4
 8008182:	4640      	mov	r0, r8
 8008184:	f7ff fee6 	bl	8007f54 <_printf_common>
 8008188:	3001      	adds	r0, #1
 800818a:	d14a      	bne.n	8008222 <_printf_i+0x1f2>
 800818c:	f04f 30ff 	mov.w	r0, #4294967295
 8008190:	b004      	add	sp, #16
 8008192:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008196:	6823      	ldr	r3, [r4, #0]
 8008198:	f043 0320 	orr.w	r3, r3, #32
 800819c:	6023      	str	r3, [r4, #0]
 800819e:	4833      	ldr	r0, [pc, #204]	@ (800826c <_printf_i+0x23c>)
 80081a0:	2778      	movs	r7, #120	@ 0x78
 80081a2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80081a6:	6823      	ldr	r3, [r4, #0]
 80081a8:	6831      	ldr	r1, [r6, #0]
 80081aa:	061f      	lsls	r7, r3, #24
 80081ac:	f851 5b04 	ldr.w	r5, [r1], #4
 80081b0:	d402      	bmi.n	80081b8 <_printf_i+0x188>
 80081b2:	065f      	lsls	r7, r3, #25
 80081b4:	bf48      	it	mi
 80081b6:	b2ad      	uxthmi	r5, r5
 80081b8:	6031      	str	r1, [r6, #0]
 80081ba:	07d9      	lsls	r1, r3, #31
 80081bc:	bf44      	itt	mi
 80081be:	f043 0320 	orrmi.w	r3, r3, #32
 80081c2:	6023      	strmi	r3, [r4, #0]
 80081c4:	b11d      	cbz	r5, 80081ce <_printf_i+0x19e>
 80081c6:	2310      	movs	r3, #16
 80081c8:	e7ac      	b.n	8008124 <_printf_i+0xf4>
 80081ca:	4827      	ldr	r0, [pc, #156]	@ (8008268 <_printf_i+0x238>)
 80081cc:	e7e9      	b.n	80081a2 <_printf_i+0x172>
 80081ce:	6823      	ldr	r3, [r4, #0]
 80081d0:	f023 0320 	bic.w	r3, r3, #32
 80081d4:	6023      	str	r3, [r4, #0]
 80081d6:	e7f6      	b.n	80081c6 <_printf_i+0x196>
 80081d8:	4616      	mov	r6, r2
 80081da:	e7bd      	b.n	8008158 <_printf_i+0x128>
 80081dc:	6833      	ldr	r3, [r6, #0]
 80081de:	6825      	ldr	r5, [r4, #0]
 80081e0:	6961      	ldr	r1, [r4, #20]
 80081e2:	1d18      	adds	r0, r3, #4
 80081e4:	6030      	str	r0, [r6, #0]
 80081e6:	062e      	lsls	r6, r5, #24
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	d501      	bpl.n	80081f0 <_printf_i+0x1c0>
 80081ec:	6019      	str	r1, [r3, #0]
 80081ee:	e002      	b.n	80081f6 <_printf_i+0x1c6>
 80081f0:	0668      	lsls	r0, r5, #25
 80081f2:	d5fb      	bpl.n	80081ec <_printf_i+0x1bc>
 80081f4:	8019      	strh	r1, [r3, #0]
 80081f6:	2300      	movs	r3, #0
 80081f8:	6123      	str	r3, [r4, #16]
 80081fa:	4616      	mov	r6, r2
 80081fc:	e7bc      	b.n	8008178 <_printf_i+0x148>
 80081fe:	6833      	ldr	r3, [r6, #0]
 8008200:	1d1a      	adds	r2, r3, #4
 8008202:	6032      	str	r2, [r6, #0]
 8008204:	681e      	ldr	r6, [r3, #0]
 8008206:	6862      	ldr	r2, [r4, #4]
 8008208:	2100      	movs	r1, #0
 800820a:	4630      	mov	r0, r6
 800820c:	f7f8 f800 	bl	8000210 <memchr>
 8008210:	b108      	cbz	r0, 8008216 <_printf_i+0x1e6>
 8008212:	1b80      	subs	r0, r0, r6
 8008214:	6060      	str	r0, [r4, #4]
 8008216:	6863      	ldr	r3, [r4, #4]
 8008218:	6123      	str	r3, [r4, #16]
 800821a:	2300      	movs	r3, #0
 800821c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008220:	e7aa      	b.n	8008178 <_printf_i+0x148>
 8008222:	6923      	ldr	r3, [r4, #16]
 8008224:	4632      	mov	r2, r6
 8008226:	4649      	mov	r1, r9
 8008228:	4640      	mov	r0, r8
 800822a:	47d0      	blx	sl
 800822c:	3001      	adds	r0, #1
 800822e:	d0ad      	beq.n	800818c <_printf_i+0x15c>
 8008230:	6823      	ldr	r3, [r4, #0]
 8008232:	079b      	lsls	r3, r3, #30
 8008234:	d413      	bmi.n	800825e <_printf_i+0x22e>
 8008236:	68e0      	ldr	r0, [r4, #12]
 8008238:	9b03      	ldr	r3, [sp, #12]
 800823a:	4298      	cmp	r0, r3
 800823c:	bfb8      	it	lt
 800823e:	4618      	movlt	r0, r3
 8008240:	e7a6      	b.n	8008190 <_printf_i+0x160>
 8008242:	2301      	movs	r3, #1
 8008244:	4632      	mov	r2, r6
 8008246:	4649      	mov	r1, r9
 8008248:	4640      	mov	r0, r8
 800824a:	47d0      	blx	sl
 800824c:	3001      	adds	r0, #1
 800824e:	d09d      	beq.n	800818c <_printf_i+0x15c>
 8008250:	3501      	adds	r5, #1
 8008252:	68e3      	ldr	r3, [r4, #12]
 8008254:	9903      	ldr	r1, [sp, #12]
 8008256:	1a5b      	subs	r3, r3, r1
 8008258:	42ab      	cmp	r3, r5
 800825a:	dcf2      	bgt.n	8008242 <_printf_i+0x212>
 800825c:	e7eb      	b.n	8008236 <_printf_i+0x206>
 800825e:	2500      	movs	r5, #0
 8008260:	f104 0619 	add.w	r6, r4, #25
 8008264:	e7f5      	b.n	8008252 <_printf_i+0x222>
 8008266:	bf00      	nop
 8008268:	0800b299 	.word	0x0800b299
 800826c:	0800b2aa 	.word	0x0800b2aa

08008270 <__sflush_r>:
 8008270:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008274:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008278:	0716      	lsls	r6, r2, #28
 800827a:	4605      	mov	r5, r0
 800827c:	460c      	mov	r4, r1
 800827e:	d454      	bmi.n	800832a <__sflush_r+0xba>
 8008280:	684b      	ldr	r3, [r1, #4]
 8008282:	2b00      	cmp	r3, #0
 8008284:	dc02      	bgt.n	800828c <__sflush_r+0x1c>
 8008286:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008288:	2b00      	cmp	r3, #0
 800828a:	dd48      	ble.n	800831e <__sflush_r+0xae>
 800828c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800828e:	2e00      	cmp	r6, #0
 8008290:	d045      	beq.n	800831e <__sflush_r+0xae>
 8008292:	2300      	movs	r3, #0
 8008294:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008298:	682f      	ldr	r7, [r5, #0]
 800829a:	6a21      	ldr	r1, [r4, #32]
 800829c:	602b      	str	r3, [r5, #0]
 800829e:	d030      	beq.n	8008302 <__sflush_r+0x92>
 80082a0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80082a2:	89a3      	ldrh	r3, [r4, #12]
 80082a4:	0759      	lsls	r1, r3, #29
 80082a6:	d505      	bpl.n	80082b4 <__sflush_r+0x44>
 80082a8:	6863      	ldr	r3, [r4, #4]
 80082aa:	1ad2      	subs	r2, r2, r3
 80082ac:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80082ae:	b10b      	cbz	r3, 80082b4 <__sflush_r+0x44>
 80082b0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80082b2:	1ad2      	subs	r2, r2, r3
 80082b4:	2300      	movs	r3, #0
 80082b6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80082b8:	6a21      	ldr	r1, [r4, #32]
 80082ba:	4628      	mov	r0, r5
 80082bc:	47b0      	blx	r6
 80082be:	1c43      	adds	r3, r0, #1
 80082c0:	89a3      	ldrh	r3, [r4, #12]
 80082c2:	d106      	bne.n	80082d2 <__sflush_r+0x62>
 80082c4:	6829      	ldr	r1, [r5, #0]
 80082c6:	291d      	cmp	r1, #29
 80082c8:	d82b      	bhi.n	8008322 <__sflush_r+0xb2>
 80082ca:	4a2a      	ldr	r2, [pc, #168]	@ (8008374 <__sflush_r+0x104>)
 80082cc:	410a      	asrs	r2, r1
 80082ce:	07d6      	lsls	r6, r2, #31
 80082d0:	d427      	bmi.n	8008322 <__sflush_r+0xb2>
 80082d2:	2200      	movs	r2, #0
 80082d4:	6062      	str	r2, [r4, #4]
 80082d6:	04d9      	lsls	r1, r3, #19
 80082d8:	6922      	ldr	r2, [r4, #16]
 80082da:	6022      	str	r2, [r4, #0]
 80082dc:	d504      	bpl.n	80082e8 <__sflush_r+0x78>
 80082de:	1c42      	adds	r2, r0, #1
 80082e0:	d101      	bne.n	80082e6 <__sflush_r+0x76>
 80082e2:	682b      	ldr	r3, [r5, #0]
 80082e4:	b903      	cbnz	r3, 80082e8 <__sflush_r+0x78>
 80082e6:	6560      	str	r0, [r4, #84]	@ 0x54
 80082e8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80082ea:	602f      	str	r7, [r5, #0]
 80082ec:	b1b9      	cbz	r1, 800831e <__sflush_r+0xae>
 80082ee:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80082f2:	4299      	cmp	r1, r3
 80082f4:	d002      	beq.n	80082fc <__sflush_r+0x8c>
 80082f6:	4628      	mov	r0, r5
 80082f8:	f7ff fca0 	bl	8007c3c <_free_r>
 80082fc:	2300      	movs	r3, #0
 80082fe:	6363      	str	r3, [r4, #52]	@ 0x34
 8008300:	e00d      	b.n	800831e <__sflush_r+0xae>
 8008302:	2301      	movs	r3, #1
 8008304:	4628      	mov	r0, r5
 8008306:	47b0      	blx	r6
 8008308:	4602      	mov	r2, r0
 800830a:	1c50      	adds	r0, r2, #1
 800830c:	d1c9      	bne.n	80082a2 <__sflush_r+0x32>
 800830e:	682b      	ldr	r3, [r5, #0]
 8008310:	2b00      	cmp	r3, #0
 8008312:	d0c6      	beq.n	80082a2 <__sflush_r+0x32>
 8008314:	2b1d      	cmp	r3, #29
 8008316:	d001      	beq.n	800831c <__sflush_r+0xac>
 8008318:	2b16      	cmp	r3, #22
 800831a:	d11e      	bne.n	800835a <__sflush_r+0xea>
 800831c:	602f      	str	r7, [r5, #0]
 800831e:	2000      	movs	r0, #0
 8008320:	e022      	b.n	8008368 <__sflush_r+0xf8>
 8008322:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008326:	b21b      	sxth	r3, r3
 8008328:	e01b      	b.n	8008362 <__sflush_r+0xf2>
 800832a:	690f      	ldr	r7, [r1, #16]
 800832c:	2f00      	cmp	r7, #0
 800832e:	d0f6      	beq.n	800831e <__sflush_r+0xae>
 8008330:	0793      	lsls	r3, r2, #30
 8008332:	680e      	ldr	r6, [r1, #0]
 8008334:	bf08      	it	eq
 8008336:	694b      	ldreq	r3, [r1, #20]
 8008338:	600f      	str	r7, [r1, #0]
 800833a:	bf18      	it	ne
 800833c:	2300      	movne	r3, #0
 800833e:	eba6 0807 	sub.w	r8, r6, r7
 8008342:	608b      	str	r3, [r1, #8]
 8008344:	f1b8 0f00 	cmp.w	r8, #0
 8008348:	dde9      	ble.n	800831e <__sflush_r+0xae>
 800834a:	6a21      	ldr	r1, [r4, #32]
 800834c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800834e:	4643      	mov	r3, r8
 8008350:	463a      	mov	r2, r7
 8008352:	4628      	mov	r0, r5
 8008354:	47b0      	blx	r6
 8008356:	2800      	cmp	r0, #0
 8008358:	dc08      	bgt.n	800836c <__sflush_r+0xfc>
 800835a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800835e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008362:	81a3      	strh	r3, [r4, #12]
 8008364:	f04f 30ff 	mov.w	r0, #4294967295
 8008368:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800836c:	4407      	add	r7, r0
 800836e:	eba8 0800 	sub.w	r8, r8, r0
 8008372:	e7e7      	b.n	8008344 <__sflush_r+0xd4>
 8008374:	dfbffffe 	.word	0xdfbffffe

08008378 <_fflush_r>:
 8008378:	b538      	push	{r3, r4, r5, lr}
 800837a:	690b      	ldr	r3, [r1, #16]
 800837c:	4605      	mov	r5, r0
 800837e:	460c      	mov	r4, r1
 8008380:	b913      	cbnz	r3, 8008388 <_fflush_r+0x10>
 8008382:	2500      	movs	r5, #0
 8008384:	4628      	mov	r0, r5
 8008386:	bd38      	pop	{r3, r4, r5, pc}
 8008388:	b118      	cbz	r0, 8008392 <_fflush_r+0x1a>
 800838a:	6a03      	ldr	r3, [r0, #32]
 800838c:	b90b      	cbnz	r3, 8008392 <_fflush_r+0x1a>
 800838e:	f7ff fa43 	bl	8007818 <__sinit>
 8008392:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008396:	2b00      	cmp	r3, #0
 8008398:	d0f3      	beq.n	8008382 <_fflush_r+0xa>
 800839a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800839c:	07d0      	lsls	r0, r2, #31
 800839e:	d404      	bmi.n	80083aa <_fflush_r+0x32>
 80083a0:	0599      	lsls	r1, r3, #22
 80083a2:	d402      	bmi.n	80083aa <_fflush_r+0x32>
 80083a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80083a6:	f7ff fc3e 	bl	8007c26 <__retarget_lock_acquire_recursive>
 80083aa:	4628      	mov	r0, r5
 80083ac:	4621      	mov	r1, r4
 80083ae:	f7ff ff5f 	bl	8008270 <__sflush_r>
 80083b2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80083b4:	07da      	lsls	r2, r3, #31
 80083b6:	4605      	mov	r5, r0
 80083b8:	d4e4      	bmi.n	8008384 <_fflush_r+0xc>
 80083ba:	89a3      	ldrh	r3, [r4, #12]
 80083bc:	059b      	lsls	r3, r3, #22
 80083be:	d4e1      	bmi.n	8008384 <_fflush_r+0xc>
 80083c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80083c2:	f7ff fc31 	bl	8007c28 <__retarget_lock_release_recursive>
 80083c6:	e7dd      	b.n	8008384 <_fflush_r+0xc>

080083c8 <__swhatbuf_r>:
 80083c8:	b570      	push	{r4, r5, r6, lr}
 80083ca:	460c      	mov	r4, r1
 80083cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80083d0:	2900      	cmp	r1, #0
 80083d2:	b096      	sub	sp, #88	@ 0x58
 80083d4:	4615      	mov	r5, r2
 80083d6:	461e      	mov	r6, r3
 80083d8:	da0d      	bge.n	80083f6 <__swhatbuf_r+0x2e>
 80083da:	89a3      	ldrh	r3, [r4, #12]
 80083dc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80083e0:	f04f 0100 	mov.w	r1, #0
 80083e4:	bf14      	ite	ne
 80083e6:	2340      	movne	r3, #64	@ 0x40
 80083e8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80083ec:	2000      	movs	r0, #0
 80083ee:	6031      	str	r1, [r6, #0]
 80083f0:	602b      	str	r3, [r5, #0]
 80083f2:	b016      	add	sp, #88	@ 0x58
 80083f4:	bd70      	pop	{r4, r5, r6, pc}
 80083f6:	466a      	mov	r2, sp
 80083f8:	f000 f848 	bl	800848c <_fstat_r>
 80083fc:	2800      	cmp	r0, #0
 80083fe:	dbec      	blt.n	80083da <__swhatbuf_r+0x12>
 8008400:	9901      	ldr	r1, [sp, #4]
 8008402:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008406:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800840a:	4259      	negs	r1, r3
 800840c:	4159      	adcs	r1, r3
 800840e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008412:	e7eb      	b.n	80083ec <__swhatbuf_r+0x24>

08008414 <__smakebuf_r>:
 8008414:	898b      	ldrh	r3, [r1, #12]
 8008416:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008418:	079d      	lsls	r5, r3, #30
 800841a:	4606      	mov	r6, r0
 800841c:	460c      	mov	r4, r1
 800841e:	d507      	bpl.n	8008430 <__smakebuf_r+0x1c>
 8008420:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008424:	6023      	str	r3, [r4, #0]
 8008426:	6123      	str	r3, [r4, #16]
 8008428:	2301      	movs	r3, #1
 800842a:	6163      	str	r3, [r4, #20]
 800842c:	b003      	add	sp, #12
 800842e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008430:	ab01      	add	r3, sp, #4
 8008432:	466a      	mov	r2, sp
 8008434:	f7ff ffc8 	bl	80083c8 <__swhatbuf_r>
 8008438:	9f00      	ldr	r7, [sp, #0]
 800843a:	4605      	mov	r5, r0
 800843c:	4639      	mov	r1, r7
 800843e:	4630      	mov	r0, r6
 8008440:	f7ff f8d2 	bl	80075e8 <_malloc_r>
 8008444:	b948      	cbnz	r0, 800845a <__smakebuf_r+0x46>
 8008446:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800844a:	059a      	lsls	r2, r3, #22
 800844c:	d4ee      	bmi.n	800842c <__smakebuf_r+0x18>
 800844e:	f023 0303 	bic.w	r3, r3, #3
 8008452:	f043 0302 	orr.w	r3, r3, #2
 8008456:	81a3      	strh	r3, [r4, #12]
 8008458:	e7e2      	b.n	8008420 <__smakebuf_r+0xc>
 800845a:	89a3      	ldrh	r3, [r4, #12]
 800845c:	6020      	str	r0, [r4, #0]
 800845e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008462:	81a3      	strh	r3, [r4, #12]
 8008464:	9b01      	ldr	r3, [sp, #4]
 8008466:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800846a:	b15b      	cbz	r3, 8008484 <__smakebuf_r+0x70>
 800846c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008470:	4630      	mov	r0, r6
 8008472:	f000 f81d 	bl	80084b0 <_isatty_r>
 8008476:	b128      	cbz	r0, 8008484 <__smakebuf_r+0x70>
 8008478:	89a3      	ldrh	r3, [r4, #12]
 800847a:	f023 0303 	bic.w	r3, r3, #3
 800847e:	f043 0301 	orr.w	r3, r3, #1
 8008482:	81a3      	strh	r3, [r4, #12]
 8008484:	89a3      	ldrh	r3, [r4, #12]
 8008486:	431d      	orrs	r5, r3
 8008488:	81a5      	strh	r5, [r4, #12]
 800848a:	e7cf      	b.n	800842c <__smakebuf_r+0x18>

0800848c <_fstat_r>:
 800848c:	b538      	push	{r3, r4, r5, lr}
 800848e:	4d07      	ldr	r5, [pc, #28]	@ (80084ac <_fstat_r+0x20>)
 8008490:	2300      	movs	r3, #0
 8008492:	4604      	mov	r4, r0
 8008494:	4608      	mov	r0, r1
 8008496:	4611      	mov	r1, r2
 8008498:	602b      	str	r3, [r5, #0]
 800849a:	f7f9 ff72 	bl	8002382 <_fstat>
 800849e:	1c43      	adds	r3, r0, #1
 80084a0:	d102      	bne.n	80084a8 <_fstat_r+0x1c>
 80084a2:	682b      	ldr	r3, [r5, #0]
 80084a4:	b103      	cbz	r3, 80084a8 <_fstat_r+0x1c>
 80084a6:	6023      	str	r3, [r4, #0]
 80084a8:	bd38      	pop	{r3, r4, r5, pc}
 80084aa:	bf00      	nop
 80084ac:	200004a8 	.word	0x200004a8

080084b0 <_isatty_r>:
 80084b0:	b538      	push	{r3, r4, r5, lr}
 80084b2:	4d06      	ldr	r5, [pc, #24]	@ (80084cc <_isatty_r+0x1c>)
 80084b4:	2300      	movs	r3, #0
 80084b6:	4604      	mov	r4, r0
 80084b8:	4608      	mov	r0, r1
 80084ba:	602b      	str	r3, [r5, #0]
 80084bc:	f7f9 ff71 	bl	80023a2 <_isatty>
 80084c0:	1c43      	adds	r3, r0, #1
 80084c2:	d102      	bne.n	80084ca <_isatty_r+0x1a>
 80084c4:	682b      	ldr	r3, [r5, #0]
 80084c6:	b103      	cbz	r3, 80084ca <_isatty_r+0x1a>
 80084c8:	6023      	str	r3, [r4, #0]
 80084ca:	bd38      	pop	{r3, r4, r5, pc}
 80084cc:	200004a8 	.word	0x200004a8

080084d0 <_init>:
 80084d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084d2:	bf00      	nop
 80084d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80084d6:	bc08      	pop	{r3}
 80084d8:	469e      	mov	lr, r3
 80084da:	4770      	bx	lr

080084dc <_fini>:
 80084dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084de:	bf00      	nop
 80084e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80084e2:	bc08      	pop	{r3}
 80084e4:	469e      	mov	lr, r3
 80084e6:	4770      	bx	lr
