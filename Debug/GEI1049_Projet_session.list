
GEI1049_Projet_session.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009c6c  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003a00  08009e3c  08009e3c  0000ae3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d83c  0800d83c  0000f0ac  2**0
                  CONTENTS
  4 .ARM          00000008  0800d83c  0800d83c  0000e83c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d844  0800d844  0000f0ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d844  0800d844  0000e844  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d848  0800d848  0000e848  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000ac  20000000  0800d84c  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000500  200000ac  0800d8f8  0000f0ac  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005ac  0800d8f8  0000f5ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f0ac  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019183  00000000  00000000  0000f0dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004082  00000000  00000000  0002825f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001650  00000000  00000000  0002c2e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001130  00000000  00000000  0002d938  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027acd  00000000  00000000  0002ea68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00020e13  00000000  00000000  00056535  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000deb3c  00000000  00000000  00077348  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00155e84  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006488  00000000  00000000  00155ec8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  0015c350  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000ac 	.word	0x200000ac
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08009e24 	.word	0x08009e24

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000b0 	.word	0x200000b0
 800020c:	08009e24 	.word	0x08009e24

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	@ 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__aeabi_d2iz>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a54:	d215      	bcs.n	8000a82 <__aeabi_d2iz+0x36>
 8000a56:	d511      	bpl.n	8000a7c <__aeabi_d2iz+0x30>
 8000a58:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d912      	bls.n	8000a88 <__aeabi_d2iz+0x3c>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a72:	fa23 f002 	lsr.w	r0, r3, r2
 8000a76:	bf18      	it	ne
 8000a78:	4240      	negne	r0, r0
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a86:	d105      	bne.n	8000a94 <__aeabi_d2iz+0x48>
 8000a88:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a8c:	bf08      	it	eq
 8000a8e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a92:	4770      	bx	lr
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop

08000a9c <__aeabi_d2uiz>:
 8000a9c:	004a      	lsls	r2, r1, #1
 8000a9e:	d211      	bcs.n	8000ac4 <__aeabi_d2uiz+0x28>
 8000aa0:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000aa4:	d211      	bcs.n	8000aca <__aeabi_d2uiz+0x2e>
 8000aa6:	d50d      	bpl.n	8000ac4 <__aeabi_d2uiz+0x28>
 8000aa8:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000aac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab0:	d40e      	bmi.n	8000ad0 <__aeabi_d2uiz+0x34>
 8000ab2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000abe:	fa23 f002 	lsr.w	r0, r3, r2
 8000ac2:	4770      	bx	lr
 8000ac4:	f04f 0000 	mov.w	r0, #0
 8000ac8:	4770      	bx	lr
 8000aca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ace:	d102      	bne.n	8000ad6 <__aeabi_d2uiz+0x3a>
 8000ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ad4:	4770      	bx	lr
 8000ad6:	f04f 0000 	mov.w	r0, #0
 8000ada:	4770      	bx	lr

08000adc <__aeabi_d2f>:
 8000adc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ae0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ae4:	bf24      	itt	cs
 8000ae6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000aea:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000aee:	d90d      	bls.n	8000b0c <__aeabi_d2f+0x30>
 8000af0:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000af4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000af8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000afc:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b00:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b04:	bf08      	it	eq
 8000b06:	f020 0001 	biceq.w	r0, r0, #1
 8000b0a:	4770      	bx	lr
 8000b0c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b10:	d121      	bne.n	8000b56 <__aeabi_d2f+0x7a>
 8000b12:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b16:	bfbc      	itt	lt
 8000b18:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b1c:	4770      	bxlt	lr
 8000b1e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b22:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b26:	f1c2 0218 	rsb	r2, r2, #24
 8000b2a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b2e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b32:	fa20 f002 	lsr.w	r0, r0, r2
 8000b36:	bf18      	it	ne
 8000b38:	f040 0001 	orrne.w	r0, r0, #1
 8000b3c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b40:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b44:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b48:	ea40 000c 	orr.w	r0, r0, ip
 8000b4c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b50:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b54:	e7cc      	b.n	8000af0 <__aeabi_d2f+0x14>
 8000b56:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b5a:	d107      	bne.n	8000b6c <__aeabi_d2f+0x90>
 8000b5c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b60:	bf1e      	ittt	ne
 8000b62:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b66:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b6a:	4770      	bxne	lr
 8000b6c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b70:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b74:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <__aeabi_uldivmod>:
 8000b7c:	b953      	cbnz	r3, 8000b94 <__aeabi_uldivmod+0x18>
 8000b7e:	b94a      	cbnz	r2, 8000b94 <__aeabi_uldivmod+0x18>
 8000b80:	2900      	cmp	r1, #0
 8000b82:	bf08      	it	eq
 8000b84:	2800      	cmpeq	r0, #0
 8000b86:	bf1c      	itt	ne
 8000b88:	f04f 31ff 	movne.w	r1, #4294967295
 8000b8c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b90:	f000 b96a 	b.w	8000e68 <__aeabi_idiv0>
 8000b94:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b98:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b9c:	f000 f806 	bl	8000bac <__udivmoddi4>
 8000ba0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ba4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ba8:	b004      	add	sp, #16
 8000baa:	4770      	bx	lr

08000bac <__udivmoddi4>:
 8000bac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bb0:	9d08      	ldr	r5, [sp, #32]
 8000bb2:	460c      	mov	r4, r1
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d14e      	bne.n	8000c56 <__udivmoddi4+0xaa>
 8000bb8:	4694      	mov	ip, r2
 8000bba:	458c      	cmp	ip, r1
 8000bbc:	4686      	mov	lr, r0
 8000bbe:	fab2 f282 	clz	r2, r2
 8000bc2:	d962      	bls.n	8000c8a <__udivmoddi4+0xde>
 8000bc4:	b14a      	cbz	r2, 8000bda <__udivmoddi4+0x2e>
 8000bc6:	f1c2 0320 	rsb	r3, r2, #32
 8000bca:	4091      	lsls	r1, r2
 8000bcc:	fa20 f303 	lsr.w	r3, r0, r3
 8000bd0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bd4:	4319      	orrs	r1, r3
 8000bd6:	fa00 fe02 	lsl.w	lr, r0, r2
 8000bda:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bde:	fa1f f68c 	uxth.w	r6, ip
 8000be2:	fbb1 f4f7 	udiv	r4, r1, r7
 8000be6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bea:	fb07 1114 	mls	r1, r7, r4, r1
 8000bee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bf2:	fb04 f106 	mul.w	r1, r4, r6
 8000bf6:	4299      	cmp	r1, r3
 8000bf8:	d90a      	bls.n	8000c10 <__udivmoddi4+0x64>
 8000bfa:	eb1c 0303 	adds.w	r3, ip, r3
 8000bfe:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c02:	f080 8112 	bcs.w	8000e2a <__udivmoddi4+0x27e>
 8000c06:	4299      	cmp	r1, r3
 8000c08:	f240 810f 	bls.w	8000e2a <__udivmoddi4+0x27e>
 8000c0c:	3c02      	subs	r4, #2
 8000c0e:	4463      	add	r3, ip
 8000c10:	1a59      	subs	r1, r3, r1
 8000c12:	fa1f f38e 	uxth.w	r3, lr
 8000c16:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c1a:	fb07 1110 	mls	r1, r7, r0, r1
 8000c1e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c22:	fb00 f606 	mul.w	r6, r0, r6
 8000c26:	429e      	cmp	r6, r3
 8000c28:	d90a      	bls.n	8000c40 <__udivmoddi4+0x94>
 8000c2a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c32:	f080 80fc 	bcs.w	8000e2e <__udivmoddi4+0x282>
 8000c36:	429e      	cmp	r6, r3
 8000c38:	f240 80f9 	bls.w	8000e2e <__udivmoddi4+0x282>
 8000c3c:	4463      	add	r3, ip
 8000c3e:	3802      	subs	r0, #2
 8000c40:	1b9b      	subs	r3, r3, r6
 8000c42:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c46:	2100      	movs	r1, #0
 8000c48:	b11d      	cbz	r5, 8000c52 <__udivmoddi4+0xa6>
 8000c4a:	40d3      	lsrs	r3, r2
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	e9c5 3200 	strd	r3, r2, [r5]
 8000c52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c56:	428b      	cmp	r3, r1
 8000c58:	d905      	bls.n	8000c66 <__udivmoddi4+0xba>
 8000c5a:	b10d      	cbz	r5, 8000c60 <__udivmoddi4+0xb4>
 8000c5c:	e9c5 0100 	strd	r0, r1, [r5]
 8000c60:	2100      	movs	r1, #0
 8000c62:	4608      	mov	r0, r1
 8000c64:	e7f5      	b.n	8000c52 <__udivmoddi4+0xa6>
 8000c66:	fab3 f183 	clz	r1, r3
 8000c6a:	2900      	cmp	r1, #0
 8000c6c:	d146      	bne.n	8000cfc <__udivmoddi4+0x150>
 8000c6e:	42a3      	cmp	r3, r4
 8000c70:	d302      	bcc.n	8000c78 <__udivmoddi4+0xcc>
 8000c72:	4290      	cmp	r0, r2
 8000c74:	f0c0 80f0 	bcc.w	8000e58 <__udivmoddi4+0x2ac>
 8000c78:	1a86      	subs	r6, r0, r2
 8000c7a:	eb64 0303 	sbc.w	r3, r4, r3
 8000c7e:	2001      	movs	r0, #1
 8000c80:	2d00      	cmp	r5, #0
 8000c82:	d0e6      	beq.n	8000c52 <__udivmoddi4+0xa6>
 8000c84:	e9c5 6300 	strd	r6, r3, [r5]
 8000c88:	e7e3      	b.n	8000c52 <__udivmoddi4+0xa6>
 8000c8a:	2a00      	cmp	r2, #0
 8000c8c:	f040 8090 	bne.w	8000db0 <__udivmoddi4+0x204>
 8000c90:	eba1 040c 	sub.w	r4, r1, ip
 8000c94:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c98:	fa1f f78c 	uxth.w	r7, ip
 8000c9c:	2101      	movs	r1, #1
 8000c9e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000ca2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ca6:	fb08 4416 	mls	r4, r8, r6, r4
 8000caa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cae:	fb07 f006 	mul.w	r0, r7, r6
 8000cb2:	4298      	cmp	r0, r3
 8000cb4:	d908      	bls.n	8000cc8 <__udivmoddi4+0x11c>
 8000cb6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cba:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cbe:	d202      	bcs.n	8000cc6 <__udivmoddi4+0x11a>
 8000cc0:	4298      	cmp	r0, r3
 8000cc2:	f200 80cd 	bhi.w	8000e60 <__udivmoddi4+0x2b4>
 8000cc6:	4626      	mov	r6, r4
 8000cc8:	1a1c      	subs	r4, r3, r0
 8000cca:	fa1f f38e 	uxth.w	r3, lr
 8000cce:	fbb4 f0f8 	udiv	r0, r4, r8
 8000cd2:	fb08 4410 	mls	r4, r8, r0, r4
 8000cd6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cda:	fb00 f707 	mul.w	r7, r0, r7
 8000cde:	429f      	cmp	r7, r3
 8000ce0:	d908      	bls.n	8000cf4 <__udivmoddi4+0x148>
 8000ce2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ce6:	f100 34ff 	add.w	r4, r0, #4294967295
 8000cea:	d202      	bcs.n	8000cf2 <__udivmoddi4+0x146>
 8000cec:	429f      	cmp	r7, r3
 8000cee:	f200 80b0 	bhi.w	8000e52 <__udivmoddi4+0x2a6>
 8000cf2:	4620      	mov	r0, r4
 8000cf4:	1bdb      	subs	r3, r3, r7
 8000cf6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cfa:	e7a5      	b.n	8000c48 <__udivmoddi4+0x9c>
 8000cfc:	f1c1 0620 	rsb	r6, r1, #32
 8000d00:	408b      	lsls	r3, r1
 8000d02:	fa22 f706 	lsr.w	r7, r2, r6
 8000d06:	431f      	orrs	r7, r3
 8000d08:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d0c:	fa04 f301 	lsl.w	r3, r4, r1
 8000d10:	ea43 030c 	orr.w	r3, r3, ip
 8000d14:	40f4      	lsrs	r4, r6
 8000d16:	fa00 f801 	lsl.w	r8, r0, r1
 8000d1a:	0c38      	lsrs	r0, r7, #16
 8000d1c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d20:	fbb4 fef0 	udiv	lr, r4, r0
 8000d24:	fa1f fc87 	uxth.w	ip, r7
 8000d28:	fb00 441e 	mls	r4, r0, lr, r4
 8000d2c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d30:	fb0e f90c 	mul.w	r9, lr, ip
 8000d34:	45a1      	cmp	r9, r4
 8000d36:	fa02 f201 	lsl.w	r2, r2, r1
 8000d3a:	d90a      	bls.n	8000d52 <__udivmoddi4+0x1a6>
 8000d3c:	193c      	adds	r4, r7, r4
 8000d3e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d42:	f080 8084 	bcs.w	8000e4e <__udivmoddi4+0x2a2>
 8000d46:	45a1      	cmp	r9, r4
 8000d48:	f240 8081 	bls.w	8000e4e <__udivmoddi4+0x2a2>
 8000d4c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d50:	443c      	add	r4, r7
 8000d52:	eba4 0409 	sub.w	r4, r4, r9
 8000d56:	fa1f f983 	uxth.w	r9, r3
 8000d5a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d5e:	fb00 4413 	mls	r4, r0, r3, r4
 8000d62:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d66:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d6a:	45a4      	cmp	ip, r4
 8000d6c:	d907      	bls.n	8000d7e <__udivmoddi4+0x1d2>
 8000d6e:	193c      	adds	r4, r7, r4
 8000d70:	f103 30ff 	add.w	r0, r3, #4294967295
 8000d74:	d267      	bcs.n	8000e46 <__udivmoddi4+0x29a>
 8000d76:	45a4      	cmp	ip, r4
 8000d78:	d965      	bls.n	8000e46 <__udivmoddi4+0x29a>
 8000d7a:	3b02      	subs	r3, #2
 8000d7c:	443c      	add	r4, r7
 8000d7e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000d82:	fba0 9302 	umull	r9, r3, r0, r2
 8000d86:	eba4 040c 	sub.w	r4, r4, ip
 8000d8a:	429c      	cmp	r4, r3
 8000d8c:	46ce      	mov	lr, r9
 8000d8e:	469c      	mov	ip, r3
 8000d90:	d351      	bcc.n	8000e36 <__udivmoddi4+0x28a>
 8000d92:	d04e      	beq.n	8000e32 <__udivmoddi4+0x286>
 8000d94:	b155      	cbz	r5, 8000dac <__udivmoddi4+0x200>
 8000d96:	ebb8 030e 	subs.w	r3, r8, lr
 8000d9a:	eb64 040c 	sbc.w	r4, r4, ip
 8000d9e:	fa04 f606 	lsl.w	r6, r4, r6
 8000da2:	40cb      	lsrs	r3, r1
 8000da4:	431e      	orrs	r6, r3
 8000da6:	40cc      	lsrs	r4, r1
 8000da8:	e9c5 6400 	strd	r6, r4, [r5]
 8000dac:	2100      	movs	r1, #0
 8000dae:	e750      	b.n	8000c52 <__udivmoddi4+0xa6>
 8000db0:	f1c2 0320 	rsb	r3, r2, #32
 8000db4:	fa20 f103 	lsr.w	r1, r0, r3
 8000db8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dbc:	fa24 f303 	lsr.w	r3, r4, r3
 8000dc0:	4094      	lsls	r4, r2
 8000dc2:	430c      	orrs	r4, r1
 8000dc4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000dc8:	fa00 fe02 	lsl.w	lr, r0, r2
 8000dcc:	fa1f f78c 	uxth.w	r7, ip
 8000dd0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dd4:	fb08 3110 	mls	r1, r8, r0, r3
 8000dd8:	0c23      	lsrs	r3, r4, #16
 8000dda:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dde:	fb00 f107 	mul.w	r1, r0, r7
 8000de2:	4299      	cmp	r1, r3
 8000de4:	d908      	bls.n	8000df8 <__udivmoddi4+0x24c>
 8000de6:	eb1c 0303 	adds.w	r3, ip, r3
 8000dea:	f100 36ff 	add.w	r6, r0, #4294967295
 8000dee:	d22c      	bcs.n	8000e4a <__udivmoddi4+0x29e>
 8000df0:	4299      	cmp	r1, r3
 8000df2:	d92a      	bls.n	8000e4a <__udivmoddi4+0x29e>
 8000df4:	3802      	subs	r0, #2
 8000df6:	4463      	add	r3, ip
 8000df8:	1a5b      	subs	r3, r3, r1
 8000dfa:	b2a4      	uxth	r4, r4
 8000dfc:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e00:	fb08 3311 	mls	r3, r8, r1, r3
 8000e04:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e08:	fb01 f307 	mul.w	r3, r1, r7
 8000e0c:	42a3      	cmp	r3, r4
 8000e0e:	d908      	bls.n	8000e22 <__udivmoddi4+0x276>
 8000e10:	eb1c 0404 	adds.w	r4, ip, r4
 8000e14:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e18:	d213      	bcs.n	8000e42 <__udivmoddi4+0x296>
 8000e1a:	42a3      	cmp	r3, r4
 8000e1c:	d911      	bls.n	8000e42 <__udivmoddi4+0x296>
 8000e1e:	3902      	subs	r1, #2
 8000e20:	4464      	add	r4, ip
 8000e22:	1ae4      	subs	r4, r4, r3
 8000e24:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e28:	e739      	b.n	8000c9e <__udivmoddi4+0xf2>
 8000e2a:	4604      	mov	r4, r0
 8000e2c:	e6f0      	b.n	8000c10 <__udivmoddi4+0x64>
 8000e2e:	4608      	mov	r0, r1
 8000e30:	e706      	b.n	8000c40 <__udivmoddi4+0x94>
 8000e32:	45c8      	cmp	r8, r9
 8000e34:	d2ae      	bcs.n	8000d94 <__udivmoddi4+0x1e8>
 8000e36:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e3a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e3e:	3801      	subs	r0, #1
 8000e40:	e7a8      	b.n	8000d94 <__udivmoddi4+0x1e8>
 8000e42:	4631      	mov	r1, r6
 8000e44:	e7ed      	b.n	8000e22 <__udivmoddi4+0x276>
 8000e46:	4603      	mov	r3, r0
 8000e48:	e799      	b.n	8000d7e <__udivmoddi4+0x1d2>
 8000e4a:	4630      	mov	r0, r6
 8000e4c:	e7d4      	b.n	8000df8 <__udivmoddi4+0x24c>
 8000e4e:	46d6      	mov	lr, sl
 8000e50:	e77f      	b.n	8000d52 <__udivmoddi4+0x1a6>
 8000e52:	4463      	add	r3, ip
 8000e54:	3802      	subs	r0, #2
 8000e56:	e74d      	b.n	8000cf4 <__udivmoddi4+0x148>
 8000e58:	4606      	mov	r6, r0
 8000e5a:	4623      	mov	r3, r4
 8000e5c:	4608      	mov	r0, r1
 8000e5e:	e70f      	b.n	8000c80 <__udivmoddi4+0xd4>
 8000e60:	3e02      	subs	r6, #2
 8000e62:	4463      	add	r3, ip
 8000e64:	e730      	b.n	8000cc8 <__udivmoddi4+0x11c>
 8000e66:	bf00      	nop

08000e68 <__aeabi_idiv0>:
 8000e68:	4770      	bx	lr
 8000e6a:	bf00      	nop

08000e6c <Get_Mode>:
float RATIO = 0.9;
float CLOCKWISE_FACTOR = 66.879;
float COUNTER_CLW_FACTOR = 0;


int Get_Mode(int MSB_state, int LSB_state) {
 8000e6c:	b480      	push	{r7}
 8000e6e:	b085      	sub	sp, #20
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
 8000e74:	6039      	str	r1, [r7, #0]
	static const int id_lookup[4] = {MANUAL_MODE, CIRCLE_MODE,  BACK_FORTH_MODE, SQUARE_MODE};
	int bin = ((MSB_state & 1) << 1) | (LSB_state & 1);
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	005b      	lsls	r3, r3, #1
 8000e7a:	f003 0202 	and.w	r2, r3, #2
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	f003 0301 	and.w	r3, r3, #1
 8000e84:	4313      	orrs	r3, r2
 8000e86:	60fb      	str	r3, [r7, #12]
	return id_lookup[bin];
 8000e88:	4a04      	ldr	r2, [pc, #16]	@ (8000e9c <Get_Mode+0x30>)
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8000e90:	4618      	mov	r0, r3
 8000e92:	3714      	adds	r7, #20
 8000e94:	46bd      	mov	sp, r7
 8000e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9a:	4770      	bx	lr
 8000e9c:	0800a270 	.word	0x0800a270

08000ea0 <Get_Mode_String>:

char* Get_Mode_String() {
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b082      	sub	sp, #8
 8000ea4:	af00      	add	r7, sp, #0
	const size_t buffer_size = 8;
 8000ea6:	2308      	movs	r3, #8
 8000ea8:	603b      	str	r3, [r7, #0]
	char* str = malloc(buffer_size);
 8000eaa:	6838      	ldr	r0, [r7, #0]
 8000eac:	f008 f81c 	bl	8008ee8 <malloc>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	607b      	str	r3, [r7, #4]
	switch(curr_mode) {
 8000eb4:	4b11      	ldr	r3, [pc, #68]	@ (8000efc <Get_Mode_String+0x5c>)
 8000eb6:	781b      	ldrb	r3, [r3, #0]
 8000eb8:	2b03      	cmp	r3, #3
 8000eba:	d817      	bhi.n	8000eec <Get_Mode_String+0x4c>
 8000ebc:	a201      	add	r2, pc, #4	@ (adr r2, 8000ec4 <Get_Mode_String+0x24>)
 8000ebe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ec2:	bf00      	nop
 8000ec4:	08000ed5 	.word	0x08000ed5
 8000ec8:	08000edb 	.word	0x08000edb
 8000ecc:	08000ee1 	.word	0x08000ee1
 8000ed0:	08000ee7 	.word	0x08000ee7
		case MANUAL_MODE:
			str = "MANUAL";
 8000ed4:	4b0a      	ldr	r3, [pc, #40]	@ (8000f00 <Get_Mode_String+0x60>)
 8000ed6:	607b      	str	r3, [r7, #4]
			break;
 8000ed8:	e00b      	b.n	8000ef2 <Get_Mode_String+0x52>
		case CIRCLE_MODE:
			str = "CIRCLE";
 8000eda:	4b0a      	ldr	r3, [pc, #40]	@ (8000f04 <Get_Mode_String+0x64>)
 8000edc:	607b      	str	r3, [r7, #4]
			break;
 8000ede:	e008      	b.n	8000ef2 <Get_Mode_String+0x52>
		case BACK_FORTH_MODE:
			str = "LINE";
 8000ee0:	4b09      	ldr	r3, [pc, #36]	@ (8000f08 <Get_Mode_String+0x68>)
 8000ee2:	607b      	str	r3, [r7, #4]
			break;
 8000ee4:	e005      	b.n	8000ef2 <Get_Mode_String+0x52>
		case SQUARE_MODE:
			str = "SQUARE";
 8000ee6:	4b09      	ldr	r3, [pc, #36]	@ (8000f0c <Get_Mode_String+0x6c>)
 8000ee8:	607b      	str	r3, [r7, #4]
			break;
 8000eea:	e002      	b.n	8000ef2 <Get_Mode_String+0x52>
		default:
			str = "ERROR";
 8000eec:	4b08      	ldr	r3, [pc, #32]	@ (8000f10 <Get_Mode_String+0x70>)
 8000eee:	607b      	str	r3, [r7, #4]
			break;
 8000ef0:	bf00      	nop
	}
	return str;
 8000ef2:	687b      	ldr	r3, [r7, #4]
}
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	3708      	adds	r7, #8
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	200000ca 	.word	0x200000ca
 8000f00:	08009e3c 	.word	0x08009e3c
 8000f04:	08009e44 	.word	0x08009e44
 8000f08:	08009e4c 	.word	0x08009e4c
 8000f0c:	08009e54 	.word	0x08009e54
 8000f10:	08009e5c 	.word	0x08009e5c

08000f14 <Auto_Angle>:

void Auto_Angle(float value) {
 8000f14:	b5b0      	push	{r4, r5, r7, lr}
 8000f16:	b082      	sub	sp, #8
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	ed87 0a01 	vstr	s0, [r7, #4]
	// Initial setup
	if(timer_count == 0) {
 8000f1e:	4b49      	ldr	r3, [pc, #292]	@ (8001044 <Auto_Angle+0x130>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d16e      	bne.n	8001004 <Auto_Angle+0xf0>
		LCD_Manuel(0);
 8000f26:	2000      	movs	r0, #0
 8000f28:	f002 fb52 	bl	80035d0 <LCD_Manuel>
		LCD_Mode();
 8000f2c:	f002 fb9e 	bl	800366c <LCD_Mode>

		// Calculate the duration for the turn
		turning_time = fabs(value) * TRACK_WIDTH;
 8000f30:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f34:	eef0 7ae7 	vabs.f32	s15, s15
 8000f38:	ed9f 7a43 	vldr	s14, [pc, #268]	@ 8001048 <Auto_Angle+0x134>
 8000f3c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f40:	4b42      	ldr	r3, [pc, #264]	@ (800104c <Auto_Angle+0x138>)
 8000f42:	edc3 7a00 	vstr	s15, [r3]

		// Determine direction of turn
		if (value > 0) {
 8000f46:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f4a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000f4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f52:	dd25      	ble.n	8000fa0 <Auto_Angle+0x8c>
			turning_time /= (360.0 * CLOCKWISE_FACTOR);
 8000f54:	4b3d      	ldr	r3, [pc, #244]	@ (800104c <Auto_Angle+0x138>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f7ff fb0d 	bl	8000578 <__aeabi_f2d>
 8000f5e:	4604      	mov	r4, r0
 8000f60:	460d      	mov	r5, r1
 8000f62:	4b3b      	ldr	r3, [pc, #236]	@ (8001050 <Auto_Angle+0x13c>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	4618      	mov	r0, r3
 8000f68:	f7ff fb06 	bl	8000578 <__aeabi_f2d>
 8000f6c:	f04f 0200 	mov.w	r2, #0
 8000f70:	4b38      	ldr	r3, [pc, #224]	@ (8001054 <Auto_Angle+0x140>)
 8000f72:	f7ff fb59 	bl	8000628 <__aeabi_dmul>
 8000f76:	4602      	mov	r2, r0
 8000f78:	460b      	mov	r3, r1
 8000f7a:	4620      	mov	r0, r4
 8000f7c:	4629      	mov	r1, r5
 8000f7e:	f7ff fc7d 	bl	800087c <__aeabi_ddiv>
 8000f82:	4602      	mov	r2, r0
 8000f84:	460b      	mov	r3, r1
 8000f86:	4610      	mov	r0, r2
 8000f88:	4619      	mov	r1, r3
 8000f8a:	f7ff fda7 	bl	8000adc <__aeabi_d2f>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	4a2e      	ldr	r2, [pc, #184]	@ (800104c <Auto_Angle+0x138>)
 8000f92:	6013      	str	r3, [r2, #0]
			Droite(BASE_SPEED, &htim3);
 8000f94:	4930      	ldr	r1, [pc, #192]	@ (8001058 <Auto_Angle+0x144>)
 8000f96:	f44f 70e1 	mov.w	r0, #450	@ 0x1c2
 8000f9a:	f000 fb31 	bl	8001600 <Droite>
 8000f9e:	e024      	b.n	8000fea <Auto_Angle+0xd6>
		}
		else {
			turning_time /= (360.0 * COUNTER_CLW_FACTOR);
 8000fa0:	4b2a      	ldr	r3, [pc, #168]	@ (800104c <Auto_Angle+0x138>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f7ff fae7 	bl	8000578 <__aeabi_f2d>
 8000faa:	4604      	mov	r4, r0
 8000fac:	460d      	mov	r5, r1
 8000fae:	4b2b      	ldr	r3, [pc, #172]	@ (800105c <Auto_Angle+0x148>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f7ff fae0 	bl	8000578 <__aeabi_f2d>
 8000fb8:	f04f 0200 	mov.w	r2, #0
 8000fbc:	4b25      	ldr	r3, [pc, #148]	@ (8001054 <Auto_Angle+0x140>)
 8000fbe:	f7ff fb33 	bl	8000628 <__aeabi_dmul>
 8000fc2:	4602      	mov	r2, r0
 8000fc4:	460b      	mov	r3, r1
 8000fc6:	4620      	mov	r0, r4
 8000fc8:	4629      	mov	r1, r5
 8000fca:	f7ff fc57 	bl	800087c <__aeabi_ddiv>
 8000fce:	4602      	mov	r2, r0
 8000fd0:	460b      	mov	r3, r1
 8000fd2:	4610      	mov	r0, r2
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	f7ff fd81 	bl	8000adc <__aeabi_d2f>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	4a1b      	ldr	r2, [pc, #108]	@ (800104c <Auto_Angle+0x138>)
 8000fde:	6013      	str	r3, [r2, #0]
			Gauche(BASE_SPEED, &htim3);
 8000fe0:	491d      	ldr	r1, [pc, #116]	@ (8001058 <Auto_Angle+0x144>)
 8000fe2:	f44f 70e1 	mov.w	r0, #450	@ 0x1c2
 8000fe6:	f000 fb4b 	bl	8001680 <Gauche>
		}

		// Convert turning time in µs
		turning_time *= 1e6;
 8000fea:	4b18      	ldr	r3, [pc, #96]	@ (800104c <Auto_Angle+0x138>)
 8000fec:	edd3 7a00 	vldr	s15, [r3]
 8000ff0:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 8001060 <Auto_Angle+0x14c>
 8000ff4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000ff8:	4b14      	ldr	r3, [pc, #80]	@ (800104c <Auto_Angle+0x138>)
 8000ffa:	edc3 7a00 	vstr	s15, [r3]

		// Start timer
	    HAL_TIM_Base_Start_IT(&htim7);
 8000ffe:	4819      	ldr	r0, [pc, #100]	@ (8001064 <Auto_Angle+0x150>)
 8001000:	f005 ff52 	bl	8006ea8 <HAL_TIM_Base_Start_IT>
	}

    // Stop when finished
	if(timer_count > (int)turning_time) {
 8001004:	4b11      	ldr	r3, [pc, #68]	@ (800104c <Auto_Angle+0x138>)
 8001006:	edd3 7a00 	vldr	s15, [r3]
 800100a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800100e:	ee17 2a90 	vmov	r2, s15
 8001012:	4b0c      	ldr	r3, [pc, #48]	@ (8001044 <Auto_Angle+0x130>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	429a      	cmp	r2, r3
 8001018:	da0f      	bge.n	800103a <Auto_Angle+0x126>

		// Stop timer
		HAL_TIM_Base_Stop_IT(&htim7);
 800101a:	4812      	ldr	r0, [pc, #72]	@ (8001064 <Auto_Angle+0x150>)
 800101c:	f005 ffb4 	bl	8006f88 <HAL_TIM_Base_Stop_IT>

		// Stop the motors
		Stop(&htim3);
 8001020:	480d      	ldr	r0, [pc, #52]	@ (8001058 <Auto_Angle+0x144>)
 8001022:	f000 fbad 	bl	8001780 <Stop>

		// Reset temporal counter
		timer_count = 0;
 8001026:	4b07      	ldr	r3, [pc, #28]	@ (8001044 <Auto_Angle+0x130>)
 8001028:	2200      	movs	r2, #0
 800102a:	601a      	str	r2, [r3, #0]

		// Ready for next step
		curr_step++;
 800102c:	4b0e      	ldr	r3, [pc, #56]	@ (8001068 <Auto_Angle+0x154>)
 800102e:	781b      	ldrb	r3, [r3, #0]
 8001030:	3301      	adds	r3, #1
 8001032:	b2da      	uxtb	r2, r3
 8001034:	4b0c      	ldr	r3, [pc, #48]	@ (8001068 <Auto_Angle+0x154>)
 8001036:	701a      	strb	r2, [r3, #0]
	}

	return;
 8001038:	bf00      	nop
 800103a:	bf00      	nop
}
 800103c:	3708      	adds	r7, #8
 800103e:	46bd      	mov	sp, r7
 8001040:	bdb0      	pop	{r4, r5, r7, pc}
 8001042:	bf00      	nop
 8001044:	200000e0 	.word	0x200000e0
 8001048:	43880000 	.word	0x43880000
 800104c:	200000e4 	.word	0x200000e4
 8001050:	20000008 	.word	0x20000008
 8001054:	40768000 	.word	0x40768000
 8001058:	2000022c 	.word	0x2000022c
 800105c:	200000f8 	.word	0x200000f8
 8001060:	49742400 	.word	0x49742400
 8001064:	20000304 	.word	0x20000304
 8001068:	20000000 	.word	0x20000000
 800106c:	00000000 	.word	0x00000000

08001070 <Auto_Line>:

void Auto_Line(int dist, int min_speed, int max_speed) {
 8001070:	b580      	push	{r7, lr}
 8001072:	b088      	sub	sp, #32
 8001074:	af00      	add	r7, sp, #0
 8001076:	60f8      	str	r0, [r7, #12]
 8001078:	60b9      	str	r1, [r7, #8]
 800107a:	607a      	str	r2, [r7, #4]
    // Constants
    const float accel_fraction = 0.4; // 40% of total time for acceleration
 800107c:	4b70      	ldr	r3, [pc, #448]	@ (8001240 <Auto_Line+0x1d0>)
 800107e:	61fb      	str	r3, [r7, #28]
    const float decel_fraction = 0.4; // 40% of total time for deceleration
 8001080:	4b6f      	ldr	r3, [pc, #444]	@ (8001240 <Auto_Line+0x1d0>)
 8001082:	61bb      	str	r3, [r7, #24]

    // Initial setup
    if (timer_count == 0) {
 8001084:	4b6f      	ldr	r3, [pc, #444]	@ (8001244 <Auto_Line+0x1d4>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	2b00      	cmp	r3, #0
 800108a:	d16f      	bne.n	800116c <Auto_Line+0xfc>
    	LCD_Manuel(0);
 800108c:	2000      	movs	r0, #0
 800108e:	f002 fa9f 	bl	80035d0 <LCD_Manuel>
    	LCD_Mode();
 8001092:	f002 faeb 	bl	800366c <LCD_Mode>

    	// Calculate total pulses required
    	float total_pulses = dist / TRACK_RESOLUTION;
 8001096:	68f8      	ldr	r0, [r7, #12]
 8001098:	f7ff fa5c 	bl	8000554 <__aeabi_i2d>
 800109c:	a364      	add	r3, pc, #400	@ (adr r3, 8001230 <Auto_Line+0x1c0>)
 800109e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010a2:	f7ff fbeb 	bl	800087c <__aeabi_ddiv>
 80010a6:	4602      	mov	r2, r0
 80010a8:	460b      	mov	r3, r1
 80010aa:	4610      	mov	r0, r2
 80010ac:	4619      	mov	r1, r3
 80010ae:	f7ff fd15 	bl	8000adc <__aeabi_d2f>
 80010b2:	4603      	mov	r3, r0
 80010b4:	617b      	str	r3, [r7, #20]

        // Calculate total time
        turning_time = (min_speed + max_speed) / 2.0;
 80010b6:	68ba      	ldr	r2, [r7, #8]
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	4413      	add	r3, r2
 80010bc:	4618      	mov	r0, r3
 80010be:	f7ff fa49 	bl	8000554 <__aeabi_i2d>
 80010c2:	f04f 0200 	mov.w	r2, #0
 80010c6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80010ca:	f7ff fbd7 	bl	800087c <__aeabi_ddiv>
 80010ce:	4602      	mov	r2, r0
 80010d0:	460b      	mov	r3, r1
 80010d2:	4610      	mov	r0, r2
 80010d4:	4619      	mov	r1, r3
 80010d6:	f7ff fd01 	bl	8000adc <__aeabi_d2f>
 80010da:	4603      	mov	r3, r0
 80010dc:	4a5a      	ldr	r2, [pc, #360]	@ (8001248 <Auto_Line+0x1d8>)
 80010de:	6013      	str	r3, [r2, #0]
        total_time = (int)((total_pulses / turning_time) * 1e7);
 80010e0:	4b59      	ldr	r3, [pc, #356]	@ (8001248 <Auto_Line+0x1d8>)
 80010e2:	edd3 7a00 	vldr	s15, [r3]
 80010e6:	ed97 7a05 	vldr	s14, [r7, #20]
 80010ea:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80010ee:	ee16 0a90 	vmov	r0, s13
 80010f2:	f7ff fa41 	bl	8000578 <__aeabi_f2d>
 80010f6:	a350      	add	r3, pc, #320	@ (adr r3, 8001238 <Auto_Line+0x1c8>)
 80010f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010fc:	f7ff fa94 	bl	8000628 <__aeabi_dmul>
 8001100:	4602      	mov	r2, r0
 8001102:	460b      	mov	r3, r1
 8001104:	4610      	mov	r0, r2
 8001106:	4619      	mov	r1, r3
 8001108:	f7ff fca0 	bl	8000a4c <__aeabi_d2iz>
 800110c:	4603      	mov	r3, r0
 800110e:	4a4f      	ldr	r2, [pc, #316]	@ (800124c <Auto_Line+0x1dc>)
 8001110:	6013      	str	r3, [r2, #0]

        // Calculate time for each phase
        accel_time = (int)(total_time * accel_fraction);
 8001112:	4b4e      	ldr	r3, [pc, #312]	@ (800124c <Auto_Line+0x1dc>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	ee07 3a90 	vmov	s15, r3
 800111a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800111e:	edd7 7a07 	vldr	s15, [r7, #28]
 8001122:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001126:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800112a:	ee17 2a90 	vmov	r2, s15
 800112e:	4b48      	ldr	r3, [pc, #288]	@ (8001250 <Auto_Line+0x1e0>)
 8001130:	601a      	str	r2, [r3, #0]
        decel_time = (int)(total_time * decel_fraction);
 8001132:	4b46      	ldr	r3, [pc, #280]	@ (800124c <Auto_Line+0x1dc>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	ee07 3a90 	vmov	s15, r3
 800113a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800113e:	edd7 7a06 	vldr	s15, [r7, #24]
 8001142:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001146:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800114a:	ee17 2a90 	vmov	r2, s15
 800114e:	4b41      	ldr	r3, [pc, #260]	@ (8001254 <Auto_Line+0x1e4>)
 8001150:	601a      	str	r2, [r3, #0]
        mid_time = total_time - accel_time - decel_time;
 8001152:	4b3e      	ldr	r3, [pc, #248]	@ (800124c <Auto_Line+0x1dc>)
 8001154:	681a      	ldr	r2, [r3, #0]
 8001156:	4b3e      	ldr	r3, [pc, #248]	@ (8001250 <Auto_Line+0x1e0>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	1ad2      	subs	r2, r2, r3
 800115c:	4b3d      	ldr	r3, [pc, #244]	@ (8001254 <Auto_Line+0x1e4>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	1ad3      	subs	r3, r2, r3
 8001162:	4a3d      	ldr	r2, [pc, #244]	@ (8001258 <Auto_Line+0x1e8>)
 8001164:	6013      	str	r3, [r2, #0]

        // Start timer
        HAL_TIM_Base_Start_IT(&htim7);
 8001166:	483d      	ldr	r0, [pc, #244]	@ (800125c <Auto_Line+0x1ec>)
 8001168:	f005 fe9e 	bl	8006ea8 <HAL_TIM_Base_Start_IT>
    }

    // Acceleration phase
    if (timer_count < accel_time) {
 800116c:	4b35      	ldr	r3, [pc, #212]	@ (8001244 <Auto_Line+0x1d4>)
 800116e:	681a      	ldr	r2, [r3, #0]
 8001170:	4b37      	ldr	r3, [pc, #220]	@ (8001250 <Auto_Line+0x1e0>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	429a      	cmp	r2, r3
 8001176:	da0f      	bge.n	8001198 <Auto_Line+0x128>
        current_speed = min_speed + (max_speed - min_speed) * timer_count / accel_time;
 8001178:	687a      	ldr	r2, [r7, #4]
 800117a:	68bb      	ldr	r3, [r7, #8]
 800117c:	1ad3      	subs	r3, r2, r3
 800117e:	4a31      	ldr	r2, [pc, #196]	@ (8001244 <Auto_Line+0x1d4>)
 8001180:	6812      	ldr	r2, [r2, #0]
 8001182:	fb03 f202 	mul.w	r2, r3, r2
 8001186:	4b32      	ldr	r3, [pc, #200]	@ (8001250 <Auto_Line+0x1e0>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	fb92 f2f3 	sdiv	r2, r2, r3
 800118e:	68bb      	ldr	r3, [r7, #8]
 8001190:	4413      	add	r3, r2
 8001192:	4a33      	ldr	r2, [pc, #204]	@ (8001260 <Auto_Line+0x1f0>)
 8001194:	6013      	str	r3, [r2, #0]
 8001196:	e03a      	b.n	800120e <Auto_Line+0x19e>
    }

    // Constant speed phase
    else if (timer_count < accel_time + mid_time) {
 8001198:	4b2d      	ldr	r3, [pc, #180]	@ (8001250 <Auto_Line+0x1e0>)
 800119a:	681a      	ldr	r2, [r3, #0]
 800119c:	4b2e      	ldr	r3, [pc, #184]	@ (8001258 <Auto_Line+0x1e8>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	441a      	add	r2, r3
 80011a2:	4b28      	ldr	r3, [pc, #160]	@ (8001244 <Auto_Line+0x1d4>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	429a      	cmp	r2, r3
 80011a8:	dd03      	ble.n	80011b2 <Auto_Line+0x142>
        current_speed = max_speed;
 80011aa:	4a2d      	ldr	r2, [pc, #180]	@ (8001260 <Auto_Line+0x1f0>)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	6013      	str	r3, [r2, #0]
 80011b0:	e02d      	b.n	800120e <Auto_Line+0x19e>
    }

    // Deceleration phase
    else if (timer_count < total_time) {
 80011b2:	4b24      	ldr	r3, [pc, #144]	@ (8001244 <Auto_Line+0x1d4>)
 80011b4:	681a      	ldr	r2, [r3, #0]
 80011b6:	4b25      	ldr	r3, [pc, #148]	@ (800124c <Auto_Line+0x1dc>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	429a      	cmp	r2, r3
 80011bc:	da17      	bge.n	80011ee <Auto_Line+0x17e>
        int decel_time_elapsed = timer_count - (accel_time + mid_time);
 80011be:	4b21      	ldr	r3, [pc, #132]	@ (8001244 <Auto_Line+0x1d4>)
 80011c0:	681a      	ldr	r2, [r3, #0]
 80011c2:	4b23      	ldr	r3, [pc, #140]	@ (8001250 <Auto_Line+0x1e0>)
 80011c4:	6819      	ldr	r1, [r3, #0]
 80011c6:	4b24      	ldr	r3, [pc, #144]	@ (8001258 <Auto_Line+0x1e8>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	440b      	add	r3, r1
 80011cc:	1ad3      	subs	r3, r2, r3
 80011ce:	613b      	str	r3, [r7, #16]
        current_speed = max_speed - (max_speed - min_speed) * decel_time_elapsed / decel_time;
 80011d0:	687a      	ldr	r2, [r7, #4]
 80011d2:	68bb      	ldr	r3, [r7, #8]
 80011d4:	1ad3      	subs	r3, r2, r3
 80011d6:	693a      	ldr	r2, [r7, #16]
 80011d8:	fb03 f202 	mul.w	r2, r3, r2
 80011dc:	4b1d      	ldr	r3, [pc, #116]	@ (8001254 <Auto_Line+0x1e4>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	fb92 f3f3 	sdiv	r3, r2, r3
 80011e4:	687a      	ldr	r2, [r7, #4]
 80011e6:	1ad3      	subs	r3, r2, r3
 80011e8:	4a1d      	ldr	r2, [pc, #116]	@ (8001260 <Auto_Line+0x1f0>)
 80011ea:	6013      	str	r3, [r2, #0]
 80011ec:	e00f      	b.n	800120e <Auto_Line+0x19e>
    }

    // Stop when finished
    else {
        // Stop timer
        HAL_TIM_Base_Stop_IT(&htim7);
 80011ee:	481b      	ldr	r0, [pc, #108]	@ (800125c <Auto_Line+0x1ec>)
 80011f0:	f005 feca 	bl	8006f88 <HAL_TIM_Base_Stop_IT>

        // Stop the motors
        Stop(&htim3);
 80011f4:	481b      	ldr	r0, [pc, #108]	@ (8001264 <Auto_Line+0x1f4>)
 80011f6:	f000 fac3 	bl	8001780 <Stop>

        // Reset temporal counter
        timer_count = 0;
 80011fa:	4b12      	ldr	r3, [pc, #72]	@ (8001244 <Auto_Line+0x1d4>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	601a      	str	r2, [r3, #0]

        // Ready for next step
        curr_step++;
 8001200:	4b19      	ldr	r3, [pc, #100]	@ (8001268 <Auto_Line+0x1f8>)
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	3301      	adds	r3, #1
 8001206:	b2da      	uxtb	r2, r3
 8001208:	4b17      	ldr	r3, [pc, #92]	@ (8001268 <Auto_Line+0x1f8>)
 800120a:	701a      	strb	r2, [r3, #0]

        // Exit
        return;
 800120c:	e00a      	b.n	8001224 <Auto_Line+0x1b4>
    }

    // Adjust speed every iteration
    if(!pause)
 800120e:	4b17      	ldr	r3, [pc, #92]	@ (800126c <Auto_Line+0x1fc>)
 8001210:	781b      	ldrb	r3, [r3, #0]
 8001212:	2b00      	cmp	r3, #0
 8001214:	d105      	bne.n	8001222 <Auto_Line+0x1b2>
    	Avancer(current_speed, &htim3);
 8001216:	4b12      	ldr	r3, [pc, #72]	@ (8001260 <Auto_Line+0x1f0>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	4912      	ldr	r1, [pc, #72]	@ (8001264 <Auto_Line+0x1f4>)
 800121c:	4618      	mov	r0, r3
 800121e:	f000 f9af 	bl	8001580 <Avancer>

    return;
 8001222:	bf00      	nop
}
 8001224:	3720      	adds	r7, #32
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	f3af 8000 	nop.w
 8001230:	e353f7cf 	.word	0xe353f7cf
 8001234:	40129ba5 	.word	0x40129ba5
 8001238:	00000000 	.word	0x00000000
 800123c:	416312d0 	.word	0x416312d0
 8001240:	3ecccccd 	.word	0x3ecccccd
 8001244:	200000e0 	.word	0x200000e0
 8001248:	200000e4 	.word	0x200000e4
 800124c:	200000cc 	.word	0x200000cc
 8001250:	200000d0 	.word	0x200000d0
 8001254:	200000d4 	.word	0x200000d4
 8001258:	200000d8 	.word	0x200000d8
 800125c:	20000304 	.word	0x20000304
 8001260:	200000dc 	.word	0x200000dc
 8001264:	2000022c 	.word	0x2000022c
 8001268:	20000000 	.word	0x20000000
 800126c:	200000c8 	.word	0x200000c8

08001270 <Auto_Circle>:


void Auto_Circle() {
 8001270:	b580      	push	{r7, lr}
 8001272:	b084      	sub	sp, #16
 8001274:	af00      	add	r7, sp, #0
	// Initial setup
	if(timer_count == 0) {
 8001276:	4b3a      	ldr	r3, [pc, #232]	@ (8001360 <Auto_Circle+0xf0>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	2b00      	cmp	r3, #0
 800127c:	d150      	bne.n	8001320 <Auto_Circle+0xb0>
		LCD_Manuel(0);
 800127e:	2000      	movs	r0, #0
 8001280:	f002 f9a6 	bl	80035d0 <LCD_Manuel>
		LCD_Mode();
 8001284:	f002 f9f2 	bl	800366c <LCD_Mode>

		// Calculate total outer wheel distance
		float outer_circumference = (PI*DISTANCE) / TRACK_RESOLUTION;//785
 8001288:	4b36      	ldr	r3, [pc, #216]	@ (8001364 <Auto_Circle+0xf4>)
 800128a:	60fb      	str	r3, [r7, #12]
		float inner_circumference = outer_circumference - TRACK_WIDTH;//513
 800128c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001290:	ed9f 7a35 	vldr	s14, [pc, #212]	@ 8001368 <Auto_Circle+0xf8>
 8001294:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001298:	edc7 7a02 	vstr	s15, [r7, #8]

		// Calculate total time
		total_time = (int)((outer_circumference / BASE_SPEED) * 1e7);//17.4s
 800129c:	edd7 7a03 	vldr	s15, [r7, #12]
 80012a0:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 800136c <Auto_Circle+0xfc>
 80012a4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80012a8:	ee16 0a90 	vmov	r0, s13
 80012ac:	f7ff f964 	bl	8000578 <__aeabi_f2d>
 80012b0:	a329      	add	r3, pc, #164	@ (adr r3, 8001358 <Auto_Circle+0xe8>)
 80012b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012b6:	f7ff f9b7 	bl	8000628 <__aeabi_dmul>
 80012ba:	4602      	mov	r2, r0
 80012bc:	460b      	mov	r3, r1
 80012be:	4610      	mov	r0, r2
 80012c0:	4619      	mov	r1, r3
 80012c2:	f7ff fbc3 	bl	8000a4c <__aeabi_d2iz>
 80012c6:	4603      	mov	r3, r0
 80012c8:	4a29      	ldr	r2, [pc, #164]	@ (8001370 <Auto_Circle+0x100>)
 80012ca:	6013      	str	r3, [r2, #0]

		// Calculate wheel inner wheel speed
		float factor = RATIO * (inner_circumference / outer_circumference);
 80012cc:	edd7 6a02 	vldr	s13, [r7, #8]
 80012d0:	edd7 7a03 	vldr	s15, [r7, #12]
 80012d4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80012d8:	4b26      	ldr	r3, [pc, #152]	@ (8001374 <Auto_Circle+0x104>)
 80012da:	edd3 7a00 	vldr	s15, [r3]
 80012de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012e2:	edc7 7a01 	vstr	s15, [r7, #4]

		// Constant speed
		htim3.Instance -> CCR2 = 0;
 80012e6:	4b24      	ldr	r3, [pc, #144]	@ (8001378 <Auto_Circle+0x108>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	2200      	movs	r2, #0
 80012ec:	639a      	str	r2, [r3, #56]	@ 0x38
		htim3.Instance -> CCR4 = 0;
 80012ee:	4b22      	ldr	r3, [pc, #136]	@ (8001378 <Auto_Circle+0x108>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	2200      	movs	r2, #0
 80012f4:	641a      	str	r2, [r3, #64]	@ 0x40
		htim3.Instance -> CCR1 = BASE_SPEED;
 80012f6:	4b20      	ldr	r3, [pc, #128]	@ (8001378 <Auto_Circle+0x108>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f44f 72e1 	mov.w	r2, #450	@ 0x1c2
 80012fe:	635a      	str	r2, [r3, #52]	@ 0x34
		htim3.Instance -> CCR3 = (factor * BASE_SPEED);
 8001300:	edd7 7a01 	vldr	s15, [r7, #4]
 8001304:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 800136c <Auto_Circle+0xfc>
 8001308:	ee67 7a87 	vmul.f32	s15, s15, s14
 800130c:	4b1a      	ldr	r3, [pc, #104]	@ (8001378 <Auto_Circle+0x108>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001314:	ee17 2a90 	vmov	r2, s15
 8001318:	63da      	str	r2, [r3, #60]	@ 0x3c
		HAL_TIM_Base_Start_IT(&htim7);
 800131a:	4818      	ldr	r0, [pc, #96]	@ (800137c <Auto_Circle+0x10c>)
 800131c:	f005 fdc4 	bl	8006ea8 <HAL_TIM_Base_Start_IT>
	}

	// Stop when finished
	if(timer_count > (int)total_time) {
 8001320:	4b0f      	ldr	r3, [pc, #60]	@ (8001360 <Auto_Circle+0xf0>)
 8001322:	681a      	ldr	r2, [r3, #0]
 8001324:	4b12      	ldr	r3, [pc, #72]	@ (8001370 <Auto_Circle+0x100>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	429a      	cmp	r2, r3
 800132a:	dd11      	ble.n	8001350 <Auto_Circle+0xe0>

		// Stop timer
		HAL_TIM_Base_Stop_IT(&htim7);
 800132c:	4813      	ldr	r0, [pc, #76]	@ (800137c <Auto_Circle+0x10c>)
 800132e:	f005 fe2b 	bl	8006f88 <HAL_TIM_Base_Stop_IT>

		// Stop the motors
		Stop(&htim3);
 8001332:	4811      	ldr	r0, [pc, #68]	@ (8001378 <Auto_Circle+0x108>)
 8001334:	f000 fa24 	bl	8001780 <Stop>

		// Reset temporal counter
		timer_count = 0;
 8001338:	4b09      	ldr	r3, [pc, #36]	@ (8001360 <Auto_Circle+0xf0>)
 800133a:	2200      	movs	r2, #0
 800133c:	601a      	str	r2, [r3, #0]

		// End of sequence : reset current step and set to manual mode after drawing shape
		curr_mode = MANUAL_MODE;
 800133e:	4b10      	ldr	r3, [pc, #64]	@ (8001380 <Auto_Circle+0x110>)
 8001340:	2200      	movs	r2, #0
 8001342:	701a      	strb	r2, [r3, #0]
		LCD_Mode();
 8001344:	f002 f992 	bl	800366c <LCD_Mode>
		LCD_Manuel(3);
 8001348:	2003      	movs	r0, #3
 800134a:	f002 f941 	bl	80035d0 <LCD_Manuel>
	}

	return;
 800134e:	bf00      	nop
 8001350:	bf00      	nop
}
 8001352:	3710      	adds	r7, #16
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}
 8001358:	00000000 	.word	0x00000000
 800135c:	416312d0 	.word	0x416312d0
 8001360:	200000e0 	.word	0x200000e0
 8001364:	4428d480 	.word	0x4428d480
 8001368:	43880000 	.word	0x43880000
 800136c:	43e10000 	.word	0x43e10000
 8001370:	200000cc 	.word	0x200000cc
 8001374:	20000004 	.word	0x20000004
 8001378:	2000022c 	.word	0x2000022c
 800137c:	20000304 	.word	0x20000304
 8001380:	200000ca 	.word	0x200000ca

08001384 <Auto_Back_Forth>:

void Auto_Back_Forth() {
 8001384:	b580      	push	{r7, lr}
 8001386:	af00      	add	r7, sp, #0
	// Manage ongoing step
	switch(curr_step) {
 8001388:	4b1c      	ldr	r3, [pc, #112]	@ (80013fc <Auto_Back_Forth+0x78>)
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	3b01      	subs	r3, #1
 800138e:	2b03      	cmp	r3, #3
 8001390:	d826      	bhi.n	80013e0 <Auto_Back_Forth+0x5c>
 8001392:	a201      	add	r2, pc, #4	@ (adr r2, 8001398 <Auto_Back_Forth+0x14>)
 8001394:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001398:	080013a9 	.word	0x080013a9
 800139c:	080013bb 	.word	0x080013bb
 80013a0:	080013c5 	.word	0x080013c5
 80013a4:	080013d7 	.word	0x080013d7
	case 1:
		// Step 1: Move forward 1 meter
		Auto_Line(DISTANCE, BASE_SPEED, BASE_SPEED);
 80013a8:	f44f 72e1 	mov.w	r2, #450	@ 0x1c2
 80013ac:	f44f 71e1 	mov.w	r1, #450	@ 0x1c2
 80013b0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80013b4:	f7ff fe5c 	bl	8001070 <Auto_Line>
		break;
 80013b8:	e01e      	b.n	80013f8 <Auto_Back_Forth+0x74>

	case 2:
		// Step 2: Turn 180 degrees
		Auto_Angle(180.0);
 80013ba:	ed9f 0a11 	vldr	s0, [pc, #68]	@ 8001400 <Auto_Back_Forth+0x7c>
 80013be:	f7ff fda9 	bl	8000f14 <Auto_Angle>
		break;
 80013c2:	e019      	b.n	80013f8 <Auto_Back_Forth+0x74>

	case 3:
		// Step 3: Move backward 1 meter
		Auto_Line(DISTANCE, BASE_SPEED, BASE_SPEED);
 80013c4:	f44f 72e1 	mov.w	r2, #450	@ 0x1c2
 80013c8:	f44f 71e1 	mov.w	r1, #450	@ 0x1c2
 80013cc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80013d0:	f7ff fe4e 	bl	8001070 <Auto_Line>
		break;
 80013d4:	e010      	b.n	80013f8 <Auto_Back_Forth+0x74>

	case 4:
		// Step 4: Turn 180 degrees again to face the original direction
	    Auto_Angle(180.0);
 80013d6:	ed9f 0a0a 	vldr	s0, [pc, #40]	@ 8001400 <Auto_Back_Forth+0x7c>
 80013da:	f7ff fd9b 	bl	8000f14 <Auto_Angle>
		break;
 80013de:	e00b      	b.n	80013f8 <Auto_Back_Forth+0x74>

	default:
		// End of sequence : reset current step and set to manual mode after drawing shape
		curr_step = 1;
 80013e0:	4b06      	ldr	r3, [pc, #24]	@ (80013fc <Auto_Back_Forth+0x78>)
 80013e2:	2201      	movs	r2, #1
 80013e4:	701a      	strb	r2, [r3, #0]
		curr_mode = MANUAL_MODE;
 80013e6:	4b07      	ldr	r3, [pc, #28]	@ (8001404 <Auto_Back_Forth+0x80>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	701a      	strb	r2, [r3, #0]
		LCD_Mode();
 80013ec:	f002 f93e 	bl	800366c <LCD_Mode>
		LCD_Manuel(3);
 80013f0:	2003      	movs	r0, #3
 80013f2:	f002 f8ed 	bl	80035d0 <LCD_Manuel>
		break;
 80013f6:	bf00      	nop
	}
	return;
 80013f8:	bf00      	nop
}
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	20000000 	.word	0x20000000
 8001400:	43340000 	.word	0x43340000
 8001404:	200000ca 	.word	0x200000ca

08001408 <Auto_Square>:

void Auto_Square() {
 8001408:	b580      	push	{r7, lr}
 800140a:	af00      	add	r7, sp, #0
	// Manage ongoing step
	switch(curr_step) {
 800140c:	4b1c      	ldr	r3, [pc, #112]	@ (8001480 <Auto_Square+0x78>)
 800140e:	781b      	ldrb	r3, [r3, #0]
 8001410:	2b08      	cmp	r3, #8
 8001412:	bf8c      	ite	hi
 8001414:	2201      	movhi	r2, #1
 8001416:	2200      	movls	r2, #0
 8001418:	b2d2      	uxtb	r2, r2
 800141a:	2a00      	cmp	r2, #0
 800141c:	d121      	bne.n	8001462 <Auto_Square+0x5a>
 800141e:	2201      	movs	r2, #1
 8001420:	fa02 f303 	lsl.w	r3, r2, r3
 8001424:	f403 72aa 	and.w	r2, r3, #340	@ 0x154
 8001428:	2a00      	cmp	r2, #0
 800142a:	bf14      	ite	ne
 800142c:	2201      	movne	r2, #1
 800142e:	2200      	moveq	r2, #0
 8001430:	b2d2      	uxtb	r2, r2
 8001432:	2a00      	cmp	r2, #0
 8001434:	d110      	bne.n	8001458 <Auto_Square+0x50>
 8001436:	f003 03aa 	and.w	r3, r3, #170	@ 0xaa
 800143a:	2b00      	cmp	r3, #0
 800143c:	bf14      	ite	ne
 800143e:	2301      	movne	r3, #1
 8001440:	2300      	moveq	r3, #0
 8001442:	b2db      	uxtb	r3, r3
 8001444:	2b00      	cmp	r3, #0
 8001446:	d00c      	beq.n	8001462 <Auto_Square+0x5a>
	case 1:
	case 3:
	case 5:
	case 7:
		// Odd steps: Move forward
		Auto_Line(DISTANCE, (BASE_SPEED * 0.333), BASE_SPEED);
 8001448:	f44f 72e1 	mov.w	r2, #450	@ 0x1c2
 800144c:	2195      	movs	r1, #149	@ 0x95
 800144e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001452:	f7ff fe0d 	bl	8001070 <Auto_Line>
		break;
 8001456:	e010      	b.n	800147a <Auto_Square+0x72>
	case 2:
	case 4:
	case 6:
	case 8:
		// Even steps: Turn 90 degrees
		Auto_Angle(90.0);
 8001458:	ed9f 0a0a 	vldr	s0, [pc, #40]	@ 8001484 <Auto_Square+0x7c>
 800145c:	f7ff fd5a 	bl	8000f14 <Auto_Angle>
		break;
 8001460:	e00b      	b.n	800147a <Auto_Square+0x72>

	default:
		// End of sequence: reset current step and set to manual mode after drawing shape
		curr_step = 1;
 8001462:	4b07      	ldr	r3, [pc, #28]	@ (8001480 <Auto_Square+0x78>)
 8001464:	2201      	movs	r2, #1
 8001466:	701a      	strb	r2, [r3, #0]
		curr_mode = MANUAL_MODE;
 8001468:	4b07      	ldr	r3, [pc, #28]	@ (8001488 <Auto_Square+0x80>)
 800146a:	2200      	movs	r2, #0
 800146c:	701a      	strb	r2, [r3, #0]
		LCD_Mode();
 800146e:	f002 f8fd 	bl	800366c <LCD_Mode>
		LCD_Manuel(3);
 8001472:	2003      	movs	r0, #3
 8001474:	f002 f8ac 	bl	80035d0 <LCD_Manuel>
		break;
 8001478:	bf00      	nop
	}
	return;
 800147a:	bf00      	nop
}
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	20000000 	.word	0x20000000
 8001484:	42b40000 	.word	0x42b40000
 8001488:	200000ca 	.word	0x200000ca

0800148c <Pause>:

void Pause() {
 800148c:	b580      	push	{r7, lr}
 800148e:	af00      	add	r7, sp, #0
	pause = pause ^ 1;
 8001490:	4b19      	ldr	r3, [pc, #100]	@ (80014f8 <Pause+0x6c>)
 8001492:	781b      	ldrb	r3, [r3, #0]
 8001494:	f083 0301 	eor.w	r3, r3, #1
 8001498:	b2da      	uxtb	r2, r3
 800149a:	4b17      	ldr	r3, [pc, #92]	@ (80014f8 <Pause+0x6c>)
 800149c:	701a      	strb	r2, [r3, #0]

	// Save currrent CCR values
	save[0] = htim3.Instance -> CCR1;
 800149e:	4b17      	ldr	r3, [pc, #92]	@ (80014fc <Pause+0x70>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80014a4:	461a      	mov	r2, r3
 80014a6:	4b16      	ldr	r3, [pc, #88]	@ (8001500 <Pause+0x74>)
 80014a8:	601a      	str	r2, [r3, #0]
	save[1] = htim3.Instance -> CCR2;
 80014aa:	4b14      	ldr	r3, [pc, #80]	@ (80014fc <Pause+0x70>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80014b0:	461a      	mov	r2, r3
 80014b2:	4b13      	ldr	r3, [pc, #76]	@ (8001500 <Pause+0x74>)
 80014b4:	605a      	str	r2, [r3, #4]
	save[2] = htim3.Instance -> CCR3;
 80014b6:	4b11      	ldr	r3, [pc, #68]	@ (80014fc <Pause+0x70>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80014bc:	461a      	mov	r2, r3
 80014be:	4b10      	ldr	r3, [pc, #64]	@ (8001500 <Pause+0x74>)
 80014c0:	609a      	str	r2, [r3, #8]
	save[3] = htim3.Instance -> CCR4;
 80014c2:	4b0e      	ldr	r3, [pc, #56]	@ (80014fc <Pause+0x70>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014c8:	461a      	mov	r2, r3
 80014ca:	4b0d      	ldr	r3, [pc, #52]	@ (8001500 <Pause+0x74>)
 80014cc:	60da      	str	r2, [r3, #12]

	// Stop
	HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 80014ce:	2100      	movs	r1, #0
 80014d0:	480a      	ldr	r0, [pc, #40]	@ (80014fc <Pause+0x70>)
 80014d2:	f005 fea9 	bl	8007228 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_2);
 80014d6:	2104      	movs	r1, #4
 80014d8:	4808      	ldr	r0, [pc, #32]	@ (80014fc <Pause+0x70>)
 80014da:	f005 fea5 	bl	8007228 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_3);
 80014de:	2108      	movs	r1, #8
 80014e0:	4806      	ldr	r0, [pc, #24]	@ (80014fc <Pause+0x70>)
 80014e2:	f005 fea1 	bl	8007228 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_4);
 80014e6:	210c      	movs	r1, #12
 80014e8:	4804      	ldr	r0, [pc, #16]	@ (80014fc <Pause+0x70>)
 80014ea:	f005 fe9d 	bl	8007228 <HAL_TIM_PWM_Stop>
	HAL_TIM_Base_Stop_IT(&htim7);
 80014ee:	4805      	ldr	r0, [pc, #20]	@ (8001504 <Pause+0x78>)
 80014f0:	f005 fd4a 	bl	8006f88 <HAL_TIM_Base_Stop_IT>

	return;
 80014f4:	bf00      	nop
}
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	200000c8 	.word	0x200000c8
 80014fc:	2000022c 	.word	0x2000022c
 8001500:	200000e8 	.word	0x200000e8
 8001504:	20000304 	.word	0x20000304

08001508 <Resume>:

void Resume() {
 8001508:	b580      	push	{r7, lr}
 800150a:	af00      	add	r7, sp, #0
	pause = pause ^ 1;
 800150c:	4b17      	ldr	r3, [pc, #92]	@ (800156c <Resume+0x64>)
 800150e:	781b      	ldrb	r3, [r3, #0]
 8001510:	f083 0301 	eor.w	r3, r3, #1
 8001514:	b2da      	uxtb	r2, r3
 8001516:	4b15      	ldr	r3, [pc, #84]	@ (800156c <Resume+0x64>)
 8001518:	701a      	strb	r2, [r3, #0]

	// Restore saved CCR values
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800151a:	2100      	movs	r1, #0
 800151c:	4814      	ldr	r0, [pc, #80]	@ (8001570 <Resume+0x68>)
 800151e:	f005 fdbb 	bl	8007098 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8001522:	2104      	movs	r1, #4
 8001524:	4812      	ldr	r0, [pc, #72]	@ (8001570 <Resume+0x68>)
 8001526:	f005 fdb7 	bl	8007098 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 800152a:	2108      	movs	r1, #8
 800152c:	4810      	ldr	r0, [pc, #64]	@ (8001570 <Resume+0x68>)
 800152e:	f005 fdb3 	bl	8007098 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8001532:	210c      	movs	r1, #12
 8001534:	480e      	ldr	r0, [pc, #56]	@ (8001570 <Resume+0x68>)
 8001536:	f005 fdaf 	bl	8007098 <HAL_TIM_PWM_Start>
	htim3.Instance -> CCR1 = save[0];
 800153a:	4b0e      	ldr	r3, [pc, #56]	@ (8001574 <Resume+0x6c>)
 800153c:	681a      	ldr	r2, [r3, #0]
 800153e:	4b0c      	ldr	r3, [pc, #48]	@ (8001570 <Resume+0x68>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	635a      	str	r2, [r3, #52]	@ 0x34
	htim3.Instance -> CCR2 = save[1];
 8001544:	4b0b      	ldr	r3, [pc, #44]	@ (8001574 <Resume+0x6c>)
 8001546:	685a      	ldr	r2, [r3, #4]
 8001548:	4b09      	ldr	r3, [pc, #36]	@ (8001570 <Resume+0x68>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	639a      	str	r2, [r3, #56]	@ 0x38
	htim3.Instance -> CCR3 = save[2];
 800154e:	4b09      	ldr	r3, [pc, #36]	@ (8001574 <Resume+0x6c>)
 8001550:	689a      	ldr	r2, [r3, #8]
 8001552:	4b07      	ldr	r3, [pc, #28]	@ (8001570 <Resume+0x68>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	63da      	str	r2, [r3, #60]	@ 0x3c
	htim3.Instance -> CCR4 = save[3];
 8001558:	4b06      	ldr	r3, [pc, #24]	@ (8001574 <Resume+0x6c>)
 800155a:	68da      	ldr	r2, [r3, #12]
 800155c:	4b04      	ldr	r3, [pc, #16]	@ (8001570 <Resume+0x68>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	641a      	str	r2, [r3, #64]	@ 0x40
	HAL_TIM_Base_Start_IT(&htim7);
 8001562:	4805      	ldr	r0, [pc, #20]	@ (8001578 <Resume+0x70>)
 8001564:	f005 fca0 	bl	8006ea8 <HAL_TIM_Base_Start_IT>

	return;
 8001568:	bf00      	nop
}
 800156a:	bd80      	pop	{r7, pc}
 800156c:	200000c8 	.word	0x200000c8
 8001570:	2000022c 	.word	0x2000022c
 8001574:	200000e8 	.word	0x200000e8
 8001578:	20000304 	.word	0x20000304
 800157c:	00000000 	.word	0x00000000

08001580 <Avancer>:
#include "vitesse_affichage.h"

extern int directionD;
extern int directionG;

void Avancer(int Pulse, TIM_HandleTypeDef* htim3){
 8001580:	b590      	push	{r4, r7, lr}
 8001582:	b083      	sub	sp, #12
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
 8001588:	6039      	str	r1, [r7, #0]

	htim3->Instance -> CCR2 = 0;
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	2200      	movs	r2, #0
 8001590:	639a      	str	r2, [r3, #56]	@ 0x38
	htim3->Instance -> CCR4 = 0;
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	2200      	movs	r2, #0
 8001598:	641a      	str	r2, [r3, #64]	@ 0x40

	if(Pulse > 499){
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80015a0:	db02      	blt.n	80015a8 <Avancer+0x28>
		Pulse = 499;
 80015a2:	f240 13f3 	movw	r3, #499	@ 0x1f3
 80015a6:	607b      	str	r3, [r7, #4]
	}

	htim3->Instance -> CCR1 = Pulse;
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	687a      	ldr	r2, [r7, #4]
 80015ae:	635a      	str	r2, [r3, #52]	@ 0x34
	htim3->Instance -> CCR3 = htim3->Instance -> CCR1 * 0.9;
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80015b6:	4618      	mov	r0, r3
 80015b8:	f7fe ffbc 	bl	8000534 <__aeabi_ui2d>
 80015bc:	a30e      	add	r3, pc, #56	@ (adr r3, 80015f8 <Avancer+0x78>)
 80015be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015c2:	f7ff f831 	bl	8000628 <__aeabi_dmul>
 80015c6:	4602      	mov	r2, r0
 80015c8:	460b      	mov	r3, r1
 80015ca:	4610      	mov	r0, r2
 80015cc:	4619      	mov	r1, r3
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	681c      	ldr	r4, [r3, #0]
 80015d2:	f7ff fa63 	bl	8000a9c <__aeabi_d2uiz>
 80015d6:	4603      	mov	r3, r0
 80015d8:	63e3      	str	r3, [r4, #60]	@ 0x3c

	directionD = 0;
 80015da:	4b05      	ldr	r3, [pc, #20]	@ (80015f0 <Avancer+0x70>)
 80015dc:	2200      	movs	r2, #0
 80015de:	601a      	str	r2, [r3, #0]
	directionG = 0;
 80015e0:	4b04      	ldr	r3, [pc, #16]	@ (80015f4 <Avancer+0x74>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	601a      	str	r2, [r3, #0]

	return;
 80015e6:	bf00      	nop
}
 80015e8:	370c      	adds	r7, #12
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd90      	pop	{r4, r7, pc}
 80015ee:	bf00      	nop
 80015f0:	20000168 	.word	0x20000168
 80015f4:	2000016c 	.word	0x2000016c
 80015f8:	cccccccd 	.word	0xcccccccd
 80015fc:	3feccccc 	.word	0x3feccccc

08001600 <Droite>:

void Droite(int Pulse, TIM_HandleTypeDef* htim3){
 8001600:	b590      	push	{r4, r7, lr}
 8001602:	b083      	sub	sp, #12
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
 8001608:	6039      	str	r1, [r7, #0]

	htim3->Instance -> CCR2 = 0;
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	2200      	movs	r2, #0
 8001610:	639a      	str	r2, [r3, #56]	@ 0x38
	htim3->Instance -> CCR3 = 0;
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	2200      	movs	r2, #0
 8001618:	63da      	str	r2, [r3, #60]	@ 0x3c

	if(Pulse > 499){
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001620:	db02      	blt.n	8001628 <Droite+0x28>
		Pulse = 499;
 8001622:	f240 13f3 	movw	r3, #499	@ 0x1f3
 8001626:	607b      	str	r3, [r7, #4]
	}
	htim3->Instance -> CCR1 = Pulse;
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	687a      	ldr	r2, [r7, #4]
 800162e:	635a      	str	r2, [r3, #52]	@ 0x34
	htim3->Instance -> CCR4 = htim3->Instance -> CCR1 * 0.9;
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001636:	4618      	mov	r0, r3
 8001638:	f7fe ff7c 	bl	8000534 <__aeabi_ui2d>
 800163c:	a30e      	add	r3, pc, #56	@ (adr r3, 8001678 <Droite+0x78>)
 800163e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001642:	f7fe fff1 	bl	8000628 <__aeabi_dmul>
 8001646:	4602      	mov	r2, r0
 8001648:	460b      	mov	r3, r1
 800164a:	4610      	mov	r0, r2
 800164c:	4619      	mov	r1, r3
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	681c      	ldr	r4, [r3, #0]
 8001652:	f7ff fa23 	bl	8000a9c <__aeabi_d2uiz>
 8001656:	4603      	mov	r3, r0
 8001658:	6423      	str	r3, [r4, #64]	@ 0x40

	directionD = 0;
 800165a:	4b05      	ldr	r3, [pc, #20]	@ (8001670 <Droite+0x70>)
 800165c:	2200      	movs	r2, #0
 800165e:	601a      	str	r2, [r3, #0]
	directionG = 1;
 8001660:	4b04      	ldr	r3, [pc, #16]	@ (8001674 <Droite+0x74>)
 8001662:	2201      	movs	r2, #1
 8001664:	601a      	str	r2, [r3, #0]
	return;
 8001666:	bf00      	nop
}
 8001668:	370c      	adds	r7, #12
 800166a:	46bd      	mov	sp, r7
 800166c:	bd90      	pop	{r4, r7, pc}
 800166e:	bf00      	nop
 8001670:	20000168 	.word	0x20000168
 8001674:	2000016c 	.word	0x2000016c
 8001678:	cccccccd 	.word	0xcccccccd
 800167c:	3feccccc 	.word	0x3feccccc

08001680 <Gauche>:

void Gauche(int Pulse, TIM_HandleTypeDef* htim3){
 8001680:	b590      	push	{r4, r7, lr}
 8001682:	b083      	sub	sp, #12
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
 8001688:	6039      	str	r1, [r7, #0]

	htim3->Instance -> CCR1 = 0;
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	2200      	movs	r2, #0
 8001690:	635a      	str	r2, [r3, #52]	@ 0x34
	htim3->Instance -> CCR4 = 0;
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	2200      	movs	r2, #0
 8001698:	641a      	str	r2, [r3, #64]	@ 0x40

	if(Pulse > 499){
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80016a0:	db02      	blt.n	80016a8 <Gauche+0x28>
		Pulse = 499;
 80016a2:	f240 13f3 	movw	r3, #499	@ 0x1f3
 80016a6:	607b      	str	r3, [r7, #4]
	}
	htim3->Instance -> CCR2 = Pulse;
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	687a      	ldr	r2, [r7, #4]
 80016ae:	639a      	str	r2, [r3, #56]	@ 0x38
	htim3->Instance -> CCR3 = htim3->Instance -> CCR2 * 0.9;
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80016b6:	4618      	mov	r0, r3
 80016b8:	f7fe ff3c 	bl	8000534 <__aeabi_ui2d>
 80016bc:	a30e      	add	r3, pc, #56	@ (adr r3, 80016f8 <Gauche+0x78>)
 80016be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016c2:	f7fe ffb1 	bl	8000628 <__aeabi_dmul>
 80016c6:	4602      	mov	r2, r0
 80016c8:	460b      	mov	r3, r1
 80016ca:	4610      	mov	r0, r2
 80016cc:	4619      	mov	r1, r3
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	681c      	ldr	r4, [r3, #0]
 80016d2:	f7ff f9e3 	bl	8000a9c <__aeabi_d2uiz>
 80016d6:	4603      	mov	r3, r0
 80016d8:	63e3      	str	r3, [r4, #60]	@ 0x3c

	directionD = 1;
 80016da:	4b05      	ldr	r3, [pc, #20]	@ (80016f0 <Gauche+0x70>)
 80016dc:	2201      	movs	r2, #1
 80016de:	601a      	str	r2, [r3, #0]
	directionG = 0;
 80016e0:	4b04      	ldr	r3, [pc, #16]	@ (80016f4 <Gauche+0x74>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	601a      	str	r2, [r3, #0]
}
 80016e6:	bf00      	nop
 80016e8:	370c      	adds	r7, #12
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd90      	pop	{r4, r7, pc}
 80016ee:	bf00      	nop
 80016f0:	20000168 	.word	0x20000168
 80016f4:	2000016c 	.word	0x2000016c
 80016f8:	cccccccd 	.word	0xcccccccd
 80016fc:	3feccccc 	.word	0x3feccccc

08001700 <Reculer>:

void Reculer(int Pulse,TIM_HandleTypeDef* htim3){
 8001700:	b590      	push	{r4, r7, lr}
 8001702:	b083      	sub	sp, #12
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
 8001708:	6039      	str	r1, [r7, #0]

	htim3->Instance -> CCR1 = 0;
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	2200      	movs	r2, #0
 8001710:	635a      	str	r2, [r3, #52]	@ 0x34
	htim3->Instance -> CCR3 = 0;
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	2200      	movs	r2, #0
 8001718:	63da      	str	r2, [r3, #60]	@ 0x3c

	if(Pulse > 499){
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001720:	db02      	blt.n	8001728 <Reculer+0x28>
		Pulse = 499;
 8001722:	f240 13f3 	movw	r3, #499	@ 0x1f3
 8001726:	607b      	str	r3, [r7, #4]
	}

	htim3->Instance -> CCR4 = Pulse;
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	687a      	ldr	r2, [r7, #4]
 800172e:	641a      	str	r2, [r3, #64]	@ 0x40
	htim3->Instance -> CCR2 = htim3->Instance -> CCR4 * 0.95;
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001736:	4618      	mov	r0, r3
 8001738:	f7fe fefc 	bl	8000534 <__aeabi_ui2d>
 800173c:	a30e      	add	r3, pc, #56	@ (adr r3, 8001778 <Reculer+0x78>)
 800173e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001742:	f7fe ff71 	bl	8000628 <__aeabi_dmul>
 8001746:	4602      	mov	r2, r0
 8001748:	460b      	mov	r3, r1
 800174a:	4610      	mov	r0, r2
 800174c:	4619      	mov	r1, r3
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	681c      	ldr	r4, [r3, #0]
 8001752:	f7ff f9a3 	bl	8000a9c <__aeabi_d2uiz>
 8001756:	4603      	mov	r3, r0
 8001758:	63a3      	str	r3, [r4, #56]	@ 0x38

	directionD = 1;
 800175a:	4b05      	ldr	r3, [pc, #20]	@ (8001770 <Reculer+0x70>)
 800175c:	2201      	movs	r2, #1
 800175e:	601a      	str	r2, [r3, #0]
	directionG = 1;
 8001760:	4b04      	ldr	r3, [pc, #16]	@ (8001774 <Reculer+0x74>)
 8001762:	2201      	movs	r2, #1
 8001764:	601a      	str	r2, [r3, #0]
	return;
 8001766:	bf00      	nop
}
 8001768:	370c      	adds	r7, #12
 800176a:	46bd      	mov	sp, r7
 800176c:	bd90      	pop	{r4, r7, pc}
 800176e:	bf00      	nop
 8001770:	20000168 	.word	0x20000168
 8001774:	2000016c 	.word	0x2000016c
 8001778:	66666666 	.word	0x66666666
 800177c:	3fee6666 	.word	0x3fee6666

08001780 <Stop>:
void Stop(TIM_HandleTypeDef* htim3){
 8001780:	b480      	push	{r7}
 8001782:	b083      	sub	sp, #12
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
	htim3->Instance -> CCR1 = 0;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	2200      	movs	r2, #0
 800178e:	635a      	str	r2, [r3, #52]	@ 0x34
	htim3->Instance -> CCR2 = 0;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	2200      	movs	r2, #0
 8001796:	639a      	str	r2, [r3, #56]	@ 0x38
	htim3->Instance -> CCR3 = 0;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	2200      	movs	r2, #0
 800179e:	63da      	str	r2, [r3, #60]	@ 0x3c
	htim3->Instance -> CCR4 = 0;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	2200      	movs	r2, #0
 80017a6:	641a      	str	r2, [r3, #64]	@ 0x40
	directionD = 0;
 80017a8:	4b05      	ldr	r3, [pc, #20]	@ (80017c0 <Stop+0x40>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	601a      	str	r2, [r3, #0]
	directionG = 0;
 80017ae:	4b05      	ldr	r3, [pc, #20]	@ (80017c4 <Stop+0x44>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	601a      	str	r2, [r3, #0]
}
 80017b4:	bf00      	nop
 80017b6:	370c      	adds	r7, #12
 80017b8:	46bd      	mov	sp, r7
 80017ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017be:	4770      	bx	lr
 80017c0:	20000168 	.word	0x20000168
 80017c4:	2000016c 	.word	0x2000016c

080017c8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b08a      	sub	sp, #40	@ 0x28
 80017cc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017ce:	f107 0314 	add.w	r3, r7, #20
 80017d2:	2200      	movs	r2, #0
 80017d4:	601a      	str	r2, [r3, #0]
 80017d6:	605a      	str	r2, [r3, #4]
 80017d8:	609a      	str	r2, [r3, #8]
 80017da:	60da      	str	r2, [r3, #12]
 80017dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017de:	2300      	movs	r3, #0
 80017e0:	613b      	str	r3, [r7, #16]
 80017e2:	4b59      	ldr	r3, [pc, #356]	@ (8001948 <MX_GPIO_Init+0x180>)
 80017e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017e6:	4a58      	ldr	r2, [pc, #352]	@ (8001948 <MX_GPIO_Init+0x180>)
 80017e8:	f043 0304 	orr.w	r3, r3, #4
 80017ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80017ee:	4b56      	ldr	r3, [pc, #344]	@ (8001948 <MX_GPIO_Init+0x180>)
 80017f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017f2:	f003 0304 	and.w	r3, r3, #4
 80017f6:	613b      	str	r3, [r7, #16]
 80017f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80017fa:	2300      	movs	r3, #0
 80017fc:	60fb      	str	r3, [r7, #12]
 80017fe:	4b52      	ldr	r3, [pc, #328]	@ (8001948 <MX_GPIO_Init+0x180>)
 8001800:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001802:	4a51      	ldr	r2, [pc, #324]	@ (8001948 <MX_GPIO_Init+0x180>)
 8001804:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001808:	6313      	str	r3, [r2, #48]	@ 0x30
 800180a:	4b4f      	ldr	r3, [pc, #316]	@ (8001948 <MX_GPIO_Init+0x180>)
 800180c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800180e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001812:	60fb      	str	r3, [r7, #12]
 8001814:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001816:	2300      	movs	r3, #0
 8001818:	60bb      	str	r3, [r7, #8]
 800181a:	4b4b      	ldr	r3, [pc, #300]	@ (8001948 <MX_GPIO_Init+0x180>)
 800181c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800181e:	4a4a      	ldr	r2, [pc, #296]	@ (8001948 <MX_GPIO_Init+0x180>)
 8001820:	f043 0301 	orr.w	r3, r3, #1
 8001824:	6313      	str	r3, [r2, #48]	@ 0x30
 8001826:	4b48      	ldr	r3, [pc, #288]	@ (8001948 <MX_GPIO_Init+0x180>)
 8001828:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800182a:	f003 0301 	and.w	r3, r3, #1
 800182e:	60bb      	str	r3, [r7, #8]
 8001830:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001832:	2300      	movs	r3, #0
 8001834:	607b      	str	r3, [r7, #4]
 8001836:	4b44      	ldr	r3, [pc, #272]	@ (8001948 <MX_GPIO_Init+0x180>)
 8001838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800183a:	4a43      	ldr	r2, [pc, #268]	@ (8001948 <MX_GPIO_Init+0x180>)
 800183c:	f043 0302 	orr.w	r3, r3, #2
 8001840:	6313      	str	r3, [r2, #48]	@ 0x30
 8001842:	4b41      	ldr	r3, [pc, #260]	@ (8001948 <MX_GPIO_Init+0x180>)
 8001844:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001846:	f003 0302 	and.w	r3, r3, #2
 800184a:	607b      	str	r3, [r7, #4]
 800184c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800184e:	2200      	movs	r2, #0
 8001850:	2120      	movs	r1, #32
 8001852:	483e      	ldr	r0, [pc, #248]	@ (800194c <MX_GPIO_Init+0x184>)
 8001854:	f002 fbe4 	bl	8004020 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI_RST_Pin|SPI_CS_Pin|SPI_DC_Pin, GPIO_PIN_RESET);
 8001858:	2200      	movs	r2, #0
 800185a:	f44f 4160 	mov.w	r1, #57344	@ 0xe000
 800185e:	483c      	ldr	r0, [pc, #240]	@ (8001950 <MX_GPIO_Init+0x188>)
 8001860:	f002 fbde 	bl	8004020 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Blue_Button_Pin;
 8001864:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001868:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800186a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800186e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001870:	2300      	movs	r3, #0
 8001872:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Blue_Button_GPIO_Port, &GPIO_InitStruct);
 8001874:	f107 0314 	add.w	r3, r7, #20
 8001878:	4619      	mov	r1, r3
 800187a:	4836      	ldr	r0, [pc, #216]	@ (8001954 <MX_GPIO_Init+0x18c>)
 800187c:	f002 fa24 	bl	8003cc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = Dipswitch_MSB_Pin|Dipswitch_LSB_Pin;
 8001880:	230c      	movs	r3, #12
 8001882:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001884:	2300      	movs	r3, #0
 8001886:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001888:	2302      	movs	r3, #2
 800188a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800188c:	f107 0314 	add.w	r3, r7, #20
 8001890:	4619      	mov	r1, r3
 8001892:	4830      	ldr	r0, [pc, #192]	@ (8001954 <MX_GPIO_Init+0x18c>)
 8001894:	f002 fa18 	bl	8003cc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001898:	2320      	movs	r3, #32
 800189a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800189c:	2301      	movs	r3, #1
 800189e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a0:	2300      	movs	r3, #0
 80018a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018a4:	2300      	movs	r3, #0
 80018a6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80018a8:	f107 0314 	add.w	r3, r7, #20
 80018ac:	4619      	mov	r1, r3
 80018ae:	4827      	ldr	r0, [pc, #156]	@ (800194c <MX_GPIO_Init+0x184>)
 80018b0:	f002 fa0a 	bl	8003cc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = SPI_RST_Pin|SPI_CS_Pin|SPI_DC_Pin;
 80018b4:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 80018b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018ba:	2301      	movs	r3, #1
 80018bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018be:	2300      	movs	r3, #0
 80018c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018c2:	2300      	movs	r3, #0
 80018c4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018c6:	f107 0314 	add.w	r3, r7, #20
 80018ca:	4619      	mov	r1, r3
 80018cc:	4820      	ldr	r0, [pc, #128]	@ (8001950 <MX_GPIO_Init+0x188>)
 80018ce:	f002 f9fb 	bl	8003cc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Encodeur_D_B_Pin;
 80018d2:	2380      	movs	r3, #128	@ 0x80
 80018d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018d6:	2300      	movs	r3, #0
 80018d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018da:	2300      	movs	r3, #0
 80018dc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Encodeur_D_B_GPIO_Port, &GPIO_InitStruct);
 80018de:	f107 0314 	add.w	r3, r7, #20
 80018e2:	4619      	mov	r1, r3
 80018e4:	481b      	ldr	r0, [pc, #108]	@ (8001954 <MX_GPIO_Init+0x18c>)
 80018e6:	f002 f9ef 	bl	8003cc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = Encodeur_G_A_Pin|Encodeur_D_A_Pin;
 80018ea:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80018ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80018f0:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80018f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80018f6:	2302      	movs	r3, #2
 80018f8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018fa:	f107 0314 	add.w	r3, r7, #20
 80018fe:	4619      	mov	r1, r3
 8001900:	4812      	ldr	r0, [pc, #72]	@ (800194c <MX_GPIO_Init+0x184>)
 8001902:	f002 f9e1 	bl	8003cc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Encodeur_G_B_Pin;
 8001906:	2340      	movs	r3, #64	@ 0x40
 8001908:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800190a:	2300      	movs	r3, #0
 800190c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800190e:	2300      	movs	r3, #0
 8001910:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Encodeur_G_B_GPIO_Port, &GPIO_InitStruct);
 8001912:	f107 0314 	add.w	r3, r7, #20
 8001916:	4619      	mov	r1, r3
 8001918:	480d      	ldr	r0, [pc, #52]	@ (8001950 <MX_GPIO_Init+0x188>)
 800191a:	f002 f9d5 	bl	8003cc8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800191e:	2200      	movs	r2, #0
 8001920:	2100      	movs	r1, #0
 8001922:	2017      	movs	r0, #23
 8001924:	f002 f999 	bl	8003c5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001928:	2017      	movs	r0, #23
 800192a:	f002 f9b2 	bl	8003c92 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800192e:	2200      	movs	r2, #0
 8001930:	2100      	movs	r1, #0
 8001932:	2028      	movs	r0, #40	@ 0x28
 8001934:	f002 f991 	bl	8003c5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001938:	2028      	movs	r0, #40	@ 0x28
 800193a:	f002 f9aa 	bl	8003c92 <HAL_NVIC_EnableIRQ>

}
 800193e:	bf00      	nop
 8001940:	3728      	adds	r7, #40	@ 0x28
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	40023800 	.word	0x40023800
 800194c:	40020000 	.word	0x40020000
 8001950:	40020400 	.word	0x40020400
 8001954:	40020800 	.word	0x40020800

08001958 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800195c:	4b12      	ldr	r3, [pc, #72]	@ (80019a8 <MX_I2C1_Init+0x50>)
 800195e:	4a13      	ldr	r2, [pc, #76]	@ (80019ac <MX_I2C1_Init+0x54>)
 8001960:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001962:	4b11      	ldr	r3, [pc, #68]	@ (80019a8 <MX_I2C1_Init+0x50>)
 8001964:	4a12      	ldr	r2, [pc, #72]	@ (80019b0 <MX_I2C1_Init+0x58>)
 8001966:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001968:	4b0f      	ldr	r3, [pc, #60]	@ (80019a8 <MX_I2C1_Init+0x50>)
 800196a:	2200      	movs	r2, #0
 800196c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800196e:	4b0e      	ldr	r3, [pc, #56]	@ (80019a8 <MX_I2C1_Init+0x50>)
 8001970:	2200      	movs	r2, #0
 8001972:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001974:	4b0c      	ldr	r3, [pc, #48]	@ (80019a8 <MX_I2C1_Init+0x50>)
 8001976:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800197a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800197c:	4b0a      	ldr	r3, [pc, #40]	@ (80019a8 <MX_I2C1_Init+0x50>)
 800197e:	2200      	movs	r2, #0
 8001980:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001982:	4b09      	ldr	r3, [pc, #36]	@ (80019a8 <MX_I2C1_Init+0x50>)
 8001984:	2200      	movs	r2, #0
 8001986:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001988:	4b07      	ldr	r3, [pc, #28]	@ (80019a8 <MX_I2C1_Init+0x50>)
 800198a:	2200      	movs	r2, #0
 800198c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800198e:	4b06      	ldr	r3, [pc, #24]	@ (80019a8 <MX_I2C1_Init+0x50>)
 8001990:	2200      	movs	r2, #0
 8001992:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001994:	4804      	ldr	r0, [pc, #16]	@ (80019a8 <MX_I2C1_Init+0x50>)
 8001996:	f002 fb75 	bl	8004084 <HAL_I2C_Init>
 800199a:	4603      	mov	r3, r0
 800199c:	2b00      	cmp	r3, #0
 800199e:	d001      	beq.n	80019a4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80019a0:	f000 fa3a 	bl	8001e18 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80019a4:	bf00      	nop
 80019a6:	bd80      	pop	{r7, pc}
 80019a8:	200000fc 	.word	0x200000fc
 80019ac:	40005400 	.word	0x40005400
 80019b0:	000186a0 	.word	0x000186a0

080019b4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b08a      	sub	sp, #40	@ 0x28
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019bc:	f107 0314 	add.w	r3, r7, #20
 80019c0:	2200      	movs	r2, #0
 80019c2:	601a      	str	r2, [r3, #0]
 80019c4:	605a      	str	r2, [r3, #4]
 80019c6:	609a      	str	r2, [r3, #8]
 80019c8:	60da      	str	r2, [r3, #12]
 80019ca:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4a19      	ldr	r2, [pc, #100]	@ (8001a38 <HAL_I2C_MspInit+0x84>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d12c      	bne.n	8001a30 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019d6:	2300      	movs	r3, #0
 80019d8:	613b      	str	r3, [r7, #16]
 80019da:	4b18      	ldr	r3, [pc, #96]	@ (8001a3c <HAL_I2C_MspInit+0x88>)
 80019dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019de:	4a17      	ldr	r2, [pc, #92]	@ (8001a3c <HAL_I2C_MspInit+0x88>)
 80019e0:	f043 0302 	orr.w	r3, r3, #2
 80019e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80019e6:	4b15      	ldr	r3, [pc, #84]	@ (8001a3c <HAL_I2C_MspInit+0x88>)
 80019e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ea:	f003 0302 	and.w	r3, r3, #2
 80019ee:	613b      	str	r3, [r7, #16]
 80019f0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80019f2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80019f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019f8:	2312      	movs	r3, #18
 80019fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019fc:	2300      	movs	r3, #0
 80019fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a00:	2303      	movs	r3, #3
 8001a02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001a04:	2304      	movs	r3, #4
 8001a06:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a08:	f107 0314 	add.w	r3, r7, #20
 8001a0c:	4619      	mov	r1, r3
 8001a0e:	480c      	ldr	r0, [pc, #48]	@ (8001a40 <HAL_I2C_MspInit+0x8c>)
 8001a10:	f002 f95a 	bl	8003cc8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001a14:	2300      	movs	r3, #0
 8001a16:	60fb      	str	r3, [r7, #12]
 8001a18:	4b08      	ldr	r3, [pc, #32]	@ (8001a3c <HAL_I2C_MspInit+0x88>)
 8001a1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a1c:	4a07      	ldr	r2, [pc, #28]	@ (8001a3c <HAL_I2C_MspInit+0x88>)
 8001a1e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001a22:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a24:	4b05      	ldr	r3, [pc, #20]	@ (8001a3c <HAL_I2C_MspInit+0x88>)
 8001a26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a28:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a2c:	60fb      	str	r3, [r7, #12]
 8001a2e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001a30:	bf00      	nop
 8001a32:	3728      	adds	r7, #40	@ 0x28
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}
 8001a38:	40005400 	.word	0x40005400
 8001a3c:	40023800 	.word	0x40023800
 8001a40:	40020400 	.word	0x40020400

08001a44 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a48:	f001 ff96 	bl	8003978 <HAL_Init>

  /* USER CODE BEGIN Init */

  Initialisation_manette();
 8001a4c:	f000 fa3e 	bl	8001ecc <Initialisation_manette>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a50:	f000 f896 	bl	8001b80 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a54:	f7ff feb8 	bl	80017c8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001a58:	f001 f92a 	bl	8002cb0 <MX_USART2_UART_Init>
  MX_TIM6_Init();
 8001a5c:	f000 ff8a 	bl	8002974 <MX_TIM6_Init>
  MX_TIM3_Init();
 8001a60:	f000 fe78 	bl	8002754 <MX_TIM3_Init>
  MX_TIM7_Init();
 8001a64:	f000 ffbc 	bl	80029e0 <MX_TIM7_Init>
  MX_I2C1_Init();
 8001a68:	f7ff ff76 	bl	8001958 <MX_I2C1_Init>
  MX_SPI2_Init();
 8001a6c:	f000 fc92 	bl	8002394 <MX_SPI2_Init>
  MX_TIM4_Init();
 8001a70:	f000 ff08 	bl	8002884 <MX_TIM4_Init>
  MX_RTC_Init();
 8001a74:	f000 fc0a 	bl	800228c <MX_RTC_Init>
  MX_TIM10_Init();
 8001a78:	f000 ffe6 	bl	8002a48 <MX_TIM10_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim6);
 8001a7c:	4835      	ldr	r0, [pc, #212]	@ (8001b54 <main+0x110>)
 8001a7e:	f005 fa13 	bl	8006ea8 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim10);
 8001a82:	4835      	ldr	r0, [pc, #212]	@ (8001b58 <main+0x114>)
 8001a84:	f005 fa10 	bl	8006ea8 <HAL_TIM_Base_Start_IT>

  if (HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1) != HAL_OK)
 8001a88:	2100      	movs	r1, #0
 8001a8a:	4834      	ldr	r0, [pc, #208]	@ (8001b5c <main+0x118>)
 8001a8c:	f005 fb04 	bl	8007098 <HAL_TIM_PWM_Start>
 8001a90:	4603      	mov	r3, r0
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d001      	beq.n	8001a9a <main+0x56>
  {
      Error_Handler();
 8001a96:	f000 f9bf 	bl	8001e18 <Error_Handler>
  }

  if (HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2) != HAL_OK)
 8001a9a:	2104      	movs	r1, #4
 8001a9c:	482f      	ldr	r0, [pc, #188]	@ (8001b5c <main+0x118>)
 8001a9e:	f005 fafb 	bl	8007098 <HAL_TIM_PWM_Start>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d001      	beq.n	8001aac <main+0x68>
  {
      Error_Handler();
 8001aa8:	f000 f9b6 	bl	8001e18 <Error_Handler>
  }

  if (HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3) != HAL_OK)
 8001aac:	2108      	movs	r1, #8
 8001aae:	482b      	ldr	r0, [pc, #172]	@ (8001b5c <main+0x118>)
 8001ab0:	f005 faf2 	bl	8007098 <HAL_TIM_PWM_Start>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d001      	beq.n	8001abe <main+0x7a>
  {
      Error_Handler();
 8001aba:	f000 f9ad 	bl	8001e18 <Error_Handler>
  }

  if (HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4) != HAL_OK)
 8001abe:	210c      	movs	r1, #12
 8001ac0:	4826      	ldr	r0, [pc, #152]	@ (8001b5c <main+0x118>)
 8001ac2:	f005 fae9 	bl	8007098 <HAL_TIM_PWM_Start>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d001      	beq.n	8001ad0 <main+0x8c>
  {
      Error_Handler();
 8001acc:	f000 f9a4 	bl	8001e18 <Error_Handler>
  }
  arrTimerVitesse = __HAL_TIM_GET_AUTORELOAD(&htim6);
 8001ad0:	4b20      	ldr	r3, [pc, #128]	@ (8001b54 <main+0x110>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ad6:	b29a      	uxth	r2, r3
 8001ad8:	4b21      	ldr	r3, [pc, #132]	@ (8001b60 <main+0x11c>)
 8001ada:	801a      	strh	r2, [r3, #0]
  curr_mode = MANUAL_MODE;
 8001adc:	4b21      	ldr	r3, [pc, #132]	@ (8001b64 <main+0x120>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	701a      	strb	r2, [r3, #0]
  curr_step = 1;
 8001ae2:	4b21      	ldr	r3, [pc, #132]	@ (8001b68 <main+0x124>)
 8001ae4:	2201      	movs	r2, #1
 8001ae6:	701a      	strb	r2, [r3, #0]
  if(DEBUG_MODE) {
	  CLOCKWISE_FACTOR = STARTING_VALUE;
	  COUNTER_CLW_FACTOR = STARTING_VALUE;
	  RATIO = STARTING_VALUE;
  }
  LCD_Init(&LCD_Init_OK);
 8001ae8:	4820      	ldr	r0, [pc, #128]	@ (8001b6c <main+0x128>)
 8001aea:	f001 fe31 	bl	8003750 <LCD_Init>
  {

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	if(timeRefresh){
 8001aee:	4b20      	ldr	r3, [pc, #128]	@ (8001b70 <main+0x12c>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d004      	beq.n	8001b00 <main+0xbc>
	refresh_RTC_Time();
 8001af6:	f001 fbbb 	bl	8003270 <refresh_RTC_Time>
	timeRefresh = 0;
 8001afa:	4b1d      	ldr	r3, [pc, #116]	@ (8001b70 <main+0x12c>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	601a      	str	r2, [r3, #0]
	}

	if(DEBUG_MODE)							// Find constant values
		  Constant_Tuning_Mode();
	else if(curr_mode != MANUAL_MODE) { 	// Toggle auto mode
 8001b00:	4b18      	ldr	r3, [pc, #96]	@ (8001b64 <main+0x120>)
 8001b02:	781b      	ldrb	r3, [r3, #0]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d013      	beq.n	8001b30 <main+0xec>
		switch(curr_mode) {
 8001b08:	4b16      	ldr	r3, [pc, #88]	@ (8001b64 <main+0x120>)
 8001b0a:	781b      	ldrb	r3, [r3, #0]
 8001b0c:	2b03      	cmp	r3, #3
 8001b0e:	d00c      	beq.n	8001b2a <main+0xe6>
 8001b10:	2b03      	cmp	r3, #3
 8001b12:	dc0f      	bgt.n	8001b34 <main+0xf0>
 8001b14:	2b01      	cmp	r3, #1
 8001b16:	d002      	beq.n	8001b1e <main+0xda>
 8001b18:	2b02      	cmp	r3, #2
 8001b1a:	d003      	beq.n	8001b24 <main+0xe0>
 8001b1c:	e00a      	b.n	8001b34 <main+0xf0>
			case CIRCLE_MODE:
				Auto_Circle();
 8001b1e:	f7ff fba7 	bl	8001270 <Auto_Circle>
				break;
 8001b22:	e007      	b.n	8001b34 <main+0xf0>
			case BACK_FORTH_MODE:
				Auto_Back_Forth();
 8001b24:	f7ff fc2e 	bl	8001384 <Auto_Back_Forth>
				break;
 8001b28:	e004      	b.n	8001b34 <main+0xf0>
			case SQUARE_MODE:
				Auto_Square();
 8001b2a:	f7ff fc6d 	bl	8001408 <Auto_Square>
				break;
 8001b2e:	e001      	b.n	8001b34 <main+0xf0>
		}
	}
	else { 	// Manual mode
		Controller();
 8001b30:	f000 f9ee 	bl	8001f10 <Controller>
	}
	if(vitesseRefresh >= 3){
 8001b34:	4b0f      	ldr	r3, [pc, #60]	@ (8001b74 <main+0x130>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	2b02      	cmp	r3, #2
 8001b3a:	ddd8      	ble.n	8001aee <main+0xaa>
	LCD_Vitesse(directionD, directionG);
 8001b3c:	4b0e      	ldr	r3, [pc, #56]	@ (8001b78 <main+0x134>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4a0e      	ldr	r2, [pc, #56]	@ (8001b7c <main+0x138>)
 8001b42:	6812      	ldr	r2, [r2, #0]
 8001b44:	4611      	mov	r1, r2
 8001b46:	4618      	mov	r0, r3
 8001b48:	f001 fdae 	bl	80036a8 <LCD_Vitesse>
	vitesseRefresh = 0;
 8001b4c:	4b09      	ldr	r3, [pc, #36]	@ (8001b74 <main+0x130>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	601a      	str	r2, [r3, #0]
	if(timeRefresh){
 8001b52:	e7cc      	b.n	8001aee <main+0xaa>
 8001b54:	200002bc 	.word	0x200002bc
 8001b58:	2000034c 	.word	0x2000034c
 8001b5c:	2000022c 	.word	0x2000022c
 8001b60:	2000000c 	.word	0x2000000c
 8001b64:	200000ca 	.word	0x200000ca
 8001b68:	20000000 	.word	0x20000000
 8001b6c:	2000015c 	.word	0x2000015c
 8001b70:	20000160 	.word	0x20000160
 8001b74:	20000164 	.word	0x20000164
 8001b78:	20000168 	.word	0x20000168
 8001b7c:	2000016c 	.word	0x2000016c

08001b80 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b094      	sub	sp, #80	@ 0x50
 8001b84:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b86:	f107 031c 	add.w	r3, r7, #28
 8001b8a:	2234      	movs	r2, #52	@ 0x34
 8001b8c:	2100      	movs	r1, #0
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f007 fc6a 	bl	8009468 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b94:	f107 0308 	add.w	r3, r7, #8
 8001b98:	2200      	movs	r2, #0
 8001b9a:	601a      	str	r2, [r3, #0]
 8001b9c:	605a      	str	r2, [r3, #4]
 8001b9e:	609a      	str	r2, [r3, #8]
 8001ba0:	60da      	str	r2, [r3, #12]
 8001ba2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	607b      	str	r3, [r7, #4]
 8001ba8:	4b2b      	ldr	r3, [pc, #172]	@ (8001c58 <SystemClock_Config+0xd8>)
 8001baa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bac:	4a2a      	ldr	r2, [pc, #168]	@ (8001c58 <SystemClock_Config+0xd8>)
 8001bae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001bb2:	6413      	str	r3, [r2, #64]	@ 0x40
 8001bb4:	4b28      	ldr	r3, [pc, #160]	@ (8001c58 <SystemClock_Config+0xd8>)
 8001bb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bb8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bbc:	607b      	str	r3, [r7, #4]
 8001bbe:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	603b      	str	r3, [r7, #0]
 8001bc4:	4b25      	ldr	r3, [pc, #148]	@ (8001c5c <SystemClock_Config+0xdc>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001bcc:	4a23      	ldr	r2, [pc, #140]	@ (8001c5c <SystemClock_Config+0xdc>)
 8001bce:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001bd2:	6013      	str	r3, [r2, #0]
 8001bd4:	4b21      	ldr	r3, [pc, #132]	@ (8001c5c <SystemClock_Config+0xdc>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001bdc:	603b      	str	r3, [r7, #0]
 8001bde:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8001be0:	2306      	movs	r3, #6
 8001be2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001be4:	2301      	movs	r3, #1
 8001be6:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001be8:	2301      	movs	r3, #1
 8001bea:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001bec:	2310      	movs	r3, #16
 8001bee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001bf0:	2302      	movs	r3, #2
 8001bf2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001bf8:	2310      	movs	r3, #16
 8001bfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001bfc:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001c00:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001c02:	2304      	movs	r3, #4
 8001c04:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001c06:	2302      	movs	r3, #2
 8001c08:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001c0a:	2302      	movs	r3, #2
 8001c0c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c0e:	f107 031c 	add.w	r3, r7, #28
 8001c12:	4618      	mov	r0, r3
 8001c14:	f004 f8a4 	bl	8005d60 <HAL_RCC_OscConfig>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d001      	beq.n	8001c22 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8001c1e:	f000 f8fb 	bl	8001e18 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c22:	230f      	movs	r3, #15
 8001c24:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c26:	2302      	movs	r3, #2
 8001c28:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001c2e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c32:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c34:	2300      	movs	r3, #0
 8001c36:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001c38:	f107 0308 	add.w	r3, r7, #8
 8001c3c:	2102      	movs	r1, #2
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f003 fa1a 	bl	8005078 <HAL_RCC_ClockConfig>
 8001c44:	4603      	mov	r3, r0
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d001      	beq.n	8001c4e <SystemClock_Config+0xce>
  {
    Error_Handler();
 8001c4a:	f000 f8e5 	bl	8001e18 <Error_Handler>
  }
}
 8001c4e:	bf00      	nop
 8001c50:	3750      	adds	r7, #80	@ 0x50
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	bf00      	nop
 8001c58:	40023800 	.word	0x40023800
 8001c5c:	40007000 	.word	0x40007000

08001c60 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001c60:	b590      	push	{r4, r7, lr}
 8001c62:	b083      	sub	sp, #12
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	4603      	mov	r3, r0
 8001c68:	80fb      	strh	r3, [r7, #6]

	if(GPIO_Pin == GPIO_PIN_9)
 8001c6a:	88fb      	ldrh	r3, [r7, #6]
 8001c6c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001c70:	d106      	bne.n	8001c80 <HAL_GPIO_EXTI_Callback+0x20>
	{
		nbPulseD++ ; // compte les pulses de lencodeur droit
 8001c72:	4b21      	ldr	r3, [pc, #132]	@ (8001cf8 <HAL_GPIO_EXTI_Callback+0x98>)
 8001c74:	881b      	ldrh	r3, [r3, #0]
 8001c76:	b29b      	uxth	r3, r3
 8001c78:	3301      	adds	r3, #1
 8001c7a:	b29a      	uxth	r2, r3
 8001c7c:	4b1e      	ldr	r3, [pc, #120]	@ (8001cf8 <HAL_GPIO_EXTI_Callback+0x98>)
 8001c7e:	801a      	strh	r2, [r3, #0]
    	//Encod_B_D = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_7);
	}

	if(GPIO_Pin == GPIO_PIN_8)
 8001c80:	88fb      	ldrh	r3, [r7, #6]
 8001c82:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001c86:	d106      	bne.n	8001c96 <HAL_GPIO_EXTI_Callback+0x36>
	{
		nbPulseG++ ; // compte les pulses de lencodeur droit
 8001c88:	4b1c      	ldr	r3, [pc, #112]	@ (8001cfc <HAL_GPIO_EXTI_Callback+0x9c>)
 8001c8a:	881b      	ldrh	r3, [r3, #0]
 8001c8c:	b29b      	uxth	r3, r3
 8001c8e:	3301      	adds	r3, #1
 8001c90:	b29a      	uxth	r2, r3
 8001c92:	4b1a      	ldr	r3, [pc, #104]	@ (8001cfc <HAL_GPIO_EXTI_Callback+0x9c>)
 8001c94:	801a      	strh	r2, [r3, #0]
    	//Encod_B_G = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6);
	}


	if(GPIO_Pin == Blue_Button_Pin) {
 8001c96:	88fb      	ldrh	r3, [r7, #6]
 8001c98:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001c9c:	d127      	bne.n	8001cee <HAL_GPIO_EXTI_Callback+0x8e>
			RATIO += STEP_VALUE;
			curr_mode = DEBUG_MODE;
		}

		// Resume if auto mode paused
		if(pause)
 8001c9e:	4b18      	ldr	r3, [pc, #96]	@ (8001d00 <HAL_GPIO_EXTI_Callback+0xa0>)
 8001ca0:	781b      	ldrb	r3, [r3, #0]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d002      	beq.n	8001cac <HAL_GPIO_EXTI_Callback+0x4c>
			Resume();
 8001ca6:	f7ff fc2f 	bl	8001508 <Resume>
 8001caa:	e005      	b.n	8001cb8 <HAL_GPIO_EXTI_Callback+0x58>

		// Pause auto mode if button pressed while auto mode on
		else if(curr_mode != MANUAL_MODE)
 8001cac:	4b15      	ldr	r3, [pc, #84]	@ (8001d04 <HAL_GPIO_EXTI_Callback+0xa4>)
 8001cae:	781b      	ldrb	r3, [r3, #0]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d001      	beq.n	8001cb8 <HAL_GPIO_EXTI_Callback+0x58>
			Pause();
 8001cb4:	f7ff fbea 	bl	800148c <Pause>

		// Change current mode only on manual mode
		if(curr_mode == MANUAL_MODE) {
 8001cb8:	4b12      	ldr	r3, [pc, #72]	@ (8001d04 <HAL_GPIO_EXTI_Callback+0xa4>)
 8001cba:	781b      	ldrb	r3, [r3, #0]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d116      	bne.n	8001cee <HAL_GPIO_EXTI_Callback+0x8e>
			dip_state = Get_Mode(HAL_GPIO_ReadPin(Dipswitch_MSB_GPIO_Port, Dipswitch_MSB_Pin), HAL_GPIO_ReadPin(Dipswitch_LSB_GPIO_Port, Dipswitch_LSB_Pin));
 8001cc0:	2104      	movs	r1, #4
 8001cc2:	4811      	ldr	r0, [pc, #68]	@ (8001d08 <HAL_GPIO_EXTI_Callback+0xa8>)
 8001cc4:	f002 f994 	bl	8003ff0 <HAL_GPIO_ReadPin>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	461c      	mov	r4, r3
 8001ccc:	2108      	movs	r1, #8
 8001cce:	480e      	ldr	r0, [pc, #56]	@ (8001d08 <HAL_GPIO_EXTI_Callback+0xa8>)
 8001cd0:	f002 f98e 	bl	8003ff0 <HAL_GPIO_ReadPin>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	4619      	mov	r1, r3
 8001cd8:	4620      	mov	r0, r4
 8001cda:	f7ff f8c7 	bl	8000e6c <Get_Mode>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	b2da      	uxtb	r2, r3
 8001ce2:	4b0a      	ldr	r3, [pc, #40]	@ (8001d0c <HAL_GPIO_EXTI_Callback+0xac>)
 8001ce4:	701a      	strb	r2, [r3, #0]
			curr_mode = dip_state;
 8001ce6:	4b09      	ldr	r3, [pc, #36]	@ (8001d0c <HAL_GPIO_EXTI_Callback+0xac>)
 8001ce8:	781a      	ldrb	r2, [r3, #0]
 8001cea:	4b06      	ldr	r3, [pc, #24]	@ (8001d04 <HAL_GPIO_EXTI_Callback+0xa4>)
 8001cec:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8001cee:	bf00      	nop
 8001cf0:	370c      	adds	r7, #12
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd90      	pop	{r4, r7, pc}
 8001cf6:	bf00      	nop
 8001cf8:	20000150 	.word	0x20000150
 8001cfc:	20000152 	.word	0x20000152
 8001d00:	200000c8 	.word	0x200000c8
 8001d04:	200000ca 	.word	0x200000ca
 8001d08:	40020800 	.word	0x40020800
 8001d0c:	200000c9 	.word	0x200000c9

08001d10 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b082      	sub	sp, #8
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
    if(htim->Instance == TIM6)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a30      	ldr	r2, [pc, #192]	@ (8001de0 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d148      	bne.n	8001db4 <HAL_TIM_PeriodElapsedCallback+0xa4>
    {

    	moyPulse(nbPulseD, nbPulseG, &moyNbPulseD, &moyNbPulseG);
 8001d22:	4b30      	ldr	r3, [pc, #192]	@ (8001de4 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8001d24:	881b      	ldrh	r3, [r3, #0]
 8001d26:	b298      	uxth	r0, r3
 8001d28:	4b2f      	ldr	r3, [pc, #188]	@ (8001de8 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8001d2a:	881b      	ldrh	r3, [r3, #0]
 8001d2c:	b299      	uxth	r1, r3
 8001d2e:	4b2f      	ldr	r3, [pc, #188]	@ (8001dec <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8001d30:	4a2f      	ldr	r2, [pc, #188]	@ (8001df0 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8001d32:	f001 f82f 	bl	8002d94 <moyPulse>

    	vitesseD = CIRCONFERENCE * moyNbPulseD / PULSE_PAR_TOUR * 2000 / (arrTimerVitesse + 1) ; // calcule la vitesse de la chenille droite en m/s
 8001d36:	4b2e      	ldr	r3, [pc, #184]	@ (8001df0 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8001d38:	881b      	ldrh	r3, [r3, #0]
 8001d3a:	461a      	mov	r2, r3
 8001d3c:	239d      	movs	r3, #157	@ 0x9d
 8001d3e:	fb02 f303 	mul.w	r3, r2, r3
 8001d42:	4a2c      	ldr	r2, [pc, #176]	@ (8001df4 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8001d44:	fb82 1203 	smull	r1, r2, r2, r3
 8001d48:	441a      	add	r2, r3
 8001d4a:	1192      	asrs	r2, r2, #6
 8001d4c:	17db      	asrs	r3, r3, #31
 8001d4e:	1ad3      	subs	r3, r2, r3
 8001d50:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8001d54:	fb03 f202 	mul.w	r2, r3, r2
 8001d58:	4b27      	ldr	r3, [pc, #156]	@ (8001df8 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8001d5a:	881b      	ldrh	r3, [r3, #0]
 8001d5c:	b29b      	uxth	r3, r3
 8001d5e:	3301      	adds	r3, #1
 8001d60:	fb92 f3f3 	sdiv	r3, r2, r3
 8001d64:	b29a      	uxth	r2, r3
 8001d66:	4b25      	ldr	r3, [pc, #148]	@ (8001dfc <HAL_TIM_PeriodElapsedCallback+0xec>)
 8001d68:	801a      	strh	r2, [r3, #0]
    	vitesseG = CIRCONFERENCE * moyNbPulseG / PULSE_PAR_TOUR * 2000 / (arrTimerVitesse + 1) ;
 8001d6a:	4b20      	ldr	r3, [pc, #128]	@ (8001dec <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8001d6c:	881b      	ldrh	r3, [r3, #0]
 8001d6e:	461a      	mov	r2, r3
 8001d70:	239d      	movs	r3, #157	@ 0x9d
 8001d72:	fb02 f303 	mul.w	r3, r2, r3
 8001d76:	4a1f      	ldr	r2, [pc, #124]	@ (8001df4 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8001d78:	fb82 1203 	smull	r1, r2, r2, r3
 8001d7c:	441a      	add	r2, r3
 8001d7e:	1192      	asrs	r2, r2, #6
 8001d80:	17db      	asrs	r3, r3, #31
 8001d82:	1ad3      	subs	r3, r2, r3
 8001d84:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8001d88:	fb03 f202 	mul.w	r2, r3, r2
 8001d8c:	4b1a      	ldr	r3, [pc, #104]	@ (8001df8 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8001d8e:	881b      	ldrh	r3, [r3, #0]
 8001d90:	b29b      	uxth	r3, r3
 8001d92:	3301      	adds	r3, #1
 8001d94:	fb92 f3f3 	sdiv	r3, r2, r3
 8001d98:	b29a      	uxth	r2, r3
 8001d9a:	4b19      	ldr	r3, [pc, #100]	@ (8001e00 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8001d9c:	801a      	strh	r2, [r3, #0]
    	nbPulseD = 0;
 8001d9e:	4b11      	ldr	r3, [pc, #68]	@ (8001de4 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8001da0:	2200      	movs	r2, #0
 8001da2:	801a      	strh	r2, [r3, #0]
    	nbPulseG = 0;
 8001da4:	4b10      	ldr	r3, [pc, #64]	@ (8001de8 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8001da6:	2200      	movs	r2, #0
 8001da8:	801a      	strh	r2, [r3, #0]
    	vitesseRefresh++;
 8001daa:	4b16      	ldr	r3, [pc, #88]	@ (8001e04 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	3301      	adds	r3, #1
 8001db0:	4a14      	ldr	r2, [pc, #80]	@ (8001e04 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8001db2:	6013      	str	r3, [r2, #0]
    	    }*/
    	}



    if(htim->Instance == TIM7) {	// Triggered every 10 µs
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4a13      	ldr	r2, [pc, #76]	@ (8001e08 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d104      	bne.n	8001dc8 <HAL_TIM_PeriodElapsedCallback+0xb8>
    	timer_count += 10;
 8001dbe:	4b13      	ldr	r3, [pc, #76]	@ (8001e0c <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	330a      	adds	r3, #10
 8001dc4:	4a11      	ldr	r2, [pc, #68]	@ (8001e0c <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8001dc6:	6013      	str	r3, [r2, #0]
    }
    if(htim->Instance == TIM10){
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a10      	ldr	r2, [pc, #64]	@ (8001e10 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d102      	bne.n	8001dd8 <HAL_TIM_PeriodElapsedCallback+0xc8>
    	timeRefresh = 1;
 8001dd2:	4b10      	ldr	r3, [pc, #64]	@ (8001e14 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8001dd4:	2201      	movs	r2, #1
 8001dd6:	601a      	str	r2, [r3, #0]
    }
}
 8001dd8:	bf00      	nop
 8001dda:	3708      	adds	r7, #8
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd80      	pop	{r7, pc}
 8001de0:	40001000 	.word	0x40001000
 8001de4:	20000150 	.word	0x20000150
 8001de8:	20000152 	.word	0x20000152
 8001dec:	20000154 	.word	0x20000154
 8001df0:	20000156 	.word	0x20000156
 8001df4:	dd67c8a7 	.word	0xdd67c8a7
 8001df8:	2000000c 	.word	0x2000000c
 8001dfc:	20000158 	.word	0x20000158
 8001e00:	2000015a 	.word	0x2000015a
 8001e04:	20000164 	.word	0x20000164
 8001e08:	40001400 	.word	0x40001400
 8001e0c:	200000e0 	.word	0x200000e0
 8001e10:	40014400 	.word	0x40014400
 8001e14:	20000160 	.word	0x20000160

08001e18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e1c:	b672      	cpsid	i
}
 8001e1e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e20:	bf00      	nop
 8001e22:	e7fd      	b.n	8001e20 <Error_Handler+0x8>

08001e24 <Format_Data>:
int maxInverse = 500;
int sendPulseMotor;

int toggle;

void Format_Data() {
 8001e24:	b480      	push	{r7}
 8001e26:	af00      	add	r7, sp, #0
	/*FROM LAB7*/
	formatted_data[0] = data[0];
 8001e28:	4b20      	ldr	r3, [pc, #128]	@ (8001eac <Format_Data+0x88>)
 8001e2a:	781b      	ldrb	r3, [r3, #0]
 8001e2c:	461a      	mov	r2, r3
 8001e2e:	4b20      	ldr	r3, [pc, #128]	@ (8001eb0 <Format_Data+0x8c>)
 8001e30:	601a      	str	r2, [r3, #0]
	formatted_data[1] = data[1];
 8001e32:	4b1e      	ldr	r3, [pc, #120]	@ (8001eac <Format_Data+0x88>)
 8001e34:	785b      	ldrb	r3, [r3, #1]
 8001e36:	461a      	mov	r2, r3
 8001e38:	4b1d      	ldr	r3, [pc, #116]	@ (8001eb0 <Format_Data+0x8c>)
 8001e3a:	605a      	str	r2, [r3, #4]
	formatted_data[5] = (data[5] & 0x02);
 8001e3c:	4b1b      	ldr	r3, [pc, #108]	@ (8001eac <Format_Data+0x88>)
 8001e3e:	795b      	ldrb	r3, [r3, #5]
 8001e40:	f003 0302 	and.w	r3, r3, #2
 8001e44:	4a1a      	ldr	r2, [pc, #104]	@ (8001eb0 <Format_Data+0x8c>)
 8001e46:	6153      	str	r3, [r2, #20]
	if(formatted_data[5] == 2)
 8001e48:	4b19      	ldr	r3, [pc, #100]	@ (8001eb0 <Format_Data+0x8c>)
 8001e4a:	695b      	ldr	r3, [r3, #20]
 8001e4c:	2b02      	cmp	r3, #2
 8001e4e:	d102      	bne.n	8001e56 <Format_Data+0x32>
		formatted_data[5] = 1;
 8001e50:	4b17      	ldr	r3, [pc, #92]	@ (8001eb0 <Format_Data+0x8c>)
 8001e52:	2201      	movs	r2, #1
 8001e54:	615a      	str	r2, [r3, #20]
	formatted_data[6] = (data[5] & 0x01);
 8001e56:	4b15      	ldr	r3, [pc, #84]	@ (8001eac <Format_Data+0x88>)
 8001e58:	795b      	ldrb	r3, [r3, #5]
 8001e5a:	f003 0301 	and.w	r3, r3, #1
 8001e5e:	4a14      	ldr	r2, [pc, #80]	@ (8001eb0 <Format_Data+0x8c>)
 8001e60:	6193      	str	r3, [r2, #24]

	/*MY DATA*/
	Xdata = data[0];
 8001e62:	4b12      	ldr	r3, [pc, #72]	@ (8001eac <Format_Data+0x88>)
 8001e64:	781b      	ldrb	r3, [r3, #0]
 8001e66:	461a      	mov	r2, r3
 8001e68:	4b12      	ldr	r3, [pc, #72]	@ (8001eb4 <Format_Data+0x90>)
 8001e6a:	601a      	str	r2, [r3, #0]
	Ydata = data[1];
 8001e6c:	4b0f      	ldr	r3, [pc, #60]	@ (8001eac <Format_Data+0x88>)
 8001e6e:	785b      	ldrb	r3, [r3, #1]
 8001e70:	461a      	mov	r2, r3
 8001e72:	4b11      	ldr	r3, [pc, #68]	@ (8001eb8 <Format_Data+0x94>)
 8001e74:	601a      	str	r2, [r3, #0]
	Xpulse = data[0];
 8001e76:	4b0d      	ldr	r3, [pc, #52]	@ (8001eac <Format_Data+0x88>)
 8001e78:	781b      	ldrb	r3, [r3, #0]
 8001e7a:	461a      	mov	r2, r3
 8001e7c:	4b0f      	ldr	r3, [pc, #60]	@ (8001ebc <Format_Data+0x98>)
 8001e7e:	601a      	str	r2, [r3, #0]
	Ypulse = data[1];
 8001e80:	4b0a      	ldr	r3, [pc, #40]	@ (8001eac <Format_Data+0x88>)
 8001e82:	785b      	ldrb	r3, [r3, #1]
 8001e84:	461a      	mov	r2, r3
 8001e86:	4b0e      	ldr	r3, [pc, #56]	@ (8001ec0 <Format_Data+0x9c>)
 8001e88:	601a      	str	r2, [r3, #0]
	Cbutton = (data[5] & 0x02);
 8001e8a:	4b08      	ldr	r3, [pc, #32]	@ (8001eac <Format_Data+0x88>)
 8001e8c:	795b      	ldrb	r3, [r3, #5]
 8001e8e:	f003 0302 	and.w	r3, r3, #2
 8001e92:	4a0c      	ldr	r2, [pc, #48]	@ (8001ec4 <Format_Data+0xa0>)
 8001e94:	6013      	str	r3, [r2, #0]
	Zbutton = (data[5] & 0x01);
 8001e96:	4b05      	ldr	r3, [pc, #20]	@ (8001eac <Format_Data+0x88>)
 8001e98:	795b      	ldrb	r3, [r3, #5]
 8001e9a:	f003 0301 	and.w	r3, r3, #1
 8001e9e:	4a0a      	ldr	r2, [pc, #40]	@ (8001ec8 <Format_Data+0xa4>)
 8001ea0:	6013      	str	r3, [r2, #0]
	/* neutral x and y data: 128
	max x and y data: 1-254 */

}
 8001ea2:	bf00      	nop
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eaa:	4770      	bx	lr
 8001eac:	20000170 	.word	0x20000170
 8001eb0:	20000178 	.word	0x20000178
 8001eb4:	20000194 	.word	0x20000194
 8001eb8:	20000198 	.word	0x20000198
 8001ebc:	2000019c 	.word	0x2000019c
 8001ec0:	200001a0 	.word	0x200001a0
 8001ec4:	200001a4 	.word	0x200001a4
 8001ec8:	200001a8 	.word	0x200001a8

08001ecc <Initialisation_manette>:


void Initialisation_manette(){
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b082      	sub	sp, #8
 8001ed0:	af02      	add	r7, sp, #8

	HAL_I2C_Master_Transmit(&hi2c1, NUNCHUK_ADDRESS, initcomm1, 2, HAL_MAX_DELAY);
 8001ed2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ed6:	9300      	str	r3, [sp, #0]
 8001ed8:	2302      	movs	r3, #2
 8001eda:	4a0a      	ldr	r2, [pc, #40]	@ (8001f04 <Initialisation_manette+0x38>)
 8001edc:	21a4      	movs	r1, #164	@ 0xa4
 8001ede:	480a      	ldr	r0, [pc, #40]	@ (8001f08 <Initialisation_manette+0x3c>)
 8001ee0:	f002 fa14 	bl	800430c <HAL_I2C_Master_Transmit>
	HAL_Delay(10);
 8001ee4:	200a      	movs	r0, #10
 8001ee6:	f001 fdb9 	bl	8003a5c <HAL_Delay>
	HAL_I2C_Master_Transmit(&hi2c1, NUNCHUK_ADDRESS, initcomm2, 2, HAL_MAX_DELAY);
 8001eea:	f04f 33ff 	mov.w	r3, #4294967295
 8001eee:	9300      	str	r3, [sp, #0]
 8001ef0:	2302      	movs	r3, #2
 8001ef2:	4a06      	ldr	r2, [pc, #24]	@ (8001f0c <Initialisation_manette+0x40>)
 8001ef4:	21a4      	movs	r1, #164	@ 0xa4
 8001ef6:	4804      	ldr	r0, [pc, #16]	@ (8001f08 <Initialisation_manette+0x3c>)
 8001ef8:	f002 fa08 	bl	800430c <HAL_I2C_Master_Transmit>

}
 8001efc:	bf00      	nop
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}
 8001f02:	bf00      	nop
 8001f04:	20000010 	.word	0x20000010
 8001f08:	200000fc 	.word	0x200000fc
 8001f0c:	20000014 	.word	0x20000014

08001f10 <Controller>:


void Controller(){
 8001f10:	b5b0      	push	{r4, r5, r7, lr}
 8001f12:	b082      	sub	sp, #8
 8001f14:	af02      	add	r7, sp, #8

	HAL_I2C_Master_Transmit(&hi2c1, NUNCHUK_ADDRESS, 0x00, 1, HAL_MAX_DELAY);
 8001f16:	f04f 33ff 	mov.w	r3, #4294967295
 8001f1a:	9300      	str	r3, [sp, #0]
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	2200      	movs	r2, #0
 8001f20:	21a4      	movs	r1, #164	@ 0xa4
 8001f22:	48b5      	ldr	r0, [pc, #724]	@ (80021f8 <Controller+0x2e8>)
 8001f24:	f002 f9f2 	bl	800430c <HAL_I2C_Master_Transmit>
	HAL_Delay(10);
 8001f28:	200a      	movs	r0, #10
 8001f2a:	f001 fd97 	bl	8003a5c <HAL_Delay>
	HAL_I2C_Master_Receive(&hi2c1, NUNCHUK_ADDRESS, data, 6, HAL_MAX_DELAY);
 8001f2e:	f04f 33ff 	mov.w	r3, #4294967295
 8001f32:	9300      	str	r3, [sp, #0]
 8001f34:	2306      	movs	r3, #6
 8001f36:	4ab1      	ldr	r2, [pc, #708]	@ (80021fc <Controller+0x2ec>)
 8001f38:	21a4      	movs	r1, #164	@ 0xa4
 8001f3a:	48af      	ldr	r0, [pc, #700]	@ (80021f8 <Controller+0x2e8>)
 8001f3c:	f002 fae4 	bl	8004508 <HAL_I2C_Master_Receive>
	Format_Data();
 8001f40:	f7ff ff70 	bl	8001e24 <Format_Data>



	if(Cbutton == 0){
 8001f44:	4bae      	ldr	r3, [pc, #696]	@ (8002200 <Controller+0x2f0>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d104      	bne.n	8001f56 <Controller+0x46>
		HAL_Delay(10);
 8001f4c:	200a      	movs	r0, #10
 8001f4e:	f001 fd85 	bl	8003a5c <HAL_Delay>
		ToggleModeMan();
 8001f52:	f000 f983 	bl	800225c <ToggleModeMan>
	}
	if(Zbutton == 0){
 8001f56:	4bab      	ldr	r3, [pc, #684]	@ (8002204 <Controller+0x2f4>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d104      	bne.n	8001f68 <Controller+0x58>
		HAL_Delay(10);
 8001f5e:	200a      	movs	r0, #10
 8001f60:	f001 fd7c 	bl	8003a5c <HAL_Delay>
		ToggleModeVit();
 8001f64:	f000 f964 	bl	8002230 <ToggleModeVit>
	}


	if(ToggleC == 1){
 8001f68:	4ba7      	ldr	r3, [pc, #668]	@ (8002208 <Controller+0x2f8>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	2b01      	cmp	r3, #1
 8001f6e:	f040 8132 	bne.w	80021d6 <Controller+0x2c6>


		if(Xdata == 128 && Ydata == 128){
 8001f72:	4ba6      	ldr	r3, [pc, #664]	@ (800220c <Controller+0x2fc>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	2b80      	cmp	r3, #128	@ 0x80
 8001f78:	d107      	bne.n	8001f8a <Controller+0x7a>
 8001f7a:	4ba5      	ldr	r3, [pc, #660]	@ (8002210 <Controller+0x300>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	2b80      	cmp	r3, #128	@ 0x80
 8001f80:	d103      	bne.n	8001f8a <Controller+0x7a>
				Stop(&htim3);
 8001f82:	48a4      	ldr	r0, [pc, #656]	@ (8002214 <Controller+0x304>)
 8001f84:	f7ff fbfc 	bl	8001780 <Stop>
	}
	else{
		Stop(&htim3);
	}

}
 8001f88:	e128      	b.n	80021dc <Controller+0x2cc>
		if(modeVitesse==1){
 8001f8a:	4ba3      	ldr	r3, [pc, #652]	@ (8002218 <Controller+0x308>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	2b01      	cmp	r3, #1
 8001f90:	d159      	bne.n	8002046 <Controller+0x136>
			Xpulse = Xdata * 0.33 * pulseCoeff;
 8001f92:	4b9e      	ldr	r3, [pc, #632]	@ (800220c <Controller+0x2fc>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4618      	mov	r0, r3
 8001f98:	f7fe fadc 	bl	8000554 <__aeabi_i2d>
 8001f9c:	a392      	add	r3, pc, #584	@ (adr r3, 80021e8 <Controller+0x2d8>)
 8001f9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fa2:	f7fe fb41 	bl	8000628 <__aeabi_dmul>
 8001fa6:	4602      	mov	r2, r0
 8001fa8:	460b      	mov	r3, r1
 8001faa:	4614      	mov	r4, r2
 8001fac:	461d      	mov	r5, r3
 8001fae:	4b9b      	ldr	r3, [pc, #620]	@ (800221c <Controller+0x30c>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f7fe fae0 	bl	8000578 <__aeabi_f2d>
 8001fb8:	4602      	mov	r2, r0
 8001fba:	460b      	mov	r3, r1
 8001fbc:	4620      	mov	r0, r4
 8001fbe:	4629      	mov	r1, r5
 8001fc0:	f7fe fb32 	bl	8000628 <__aeabi_dmul>
 8001fc4:	4602      	mov	r2, r0
 8001fc6:	460b      	mov	r3, r1
 8001fc8:	4610      	mov	r0, r2
 8001fca:	4619      	mov	r1, r3
 8001fcc:	f7fe fd3e 	bl	8000a4c <__aeabi_d2iz>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	4a93      	ldr	r2, [pc, #588]	@ (8002220 <Controller+0x310>)
 8001fd4:	6013      	str	r3, [r2, #0]
			Ypulse = Ydata * 0.33 * pulseCoeff;
 8001fd6:	4b8e      	ldr	r3, [pc, #568]	@ (8002210 <Controller+0x300>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f7fe faba 	bl	8000554 <__aeabi_i2d>
 8001fe0:	a381      	add	r3, pc, #516	@ (adr r3, 80021e8 <Controller+0x2d8>)
 8001fe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fe6:	f7fe fb1f 	bl	8000628 <__aeabi_dmul>
 8001fea:	4602      	mov	r2, r0
 8001fec:	460b      	mov	r3, r1
 8001fee:	4614      	mov	r4, r2
 8001ff0:	461d      	mov	r5, r3
 8001ff2:	4b8a      	ldr	r3, [pc, #552]	@ (800221c <Controller+0x30c>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f7fe fabe 	bl	8000578 <__aeabi_f2d>
 8001ffc:	4602      	mov	r2, r0
 8001ffe:	460b      	mov	r3, r1
 8002000:	4620      	mov	r0, r4
 8002002:	4629      	mov	r1, r5
 8002004:	f7fe fb10 	bl	8000628 <__aeabi_dmul>
 8002008:	4602      	mov	r2, r0
 800200a:	460b      	mov	r3, r1
 800200c:	4610      	mov	r0, r2
 800200e:	4619      	mov	r1, r3
 8002010:	f7fe fd1c 	bl	8000a4c <__aeabi_d2iz>
 8002014:	4603      	mov	r3, r0
 8002016:	4a83      	ldr	r2, [pc, #524]	@ (8002224 <Controller+0x314>)
 8002018:	6013      	str	r3, [r2, #0]
			maxInverse = maxInverse * 0.33;
 800201a:	4b83      	ldr	r3, [pc, #524]	@ (8002228 <Controller+0x318>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4618      	mov	r0, r3
 8002020:	f7fe fa98 	bl	8000554 <__aeabi_i2d>
 8002024:	a370      	add	r3, pc, #448	@ (adr r3, 80021e8 <Controller+0x2d8>)
 8002026:	e9d3 2300 	ldrd	r2, r3, [r3]
 800202a:	f7fe fafd 	bl	8000628 <__aeabi_dmul>
 800202e:	4602      	mov	r2, r0
 8002030:	460b      	mov	r3, r1
 8002032:	4610      	mov	r0, r2
 8002034:	4619      	mov	r1, r3
 8002036:	f7fe fd09 	bl	8000a4c <__aeabi_d2iz>
 800203a:	4603      	mov	r3, r0
 800203c:	4a7a      	ldr	r2, [pc, #488]	@ (8002228 <Controller+0x318>)
 800203e:	6013      	str	r3, [r2, #0]
			LCD_Manuel(1);
 8002040:	2001      	movs	r0, #1
 8002042:	f001 fac5 	bl	80035d0 <LCD_Manuel>
		if(modeVitesse==2){
 8002046:	4b74      	ldr	r3, [pc, #464]	@ (8002218 <Controller+0x308>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	2b02      	cmp	r3, #2
 800204c:	d159      	bne.n	8002102 <Controller+0x1f2>
			Xpulse = Xdata * 0.66 * pulseCoeff;
 800204e:	4b6f      	ldr	r3, [pc, #444]	@ (800220c <Controller+0x2fc>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4618      	mov	r0, r3
 8002054:	f7fe fa7e 	bl	8000554 <__aeabi_i2d>
 8002058:	a365      	add	r3, pc, #404	@ (adr r3, 80021f0 <Controller+0x2e0>)
 800205a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800205e:	f7fe fae3 	bl	8000628 <__aeabi_dmul>
 8002062:	4602      	mov	r2, r0
 8002064:	460b      	mov	r3, r1
 8002066:	4614      	mov	r4, r2
 8002068:	461d      	mov	r5, r3
 800206a:	4b6c      	ldr	r3, [pc, #432]	@ (800221c <Controller+0x30c>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4618      	mov	r0, r3
 8002070:	f7fe fa82 	bl	8000578 <__aeabi_f2d>
 8002074:	4602      	mov	r2, r0
 8002076:	460b      	mov	r3, r1
 8002078:	4620      	mov	r0, r4
 800207a:	4629      	mov	r1, r5
 800207c:	f7fe fad4 	bl	8000628 <__aeabi_dmul>
 8002080:	4602      	mov	r2, r0
 8002082:	460b      	mov	r3, r1
 8002084:	4610      	mov	r0, r2
 8002086:	4619      	mov	r1, r3
 8002088:	f7fe fce0 	bl	8000a4c <__aeabi_d2iz>
 800208c:	4603      	mov	r3, r0
 800208e:	4a64      	ldr	r2, [pc, #400]	@ (8002220 <Controller+0x310>)
 8002090:	6013      	str	r3, [r2, #0]
			Ypulse = Ydata * 0.66 * pulseCoeff;
 8002092:	4b5f      	ldr	r3, [pc, #380]	@ (8002210 <Controller+0x300>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4618      	mov	r0, r3
 8002098:	f7fe fa5c 	bl	8000554 <__aeabi_i2d>
 800209c:	a354      	add	r3, pc, #336	@ (adr r3, 80021f0 <Controller+0x2e0>)
 800209e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020a2:	f7fe fac1 	bl	8000628 <__aeabi_dmul>
 80020a6:	4602      	mov	r2, r0
 80020a8:	460b      	mov	r3, r1
 80020aa:	4614      	mov	r4, r2
 80020ac:	461d      	mov	r5, r3
 80020ae:	4b5b      	ldr	r3, [pc, #364]	@ (800221c <Controller+0x30c>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4618      	mov	r0, r3
 80020b4:	f7fe fa60 	bl	8000578 <__aeabi_f2d>
 80020b8:	4602      	mov	r2, r0
 80020ba:	460b      	mov	r3, r1
 80020bc:	4620      	mov	r0, r4
 80020be:	4629      	mov	r1, r5
 80020c0:	f7fe fab2 	bl	8000628 <__aeabi_dmul>
 80020c4:	4602      	mov	r2, r0
 80020c6:	460b      	mov	r3, r1
 80020c8:	4610      	mov	r0, r2
 80020ca:	4619      	mov	r1, r3
 80020cc:	f7fe fcbe 	bl	8000a4c <__aeabi_d2iz>
 80020d0:	4603      	mov	r3, r0
 80020d2:	4a54      	ldr	r2, [pc, #336]	@ (8002224 <Controller+0x314>)
 80020d4:	6013      	str	r3, [r2, #0]
			maxInverse = maxInverse * 0.66;
 80020d6:	4b54      	ldr	r3, [pc, #336]	@ (8002228 <Controller+0x318>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4618      	mov	r0, r3
 80020dc:	f7fe fa3a 	bl	8000554 <__aeabi_i2d>
 80020e0:	a343      	add	r3, pc, #268	@ (adr r3, 80021f0 <Controller+0x2e0>)
 80020e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020e6:	f7fe fa9f 	bl	8000628 <__aeabi_dmul>
 80020ea:	4602      	mov	r2, r0
 80020ec:	460b      	mov	r3, r1
 80020ee:	4610      	mov	r0, r2
 80020f0:	4619      	mov	r1, r3
 80020f2:	f7fe fcab 	bl	8000a4c <__aeabi_d2iz>
 80020f6:	4603      	mov	r3, r0
 80020f8:	4a4b      	ldr	r2, [pc, #300]	@ (8002228 <Controller+0x318>)
 80020fa:	6013      	str	r3, [r2, #0]
			LCD_Manuel(2);
 80020fc:	2002      	movs	r0, #2
 80020fe:	f001 fa67 	bl	80035d0 <LCD_Manuel>
		if(modeVitesse==3){
 8002102:	4b45      	ldr	r3, [pc, #276]	@ (8002218 <Controller+0x308>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	2b03      	cmp	r3, #3
 8002108:	d124      	bne.n	8002154 <Controller+0x244>
			Xpulse = Xdata * pulseCoeff;
 800210a:	4b40      	ldr	r3, [pc, #256]	@ (800220c <Controller+0x2fc>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	ee07 3a90 	vmov	s15, r3
 8002112:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002116:	4b41      	ldr	r3, [pc, #260]	@ (800221c <Controller+0x30c>)
 8002118:	edd3 7a00 	vldr	s15, [r3]
 800211c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002120:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002124:	ee17 2a90 	vmov	r2, s15
 8002128:	4b3d      	ldr	r3, [pc, #244]	@ (8002220 <Controller+0x310>)
 800212a:	601a      	str	r2, [r3, #0]
			Ypulse = Ydata * pulseCoeff;
 800212c:	4b38      	ldr	r3, [pc, #224]	@ (8002210 <Controller+0x300>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	ee07 3a90 	vmov	s15, r3
 8002134:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002138:	4b38      	ldr	r3, [pc, #224]	@ (800221c <Controller+0x30c>)
 800213a:	edd3 7a00 	vldr	s15, [r3]
 800213e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002142:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002146:	ee17 2a90 	vmov	r2, s15
 800214a:	4b36      	ldr	r3, [pc, #216]	@ (8002224 <Controller+0x314>)
 800214c:	601a      	str	r2, [r3, #0]
			LCD_Manuel(3);
 800214e:	2003      	movs	r0, #3
 8002150:	f001 fa3e 	bl	80035d0 <LCD_Manuel>
		if(Xdata>128){
 8002154:	4b2d      	ldr	r3, [pc, #180]	@ (800220c <Controller+0x2fc>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	2b80      	cmp	r3, #128	@ 0x80
 800215a:	dd0a      	ble.n	8002172 <Controller+0x262>
			sendPulseMotor = Xpulse;
 800215c:	4b30      	ldr	r3, [pc, #192]	@ (8002220 <Controller+0x310>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a32      	ldr	r2, [pc, #200]	@ (800222c <Controller+0x31c>)
 8002162:	6013      	str	r3, [r2, #0]
			Droite(sendPulseMotor,&htim3);
 8002164:	4b31      	ldr	r3, [pc, #196]	@ (800222c <Controller+0x31c>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	492a      	ldr	r1, [pc, #168]	@ (8002214 <Controller+0x304>)
 800216a:	4618      	mov	r0, r3
 800216c:	f7ff fa48 	bl	8001600 <Droite>
 8002170:	e010      	b.n	8002194 <Controller+0x284>
		else if(Xdata<128) {
 8002172:	4b26      	ldr	r3, [pc, #152]	@ (800220c <Controller+0x2fc>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	2b7f      	cmp	r3, #127	@ 0x7f
 8002178:	dc0c      	bgt.n	8002194 <Controller+0x284>
				sendPulseMotor = maxInverse - Xpulse;
 800217a:	4b2b      	ldr	r3, [pc, #172]	@ (8002228 <Controller+0x318>)
 800217c:	681a      	ldr	r2, [r3, #0]
 800217e:	4b28      	ldr	r3, [pc, #160]	@ (8002220 <Controller+0x310>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	1ad3      	subs	r3, r2, r3
 8002184:	4a29      	ldr	r2, [pc, #164]	@ (800222c <Controller+0x31c>)
 8002186:	6013      	str	r3, [r2, #0]
				Gauche(sendPulseMotor,&htim3);
 8002188:	4b28      	ldr	r3, [pc, #160]	@ (800222c <Controller+0x31c>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4921      	ldr	r1, [pc, #132]	@ (8002214 <Controller+0x304>)
 800218e:	4618      	mov	r0, r3
 8002190:	f7ff fa76 	bl	8001680 <Gauche>
		if(Ydata>128){
 8002194:	4b1e      	ldr	r3, [pc, #120]	@ (8002210 <Controller+0x300>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	2b80      	cmp	r3, #128	@ 0x80
 800219a:	dd0a      	ble.n	80021b2 <Controller+0x2a2>
			sendPulseMotor = Ypulse;
 800219c:	4b21      	ldr	r3, [pc, #132]	@ (8002224 <Controller+0x314>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4a22      	ldr	r2, [pc, #136]	@ (800222c <Controller+0x31c>)
 80021a2:	6013      	str	r3, [r2, #0]
			Avancer(sendPulseMotor,&htim3);
 80021a4:	4b21      	ldr	r3, [pc, #132]	@ (800222c <Controller+0x31c>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	491a      	ldr	r1, [pc, #104]	@ (8002214 <Controller+0x304>)
 80021aa:	4618      	mov	r0, r3
 80021ac:	f7ff f9e8 	bl	8001580 <Avancer>
}
 80021b0:	e014      	b.n	80021dc <Controller+0x2cc>
		else if(Ydata<128){
 80021b2:	4b17      	ldr	r3, [pc, #92]	@ (8002210 <Controller+0x300>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	2b7f      	cmp	r3, #127	@ 0x7f
 80021b8:	dc10      	bgt.n	80021dc <Controller+0x2cc>
				sendPulseMotor = maxInverse - Ypulse;
 80021ba:	4b1b      	ldr	r3, [pc, #108]	@ (8002228 <Controller+0x318>)
 80021bc:	681a      	ldr	r2, [r3, #0]
 80021be:	4b19      	ldr	r3, [pc, #100]	@ (8002224 <Controller+0x314>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	1ad3      	subs	r3, r2, r3
 80021c4:	4a19      	ldr	r2, [pc, #100]	@ (800222c <Controller+0x31c>)
 80021c6:	6013      	str	r3, [r2, #0]
				Reculer(sendPulseMotor,&htim3);
 80021c8:	4b18      	ldr	r3, [pc, #96]	@ (800222c <Controller+0x31c>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4911      	ldr	r1, [pc, #68]	@ (8002214 <Controller+0x304>)
 80021ce:	4618      	mov	r0, r3
 80021d0:	f7ff fa96 	bl	8001700 <Reculer>
}
 80021d4:	e002      	b.n	80021dc <Controller+0x2cc>
		Stop(&htim3);
 80021d6:	480f      	ldr	r0, [pc, #60]	@ (8002214 <Controller+0x304>)
 80021d8:	f7ff fad2 	bl	8001780 <Stop>
}
 80021dc:	bf00      	nop
 80021de:	46bd      	mov	sp, r7
 80021e0:	bdb0      	pop	{r4, r5, r7, pc}
 80021e2:	bf00      	nop
 80021e4:	f3af 8000 	nop.w
 80021e8:	51eb851f 	.word	0x51eb851f
 80021ec:	3fd51eb8 	.word	0x3fd51eb8
 80021f0:	51eb851f 	.word	0x51eb851f
 80021f4:	3fe51eb8 	.word	0x3fe51eb8
 80021f8:	200000fc 	.word	0x200000fc
 80021fc:	20000170 	.word	0x20000170
 8002200:	200001a4 	.word	0x200001a4
 8002204:	200001a8 	.word	0x200001a8
 8002208:	20000018 	.word	0x20000018
 800220c:	20000194 	.word	0x20000194
 8002210:	20000198 	.word	0x20000198
 8002214:	2000022c 	.word	0x2000022c
 8002218:	2000001c 	.word	0x2000001c
 800221c:	20000020 	.word	0x20000020
 8002220:	2000019c 	.word	0x2000019c
 8002224:	200001a0 	.word	0x200001a0
 8002228:	20000024 	.word	0x20000024
 800222c:	200001ac 	.word	0x200001ac

08002230 <ToggleModeVit>:


void ToggleModeVit() {
 8002230:	b480      	push	{r7}
 8002232:	af00      	add	r7, sp, #0
	if(modeVitesse == 3) {
 8002234:	4b08      	ldr	r3, [pc, #32]	@ (8002258 <ToggleModeVit+0x28>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	2b03      	cmp	r3, #3
 800223a:	d103      	bne.n	8002244 <ToggleModeVit+0x14>
		modeVitesse = 1;
 800223c:	4b06      	ldr	r3, [pc, #24]	@ (8002258 <ToggleModeVit+0x28>)
 800223e:	2201      	movs	r2, #1
 8002240:	601a      	str	r2, [r3, #0]
	}
	else {
		modeVitesse++;
	}
}
 8002242:	e004      	b.n	800224e <ToggleModeVit+0x1e>
		modeVitesse++;
 8002244:	4b04      	ldr	r3, [pc, #16]	@ (8002258 <ToggleModeVit+0x28>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	3301      	adds	r3, #1
 800224a:	4a03      	ldr	r2, [pc, #12]	@ (8002258 <ToggleModeVit+0x28>)
 800224c:	6013      	str	r3, [r2, #0]
}
 800224e:	bf00      	nop
 8002250:	46bd      	mov	sp, r7
 8002252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002256:	4770      	bx	lr
 8002258:	2000001c 	.word	0x2000001c

0800225c <ToggleModeMan>:

void ToggleModeMan() {
 800225c:	b480      	push	{r7}
 800225e:	af00      	add	r7, sp, #0

	if(ToggleC == 1){
 8002260:	4b09      	ldr	r3, [pc, #36]	@ (8002288 <ToggleModeMan+0x2c>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	2b01      	cmp	r3, #1
 8002266:	d103      	bne.n	8002270 <ToggleModeMan+0x14>
		ToggleC = 0;
 8002268:	4b07      	ldr	r3, [pc, #28]	@ (8002288 <ToggleModeMan+0x2c>)
 800226a:	2200      	movs	r2, #0
 800226c:	601a      	str	r2, [r3, #0]
	}
	else if(ToggleC == 0){
		ToggleC = 1;
	}

}
 800226e:	e006      	b.n	800227e <ToggleModeMan+0x22>
	else if(ToggleC == 0){
 8002270:	4b05      	ldr	r3, [pc, #20]	@ (8002288 <ToggleModeMan+0x2c>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d102      	bne.n	800227e <ToggleModeMan+0x22>
		ToggleC = 1;
 8002278:	4b03      	ldr	r3, [pc, #12]	@ (8002288 <ToggleModeMan+0x2c>)
 800227a:	2201      	movs	r2, #1
 800227c:	601a      	str	r2, [r3, #0]
}
 800227e:	bf00      	nop
 8002280:	46bd      	mov	sp, r7
 8002282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002286:	4770      	bx	lr
 8002288:	20000018 	.word	0x20000018

0800228c <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b086      	sub	sp, #24
 8002290:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8002292:	1d3b      	adds	r3, r7, #4
 8002294:	2200      	movs	r2, #0
 8002296:	601a      	str	r2, [r3, #0]
 8002298:	605a      	str	r2, [r3, #4]
 800229a:	609a      	str	r2, [r3, #8]
 800229c:	60da      	str	r2, [r3, #12]
 800229e:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80022a0:	2300      	movs	r3, #0
 80022a2:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80022a4:	4b24      	ldr	r3, [pc, #144]	@ (8002338 <MX_RTC_Init+0xac>)
 80022a6:	4a25      	ldr	r2, [pc, #148]	@ (800233c <MX_RTC_Init+0xb0>)
 80022a8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80022aa:	4b23      	ldr	r3, [pc, #140]	@ (8002338 <MX_RTC_Init+0xac>)
 80022ac:	2200      	movs	r2, #0
 80022ae:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 128-1;
 80022b0:	4b21      	ldr	r3, [pc, #132]	@ (8002338 <MX_RTC_Init+0xac>)
 80022b2:	227f      	movs	r2, #127	@ 0x7f
 80022b4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 256-1;
 80022b6:	4b20      	ldr	r3, [pc, #128]	@ (8002338 <MX_RTC_Init+0xac>)
 80022b8:	22ff      	movs	r2, #255	@ 0xff
 80022ba:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80022bc:	4b1e      	ldr	r3, [pc, #120]	@ (8002338 <MX_RTC_Init+0xac>)
 80022be:	2200      	movs	r2, #0
 80022c0:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80022c2:	4b1d      	ldr	r3, [pc, #116]	@ (8002338 <MX_RTC_Init+0xac>)
 80022c4:	2200      	movs	r2, #0
 80022c6:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80022c8:	4b1b      	ldr	r3, [pc, #108]	@ (8002338 <MX_RTC_Init+0xac>)
 80022ca:	2200      	movs	r2, #0
 80022cc:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80022ce:	481a      	ldr	r0, [pc, #104]	@ (8002338 <MX_RTC_Init+0xac>)
 80022d0:	f003 ffe4 	bl	800629c <HAL_RTC_Init>
 80022d4:	4603      	mov	r3, r0
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d001      	beq.n	80022de <MX_RTC_Init+0x52>
  {
    Error_Handler();
 80022da:	f7ff fd9d 	bl	8001e18 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x17;
 80022de:	2317      	movs	r3, #23
 80022e0:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 80022e2:	2300      	movs	r3, #0
 80022e4:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 80022e6:	2300      	movs	r3, #0
 80022e8:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80022ea:	2300      	movs	r3, #0
 80022ec:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80022ee:	2300      	movs	r3, #0
 80022f0:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80022f2:	1d3b      	adds	r3, r7, #4
 80022f4:	2201      	movs	r2, #1
 80022f6:	4619      	mov	r1, r3
 80022f8:	480f      	ldr	r0, [pc, #60]	@ (8002338 <MX_RTC_Init+0xac>)
 80022fa:	f004 f852 	bl	80063a2 <HAL_RTC_SetTime>
 80022fe:	4603      	mov	r3, r0
 8002300:	2b00      	cmp	r3, #0
 8002302:	d001      	beq.n	8002308 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8002304:	f7ff fd88 	bl	8001e18 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_WEDNESDAY;
 8002308:	2303      	movs	r3, #3
 800230a:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_DECEMBER;
 800230c:	2312      	movs	r3, #18
 800230e:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x4;
 8002310:	2304      	movs	r3, #4
 8002312:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x24;
 8002314:	2324      	movs	r3, #36	@ 0x24
 8002316:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8002318:	463b      	mov	r3, r7
 800231a:	2201      	movs	r2, #1
 800231c:	4619      	mov	r1, r3
 800231e:	4806      	ldr	r0, [pc, #24]	@ (8002338 <MX_RTC_Init+0xac>)
 8002320:	f004 f937 	bl	8006592 <HAL_RTC_SetDate>
 8002324:	4603      	mov	r3, r0
 8002326:	2b00      	cmp	r3, #0
 8002328:	d001      	beq.n	800232e <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 800232a:	f7ff fd75 	bl	8001e18 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800232e:	bf00      	nop
 8002330:	3718      	adds	r7, #24
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}
 8002336:	bf00      	nop
 8002338:	200001b0 	.word	0x200001b0
 800233c:	40002800 	.word	0x40002800

08002340 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b09a      	sub	sp, #104	@ 0x68
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002348:	f107 030c 	add.w	r3, r7, #12
 800234c:	225c      	movs	r2, #92	@ 0x5c
 800234e:	2100      	movs	r1, #0
 8002350:	4618      	mov	r0, r3
 8002352:	f007 f889 	bl	8009468 <memset>
  if(rtcHandle->Instance==RTC)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4a0c      	ldr	r2, [pc, #48]	@ (800238c <HAL_RTC_MspInit+0x4c>)
 800235c:	4293      	cmp	r3, r2
 800235e:	d111      	bne.n	8002384 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002360:	2320      	movs	r3, #32
 8002362:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002364:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002368:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800236a:	f107 030c 	add.w	r3, r7, #12
 800236e:	4618      	mov	r0, r3
 8002370:	f002 ff9c 	bl	80052ac <HAL_RCCEx_PeriphCLKConfig>
 8002374:	4603      	mov	r3, r0
 8002376:	2b00      	cmp	r3, #0
 8002378:	d001      	beq.n	800237e <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 800237a:	f7ff fd4d 	bl	8001e18 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800237e:	4b04      	ldr	r3, [pc, #16]	@ (8002390 <HAL_RTC_MspInit+0x50>)
 8002380:	2201      	movs	r2, #1
 8002382:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8002384:	bf00      	nop
 8002386:	3768      	adds	r7, #104	@ 0x68
 8002388:	46bd      	mov	sp, r7
 800238a:	bd80      	pop	{r7, pc}
 800238c:	40002800 	.word	0x40002800
 8002390:	42470e3c 	.word	0x42470e3c

08002394 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8002398:	4b18      	ldr	r3, [pc, #96]	@ (80023fc <MX_SPI2_Init+0x68>)
 800239a:	4a19      	ldr	r2, [pc, #100]	@ (8002400 <MX_SPI2_Init+0x6c>)
 800239c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800239e:	4b17      	ldr	r3, [pc, #92]	@ (80023fc <MX_SPI2_Init+0x68>)
 80023a0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80023a4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_1LINE;
 80023a6:	4b15      	ldr	r3, [pc, #84]	@ (80023fc <MX_SPI2_Init+0x68>)
 80023a8:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80023ac:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80023ae:	4b13      	ldr	r3, [pc, #76]	@ (80023fc <MX_SPI2_Init+0x68>)
 80023b0:	2200      	movs	r2, #0
 80023b2:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80023b4:	4b11      	ldr	r3, [pc, #68]	@ (80023fc <MX_SPI2_Init+0x68>)
 80023b6:	2200      	movs	r2, #0
 80023b8:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80023ba:	4b10      	ldr	r3, [pc, #64]	@ (80023fc <MX_SPI2_Init+0x68>)
 80023bc:	2200      	movs	r2, #0
 80023be:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80023c0:	4b0e      	ldr	r3, [pc, #56]	@ (80023fc <MX_SPI2_Init+0x68>)
 80023c2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80023c6:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80023c8:	4b0c      	ldr	r3, [pc, #48]	@ (80023fc <MX_SPI2_Init+0x68>)
 80023ca:	2208      	movs	r2, #8
 80023cc:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80023ce:	4b0b      	ldr	r3, [pc, #44]	@ (80023fc <MX_SPI2_Init+0x68>)
 80023d0:	2200      	movs	r2, #0
 80023d2:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80023d4:	4b09      	ldr	r3, [pc, #36]	@ (80023fc <MX_SPI2_Init+0x68>)
 80023d6:	2200      	movs	r2, #0
 80023d8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80023da:	4b08      	ldr	r3, [pc, #32]	@ (80023fc <MX_SPI2_Init+0x68>)
 80023dc:	2200      	movs	r2, #0
 80023de:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 80023e0:	4b06      	ldr	r3, [pc, #24]	@ (80023fc <MX_SPI2_Init+0x68>)
 80023e2:	220a      	movs	r2, #10
 80023e4:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80023e6:	4805      	ldr	r0, [pc, #20]	@ (80023fc <MX_SPI2_Init+0x68>)
 80023e8:	f004 fa64 	bl	80068b4 <HAL_SPI_Init>
 80023ec:	4603      	mov	r3, r0
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d001      	beq.n	80023f6 <MX_SPI2_Init+0x62>
  {
    Error_Handler();
 80023f2:	f7ff fd11 	bl	8001e18 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80023f6:	bf00      	nop
 80023f8:	bd80      	pop	{r7, pc}
 80023fa:	bf00      	nop
 80023fc:	200001d0 	.word	0x200001d0
 8002400:	40003800 	.word	0x40003800

08002404 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b08a      	sub	sp, #40	@ 0x28
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800240c:	f107 0314 	add.w	r3, r7, #20
 8002410:	2200      	movs	r2, #0
 8002412:	601a      	str	r2, [r3, #0]
 8002414:	605a      	str	r2, [r3, #4]
 8002416:	609a      	str	r2, [r3, #8]
 8002418:	60da      	str	r2, [r3, #12]
 800241a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a28      	ldr	r2, [pc, #160]	@ (80024c4 <HAL_SPI_MspInit+0xc0>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d14a      	bne.n	80024bc <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002426:	2300      	movs	r3, #0
 8002428:	613b      	str	r3, [r7, #16]
 800242a:	4b27      	ldr	r3, [pc, #156]	@ (80024c8 <HAL_SPI_MspInit+0xc4>)
 800242c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800242e:	4a26      	ldr	r2, [pc, #152]	@ (80024c8 <HAL_SPI_MspInit+0xc4>)
 8002430:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002434:	6413      	str	r3, [r2, #64]	@ 0x40
 8002436:	4b24      	ldr	r3, [pc, #144]	@ (80024c8 <HAL_SPI_MspInit+0xc4>)
 8002438:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800243a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800243e:	613b      	str	r3, [r7, #16]
 8002440:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002442:	2300      	movs	r3, #0
 8002444:	60fb      	str	r3, [r7, #12]
 8002446:	4b20      	ldr	r3, [pc, #128]	@ (80024c8 <HAL_SPI_MspInit+0xc4>)
 8002448:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800244a:	4a1f      	ldr	r2, [pc, #124]	@ (80024c8 <HAL_SPI_MspInit+0xc4>)
 800244c:	f043 0304 	orr.w	r3, r3, #4
 8002450:	6313      	str	r3, [r2, #48]	@ 0x30
 8002452:	4b1d      	ldr	r3, [pc, #116]	@ (80024c8 <HAL_SPI_MspInit+0xc4>)
 8002454:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002456:	f003 0304 	and.w	r3, r3, #4
 800245a:	60fb      	str	r3, [r7, #12]
 800245c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800245e:	2300      	movs	r3, #0
 8002460:	60bb      	str	r3, [r7, #8]
 8002462:	4b19      	ldr	r3, [pc, #100]	@ (80024c8 <HAL_SPI_MspInit+0xc4>)
 8002464:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002466:	4a18      	ldr	r2, [pc, #96]	@ (80024c8 <HAL_SPI_MspInit+0xc4>)
 8002468:	f043 0302 	orr.w	r3, r3, #2
 800246c:	6313      	str	r3, [r2, #48]	@ 0x30
 800246e:	4b16      	ldr	r3, [pc, #88]	@ (80024c8 <HAL_SPI_MspInit+0xc4>)
 8002470:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002472:	f003 0302 	and.w	r3, r3, #2
 8002476:	60bb      	str	r3, [r7, #8]
 8002478:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC1     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800247a:	2302      	movs	r3, #2
 800247c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800247e:	2302      	movs	r3, #2
 8002480:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002482:	2300      	movs	r3, #0
 8002484:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002486:	2303      	movs	r3, #3
 8002488:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 800248a:	2307      	movs	r3, #7
 800248c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800248e:	f107 0314 	add.w	r3, r7, #20
 8002492:	4619      	mov	r1, r3
 8002494:	480d      	ldr	r0, [pc, #52]	@ (80024cc <HAL_SPI_MspInit+0xc8>)
 8002496:	f001 fc17 	bl	8003cc8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800249a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800249e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024a0:	2302      	movs	r3, #2
 80024a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024a4:	2300      	movs	r3, #0
 80024a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024a8:	2303      	movs	r3, #3
 80024aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80024ac:	2305      	movs	r3, #5
 80024ae:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024b0:	f107 0314 	add.w	r3, r7, #20
 80024b4:	4619      	mov	r1, r3
 80024b6:	4806      	ldr	r0, [pc, #24]	@ (80024d0 <HAL_SPI_MspInit+0xcc>)
 80024b8:	f001 fc06 	bl	8003cc8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80024bc:	bf00      	nop
 80024be:	3728      	adds	r7, #40	@ 0x28
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bd80      	pop	{r7, pc}
 80024c4:	40003800 	.word	0x40003800
 80024c8:	40023800 	.word	0x40023800
 80024cc:	40020800 	.word	0x40020800
 80024d0:	40020400 	.word	0x40020400

080024d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b082      	sub	sp, #8
 80024d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024da:	2300      	movs	r3, #0
 80024dc:	607b      	str	r3, [r7, #4]
 80024de:	4b10      	ldr	r3, [pc, #64]	@ (8002520 <HAL_MspInit+0x4c>)
 80024e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024e2:	4a0f      	ldr	r2, [pc, #60]	@ (8002520 <HAL_MspInit+0x4c>)
 80024e4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80024e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80024ea:	4b0d      	ldr	r3, [pc, #52]	@ (8002520 <HAL_MspInit+0x4c>)
 80024ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024ee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80024f2:	607b      	str	r3, [r7, #4]
 80024f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80024f6:	2300      	movs	r3, #0
 80024f8:	603b      	str	r3, [r7, #0]
 80024fa:	4b09      	ldr	r3, [pc, #36]	@ (8002520 <HAL_MspInit+0x4c>)
 80024fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024fe:	4a08      	ldr	r2, [pc, #32]	@ (8002520 <HAL_MspInit+0x4c>)
 8002500:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002504:	6413      	str	r3, [r2, #64]	@ 0x40
 8002506:	4b06      	ldr	r3, [pc, #24]	@ (8002520 <HAL_MspInit+0x4c>)
 8002508:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800250a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800250e:	603b      	str	r3, [r7, #0]
 8002510:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002512:	2007      	movs	r0, #7
 8002514:	f001 fb96 	bl	8003c44 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002518:	bf00      	nop
 800251a:	3708      	adds	r7, #8
 800251c:	46bd      	mov	sp, r7
 800251e:	bd80      	pop	{r7, pc}
 8002520:	40023800 	.word	0x40023800

08002524 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002524:	b480      	push	{r7}
 8002526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002528:	bf00      	nop
 800252a:	e7fd      	b.n	8002528 <NMI_Handler+0x4>

0800252c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800252c:	b480      	push	{r7}
 800252e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002530:	bf00      	nop
 8002532:	e7fd      	b.n	8002530 <HardFault_Handler+0x4>

08002534 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002534:	b480      	push	{r7}
 8002536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002538:	bf00      	nop
 800253a:	e7fd      	b.n	8002538 <MemManage_Handler+0x4>

0800253c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800253c:	b480      	push	{r7}
 800253e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002540:	bf00      	nop
 8002542:	e7fd      	b.n	8002540 <BusFault_Handler+0x4>

08002544 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002544:	b480      	push	{r7}
 8002546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002548:	bf00      	nop
 800254a:	e7fd      	b.n	8002548 <UsageFault_Handler+0x4>

0800254c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800254c:	b480      	push	{r7}
 800254e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002550:	bf00      	nop
 8002552:	46bd      	mov	sp, r7
 8002554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002558:	4770      	bx	lr

0800255a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800255a:	b480      	push	{r7}
 800255c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800255e:	bf00      	nop
 8002560:	46bd      	mov	sp, r7
 8002562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002566:	4770      	bx	lr

08002568 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002568:	b480      	push	{r7}
 800256a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800256c:	bf00      	nop
 800256e:	46bd      	mov	sp, r7
 8002570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002574:	4770      	bx	lr

08002576 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002576:	b580      	push	{r7, lr}
 8002578:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800257a:	f001 fa4f 	bl	8003a1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800257e:	bf00      	nop
 8002580:	bd80      	pop	{r7, pc}

08002582 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002582:	b580      	push	{r7, lr}
 8002584:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Encodeur_G_A_Pin);
 8002586:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800258a:	f001 fd63 	bl	8004054 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Encodeur_D_A_Pin);
 800258e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8002592:	f001 fd5f 	bl	8004054 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002596:	bf00      	nop
 8002598:	bd80      	pop	{r7, pc}
	...

0800259c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 80025a0:	4802      	ldr	r0, [pc, #8]	@ (80025ac <TIM1_UP_TIM10_IRQHandler+0x10>)
 80025a2:	f004 feb1 	bl	8007308 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80025a6:	bf00      	nop
 80025a8:	bd80      	pop	{r7, pc}
 80025aa:	bf00      	nop
 80025ac:	2000034c 	.word	0x2000034c

080025b0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Blue_Button_Pin);
 80025b4:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80025b8:	f001 fd4c 	bl	8004054 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80025bc:	bf00      	nop
 80025be:	bd80      	pop	{r7, pc}

080025c0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80025c4:	4802      	ldr	r0, [pc, #8]	@ (80025d0 <TIM6_DAC_IRQHandler+0x10>)
 80025c6:	f004 fe9f 	bl	8007308 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80025ca:	bf00      	nop
 80025cc:	bd80      	pop	{r7, pc}
 80025ce:	bf00      	nop
 80025d0:	200002bc 	.word	0x200002bc

080025d4 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80025d8:	4802      	ldr	r0, [pc, #8]	@ (80025e4 <TIM7_IRQHandler+0x10>)
 80025da:	f004 fe95 	bl	8007308 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80025de:	bf00      	nop
 80025e0:	bd80      	pop	{r7, pc}
 80025e2:	bf00      	nop
 80025e4:	20000304 	.word	0x20000304

080025e8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b086      	sub	sp, #24
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	60f8      	str	r0, [r7, #12]
 80025f0:	60b9      	str	r1, [r7, #8]
 80025f2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025f4:	2300      	movs	r3, #0
 80025f6:	617b      	str	r3, [r7, #20]
 80025f8:	e00a      	b.n	8002610 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80025fa:	f3af 8000 	nop.w
 80025fe:	4601      	mov	r1, r0
 8002600:	68bb      	ldr	r3, [r7, #8]
 8002602:	1c5a      	adds	r2, r3, #1
 8002604:	60ba      	str	r2, [r7, #8]
 8002606:	b2ca      	uxtb	r2, r1
 8002608:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800260a:	697b      	ldr	r3, [r7, #20]
 800260c:	3301      	adds	r3, #1
 800260e:	617b      	str	r3, [r7, #20]
 8002610:	697a      	ldr	r2, [r7, #20]
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	429a      	cmp	r2, r3
 8002616:	dbf0      	blt.n	80025fa <_read+0x12>
  }

  return len;
 8002618:	687b      	ldr	r3, [r7, #4]
}
 800261a:	4618      	mov	r0, r3
 800261c:	3718      	adds	r7, #24
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}

08002622 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002622:	b580      	push	{r7, lr}
 8002624:	b086      	sub	sp, #24
 8002626:	af00      	add	r7, sp, #0
 8002628:	60f8      	str	r0, [r7, #12]
 800262a:	60b9      	str	r1, [r7, #8]
 800262c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800262e:	2300      	movs	r3, #0
 8002630:	617b      	str	r3, [r7, #20]
 8002632:	e009      	b.n	8002648 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002634:	68bb      	ldr	r3, [r7, #8]
 8002636:	1c5a      	adds	r2, r3, #1
 8002638:	60ba      	str	r2, [r7, #8]
 800263a:	781b      	ldrb	r3, [r3, #0]
 800263c:	4618      	mov	r0, r3
 800263e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	3301      	adds	r3, #1
 8002646:	617b      	str	r3, [r7, #20]
 8002648:	697a      	ldr	r2, [r7, #20]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	429a      	cmp	r2, r3
 800264e:	dbf1      	blt.n	8002634 <_write+0x12>
  }
  return len;
 8002650:	687b      	ldr	r3, [r7, #4]
}
 8002652:	4618      	mov	r0, r3
 8002654:	3718      	adds	r7, #24
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}

0800265a <_close>:

int _close(int file)
{
 800265a:	b480      	push	{r7}
 800265c:	b083      	sub	sp, #12
 800265e:	af00      	add	r7, sp, #0
 8002660:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002662:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002666:	4618      	mov	r0, r3
 8002668:	370c      	adds	r7, #12
 800266a:	46bd      	mov	sp, r7
 800266c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002670:	4770      	bx	lr

08002672 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002672:	b480      	push	{r7}
 8002674:	b083      	sub	sp, #12
 8002676:	af00      	add	r7, sp, #0
 8002678:	6078      	str	r0, [r7, #4]
 800267a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002682:	605a      	str	r2, [r3, #4]
  return 0;
 8002684:	2300      	movs	r3, #0
}
 8002686:	4618      	mov	r0, r3
 8002688:	370c      	adds	r7, #12
 800268a:	46bd      	mov	sp, r7
 800268c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002690:	4770      	bx	lr

08002692 <_isatty>:

int _isatty(int file)
{
 8002692:	b480      	push	{r7}
 8002694:	b083      	sub	sp, #12
 8002696:	af00      	add	r7, sp, #0
 8002698:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800269a:	2301      	movs	r3, #1
}
 800269c:	4618      	mov	r0, r3
 800269e:	370c      	adds	r7, #12
 80026a0:	46bd      	mov	sp, r7
 80026a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a6:	4770      	bx	lr

080026a8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80026a8:	b480      	push	{r7}
 80026aa:	b085      	sub	sp, #20
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	60f8      	str	r0, [r7, #12]
 80026b0:	60b9      	str	r1, [r7, #8]
 80026b2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80026b4:	2300      	movs	r3, #0
}
 80026b6:	4618      	mov	r0, r3
 80026b8:	3714      	adds	r7, #20
 80026ba:	46bd      	mov	sp, r7
 80026bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c0:	4770      	bx	lr
	...

080026c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b086      	sub	sp, #24
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80026cc:	4a14      	ldr	r2, [pc, #80]	@ (8002720 <_sbrk+0x5c>)
 80026ce:	4b15      	ldr	r3, [pc, #84]	@ (8002724 <_sbrk+0x60>)
 80026d0:	1ad3      	subs	r3, r2, r3
 80026d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80026d4:	697b      	ldr	r3, [r7, #20]
 80026d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80026d8:	4b13      	ldr	r3, [pc, #76]	@ (8002728 <_sbrk+0x64>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d102      	bne.n	80026e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80026e0:	4b11      	ldr	r3, [pc, #68]	@ (8002728 <_sbrk+0x64>)
 80026e2:	4a12      	ldr	r2, [pc, #72]	@ (800272c <_sbrk+0x68>)
 80026e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80026e6:	4b10      	ldr	r3, [pc, #64]	@ (8002728 <_sbrk+0x64>)
 80026e8:	681a      	ldr	r2, [r3, #0]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	4413      	add	r3, r2
 80026ee:	693a      	ldr	r2, [r7, #16]
 80026f0:	429a      	cmp	r2, r3
 80026f2:	d207      	bcs.n	8002704 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80026f4:	f006 ff16 	bl	8009524 <__errno>
 80026f8:	4603      	mov	r3, r0
 80026fa:	220c      	movs	r2, #12
 80026fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80026fe:	f04f 33ff 	mov.w	r3, #4294967295
 8002702:	e009      	b.n	8002718 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002704:	4b08      	ldr	r3, [pc, #32]	@ (8002728 <_sbrk+0x64>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800270a:	4b07      	ldr	r3, [pc, #28]	@ (8002728 <_sbrk+0x64>)
 800270c:	681a      	ldr	r2, [r3, #0]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	4413      	add	r3, r2
 8002712:	4a05      	ldr	r2, [pc, #20]	@ (8002728 <_sbrk+0x64>)
 8002714:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002716:	68fb      	ldr	r3, [r7, #12]
}
 8002718:	4618      	mov	r0, r3
 800271a:	3718      	adds	r7, #24
 800271c:	46bd      	mov	sp, r7
 800271e:	bd80      	pop	{r7, pc}
 8002720:	20020000 	.word	0x20020000
 8002724:	00000400 	.word	0x00000400
 8002728:	20000228 	.word	0x20000228
 800272c:	200005b0 	.word	0x200005b0

08002730 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002730:	b480      	push	{r7}
 8002732:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002734:	4b06      	ldr	r3, [pc, #24]	@ (8002750 <SystemInit+0x20>)
 8002736:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800273a:	4a05      	ldr	r2, [pc, #20]	@ (8002750 <SystemInit+0x20>)
 800273c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002740:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002744:	bf00      	nop
 8002746:	46bd      	mov	sp, r7
 8002748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274c:	4770      	bx	lr
 800274e:	bf00      	nop
 8002750:	e000ed00 	.word	0xe000ed00

08002754 <MX_TIM3_Init>:
TIM_HandleTypeDef htim7;
TIM_HandleTypeDef htim10;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b08e      	sub	sp, #56	@ 0x38
 8002758:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800275a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800275e:	2200      	movs	r2, #0
 8002760:	601a      	str	r2, [r3, #0]
 8002762:	605a      	str	r2, [r3, #4]
 8002764:	609a      	str	r2, [r3, #8]
 8002766:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002768:	f107 0320 	add.w	r3, r7, #32
 800276c:	2200      	movs	r2, #0
 800276e:	601a      	str	r2, [r3, #0]
 8002770:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002772:	1d3b      	adds	r3, r7, #4
 8002774:	2200      	movs	r2, #0
 8002776:	601a      	str	r2, [r3, #0]
 8002778:	605a      	str	r2, [r3, #4]
 800277a:	609a      	str	r2, [r3, #8]
 800277c:	60da      	str	r2, [r3, #12]
 800277e:	611a      	str	r2, [r3, #16]
 8002780:	615a      	str	r2, [r3, #20]
 8002782:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002784:	4b3d      	ldr	r3, [pc, #244]	@ (800287c <MX_TIM3_Init+0x128>)
 8002786:	4a3e      	ldr	r2, [pc, #248]	@ (8002880 <MX_TIM3_Init+0x12c>)
 8002788:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84-1;
 800278a:	4b3c      	ldr	r3, [pc, #240]	@ (800287c <MX_TIM3_Init+0x128>)
 800278c:	2253      	movs	r2, #83	@ 0x53
 800278e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002790:	4b3a      	ldr	r3, [pc, #232]	@ (800287c <MX_TIM3_Init+0x128>)
 8002792:	2200      	movs	r2, #0
 8002794:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 500-1;
 8002796:	4b39      	ldr	r3, [pc, #228]	@ (800287c <MX_TIM3_Init+0x128>)
 8002798:	f240 12f3 	movw	r2, #499	@ 0x1f3
 800279c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800279e:	4b37      	ldr	r3, [pc, #220]	@ (800287c <MX_TIM3_Init+0x128>)
 80027a0:	2200      	movs	r2, #0
 80027a2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027a4:	4b35      	ldr	r3, [pc, #212]	@ (800287c <MX_TIM3_Init+0x128>)
 80027a6:	2200      	movs	r2, #0
 80027a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80027aa:	4834      	ldr	r0, [pc, #208]	@ (800287c <MX_TIM3_Init+0x128>)
 80027ac:	f004 fb2c 	bl	8006e08 <HAL_TIM_Base_Init>
 80027b0:	4603      	mov	r3, r0
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d001      	beq.n	80027ba <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80027b6:	f7ff fb2f 	bl	8001e18 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80027ba:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80027be:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80027c0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80027c4:	4619      	mov	r1, r3
 80027c6:	482d      	ldr	r0, [pc, #180]	@ (800287c <MX_TIM3_Init+0x128>)
 80027c8:	f004 ff50 	bl	800766c <HAL_TIM_ConfigClockSource>
 80027cc:	4603      	mov	r3, r0
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d001      	beq.n	80027d6 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80027d2:	f7ff fb21 	bl	8001e18 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80027d6:	4829      	ldr	r0, [pc, #164]	@ (800287c <MX_TIM3_Init+0x128>)
 80027d8:	f004 fc05 	bl	8006fe6 <HAL_TIM_PWM_Init>
 80027dc:	4603      	mov	r3, r0
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d001      	beq.n	80027e6 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80027e2:	f7ff fb19 	bl	8001e18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80027e6:	2300      	movs	r3, #0
 80027e8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80027ea:	2300      	movs	r3, #0
 80027ec:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80027ee:	f107 0320 	add.w	r3, r7, #32
 80027f2:	4619      	mov	r1, r3
 80027f4:	4821      	ldr	r0, [pc, #132]	@ (800287c <MX_TIM3_Init+0x128>)
 80027f6:	f005 fb45 	bl	8007e84 <HAL_TIMEx_MasterConfigSynchronization>
 80027fa:	4603      	mov	r3, r0
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d001      	beq.n	8002804 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8002800:	f7ff fb0a 	bl	8001e18 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002804:	2360      	movs	r3, #96	@ 0x60
 8002806:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002808:	2300      	movs	r3, #0
 800280a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800280c:	2300      	movs	r3, #0
 800280e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002810:	2300      	movs	r3, #0
 8002812:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002814:	1d3b      	adds	r3, r7, #4
 8002816:	2200      	movs	r2, #0
 8002818:	4619      	mov	r1, r3
 800281a:	4818      	ldr	r0, [pc, #96]	@ (800287c <MX_TIM3_Init+0x128>)
 800281c:	f004 fe64 	bl	80074e8 <HAL_TIM_PWM_ConfigChannel>
 8002820:	4603      	mov	r3, r0
 8002822:	2b00      	cmp	r3, #0
 8002824:	d001      	beq.n	800282a <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8002826:	f7ff faf7 	bl	8001e18 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800282a:	1d3b      	adds	r3, r7, #4
 800282c:	2204      	movs	r2, #4
 800282e:	4619      	mov	r1, r3
 8002830:	4812      	ldr	r0, [pc, #72]	@ (800287c <MX_TIM3_Init+0x128>)
 8002832:	f004 fe59 	bl	80074e8 <HAL_TIM_PWM_ConfigChannel>
 8002836:	4603      	mov	r3, r0
 8002838:	2b00      	cmp	r3, #0
 800283a:	d001      	beq.n	8002840 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 800283c:	f7ff faec 	bl	8001e18 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002840:	1d3b      	adds	r3, r7, #4
 8002842:	2208      	movs	r2, #8
 8002844:	4619      	mov	r1, r3
 8002846:	480d      	ldr	r0, [pc, #52]	@ (800287c <MX_TIM3_Init+0x128>)
 8002848:	f004 fe4e 	bl	80074e8 <HAL_TIM_PWM_ConfigChannel>
 800284c:	4603      	mov	r3, r0
 800284e:	2b00      	cmp	r3, #0
 8002850:	d001      	beq.n	8002856 <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 8002852:	f7ff fae1 	bl	8001e18 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002856:	1d3b      	adds	r3, r7, #4
 8002858:	220c      	movs	r2, #12
 800285a:	4619      	mov	r1, r3
 800285c:	4807      	ldr	r0, [pc, #28]	@ (800287c <MX_TIM3_Init+0x128>)
 800285e:	f004 fe43 	bl	80074e8 <HAL_TIM_PWM_ConfigChannel>
 8002862:	4603      	mov	r3, r0
 8002864:	2b00      	cmp	r3, #0
 8002866:	d001      	beq.n	800286c <MX_TIM3_Init+0x118>
  {
    Error_Handler();
 8002868:	f7ff fad6 	bl	8001e18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800286c:	4803      	ldr	r0, [pc, #12]	@ (800287c <MX_TIM3_Init+0x128>)
 800286e:	f000 f99f 	bl	8002bb0 <HAL_TIM_MspPostInit>

}
 8002872:	bf00      	nop
 8002874:	3738      	adds	r7, #56	@ 0x38
 8002876:	46bd      	mov	sp, r7
 8002878:	bd80      	pop	{r7, pc}
 800287a:	bf00      	nop
 800287c:	2000022c 	.word	0x2000022c
 8002880:	40000400 	.word	0x40000400

08002884 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b08e      	sub	sp, #56	@ 0x38
 8002888:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800288a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800288e:	2200      	movs	r2, #0
 8002890:	601a      	str	r2, [r3, #0]
 8002892:	605a      	str	r2, [r3, #4]
 8002894:	609a      	str	r2, [r3, #8]
 8002896:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002898:	f107 0320 	add.w	r3, r7, #32
 800289c:	2200      	movs	r2, #0
 800289e:	601a      	str	r2, [r3, #0]
 80028a0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80028a2:	1d3b      	adds	r3, r7, #4
 80028a4:	2200      	movs	r2, #0
 80028a6:	601a      	str	r2, [r3, #0]
 80028a8:	605a      	str	r2, [r3, #4]
 80028aa:	609a      	str	r2, [r3, #8]
 80028ac:	60da      	str	r2, [r3, #12]
 80028ae:	611a      	str	r2, [r3, #16]
 80028b0:	615a      	str	r2, [r3, #20]
 80028b2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80028b4:	4b2d      	ldr	r3, [pc, #180]	@ (800296c <MX_TIM4_Init+0xe8>)
 80028b6:	4a2e      	ldr	r2, [pc, #184]	@ (8002970 <MX_TIM4_Init+0xec>)
 80028b8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 300-1;
 80028ba:	4b2c      	ldr	r3, [pc, #176]	@ (800296c <MX_TIM4_Init+0xe8>)
 80028bc:	f240 122b 	movw	r2, #299	@ 0x12b
 80028c0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028c2:	4b2a      	ldr	r3, [pc, #168]	@ (800296c <MX_TIM4_Init+0xe8>)
 80028c4:	2200      	movs	r2, #0
 80028c6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000-1;
 80028c8:	4b28      	ldr	r3, [pc, #160]	@ (800296c <MX_TIM4_Init+0xe8>)
 80028ca:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80028ce:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80028d0:	4b26      	ldr	r3, [pc, #152]	@ (800296c <MX_TIM4_Init+0xe8>)
 80028d2:	2200      	movs	r2, #0
 80028d4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80028d6:	4b25      	ldr	r3, [pc, #148]	@ (800296c <MX_TIM4_Init+0xe8>)
 80028d8:	2200      	movs	r2, #0
 80028da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80028dc:	4823      	ldr	r0, [pc, #140]	@ (800296c <MX_TIM4_Init+0xe8>)
 80028de:	f004 fa93 	bl	8006e08 <HAL_TIM_Base_Init>
 80028e2:	4603      	mov	r3, r0
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d001      	beq.n	80028ec <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 80028e8:	f7ff fa96 	bl	8001e18 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80028ec:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80028f0:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80028f2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80028f6:	4619      	mov	r1, r3
 80028f8:	481c      	ldr	r0, [pc, #112]	@ (800296c <MX_TIM4_Init+0xe8>)
 80028fa:	f004 feb7 	bl	800766c <HAL_TIM_ConfigClockSource>
 80028fe:	4603      	mov	r3, r0
 8002900:	2b00      	cmp	r3, #0
 8002902:	d001      	beq.n	8002908 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8002904:	f7ff fa88 	bl	8001e18 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002908:	4818      	ldr	r0, [pc, #96]	@ (800296c <MX_TIM4_Init+0xe8>)
 800290a:	f004 fb6c 	bl	8006fe6 <HAL_TIM_PWM_Init>
 800290e:	4603      	mov	r3, r0
 8002910:	2b00      	cmp	r3, #0
 8002912:	d001      	beq.n	8002918 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8002914:	f7ff fa80 	bl	8001e18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002918:	2300      	movs	r3, #0
 800291a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800291c:	2300      	movs	r3, #0
 800291e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002920:	f107 0320 	add.w	r3, r7, #32
 8002924:	4619      	mov	r1, r3
 8002926:	4811      	ldr	r0, [pc, #68]	@ (800296c <MX_TIM4_Init+0xe8>)
 8002928:	f005 faac 	bl	8007e84 <HAL_TIMEx_MasterConfigSynchronization>
 800292c:	4603      	mov	r3, r0
 800292e:	2b00      	cmp	r3, #0
 8002930:	d001      	beq.n	8002936 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8002932:	f7ff fa71 	bl	8001e18 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002936:	2360      	movs	r3, #96	@ 0x60
 8002938:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800293a:	2300      	movs	r3, #0
 800293c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800293e:	2300      	movs	r3, #0
 8002940:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002942:	2300      	movs	r3, #0
 8002944:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002946:	1d3b      	adds	r3, r7, #4
 8002948:	2204      	movs	r2, #4
 800294a:	4619      	mov	r1, r3
 800294c:	4807      	ldr	r0, [pc, #28]	@ (800296c <MX_TIM4_Init+0xe8>)
 800294e:	f004 fdcb 	bl	80074e8 <HAL_TIM_PWM_ConfigChannel>
 8002952:	4603      	mov	r3, r0
 8002954:	2b00      	cmp	r3, #0
 8002956:	d001      	beq.n	800295c <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8002958:	f7ff fa5e 	bl	8001e18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800295c:	4803      	ldr	r0, [pc, #12]	@ (800296c <MX_TIM4_Init+0xe8>)
 800295e:	f000 f927 	bl	8002bb0 <HAL_TIM_MspPostInit>

}
 8002962:	bf00      	nop
 8002964:	3738      	adds	r7, #56	@ 0x38
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}
 800296a:	bf00      	nop
 800296c:	20000274 	.word	0x20000274
 8002970:	40000800 	.word	0x40000800

08002974 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b082      	sub	sp, #8
 8002978:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800297a:	463b      	mov	r3, r7
 800297c:	2200      	movs	r2, #0
 800297e:	601a      	str	r2, [r3, #0]
 8002980:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002982:	4b15      	ldr	r3, [pc, #84]	@ (80029d8 <MX_TIM6_Init+0x64>)
 8002984:	4a15      	ldr	r2, [pc, #84]	@ (80029dc <MX_TIM6_Init+0x68>)
 8002986:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 42000-1;
 8002988:	4b13      	ldr	r3, [pc, #76]	@ (80029d8 <MX_TIM6_Init+0x64>)
 800298a:	f24a 420f 	movw	r2, #41999	@ 0xa40f
 800298e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002990:	4b11      	ldr	r3, [pc, #68]	@ (80029d8 <MX_TIM6_Init+0x64>)
 8002992:	2200      	movs	r2, #0
 8002994:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 200-1;
 8002996:	4b10      	ldr	r3, [pc, #64]	@ (80029d8 <MX_TIM6_Init+0x64>)
 8002998:	22c7      	movs	r2, #199	@ 0xc7
 800299a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800299c:	4b0e      	ldr	r3, [pc, #56]	@ (80029d8 <MX_TIM6_Init+0x64>)
 800299e:	2200      	movs	r2, #0
 80029a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80029a2:	480d      	ldr	r0, [pc, #52]	@ (80029d8 <MX_TIM6_Init+0x64>)
 80029a4:	f004 fa30 	bl	8006e08 <HAL_TIM_Base_Init>
 80029a8:	4603      	mov	r3, r0
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d001      	beq.n	80029b2 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 80029ae:	f7ff fa33 	bl	8001e18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80029b2:	2320      	movs	r3, #32
 80029b4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80029b6:	2300      	movs	r3, #0
 80029b8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80029ba:	463b      	mov	r3, r7
 80029bc:	4619      	mov	r1, r3
 80029be:	4806      	ldr	r0, [pc, #24]	@ (80029d8 <MX_TIM6_Init+0x64>)
 80029c0:	f005 fa60 	bl	8007e84 <HAL_TIMEx_MasterConfigSynchronization>
 80029c4:	4603      	mov	r3, r0
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d001      	beq.n	80029ce <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 80029ca:	f7ff fa25 	bl	8001e18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80029ce:	bf00      	nop
 80029d0:	3708      	adds	r7, #8
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}
 80029d6:	bf00      	nop
 80029d8:	200002bc 	.word	0x200002bc
 80029dc:	40001000 	.word	0x40001000

080029e0 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b082      	sub	sp, #8
 80029e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80029e6:	463b      	mov	r3, r7
 80029e8:	2200      	movs	r2, #0
 80029ea:	601a      	str	r2, [r3, #0]
 80029ec:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80029ee:	4b14      	ldr	r3, [pc, #80]	@ (8002a40 <MX_TIM7_Init+0x60>)
 80029f0:	4a14      	ldr	r2, [pc, #80]	@ (8002a44 <MX_TIM7_Init+0x64>)
 80029f2:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 83;
 80029f4:	4b12      	ldr	r3, [pc, #72]	@ (8002a40 <MX_TIM7_Init+0x60>)
 80029f6:	2253      	movs	r2, #83	@ 0x53
 80029f8:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029fa:	4b11      	ldr	r3, [pc, #68]	@ (8002a40 <MX_TIM7_Init+0x60>)
 80029fc:	2200      	movs	r2, #0
 80029fe:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 9;
 8002a00:	4b0f      	ldr	r3, [pc, #60]	@ (8002a40 <MX_TIM7_Init+0x60>)
 8002a02:	2209      	movs	r2, #9
 8002a04:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a06:	4b0e      	ldr	r3, [pc, #56]	@ (8002a40 <MX_TIM7_Init+0x60>)
 8002a08:	2200      	movs	r2, #0
 8002a0a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8002a0c:	480c      	ldr	r0, [pc, #48]	@ (8002a40 <MX_TIM7_Init+0x60>)
 8002a0e:	f004 f9fb 	bl	8006e08 <HAL_TIM_Base_Init>
 8002a12:	4603      	mov	r3, r0
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d001      	beq.n	8002a1c <MX_TIM7_Init+0x3c>
  {
    Error_Handler();
 8002a18:	f7ff f9fe 	bl	8001e18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a20:	2300      	movs	r3, #0
 8002a22:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8002a24:	463b      	mov	r3, r7
 8002a26:	4619      	mov	r1, r3
 8002a28:	4805      	ldr	r0, [pc, #20]	@ (8002a40 <MX_TIM7_Init+0x60>)
 8002a2a:	f005 fa2b 	bl	8007e84 <HAL_TIMEx_MasterConfigSynchronization>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d001      	beq.n	8002a38 <MX_TIM7_Init+0x58>
  {
    Error_Handler();
 8002a34:	f7ff f9f0 	bl	8001e18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8002a38:	bf00      	nop
 8002a3a:	3708      	adds	r7, #8
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bd80      	pop	{r7, pc}
 8002a40:	20000304 	.word	0x20000304
 8002a44:	40001400 	.word	0x40001400

08002a48 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8002a4c:	4b0e      	ldr	r3, [pc, #56]	@ (8002a88 <MX_TIM10_Init+0x40>)
 8002a4e:	4a0f      	ldr	r2, [pc, #60]	@ (8002a8c <MX_TIM10_Init+0x44>)
 8002a50:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 42000-1;
 8002a52:	4b0d      	ldr	r3, [pc, #52]	@ (8002a88 <MX_TIM10_Init+0x40>)
 8002a54:	f24a 420f 	movw	r2, #41999	@ 0xa40f
 8002a58:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a5a:	4b0b      	ldr	r3, [pc, #44]	@ (8002a88 <MX_TIM10_Init+0x40>)
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 2000-1;
 8002a60:	4b09      	ldr	r3, [pc, #36]	@ (8002a88 <MX_TIM10_Init+0x40>)
 8002a62:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8002a66:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a68:	4b07      	ldr	r3, [pc, #28]	@ (8002a88 <MX_TIM10_Init+0x40>)
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a6e:	4b06      	ldr	r3, [pc, #24]	@ (8002a88 <MX_TIM10_Init+0x40>)
 8002a70:	2200      	movs	r2, #0
 8002a72:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8002a74:	4804      	ldr	r0, [pc, #16]	@ (8002a88 <MX_TIM10_Init+0x40>)
 8002a76:	f004 f9c7 	bl	8006e08 <HAL_TIM_Base_Init>
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d001      	beq.n	8002a84 <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 8002a80:	f7ff f9ca 	bl	8001e18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8002a84:	bf00      	nop
 8002a86:	bd80      	pop	{r7, pc}
 8002a88:	2000034c 	.word	0x2000034c
 8002a8c:	40014400 	.word	0x40014400

08002a90 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b088      	sub	sp, #32
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a3e      	ldr	r2, [pc, #248]	@ (8002b98 <HAL_TIM_Base_MspInit+0x108>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d10e      	bne.n	8002ac0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	61fb      	str	r3, [r7, #28]
 8002aa6:	4b3d      	ldr	r3, [pc, #244]	@ (8002b9c <HAL_TIM_Base_MspInit+0x10c>)
 8002aa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aaa:	4a3c      	ldr	r2, [pc, #240]	@ (8002b9c <HAL_TIM_Base_MspInit+0x10c>)
 8002aac:	f043 0302 	orr.w	r3, r3, #2
 8002ab0:	6413      	str	r3, [r2, #64]	@ 0x40
 8002ab2:	4b3a      	ldr	r3, [pc, #232]	@ (8002b9c <HAL_TIM_Base_MspInit+0x10c>)
 8002ab4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ab6:	f003 0302 	and.w	r3, r3, #2
 8002aba:	61fb      	str	r3, [r7, #28]
 8002abc:	69fb      	ldr	r3, [r7, #28]
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }
}
 8002abe:	e066      	b.n	8002b8e <HAL_TIM_Base_MspInit+0xfe>
  else if(tim_baseHandle->Instance==TIM4)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a36      	ldr	r2, [pc, #216]	@ (8002ba0 <HAL_TIM_Base_MspInit+0x110>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d10e      	bne.n	8002ae8 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002aca:	2300      	movs	r3, #0
 8002acc:	61bb      	str	r3, [r7, #24]
 8002ace:	4b33      	ldr	r3, [pc, #204]	@ (8002b9c <HAL_TIM_Base_MspInit+0x10c>)
 8002ad0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ad2:	4a32      	ldr	r2, [pc, #200]	@ (8002b9c <HAL_TIM_Base_MspInit+0x10c>)
 8002ad4:	f043 0304 	orr.w	r3, r3, #4
 8002ad8:	6413      	str	r3, [r2, #64]	@ 0x40
 8002ada:	4b30      	ldr	r3, [pc, #192]	@ (8002b9c <HAL_TIM_Base_MspInit+0x10c>)
 8002adc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ade:	f003 0304 	and.w	r3, r3, #4
 8002ae2:	61bb      	str	r3, [r7, #24]
 8002ae4:	69bb      	ldr	r3, [r7, #24]
}
 8002ae6:	e052      	b.n	8002b8e <HAL_TIM_Base_MspInit+0xfe>
  else if(tim_baseHandle->Instance==TIM6)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a2d      	ldr	r2, [pc, #180]	@ (8002ba4 <HAL_TIM_Base_MspInit+0x114>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d116      	bne.n	8002b20 <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002af2:	2300      	movs	r3, #0
 8002af4:	617b      	str	r3, [r7, #20]
 8002af6:	4b29      	ldr	r3, [pc, #164]	@ (8002b9c <HAL_TIM_Base_MspInit+0x10c>)
 8002af8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002afa:	4a28      	ldr	r2, [pc, #160]	@ (8002b9c <HAL_TIM_Base_MspInit+0x10c>)
 8002afc:	f043 0310 	orr.w	r3, r3, #16
 8002b00:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b02:	4b26      	ldr	r3, [pc, #152]	@ (8002b9c <HAL_TIM_Base_MspInit+0x10c>)
 8002b04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b06:	f003 0310 	and.w	r3, r3, #16
 8002b0a:	617b      	str	r3, [r7, #20]
 8002b0c:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002b0e:	2200      	movs	r2, #0
 8002b10:	2100      	movs	r1, #0
 8002b12:	2036      	movs	r0, #54	@ 0x36
 8002b14:	f001 f8a1 	bl	8003c5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002b18:	2036      	movs	r0, #54	@ 0x36
 8002b1a:	f001 f8ba 	bl	8003c92 <HAL_NVIC_EnableIRQ>
}
 8002b1e:	e036      	b.n	8002b8e <HAL_TIM_Base_MspInit+0xfe>
  else if(tim_baseHandle->Instance==TIM7)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a20      	ldr	r2, [pc, #128]	@ (8002ba8 <HAL_TIM_Base_MspInit+0x118>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d116      	bne.n	8002b58 <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	613b      	str	r3, [r7, #16]
 8002b2e:	4b1b      	ldr	r3, [pc, #108]	@ (8002b9c <HAL_TIM_Base_MspInit+0x10c>)
 8002b30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b32:	4a1a      	ldr	r2, [pc, #104]	@ (8002b9c <HAL_TIM_Base_MspInit+0x10c>)
 8002b34:	f043 0320 	orr.w	r3, r3, #32
 8002b38:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b3a:	4b18      	ldr	r3, [pc, #96]	@ (8002b9c <HAL_TIM_Base_MspInit+0x10c>)
 8002b3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b3e:	f003 0320 	and.w	r3, r3, #32
 8002b42:	613b      	str	r3, [r7, #16]
 8002b44:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8002b46:	2200      	movs	r2, #0
 8002b48:	2100      	movs	r1, #0
 8002b4a:	2037      	movs	r0, #55	@ 0x37
 8002b4c:	f001 f885 	bl	8003c5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002b50:	2037      	movs	r0, #55	@ 0x37
 8002b52:	f001 f89e 	bl	8003c92 <HAL_NVIC_EnableIRQ>
}
 8002b56:	e01a      	b.n	8002b8e <HAL_TIM_Base_MspInit+0xfe>
  else if(tim_baseHandle->Instance==TIM10)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4a13      	ldr	r2, [pc, #76]	@ (8002bac <HAL_TIM_Base_MspInit+0x11c>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d115      	bne.n	8002b8e <HAL_TIM_Base_MspInit+0xfe>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8002b62:	2300      	movs	r3, #0
 8002b64:	60fb      	str	r3, [r7, #12]
 8002b66:	4b0d      	ldr	r3, [pc, #52]	@ (8002b9c <HAL_TIM_Base_MspInit+0x10c>)
 8002b68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b6a:	4a0c      	ldr	r2, [pc, #48]	@ (8002b9c <HAL_TIM_Base_MspInit+0x10c>)
 8002b6c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b70:	6453      	str	r3, [r2, #68]	@ 0x44
 8002b72:	4b0a      	ldr	r3, [pc, #40]	@ (8002b9c <HAL_TIM_Base_MspInit+0x10c>)
 8002b74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b7a:	60fb      	str	r3, [r7, #12]
 8002b7c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8002b7e:	2200      	movs	r2, #0
 8002b80:	2100      	movs	r1, #0
 8002b82:	2019      	movs	r0, #25
 8002b84:	f001 f869 	bl	8003c5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002b88:	2019      	movs	r0, #25
 8002b8a:	f001 f882 	bl	8003c92 <HAL_NVIC_EnableIRQ>
}
 8002b8e:	bf00      	nop
 8002b90:	3720      	adds	r7, #32
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd80      	pop	{r7, pc}
 8002b96:	bf00      	nop
 8002b98:	40000400 	.word	0x40000400
 8002b9c:	40023800 	.word	0x40023800
 8002ba0:	40000800 	.word	0x40000800
 8002ba4:	40001000 	.word	0x40001000
 8002ba8:	40001400 	.word	0x40001400
 8002bac:	40014400 	.word	0x40014400

08002bb0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b08a      	sub	sp, #40	@ 0x28
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bb8:	f107 0314 	add.w	r3, r7, #20
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	601a      	str	r2, [r3, #0]
 8002bc0:	605a      	str	r2, [r3, #4]
 8002bc2:	609a      	str	r2, [r3, #8]
 8002bc4:	60da      	str	r2, [r3, #12]
 8002bc6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a33      	ldr	r2, [pc, #204]	@ (8002c9c <HAL_TIM_MspPostInit+0xec>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d13c      	bne.n	8002c4c <HAL_TIM_MspPostInit+0x9c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	613b      	str	r3, [r7, #16]
 8002bd6:	4b32      	ldr	r3, [pc, #200]	@ (8002ca0 <HAL_TIM_MspPostInit+0xf0>)
 8002bd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bda:	4a31      	ldr	r2, [pc, #196]	@ (8002ca0 <HAL_TIM_MspPostInit+0xf0>)
 8002bdc:	f043 0301 	orr.w	r3, r3, #1
 8002be0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002be2:	4b2f      	ldr	r3, [pc, #188]	@ (8002ca0 <HAL_TIM_MspPostInit+0xf0>)
 8002be4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002be6:	f003 0301 	and.w	r3, r3, #1
 8002bea:	613b      	str	r3, [r7, #16]
 8002bec:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bee:	2300      	movs	r3, #0
 8002bf0:	60fb      	str	r3, [r7, #12]
 8002bf2:	4b2b      	ldr	r3, [pc, #172]	@ (8002ca0 <HAL_TIM_MspPostInit+0xf0>)
 8002bf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bf6:	4a2a      	ldr	r2, [pc, #168]	@ (8002ca0 <HAL_TIM_MspPostInit+0xf0>)
 8002bf8:	f043 0302 	orr.w	r3, r3, #2
 8002bfc:	6313      	str	r3, [r2, #48]	@ 0x30
 8002bfe:	4b28      	ldr	r3, [pc, #160]	@ (8002ca0 <HAL_TIM_MspPostInit+0xf0>)
 8002c00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c02:	f003 0302 	and.w	r3, r3, #2
 8002c06:	60fb      	str	r3, [r7, #12]
 8002c08:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = Gauche_av_Pin|Gauche_re_Pin;
 8002c0a:	23c0      	movs	r3, #192	@ 0xc0
 8002c0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c0e:	2302      	movs	r3, #2
 8002c10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c12:	2300      	movs	r3, #0
 8002c14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c16:	2300      	movs	r3, #0
 8002c18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002c1a:	2302      	movs	r3, #2
 8002c1c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c1e:	f107 0314 	add.w	r3, r7, #20
 8002c22:	4619      	mov	r1, r3
 8002c24:	481f      	ldr	r0, [pc, #124]	@ (8002ca4 <HAL_TIM_MspPostInit+0xf4>)
 8002c26:	f001 f84f 	bl	8003cc8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Droit_av_Pin|Droit_re_Pin;
 8002c2a:	2303      	movs	r3, #3
 8002c2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c2e:	2302      	movs	r3, #2
 8002c30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c32:	2300      	movs	r3, #0
 8002c34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c36:	2300      	movs	r3, #0
 8002c38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002c3a:	2302      	movs	r3, #2
 8002c3c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c3e:	f107 0314 	add.w	r3, r7, #20
 8002c42:	4619      	mov	r1, r3
 8002c44:	4818      	ldr	r0, [pc, #96]	@ (8002ca8 <HAL_TIM_MspPostInit+0xf8>)
 8002c46:	f001 f83f 	bl	8003cc8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002c4a:	e022      	b.n	8002c92 <HAL_TIM_MspPostInit+0xe2>
  else if(timHandle->Instance==TIM4)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a16      	ldr	r2, [pc, #88]	@ (8002cac <HAL_TIM_MspPostInit+0xfc>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d11d      	bne.n	8002c92 <HAL_TIM_MspPostInit+0xe2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c56:	2300      	movs	r3, #0
 8002c58:	60bb      	str	r3, [r7, #8]
 8002c5a:	4b11      	ldr	r3, [pc, #68]	@ (8002ca0 <HAL_TIM_MspPostInit+0xf0>)
 8002c5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c5e:	4a10      	ldr	r2, [pc, #64]	@ (8002ca0 <HAL_TIM_MspPostInit+0xf0>)
 8002c60:	f043 0302 	orr.w	r3, r3, #2
 8002c64:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c66:	4b0e      	ldr	r3, [pc, #56]	@ (8002ca0 <HAL_TIM_MspPostInit+0xf0>)
 8002c68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c6a:	f003 0302 	and.w	r3, r3, #2
 8002c6e:	60bb      	str	r3, [r7, #8]
 8002c70:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = LCD_BL_Pin;
 8002c72:	2380      	movs	r3, #128	@ 0x80
 8002c74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c76:	2302      	movs	r3, #2
 8002c78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002c82:	2302      	movs	r3, #2
 8002c84:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(LCD_BL_GPIO_Port, &GPIO_InitStruct);
 8002c86:	f107 0314 	add.w	r3, r7, #20
 8002c8a:	4619      	mov	r1, r3
 8002c8c:	4806      	ldr	r0, [pc, #24]	@ (8002ca8 <HAL_TIM_MspPostInit+0xf8>)
 8002c8e:	f001 f81b 	bl	8003cc8 <HAL_GPIO_Init>
}
 8002c92:	bf00      	nop
 8002c94:	3728      	adds	r7, #40	@ 0x28
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}
 8002c9a:	bf00      	nop
 8002c9c:	40000400 	.word	0x40000400
 8002ca0:	40023800 	.word	0x40023800
 8002ca4:	40020000 	.word	0x40020000
 8002ca8:	40020400 	.word	0x40020400
 8002cac:	40000800 	.word	0x40000800

08002cb0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002cb4:	4b11      	ldr	r3, [pc, #68]	@ (8002cfc <MX_USART2_UART_Init+0x4c>)
 8002cb6:	4a12      	ldr	r2, [pc, #72]	@ (8002d00 <MX_USART2_UART_Init+0x50>)
 8002cb8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002cba:	4b10      	ldr	r3, [pc, #64]	@ (8002cfc <MX_USART2_UART_Init+0x4c>)
 8002cbc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002cc0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002cc2:	4b0e      	ldr	r3, [pc, #56]	@ (8002cfc <MX_USART2_UART_Init+0x4c>)
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002cc8:	4b0c      	ldr	r3, [pc, #48]	@ (8002cfc <MX_USART2_UART_Init+0x4c>)
 8002cca:	2200      	movs	r2, #0
 8002ccc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002cce:	4b0b      	ldr	r3, [pc, #44]	@ (8002cfc <MX_USART2_UART_Init+0x4c>)
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002cd4:	4b09      	ldr	r3, [pc, #36]	@ (8002cfc <MX_USART2_UART_Init+0x4c>)
 8002cd6:	220c      	movs	r2, #12
 8002cd8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002cda:	4b08      	ldr	r3, [pc, #32]	@ (8002cfc <MX_USART2_UART_Init+0x4c>)
 8002cdc:	2200      	movs	r2, #0
 8002cde:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ce0:	4b06      	ldr	r3, [pc, #24]	@ (8002cfc <MX_USART2_UART_Init+0x4c>)
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002ce6:	4805      	ldr	r0, [pc, #20]	@ (8002cfc <MX_USART2_UART_Init+0x4c>)
 8002ce8:	f005 f95c 	bl	8007fa4 <HAL_UART_Init>
 8002cec:	4603      	mov	r3, r0
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d001      	beq.n	8002cf6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002cf2:	f7ff f891 	bl	8001e18 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002cf6:	bf00      	nop
 8002cf8:	bd80      	pop	{r7, pc}
 8002cfa:	bf00      	nop
 8002cfc:	20000394 	.word	0x20000394
 8002d00:	40004400 	.word	0x40004400

08002d04 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b08a      	sub	sp, #40	@ 0x28
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d0c:	f107 0314 	add.w	r3, r7, #20
 8002d10:	2200      	movs	r2, #0
 8002d12:	601a      	str	r2, [r3, #0]
 8002d14:	605a      	str	r2, [r3, #4]
 8002d16:	609a      	str	r2, [r3, #8]
 8002d18:	60da      	str	r2, [r3, #12]
 8002d1a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a19      	ldr	r2, [pc, #100]	@ (8002d88 <HAL_UART_MspInit+0x84>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d12b      	bne.n	8002d7e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002d26:	2300      	movs	r3, #0
 8002d28:	613b      	str	r3, [r7, #16]
 8002d2a:	4b18      	ldr	r3, [pc, #96]	@ (8002d8c <HAL_UART_MspInit+0x88>)
 8002d2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d2e:	4a17      	ldr	r2, [pc, #92]	@ (8002d8c <HAL_UART_MspInit+0x88>)
 8002d30:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002d34:	6413      	str	r3, [r2, #64]	@ 0x40
 8002d36:	4b15      	ldr	r3, [pc, #84]	@ (8002d8c <HAL_UART_MspInit+0x88>)
 8002d38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d3e:	613b      	str	r3, [r7, #16]
 8002d40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d42:	2300      	movs	r3, #0
 8002d44:	60fb      	str	r3, [r7, #12]
 8002d46:	4b11      	ldr	r3, [pc, #68]	@ (8002d8c <HAL_UART_MspInit+0x88>)
 8002d48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d4a:	4a10      	ldr	r2, [pc, #64]	@ (8002d8c <HAL_UART_MspInit+0x88>)
 8002d4c:	f043 0301 	orr.w	r3, r3, #1
 8002d50:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d52:	4b0e      	ldr	r3, [pc, #56]	@ (8002d8c <HAL_UART_MspInit+0x88>)
 8002d54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d56:	f003 0301 	and.w	r3, r3, #1
 8002d5a:	60fb      	str	r3, [r7, #12]
 8002d5c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002d5e:	230c      	movs	r3, #12
 8002d60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d62:	2302      	movs	r3, #2
 8002d64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d66:	2300      	movs	r3, #0
 8002d68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d6a:	2303      	movs	r3, #3
 8002d6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002d6e:	2307      	movs	r3, #7
 8002d70:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d72:	f107 0314 	add.w	r3, r7, #20
 8002d76:	4619      	mov	r1, r3
 8002d78:	4805      	ldr	r0, [pc, #20]	@ (8002d90 <HAL_UART_MspInit+0x8c>)
 8002d7a:	f000 ffa5 	bl	8003cc8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002d7e:	bf00      	nop
 8002d80:	3728      	adds	r7, #40	@ 0x28
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd80      	pop	{r7, pc}
 8002d86:	bf00      	nop
 8002d88:	40004400 	.word	0x40004400
 8002d8c:	40023800 	.word	0x40023800
 8002d90:	40020000 	.word	0x40020000

08002d94 <moyPulse>:



    extern volatile uint16_t vitesseD, vitesseG; //en mm par seconde

void moyPulse(uint16_t pulseD, uint16_t pulseG, uint16_t *moyD, uint16_t *moyG){
 8002d94:	b480      	push	{r7}
 8002d96:	b085      	sub	sp, #20
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	60ba      	str	r2, [r7, #8]
 8002d9c:	607b      	str	r3, [r7, #4]
 8002d9e:	4603      	mov	r3, r0
 8002da0:	81fb      	strh	r3, [r7, #14]
 8002da2:	460b      	mov	r3, r1
 8002da4:	81bb      	strh	r3, [r7, #12]

	sumD = 0;
 8002da6:	4b30      	ldr	r3, [pc, #192]	@ (8002e68 <moyPulse+0xd4>)
 8002da8:	2200      	movs	r2, #0
 8002daa:	701a      	strb	r2, [r3, #0]
	sumG = 0;
 8002dac:	4b2f      	ldr	r3, [pc, #188]	@ (8002e6c <moyPulse+0xd8>)
 8002dae:	2200      	movs	r2, #0
 8002db0:	701a      	strb	r2, [r3, #0]

    if(indiceMem < INDICE_MEM_MAX){
 8002db2:	4b2f      	ldr	r3, [pc, #188]	@ (8002e70 <moyPulse+0xdc>)
 8002db4:	781b      	ldrb	r3, [r3, #0]
 8002db6:	2b03      	cmp	r3, #3
 8002db8:	d806      	bhi.n	8002dc8 <moyPulse+0x34>
        indiceMem++;
 8002dba:	4b2d      	ldr	r3, [pc, #180]	@ (8002e70 <moyPulse+0xdc>)
 8002dbc:	781b      	ldrb	r3, [r3, #0]
 8002dbe:	3301      	adds	r3, #1
 8002dc0:	b2da      	uxtb	r2, r3
 8002dc2:	4b2b      	ldr	r3, [pc, #172]	@ (8002e70 <moyPulse+0xdc>)
 8002dc4:	701a      	strb	r2, [r3, #0]
 8002dc6:	e002      	b.n	8002dce <moyPulse+0x3a>
    }
    else{
        indiceMem = 0;
 8002dc8:	4b29      	ldr	r3, [pc, #164]	@ (8002e70 <moyPulse+0xdc>)
 8002dca:	2200      	movs	r2, #0
 8002dcc:	701a      	strb	r2, [r3, #0]
    }

	memPulseD[indiceMem] = pulseD;
 8002dce:	4b28      	ldr	r3, [pc, #160]	@ (8002e70 <moyPulse+0xdc>)
 8002dd0:	781b      	ldrb	r3, [r3, #0]
 8002dd2:	4619      	mov	r1, r3
 8002dd4:	4a27      	ldr	r2, [pc, #156]	@ (8002e74 <moyPulse+0xe0>)
 8002dd6:	89fb      	ldrh	r3, [r7, #14]
 8002dd8:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
	memPulseG[indiceMem] = pulseG;
 8002ddc:	4b24      	ldr	r3, [pc, #144]	@ (8002e70 <moyPulse+0xdc>)
 8002dde:	781b      	ldrb	r3, [r3, #0]
 8002de0:	4619      	mov	r1, r3
 8002de2:	4a25      	ldr	r2, [pc, #148]	@ (8002e78 <moyPulse+0xe4>)
 8002de4:	89bb      	ldrh	r3, [r7, #12]
 8002de6:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]

	for (ind = 0; ind < (INDICE_MEM_MAX+1); ind++){
 8002dea:	4b24      	ldr	r3, [pc, #144]	@ (8002e7c <moyPulse+0xe8>)
 8002dec:	2200      	movs	r2, #0
 8002dee:	601a      	str	r2, [r3, #0]
 8002df0:	e01c      	b.n	8002e2c <moyPulse+0x98>
		sumD += memPulseD[ind];
 8002df2:	4b22      	ldr	r3, [pc, #136]	@ (8002e7c <moyPulse+0xe8>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4a1f      	ldr	r2, [pc, #124]	@ (8002e74 <moyPulse+0xe0>)
 8002df8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002dfc:	b2da      	uxtb	r2, r3
 8002dfe:	4b1a      	ldr	r3, [pc, #104]	@ (8002e68 <moyPulse+0xd4>)
 8002e00:	781b      	ldrb	r3, [r3, #0]
 8002e02:	4413      	add	r3, r2
 8002e04:	b2da      	uxtb	r2, r3
 8002e06:	4b18      	ldr	r3, [pc, #96]	@ (8002e68 <moyPulse+0xd4>)
 8002e08:	701a      	strb	r2, [r3, #0]
		sumG += memPulseG[ind];
 8002e0a:	4b1c      	ldr	r3, [pc, #112]	@ (8002e7c <moyPulse+0xe8>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4a1a      	ldr	r2, [pc, #104]	@ (8002e78 <moyPulse+0xe4>)
 8002e10:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002e14:	b2da      	uxtb	r2, r3
 8002e16:	4b15      	ldr	r3, [pc, #84]	@ (8002e6c <moyPulse+0xd8>)
 8002e18:	781b      	ldrb	r3, [r3, #0]
 8002e1a:	4413      	add	r3, r2
 8002e1c:	b2da      	uxtb	r2, r3
 8002e1e:	4b13      	ldr	r3, [pc, #76]	@ (8002e6c <moyPulse+0xd8>)
 8002e20:	701a      	strb	r2, [r3, #0]
	for (ind = 0; ind < (INDICE_MEM_MAX+1); ind++){
 8002e22:	4b16      	ldr	r3, [pc, #88]	@ (8002e7c <moyPulse+0xe8>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	3301      	adds	r3, #1
 8002e28:	4a14      	ldr	r2, [pc, #80]	@ (8002e7c <moyPulse+0xe8>)
 8002e2a:	6013      	str	r3, [r2, #0]
 8002e2c:	4b13      	ldr	r3, [pc, #76]	@ (8002e7c <moyPulse+0xe8>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	2b04      	cmp	r3, #4
 8002e32:	ddde      	ble.n	8002df2 <moyPulse+0x5e>
	}

	*moyD = sumD / (INDICE_MEM_MAX + 1 );
 8002e34:	4b0c      	ldr	r3, [pc, #48]	@ (8002e68 <moyPulse+0xd4>)
 8002e36:	781b      	ldrb	r3, [r3, #0]
 8002e38:	4a11      	ldr	r2, [pc, #68]	@ (8002e80 <moyPulse+0xec>)
 8002e3a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e3e:	089b      	lsrs	r3, r3, #2
 8002e40:	b2db      	uxtb	r3, r3
 8002e42:	461a      	mov	r2, r3
 8002e44:	68bb      	ldr	r3, [r7, #8]
 8002e46:	801a      	strh	r2, [r3, #0]
	*moyG = sumG / (INDICE_MEM_MAX + 1);
 8002e48:	4b08      	ldr	r3, [pc, #32]	@ (8002e6c <moyPulse+0xd8>)
 8002e4a:	781b      	ldrb	r3, [r3, #0]
 8002e4c:	4a0c      	ldr	r2, [pc, #48]	@ (8002e80 <moyPulse+0xec>)
 8002e4e:	fba2 2303 	umull	r2, r3, r2, r3
 8002e52:	089b      	lsrs	r3, r3, #2
 8002e54:	b2db      	uxtb	r3, r3
 8002e56:	461a      	mov	r2, r3
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	801a      	strh	r2, [r3, #0]
}
 8002e5c:	bf00      	nop
 8002e5e:	3714      	adds	r7, #20
 8002e60:	46bd      	mov	sp, r7
 8002e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e66:	4770      	bx	lr
 8002e68:	20000438 	.word	0x20000438
 8002e6c:	20000437 	.word	0x20000437
 8002e70:	20000436 	.word	0x20000436
 8002e74:	20000420 	.word	0x20000420
 8002e78:	2000042c 	.word	0x2000042c
 8002e7c:	200003fc 	.word	0x200003fc
 8002e80:	cccccccd 	.word	0xcccccccd

08002e84 <int_to_str>:


void int_to_str(int num, char *str) {
 8002e84:	b480      	push	{r7}
 8002e86:	b087      	sub	sp, #28
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
 8002e8c:	6039      	str	r1, [r7, #0]
	    int i = 0, j, digit;
 8002e8e:	2300      	movs	r3, #0
 8002e90:	617b      	str	r3, [r7, #20]
	    char temp;

	    if (num == 0) {
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d128      	bne.n	8002eea <int_to_str+0x66>
	        str[i++] = '0';
 8002e98:	697b      	ldr	r3, [r7, #20]
 8002e9a:	1c5a      	adds	r2, r3, #1
 8002e9c:	617a      	str	r2, [r7, #20]
 8002e9e:	461a      	mov	r2, r3
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	4413      	add	r3, r2
 8002ea4:	2230      	movs	r2, #48	@ 0x30
 8002ea6:	701a      	strb	r2, [r3, #0]
 8002ea8:	e022      	b.n	8002ef0 <int_to_str+0x6c>
	    } else {
	        while (num > 0) {
	            digit = num % 10;
 8002eaa:	687a      	ldr	r2, [r7, #4]
 8002eac:	4b2a      	ldr	r3, [pc, #168]	@ (8002f58 <int_to_str+0xd4>)
 8002eae:	fb83 1302 	smull	r1, r3, r3, r2
 8002eb2:	1099      	asrs	r1, r3, #2
 8002eb4:	17d3      	asrs	r3, r2, #31
 8002eb6:	1ac9      	subs	r1, r1, r3
 8002eb8:	460b      	mov	r3, r1
 8002eba:	009b      	lsls	r3, r3, #2
 8002ebc:	440b      	add	r3, r1
 8002ebe:	005b      	lsls	r3, r3, #1
 8002ec0:	1ad3      	subs	r3, r2, r3
 8002ec2:	60fb      	str	r3, [r7, #12]
	            str[i++] = digit + '0';
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	b2da      	uxtb	r2, r3
 8002ec8:	697b      	ldr	r3, [r7, #20]
 8002eca:	1c59      	adds	r1, r3, #1
 8002ecc:	6179      	str	r1, [r7, #20]
 8002ece:	4619      	mov	r1, r3
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	440b      	add	r3, r1
 8002ed4:	3230      	adds	r2, #48	@ 0x30
 8002ed6:	b2d2      	uxtb	r2, r2
 8002ed8:	701a      	strb	r2, [r3, #0]
	            num /= 10;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	4a1e      	ldr	r2, [pc, #120]	@ (8002f58 <int_to_str+0xd4>)
 8002ede:	fb82 1203 	smull	r1, r2, r2, r3
 8002ee2:	1092      	asrs	r2, r2, #2
 8002ee4:	17db      	asrs	r3, r3, #31
 8002ee6:	1ad3      	subs	r3, r2, r3
 8002ee8:	607b      	str	r3, [r7, #4]
	        while (num > 0) {
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	dcdc      	bgt.n	8002eaa <int_to_str+0x26>
	        }
	    }
	    str[i] = '\0';
 8002ef0:	697b      	ldr	r3, [r7, #20]
 8002ef2:	683a      	ldr	r2, [r7, #0]
 8002ef4:	4413      	add	r3, r2
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	701a      	strb	r2, [r3, #0]

	    // Inverser la chaîne
	    for (j = 0; j < i / 2; j++) {
 8002efa:	2300      	movs	r3, #0
 8002efc:	613b      	str	r3, [r7, #16]
 8002efe:	e01c      	b.n	8002f3a <int_to_str+0xb6>
	        temp = str[j];
 8002f00:	693b      	ldr	r3, [r7, #16]
 8002f02:	683a      	ldr	r2, [r7, #0]
 8002f04:	4413      	add	r3, r2
 8002f06:	781b      	ldrb	r3, [r3, #0]
 8002f08:	72fb      	strb	r3, [r7, #11]
	        str[j] = str[i - 1 - j];
 8002f0a:	697b      	ldr	r3, [r7, #20]
 8002f0c:	1e5a      	subs	r2, r3, #1
 8002f0e:	693b      	ldr	r3, [r7, #16]
 8002f10:	1ad3      	subs	r3, r2, r3
 8002f12:	461a      	mov	r2, r3
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	441a      	add	r2, r3
 8002f18:	693b      	ldr	r3, [r7, #16]
 8002f1a:	6839      	ldr	r1, [r7, #0]
 8002f1c:	440b      	add	r3, r1
 8002f1e:	7812      	ldrb	r2, [r2, #0]
 8002f20:	701a      	strb	r2, [r3, #0]
	        str[i - 1 - j] = temp;
 8002f22:	697b      	ldr	r3, [r7, #20]
 8002f24:	1e5a      	subs	r2, r3, #1
 8002f26:	693b      	ldr	r3, [r7, #16]
 8002f28:	1ad3      	subs	r3, r2, r3
 8002f2a:	461a      	mov	r2, r3
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	4413      	add	r3, r2
 8002f30:	7afa      	ldrb	r2, [r7, #11]
 8002f32:	701a      	strb	r2, [r3, #0]
	    for (j = 0; j < i / 2; j++) {
 8002f34:	693b      	ldr	r3, [r7, #16]
 8002f36:	3301      	adds	r3, #1
 8002f38:	613b      	str	r3, [r7, #16]
 8002f3a:	697b      	ldr	r3, [r7, #20]
 8002f3c:	0fda      	lsrs	r2, r3, #31
 8002f3e:	4413      	add	r3, r2
 8002f40:	105b      	asrs	r3, r3, #1
 8002f42:	461a      	mov	r2, r3
 8002f44:	693b      	ldr	r3, [r7, #16]
 8002f46:	4293      	cmp	r3, r2
 8002f48:	dbda      	blt.n	8002f00 <int_to_str+0x7c>
	    }
	}
 8002f4a:	bf00      	nop
 8002f4c:	bf00      	nop
 8002f4e:	371c      	adds	r7, #28
 8002f50:	46bd      	mov	sp, r7
 8002f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f56:	4770      	bx	lr
 8002f58:	66666667 	.word	0x66666667

08002f5c <format_date>:

void format_date(int date, int month, int year, char *buffDate) {
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b084      	sub	sp, #16
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	60f8      	str	r0, [r7, #12]
 8002f64:	60b9      	str	r1, [r7, #8]
 8002f66:	607a      	str	r2, [r7, #4]
 8002f68:	603b      	str	r3, [r7, #0]
	    ind = 0;
 8002f6a:	4b33      	ldr	r3, [pc, #204]	@ (8003038 <format_date+0xdc>)
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	601a      	str	r2, [r3, #0]

	    int_to_str(date, buffDate + ind);
 8002f70:	4b31      	ldr	r3, [pc, #196]	@ (8003038 <format_date+0xdc>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	461a      	mov	r2, r3
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	4413      	add	r3, r2
 8002f7a:	4619      	mov	r1, r3
 8002f7c:	68f8      	ldr	r0, [r7, #12]
 8002f7e:	f7ff ff81 	bl	8002e84 <int_to_str>
	    while (buffDate[ind] != '\0') ind++;
 8002f82:	e004      	b.n	8002f8e <format_date+0x32>
 8002f84:	4b2c      	ldr	r3, [pc, #176]	@ (8003038 <format_date+0xdc>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	3301      	adds	r3, #1
 8002f8a:	4a2b      	ldr	r2, [pc, #172]	@ (8003038 <format_date+0xdc>)
 8002f8c:	6013      	str	r3, [r2, #0]
 8002f8e:	4b2a      	ldr	r3, [pc, #168]	@ (8003038 <format_date+0xdc>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	461a      	mov	r2, r3
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	4413      	add	r3, r2
 8002f98:	781b      	ldrb	r3, [r3, #0]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d1f2      	bne.n	8002f84 <format_date+0x28>
	    buffDate[ind++] = ',';
 8002f9e:	4b26      	ldr	r3, [pc, #152]	@ (8003038 <format_date+0xdc>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	1c5a      	adds	r2, r3, #1
 8002fa4:	4924      	ldr	r1, [pc, #144]	@ (8003038 <format_date+0xdc>)
 8002fa6:	600a      	str	r2, [r1, #0]
 8002fa8:	461a      	mov	r2, r3
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	4413      	add	r3, r2
 8002fae:	222c      	movs	r2, #44	@ 0x2c
 8002fb0:	701a      	strb	r2, [r3, #0]

	    int_to_str(month, buffDate + ind);
 8002fb2:	4b21      	ldr	r3, [pc, #132]	@ (8003038 <format_date+0xdc>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	461a      	mov	r2, r3
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	4413      	add	r3, r2
 8002fbc:	4619      	mov	r1, r3
 8002fbe:	68b8      	ldr	r0, [r7, #8]
 8002fc0:	f7ff ff60 	bl	8002e84 <int_to_str>
	    while (buffDate[ind] != '\0') ind++;
 8002fc4:	e004      	b.n	8002fd0 <format_date+0x74>
 8002fc6:	4b1c      	ldr	r3, [pc, #112]	@ (8003038 <format_date+0xdc>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	3301      	adds	r3, #1
 8002fcc:	4a1a      	ldr	r2, [pc, #104]	@ (8003038 <format_date+0xdc>)
 8002fce:	6013      	str	r3, [r2, #0]
 8002fd0:	4b19      	ldr	r3, [pc, #100]	@ (8003038 <format_date+0xdc>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	461a      	mov	r2, r3
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	4413      	add	r3, r2
 8002fda:	781b      	ldrb	r3, [r3, #0]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d1f2      	bne.n	8002fc6 <format_date+0x6a>
	    buffDate[ind++] = ',';
 8002fe0:	4b15      	ldr	r3, [pc, #84]	@ (8003038 <format_date+0xdc>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	1c5a      	adds	r2, r3, #1
 8002fe6:	4914      	ldr	r1, [pc, #80]	@ (8003038 <format_date+0xdc>)
 8002fe8:	600a      	str	r2, [r1, #0]
 8002fea:	461a      	mov	r2, r3
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	4413      	add	r3, r2
 8002ff0:	222c      	movs	r2, #44	@ 0x2c
 8002ff2:	701a      	strb	r2, [r3, #0]

	    buffDate[ind++] = '2';
 8002ff4:	4b10      	ldr	r3, [pc, #64]	@ (8003038 <format_date+0xdc>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	1c5a      	adds	r2, r3, #1
 8002ffa:	490f      	ldr	r1, [pc, #60]	@ (8003038 <format_date+0xdc>)
 8002ffc:	600a      	str	r2, [r1, #0]
 8002ffe:	461a      	mov	r2, r3
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	4413      	add	r3, r2
 8003004:	2232      	movs	r2, #50	@ 0x32
 8003006:	701a      	strb	r2, [r3, #0]
	    buffDate[ind++] = '0';
 8003008:	4b0b      	ldr	r3, [pc, #44]	@ (8003038 <format_date+0xdc>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	1c5a      	adds	r2, r3, #1
 800300e:	490a      	ldr	r1, [pc, #40]	@ (8003038 <format_date+0xdc>)
 8003010:	600a      	str	r2, [r1, #0]
 8003012:	461a      	mov	r2, r3
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	4413      	add	r3, r2
 8003018:	2230      	movs	r2, #48	@ 0x30
 800301a:	701a      	strb	r2, [r3, #0]
	    int_to_str(year, buffDate + ind);
 800301c:	4b06      	ldr	r3, [pc, #24]	@ (8003038 <format_date+0xdc>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	461a      	mov	r2, r3
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	4413      	add	r3, r2
 8003026:	4619      	mov	r1, r3
 8003028:	6878      	ldr	r0, [r7, #4]
 800302a:	f7ff ff2b 	bl	8002e84 <int_to_str>
	}
 800302e:	bf00      	nop
 8003030:	3710      	adds	r7, #16
 8003032:	46bd      	mov	sp, r7
 8003034:	bd80      	pop	{r7, pc}
 8003036:	bf00      	nop
 8003038:	200003fc 	.word	0x200003fc

0800303c <format_vitesse>:

void format_vitesse(int vitesse, char *buffVitesse, int negatif) {
 800303c:	b580      	push	{r7, lr}
 800303e:	b084      	sub	sp, #16
 8003040:	af00      	add	r7, sp, #0
 8003042:	60f8      	str	r0, [r7, #12]
 8003044:	60b9      	str	r1, [r7, #8]
 8003046:	607a      	str	r2, [r7, #4]
	    ind = 0;
 8003048:	4b24      	ldr	r3, [pc, #144]	@ (80030dc <format_vitesse+0xa0>)
 800304a:	2200      	movs	r2, #0
 800304c:	601a      	str	r2, [r3, #0]
	    if(negatif)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d007      	beq.n	8003064 <format_vitesse+0x28>
	    {
		buffVitesse[ind] = '-';
 8003054:	4b21      	ldr	r3, [pc, #132]	@ (80030dc <format_vitesse+0xa0>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	461a      	mov	r2, r3
 800305a:	68bb      	ldr	r3, [r7, #8]
 800305c:	4413      	add	r3, r2
 800305e:	222d      	movs	r2, #45	@ 0x2d
 8003060:	701a      	strb	r2, [r3, #0]
 8003062:	e006      	b.n	8003072 <format_vitesse+0x36>
	    }
	    else
	    {
	    buffVitesse[ind] = '+';
 8003064:	4b1d      	ldr	r3, [pc, #116]	@ (80030dc <format_vitesse+0xa0>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	461a      	mov	r2, r3
 800306a:	68bb      	ldr	r3, [r7, #8]
 800306c:	4413      	add	r3, r2
 800306e:	222b      	movs	r2, #43	@ 0x2b
 8003070:	701a      	strb	r2, [r3, #0]
	    }

	    ind++;
 8003072:	4b1a      	ldr	r3, [pc, #104]	@ (80030dc <format_vitesse+0xa0>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	3301      	adds	r3, #1
 8003078:	4a18      	ldr	r2, [pc, #96]	@ (80030dc <format_vitesse+0xa0>)
 800307a:	6013      	str	r3, [r2, #0]
	    if(vitesse < 100){
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	2b63      	cmp	r3, #99	@ 0x63
 8003080:	dc1a      	bgt.n	80030b8 <format_vitesse+0x7c>
	    	buffVitesse[ind] = 48;
 8003082:	4b16      	ldr	r3, [pc, #88]	@ (80030dc <format_vitesse+0xa0>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	461a      	mov	r2, r3
 8003088:	68bb      	ldr	r3, [r7, #8]
 800308a:	4413      	add	r3, r2
 800308c:	2230      	movs	r2, #48	@ 0x30
 800308e:	701a      	strb	r2, [r3, #0]
	    	ind++;
 8003090:	4b12      	ldr	r3, [pc, #72]	@ (80030dc <format_vitesse+0xa0>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	3301      	adds	r3, #1
 8003096:	4a11      	ldr	r2, [pc, #68]	@ (80030dc <format_vitesse+0xa0>)
 8003098:	6013      	str	r3, [r2, #0]

		    if(vitesse < 10){
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	2b09      	cmp	r3, #9
 800309e:	dc0b      	bgt.n	80030b8 <format_vitesse+0x7c>
		    	buffVitesse[ind] = 48;
 80030a0:	4b0e      	ldr	r3, [pc, #56]	@ (80030dc <format_vitesse+0xa0>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	461a      	mov	r2, r3
 80030a6:	68bb      	ldr	r3, [r7, #8]
 80030a8:	4413      	add	r3, r2
 80030aa:	2230      	movs	r2, #48	@ 0x30
 80030ac:	701a      	strb	r2, [r3, #0]
		    	ind++;
 80030ae:	4b0b      	ldr	r3, [pc, #44]	@ (80030dc <format_vitesse+0xa0>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	3301      	adds	r3, #1
 80030b4:	4a09      	ldr	r2, [pc, #36]	@ (80030dc <format_vitesse+0xa0>)
 80030b6:	6013      	str	r3, [r2, #0]
		    }
	    }

	    int_to_str(vitesse, buffVitesse + ind);
 80030b8:	4b08      	ldr	r3, [pc, #32]	@ (80030dc <format_vitesse+0xa0>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	461a      	mov	r2, r3
 80030be:	68bb      	ldr	r3, [r7, #8]
 80030c0:	4413      	add	r3, r2
 80030c2:	4619      	mov	r1, r3
 80030c4:	68f8      	ldr	r0, [r7, #12]
 80030c6:	f7ff fedd 	bl	8002e84 <int_to_str>
	    buffVitesse[4] = 0;
 80030ca:	68bb      	ldr	r3, [r7, #8]
 80030cc:	3304      	adds	r3, #4
 80030ce:	2200      	movs	r2, #0
 80030d0:	701a      	strb	r2, [r3, #0]

	}
 80030d2:	bf00      	nop
 80030d4:	3710      	adds	r7, #16
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd80      	pop	{r7, pc}
 80030da:	bf00      	nop
 80030dc:	200003fc 	.word	0x200003fc

080030e0 <init_RTC_Time>:

void init_RTC_Time()
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b082      	sub	sp, #8
 80030e4:	af02      	add	r7, sp, #8
	if (HAL_RTC_GetTime(&hrtc, &currentTime, RTC_FORMAT_BIN) == HAL_OK)
 80030e6:	2200      	movs	r2, #0
 80030e8:	4955      	ldr	r1, [pc, #340]	@ (8003240 <init_RTC_Time+0x160>)
 80030ea:	4856      	ldr	r0, [pc, #344]	@ (8003244 <init_RTC_Time+0x164>)
 80030ec:	f003 f9f3 	bl	80064d6 <HAL_RTC_GetTime>
 80030f0:	4603      	mov	r3, r0
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d111      	bne.n	800311a <init_RTC_Time+0x3a>
	{
		HAL_RTC_GetDate(&hrtc, &currentDate, RTC_FORMAT_BIN);
 80030f6:	2200      	movs	r2, #0
 80030f8:	4953      	ldr	r1, [pc, #332]	@ (8003248 <init_RTC_Time+0x168>)
 80030fa:	4852      	ldr	r0, [pc, #328]	@ (8003244 <init_RTC_Time+0x164>)
 80030fc:	f003 facd 	bl	800669a <HAL_RTC_GetDate>
	    hours = currentTime.Hours;
 8003100:	4b4f      	ldr	r3, [pc, #316]	@ (8003240 <init_RTC_Time+0x160>)
 8003102:	781a      	ldrb	r2, [r3, #0]
 8003104:	4b51      	ldr	r3, [pc, #324]	@ (800324c <init_RTC_Time+0x16c>)
 8003106:	701a      	strb	r2, [r3, #0]
	    minutes = currentTime.Minutes;
 8003108:	4b4d      	ldr	r3, [pc, #308]	@ (8003240 <init_RTC_Time+0x160>)
 800310a:	785a      	ldrb	r2, [r3, #1]
 800310c:	4b50      	ldr	r3, [pc, #320]	@ (8003250 <init_RTC_Time+0x170>)
 800310e:	701a      	strb	r2, [r3, #0]
	    seconds = currentTime.Seconds;
 8003110:	4b4b      	ldr	r3, [pc, #300]	@ (8003240 <init_RTC_Time+0x160>)
 8003112:	789a      	ldrb	r2, [r3, #2]
 8003114:	4b4f      	ldr	r3, [pc, #316]	@ (8003254 <init_RTC_Time+0x174>)
 8003116:	701a      	strb	r2, [r3, #0]
 8003118:	e001      	b.n	800311e <init_RTC_Time+0x3e>
	}
	else
	{
		Error_Handler();
 800311a:	f7fe fe7d 	bl	8001e18 <Error_Handler>
	}
		ind = 0;
 800311e:	4b4e      	ldr	r3, [pc, #312]	@ (8003258 <init_RTC_Time+0x178>)
 8003120:	2200      	movs	r2, #0
 8003122:	601a      	str	r2, [r3, #0]

		if(hours/10 == 0){
 8003124:	4b49      	ldr	r3, [pc, #292]	@ (800324c <init_RTC_Time+0x16c>)
 8003126:	781b      	ldrb	r3, [r3, #0]
 8003128:	2b09      	cmp	r3, #9
 800312a:	d809      	bhi.n	8003140 <init_RTC_Time+0x60>
			buffTime[ind] = '0';
 800312c:	4b4a      	ldr	r3, [pc, #296]	@ (8003258 <init_RTC_Time+0x178>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a4a      	ldr	r2, [pc, #296]	@ (800325c <init_RTC_Time+0x17c>)
 8003132:	2130      	movs	r1, #48	@ 0x30
 8003134:	54d1      	strb	r1, [r2, r3]
			ind++;
 8003136:	4b48      	ldr	r3, [pc, #288]	@ (8003258 <init_RTC_Time+0x178>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	3301      	adds	r3, #1
 800313c:	4a46      	ldr	r2, [pc, #280]	@ (8003258 <init_RTC_Time+0x178>)
 800313e:	6013      	str	r3, [r2, #0]
		}

	    int_to_str(hours, buffTime + ind);
 8003140:	4b42      	ldr	r3, [pc, #264]	@ (800324c <init_RTC_Time+0x16c>)
 8003142:	781b      	ldrb	r3, [r3, #0]
 8003144:	4618      	mov	r0, r3
 8003146:	4b44      	ldr	r3, [pc, #272]	@ (8003258 <init_RTC_Time+0x178>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	461a      	mov	r2, r3
 800314c:	4b43      	ldr	r3, [pc, #268]	@ (800325c <init_RTC_Time+0x17c>)
 800314e:	4413      	add	r3, r2
 8003150:	4619      	mov	r1, r3
 8003152:	f7ff fe97 	bl	8002e84 <int_to_str>
	    while (buffTime[ind] != '\0') ind++;
 8003156:	e004      	b.n	8003162 <init_RTC_Time+0x82>
 8003158:	4b3f      	ldr	r3, [pc, #252]	@ (8003258 <init_RTC_Time+0x178>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	3301      	adds	r3, #1
 800315e:	4a3e      	ldr	r2, [pc, #248]	@ (8003258 <init_RTC_Time+0x178>)
 8003160:	6013      	str	r3, [r2, #0]
 8003162:	4b3d      	ldr	r3, [pc, #244]	@ (8003258 <init_RTC_Time+0x178>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4a3d      	ldr	r2, [pc, #244]	@ (800325c <init_RTC_Time+0x17c>)
 8003168:	5cd3      	ldrb	r3, [r2, r3]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d1f4      	bne.n	8003158 <init_RTC_Time+0x78>
	    buffTime[ind++] = 58;
 800316e:	4b3a      	ldr	r3, [pc, #232]	@ (8003258 <init_RTC_Time+0x178>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	1c5a      	adds	r2, r3, #1
 8003174:	4938      	ldr	r1, [pc, #224]	@ (8003258 <init_RTC_Time+0x178>)
 8003176:	600a      	str	r2, [r1, #0]
 8003178:	4a38      	ldr	r2, [pc, #224]	@ (800325c <init_RTC_Time+0x17c>)
 800317a:	213a      	movs	r1, #58	@ 0x3a
 800317c:	54d1      	strb	r1, [r2, r3]

	    if(minutes/10 ==0){
 800317e:	4b34      	ldr	r3, [pc, #208]	@ (8003250 <init_RTC_Time+0x170>)
 8003180:	781b      	ldrb	r3, [r3, #0]
 8003182:	2b09      	cmp	r3, #9
 8003184:	d809      	bhi.n	800319a <init_RTC_Time+0xba>
			buffTime[ind] = '0';
 8003186:	4b34      	ldr	r3, [pc, #208]	@ (8003258 <init_RTC_Time+0x178>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4a34      	ldr	r2, [pc, #208]	@ (800325c <init_RTC_Time+0x17c>)
 800318c:	2130      	movs	r1, #48	@ 0x30
 800318e:	54d1      	strb	r1, [r2, r3]
			ind++;
 8003190:	4b31      	ldr	r3, [pc, #196]	@ (8003258 <init_RTC_Time+0x178>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	3301      	adds	r3, #1
 8003196:	4a30      	ldr	r2, [pc, #192]	@ (8003258 <init_RTC_Time+0x178>)
 8003198:	6013      	str	r3, [r2, #0]
	    	}

	    int_to_str(minutes, buffTime + ind);
 800319a:	4b2d      	ldr	r3, [pc, #180]	@ (8003250 <init_RTC_Time+0x170>)
 800319c:	781b      	ldrb	r3, [r3, #0]
 800319e:	4618      	mov	r0, r3
 80031a0:	4b2d      	ldr	r3, [pc, #180]	@ (8003258 <init_RTC_Time+0x178>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	461a      	mov	r2, r3
 80031a6:	4b2d      	ldr	r3, [pc, #180]	@ (800325c <init_RTC_Time+0x17c>)
 80031a8:	4413      	add	r3, r2
 80031aa:	4619      	mov	r1, r3
 80031ac:	f7ff fe6a 	bl	8002e84 <int_to_str>
	    while (buffTime[ind] != '\0') ind++;
 80031b0:	e004      	b.n	80031bc <init_RTC_Time+0xdc>
 80031b2:	4b29      	ldr	r3, [pc, #164]	@ (8003258 <init_RTC_Time+0x178>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	3301      	adds	r3, #1
 80031b8:	4a27      	ldr	r2, [pc, #156]	@ (8003258 <init_RTC_Time+0x178>)
 80031ba:	6013      	str	r3, [r2, #0]
 80031bc:	4b26      	ldr	r3, [pc, #152]	@ (8003258 <init_RTC_Time+0x178>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a26      	ldr	r2, [pc, #152]	@ (800325c <init_RTC_Time+0x17c>)
 80031c2:	5cd3      	ldrb	r3, [r2, r3]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d1f4      	bne.n	80031b2 <init_RTC_Time+0xd2>
	    buffTime[ind++] = 58;
 80031c8:	4b23      	ldr	r3, [pc, #140]	@ (8003258 <init_RTC_Time+0x178>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	1c5a      	adds	r2, r3, #1
 80031ce:	4922      	ldr	r1, [pc, #136]	@ (8003258 <init_RTC_Time+0x178>)
 80031d0:	600a      	str	r2, [r1, #0]
 80031d2:	4a22      	ldr	r2, [pc, #136]	@ (800325c <init_RTC_Time+0x17c>)
 80031d4:	213a      	movs	r1, #58	@ 0x3a
 80031d6:	54d1      	strb	r1, [r2, r3]

	    if(seconds/10 == 0){
 80031d8:	4b1e      	ldr	r3, [pc, #120]	@ (8003254 <init_RTC_Time+0x174>)
 80031da:	781b      	ldrb	r3, [r3, #0]
 80031dc:	2b09      	cmp	r3, #9
 80031de:	d809      	bhi.n	80031f4 <init_RTC_Time+0x114>
	    	buffTime[ind] = '0';
 80031e0:	4b1d      	ldr	r3, [pc, #116]	@ (8003258 <init_RTC_Time+0x178>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a1d      	ldr	r2, [pc, #116]	@ (800325c <init_RTC_Time+0x17c>)
 80031e6:	2130      	movs	r1, #48	@ 0x30
 80031e8:	54d1      	strb	r1, [r2, r3]
	    	ind++;
 80031ea:	4b1b      	ldr	r3, [pc, #108]	@ (8003258 <init_RTC_Time+0x178>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	3301      	adds	r3, #1
 80031f0:	4a19      	ldr	r2, [pc, #100]	@ (8003258 <init_RTC_Time+0x178>)
 80031f2:	6013      	str	r3, [r2, #0]
	    	}

	    int_to_str(seconds, buffTime + ind);
 80031f4:	4b17      	ldr	r3, [pc, #92]	@ (8003254 <init_RTC_Time+0x174>)
 80031f6:	781b      	ldrb	r3, [r3, #0]
 80031f8:	4618      	mov	r0, r3
 80031fa:	4b17      	ldr	r3, [pc, #92]	@ (8003258 <init_RTC_Time+0x178>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	461a      	mov	r2, r3
 8003200:	4b16      	ldr	r3, [pc, #88]	@ (800325c <init_RTC_Time+0x17c>)
 8003202:	4413      	add	r3, r2
 8003204:	4619      	mov	r1, r3
 8003206:	f7ff fe3d 	bl	8002e84 <int_to_str>

		Paint_DrawString_EN (5, 25, buffTime,        &Font24,    MAGENTA,  WHITE);
 800320a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800320e:	9301      	str	r3, [sp, #4]
 8003210:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 8003214:	9300      	str	r3, [sp, #0]
 8003216:	4b12      	ldr	r3, [pc, #72]	@ (8003260 <init_RTC_Time+0x180>)
 8003218:	4a10      	ldr	r2, [pc, #64]	@ (800325c <init_RTC_Time+0x17c>)
 800321a:	2119      	movs	r1, #25
 800321c:	2005      	movs	r0, #5
 800321e:	f005 fbb9 	bl	8008994 <Paint_DrawString_EN>
		pastHours = hours;
 8003222:	4b0a      	ldr	r3, [pc, #40]	@ (800324c <init_RTC_Time+0x16c>)
 8003224:	781a      	ldrb	r2, [r3, #0]
 8003226:	4b0f      	ldr	r3, [pc, #60]	@ (8003264 <init_RTC_Time+0x184>)
 8003228:	701a      	strb	r2, [r3, #0]
		pastMinutes = minutes;
 800322a:	4b09      	ldr	r3, [pc, #36]	@ (8003250 <init_RTC_Time+0x170>)
 800322c:	781a      	ldrb	r2, [r3, #0]
 800322e:	4b0e      	ldr	r3, [pc, #56]	@ (8003268 <init_RTC_Time+0x188>)
 8003230:	701a      	strb	r2, [r3, #0]
		pastSeconds = seconds;
 8003232:	4b08      	ldr	r3, [pc, #32]	@ (8003254 <init_RTC_Time+0x174>)
 8003234:	781a      	ldrb	r2, [r3, #0]
 8003236:	4b0d      	ldr	r3, [pc, #52]	@ (800326c <init_RTC_Time+0x18c>)
 8003238:	701a      	strb	r2, [r3, #0]

}
 800323a:	bf00      	nop
 800323c:	46bd      	mov	sp, r7
 800323e:	bd80      	pop	{r7, pc}
 8003240:	20000400 	.word	0x20000400
 8003244:	200001b0 	.word	0x200001b0
 8003248:	20000414 	.word	0x20000414
 800324c:	20000418 	.word	0x20000418
 8003250:	2000041a 	.word	0x2000041a
 8003254:	2000041c 	.word	0x2000041c
 8003258:	200003fc 	.word	0x200003fc
 800325c:	200003dc 	.word	0x200003dc
 8003260:	20000048 	.word	0x20000048
 8003264:	20000419 	.word	0x20000419
 8003268:	2000041b 	.word	0x2000041b
 800326c:	2000041d 	.word	0x2000041d

08003270 <refresh_RTC_Time>:

void refresh_RTC_Time(){
 8003270:	b580      	push	{r7, lr}
 8003272:	b082      	sub	sp, #8
 8003274:	af02      	add	r7, sp, #8
	if (HAL_RTC_GetTime(&hrtc, &currentTime, RTC_FORMAT_BIN) == HAL_OK)
 8003276:	2200      	movs	r2, #0
 8003278:	4961      	ldr	r1, [pc, #388]	@ (8003400 <refresh_RTC_Time+0x190>)
 800327a:	4862      	ldr	r0, [pc, #392]	@ (8003404 <refresh_RTC_Time+0x194>)
 800327c:	f003 f92b 	bl	80064d6 <HAL_RTC_GetTime>
 8003280:	4603      	mov	r3, r0
 8003282:	2b00      	cmp	r3, #0
 8003284:	d111      	bne.n	80032aa <refresh_RTC_Time+0x3a>
	{
		HAL_RTC_GetDate(&hrtc, &currentDate, RTC_FORMAT_BIN);
 8003286:	2200      	movs	r2, #0
 8003288:	495f      	ldr	r1, [pc, #380]	@ (8003408 <refresh_RTC_Time+0x198>)
 800328a:	485e      	ldr	r0, [pc, #376]	@ (8003404 <refresh_RTC_Time+0x194>)
 800328c:	f003 fa05 	bl	800669a <HAL_RTC_GetDate>
	    hours = currentTime.Hours;
 8003290:	4b5b      	ldr	r3, [pc, #364]	@ (8003400 <refresh_RTC_Time+0x190>)
 8003292:	781a      	ldrb	r2, [r3, #0]
 8003294:	4b5d      	ldr	r3, [pc, #372]	@ (800340c <refresh_RTC_Time+0x19c>)
 8003296:	701a      	strb	r2, [r3, #0]
	    minutes = currentTime.Minutes;
 8003298:	4b59      	ldr	r3, [pc, #356]	@ (8003400 <refresh_RTC_Time+0x190>)
 800329a:	785a      	ldrb	r2, [r3, #1]
 800329c:	4b5c      	ldr	r3, [pc, #368]	@ (8003410 <refresh_RTC_Time+0x1a0>)
 800329e:	701a      	strb	r2, [r3, #0]
	    seconds = currentTime.Seconds;
 80032a0:	4b57      	ldr	r3, [pc, #348]	@ (8003400 <refresh_RTC_Time+0x190>)
 80032a2:	789a      	ldrb	r2, [r3, #2]
 80032a4:	4b5b      	ldr	r3, [pc, #364]	@ (8003414 <refresh_RTC_Time+0x1a4>)
 80032a6:	701a      	strb	r2, [r3, #0]
 80032a8:	e001      	b.n	80032ae <refresh_RTC_Time+0x3e>
	}
	else
	{
		Error_Handler();
 80032aa:	f7fe fdb5 	bl	8001e18 <Error_Handler>
	}

if(pastSeconds != seconds){
 80032ae:	4b5a      	ldr	r3, [pc, #360]	@ (8003418 <refresh_RTC_Time+0x1a8>)
 80032b0:	781a      	ldrb	r2, [r3, #0]
 80032b2:	4b58      	ldr	r3, [pc, #352]	@ (8003414 <refresh_RTC_Time+0x1a4>)
 80032b4:	781b      	ldrb	r3, [r3, #0]
 80032b6:	429a      	cmp	r2, r3
 80032b8:	d033      	beq.n	8003322 <refresh_RTC_Time+0xb2>
	ind = 0;
 80032ba:	4b58      	ldr	r3, [pc, #352]	@ (800341c <refresh_RTC_Time+0x1ac>)
 80032bc:	2200      	movs	r2, #0
 80032be:	601a      	str	r2, [r3, #0]
    if(seconds/10 == 0){
 80032c0:	4b54      	ldr	r3, [pc, #336]	@ (8003414 <refresh_RTC_Time+0x1a4>)
 80032c2:	781b      	ldrb	r3, [r3, #0]
 80032c4:	2b09      	cmp	r3, #9
 80032c6:	d809      	bhi.n	80032dc <refresh_RTC_Time+0x6c>
    	buffTimeRefresh[ind] = '0';
 80032c8:	4b54      	ldr	r3, [pc, #336]	@ (800341c <refresh_RTC_Time+0x1ac>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a54      	ldr	r2, [pc, #336]	@ (8003420 <refresh_RTC_Time+0x1b0>)
 80032ce:	2130      	movs	r1, #48	@ 0x30
 80032d0:	54d1      	strb	r1, [r2, r3]
    	ind++;
 80032d2:	4b52      	ldr	r3, [pc, #328]	@ (800341c <refresh_RTC_Time+0x1ac>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	3301      	adds	r3, #1
 80032d8:	4a50      	ldr	r2, [pc, #320]	@ (800341c <refresh_RTC_Time+0x1ac>)
 80032da:	6013      	str	r3, [r2, #0]
    	}
    int_to_str(seconds, buffTimeRefresh + ind);
 80032dc:	4b4d      	ldr	r3, [pc, #308]	@ (8003414 <refresh_RTC_Time+0x1a4>)
 80032de:	781b      	ldrb	r3, [r3, #0]
 80032e0:	4618      	mov	r0, r3
 80032e2:	4b4e      	ldr	r3, [pc, #312]	@ (800341c <refresh_RTC_Time+0x1ac>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	461a      	mov	r2, r3
 80032e8:	4b4d      	ldr	r3, [pc, #308]	@ (8003420 <refresh_RTC_Time+0x1b0>)
 80032ea:	4413      	add	r3, r2
 80032ec:	4619      	mov	r1, r3
 80032ee:	f7ff fdc9 	bl	8002e84 <int_to_str>
    Paint_DrawString_EN ((5 + 6 * largeurFont24), 25, buffTimeRefresh,        &Font24,    MAGENTA,  WHITE);
 80032f2:	4b4c      	ldr	r3, [pc, #304]	@ (8003424 <refresh_RTC_Time+0x1b4>)
 80032f4:	781b      	ldrb	r3, [r3, #0]
 80032f6:	461a      	mov	r2, r3
 80032f8:	0052      	lsls	r2, r2, #1
 80032fa:	4413      	add	r3, r2
 80032fc:	005b      	lsls	r3, r3, #1
 80032fe:	b29b      	uxth	r3, r3
 8003300:	3305      	adds	r3, #5
 8003302:	b298      	uxth	r0, r3
 8003304:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003308:	9301      	str	r3, [sp, #4]
 800330a:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 800330e:	9300      	str	r3, [sp, #0]
 8003310:	4b45      	ldr	r3, [pc, #276]	@ (8003428 <refresh_RTC_Time+0x1b8>)
 8003312:	4a43      	ldr	r2, [pc, #268]	@ (8003420 <refresh_RTC_Time+0x1b0>)
 8003314:	2119      	movs	r1, #25
 8003316:	f005 fb3d 	bl	8008994 <Paint_DrawString_EN>
	pastSeconds = seconds;
 800331a:	4b3e      	ldr	r3, [pc, #248]	@ (8003414 <refresh_RTC_Time+0x1a4>)
 800331c:	781a      	ldrb	r2, [r3, #0]
 800331e:	4b3e      	ldr	r3, [pc, #248]	@ (8003418 <refresh_RTC_Time+0x1a8>)
 8003320:	701a      	strb	r2, [r3, #0]
}

if(pastMinutes != minutes){
 8003322:	4b42      	ldr	r3, [pc, #264]	@ (800342c <refresh_RTC_Time+0x1bc>)
 8003324:	781a      	ldrb	r2, [r3, #0]
 8003326:	4b3a      	ldr	r3, [pc, #232]	@ (8003410 <refresh_RTC_Time+0x1a0>)
 8003328:	781b      	ldrb	r3, [r3, #0]
 800332a:	429a      	cmp	r2, r3
 800332c:	d032      	beq.n	8003394 <refresh_RTC_Time+0x124>
	ind = 0;
 800332e:	4b3b      	ldr	r3, [pc, #236]	@ (800341c <refresh_RTC_Time+0x1ac>)
 8003330:	2200      	movs	r2, #0
 8003332:	601a      	str	r2, [r3, #0]
    if(minutes/10 == 0){
 8003334:	4b36      	ldr	r3, [pc, #216]	@ (8003410 <refresh_RTC_Time+0x1a0>)
 8003336:	781b      	ldrb	r3, [r3, #0]
 8003338:	2b09      	cmp	r3, #9
 800333a:	d809      	bhi.n	8003350 <refresh_RTC_Time+0xe0>
    	buffTimeRefresh[ind] = '0';
 800333c:	4b37      	ldr	r3, [pc, #220]	@ (800341c <refresh_RTC_Time+0x1ac>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a37      	ldr	r2, [pc, #220]	@ (8003420 <refresh_RTC_Time+0x1b0>)
 8003342:	2130      	movs	r1, #48	@ 0x30
 8003344:	54d1      	strb	r1, [r2, r3]
    	ind++;
 8003346:	4b35      	ldr	r3, [pc, #212]	@ (800341c <refresh_RTC_Time+0x1ac>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	3301      	adds	r3, #1
 800334c:	4a33      	ldr	r2, [pc, #204]	@ (800341c <refresh_RTC_Time+0x1ac>)
 800334e:	6013      	str	r3, [r2, #0]
    	}
    int_to_str(minutes, buffTimeRefresh + ind);
 8003350:	4b2f      	ldr	r3, [pc, #188]	@ (8003410 <refresh_RTC_Time+0x1a0>)
 8003352:	781b      	ldrb	r3, [r3, #0]
 8003354:	4618      	mov	r0, r3
 8003356:	4b31      	ldr	r3, [pc, #196]	@ (800341c <refresh_RTC_Time+0x1ac>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	461a      	mov	r2, r3
 800335c:	4b30      	ldr	r3, [pc, #192]	@ (8003420 <refresh_RTC_Time+0x1b0>)
 800335e:	4413      	add	r3, r2
 8003360:	4619      	mov	r1, r3
 8003362:	f7ff fd8f 	bl	8002e84 <int_to_str>
    Paint_DrawString_EN ((5 + 3 * largeurFont24), 25, buffTimeRefresh,        &Font24,    MAGENTA,  WHITE);
 8003366:	4b2f      	ldr	r3, [pc, #188]	@ (8003424 <refresh_RTC_Time+0x1b4>)
 8003368:	781b      	ldrb	r3, [r3, #0]
 800336a:	461a      	mov	r2, r3
 800336c:	0052      	lsls	r2, r2, #1
 800336e:	4413      	add	r3, r2
 8003370:	b29b      	uxth	r3, r3
 8003372:	3305      	adds	r3, #5
 8003374:	b298      	uxth	r0, r3
 8003376:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800337a:	9301      	str	r3, [sp, #4]
 800337c:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 8003380:	9300      	str	r3, [sp, #0]
 8003382:	4b29      	ldr	r3, [pc, #164]	@ (8003428 <refresh_RTC_Time+0x1b8>)
 8003384:	4a26      	ldr	r2, [pc, #152]	@ (8003420 <refresh_RTC_Time+0x1b0>)
 8003386:	2119      	movs	r1, #25
 8003388:	f005 fb04 	bl	8008994 <Paint_DrawString_EN>
	pastMinutes = minutes;
 800338c:	4b20      	ldr	r3, [pc, #128]	@ (8003410 <refresh_RTC_Time+0x1a0>)
 800338e:	781a      	ldrb	r2, [r3, #0]
 8003390:	4b26      	ldr	r3, [pc, #152]	@ (800342c <refresh_RTC_Time+0x1bc>)
 8003392:	701a      	strb	r2, [r3, #0]
}

if(pastHours != hours){
 8003394:	4b26      	ldr	r3, [pc, #152]	@ (8003430 <refresh_RTC_Time+0x1c0>)
 8003396:	781a      	ldrb	r2, [r3, #0]
 8003398:	4b1c      	ldr	r3, [pc, #112]	@ (800340c <refresh_RTC_Time+0x19c>)
 800339a:	781b      	ldrb	r3, [r3, #0]
 800339c:	429a      	cmp	r2, r3
 800339e:	d02b      	beq.n	80033f8 <refresh_RTC_Time+0x188>
	ind = 0;
 80033a0:	4b1e      	ldr	r3, [pc, #120]	@ (800341c <refresh_RTC_Time+0x1ac>)
 80033a2:	2200      	movs	r2, #0
 80033a4:	601a      	str	r2, [r3, #0]
    if(hours/10 == 0){
 80033a6:	4b19      	ldr	r3, [pc, #100]	@ (800340c <refresh_RTC_Time+0x19c>)
 80033a8:	781b      	ldrb	r3, [r3, #0]
 80033aa:	2b09      	cmp	r3, #9
 80033ac:	d809      	bhi.n	80033c2 <refresh_RTC_Time+0x152>
    	buffTimeRefresh[ind] = '0';
 80033ae:	4b1b      	ldr	r3, [pc, #108]	@ (800341c <refresh_RTC_Time+0x1ac>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4a1b      	ldr	r2, [pc, #108]	@ (8003420 <refresh_RTC_Time+0x1b0>)
 80033b4:	2130      	movs	r1, #48	@ 0x30
 80033b6:	54d1      	strb	r1, [r2, r3]
    	ind++;
 80033b8:	4b18      	ldr	r3, [pc, #96]	@ (800341c <refresh_RTC_Time+0x1ac>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	3301      	adds	r3, #1
 80033be:	4a17      	ldr	r2, [pc, #92]	@ (800341c <refresh_RTC_Time+0x1ac>)
 80033c0:	6013      	str	r3, [r2, #0]
    	}
    int_to_str(hours, buffTimeRefresh + ind);
 80033c2:	4b12      	ldr	r3, [pc, #72]	@ (800340c <refresh_RTC_Time+0x19c>)
 80033c4:	781b      	ldrb	r3, [r3, #0]
 80033c6:	4618      	mov	r0, r3
 80033c8:	4b14      	ldr	r3, [pc, #80]	@ (800341c <refresh_RTC_Time+0x1ac>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	461a      	mov	r2, r3
 80033ce:	4b14      	ldr	r3, [pc, #80]	@ (8003420 <refresh_RTC_Time+0x1b0>)
 80033d0:	4413      	add	r3, r2
 80033d2:	4619      	mov	r1, r3
 80033d4:	f7ff fd56 	bl	8002e84 <int_to_str>
    Paint_DrawString_EN (5, 25, buffTimeRefresh,        &Font24,    MAGENTA,  WHITE);
 80033d8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80033dc:	9301      	str	r3, [sp, #4]
 80033de:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 80033e2:	9300      	str	r3, [sp, #0]
 80033e4:	4b10      	ldr	r3, [pc, #64]	@ (8003428 <refresh_RTC_Time+0x1b8>)
 80033e6:	4a0e      	ldr	r2, [pc, #56]	@ (8003420 <refresh_RTC_Time+0x1b0>)
 80033e8:	2119      	movs	r1, #25
 80033ea:	2005      	movs	r0, #5
 80033ec:	f005 fad2 	bl	8008994 <Paint_DrawString_EN>
	pastHours = hours;
 80033f0:	4b06      	ldr	r3, [pc, #24]	@ (800340c <refresh_RTC_Time+0x19c>)
 80033f2:	781a      	ldrb	r2, [r3, #0]
 80033f4:	4b0e      	ldr	r3, [pc, #56]	@ (8003430 <refresh_RTC_Time+0x1c0>)
 80033f6:	701a      	strb	r2, [r3, #0]





}
 80033f8:	bf00      	nop
 80033fa:	46bd      	mov	sp, r7
 80033fc:	bd80      	pop	{r7, pc}
 80033fe:	bf00      	nop
 8003400:	20000400 	.word	0x20000400
 8003404:	200001b0 	.word	0x200001b0
 8003408:	20000414 	.word	0x20000414
 800340c:	20000418 	.word	0x20000418
 8003410:	2000041a 	.word	0x2000041a
 8003414:	2000041c 	.word	0x2000041c
 8003418:	2000041d 	.word	0x2000041d
 800341c:	200003fc 	.word	0x200003fc
 8003420:	200003e8 	.word	0x200003e8
 8003424:	2000002c 	.word	0x2000002c
 8003428:	20000048 	.word	0x20000048
 800342c:	2000041b 	.word	0x2000041b
 8003430:	20000419 	.word	0x20000419

08003434 <affich_RTC_Date>:

void affich_RTC_Date()
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b088      	sub	sp, #32
 8003438:	af02      	add	r7, sp, #8
	uint8_t year = 0;
 800343a:	2300      	movs	r3, #0
 800343c:	75fb      	strb	r3, [r7, #23]
	uint8_t month = 0;
 800343e:	2300      	movs	r3, #0
 8003440:	75bb      	strb	r3, [r7, #22]
	uint8_t date = 0;
 8003442:	2300      	movs	r3, #0
 8003444:	757b      	strb	r3, [r7, #21]
	uint8_t weekday = 0;
 8003446:	2300      	movs	r3, #0
 8003448:	753b      	strb	r3, [r7, #20]

	if (HAL_RTC_GetDate(&hrtc, &currentDate, RTC_FORMAT_BIN) == HAL_OK)
 800344a:	2200      	movs	r2, #0
 800344c:	4954      	ldr	r1, [pc, #336]	@ (80035a0 <affich_RTC_Date+0x16c>)
 800344e:	4855      	ldr	r0, [pc, #340]	@ (80035a4 <affich_RTC_Date+0x170>)
 8003450:	f003 f923 	bl	800669a <HAL_RTC_GetDate>
 8003454:	4603      	mov	r3, r0
 8003456:	2b00      	cmp	r3, #0
 8003458:	d10c      	bne.n	8003474 <affich_RTC_Date+0x40>
	{
	    year = currentDate.Year;
 800345a:	4b51      	ldr	r3, [pc, #324]	@ (80035a0 <affich_RTC_Date+0x16c>)
 800345c:	78db      	ldrb	r3, [r3, #3]
 800345e:	75fb      	strb	r3, [r7, #23]
	    month = currentDate.Month;
 8003460:	4b4f      	ldr	r3, [pc, #316]	@ (80035a0 <affich_RTC_Date+0x16c>)
 8003462:	785b      	ldrb	r3, [r3, #1]
 8003464:	75bb      	strb	r3, [r7, #22]
	    date = currentDate.Date;
 8003466:	4b4e      	ldr	r3, [pc, #312]	@ (80035a0 <affich_RTC_Date+0x16c>)
 8003468:	789b      	ldrb	r3, [r3, #2]
 800346a:	757b      	strb	r3, [r7, #21]
	    weekday = currentDate.WeekDay;
 800346c:	4b4c      	ldr	r3, [pc, #304]	@ (80035a0 <affich_RTC_Date+0x16c>)
 800346e:	781b      	ldrb	r3, [r3, #0]
 8003470:	753b      	strb	r3, [r7, #20]
 8003472:	e001      	b.n	8003478 <affich_RTC_Date+0x44>
	}
	else
	{
		Error_Handler();
 8003474:	f7fe fcd0 	bl	8001e18 <Error_Handler>
	}


	switch(weekday)
 8003478:	7d3b      	ldrb	r3, [r7, #20]
 800347a:	3b01      	subs	r3, #1
 800347c:	2b06      	cmp	r3, #6
 800347e:	d86c      	bhi.n	800355a <affich_RTC_Date+0x126>
 8003480:	a201      	add	r2, pc, #4	@ (adr r2, 8003488 <affich_RTC_Date+0x54>)
 8003482:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003486:	bf00      	nop
 8003488:	080034a5 	.word	0x080034a5
 800348c:	080034bf 	.word	0x080034bf
 8003490:	080034d9 	.word	0x080034d9
 8003494:	080034f3 	.word	0x080034f3
 8003498:	0800350d 	.word	0x0800350d
 800349c:	08003527 	.word	0x08003527
 80034a0:	08003541 	.word	0x08003541
	{
			case 1:
				Paint_DrawString_EN (5, 1, "Lundi le ",        &Font24,    MAGENTA,  WHITE);
 80034a4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80034a8:	9301      	str	r3, [sp, #4]
 80034aa:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 80034ae:	9300      	str	r3, [sp, #0]
 80034b0:	4b3d      	ldr	r3, [pc, #244]	@ (80035a8 <affich_RTC_Date+0x174>)
 80034b2:	4a3e      	ldr	r2, [pc, #248]	@ (80035ac <affich_RTC_Date+0x178>)
 80034b4:	2101      	movs	r1, #1
 80034b6:	2005      	movs	r0, #5
 80034b8:	f005 fa6c 	bl	8008994 <Paint_DrawString_EN>
	            break;
 80034bc:	e05a      	b.n	8003574 <affich_RTC_Date+0x140>
	        case 2:
				Paint_DrawString_EN (5, 1, "Mardi le ",        &Font24,    MAGENTA,  WHITE);
 80034be:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80034c2:	9301      	str	r3, [sp, #4]
 80034c4:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 80034c8:	9300      	str	r3, [sp, #0]
 80034ca:	4b37      	ldr	r3, [pc, #220]	@ (80035a8 <affich_RTC_Date+0x174>)
 80034cc:	4a38      	ldr	r2, [pc, #224]	@ (80035b0 <affich_RTC_Date+0x17c>)
 80034ce:	2101      	movs	r1, #1
 80034d0:	2005      	movs	r0, #5
 80034d2:	f005 fa5f 	bl	8008994 <Paint_DrawString_EN>
	            break;
 80034d6:	e04d      	b.n	8003574 <affich_RTC_Date+0x140>
	        case 3:
				Paint_DrawString_EN (5, 1, "Mercredi le ",        &Font24,    MAGENTA,  WHITE);
 80034d8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80034dc:	9301      	str	r3, [sp, #4]
 80034de:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 80034e2:	9300      	str	r3, [sp, #0]
 80034e4:	4b30      	ldr	r3, [pc, #192]	@ (80035a8 <affich_RTC_Date+0x174>)
 80034e6:	4a33      	ldr	r2, [pc, #204]	@ (80035b4 <affich_RTC_Date+0x180>)
 80034e8:	2101      	movs	r1, #1
 80034ea:	2005      	movs	r0, #5
 80034ec:	f005 fa52 	bl	8008994 <Paint_DrawString_EN>
	            break;
 80034f0:	e040      	b.n	8003574 <affich_RTC_Date+0x140>
	        case 4:
	        	Paint_DrawString_EN (5, 1, "Jeudi le ",        &Font24,    MAGENTA,  WHITE);
 80034f2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80034f6:	9301      	str	r3, [sp, #4]
 80034f8:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 80034fc:	9300      	str	r3, [sp, #0]
 80034fe:	4b2a      	ldr	r3, [pc, #168]	@ (80035a8 <affich_RTC_Date+0x174>)
 8003500:	4a2d      	ldr	r2, [pc, #180]	@ (80035b8 <affich_RTC_Date+0x184>)
 8003502:	2101      	movs	r1, #1
 8003504:	2005      	movs	r0, #5
 8003506:	f005 fa45 	bl	8008994 <Paint_DrawString_EN>
	            break;
 800350a:	e033      	b.n	8003574 <affich_RTC_Date+0x140>
	        case 5:
	        	Paint_DrawString_EN (5, 1, "Vendredi le ",        &Font24,    MAGENTA,  WHITE);
 800350c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003510:	9301      	str	r3, [sp, #4]
 8003512:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 8003516:	9300      	str	r3, [sp, #0]
 8003518:	4b23      	ldr	r3, [pc, #140]	@ (80035a8 <affich_RTC_Date+0x174>)
 800351a:	4a28      	ldr	r2, [pc, #160]	@ (80035bc <affich_RTC_Date+0x188>)
 800351c:	2101      	movs	r1, #1
 800351e:	2005      	movs	r0, #5
 8003520:	f005 fa38 	bl	8008994 <Paint_DrawString_EN>
	            break;
 8003524:	e026      	b.n	8003574 <affich_RTC_Date+0x140>
	        case 6:
	        	Paint_DrawString_EN (5, 1, "Samedi le ",        &Font24,    MAGENTA,  WHITE);
 8003526:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800352a:	9301      	str	r3, [sp, #4]
 800352c:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 8003530:	9300      	str	r3, [sp, #0]
 8003532:	4b1d      	ldr	r3, [pc, #116]	@ (80035a8 <affich_RTC_Date+0x174>)
 8003534:	4a22      	ldr	r2, [pc, #136]	@ (80035c0 <affich_RTC_Date+0x18c>)
 8003536:	2101      	movs	r1, #1
 8003538:	2005      	movs	r0, #5
 800353a:	f005 fa2b 	bl	8008994 <Paint_DrawString_EN>
	            break;
 800353e:	e019      	b.n	8003574 <affich_RTC_Date+0x140>
	        case RTC_WEEKDAY_SUNDAY:
	        	Paint_DrawString_EN (5, 1, "Dimanche le ",        &Font24,    MAGENTA,  WHITE);
 8003540:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003544:	9301      	str	r3, [sp, #4]
 8003546:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 800354a:	9300      	str	r3, [sp, #0]
 800354c:	4b16      	ldr	r3, [pc, #88]	@ (80035a8 <affich_RTC_Date+0x174>)
 800354e:	4a1d      	ldr	r2, [pc, #116]	@ (80035c4 <affich_RTC_Date+0x190>)
 8003550:	2101      	movs	r1, #1
 8003552:	2005      	movs	r0, #5
 8003554:	f005 fa1e 	bl	8008994 <Paint_DrawString_EN>
	            break;
 8003558:	e00c      	b.n	8003574 <affich_RTC_Date+0x140>
	        default:
	        	Paint_DrawString_EN (5, 1, "Journee ",        &Font24,    MAGENTA,  WHITE);
 800355a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800355e:	9301      	str	r3, [sp, #4]
 8003560:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 8003564:	9300      	str	r3, [sp, #0]
 8003566:	4b10      	ldr	r3, [pc, #64]	@ (80035a8 <affich_RTC_Date+0x174>)
 8003568:	4a17      	ldr	r2, [pc, #92]	@ (80035c8 <affich_RTC_Date+0x194>)
 800356a:	2101      	movs	r1, #1
 800356c:	2005      	movs	r0, #5
 800356e:	f005 fa11 	bl	8008994 <Paint_DrawString_EN>
	            break;
 8003572:	bf00      	nop
	}

	char buffDate[15];
	format_date(date, month, year, buffDate);;
 8003574:	7d78      	ldrb	r0, [r7, #21]
 8003576:	7db9      	ldrb	r1, [r7, #22]
 8003578:	7dfa      	ldrb	r2, [r7, #23]
 800357a:	1d3b      	adds	r3, r7, #4
 800357c:	f7ff fcee 	bl	8002f5c <format_date>


	Paint_DrawString_EN (210, 6, buffDate,        &Font16,    MAGENTA,  WHITE);
 8003580:	1d3a      	adds	r2, r7, #4
 8003582:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003586:	9301      	str	r3, [sp, #4]
 8003588:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 800358c:	9300      	str	r3, [sp, #0]
 800358e:	4b0f      	ldr	r3, [pc, #60]	@ (80035cc <affich_RTC_Date+0x198>)
 8003590:	2106      	movs	r1, #6
 8003592:	20d2      	movs	r0, #210	@ 0xd2
 8003594:	f005 f9fe 	bl	8008994 <Paint_DrawString_EN>

}
 8003598:	bf00      	nop
 800359a:	3718      	adds	r7, #24
 800359c:	46bd      	mov	sp, r7
 800359e:	bd80      	pop	{r7, pc}
 80035a0:	20000414 	.word	0x20000414
 80035a4:	200001b0 	.word	0x200001b0
 80035a8:	20000048 	.word	0x20000048
 80035ac:	08009e64 	.word	0x08009e64
 80035b0:	08009e70 	.word	0x08009e70
 80035b4:	08009e7c 	.word	0x08009e7c
 80035b8:	08009e8c 	.word	0x08009e8c
 80035bc:	08009e98 	.word	0x08009e98
 80035c0:	08009ea8 	.word	0x08009ea8
 80035c4:	08009eb4 	.word	0x08009eb4
 80035c8:	08009ec4 	.word	0x08009ec4
 80035cc:	20000038 	.word	0x20000038

080035d0 <LCD_Manuel>:


void LCD_Manuel(int a)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b084      	sub	sp, #16
 80035d4:	af02      	add	r7, sp, #8
 80035d6:	6078      	str	r0, [r7, #4]
	if (a == 1){
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2b01      	cmp	r3, #1
 80035dc:	d10c      	bne.n	80035f8 <LCD_Manuel+0x28>
	Paint_DrawString_EN (120, 75, "1",        &Font24,    MAGENTA,  WHITE);
 80035de:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80035e2:	9301      	str	r3, [sp, #4]
 80035e4:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 80035e8:	9300      	str	r3, [sp, #0]
 80035ea:	4b1b      	ldr	r3, [pc, #108]	@ (8003658 <LCD_Manuel+0x88>)
 80035ec:	4a1b      	ldr	r2, [pc, #108]	@ (800365c <LCD_Manuel+0x8c>)
 80035ee:	214b      	movs	r1, #75	@ 0x4b
 80035f0:	2078      	movs	r0, #120	@ 0x78
 80035f2:	f005 f9cf 	bl	8008994 <Paint_DrawString_EN>
	Paint_DrawString_EN (120, 75, "3",        &Font24,    MAGENTA,  WHITE);
	}
	else{
	Paint_DrawString_EN (120, 75, "   ",        &Font24,    MAGENTA,  WHITE);
	}
}
 80035f6:	e02b      	b.n	8003650 <LCD_Manuel+0x80>
	else if (a == 2){
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2b02      	cmp	r3, #2
 80035fc:	d10c      	bne.n	8003618 <LCD_Manuel+0x48>
	Paint_DrawString_EN (120, 75, "2",        &Font24,    MAGENTA,  WHITE);
 80035fe:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003602:	9301      	str	r3, [sp, #4]
 8003604:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 8003608:	9300      	str	r3, [sp, #0]
 800360a:	4b13      	ldr	r3, [pc, #76]	@ (8003658 <LCD_Manuel+0x88>)
 800360c:	4a14      	ldr	r2, [pc, #80]	@ (8003660 <LCD_Manuel+0x90>)
 800360e:	214b      	movs	r1, #75	@ 0x4b
 8003610:	2078      	movs	r0, #120	@ 0x78
 8003612:	f005 f9bf 	bl	8008994 <Paint_DrawString_EN>
}
 8003616:	e01b      	b.n	8003650 <LCD_Manuel+0x80>
	else if (a==3){
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2b03      	cmp	r3, #3
 800361c:	d10c      	bne.n	8003638 <LCD_Manuel+0x68>
	Paint_DrawString_EN (120, 75, "3",        &Font24,    MAGENTA,  WHITE);
 800361e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003622:	9301      	str	r3, [sp, #4]
 8003624:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 8003628:	9300      	str	r3, [sp, #0]
 800362a:	4b0b      	ldr	r3, [pc, #44]	@ (8003658 <LCD_Manuel+0x88>)
 800362c:	4a0d      	ldr	r2, [pc, #52]	@ (8003664 <LCD_Manuel+0x94>)
 800362e:	214b      	movs	r1, #75	@ 0x4b
 8003630:	2078      	movs	r0, #120	@ 0x78
 8003632:	f005 f9af 	bl	8008994 <Paint_DrawString_EN>
}
 8003636:	e00b      	b.n	8003650 <LCD_Manuel+0x80>
	Paint_DrawString_EN (120, 75, "   ",        &Font24,    MAGENTA,  WHITE);
 8003638:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800363c:	9301      	str	r3, [sp, #4]
 800363e:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 8003642:	9300      	str	r3, [sp, #0]
 8003644:	4b04      	ldr	r3, [pc, #16]	@ (8003658 <LCD_Manuel+0x88>)
 8003646:	4a08      	ldr	r2, [pc, #32]	@ (8003668 <LCD_Manuel+0x98>)
 8003648:	214b      	movs	r1, #75	@ 0x4b
 800364a:	2078      	movs	r0, #120	@ 0x78
 800364c:	f005 f9a2 	bl	8008994 <Paint_DrawString_EN>
}
 8003650:	bf00      	nop
 8003652:	3708      	adds	r7, #8
 8003654:	46bd      	mov	sp, r7
 8003656:	bd80      	pop	{r7, pc}
 8003658:	20000048 	.word	0x20000048
 800365c:	08009ed0 	.word	0x08009ed0
 8003660:	08009ed4 	.word	0x08009ed4
 8003664:	08009ed8 	.word	0x08009ed8
 8003668:	08009edc 	.word	0x08009edc

0800366c <LCD_Mode>:

void LCD_Mode()
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b086      	sub	sp, #24
 8003670:	af02      	add	r7, sp, #8
	char charMode[12];
	strcpy(charMode, Get_Mode_String());
 8003672:	f7fd fc15 	bl	8000ea0 <Get_Mode_String>
 8003676:	4602      	mov	r2, r0
 8003678:	1d3b      	adds	r3, r7, #4
 800367a:	4611      	mov	r1, r2
 800367c:	4618      	mov	r0, r3
 800367e:	f005 ff7e 	bl	800957e <strcpy>
	Paint_DrawString_EN (5, 75, charMode,        &Font24,    MAGENTA,  WHITE);
 8003682:	1d3a      	adds	r2, r7, #4
 8003684:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003688:	9301      	str	r3, [sp, #4]
 800368a:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 800368e:	9300      	str	r3, [sp, #0]
 8003690:	4b04      	ldr	r3, [pc, #16]	@ (80036a4 <LCD_Mode+0x38>)
 8003692:	214b      	movs	r1, #75	@ 0x4b
 8003694:	2005      	movs	r0, #5
 8003696:	f005 f97d 	bl	8008994 <Paint_DrawString_EN>
}
 800369a:	bf00      	nop
 800369c:	3710      	adds	r7, #16
 800369e:	46bd      	mov	sp, r7
 80036a0:	bd80      	pop	{r7, pc}
 80036a2:	bf00      	nop
 80036a4:	20000048 	.word	0x20000048

080036a8 <LCD_Vitesse>:

void LCD_Vitesse(int encod_D, int encod_G)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b084      	sub	sp, #16
 80036ac:	af02      	add	r7, sp, #8
 80036ae:	6078      	str	r0, [r7, #4]
 80036b0:	6039      	str	r1, [r7, #0]


	if(encod_G == 0)
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d108      	bne.n	80036ca <LCD_Vitesse+0x22>
	{
		format_vitesse(vitesseG, buffVG, 0);
 80036b8:	4b20      	ldr	r3, [pc, #128]	@ (800373c <LCD_Vitesse+0x94>)
 80036ba:	881b      	ldrh	r3, [r3, #0]
 80036bc:	b29b      	uxth	r3, r3
 80036be:	2200      	movs	r2, #0
 80036c0:	491f      	ldr	r1, [pc, #124]	@ (8003740 <LCD_Vitesse+0x98>)
 80036c2:	4618      	mov	r0, r3
 80036c4:	f7ff fcba 	bl	800303c <format_vitesse>
 80036c8:	e007      	b.n	80036da <LCD_Vitesse+0x32>
	}
	else
	{
		format_vitesse(vitesseG, buffVG, 1);
 80036ca:	4b1c      	ldr	r3, [pc, #112]	@ (800373c <LCD_Vitesse+0x94>)
 80036cc:	881b      	ldrh	r3, [r3, #0]
 80036ce:	b29b      	uxth	r3, r3
 80036d0:	2201      	movs	r2, #1
 80036d2:	491b      	ldr	r1, [pc, #108]	@ (8003740 <LCD_Vitesse+0x98>)
 80036d4:	4618      	mov	r0, r3
 80036d6:	f7ff fcb1 	bl	800303c <format_vitesse>
	}

	if(encod_D == 0)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d108      	bne.n	80036f2 <LCD_Vitesse+0x4a>
	{
		format_vitesse(vitesseD, buffVD, 0);
 80036e0:	4b18      	ldr	r3, [pc, #96]	@ (8003744 <LCD_Vitesse+0x9c>)
 80036e2:	881b      	ldrh	r3, [r3, #0]
 80036e4:	b29b      	uxth	r3, r3
 80036e6:	2200      	movs	r2, #0
 80036e8:	4917      	ldr	r1, [pc, #92]	@ (8003748 <LCD_Vitesse+0xa0>)
 80036ea:	4618      	mov	r0, r3
 80036ec:	f7ff fca6 	bl	800303c <format_vitesse>
 80036f0:	e007      	b.n	8003702 <LCD_Vitesse+0x5a>
	}
	else
	{
		format_vitesse(vitesseD, buffVD, 1);
 80036f2:	4b14      	ldr	r3, [pc, #80]	@ (8003744 <LCD_Vitesse+0x9c>)
 80036f4:	881b      	ldrh	r3, [r3, #0]
 80036f6:	b29b      	uxth	r3, r3
 80036f8:	2201      	movs	r2, #1
 80036fa:	4913      	ldr	r1, [pc, #76]	@ (8003748 <LCD_Vitesse+0xa0>)
 80036fc:	4618      	mov	r0, r3
 80036fe:	f7ff fc9d 	bl	800303c <format_vitesse>
	}

	Paint_DrawString_EN (180, 105, buffVD,        &Font16,    MAGENTA,  WHITE);
 8003702:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003706:	9301      	str	r3, [sp, #4]
 8003708:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 800370c:	9300      	str	r3, [sp, #0]
 800370e:	4b0f      	ldr	r3, [pc, #60]	@ (800374c <LCD_Vitesse+0xa4>)
 8003710:	4a0d      	ldr	r2, [pc, #52]	@ (8003748 <LCD_Vitesse+0xa0>)
 8003712:	2169      	movs	r1, #105	@ 0x69
 8003714:	20b4      	movs	r0, #180	@ 0xb4
 8003716:	f005 f93d 	bl	8008994 <Paint_DrawString_EN>
	Paint_DrawString_EN (180, 130, buffVG,        &Font16,    MAGENTA,  WHITE);
 800371a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800371e:	9301      	str	r3, [sp, #4]
 8003720:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 8003724:	9300      	str	r3, [sp, #0]
 8003726:	4b09      	ldr	r3, [pc, #36]	@ (800374c <LCD_Vitesse+0xa4>)
 8003728:	4a05      	ldr	r2, [pc, #20]	@ (8003740 <LCD_Vitesse+0x98>)
 800372a:	2182      	movs	r1, #130	@ 0x82
 800372c:	20b4      	movs	r0, #180	@ 0xb4
 800372e:	f005 f931 	bl	8008994 <Paint_DrawString_EN>
}
 8003732:	bf00      	nop
 8003734:	3708      	adds	r7, #8
 8003736:	46bd      	mov	sp, r7
 8003738:	bd80      	pop	{r7, pc}
 800373a:	bf00      	nop
 800373c:	2000015a 	.word	0x2000015a
 8003740:	200003ec 	.word	0x200003ec
 8003744:	20000158 	.word	0x20000158
 8003748:	200003f4 	.word	0x200003f4
 800374c:	20000038 	.word	0x20000038

08003750 <LCD_Init>:

void LCD_Init(uint8_t* a)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b084      	sub	sp, #16
 8003754:	af02      	add	r7, sp, #8
 8003756:	6078      	str	r0, [r7, #4]
	DEV_Module_Init();
 8003758:	f004 fefa 	bl	8008550 <DEV_Module_Init>


	LCD_2IN_SetBackLight(1000);
 800375c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003760:	f005 fbb2 	bl	8008ec8 <LCD_2IN_SetBackLight>
	LCD_2IN_Init();
 8003764:	f005 f9f8 	bl	8008b58 <LCD_2IN_Init>
	LCD_2IN_Clear(WHITE);
 8003768:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 800376c:	f005 fb64 	bl	8008e38 <LCD_2IN_Clear>


	Paint_NewImage(LCD_2IN_WIDTH,LCD_2IN_HEIGHT, ROTATE_90, WHITE);
 8003770:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003774:	225a      	movs	r2, #90	@ 0x5a
 8003776:	f44f 71a0 	mov.w	r1, #320	@ 0x140
 800377a:	20f0      	movs	r0, #240	@ 0xf0
 800377c:	f004 ff08 	bl	8008590 <Paint_NewImage>


	Paint_SetClearFuntion(LCD_2IN_Clear);
 8003780:	485a      	ldr	r0, [pc, #360]	@ (80038ec <LCD_Init+0x19c>)
 8003782:	f004 ff51 	bl	8008628 <Paint_SetClearFuntion>
	Paint_SetDisplayFuntion(LCD_2IN_DrawPaint);
 8003786:	485a      	ldr	r0, [pc, #360]	@ (80038f0 <LCD_Init+0x1a0>)
 8003788:	f004 ff5e 	bl	8008648 <Paint_SetDisplayFuntion>

  printf("Paint_Clear\r\n");
 800378c:	4859      	ldr	r0, [pc, #356]	@ (80038f4 <LCD_Init+0x1a4>)
 800378e:	f005 fd8b 	bl	80092a8 <puts>
	Paint_Clear(MAGENTA);
 8003792:	f64f 001f 	movw	r0, #63519	@ 0xf81f
 8003796:	f005 f841 	bl	800881c <Paint_Clear>
	DEV_Delay_ms(500);
 800379a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800379e:	f000 f95d 	bl	8003a5c <HAL_Delay>


	Paint_SetRotate(ROTATE_270);
 80037a2:	f44f 7087 	mov.w	r0, #270	@ 0x10e
 80037a6:	f004 ff5f 	bl	8008668 <Paint_SetRotate>
	Paint_DrawString_EN (50, 100, "DEMARRAGE DU",        &Font24,    MAGENTA,  WHITE);
 80037aa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80037ae:	9301      	str	r3, [sp, #4]
 80037b0:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 80037b4:	9300      	str	r3, [sp, #0]
 80037b6:	4b50      	ldr	r3, [pc, #320]	@ (80038f8 <LCD_Init+0x1a8>)
 80037b8:	4a50      	ldr	r2, [pc, #320]	@ (80038fc <LCD_Init+0x1ac>)
 80037ba:	2164      	movs	r1, #100	@ 0x64
 80037bc:	2032      	movs	r0, #50	@ 0x32
 80037be:	f005 f8e9 	bl	8008994 <Paint_DrawString_EN>
	Paint_DrawString_EN (100, 125, "PROJET",        &Font24,    MAGENTA,  WHITE);
 80037c2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80037c6:	9301      	str	r3, [sp, #4]
 80037c8:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 80037cc:	9300      	str	r3, [sp, #0]
 80037ce:	4b4a      	ldr	r3, [pc, #296]	@ (80038f8 <LCD_Init+0x1a8>)
 80037d0:	4a4b      	ldr	r2, [pc, #300]	@ (8003900 <LCD_Init+0x1b0>)
 80037d2:	217d      	movs	r1, #125	@ 0x7d
 80037d4:	2064      	movs	r0, #100	@ 0x64
 80037d6:	f005 f8dd 	bl	8008994 <Paint_DrawString_EN>
	Paint_DrawString_EN (70, 150, "VROUM-VROUM",        &Font24,    MAGENTA,  WHITE);
 80037da:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80037de:	9301      	str	r3, [sp, #4]
 80037e0:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 80037e4:	9300      	str	r3, [sp, #0]
 80037e6:	4b44      	ldr	r3, [pc, #272]	@ (80038f8 <LCD_Init+0x1a8>)
 80037e8:	4a46      	ldr	r2, [pc, #280]	@ (8003904 <LCD_Init+0x1b4>)
 80037ea:	2196      	movs	r1, #150	@ 0x96
 80037ec:	2046      	movs	r0, #70	@ 0x46
 80037ee:	f005 f8d1 	bl	8008994 <Paint_DrawString_EN>
	DEV_Delay_ms(500);
 80037f2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80037f6:	f000 f931 	bl	8003a5c <HAL_Delay>
	Paint_Clear(MAGENTA);
 80037fa:	f64f 001f 	movw	r0, #63519	@ 0xf81f
 80037fe:	f005 f80d 	bl	800881c <Paint_Clear>

	Paint_DrawString_EN (85, 100, "LE PROJET",        &Font24,    MAGENTA,  WHITE);
 8003802:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003806:	9301      	str	r3, [sp, #4]
 8003808:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 800380c:	9300      	str	r3, [sp, #0]
 800380e:	4b3a      	ldr	r3, [pc, #232]	@ (80038f8 <LCD_Init+0x1a8>)
 8003810:	4a3d      	ldr	r2, [pc, #244]	@ (8003908 <LCD_Init+0x1b8>)
 8003812:	2164      	movs	r1, #100	@ 0x64
 8003814:	2055      	movs	r0, #85	@ 0x55
 8003816:	f005 f8bd 	bl	8008994 <Paint_DrawString_EN>
	Paint_DrawString_EN (70, 125, "VROUM-VROUM",        &Font24,    MAGENTA,  WHITE);
 800381a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800381e:	9301      	str	r3, [sp, #4]
 8003820:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 8003824:	9300      	str	r3, [sp, #0]
 8003826:	4b34      	ldr	r3, [pc, #208]	@ (80038f8 <LCD_Init+0x1a8>)
 8003828:	4a36      	ldr	r2, [pc, #216]	@ (8003904 <LCD_Init+0x1b4>)
 800382a:	217d      	movs	r1, #125	@ 0x7d
 800382c:	2046      	movs	r0, #70	@ 0x46
 800382e:	f005 f8b1 	bl	8008994 <Paint_DrawString_EN>
	Paint_DrawString_EN (85, 150, "VOUS SALUT",        &Font24,    MAGENTA,  WHITE);
 8003832:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003836:	9301      	str	r3, [sp, #4]
 8003838:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 800383c:	9300      	str	r3, [sp, #0]
 800383e:	4b2e      	ldr	r3, [pc, #184]	@ (80038f8 <LCD_Init+0x1a8>)
 8003840:	4a32      	ldr	r2, [pc, #200]	@ (800390c <LCD_Init+0x1bc>)
 8003842:	2196      	movs	r1, #150	@ 0x96
 8003844:	2055      	movs	r0, #85	@ 0x55
 8003846:	f005 f8a5 	bl	8008994 <Paint_DrawString_EN>
	DEV_Delay_ms(500);
 800384a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800384e:	f000 f905 	bl	8003a5c <HAL_Delay>
	Paint_Clear(MAGENTA);
 8003852:	f64f 001f 	movw	r0, #63519	@ 0xf81f
 8003856:	f004 ffe1 	bl	800881c <Paint_Clear>

	affich_RTC_Date();
 800385a:	f7ff fdeb 	bl	8003434 <affich_RTC_Date>
	init_RTC_Time();
 800385e:	f7ff fc3f 	bl	80030e0 <init_RTC_Time>
	Paint_DrawString_EN (5, 50, "Mode actuel : ",        &Font24,    MAGENTA,  WHITE);
 8003862:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003866:	9301      	str	r3, [sp, #4]
 8003868:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 800386c:	9300      	str	r3, [sp, #0]
 800386e:	4b22      	ldr	r3, [pc, #136]	@ (80038f8 <LCD_Init+0x1a8>)
 8003870:	4a27      	ldr	r2, [pc, #156]	@ (8003910 <LCD_Init+0x1c0>)
 8003872:	2132      	movs	r1, #50	@ 0x32
 8003874:	2005      	movs	r0, #5
 8003876:	f005 f88d 	bl	8008994 <Paint_DrawString_EN>


	LCD_Mode();
 800387a:	f7ff fef7 	bl	800366c <LCD_Mode>
	LCD_Manuel(3);
 800387e:	2003      	movs	r0, #3
 8003880:	f7ff fea6 	bl	80035d0 <LCD_Manuel>

	Paint_DrawString_EN (5, 100, "Vitesse G:    mm/s",        &Font24,    MAGENTA,  WHITE);
 8003884:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003888:	9301      	str	r3, [sp, #4]
 800388a:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 800388e:	9300      	str	r3, [sp, #0]
 8003890:	4b19      	ldr	r3, [pc, #100]	@ (80038f8 <LCD_Init+0x1a8>)
 8003892:	4a20      	ldr	r2, [pc, #128]	@ (8003914 <LCD_Init+0x1c4>)
 8003894:	2164      	movs	r1, #100	@ 0x64
 8003896:	2005      	movs	r0, #5
 8003898:	f005 f87c 	bl	8008994 <Paint_DrawString_EN>
	Paint_DrawString_EN (5, 125, "Vitesse D:    mm/s",        &Font24,    MAGENTA,  WHITE);
 800389c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80038a0:	9301      	str	r3, [sp, #4]
 80038a2:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 80038a6:	9300      	str	r3, [sp, #0]
 80038a8:	4b13      	ldr	r3, [pc, #76]	@ (80038f8 <LCD_Init+0x1a8>)
 80038aa:	4a1b      	ldr	r2, [pc, #108]	@ (8003918 <LCD_Init+0x1c8>)
 80038ac:	217d      	movs	r1, #125	@ 0x7d
 80038ae:	2005      	movs	r0, #5
 80038b0:	f005 f870 	bl	8008994 <Paint_DrawString_EN>
	Paint_DrawString_EN (10, 220, "Attention aux enfants",        &Font20,    YELLOW,  RED);
 80038b4:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80038b8:	9301      	str	r3, [sp, #4]
 80038ba:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 80038be:	9300      	str	r3, [sp, #0]
 80038c0:	4b16      	ldr	r3, [pc, #88]	@ (800391c <LCD_Init+0x1cc>)
 80038c2:	4a17      	ldr	r2, [pc, #92]	@ (8003920 <LCD_Init+0x1d0>)
 80038c4:	21dc      	movs	r1, #220	@ 0xdc
 80038c6:	200a      	movs	r0, #10
 80038c8:	f005 f864 	bl	8008994 <Paint_DrawString_EN>

	LCD_Vitesse(0, 0);
 80038cc:	2100      	movs	r1, #0
 80038ce:	2000      	movs	r0, #0
 80038d0:	f7ff feea 	bl	80036a8 <LCD_Vitesse>

	DEV_Delay_ms(500);
 80038d4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80038d8:	f000 f8c0 	bl	8003a5c <HAL_Delay>

	*a = 1;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2201      	movs	r2, #1
 80038e0:	701a      	strb	r2, [r3, #0]
	//DEV_Module_Exit();

}
 80038e2:	bf00      	nop
 80038e4:	3708      	adds	r7, #8
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bd80      	pop	{r7, pc}
 80038ea:	bf00      	nop
 80038ec:	08008e39 	.word	0x08008e39
 80038f0:	08008e99 	.word	0x08008e99
 80038f4:	08009ee0 	.word	0x08009ee0
 80038f8:	20000048 	.word	0x20000048
 80038fc:	08009ef0 	.word	0x08009ef0
 8003900:	08009f00 	.word	0x08009f00
 8003904:	08009f08 	.word	0x08009f08
 8003908:	08009f14 	.word	0x08009f14
 800390c:	08009f20 	.word	0x08009f20
 8003910:	08009f2c 	.word	0x08009f2c
 8003914:	08009f3c 	.word	0x08009f3c
 8003918:	08009f50 	.word	0x08009f50
 800391c:	20000040 	.word	0x20000040
 8003920:	08009f64 	.word	0x08009f64

08003924 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003924:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800395c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8003928:	f7fe ff02 	bl	8002730 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800392c:	480c      	ldr	r0, [pc, #48]	@ (8003960 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800392e:	490d      	ldr	r1, [pc, #52]	@ (8003964 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003930:	4a0d      	ldr	r2, [pc, #52]	@ (8003968 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003932:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003934:	e002      	b.n	800393c <LoopCopyDataInit>

08003936 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003936:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003938:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800393a:	3304      	adds	r3, #4

0800393c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800393c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800393e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003940:	d3f9      	bcc.n	8003936 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003942:	4a0a      	ldr	r2, [pc, #40]	@ (800396c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003944:	4c0a      	ldr	r4, [pc, #40]	@ (8003970 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003946:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003948:	e001      	b.n	800394e <LoopFillZerobss>

0800394a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800394a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800394c:	3204      	adds	r2, #4

0800394e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800394e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003950:	d3fb      	bcc.n	800394a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8003952:	f005 fded 	bl	8009530 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003956:	f7fe f875 	bl	8001a44 <main>
  bx  lr    
 800395a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800395c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003960:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003964:	200000ac 	.word	0x200000ac
  ldr r2, =_sidata
 8003968:	0800d84c 	.word	0x0800d84c
  ldr r2, =_sbss
 800396c:	200000ac 	.word	0x200000ac
  ldr r4, =_ebss
 8003970:	200005ac 	.word	0x200005ac

08003974 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003974:	e7fe      	b.n	8003974 <ADC_IRQHandler>
	...

08003978 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800397c:	4b0e      	ldr	r3, [pc, #56]	@ (80039b8 <HAL_Init+0x40>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a0d      	ldr	r2, [pc, #52]	@ (80039b8 <HAL_Init+0x40>)
 8003982:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003986:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003988:	4b0b      	ldr	r3, [pc, #44]	@ (80039b8 <HAL_Init+0x40>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4a0a      	ldr	r2, [pc, #40]	@ (80039b8 <HAL_Init+0x40>)
 800398e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003992:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003994:	4b08      	ldr	r3, [pc, #32]	@ (80039b8 <HAL_Init+0x40>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4a07      	ldr	r2, [pc, #28]	@ (80039b8 <HAL_Init+0x40>)
 800399a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800399e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80039a0:	2003      	movs	r0, #3
 80039a2:	f000 f94f 	bl	8003c44 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80039a6:	2000      	movs	r0, #0
 80039a8:	f000 f808 	bl	80039bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80039ac:	f7fe fd92 	bl	80024d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80039b0:	2300      	movs	r3, #0
}
 80039b2:	4618      	mov	r0, r3
 80039b4:	bd80      	pop	{r7, pc}
 80039b6:	bf00      	nop
 80039b8:	40023c00 	.word	0x40023c00

080039bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b082      	sub	sp, #8
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80039c4:	4b12      	ldr	r3, [pc, #72]	@ (8003a10 <HAL_InitTick+0x54>)
 80039c6:	681a      	ldr	r2, [r3, #0]
 80039c8:	4b12      	ldr	r3, [pc, #72]	@ (8003a14 <HAL_InitTick+0x58>)
 80039ca:	781b      	ldrb	r3, [r3, #0]
 80039cc:	4619      	mov	r1, r3
 80039ce:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80039d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80039d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80039da:	4618      	mov	r0, r3
 80039dc:	f000 f967 	bl	8003cae <HAL_SYSTICK_Config>
 80039e0:	4603      	mov	r3, r0
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d001      	beq.n	80039ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80039e6:	2301      	movs	r3, #1
 80039e8:	e00e      	b.n	8003a08 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2b0f      	cmp	r3, #15
 80039ee:	d80a      	bhi.n	8003a06 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80039f0:	2200      	movs	r2, #0
 80039f2:	6879      	ldr	r1, [r7, #4]
 80039f4:	f04f 30ff 	mov.w	r0, #4294967295
 80039f8:	f000 f92f 	bl	8003c5a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80039fc:	4a06      	ldr	r2, [pc, #24]	@ (8003a18 <HAL_InitTick+0x5c>)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003a02:	2300      	movs	r3, #0
 8003a04:	e000      	b.n	8003a08 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003a06:	2301      	movs	r3, #1
}
 8003a08:	4618      	mov	r0, r3
 8003a0a:	3708      	adds	r7, #8
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	bd80      	pop	{r7, pc}
 8003a10:	20000028 	.word	0x20000028
 8003a14:	20000034 	.word	0x20000034
 8003a18:	20000030 	.word	0x20000030

08003a1c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003a20:	4b06      	ldr	r3, [pc, #24]	@ (8003a3c <HAL_IncTick+0x20>)
 8003a22:	781b      	ldrb	r3, [r3, #0]
 8003a24:	461a      	mov	r2, r3
 8003a26:	4b06      	ldr	r3, [pc, #24]	@ (8003a40 <HAL_IncTick+0x24>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4413      	add	r3, r2
 8003a2c:	4a04      	ldr	r2, [pc, #16]	@ (8003a40 <HAL_IncTick+0x24>)
 8003a2e:	6013      	str	r3, [r2, #0]
}
 8003a30:	bf00      	nop
 8003a32:	46bd      	mov	sp, r7
 8003a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a38:	4770      	bx	lr
 8003a3a:	bf00      	nop
 8003a3c:	20000034 	.word	0x20000034
 8003a40:	2000043c 	.word	0x2000043c

08003a44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003a44:	b480      	push	{r7}
 8003a46:	af00      	add	r7, sp, #0
  return uwTick;
 8003a48:	4b03      	ldr	r3, [pc, #12]	@ (8003a58 <HAL_GetTick+0x14>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
}
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a54:	4770      	bx	lr
 8003a56:	bf00      	nop
 8003a58:	2000043c 	.word	0x2000043c

08003a5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b084      	sub	sp, #16
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003a64:	f7ff ffee 	bl	8003a44 <HAL_GetTick>
 8003a68:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a74:	d005      	beq.n	8003a82 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003a76:	4b0a      	ldr	r3, [pc, #40]	@ (8003aa0 <HAL_Delay+0x44>)
 8003a78:	781b      	ldrb	r3, [r3, #0]
 8003a7a:	461a      	mov	r2, r3
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	4413      	add	r3, r2
 8003a80:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003a82:	bf00      	nop
 8003a84:	f7ff ffde 	bl	8003a44 <HAL_GetTick>
 8003a88:	4602      	mov	r2, r0
 8003a8a:	68bb      	ldr	r3, [r7, #8]
 8003a8c:	1ad3      	subs	r3, r2, r3
 8003a8e:	68fa      	ldr	r2, [r7, #12]
 8003a90:	429a      	cmp	r2, r3
 8003a92:	d8f7      	bhi.n	8003a84 <HAL_Delay+0x28>
  {
  }
}
 8003a94:	bf00      	nop
 8003a96:	bf00      	nop
 8003a98:	3710      	adds	r7, #16
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	bd80      	pop	{r7, pc}
 8003a9e:	bf00      	nop
 8003aa0:	20000034 	.word	0x20000034

08003aa4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	b085      	sub	sp, #20
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	f003 0307 	and.w	r3, r3, #7
 8003ab2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003ab4:	4b0c      	ldr	r3, [pc, #48]	@ (8003ae8 <__NVIC_SetPriorityGrouping+0x44>)
 8003ab6:	68db      	ldr	r3, [r3, #12]
 8003ab8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003aba:	68ba      	ldr	r2, [r7, #8]
 8003abc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003ac0:	4013      	ands	r3, r2
 8003ac2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003acc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003ad0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003ad4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003ad6:	4a04      	ldr	r2, [pc, #16]	@ (8003ae8 <__NVIC_SetPriorityGrouping+0x44>)
 8003ad8:	68bb      	ldr	r3, [r7, #8]
 8003ada:	60d3      	str	r3, [r2, #12]
}
 8003adc:	bf00      	nop
 8003ade:	3714      	adds	r7, #20
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae6:	4770      	bx	lr
 8003ae8:	e000ed00 	.word	0xe000ed00

08003aec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003aec:	b480      	push	{r7}
 8003aee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003af0:	4b04      	ldr	r3, [pc, #16]	@ (8003b04 <__NVIC_GetPriorityGrouping+0x18>)
 8003af2:	68db      	ldr	r3, [r3, #12]
 8003af4:	0a1b      	lsrs	r3, r3, #8
 8003af6:	f003 0307 	and.w	r3, r3, #7
}
 8003afa:	4618      	mov	r0, r3
 8003afc:	46bd      	mov	sp, r7
 8003afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b02:	4770      	bx	lr
 8003b04:	e000ed00 	.word	0xe000ed00

08003b08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b08:	b480      	push	{r7}
 8003b0a:	b083      	sub	sp, #12
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	4603      	mov	r3, r0
 8003b10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	db0b      	blt.n	8003b32 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b1a:	79fb      	ldrb	r3, [r7, #7]
 8003b1c:	f003 021f 	and.w	r2, r3, #31
 8003b20:	4907      	ldr	r1, [pc, #28]	@ (8003b40 <__NVIC_EnableIRQ+0x38>)
 8003b22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b26:	095b      	lsrs	r3, r3, #5
 8003b28:	2001      	movs	r0, #1
 8003b2a:	fa00 f202 	lsl.w	r2, r0, r2
 8003b2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003b32:	bf00      	nop
 8003b34:	370c      	adds	r7, #12
 8003b36:	46bd      	mov	sp, r7
 8003b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3c:	4770      	bx	lr
 8003b3e:	bf00      	nop
 8003b40:	e000e100 	.word	0xe000e100

08003b44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003b44:	b480      	push	{r7}
 8003b46:	b083      	sub	sp, #12
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	6039      	str	r1, [r7, #0]
 8003b4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	db0a      	blt.n	8003b6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	b2da      	uxtb	r2, r3
 8003b5c:	490c      	ldr	r1, [pc, #48]	@ (8003b90 <__NVIC_SetPriority+0x4c>)
 8003b5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b62:	0112      	lsls	r2, r2, #4
 8003b64:	b2d2      	uxtb	r2, r2
 8003b66:	440b      	add	r3, r1
 8003b68:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003b6c:	e00a      	b.n	8003b84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	b2da      	uxtb	r2, r3
 8003b72:	4908      	ldr	r1, [pc, #32]	@ (8003b94 <__NVIC_SetPriority+0x50>)
 8003b74:	79fb      	ldrb	r3, [r7, #7]
 8003b76:	f003 030f 	and.w	r3, r3, #15
 8003b7a:	3b04      	subs	r3, #4
 8003b7c:	0112      	lsls	r2, r2, #4
 8003b7e:	b2d2      	uxtb	r2, r2
 8003b80:	440b      	add	r3, r1
 8003b82:	761a      	strb	r2, [r3, #24]
}
 8003b84:	bf00      	nop
 8003b86:	370c      	adds	r7, #12
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8e:	4770      	bx	lr
 8003b90:	e000e100 	.word	0xe000e100
 8003b94:	e000ed00 	.word	0xe000ed00

08003b98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b98:	b480      	push	{r7}
 8003b9a:	b089      	sub	sp, #36	@ 0x24
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	60f8      	str	r0, [r7, #12]
 8003ba0:	60b9      	str	r1, [r7, #8]
 8003ba2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	f003 0307 	and.w	r3, r3, #7
 8003baa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003bac:	69fb      	ldr	r3, [r7, #28]
 8003bae:	f1c3 0307 	rsb	r3, r3, #7
 8003bb2:	2b04      	cmp	r3, #4
 8003bb4:	bf28      	it	cs
 8003bb6:	2304      	movcs	r3, #4
 8003bb8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003bba:	69fb      	ldr	r3, [r7, #28]
 8003bbc:	3304      	adds	r3, #4
 8003bbe:	2b06      	cmp	r3, #6
 8003bc0:	d902      	bls.n	8003bc8 <NVIC_EncodePriority+0x30>
 8003bc2:	69fb      	ldr	r3, [r7, #28]
 8003bc4:	3b03      	subs	r3, #3
 8003bc6:	e000      	b.n	8003bca <NVIC_EncodePriority+0x32>
 8003bc8:	2300      	movs	r3, #0
 8003bca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003bcc:	f04f 32ff 	mov.w	r2, #4294967295
 8003bd0:	69bb      	ldr	r3, [r7, #24]
 8003bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8003bd6:	43da      	mvns	r2, r3
 8003bd8:	68bb      	ldr	r3, [r7, #8]
 8003bda:	401a      	ands	r2, r3
 8003bdc:	697b      	ldr	r3, [r7, #20]
 8003bde:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003be0:	f04f 31ff 	mov.w	r1, #4294967295
 8003be4:	697b      	ldr	r3, [r7, #20]
 8003be6:	fa01 f303 	lsl.w	r3, r1, r3
 8003bea:	43d9      	mvns	r1, r3
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003bf0:	4313      	orrs	r3, r2
         );
}
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	3724      	adds	r7, #36	@ 0x24
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfc:	4770      	bx	lr
	...

08003c00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b082      	sub	sp, #8
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	3b01      	subs	r3, #1
 8003c0c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003c10:	d301      	bcc.n	8003c16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003c12:	2301      	movs	r3, #1
 8003c14:	e00f      	b.n	8003c36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003c16:	4a0a      	ldr	r2, [pc, #40]	@ (8003c40 <SysTick_Config+0x40>)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	3b01      	subs	r3, #1
 8003c1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003c1e:	210f      	movs	r1, #15
 8003c20:	f04f 30ff 	mov.w	r0, #4294967295
 8003c24:	f7ff ff8e 	bl	8003b44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003c28:	4b05      	ldr	r3, [pc, #20]	@ (8003c40 <SysTick_Config+0x40>)
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003c2e:	4b04      	ldr	r3, [pc, #16]	@ (8003c40 <SysTick_Config+0x40>)
 8003c30:	2207      	movs	r2, #7
 8003c32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003c34:	2300      	movs	r3, #0
}
 8003c36:	4618      	mov	r0, r3
 8003c38:	3708      	adds	r7, #8
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	bd80      	pop	{r7, pc}
 8003c3e:	bf00      	nop
 8003c40:	e000e010 	.word	0xe000e010

08003c44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b082      	sub	sp, #8
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003c4c:	6878      	ldr	r0, [r7, #4]
 8003c4e:	f7ff ff29 	bl	8003aa4 <__NVIC_SetPriorityGrouping>
}
 8003c52:	bf00      	nop
 8003c54:	3708      	adds	r7, #8
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bd80      	pop	{r7, pc}

08003c5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003c5a:	b580      	push	{r7, lr}
 8003c5c:	b086      	sub	sp, #24
 8003c5e:	af00      	add	r7, sp, #0
 8003c60:	4603      	mov	r3, r0
 8003c62:	60b9      	str	r1, [r7, #8]
 8003c64:	607a      	str	r2, [r7, #4]
 8003c66:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003c68:	2300      	movs	r3, #0
 8003c6a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003c6c:	f7ff ff3e 	bl	8003aec <__NVIC_GetPriorityGrouping>
 8003c70:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003c72:	687a      	ldr	r2, [r7, #4]
 8003c74:	68b9      	ldr	r1, [r7, #8]
 8003c76:	6978      	ldr	r0, [r7, #20]
 8003c78:	f7ff ff8e 	bl	8003b98 <NVIC_EncodePriority>
 8003c7c:	4602      	mov	r2, r0
 8003c7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c82:	4611      	mov	r1, r2
 8003c84:	4618      	mov	r0, r3
 8003c86:	f7ff ff5d 	bl	8003b44 <__NVIC_SetPriority>
}
 8003c8a:	bf00      	nop
 8003c8c:	3718      	adds	r7, #24
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	bd80      	pop	{r7, pc}

08003c92 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c92:	b580      	push	{r7, lr}
 8003c94:	b082      	sub	sp, #8
 8003c96:	af00      	add	r7, sp, #0
 8003c98:	4603      	mov	r3, r0
 8003c9a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003c9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	f7ff ff31 	bl	8003b08 <__NVIC_EnableIRQ>
}
 8003ca6:	bf00      	nop
 8003ca8:	3708      	adds	r7, #8
 8003caa:	46bd      	mov	sp, r7
 8003cac:	bd80      	pop	{r7, pc}

08003cae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003cae:	b580      	push	{r7, lr}
 8003cb0:	b082      	sub	sp, #8
 8003cb2:	af00      	add	r7, sp, #0
 8003cb4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003cb6:	6878      	ldr	r0, [r7, #4]
 8003cb8:	f7ff ffa2 	bl	8003c00 <SysTick_Config>
 8003cbc:	4603      	mov	r3, r0
}
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	3708      	adds	r7, #8
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	bd80      	pop	{r7, pc}
	...

08003cc8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003cc8:	b480      	push	{r7}
 8003cca:	b089      	sub	sp, #36	@ 0x24
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
 8003cd0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003cda:	2300      	movs	r3, #0
 8003cdc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003cde:	2300      	movs	r3, #0
 8003ce0:	61fb      	str	r3, [r7, #28]
 8003ce2:	e165      	b.n	8003fb0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003ce4:	2201      	movs	r2, #1
 8003ce6:	69fb      	ldr	r3, [r7, #28]
 8003ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8003cec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	697a      	ldr	r2, [r7, #20]
 8003cf4:	4013      	ands	r3, r2
 8003cf6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003cf8:	693a      	ldr	r2, [r7, #16]
 8003cfa:	697b      	ldr	r3, [r7, #20]
 8003cfc:	429a      	cmp	r2, r3
 8003cfe:	f040 8154 	bne.w	8003faa <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	f003 0303 	and.w	r3, r3, #3
 8003d0a:	2b01      	cmp	r3, #1
 8003d0c:	d005      	beq.n	8003d1a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	685b      	ldr	r3, [r3, #4]
 8003d12:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003d16:	2b02      	cmp	r3, #2
 8003d18:	d130      	bne.n	8003d7c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	689b      	ldr	r3, [r3, #8]
 8003d1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003d20:	69fb      	ldr	r3, [r7, #28]
 8003d22:	005b      	lsls	r3, r3, #1
 8003d24:	2203      	movs	r2, #3
 8003d26:	fa02 f303 	lsl.w	r3, r2, r3
 8003d2a:	43db      	mvns	r3, r3
 8003d2c:	69ba      	ldr	r2, [r7, #24]
 8003d2e:	4013      	ands	r3, r2
 8003d30:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	68da      	ldr	r2, [r3, #12]
 8003d36:	69fb      	ldr	r3, [r7, #28]
 8003d38:	005b      	lsls	r3, r3, #1
 8003d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d3e:	69ba      	ldr	r2, [r7, #24]
 8003d40:	4313      	orrs	r3, r2
 8003d42:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	69ba      	ldr	r2, [r7, #24]
 8003d48:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003d50:	2201      	movs	r2, #1
 8003d52:	69fb      	ldr	r3, [r7, #28]
 8003d54:	fa02 f303 	lsl.w	r3, r2, r3
 8003d58:	43db      	mvns	r3, r3
 8003d5a:	69ba      	ldr	r2, [r7, #24]
 8003d5c:	4013      	ands	r3, r2
 8003d5e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	091b      	lsrs	r3, r3, #4
 8003d66:	f003 0201 	and.w	r2, r3, #1
 8003d6a:	69fb      	ldr	r3, [r7, #28]
 8003d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d70:	69ba      	ldr	r2, [r7, #24]
 8003d72:	4313      	orrs	r3, r2
 8003d74:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	69ba      	ldr	r2, [r7, #24]
 8003d7a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	f003 0303 	and.w	r3, r3, #3
 8003d84:	2b03      	cmp	r3, #3
 8003d86:	d017      	beq.n	8003db8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	68db      	ldr	r3, [r3, #12]
 8003d8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003d8e:	69fb      	ldr	r3, [r7, #28]
 8003d90:	005b      	lsls	r3, r3, #1
 8003d92:	2203      	movs	r2, #3
 8003d94:	fa02 f303 	lsl.w	r3, r2, r3
 8003d98:	43db      	mvns	r3, r3
 8003d9a:	69ba      	ldr	r2, [r7, #24]
 8003d9c:	4013      	ands	r3, r2
 8003d9e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	689a      	ldr	r2, [r3, #8]
 8003da4:	69fb      	ldr	r3, [r7, #28]
 8003da6:	005b      	lsls	r3, r3, #1
 8003da8:	fa02 f303 	lsl.w	r3, r2, r3
 8003dac:	69ba      	ldr	r2, [r7, #24]
 8003dae:	4313      	orrs	r3, r2
 8003db0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	69ba      	ldr	r2, [r7, #24]
 8003db6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	f003 0303 	and.w	r3, r3, #3
 8003dc0:	2b02      	cmp	r3, #2
 8003dc2:	d123      	bne.n	8003e0c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003dc4:	69fb      	ldr	r3, [r7, #28]
 8003dc6:	08da      	lsrs	r2, r3, #3
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	3208      	adds	r2, #8
 8003dcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003dd0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003dd2:	69fb      	ldr	r3, [r7, #28]
 8003dd4:	f003 0307 	and.w	r3, r3, #7
 8003dd8:	009b      	lsls	r3, r3, #2
 8003dda:	220f      	movs	r2, #15
 8003ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8003de0:	43db      	mvns	r3, r3
 8003de2:	69ba      	ldr	r2, [r7, #24]
 8003de4:	4013      	ands	r3, r2
 8003de6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	691a      	ldr	r2, [r3, #16]
 8003dec:	69fb      	ldr	r3, [r7, #28]
 8003dee:	f003 0307 	and.w	r3, r3, #7
 8003df2:	009b      	lsls	r3, r3, #2
 8003df4:	fa02 f303 	lsl.w	r3, r2, r3
 8003df8:	69ba      	ldr	r2, [r7, #24]
 8003dfa:	4313      	orrs	r3, r2
 8003dfc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003dfe:	69fb      	ldr	r3, [r7, #28]
 8003e00:	08da      	lsrs	r2, r3, #3
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	3208      	adds	r2, #8
 8003e06:	69b9      	ldr	r1, [r7, #24]
 8003e08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003e12:	69fb      	ldr	r3, [r7, #28]
 8003e14:	005b      	lsls	r3, r3, #1
 8003e16:	2203      	movs	r2, #3
 8003e18:	fa02 f303 	lsl.w	r3, r2, r3
 8003e1c:	43db      	mvns	r3, r3
 8003e1e:	69ba      	ldr	r2, [r7, #24]
 8003e20:	4013      	ands	r3, r2
 8003e22:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	f003 0203 	and.w	r2, r3, #3
 8003e2c:	69fb      	ldr	r3, [r7, #28]
 8003e2e:	005b      	lsls	r3, r3, #1
 8003e30:	fa02 f303 	lsl.w	r3, r2, r3
 8003e34:	69ba      	ldr	r2, [r7, #24]
 8003e36:	4313      	orrs	r3, r2
 8003e38:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	69ba      	ldr	r2, [r7, #24]
 8003e3e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	685b      	ldr	r3, [r3, #4]
 8003e44:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	f000 80ae 	beq.w	8003faa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e4e:	2300      	movs	r3, #0
 8003e50:	60fb      	str	r3, [r7, #12]
 8003e52:	4b5d      	ldr	r3, [pc, #372]	@ (8003fc8 <HAL_GPIO_Init+0x300>)
 8003e54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e56:	4a5c      	ldr	r2, [pc, #368]	@ (8003fc8 <HAL_GPIO_Init+0x300>)
 8003e58:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003e5c:	6453      	str	r3, [r2, #68]	@ 0x44
 8003e5e:	4b5a      	ldr	r3, [pc, #360]	@ (8003fc8 <HAL_GPIO_Init+0x300>)
 8003e60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e62:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003e66:	60fb      	str	r3, [r7, #12]
 8003e68:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003e6a:	4a58      	ldr	r2, [pc, #352]	@ (8003fcc <HAL_GPIO_Init+0x304>)
 8003e6c:	69fb      	ldr	r3, [r7, #28]
 8003e6e:	089b      	lsrs	r3, r3, #2
 8003e70:	3302      	adds	r3, #2
 8003e72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e76:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003e78:	69fb      	ldr	r3, [r7, #28]
 8003e7a:	f003 0303 	and.w	r3, r3, #3
 8003e7e:	009b      	lsls	r3, r3, #2
 8003e80:	220f      	movs	r2, #15
 8003e82:	fa02 f303 	lsl.w	r3, r2, r3
 8003e86:	43db      	mvns	r3, r3
 8003e88:	69ba      	ldr	r2, [r7, #24]
 8003e8a:	4013      	ands	r3, r2
 8003e8c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	4a4f      	ldr	r2, [pc, #316]	@ (8003fd0 <HAL_GPIO_Init+0x308>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d025      	beq.n	8003ee2 <HAL_GPIO_Init+0x21a>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	4a4e      	ldr	r2, [pc, #312]	@ (8003fd4 <HAL_GPIO_Init+0x30c>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d01f      	beq.n	8003ede <HAL_GPIO_Init+0x216>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	4a4d      	ldr	r2, [pc, #308]	@ (8003fd8 <HAL_GPIO_Init+0x310>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d019      	beq.n	8003eda <HAL_GPIO_Init+0x212>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	4a4c      	ldr	r2, [pc, #304]	@ (8003fdc <HAL_GPIO_Init+0x314>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d013      	beq.n	8003ed6 <HAL_GPIO_Init+0x20e>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	4a4b      	ldr	r2, [pc, #300]	@ (8003fe0 <HAL_GPIO_Init+0x318>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d00d      	beq.n	8003ed2 <HAL_GPIO_Init+0x20a>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	4a4a      	ldr	r2, [pc, #296]	@ (8003fe4 <HAL_GPIO_Init+0x31c>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d007      	beq.n	8003ece <HAL_GPIO_Init+0x206>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	4a49      	ldr	r2, [pc, #292]	@ (8003fe8 <HAL_GPIO_Init+0x320>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d101      	bne.n	8003eca <HAL_GPIO_Init+0x202>
 8003ec6:	2306      	movs	r3, #6
 8003ec8:	e00c      	b.n	8003ee4 <HAL_GPIO_Init+0x21c>
 8003eca:	2307      	movs	r3, #7
 8003ecc:	e00a      	b.n	8003ee4 <HAL_GPIO_Init+0x21c>
 8003ece:	2305      	movs	r3, #5
 8003ed0:	e008      	b.n	8003ee4 <HAL_GPIO_Init+0x21c>
 8003ed2:	2304      	movs	r3, #4
 8003ed4:	e006      	b.n	8003ee4 <HAL_GPIO_Init+0x21c>
 8003ed6:	2303      	movs	r3, #3
 8003ed8:	e004      	b.n	8003ee4 <HAL_GPIO_Init+0x21c>
 8003eda:	2302      	movs	r3, #2
 8003edc:	e002      	b.n	8003ee4 <HAL_GPIO_Init+0x21c>
 8003ede:	2301      	movs	r3, #1
 8003ee0:	e000      	b.n	8003ee4 <HAL_GPIO_Init+0x21c>
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	69fa      	ldr	r2, [r7, #28]
 8003ee6:	f002 0203 	and.w	r2, r2, #3
 8003eea:	0092      	lsls	r2, r2, #2
 8003eec:	4093      	lsls	r3, r2
 8003eee:	69ba      	ldr	r2, [r7, #24]
 8003ef0:	4313      	orrs	r3, r2
 8003ef2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003ef4:	4935      	ldr	r1, [pc, #212]	@ (8003fcc <HAL_GPIO_Init+0x304>)
 8003ef6:	69fb      	ldr	r3, [r7, #28]
 8003ef8:	089b      	lsrs	r3, r3, #2
 8003efa:	3302      	adds	r3, #2
 8003efc:	69ba      	ldr	r2, [r7, #24]
 8003efe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003f02:	4b3a      	ldr	r3, [pc, #232]	@ (8003fec <HAL_GPIO_Init+0x324>)
 8003f04:	689b      	ldr	r3, [r3, #8]
 8003f06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f08:	693b      	ldr	r3, [r7, #16]
 8003f0a:	43db      	mvns	r3, r3
 8003f0c:	69ba      	ldr	r2, [r7, #24]
 8003f0e:	4013      	ands	r3, r2
 8003f10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	685b      	ldr	r3, [r3, #4]
 8003f16:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d003      	beq.n	8003f26 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003f1e:	69ba      	ldr	r2, [r7, #24]
 8003f20:	693b      	ldr	r3, [r7, #16]
 8003f22:	4313      	orrs	r3, r2
 8003f24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003f26:	4a31      	ldr	r2, [pc, #196]	@ (8003fec <HAL_GPIO_Init+0x324>)
 8003f28:	69bb      	ldr	r3, [r7, #24]
 8003f2a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003f2c:	4b2f      	ldr	r3, [pc, #188]	@ (8003fec <HAL_GPIO_Init+0x324>)
 8003f2e:	68db      	ldr	r3, [r3, #12]
 8003f30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f32:	693b      	ldr	r3, [r7, #16]
 8003f34:	43db      	mvns	r3, r3
 8003f36:	69ba      	ldr	r2, [r7, #24]
 8003f38:	4013      	ands	r3, r2
 8003f3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	685b      	ldr	r3, [r3, #4]
 8003f40:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d003      	beq.n	8003f50 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003f48:	69ba      	ldr	r2, [r7, #24]
 8003f4a:	693b      	ldr	r3, [r7, #16]
 8003f4c:	4313      	orrs	r3, r2
 8003f4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003f50:	4a26      	ldr	r2, [pc, #152]	@ (8003fec <HAL_GPIO_Init+0x324>)
 8003f52:	69bb      	ldr	r3, [r7, #24]
 8003f54:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003f56:	4b25      	ldr	r3, [pc, #148]	@ (8003fec <HAL_GPIO_Init+0x324>)
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f5c:	693b      	ldr	r3, [r7, #16]
 8003f5e:	43db      	mvns	r3, r3
 8003f60:	69ba      	ldr	r2, [r7, #24]
 8003f62:	4013      	ands	r3, r2
 8003f64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d003      	beq.n	8003f7a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003f72:	69ba      	ldr	r2, [r7, #24]
 8003f74:	693b      	ldr	r3, [r7, #16]
 8003f76:	4313      	orrs	r3, r2
 8003f78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003f7a:	4a1c      	ldr	r2, [pc, #112]	@ (8003fec <HAL_GPIO_Init+0x324>)
 8003f7c:	69bb      	ldr	r3, [r7, #24]
 8003f7e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003f80:	4b1a      	ldr	r3, [pc, #104]	@ (8003fec <HAL_GPIO_Init+0x324>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f86:	693b      	ldr	r3, [r7, #16]
 8003f88:	43db      	mvns	r3, r3
 8003f8a:	69ba      	ldr	r2, [r7, #24]
 8003f8c:	4013      	ands	r3, r2
 8003f8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	685b      	ldr	r3, [r3, #4]
 8003f94:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d003      	beq.n	8003fa4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003f9c:	69ba      	ldr	r2, [r7, #24]
 8003f9e:	693b      	ldr	r3, [r7, #16]
 8003fa0:	4313      	orrs	r3, r2
 8003fa2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003fa4:	4a11      	ldr	r2, [pc, #68]	@ (8003fec <HAL_GPIO_Init+0x324>)
 8003fa6:	69bb      	ldr	r3, [r7, #24]
 8003fa8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003faa:	69fb      	ldr	r3, [r7, #28]
 8003fac:	3301      	adds	r3, #1
 8003fae:	61fb      	str	r3, [r7, #28]
 8003fb0:	69fb      	ldr	r3, [r7, #28]
 8003fb2:	2b0f      	cmp	r3, #15
 8003fb4:	f67f ae96 	bls.w	8003ce4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003fb8:	bf00      	nop
 8003fba:	bf00      	nop
 8003fbc:	3724      	adds	r7, #36	@ 0x24
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc4:	4770      	bx	lr
 8003fc6:	bf00      	nop
 8003fc8:	40023800 	.word	0x40023800
 8003fcc:	40013800 	.word	0x40013800
 8003fd0:	40020000 	.word	0x40020000
 8003fd4:	40020400 	.word	0x40020400
 8003fd8:	40020800 	.word	0x40020800
 8003fdc:	40020c00 	.word	0x40020c00
 8003fe0:	40021000 	.word	0x40021000
 8003fe4:	40021400 	.word	0x40021400
 8003fe8:	40021800 	.word	0x40021800
 8003fec:	40013c00 	.word	0x40013c00

08003ff0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	b085      	sub	sp, #20
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
 8003ff8:	460b      	mov	r3, r1
 8003ffa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	691a      	ldr	r2, [r3, #16]
 8004000:	887b      	ldrh	r3, [r7, #2]
 8004002:	4013      	ands	r3, r2
 8004004:	2b00      	cmp	r3, #0
 8004006:	d002      	beq.n	800400e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004008:	2301      	movs	r3, #1
 800400a:	73fb      	strb	r3, [r7, #15]
 800400c:	e001      	b.n	8004012 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800400e:	2300      	movs	r3, #0
 8004010:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004012:	7bfb      	ldrb	r3, [r7, #15]
}
 8004014:	4618      	mov	r0, r3
 8004016:	3714      	adds	r7, #20
 8004018:	46bd      	mov	sp, r7
 800401a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401e:	4770      	bx	lr

08004020 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004020:	b480      	push	{r7}
 8004022:	b083      	sub	sp, #12
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
 8004028:	460b      	mov	r3, r1
 800402a:	807b      	strh	r3, [r7, #2]
 800402c:	4613      	mov	r3, r2
 800402e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004030:	787b      	ldrb	r3, [r7, #1]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d003      	beq.n	800403e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004036:	887a      	ldrh	r2, [r7, #2]
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800403c:	e003      	b.n	8004046 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800403e:	887b      	ldrh	r3, [r7, #2]
 8004040:	041a      	lsls	r2, r3, #16
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	619a      	str	r2, [r3, #24]
}
 8004046:	bf00      	nop
 8004048:	370c      	adds	r7, #12
 800404a:	46bd      	mov	sp, r7
 800404c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004050:	4770      	bx	lr
	...

08004054 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b082      	sub	sp, #8
 8004058:	af00      	add	r7, sp, #0
 800405a:	4603      	mov	r3, r0
 800405c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800405e:	4b08      	ldr	r3, [pc, #32]	@ (8004080 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004060:	695a      	ldr	r2, [r3, #20]
 8004062:	88fb      	ldrh	r3, [r7, #6]
 8004064:	4013      	ands	r3, r2
 8004066:	2b00      	cmp	r3, #0
 8004068:	d006      	beq.n	8004078 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800406a:	4a05      	ldr	r2, [pc, #20]	@ (8004080 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800406c:	88fb      	ldrh	r3, [r7, #6]
 800406e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004070:	88fb      	ldrh	r3, [r7, #6]
 8004072:	4618      	mov	r0, r3
 8004074:	f7fd fdf4 	bl	8001c60 <HAL_GPIO_EXTI_Callback>
  }
}
 8004078:	bf00      	nop
 800407a:	3708      	adds	r7, #8
 800407c:	46bd      	mov	sp, r7
 800407e:	bd80      	pop	{r7, pc}
 8004080:	40013c00 	.word	0x40013c00

08004084 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b084      	sub	sp, #16
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d101      	bne.n	8004096 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004092:	2301      	movs	r3, #1
 8004094:	e12b      	b.n	80042ee <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800409c:	b2db      	uxtb	r3, r3
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d106      	bne.n	80040b0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2200      	movs	r2, #0
 80040a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80040aa:	6878      	ldr	r0, [r7, #4]
 80040ac:	f7fd fc82 	bl	80019b4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2224      	movs	r2, #36	@ 0x24
 80040b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	681a      	ldr	r2, [r3, #0]
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f022 0201 	bic.w	r2, r2, #1
 80040c6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	681a      	ldr	r2, [r3, #0]
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80040d6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	681a      	ldr	r2, [r3, #0]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80040e6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80040e8:	f001 f8b8 	bl	800525c <HAL_RCC_GetPCLK1Freq>
 80040ec:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	685b      	ldr	r3, [r3, #4]
 80040f2:	4a81      	ldr	r2, [pc, #516]	@ (80042f8 <HAL_I2C_Init+0x274>)
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d807      	bhi.n	8004108 <HAL_I2C_Init+0x84>
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	4a80      	ldr	r2, [pc, #512]	@ (80042fc <HAL_I2C_Init+0x278>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	bf94      	ite	ls
 8004100:	2301      	movls	r3, #1
 8004102:	2300      	movhi	r3, #0
 8004104:	b2db      	uxtb	r3, r3
 8004106:	e006      	b.n	8004116 <HAL_I2C_Init+0x92>
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	4a7d      	ldr	r2, [pc, #500]	@ (8004300 <HAL_I2C_Init+0x27c>)
 800410c:	4293      	cmp	r3, r2
 800410e:	bf94      	ite	ls
 8004110:	2301      	movls	r3, #1
 8004112:	2300      	movhi	r3, #0
 8004114:	b2db      	uxtb	r3, r3
 8004116:	2b00      	cmp	r3, #0
 8004118:	d001      	beq.n	800411e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800411a:	2301      	movs	r3, #1
 800411c:	e0e7      	b.n	80042ee <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	4a78      	ldr	r2, [pc, #480]	@ (8004304 <HAL_I2C_Init+0x280>)
 8004122:	fba2 2303 	umull	r2, r3, r2, r3
 8004126:	0c9b      	lsrs	r3, r3, #18
 8004128:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	685b      	ldr	r3, [r3, #4]
 8004130:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	68ba      	ldr	r2, [r7, #8]
 800413a:	430a      	orrs	r2, r1
 800413c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	6a1b      	ldr	r3, [r3, #32]
 8004144:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	685b      	ldr	r3, [r3, #4]
 800414c:	4a6a      	ldr	r2, [pc, #424]	@ (80042f8 <HAL_I2C_Init+0x274>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d802      	bhi.n	8004158 <HAL_I2C_Init+0xd4>
 8004152:	68bb      	ldr	r3, [r7, #8]
 8004154:	3301      	adds	r3, #1
 8004156:	e009      	b.n	800416c <HAL_I2C_Init+0xe8>
 8004158:	68bb      	ldr	r3, [r7, #8]
 800415a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800415e:	fb02 f303 	mul.w	r3, r2, r3
 8004162:	4a69      	ldr	r2, [pc, #420]	@ (8004308 <HAL_I2C_Init+0x284>)
 8004164:	fba2 2303 	umull	r2, r3, r2, r3
 8004168:	099b      	lsrs	r3, r3, #6
 800416a:	3301      	adds	r3, #1
 800416c:	687a      	ldr	r2, [r7, #4]
 800416e:	6812      	ldr	r2, [r2, #0]
 8004170:	430b      	orrs	r3, r1
 8004172:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	69db      	ldr	r3, [r3, #28]
 800417a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800417e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	685b      	ldr	r3, [r3, #4]
 8004186:	495c      	ldr	r1, [pc, #368]	@ (80042f8 <HAL_I2C_Init+0x274>)
 8004188:	428b      	cmp	r3, r1
 800418a:	d819      	bhi.n	80041c0 <HAL_I2C_Init+0x13c>
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	1e59      	subs	r1, r3, #1
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	005b      	lsls	r3, r3, #1
 8004196:	fbb1 f3f3 	udiv	r3, r1, r3
 800419a:	1c59      	adds	r1, r3, #1
 800419c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80041a0:	400b      	ands	r3, r1
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d00a      	beq.n	80041bc <HAL_I2C_Init+0x138>
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	1e59      	subs	r1, r3, #1
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	685b      	ldr	r3, [r3, #4]
 80041ae:	005b      	lsls	r3, r3, #1
 80041b0:	fbb1 f3f3 	udiv	r3, r1, r3
 80041b4:	3301      	adds	r3, #1
 80041b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041ba:	e051      	b.n	8004260 <HAL_I2C_Init+0x1dc>
 80041bc:	2304      	movs	r3, #4
 80041be:	e04f      	b.n	8004260 <HAL_I2C_Init+0x1dc>
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	689b      	ldr	r3, [r3, #8]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d111      	bne.n	80041ec <HAL_I2C_Init+0x168>
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	1e58      	subs	r0, r3, #1
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6859      	ldr	r1, [r3, #4]
 80041d0:	460b      	mov	r3, r1
 80041d2:	005b      	lsls	r3, r3, #1
 80041d4:	440b      	add	r3, r1
 80041d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80041da:	3301      	adds	r3, #1
 80041dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	bf0c      	ite	eq
 80041e4:	2301      	moveq	r3, #1
 80041e6:	2300      	movne	r3, #0
 80041e8:	b2db      	uxtb	r3, r3
 80041ea:	e012      	b.n	8004212 <HAL_I2C_Init+0x18e>
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	1e58      	subs	r0, r3, #1
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6859      	ldr	r1, [r3, #4]
 80041f4:	460b      	mov	r3, r1
 80041f6:	009b      	lsls	r3, r3, #2
 80041f8:	440b      	add	r3, r1
 80041fa:	0099      	lsls	r1, r3, #2
 80041fc:	440b      	add	r3, r1
 80041fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8004202:	3301      	adds	r3, #1
 8004204:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004208:	2b00      	cmp	r3, #0
 800420a:	bf0c      	ite	eq
 800420c:	2301      	moveq	r3, #1
 800420e:	2300      	movne	r3, #0
 8004210:	b2db      	uxtb	r3, r3
 8004212:	2b00      	cmp	r3, #0
 8004214:	d001      	beq.n	800421a <HAL_I2C_Init+0x196>
 8004216:	2301      	movs	r3, #1
 8004218:	e022      	b.n	8004260 <HAL_I2C_Init+0x1dc>
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	689b      	ldr	r3, [r3, #8]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d10e      	bne.n	8004240 <HAL_I2C_Init+0x1bc>
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	1e58      	subs	r0, r3, #1
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6859      	ldr	r1, [r3, #4]
 800422a:	460b      	mov	r3, r1
 800422c:	005b      	lsls	r3, r3, #1
 800422e:	440b      	add	r3, r1
 8004230:	fbb0 f3f3 	udiv	r3, r0, r3
 8004234:	3301      	adds	r3, #1
 8004236:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800423a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800423e:	e00f      	b.n	8004260 <HAL_I2C_Init+0x1dc>
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	1e58      	subs	r0, r3, #1
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6859      	ldr	r1, [r3, #4]
 8004248:	460b      	mov	r3, r1
 800424a:	009b      	lsls	r3, r3, #2
 800424c:	440b      	add	r3, r1
 800424e:	0099      	lsls	r1, r3, #2
 8004250:	440b      	add	r3, r1
 8004252:	fbb0 f3f3 	udiv	r3, r0, r3
 8004256:	3301      	adds	r3, #1
 8004258:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800425c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004260:	6879      	ldr	r1, [r7, #4]
 8004262:	6809      	ldr	r1, [r1, #0]
 8004264:	4313      	orrs	r3, r2
 8004266:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	69da      	ldr	r2, [r3, #28]
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6a1b      	ldr	r3, [r3, #32]
 800427a:	431a      	orrs	r2, r3
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	430a      	orrs	r2, r1
 8004282:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	689b      	ldr	r3, [r3, #8]
 800428a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800428e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004292:	687a      	ldr	r2, [r7, #4]
 8004294:	6911      	ldr	r1, [r2, #16]
 8004296:	687a      	ldr	r2, [r7, #4]
 8004298:	68d2      	ldr	r2, [r2, #12]
 800429a:	4311      	orrs	r1, r2
 800429c:	687a      	ldr	r2, [r7, #4]
 800429e:	6812      	ldr	r2, [r2, #0]
 80042a0:	430b      	orrs	r3, r1
 80042a2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	68db      	ldr	r3, [r3, #12]
 80042aa:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	695a      	ldr	r2, [r3, #20]
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	699b      	ldr	r3, [r3, #24]
 80042b6:	431a      	orrs	r2, r3
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	430a      	orrs	r2, r1
 80042be:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	681a      	ldr	r2, [r3, #0]
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f042 0201 	orr.w	r2, r2, #1
 80042ce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2200      	movs	r2, #0
 80042d4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2220      	movs	r2, #32
 80042da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2200      	movs	r2, #0
 80042e2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2200      	movs	r2, #0
 80042e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80042ec:	2300      	movs	r3, #0
}
 80042ee:	4618      	mov	r0, r3
 80042f0:	3710      	adds	r7, #16
 80042f2:	46bd      	mov	sp, r7
 80042f4:	bd80      	pop	{r7, pc}
 80042f6:	bf00      	nop
 80042f8:	000186a0 	.word	0x000186a0
 80042fc:	001e847f 	.word	0x001e847f
 8004300:	003d08ff 	.word	0x003d08ff
 8004304:	431bde83 	.word	0x431bde83
 8004308:	10624dd3 	.word	0x10624dd3

0800430c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b088      	sub	sp, #32
 8004310:	af02      	add	r7, sp, #8
 8004312:	60f8      	str	r0, [r7, #12]
 8004314:	607a      	str	r2, [r7, #4]
 8004316:	461a      	mov	r2, r3
 8004318:	460b      	mov	r3, r1
 800431a:	817b      	strh	r3, [r7, #10]
 800431c:	4613      	mov	r3, r2
 800431e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004320:	f7ff fb90 	bl	8003a44 <HAL_GetTick>
 8004324:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800432c:	b2db      	uxtb	r3, r3
 800432e:	2b20      	cmp	r3, #32
 8004330:	f040 80e0 	bne.w	80044f4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004334:	697b      	ldr	r3, [r7, #20]
 8004336:	9300      	str	r3, [sp, #0]
 8004338:	2319      	movs	r3, #25
 800433a:	2201      	movs	r2, #1
 800433c:	4970      	ldr	r1, [pc, #448]	@ (8004500 <HAL_I2C_Master_Transmit+0x1f4>)
 800433e:	68f8      	ldr	r0, [r7, #12]
 8004340:	f000 fc64 	bl	8004c0c <I2C_WaitOnFlagUntilTimeout>
 8004344:	4603      	mov	r3, r0
 8004346:	2b00      	cmp	r3, #0
 8004348:	d001      	beq.n	800434e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800434a:	2302      	movs	r3, #2
 800434c:	e0d3      	b.n	80044f6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004354:	2b01      	cmp	r3, #1
 8004356:	d101      	bne.n	800435c <HAL_I2C_Master_Transmit+0x50>
 8004358:	2302      	movs	r3, #2
 800435a:	e0cc      	b.n	80044f6 <HAL_I2C_Master_Transmit+0x1ea>
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	2201      	movs	r2, #1
 8004360:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f003 0301 	and.w	r3, r3, #1
 800436e:	2b01      	cmp	r3, #1
 8004370:	d007      	beq.n	8004382 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	681a      	ldr	r2, [r3, #0]
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f042 0201 	orr.w	r2, r2, #1
 8004380:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	681a      	ldr	r2, [r3, #0]
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004390:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	2221      	movs	r2, #33	@ 0x21
 8004396:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	2210      	movs	r2, #16
 800439e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	2200      	movs	r2, #0
 80043a6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	687a      	ldr	r2, [r7, #4]
 80043ac:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	893a      	ldrh	r2, [r7, #8]
 80043b2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043b8:	b29a      	uxth	r2, r3
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	4a50      	ldr	r2, [pc, #320]	@ (8004504 <HAL_I2C_Master_Transmit+0x1f8>)
 80043c2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80043c4:	8979      	ldrh	r1, [r7, #10]
 80043c6:	697b      	ldr	r3, [r7, #20]
 80043c8:	6a3a      	ldr	r2, [r7, #32]
 80043ca:	68f8      	ldr	r0, [r7, #12]
 80043cc:	f000 face 	bl	800496c <I2C_MasterRequestWrite>
 80043d0:	4603      	mov	r3, r0
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d001      	beq.n	80043da <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80043d6:	2301      	movs	r3, #1
 80043d8:	e08d      	b.n	80044f6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043da:	2300      	movs	r3, #0
 80043dc:	613b      	str	r3, [r7, #16]
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	695b      	ldr	r3, [r3, #20]
 80043e4:	613b      	str	r3, [r7, #16]
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	699b      	ldr	r3, [r3, #24]
 80043ec:	613b      	str	r3, [r7, #16]
 80043ee:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80043f0:	e066      	b.n	80044c0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80043f2:	697a      	ldr	r2, [r7, #20]
 80043f4:	6a39      	ldr	r1, [r7, #32]
 80043f6:	68f8      	ldr	r0, [r7, #12]
 80043f8:	f000 fd22 	bl	8004e40 <I2C_WaitOnTXEFlagUntilTimeout>
 80043fc:	4603      	mov	r3, r0
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d00d      	beq.n	800441e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004406:	2b04      	cmp	r3, #4
 8004408:	d107      	bne.n	800441a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	681a      	ldr	r2, [r3, #0]
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004418:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800441a:	2301      	movs	r3, #1
 800441c:	e06b      	b.n	80044f6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004422:	781a      	ldrb	r2, [r3, #0]
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800442e:	1c5a      	adds	r2, r3, #1
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004438:	b29b      	uxth	r3, r3
 800443a:	3b01      	subs	r3, #1
 800443c:	b29a      	uxth	r2, r3
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004446:	3b01      	subs	r3, #1
 8004448:	b29a      	uxth	r2, r3
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	695b      	ldr	r3, [r3, #20]
 8004454:	f003 0304 	and.w	r3, r3, #4
 8004458:	2b04      	cmp	r3, #4
 800445a:	d11b      	bne.n	8004494 <HAL_I2C_Master_Transmit+0x188>
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004460:	2b00      	cmp	r3, #0
 8004462:	d017      	beq.n	8004494 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004468:	781a      	ldrb	r2, [r3, #0]
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004474:	1c5a      	adds	r2, r3, #1
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800447e:	b29b      	uxth	r3, r3
 8004480:	3b01      	subs	r3, #1
 8004482:	b29a      	uxth	r2, r3
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800448c:	3b01      	subs	r3, #1
 800448e:	b29a      	uxth	r2, r3
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004494:	697a      	ldr	r2, [r7, #20]
 8004496:	6a39      	ldr	r1, [r7, #32]
 8004498:	68f8      	ldr	r0, [r7, #12]
 800449a:	f000 fd19 	bl	8004ed0 <I2C_WaitOnBTFFlagUntilTimeout>
 800449e:	4603      	mov	r3, r0
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d00d      	beq.n	80044c0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044a8:	2b04      	cmp	r3, #4
 80044aa:	d107      	bne.n	80044bc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	681a      	ldr	r2, [r3, #0]
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80044ba:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80044bc:	2301      	movs	r3, #1
 80044be:	e01a      	b.n	80044f6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d194      	bne.n	80043f2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	681a      	ldr	r2, [r3, #0]
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80044d6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	2220      	movs	r2, #32
 80044dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	2200      	movs	r2, #0
 80044e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	2200      	movs	r2, #0
 80044ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80044f0:	2300      	movs	r3, #0
 80044f2:	e000      	b.n	80044f6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80044f4:	2302      	movs	r3, #2
  }
}
 80044f6:	4618      	mov	r0, r3
 80044f8:	3718      	adds	r7, #24
 80044fa:	46bd      	mov	sp, r7
 80044fc:	bd80      	pop	{r7, pc}
 80044fe:	bf00      	nop
 8004500:	00100002 	.word	0x00100002
 8004504:	ffff0000 	.word	0xffff0000

08004508 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b08c      	sub	sp, #48	@ 0x30
 800450c:	af02      	add	r7, sp, #8
 800450e:	60f8      	str	r0, [r7, #12]
 8004510:	607a      	str	r2, [r7, #4]
 8004512:	461a      	mov	r2, r3
 8004514:	460b      	mov	r3, r1
 8004516:	817b      	strh	r3, [r7, #10]
 8004518:	4613      	mov	r3, r2
 800451a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800451c:	f7ff fa92 	bl	8003a44 <HAL_GetTick>
 8004520:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004528:	b2db      	uxtb	r3, r3
 800452a:	2b20      	cmp	r3, #32
 800452c:	f040 8217 	bne.w	800495e <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004530:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004532:	9300      	str	r3, [sp, #0]
 8004534:	2319      	movs	r3, #25
 8004536:	2201      	movs	r2, #1
 8004538:	497c      	ldr	r1, [pc, #496]	@ (800472c <HAL_I2C_Master_Receive+0x224>)
 800453a:	68f8      	ldr	r0, [r7, #12]
 800453c:	f000 fb66 	bl	8004c0c <I2C_WaitOnFlagUntilTimeout>
 8004540:	4603      	mov	r3, r0
 8004542:	2b00      	cmp	r3, #0
 8004544:	d001      	beq.n	800454a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8004546:	2302      	movs	r3, #2
 8004548:	e20a      	b.n	8004960 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004550:	2b01      	cmp	r3, #1
 8004552:	d101      	bne.n	8004558 <HAL_I2C_Master_Receive+0x50>
 8004554:	2302      	movs	r3, #2
 8004556:	e203      	b.n	8004960 <HAL_I2C_Master_Receive+0x458>
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	2201      	movs	r2, #1
 800455c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f003 0301 	and.w	r3, r3, #1
 800456a:	2b01      	cmp	r3, #1
 800456c:	d007      	beq.n	800457e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	681a      	ldr	r2, [r3, #0]
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f042 0201 	orr.w	r2, r2, #1
 800457c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	681a      	ldr	r2, [r3, #0]
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800458c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	2222      	movs	r2, #34	@ 0x22
 8004592:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	2210      	movs	r2, #16
 800459a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	2200      	movs	r2, #0
 80045a2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	687a      	ldr	r2, [r7, #4]
 80045a8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	893a      	ldrh	r2, [r7, #8]
 80045ae:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045b4:	b29a      	uxth	r2, r3
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	4a5c      	ldr	r2, [pc, #368]	@ (8004730 <HAL_I2C_Master_Receive+0x228>)
 80045be:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80045c0:	8979      	ldrh	r1, [r7, #10]
 80045c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80045c6:	68f8      	ldr	r0, [r7, #12]
 80045c8:	f000 fa52 	bl	8004a70 <I2C_MasterRequestRead>
 80045cc:	4603      	mov	r3, r0
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d001      	beq.n	80045d6 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80045d2:	2301      	movs	r3, #1
 80045d4:	e1c4      	b.n	8004960 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d113      	bne.n	8004606 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045de:	2300      	movs	r3, #0
 80045e0:	623b      	str	r3, [r7, #32]
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	695b      	ldr	r3, [r3, #20]
 80045e8:	623b      	str	r3, [r7, #32]
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	699b      	ldr	r3, [r3, #24]
 80045f0:	623b      	str	r3, [r7, #32]
 80045f2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	681a      	ldr	r2, [r3, #0]
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004602:	601a      	str	r2, [r3, #0]
 8004604:	e198      	b.n	8004938 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800460a:	2b01      	cmp	r3, #1
 800460c:	d11b      	bne.n	8004646 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	681a      	ldr	r2, [r3, #0]
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800461c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800461e:	2300      	movs	r3, #0
 8004620:	61fb      	str	r3, [r7, #28]
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	695b      	ldr	r3, [r3, #20]
 8004628:	61fb      	str	r3, [r7, #28]
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	699b      	ldr	r3, [r3, #24]
 8004630:	61fb      	str	r3, [r7, #28]
 8004632:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	681a      	ldr	r2, [r3, #0]
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004642:	601a      	str	r2, [r3, #0]
 8004644:	e178      	b.n	8004938 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800464a:	2b02      	cmp	r3, #2
 800464c:	d11b      	bne.n	8004686 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	681a      	ldr	r2, [r3, #0]
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800465c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	681a      	ldr	r2, [r3, #0]
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800466c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800466e:	2300      	movs	r3, #0
 8004670:	61bb      	str	r3, [r7, #24]
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	695b      	ldr	r3, [r3, #20]
 8004678:	61bb      	str	r3, [r7, #24]
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	699b      	ldr	r3, [r3, #24]
 8004680:	61bb      	str	r3, [r7, #24]
 8004682:	69bb      	ldr	r3, [r7, #24]
 8004684:	e158      	b.n	8004938 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	681a      	ldr	r2, [r3, #0]
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004694:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004696:	2300      	movs	r3, #0
 8004698:	617b      	str	r3, [r7, #20]
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	695b      	ldr	r3, [r3, #20]
 80046a0:	617b      	str	r3, [r7, #20]
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	699b      	ldr	r3, [r3, #24]
 80046a8:	617b      	str	r3, [r7, #20]
 80046aa:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80046ac:	e144      	b.n	8004938 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046b2:	2b03      	cmp	r3, #3
 80046b4:	f200 80f1 	bhi.w	800489a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046bc:	2b01      	cmp	r3, #1
 80046be:	d123      	bne.n	8004708 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80046c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80046c2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80046c4:	68f8      	ldr	r0, [r7, #12]
 80046c6:	f000 fc4b 	bl	8004f60 <I2C_WaitOnRXNEFlagUntilTimeout>
 80046ca:	4603      	mov	r3, r0
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d001      	beq.n	80046d4 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80046d0:	2301      	movs	r3, #1
 80046d2:	e145      	b.n	8004960 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	691a      	ldr	r2, [r3, #16]
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046de:	b2d2      	uxtb	r2, r2
 80046e0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046e6:	1c5a      	adds	r2, r3, #1
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046f0:	3b01      	subs	r3, #1
 80046f2:	b29a      	uxth	r2, r3
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046fc:	b29b      	uxth	r3, r3
 80046fe:	3b01      	subs	r3, #1
 8004700:	b29a      	uxth	r2, r3
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004706:	e117      	b.n	8004938 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800470c:	2b02      	cmp	r3, #2
 800470e:	d14e      	bne.n	80047ae <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004710:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004712:	9300      	str	r3, [sp, #0]
 8004714:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004716:	2200      	movs	r2, #0
 8004718:	4906      	ldr	r1, [pc, #24]	@ (8004734 <HAL_I2C_Master_Receive+0x22c>)
 800471a:	68f8      	ldr	r0, [r7, #12]
 800471c:	f000 fa76 	bl	8004c0c <I2C_WaitOnFlagUntilTimeout>
 8004720:	4603      	mov	r3, r0
 8004722:	2b00      	cmp	r3, #0
 8004724:	d008      	beq.n	8004738 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8004726:	2301      	movs	r3, #1
 8004728:	e11a      	b.n	8004960 <HAL_I2C_Master_Receive+0x458>
 800472a:	bf00      	nop
 800472c:	00100002 	.word	0x00100002
 8004730:	ffff0000 	.word	0xffff0000
 8004734:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	681a      	ldr	r2, [r3, #0]
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004746:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	691a      	ldr	r2, [r3, #16]
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004752:	b2d2      	uxtb	r2, r2
 8004754:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800475a:	1c5a      	adds	r2, r3, #1
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004764:	3b01      	subs	r3, #1
 8004766:	b29a      	uxth	r2, r3
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004770:	b29b      	uxth	r3, r3
 8004772:	3b01      	subs	r3, #1
 8004774:	b29a      	uxth	r2, r3
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	691a      	ldr	r2, [r3, #16]
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004784:	b2d2      	uxtb	r2, r2
 8004786:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800478c:	1c5a      	adds	r2, r3, #1
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004796:	3b01      	subs	r3, #1
 8004798:	b29a      	uxth	r2, r3
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047a2:	b29b      	uxth	r3, r3
 80047a4:	3b01      	subs	r3, #1
 80047a6:	b29a      	uxth	r2, r3
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80047ac:	e0c4      	b.n	8004938 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80047ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047b0:	9300      	str	r3, [sp, #0]
 80047b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047b4:	2200      	movs	r2, #0
 80047b6:	496c      	ldr	r1, [pc, #432]	@ (8004968 <HAL_I2C_Master_Receive+0x460>)
 80047b8:	68f8      	ldr	r0, [r7, #12]
 80047ba:	f000 fa27 	bl	8004c0c <I2C_WaitOnFlagUntilTimeout>
 80047be:	4603      	mov	r3, r0
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d001      	beq.n	80047c8 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80047c4:	2301      	movs	r3, #1
 80047c6:	e0cb      	b.n	8004960 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	681a      	ldr	r2, [r3, #0]
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80047d6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	691a      	ldr	r2, [r3, #16]
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047e2:	b2d2      	uxtb	r2, r2
 80047e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047ea:	1c5a      	adds	r2, r3, #1
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047f4:	3b01      	subs	r3, #1
 80047f6:	b29a      	uxth	r2, r3
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004800:	b29b      	uxth	r3, r3
 8004802:	3b01      	subs	r3, #1
 8004804:	b29a      	uxth	r2, r3
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800480a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800480c:	9300      	str	r3, [sp, #0]
 800480e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004810:	2200      	movs	r2, #0
 8004812:	4955      	ldr	r1, [pc, #340]	@ (8004968 <HAL_I2C_Master_Receive+0x460>)
 8004814:	68f8      	ldr	r0, [r7, #12]
 8004816:	f000 f9f9 	bl	8004c0c <I2C_WaitOnFlagUntilTimeout>
 800481a:	4603      	mov	r3, r0
 800481c:	2b00      	cmp	r3, #0
 800481e:	d001      	beq.n	8004824 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8004820:	2301      	movs	r3, #1
 8004822:	e09d      	b.n	8004960 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	681a      	ldr	r2, [r3, #0]
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004832:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	691a      	ldr	r2, [r3, #16]
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800483e:	b2d2      	uxtb	r2, r2
 8004840:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004846:	1c5a      	adds	r2, r3, #1
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004850:	3b01      	subs	r3, #1
 8004852:	b29a      	uxth	r2, r3
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800485c:	b29b      	uxth	r3, r3
 800485e:	3b01      	subs	r3, #1
 8004860:	b29a      	uxth	r2, r3
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	691a      	ldr	r2, [r3, #16]
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004870:	b2d2      	uxtb	r2, r2
 8004872:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004878:	1c5a      	adds	r2, r3, #1
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004882:	3b01      	subs	r3, #1
 8004884:	b29a      	uxth	r2, r3
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800488e:	b29b      	uxth	r3, r3
 8004890:	3b01      	subs	r3, #1
 8004892:	b29a      	uxth	r2, r3
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004898:	e04e      	b.n	8004938 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800489a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800489c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800489e:	68f8      	ldr	r0, [r7, #12]
 80048a0:	f000 fb5e 	bl	8004f60 <I2C_WaitOnRXNEFlagUntilTimeout>
 80048a4:	4603      	mov	r3, r0
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d001      	beq.n	80048ae <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80048aa:	2301      	movs	r3, #1
 80048ac:	e058      	b.n	8004960 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	691a      	ldr	r2, [r3, #16]
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048b8:	b2d2      	uxtb	r2, r2
 80048ba:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048c0:	1c5a      	adds	r2, r3, #1
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80048ca:	3b01      	subs	r3, #1
 80048cc:	b29a      	uxth	r2, r3
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048d6:	b29b      	uxth	r3, r3
 80048d8:	3b01      	subs	r3, #1
 80048da:	b29a      	uxth	r2, r3
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	695b      	ldr	r3, [r3, #20]
 80048e6:	f003 0304 	and.w	r3, r3, #4
 80048ea:	2b04      	cmp	r3, #4
 80048ec:	d124      	bne.n	8004938 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80048f2:	2b03      	cmp	r3, #3
 80048f4:	d107      	bne.n	8004906 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	681a      	ldr	r2, [r3, #0]
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004904:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	691a      	ldr	r2, [r3, #16]
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004910:	b2d2      	uxtb	r2, r2
 8004912:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004918:	1c5a      	adds	r2, r3, #1
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004922:	3b01      	subs	r3, #1
 8004924:	b29a      	uxth	r2, r3
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800492e:	b29b      	uxth	r3, r3
 8004930:	3b01      	subs	r3, #1
 8004932:	b29a      	uxth	r2, r3
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800493c:	2b00      	cmp	r3, #0
 800493e:	f47f aeb6 	bne.w	80046ae <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	2220      	movs	r2, #32
 8004946:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	2200      	movs	r2, #0
 800494e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	2200      	movs	r2, #0
 8004956:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800495a:	2300      	movs	r3, #0
 800495c:	e000      	b.n	8004960 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 800495e:	2302      	movs	r3, #2
  }
}
 8004960:	4618      	mov	r0, r3
 8004962:	3728      	adds	r7, #40	@ 0x28
 8004964:	46bd      	mov	sp, r7
 8004966:	bd80      	pop	{r7, pc}
 8004968:	00010004 	.word	0x00010004

0800496c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800496c:	b580      	push	{r7, lr}
 800496e:	b088      	sub	sp, #32
 8004970:	af02      	add	r7, sp, #8
 8004972:	60f8      	str	r0, [r7, #12]
 8004974:	607a      	str	r2, [r7, #4]
 8004976:	603b      	str	r3, [r7, #0]
 8004978:	460b      	mov	r3, r1
 800497a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004980:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004982:	697b      	ldr	r3, [r7, #20]
 8004984:	2b08      	cmp	r3, #8
 8004986:	d006      	beq.n	8004996 <I2C_MasterRequestWrite+0x2a>
 8004988:	697b      	ldr	r3, [r7, #20]
 800498a:	2b01      	cmp	r3, #1
 800498c:	d003      	beq.n	8004996 <I2C_MasterRequestWrite+0x2a>
 800498e:	697b      	ldr	r3, [r7, #20]
 8004990:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004994:	d108      	bne.n	80049a8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	681a      	ldr	r2, [r3, #0]
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80049a4:	601a      	str	r2, [r3, #0]
 80049a6:	e00b      	b.n	80049c0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049ac:	2b12      	cmp	r3, #18
 80049ae:	d107      	bne.n	80049c0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	681a      	ldr	r2, [r3, #0]
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80049be:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	9300      	str	r3, [sp, #0]
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2200      	movs	r2, #0
 80049c8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80049cc:	68f8      	ldr	r0, [r7, #12]
 80049ce:	f000 f91d 	bl	8004c0c <I2C_WaitOnFlagUntilTimeout>
 80049d2:	4603      	mov	r3, r0
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d00d      	beq.n	80049f4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80049e6:	d103      	bne.n	80049f0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80049ee:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80049f0:	2303      	movs	r3, #3
 80049f2:	e035      	b.n	8004a60 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	691b      	ldr	r3, [r3, #16]
 80049f8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80049fc:	d108      	bne.n	8004a10 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80049fe:	897b      	ldrh	r3, [r7, #10]
 8004a00:	b2db      	uxtb	r3, r3
 8004a02:	461a      	mov	r2, r3
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004a0c:	611a      	str	r2, [r3, #16]
 8004a0e:	e01b      	b.n	8004a48 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004a10:	897b      	ldrh	r3, [r7, #10]
 8004a12:	11db      	asrs	r3, r3, #7
 8004a14:	b2db      	uxtb	r3, r3
 8004a16:	f003 0306 	and.w	r3, r3, #6
 8004a1a:	b2db      	uxtb	r3, r3
 8004a1c:	f063 030f 	orn	r3, r3, #15
 8004a20:	b2da      	uxtb	r2, r3
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	687a      	ldr	r2, [r7, #4]
 8004a2c:	490e      	ldr	r1, [pc, #56]	@ (8004a68 <I2C_MasterRequestWrite+0xfc>)
 8004a2e:	68f8      	ldr	r0, [r7, #12]
 8004a30:	f000 f966 	bl	8004d00 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004a34:	4603      	mov	r3, r0
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d001      	beq.n	8004a3e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	e010      	b.n	8004a60 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004a3e:	897b      	ldrh	r3, [r7, #10]
 8004a40:	b2da      	uxtb	r2, r3
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	687a      	ldr	r2, [r7, #4]
 8004a4c:	4907      	ldr	r1, [pc, #28]	@ (8004a6c <I2C_MasterRequestWrite+0x100>)
 8004a4e:	68f8      	ldr	r0, [r7, #12]
 8004a50:	f000 f956 	bl	8004d00 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004a54:	4603      	mov	r3, r0
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d001      	beq.n	8004a5e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	e000      	b.n	8004a60 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004a5e:	2300      	movs	r3, #0
}
 8004a60:	4618      	mov	r0, r3
 8004a62:	3718      	adds	r7, #24
 8004a64:	46bd      	mov	sp, r7
 8004a66:	bd80      	pop	{r7, pc}
 8004a68:	00010008 	.word	0x00010008
 8004a6c:	00010002 	.word	0x00010002

08004a70 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b088      	sub	sp, #32
 8004a74:	af02      	add	r7, sp, #8
 8004a76:	60f8      	str	r0, [r7, #12]
 8004a78:	607a      	str	r2, [r7, #4]
 8004a7a:	603b      	str	r3, [r7, #0]
 8004a7c:	460b      	mov	r3, r1
 8004a7e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a84:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	681a      	ldr	r2, [r3, #0]
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004a94:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004a96:	697b      	ldr	r3, [r7, #20]
 8004a98:	2b08      	cmp	r3, #8
 8004a9a:	d006      	beq.n	8004aaa <I2C_MasterRequestRead+0x3a>
 8004a9c:	697b      	ldr	r3, [r7, #20]
 8004a9e:	2b01      	cmp	r3, #1
 8004aa0:	d003      	beq.n	8004aaa <I2C_MasterRequestRead+0x3a>
 8004aa2:	697b      	ldr	r3, [r7, #20]
 8004aa4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004aa8:	d108      	bne.n	8004abc <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	681a      	ldr	r2, [r3, #0]
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004ab8:	601a      	str	r2, [r3, #0]
 8004aba:	e00b      	b.n	8004ad4 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ac0:	2b11      	cmp	r3, #17
 8004ac2:	d107      	bne.n	8004ad4 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	681a      	ldr	r2, [r3, #0]
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004ad2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	9300      	str	r3, [sp, #0]
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2200      	movs	r2, #0
 8004adc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004ae0:	68f8      	ldr	r0, [r7, #12]
 8004ae2:	f000 f893 	bl	8004c0c <I2C_WaitOnFlagUntilTimeout>
 8004ae6:	4603      	mov	r3, r0
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d00d      	beq.n	8004b08 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004af6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004afa:	d103      	bne.n	8004b04 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004b02:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004b04:	2303      	movs	r3, #3
 8004b06:	e079      	b.n	8004bfc <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	691b      	ldr	r3, [r3, #16]
 8004b0c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004b10:	d108      	bne.n	8004b24 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004b12:	897b      	ldrh	r3, [r7, #10]
 8004b14:	b2db      	uxtb	r3, r3
 8004b16:	f043 0301 	orr.w	r3, r3, #1
 8004b1a:	b2da      	uxtb	r2, r3
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	611a      	str	r2, [r3, #16]
 8004b22:	e05f      	b.n	8004be4 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004b24:	897b      	ldrh	r3, [r7, #10]
 8004b26:	11db      	asrs	r3, r3, #7
 8004b28:	b2db      	uxtb	r3, r3
 8004b2a:	f003 0306 	and.w	r3, r3, #6
 8004b2e:	b2db      	uxtb	r3, r3
 8004b30:	f063 030f 	orn	r3, r3, #15
 8004b34:	b2da      	uxtb	r2, r3
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	687a      	ldr	r2, [r7, #4]
 8004b40:	4930      	ldr	r1, [pc, #192]	@ (8004c04 <I2C_MasterRequestRead+0x194>)
 8004b42:	68f8      	ldr	r0, [r7, #12]
 8004b44:	f000 f8dc 	bl	8004d00 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004b48:	4603      	mov	r3, r0
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d001      	beq.n	8004b52 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8004b4e:	2301      	movs	r3, #1
 8004b50:	e054      	b.n	8004bfc <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004b52:	897b      	ldrh	r3, [r7, #10]
 8004b54:	b2da      	uxtb	r2, r3
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	687a      	ldr	r2, [r7, #4]
 8004b60:	4929      	ldr	r1, [pc, #164]	@ (8004c08 <I2C_MasterRequestRead+0x198>)
 8004b62:	68f8      	ldr	r0, [r7, #12]
 8004b64:	f000 f8cc 	bl	8004d00 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004b68:	4603      	mov	r3, r0
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d001      	beq.n	8004b72 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8004b6e:	2301      	movs	r3, #1
 8004b70:	e044      	b.n	8004bfc <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b72:	2300      	movs	r3, #0
 8004b74:	613b      	str	r3, [r7, #16]
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	695b      	ldr	r3, [r3, #20]
 8004b7c:	613b      	str	r3, [r7, #16]
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	699b      	ldr	r3, [r3, #24]
 8004b84:	613b      	str	r3, [r7, #16]
 8004b86:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	681a      	ldr	r2, [r3, #0]
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004b96:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	9300      	str	r3, [sp, #0]
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004ba4:	68f8      	ldr	r0, [r7, #12]
 8004ba6:	f000 f831 	bl	8004c0c <I2C_WaitOnFlagUntilTimeout>
 8004baa:	4603      	mov	r3, r0
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d00d      	beq.n	8004bcc <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004bba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004bbe:	d103      	bne.n	8004bc8 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004bc6:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8004bc8:	2303      	movs	r3, #3
 8004bca:	e017      	b.n	8004bfc <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004bcc:	897b      	ldrh	r3, [r7, #10]
 8004bce:	11db      	asrs	r3, r3, #7
 8004bd0:	b2db      	uxtb	r3, r3
 8004bd2:	f003 0306 	and.w	r3, r3, #6
 8004bd6:	b2db      	uxtb	r3, r3
 8004bd8:	f063 030e 	orn	r3, r3, #14
 8004bdc:	b2da      	uxtb	r2, r3
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	687a      	ldr	r2, [r7, #4]
 8004be8:	4907      	ldr	r1, [pc, #28]	@ (8004c08 <I2C_MasterRequestRead+0x198>)
 8004bea:	68f8      	ldr	r0, [r7, #12]
 8004bec:	f000 f888 	bl	8004d00 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004bf0:	4603      	mov	r3, r0
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d001      	beq.n	8004bfa <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	e000      	b.n	8004bfc <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8004bfa:	2300      	movs	r3, #0
}
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	3718      	adds	r7, #24
 8004c00:	46bd      	mov	sp, r7
 8004c02:	bd80      	pop	{r7, pc}
 8004c04:	00010008 	.word	0x00010008
 8004c08:	00010002 	.word	0x00010002

08004c0c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b084      	sub	sp, #16
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	60f8      	str	r0, [r7, #12]
 8004c14:	60b9      	str	r1, [r7, #8]
 8004c16:	603b      	str	r3, [r7, #0]
 8004c18:	4613      	mov	r3, r2
 8004c1a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004c1c:	e048      	b.n	8004cb0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c24:	d044      	beq.n	8004cb0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c26:	f7fe ff0d 	bl	8003a44 <HAL_GetTick>
 8004c2a:	4602      	mov	r2, r0
 8004c2c:	69bb      	ldr	r3, [r7, #24]
 8004c2e:	1ad3      	subs	r3, r2, r3
 8004c30:	683a      	ldr	r2, [r7, #0]
 8004c32:	429a      	cmp	r2, r3
 8004c34:	d302      	bcc.n	8004c3c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d139      	bne.n	8004cb0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004c3c:	68bb      	ldr	r3, [r7, #8]
 8004c3e:	0c1b      	lsrs	r3, r3, #16
 8004c40:	b2db      	uxtb	r3, r3
 8004c42:	2b01      	cmp	r3, #1
 8004c44:	d10d      	bne.n	8004c62 <I2C_WaitOnFlagUntilTimeout+0x56>
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	695b      	ldr	r3, [r3, #20]
 8004c4c:	43da      	mvns	r2, r3
 8004c4e:	68bb      	ldr	r3, [r7, #8]
 8004c50:	4013      	ands	r3, r2
 8004c52:	b29b      	uxth	r3, r3
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	bf0c      	ite	eq
 8004c58:	2301      	moveq	r3, #1
 8004c5a:	2300      	movne	r3, #0
 8004c5c:	b2db      	uxtb	r3, r3
 8004c5e:	461a      	mov	r2, r3
 8004c60:	e00c      	b.n	8004c7c <I2C_WaitOnFlagUntilTimeout+0x70>
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	699b      	ldr	r3, [r3, #24]
 8004c68:	43da      	mvns	r2, r3
 8004c6a:	68bb      	ldr	r3, [r7, #8]
 8004c6c:	4013      	ands	r3, r2
 8004c6e:	b29b      	uxth	r3, r3
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	bf0c      	ite	eq
 8004c74:	2301      	moveq	r3, #1
 8004c76:	2300      	movne	r3, #0
 8004c78:	b2db      	uxtb	r3, r3
 8004c7a:	461a      	mov	r2, r3
 8004c7c:	79fb      	ldrb	r3, [r7, #7]
 8004c7e:	429a      	cmp	r2, r3
 8004c80:	d116      	bne.n	8004cb0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	2200      	movs	r2, #0
 8004c86:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	2220      	movs	r2, #32
 8004c8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	2200      	movs	r2, #0
 8004c94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c9c:	f043 0220 	orr.w	r2, r3, #32
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004cac:	2301      	movs	r3, #1
 8004cae:	e023      	b.n	8004cf8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004cb0:	68bb      	ldr	r3, [r7, #8]
 8004cb2:	0c1b      	lsrs	r3, r3, #16
 8004cb4:	b2db      	uxtb	r3, r3
 8004cb6:	2b01      	cmp	r3, #1
 8004cb8:	d10d      	bne.n	8004cd6 <I2C_WaitOnFlagUntilTimeout+0xca>
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	695b      	ldr	r3, [r3, #20]
 8004cc0:	43da      	mvns	r2, r3
 8004cc2:	68bb      	ldr	r3, [r7, #8]
 8004cc4:	4013      	ands	r3, r2
 8004cc6:	b29b      	uxth	r3, r3
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	bf0c      	ite	eq
 8004ccc:	2301      	moveq	r3, #1
 8004cce:	2300      	movne	r3, #0
 8004cd0:	b2db      	uxtb	r3, r3
 8004cd2:	461a      	mov	r2, r3
 8004cd4:	e00c      	b.n	8004cf0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	699b      	ldr	r3, [r3, #24]
 8004cdc:	43da      	mvns	r2, r3
 8004cde:	68bb      	ldr	r3, [r7, #8]
 8004ce0:	4013      	ands	r3, r2
 8004ce2:	b29b      	uxth	r3, r3
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	bf0c      	ite	eq
 8004ce8:	2301      	moveq	r3, #1
 8004cea:	2300      	movne	r3, #0
 8004cec:	b2db      	uxtb	r3, r3
 8004cee:	461a      	mov	r2, r3
 8004cf0:	79fb      	ldrb	r3, [r7, #7]
 8004cf2:	429a      	cmp	r2, r3
 8004cf4:	d093      	beq.n	8004c1e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004cf6:	2300      	movs	r3, #0
}
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	3710      	adds	r7, #16
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	bd80      	pop	{r7, pc}

08004d00 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b084      	sub	sp, #16
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	60f8      	str	r0, [r7, #12]
 8004d08:	60b9      	str	r1, [r7, #8]
 8004d0a:	607a      	str	r2, [r7, #4]
 8004d0c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004d0e:	e071      	b.n	8004df4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	695b      	ldr	r3, [r3, #20]
 8004d16:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d1a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d1e:	d123      	bne.n	8004d68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	681a      	ldr	r2, [r3, #0]
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004d2e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004d38:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	2220      	movs	r2, #32
 8004d44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d54:	f043 0204 	orr.w	r2, r3, #4
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	2200      	movs	r2, #0
 8004d60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004d64:	2301      	movs	r3, #1
 8004d66:	e067      	b.n	8004e38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d6e:	d041      	beq.n	8004df4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d70:	f7fe fe68 	bl	8003a44 <HAL_GetTick>
 8004d74:	4602      	mov	r2, r0
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	1ad3      	subs	r3, r2, r3
 8004d7a:	687a      	ldr	r2, [r7, #4]
 8004d7c:	429a      	cmp	r2, r3
 8004d7e:	d302      	bcc.n	8004d86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d136      	bne.n	8004df4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004d86:	68bb      	ldr	r3, [r7, #8]
 8004d88:	0c1b      	lsrs	r3, r3, #16
 8004d8a:	b2db      	uxtb	r3, r3
 8004d8c:	2b01      	cmp	r3, #1
 8004d8e:	d10c      	bne.n	8004daa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	695b      	ldr	r3, [r3, #20]
 8004d96:	43da      	mvns	r2, r3
 8004d98:	68bb      	ldr	r3, [r7, #8]
 8004d9a:	4013      	ands	r3, r2
 8004d9c:	b29b      	uxth	r3, r3
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	bf14      	ite	ne
 8004da2:	2301      	movne	r3, #1
 8004da4:	2300      	moveq	r3, #0
 8004da6:	b2db      	uxtb	r3, r3
 8004da8:	e00b      	b.n	8004dc2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	699b      	ldr	r3, [r3, #24]
 8004db0:	43da      	mvns	r2, r3
 8004db2:	68bb      	ldr	r3, [r7, #8]
 8004db4:	4013      	ands	r3, r2
 8004db6:	b29b      	uxth	r3, r3
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	bf14      	ite	ne
 8004dbc:	2301      	movne	r3, #1
 8004dbe:	2300      	moveq	r3, #0
 8004dc0:	b2db      	uxtb	r3, r3
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d016      	beq.n	8004df4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	2200      	movs	r2, #0
 8004dca:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	2220      	movs	r2, #32
 8004dd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004de0:	f043 0220 	orr.w	r2, r3, #32
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	2200      	movs	r2, #0
 8004dec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004df0:	2301      	movs	r3, #1
 8004df2:	e021      	b.n	8004e38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004df4:	68bb      	ldr	r3, [r7, #8]
 8004df6:	0c1b      	lsrs	r3, r3, #16
 8004df8:	b2db      	uxtb	r3, r3
 8004dfa:	2b01      	cmp	r3, #1
 8004dfc:	d10c      	bne.n	8004e18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	695b      	ldr	r3, [r3, #20]
 8004e04:	43da      	mvns	r2, r3
 8004e06:	68bb      	ldr	r3, [r7, #8]
 8004e08:	4013      	ands	r3, r2
 8004e0a:	b29b      	uxth	r3, r3
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	bf14      	ite	ne
 8004e10:	2301      	movne	r3, #1
 8004e12:	2300      	moveq	r3, #0
 8004e14:	b2db      	uxtb	r3, r3
 8004e16:	e00b      	b.n	8004e30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	699b      	ldr	r3, [r3, #24]
 8004e1e:	43da      	mvns	r2, r3
 8004e20:	68bb      	ldr	r3, [r7, #8]
 8004e22:	4013      	ands	r3, r2
 8004e24:	b29b      	uxth	r3, r3
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	bf14      	ite	ne
 8004e2a:	2301      	movne	r3, #1
 8004e2c:	2300      	moveq	r3, #0
 8004e2e:	b2db      	uxtb	r3, r3
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	f47f af6d 	bne.w	8004d10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004e36:	2300      	movs	r3, #0
}
 8004e38:	4618      	mov	r0, r3
 8004e3a:	3710      	adds	r7, #16
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	bd80      	pop	{r7, pc}

08004e40 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b084      	sub	sp, #16
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	60f8      	str	r0, [r7, #12]
 8004e48:	60b9      	str	r1, [r7, #8]
 8004e4a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004e4c:	e034      	b.n	8004eb8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004e4e:	68f8      	ldr	r0, [r7, #12]
 8004e50:	f000 f8e3 	bl	800501a <I2C_IsAcknowledgeFailed>
 8004e54:	4603      	mov	r3, r0
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d001      	beq.n	8004e5e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	e034      	b.n	8004ec8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e5e:	68bb      	ldr	r3, [r7, #8]
 8004e60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e64:	d028      	beq.n	8004eb8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e66:	f7fe fded 	bl	8003a44 <HAL_GetTick>
 8004e6a:	4602      	mov	r2, r0
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	1ad3      	subs	r3, r2, r3
 8004e70:	68ba      	ldr	r2, [r7, #8]
 8004e72:	429a      	cmp	r2, r3
 8004e74:	d302      	bcc.n	8004e7c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004e76:	68bb      	ldr	r3, [r7, #8]
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d11d      	bne.n	8004eb8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	695b      	ldr	r3, [r3, #20]
 8004e82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e86:	2b80      	cmp	r3, #128	@ 0x80
 8004e88:	d016      	beq.n	8004eb8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	2220      	movs	r2, #32
 8004e94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ea4:	f043 0220 	orr.w	r2, r3, #32
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	2200      	movs	r2, #0
 8004eb0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004eb4:	2301      	movs	r3, #1
 8004eb6:	e007      	b.n	8004ec8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	695b      	ldr	r3, [r3, #20]
 8004ebe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ec2:	2b80      	cmp	r3, #128	@ 0x80
 8004ec4:	d1c3      	bne.n	8004e4e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004ec6:	2300      	movs	r3, #0
}
 8004ec8:	4618      	mov	r0, r3
 8004eca:	3710      	adds	r7, #16
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	bd80      	pop	{r7, pc}

08004ed0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b084      	sub	sp, #16
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	60f8      	str	r0, [r7, #12]
 8004ed8:	60b9      	str	r1, [r7, #8]
 8004eda:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004edc:	e034      	b.n	8004f48 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004ede:	68f8      	ldr	r0, [r7, #12]
 8004ee0:	f000 f89b 	bl	800501a <I2C_IsAcknowledgeFailed>
 8004ee4:	4603      	mov	r3, r0
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d001      	beq.n	8004eee <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004eea:	2301      	movs	r3, #1
 8004eec:	e034      	b.n	8004f58 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004eee:	68bb      	ldr	r3, [r7, #8]
 8004ef0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ef4:	d028      	beq.n	8004f48 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ef6:	f7fe fda5 	bl	8003a44 <HAL_GetTick>
 8004efa:	4602      	mov	r2, r0
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	1ad3      	subs	r3, r2, r3
 8004f00:	68ba      	ldr	r2, [r7, #8]
 8004f02:	429a      	cmp	r2, r3
 8004f04:	d302      	bcc.n	8004f0c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004f06:	68bb      	ldr	r3, [r7, #8]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d11d      	bne.n	8004f48 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	695b      	ldr	r3, [r3, #20]
 8004f12:	f003 0304 	and.w	r3, r3, #4
 8004f16:	2b04      	cmp	r3, #4
 8004f18:	d016      	beq.n	8004f48 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	2220      	movs	r2, #32
 8004f24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f34:	f043 0220 	orr.w	r2, r3, #32
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	2200      	movs	r2, #0
 8004f40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004f44:	2301      	movs	r3, #1
 8004f46:	e007      	b.n	8004f58 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	695b      	ldr	r3, [r3, #20]
 8004f4e:	f003 0304 	and.w	r3, r3, #4
 8004f52:	2b04      	cmp	r3, #4
 8004f54:	d1c3      	bne.n	8004ede <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004f56:	2300      	movs	r3, #0
}
 8004f58:	4618      	mov	r0, r3
 8004f5a:	3710      	adds	r7, #16
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	bd80      	pop	{r7, pc}

08004f60 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b084      	sub	sp, #16
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	60f8      	str	r0, [r7, #12]
 8004f68:	60b9      	str	r1, [r7, #8]
 8004f6a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004f6c:	e049      	b.n	8005002 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	695b      	ldr	r3, [r3, #20]
 8004f74:	f003 0310 	and.w	r3, r3, #16
 8004f78:	2b10      	cmp	r3, #16
 8004f7a:	d119      	bne.n	8004fb0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f06f 0210 	mvn.w	r2, #16
 8004f84:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	2200      	movs	r2, #0
 8004f8a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	2220      	movs	r2, #32
 8004f90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	2200      	movs	r2, #0
 8004f98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004fac:	2301      	movs	r3, #1
 8004fae:	e030      	b.n	8005012 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fb0:	f7fe fd48 	bl	8003a44 <HAL_GetTick>
 8004fb4:	4602      	mov	r2, r0
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	1ad3      	subs	r3, r2, r3
 8004fba:	68ba      	ldr	r2, [r7, #8]
 8004fbc:	429a      	cmp	r2, r3
 8004fbe:	d302      	bcc.n	8004fc6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004fc0:	68bb      	ldr	r3, [r7, #8]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d11d      	bne.n	8005002 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	695b      	ldr	r3, [r3, #20]
 8004fcc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fd0:	2b40      	cmp	r3, #64	@ 0x40
 8004fd2:	d016      	beq.n	8005002 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	2220      	movs	r2, #32
 8004fde:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fee:	f043 0220 	orr.w	r2, r3, #32
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004ffe:	2301      	movs	r3, #1
 8005000:	e007      	b.n	8005012 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	695b      	ldr	r3, [r3, #20]
 8005008:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800500c:	2b40      	cmp	r3, #64	@ 0x40
 800500e:	d1ae      	bne.n	8004f6e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005010:	2300      	movs	r3, #0
}
 8005012:	4618      	mov	r0, r3
 8005014:	3710      	adds	r7, #16
 8005016:	46bd      	mov	sp, r7
 8005018:	bd80      	pop	{r7, pc}

0800501a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800501a:	b480      	push	{r7}
 800501c:	b083      	sub	sp, #12
 800501e:	af00      	add	r7, sp, #0
 8005020:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	695b      	ldr	r3, [r3, #20]
 8005028:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800502c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005030:	d11b      	bne.n	800506a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800503a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2200      	movs	r2, #0
 8005040:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2220      	movs	r2, #32
 8005046:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2200      	movs	r2, #0
 800504e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005056:	f043 0204 	orr.w	r2, r3, #4
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2200      	movs	r2, #0
 8005062:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8005066:	2301      	movs	r3, #1
 8005068:	e000      	b.n	800506c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800506a:	2300      	movs	r3, #0
}
 800506c:	4618      	mov	r0, r3
 800506e:	370c      	adds	r7, #12
 8005070:	46bd      	mov	sp, r7
 8005072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005076:	4770      	bx	lr

08005078 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005078:	b580      	push	{r7, lr}
 800507a:	b084      	sub	sp, #16
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
 8005080:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d101      	bne.n	800508c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005088:	2301      	movs	r3, #1
 800508a:	e0cc      	b.n	8005226 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800508c:	4b68      	ldr	r3, [pc, #416]	@ (8005230 <HAL_RCC_ClockConfig+0x1b8>)
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f003 030f 	and.w	r3, r3, #15
 8005094:	683a      	ldr	r2, [r7, #0]
 8005096:	429a      	cmp	r2, r3
 8005098:	d90c      	bls.n	80050b4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800509a:	4b65      	ldr	r3, [pc, #404]	@ (8005230 <HAL_RCC_ClockConfig+0x1b8>)
 800509c:	683a      	ldr	r2, [r7, #0]
 800509e:	b2d2      	uxtb	r2, r2
 80050a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80050a2:	4b63      	ldr	r3, [pc, #396]	@ (8005230 <HAL_RCC_ClockConfig+0x1b8>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f003 030f 	and.w	r3, r3, #15
 80050aa:	683a      	ldr	r2, [r7, #0]
 80050ac:	429a      	cmp	r2, r3
 80050ae:	d001      	beq.n	80050b4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80050b0:	2301      	movs	r3, #1
 80050b2:	e0b8      	b.n	8005226 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f003 0302 	and.w	r3, r3, #2
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d020      	beq.n	8005102 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f003 0304 	and.w	r3, r3, #4
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d005      	beq.n	80050d8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80050cc:	4b59      	ldr	r3, [pc, #356]	@ (8005234 <HAL_RCC_ClockConfig+0x1bc>)
 80050ce:	689b      	ldr	r3, [r3, #8]
 80050d0:	4a58      	ldr	r2, [pc, #352]	@ (8005234 <HAL_RCC_ClockConfig+0x1bc>)
 80050d2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80050d6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f003 0308 	and.w	r3, r3, #8
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d005      	beq.n	80050f0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80050e4:	4b53      	ldr	r3, [pc, #332]	@ (8005234 <HAL_RCC_ClockConfig+0x1bc>)
 80050e6:	689b      	ldr	r3, [r3, #8]
 80050e8:	4a52      	ldr	r2, [pc, #328]	@ (8005234 <HAL_RCC_ClockConfig+0x1bc>)
 80050ea:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80050ee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80050f0:	4b50      	ldr	r3, [pc, #320]	@ (8005234 <HAL_RCC_ClockConfig+0x1bc>)
 80050f2:	689b      	ldr	r3, [r3, #8]
 80050f4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	689b      	ldr	r3, [r3, #8]
 80050fc:	494d      	ldr	r1, [pc, #308]	@ (8005234 <HAL_RCC_ClockConfig+0x1bc>)
 80050fe:	4313      	orrs	r3, r2
 8005100:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f003 0301 	and.w	r3, r3, #1
 800510a:	2b00      	cmp	r3, #0
 800510c:	d044      	beq.n	8005198 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	685b      	ldr	r3, [r3, #4]
 8005112:	2b01      	cmp	r3, #1
 8005114:	d107      	bne.n	8005126 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005116:	4b47      	ldr	r3, [pc, #284]	@ (8005234 <HAL_RCC_ClockConfig+0x1bc>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800511e:	2b00      	cmp	r3, #0
 8005120:	d119      	bne.n	8005156 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005122:	2301      	movs	r3, #1
 8005124:	e07f      	b.n	8005226 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	685b      	ldr	r3, [r3, #4]
 800512a:	2b02      	cmp	r3, #2
 800512c:	d003      	beq.n	8005136 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005132:	2b03      	cmp	r3, #3
 8005134:	d107      	bne.n	8005146 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005136:	4b3f      	ldr	r3, [pc, #252]	@ (8005234 <HAL_RCC_ClockConfig+0x1bc>)
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800513e:	2b00      	cmp	r3, #0
 8005140:	d109      	bne.n	8005156 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005142:	2301      	movs	r3, #1
 8005144:	e06f      	b.n	8005226 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005146:	4b3b      	ldr	r3, [pc, #236]	@ (8005234 <HAL_RCC_ClockConfig+0x1bc>)
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f003 0302 	and.w	r3, r3, #2
 800514e:	2b00      	cmp	r3, #0
 8005150:	d101      	bne.n	8005156 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005152:	2301      	movs	r3, #1
 8005154:	e067      	b.n	8005226 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005156:	4b37      	ldr	r3, [pc, #220]	@ (8005234 <HAL_RCC_ClockConfig+0x1bc>)
 8005158:	689b      	ldr	r3, [r3, #8]
 800515a:	f023 0203 	bic.w	r2, r3, #3
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	685b      	ldr	r3, [r3, #4]
 8005162:	4934      	ldr	r1, [pc, #208]	@ (8005234 <HAL_RCC_ClockConfig+0x1bc>)
 8005164:	4313      	orrs	r3, r2
 8005166:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005168:	f7fe fc6c 	bl	8003a44 <HAL_GetTick>
 800516c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800516e:	e00a      	b.n	8005186 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005170:	f7fe fc68 	bl	8003a44 <HAL_GetTick>
 8005174:	4602      	mov	r2, r0
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	1ad3      	subs	r3, r2, r3
 800517a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800517e:	4293      	cmp	r3, r2
 8005180:	d901      	bls.n	8005186 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005182:	2303      	movs	r3, #3
 8005184:	e04f      	b.n	8005226 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005186:	4b2b      	ldr	r3, [pc, #172]	@ (8005234 <HAL_RCC_ClockConfig+0x1bc>)
 8005188:	689b      	ldr	r3, [r3, #8]
 800518a:	f003 020c 	and.w	r2, r3, #12
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	685b      	ldr	r3, [r3, #4]
 8005192:	009b      	lsls	r3, r3, #2
 8005194:	429a      	cmp	r2, r3
 8005196:	d1eb      	bne.n	8005170 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005198:	4b25      	ldr	r3, [pc, #148]	@ (8005230 <HAL_RCC_ClockConfig+0x1b8>)
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f003 030f 	and.w	r3, r3, #15
 80051a0:	683a      	ldr	r2, [r7, #0]
 80051a2:	429a      	cmp	r2, r3
 80051a4:	d20c      	bcs.n	80051c0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051a6:	4b22      	ldr	r3, [pc, #136]	@ (8005230 <HAL_RCC_ClockConfig+0x1b8>)
 80051a8:	683a      	ldr	r2, [r7, #0]
 80051aa:	b2d2      	uxtb	r2, r2
 80051ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80051ae:	4b20      	ldr	r3, [pc, #128]	@ (8005230 <HAL_RCC_ClockConfig+0x1b8>)
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f003 030f 	and.w	r3, r3, #15
 80051b6:	683a      	ldr	r2, [r7, #0]
 80051b8:	429a      	cmp	r2, r3
 80051ba:	d001      	beq.n	80051c0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80051bc:	2301      	movs	r3, #1
 80051be:	e032      	b.n	8005226 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f003 0304 	and.w	r3, r3, #4
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d008      	beq.n	80051de <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80051cc:	4b19      	ldr	r3, [pc, #100]	@ (8005234 <HAL_RCC_ClockConfig+0x1bc>)
 80051ce:	689b      	ldr	r3, [r3, #8]
 80051d0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	68db      	ldr	r3, [r3, #12]
 80051d8:	4916      	ldr	r1, [pc, #88]	@ (8005234 <HAL_RCC_ClockConfig+0x1bc>)
 80051da:	4313      	orrs	r3, r2
 80051dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f003 0308 	and.w	r3, r3, #8
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d009      	beq.n	80051fe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80051ea:	4b12      	ldr	r3, [pc, #72]	@ (8005234 <HAL_RCC_ClockConfig+0x1bc>)
 80051ec:	689b      	ldr	r3, [r3, #8]
 80051ee:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	691b      	ldr	r3, [r3, #16]
 80051f6:	00db      	lsls	r3, r3, #3
 80051f8:	490e      	ldr	r1, [pc, #56]	@ (8005234 <HAL_RCC_ClockConfig+0x1bc>)
 80051fa:	4313      	orrs	r3, r2
 80051fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80051fe:	f000 fb7f 	bl	8005900 <HAL_RCC_GetSysClockFreq>
 8005202:	4602      	mov	r2, r0
 8005204:	4b0b      	ldr	r3, [pc, #44]	@ (8005234 <HAL_RCC_ClockConfig+0x1bc>)
 8005206:	689b      	ldr	r3, [r3, #8]
 8005208:	091b      	lsrs	r3, r3, #4
 800520a:	f003 030f 	and.w	r3, r3, #15
 800520e:	490a      	ldr	r1, [pc, #40]	@ (8005238 <HAL_RCC_ClockConfig+0x1c0>)
 8005210:	5ccb      	ldrb	r3, [r1, r3]
 8005212:	fa22 f303 	lsr.w	r3, r2, r3
 8005216:	4a09      	ldr	r2, [pc, #36]	@ (800523c <HAL_RCC_ClockConfig+0x1c4>)
 8005218:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800521a:	4b09      	ldr	r3, [pc, #36]	@ (8005240 <HAL_RCC_ClockConfig+0x1c8>)
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	4618      	mov	r0, r3
 8005220:	f7fe fbcc 	bl	80039bc <HAL_InitTick>

  return HAL_OK;
 8005224:	2300      	movs	r3, #0
}
 8005226:	4618      	mov	r0, r3
 8005228:	3710      	adds	r7, #16
 800522a:	46bd      	mov	sp, r7
 800522c:	bd80      	pop	{r7, pc}
 800522e:	bf00      	nop
 8005230:	40023c00 	.word	0x40023c00
 8005234:	40023800 	.word	0x40023800
 8005238:	0800a280 	.word	0x0800a280
 800523c:	20000028 	.word	0x20000028
 8005240:	20000030 	.word	0x20000030

08005244 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005244:	b480      	push	{r7}
 8005246:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005248:	4b03      	ldr	r3, [pc, #12]	@ (8005258 <HAL_RCC_GetHCLKFreq+0x14>)
 800524a:	681b      	ldr	r3, [r3, #0]
}
 800524c:	4618      	mov	r0, r3
 800524e:	46bd      	mov	sp, r7
 8005250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005254:	4770      	bx	lr
 8005256:	bf00      	nop
 8005258:	20000028 	.word	0x20000028

0800525c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800525c:	b580      	push	{r7, lr}
 800525e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005260:	f7ff fff0 	bl	8005244 <HAL_RCC_GetHCLKFreq>
 8005264:	4602      	mov	r2, r0
 8005266:	4b05      	ldr	r3, [pc, #20]	@ (800527c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005268:	689b      	ldr	r3, [r3, #8]
 800526a:	0a9b      	lsrs	r3, r3, #10
 800526c:	f003 0307 	and.w	r3, r3, #7
 8005270:	4903      	ldr	r1, [pc, #12]	@ (8005280 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005272:	5ccb      	ldrb	r3, [r1, r3]
 8005274:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005278:	4618      	mov	r0, r3
 800527a:	bd80      	pop	{r7, pc}
 800527c:	40023800 	.word	0x40023800
 8005280:	0800a290 	.word	0x0800a290

08005284 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005284:	b580      	push	{r7, lr}
 8005286:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005288:	f7ff ffdc 	bl	8005244 <HAL_RCC_GetHCLKFreq>
 800528c:	4602      	mov	r2, r0
 800528e:	4b05      	ldr	r3, [pc, #20]	@ (80052a4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005290:	689b      	ldr	r3, [r3, #8]
 8005292:	0b5b      	lsrs	r3, r3, #13
 8005294:	f003 0307 	and.w	r3, r3, #7
 8005298:	4903      	ldr	r1, [pc, #12]	@ (80052a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800529a:	5ccb      	ldrb	r3, [r1, r3]
 800529c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80052a0:	4618      	mov	r0, r3
 80052a2:	bd80      	pop	{r7, pc}
 80052a4:	40023800 	.word	0x40023800
 80052a8:	0800a290 	.word	0x0800a290

080052ac <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b08c      	sub	sp, #48	@ 0x30
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80052b4:	2300      	movs	r3, #0
 80052b6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmpreg1 = 0U;
 80052b8:	2300      	movs	r3, #0
 80052ba:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 80052bc:	2300      	movs	r3, #0
 80052be:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 80052c0:	2300      	movs	r3, #0
 80052c2:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 80052c4:	2300      	movs	r3, #0
 80052c6:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 80052c8:	2300      	movs	r3, #0
 80052ca:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 80052cc:	2300      	movs	r3, #0
 80052ce:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 80052d0:	2300      	movs	r3, #0
 80052d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t pllsaiused = 0U;
 80052d4:	2300      	movs	r3, #0
 80052d6:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f003 0301 	and.w	r3, r3, #1
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d010      	beq.n	8005306 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 80052e4:	4b6f      	ldr	r3, [pc, #444]	@ (80054a4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80052e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80052ea:	f023 62c0 	bic.w	r2, r3, #100663296	@ 0x6000000
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052f2:	496c      	ldr	r1, [pc, #432]	@ (80054a4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80052f4:	4313      	orrs	r3, r2
 80052f6:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d101      	bne.n	8005306 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8005302:	2301      	movs	r3, #1
 8005304:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f003 0302 	and.w	r3, r3, #2
 800530e:	2b00      	cmp	r3, #0
 8005310:	d010      	beq.n	8005334 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8005312:	4b64      	ldr	r3, [pc, #400]	@ (80054a4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005314:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005318:	f023 52c0 	bic.w	r2, r3, #402653184	@ 0x18000000
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005320:	4960      	ldr	r1, [pc, #384]	@ (80054a4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005322:	4313      	orrs	r3, r2
 8005324:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800532c:	2b00      	cmp	r3, #0
 800532e:	d101      	bne.n	8005334 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8005330:	2301      	movs	r3, #1
 8005332:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f003 0304 	and.w	r3, r3, #4
 800533c:	2b00      	cmp	r3, #0
 800533e:	d017      	beq.n	8005370 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005340:	4b58      	ldr	r3, [pc, #352]	@ (80054a4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005342:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005346:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800534e:	4955      	ldr	r1, [pc, #340]	@ (80054a4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005350:	4313      	orrs	r3, r2
 8005352:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800535a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800535e:	d101      	bne.n	8005364 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8005360:	2301      	movs	r3, #1
 8005362:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005368:	2b00      	cmp	r3, #0
 800536a:	d101      	bne.n	8005370 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 800536c:	2301      	movs	r3, #1
 800536e:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f003 0308 	and.w	r3, r3, #8
 8005378:	2b00      	cmp	r3, #0
 800537a:	d017      	beq.n	80053ac <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800537c:	4b49      	ldr	r3, [pc, #292]	@ (80054a4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800537e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005382:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800538a:	4946      	ldr	r1, [pc, #280]	@ (80054a4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800538c:	4313      	orrs	r3, r2
 800538e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005396:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800539a:	d101      	bne.n	80053a0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 800539c:	2301      	movs	r3, #1
 800539e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d101      	bne.n	80053ac <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 80053a8:	2301      	movs	r3, #1
 80053aa:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f003 0320 	and.w	r3, r3, #32
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	f000 808a 	beq.w	80054ce <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80053ba:	2300      	movs	r3, #0
 80053bc:	60bb      	str	r3, [r7, #8]
 80053be:	4b39      	ldr	r3, [pc, #228]	@ (80054a4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80053c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053c2:	4a38      	ldr	r2, [pc, #224]	@ (80054a4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80053c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80053c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80053ca:	4b36      	ldr	r3, [pc, #216]	@ (80054a4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80053cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80053d2:	60bb      	str	r3, [r7, #8]
 80053d4:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80053d6:	4b34      	ldr	r3, [pc, #208]	@ (80054a8 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	4a33      	ldr	r2, [pc, #204]	@ (80054a8 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80053dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80053e0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80053e2:	f7fe fb2f 	bl	8003a44 <HAL_GetTick>
 80053e6:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80053e8:	e008      	b.n	80053fc <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80053ea:	f7fe fb2b 	bl	8003a44 <HAL_GetTick>
 80053ee:	4602      	mov	r2, r0
 80053f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053f2:	1ad3      	subs	r3, r2, r3
 80053f4:	2b02      	cmp	r3, #2
 80053f6:	d901      	bls.n	80053fc <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 80053f8:	2303      	movs	r3, #3
 80053fa:	e278      	b.n	80058ee <HAL_RCCEx_PeriphCLKConfig+0x642>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80053fc:	4b2a      	ldr	r3, [pc, #168]	@ (80054a8 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005404:	2b00      	cmp	r3, #0
 8005406:	d0f0      	beq.n	80053ea <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005408:	4b26      	ldr	r3, [pc, #152]	@ (80054a4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800540a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800540c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005410:	623b      	str	r3, [r7, #32]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005412:	6a3b      	ldr	r3, [r7, #32]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d02f      	beq.n	8005478 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800541c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005420:	6a3a      	ldr	r2, [r7, #32]
 8005422:	429a      	cmp	r2, r3
 8005424:	d028      	beq.n	8005478 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005426:	4b1f      	ldr	r3, [pc, #124]	@ (80054a4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005428:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800542a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800542e:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005430:	4b1e      	ldr	r3, [pc, #120]	@ (80054ac <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8005432:	2201      	movs	r2, #1
 8005434:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005436:	4b1d      	ldr	r3, [pc, #116]	@ (80054ac <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8005438:	2200      	movs	r2, #0
 800543a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800543c:	4a19      	ldr	r2, [pc, #100]	@ (80054a4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800543e:	6a3b      	ldr	r3, [r7, #32]
 8005440:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005442:	4b18      	ldr	r3, [pc, #96]	@ (80054a4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005444:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005446:	f003 0301 	and.w	r3, r3, #1
 800544a:	2b01      	cmp	r3, #1
 800544c:	d114      	bne.n	8005478 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800544e:	f7fe faf9 	bl	8003a44 <HAL_GetTick>
 8005452:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005454:	e00a      	b.n	800546c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005456:	f7fe faf5 	bl	8003a44 <HAL_GetTick>
 800545a:	4602      	mov	r2, r0
 800545c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800545e:	1ad3      	subs	r3, r2, r3
 8005460:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005464:	4293      	cmp	r3, r2
 8005466:	d901      	bls.n	800546c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8005468:	2303      	movs	r3, #3
 800546a:	e240      	b.n	80058ee <HAL_RCCEx_PeriphCLKConfig+0x642>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800546c:	4b0d      	ldr	r3, [pc, #52]	@ (80054a4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800546e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005470:	f003 0302 	and.w	r3, r3, #2
 8005474:	2b00      	cmp	r3, #0
 8005476:	d0ee      	beq.n	8005456 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800547c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005480:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005484:	d114      	bne.n	80054b0 <HAL_RCCEx_PeriphCLKConfig+0x204>
 8005486:	4b07      	ldr	r3, [pc, #28]	@ (80054a4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005488:	689b      	ldr	r3, [r3, #8]
 800548a:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005492:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8005496:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800549a:	4902      	ldr	r1, [pc, #8]	@ (80054a4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800549c:	4313      	orrs	r3, r2
 800549e:	608b      	str	r3, [r1, #8]
 80054a0:	e00c      	b.n	80054bc <HAL_RCCEx_PeriphCLKConfig+0x210>
 80054a2:	bf00      	nop
 80054a4:	40023800 	.word	0x40023800
 80054a8:	40007000 	.word	0x40007000
 80054ac:	42470e40 	.word	0x42470e40
 80054b0:	4b4a      	ldr	r3, [pc, #296]	@ (80055dc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80054b2:	689b      	ldr	r3, [r3, #8]
 80054b4:	4a49      	ldr	r2, [pc, #292]	@ (80055dc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80054b6:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80054ba:	6093      	str	r3, [r2, #8]
 80054bc:	4b47      	ldr	r3, [pc, #284]	@ (80055dc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80054be:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80054c8:	4944      	ldr	r1, [pc, #272]	@ (80055dc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80054ca:	4313      	orrs	r3, r2
 80054cc:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f003 0310 	and.w	r3, r3, #16
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d004      	beq.n	80054e4 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 80054e0:	4b3f      	ldr	r3, [pc, #252]	@ (80055e0 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 80054e2:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d00a      	beq.n	8005506 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 80054f0:	4b3a      	ldr	r3, [pc, #232]	@ (80055dc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80054f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80054f6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80054fe:	4937      	ldr	r1, [pc, #220]	@ (80055dc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005500:	4313      	orrs	r3, r2
 8005502:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800550e:	2b00      	cmp	r3, #0
 8005510:	d00a      	beq.n	8005528 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005512:	4b32      	ldr	r3, [pc, #200]	@ (80055dc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005514:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005518:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005520:	492e      	ldr	r1, [pc, #184]	@ (80055dc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005522:	4313      	orrs	r3, r2
 8005524:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005530:	2b00      	cmp	r3, #0
 8005532:	d011      	beq.n	8005558 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005534:	4b29      	ldr	r3, [pc, #164]	@ (80055dc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005536:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800553a:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005542:	4926      	ldr	r1, [pc, #152]	@ (80055dc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005544:	4313      	orrs	r3, r2
 8005546:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800554e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005552:	d101      	bne.n	8005558 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8005554:	2301      	movs	r3, #1
 8005556:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005560:	2b00      	cmp	r3, #0
 8005562:	d00a      	beq.n	800557a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8005564:	4b1d      	ldr	r3, [pc, #116]	@ (80055dc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005566:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800556a:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005572:	491a      	ldr	r1, [pc, #104]	@ (80055dc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005574:	4313      	orrs	r3, r2
 8005576:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005582:	2b00      	cmp	r3, #0
 8005584:	d011      	beq.n	80055aa <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8005586:	4b15      	ldr	r3, [pc, #84]	@ (80055dc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005588:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800558c:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005594:	4911      	ldr	r1, [pc, #68]	@ (80055dc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005596:	4313      	orrs	r3, r2
 8005598:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80055a0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80055a4:	d101      	bne.n	80055aa <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 80055a6:	2301      	movs	r3, #1
 80055a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if ((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80055aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055ac:	2b01      	cmp	r3, #1
 80055ae:	d005      	beq.n	80055bc <HAL_RCCEx_PeriphCLKConfig+0x310>
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80055b8:	f040 80ff 	bne.w	80057ba <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80055bc:	4b09      	ldr	r3, [pc, #36]	@ (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80055be:	2200      	movs	r2, #0
 80055c0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80055c2:	f7fe fa3f 	bl	8003a44 <HAL_GetTick>
 80055c6:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80055c8:	e00e      	b.n	80055e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80055ca:	f7fe fa3b 	bl	8003a44 <HAL_GetTick>
 80055ce:	4602      	mov	r2, r0
 80055d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055d2:	1ad3      	subs	r3, r2, r3
 80055d4:	2b02      	cmp	r3, #2
 80055d6:	d907      	bls.n	80055e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80055d8:	2303      	movs	r3, #3
 80055da:	e188      	b.n	80058ee <HAL_RCCEx_PeriphCLKConfig+0x642>
 80055dc:	40023800 	.word	0x40023800
 80055e0:	424711e0 	.word	0x424711e0
 80055e4:	42470068 	.word	0x42470068
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80055e8:	4b7e      	ldr	r3, [pc, #504]	@ (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d1ea      	bne.n	80055ca <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f003 0301 	and.w	r3, r3, #1
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d003      	beq.n	8005608 <HAL_RCCEx_PeriphCLKConfig+0x35c>
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005604:	2b00      	cmp	r3, #0
 8005606:	d009      	beq.n	800561c <HAL_RCCEx_PeriphCLKConfig+0x370>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f003 0302 	and.w	r3, r3, #2
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8005610:	2b00      	cmp	r3, #0
 8005612:	d028      	beq.n	8005666 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005618:	2b00      	cmp	r3, #0
 800561a:	d124      	bne.n	8005666 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800561c:	4b71      	ldr	r3, [pc, #452]	@ (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800561e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005622:	0c1b      	lsrs	r3, r3, #16
 8005624:	f003 0303 	and.w	r3, r3, #3
 8005628:	3301      	adds	r3, #1
 800562a:	005b      	lsls	r3, r3, #1
 800562c:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800562e:	4b6d      	ldr	r3, [pc, #436]	@ (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005630:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005634:	0e1b      	lsrs	r3, r3, #24
 8005636:	f003 030f 	and.w	r3, r3, #15
 800563a:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sp, plli2sq,
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	685a      	ldr	r2, [r3, #4]
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	689b      	ldr	r3, [r3, #8]
 8005644:	019b      	lsls	r3, r3, #6
 8005646:	431a      	orrs	r2, r3
 8005648:	69fb      	ldr	r3, [r7, #28]
 800564a:	085b      	lsrs	r3, r3, #1
 800564c:	3b01      	subs	r3, #1
 800564e:	041b      	lsls	r3, r3, #16
 8005650:	431a      	orrs	r2, r3
 8005652:	69bb      	ldr	r3, [r7, #24]
 8005654:	061b      	lsls	r3, r3, #24
 8005656:	431a      	orrs	r2, r3
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	695b      	ldr	r3, [r3, #20]
 800565c:	071b      	lsls	r3, r3, #28
 800565e:	4961      	ldr	r1, [pc, #388]	@ (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005660:	4313      	orrs	r3, r2
 8005662:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f003 0304 	and.w	r3, r3, #4
 800566e:	2b00      	cmp	r3, #0
 8005670:	d004      	beq.n	800567c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005676:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800567a:	d00a      	beq.n	8005692 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f003 0308 	and.w	r3, r3, #8
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005684:	2b00      	cmp	r3, #0
 8005686:	d035      	beq.n	80056f4 <HAL_RCCEx_PeriphCLKConfig+0x448>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800568c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005690:	d130      	bne.n	80056f4 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8005692:	4b54      	ldr	r3, [pc, #336]	@ (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005694:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005698:	0c1b      	lsrs	r3, r3, #16
 800569a:	f003 0303 	and.w	r3, r3, #3
 800569e:	3301      	adds	r3, #1
 80056a0:	005b      	lsls	r3, r3, #1
 80056a2:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80056a4:	4b4f      	ldr	r3, [pc, #316]	@ (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80056a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80056aa:	0f1b      	lsrs	r3, r3, #28
 80056ac:	f003 0307 	and.w	r3, r3, #7
 80056b0:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sp,
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	685a      	ldr	r2, [r3, #4]
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	689b      	ldr	r3, [r3, #8]
 80056ba:	019b      	lsls	r3, r3, #6
 80056bc:	431a      	orrs	r2, r3
 80056be:	69fb      	ldr	r3, [r7, #28]
 80056c0:	085b      	lsrs	r3, r3, #1
 80056c2:	3b01      	subs	r3, #1
 80056c4:	041b      	lsls	r3, r3, #16
 80056c6:	431a      	orrs	r2, r3
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	691b      	ldr	r3, [r3, #16]
 80056cc:	061b      	lsls	r3, r3, #24
 80056ce:	431a      	orrs	r2, r3
 80056d0:	697b      	ldr	r3, [r7, #20]
 80056d2:	071b      	lsls	r3, r3, #28
 80056d4:	4943      	ldr	r1, [pc, #268]	@ (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80056d6:	4313      	orrs	r3, r2
 80056d8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80056dc:	4b41      	ldr	r3, [pc, #260]	@ (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80056de:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80056e2:	f023 021f 	bic.w	r2, r3, #31
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056ea:	3b01      	subs	r3, #1
 80056ec:	493d      	ldr	r1, [pc, #244]	@ (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80056ee:	4313      	orrs	r3, r2
 80056f0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d029      	beq.n	8005754 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
        && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005704:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005708:	d124      	bne.n	8005754 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800570a:	4b36      	ldr	r3, [pc, #216]	@ (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800570c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005710:	0c1b      	lsrs	r3, r3, #16
 8005712:	f003 0303 	and.w	r3, r3, #3
 8005716:	3301      	adds	r3, #1
 8005718:	005b      	lsls	r3, r3, #1
 800571a:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800571c:	4b31      	ldr	r3, [pc, #196]	@ (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800571e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005722:	0f1b      	lsrs	r3, r3, #28
 8005724:	f003 0307 	and.w	r3, r3, #7
 8005728:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SP,
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	685a      	ldr	r2, [r3, #4]
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	689b      	ldr	r3, [r3, #8]
 8005732:	019b      	lsls	r3, r3, #6
 8005734:	431a      	orrs	r2, r3
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	68db      	ldr	r3, [r3, #12]
 800573a:	085b      	lsrs	r3, r3, #1
 800573c:	3b01      	subs	r3, #1
 800573e:	041b      	lsls	r3, r3, #16
 8005740:	431a      	orrs	r2, r3
 8005742:	69bb      	ldr	r3, [r7, #24]
 8005744:	061b      	lsls	r3, r3, #24
 8005746:	431a      	orrs	r2, r3
 8005748:	697b      	ldr	r3, [r7, #20]
 800574a:	071b      	lsls	r3, r3, #28
 800574c:	4925      	ldr	r1, [pc, #148]	@ (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800574e:	4313      	orrs	r3, r2
 8005750:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              plli2sq, plli2sr);
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800575c:	2b00      	cmp	r3, #0
 800575e:	d016      	beq.n	800578e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SP,
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	685a      	ldr	r2, [r3, #4]
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	689b      	ldr	r3, [r3, #8]
 8005768:	019b      	lsls	r3, r3, #6
 800576a:	431a      	orrs	r2, r3
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	68db      	ldr	r3, [r3, #12]
 8005770:	085b      	lsrs	r3, r3, #1
 8005772:	3b01      	subs	r3, #1
 8005774:	041b      	lsls	r3, r3, #16
 8005776:	431a      	orrs	r2, r3
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	691b      	ldr	r3, [r3, #16]
 800577c:	061b      	lsls	r3, r3, #24
 800577e:	431a      	orrs	r2, r3
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	695b      	ldr	r3, [r3, #20]
 8005784:	071b      	lsls	r3, r3, #28
 8005786:	4917      	ldr	r1, [pc, #92]	@ (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005788:	4313      	orrs	r3, r2
 800578a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800578e:	4b16      	ldr	r3, [pc, #88]	@ (80057e8 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8005790:	2201      	movs	r2, #1
 8005792:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005794:	f7fe f956 	bl	8003a44 <HAL_GetTick>
 8005798:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800579a:	e008      	b.n	80057ae <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800579c:	f7fe f952 	bl	8003a44 <HAL_GetTick>
 80057a0:	4602      	mov	r2, r0
 80057a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057a4:	1ad3      	subs	r3, r2, r3
 80057a6:	2b02      	cmp	r3, #2
 80057a8:	d901      	bls.n	80057ae <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80057aa:	2303      	movs	r3, #3
 80057ac:	e09f      	b.n	80058ee <HAL_RCCEx_PeriphCLKConfig+0x642>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80057ae:	4b0d      	ldr	r3, [pc, #52]	@ (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d0f0      	beq.n	800579c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if (pllsaiused == 1U)
 80057ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057bc:	2b01      	cmp	r3, #1
 80057be:	f040 8095 	bne.w	80058ec <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80057c2:	4b0a      	ldr	r3, [pc, #40]	@ (80057ec <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80057c4:	2200      	movs	r2, #0
 80057c6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80057c8:	f7fe f93c 	bl	8003a44 <HAL_GetTick>
 80057cc:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80057ce:	e00f      	b.n	80057f0 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80057d0:	f7fe f938 	bl	8003a44 <HAL_GetTick>
 80057d4:	4602      	mov	r2, r0
 80057d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057d8:	1ad3      	subs	r3, r2, r3
 80057da:	2b02      	cmp	r3, #2
 80057dc:	d908      	bls.n	80057f0 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80057de:	2303      	movs	r3, #3
 80057e0:	e085      	b.n	80058ee <HAL_RCCEx_PeriphCLKConfig+0x642>
 80057e2:	bf00      	nop
 80057e4:	40023800 	.word	0x40023800
 80057e8:	42470068 	.word	0x42470068
 80057ec:	42470070 	.word	0x42470070
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80057f0:	4b41      	ldr	r3, [pc, #260]	@ (80058f8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80057f8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80057fc:	d0e8      	beq.n	80057d0 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f003 0304 	and.w	r3, r3, #4
 8005806:	2b00      	cmp	r3, #0
 8005808:	d003      	beq.n	8005812 <HAL_RCCEx_PeriphCLKConfig+0x566>
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800580e:	2b00      	cmp	r3, #0
 8005810:	d009      	beq.n	8005826 <HAL_RCCEx_PeriphCLKConfig+0x57a>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f003 0308 	and.w	r3, r3, #8
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800581a:	2b00      	cmp	r3, #0
 800581c:	d02b      	beq.n	8005876 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005822:	2b00      	cmp	r3, #0
 8005824:	d127      	bne.n	8005876 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8005826:	4b34      	ldr	r3, [pc, #208]	@ (80058f8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005828:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800582c:	0c1b      	lsrs	r3, r3, #16
 800582e:	f003 0303 	and.w	r3, r3, #3
 8005832:	3301      	adds	r3, #1
 8005834:	005b      	lsls	r3, r3, #1
 8005836:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN, pllsaip,
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	699a      	ldr	r2, [r3, #24]
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	69db      	ldr	r3, [r3, #28]
 8005840:	019b      	lsls	r3, r3, #6
 8005842:	431a      	orrs	r2, r3
 8005844:	693b      	ldr	r3, [r7, #16]
 8005846:	085b      	lsrs	r3, r3, #1
 8005848:	3b01      	subs	r3, #1
 800584a:	041b      	lsls	r3, r3, #16
 800584c:	431a      	orrs	r2, r3
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005852:	061b      	lsls	r3, r3, #24
 8005854:	4928      	ldr	r1, [pc, #160]	@ (80058f8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005856:	4313      	orrs	r3, r2
 8005858:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
                              PeriphClkInit->PLLSAI.PLLSAIQ, 0U);

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800585c:	4b26      	ldr	r3, [pc, #152]	@ (80058f8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800585e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005862:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800586a:	3b01      	subs	r3, #1
 800586c:	021b      	lsls	r3, r3, #8
 800586e:	4922      	ldr	r1, [pc, #136]	@ (80058f8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005870:	4313      	orrs	r3, r2
 8005872:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800587e:	2b00      	cmp	r3, #0
 8005880:	d01d      	beq.n	80058be <HAL_RCCEx_PeriphCLKConfig+0x612>
        && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005886:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800588a:	d118      	bne.n	80058be <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800588c:	4b1a      	ldr	r3, [pc, #104]	@ (80058f8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800588e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005892:	0e1b      	lsrs	r3, r3, #24
 8005894:	f003 030f 	and.w	r3, r3, #15
 8005898:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP,
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	699a      	ldr	r2, [r3, #24]
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	69db      	ldr	r3, [r3, #28]
 80058a2:	019b      	lsls	r3, r3, #6
 80058a4:	431a      	orrs	r2, r3
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6a1b      	ldr	r3, [r3, #32]
 80058aa:	085b      	lsrs	r3, r3, #1
 80058ac:	3b01      	subs	r3, #1
 80058ae:	041b      	lsls	r3, r3, #16
 80058b0:	431a      	orrs	r2, r3
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	061b      	lsls	r3, r3, #24
 80058b6:	4910      	ldr	r1, [pc, #64]	@ (80058f8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80058b8:	4313      	orrs	r3, r2
 80058ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
                              pllsaiq, 0U);
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80058be:	4b0f      	ldr	r3, [pc, #60]	@ (80058fc <HAL_RCCEx_PeriphCLKConfig+0x650>)
 80058c0:	2201      	movs	r2, #1
 80058c2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80058c4:	f7fe f8be 	bl	8003a44 <HAL_GetTick>
 80058c8:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80058ca:	e008      	b.n	80058de <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80058cc:	f7fe f8ba 	bl	8003a44 <HAL_GetTick>
 80058d0:	4602      	mov	r2, r0
 80058d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058d4:	1ad3      	subs	r3, r2, r3
 80058d6:	2b02      	cmp	r3, #2
 80058d8:	d901      	bls.n	80058de <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80058da:	2303      	movs	r3, #3
 80058dc:	e007      	b.n	80058ee <HAL_RCCEx_PeriphCLKConfig+0x642>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80058de:	4b06      	ldr	r3, [pc, #24]	@ (80058f8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80058e6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80058ea:	d1ef      	bne.n	80058cc <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 80058ec:	2300      	movs	r3, #0
}
 80058ee:	4618      	mov	r0, r3
 80058f0:	3730      	adds	r7, #48	@ 0x30
 80058f2:	46bd      	mov	sp, r7
 80058f4:	bd80      	pop	{r7, pc}
 80058f6:	bf00      	nop
 80058f8:	40023800 	.word	0x40023800
 80058fc:	42470070 	.word	0x42470070

08005900 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005900:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005904:	b0ae      	sub	sp, #184	@ 0xb8
 8005906:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005908:	2300      	movs	r3, #0
 800590a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 800590e:	2300      	movs	r3, #0
 8005910:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8005914:	2300      	movs	r3, #0
 8005916:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 800591a:	2300      	movs	r3, #0
 800591c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8005920:	2300      	movs	r3, #0
 8005922:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005926:	4bcb      	ldr	r3, [pc, #812]	@ (8005c54 <HAL_RCC_GetSysClockFreq+0x354>)
 8005928:	689b      	ldr	r3, [r3, #8]
 800592a:	f003 030c 	and.w	r3, r3, #12
 800592e:	2b0c      	cmp	r3, #12
 8005930:	f200 8206 	bhi.w	8005d40 <HAL_RCC_GetSysClockFreq+0x440>
 8005934:	a201      	add	r2, pc, #4	@ (adr r2, 800593c <HAL_RCC_GetSysClockFreq+0x3c>)
 8005936:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800593a:	bf00      	nop
 800593c:	08005971 	.word	0x08005971
 8005940:	08005d41 	.word	0x08005d41
 8005944:	08005d41 	.word	0x08005d41
 8005948:	08005d41 	.word	0x08005d41
 800594c:	08005979 	.word	0x08005979
 8005950:	08005d41 	.word	0x08005d41
 8005954:	08005d41 	.word	0x08005d41
 8005958:	08005d41 	.word	0x08005d41
 800595c:	08005981 	.word	0x08005981
 8005960:	08005d41 	.word	0x08005d41
 8005964:	08005d41 	.word	0x08005d41
 8005968:	08005d41 	.word	0x08005d41
 800596c:	08005b71 	.word	0x08005b71
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005970:	4bb9      	ldr	r3, [pc, #740]	@ (8005c58 <HAL_RCC_GetSysClockFreq+0x358>)
 8005972:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8005976:	e1e7      	b.n	8005d48 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005978:	4bb8      	ldr	r3, [pc, #736]	@ (8005c5c <HAL_RCC_GetSysClockFreq+0x35c>)
 800597a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800597e:	e1e3      	b.n	8005d48 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005980:	4bb4      	ldr	r3, [pc, #720]	@ (8005c54 <HAL_RCC_GetSysClockFreq+0x354>)
 8005982:	685b      	ldr	r3, [r3, #4]
 8005984:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005988:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800598c:	4bb1      	ldr	r3, [pc, #708]	@ (8005c54 <HAL_RCC_GetSysClockFreq+0x354>)
 800598e:	685b      	ldr	r3, [r3, #4]
 8005990:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005994:	2b00      	cmp	r3, #0
 8005996:	d071      	beq.n	8005a7c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005998:	4bae      	ldr	r3, [pc, #696]	@ (8005c54 <HAL_RCC_GetSysClockFreq+0x354>)
 800599a:	685b      	ldr	r3, [r3, #4]
 800599c:	099b      	lsrs	r3, r3, #6
 800599e:	2200      	movs	r2, #0
 80059a0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80059a4:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80059a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80059ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059b0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80059b4:	2300      	movs	r3, #0
 80059b6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80059ba:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80059be:	4622      	mov	r2, r4
 80059c0:	462b      	mov	r3, r5
 80059c2:	f04f 0000 	mov.w	r0, #0
 80059c6:	f04f 0100 	mov.w	r1, #0
 80059ca:	0159      	lsls	r1, r3, #5
 80059cc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80059d0:	0150      	lsls	r0, r2, #5
 80059d2:	4602      	mov	r2, r0
 80059d4:	460b      	mov	r3, r1
 80059d6:	4621      	mov	r1, r4
 80059d8:	1a51      	subs	r1, r2, r1
 80059da:	6439      	str	r1, [r7, #64]	@ 0x40
 80059dc:	4629      	mov	r1, r5
 80059de:	eb63 0301 	sbc.w	r3, r3, r1
 80059e2:	647b      	str	r3, [r7, #68]	@ 0x44
 80059e4:	f04f 0200 	mov.w	r2, #0
 80059e8:	f04f 0300 	mov.w	r3, #0
 80059ec:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 80059f0:	4649      	mov	r1, r9
 80059f2:	018b      	lsls	r3, r1, #6
 80059f4:	4641      	mov	r1, r8
 80059f6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80059fa:	4641      	mov	r1, r8
 80059fc:	018a      	lsls	r2, r1, #6
 80059fe:	4641      	mov	r1, r8
 8005a00:	1a51      	subs	r1, r2, r1
 8005a02:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005a04:	4649      	mov	r1, r9
 8005a06:	eb63 0301 	sbc.w	r3, r3, r1
 8005a0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005a0c:	f04f 0200 	mov.w	r2, #0
 8005a10:	f04f 0300 	mov.w	r3, #0
 8005a14:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8005a18:	4649      	mov	r1, r9
 8005a1a:	00cb      	lsls	r3, r1, #3
 8005a1c:	4641      	mov	r1, r8
 8005a1e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005a22:	4641      	mov	r1, r8
 8005a24:	00ca      	lsls	r2, r1, #3
 8005a26:	4610      	mov	r0, r2
 8005a28:	4619      	mov	r1, r3
 8005a2a:	4603      	mov	r3, r0
 8005a2c:	4622      	mov	r2, r4
 8005a2e:	189b      	adds	r3, r3, r2
 8005a30:	633b      	str	r3, [r7, #48]	@ 0x30
 8005a32:	462b      	mov	r3, r5
 8005a34:	460a      	mov	r2, r1
 8005a36:	eb42 0303 	adc.w	r3, r2, r3
 8005a3a:	637b      	str	r3, [r7, #52]	@ 0x34
 8005a3c:	f04f 0200 	mov.w	r2, #0
 8005a40:	f04f 0300 	mov.w	r3, #0
 8005a44:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8005a48:	4629      	mov	r1, r5
 8005a4a:	024b      	lsls	r3, r1, #9
 8005a4c:	4621      	mov	r1, r4
 8005a4e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005a52:	4621      	mov	r1, r4
 8005a54:	024a      	lsls	r2, r1, #9
 8005a56:	4610      	mov	r0, r2
 8005a58:	4619      	mov	r1, r3
 8005a5a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005a5e:	2200      	movs	r2, #0
 8005a60:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005a64:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005a68:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8005a6c:	f7fb f886 	bl	8000b7c <__aeabi_uldivmod>
 8005a70:	4602      	mov	r2, r0
 8005a72:	460b      	mov	r3, r1
 8005a74:	4613      	mov	r3, r2
 8005a76:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005a7a:	e067      	b.n	8005b4c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005a7c:	4b75      	ldr	r3, [pc, #468]	@ (8005c54 <HAL_RCC_GetSysClockFreq+0x354>)
 8005a7e:	685b      	ldr	r3, [r3, #4]
 8005a80:	099b      	lsrs	r3, r3, #6
 8005a82:	2200      	movs	r2, #0
 8005a84:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005a88:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8005a8c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005a90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a94:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005a96:	2300      	movs	r3, #0
 8005a98:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005a9a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8005a9e:	4622      	mov	r2, r4
 8005aa0:	462b      	mov	r3, r5
 8005aa2:	f04f 0000 	mov.w	r0, #0
 8005aa6:	f04f 0100 	mov.w	r1, #0
 8005aaa:	0159      	lsls	r1, r3, #5
 8005aac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005ab0:	0150      	lsls	r0, r2, #5
 8005ab2:	4602      	mov	r2, r0
 8005ab4:	460b      	mov	r3, r1
 8005ab6:	4621      	mov	r1, r4
 8005ab8:	1a51      	subs	r1, r2, r1
 8005aba:	62b9      	str	r1, [r7, #40]	@ 0x28
 8005abc:	4629      	mov	r1, r5
 8005abe:	eb63 0301 	sbc.w	r3, r3, r1
 8005ac2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005ac4:	f04f 0200 	mov.w	r2, #0
 8005ac8:	f04f 0300 	mov.w	r3, #0
 8005acc:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8005ad0:	4649      	mov	r1, r9
 8005ad2:	018b      	lsls	r3, r1, #6
 8005ad4:	4641      	mov	r1, r8
 8005ad6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005ada:	4641      	mov	r1, r8
 8005adc:	018a      	lsls	r2, r1, #6
 8005ade:	4641      	mov	r1, r8
 8005ae0:	ebb2 0a01 	subs.w	sl, r2, r1
 8005ae4:	4649      	mov	r1, r9
 8005ae6:	eb63 0b01 	sbc.w	fp, r3, r1
 8005aea:	f04f 0200 	mov.w	r2, #0
 8005aee:	f04f 0300 	mov.w	r3, #0
 8005af2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005af6:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005afa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005afe:	4692      	mov	sl, r2
 8005b00:	469b      	mov	fp, r3
 8005b02:	4623      	mov	r3, r4
 8005b04:	eb1a 0303 	adds.w	r3, sl, r3
 8005b08:	623b      	str	r3, [r7, #32]
 8005b0a:	462b      	mov	r3, r5
 8005b0c:	eb4b 0303 	adc.w	r3, fp, r3
 8005b10:	627b      	str	r3, [r7, #36]	@ 0x24
 8005b12:	f04f 0200 	mov.w	r2, #0
 8005b16:	f04f 0300 	mov.w	r3, #0
 8005b1a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8005b1e:	4629      	mov	r1, r5
 8005b20:	028b      	lsls	r3, r1, #10
 8005b22:	4621      	mov	r1, r4
 8005b24:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005b28:	4621      	mov	r1, r4
 8005b2a:	028a      	lsls	r2, r1, #10
 8005b2c:	4610      	mov	r0, r2
 8005b2e:	4619      	mov	r1, r3
 8005b30:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005b34:	2200      	movs	r2, #0
 8005b36:	673b      	str	r3, [r7, #112]	@ 0x70
 8005b38:	677a      	str	r2, [r7, #116]	@ 0x74
 8005b3a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8005b3e:	f7fb f81d 	bl	8000b7c <__aeabi_uldivmod>
 8005b42:	4602      	mov	r2, r0
 8005b44:	460b      	mov	r3, r1
 8005b46:	4613      	mov	r3, r2
 8005b48:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005b4c:	4b41      	ldr	r3, [pc, #260]	@ (8005c54 <HAL_RCC_GetSysClockFreq+0x354>)
 8005b4e:	685b      	ldr	r3, [r3, #4]
 8005b50:	0c1b      	lsrs	r3, r3, #16
 8005b52:	f003 0303 	and.w	r3, r3, #3
 8005b56:	3301      	adds	r3, #1
 8005b58:	005b      	lsls	r3, r3, #1
 8005b5a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8005b5e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005b62:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005b66:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b6a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8005b6e:	e0eb      	b.n	8005d48 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005b70:	4b38      	ldr	r3, [pc, #224]	@ (8005c54 <HAL_RCC_GetSysClockFreq+0x354>)
 8005b72:	685b      	ldr	r3, [r3, #4]
 8005b74:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005b78:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005b7c:	4b35      	ldr	r3, [pc, #212]	@ (8005c54 <HAL_RCC_GetSysClockFreq+0x354>)
 8005b7e:	685b      	ldr	r3, [r3, #4]
 8005b80:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d06b      	beq.n	8005c60 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005b88:	4b32      	ldr	r3, [pc, #200]	@ (8005c54 <HAL_RCC_GetSysClockFreq+0x354>)
 8005b8a:	685b      	ldr	r3, [r3, #4]
 8005b8c:	099b      	lsrs	r3, r3, #6
 8005b8e:	2200      	movs	r2, #0
 8005b90:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005b92:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005b94:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005b96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b9a:	663b      	str	r3, [r7, #96]	@ 0x60
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	667b      	str	r3, [r7, #100]	@ 0x64
 8005ba0:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8005ba4:	4622      	mov	r2, r4
 8005ba6:	462b      	mov	r3, r5
 8005ba8:	f04f 0000 	mov.w	r0, #0
 8005bac:	f04f 0100 	mov.w	r1, #0
 8005bb0:	0159      	lsls	r1, r3, #5
 8005bb2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005bb6:	0150      	lsls	r0, r2, #5
 8005bb8:	4602      	mov	r2, r0
 8005bba:	460b      	mov	r3, r1
 8005bbc:	4621      	mov	r1, r4
 8005bbe:	1a51      	subs	r1, r2, r1
 8005bc0:	61b9      	str	r1, [r7, #24]
 8005bc2:	4629      	mov	r1, r5
 8005bc4:	eb63 0301 	sbc.w	r3, r3, r1
 8005bc8:	61fb      	str	r3, [r7, #28]
 8005bca:	f04f 0200 	mov.w	r2, #0
 8005bce:	f04f 0300 	mov.w	r3, #0
 8005bd2:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8005bd6:	4659      	mov	r1, fp
 8005bd8:	018b      	lsls	r3, r1, #6
 8005bda:	4651      	mov	r1, sl
 8005bdc:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005be0:	4651      	mov	r1, sl
 8005be2:	018a      	lsls	r2, r1, #6
 8005be4:	4651      	mov	r1, sl
 8005be6:	ebb2 0801 	subs.w	r8, r2, r1
 8005bea:	4659      	mov	r1, fp
 8005bec:	eb63 0901 	sbc.w	r9, r3, r1
 8005bf0:	f04f 0200 	mov.w	r2, #0
 8005bf4:	f04f 0300 	mov.w	r3, #0
 8005bf8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005bfc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005c00:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005c04:	4690      	mov	r8, r2
 8005c06:	4699      	mov	r9, r3
 8005c08:	4623      	mov	r3, r4
 8005c0a:	eb18 0303 	adds.w	r3, r8, r3
 8005c0e:	613b      	str	r3, [r7, #16]
 8005c10:	462b      	mov	r3, r5
 8005c12:	eb49 0303 	adc.w	r3, r9, r3
 8005c16:	617b      	str	r3, [r7, #20]
 8005c18:	f04f 0200 	mov.w	r2, #0
 8005c1c:	f04f 0300 	mov.w	r3, #0
 8005c20:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8005c24:	4629      	mov	r1, r5
 8005c26:	024b      	lsls	r3, r1, #9
 8005c28:	4621      	mov	r1, r4
 8005c2a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005c2e:	4621      	mov	r1, r4
 8005c30:	024a      	lsls	r2, r1, #9
 8005c32:	4610      	mov	r0, r2
 8005c34:	4619      	mov	r1, r3
 8005c36:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005c3e:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8005c40:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005c44:	f7fa ff9a 	bl	8000b7c <__aeabi_uldivmod>
 8005c48:	4602      	mov	r2, r0
 8005c4a:	460b      	mov	r3, r1
 8005c4c:	4613      	mov	r3, r2
 8005c4e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005c52:	e065      	b.n	8005d20 <HAL_RCC_GetSysClockFreq+0x420>
 8005c54:	40023800 	.word	0x40023800
 8005c58:	00f42400 	.word	0x00f42400
 8005c5c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005c60:	4b3d      	ldr	r3, [pc, #244]	@ (8005d58 <HAL_RCC_GetSysClockFreq+0x458>)
 8005c62:	685b      	ldr	r3, [r3, #4]
 8005c64:	099b      	lsrs	r3, r3, #6
 8005c66:	2200      	movs	r2, #0
 8005c68:	4618      	mov	r0, r3
 8005c6a:	4611      	mov	r1, r2
 8005c6c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005c70:	653b      	str	r3, [r7, #80]	@ 0x50
 8005c72:	2300      	movs	r3, #0
 8005c74:	657b      	str	r3, [r7, #84]	@ 0x54
 8005c76:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8005c7a:	4642      	mov	r2, r8
 8005c7c:	464b      	mov	r3, r9
 8005c7e:	f04f 0000 	mov.w	r0, #0
 8005c82:	f04f 0100 	mov.w	r1, #0
 8005c86:	0159      	lsls	r1, r3, #5
 8005c88:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005c8c:	0150      	lsls	r0, r2, #5
 8005c8e:	4602      	mov	r2, r0
 8005c90:	460b      	mov	r3, r1
 8005c92:	4641      	mov	r1, r8
 8005c94:	1a51      	subs	r1, r2, r1
 8005c96:	60b9      	str	r1, [r7, #8]
 8005c98:	4649      	mov	r1, r9
 8005c9a:	eb63 0301 	sbc.w	r3, r3, r1
 8005c9e:	60fb      	str	r3, [r7, #12]
 8005ca0:	f04f 0200 	mov.w	r2, #0
 8005ca4:	f04f 0300 	mov.w	r3, #0
 8005ca8:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8005cac:	4659      	mov	r1, fp
 8005cae:	018b      	lsls	r3, r1, #6
 8005cb0:	4651      	mov	r1, sl
 8005cb2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005cb6:	4651      	mov	r1, sl
 8005cb8:	018a      	lsls	r2, r1, #6
 8005cba:	4651      	mov	r1, sl
 8005cbc:	1a54      	subs	r4, r2, r1
 8005cbe:	4659      	mov	r1, fp
 8005cc0:	eb63 0501 	sbc.w	r5, r3, r1
 8005cc4:	f04f 0200 	mov.w	r2, #0
 8005cc8:	f04f 0300 	mov.w	r3, #0
 8005ccc:	00eb      	lsls	r3, r5, #3
 8005cce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005cd2:	00e2      	lsls	r2, r4, #3
 8005cd4:	4614      	mov	r4, r2
 8005cd6:	461d      	mov	r5, r3
 8005cd8:	4643      	mov	r3, r8
 8005cda:	18e3      	adds	r3, r4, r3
 8005cdc:	603b      	str	r3, [r7, #0]
 8005cde:	464b      	mov	r3, r9
 8005ce0:	eb45 0303 	adc.w	r3, r5, r3
 8005ce4:	607b      	str	r3, [r7, #4]
 8005ce6:	f04f 0200 	mov.w	r2, #0
 8005cea:	f04f 0300 	mov.w	r3, #0
 8005cee:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005cf2:	4629      	mov	r1, r5
 8005cf4:	028b      	lsls	r3, r1, #10
 8005cf6:	4621      	mov	r1, r4
 8005cf8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005cfc:	4621      	mov	r1, r4
 8005cfe:	028a      	lsls	r2, r1, #10
 8005d00:	4610      	mov	r0, r2
 8005d02:	4619      	mov	r1, r3
 8005d04:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005d08:	2200      	movs	r2, #0
 8005d0a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005d0c:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8005d0e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005d12:	f7fa ff33 	bl	8000b7c <__aeabi_uldivmod>
 8005d16:	4602      	mov	r2, r0
 8005d18:	460b      	mov	r3, r1
 8005d1a:	4613      	mov	r3, r2
 8005d1c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8005d20:	4b0d      	ldr	r3, [pc, #52]	@ (8005d58 <HAL_RCC_GetSysClockFreq+0x458>)
 8005d22:	685b      	ldr	r3, [r3, #4]
 8005d24:	0f1b      	lsrs	r3, r3, #28
 8005d26:	f003 0307 	and.w	r3, r3, #7
 8005d2a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8005d2e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005d32:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8005d36:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d3a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8005d3e:	e003      	b.n	8005d48 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005d40:	4b06      	ldr	r3, [pc, #24]	@ (8005d5c <HAL_RCC_GetSysClockFreq+0x45c>)
 8005d42:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8005d46:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005d48:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	37b8      	adds	r7, #184	@ 0xb8
 8005d50:	46bd      	mov	sp, r7
 8005d52:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005d56:	bf00      	nop
 8005d58:	40023800 	.word	0x40023800
 8005d5c:	00f42400 	.word	0x00f42400

08005d60 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b086      	sub	sp, #24
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d101      	bne.n	8005d72 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005d6e:	2301      	movs	r3, #1
 8005d70:	e28d      	b.n	800628e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f003 0301 	and.w	r3, r3, #1
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	f000 8083 	beq.w	8005e86 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005d80:	4b94      	ldr	r3, [pc, #592]	@ (8005fd4 <HAL_RCC_OscConfig+0x274>)
 8005d82:	689b      	ldr	r3, [r3, #8]
 8005d84:	f003 030c 	and.w	r3, r3, #12
 8005d88:	2b04      	cmp	r3, #4
 8005d8a:	d019      	beq.n	8005dc0 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8005d8c:	4b91      	ldr	r3, [pc, #580]	@ (8005fd4 <HAL_RCC_OscConfig+0x274>)
 8005d8e:	689b      	ldr	r3, [r3, #8]
 8005d90:	f003 030c 	and.w	r3, r3, #12
        || \
 8005d94:	2b08      	cmp	r3, #8
 8005d96:	d106      	bne.n	8005da6 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8005d98:	4b8e      	ldr	r3, [pc, #568]	@ (8005fd4 <HAL_RCC_OscConfig+0x274>)
 8005d9a:	685b      	ldr	r3, [r3, #4]
 8005d9c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005da0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005da4:	d00c      	beq.n	8005dc0 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005da6:	4b8b      	ldr	r3, [pc, #556]	@ (8005fd4 <HAL_RCC_OscConfig+0x274>)
 8005da8:	689b      	ldr	r3, [r3, #8]
 8005daa:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8005dae:	2b0c      	cmp	r3, #12
 8005db0:	d112      	bne.n	8005dd8 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005db2:	4b88      	ldr	r3, [pc, #544]	@ (8005fd4 <HAL_RCC_OscConfig+0x274>)
 8005db4:	685b      	ldr	r3, [r3, #4]
 8005db6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005dba:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005dbe:	d10b      	bne.n	8005dd8 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005dc0:	4b84      	ldr	r3, [pc, #528]	@ (8005fd4 <HAL_RCC_OscConfig+0x274>)
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d05b      	beq.n	8005e84 <HAL_RCC_OscConfig+0x124>
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	685b      	ldr	r3, [r3, #4]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d157      	bne.n	8005e84 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8005dd4:	2301      	movs	r3, #1
 8005dd6:	e25a      	b.n	800628e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	685b      	ldr	r3, [r3, #4]
 8005ddc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005de0:	d106      	bne.n	8005df0 <HAL_RCC_OscConfig+0x90>
 8005de2:	4b7c      	ldr	r3, [pc, #496]	@ (8005fd4 <HAL_RCC_OscConfig+0x274>)
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	4a7b      	ldr	r2, [pc, #492]	@ (8005fd4 <HAL_RCC_OscConfig+0x274>)
 8005de8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005dec:	6013      	str	r3, [r2, #0]
 8005dee:	e01d      	b.n	8005e2c <HAL_RCC_OscConfig+0xcc>
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	685b      	ldr	r3, [r3, #4]
 8005df4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005df8:	d10c      	bne.n	8005e14 <HAL_RCC_OscConfig+0xb4>
 8005dfa:	4b76      	ldr	r3, [pc, #472]	@ (8005fd4 <HAL_RCC_OscConfig+0x274>)
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	4a75      	ldr	r2, [pc, #468]	@ (8005fd4 <HAL_RCC_OscConfig+0x274>)
 8005e00:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005e04:	6013      	str	r3, [r2, #0]
 8005e06:	4b73      	ldr	r3, [pc, #460]	@ (8005fd4 <HAL_RCC_OscConfig+0x274>)
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	4a72      	ldr	r2, [pc, #456]	@ (8005fd4 <HAL_RCC_OscConfig+0x274>)
 8005e0c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005e10:	6013      	str	r3, [r2, #0]
 8005e12:	e00b      	b.n	8005e2c <HAL_RCC_OscConfig+0xcc>
 8005e14:	4b6f      	ldr	r3, [pc, #444]	@ (8005fd4 <HAL_RCC_OscConfig+0x274>)
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	4a6e      	ldr	r2, [pc, #440]	@ (8005fd4 <HAL_RCC_OscConfig+0x274>)
 8005e1a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005e1e:	6013      	str	r3, [r2, #0]
 8005e20:	4b6c      	ldr	r3, [pc, #432]	@ (8005fd4 <HAL_RCC_OscConfig+0x274>)
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	4a6b      	ldr	r2, [pc, #428]	@ (8005fd4 <HAL_RCC_OscConfig+0x274>)
 8005e26:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005e2a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	685b      	ldr	r3, [r3, #4]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d013      	beq.n	8005e5c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e34:	f7fd fe06 	bl	8003a44 <HAL_GetTick>
 8005e38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e3a:	e008      	b.n	8005e4e <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005e3c:	f7fd fe02 	bl	8003a44 <HAL_GetTick>
 8005e40:	4602      	mov	r2, r0
 8005e42:	693b      	ldr	r3, [r7, #16]
 8005e44:	1ad3      	subs	r3, r2, r3
 8005e46:	2b64      	cmp	r3, #100	@ 0x64
 8005e48:	d901      	bls.n	8005e4e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8005e4a:	2303      	movs	r3, #3
 8005e4c:	e21f      	b.n	800628e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e4e:	4b61      	ldr	r3, [pc, #388]	@ (8005fd4 <HAL_RCC_OscConfig+0x274>)
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d0f0      	beq.n	8005e3c <HAL_RCC_OscConfig+0xdc>
 8005e5a:	e014      	b.n	8005e86 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e5c:	f7fd fdf2 	bl	8003a44 <HAL_GetTick>
 8005e60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005e62:	e008      	b.n	8005e76 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005e64:	f7fd fdee 	bl	8003a44 <HAL_GetTick>
 8005e68:	4602      	mov	r2, r0
 8005e6a:	693b      	ldr	r3, [r7, #16]
 8005e6c:	1ad3      	subs	r3, r2, r3
 8005e6e:	2b64      	cmp	r3, #100	@ 0x64
 8005e70:	d901      	bls.n	8005e76 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8005e72:	2303      	movs	r3, #3
 8005e74:	e20b      	b.n	800628e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005e76:	4b57      	ldr	r3, [pc, #348]	@ (8005fd4 <HAL_RCC_OscConfig+0x274>)
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d1f0      	bne.n	8005e64 <HAL_RCC_OscConfig+0x104>
 8005e82:	e000      	b.n	8005e86 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f003 0302 	and.w	r3, r3, #2
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d06f      	beq.n	8005f72 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005e92:	4b50      	ldr	r3, [pc, #320]	@ (8005fd4 <HAL_RCC_OscConfig+0x274>)
 8005e94:	689b      	ldr	r3, [r3, #8]
 8005e96:	f003 030c 	and.w	r3, r3, #12
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d017      	beq.n	8005ece <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8005e9e:	4b4d      	ldr	r3, [pc, #308]	@ (8005fd4 <HAL_RCC_OscConfig+0x274>)
 8005ea0:	689b      	ldr	r3, [r3, #8]
 8005ea2:	f003 030c 	and.w	r3, r3, #12
        || \
 8005ea6:	2b08      	cmp	r3, #8
 8005ea8:	d105      	bne.n	8005eb6 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8005eaa:	4b4a      	ldr	r3, [pc, #296]	@ (8005fd4 <HAL_RCC_OscConfig+0x274>)
 8005eac:	685b      	ldr	r3, [r3, #4]
 8005eae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d00b      	beq.n	8005ece <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005eb6:	4b47      	ldr	r3, [pc, #284]	@ (8005fd4 <HAL_RCC_OscConfig+0x274>)
 8005eb8:	689b      	ldr	r3, [r3, #8]
 8005eba:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8005ebe:	2b0c      	cmp	r3, #12
 8005ec0:	d11c      	bne.n	8005efc <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005ec2:	4b44      	ldr	r3, [pc, #272]	@ (8005fd4 <HAL_RCC_OscConfig+0x274>)
 8005ec4:	685b      	ldr	r3, [r3, #4]
 8005ec6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d116      	bne.n	8005efc <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005ece:	4b41      	ldr	r3, [pc, #260]	@ (8005fd4 <HAL_RCC_OscConfig+0x274>)
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f003 0302 	and.w	r3, r3, #2
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d005      	beq.n	8005ee6 <HAL_RCC_OscConfig+0x186>
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	68db      	ldr	r3, [r3, #12]
 8005ede:	2b01      	cmp	r3, #1
 8005ee0:	d001      	beq.n	8005ee6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8005ee2:	2301      	movs	r3, #1
 8005ee4:	e1d3      	b.n	800628e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ee6:	4b3b      	ldr	r3, [pc, #236]	@ (8005fd4 <HAL_RCC_OscConfig+0x274>)
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	691b      	ldr	r3, [r3, #16]
 8005ef2:	00db      	lsls	r3, r3, #3
 8005ef4:	4937      	ldr	r1, [pc, #220]	@ (8005fd4 <HAL_RCC_OscConfig+0x274>)
 8005ef6:	4313      	orrs	r3, r2
 8005ef8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005efa:	e03a      	b.n	8005f72 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	68db      	ldr	r3, [r3, #12]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d020      	beq.n	8005f46 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005f04:	4b34      	ldr	r3, [pc, #208]	@ (8005fd8 <HAL_RCC_OscConfig+0x278>)
 8005f06:	2201      	movs	r2, #1
 8005f08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f0a:	f7fd fd9b 	bl	8003a44 <HAL_GetTick>
 8005f0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f10:	e008      	b.n	8005f24 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005f12:	f7fd fd97 	bl	8003a44 <HAL_GetTick>
 8005f16:	4602      	mov	r2, r0
 8005f18:	693b      	ldr	r3, [r7, #16]
 8005f1a:	1ad3      	subs	r3, r2, r3
 8005f1c:	2b02      	cmp	r3, #2
 8005f1e:	d901      	bls.n	8005f24 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8005f20:	2303      	movs	r3, #3
 8005f22:	e1b4      	b.n	800628e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f24:	4b2b      	ldr	r3, [pc, #172]	@ (8005fd4 <HAL_RCC_OscConfig+0x274>)
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f003 0302 	and.w	r3, r3, #2
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d0f0      	beq.n	8005f12 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f30:	4b28      	ldr	r3, [pc, #160]	@ (8005fd4 <HAL_RCC_OscConfig+0x274>)
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	691b      	ldr	r3, [r3, #16]
 8005f3c:	00db      	lsls	r3, r3, #3
 8005f3e:	4925      	ldr	r1, [pc, #148]	@ (8005fd4 <HAL_RCC_OscConfig+0x274>)
 8005f40:	4313      	orrs	r3, r2
 8005f42:	600b      	str	r3, [r1, #0]
 8005f44:	e015      	b.n	8005f72 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005f46:	4b24      	ldr	r3, [pc, #144]	@ (8005fd8 <HAL_RCC_OscConfig+0x278>)
 8005f48:	2200      	movs	r2, #0
 8005f4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f4c:	f7fd fd7a 	bl	8003a44 <HAL_GetTick>
 8005f50:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005f52:	e008      	b.n	8005f66 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005f54:	f7fd fd76 	bl	8003a44 <HAL_GetTick>
 8005f58:	4602      	mov	r2, r0
 8005f5a:	693b      	ldr	r3, [r7, #16]
 8005f5c:	1ad3      	subs	r3, r2, r3
 8005f5e:	2b02      	cmp	r3, #2
 8005f60:	d901      	bls.n	8005f66 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005f62:	2303      	movs	r3, #3
 8005f64:	e193      	b.n	800628e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005f66:	4b1b      	ldr	r3, [pc, #108]	@ (8005fd4 <HAL_RCC_OscConfig+0x274>)
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f003 0302 	and.w	r3, r3, #2
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d1f0      	bne.n	8005f54 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	f003 0308 	and.w	r3, r3, #8
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d036      	beq.n	8005fec <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	695b      	ldr	r3, [r3, #20]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d016      	beq.n	8005fb4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005f86:	4b15      	ldr	r3, [pc, #84]	@ (8005fdc <HAL_RCC_OscConfig+0x27c>)
 8005f88:	2201      	movs	r2, #1
 8005f8a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f8c:	f7fd fd5a 	bl	8003a44 <HAL_GetTick>
 8005f90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005f92:	e008      	b.n	8005fa6 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005f94:	f7fd fd56 	bl	8003a44 <HAL_GetTick>
 8005f98:	4602      	mov	r2, r0
 8005f9a:	693b      	ldr	r3, [r7, #16]
 8005f9c:	1ad3      	subs	r3, r2, r3
 8005f9e:	2b02      	cmp	r3, #2
 8005fa0:	d901      	bls.n	8005fa6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8005fa2:	2303      	movs	r3, #3
 8005fa4:	e173      	b.n	800628e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005fa6:	4b0b      	ldr	r3, [pc, #44]	@ (8005fd4 <HAL_RCC_OscConfig+0x274>)
 8005fa8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005faa:	f003 0302 	and.w	r3, r3, #2
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d0f0      	beq.n	8005f94 <HAL_RCC_OscConfig+0x234>
 8005fb2:	e01b      	b.n	8005fec <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005fb4:	4b09      	ldr	r3, [pc, #36]	@ (8005fdc <HAL_RCC_OscConfig+0x27c>)
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005fba:	f7fd fd43 	bl	8003a44 <HAL_GetTick>
 8005fbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005fc0:	e00e      	b.n	8005fe0 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005fc2:	f7fd fd3f 	bl	8003a44 <HAL_GetTick>
 8005fc6:	4602      	mov	r2, r0
 8005fc8:	693b      	ldr	r3, [r7, #16]
 8005fca:	1ad3      	subs	r3, r2, r3
 8005fcc:	2b02      	cmp	r3, #2
 8005fce:	d907      	bls.n	8005fe0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8005fd0:	2303      	movs	r3, #3
 8005fd2:	e15c      	b.n	800628e <HAL_RCC_OscConfig+0x52e>
 8005fd4:	40023800 	.word	0x40023800
 8005fd8:	42470000 	.word	0x42470000
 8005fdc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005fe0:	4b8a      	ldr	r3, [pc, #552]	@ (800620c <HAL_RCC_OscConfig+0x4ac>)
 8005fe2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005fe4:	f003 0302 	and.w	r3, r3, #2
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d1ea      	bne.n	8005fc2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f003 0304 	and.w	r3, r3, #4
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	f000 8097 	beq.w	8006128 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005ffe:	4b83      	ldr	r3, [pc, #524]	@ (800620c <HAL_RCC_OscConfig+0x4ac>)
 8006000:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006002:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006006:	2b00      	cmp	r3, #0
 8006008:	d10f      	bne.n	800602a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800600a:	2300      	movs	r3, #0
 800600c:	60bb      	str	r3, [r7, #8]
 800600e:	4b7f      	ldr	r3, [pc, #508]	@ (800620c <HAL_RCC_OscConfig+0x4ac>)
 8006010:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006012:	4a7e      	ldr	r2, [pc, #504]	@ (800620c <HAL_RCC_OscConfig+0x4ac>)
 8006014:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006018:	6413      	str	r3, [r2, #64]	@ 0x40
 800601a:	4b7c      	ldr	r3, [pc, #496]	@ (800620c <HAL_RCC_OscConfig+0x4ac>)
 800601c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800601e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006022:	60bb      	str	r3, [r7, #8]
 8006024:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006026:	2301      	movs	r3, #1
 8006028:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800602a:	4b79      	ldr	r3, [pc, #484]	@ (8006210 <HAL_RCC_OscConfig+0x4b0>)
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006032:	2b00      	cmp	r3, #0
 8006034:	d118      	bne.n	8006068 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006036:	4b76      	ldr	r3, [pc, #472]	@ (8006210 <HAL_RCC_OscConfig+0x4b0>)
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	4a75      	ldr	r2, [pc, #468]	@ (8006210 <HAL_RCC_OscConfig+0x4b0>)
 800603c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006040:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006042:	f7fd fcff 	bl	8003a44 <HAL_GetTick>
 8006046:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006048:	e008      	b.n	800605c <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800604a:	f7fd fcfb 	bl	8003a44 <HAL_GetTick>
 800604e:	4602      	mov	r2, r0
 8006050:	693b      	ldr	r3, [r7, #16]
 8006052:	1ad3      	subs	r3, r2, r3
 8006054:	2b02      	cmp	r3, #2
 8006056:	d901      	bls.n	800605c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8006058:	2303      	movs	r3, #3
 800605a:	e118      	b.n	800628e <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800605c:	4b6c      	ldr	r3, [pc, #432]	@ (8006210 <HAL_RCC_OscConfig+0x4b0>)
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006064:	2b00      	cmp	r3, #0
 8006066:	d0f0      	beq.n	800604a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	689b      	ldr	r3, [r3, #8]
 800606c:	2b01      	cmp	r3, #1
 800606e:	d106      	bne.n	800607e <HAL_RCC_OscConfig+0x31e>
 8006070:	4b66      	ldr	r3, [pc, #408]	@ (800620c <HAL_RCC_OscConfig+0x4ac>)
 8006072:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006074:	4a65      	ldr	r2, [pc, #404]	@ (800620c <HAL_RCC_OscConfig+0x4ac>)
 8006076:	f043 0301 	orr.w	r3, r3, #1
 800607a:	6713      	str	r3, [r2, #112]	@ 0x70
 800607c:	e01c      	b.n	80060b8 <HAL_RCC_OscConfig+0x358>
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	689b      	ldr	r3, [r3, #8]
 8006082:	2b05      	cmp	r3, #5
 8006084:	d10c      	bne.n	80060a0 <HAL_RCC_OscConfig+0x340>
 8006086:	4b61      	ldr	r3, [pc, #388]	@ (800620c <HAL_RCC_OscConfig+0x4ac>)
 8006088:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800608a:	4a60      	ldr	r2, [pc, #384]	@ (800620c <HAL_RCC_OscConfig+0x4ac>)
 800608c:	f043 0304 	orr.w	r3, r3, #4
 8006090:	6713      	str	r3, [r2, #112]	@ 0x70
 8006092:	4b5e      	ldr	r3, [pc, #376]	@ (800620c <HAL_RCC_OscConfig+0x4ac>)
 8006094:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006096:	4a5d      	ldr	r2, [pc, #372]	@ (800620c <HAL_RCC_OscConfig+0x4ac>)
 8006098:	f043 0301 	orr.w	r3, r3, #1
 800609c:	6713      	str	r3, [r2, #112]	@ 0x70
 800609e:	e00b      	b.n	80060b8 <HAL_RCC_OscConfig+0x358>
 80060a0:	4b5a      	ldr	r3, [pc, #360]	@ (800620c <HAL_RCC_OscConfig+0x4ac>)
 80060a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060a4:	4a59      	ldr	r2, [pc, #356]	@ (800620c <HAL_RCC_OscConfig+0x4ac>)
 80060a6:	f023 0301 	bic.w	r3, r3, #1
 80060aa:	6713      	str	r3, [r2, #112]	@ 0x70
 80060ac:	4b57      	ldr	r3, [pc, #348]	@ (800620c <HAL_RCC_OscConfig+0x4ac>)
 80060ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060b0:	4a56      	ldr	r2, [pc, #344]	@ (800620c <HAL_RCC_OscConfig+0x4ac>)
 80060b2:	f023 0304 	bic.w	r3, r3, #4
 80060b6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	689b      	ldr	r3, [r3, #8]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d015      	beq.n	80060ec <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060c0:	f7fd fcc0 	bl	8003a44 <HAL_GetTick>
 80060c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80060c6:	e00a      	b.n	80060de <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80060c8:	f7fd fcbc 	bl	8003a44 <HAL_GetTick>
 80060cc:	4602      	mov	r2, r0
 80060ce:	693b      	ldr	r3, [r7, #16]
 80060d0:	1ad3      	subs	r3, r2, r3
 80060d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80060d6:	4293      	cmp	r3, r2
 80060d8:	d901      	bls.n	80060de <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80060da:	2303      	movs	r3, #3
 80060dc:	e0d7      	b.n	800628e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80060de:	4b4b      	ldr	r3, [pc, #300]	@ (800620c <HAL_RCC_OscConfig+0x4ac>)
 80060e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060e2:	f003 0302 	and.w	r3, r3, #2
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d0ee      	beq.n	80060c8 <HAL_RCC_OscConfig+0x368>
 80060ea:	e014      	b.n	8006116 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060ec:	f7fd fcaa 	bl	8003a44 <HAL_GetTick>
 80060f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80060f2:	e00a      	b.n	800610a <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80060f4:	f7fd fca6 	bl	8003a44 <HAL_GetTick>
 80060f8:	4602      	mov	r2, r0
 80060fa:	693b      	ldr	r3, [r7, #16]
 80060fc:	1ad3      	subs	r3, r2, r3
 80060fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006102:	4293      	cmp	r3, r2
 8006104:	d901      	bls.n	800610a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8006106:	2303      	movs	r3, #3
 8006108:	e0c1      	b.n	800628e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800610a:	4b40      	ldr	r3, [pc, #256]	@ (800620c <HAL_RCC_OscConfig+0x4ac>)
 800610c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800610e:	f003 0302 	and.w	r3, r3, #2
 8006112:	2b00      	cmp	r3, #0
 8006114:	d1ee      	bne.n	80060f4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006116:	7dfb      	ldrb	r3, [r7, #23]
 8006118:	2b01      	cmp	r3, #1
 800611a:	d105      	bne.n	8006128 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800611c:	4b3b      	ldr	r3, [pc, #236]	@ (800620c <HAL_RCC_OscConfig+0x4ac>)
 800611e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006120:	4a3a      	ldr	r2, [pc, #232]	@ (800620c <HAL_RCC_OscConfig+0x4ac>)
 8006122:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006126:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	699b      	ldr	r3, [r3, #24]
 800612c:	2b00      	cmp	r3, #0
 800612e:	f000 80ad 	beq.w	800628c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006132:	4b36      	ldr	r3, [pc, #216]	@ (800620c <HAL_RCC_OscConfig+0x4ac>)
 8006134:	689b      	ldr	r3, [r3, #8]
 8006136:	f003 030c 	and.w	r3, r3, #12
 800613a:	2b08      	cmp	r3, #8
 800613c:	d060      	beq.n	8006200 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	699b      	ldr	r3, [r3, #24]
 8006142:	2b02      	cmp	r3, #2
 8006144:	d145      	bne.n	80061d2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006146:	4b33      	ldr	r3, [pc, #204]	@ (8006214 <HAL_RCC_OscConfig+0x4b4>)
 8006148:	2200      	movs	r2, #0
 800614a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800614c:	f7fd fc7a 	bl	8003a44 <HAL_GetTick>
 8006150:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006152:	e008      	b.n	8006166 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006154:	f7fd fc76 	bl	8003a44 <HAL_GetTick>
 8006158:	4602      	mov	r2, r0
 800615a:	693b      	ldr	r3, [r7, #16]
 800615c:	1ad3      	subs	r3, r2, r3
 800615e:	2b02      	cmp	r3, #2
 8006160:	d901      	bls.n	8006166 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8006162:	2303      	movs	r3, #3
 8006164:	e093      	b.n	800628e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006166:	4b29      	ldr	r3, [pc, #164]	@ (800620c <HAL_RCC_OscConfig+0x4ac>)
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800616e:	2b00      	cmp	r3, #0
 8006170:	d1f0      	bne.n	8006154 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	69da      	ldr	r2, [r3, #28]
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	6a1b      	ldr	r3, [r3, #32]
 800617a:	431a      	orrs	r2, r3
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006180:	019b      	lsls	r3, r3, #6
 8006182:	431a      	orrs	r2, r3
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006188:	085b      	lsrs	r3, r3, #1
 800618a:	3b01      	subs	r3, #1
 800618c:	041b      	lsls	r3, r3, #16
 800618e:	431a      	orrs	r2, r3
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006194:	061b      	lsls	r3, r3, #24
 8006196:	431a      	orrs	r2, r3
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800619c:	071b      	lsls	r3, r3, #28
 800619e:	491b      	ldr	r1, [pc, #108]	@ (800620c <HAL_RCC_OscConfig+0x4ac>)
 80061a0:	4313      	orrs	r3, r2
 80061a2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80061a4:	4b1b      	ldr	r3, [pc, #108]	@ (8006214 <HAL_RCC_OscConfig+0x4b4>)
 80061a6:	2201      	movs	r2, #1
 80061a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061aa:	f7fd fc4b 	bl	8003a44 <HAL_GetTick>
 80061ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80061b0:	e008      	b.n	80061c4 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80061b2:	f7fd fc47 	bl	8003a44 <HAL_GetTick>
 80061b6:	4602      	mov	r2, r0
 80061b8:	693b      	ldr	r3, [r7, #16]
 80061ba:	1ad3      	subs	r3, r2, r3
 80061bc:	2b02      	cmp	r3, #2
 80061be:	d901      	bls.n	80061c4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80061c0:	2303      	movs	r3, #3
 80061c2:	e064      	b.n	800628e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80061c4:	4b11      	ldr	r3, [pc, #68]	@ (800620c <HAL_RCC_OscConfig+0x4ac>)
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d0f0      	beq.n	80061b2 <HAL_RCC_OscConfig+0x452>
 80061d0:	e05c      	b.n	800628c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80061d2:	4b10      	ldr	r3, [pc, #64]	@ (8006214 <HAL_RCC_OscConfig+0x4b4>)
 80061d4:	2200      	movs	r2, #0
 80061d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061d8:	f7fd fc34 	bl	8003a44 <HAL_GetTick>
 80061dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80061de:	e008      	b.n	80061f2 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80061e0:	f7fd fc30 	bl	8003a44 <HAL_GetTick>
 80061e4:	4602      	mov	r2, r0
 80061e6:	693b      	ldr	r3, [r7, #16]
 80061e8:	1ad3      	subs	r3, r2, r3
 80061ea:	2b02      	cmp	r3, #2
 80061ec:	d901      	bls.n	80061f2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80061ee:	2303      	movs	r3, #3
 80061f0:	e04d      	b.n	800628e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80061f2:	4b06      	ldr	r3, [pc, #24]	@ (800620c <HAL_RCC_OscConfig+0x4ac>)
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d1f0      	bne.n	80061e0 <HAL_RCC_OscConfig+0x480>
 80061fe:	e045      	b.n	800628c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	699b      	ldr	r3, [r3, #24]
 8006204:	2b01      	cmp	r3, #1
 8006206:	d107      	bne.n	8006218 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8006208:	2301      	movs	r3, #1
 800620a:	e040      	b.n	800628e <HAL_RCC_OscConfig+0x52e>
 800620c:	40023800 	.word	0x40023800
 8006210:	40007000 	.word	0x40007000
 8006214:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006218:	4b1f      	ldr	r3, [pc, #124]	@ (8006298 <HAL_RCC_OscConfig+0x538>)
 800621a:	685b      	ldr	r3, [r3, #4]
 800621c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	699b      	ldr	r3, [r3, #24]
 8006222:	2b01      	cmp	r3, #1
 8006224:	d030      	beq.n	8006288 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006230:	429a      	cmp	r2, r3
 8006232:	d129      	bne.n	8006288 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800623e:	429a      	cmp	r2, r3
 8006240:	d122      	bne.n	8006288 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006242:	68fa      	ldr	r2, [r7, #12]
 8006244:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006248:	4013      	ands	r3, r2
 800624a:	687a      	ldr	r2, [r7, #4]
 800624c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800624e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006250:	4293      	cmp	r3, r2
 8006252:	d119      	bne.n	8006288 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800625e:	085b      	lsrs	r3, r3, #1
 8006260:	3b01      	subs	r3, #1
 8006262:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006264:	429a      	cmp	r2, r3
 8006266:	d10f      	bne.n	8006288 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006272:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006274:	429a      	cmp	r2, r3
 8006276:	d107      	bne.n	8006288 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006282:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006284:	429a      	cmp	r2, r3
 8006286:	d001      	beq.n	800628c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8006288:	2301      	movs	r3, #1
 800628a:	e000      	b.n	800628e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800628c:	2300      	movs	r3, #0
}
 800628e:	4618      	mov	r0, r3
 8006290:	3718      	adds	r7, #24
 8006292:	46bd      	mov	sp, r7
 8006294:	bd80      	pop	{r7, pc}
 8006296:	bf00      	nop
 8006298:	40023800 	.word	0x40023800

0800629c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800629c:	b580      	push	{r7, lr}
 800629e:	b084      	sub	sp, #16
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80062a4:	2301      	movs	r3, #1
 80062a6:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d101      	bne.n	80062b2 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80062ae:	2301      	movs	r3, #1
 80062b0:	e073      	b.n	800639a <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	7f5b      	ldrb	r3, [r3, #29]
 80062b6:	b2db      	uxtb	r3, r3
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d105      	bne.n	80062c8 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2200      	movs	r2, #0
 80062c0:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80062c2:	6878      	ldr	r0, [r7, #4]
 80062c4:	f7fc f83c 	bl	8002340 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2202      	movs	r2, #2
 80062cc:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	68db      	ldr	r3, [r3, #12]
 80062d4:	f003 0310 	and.w	r3, r3, #16
 80062d8:	2b10      	cmp	r3, #16
 80062da:	d055      	beq.n	8006388 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	22ca      	movs	r2, #202	@ 0xca
 80062e2:	625a      	str	r2, [r3, #36]	@ 0x24
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	2253      	movs	r2, #83	@ 0x53
 80062ea:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80062ec:	6878      	ldr	r0, [r7, #4]
 80062ee:	f000 fa49 	bl	8006784 <RTC_EnterInitMode>
 80062f2:	4603      	mov	r3, r0
 80062f4:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80062f6:	7bfb      	ldrb	r3, [r7, #15]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d12c      	bne.n	8006356 <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	689b      	ldr	r3, [r3, #8]
 8006302:	687a      	ldr	r2, [r7, #4]
 8006304:	6812      	ldr	r2, [r2, #0]
 8006306:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800630a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800630e:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	6899      	ldr	r1, [r3, #8]
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	685a      	ldr	r2, [r3, #4]
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	691b      	ldr	r3, [r3, #16]
 800631e:	431a      	orrs	r2, r3
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	695b      	ldr	r3, [r3, #20]
 8006324:	431a      	orrs	r2, r3
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	430a      	orrs	r2, r1
 800632c:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	687a      	ldr	r2, [r7, #4]
 8006334:	68d2      	ldr	r2, [r2, #12]
 8006336:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	6919      	ldr	r1, [r3, #16]
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	689b      	ldr	r3, [r3, #8]
 8006342:	041a      	lsls	r2, r3, #16
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	430a      	orrs	r2, r1
 800634a:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800634c:	6878      	ldr	r0, [r7, #4]
 800634e:	f000 fa50 	bl	80067f2 <RTC_ExitInitMode>
 8006352:	4603      	mov	r3, r0
 8006354:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8006356:	7bfb      	ldrb	r3, [r7, #15]
 8006358:	2b00      	cmp	r3, #0
 800635a:	d110      	bne.n	800637e <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800636a:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	699a      	ldr	r2, [r3, #24]
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	430a      	orrs	r2, r1
 800637c:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	22ff      	movs	r2, #255	@ 0xff
 8006384:	625a      	str	r2, [r3, #36]	@ 0x24
 8006386:	e001      	b.n	800638c <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8006388:	2300      	movs	r3, #0
 800638a:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800638c:	7bfb      	ldrb	r3, [r7, #15]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d102      	bne.n	8006398 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	2201      	movs	r2, #1
 8006396:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8006398:	7bfb      	ldrb	r3, [r7, #15]
}
 800639a:	4618      	mov	r0, r3
 800639c:	3710      	adds	r7, #16
 800639e:	46bd      	mov	sp, r7
 80063a0:	bd80      	pop	{r7, pc}

080063a2 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80063a2:	b590      	push	{r4, r7, lr}
 80063a4:	b087      	sub	sp, #28
 80063a6:	af00      	add	r7, sp, #0
 80063a8:	60f8      	str	r0, [r7, #12]
 80063aa:	60b9      	str	r1, [r7, #8]
 80063ac:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80063ae:	2300      	movs	r3, #0
 80063b0:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	7f1b      	ldrb	r3, [r3, #28]
 80063b6:	2b01      	cmp	r3, #1
 80063b8:	d101      	bne.n	80063be <HAL_RTC_SetTime+0x1c>
 80063ba:	2302      	movs	r3, #2
 80063bc:	e087      	b.n	80064ce <HAL_RTC_SetTime+0x12c>
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	2201      	movs	r2, #1
 80063c2:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	2202      	movs	r2, #2
 80063c8:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d126      	bne.n	800641e <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	689b      	ldr	r3, [r3, #8]
 80063d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d102      	bne.n	80063e4 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80063de:	68bb      	ldr	r3, [r7, #8]
 80063e0:	2200      	movs	r2, #0
 80063e2:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80063e4:	68bb      	ldr	r3, [r7, #8]
 80063e6:	781b      	ldrb	r3, [r3, #0]
 80063e8:	4618      	mov	r0, r3
 80063ea:	f000 fa27 	bl	800683c <RTC_ByteToBcd2>
 80063ee:	4603      	mov	r3, r0
 80063f0:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80063f2:	68bb      	ldr	r3, [r7, #8]
 80063f4:	785b      	ldrb	r3, [r3, #1]
 80063f6:	4618      	mov	r0, r3
 80063f8:	f000 fa20 	bl	800683c <RTC_ByteToBcd2>
 80063fc:	4603      	mov	r3, r0
 80063fe:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8006400:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8006402:	68bb      	ldr	r3, [r7, #8]
 8006404:	789b      	ldrb	r3, [r3, #2]
 8006406:	4618      	mov	r0, r3
 8006408:	f000 fa18 	bl	800683c <RTC_ByteToBcd2>
 800640c:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800640e:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8006412:	68bb      	ldr	r3, [r7, #8]
 8006414:	78db      	ldrb	r3, [r3, #3]
 8006416:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8006418:	4313      	orrs	r3, r2
 800641a:	617b      	str	r3, [r7, #20]
 800641c:	e018      	b.n	8006450 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	689b      	ldr	r3, [r3, #8]
 8006424:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006428:	2b00      	cmp	r3, #0
 800642a:	d102      	bne.n	8006432 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800642c:	68bb      	ldr	r3, [r7, #8]
 800642e:	2200      	movs	r2, #0
 8006430:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8006432:	68bb      	ldr	r3, [r7, #8]
 8006434:	781b      	ldrb	r3, [r3, #0]
 8006436:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8006438:	68bb      	ldr	r3, [r7, #8]
 800643a:	785b      	ldrb	r3, [r3, #1]
 800643c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800643e:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8006440:	68ba      	ldr	r2, [r7, #8]
 8006442:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8006444:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8006446:	68bb      	ldr	r3, [r7, #8]
 8006448:	78db      	ldrb	r3, [r3, #3]
 800644a:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800644c:	4313      	orrs	r3, r2
 800644e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	22ca      	movs	r2, #202	@ 0xca
 8006456:	625a      	str	r2, [r3, #36]	@ 0x24
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	2253      	movs	r2, #83	@ 0x53
 800645e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8006460:	68f8      	ldr	r0, [r7, #12]
 8006462:	f000 f98f 	bl	8006784 <RTC_EnterInitMode>
 8006466:	4603      	mov	r3, r0
 8006468:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800646a:	7cfb      	ldrb	r3, [r7, #19]
 800646c:	2b00      	cmp	r3, #0
 800646e:	d120      	bne.n	80064b2 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	681a      	ldr	r2, [r3, #0]
 8006474:	697b      	ldr	r3, [r7, #20]
 8006476:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 800647a:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 800647e:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	689a      	ldr	r2, [r3, #8]
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800648e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	6899      	ldr	r1, [r3, #8]
 8006496:	68bb      	ldr	r3, [r7, #8]
 8006498:	68da      	ldr	r2, [r3, #12]
 800649a:	68bb      	ldr	r3, [r7, #8]
 800649c:	691b      	ldr	r3, [r3, #16]
 800649e:	431a      	orrs	r2, r3
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	430a      	orrs	r2, r1
 80064a6:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80064a8:	68f8      	ldr	r0, [r7, #12]
 80064aa:	f000 f9a2 	bl	80067f2 <RTC_ExitInitMode>
 80064ae:	4603      	mov	r3, r0
 80064b0:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80064b2:	7cfb      	ldrb	r3, [r7, #19]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d102      	bne.n	80064be <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	2201      	movs	r2, #1
 80064bc:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	22ff      	movs	r2, #255	@ 0xff
 80064c4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	2200      	movs	r2, #0
 80064ca:	771a      	strb	r2, [r3, #28]

  return status;
 80064cc:	7cfb      	ldrb	r3, [r7, #19]
}
 80064ce:	4618      	mov	r0, r3
 80064d0:	371c      	adds	r7, #28
 80064d2:	46bd      	mov	sp, r7
 80064d4:	bd90      	pop	{r4, r7, pc}

080064d6 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80064d6:	b580      	push	{r7, lr}
 80064d8:	b086      	sub	sp, #24
 80064da:	af00      	add	r7, sp, #0
 80064dc:	60f8      	str	r0, [r7, #12]
 80064de:	60b9      	str	r1, [r7, #8]
 80064e0:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80064e2:	2300      	movs	r3, #0
 80064e4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80064ec:	68bb      	ldr	r3, [r7, #8]
 80064ee:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	691b      	ldr	r3, [r3, #16]
 80064f6:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80064fa:	68bb      	ldr	r3, [r7, #8]
 80064fc:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8006508:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 800650c:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800650e:	697b      	ldr	r3, [r7, #20]
 8006510:	0c1b      	lsrs	r3, r3, #16
 8006512:	b2db      	uxtb	r3, r3
 8006514:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006518:	b2da      	uxtb	r2, r3
 800651a:	68bb      	ldr	r3, [r7, #8]
 800651c:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800651e:	697b      	ldr	r3, [r7, #20]
 8006520:	0a1b      	lsrs	r3, r3, #8
 8006522:	b2db      	uxtb	r3, r3
 8006524:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006528:	b2da      	uxtb	r2, r3
 800652a:	68bb      	ldr	r3, [r7, #8]
 800652c:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 800652e:	697b      	ldr	r3, [r7, #20]
 8006530:	b2db      	uxtb	r3, r3
 8006532:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006536:	b2da      	uxtb	r2, r3
 8006538:	68bb      	ldr	r3, [r7, #8]
 800653a:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800653c:	697b      	ldr	r3, [r7, #20]
 800653e:	0d9b      	lsrs	r3, r3, #22
 8006540:	b2db      	uxtb	r3, r3
 8006542:	f003 0301 	and.w	r3, r3, #1
 8006546:	b2da      	uxtb	r2, r3
 8006548:	68bb      	ldr	r3, [r7, #8]
 800654a:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2b00      	cmp	r3, #0
 8006550:	d11a      	bne.n	8006588 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8006552:	68bb      	ldr	r3, [r7, #8]
 8006554:	781b      	ldrb	r3, [r3, #0]
 8006556:	4618      	mov	r0, r3
 8006558:	f000 f98e 	bl	8006878 <RTC_Bcd2ToByte>
 800655c:	4603      	mov	r3, r0
 800655e:	461a      	mov	r2, r3
 8006560:	68bb      	ldr	r3, [r7, #8]
 8006562:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8006564:	68bb      	ldr	r3, [r7, #8]
 8006566:	785b      	ldrb	r3, [r3, #1]
 8006568:	4618      	mov	r0, r3
 800656a:	f000 f985 	bl	8006878 <RTC_Bcd2ToByte>
 800656e:	4603      	mov	r3, r0
 8006570:	461a      	mov	r2, r3
 8006572:	68bb      	ldr	r3, [r7, #8]
 8006574:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8006576:	68bb      	ldr	r3, [r7, #8]
 8006578:	789b      	ldrb	r3, [r3, #2]
 800657a:	4618      	mov	r0, r3
 800657c:	f000 f97c 	bl	8006878 <RTC_Bcd2ToByte>
 8006580:	4603      	mov	r3, r0
 8006582:	461a      	mov	r2, r3
 8006584:	68bb      	ldr	r3, [r7, #8]
 8006586:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8006588:	2300      	movs	r3, #0
}
 800658a:	4618      	mov	r0, r3
 800658c:	3718      	adds	r7, #24
 800658e:	46bd      	mov	sp, r7
 8006590:	bd80      	pop	{r7, pc}

08006592 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006592:	b590      	push	{r4, r7, lr}
 8006594:	b087      	sub	sp, #28
 8006596:	af00      	add	r7, sp, #0
 8006598:	60f8      	str	r0, [r7, #12]
 800659a:	60b9      	str	r1, [r7, #8]
 800659c:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800659e:	2300      	movs	r3, #0
 80065a0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	7f1b      	ldrb	r3, [r3, #28]
 80065a6:	2b01      	cmp	r3, #1
 80065a8:	d101      	bne.n	80065ae <HAL_RTC_SetDate+0x1c>
 80065aa:	2302      	movs	r3, #2
 80065ac:	e071      	b.n	8006692 <HAL_RTC_SetDate+0x100>
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	2201      	movs	r2, #1
 80065b2:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	2202      	movs	r2, #2
 80065b8:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d10e      	bne.n	80065de <HAL_RTC_SetDate+0x4c>
 80065c0:	68bb      	ldr	r3, [r7, #8]
 80065c2:	785b      	ldrb	r3, [r3, #1]
 80065c4:	f003 0310 	and.w	r3, r3, #16
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d008      	beq.n	80065de <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80065cc:	68bb      	ldr	r3, [r7, #8]
 80065ce:	785b      	ldrb	r3, [r3, #1]
 80065d0:	f023 0310 	bic.w	r3, r3, #16
 80065d4:	b2db      	uxtb	r3, r3
 80065d6:	330a      	adds	r3, #10
 80065d8:	b2da      	uxtb	r2, r3
 80065da:	68bb      	ldr	r3, [r7, #8]
 80065dc:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d11c      	bne.n	800661e <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80065e4:	68bb      	ldr	r3, [r7, #8]
 80065e6:	78db      	ldrb	r3, [r3, #3]
 80065e8:	4618      	mov	r0, r3
 80065ea:	f000 f927 	bl	800683c <RTC_ByteToBcd2>
 80065ee:	4603      	mov	r3, r0
 80065f0:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80065f2:	68bb      	ldr	r3, [r7, #8]
 80065f4:	785b      	ldrb	r3, [r3, #1]
 80065f6:	4618      	mov	r0, r3
 80065f8:	f000 f920 	bl	800683c <RTC_ByteToBcd2>
 80065fc:	4603      	mov	r3, r0
 80065fe:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006600:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8006602:	68bb      	ldr	r3, [r7, #8]
 8006604:	789b      	ldrb	r3, [r3, #2]
 8006606:	4618      	mov	r0, r3
 8006608:	f000 f918 	bl	800683c <RTC_ByteToBcd2>
 800660c:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800660e:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8006612:	68bb      	ldr	r3, [r7, #8]
 8006614:	781b      	ldrb	r3, [r3, #0]
 8006616:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006618:	4313      	orrs	r3, r2
 800661a:	617b      	str	r3, [r7, #20]
 800661c:	e00e      	b.n	800663c <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800661e:	68bb      	ldr	r3, [r7, #8]
 8006620:	78db      	ldrb	r3, [r3, #3]
 8006622:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8006624:	68bb      	ldr	r3, [r7, #8]
 8006626:	785b      	ldrb	r3, [r3, #1]
 8006628:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800662a:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 800662c:	68ba      	ldr	r2, [r7, #8]
 800662e:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8006630:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8006632:	68bb      	ldr	r3, [r7, #8]
 8006634:	781b      	ldrb	r3, [r3, #0]
 8006636:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8006638:	4313      	orrs	r3, r2
 800663a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	22ca      	movs	r2, #202	@ 0xca
 8006642:	625a      	str	r2, [r3, #36]	@ 0x24
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	2253      	movs	r2, #83	@ 0x53
 800664a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800664c:	68f8      	ldr	r0, [r7, #12]
 800664e:	f000 f899 	bl	8006784 <RTC_EnterInitMode>
 8006652:	4603      	mov	r3, r0
 8006654:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8006656:	7cfb      	ldrb	r3, [r7, #19]
 8006658:	2b00      	cmp	r3, #0
 800665a:	d10c      	bne.n	8006676 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	681a      	ldr	r2, [r3, #0]
 8006660:	697b      	ldr	r3, [r7, #20]
 8006662:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8006666:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800666a:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800666c:	68f8      	ldr	r0, [r7, #12]
 800666e:	f000 f8c0 	bl	80067f2 <RTC_ExitInitMode>
 8006672:	4603      	mov	r3, r0
 8006674:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8006676:	7cfb      	ldrb	r3, [r7, #19]
 8006678:	2b00      	cmp	r3, #0
 800667a:	d102      	bne.n	8006682 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	2201      	movs	r2, #1
 8006680:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	22ff      	movs	r2, #255	@ 0xff
 8006688:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	2200      	movs	r2, #0
 800668e:	771a      	strb	r2, [r3, #28]

  return status;
 8006690:	7cfb      	ldrb	r3, [r7, #19]
}
 8006692:	4618      	mov	r0, r3
 8006694:	371c      	adds	r7, #28
 8006696:	46bd      	mov	sp, r7
 8006698:	bd90      	pop	{r4, r7, pc}

0800669a <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800669a:	b580      	push	{r7, lr}
 800669c:	b086      	sub	sp, #24
 800669e:	af00      	add	r7, sp, #0
 80066a0:	60f8      	str	r0, [r7, #12]
 80066a2:	60b9      	str	r1, [r7, #8]
 80066a4:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80066a6:	2300      	movs	r3, #0
 80066a8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	685b      	ldr	r3, [r3, #4]
 80066b0:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80066b4:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80066b8:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80066ba:	697b      	ldr	r3, [r7, #20]
 80066bc:	0c1b      	lsrs	r3, r3, #16
 80066be:	b2da      	uxtb	r2, r3
 80066c0:	68bb      	ldr	r3, [r7, #8]
 80066c2:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80066c4:	697b      	ldr	r3, [r7, #20]
 80066c6:	0a1b      	lsrs	r3, r3, #8
 80066c8:	b2db      	uxtb	r3, r3
 80066ca:	f003 031f 	and.w	r3, r3, #31
 80066ce:	b2da      	uxtb	r2, r3
 80066d0:	68bb      	ldr	r3, [r7, #8]
 80066d2:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80066d4:	697b      	ldr	r3, [r7, #20]
 80066d6:	b2db      	uxtb	r3, r3
 80066d8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80066dc:	b2da      	uxtb	r2, r3
 80066de:	68bb      	ldr	r3, [r7, #8]
 80066e0:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 80066e2:	697b      	ldr	r3, [r7, #20]
 80066e4:	0b5b      	lsrs	r3, r3, #13
 80066e6:	b2db      	uxtb	r3, r3
 80066e8:	f003 0307 	and.w	r3, r3, #7
 80066ec:	b2da      	uxtb	r2, r3
 80066ee:	68bb      	ldr	r3, [r7, #8]
 80066f0:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d11a      	bne.n	800672e <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80066f8:	68bb      	ldr	r3, [r7, #8]
 80066fa:	78db      	ldrb	r3, [r3, #3]
 80066fc:	4618      	mov	r0, r3
 80066fe:	f000 f8bb 	bl	8006878 <RTC_Bcd2ToByte>
 8006702:	4603      	mov	r3, r0
 8006704:	461a      	mov	r2, r3
 8006706:	68bb      	ldr	r3, [r7, #8]
 8006708:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800670a:	68bb      	ldr	r3, [r7, #8]
 800670c:	785b      	ldrb	r3, [r3, #1]
 800670e:	4618      	mov	r0, r3
 8006710:	f000 f8b2 	bl	8006878 <RTC_Bcd2ToByte>
 8006714:	4603      	mov	r3, r0
 8006716:	461a      	mov	r2, r3
 8006718:	68bb      	ldr	r3, [r7, #8]
 800671a:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800671c:	68bb      	ldr	r3, [r7, #8]
 800671e:	789b      	ldrb	r3, [r3, #2]
 8006720:	4618      	mov	r0, r3
 8006722:	f000 f8a9 	bl	8006878 <RTC_Bcd2ToByte>
 8006726:	4603      	mov	r3, r0
 8006728:	461a      	mov	r2, r3
 800672a:	68bb      	ldr	r3, [r7, #8]
 800672c:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800672e:	2300      	movs	r3, #0
}
 8006730:	4618      	mov	r0, r3
 8006732:	3718      	adds	r7, #24
 8006734:	46bd      	mov	sp, r7
 8006736:	bd80      	pop	{r7, pc}

08006738 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006738:	b580      	push	{r7, lr}
 800673a:	b084      	sub	sp, #16
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006740:	2300      	movs	r3, #0
 8006742:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	4a0d      	ldr	r2, [pc, #52]	@ (8006780 <HAL_RTC_WaitForSynchro+0x48>)
 800674a:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800674c:	f7fd f97a 	bl	8003a44 <HAL_GetTick>
 8006750:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006752:	e009      	b.n	8006768 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006754:	f7fd f976 	bl	8003a44 <HAL_GetTick>
 8006758:	4602      	mov	r2, r0
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	1ad3      	subs	r3, r2, r3
 800675e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006762:	d901      	bls.n	8006768 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8006764:	2303      	movs	r3, #3
 8006766:	e007      	b.n	8006778 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	68db      	ldr	r3, [r3, #12]
 800676e:	f003 0320 	and.w	r3, r3, #32
 8006772:	2b00      	cmp	r3, #0
 8006774:	d0ee      	beq.n	8006754 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8006776:	2300      	movs	r3, #0
}
 8006778:	4618      	mov	r0, r3
 800677a:	3710      	adds	r7, #16
 800677c:	46bd      	mov	sp, r7
 800677e:	bd80      	pop	{r7, pc}
 8006780:	00017f5f 	.word	0x00017f5f

08006784 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006784:	b580      	push	{r7, lr}
 8006786:	b084      	sub	sp, #16
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800678c:	2300      	movs	r3, #0
 800678e:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8006790:	2300      	movs	r3, #0
 8006792:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	68db      	ldr	r3, [r3, #12]
 800679a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d122      	bne.n	80067e8 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	68da      	ldr	r2, [r3, #12]
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80067b0:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80067b2:	f7fd f947 	bl	8003a44 <HAL_GetTick>
 80067b6:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80067b8:	e00c      	b.n	80067d4 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80067ba:	f7fd f943 	bl	8003a44 <HAL_GetTick>
 80067be:	4602      	mov	r2, r0
 80067c0:	68bb      	ldr	r3, [r7, #8]
 80067c2:	1ad3      	subs	r3, r2, r3
 80067c4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80067c8:	d904      	bls.n	80067d4 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	2204      	movs	r2, #4
 80067ce:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 80067d0:	2301      	movs	r3, #1
 80067d2:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	68db      	ldr	r3, [r3, #12]
 80067da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d102      	bne.n	80067e8 <RTC_EnterInitMode+0x64>
 80067e2:	7bfb      	ldrb	r3, [r7, #15]
 80067e4:	2b01      	cmp	r3, #1
 80067e6:	d1e8      	bne.n	80067ba <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80067e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80067ea:	4618      	mov	r0, r3
 80067ec:	3710      	adds	r7, #16
 80067ee:	46bd      	mov	sp, r7
 80067f0:	bd80      	pop	{r7, pc}

080067f2 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80067f2:	b580      	push	{r7, lr}
 80067f4:	b084      	sub	sp, #16
 80067f6:	af00      	add	r7, sp, #0
 80067f8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80067fa:	2300      	movs	r3, #0
 80067fc:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	68da      	ldr	r2, [r3, #12]
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800680c:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	689b      	ldr	r3, [r3, #8]
 8006814:	f003 0320 	and.w	r3, r3, #32
 8006818:	2b00      	cmp	r3, #0
 800681a:	d10a      	bne.n	8006832 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800681c:	6878      	ldr	r0, [r7, #4]
 800681e:	f7ff ff8b 	bl	8006738 <HAL_RTC_WaitForSynchro>
 8006822:	4603      	mov	r3, r0
 8006824:	2b00      	cmp	r3, #0
 8006826:	d004      	beq.n	8006832 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2204      	movs	r2, #4
 800682c:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800682e:	2301      	movs	r3, #1
 8006830:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8006832:	7bfb      	ldrb	r3, [r7, #15]
}
 8006834:	4618      	mov	r0, r3
 8006836:	3710      	adds	r7, #16
 8006838:	46bd      	mov	sp, r7
 800683a:	bd80      	pop	{r7, pc}

0800683c <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 800683c:	b480      	push	{r7}
 800683e:	b085      	sub	sp, #20
 8006840:	af00      	add	r7, sp, #0
 8006842:	4603      	mov	r3, r0
 8006844:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8006846:	2300      	movs	r3, #0
 8006848:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 800684a:	e005      	b.n	8006858 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	3301      	adds	r3, #1
 8006850:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8006852:	79fb      	ldrb	r3, [r7, #7]
 8006854:	3b0a      	subs	r3, #10
 8006856:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8006858:	79fb      	ldrb	r3, [r7, #7]
 800685a:	2b09      	cmp	r3, #9
 800685c:	d8f6      	bhi.n	800684c <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	b2db      	uxtb	r3, r3
 8006862:	011b      	lsls	r3, r3, #4
 8006864:	b2da      	uxtb	r2, r3
 8006866:	79fb      	ldrb	r3, [r7, #7]
 8006868:	4313      	orrs	r3, r2
 800686a:	b2db      	uxtb	r3, r3
}
 800686c:	4618      	mov	r0, r3
 800686e:	3714      	adds	r7, #20
 8006870:	46bd      	mov	sp, r7
 8006872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006876:	4770      	bx	lr

08006878 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8006878:	b480      	push	{r7}
 800687a:	b085      	sub	sp, #20
 800687c:	af00      	add	r7, sp, #0
 800687e:	4603      	mov	r3, r0
 8006880:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 8006882:	2300      	movs	r3, #0
 8006884:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8006886:	79fb      	ldrb	r3, [r7, #7]
 8006888:	091b      	lsrs	r3, r3, #4
 800688a:	b2db      	uxtb	r3, r3
 800688c:	461a      	mov	r2, r3
 800688e:	4613      	mov	r3, r2
 8006890:	009b      	lsls	r3, r3, #2
 8006892:	4413      	add	r3, r2
 8006894:	005b      	lsls	r3, r3, #1
 8006896:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	b2da      	uxtb	r2, r3
 800689c:	79fb      	ldrb	r3, [r7, #7]
 800689e:	f003 030f 	and.w	r3, r3, #15
 80068a2:	b2db      	uxtb	r3, r3
 80068a4:	4413      	add	r3, r2
 80068a6:	b2db      	uxtb	r3, r3
}
 80068a8:	4618      	mov	r0, r3
 80068aa:	3714      	adds	r7, #20
 80068ac:	46bd      	mov	sp, r7
 80068ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b2:	4770      	bx	lr

080068b4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80068b4:	b580      	push	{r7, lr}
 80068b6:	b082      	sub	sp, #8
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d101      	bne.n	80068c6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80068c2:	2301      	movs	r3, #1
 80068c4:	e07b      	b.n	80069be <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d108      	bne.n	80068e0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	685b      	ldr	r3, [r3, #4]
 80068d2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80068d6:	d009      	beq.n	80068ec <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2200      	movs	r2, #0
 80068dc:	61da      	str	r2, [r3, #28]
 80068de:	e005      	b.n	80068ec <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2200      	movs	r2, #0
 80068e4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	2200      	movs	r2, #0
 80068ea:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2200      	movs	r2, #0
 80068f0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80068f8:	b2db      	uxtb	r3, r3
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d106      	bne.n	800690c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	2200      	movs	r2, #0
 8006902:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006906:	6878      	ldr	r0, [r7, #4]
 8006908:	f7fb fd7c 	bl	8002404 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2202      	movs	r2, #2
 8006910:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	681a      	ldr	r2, [r3, #0]
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006922:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	685b      	ldr	r3, [r3, #4]
 8006928:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	689b      	ldr	r3, [r3, #8]
 8006930:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006934:	431a      	orrs	r2, r3
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	68db      	ldr	r3, [r3, #12]
 800693a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800693e:	431a      	orrs	r2, r3
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	691b      	ldr	r3, [r3, #16]
 8006944:	f003 0302 	and.w	r3, r3, #2
 8006948:	431a      	orrs	r2, r3
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	695b      	ldr	r3, [r3, #20]
 800694e:	f003 0301 	and.w	r3, r3, #1
 8006952:	431a      	orrs	r2, r3
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	699b      	ldr	r3, [r3, #24]
 8006958:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800695c:	431a      	orrs	r2, r3
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	69db      	ldr	r3, [r3, #28]
 8006962:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006966:	431a      	orrs	r2, r3
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	6a1b      	ldr	r3, [r3, #32]
 800696c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006970:	ea42 0103 	orr.w	r1, r2, r3
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006978:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	430a      	orrs	r2, r1
 8006982:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	699b      	ldr	r3, [r3, #24]
 8006988:	0c1b      	lsrs	r3, r3, #16
 800698a:	f003 0104 	and.w	r1, r3, #4
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006992:	f003 0210 	and.w	r2, r3, #16
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	430a      	orrs	r2, r1
 800699c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	69da      	ldr	r2, [r3, #28]
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80069ac:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	2200      	movs	r2, #0
 80069b2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2201      	movs	r2, #1
 80069b8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80069bc:	2300      	movs	r3, #0
}
 80069be:	4618      	mov	r0, r3
 80069c0:	3708      	adds	r7, #8
 80069c2:	46bd      	mov	sp, r7
 80069c4:	bd80      	pop	{r7, pc}

080069c6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80069c6:	b580      	push	{r7, lr}
 80069c8:	b088      	sub	sp, #32
 80069ca:	af00      	add	r7, sp, #0
 80069cc:	60f8      	str	r0, [r7, #12]
 80069ce:	60b9      	str	r1, [r7, #8]
 80069d0:	603b      	str	r3, [r7, #0]
 80069d2:	4613      	mov	r3, r2
 80069d4:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80069d6:	f7fd f835 	bl	8003a44 <HAL_GetTick>
 80069da:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80069dc:	88fb      	ldrh	r3, [r7, #6]
 80069de:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80069e6:	b2db      	uxtb	r3, r3
 80069e8:	2b01      	cmp	r3, #1
 80069ea:	d001      	beq.n	80069f0 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80069ec:	2302      	movs	r3, #2
 80069ee:	e12a      	b.n	8006c46 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80069f0:	68bb      	ldr	r3, [r7, #8]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d002      	beq.n	80069fc <HAL_SPI_Transmit+0x36>
 80069f6:	88fb      	ldrh	r3, [r7, #6]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d101      	bne.n	8006a00 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80069fc:	2301      	movs	r3, #1
 80069fe:	e122      	b.n	8006c46 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006a06:	2b01      	cmp	r3, #1
 8006a08:	d101      	bne.n	8006a0e <HAL_SPI_Transmit+0x48>
 8006a0a:	2302      	movs	r3, #2
 8006a0c:	e11b      	b.n	8006c46 <HAL_SPI_Transmit+0x280>
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	2201      	movs	r2, #1
 8006a12:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	2203      	movs	r2, #3
 8006a1a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	2200      	movs	r2, #0
 8006a22:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	68ba      	ldr	r2, [r7, #8]
 8006a28:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	88fa      	ldrh	r2, [r7, #6]
 8006a2e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	88fa      	ldrh	r2, [r7, #6]
 8006a34:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	2200      	movs	r2, #0
 8006a3a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	2200      	movs	r2, #0
 8006a40:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	2200      	movs	r2, #0
 8006a46:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	2200      	movs	r2, #0
 8006a52:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	689b      	ldr	r3, [r3, #8]
 8006a58:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006a5c:	d10f      	bne.n	8006a7e <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	681a      	ldr	r2, [r3, #0]
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006a6c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	681a      	ldr	r2, [r3, #0]
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006a7c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a88:	2b40      	cmp	r3, #64	@ 0x40
 8006a8a:	d007      	beq.n	8006a9c <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	681a      	ldr	r2, [r3, #0]
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006a9a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	68db      	ldr	r3, [r3, #12]
 8006aa0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006aa4:	d152      	bne.n	8006b4c <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	685b      	ldr	r3, [r3, #4]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d002      	beq.n	8006ab4 <HAL_SPI_Transmit+0xee>
 8006aae:	8b7b      	ldrh	r3, [r7, #26]
 8006ab0:	2b01      	cmp	r3, #1
 8006ab2:	d145      	bne.n	8006b40 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ab8:	881a      	ldrh	r2, [r3, #0]
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ac4:	1c9a      	adds	r2, r3, #2
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006ace:	b29b      	uxth	r3, r3
 8006ad0:	3b01      	subs	r3, #1
 8006ad2:	b29a      	uxth	r2, r3
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006ad8:	e032      	b.n	8006b40 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	689b      	ldr	r3, [r3, #8]
 8006ae0:	f003 0302 	and.w	r3, r3, #2
 8006ae4:	2b02      	cmp	r3, #2
 8006ae6:	d112      	bne.n	8006b0e <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006aec:	881a      	ldrh	r2, [r3, #0]
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006af8:	1c9a      	adds	r2, r3, #2
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006b02:	b29b      	uxth	r3, r3
 8006b04:	3b01      	subs	r3, #1
 8006b06:	b29a      	uxth	r2, r3
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006b0c:	e018      	b.n	8006b40 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006b0e:	f7fc ff99 	bl	8003a44 <HAL_GetTick>
 8006b12:	4602      	mov	r2, r0
 8006b14:	69fb      	ldr	r3, [r7, #28]
 8006b16:	1ad3      	subs	r3, r2, r3
 8006b18:	683a      	ldr	r2, [r7, #0]
 8006b1a:	429a      	cmp	r2, r3
 8006b1c:	d803      	bhi.n	8006b26 <HAL_SPI_Transmit+0x160>
 8006b1e:	683b      	ldr	r3, [r7, #0]
 8006b20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b24:	d102      	bne.n	8006b2c <HAL_SPI_Transmit+0x166>
 8006b26:	683b      	ldr	r3, [r7, #0]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d109      	bne.n	8006b40 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	2201      	movs	r2, #1
 8006b30:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	2200      	movs	r2, #0
 8006b38:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8006b3c:	2303      	movs	r3, #3
 8006b3e:	e082      	b.n	8006c46 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006b44:	b29b      	uxth	r3, r3
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d1c7      	bne.n	8006ada <HAL_SPI_Transmit+0x114>
 8006b4a:	e053      	b.n	8006bf4 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	685b      	ldr	r3, [r3, #4]
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d002      	beq.n	8006b5a <HAL_SPI_Transmit+0x194>
 8006b54:	8b7b      	ldrh	r3, [r7, #26]
 8006b56:	2b01      	cmp	r3, #1
 8006b58:	d147      	bne.n	8006bea <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	330c      	adds	r3, #12
 8006b64:	7812      	ldrb	r2, [r2, #0]
 8006b66:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b6c:	1c5a      	adds	r2, r3, #1
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006b76:	b29b      	uxth	r3, r3
 8006b78:	3b01      	subs	r3, #1
 8006b7a:	b29a      	uxth	r2, r3
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006b80:	e033      	b.n	8006bea <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	689b      	ldr	r3, [r3, #8]
 8006b88:	f003 0302 	and.w	r3, r3, #2
 8006b8c:	2b02      	cmp	r3, #2
 8006b8e:	d113      	bne.n	8006bb8 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	330c      	adds	r3, #12
 8006b9a:	7812      	ldrb	r2, [r2, #0]
 8006b9c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ba2:	1c5a      	adds	r2, r3, #1
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006bac:	b29b      	uxth	r3, r3
 8006bae:	3b01      	subs	r3, #1
 8006bb0:	b29a      	uxth	r2, r3
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006bb6:	e018      	b.n	8006bea <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006bb8:	f7fc ff44 	bl	8003a44 <HAL_GetTick>
 8006bbc:	4602      	mov	r2, r0
 8006bbe:	69fb      	ldr	r3, [r7, #28]
 8006bc0:	1ad3      	subs	r3, r2, r3
 8006bc2:	683a      	ldr	r2, [r7, #0]
 8006bc4:	429a      	cmp	r2, r3
 8006bc6:	d803      	bhi.n	8006bd0 <HAL_SPI_Transmit+0x20a>
 8006bc8:	683b      	ldr	r3, [r7, #0]
 8006bca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bce:	d102      	bne.n	8006bd6 <HAL_SPI_Transmit+0x210>
 8006bd0:	683b      	ldr	r3, [r7, #0]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d109      	bne.n	8006bea <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	2201      	movs	r2, #1
 8006bda:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	2200      	movs	r2, #0
 8006be2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8006be6:	2303      	movs	r3, #3
 8006be8:	e02d      	b.n	8006c46 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006bee:	b29b      	uxth	r3, r3
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d1c6      	bne.n	8006b82 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006bf4:	69fa      	ldr	r2, [r7, #28]
 8006bf6:	6839      	ldr	r1, [r7, #0]
 8006bf8:	68f8      	ldr	r0, [r7, #12]
 8006bfa:	f000 f8b1 	bl	8006d60 <SPI_EndRxTxTransaction>
 8006bfe:	4603      	mov	r3, r0
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d002      	beq.n	8006c0a <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	2220      	movs	r2, #32
 8006c08:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	689b      	ldr	r3, [r3, #8]
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d10a      	bne.n	8006c28 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006c12:	2300      	movs	r3, #0
 8006c14:	617b      	str	r3, [r7, #20]
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	68db      	ldr	r3, [r3, #12]
 8006c1c:	617b      	str	r3, [r7, #20]
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	689b      	ldr	r3, [r3, #8]
 8006c24:	617b      	str	r3, [r7, #20]
 8006c26:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	2201      	movs	r2, #1
 8006c2c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	2200      	movs	r2, #0
 8006c34:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d001      	beq.n	8006c44 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8006c40:	2301      	movs	r3, #1
 8006c42:	e000      	b.n	8006c46 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8006c44:	2300      	movs	r3, #0
  }
}
 8006c46:	4618      	mov	r0, r3
 8006c48:	3720      	adds	r7, #32
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	bd80      	pop	{r7, pc}
	...

08006c50 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006c50:	b580      	push	{r7, lr}
 8006c52:	b088      	sub	sp, #32
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	60f8      	str	r0, [r7, #12]
 8006c58:	60b9      	str	r1, [r7, #8]
 8006c5a:	603b      	str	r3, [r7, #0]
 8006c5c:	4613      	mov	r3, r2
 8006c5e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006c60:	f7fc fef0 	bl	8003a44 <HAL_GetTick>
 8006c64:	4602      	mov	r2, r0
 8006c66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c68:	1a9b      	subs	r3, r3, r2
 8006c6a:	683a      	ldr	r2, [r7, #0]
 8006c6c:	4413      	add	r3, r2
 8006c6e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006c70:	f7fc fee8 	bl	8003a44 <HAL_GetTick>
 8006c74:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006c76:	4b39      	ldr	r3, [pc, #228]	@ (8006d5c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	015b      	lsls	r3, r3, #5
 8006c7c:	0d1b      	lsrs	r3, r3, #20
 8006c7e:	69fa      	ldr	r2, [r7, #28]
 8006c80:	fb02 f303 	mul.w	r3, r2, r3
 8006c84:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006c86:	e054      	b.n	8006d32 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006c88:	683b      	ldr	r3, [r7, #0]
 8006c8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c8e:	d050      	beq.n	8006d32 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006c90:	f7fc fed8 	bl	8003a44 <HAL_GetTick>
 8006c94:	4602      	mov	r2, r0
 8006c96:	69bb      	ldr	r3, [r7, #24]
 8006c98:	1ad3      	subs	r3, r2, r3
 8006c9a:	69fa      	ldr	r2, [r7, #28]
 8006c9c:	429a      	cmp	r2, r3
 8006c9e:	d902      	bls.n	8006ca6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006ca0:	69fb      	ldr	r3, [r7, #28]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d13d      	bne.n	8006d22 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	685a      	ldr	r2, [r3, #4]
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006cb4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	685b      	ldr	r3, [r3, #4]
 8006cba:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006cbe:	d111      	bne.n	8006ce4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	689b      	ldr	r3, [r3, #8]
 8006cc4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006cc8:	d004      	beq.n	8006cd4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	689b      	ldr	r3, [r3, #8]
 8006cce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006cd2:	d107      	bne.n	8006ce4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	681a      	ldr	r2, [r3, #0]
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006ce2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ce8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006cec:	d10f      	bne.n	8006d0e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	681a      	ldr	r2, [r3, #0]
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006cfc:	601a      	str	r2, [r3, #0]
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	681a      	ldr	r2, [r3, #0]
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006d0c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	2201      	movs	r2, #1
 8006d12:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	2200      	movs	r2, #0
 8006d1a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8006d1e:	2303      	movs	r3, #3
 8006d20:	e017      	b.n	8006d52 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006d22:	697b      	ldr	r3, [r7, #20]
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d101      	bne.n	8006d2c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006d28:	2300      	movs	r3, #0
 8006d2a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006d2c:	697b      	ldr	r3, [r7, #20]
 8006d2e:	3b01      	subs	r3, #1
 8006d30:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	689a      	ldr	r2, [r3, #8]
 8006d38:	68bb      	ldr	r3, [r7, #8]
 8006d3a:	4013      	ands	r3, r2
 8006d3c:	68ba      	ldr	r2, [r7, #8]
 8006d3e:	429a      	cmp	r2, r3
 8006d40:	bf0c      	ite	eq
 8006d42:	2301      	moveq	r3, #1
 8006d44:	2300      	movne	r3, #0
 8006d46:	b2db      	uxtb	r3, r3
 8006d48:	461a      	mov	r2, r3
 8006d4a:	79fb      	ldrb	r3, [r7, #7]
 8006d4c:	429a      	cmp	r2, r3
 8006d4e:	d19b      	bne.n	8006c88 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006d50:	2300      	movs	r3, #0
}
 8006d52:	4618      	mov	r0, r3
 8006d54:	3720      	adds	r7, #32
 8006d56:	46bd      	mov	sp, r7
 8006d58:	bd80      	pop	{r7, pc}
 8006d5a:	bf00      	nop
 8006d5c:	20000028 	.word	0x20000028

08006d60 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006d60:	b580      	push	{r7, lr}
 8006d62:	b088      	sub	sp, #32
 8006d64:	af02      	add	r7, sp, #8
 8006d66:	60f8      	str	r0, [r7, #12]
 8006d68:	60b9      	str	r1, [r7, #8]
 8006d6a:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	9300      	str	r3, [sp, #0]
 8006d70:	68bb      	ldr	r3, [r7, #8]
 8006d72:	2201      	movs	r2, #1
 8006d74:	2102      	movs	r1, #2
 8006d76:	68f8      	ldr	r0, [r7, #12]
 8006d78:	f7ff ff6a 	bl	8006c50 <SPI_WaitFlagStateUntilTimeout>
 8006d7c:	4603      	mov	r3, r0
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d007      	beq.n	8006d92 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d86:	f043 0220 	orr.w	r2, r3, #32
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8006d8e:	2303      	movs	r3, #3
 8006d90:	e032      	b.n	8006df8 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006d92:	4b1b      	ldr	r3, [pc, #108]	@ (8006e00 <SPI_EndRxTxTransaction+0xa0>)
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	4a1b      	ldr	r2, [pc, #108]	@ (8006e04 <SPI_EndRxTxTransaction+0xa4>)
 8006d98:	fba2 2303 	umull	r2, r3, r2, r3
 8006d9c:	0d5b      	lsrs	r3, r3, #21
 8006d9e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8006da2:	fb02 f303 	mul.w	r3, r2, r3
 8006da6:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	685b      	ldr	r3, [r3, #4]
 8006dac:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006db0:	d112      	bne.n	8006dd8 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	9300      	str	r3, [sp, #0]
 8006db6:	68bb      	ldr	r3, [r7, #8]
 8006db8:	2200      	movs	r2, #0
 8006dba:	2180      	movs	r1, #128	@ 0x80
 8006dbc:	68f8      	ldr	r0, [r7, #12]
 8006dbe:	f7ff ff47 	bl	8006c50 <SPI_WaitFlagStateUntilTimeout>
 8006dc2:	4603      	mov	r3, r0
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d016      	beq.n	8006df6 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006dcc:	f043 0220 	orr.w	r2, r3, #32
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8006dd4:	2303      	movs	r3, #3
 8006dd6:	e00f      	b.n	8006df8 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006dd8:	697b      	ldr	r3, [r7, #20]
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d00a      	beq.n	8006df4 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8006dde:	697b      	ldr	r3, [r7, #20]
 8006de0:	3b01      	subs	r3, #1
 8006de2:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	689b      	ldr	r3, [r3, #8]
 8006dea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006dee:	2b80      	cmp	r3, #128	@ 0x80
 8006df0:	d0f2      	beq.n	8006dd8 <SPI_EndRxTxTransaction+0x78>
 8006df2:	e000      	b.n	8006df6 <SPI_EndRxTxTransaction+0x96>
        break;
 8006df4:	bf00      	nop
  }

  return HAL_OK;
 8006df6:	2300      	movs	r3, #0
}
 8006df8:	4618      	mov	r0, r3
 8006dfa:	3718      	adds	r7, #24
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	bd80      	pop	{r7, pc}
 8006e00:	20000028 	.word	0x20000028
 8006e04:	165e9f81 	.word	0x165e9f81

08006e08 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006e08:	b580      	push	{r7, lr}
 8006e0a:	b082      	sub	sp, #8
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d101      	bne.n	8006e1a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006e16:	2301      	movs	r3, #1
 8006e18:	e041      	b.n	8006e9e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006e20:	b2db      	uxtb	r3, r3
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d106      	bne.n	8006e34 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	2200      	movs	r2, #0
 8006e2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006e2e:	6878      	ldr	r0, [r7, #4]
 8006e30:	f7fb fe2e 	bl	8002a90 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	2202      	movs	r2, #2
 8006e38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681a      	ldr	r2, [r3, #0]
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	3304      	adds	r3, #4
 8006e44:	4619      	mov	r1, r3
 8006e46:	4610      	mov	r0, r2
 8006e48:	f000 fd00 	bl	800784c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	2201      	movs	r2, #1
 8006e50:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2201      	movs	r2, #1
 8006e58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	2201      	movs	r2, #1
 8006e60:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	2201      	movs	r2, #1
 8006e68:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2201      	movs	r2, #1
 8006e70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2201      	movs	r2, #1
 8006e78:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2201      	movs	r2, #1
 8006e80:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	2201      	movs	r2, #1
 8006e88:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	2201      	movs	r2, #1
 8006e90:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	2201      	movs	r2, #1
 8006e98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006e9c:	2300      	movs	r3, #0
}
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	3708      	adds	r7, #8
 8006ea2:	46bd      	mov	sp, r7
 8006ea4:	bd80      	pop	{r7, pc}
	...

08006ea8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006ea8:	b480      	push	{r7}
 8006eaa:	b085      	sub	sp, #20
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006eb6:	b2db      	uxtb	r3, r3
 8006eb8:	2b01      	cmp	r3, #1
 8006eba:	d001      	beq.n	8006ec0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006ebc:	2301      	movs	r3, #1
 8006ebe:	e04e      	b.n	8006f5e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	2202      	movs	r2, #2
 8006ec4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	68da      	ldr	r2, [r3, #12]
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	f042 0201 	orr.w	r2, r2, #1
 8006ed6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	4a23      	ldr	r2, [pc, #140]	@ (8006f6c <HAL_TIM_Base_Start_IT+0xc4>)
 8006ede:	4293      	cmp	r3, r2
 8006ee0:	d022      	beq.n	8006f28 <HAL_TIM_Base_Start_IT+0x80>
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006eea:	d01d      	beq.n	8006f28 <HAL_TIM_Base_Start_IT+0x80>
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	4a1f      	ldr	r2, [pc, #124]	@ (8006f70 <HAL_TIM_Base_Start_IT+0xc8>)
 8006ef2:	4293      	cmp	r3, r2
 8006ef4:	d018      	beq.n	8006f28 <HAL_TIM_Base_Start_IT+0x80>
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	4a1e      	ldr	r2, [pc, #120]	@ (8006f74 <HAL_TIM_Base_Start_IT+0xcc>)
 8006efc:	4293      	cmp	r3, r2
 8006efe:	d013      	beq.n	8006f28 <HAL_TIM_Base_Start_IT+0x80>
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	4a1c      	ldr	r2, [pc, #112]	@ (8006f78 <HAL_TIM_Base_Start_IT+0xd0>)
 8006f06:	4293      	cmp	r3, r2
 8006f08:	d00e      	beq.n	8006f28 <HAL_TIM_Base_Start_IT+0x80>
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	4a1b      	ldr	r2, [pc, #108]	@ (8006f7c <HAL_TIM_Base_Start_IT+0xd4>)
 8006f10:	4293      	cmp	r3, r2
 8006f12:	d009      	beq.n	8006f28 <HAL_TIM_Base_Start_IT+0x80>
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	4a19      	ldr	r2, [pc, #100]	@ (8006f80 <HAL_TIM_Base_Start_IT+0xd8>)
 8006f1a:	4293      	cmp	r3, r2
 8006f1c:	d004      	beq.n	8006f28 <HAL_TIM_Base_Start_IT+0x80>
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	4a18      	ldr	r2, [pc, #96]	@ (8006f84 <HAL_TIM_Base_Start_IT+0xdc>)
 8006f24:	4293      	cmp	r3, r2
 8006f26:	d111      	bne.n	8006f4c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	689b      	ldr	r3, [r3, #8]
 8006f2e:	f003 0307 	and.w	r3, r3, #7
 8006f32:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	2b06      	cmp	r3, #6
 8006f38:	d010      	beq.n	8006f5c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	681a      	ldr	r2, [r3, #0]
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	f042 0201 	orr.w	r2, r2, #1
 8006f48:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f4a:	e007      	b.n	8006f5c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	681a      	ldr	r2, [r3, #0]
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	f042 0201 	orr.w	r2, r2, #1
 8006f5a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006f5c:	2300      	movs	r3, #0
}
 8006f5e:	4618      	mov	r0, r3
 8006f60:	3714      	adds	r7, #20
 8006f62:	46bd      	mov	sp, r7
 8006f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f68:	4770      	bx	lr
 8006f6a:	bf00      	nop
 8006f6c:	40010000 	.word	0x40010000
 8006f70:	40000400 	.word	0x40000400
 8006f74:	40000800 	.word	0x40000800
 8006f78:	40000c00 	.word	0x40000c00
 8006f7c:	40010400 	.word	0x40010400
 8006f80:	40014000 	.word	0x40014000
 8006f84:	40001800 	.word	0x40001800

08006f88 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8006f88:	b480      	push	{r7}
 8006f8a:	b083      	sub	sp, #12
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	68da      	ldr	r2, [r3, #12]
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	f022 0201 	bic.w	r2, r2, #1
 8006f9e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	6a1a      	ldr	r2, [r3, #32]
 8006fa6:	f241 1311 	movw	r3, #4369	@ 0x1111
 8006faa:	4013      	ands	r3, r2
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d10f      	bne.n	8006fd0 <HAL_TIM_Base_Stop_IT+0x48>
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	6a1a      	ldr	r2, [r3, #32]
 8006fb6:	f240 4344 	movw	r3, #1092	@ 0x444
 8006fba:	4013      	ands	r3, r2
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d107      	bne.n	8006fd0 <HAL_TIM_Base_Stop_IT+0x48>
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	681a      	ldr	r2, [r3, #0]
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	f022 0201 	bic.w	r2, r2, #1
 8006fce:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	2201      	movs	r2, #1
 8006fd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8006fd8:	2300      	movs	r3, #0
}
 8006fda:	4618      	mov	r0, r3
 8006fdc:	370c      	adds	r7, #12
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe4:	4770      	bx	lr

08006fe6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006fe6:	b580      	push	{r7, lr}
 8006fe8:	b082      	sub	sp, #8
 8006fea:	af00      	add	r7, sp, #0
 8006fec:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d101      	bne.n	8006ff8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006ff4:	2301      	movs	r3, #1
 8006ff6:	e041      	b.n	800707c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006ffe:	b2db      	uxtb	r3, r3
 8007000:	2b00      	cmp	r3, #0
 8007002:	d106      	bne.n	8007012 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	2200      	movs	r2, #0
 8007008:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800700c:	6878      	ldr	r0, [r7, #4]
 800700e:	f000 f839 	bl	8007084 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	2202      	movs	r2, #2
 8007016:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681a      	ldr	r2, [r3, #0]
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	3304      	adds	r3, #4
 8007022:	4619      	mov	r1, r3
 8007024:	4610      	mov	r0, r2
 8007026:	f000 fc11 	bl	800784c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	2201      	movs	r2, #1
 800702e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	2201      	movs	r2, #1
 8007036:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	2201      	movs	r2, #1
 800703e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	2201      	movs	r2, #1
 8007046:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	2201      	movs	r2, #1
 800704e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	2201      	movs	r2, #1
 8007056:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	2201      	movs	r2, #1
 800705e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	2201      	movs	r2, #1
 8007066:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	2201      	movs	r2, #1
 800706e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	2201      	movs	r2, #1
 8007076:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800707a:	2300      	movs	r3, #0
}
 800707c:	4618      	mov	r0, r3
 800707e:	3708      	adds	r7, #8
 8007080:	46bd      	mov	sp, r7
 8007082:	bd80      	pop	{r7, pc}

08007084 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007084:	b480      	push	{r7}
 8007086:	b083      	sub	sp, #12
 8007088:	af00      	add	r7, sp, #0
 800708a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800708c:	bf00      	nop
 800708e:	370c      	adds	r7, #12
 8007090:	46bd      	mov	sp, r7
 8007092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007096:	4770      	bx	lr

08007098 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007098:	b580      	push	{r7, lr}
 800709a:	b084      	sub	sp, #16
 800709c:	af00      	add	r7, sp, #0
 800709e:	6078      	str	r0, [r7, #4]
 80070a0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80070a2:	683b      	ldr	r3, [r7, #0]
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d109      	bne.n	80070bc <HAL_TIM_PWM_Start+0x24>
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80070ae:	b2db      	uxtb	r3, r3
 80070b0:	2b01      	cmp	r3, #1
 80070b2:	bf14      	ite	ne
 80070b4:	2301      	movne	r3, #1
 80070b6:	2300      	moveq	r3, #0
 80070b8:	b2db      	uxtb	r3, r3
 80070ba:	e022      	b.n	8007102 <HAL_TIM_PWM_Start+0x6a>
 80070bc:	683b      	ldr	r3, [r7, #0]
 80070be:	2b04      	cmp	r3, #4
 80070c0:	d109      	bne.n	80070d6 <HAL_TIM_PWM_Start+0x3e>
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80070c8:	b2db      	uxtb	r3, r3
 80070ca:	2b01      	cmp	r3, #1
 80070cc:	bf14      	ite	ne
 80070ce:	2301      	movne	r3, #1
 80070d0:	2300      	moveq	r3, #0
 80070d2:	b2db      	uxtb	r3, r3
 80070d4:	e015      	b.n	8007102 <HAL_TIM_PWM_Start+0x6a>
 80070d6:	683b      	ldr	r3, [r7, #0]
 80070d8:	2b08      	cmp	r3, #8
 80070da:	d109      	bne.n	80070f0 <HAL_TIM_PWM_Start+0x58>
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80070e2:	b2db      	uxtb	r3, r3
 80070e4:	2b01      	cmp	r3, #1
 80070e6:	bf14      	ite	ne
 80070e8:	2301      	movne	r3, #1
 80070ea:	2300      	moveq	r3, #0
 80070ec:	b2db      	uxtb	r3, r3
 80070ee:	e008      	b.n	8007102 <HAL_TIM_PWM_Start+0x6a>
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80070f6:	b2db      	uxtb	r3, r3
 80070f8:	2b01      	cmp	r3, #1
 80070fa:	bf14      	ite	ne
 80070fc:	2301      	movne	r3, #1
 80070fe:	2300      	moveq	r3, #0
 8007100:	b2db      	uxtb	r3, r3
 8007102:	2b00      	cmp	r3, #0
 8007104:	d001      	beq.n	800710a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8007106:	2301      	movs	r3, #1
 8007108:	e07c      	b.n	8007204 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800710a:	683b      	ldr	r3, [r7, #0]
 800710c:	2b00      	cmp	r3, #0
 800710e:	d104      	bne.n	800711a <HAL_TIM_PWM_Start+0x82>
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	2202      	movs	r2, #2
 8007114:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007118:	e013      	b.n	8007142 <HAL_TIM_PWM_Start+0xaa>
 800711a:	683b      	ldr	r3, [r7, #0]
 800711c:	2b04      	cmp	r3, #4
 800711e:	d104      	bne.n	800712a <HAL_TIM_PWM_Start+0x92>
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	2202      	movs	r2, #2
 8007124:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007128:	e00b      	b.n	8007142 <HAL_TIM_PWM_Start+0xaa>
 800712a:	683b      	ldr	r3, [r7, #0]
 800712c:	2b08      	cmp	r3, #8
 800712e:	d104      	bne.n	800713a <HAL_TIM_PWM_Start+0xa2>
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	2202      	movs	r2, #2
 8007134:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007138:	e003      	b.n	8007142 <HAL_TIM_PWM_Start+0xaa>
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	2202      	movs	r2, #2
 800713e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	2201      	movs	r2, #1
 8007148:	6839      	ldr	r1, [r7, #0]
 800714a:	4618      	mov	r0, r3
 800714c:	f000 fe74 	bl	8007e38 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	4a2d      	ldr	r2, [pc, #180]	@ (800720c <HAL_TIM_PWM_Start+0x174>)
 8007156:	4293      	cmp	r3, r2
 8007158:	d004      	beq.n	8007164 <HAL_TIM_PWM_Start+0xcc>
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	4a2c      	ldr	r2, [pc, #176]	@ (8007210 <HAL_TIM_PWM_Start+0x178>)
 8007160:	4293      	cmp	r3, r2
 8007162:	d101      	bne.n	8007168 <HAL_TIM_PWM_Start+0xd0>
 8007164:	2301      	movs	r3, #1
 8007166:	e000      	b.n	800716a <HAL_TIM_PWM_Start+0xd2>
 8007168:	2300      	movs	r3, #0
 800716a:	2b00      	cmp	r3, #0
 800716c:	d007      	beq.n	800717e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800717c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	4a22      	ldr	r2, [pc, #136]	@ (800720c <HAL_TIM_PWM_Start+0x174>)
 8007184:	4293      	cmp	r3, r2
 8007186:	d022      	beq.n	80071ce <HAL_TIM_PWM_Start+0x136>
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007190:	d01d      	beq.n	80071ce <HAL_TIM_PWM_Start+0x136>
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	4a1f      	ldr	r2, [pc, #124]	@ (8007214 <HAL_TIM_PWM_Start+0x17c>)
 8007198:	4293      	cmp	r3, r2
 800719a:	d018      	beq.n	80071ce <HAL_TIM_PWM_Start+0x136>
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	4a1d      	ldr	r2, [pc, #116]	@ (8007218 <HAL_TIM_PWM_Start+0x180>)
 80071a2:	4293      	cmp	r3, r2
 80071a4:	d013      	beq.n	80071ce <HAL_TIM_PWM_Start+0x136>
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	4a1c      	ldr	r2, [pc, #112]	@ (800721c <HAL_TIM_PWM_Start+0x184>)
 80071ac:	4293      	cmp	r3, r2
 80071ae:	d00e      	beq.n	80071ce <HAL_TIM_PWM_Start+0x136>
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	4a16      	ldr	r2, [pc, #88]	@ (8007210 <HAL_TIM_PWM_Start+0x178>)
 80071b6:	4293      	cmp	r3, r2
 80071b8:	d009      	beq.n	80071ce <HAL_TIM_PWM_Start+0x136>
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	4a18      	ldr	r2, [pc, #96]	@ (8007220 <HAL_TIM_PWM_Start+0x188>)
 80071c0:	4293      	cmp	r3, r2
 80071c2:	d004      	beq.n	80071ce <HAL_TIM_PWM_Start+0x136>
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	4a16      	ldr	r2, [pc, #88]	@ (8007224 <HAL_TIM_PWM_Start+0x18c>)
 80071ca:	4293      	cmp	r3, r2
 80071cc:	d111      	bne.n	80071f2 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	689b      	ldr	r3, [r3, #8]
 80071d4:	f003 0307 	and.w	r3, r3, #7
 80071d8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	2b06      	cmp	r3, #6
 80071de:	d010      	beq.n	8007202 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	681a      	ldr	r2, [r3, #0]
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	f042 0201 	orr.w	r2, r2, #1
 80071ee:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80071f0:	e007      	b.n	8007202 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	681a      	ldr	r2, [r3, #0]
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	f042 0201 	orr.w	r2, r2, #1
 8007200:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007202:	2300      	movs	r3, #0
}
 8007204:	4618      	mov	r0, r3
 8007206:	3710      	adds	r7, #16
 8007208:	46bd      	mov	sp, r7
 800720a:	bd80      	pop	{r7, pc}
 800720c:	40010000 	.word	0x40010000
 8007210:	40010400 	.word	0x40010400
 8007214:	40000400 	.word	0x40000400
 8007218:	40000800 	.word	0x40000800
 800721c:	40000c00 	.word	0x40000c00
 8007220:	40014000 	.word	0x40014000
 8007224:	40001800 	.word	0x40001800

08007228 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007228:	b580      	push	{r7, lr}
 800722a:	b082      	sub	sp, #8
 800722c:	af00      	add	r7, sp, #0
 800722e:	6078      	str	r0, [r7, #4]
 8007230:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	2200      	movs	r2, #0
 8007238:	6839      	ldr	r1, [r7, #0]
 800723a:	4618      	mov	r0, r3
 800723c:	f000 fdfc 	bl	8007e38 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	4a2e      	ldr	r2, [pc, #184]	@ (8007300 <HAL_TIM_PWM_Stop+0xd8>)
 8007246:	4293      	cmp	r3, r2
 8007248:	d004      	beq.n	8007254 <HAL_TIM_PWM_Stop+0x2c>
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	4a2d      	ldr	r2, [pc, #180]	@ (8007304 <HAL_TIM_PWM_Stop+0xdc>)
 8007250:	4293      	cmp	r3, r2
 8007252:	d101      	bne.n	8007258 <HAL_TIM_PWM_Stop+0x30>
 8007254:	2301      	movs	r3, #1
 8007256:	e000      	b.n	800725a <HAL_TIM_PWM_Stop+0x32>
 8007258:	2300      	movs	r3, #0
 800725a:	2b00      	cmp	r3, #0
 800725c:	d017      	beq.n	800728e <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	6a1a      	ldr	r2, [r3, #32]
 8007264:	f241 1311 	movw	r3, #4369	@ 0x1111
 8007268:	4013      	ands	r3, r2
 800726a:	2b00      	cmp	r3, #0
 800726c:	d10f      	bne.n	800728e <HAL_TIM_PWM_Stop+0x66>
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	6a1a      	ldr	r2, [r3, #32]
 8007274:	f240 4344 	movw	r3, #1092	@ 0x444
 8007278:	4013      	ands	r3, r2
 800727a:	2b00      	cmp	r3, #0
 800727c:	d107      	bne.n	800728e <HAL_TIM_PWM_Stop+0x66>
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800728c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	6a1a      	ldr	r2, [r3, #32]
 8007294:	f241 1311 	movw	r3, #4369	@ 0x1111
 8007298:	4013      	ands	r3, r2
 800729a:	2b00      	cmp	r3, #0
 800729c:	d10f      	bne.n	80072be <HAL_TIM_PWM_Stop+0x96>
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	6a1a      	ldr	r2, [r3, #32]
 80072a4:	f240 4344 	movw	r3, #1092	@ 0x444
 80072a8:	4013      	ands	r3, r2
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d107      	bne.n	80072be <HAL_TIM_PWM_Stop+0x96>
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	681a      	ldr	r2, [r3, #0]
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	f022 0201 	bic.w	r2, r2, #1
 80072bc:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80072be:	683b      	ldr	r3, [r7, #0]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d104      	bne.n	80072ce <HAL_TIM_PWM_Stop+0xa6>
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	2201      	movs	r2, #1
 80072c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80072cc:	e013      	b.n	80072f6 <HAL_TIM_PWM_Stop+0xce>
 80072ce:	683b      	ldr	r3, [r7, #0]
 80072d0:	2b04      	cmp	r3, #4
 80072d2:	d104      	bne.n	80072de <HAL_TIM_PWM_Stop+0xb6>
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	2201      	movs	r2, #1
 80072d8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80072dc:	e00b      	b.n	80072f6 <HAL_TIM_PWM_Stop+0xce>
 80072de:	683b      	ldr	r3, [r7, #0]
 80072e0:	2b08      	cmp	r3, #8
 80072e2:	d104      	bne.n	80072ee <HAL_TIM_PWM_Stop+0xc6>
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	2201      	movs	r2, #1
 80072e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80072ec:	e003      	b.n	80072f6 <HAL_TIM_PWM_Stop+0xce>
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	2201      	movs	r2, #1
 80072f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 80072f6:	2300      	movs	r3, #0
}
 80072f8:	4618      	mov	r0, r3
 80072fa:	3708      	adds	r7, #8
 80072fc:	46bd      	mov	sp, r7
 80072fe:	bd80      	pop	{r7, pc}
 8007300:	40010000 	.word	0x40010000
 8007304:	40010400 	.word	0x40010400

08007308 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007308:	b580      	push	{r7, lr}
 800730a:	b084      	sub	sp, #16
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	68db      	ldr	r3, [r3, #12]
 8007316:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	691b      	ldr	r3, [r3, #16]
 800731e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007320:	68bb      	ldr	r3, [r7, #8]
 8007322:	f003 0302 	and.w	r3, r3, #2
 8007326:	2b00      	cmp	r3, #0
 8007328:	d020      	beq.n	800736c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	f003 0302 	and.w	r3, r3, #2
 8007330:	2b00      	cmp	r3, #0
 8007332:	d01b      	beq.n	800736c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	f06f 0202 	mvn.w	r2, #2
 800733c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	2201      	movs	r2, #1
 8007342:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	699b      	ldr	r3, [r3, #24]
 800734a:	f003 0303 	and.w	r3, r3, #3
 800734e:	2b00      	cmp	r3, #0
 8007350:	d003      	beq.n	800735a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007352:	6878      	ldr	r0, [r7, #4]
 8007354:	f000 fa5b 	bl	800780e <HAL_TIM_IC_CaptureCallback>
 8007358:	e005      	b.n	8007366 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800735a:	6878      	ldr	r0, [r7, #4]
 800735c:	f000 fa4d 	bl	80077fa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007360:	6878      	ldr	r0, [r7, #4]
 8007362:	f000 fa5e 	bl	8007822 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	2200      	movs	r2, #0
 800736a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800736c:	68bb      	ldr	r3, [r7, #8]
 800736e:	f003 0304 	and.w	r3, r3, #4
 8007372:	2b00      	cmp	r3, #0
 8007374:	d020      	beq.n	80073b8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	f003 0304 	and.w	r3, r3, #4
 800737c:	2b00      	cmp	r3, #0
 800737e:	d01b      	beq.n	80073b8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	f06f 0204 	mvn.w	r2, #4
 8007388:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	2202      	movs	r2, #2
 800738e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	699b      	ldr	r3, [r3, #24]
 8007396:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800739a:	2b00      	cmp	r3, #0
 800739c:	d003      	beq.n	80073a6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800739e:	6878      	ldr	r0, [r7, #4]
 80073a0:	f000 fa35 	bl	800780e <HAL_TIM_IC_CaptureCallback>
 80073a4:	e005      	b.n	80073b2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80073a6:	6878      	ldr	r0, [r7, #4]
 80073a8:	f000 fa27 	bl	80077fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80073ac:	6878      	ldr	r0, [r7, #4]
 80073ae:	f000 fa38 	bl	8007822 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	2200      	movs	r2, #0
 80073b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80073b8:	68bb      	ldr	r3, [r7, #8]
 80073ba:	f003 0308 	and.w	r3, r3, #8
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d020      	beq.n	8007404 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	f003 0308 	and.w	r3, r3, #8
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d01b      	beq.n	8007404 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	f06f 0208 	mvn.w	r2, #8
 80073d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	2204      	movs	r2, #4
 80073da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	69db      	ldr	r3, [r3, #28]
 80073e2:	f003 0303 	and.w	r3, r3, #3
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d003      	beq.n	80073f2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80073ea:	6878      	ldr	r0, [r7, #4]
 80073ec:	f000 fa0f 	bl	800780e <HAL_TIM_IC_CaptureCallback>
 80073f0:	e005      	b.n	80073fe <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80073f2:	6878      	ldr	r0, [r7, #4]
 80073f4:	f000 fa01 	bl	80077fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80073f8:	6878      	ldr	r0, [r7, #4]
 80073fa:	f000 fa12 	bl	8007822 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	2200      	movs	r2, #0
 8007402:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007404:	68bb      	ldr	r3, [r7, #8]
 8007406:	f003 0310 	and.w	r3, r3, #16
 800740a:	2b00      	cmp	r3, #0
 800740c:	d020      	beq.n	8007450 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	f003 0310 	and.w	r3, r3, #16
 8007414:	2b00      	cmp	r3, #0
 8007416:	d01b      	beq.n	8007450 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	f06f 0210 	mvn.w	r2, #16
 8007420:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	2208      	movs	r2, #8
 8007426:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	69db      	ldr	r3, [r3, #28]
 800742e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007432:	2b00      	cmp	r3, #0
 8007434:	d003      	beq.n	800743e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007436:	6878      	ldr	r0, [r7, #4]
 8007438:	f000 f9e9 	bl	800780e <HAL_TIM_IC_CaptureCallback>
 800743c:	e005      	b.n	800744a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800743e:	6878      	ldr	r0, [r7, #4]
 8007440:	f000 f9db 	bl	80077fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007444:	6878      	ldr	r0, [r7, #4]
 8007446:	f000 f9ec 	bl	8007822 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	2200      	movs	r2, #0
 800744e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007450:	68bb      	ldr	r3, [r7, #8]
 8007452:	f003 0301 	and.w	r3, r3, #1
 8007456:	2b00      	cmp	r3, #0
 8007458:	d00c      	beq.n	8007474 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	f003 0301 	and.w	r3, r3, #1
 8007460:	2b00      	cmp	r3, #0
 8007462:	d007      	beq.n	8007474 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	f06f 0201 	mvn.w	r2, #1
 800746c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800746e:	6878      	ldr	r0, [r7, #4]
 8007470:	f7fa fc4e 	bl	8001d10 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8007474:	68bb      	ldr	r3, [r7, #8]
 8007476:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800747a:	2b00      	cmp	r3, #0
 800747c:	d00c      	beq.n	8007498 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007484:	2b00      	cmp	r3, #0
 8007486:	d007      	beq.n	8007498 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8007490:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007492:	6878      	ldr	r0, [r7, #4]
 8007494:	f000 fd7c 	bl	8007f90 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007498:	68bb      	ldr	r3, [r7, #8]
 800749a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d00c      	beq.n	80074bc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d007      	beq.n	80074bc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80074b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80074b6:	6878      	ldr	r0, [r7, #4]
 80074b8:	f000 f9bd 	bl	8007836 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80074bc:	68bb      	ldr	r3, [r7, #8]
 80074be:	f003 0320 	and.w	r3, r3, #32
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d00c      	beq.n	80074e0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	f003 0320 	and.w	r3, r3, #32
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d007      	beq.n	80074e0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	f06f 0220 	mvn.w	r2, #32
 80074d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80074da:	6878      	ldr	r0, [r7, #4]
 80074dc:	f000 fd4e 	bl	8007f7c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80074e0:	bf00      	nop
 80074e2:	3710      	adds	r7, #16
 80074e4:	46bd      	mov	sp, r7
 80074e6:	bd80      	pop	{r7, pc}

080074e8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80074e8:	b580      	push	{r7, lr}
 80074ea:	b086      	sub	sp, #24
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	60f8      	str	r0, [r7, #12]
 80074f0:	60b9      	str	r1, [r7, #8]
 80074f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80074f4:	2300      	movs	r3, #0
 80074f6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80074fe:	2b01      	cmp	r3, #1
 8007500:	d101      	bne.n	8007506 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007502:	2302      	movs	r3, #2
 8007504:	e0ae      	b.n	8007664 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	2201      	movs	r2, #1
 800750a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	2b0c      	cmp	r3, #12
 8007512:	f200 809f 	bhi.w	8007654 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8007516:	a201      	add	r2, pc, #4	@ (adr r2, 800751c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007518:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800751c:	08007551 	.word	0x08007551
 8007520:	08007655 	.word	0x08007655
 8007524:	08007655 	.word	0x08007655
 8007528:	08007655 	.word	0x08007655
 800752c:	08007591 	.word	0x08007591
 8007530:	08007655 	.word	0x08007655
 8007534:	08007655 	.word	0x08007655
 8007538:	08007655 	.word	0x08007655
 800753c:	080075d3 	.word	0x080075d3
 8007540:	08007655 	.word	0x08007655
 8007544:	08007655 	.word	0x08007655
 8007548:	08007655 	.word	0x08007655
 800754c:	08007613 	.word	0x08007613
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	68b9      	ldr	r1, [r7, #8]
 8007556:	4618      	mov	r0, r3
 8007558:	f000 fa24 	bl	80079a4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	699a      	ldr	r2, [r3, #24]
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	f042 0208 	orr.w	r2, r2, #8
 800756a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	699a      	ldr	r2, [r3, #24]
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	f022 0204 	bic.w	r2, r2, #4
 800757a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	6999      	ldr	r1, [r3, #24]
 8007582:	68bb      	ldr	r3, [r7, #8]
 8007584:	691a      	ldr	r2, [r3, #16]
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	430a      	orrs	r2, r1
 800758c:	619a      	str	r2, [r3, #24]
      break;
 800758e:	e064      	b.n	800765a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	68b9      	ldr	r1, [r7, #8]
 8007596:	4618      	mov	r0, r3
 8007598:	f000 fa74 	bl	8007a84 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	699a      	ldr	r2, [r3, #24]
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80075aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	699a      	ldr	r2, [r3, #24]
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80075ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	6999      	ldr	r1, [r3, #24]
 80075c2:	68bb      	ldr	r3, [r7, #8]
 80075c4:	691b      	ldr	r3, [r3, #16]
 80075c6:	021a      	lsls	r2, r3, #8
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	430a      	orrs	r2, r1
 80075ce:	619a      	str	r2, [r3, #24]
      break;
 80075d0:	e043      	b.n	800765a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	68b9      	ldr	r1, [r7, #8]
 80075d8:	4618      	mov	r0, r3
 80075da:	f000 fac9 	bl	8007b70 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	69da      	ldr	r2, [r3, #28]
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	f042 0208 	orr.w	r2, r2, #8
 80075ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	69da      	ldr	r2, [r3, #28]
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	f022 0204 	bic.w	r2, r2, #4
 80075fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	69d9      	ldr	r1, [r3, #28]
 8007604:	68bb      	ldr	r3, [r7, #8]
 8007606:	691a      	ldr	r2, [r3, #16]
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	430a      	orrs	r2, r1
 800760e:	61da      	str	r2, [r3, #28]
      break;
 8007610:	e023      	b.n	800765a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	68b9      	ldr	r1, [r7, #8]
 8007618:	4618      	mov	r0, r3
 800761a:	f000 fb1d 	bl	8007c58 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	69da      	ldr	r2, [r3, #28]
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800762c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	69da      	ldr	r2, [r3, #28]
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800763c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	69d9      	ldr	r1, [r3, #28]
 8007644:	68bb      	ldr	r3, [r7, #8]
 8007646:	691b      	ldr	r3, [r3, #16]
 8007648:	021a      	lsls	r2, r3, #8
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	430a      	orrs	r2, r1
 8007650:	61da      	str	r2, [r3, #28]
      break;
 8007652:	e002      	b.n	800765a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007654:	2301      	movs	r3, #1
 8007656:	75fb      	strb	r3, [r7, #23]
      break;
 8007658:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	2200      	movs	r2, #0
 800765e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007662:	7dfb      	ldrb	r3, [r7, #23]
}
 8007664:	4618      	mov	r0, r3
 8007666:	3718      	adds	r7, #24
 8007668:	46bd      	mov	sp, r7
 800766a:	bd80      	pop	{r7, pc}

0800766c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800766c:	b580      	push	{r7, lr}
 800766e:	b084      	sub	sp, #16
 8007670:	af00      	add	r7, sp, #0
 8007672:	6078      	str	r0, [r7, #4]
 8007674:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007676:	2300      	movs	r3, #0
 8007678:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007680:	2b01      	cmp	r3, #1
 8007682:	d101      	bne.n	8007688 <HAL_TIM_ConfigClockSource+0x1c>
 8007684:	2302      	movs	r3, #2
 8007686:	e0b4      	b.n	80077f2 <HAL_TIM_ConfigClockSource+0x186>
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	2201      	movs	r2, #1
 800768c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	2202      	movs	r2, #2
 8007694:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	689b      	ldr	r3, [r3, #8]
 800769e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80076a0:	68bb      	ldr	r3, [r7, #8]
 80076a2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80076a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80076a8:	68bb      	ldr	r3, [r7, #8]
 80076aa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80076ae:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	68ba      	ldr	r2, [r7, #8]
 80076b6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80076b8:	683b      	ldr	r3, [r7, #0]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80076c0:	d03e      	beq.n	8007740 <HAL_TIM_ConfigClockSource+0xd4>
 80076c2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80076c6:	f200 8087 	bhi.w	80077d8 <HAL_TIM_ConfigClockSource+0x16c>
 80076ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80076ce:	f000 8086 	beq.w	80077de <HAL_TIM_ConfigClockSource+0x172>
 80076d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80076d6:	d87f      	bhi.n	80077d8 <HAL_TIM_ConfigClockSource+0x16c>
 80076d8:	2b70      	cmp	r3, #112	@ 0x70
 80076da:	d01a      	beq.n	8007712 <HAL_TIM_ConfigClockSource+0xa6>
 80076dc:	2b70      	cmp	r3, #112	@ 0x70
 80076de:	d87b      	bhi.n	80077d8 <HAL_TIM_ConfigClockSource+0x16c>
 80076e0:	2b60      	cmp	r3, #96	@ 0x60
 80076e2:	d050      	beq.n	8007786 <HAL_TIM_ConfigClockSource+0x11a>
 80076e4:	2b60      	cmp	r3, #96	@ 0x60
 80076e6:	d877      	bhi.n	80077d8 <HAL_TIM_ConfigClockSource+0x16c>
 80076e8:	2b50      	cmp	r3, #80	@ 0x50
 80076ea:	d03c      	beq.n	8007766 <HAL_TIM_ConfigClockSource+0xfa>
 80076ec:	2b50      	cmp	r3, #80	@ 0x50
 80076ee:	d873      	bhi.n	80077d8 <HAL_TIM_ConfigClockSource+0x16c>
 80076f0:	2b40      	cmp	r3, #64	@ 0x40
 80076f2:	d058      	beq.n	80077a6 <HAL_TIM_ConfigClockSource+0x13a>
 80076f4:	2b40      	cmp	r3, #64	@ 0x40
 80076f6:	d86f      	bhi.n	80077d8 <HAL_TIM_ConfigClockSource+0x16c>
 80076f8:	2b30      	cmp	r3, #48	@ 0x30
 80076fa:	d064      	beq.n	80077c6 <HAL_TIM_ConfigClockSource+0x15a>
 80076fc:	2b30      	cmp	r3, #48	@ 0x30
 80076fe:	d86b      	bhi.n	80077d8 <HAL_TIM_ConfigClockSource+0x16c>
 8007700:	2b20      	cmp	r3, #32
 8007702:	d060      	beq.n	80077c6 <HAL_TIM_ConfigClockSource+0x15a>
 8007704:	2b20      	cmp	r3, #32
 8007706:	d867      	bhi.n	80077d8 <HAL_TIM_ConfigClockSource+0x16c>
 8007708:	2b00      	cmp	r3, #0
 800770a:	d05c      	beq.n	80077c6 <HAL_TIM_ConfigClockSource+0x15a>
 800770c:	2b10      	cmp	r3, #16
 800770e:	d05a      	beq.n	80077c6 <HAL_TIM_ConfigClockSource+0x15a>
 8007710:	e062      	b.n	80077d8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007716:	683b      	ldr	r3, [r7, #0]
 8007718:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800771a:	683b      	ldr	r3, [r7, #0]
 800771c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800771e:	683b      	ldr	r3, [r7, #0]
 8007720:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007722:	f000 fb69 	bl	8007df8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	689b      	ldr	r3, [r3, #8]
 800772c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800772e:	68bb      	ldr	r3, [r7, #8]
 8007730:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007734:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	68ba      	ldr	r2, [r7, #8]
 800773c:	609a      	str	r2, [r3, #8]
      break;
 800773e:	e04f      	b.n	80077e0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007744:	683b      	ldr	r3, [r7, #0]
 8007746:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007748:	683b      	ldr	r3, [r7, #0]
 800774a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800774c:	683b      	ldr	r3, [r7, #0]
 800774e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007750:	f000 fb52 	bl	8007df8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	689a      	ldr	r2, [r3, #8]
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007762:	609a      	str	r2, [r3, #8]
      break;
 8007764:	e03c      	b.n	80077e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800776a:	683b      	ldr	r3, [r7, #0]
 800776c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800776e:	683b      	ldr	r3, [r7, #0]
 8007770:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007772:	461a      	mov	r2, r3
 8007774:	f000 fac6 	bl	8007d04 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	2150      	movs	r1, #80	@ 0x50
 800777e:	4618      	mov	r0, r3
 8007780:	f000 fb1f 	bl	8007dc2 <TIM_ITRx_SetConfig>
      break;
 8007784:	e02c      	b.n	80077e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800778a:	683b      	ldr	r3, [r7, #0]
 800778c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800778e:	683b      	ldr	r3, [r7, #0]
 8007790:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007792:	461a      	mov	r2, r3
 8007794:	f000 fae5 	bl	8007d62 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	2160      	movs	r1, #96	@ 0x60
 800779e:	4618      	mov	r0, r3
 80077a0:	f000 fb0f 	bl	8007dc2 <TIM_ITRx_SetConfig>
      break;
 80077a4:	e01c      	b.n	80077e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80077aa:	683b      	ldr	r3, [r7, #0]
 80077ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80077ae:	683b      	ldr	r3, [r7, #0]
 80077b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80077b2:	461a      	mov	r2, r3
 80077b4:	f000 faa6 	bl	8007d04 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	2140      	movs	r1, #64	@ 0x40
 80077be:	4618      	mov	r0, r3
 80077c0:	f000 faff 	bl	8007dc2 <TIM_ITRx_SetConfig>
      break;
 80077c4:	e00c      	b.n	80077e0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681a      	ldr	r2, [r3, #0]
 80077ca:	683b      	ldr	r3, [r7, #0]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	4619      	mov	r1, r3
 80077d0:	4610      	mov	r0, r2
 80077d2:	f000 faf6 	bl	8007dc2 <TIM_ITRx_SetConfig>
      break;
 80077d6:	e003      	b.n	80077e0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80077d8:	2301      	movs	r3, #1
 80077da:	73fb      	strb	r3, [r7, #15]
      break;
 80077dc:	e000      	b.n	80077e0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80077de:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	2201      	movs	r2, #1
 80077e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	2200      	movs	r2, #0
 80077ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80077f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80077f2:	4618      	mov	r0, r3
 80077f4:	3710      	adds	r7, #16
 80077f6:	46bd      	mov	sp, r7
 80077f8:	bd80      	pop	{r7, pc}

080077fa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80077fa:	b480      	push	{r7}
 80077fc:	b083      	sub	sp, #12
 80077fe:	af00      	add	r7, sp, #0
 8007800:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007802:	bf00      	nop
 8007804:	370c      	adds	r7, #12
 8007806:	46bd      	mov	sp, r7
 8007808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780c:	4770      	bx	lr

0800780e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800780e:	b480      	push	{r7}
 8007810:	b083      	sub	sp, #12
 8007812:	af00      	add	r7, sp, #0
 8007814:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007816:	bf00      	nop
 8007818:	370c      	adds	r7, #12
 800781a:	46bd      	mov	sp, r7
 800781c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007820:	4770      	bx	lr

08007822 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007822:	b480      	push	{r7}
 8007824:	b083      	sub	sp, #12
 8007826:	af00      	add	r7, sp, #0
 8007828:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800782a:	bf00      	nop
 800782c:	370c      	adds	r7, #12
 800782e:	46bd      	mov	sp, r7
 8007830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007834:	4770      	bx	lr

08007836 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007836:	b480      	push	{r7}
 8007838:	b083      	sub	sp, #12
 800783a:	af00      	add	r7, sp, #0
 800783c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800783e:	bf00      	nop
 8007840:	370c      	adds	r7, #12
 8007842:	46bd      	mov	sp, r7
 8007844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007848:	4770      	bx	lr
	...

0800784c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800784c:	b480      	push	{r7}
 800784e:	b085      	sub	sp, #20
 8007850:	af00      	add	r7, sp, #0
 8007852:	6078      	str	r0, [r7, #4]
 8007854:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	4a46      	ldr	r2, [pc, #280]	@ (8007978 <TIM_Base_SetConfig+0x12c>)
 8007860:	4293      	cmp	r3, r2
 8007862:	d013      	beq.n	800788c <TIM_Base_SetConfig+0x40>
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800786a:	d00f      	beq.n	800788c <TIM_Base_SetConfig+0x40>
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	4a43      	ldr	r2, [pc, #268]	@ (800797c <TIM_Base_SetConfig+0x130>)
 8007870:	4293      	cmp	r3, r2
 8007872:	d00b      	beq.n	800788c <TIM_Base_SetConfig+0x40>
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	4a42      	ldr	r2, [pc, #264]	@ (8007980 <TIM_Base_SetConfig+0x134>)
 8007878:	4293      	cmp	r3, r2
 800787a:	d007      	beq.n	800788c <TIM_Base_SetConfig+0x40>
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	4a41      	ldr	r2, [pc, #260]	@ (8007984 <TIM_Base_SetConfig+0x138>)
 8007880:	4293      	cmp	r3, r2
 8007882:	d003      	beq.n	800788c <TIM_Base_SetConfig+0x40>
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	4a40      	ldr	r2, [pc, #256]	@ (8007988 <TIM_Base_SetConfig+0x13c>)
 8007888:	4293      	cmp	r3, r2
 800788a:	d108      	bne.n	800789e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007892:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007894:	683b      	ldr	r3, [r7, #0]
 8007896:	685b      	ldr	r3, [r3, #4]
 8007898:	68fa      	ldr	r2, [r7, #12]
 800789a:	4313      	orrs	r3, r2
 800789c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	4a35      	ldr	r2, [pc, #212]	@ (8007978 <TIM_Base_SetConfig+0x12c>)
 80078a2:	4293      	cmp	r3, r2
 80078a4:	d02b      	beq.n	80078fe <TIM_Base_SetConfig+0xb2>
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80078ac:	d027      	beq.n	80078fe <TIM_Base_SetConfig+0xb2>
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	4a32      	ldr	r2, [pc, #200]	@ (800797c <TIM_Base_SetConfig+0x130>)
 80078b2:	4293      	cmp	r3, r2
 80078b4:	d023      	beq.n	80078fe <TIM_Base_SetConfig+0xb2>
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	4a31      	ldr	r2, [pc, #196]	@ (8007980 <TIM_Base_SetConfig+0x134>)
 80078ba:	4293      	cmp	r3, r2
 80078bc:	d01f      	beq.n	80078fe <TIM_Base_SetConfig+0xb2>
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	4a30      	ldr	r2, [pc, #192]	@ (8007984 <TIM_Base_SetConfig+0x138>)
 80078c2:	4293      	cmp	r3, r2
 80078c4:	d01b      	beq.n	80078fe <TIM_Base_SetConfig+0xb2>
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	4a2f      	ldr	r2, [pc, #188]	@ (8007988 <TIM_Base_SetConfig+0x13c>)
 80078ca:	4293      	cmp	r3, r2
 80078cc:	d017      	beq.n	80078fe <TIM_Base_SetConfig+0xb2>
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	4a2e      	ldr	r2, [pc, #184]	@ (800798c <TIM_Base_SetConfig+0x140>)
 80078d2:	4293      	cmp	r3, r2
 80078d4:	d013      	beq.n	80078fe <TIM_Base_SetConfig+0xb2>
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	4a2d      	ldr	r2, [pc, #180]	@ (8007990 <TIM_Base_SetConfig+0x144>)
 80078da:	4293      	cmp	r3, r2
 80078dc:	d00f      	beq.n	80078fe <TIM_Base_SetConfig+0xb2>
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	4a2c      	ldr	r2, [pc, #176]	@ (8007994 <TIM_Base_SetConfig+0x148>)
 80078e2:	4293      	cmp	r3, r2
 80078e4:	d00b      	beq.n	80078fe <TIM_Base_SetConfig+0xb2>
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	4a2b      	ldr	r2, [pc, #172]	@ (8007998 <TIM_Base_SetConfig+0x14c>)
 80078ea:	4293      	cmp	r3, r2
 80078ec:	d007      	beq.n	80078fe <TIM_Base_SetConfig+0xb2>
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	4a2a      	ldr	r2, [pc, #168]	@ (800799c <TIM_Base_SetConfig+0x150>)
 80078f2:	4293      	cmp	r3, r2
 80078f4:	d003      	beq.n	80078fe <TIM_Base_SetConfig+0xb2>
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	4a29      	ldr	r2, [pc, #164]	@ (80079a0 <TIM_Base_SetConfig+0x154>)
 80078fa:	4293      	cmp	r3, r2
 80078fc:	d108      	bne.n	8007910 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007904:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007906:	683b      	ldr	r3, [r7, #0]
 8007908:	68db      	ldr	r3, [r3, #12]
 800790a:	68fa      	ldr	r2, [r7, #12]
 800790c:	4313      	orrs	r3, r2
 800790e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007916:	683b      	ldr	r3, [r7, #0]
 8007918:	695b      	ldr	r3, [r3, #20]
 800791a:	4313      	orrs	r3, r2
 800791c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	68fa      	ldr	r2, [r7, #12]
 8007922:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007924:	683b      	ldr	r3, [r7, #0]
 8007926:	689a      	ldr	r2, [r3, #8]
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800792c:	683b      	ldr	r3, [r7, #0]
 800792e:	681a      	ldr	r2, [r3, #0]
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	4a10      	ldr	r2, [pc, #64]	@ (8007978 <TIM_Base_SetConfig+0x12c>)
 8007938:	4293      	cmp	r3, r2
 800793a:	d003      	beq.n	8007944 <TIM_Base_SetConfig+0xf8>
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	4a12      	ldr	r2, [pc, #72]	@ (8007988 <TIM_Base_SetConfig+0x13c>)
 8007940:	4293      	cmp	r3, r2
 8007942:	d103      	bne.n	800794c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007944:	683b      	ldr	r3, [r7, #0]
 8007946:	691a      	ldr	r2, [r3, #16]
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	2201      	movs	r2, #1
 8007950:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	691b      	ldr	r3, [r3, #16]
 8007956:	f003 0301 	and.w	r3, r3, #1
 800795a:	2b01      	cmp	r3, #1
 800795c:	d105      	bne.n	800796a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	691b      	ldr	r3, [r3, #16]
 8007962:	f023 0201 	bic.w	r2, r3, #1
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	611a      	str	r2, [r3, #16]
  }
}
 800796a:	bf00      	nop
 800796c:	3714      	adds	r7, #20
 800796e:	46bd      	mov	sp, r7
 8007970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007974:	4770      	bx	lr
 8007976:	bf00      	nop
 8007978:	40010000 	.word	0x40010000
 800797c:	40000400 	.word	0x40000400
 8007980:	40000800 	.word	0x40000800
 8007984:	40000c00 	.word	0x40000c00
 8007988:	40010400 	.word	0x40010400
 800798c:	40014000 	.word	0x40014000
 8007990:	40014400 	.word	0x40014400
 8007994:	40014800 	.word	0x40014800
 8007998:	40001800 	.word	0x40001800
 800799c:	40001c00 	.word	0x40001c00
 80079a0:	40002000 	.word	0x40002000

080079a4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80079a4:	b480      	push	{r7}
 80079a6:	b087      	sub	sp, #28
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	6078      	str	r0, [r7, #4]
 80079ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	6a1b      	ldr	r3, [r3, #32]
 80079b2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	6a1b      	ldr	r3, [r3, #32]
 80079b8:	f023 0201 	bic.w	r2, r3, #1
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	685b      	ldr	r3, [r3, #4]
 80079c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	699b      	ldr	r3, [r3, #24]
 80079ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80079d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	f023 0303 	bic.w	r3, r3, #3
 80079da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80079dc:	683b      	ldr	r3, [r7, #0]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	68fa      	ldr	r2, [r7, #12]
 80079e2:	4313      	orrs	r3, r2
 80079e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80079e6:	697b      	ldr	r3, [r7, #20]
 80079e8:	f023 0302 	bic.w	r3, r3, #2
 80079ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80079ee:	683b      	ldr	r3, [r7, #0]
 80079f0:	689b      	ldr	r3, [r3, #8]
 80079f2:	697a      	ldr	r2, [r7, #20]
 80079f4:	4313      	orrs	r3, r2
 80079f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	4a20      	ldr	r2, [pc, #128]	@ (8007a7c <TIM_OC1_SetConfig+0xd8>)
 80079fc:	4293      	cmp	r3, r2
 80079fe:	d003      	beq.n	8007a08 <TIM_OC1_SetConfig+0x64>
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	4a1f      	ldr	r2, [pc, #124]	@ (8007a80 <TIM_OC1_SetConfig+0xdc>)
 8007a04:	4293      	cmp	r3, r2
 8007a06:	d10c      	bne.n	8007a22 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007a08:	697b      	ldr	r3, [r7, #20]
 8007a0a:	f023 0308 	bic.w	r3, r3, #8
 8007a0e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007a10:	683b      	ldr	r3, [r7, #0]
 8007a12:	68db      	ldr	r3, [r3, #12]
 8007a14:	697a      	ldr	r2, [r7, #20]
 8007a16:	4313      	orrs	r3, r2
 8007a18:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007a1a:	697b      	ldr	r3, [r7, #20]
 8007a1c:	f023 0304 	bic.w	r3, r3, #4
 8007a20:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	4a15      	ldr	r2, [pc, #84]	@ (8007a7c <TIM_OC1_SetConfig+0xd8>)
 8007a26:	4293      	cmp	r3, r2
 8007a28:	d003      	beq.n	8007a32 <TIM_OC1_SetConfig+0x8e>
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	4a14      	ldr	r2, [pc, #80]	@ (8007a80 <TIM_OC1_SetConfig+0xdc>)
 8007a2e:	4293      	cmp	r3, r2
 8007a30:	d111      	bne.n	8007a56 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007a32:	693b      	ldr	r3, [r7, #16]
 8007a34:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007a38:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007a3a:	693b      	ldr	r3, [r7, #16]
 8007a3c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007a40:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007a42:	683b      	ldr	r3, [r7, #0]
 8007a44:	695b      	ldr	r3, [r3, #20]
 8007a46:	693a      	ldr	r2, [r7, #16]
 8007a48:	4313      	orrs	r3, r2
 8007a4a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007a4c:	683b      	ldr	r3, [r7, #0]
 8007a4e:	699b      	ldr	r3, [r3, #24]
 8007a50:	693a      	ldr	r2, [r7, #16]
 8007a52:	4313      	orrs	r3, r2
 8007a54:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	693a      	ldr	r2, [r7, #16]
 8007a5a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	68fa      	ldr	r2, [r7, #12]
 8007a60:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007a62:	683b      	ldr	r3, [r7, #0]
 8007a64:	685a      	ldr	r2, [r3, #4]
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	697a      	ldr	r2, [r7, #20]
 8007a6e:	621a      	str	r2, [r3, #32]
}
 8007a70:	bf00      	nop
 8007a72:	371c      	adds	r7, #28
 8007a74:	46bd      	mov	sp, r7
 8007a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a7a:	4770      	bx	lr
 8007a7c:	40010000 	.word	0x40010000
 8007a80:	40010400 	.word	0x40010400

08007a84 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007a84:	b480      	push	{r7}
 8007a86:	b087      	sub	sp, #28
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	6078      	str	r0, [r7, #4]
 8007a8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	6a1b      	ldr	r3, [r3, #32]
 8007a92:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	6a1b      	ldr	r3, [r3, #32]
 8007a98:	f023 0210 	bic.w	r2, r3, #16
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	685b      	ldr	r3, [r3, #4]
 8007aa4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	699b      	ldr	r3, [r3, #24]
 8007aaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007ab2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007aba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007abc:	683b      	ldr	r3, [r7, #0]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	021b      	lsls	r3, r3, #8
 8007ac2:	68fa      	ldr	r2, [r7, #12]
 8007ac4:	4313      	orrs	r3, r2
 8007ac6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007ac8:	697b      	ldr	r3, [r7, #20]
 8007aca:	f023 0320 	bic.w	r3, r3, #32
 8007ace:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007ad0:	683b      	ldr	r3, [r7, #0]
 8007ad2:	689b      	ldr	r3, [r3, #8]
 8007ad4:	011b      	lsls	r3, r3, #4
 8007ad6:	697a      	ldr	r2, [r7, #20]
 8007ad8:	4313      	orrs	r3, r2
 8007ada:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	4a22      	ldr	r2, [pc, #136]	@ (8007b68 <TIM_OC2_SetConfig+0xe4>)
 8007ae0:	4293      	cmp	r3, r2
 8007ae2:	d003      	beq.n	8007aec <TIM_OC2_SetConfig+0x68>
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	4a21      	ldr	r2, [pc, #132]	@ (8007b6c <TIM_OC2_SetConfig+0xe8>)
 8007ae8:	4293      	cmp	r3, r2
 8007aea:	d10d      	bne.n	8007b08 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007aec:	697b      	ldr	r3, [r7, #20]
 8007aee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007af2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007af4:	683b      	ldr	r3, [r7, #0]
 8007af6:	68db      	ldr	r3, [r3, #12]
 8007af8:	011b      	lsls	r3, r3, #4
 8007afa:	697a      	ldr	r2, [r7, #20]
 8007afc:	4313      	orrs	r3, r2
 8007afe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007b00:	697b      	ldr	r3, [r7, #20]
 8007b02:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007b06:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	4a17      	ldr	r2, [pc, #92]	@ (8007b68 <TIM_OC2_SetConfig+0xe4>)
 8007b0c:	4293      	cmp	r3, r2
 8007b0e:	d003      	beq.n	8007b18 <TIM_OC2_SetConfig+0x94>
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	4a16      	ldr	r2, [pc, #88]	@ (8007b6c <TIM_OC2_SetConfig+0xe8>)
 8007b14:	4293      	cmp	r3, r2
 8007b16:	d113      	bne.n	8007b40 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007b18:	693b      	ldr	r3, [r7, #16]
 8007b1a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007b1e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007b20:	693b      	ldr	r3, [r7, #16]
 8007b22:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007b26:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007b28:	683b      	ldr	r3, [r7, #0]
 8007b2a:	695b      	ldr	r3, [r3, #20]
 8007b2c:	009b      	lsls	r3, r3, #2
 8007b2e:	693a      	ldr	r2, [r7, #16]
 8007b30:	4313      	orrs	r3, r2
 8007b32:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007b34:	683b      	ldr	r3, [r7, #0]
 8007b36:	699b      	ldr	r3, [r3, #24]
 8007b38:	009b      	lsls	r3, r3, #2
 8007b3a:	693a      	ldr	r2, [r7, #16]
 8007b3c:	4313      	orrs	r3, r2
 8007b3e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	693a      	ldr	r2, [r7, #16]
 8007b44:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	68fa      	ldr	r2, [r7, #12]
 8007b4a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007b4c:	683b      	ldr	r3, [r7, #0]
 8007b4e:	685a      	ldr	r2, [r3, #4]
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	697a      	ldr	r2, [r7, #20]
 8007b58:	621a      	str	r2, [r3, #32]
}
 8007b5a:	bf00      	nop
 8007b5c:	371c      	adds	r7, #28
 8007b5e:	46bd      	mov	sp, r7
 8007b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b64:	4770      	bx	lr
 8007b66:	bf00      	nop
 8007b68:	40010000 	.word	0x40010000
 8007b6c:	40010400 	.word	0x40010400

08007b70 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007b70:	b480      	push	{r7}
 8007b72:	b087      	sub	sp, #28
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	6078      	str	r0, [r7, #4]
 8007b78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	6a1b      	ldr	r3, [r3, #32]
 8007b7e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	6a1b      	ldr	r3, [r3, #32]
 8007b84:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	685b      	ldr	r3, [r3, #4]
 8007b90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	69db      	ldr	r3, [r3, #28]
 8007b96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007b9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	f023 0303 	bic.w	r3, r3, #3
 8007ba6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007ba8:	683b      	ldr	r3, [r7, #0]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	68fa      	ldr	r2, [r7, #12]
 8007bae:	4313      	orrs	r3, r2
 8007bb0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007bb2:	697b      	ldr	r3, [r7, #20]
 8007bb4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007bb8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007bba:	683b      	ldr	r3, [r7, #0]
 8007bbc:	689b      	ldr	r3, [r3, #8]
 8007bbe:	021b      	lsls	r3, r3, #8
 8007bc0:	697a      	ldr	r2, [r7, #20]
 8007bc2:	4313      	orrs	r3, r2
 8007bc4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	4a21      	ldr	r2, [pc, #132]	@ (8007c50 <TIM_OC3_SetConfig+0xe0>)
 8007bca:	4293      	cmp	r3, r2
 8007bcc:	d003      	beq.n	8007bd6 <TIM_OC3_SetConfig+0x66>
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	4a20      	ldr	r2, [pc, #128]	@ (8007c54 <TIM_OC3_SetConfig+0xe4>)
 8007bd2:	4293      	cmp	r3, r2
 8007bd4:	d10d      	bne.n	8007bf2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007bd6:	697b      	ldr	r3, [r7, #20]
 8007bd8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007bdc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007bde:	683b      	ldr	r3, [r7, #0]
 8007be0:	68db      	ldr	r3, [r3, #12]
 8007be2:	021b      	lsls	r3, r3, #8
 8007be4:	697a      	ldr	r2, [r7, #20]
 8007be6:	4313      	orrs	r3, r2
 8007be8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007bea:	697b      	ldr	r3, [r7, #20]
 8007bec:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007bf0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	4a16      	ldr	r2, [pc, #88]	@ (8007c50 <TIM_OC3_SetConfig+0xe0>)
 8007bf6:	4293      	cmp	r3, r2
 8007bf8:	d003      	beq.n	8007c02 <TIM_OC3_SetConfig+0x92>
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	4a15      	ldr	r2, [pc, #84]	@ (8007c54 <TIM_OC3_SetConfig+0xe4>)
 8007bfe:	4293      	cmp	r3, r2
 8007c00:	d113      	bne.n	8007c2a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007c02:	693b      	ldr	r3, [r7, #16]
 8007c04:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007c08:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007c0a:	693b      	ldr	r3, [r7, #16]
 8007c0c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007c10:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007c12:	683b      	ldr	r3, [r7, #0]
 8007c14:	695b      	ldr	r3, [r3, #20]
 8007c16:	011b      	lsls	r3, r3, #4
 8007c18:	693a      	ldr	r2, [r7, #16]
 8007c1a:	4313      	orrs	r3, r2
 8007c1c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007c1e:	683b      	ldr	r3, [r7, #0]
 8007c20:	699b      	ldr	r3, [r3, #24]
 8007c22:	011b      	lsls	r3, r3, #4
 8007c24:	693a      	ldr	r2, [r7, #16]
 8007c26:	4313      	orrs	r3, r2
 8007c28:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	693a      	ldr	r2, [r7, #16]
 8007c2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	68fa      	ldr	r2, [r7, #12]
 8007c34:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007c36:	683b      	ldr	r3, [r7, #0]
 8007c38:	685a      	ldr	r2, [r3, #4]
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	697a      	ldr	r2, [r7, #20]
 8007c42:	621a      	str	r2, [r3, #32]
}
 8007c44:	bf00      	nop
 8007c46:	371c      	adds	r7, #28
 8007c48:	46bd      	mov	sp, r7
 8007c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c4e:	4770      	bx	lr
 8007c50:	40010000 	.word	0x40010000
 8007c54:	40010400 	.word	0x40010400

08007c58 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007c58:	b480      	push	{r7}
 8007c5a:	b087      	sub	sp, #28
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	6078      	str	r0, [r7, #4]
 8007c60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	6a1b      	ldr	r3, [r3, #32]
 8007c66:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	6a1b      	ldr	r3, [r3, #32]
 8007c6c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	685b      	ldr	r3, [r3, #4]
 8007c78:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	69db      	ldr	r3, [r3, #28]
 8007c7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007c86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007c8e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007c90:	683b      	ldr	r3, [r7, #0]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	021b      	lsls	r3, r3, #8
 8007c96:	68fa      	ldr	r2, [r7, #12]
 8007c98:	4313      	orrs	r3, r2
 8007c9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007c9c:	693b      	ldr	r3, [r7, #16]
 8007c9e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007ca2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007ca4:	683b      	ldr	r3, [r7, #0]
 8007ca6:	689b      	ldr	r3, [r3, #8]
 8007ca8:	031b      	lsls	r3, r3, #12
 8007caa:	693a      	ldr	r2, [r7, #16]
 8007cac:	4313      	orrs	r3, r2
 8007cae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	4a12      	ldr	r2, [pc, #72]	@ (8007cfc <TIM_OC4_SetConfig+0xa4>)
 8007cb4:	4293      	cmp	r3, r2
 8007cb6:	d003      	beq.n	8007cc0 <TIM_OC4_SetConfig+0x68>
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	4a11      	ldr	r2, [pc, #68]	@ (8007d00 <TIM_OC4_SetConfig+0xa8>)
 8007cbc:	4293      	cmp	r3, r2
 8007cbe:	d109      	bne.n	8007cd4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007cc0:	697b      	ldr	r3, [r7, #20]
 8007cc2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007cc6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007cc8:	683b      	ldr	r3, [r7, #0]
 8007cca:	695b      	ldr	r3, [r3, #20]
 8007ccc:	019b      	lsls	r3, r3, #6
 8007cce:	697a      	ldr	r2, [r7, #20]
 8007cd0:	4313      	orrs	r3, r2
 8007cd2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	697a      	ldr	r2, [r7, #20]
 8007cd8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	68fa      	ldr	r2, [r7, #12]
 8007cde:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007ce0:	683b      	ldr	r3, [r7, #0]
 8007ce2:	685a      	ldr	r2, [r3, #4]
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	693a      	ldr	r2, [r7, #16]
 8007cec:	621a      	str	r2, [r3, #32]
}
 8007cee:	bf00      	nop
 8007cf0:	371c      	adds	r7, #28
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf8:	4770      	bx	lr
 8007cfa:	bf00      	nop
 8007cfc:	40010000 	.word	0x40010000
 8007d00:	40010400 	.word	0x40010400

08007d04 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007d04:	b480      	push	{r7}
 8007d06:	b087      	sub	sp, #28
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	60f8      	str	r0, [r7, #12]
 8007d0c:	60b9      	str	r1, [r7, #8]
 8007d0e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	6a1b      	ldr	r3, [r3, #32]
 8007d14:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	6a1b      	ldr	r3, [r3, #32]
 8007d1a:	f023 0201 	bic.w	r2, r3, #1
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	699b      	ldr	r3, [r3, #24]
 8007d26:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007d28:	693b      	ldr	r3, [r7, #16]
 8007d2a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007d2e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	011b      	lsls	r3, r3, #4
 8007d34:	693a      	ldr	r2, [r7, #16]
 8007d36:	4313      	orrs	r3, r2
 8007d38:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007d3a:	697b      	ldr	r3, [r7, #20]
 8007d3c:	f023 030a 	bic.w	r3, r3, #10
 8007d40:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007d42:	697a      	ldr	r2, [r7, #20]
 8007d44:	68bb      	ldr	r3, [r7, #8]
 8007d46:	4313      	orrs	r3, r2
 8007d48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	693a      	ldr	r2, [r7, #16]
 8007d4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	697a      	ldr	r2, [r7, #20]
 8007d54:	621a      	str	r2, [r3, #32]
}
 8007d56:	bf00      	nop
 8007d58:	371c      	adds	r7, #28
 8007d5a:	46bd      	mov	sp, r7
 8007d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d60:	4770      	bx	lr

08007d62 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007d62:	b480      	push	{r7}
 8007d64:	b087      	sub	sp, #28
 8007d66:	af00      	add	r7, sp, #0
 8007d68:	60f8      	str	r0, [r7, #12]
 8007d6a:	60b9      	str	r1, [r7, #8]
 8007d6c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	6a1b      	ldr	r3, [r3, #32]
 8007d72:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	6a1b      	ldr	r3, [r3, #32]
 8007d78:	f023 0210 	bic.w	r2, r3, #16
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	699b      	ldr	r3, [r3, #24]
 8007d84:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007d86:	693b      	ldr	r3, [r7, #16]
 8007d88:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007d8c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	031b      	lsls	r3, r3, #12
 8007d92:	693a      	ldr	r2, [r7, #16]
 8007d94:	4313      	orrs	r3, r2
 8007d96:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007d98:	697b      	ldr	r3, [r7, #20]
 8007d9a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007d9e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007da0:	68bb      	ldr	r3, [r7, #8]
 8007da2:	011b      	lsls	r3, r3, #4
 8007da4:	697a      	ldr	r2, [r7, #20]
 8007da6:	4313      	orrs	r3, r2
 8007da8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	693a      	ldr	r2, [r7, #16]
 8007dae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	697a      	ldr	r2, [r7, #20]
 8007db4:	621a      	str	r2, [r3, #32]
}
 8007db6:	bf00      	nop
 8007db8:	371c      	adds	r7, #28
 8007dba:	46bd      	mov	sp, r7
 8007dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc0:	4770      	bx	lr

08007dc2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007dc2:	b480      	push	{r7}
 8007dc4:	b085      	sub	sp, #20
 8007dc6:	af00      	add	r7, sp, #0
 8007dc8:	6078      	str	r0, [r7, #4]
 8007dca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	689b      	ldr	r3, [r3, #8]
 8007dd0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007dd8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007dda:	683a      	ldr	r2, [r7, #0]
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	4313      	orrs	r3, r2
 8007de0:	f043 0307 	orr.w	r3, r3, #7
 8007de4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	68fa      	ldr	r2, [r7, #12]
 8007dea:	609a      	str	r2, [r3, #8]
}
 8007dec:	bf00      	nop
 8007dee:	3714      	adds	r7, #20
 8007df0:	46bd      	mov	sp, r7
 8007df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df6:	4770      	bx	lr

08007df8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007df8:	b480      	push	{r7}
 8007dfa:	b087      	sub	sp, #28
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	60f8      	str	r0, [r7, #12]
 8007e00:	60b9      	str	r1, [r7, #8]
 8007e02:	607a      	str	r2, [r7, #4]
 8007e04:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	689b      	ldr	r3, [r3, #8]
 8007e0a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007e0c:	697b      	ldr	r3, [r7, #20]
 8007e0e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007e12:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007e14:	683b      	ldr	r3, [r7, #0]
 8007e16:	021a      	lsls	r2, r3, #8
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	431a      	orrs	r2, r3
 8007e1c:	68bb      	ldr	r3, [r7, #8]
 8007e1e:	4313      	orrs	r3, r2
 8007e20:	697a      	ldr	r2, [r7, #20]
 8007e22:	4313      	orrs	r3, r2
 8007e24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	697a      	ldr	r2, [r7, #20]
 8007e2a:	609a      	str	r2, [r3, #8]
}
 8007e2c:	bf00      	nop
 8007e2e:	371c      	adds	r7, #28
 8007e30:	46bd      	mov	sp, r7
 8007e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e36:	4770      	bx	lr

08007e38 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007e38:	b480      	push	{r7}
 8007e3a:	b087      	sub	sp, #28
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	60f8      	str	r0, [r7, #12]
 8007e40:	60b9      	str	r1, [r7, #8]
 8007e42:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007e44:	68bb      	ldr	r3, [r7, #8]
 8007e46:	f003 031f 	and.w	r3, r3, #31
 8007e4a:	2201      	movs	r2, #1
 8007e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8007e50:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	6a1a      	ldr	r2, [r3, #32]
 8007e56:	697b      	ldr	r3, [r7, #20]
 8007e58:	43db      	mvns	r3, r3
 8007e5a:	401a      	ands	r2, r3
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	6a1a      	ldr	r2, [r3, #32]
 8007e64:	68bb      	ldr	r3, [r7, #8]
 8007e66:	f003 031f 	and.w	r3, r3, #31
 8007e6a:	6879      	ldr	r1, [r7, #4]
 8007e6c:	fa01 f303 	lsl.w	r3, r1, r3
 8007e70:	431a      	orrs	r2, r3
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	621a      	str	r2, [r3, #32]
}
 8007e76:	bf00      	nop
 8007e78:	371c      	adds	r7, #28
 8007e7a:	46bd      	mov	sp, r7
 8007e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e80:	4770      	bx	lr
	...

08007e84 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007e84:	b480      	push	{r7}
 8007e86:	b085      	sub	sp, #20
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	6078      	str	r0, [r7, #4]
 8007e8c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007e94:	2b01      	cmp	r3, #1
 8007e96:	d101      	bne.n	8007e9c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007e98:	2302      	movs	r3, #2
 8007e9a:	e05a      	b.n	8007f52 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	2201      	movs	r2, #1
 8007ea0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	2202      	movs	r2, #2
 8007ea8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	685b      	ldr	r3, [r3, #4]
 8007eb2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	689b      	ldr	r3, [r3, #8]
 8007eba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007ec2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007ec4:	683b      	ldr	r3, [r7, #0]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	68fa      	ldr	r2, [r7, #12]
 8007eca:	4313      	orrs	r3, r2
 8007ecc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	68fa      	ldr	r2, [r7, #12]
 8007ed4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	4a21      	ldr	r2, [pc, #132]	@ (8007f60 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007edc:	4293      	cmp	r3, r2
 8007ede:	d022      	beq.n	8007f26 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007ee8:	d01d      	beq.n	8007f26 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	4a1d      	ldr	r2, [pc, #116]	@ (8007f64 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007ef0:	4293      	cmp	r3, r2
 8007ef2:	d018      	beq.n	8007f26 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	4a1b      	ldr	r2, [pc, #108]	@ (8007f68 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007efa:	4293      	cmp	r3, r2
 8007efc:	d013      	beq.n	8007f26 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	4a1a      	ldr	r2, [pc, #104]	@ (8007f6c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007f04:	4293      	cmp	r3, r2
 8007f06:	d00e      	beq.n	8007f26 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	4a18      	ldr	r2, [pc, #96]	@ (8007f70 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007f0e:	4293      	cmp	r3, r2
 8007f10:	d009      	beq.n	8007f26 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	4a17      	ldr	r2, [pc, #92]	@ (8007f74 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007f18:	4293      	cmp	r3, r2
 8007f1a:	d004      	beq.n	8007f26 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	4a15      	ldr	r2, [pc, #84]	@ (8007f78 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007f22:	4293      	cmp	r3, r2
 8007f24:	d10c      	bne.n	8007f40 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007f26:	68bb      	ldr	r3, [r7, #8]
 8007f28:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007f2c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007f2e:	683b      	ldr	r3, [r7, #0]
 8007f30:	685b      	ldr	r3, [r3, #4]
 8007f32:	68ba      	ldr	r2, [r7, #8]
 8007f34:	4313      	orrs	r3, r2
 8007f36:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	68ba      	ldr	r2, [r7, #8]
 8007f3e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	2201      	movs	r2, #1
 8007f44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	2200      	movs	r2, #0
 8007f4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007f50:	2300      	movs	r3, #0
}
 8007f52:	4618      	mov	r0, r3
 8007f54:	3714      	adds	r7, #20
 8007f56:	46bd      	mov	sp, r7
 8007f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f5c:	4770      	bx	lr
 8007f5e:	bf00      	nop
 8007f60:	40010000 	.word	0x40010000
 8007f64:	40000400 	.word	0x40000400
 8007f68:	40000800 	.word	0x40000800
 8007f6c:	40000c00 	.word	0x40000c00
 8007f70:	40010400 	.word	0x40010400
 8007f74:	40014000 	.word	0x40014000
 8007f78:	40001800 	.word	0x40001800

08007f7c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007f7c:	b480      	push	{r7}
 8007f7e:	b083      	sub	sp, #12
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007f84:	bf00      	nop
 8007f86:	370c      	adds	r7, #12
 8007f88:	46bd      	mov	sp, r7
 8007f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f8e:	4770      	bx	lr

08007f90 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007f90:	b480      	push	{r7}
 8007f92:	b083      	sub	sp, #12
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007f98:	bf00      	nop
 8007f9a:	370c      	adds	r7, #12
 8007f9c:	46bd      	mov	sp, r7
 8007f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa2:	4770      	bx	lr

08007fa4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007fa4:	b580      	push	{r7, lr}
 8007fa6:	b082      	sub	sp, #8
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d101      	bne.n	8007fb6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007fb2:	2301      	movs	r3, #1
 8007fb4:	e042      	b.n	800803c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007fbc:	b2db      	uxtb	r3, r3
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d106      	bne.n	8007fd0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	2200      	movs	r2, #0
 8007fc6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007fca:	6878      	ldr	r0, [r7, #4]
 8007fcc:	f7fa fe9a 	bl	8002d04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	2224      	movs	r2, #36	@ 0x24
 8007fd4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	68da      	ldr	r2, [r3, #12]
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007fe6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007fe8:	6878      	ldr	r0, [r7, #4]
 8007fea:	f000 f82b 	bl	8008044 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	691a      	ldr	r2, [r3, #16]
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007ffc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	695a      	ldr	r2, [r3, #20]
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800800c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	68da      	ldr	r2, [r3, #12]
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800801c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	2200      	movs	r2, #0
 8008022:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	2220      	movs	r2, #32
 8008028:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	2220      	movs	r2, #32
 8008030:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	2200      	movs	r2, #0
 8008038:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800803a:	2300      	movs	r3, #0
}
 800803c:	4618      	mov	r0, r3
 800803e:	3708      	adds	r7, #8
 8008040:	46bd      	mov	sp, r7
 8008042:	bd80      	pop	{r7, pc}

08008044 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008044:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008048:	b0c0      	sub	sp, #256	@ 0x100
 800804a:	af00      	add	r7, sp, #0
 800804c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008050:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	691b      	ldr	r3, [r3, #16]
 8008058:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800805c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008060:	68d9      	ldr	r1, [r3, #12]
 8008062:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008066:	681a      	ldr	r2, [r3, #0]
 8008068:	ea40 0301 	orr.w	r3, r0, r1
 800806c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800806e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008072:	689a      	ldr	r2, [r3, #8]
 8008074:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008078:	691b      	ldr	r3, [r3, #16]
 800807a:	431a      	orrs	r2, r3
 800807c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008080:	695b      	ldr	r3, [r3, #20]
 8008082:	431a      	orrs	r2, r3
 8008084:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008088:	69db      	ldr	r3, [r3, #28]
 800808a:	4313      	orrs	r3, r2
 800808c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008090:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	68db      	ldr	r3, [r3, #12]
 8008098:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800809c:	f021 010c 	bic.w	r1, r1, #12
 80080a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80080a4:	681a      	ldr	r2, [r3, #0]
 80080a6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80080aa:	430b      	orrs	r3, r1
 80080ac:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80080ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	695b      	ldr	r3, [r3, #20]
 80080b6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80080ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80080be:	6999      	ldr	r1, [r3, #24]
 80080c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80080c4:	681a      	ldr	r2, [r3, #0]
 80080c6:	ea40 0301 	orr.w	r3, r0, r1
 80080ca:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80080cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80080d0:	681a      	ldr	r2, [r3, #0]
 80080d2:	4b8f      	ldr	r3, [pc, #572]	@ (8008310 <UART_SetConfig+0x2cc>)
 80080d4:	429a      	cmp	r2, r3
 80080d6:	d005      	beq.n	80080e4 <UART_SetConfig+0xa0>
 80080d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80080dc:	681a      	ldr	r2, [r3, #0]
 80080de:	4b8d      	ldr	r3, [pc, #564]	@ (8008314 <UART_SetConfig+0x2d0>)
 80080e0:	429a      	cmp	r2, r3
 80080e2:	d104      	bne.n	80080ee <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80080e4:	f7fd f8ce 	bl	8005284 <HAL_RCC_GetPCLK2Freq>
 80080e8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80080ec:	e003      	b.n	80080f6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80080ee:	f7fd f8b5 	bl	800525c <HAL_RCC_GetPCLK1Freq>
 80080f2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80080f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80080fa:	69db      	ldr	r3, [r3, #28]
 80080fc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008100:	f040 810c 	bne.w	800831c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008104:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008108:	2200      	movs	r2, #0
 800810a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800810e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8008112:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8008116:	4622      	mov	r2, r4
 8008118:	462b      	mov	r3, r5
 800811a:	1891      	adds	r1, r2, r2
 800811c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800811e:	415b      	adcs	r3, r3
 8008120:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008122:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8008126:	4621      	mov	r1, r4
 8008128:	eb12 0801 	adds.w	r8, r2, r1
 800812c:	4629      	mov	r1, r5
 800812e:	eb43 0901 	adc.w	r9, r3, r1
 8008132:	f04f 0200 	mov.w	r2, #0
 8008136:	f04f 0300 	mov.w	r3, #0
 800813a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800813e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008142:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008146:	4690      	mov	r8, r2
 8008148:	4699      	mov	r9, r3
 800814a:	4623      	mov	r3, r4
 800814c:	eb18 0303 	adds.w	r3, r8, r3
 8008150:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008154:	462b      	mov	r3, r5
 8008156:	eb49 0303 	adc.w	r3, r9, r3
 800815a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800815e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008162:	685b      	ldr	r3, [r3, #4]
 8008164:	2200      	movs	r2, #0
 8008166:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800816a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800816e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8008172:	460b      	mov	r3, r1
 8008174:	18db      	adds	r3, r3, r3
 8008176:	653b      	str	r3, [r7, #80]	@ 0x50
 8008178:	4613      	mov	r3, r2
 800817a:	eb42 0303 	adc.w	r3, r2, r3
 800817e:	657b      	str	r3, [r7, #84]	@ 0x54
 8008180:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8008184:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8008188:	f7f8 fcf8 	bl	8000b7c <__aeabi_uldivmod>
 800818c:	4602      	mov	r2, r0
 800818e:	460b      	mov	r3, r1
 8008190:	4b61      	ldr	r3, [pc, #388]	@ (8008318 <UART_SetConfig+0x2d4>)
 8008192:	fba3 2302 	umull	r2, r3, r3, r2
 8008196:	095b      	lsrs	r3, r3, #5
 8008198:	011c      	lsls	r4, r3, #4
 800819a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800819e:	2200      	movs	r2, #0
 80081a0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80081a4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80081a8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80081ac:	4642      	mov	r2, r8
 80081ae:	464b      	mov	r3, r9
 80081b0:	1891      	adds	r1, r2, r2
 80081b2:	64b9      	str	r1, [r7, #72]	@ 0x48
 80081b4:	415b      	adcs	r3, r3
 80081b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80081b8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80081bc:	4641      	mov	r1, r8
 80081be:	eb12 0a01 	adds.w	sl, r2, r1
 80081c2:	4649      	mov	r1, r9
 80081c4:	eb43 0b01 	adc.w	fp, r3, r1
 80081c8:	f04f 0200 	mov.w	r2, #0
 80081cc:	f04f 0300 	mov.w	r3, #0
 80081d0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80081d4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80081d8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80081dc:	4692      	mov	sl, r2
 80081de:	469b      	mov	fp, r3
 80081e0:	4643      	mov	r3, r8
 80081e2:	eb1a 0303 	adds.w	r3, sl, r3
 80081e6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80081ea:	464b      	mov	r3, r9
 80081ec:	eb4b 0303 	adc.w	r3, fp, r3
 80081f0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80081f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80081f8:	685b      	ldr	r3, [r3, #4]
 80081fa:	2200      	movs	r2, #0
 80081fc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008200:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8008204:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8008208:	460b      	mov	r3, r1
 800820a:	18db      	adds	r3, r3, r3
 800820c:	643b      	str	r3, [r7, #64]	@ 0x40
 800820e:	4613      	mov	r3, r2
 8008210:	eb42 0303 	adc.w	r3, r2, r3
 8008214:	647b      	str	r3, [r7, #68]	@ 0x44
 8008216:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800821a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800821e:	f7f8 fcad 	bl	8000b7c <__aeabi_uldivmod>
 8008222:	4602      	mov	r2, r0
 8008224:	460b      	mov	r3, r1
 8008226:	4611      	mov	r1, r2
 8008228:	4b3b      	ldr	r3, [pc, #236]	@ (8008318 <UART_SetConfig+0x2d4>)
 800822a:	fba3 2301 	umull	r2, r3, r3, r1
 800822e:	095b      	lsrs	r3, r3, #5
 8008230:	2264      	movs	r2, #100	@ 0x64
 8008232:	fb02 f303 	mul.w	r3, r2, r3
 8008236:	1acb      	subs	r3, r1, r3
 8008238:	00db      	lsls	r3, r3, #3
 800823a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800823e:	4b36      	ldr	r3, [pc, #216]	@ (8008318 <UART_SetConfig+0x2d4>)
 8008240:	fba3 2302 	umull	r2, r3, r3, r2
 8008244:	095b      	lsrs	r3, r3, #5
 8008246:	005b      	lsls	r3, r3, #1
 8008248:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800824c:	441c      	add	r4, r3
 800824e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008252:	2200      	movs	r2, #0
 8008254:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008258:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800825c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8008260:	4642      	mov	r2, r8
 8008262:	464b      	mov	r3, r9
 8008264:	1891      	adds	r1, r2, r2
 8008266:	63b9      	str	r1, [r7, #56]	@ 0x38
 8008268:	415b      	adcs	r3, r3
 800826a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800826c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8008270:	4641      	mov	r1, r8
 8008272:	1851      	adds	r1, r2, r1
 8008274:	6339      	str	r1, [r7, #48]	@ 0x30
 8008276:	4649      	mov	r1, r9
 8008278:	414b      	adcs	r3, r1
 800827a:	637b      	str	r3, [r7, #52]	@ 0x34
 800827c:	f04f 0200 	mov.w	r2, #0
 8008280:	f04f 0300 	mov.w	r3, #0
 8008284:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8008288:	4659      	mov	r1, fp
 800828a:	00cb      	lsls	r3, r1, #3
 800828c:	4651      	mov	r1, sl
 800828e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008292:	4651      	mov	r1, sl
 8008294:	00ca      	lsls	r2, r1, #3
 8008296:	4610      	mov	r0, r2
 8008298:	4619      	mov	r1, r3
 800829a:	4603      	mov	r3, r0
 800829c:	4642      	mov	r2, r8
 800829e:	189b      	adds	r3, r3, r2
 80082a0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80082a4:	464b      	mov	r3, r9
 80082a6:	460a      	mov	r2, r1
 80082a8:	eb42 0303 	adc.w	r3, r2, r3
 80082ac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80082b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80082b4:	685b      	ldr	r3, [r3, #4]
 80082b6:	2200      	movs	r2, #0
 80082b8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80082bc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80082c0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80082c4:	460b      	mov	r3, r1
 80082c6:	18db      	adds	r3, r3, r3
 80082c8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80082ca:	4613      	mov	r3, r2
 80082cc:	eb42 0303 	adc.w	r3, r2, r3
 80082d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80082d2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80082d6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80082da:	f7f8 fc4f 	bl	8000b7c <__aeabi_uldivmod>
 80082de:	4602      	mov	r2, r0
 80082e0:	460b      	mov	r3, r1
 80082e2:	4b0d      	ldr	r3, [pc, #52]	@ (8008318 <UART_SetConfig+0x2d4>)
 80082e4:	fba3 1302 	umull	r1, r3, r3, r2
 80082e8:	095b      	lsrs	r3, r3, #5
 80082ea:	2164      	movs	r1, #100	@ 0x64
 80082ec:	fb01 f303 	mul.w	r3, r1, r3
 80082f0:	1ad3      	subs	r3, r2, r3
 80082f2:	00db      	lsls	r3, r3, #3
 80082f4:	3332      	adds	r3, #50	@ 0x32
 80082f6:	4a08      	ldr	r2, [pc, #32]	@ (8008318 <UART_SetConfig+0x2d4>)
 80082f8:	fba2 2303 	umull	r2, r3, r2, r3
 80082fc:	095b      	lsrs	r3, r3, #5
 80082fe:	f003 0207 	and.w	r2, r3, #7
 8008302:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	4422      	add	r2, r4
 800830a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800830c:	e106      	b.n	800851c <UART_SetConfig+0x4d8>
 800830e:	bf00      	nop
 8008310:	40011000 	.word	0x40011000
 8008314:	40011400 	.word	0x40011400
 8008318:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800831c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008320:	2200      	movs	r2, #0
 8008322:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008326:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800832a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800832e:	4642      	mov	r2, r8
 8008330:	464b      	mov	r3, r9
 8008332:	1891      	adds	r1, r2, r2
 8008334:	6239      	str	r1, [r7, #32]
 8008336:	415b      	adcs	r3, r3
 8008338:	627b      	str	r3, [r7, #36]	@ 0x24
 800833a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800833e:	4641      	mov	r1, r8
 8008340:	1854      	adds	r4, r2, r1
 8008342:	4649      	mov	r1, r9
 8008344:	eb43 0501 	adc.w	r5, r3, r1
 8008348:	f04f 0200 	mov.w	r2, #0
 800834c:	f04f 0300 	mov.w	r3, #0
 8008350:	00eb      	lsls	r3, r5, #3
 8008352:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008356:	00e2      	lsls	r2, r4, #3
 8008358:	4614      	mov	r4, r2
 800835a:	461d      	mov	r5, r3
 800835c:	4643      	mov	r3, r8
 800835e:	18e3      	adds	r3, r4, r3
 8008360:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008364:	464b      	mov	r3, r9
 8008366:	eb45 0303 	adc.w	r3, r5, r3
 800836a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800836e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008372:	685b      	ldr	r3, [r3, #4]
 8008374:	2200      	movs	r2, #0
 8008376:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800837a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800837e:	f04f 0200 	mov.w	r2, #0
 8008382:	f04f 0300 	mov.w	r3, #0
 8008386:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800838a:	4629      	mov	r1, r5
 800838c:	008b      	lsls	r3, r1, #2
 800838e:	4621      	mov	r1, r4
 8008390:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008394:	4621      	mov	r1, r4
 8008396:	008a      	lsls	r2, r1, #2
 8008398:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800839c:	f7f8 fbee 	bl	8000b7c <__aeabi_uldivmod>
 80083a0:	4602      	mov	r2, r0
 80083a2:	460b      	mov	r3, r1
 80083a4:	4b60      	ldr	r3, [pc, #384]	@ (8008528 <UART_SetConfig+0x4e4>)
 80083a6:	fba3 2302 	umull	r2, r3, r3, r2
 80083aa:	095b      	lsrs	r3, r3, #5
 80083ac:	011c      	lsls	r4, r3, #4
 80083ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80083b2:	2200      	movs	r2, #0
 80083b4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80083b8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80083bc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80083c0:	4642      	mov	r2, r8
 80083c2:	464b      	mov	r3, r9
 80083c4:	1891      	adds	r1, r2, r2
 80083c6:	61b9      	str	r1, [r7, #24]
 80083c8:	415b      	adcs	r3, r3
 80083ca:	61fb      	str	r3, [r7, #28]
 80083cc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80083d0:	4641      	mov	r1, r8
 80083d2:	1851      	adds	r1, r2, r1
 80083d4:	6139      	str	r1, [r7, #16]
 80083d6:	4649      	mov	r1, r9
 80083d8:	414b      	adcs	r3, r1
 80083da:	617b      	str	r3, [r7, #20]
 80083dc:	f04f 0200 	mov.w	r2, #0
 80083e0:	f04f 0300 	mov.w	r3, #0
 80083e4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80083e8:	4659      	mov	r1, fp
 80083ea:	00cb      	lsls	r3, r1, #3
 80083ec:	4651      	mov	r1, sl
 80083ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80083f2:	4651      	mov	r1, sl
 80083f4:	00ca      	lsls	r2, r1, #3
 80083f6:	4610      	mov	r0, r2
 80083f8:	4619      	mov	r1, r3
 80083fa:	4603      	mov	r3, r0
 80083fc:	4642      	mov	r2, r8
 80083fe:	189b      	adds	r3, r3, r2
 8008400:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008404:	464b      	mov	r3, r9
 8008406:	460a      	mov	r2, r1
 8008408:	eb42 0303 	adc.w	r3, r2, r3
 800840c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008410:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008414:	685b      	ldr	r3, [r3, #4]
 8008416:	2200      	movs	r2, #0
 8008418:	67bb      	str	r3, [r7, #120]	@ 0x78
 800841a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800841c:	f04f 0200 	mov.w	r2, #0
 8008420:	f04f 0300 	mov.w	r3, #0
 8008424:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8008428:	4649      	mov	r1, r9
 800842a:	008b      	lsls	r3, r1, #2
 800842c:	4641      	mov	r1, r8
 800842e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008432:	4641      	mov	r1, r8
 8008434:	008a      	lsls	r2, r1, #2
 8008436:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800843a:	f7f8 fb9f 	bl	8000b7c <__aeabi_uldivmod>
 800843e:	4602      	mov	r2, r0
 8008440:	460b      	mov	r3, r1
 8008442:	4611      	mov	r1, r2
 8008444:	4b38      	ldr	r3, [pc, #224]	@ (8008528 <UART_SetConfig+0x4e4>)
 8008446:	fba3 2301 	umull	r2, r3, r3, r1
 800844a:	095b      	lsrs	r3, r3, #5
 800844c:	2264      	movs	r2, #100	@ 0x64
 800844e:	fb02 f303 	mul.w	r3, r2, r3
 8008452:	1acb      	subs	r3, r1, r3
 8008454:	011b      	lsls	r3, r3, #4
 8008456:	3332      	adds	r3, #50	@ 0x32
 8008458:	4a33      	ldr	r2, [pc, #204]	@ (8008528 <UART_SetConfig+0x4e4>)
 800845a:	fba2 2303 	umull	r2, r3, r2, r3
 800845e:	095b      	lsrs	r3, r3, #5
 8008460:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008464:	441c      	add	r4, r3
 8008466:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800846a:	2200      	movs	r2, #0
 800846c:	673b      	str	r3, [r7, #112]	@ 0x70
 800846e:	677a      	str	r2, [r7, #116]	@ 0x74
 8008470:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8008474:	4642      	mov	r2, r8
 8008476:	464b      	mov	r3, r9
 8008478:	1891      	adds	r1, r2, r2
 800847a:	60b9      	str	r1, [r7, #8]
 800847c:	415b      	adcs	r3, r3
 800847e:	60fb      	str	r3, [r7, #12]
 8008480:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008484:	4641      	mov	r1, r8
 8008486:	1851      	adds	r1, r2, r1
 8008488:	6039      	str	r1, [r7, #0]
 800848a:	4649      	mov	r1, r9
 800848c:	414b      	adcs	r3, r1
 800848e:	607b      	str	r3, [r7, #4]
 8008490:	f04f 0200 	mov.w	r2, #0
 8008494:	f04f 0300 	mov.w	r3, #0
 8008498:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800849c:	4659      	mov	r1, fp
 800849e:	00cb      	lsls	r3, r1, #3
 80084a0:	4651      	mov	r1, sl
 80084a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80084a6:	4651      	mov	r1, sl
 80084a8:	00ca      	lsls	r2, r1, #3
 80084aa:	4610      	mov	r0, r2
 80084ac:	4619      	mov	r1, r3
 80084ae:	4603      	mov	r3, r0
 80084b0:	4642      	mov	r2, r8
 80084b2:	189b      	adds	r3, r3, r2
 80084b4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80084b6:	464b      	mov	r3, r9
 80084b8:	460a      	mov	r2, r1
 80084ba:	eb42 0303 	adc.w	r3, r2, r3
 80084be:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80084c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80084c4:	685b      	ldr	r3, [r3, #4]
 80084c6:	2200      	movs	r2, #0
 80084c8:	663b      	str	r3, [r7, #96]	@ 0x60
 80084ca:	667a      	str	r2, [r7, #100]	@ 0x64
 80084cc:	f04f 0200 	mov.w	r2, #0
 80084d0:	f04f 0300 	mov.w	r3, #0
 80084d4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80084d8:	4649      	mov	r1, r9
 80084da:	008b      	lsls	r3, r1, #2
 80084dc:	4641      	mov	r1, r8
 80084de:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80084e2:	4641      	mov	r1, r8
 80084e4:	008a      	lsls	r2, r1, #2
 80084e6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80084ea:	f7f8 fb47 	bl	8000b7c <__aeabi_uldivmod>
 80084ee:	4602      	mov	r2, r0
 80084f0:	460b      	mov	r3, r1
 80084f2:	4b0d      	ldr	r3, [pc, #52]	@ (8008528 <UART_SetConfig+0x4e4>)
 80084f4:	fba3 1302 	umull	r1, r3, r3, r2
 80084f8:	095b      	lsrs	r3, r3, #5
 80084fa:	2164      	movs	r1, #100	@ 0x64
 80084fc:	fb01 f303 	mul.w	r3, r1, r3
 8008500:	1ad3      	subs	r3, r2, r3
 8008502:	011b      	lsls	r3, r3, #4
 8008504:	3332      	adds	r3, #50	@ 0x32
 8008506:	4a08      	ldr	r2, [pc, #32]	@ (8008528 <UART_SetConfig+0x4e4>)
 8008508:	fba2 2303 	umull	r2, r3, r2, r3
 800850c:	095b      	lsrs	r3, r3, #5
 800850e:	f003 020f 	and.w	r2, r3, #15
 8008512:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	4422      	add	r2, r4
 800851a:	609a      	str	r2, [r3, #8]
}
 800851c:	bf00      	nop
 800851e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8008522:	46bd      	mov	sp, r7
 8008524:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008528:	51eb851f 	.word	0x51eb851f

0800852c <DEV_SPI_WRite>:
	HAL_Delay(xms);
}


void DEV_SPI_WRite(UBYTE _dat)
{
 800852c:	b580      	push	{r7, lr}
 800852e:	b082      	sub	sp, #8
 8008530:	af00      	add	r7, sp, #0
 8008532:	4603      	mov	r3, r0
 8008534:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&hspi2, (uint8_t *)&_dat, 1, 500);
 8008536:	1df9      	adds	r1, r7, #7
 8008538:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800853c:	2201      	movs	r2, #1
 800853e:	4803      	ldr	r0, [pc, #12]	@ (800854c <DEV_SPI_WRite+0x20>)
 8008540:	f7fe fa41 	bl	80069c6 <HAL_SPI_Transmit>
}
 8008544:	bf00      	nop
 8008546:	3708      	adds	r7, #8
 8008548:	46bd      	mov	sp, r7
 800854a:	bd80      	pop	{r7, pc}
 800854c:	200001d0 	.word	0x200001d0

08008550 <DEV_Module_Init>:

int DEV_Module_Init(void)
{
 8008550:	b580      	push	{r7, lr}
 8008552:	af00      	add	r7, sp, #0
    DEV_Digital_Write(DEV_DC_PIN, 1);
 8008554:	2201      	movs	r2, #1
 8008556:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800855a:	480b      	ldr	r0, [pc, #44]	@ (8008588 <DEV_Module_Init+0x38>)
 800855c:	f7fb fd60 	bl	8004020 <HAL_GPIO_WritePin>
    DEV_Digital_Write(DEV_CS_PIN, 1);
 8008560:	2201      	movs	r2, #1
 8008562:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8008566:	4808      	ldr	r0, [pc, #32]	@ (8008588 <DEV_Module_Init+0x38>)
 8008568:	f7fb fd5a 	bl	8004020 <HAL_GPIO_WritePin>
    DEV_Digital_Write(DEV_RST_PIN, 1);
 800856c:	2201      	movs	r2, #1
 800856e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8008572:	4805      	ldr	r0, [pc, #20]	@ (8008588 <DEV_Module_Init+0x38>)
 8008574:	f7fb fd54 	bl	8004020 <HAL_GPIO_WritePin>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8008578:	2104      	movs	r1, #4
 800857a:	4804      	ldr	r0, [pc, #16]	@ (800858c <DEV_Module_Init+0x3c>)
 800857c:	f7fe fd8c 	bl	8007098 <HAL_TIM_PWM_Start>
		return 0;
 8008580:	2300      	movs	r3, #0
}
 8008582:	4618      	mov	r0, r3
 8008584:	bd80      	pop	{r7, pc}
 8008586:	bf00      	nop
 8008588:	40020400 	.word	0x40020400
 800858c:	2000022c 	.word	0x2000022c

08008590 <Paint_NewImage>:
    width   :   The width of the picture
    Height  :   The height of the picture
    Color   :   Whether the picture is inverted
******************************************************************************/
void Paint_NewImage(UWORD Width, UWORD Height, UWORD Rotate, UWORD Color)
{
 8008590:	b590      	push	{r4, r7, lr}
 8008592:	b083      	sub	sp, #12
 8008594:	af00      	add	r7, sp, #0
 8008596:	4604      	mov	r4, r0
 8008598:	4608      	mov	r0, r1
 800859a:	4611      	mov	r1, r2
 800859c:	461a      	mov	r2, r3
 800859e:	4623      	mov	r3, r4
 80085a0:	80fb      	strh	r3, [r7, #6]
 80085a2:	4603      	mov	r3, r0
 80085a4:	80bb      	strh	r3, [r7, #4]
 80085a6:	460b      	mov	r3, r1
 80085a8:	807b      	strh	r3, [r7, #2]
 80085aa:	4613      	mov	r3, r2
 80085ac:	803b      	strh	r3, [r7, #0]
    Paint.WidthMemory = Width;
 80085ae:	4a1c      	ldr	r2, [pc, #112]	@ (8008620 <Paint_NewImage+0x90>)
 80085b0:	88fb      	ldrh	r3, [r7, #6]
 80085b2:	8113      	strh	r3, [r2, #8]
    Paint.HeightMemory = Height;
 80085b4:	4a1a      	ldr	r2, [pc, #104]	@ (8008620 <Paint_NewImage+0x90>)
 80085b6:	88bb      	ldrh	r3, [r7, #4]
 80085b8:	8153      	strh	r3, [r2, #10]
    Paint.Color = Color;    
 80085ba:	4a19      	ldr	r2, [pc, #100]	@ (8008620 <Paint_NewImage+0x90>)
 80085bc:	883b      	ldrh	r3, [r7, #0]
 80085be:	8193      	strh	r3, [r2, #12]
    Paint.WidthByte = Width;
 80085c0:	4a17      	ldr	r2, [pc, #92]	@ (8008620 <Paint_NewImage+0x90>)
 80085c2:	88fb      	ldrh	r3, [r7, #6]
 80085c4:	8253      	strh	r3, [r2, #18]
    Paint.HeightByte = Height;    
 80085c6:	4a16      	ldr	r2, [pc, #88]	@ (8008620 <Paint_NewImage+0x90>)
 80085c8:	88bb      	ldrh	r3, [r7, #4]
 80085ca:	8293      	strh	r3, [r2, #20]
    printf("WidthByte = %d, HeightByte = %d\r\n", Paint.WidthByte, Paint.HeightByte);
 80085cc:	4b14      	ldr	r3, [pc, #80]	@ (8008620 <Paint_NewImage+0x90>)
 80085ce:	8a5b      	ldrh	r3, [r3, #18]
 80085d0:	b29b      	uxth	r3, r3
 80085d2:	4619      	mov	r1, r3
 80085d4:	4b12      	ldr	r3, [pc, #72]	@ (8008620 <Paint_NewImage+0x90>)
 80085d6:	8a9b      	ldrh	r3, [r3, #20]
 80085d8:	b29b      	uxth	r3, r3
 80085da:	461a      	mov	r2, r3
 80085dc:	4811      	ldr	r0, [pc, #68]	@ (8008624 <Paint_NewImage+0x94>)
 80085de:	f000 fdfb 	bl	80091d8 <iprintf>
   
    Paint.Rotate = Rotate;
 80085e2:	4a0f      	ldr	r2, [pc, #60]	@ (8008620 <Paint_NewImage+0x90>)
 80085e4:	887b      	ldrh	r3, [r7, #2]
 80085e6:	81d3      	strh	r3, [r2, #14]
    Paint.Mirror = MIRROR_NONE;
 80085e8:	4b0d      	ldr	r3, [pc, #52]	@ (8008620 <Paint_NewImage+0x90>)
 80085ea:	2200      	movs	r2, #0
 80085ec:	821a      	strh	r2, [r3, #16]
    
    if(Rotate == ROTATE_0 || Rotate == ROTATE_180) {
 80085ee:	887b      	ldrh	r3, [r7, #2]
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d002      	beq.n	80085fa <Paint_NewImage+0x6a>
 80085f4:	887b      	ldrh	r3, [r7, #2]
 80085f6:	2bb4      	cmp	r3, #180	@ 0xb4
 80085f8:	d106      	bne.n	8008608 <Paint_NewImage+0x78>
        Paint.Width = Width;
 80085fa:	4a09      	ldr	r2, [pc, #36]	@ (8008620 <Paint_NewImage+0x90>)
 80085fc:	88fb      	ldrh	r3, [r7, #6]
 80085fe:	8093      	strh	r3, [r2, #4]
        Paint.Height = Height;
 8008600:	4a07      	ldr	r2, [pc, #28]	@ (8008620 <Paint_NewImage+0x90>)
 8008602:	88bb      	ldrh	r3, [r7, #4]
 8008604:	80d3      	strh	r3, [r2, #6]
 8008606:	e006      	b.n	8008616 <Paint_NewImage+0x86>
    } else {
        Paint.Width = Height;
 8008608:	4a05      	ldr	r2, [pc, #20]	@ (8008620 <Paint_NewImage+0x90>)
 800860a:	88bb      	ldrh	r3, [r7, #4]
 800860c:	8093      	strh	r3, [r2, #4]
        Paint.Height = Width;
 800860e:	4a04      	ldr	r2, [pc, #16]	@ (8008620 <Paint_NewImage+0x90>)
 8008610:	88fb      	ldrh	r3, [r7, #6]
 8008612:	80d3      	strh	r3, [r2, #6]
    }
}
 8008614:	bf00      	nop
 8008616:	bf00      	nop
 8008618:	370c      	adds	r7, #12
 800861a:	46bd      	mov	sp, r7
 800861c:	bd90      	pop	{r4, r7, pc}
 800861e:	bf00      	nop
 8008620:	20000440 	.word	0x20000440
 8008624:	08009f7c 	.word	0x08009f7c

08008628 <Paint_SetClearFuntion>:
function:	Select Clear Funtion
parameter:
      Clear :   Pointer to Clear funtion 
******************************************************************************/
void Paint_SetClearFuntion(void (*Clear)(UWORD))
{
 8008628:	b480      	push	{r7}
 800862a:	b083      	sub	sp, #12
 800862c:	af00      	add	r7, sp, #0
 800862e:	6078      	str	r0, [r7, #4]
  CLEAR=Clear;
 8008630:	4a04      	ldr	r2, [pc, #16]	@ (8008644 <Paint_SetClearFuntion+0x1c>)
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	6013      	str	r3, [r2, #0]
}
 8008636:	bf00      	nop
 8008638:	370c      	adds	r7, #12
 800863a:	46bd      	mov	sp, r7
 800863c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008640:	4770      	bx	lr
 8008642:	bf00      	nop
 8008644:	2000045c 	.word	0x2000045c

08008648 <Paint_SetDisplayFuntion>:
function:	Select DisplayF untion
parameter:
      Display :   Pointer to display funtion 
******************************************************************************/
void Paint_SetDisplayFuntion(void (*Display)(UWORD,UWORD,UWORD))
{
 8008648:	b480      	push	{r7}
 800864a:	b083      	sub	sp, #12
 800864c:	af00      	add	r7, sp, #0
 800864e:	6078      	str	r0, [r7, #4]
  DISPLAY=Display;
 8008650:	4a04      	ldr	r2, [pc, #16]	@ (8008664 <Paint_SetDisplayFuntion+0x1c>)
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	6013      	str	r3, [r2, #0]
}
 8008656:	bf00      	nop
 8008658:	370c      	adds	r7, #12
 800865a:	46bd      	mov	sp, r7
 800865c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008660:	4770      	bx	lr
 8008662:	bf00      	nop
 8008664:	20000458 	.word	0x20000458

08008668 <Paint_SetRotate>:
function:	Select Image Rotate
parameter:
    Rotate   :   0,90,180,270
******************************************************************************/
void Paint_SetRotate(UWORD Rotate)
{
 8008668:	b580      	push	{r7, lr}
 800866a:	b082      	sub	sp, #8
 800866c:	af00      	add	r7, sp, #0
 800866e:	4603      	mov	r3, r0
 8008670:	80fb      	strh	r3, [r7, #6]
    if(Rotate == ROTATE_0 || Rotate == ROTATE_90 || Rotate == ROTATE_180 || Rotate == ROTATE_270) {
 8008672:	88fb      	ldrh	r3, [r7, #6]
 8008674:	2b00      	cmp	r3, #0
 8008676:	d009      	beq.n	800868c <Paint_SetRotate+0x24>
 8008678:	88fb      	ldrh	r3, [r7, #6]
 800867a:	2b5a      	cmp	r3, #90	@ 0x5a
 800867c:	d006      	beq.n	800868c <Paint_SetRotate+0x24>
 800867e:	88fb      	ldrh	r3, [r7, #6]
 8008680:	2bb4      	cmp	r3, #180	@ 0xb4
 8008682:	d003      	beq.n	800868c <Paint_SetRotate+0x24>
 8008684:	88fb      	ldrh	r3, [r7, #6]
 8008686:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 800868a:	d108      	bne.n	800869e <Paint_SetRotate+0x36>
        Debug("Set image Rotate %d\r\n", Rotate);
 800868c:	88fb      	ldrh	r3, [r7, #6]
 800868e:	4619      	mov	r1, r3
 8008690:	4807      	ldr	r0, [pc, #28]	@ (80086b0 <Paint_SetRotate+0x48>)
 8008692:	f000 fda1 	bl	80091d8 <iprintf>
        Paint.Rotate = Rotate;
 8008696:	4a07      	ldr	r2, [pc, #28]	@ (80086b4 <Paint_SetRotate+0x4c>)
 8008698:	88fb      	ldrh	r3, [r7, #6]
 800869a:	81d3      	strh	r3, [r2, #14]
 800869c:	e003      	b.n	80086a6 <Paint_SetRotate+0x3e>
    } else {
        Debug("rotate = 0, 90, 180, 270\r\n");
 800869e:	4806      	ldr	r0, [pc, #24]	@ (80086b8 <Paint_SetRotate+0x50>)
 80086a0:	f000 fe02 	bl	80092a8 <puts>
      //  exit(0);
    }
}
 80086a4:	bf00      	nop
 80086a6:	bf00      	nop
 80086a8:	3708      	adds	r7, #8
 80086aa:	46bd      	mov	sp, r7
 80086ac:	bd80      	pop	{r7, pc}
 80086ae:	bf00      	nop
 80086b0:	08009fa0 	.word	0x08009fa0
 80086b4:	20000440 	.word	0x20000440
 80086b8:	08009fc0 	.word	0x08009fc0

080086bc <Paint_SetPixel>:
    Xpoint  :   At point X
    Ypoint  :   At point Y
    Color   :   Painted colors
******************************************************************************/
void Paint_SetPixel(UWORD Xpoint, UWORD Ypoint, UWORD Color)
{
 80086bc:	b580      	push	{r7, lr}
 80086be:	b084      	sub	sp, #16
 80086c0:	af00      	add	r7, sp, #0
 80086c2:	4603      	mov	r3, r0
 80086c4:	80fb      	strh	r3, [r7, #6]
 80086c6:	460b      	mov	r3, r1
 80086c8:	80bb      	strh	r3, [r7, #4]
 80086ca:	4613      	mov	r3, r2
 80086cc:	807b      	strh	r3, [r7, #2]
    if(Xpoint > Paint.Width || Ypoint > Paint.Height){
 80086ce:	4b50      	ldr	r3, [pc, #320]	@ (8008810 <Paint_SetPixel+0x154>)
 80086d0:	889b      	ldrh	r3, [r3, #4]
 80086d2:	b29b      	uxth	r3, r3
 80086d4:	88fa      	ldrh	r2, [r7, #6]
 80086d6:	429a      	cmp	r2, r3
 80086d8:	d805      	bhi.n	80086e6 <Paint_SetPixel+0x2a>
 80086da:	4b4d      	ldr	r3, [pc, #308]	@ (8008810 <Paint_SetPixel+0x154>)
 80086dc:	88db      	ldrh	r3, [r3, #6]
 80086de:	b29b      	uxth	r3, r3
 80086e0:	88ba      	ldrh	r2, [r7, #4]
 80086e2:	429a      	cmp	r2, r3
 80086e4:	d903      	bls.n	80086ee <Paint_SetPixel+0x32>
        Debug("Exceeding display boundaries\r\n");
 80086e6:	484b      	ldr	r0, [pc, #300]	@ (8008814 <Paint_SetPixel+0x158>)
 80086e8:	f000 fdde 	bl	80092a8 <puts>
        return;
 80086ec:	e08c      	b.n	8008808 <Paint_SetPixel+0x14c>
    }      
    UWORD X, Y;

    switch(Paint.Rotate) {
 80086ee:	4b48      	ldr	r3, [pc, #288]	@ (8008810 <Paint_SetPixel+0x154>)
 80086f0:	89db      	ldrh	r3, [r3, #14]
 80086f2:	b29b      	uxth	r3, r3
 80086f4:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 80086f8:	d02d      	beq.n	8008756 <Paint_SetPixel+0x9a>
 80086fa:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 80086fe:	f300 8080 	bgt.w	8008802 <Paint_SetPixel+0x146>
 8008702:	2bb4      	cmp	r3, #180	@ 0xb4
 8008704:	d016      	beq.n	8008734 <Paint_SetPixel+0x78>
 8008706:	2bb4      	cmp	r3, #180	@ 0xb4
 8008708:	dc7b      	bgt.n	8008802 <Paint_SetPixel+0x146>
 800870a:	2b00      	cmp	r3, #0
 800870c:	d002      	beq.n	8008714 <Paint_SetPixel+0x58>
 800870e:	2b5a      	cmp	r3, #90	@ 0x5a
 8008710:	d005      	beq.n	800871e <Paint_SetPixel+0x62>
        X = Ypoint;
        Y = Paint.HeightMemory - Xpoint - 1;
        break;

    default:
        return;
 8008712:	e076      	b.n	8008802 <Paint_SetPixel+0x146>
        X = Xpoint;
 8008714:	88fb      	ldrh	r3, [r7, #6]
 8008716:	81fb      	strh	r3, [r7, #14]
        Y = Ypoint;  
 8008718:	88bb      	ldrh	r3, [r7, #4]
 800871a:	81bb      	strh	r3, [r7, #12]
        break;
 800871c:	e026      	b.n	800876c <Paint_SetPixel+0xb0>
        X = Paint.WidthMemory - Ypoint - 1;
 800871e:	4b3c      	ldr	r3, [pc, #240]	@ (8008810 <Paint_SetPixel+0x154>)
 8008720:	891b      	ldrh	r3, [r3, #8]
 8008722:	b29a      	uxth	r2, r3
 8008724:	88bb      	ldrh	r3, [r7, #4]
 8008726:	1ad3      	subs	r3, r2, r3
 8008728:	b29b      	uxth	r3, r3
 800872a:	3b01      	subs	r3, #1
 800872c:	81fb      	strh	r3, [r7, #14]
        Y = Xpoint;
 800872e:	88fb      	ldrh	r3, [r7, #6]
 8008730:	81bb      	strh	r3, [r7, #12]
        break;
 8008732:	e01b      	b.n	800876c <Paint_SetPixel+0xb0>
        X = Paint.WidthMemory - Xpoint - 1;
 8008734:	4b36      	ldr	r3, [pc, #216]	@ (8008810 <Paint_SetPixel+0x154>)
 8008736:	891b      	ldrh	r3, [r3, #8]
 8008738:	b29a      	uxth	r2, r3
 800873a:	88fb      	ldrh	r3, [r7, #6]
 800873c:	1ad3      	subs	r3, r2, r3
 800873e:	b29b      	uxth	r3, r3
 8008740:	3b01      	subs	r3, #1
 8008742:	81fb      	strh	r3, [r7, #14]
        Y = Paint.HeightMemory - Ypoint - 1;
 8008744:	4b32      	ldr	r3, [pc, #200]	@ (8008810 <Paint_SetPixel+0x154>)
 8008746:	895b      	ldrh	r3, [r3, #10]
 8008748:	b29a      	uxth	r2, r3
 800874a:	88bb      	ldrh	r3, [r7, #4]
 800874c:	1ad3      	subs	r3, r2, r3
 800874e:	b29b      	uxth	r3, r3
 8008750:	3b01      	subs	r3, #1
 8008752:	81bb      	strh	r3, [r7, #12]
        break;
 8008754:	e00a      	b.n	800876c <Paint_SetPixel+0xb0>
        X = Ypoint;
 8008756:	88bb      	ldrh	r3, [r7, #4]
 8008758:	81fb      	strh	r3, [r7, #14]
        Y = Paint.HeightMemory - Xpoint - 1;
 800875a:	4b2d      	ldr	r3, [pc, #180]	@ (8008810 <Paint_SetPixel+0x154>)
 800875c:	895b      	ldrh	r3, [r3, #10]
 800875e:	b29a      	uxth	r2, r3
 8008760:	88fb      	ldrh	r3, [r7, #6]
 8008762:	1ad3      	subs	r3, r2, r3
 8008764:	b29b      	uxth	r3, r3
 8008766:	3b01      	subs	r3, #1
 8008768:	81bb      	strh	r3, [r7, #12]
        break;
 800876a:	bf00      	nop
    }
    
    switch(Paint.Mirror) {
 800876c:	4b28      	ldr	r3, [pc, #160]	@ (8008810 <Paint_SetPixel+0x154>)
 800876e:	8a1b      	ldrh	r3, [r3, #16]
 8008770:	b29b      	uxth	r3, r3
 8008772:	2b03      	cmp	r3, #3
 8008774:	d847      	bhi.n	8008806 <Paint_SetPixel+0x14a>
 8008776:	a201      	add	r2, pc, #4	@ (adr r2, 800877c <Paint_SetPixel+0xc0>)
 8008778:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800877c:	080087d3 	.word	0x080087d3
 8008780:	0800878d 	.word	0x0800878d
 8008784:	0800879f 	.word	0x0800879f
 8008788:	080087b1 	.word	0x080087b1
    case MIRROR_NONE:
        break;
    case MIRROR_HORIZONTAL:
        X = Paint.WidthMemory - X - 1;
 800878c:	4b20      	ldr	r3, [pc, #128]	@ (8008810 <Paint_SetPixel+0x154>)
 800878e:	891b      	ldrh	r3, [r3, #8]
 8008790:	b29a      	uxth	r2, r3
 8008792:	89fb      	ldrh	r3, [r7, #14]
 8008794:	1ad3      	subs	r3, r2, r3
 8008796:	b29b      	uxth	r3, r3
 8008798:	3b01      	subs	r3, #1
 800879a:	81fb      	strh	r3, [r7, #14]
        break;
 800879c:	e01a      	b.n	80087d4 <Paint_SetPixel+0x118>
    case MIRROR_VERTICAL:
        Y = Paint.HeightMemory - Y - 1;
 800879e:	4b1c      	ldr	r3, [pc, #112]	@ (8008810 <Paint_SetPixel+0x154>)
 80087a0:	895b      	ldrh	r3, [r3, #10]
 80087a2:	b29a      	uxth	r2, r3
 80087a4:	89bb      	ldrh	r3, [r7, #12]
 80087a6:	1ad3      	subs	r3, r2, r3
 80087a8:	b29b      	uxth	r3, r3
 80087aa:	3b01      	subs	r3, #1
 80087ac:	81bb      	strh	r3, [r7, #12]
        break;
 80087ae:	e011      	b.n	80087d4 <Paint_SetPixel+0x118>
    case MIRROR_ORIGIN:
        X = Paint.WidthMemory - X - 1;
 80087b0:	4b17      	ldr	r3, [pc, #92]	@ (8008810 <Paint_SetPixel+0x154>)
 80087b2:	891b      	ldrh	r3, [r3, #8]
 80087b4:	b29a      	uxth	r2, r3
 80087b6:	89fb      	ldrh	r3, [r7, #14]
 80087b8:	1ad3      	subs	r3, r2, r3
 80087ba:	b29b      	uxth	r3, r3
 80087bc:	3b01      	subs	r3, #1
 80087be:	81fb      	strh	r3, [r7, #14]
        Y = Paint.HeightMemory - Y - 1;
 80087c0:	4b13      	ldr	r3, [pc, #76]	@ (8008810 <Paint_SetPixel+0x154>)
 80087c2:	895b      	ldrh	r3, [r3, #10]
 80087c4:	b29a      	uxth	r2, r3
 80087c6:	89bb      	ldrh	r3, [r7, #12]
 80087c8:	1ad3      	subs	r3, r2, r3
 80087ca:	b29b      	uxth	r3, r3
 80087cc:	3b01      	subs	r3, #1
 80087ce:	81bb      	strh	r3, [r7, #12]
        break;
 80087d0:	e000      	b.n	80087d4 <Paint_SetPixel+0x118>
        break;
 80087d2:	bf00      	nop
    default:
        return;
    }

    // printf("x = %d, y = %d\r\n", X, Y);
    if(X > Paint.WidthMemory || Y > Paint.HeightMemory){
 80087d4:	4b0e      	ldr	r3, [pc, #56]	@ (8008810 <Paint_SetPixel+0x154>)
 80087d6:	891b      	ldrh	r3, [r3, #8]
 80087d8:	b29b      	uxth	r3, r3
 80087da:	89fa      	ldrh	r2, [r7, #14]
 80087dc:	429a      	cmp	r2, r3
 80087de:	d805      	bhi.n	80087ec <Paint_SetPixel+0x130>
 80087e0:	4b0b      	ldr	r3, [pc, #44]	@ (8008810 <Paint_SetPixel+0x154>)
 80087e2:	895b      	ldrh	r3, [r3, #10]
 80087e4:	b29b      	uxth	r3, r3
 80087e6:	89ba      	ldrh	r2, [r7, #12]
 80087e8:	429a      	cmp	r2, r3
 80087ea:	d903      	bls.n	80087f4 <Paint_SetPixel+0x138>
        Debug("Exceeding display boundaries\r\n");
 80087ec:	4809      	ldr	r0, [pc, #36]	@ (8008814 <Paint_SetPixel+0x158>)
 80087ee:	f000 fd5b 	bl	80092a8 <puts>
        return;
 80087f2:	e009      	b.n	8008808 <Paint_SetPixel+0x14c>
    }
    
   // UDOUBLE Addr = X / 8 + Y * Paint.WidthByte;
		DISPLAY(X,Y, Color);
 80087f4:	4b08      	ldr	r3, [pc, #32]	@ (8008818 <Paint_SetPixel+0x15c>)
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	887a      	ldrh	r2, [r7, #2]
 80087fa:	89b9      	ldrh	r1, [r7, #12]
 80087fc:	89f8      	ldrh	r0, [r7, #14]
 80087fe:	4798      	blx	r3
 8008800:	e002      	b.n	8008808 <Paint_SetPixel+0x14c>
        return;
 8008802:	bf00      	nop
 8008804:	e000      	b.n	8008808 <Paint_SetPixel+0x14c>
        return;
 8008806:	bf00      	nop
}
 8008808:	3710      	adds	r7, #16
 800880a:	46bd      	mov	sp, r7
 800880c:	bd80      	pop	{r7, pc}
 800880e:	bf00      	nop
 8008810:	20000440 	.word	0x20000440
 8008814:	0800a07c 	.word	0x0800a07c
 8008818:	20000458 	.word	0x20000458

0800881c <Paint_Clear>:
function:	Clear the color of the picture
parameter:
    Color   :   Painted colors
******************************************************************************/
void Paint_Clear(UWORD Color)
{	
 800881c:	b580      	push	{r7, lr}
 800881e:	b082      	sub	sp, #8
 8008820:	af00      	add	r7, sp, #0
 8008822:	4603      	mov	r3, r0
 8008824:	80fb      	strh	r3, [r7, #6]
	CLEAR(Color);
 8008826:	4b04      	ldr	r3, [pc, #16]	@ (8008838 <Paint_Clear+0x1c>)
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	88fa      	ldrh	r2, [r7, #6]
 800882c:	4610      	mov	r0, r2
 800882e:	4798      	blx	r3
}
 8008830:	bf00      	nop
 8008832:	3708      	adds	r7, #8
 8008834:	46bd      	mov	sp, r7
 8008836:	bd80      	pop	{r7, pc}
 8008838:	2000045c 	.word	0x2000045c

0800883c <Paint_DrawChar>:
    Color_Background : Select the background color of the English character
    Color_Foreground : Select the foreground color of the English character
******************************************************************************/
void Paint_DrawChar(UWORD Xpoint, UWORD Ypoint, const char Acsii_Char,
                    sFONT* Font, UWORD Color_Background, UWORD Color_Foreground)
{
 800883c:	b580      	push	{r7, lr}
 800883e:	b088      	sub	sp, #32
 8008840:	af00      	add	r7, sp, #0
 8008842:	607b      	str	r3, [r7, #4]
 8008844:	4603      	mov	r3, r0
 8008846:	81fb      	strh	r3, [r7, #14]
 8008848:	460b      	mov	r3, r1
 800884a:	81bb      	strh	r3, [r7, #12]
 800884c:	4613      	mov	r3, r2
 800884e:	72fb      	strb	r3, [r7, #11]
    UWORD Page, Column;

    if (Xpoint > Paint.Width || Ypoint > Paint.Height) {
 8008850:	4b4e      	ldr	r3, [pc, #312]	@ (800898c <Paint_DrawChar+0x150>)
 8008852:	889b      	ldrh	r3, [r3, #4]
 8008854:	b29b      	uxth	r3, r3
 8008856:	89fa      	ldrh	r2, [r7, #14]
 8008858:	429a      	cmp	r2, r3
 800885a:	d805      	bhi.n	8008868 <Paint_DrawChar+0x2c>
 800885c:	4b4b      	ldr	r3, [pc, #300]	@ (800898c <Paint_DrawChar+0x150>)
 800885e:	88db      	ldrh	r3, [r3, #6]
 8008860:	b29b      	uxth	r3, r3
 8008862:	89ba      	ldrh	r2, [r7, #12]
 8008864:	429a      	cmp	r2, r3
 8008866:	d903      	bls.n	8008870 <Paint_DrawChar+0x34>
        Debug("Paint_DrawChar Input exceeds the normal display range\r\n");
 8008868:	4849      	ldr	r0, [pc, #292]	@ (8008990 <Paint_DrawChar+0x154>)
 800886a:	f000 fd1d 	bl	80092a8 <puts>
        return;
 800886e:	e089      	b.n	8008984 <Paint_DrawChar+0x148>
    }

    uint32_t Char_Offset = (Acsii_Char - ' ') * Font->Height * (Font->Width / 8 + (Font->Width % 8 ? 1 : 0));
 8008870:	7afb      	ldrb	r3, [r7, #11]
 8008872:	3b20      	subs	r3, #32
 8008874:	687a      	ldr	r2, [r7, #4]
 8008876:	88d2      	ldrh	r2, [r2, #6]
 8008878:	fb02 f303 	mul.w	r3, r2, r3
 800887c:	687a      	ldr	r2, [r7, #4]
 800887e:	8892      	ldrh	r2, [r2, #4]
 8008880:	08d2      	lsrs	r2, r2, #3
 8008882:	b292      	uxth	r2, r2
 8008884:	4611      	mov	r1, r2
 8008886:	687a      	ldr	r2, [r7, #4]
 8008888:	8892      	ldrh	r2, [r2, #4]
 800888a:	f002 0207 	and.w	r2, r2, #7
 800888e:	b292      	uxth	r2, r2
 8008890:	2a00      	cmp	r2, #0
 8008892:	bf14      	ite	ne
 8008894:	2201      	movne	r2, #1
 8008896:	2200      	moveq	r2, #0
 8008898:	b2d2      	uxtb	r2, r2
 800889a:	440a      	add	r2, r1
 800889c:	fb02 f303 	mul.w	r3, r2, r3
 80088a0:	617b      	str	r3, [r7, #20]
    const unsigned char *ptr = &Font->table[Char_Offset];
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	681a      	ldr	r2, [r3, #0]
 80088a6:	697b      	ldr	r3, [r7, #20]
 80088a8:	4413      	add	r3, r2
 80088aa:	61bb      	str	r3, [r7, #24]

    for (Page = 0; Page < Font->Height; Page ++ ) {
 80088ac:	2300      	movs	r3, #0
 80088ae:	83fb      	strh	r3, [r7, #30]
 80088b0:	e063      	b.n	800897a <Paint_DrawChar+0x13e>
        for (Column = 0; Column < Font->Width; Column ++ ) {
 80088b2:	2300      	movs	r3, #0
 80088b4:	83bb      	strh	r3, [r7, #28]
 80088b6:	e04e      	b.n	8008956 <Paint_DrawChar+0x11a>

            //To determine whether the font background color and screen background color is consistent
            if (FONT_BACKGROUND == Color_Background) { //this process is to speed up the scan
 80088b8:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80088ba:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80088be:	4293      	cmp	r3, r2
 80088c0:	d118      	bne.n	80088f4 <Paint_DrawChar+0xb8>
                if (*ptr & (0x80 >> (Column % 8)))
 80088c2:	69bb      	ldr	r3, [r7, #24]
 80088c4:	781b      	ldrb	r3, [r3, #0]
 80088c6:	4619      	mov	r1, r3
 80088c8:	8bbb      	ldrh	r3, [r7, #28]
 80088ca:	f003 0307 	and.w	r3, r3, #7
 80088ce:	2280      	movs	r2, #128	@ 0x80
 80088d0:	fa42 f303 	asr.w	r3, r2, r3
 80088d4:	400b      	ands	r3, r1
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d031      	beq.n	800893e <Paint_DrawChar+0x102>
                    Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Foreground);
 80088da:	89fa      	ldrh	r2, [r7, #14]
 80088dc:	8bbb      	ldrh	r3, [r7, #28]
 80088de:	4413      	add	r3, r2
 80088e0:	b298      	uxth	r0, r3
 80088e2:	89ba      	ldrh	r2, [r7, #12]
 80088e4:	8bfb      	ldrh	r3, [r7, #30]
 80088e6:	4413      	add	r3, r2
 80088e8:	b29b      	uxth	r3, r3
 80088ea:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 80088ec:	4619      	mov	r1, r3
 80088ee:	f7ff fee5 	bl	80086bc <Paint_SetPixel>
 80088f2:	e024      	b.n	800893e <Paint_DrawChar+0x102>
                    // Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Foreground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
            } else {
                if (*ptr & (0x80 >> (Column % 8))) {
 80088f4:	69bb      	ldr	r3, [r7, #24]
 80088f6:	781b      	ldrb	r3, [r3, #0]
 80088f8:	4619      	mov	r1, r3
 80088fa:	8bbb      	ldrh	r3, [r7, #28]
 80088fc:	f003 0307 	and.w	r3, r3, #7
 8008900:	2280      	movs	r2, #128	@ 0x80
 8008902:	fa42 f303 	asr.w	r3, r2, r3
 8008906:	400b      	ands	r3, r1
 8008908:	2b00      	cmp	r3, #0
 800890a:	d00c      	beq.n	8008926 <Paint_DrawChar+0xea>
                    Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Foreground);
 800890c:	89fa      	ldrh	r2, [r7, #14]
 800890e:	8bbb      	ldrh	r3, [r7, #28]
 8008910:	4413      	add	r3, r2
 8008912:	b298      	uxth	r0, r3
 8008914:	89ba      	ldrh	r2, [r7, #12]
 8008916:	8bfb      	ldrh	r3, [r7, #30]
 8008918:	4413      	add	r3, r2
 800891a:	b29b      	uxth	r3, r3
 800891c:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 800891e:	4619      	mov	r1, r3
 8008920:	f7ff fecc 	bl	80086bc <Paint_SetPixel>
 8008924:	e00b      	b.n	800893e <Paint_DrawChar+0x102>
                    // Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Foreground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
                } else {
                    Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Background);
 8008926:	89fa      	ldrh	r2, [r7, #14]
 8008928:	8bbb      	ldrh	r3, [r7, #28]
 800892a:	4413      	add	r3, r2
 800892c:	b298      	uxth	r0, r3
 800892e:	89ba      	ldrh	r2, [r7, #12]
 8008930:	8bfb      	ldrh	r3, [r7, #30]
 8008932:	4413      	add	r3, r2
 8008934:	b29b      	uxth	r3, r3
 8008936:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8008938:	4619      	mov	r1, r3
 800893a:	f7ff febf 	bl	80086bc <Paint_SetPixel>
                    // Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Background, DOT_PIXEL_DFT, DOT_STYLE_DFT);
                }
            }
            //One pixel is 8 bits
            if (Column % 8 == 7)
 800893e:	8bbb      	ldrh	r3, [r7, #28]
 8008940:	f003 0307 	and.w	r3, r3, #7
 8008944:	b29b      	uxth	r3, r3
 8008946:	2b07      	cmp	r3, #7
 8008948:	d102      	bne.n	8008950 <Paint_DrawChar+0x114>
                ptr++;
 800894a:	69bb      	ldr	r3, [r7, #24]
 800894c:	3301      	adds	r3, #1
 800894e:	61bb      	str	r3, [r7, #24]
        for (Column = 0; Column < Font->Width; Column ++ ) {
 8008950:	8bbb      	ldrh	r3, [r7, #28]
 8008952:	3301      	adds	r3, #1
 8008954:	83bb      	strh	r3, [r7, #28]
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	889b      	ldrh	r3, [r3, #4]
 800895a:	8bba      	ldrh	r2, [r7, #28]
 800895c:	429a      	cmp	r2, r3
 800895e:	d3ab      	bcc.n	80088b8 <Paint_DrawChar+0x7c>
        }// Write a line
        if (Font->Width % 8 != 0)
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	889b      	ldrh	r3, [r3, #4]
 8008964:	f003 0307 	and.w	r3, r3, #7
 8008968:	b29b      	uxth	r3, r3
 800896a:	2b00      	cmp	r3, #0
 800896c:	d002      	beq.n	8008974 <Paint_DrawChar+0x138>
            ptr++;
 800896e:	69bb      	ldr	r3, [r7, #24]
 8008970:	3301      	adds	r3, #1
 8008972:	61bb      	str	r3, [r7, #24]
    for (Page = 0; Page < Font->Height; Page ++ ) {
 8008974:	8bfb      	ldrh	r3, [r7, #30]
 8008976:	3301      	adds	r3, #1
 8008978:	83fb      	strh	r3, [r7, #30]
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	88db      	ldrh	r3, [r3, #6]
 800897e:	8bfa      	ldrh	r2, [r7, #30]
 8008980:	429a      	cmp	r2, r3
 8008982:	d396      	bcc.n	80088b2 <Paint_DrawChar+0x76>
    }// Write all
}
 8008984:	3720      	adds	r7, #32
 8008986:	46bd      	mov	sp, r7
 8008988:	bd80      	pop	{r7, pc}
 800898a:	bf00      	nop
 800898c:	20000440 	.word	0x20000440
 8008990:	0800a198 	.word	0x0800a198

08008994 <Paint_DrawString_EN>:
    Color_Background : Select the background color of the English character
    Color_Foreground : Select the foreground color of the English character
******************************************************************************/
void Paint_DrawString_EN(UWORD Xstart, UWORD Ystart, const char * pString,
                         sFONT* Font, UWORD Color_Background, UWORD Color_Foreground )
{
 8008994:	b580      	push	{r7, lr}
 8008996:	b088      	sub	sp, #32
 8008998:	af02      	add	r7, sp, #8
 800899a:	60ba      	str	r2, [r7, #8]
 800899c:	607b      	str	r3, [r7, #4]
 800899e:	4603      	mov	r3, r0
 80089a0:	81fb      	strh	r3, [r7, #14]
 80089a2:	460b      	mov	r3, r1
 80089a4:	81bb      	strh	r3, [r7, #12]
    UWORD Xpoint = Xstart;
 80089a6:	89fb      	ldrh	r3, [r7, #14]
 80089a8:	82fb      	strh	r3, [r7, #22]
    UWORD Ypoint = Ystart;
 80089aa:	89bb      	ldrh	r3, [r7, #12]
 80089ac:	82bb      	strh	r3, [r7, #20]

    if (Xstart > Paint.Width || Ystart > Paint.Height) {
 80089ae:	4b23      	ldr	r3, [pc, #140]	@ (8008a3c <Paint_DrawString_EN+0xa8>)
 80089b0:	889b      	ldrh	r3, [r3, #4]
 80089b2:	b29b      	uxth	r3, r3
 80089b4:	89fa      	ldrh	r2, [r7, #14]
 80089b6:	429a      	cmp	r2, r3
 80089b8:	d805      	bhi.n	80089c6 <Paint_DrawString_EN+0x32>
 80089ba:	4b20      	ldr	r3, [pc, #128]	@ (8008a3c <Paint_DrawString_EN+0xa8>)
 80089bc:	88db      	ldrh	r3, [r3, #6]
 80089be:	b29b      	uxth	r3, r3
 80089c0:	89ba      	ldrh	r2, [r7, #12]
 80089c2:	429a      	cmp	r2, r3
 80089c4:	d933      	bls.n	8008a2e <Paint_DrawString_EN+0x9a>
        Debug("Paint_DrawString_EN Input exceeds the normal display range\r\n");
 80089c6:	481e      	ldr	r0, [pc, #120]	@ (8008a40 <Paint_DrawString_EN+0xac>)
 80089c8:	f000 fc6e 	bl	80092a8 <puts>
        return;
 80089cc:	e033      	b.n	8008a36 <Paint_DrawString_EN+0xa2>
    }

    while (* pString != '\0') {
        //if X direction filled , reposition to(Xstart,Ypoint),Ypoint is Y direction plus the Height of the character
        if ((Xpoint + Font->Width ) > Paint.Width ) {
 80089ce:	8afb      	ldrh	r3, [r7, #22]
 80089d0:	687a      	ldr	r2, [r7, #4]
 80089d2:	8892      	ldrh	r2, [r2, #4]
 80089d4:	4413      	add	r3, r2
 80089d6:	4a19      	ldr	r2, [pc, #100]	@ (8008a3c <Paint_DrawString_EN+0xa8>)
 80089d8:	8892      	ldrh	r2, [r2, #4]
 80089da:	b292      	uxth	r2, r2
 80089dc:	4293      	cmp	r3, r2
 80089de:	dd06      	ble.n	80089ee <Paint_DrawString_EN+0x5a>
            Xpoint = Xstart;
 80089e0:	89fb      	ldrh	r3, [r7, #14]
 80089e2:	82fb      	strh	r3, [r7, #22]
            Ypoint += Font->Height;
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	88da      	ldrh	r2, [r3, #6]
 80089e8:	8abb      	ldrh	r3, [r7, #20]
 80089ea:	4413      	add	r3, r2
 80089ec:	82bb      	strh	r3, [r7, #20]
        }

        // If the Y direction is full, reposition to(Xstart, Ystart)
        if ((Ypoint  + Font->Height ) > Paint.Height ) {
 80089ee:	8abb      	ldrh	r3, [r7, #20]
 80089f0:	687a      	ldr	r2, [r7, #4]
 80089f2:	88d2      	ldrh	r2, [r2, #6]
 80089f4:	4413      	add	r3, r2
 80089f6:	4a11      	ldr	r2, [pc, #68]	@ (8008a3c <Paint_DrawString_EN+0xa8>)
 80089f8:	88d2      	ldrh	r2, [r2, #6]
 80089fa:	b292      	uxth	r2, r2
 80089fc:	4293      	cmp	r3, r2
 80089fe:	dd03      	ble.n	8008a08 <Paint_DrawString_EN+0x74>
            Xpoint = Xstart;
 8008a00:	89fb      	ldrh	r3, [r7, #14]
 8008a02:	82fb      	strh	r3, [r7, #22]
            Ypoint = Ystart;
 8008a04:	89bb      	ldrh	r3, [r7, #12]
 8008a06:	82bb      	strh	r3, [r7, #20]
        }
        Paint_DrawChar(Xpoint, Ypoint, * pString, Font, Color_Background, Color_Foreground);
 8008a08:	68bb      	ldr	r3, [r7, #8]
 8008a0a:	781a      	ldrb	r2, [r3, #0]
 8008a0c:	8ab9      	ldrh	r1, [r7, #20]
 8008a0e:	8af8      	ldrh	r0, [r7, #22]
 8008a10:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008a12:	9301      	str	r3, [sp, #4]
 8008a14:	8c3b      	ldrh	r3, [r7, #32]
 8008a16:	9300      	str	r3, [sp, #0]
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	f7ff ff0f 	bl	800883c <Paint_DrawChar>

        //The next character of the address
        pString ++;
 8008a1e:	68bb      	ldr	r3, [r7, #8]
 8008a20:	3301      	adds	r3, #1
 8008a22:	60bb      	str	r3, [r7, #8]

        //The next word of the abscissa increases the font of the broadband
        Xpoint += Font->Width;
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	889a      	ldrh	r2, [r3, #4]
 8008a28:	8afb      	ldrh	r3, [r7, #22]
 8008a2a:	4413      	add	r3, r2
 8008a2c:	82fb      	strh	r3, [r7, #22]
    while (* pString != '\0') {
 8008a2e:	68bb      	ldr	r3, [r7, #8]
 8008a30:	781b      	ldrb	r3, [r3, #0]
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d1cb      	bne.n	80089ce <Paint_DrawString_EN+0x3a>
    }
}
 8008a36:	3718      	adds	r7, #24
 8008a38:	46bd      	mov	sp, r7
 8008a3a:	bd80      	pop	{r7, pc}
 8008a3c:	20000440 	.word	0x20000440
 8008a40:	0800a1d8 	.word	0x0800a1d8

08008a44 <LCD_2IN_Reset>:
/*******************************************************************************
function:
	Hardware reset
*******************************************************************************/
static void LCD_2IN_Reset(void)
{
 8008a44:	b580      	push	{r7, lr}
 8008a46:	af00      	add	r7, sp, #0
	LCD_2IN_RST_1;
 8008a48:	2201      	movs	r2, #1
 8008a4a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8008a4e:	480d      	ldr	r0, [pc, #52]	@ (8008a84 <LCD_2IN_Reset+0x40>)
 8008a50:	f7fb fae6 	bl	8004020 <HAL_GPIO_WritePin>
	DEV_Delay_ms(100);
 8008a54:	2064      	movs	r0, #100	@ 0x64
 8008a56:	f7fb f801 	bl	8003a5c <HAL_Delay>
	LCD_2IN_RST_0;
 8008a5a:	2200      	movs	r2, #0
 8008a5c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8008a60:	4808      	ldr	r0, [pc, #32]	@ (8008a84 <LCD_2IN_Reset+0x40>)
 8008a62:	f7fb fadd 	bl	8004020 <HAL_GPIO_WritePin>
	DEV_Delay_ms(100);
 8008a66:	2064      	movs	r0, #100	@ 0x64
 8008a68:	f7fa fff8 	bl	8003a5c <HAL_Delay>
	LCD_2IN_RST_1;
 8008a6c:	2201      	movs	r2, #1
 8008a6e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8008a72:	4804      	ldr	r0, [pc, #16]	@ (8008a84 <LCD_2IN_Reset+0x40>)
 8008a74:	f7fb fad4 	bl	8004020 <HAL_GPIO_WritePin>
	DEV_Delay_ms(100);
 8008a78:	2064      	movs	r0, #100	@ 0x64
 8008a7a:	f7fa ffef 	bl	8003a5c <HAL_Delay>
}
 8008a7e:	bf00      	nop
 8008a80:	bd80      	pop	{r7, pc}
 8008a82:	bf00      	nop
 8008a84:	40020400 	.word	0x40020400

08008a88 <LCD_2IN_Write_Command>:
/*******************************************************************************
function:
		Write data and commands
*******************************************************************************/
static void LCD_2IN_Write_Command(UBYTE data)	 
{	
 8008a88:	b580      	push	{r7, lr}
 8008a8a:	b082      	sub	sp, #8
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	4603      	mov	r3, r0
 8008a90:	71fb      	strb	r3, [r7, #7]
	LCD_2IN_CS_0;
 8008a92:	2200      	movs	r2, #0
 8008a94:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8008a98:	4808      	ldr	r0, [pc, #32]	@ (8008abc <LCD_2IN_Write_Command+0x34>)
 8008a9a:	f7fb fac1 	bl	8004020 <HAL_GPIO_WritePin>
	LCD_2IN_DC_0;
 8008a9e:	2200      	movs	r2, #0
 8008aa0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8008aa4:	4805      	ldr	r0, [pc, #20]	@ (8008abc <LCD_2IN_Write_Command+0x34>)
 8008aa6:	f7fb fabb 	bl	8004020 <HAL_GPIO_WritePin>
	DEV_SPI_WRITE(data);
 8008aaa:	79fb      	ldrb	r3, [r7, #7]
 8008aac:	4618      	mov	r0, r3
 8008aae:	f7ff fd3d 	bl	800852c <DEV_SPI_WRite>
}
 8008ab2:	bf00      	nop
 8008ab4:	3708      	adds	r7, #8
 8008ab6:	46bd      	mov	sp, r7
 8008ab8:	bd80      	pop	{r7, pc}
 8008aba:	bf00      	nop
 8008abc:	40020400 	.word	0x40020400

08008ac0 <LCD_2IN_WriteData_Byte>:

static void LCD_2IN_WriteData_Byte(UBYTE data) 
{	
 8008ac0:	b580      	push	{r7, lr}
 8008ac2:	b082      	sub	sp, #8
 8008ac4:	af00      	add	r7, sp, #0
 8008ac6:	4603      	mov	r3, r0
 8008ac8:	71fb      	strb	r3, [r7, #7]
	LCD_2IN_CS_0;
 8008aca:	2200      	movs	r2, #0
 8008acc:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8008ad0:	480b      	ldr	r0, [pc, #44]	@ (8008b00 <LCD_2IN_WriteData_Byte+0x40>)
 8008ad2:	f7fb faa5 	bl	8004020 <HAL_GPIO_WritePin>
	LCD_2IN_DC_1;
 8008ad6:	2201      	movs	r2, #1
 8008ad8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8008adc:	4808      	ldr	r0, [pc, #32]	@ (8008b00 <LCD_2IN_WriteData_Byte+0x40>)
 8008ade:	f7fb fa9f 	bl	8004020 <HAL_GPIO_WritePin>
	DEV_SPI_WRITE(data);  
 8008ae2:	79fb      	ldrb	r3, [r7, #7]
 8008ae4:	4618      	mov	r0, r3
 8008ae6:	f7ff fd21 	bl	800852c <DEV_SPI_WRite>
	LCD_2IN_CS_1;
 8008aea:	2201      	movs	r2, #1
 8008aec:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8008af0:	4803      	ldr	r0, [pc, #12]	@ (8008b00 <LCD_2IN_WriteData_Byte+0x40>)
 8008af2:	f7fb fa95 	bl	8004020 <HAL_GPIO_WritePin>
}  
 8008af6:	bf00      	nop
 8008af8:	3708      	adds	r7, #8
 8008afa:	46bd      	mov	sp, r7
 8008afc:	bd80      	pop	{r7, pc}
 8008afe:	bf00      	nop
 8008b00:	40020400 	.word	0x40020400

08008b04 <LCD_2IN_WriteData_Word>:

void LCD_2IN_WriteData_Word(UWORD data)
{
 8008b04:	b580      	push	{r7, lr}
 8008b06:	b082      	sub	sp, #8
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	4603      	mov	r3, r0
 8008b0c:	80fb      	strh	r3, [r7, #6]
	LCD_2IN_CS_0;
 8008b0e:	2200      	movs	r2, #0
 8008b10:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8008b14:	480f      	ldr	r0, [pc, #60]	@ (8008b54 <LCD_2IN_WriteData_Word+0x50>)
 8008b16:	f7fb fa83 	bl	8004020 <HAL_GPIO_WritePin>
	LCD_2IN_DC_1;
 8008b1a:	2201      	movs	r2, #1
 8008b1c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8008b20:	480c      	ldr	r0, [pc, #48]	@ (8008b54 <LCD_2IN_WriteData_Word+0x50>)
 8008b22:	f7fb fa7d 	bl	8004020 <HAL_GPIO_WritePin>
	DEV_SPI_WRITE((data>>8) & 0xff);
 8008b26:	88fb      	ldrh	r3, [r7, #6]
 8008b28:	0a1b      	lsrs	r3, r3, #8
 8008b2a:	b29b      	uxth	r3, r3
 8008b2c:	b2db      	uxtb	r3, r3
 8008b2e:	4618      	mov	r0, r3
 8008b30:	f7ff fcfc 	bl	800852c <DEV_SPI_WRite>
	DEV_SPI_WRITE(data);
 8008b34:	88fb      	ldrh	r3, [r7, #6]
 8008b36:	b2db      	uxtb	r3, r3
 8008b38:	4618      	mov	r0, r3
 8008b3a:	f7ff fcf7 	bl	800852c <DEV_SPI_WRite>
	LCD_2IN_CS_1;
 8008b3e:	2201      	movs	r2, #1
 8008b40:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8008b44:	4803      	ldr	r0, [pc, #12]	@ (8008b54 <LCD_2IN_WriteData_Word+0x50>)
 8008b46:	f7fb fa6b 	bl	8004020 <HAL_GPIO_WritePin>
}	  
 8008b4a:	bf00      	nop
 8008b4c:	3708      	adds	r7, #8
 8008b4e:	46bd      	mov	sp, r7
 8008b50:	bd80      	pop	{r7, pc}
 8008b52:	bf00      	nop
 8008b54:	40020400 	.word	0x40020400

08008b58 <LCD_2IN_Init>:
/******************************************************************************
function:	
		Common register initialization
******************************************************************************/
void LCD_2IN_Init(void)
{
 8008b58:	b580      	push	{r7, lr}
 8008b5a:	af00      	add	r7, sp, #0
	LCD_2IN_Reset();
 8008b5c:	f7ff ff72 	bl	8008a44 <LCD_2IN_Reset>

	LCD_2IN_Write_Command(0x36);
 8008b60:	2036      	movs	r0, #54	@ 0x36
 8008b62:	f7ff ff91 	bl	8008a88 <LCD_2IN_Write_Command>
	LCD_2IN_WriteData_Byte(0x00); 
 8008b66:	2000      	movs	r0, #0
 8008b68:	f7ff ffaa 	bl	8008ac0 <LCD_2IN_WriteData_Byte>

	LCD_2IN_Write_Command(0x3A); 
 8008b6c:	203a      	movs	r0, #58	@ 0x3a
 8008b6e:	f7ff ff8b 	bl	8008a88 <LCD_2IN_Write_Command>
	LCD_2IN_WriteData_Byte(0x05);
 8008b72:	2005      	movs	r0, #5
 8008b74:	f7ff ffa4 	bl	8008ac0 <LCD_2IN_WriteData_Byte>

	LCD_2IN_Write_Command(0x21); 
 8008b78:	2021      	movs	r0, #33	@ 0x21
 8008b7a:	f7ff ff85 	bl	8008a88 <LCD_2IN_Write_Command>

	LCD_2IN_Write_Command(0x2A);
 8008b7e:	202a      	movs	r0, #42	@ 0x2a
 8008b80:	f7ff ff82 	bl	8008a88 <LCD_2IN_Write_Command>
	LCD_2IN_WriteData_Byte(0x00);
 8008b84:	2000      	movs	r0, #0
 8008b86:	f7ff ff9b 	bl	8008ac0 <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x00);
 8008b8a:	2000      	movs	r0, #0
 8008b8c:	f7ff ff98 	bl	8008ac0 <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x01);
 8008b90:	2001      	movs	r0, #1
 8008b92:	f7ff ff95 	bl	8008ac0 <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x3F);
 8008b96:	203f      	movs	r0, #63	@ 0x3f
 8008b98:	f7ff ff92 	bl	8008ac0 <LCD_2IN_WriteData_Byte>

	LCD_2IN_Write_Command(0x2B);
 8008b9c:	202b      	movs	r0, #43	@ 0x2b
 8008b9e:	f7ff ff73 	bl	8008a88 <LCD_2IN_Write_Command>
	LCD_2IN_WriteData_Byte(0x00);
 8008ba2:	2000      	movs	r0, #0
 8008ba4:	f7ff ff8c 	bl	8008ac0 <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x00);
 8008ba8:	2000      	movs	r0, #0
 8008baa:	f7ff ff89 	bl	8008ac0 <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x00);
 8008bae:	2000      	movs	r0, #0
 8008bb0:	f7ff ff86 	bl	8008ac0 <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0xEF);
 8008bb4:	20ef      	movs	r0, #239	@ 0xef
 8008bb6:	f7ff ff83 	bl	8008ac0 <LCD_2IN_WriteData_Byte>

	LCD_2IN_Write_Command(0xB2);
 8008bba:	20b2      	movs	r0, #178	@ 0xb2
 8008bbc:	f7ff ff64 	bl	8008a88 <LCD_2IN_Write_Command>
	LCD_2IN_WriteData_Byte(0x0C);
 8008bc0:	200c      	movs	r0, #12
 8008bc2:	f7ff ff7d 	bl	8008ac0 <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x0C);
 8008bc6:	200c      	movs	r0, #12
 8008bc8:	f7ff ff7a 	bl	8008ac0 <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x00);
 8008bcc:	2000      	movs	r0, #0
 8008bce:	f7ff ff77 	bl	8008ac0 <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x33);
 8008bd2:	2033      	movs	r0, #51	@ 0x33
 8008bd4:	f7ff ff74 	bl	8008ac0 <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x33);
 8008bd8:	2033      	movs	r0, #51	@ 0x33
 8008bda:	f7ff ff71 	bl	8008ac0 <LCD_2IN_WriteData_Byte>

	LCD_2IN_Write_Command(0xB7);
 8008bde:	20b7      	movs	r0, #183	@ 0xb7
 8008be0:	f7ff ff52 	bl	8008a88 <LCD_2IN_Write_Command>
	LCD_2IN_WriteData_Byte(0x35); 
 8008be4:	2035      	movs	r0, #53	@ 0x35
 8008be6:	f7ff ff6b 	bl	8008ac0 <LCD_2IN_WriteData_Byte>

	LCD_2IN_Write_Command(0xBB);
 8008bea:	20bb      	movs	r0, #187	@ 0xbb
 8008bec:	f7ff ff4c 	bl	8008a88 <LCD_2IN_Write_Command>
	LCD_2IN_WriteData_Byte(0x1F);
 8008bf0:	201f      	movs	r0, #31
 8008bf2:	f7ff ff65 	bl	8008ac0 <LCD_2IN_WriteData_Byte>

	LCD_2IN_Write_Command(0xC0);
 8008bf6:	20c0      	movs	r0, #192	@ 0xc0
 8008bf8:	f7ff ff46 	bl	8008a88 <LCD_2IN_Write_Command>
	LCD_2IN_WriteData_Byte(0x2C);
 8008bfc:	202c      	movs	r0, #44	@ 0x2c
 8008bfe:	f7ff ff5f 	bl	8008ac0 <LCD_2IN_WriteData_Byte>

	LCD_2IN_Write_Command(0xC2);
 8008c02:	20c2      	movs	r0, #194	@ 0xc2
 8008c04:	f7ff ff40 	bl	8008a88 <LCD_2IN_Write_Command>
	LCD_2IN_WriteData_Byte(0x01);
 8008c08:	2001      	movs	r0, #1
 8008c0a:	f7ff ff59 	bl	8008ac0 <LCD_2IN_WriteData_Byte>

	LCD_2IN_Write_Command(0xC3);
 8008c0e:	20c3      	movs	r0, #195	@ 0xc3
 8008c10:	f7ff ff3a 	bl	8008a88 <LCD_2IN_Write_Command>
	LCD_2IN_WriteData_Byte(0x12);   
 8008c14:	2012      	movs	r0, #18
 8008c16:	f7ff ff53 	bl	8008ac0 <LCD_2IN_WriteData_Byte>

	LCD_2IN_Write_Command(0xC4);
 8008c1a:	20c4      	movs	r0, #196	@ 0xc4
 8008c1c:	f7ff ff34 	bl	8008a88 <LCD_2IN_Write_Command>
	LCD_2IN_WriteData_Byte(0x20);
 8008c20:	2020      	movs	r0, #32
 8008c22:	f7ff ff4d 	bl	8008ac0 <LCD_2IN_WriteData_Byte>

	LCD_2IN_Write_Command(0xC6);
 8008c26:	20c6      	movs	r0, #198	@ 0xc6
 8008c28:	f7ff ff2e 	bl	8008a88 <LCD_2IN_Write_Command>
	LCD_2IN_WriteData_Byte(0x0F); 
 8008c2c:	200f      	movs	r0, #15
 8008c2e:	f7ff ff47 	bl	8008ac0 <LCD_2IN_WriteData_Byte>

	LCD_2IN_Write_Command(0xD0);
 8008c32:	20d0      	movs	r0, #208	@ 0xd0
 8008c34:	f7ff ff28 	bl	8008a88 <LCD_2IN_Write_Command>
	LCD_2IN_WriteData_Byte(0xA4);
 8008c38:	20a4      	movs	r0, #164	@ 0xa4
 8008c3a:	f7ff ff41 	bl	8008ac0 <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0xA1);
 8008c3e:	20a1      	movs	r0, #161	@ 0xa1
 8008c40:	f7ff ff3e 	bl	8008ac0 <LCD_2IN_WriteData_Byte>

	LCD_2IN_Write_Command(0xE0);
 8008c44:	20e0      	movs	r0, #224	@ 0xe0
 8008c46:	f7ff ff1f 	bl	8008a88 <LCD_2IN_Write_Command>
	LCD_2IN_WriteData_Byte(0xD0);
 8008c4a:	20d0      	movs	r0, #208	@ 0xd0
 8008c4c:	f7ff ff38 	bl	8008ac0 <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x08);
 8008c50:	2008      	movs	r0, #8
 8008c52:	f7ff ff35 	bl	8008ac0 <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x11);
 8008c56:	2011      	movs	r0, #17
 8008c58:	f7ff ff32 	bl	8008ac0 <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x08);
 8008c5c:	2008      	movs	r0, #8
 8008c5e:	f7ff ff2f 	bl	8008ac0 <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x0C);
 8008c62:	200c      	movs	r0, #12
 8008c64:	f7ff ff2c 	bl	8008ac0 <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x15);
 8008c68:	2015      	movs	r0, #21
 8008c6a:	f7ff ff29 	bl	8008ac0 <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x39);
 8008c6e:	2039      	movs	r0, #57	@ 0x39
 8008c70:	f7ff ff26 	bl	8008ac0 <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x33);
 8008c74:	2033      	movs	r0, #51	@ 0x33
 8008c76:	f7ff ff23 	bl	8008ac0 <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x50);
 8008c7a:	2050      	movs	r0, #80	@ 0x50
 8008c7c:	f7ff ff20 	bl	8008ac0 <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x36);
 8008c80:	2036      	movs	r0, #54	@ 0x36
 8008c82:	f7ff ff1d 	bl	8008ac0 <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x13);
 8008c86:	2013      	movs	r0, #19
 8008c88:	f7ff ff1a 	bl	8008ac0 <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x14);
 8008c8c:	2014      	movs	r0, #20
 8008c8e:	f7ff ff17 	bl	8008ac0 <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x29);
 8008c92:	2029      	movs	r0, #41	@ 0x29
 8008c94:	f7ff ff14 	bl	8008ac0 <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x2D);
 8008c98:	202d      	movs	r0, #45	@ 0x2d
 8008c9a:	f7ff ff11 	bl	8008ac0 <LCD_2IN_WriteData_Byte>

	LCD_2IN_Write_Command(0xE1);
 8008c9e:	20e1      	movs	r0, #225	@ 0xe1
 8008ca0:	f7ff fef2 	bl	8008a88 <LCD_2IN_Write_Command>
	LCD_2IN_WriteData_Byte(0xD0);
 8008ca4:	20d0      	movs	r0, #208	@ 0xd0
 8008ca6:	f7ff ff0b 	bl	8008ac0 <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x08);
 8008caa:	2008      	movs	r0, #8
 8008cac:	f7ff ff08 	bl	8008ac0 <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x10);
 8008cb0:	2010      	movs	r0, #16
 8008cb2:	f7ff ff05 	bl	8008ac0 <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x08);
 8008cb6:	2008      	movs	r0, #8
 8008cb8:	f7ff ff02 	bl	8008ac0 <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x06);
 8008cbc:	2006      	movs	r0, #6
 8008cbe:	f7ff feff 	bl	8008ac0 <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x06);
 8008cc2:	2006      	movs	r0, #6
 8008cc4:	f7ff fefc 	bl	8008ac0 <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x39);
 8008cc8:	2039      	movs	r0, #57	@ 0x39
 8008cca:	f7ff fef9 	bl	8008ac0 <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x44);
 8008cce:	2044      	movs	r0, #68	@ 0x44
 8008cd0:	f7ff fef6 	bl	8008ac0 <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x51);
 8008cd4:	2051      	movs	r0, #81	@ 0x51
 8008cd6:	f7ff fef3 	bl	8008ac0 <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x0B);
 8008cda:	200b      	movs	r0, #11
 8008cdc:	f7ff fef0 	bl	8008ac0 <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x16);
 8008ce0:	2016      	movs	r0, #22
 8008ce2:	f7ff feed 	bl	8008ac0 <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x14);
 8008ce6:	2014      	movs	r0, #20
 8008ce8:	f7ff feea 	bl	8008ac0 <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x2F);
 8008cec:	202f      	movs	r0, #47	@ 0x2f
 8008cee:	f7ff fee7 	bl	8008ac0 <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x31);
 8008cf2:	2031      	movs	r0, #49	@ 0x31
 8008cf4:	f7ff fee4 	bl	8008ac0 <LCD_2IN_WriteData_Byte>
	LCD_2IN_Write_Command(0x21);
 8008cf8:	2021      	movs	r0, #33	@ 0x21
 8008cfa:	f7ff fec5 	bl	8008a88 <LCD_2IN_Write_Command>

	LCD_2IN_Write_Command(0x11);
 8008cfe:	2011      	movs	r0, #17
 8008d00:	f7ff fec2 	bl	8008a88 <LCD_2IN_Write_Command>

	LCD_2IN_Write_Command(0x29);
 8008d04:	2029      	movs	r0, #41	@ 0x29
 8008d06:	f7ff febf 	bl	8008a88 <LCD_2IN_Write_Command>
}
 8008d0a:	bf00      	nop
 8008d0c:	bd80      	pop	{r7, pc}

08008d0e <LCD_2IN_SetWindow>:
	  Ystart:	Start UWORD y coordinate
	  Xend  :	End UWORD coordinates
	  Yend  :	End UWORD coordinatesen
******************************************************************************/
void LCD_2IN_SetWindow(UWORD Xstart, UWORD Ystart, UWORD Xend, UWORD  Yend)
{ 
 8008d0e:	b590      	push	{r4, r7, lr}
 8008d10:	b083      	sub	sp, #12
 8008d12:	af00      	add	r7, sp, #0
 8008d14:	4604      	mov	r4, r0
 8008d16:	4608      	mov	r0, r1
 8008d18:	4611      	mov	r1, r2
 8008d1a:	461a      	mov	r2, r3
 8008d1c:	4623      	mov	r3, r4
 8008d1e:	80fb      	strh	r3, [r7, #6]
 8008d20:	4603      	mov	r3, r0
 8008d22:	80bb      	strh	r3, [r7, #4]
 8008d24:	460b      	mov	r3, r1
 8008d26:	807b      	strh	r3, [r7, #2]
 8008d28:	4613      	mov	r3, r2
 8008d2a:	803b      	strh	r3, [r7, #0]
	LCD_2IN_Write_Command(0x2a);
 8008d2c:	202a      	movs	r0, #42	@ 0x2a
 8008d2e:	f7ff feab 	bl	8008a88 <LCD_2IN_Write_Command>
	LCD_2IN_WriteData_Byte(Xstart >>8);
 8008d32:	88fb      	ldrh	r3, [r7, #6]
 8008d34:	0a1b      	lsrs	r3, r3, #8
 8008d36:	b29b      	uxth	r3, r3
 8008d38:	b2db      	uxtb	r3, r3
 8008d3a:	4618      	mov	r0, r3
 8008d3c:	f7ff fec0 	bl	8008ac0 <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(Xstart & 0xff);
 8008d40:	88fb      	ldrh	r3, [r7, #6]
 8008d42:	b2db      	uxtb	r3, r3
 8008d44:	4618      	mov	r0, r3
 8008d46:	f7ff febb 	bl	8008ac0 <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte((Xend - 1) >> 8);
 8008d4a:	887b      	ldrh	r3, [r7, #2]
 8008d4c:	3b01      	subs	r3, #1
 8008d4e:	121b      	asrs	r3, r3, #8
 8008d50:	b2db      	uxtb	r3, r3
 8008d52:	4618      	mov	r0, r3
 8008d54:	f7ff feb4 	bl	8008ac0 <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte((Xend - 1) & 0xff);
 8008d58:	887b      	ldrh	r3, [r7, #2]
 8008d5a:	b2db      	uxtb	r3, r3
 8008d5c:	3b01      	subs	r3, #1
 8008d5e:	b2db      	uxtb	r3, r3
 8008d60:	4618      	mov	r0, r3
 8008d62:	f7ff fead 	bl	8008ac0 <LCD_2IN_WriteData_Byte>

	LCD_2IN_Write_Command(0x2b);
 8008d66:	202b      	movs	r0, #43	@ 0x2b
 8008d68:	f7ff fe8e 	bl	8008a88 <LCD_2IN_Write_Command>
	LCD_2IN_WriteData_Byte(Ystart >>8);
 8008d6c:	88bb      	ldrh	r3, [r7, #4]
 8008d6e:	0a1b      	lsrs	r3, r3, #8
 8008d70:	b29b      	uxth	r3, r3
 8008d72:	b2db      	uxtb	r3, r3
 8008d74:	4618      	mov	r0, r3
 8008d76:	f7ff fea3 	bl	8008ac0 <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(Ystart & 0xff);
 8008d7a:	88bb      	ldrh	r3, [r7, #4]
 8008d7c:	b2db      	uxtb	r3, r3
 8008d7e:	4618      	mov	r0, r3
 8008d80:	f7ff fe9e 	bl	8008ac0 <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte((Yend - 1) >> 8);
 8008d84:	883b      	ldrh	r3, [r7, #0]
 8008d86:	3b01      	subs	r3, #1
 8008d88:	121b      	asrs	r3, r3, #8
 8008d8a:	b2db      	uxtb	r3, r3
 8008d8c:	4618      	mov	r0, r3
 8008d8e:	f7ff fe97 	bl	8008ac0 <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte((Yend - 1) & 0xff);
 8008d92:	883b      	ldrh	r3, [r7, #0]
 8008d94:	b2db      	uxtb	r3, r3
 8008d96:	3b01      	subs	r3, #1
 8008d98:	b2db      	uxtb	r3, r3
 8008d9a:	4618      	mov	r0, r3
 8008d9c:	f7ff fe90 	bl	8008ac0 <LCD_2IN_WriteData_Byte>

	LCD_2IN_Write_Command(0x2C);
 8008da0:	202c      	movs	r0, #44	@ 0x2c
 8008da2:	f7ff fe71 	bl	8008a88 <LCD_2IN_Write_Command>
}
 8008da6:	bf00      	nop
 8008da8:	370c      	adds	r7, #12
 8008daa:	46bd      	mov	sp, r7
 8008dac:	bd90      	pop	{r4, r7, pc}

08008dae <LCD_2IN_SetCursor>:
	  Xstart: 	Start UWORD x coordinate
	  Ystart:	Start UWORD y coordinate

******************************************************************************/
void LCD_2IN_SetCursor(UWORD X, UWORD Y)
{ 
 8008dae:	b580      	push	{r7, lr}
 8008db0:	b082      	sub	sp, #8
 8008db2:	af00      	add	r7, sp, #0
 8008db4:	4603      	mov	r3, r0
 8008db6:	460a      	mov	r2, r1
 8008db8:	80fb      	strh	r3, [r7, #6]
 8008dba:	4613      	mov	r3, r2
 8008dbc:	80bb      	strh	r3, [r7, #4]
	LCD_2IN_Write_Command(0x2a);
 8008dbe:	202a      	movs	r0, #42	@ 0x2a
 8008dc0:	f7ff fe62 	bl	8008a88 <LCD_2IN_Write_Command>
	LCD_2IN_WriteData_Byte(X >> 8);
 8008dc4:	88fb      	ldrh	r3, [r7, #6]
 8008dc6:	0a1b      	lsrs	r3, r3, #8
 8008dc8:	b29b      	uxth	r3, r3
 8008dca:	b2db      	uxtb	r3, r3
 8008dcc:	4618      	mov	r0, r3
 8008dce:	f7ff fe77 	bl	8008ac0 <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(X);
 8008dd2:	88fb      	ldrh	r3, [r7, #6]
 8008dd4:	b2db      	uxtb	r3, r3
 8008dd6:	4618      	mov	r0, r3
 8008dd8:	f7ff fe72 	bl	8008ac0 <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(X >> 8);
 8008ddc:	88fb      	ldrh	r3, [r7, #6]
 8008dde:	0a1b      	lsrs	r3, r3, #8
 8008de0:	b29b      	uxth	r3, r3
 8008de2:	b2db      	uxtb	r3, r3
 8008de4:	4618      	mov	r0, r3
 8008de6:	f7ff fe6b 	bl	8008ac0 <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(X);
 8008dea:	88fb      	ldrh	r3, [r7, #6]
 8008dec:	b2db      	uxtb	r3, r3
 8008dee:	4618      	mov	r0, r3
 8008df0:	f7ff fe66 	bl	8008ac0 <LCD_2IN_WriteData_Byte>

	LCD_2IN_Write_Command(0x2b);
 8008df4:	202b      	movs	r0, #43	@ 0x2b
 8008df6:	f7ff fe47 	bl	8008a88 <LCD_2IN_Write_Command>
	LCD_2IN_WriteData_Byte(Y >> 8);
 8008dfa:	88bb      	ldrh	r3, [r7, #4]
 8008dfc:	0a1b      	lsrs	r3, r3, #8
 8008dfe:	b29b      	uxth	r3, r3
 8008e00:	b2db      	uxtb	r3, r3
 8008e02:	4618      	mov	r0, r3
 8008e04:	f7ff fe5c 	bl	8008ac0 <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(Y);
 8008e08:	88bb      	ldrh	r3, [r7, #4]
 8008e0a:	b2db      	uxtb	r3, r3
 8008e0c:	4618      	mov	r0, r3
 8008e0e:	f7ff fe57 	bl	8008ac0 <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(Y >> 8);
 8008e12:	88bb      	ldrh	r3, [r7, #4]
 8008e14:	0a1b      	lsrs	r3, r3, #8
 8008e16:	b29b      	uxth	r3, r3
 8008e18:	b2db      	uxtb	r3, r3
 8008e1a:	4618      	mov	r0, r3
 8008e1c:	f7ff fe50 	bl	8008ac0 <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(Y);
 8008e20:	88bb      	ldrh	r3, [r7, #4]
 8008e22:	b2db      	uxtb	r3, r3
 8008e24:	4618      	mov	r0, r3
 8008e26:	f7ff fe4b 	bl	8008ac0 <LCD_2IN_WriteData_Byte>

	LCD_2IN_Write_Command(0x2C);
 8008e2a:	202c      	movs	r0, #44	@ 0x2c
 8008e2c:	f7ff fe2c 	bl	8008a88 <LCD_2IN_Write_Command>
}
 8008e30:	bf00      	nop
 8008e32:	3708      	adds	r7, #8
 8008e34:	46bd      	mov	sp, r7
 8008e36:	bd80      	pop	{r7, pc}

08008e38 <LCD_2IN_Clear>:
function:	Clear screen function, refresh the screen to a certain color
parameter	:
	  Color :		The color you want to clear all the screen
******************************************************************************/
void LCD_2IN_Clear(UWORD Color)
{
 8008e38:	b580      	push	{r7, lr}
 8008e3a:	b084      	sub	sp, #16
 8008e3c:	af00      	add	r7, sp, #0
 8008e3e:	4603      	mov	r3, r0
 8008e40:	80fb      	strh	r3, [r7, #6]
    UWORD i,j;
    LCD_2IN_SetWindow(0, 0, LCD_2IN_WIDTH, LCD_2IN_HEIGHT);
 8008e42:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8008e46:	22f0      	movs	r2, #240	@ 0xf0
 8008e48:	2100      	movs	r1, #0
 8008e4a:	2000      	movs	r0, #0
 8008e4c:	f7ff ff5f 	bl	8008d0e <LCD_2IN_SetWindow>

	DEV_Digital_Write(DEV_DC_PIN, 1);
 8008e50:	2201      	movs	r2, #1
 8008e52:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8008e56:	480f      	ldr	r0, [pc, #60]	@ (8008e94 <LCD_2IN_Clear+0x5c>)
 8008e58:	f7fb f8e2 	bl	8004020 <HAL_GPIO_WritePin>
	for(i = 0; i < LCD_2IN_WIDTH; i++){
 8008e5c:	2300      	movs	r3, #0
 8008e5e:	81fb      	strh	r3, [r7, #14]
 8008e60:	e010      	b.n	8008e84 <LCD_2IN_Clear+0x4c>
		for(j = 0; j < LCD_2IN_HEIGHT; j++){
 8008e62:	2300      	movs	r3, #0
 8008e64:	81bb      	strh	r3, [r7, #12]
 8008e66:	e006      	b.n	8008e76 <LCD_2IN_Clear+0x3e>
			LCD_2IN_WriteData_Word(Color);
 8008e68:	88fb      	ldrh	r3, [r7, #6]
 8008e6a:	4618      	mov	r0, r3
 8008e6c:	f7ff fe4a 	bl	8008b04 <LCD_2IN_WriteData_Word>
		for(j = 0; j < LCD_2IN_HEIGHT; j++){
 8008e70:	89bb      	ldrh	r3, [r7, #12]
 8008e72:	3301      	adds	r3, #1
 8008e74:	81bb      	strh	r3, [r7, #12]
 8008e76:	89bb      	ldrh	r3, [r7, #12]
 8008e78:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8008e7c:	d3f4      	bcc.n	8008e68 <LCD_2IN_Clear+0x30>
	for(i = 0; i < LCD_2IN_WIDTH; i++){
 8008e7e:	89fb      	ldrh	r3, [r7, #14]
 8008e80:	3301      	adds	r3, #1
 8008e82:	81fb      	strh	r3, [r7, #14]
 8008e84:	89fb      	ldrh	r3, [r7, #14]
 8008e86:	2bef      	cmp	r3, #239	@ 0xef
 8008e88:	d9eb      	bls.n	8008e62 <LCD_2IN_Clear+0x2a>
		}
	 }
}
 8008e8a:	bf00      	nop
 8008e8c:	bf00      	nop
 8008e8e:	3710      	adds	r7, #16
 8008e90:	46bd      	mov	sp, r7
 8008e92:	bd80      	pop	{r7, pc}
 8008e94:	40020400 	.word	0x40020400

08008e98 <LCD_2IN_DrawPaint>:
	    X	: 	Set the X coordinate
	    Y	:	Set the Y coordinate
	  Color :	Set the color
******************************************************************************/
void LCD_2IN_DrawPaint(UWORD x, UWORD y, UWORD Color)
{
 8008e98:	b580      	push	{r7, lr}
 8008e9a:	b082      	sub	sp, #8
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	4603      	mov	r3, r0
 8008ea0:	80fb      	strh	r3, [r7, #6]
 8008ea2:	460b      	mov	r3, r1
 8008ea4:	80bb      	strh	r3, [r7, #4]
 8008ea6:	4613      	mov	r3, r2
 8008ea8:	807b      	strh	r3, [r7, #2]
	LCD_2IN_SetCursor(x, y);
 8008eaa:	88ba      	ldrh	r2, [r7, #4]
 8008eac:	88fb      	ldrh	r3, [r7, #6]
 8008eae:	4611      	mov	r1, r2
 8008eb0:	4618      	mov	r0, r3
 8008eb2:	f7ff ff7c 	bl	8008dae <LCD_2IN_SetCursor>
	LCD_2IN_WriteData_Word(Color); 	    
 8008eb6:	887b      	ldrh	r3, [r7, #2]
 8008eb8:	4618      	mov	r0, r3
 8008eba:	f7ff fe23 	bl	8008b04 <LCD_2IN_WriteData_Word>
}
 8008ebe:	bf00      	nop
 8008ec0:	3708      	adds	r7, #8
 8008ec2:	46bd      	mov	sp, r7
 8008ec4:	bd80      	pop	{r7, pc}
	...

08008ec8 <LCD_2IN_SetBackLight>:
	Setting backlight
parameter	:
	  value : Range 0~1000   Duty cycle is value/1000	
*******************************************************************************/
void LCD_2IN_SetBackLight(UWORD Value)
{
 8008ec8:	b480      	push	{r7}
 8008eca:	b083      	sub	sp, #12
 8008ecc:	af00      	add	r7, sp, #0
 8008ece:	4603      	mov	r3, r0
 8008ed0:	80fb      	strh	r3, [r7, #6]
	DEV_Set_PWM(Value);
 8008ed2:	4a04      	ldr	r2, [pc, #16]	@ (8008ee4 <LCD_2IN_SetBackLight+0x1c>)
 8008ed4:	88fb      	ldrh	r3, [r7, #6]
 8008ed6:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8008ed8:	bf00      	nop
 8008eda:	370c      	adds	r7, #12
 8008edc:	46bd      	mov	sp, r7
 8008ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee2:	4770      	bx	lr
 8008ee4:	40000800 	.word	0x40000800

08008ee8 <malloc>:
 8008ee8:	4b02      	ldr	r3, [pc, #8]	@ (8008ef4 <malloc+0xc>)
 8008eea:	4601      	mov	r1, r0
 8008eec:	6818      	ldr	r0, [r3, #0]
 8008eee:	f000 b825 	b.w	8008f3c <_malloc_r>
 8008ef2:	bf00      	nop
 8008ef4:	2000005c 	.word	0x2000005c

08008ef8 <sbrk_aligned>:
 8008ef8:	b570      	push	{r4, r5, r6, lr}
 8008efa:	4e0f      	ldr	r6, [pc, #60]	@ (8008f38 <sbrk_aligned+0x40>)
 8008efc:	460c      	mov	r4, r1
 8008efe:	6831      	ldr	r1, [r6, #0]
 8008f00:	4605      	mov	r5, r0
 8008f02:	b911      	cbnz	r1, 8008f0a <sbrk_aligned+0x12>
 8008f04:	f000 faec 	bl	80094e0 <_sbrk_r>
 8008f08:	6030      	str	r0, [r6, #0]
 8008f0a:	4621      	mov	r1, r4
 8008f0c:	4628      	mov	r0, r5
 8008f0e:	f000 fae7 	bl	80094e0 <_sbrk_r>
 8008f12:	1c43      	adds	r3, r0, #1
 8008f14:	d103      	bne.n	8008f1e <sbrk_aligned+0x26>
 8008f16:	f04f 34ff 	mov.w	r4, #4294967295
 8008f1a:	4620      	mov	r0, r4
 8008f1c:	bd70      	pop	{r4, r5, r6, pc}
 8008f1e:	1cc4      	adds	r4, r0, #3
 8008f20:	f024 0403 	bic.w	r4, r4, #3
 8008f24:	42a0      	cmp	r0, r4
 8008f26:	d0f8      	beq.n	8008f1a <sbrk_aligned+0x22>
 8008f28:	1a21      	subs	r1, r4, r0
 8008f2a:	4628      	mov	r0, r5
 8008f2c:	f000 fad8 	bl	80094e0 <_sbrk_r>
 8008f30:	3001      	adds	r0, #1
 8008f32:	d1f2      	bne.n	8008f1a <sbrk_aligned+0x22>
 8008f34:	e7ef      	b.n	8008f16 <sbrk_aligned+0x1e>
 8008f36:	bf00      	nop
 8008f38:	20000460 	.word	0x20000460

08008f3c <_malloc_r>:
 8008f3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008f40:	1ccd      	adds	r5, r1, #3
 8008f42:	f025 0503 	bic.w	r5, r5, #3
 8008f46:	3508      	adds	r5, #8
 8008f48:	2d0c      	cmp	r5, #12
 8008f4a:	bf38      	it	cc
 8008f4c:	250c      	movcc	r5, #12
 8008f4e:	2d00      	cmp	r5, #0
 8008f50:	4606      	mov	r6, r0
 8008f52:	db01      	blt.n	8008f58 <_malloc_r+0x1c>
 8008f54:	42a9      	cmp	r1, r5
 8008f56:	d904      	bls.n	8008f62 <_malloc_r+0x26>
 8008f58:	230c      	movs	r3, #12
 8008f5a:	6033      	str	r3, [r6, #0]
 8008f5c:	2000      	movs	r0, #0
 8008f5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008f62:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009038 <_malloc_r+0xfc>
 8008f66:	f000 f869 	bl	800903c <__malloc_lock>
 8008f6a:	f8d8 3000 	ldr.w	r3, [r8]
 8008f6e:	461c      	mov	r4, r3
 8008f70:	bb44      	cbnz	r4, 8008fc4 <_malloc_r+0x88>
 8008f72:	4629      	mov	r1, r5
 8008f74:	4630      	mov	r0, r6
 8008f76:	f7ff ffbf 	bl	8008ef8 <sbrk_aligned>
 8008f7a:	1c43      	adds	r3, r0, #1
 8008f7c:	4604      	mov	r4, r0
 8008f7e:	d158      	bne.n	8009032 <_malloc_r+0xf6>
 8008f80:	f8d8 4000 	ldr.w	r4, [r8]
 8008f84:	4627      	mov	r7, r4
 8008f86:	2f00      	cmp	r7, #0
 8008f88:	d143      	bne.n	8009012 <_malloc_r+0xd6>
 8008f8a:	2c00      	cmp	r4, #0
 8008f8c:	d04b      	beq.n	8009026 <_malloc_r+0xea>
 8008f8e:	6823      	ldr	r3, [r4, #0]
 8008f90:	4639      	mov	r1, r7
 8008f92:	4630      	mov	r0, r6
 8008f94:	eb04 0903 	add.w	r9, r4, r3
 8008f98:	f000 faa2 	bl	80094e0 <_sbrk_r>
 8008f9c:	4581      	cmp	r9, r0
 8008f9e:	d142      	bne.n	8009026 <_malloc_r+0xea>
 8008fa0:	6821      	ldr	r1, [r4, #0]
 8008fa2:	1a6d      	subs	r5, r5, r1
 8008fa4:	4629      	mov	r1, r5
 8008fa6:	4630      	mov	r0, r6
 8008fa8:	f7ff ffa6 	bl	8008ef8 <sbrk_aligned>
 8008fac:	3001      	adds	r0, #1
 8008fae:	d03a      	beq.n	8009026 <_malloc_r+0xea>
 8008fb0:	6823      	ldr	r3, [r4, #0]
 8008fb2:	442b      	add	r3, r5
 8008fb4:	6023      	str	r3, [r4, #0]
 8008fb6:	f8d8 3000 	ldr.w	r3, [r8]
 8008fba:	685a      	ldr	r2, [r3, #4]
 8008fbc:	bb62      	cbnz	r2, 8009018 <_malloc_r+0xdc>
 8008fbe:	f8c8 7000 	str.w	r7, [r8]
 8008fc2:	e00f      	b.n	8008fe4 <_malloc_r+0xa8>
 8008fc4:	6822      	ldr	r2, [r4, #0]
 8008fc6:	1b52      	subs	r2, r2, r5
 8008fc8:	d420      	bmi.n	800900c <_malloc_r+0xd0>
 8008fca:	2a0b      	cmp	r2, #11
 8008fcc:	d917      	bls.n	8008ffe <_malloc_r+0xc2>
 8008fce:	1961      	adds	r1, r4, r5
 8008fd0:	42a3      	cmp	r3, r4
 8008fd2:	6025      	str	r5, [r4, #0]
 8008fd4:	bf18      	it	ne
 8008fd6:	6059      	strne	r1, [r3, #4]
 8008fd8:	6863      	ldr	r3, [r4, #4]
 8008fda:	bf08      	it	eq
 8008fdc:	f8c8 1000 	streq.w	r1, [r8]
 8008fe0:	5162      	str	r2, [r4, r5]
 8008fe2:	604b      	str	r3, [r1, #4]
 8008fe4:	4630      	mov	r0, r6
 8008fe6:	f000 f82f 	bl	8009048 <__malloc_unlock>
 8008fea:	f104 000b 	add.w	r0, r4, #11
 8008fee:	1d23      	adds	r3, r4, #4
 8008ff0:	f020 0007 	bic.w	r0, r0, #7
 8008ff4:	1ac2      	subs	r2, r0, r3
 8008ff6:	bf1c      	itt	ne
 8008ff8:	1a1b      	subne	r3, r3, r0
 8008ffa:	50a3      	strne	r3, [r4, r2]
 8008ffc:	e7af      	b.n	8008f5e <_malloc_r+0x22>
 8008ffe:	6862      	ldr	r2, [r4, #4]
 8009000:	42a3      	cmp	r3, r4
 8009002:	bf0c      	ite	eq
 8009004:	f8c8 2000 	streq.w	r2, [r8]
 8009008:	605a      	strne	r2, [r3, #4]
 800900a:	e7eb      	b.n	8008fe4 <_malloc_r+0xa8>
 800900c:	4623      	mov	r3, r4
 800900e:	6864      	ldr	r4, [r4, #4]
 8009010:	e7ae      	b.n	8008f70 <_malloc_r+0x34>
 8009012:	463c      	mov	r4, r7
 8009014:	687f      	ldr	r7, [r7, #4]
 8009016:	e7b6      	b.n	8008f86 <_malloc_r+0x4a>
 8009018:	461a      	mov	r2, r3
 800901a:	685b      	ldr	r3, [r3, #4]
 800901c:	42a3      	cmp	r3, r4
 800901e:	d1fb      	bne.n	8009018 <_malloc_r+0xdc>
 8009020:	2300      	movs	r3, #0
 8009022:	6053      	str	r3, [r2, #4]
 8009024:	e7de      	b.n	8008fe4 <_malloc_r+0xa8>
 8009026:	230c      	movs	r3, #12
 8009028:	6033      	str	r3, [r6, #0]
 800902a:	4630      	mov	r0, r6
 800902c:	f000 f80c 	bl	8009048 <__malloc_unlock>
 8009030:	e794      	b.n	8008f5c <_malloc_r+0x20>
 8009032:	6005      	str	r5, [r0, #0]
 8009034:	e7d6      	b.n	8008fe4 <_malloc_r+0xa8>
 8009036:	bf00      	nop
 8009038:	20000464 	.word	0x20000464

0800903c <__malloc_lock>:
 800903c:	4801      	ldr	r0, [pc, #4]	@ (8009044 <__malloc_lock+0x8>)
 800903e:	f000 ba9c 	b.w	800957a <__retarget_lock_acquire_recursive>
 8009042:	bf00      	nop
 8009044:	200005a8 	.word	0x200005a8

08009048 <__malloc_unlock>:
 8009048:	4801      	ldr	r0, [pc, #4]	@ (8009050 <__malloc_unlock+0x8>)
 800904a:	f000 ba97 	b.w	800957c <__retarget_lock_release_recursive>
 800904e:	bf00      	nop
 8009050:	200005a8 	.word	0x200005a8

08009054 <std>:
 8009054:	2300      	movs	r3, #0
 8009056:	b510      	push	{r4, lr}
 8009058:	4604      	mov	r4, r0
 800905a:	e9c0 3300 	strd	r3, r3, [r0]
 800905e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009062:	6083      	str	r3, [r0, #8]
 8009064:	8181      	strh	r1, [r0, #12]
 8009066:	6643      	str	r3, [r0, #100]	@ 0x64
 8009068:	81c2      	strh	r2, [r0, #14]
 800906a:	6183      	str	r3, [r0, #24]
 800906c:	4619      	mov	r1, r3
 800906e:	2208      	movs	r2, #8
 8009070:	305c      	adds	r0, #92	@ 0x5c
 8009072:	f000 f9f9 	bl	8009468 <memset>
 8009076:	4b0d      	ldr	r3, [pc, #52]	@ (80090ac <std+0x58>)
 8009078:	6263      	str	r3, [r4, #36]	@ 0x24
 800907a:	4b0d      	ldr	r3, [pc, #52]	@ (80090b0 <std+0x5c>)
 800907c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800907e:	4b0d      	ldr	r3, [pc, #52]	@ (80090b4 <std+0x60>)
 8009080:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009082:	4b0d      	ldr	r3, [pc, #52]	@ (80090b8 <std+0x64>)
 8009084:	6323      	str	r3, [r4, #48]	@ 0x30
 8009086:	4b0d      	ldr	r3, [pc, #52]	@ (80090bc <std+0x68>)
 8009088:	6224      	str	r4, [r4, #32]
 800908a:	429c      	cmp	r4, r3
 800908c:	d006      	beq.n	800909c <std+0x48>
 800908e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8009092:	4294      	cmp	r4, r2
 8009094:	d002      	beq.n	800909c <std+0x48>
 8009096:	33d0      	adds	r3, #208	@ 0xd0
 8009098:	429c      	cmp	r4, r3
 800909a:	d105      	bne.n	80090a8 <std+0x54>
 800909c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80090a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80090a4:	f000 ba68 	b.w	8009578 <__retarget_lock_init_recursive>
 80090a8:	bd10      	pop	{r4, pc}
 80090aa:	bf00      	nop
 80090ac:	080092b9 	.word	0x080092b9
 80090b0:	080092db 	.word	0x080092db
 80090b4:	08009313 	.word	0x08009313
 80090b8:	08009337 	.word	0x08009337
 80090bc:	20000468 	.word	0x20000468

080090c0 <stdio_exit_handler>:
 80090c0:	4a02      	ldr	r2, [pc, #8]	@ (80090cc <stdio_exit_handler+0xc>)
 80090c2:	4903      	ldr	r1, [pc, #12]	@ (80090d0 <stdio_exit_handler+0x10>)
 80090c4:	4803      	ldr	r0, [pc, #12]	@ (80090d4 <stdio_exit_handler+0x14>)
 80090c6:	f000 b869 	b.w	800919c <_fwalk_sglue>
 80090ca:	bf00      	nop
 80090cc:	20000050 	.word	0x20000050
 80090d0:	08009ccd 	.word	0x08009ccd
 80090d4:	20000060 	.word	0x20000060

080090d8 <cleanup_stdio>:
 80090d8:	6841      	ldr	r1, [r0, #4]
 80090da:	4b0c      	ldr	r3, [pc, #48]	@ (800910c <cleanup_stdio+0x34>)
 80090dc:	4299      	cmp	r1, r3
 80090de:	b510      	push	{r4, lr}
 80090e0:	4604      	mov	r4, r0
 80090e2:	d001      	beq.n	80090e8 <cleanup_stdio+0x10>
 80090e4:	f000 fdf2 	bl	8009ccc <_fflush_r>
 80090e8:	68a1      	ldr	r1, [r4, #8]
 80090ea:	4b09      	ldr	r3, [pc, #36]	@ (8009110 <cleanup_stdio+0x38>)
 80090ec:	4299      	cmp	r1, r3
 80090ee:	d002      	beq.n	80090f6 <cleanup_stdio+0x1e>
 80090f0:	4620      	mov	r0, r4
 80090f2:	f000 fdeb 	bl	8009ccc <_fflush_r>
 80090f6:	68e1      	ldr	r1, [r4, #12]
 80090f8:	4b06      	ldr	r3, [pc, #24]	@ (8009114 <cleanup_stdio+0x3c>)
 80090fa:	4299      	cmp	r1, r3
 80090fc:	d004      	beq.n	8009108 <cleanup_stdio+0x30>
 80090fe:	4620      	mov	r0, r4
 8009100:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009104:	f000 bde2 	b.w	8009ccc <_fflush_r>
 8009108:	bd10      	pop	{r4, pc}
 800910a:	bf00      	nop
 800910c:	20000468 	.word	0x20000468
 8009110:	200004d0 	.word	0x200004d0
 8009114:	20000538 	.word	0x20000538

08009118 <global_stdio_init.part.0>:
 8009118:	b510      	push	{r4, lr}
 800911a:	4b0b      	ldr	r3, [pc, #44]	@ (8009148 <global_stdio_init.part.0+0x30>)
 800911c:	4c0b      	ldr	r4, [pc, #44]	@ (800914c <global_stdio_init.part.0+0x34>)
 800911e:	4a0c      	ldr	r2, [pc, #48]	@ (8009150 <global_stdio_init.part.0+0x38>)
 8009120:	601a      	str	r2, [r3, #0]
 8009122:	4620      	mov	r0, r4
 8009124:	2200      	movs	r2, #0
 8009126:	2104      	movs	r1, #4
 8009128:	f7ff ff94 	bl	8009054 <std>
 800912c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009130:	2201      	movs	r2, #1
 8009132:	2109      	movs	r1, #9
 8009134:	f7ff ff8e 	bl	8009054 <std>
 8009138:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800913c:	2202      	movs	r2, #2
 800913e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009142:	2112      	movs	r1, #18
 8009144:	f7ff bf86 	b.w	8009054 <std>
 8009148:	200005a0 	.word	0x200005a0
 800914c:	20000468 	.word	0x20000468
 8009150:	080090c1 	.word	0x080090c1

08009154 <__sfp_lock_acquire>:
 8009154:	4801      	ldr	r0, [pc, #4]	@ (800915c <__sfp_lock_acquire+0x8>)
 8009156:	f000 ba10 	b.w	800957a <__retarget_lock_acquire_recursive>
 800915a:	bf00      	nop
 800915c:	200005a9 	.word	0x200005a9

08009160 <__sfp_lock_release>:
 8009160:	4801      	ldr	r0, [pc, #4]	@ (8009168 <__sfp_lock_release+0x8>)
 8009162:	f000 ba0b 	b.w	800957c <__retarget_lock_release_recursive>
 8009166:	bf00      	nop
 8009168:	200005a9 	.word	0x200005a9

0800916c <__sinit>:
 800916c:	b510      	push	{r4, lr}
 800916e:	4604      	mov	r4, r0
 8009170:	f7ff fff0 	bl	8009154 <__sfp_lock_acquire>
 8009174:	6a23      	ldr	r3, [r4, #32]
 8009176:	b11b      	cbz	r3, 8009180 <__sinit+0x14>
 8009178:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800917c:	f7ff bff0 	b.w	8009160 <__sfp_lock_release>
 8009180:	4b04      	ldr	r3, [pc, #16]	@ (8009194 <__sinit+0x28>)
 8009182:	6223      	str	r3, [r4, #32]
 8009184:	4b04      	ldr	r3, [pc, #16]	@ (8009198 <__sinit+0x2c>)
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	2b00      	cmp	r3, #0
 800918a:	d1f5      	bne.n	8009178 <__sinit+0xc>
 800918c:	f7ff ffc4 	bl	8009118 <global_stdio_init.part.0>
 8009190:	e7f2      	b.n	8009178 <__sinit+0xc>
 8009192:	bf00      	nop
 8009194:	080090d9 	.word	0x080090d9
 8009198:	200005a0 	.word	0x200005a0

0800919c <_fwalk_sglue>:
 800919c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80091a0:	4607      	mov	r7, r0
 80091a2:	4688      	mov	r8, r1
 80091a4:	4614      	mov	r4, r2
 80091a6:	2600      	movs	r6, #0
 80091a8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80091ac:	f1b9 0901 	subs.w	r9, r9, #1
 80091b0:	d505      	bpl.n	80091be <_fwalk_sglue+0x22>
 80091b2:	6824      	ldr	r4, [r4, #0]
 80091b4:	2c00      	cmp	r4, #0
 80091b6:	d1f7      	bne.n	80091a8 <_fwalk_sglue+0xc>
 80091b8:	4630      	mov	r0, r6
 80091ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80091be:	89ab      	ldrh	r3, [r5, #12]
 80091c0:	2b01      	cmp	r3, #1
 80091c2:	d907      	bls.n	80091d4 <_fwalk_sglue+0x38>
 80091c4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80091c8:	3301      	adds	r3, #1
 80091ca:	d003      	beq.n	80091d4 <_fwalk_sglue+0x38>
 80091cc:	4629      	mov	r1, r5
 80091ce:	4638      	mov	r0, r7
 80091d0:	47c0      	blx	r8
 80091d2:	4306      	orrs	r6, r0
 80091d4:	3568      	adds	r5, #104	@ 0x68
 80091d6:	e7e9      	b.n	80091ac <_fwalk_sglue+0x10>

080091d8 <iprintf>:
 80091d8:	b40f      	push	{r0, r1, r2, r3}
 80091da:	b507      	push	{r0, r1, r2, lr}
 80091dc:	4906      	ldr	r1, [pc, #24]	@ (80091f8 <iprintf+0x20>)
 80091de:	ab04      	add	r3, sp, #16
 80091e0:	6808      	ldr	r0, [r1, #0]
 80091e2:	f853 2b04 	ldr.w	r2, [r3], #4
 80091e6:	6881      	ldr	r1, [r0, #8]
 80091e8:	9301      	str	r3, [sp, #4]
 80091ea:	f000 fa45 	bl	8009678 <_vfiprintf_r>
 80091ee:	b003      	add	sp, #12
 80091f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80091f4:	b004      	add	sp, #16
 80091f6:	4770      	bx	lr
 80091f8:	2000005c 	.word	0x2000005c

080091fc <_puts_r>:
 80091fc:	6a03      	ldr	r3, [r0, #32]
 80091fe:	b570      	push	{r4, r5, r6, lr}
 8009200:	6884      	ldr	r4, [r0, #8]
 8009202:	4605      	mov	r5, r0
 8009204:	460e      	mov	r6, r1
 8009206:	b90b      	cbnz	r3, 800920c <_puts_r+0x10>
 8009208:	f7ff ffb0 	bl	800916c <__sinit>
 800920c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800920e:	07db      	lsls	r3, r3, #31
 8009210:	d405      	bmi.n	800921e <_puts_r+0x22>
 8009212:	89a3      	ldrh	r3, [r4, #12]
 8009214:	0598      	lsls	r0, r3, #22
 8009216:	d402      	bmi.n	800921e <_puts_r+0x22>
 8009218:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800921a:	f000 f9ae 	bl	800957a <__retarget_lock_acquire_recursive>
 800921e:	89a3      	ldrh	r3, [r4, #12]
 8009220:	0719      	lsls	r1, r3, #28
 8009222:	d502      	bpl.n	800922a <_puts_r+0x2e>
 8009224:	6923      	ldr	r3, [r4, #16]
 8009226:	2b00      	cmp	r3, #0
 8009228:	d135      	bne.n	8009296 <_puts_r+0x9a>
 800922a:	4621      	mov	r1, r4
 800922c:	4628      	mov	r0, r5
 800922e:	f000 f8c5 	bl	80093bc <__swsetup_r>
 8009232:	b380      	cbz	r0, 8009296 <_puts_r+0x9a>
 8009234:	f04f 35ff 	mov.w	r5, #4294967295
 8009238:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800923a:	07da      	lsls	r2, r3, #31
 800923c:	d405      	bmi.n	800924a <_puts_r+0x4e>
 800923e:	89a3      	ldrh	r3, [r4, #12]
 8009240:	059b      	lsls	r3, r3, #22
 8009242:	d402      	bmi.n	800924a <_puts_r+0x4e>
 8009244:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009246:	f000 f999 	bl	800957c <__retarget_lock_release_recursive>
 800924a:	4628      	mov	r0, r5
 800924c:	bd70      	pop	{r4, r5, r6, pc}
 800924e:	2b00      	cmp	r3, #0
 8009250:	da04      	bge.n	800925c <_puts_r+0x60>
 8009252:	69a2      	ldr	r2, [r4, #24]
 8009254:	429a      	cmp	r2, r3
 8009256:	dc17      	bgt.n	8009288 <_puts_r+0x8c>
 8009258:	290a      	cmp	r1, #10
 800925a:	d015      	beq.n	8009288 <_puts_r+0x8c>
 800925c:	6823      	ldr	r3, [r4, #0]
 800925e:	1c5a      	adds	r2, r3, #1
 8009260:	6022      	str	r2, [r4, #0]
 8009262:	7019      	strb	r1, [r3, #0]
 8009264:	68a3      	ldr	r3, [r4, #8]
 8009266:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800926a:	3b01      	subs	r3, #1
 800926c:	60a3      	str	r3, [r4, #8]
 800926e:	2900      	cmp	r1, #0
 8009270:	d1ed      	bne.n	800924e <_puts_r+0x52>
 8009272:	2b00      	cmp	r3, #0
 8009274:	da11      	bge.n	800929a <_puts_r+0x9e>
 8009276:	4622      	mov	r2, r4
 8009278:	210a      	movs	r1, #10
 800927a:	4628      	mov	r0, r5
 800927c:	f000 f85f 	bl	800933e <__swbuf_r>
 8009280:	3001      	adds	r0, #1
 8009282:	d0d7      	beq.n	8009234 <_puts_r+0x38>
 8009284:	250a      	movs	r5, #10
 8009286:	e7d7      	b.n	8009238 <_puts_r+0x3c>
 8009288:	4622      	mov	r2, r4
 800928a:	4628      	mov	r0, r5
 800928c:	f000 f857 	bl	800933e <__swbuf_r>
 8009290:	3001      	adds	r0, #1
 8009292:	d1e7      	bne.n	8009264 <_puts_r+0x68>
 8009294:	e7ce      	b.n	8009234 <_puts_r+0x38>
 8009296:	3e01      	subs	r6, #1
 8009298:	e7e4      	b.n	8009264 <_puts_r+0x68>
 800929a:	6823      	ldr	r3, [r4, #0]
 800929c:	1c5a      	adds	r2, r3, #1
 800929e:	6022      	str	r2, [r4, #0]
 80092a0:	220a      	movs	r2, #10
 80092a2:	701a      	strb	r2, [r3, #0]
 80092a4:	e7ee      	b.n	8009284 <_puts_r+0x88>
	...

080092a8 <puts>:
 80092a8:	4b02      	ldr	r3, [pc, #8]	@ (80092b4 <puts+0xc>)
 80092aa:	4601      	mov	r1, r0
 80092ac:	6818      	ldr	r0, [r3, #0]
 80092ae:	f7ff bfa5 	b.w	80091fc <_puts_r>
 80092b2:	bf00      	nop
 80092b4:	2000005c 	.word	0x2000005c

080092b8 <__sread>:
 80092b8:	b510      	push	{r4, lr}
 80092ba:	460c      	mov	r4, r1
 80092bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80092c0:	f000 f8fc 	bl	80094bc <_read_r>
 80092c4:	2800      	cmp	r0, #0
 80092c6:	bfab      	itete	ge
 80092c8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80092ca:	89a3      	ldrhlt	r3, [r4, #12]
 80092cc:	181b      	addge	r3, r3, r0
 80092ce:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80092d2:	bfac      	ite	ge
 80092d4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80092d6:	81a3      	strhlt	r3, [r4, #12]
 80092d8:	bd10      	pop	{r4, pc}

080092da <__swrite>:
 80092da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80092de:	461f      	mov	r7, r3
 80092e0:	898b      	ldrh	r3, [r1, #12]
 80092e2:	05db      	lsls	r3, r3, #23
 80092e4:	4605      	mov	r5, r0
 80092e6:	460c      	mov	r4, r1
 80092e8:	4616      	mov	r6, r2
 80092ea:	d505      	bpl.n	80092f8 <__swrite+0x1e>
 80092ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80092f0:	2302      	movs	r3, #2
 80092f2:	2200      	movs	r2, #0
 80092f4:	f000 f8d0 	bl	8009498 <_lseek_r>
 80092f8:	89a3      	ldrh	r3, [r4, #12]
 80092fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80092fe:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009302:	81a3      	strh	r3, [r4, #12]
 8009304:	4632      	mov	r2, r6
 8009306:	463b      	mov	r3, r7
 8009308:	4628      	mov	r0, r5
 800930a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800930e:	f000 b8f7 	b.w	8009500 <_write_r>

08009312 <__sseek>:
 8009312:	b510      	push	{r4, lr}
 8009314:	460c      	mov	r4, r1
 8009316:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800931a:	f000 f8bd 	bl	8009498 <_lseek_r>
 800931e:	1c43      	adds	r3, r0, #1
 8009320:	89a3      	ldrh	r3, [r4, #12]
 8009322:	bf15      	itete	ne
 8009324:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009326:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800932a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800932e:	81a3      	strheq	r3, [r4, #12]
 8009330:	bf18      	it	ne
 8009332:	81a3      	strhne	r3, [r4, #12]
 8009334:	bd10      	pop	{r4, pc}

08009336 <__sclose>:
 8009336:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800933a:	f000 b89d 	b.w	8009478 <_close_r>

0800933e <__swbuf_r>:
 800933e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009340:	460e      	mov	r6, r1
 8009342:	4614      	mov	r4, r2
 8009344:	4605      	mov	r5, r0
 8009346:	b118      	cbz	r0, 8009350 <__swbuf_r+0x12>
 8009348:	6a03      	ldr	r3, [r0, #32]
 800934a:	b90b      	cbnz	r3, 8009350 <__swbuf_r+0x12>
 800934c:	f7ff ff0e 	bl	800916c <__sinit>
 8009350:	69a3      	ldr	r3, [r4, #24]
 8009352:	60a3      	str	r3, [r4, #8]
 8009354:	89a3      	ldrh	r3, [r4, #12]
 8009356:	071a      	lsls	r2, r3, #28
 8009358:	d501      	bpl.n	800935e <__swbuf_r+0x20>
 800935a:	6923      	ldr	r3, [r4, #16]
 800935c:	b943      	cbnz	r3, 8009370 <__swbuf_r+0x32>
 800935e:	4621      	mov	r1, r4
 8009360:	4628      	mov	r0, r5
 8009362:	f000 f82b 	bl	80093bc <__swsetup_r>
 8009366:	b118      	cbz	r0, 8009370 <__swbuf_r+0x32>
 8009368:	f04f 37ff 	mov.w	r7, #4294967295
 800936c:	4638      	mov	r0, r7
 800936e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009370:	6823      	ldr	r3, [r4, #0]
 8009372:	6922      	ldr	r2, [r4, #16]
 8009374:	1a98      	subs	r0, r3, r2
 8009376:	6963      	ldr	r3, [r4, #20]
 8009378:	b2f6      	uxtb	r6, r6
 800937a:	4283      	cmp	r3, r0
 800937c:	4637      	mov	r7, r6
 800937e:	dc05      	bgt.n	800938c <__swbuf_r+0x4e>
 8009380:	4621      	mov	r1, r4
 8009382:	4628      	mov	r0, r5
 8009384:	f000 fca2 	bl	8009ccc <_fflush_r>
 8009388:	2800      	cmp	r0, #0
 800938a:	d1ed      	bne.n	8009368 <__swbuf_r+0x2a>
 800938c:	68a3      	ldr	r3, [r4, #8]
 800938e:	3b01      	subs	r3, #1
 8009390:	60a3      	str	r3, [r4, #8]
 8009392:	6823      	ldr	r3, [r4, #0]
 8009394:	1c5a      	adds	r2, r3, #1
 8009396:	6022      	str	r2, [r4, #0]
 8009398:	701e      	strb	r6, [r3, #0]
 800939a:	6962      	ldr	r2, [r4, #20]
 800939c:	1c43      	adds	r3, r0, #1
 800939e:	429a      	cmp	r2, r3
 80093a0:	d004      	beq.n	80093ac <__swbuf_r+0x6e>
 80093a2:	89a3      	ldrh	r3, [r4, #12]
 80093a4:	07db      	lsls	r3, r3, #31
 80093a6:	d5e1      	bpl.n	800936c <__swbuf_r+0x2e>
 80093a8:	2e0a      	cmp	r6, #10
 80093aa:	d1df      	bne.n	800936c <__swbuf_r+0x2e>
 80093ac:	4621      	mov	r1, r4
 80093ae:	4628      	mov	r0, r5
 80093b0:	f000 fc8c 	bl	8009ccc <_fflush_r>
 80093b4:	2800      	cmp	r0, #0
 80093b6:	d0d9      	beq.n	800936c <__swbuf_r+0x2e>
 80093b8:	e7d6      	b.n	8009368 <__swbuf_r+0x2a>
	...

080093bc <__swsetup_r>:
 80093bc:	b538      	push	{r3, r4, r5, lr}
 80093be:	4b29      	ldr	r3, [pc, #164]	@ (8009464 <__swsetup_r+0xa8>)
 80093c0:	4605      	mov	r5, r0
 80093c2:	6818      	ldr	r0, [r3, #0]
 80093c4:	460c      	mov	r4, r1
 80093c6:	b118      	cbz	r0, 80093d0 <__swsetup_r+0x14>
 80093c8:	6a03      	ldr	r3, [r0, #32]
 80093ca:	b90b      	cbnz	r3, 80093d0 <__swsetup_r+0x14>
 80093cc:	f7ff fece 	bl	800916c <__sinit>
 80093d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80093d4:	0719      	lsls	r1, r3, #28
 80093d6:	d422      	bmi.n	800941e <__swsetup_r+0x62>
 80093d8:	06da      	lsls	r2, r3, #27
 80093da:	d407      	bmi.n	80093ec <__swsetup_r+0x30>
 80093dc:	2209      	movs	r2, #9
 80093de:	602a      	str	r2, [r5, #0]
 80093e0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80093e4:	81a3      	strh	r3, [r4, #12]
 80093e6:	f04f 30ff 	mov.w	r0, #4294967295
 80093ea:	e033      	b.n	8009454 <__swsetup_r+0x98>
 80093ec:	0758      	lsls	r0, r3, #29
 80093ee:	d512      	bpl.n	8009416 <__swsetup_r+0x5a>
 80093f0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80093f2:	b141      	cbz	r1, 8009406 <__swsetup_r+0x4a>
 80093f4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80093f8:	4299      	cmp	r1, r3
 80093fa:	d002      	beq.n	8009402 <__swsetup_r+0x46>
 80093fc:	4628      	mov	r0, r5
 80093fe:	f000 f8c7 	bl	8009590 <_free_r>
 8009402:	2300      	movs	r3, #0
 8009404:	6363      	str	r3, [r4, #52]	@ 0x34
 8009406:	89a3      	ldrh	r3, [r4, #12]
 8009408:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800940c:	81a3      	strh	r3, [r4, #12]
 800940e:	2300      	movs	r3, #0
 8009410:	6063      	str	r3, [r4, #4]
 8009412:	6923      	ldr	r3, [r4, #16]
 8009414:	6023      	str	r3, [r4, #0]
 8009416:	89a3      	ldrh	r3, [r4, #12]
 8009418:	f043 0308 	orr.w	r3, r3, #8
 800941c:	81a3      	strh	r3, [r4, #12]
 800941e:	6923      	ldr	r3, [r4, #16]
 8009420:	b94b      	cbnz	r3, 8009436 <__swsetup_r+0x7a>
 8009422:	89a3      	ldrh	r3, [r4, #12]
 8009424:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009428:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800942c:	d003      	beq.n	8009436 <__swsetup_r+0x7a>
 800942e:	4621      	mov	r1, r4
 8009430:	4628      	mov	r0, r5
 8009432:	f000 fc99 	bl	8009d68 <__smakebuf_r>
 8009436:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800943a:	f013 0201 	ands.w	r2, r3, #1
 800943e:	d00a      	beq.n	8009456 <__swsetup_r+0x9a>
 8009440:	2200      	movs	r2, #0
 8009442:	60a2      	str	r2, [r4, #8]
 8009444:	6962      	ldr	r2, [r4, #20]
 8009446:	4252      	negs	r2, r2
 8009448:	61a2      	str	r2, [r4, #24]
 800944a:	6922      	ldr	r2, [r4, #16]
 800944c:	b942      	cbnz	r2, 8009460 <__swsetup_r+0xa4>
 800944e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009452:	d1c5      	bne.n	80093e0 <__swsetup_r+0x24>
 8009454:	bd38      	pop	{r3, r4, r5, pc}
 8009456:	0799      	lsls	r1, r3, #30
 8009458:	bf58      	it	pl
 800945a:	6962      	ldrpl	r2, [r4, #20]
 800945c:	60a2      	str	r2, [r4, #8]
 800945e:	e7f4      	b.n	800944a <__swsetup_r+0x8e>
 8009460:	2000      	movs	r0, #0
 8009462:	e7f7      	b.n	8009454 <__swsetup_r+0x98>
 8009464:	2000005c 	.word	0x2000005c

08009468 <memset>:
 8009468:	4402      	add	r2, r0
 800946a:	4603      	mov	r3, r0
 800946c:	4293      	cmp	r3, r2
 800946e:	d100      	bne.n	8009472 <memset+0xa>
 8009470:	4770      	bx	lr
 8009472:	f803 1b01 	strb.w	r1, [r3], #1
 8009476:	e7f9      	b.n	800946c <memset+0x4>

08009478 <_close_r>:
 8009478:	b538      	push	{r3, r4, r5, lr}
 800947a:	4d06      	ldr	r5, [pc, #24]	@ (8009494 <_close_r+0x1c>)
 800947c:	2300      	movs	r3, #0
 800947e:	4604      	mov	r4, r0
 8009480:	4608      	mov	r0, r1
 8009482:	602b      	str	r3, [r5, #0]
 8009484:	f7f9 f8e9 	bl	800265a <_close>
 8009488:	1c43      	adds	r3, r0, #1
 800948a:	d102      	bne.n	8009492 <_close_r+0x1a>
 800948c:	682b      	ldr	r3, [r5, #0]
 800948e:	b103      	cbz	r3, 8009492 <_close_r+0x1a>
 8009490:	6023      	str	r3, [r4, #0]
 8009492:	bd38      	pop	{r3, r4, r5, pc}
 8009494:	200005a4 	.word	0x200005a4

08009498 <_lseek_r>:
 8009498:	b538      	push	{r3, r4, r5, lr}
 800949a:	4d07      	ldr	r5, [pc, #28]	@ (80094b8 <_lseek_r+0x20>)
 800949c:	4604      	mov	r4, r0
 800949e:	4608      	mov	r0, r1
 80094a0:	4611      	mov	r1, r2
 80094a2:	2200      	movs	r2, #0
 80094a4:	602a      	str	r2, [r5, #0]
 80094a6:	461a      	mov	r2, r3
 80094a8:	f7f9 f8fe 	bl	80026a8 <_lseek>
 80094ac:	1c43      	adds	r3, r0, #1
 80094ae:	d102      	bne.n	80094b6 <_lseek_r+0x1e>
 80094b0:	682b      	ldr	r3, [r5, #0]
 80094b2:	b103      	cbz	r3, 80094b6 <_lseek_r+0x1e>
 80094b4:	6023      	str	r3, [r4, #0]
 80094b6:	bd38      	pop	{r3, r4, r5, pc}
 80094b8:	200005a4 	.word	0x200005a4

080094bc <_read_r>:
 80094bc:	b538      	push	{r3, r4, r5, lr}
 80094be:	4d07      	ldr	r5, [pc, #28]	@ (80094dc <_read_r+0x20>)
 80094c0:	4604      	mov	r4, r0
 80094c2:	4608      	mov	r0, r1
 80094c4:	4611      	mov	r1, r2
 80094c6:	2200      	movs	r2, #0
 80094c8:	602a      	str	r2, [r5, #0]
 80094ca:	461a      	mov	r2, r3
 80094cc:	f7f9 f88c 	bl	80025e8 <_read>
 80094d0:	1c43      	adds	r3, r0, #1
 80094d2:	d102      	bne.n	80094da <_read_r+0x1e>
 80094d4:	682b      	ldr	r3, [r5, #0]
 80094d6:	b103      	cbz	r3, 80094da <_read_r+0x1e>
 80094d8:	6023      	str	r3, [r4, #0]
 80094da:	bd38      	pop	{r3, r4, r5, pc}
 80094dc:	200005a4 	.word	0x200005a4

080094e0 <_sbrk_r>:
 80094e0:	b538      	push	{r3, r4, r5, lr}
 80094e2:	4d06      	ldr	r5, [pc, #24]	@ (80094fc <_sbrk_r+0x1c>)
 80094e4:	2300      	movs	r3, #0
 80094e6:	4604      	mov	r4, r0
 80094e8:	4608      	mov	r0, r1
 80094ea:	602b      	str	r3, [r5, #0]
 80094ec:	f7f9 f8ea 	bl	80026c4 <_sbrk>
 80094f0:	1c43      	adds	r3, r0, #1
 80094f2:	d102      	bne.n	80094fa <_sbrk_r+0x1a>
 80094f4:	682b      	ldr	r3, [r5, #0]
 80094f6:	b103      	cbz	r3, 80094fa <_sbrk_r+0x1a>
 80094f8:	6023      	str	r3, [r4, #0]
 80094fa:	bd38      	pop	{r3, r4, r5, pc}
 80094fc:	200005a4 	.word	0x200005a4

08009500 <_write_r>:
 8009500:	b538      	push	{r3, r4, r5, lr}
 8009502:	4d07      	ldr	r5, [pc, #28]	@ (8009520 <_write_r+0x20>)
 8009504:	4604      	mov	r4, r0
 8009506:	4608      	mov	r0, r1
 8009508:	4611      	mov	r1, r2
 800950a:	2200      	movs	r2, #0
 800950c:	602a      	str	r2, [r5, #0]
 800950e:	461a      	mov	r2, r3
 8009510:	f7f9 f887 	bl	8002622 <_write>
 8009514:	1c43      	adds	r3, r0, #1
 8009516:	d102      	bne.n	800951e <_write_r+0x1e>
 8009518:	682b      	ldr	r3, [r5, #0]
 800951a:	b103      	cbz	r3, 800951e <_write_r+0x1e>
 800951c:	6023      	str	r3, [r4, #0]
 800951e:	bd38      	pop	{r3, r4, r5, pc}
 8009520:	200005a4 	.word	0x200005a4

08009524 <__errno>:
 8009524:	4b01      	ldr	r3, [pc, #4]	@ (800952c <__errno+0x8>)
 8009526:	6818      	ldr	r0, [r3, #0]
 8009528:	4770      	bx	lr
 800952a:	bf00      	nop
 800952c:	2000005c 	.word	0x2000005c

08009530 <__libc_init_array>:
 8009530:	b570      	push	{r4, r5, r6, lr}
 8009532:	4d0d      	ldr	r5, [pc, #52]	@ (8009568 <__libc_init_array+0x38>)
 8009534:	4c0d      	ldr	r4, [pc, #52]	@ (800956c <__libc_init_array+0x3c>)
 8009536:	1b64      	subs	r4, r4, r5
 8009538:	10a4      	asrs	r4, r4, #2
 800953a:	2600      	movs	r6, #0
 800953c:	42a6      	cmp	r6, r4
 800953e:	d109      	bne.n	8009554 <__libc_init_array+0x24>
 8009540:	4d0b      	ldr	r5, [pc, #44]	@ (8009570 <__libc_init_array+0x40>)
 8009542:	4c0c      	ldr	r4, [pc, #48]	@ (8009574 <__libc_init_array+0x44>)
 8009544:	f000 fc6e 	bl	8009e24 <_init>
 8009548:	1b64      	subs	r4, r4, r5
 800954a:	10a4      	asrs	r4, r4, #2
 800954c:	2600      	movs	r6, #0
 800954e:	42a6      	cmp	r6, r4
 8009550:	d105      	bne.n	800955e <__libc_init_array+0x2e>
 8009552:	bd70      	pop	{r4, r5, r6, pc}
 8009554:	f855 3b04 	ldr.w	r3, [r5], #4
 8009558:	4798      	blx	r3
 800955a:	3601      	adds	r6, #1
 800955c:	e7ee      	b.n	800953c <__libc_init_array+0xc>
 800955e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009562:	4798      	blx	r3
 8009564:	3601      	adds	r6, #1
 8009566:	e7f2      	b.n	800954e <__libc_init_array+0x1e>
 8009568:	0800d844 	.word	0x0800d844
 800956c:	0800d844 	.word	0x0800d844
 8009570:	0800d844 	.word	0x0800d844
 8009574:	0800d848 	.word	0x0800d848

08009578 <__retarget_lock_init_recursive>:
 8009578:	4770      	bx	lr

0800957a <__retarget_lock_acquire_recursive>:
 800957a:	4770      	bx	lr

0800957c <__retarget_lock_release_recursive>:
 800957c:	4770      	bx	lr

0800957e <strcpy>:
 800957e:	4603      	mov	r3, r0
 8009580:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009584:	f803 2b01 	strb.w	r2, [r3], #1
 8009588:	2a00      	cmp	r2, #0
 800958a:	d1f9      	bne.n	8009580 <strcpy+0x2>
 800958c:	4770      	bx	lr
	...

08009590 <_free_r>:
 8009590:	b538      	push	{r3, r4, r5, lr}
 8009592:	4605      	mov	r5, r0
 8009594:	2900      	cmp	r1, #0
 8009596:	d041      	beq.n	800961c <_free_r+0x8c>
 8009598:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800959c:	1f0c      	subs	r4, r1, #4
 800959e:	2b00      	cmp	r3, #0
 80095a0:	bfb8      	it	lt
 80095a2:	18e4      	addlt	r4, r4, r3
 80095a4:	f7ff fd4a 	bl	800903c <__malloc_lock>
 80095a8:	4a1d      	ldr	r2, [pc, #116]	@ (8009620 <_free_r+0x90>)
 80095aa:	6813      	ldr	r3, [r2, #0]
 80095ac:	b933      	cbnz	r3, 80095bc <_free_r+0x2c>
 80095ae:	6063      	str	r3, [r4, #4]
 80095b0:	6014      	str	r4, [r2, #0]
 80095b2:	4628      	mov	r0, r5
 80095b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80095b8:	f7ff bd46 	b.w	8009048 <__malloc_unlock>
 80095bc:	42a3      	cmp	r3, r4
 80095be:	d908      	bls.n	80095d2 <_free_r+0x42>
 80095c0:	6820      	ldr	r0, [r4, #0]
 80095c2:	1821      	adds	r1, r4, r0
 80095c4:	428b      	cmp	r3, r1
 80095c6:	bf01      	itttt	eq
 80095c8:	6819      	ldreq	r1, [r3, #0]
 80095ca:	685b      	ldreq	r3, [r3, #4]
 80095cc:	1809      	addeq	r1, r1, r0
 80095ce:	6021      	streq	r1, [r4, #0]
 80095d0:	e7ed      	b.n	80095ae <_free_r+0x1e>
 80095d2:	461a      	mov	r2, r3
 80095d4:	685b      	ldr	r3, [r3, #4]
 80095d6:	b10b      	cbz	r3, 80095dc <_free_r+0x4c>
 80095d8:	42a3      	cmp	r3, r4
 80095da:	d9fa      	bls.n	80095d2 <_free_r+0x42>
 80095dc:	6811      	ldr	r1, [r2, #0]
 80095de:	1850      	adds	r0, r2, r1
 80095e0:	42a0      	cmp	r0, r4
 80095e2:	d10b      	bne.n	80095fc <_free_r+0x6c>
 80095e4:	6820      	ldr	r0, [r4, #0]
 80095e6:	4401      	add	r1, r0
 80095e8:	1850      	adds	r0, r2, r1
 80095ea:	4283      	cmp	r3, r0
 80095ec:	6011      	str	r1, [r2, #0]
 80095ee:	d1e0      	bne.n	80095b2 <_free_r+0x22>
 80095f0:	6818      	ldr	r0, [r3, #0]
 80095f2:	685b      	ldr	r3, [r3, #4]
 80095f4:	6053      	str	r3, [r2, #4]
 80095f6:	4408      	add	r0, r1
 80095f8:	6010      	str	r0, [r2, #0]
 80095fa:	e7da      	b.n	80095b2 <_free_r+0x22>
 80095fc:	d902      	bls.n	8009604 <_free_r+0x74>
 80095fe:	230c      	movs	r3, #12
 8009600:	602b      	str	r3, [r5, #0]
 8009602:	e7d6      	b.n	80095b2 <_free_r+0x22>
 8009604:	6820      	ldr	r0, [r4, #0]
 8009606:	1821      	adds	r1, r4, r0
 8009608:	428b      	cmp	r3, r1
 800960a:	bf04      	itt	eq
 800960c:	6819      	ldreq	r1, [r3, #0]
 800960e:	685b      	ldreq	r3, [r3, #4]
 8009610:	6063      	str	r3, [r4, #4]
 8009612:	bf04      	itt	eq
 8009614:	1809      	addeq	r1, r1, r0
 8009616:	6021      	streq	r1, [r4, #0]
 8009618:	6054      	str	r4, [r2, #4]
 800961a:	e7ca      	b.n	80095b2 <_free_r+0x22>
 800961c:	bd38      	pop	{r3, r4, r5, pc}
 800961e:	bf00      	nop
 8009620:	20000464 	.word	0x20000464

08009624 <__sfputc_r>:
 8009624:	6893      	ldr	r3, [r2, #8]
 8009626:	3b01      	subs	r3, #1
 8009628:	2b00      	cmp	r3, #0
 800962a:	b410      	push	{r4}
 800962c:	6093      	str	r3, [r2, #8]
 800962e:	da08      	bge.n	8009642 <__sfputc_r+0x1e>
 8009630:	6994      	ldr	r4, [r2, #24]
 8009632:	42a3      	cmp	r3, r4
 8009634:	db01      	blt.n	800963a <__sfputc_r+0x16>
 8009636:	290a      	cmp	r1, #10
 8009638:	d103      	bne.n	8009642 <__sfputc_r+0x1e>
 800963a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800963e:	f7ff be7e 	b.w	800933e <__swbuf_r>
 8009642:	6813      	ldr	r3, [r2, #0]
 8009644:	1c58      	adds	r0, r3, #1
 8009646:	6010      	str	r0, [r2, #0]
 8009648:	7019      	strb	r1, [r3, #0]
 800964a:	4608      	mov	r0, r1
 800964c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009650:	4770      	bx	lr

08009652 <__sfputs_r>:
 8009652:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009654:	4606      	mov	r6, r0
 8009656:	460f      	mov	r7, r1
 8009658:	4614      	mov	r4, r2
 800965a:	18d5      	adds	r5, r2, r3
 800965c:	42ac      	cmp	r4, r5
 800965e:	d101      	bne.n	8009664 <__sfputs_r+0x12>
 8009660:	2000      	movs	r0, #0
 8009662:	e007      	b.n	8009674 <__sfputs_r+0x22>
 8009664:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009668:	463a      	mov	r2, r7
 800966a:	4630      	mov	r0, r6
 800966c:	f7ff ffda 	bl	8009624 <__sfputc_r>
 8009670:	1c43      	adds	r3, r0, #1
 8009672:	d1f3      	bne.n	800965c <__sfputs_r+0xa>
 8009674:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009678 <_vfiprintf_r>:
 8009678:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800967c:	460d      	mov	r5, r1
 800967e:	b09d      	sub	sp, #116	@ 0x74
 8009680:	4614      	mov	r4, r2
 8009682:	4698      	mov	r8, r3
 8009684:	4606      	mov	r6, r0
 8009686:	b118      	cbz	r0, 8009690 <_vfiprintf_r+0x18>
 8009688:	6a03      	ldr	r3, [r0, #32]
 800968a:	b90b      	cbnz	r3, 8009690 <_vfiprintf_r+0x18>
 800968c:	f7ff fd6e 	bl	800916c <__sinit>
 8009690:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009692:	07d9      	lsls	r1, r3, #31
 8009694:	d405      	bmi.n	80096a2 <_vfiprintf_r+0x2a>
 8009696:	89ab      	ldrh	r3, [r5, #12]
 8009698:	059a      	lsls	r2, r3, #22
 800969a:	d402      	bmi.n	80096a2 <_vfiprintf_r+0x2a>
 800969c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800969e:	f7ff ff6c 	bl	800957a <__retarget_lock_acquire_recursive>
 80096a2:	89ab      	ldrh	r3, [r5, #12]
 80096a4:	071b      	lsls	r3, r3, #28
 80096a6:	d501      	bpl.n	80096ac <_vfiprintf_r+0x34>
 80096a8:	692b      	ldr	r3, [r5, #16]
 80096aa:	b99b      	cbnz	r3, 80096d4 <_vfiprintf_r+0x5c>
 80096ac:	4629      	mov	r1, r5
 80096ae:	4630      	mov	r0, r6
 80096b0:	f7ff fe84 	bl	80093bc <__swsetup_r>
 80096b4:	b170      	cbz	r0, 80096d4 <_vfiprintf_r+0x5c>
 80096b6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80096b8:	07dc      	lsls	r4, r3, #31
 80096ba:	d504      	bpl.n	80096c6 <_vfiprintf_r+0x4e>
 80096bc:	f04f 30ff 	mov.w	r0, #4294967295
 80096c0:	b01d      	add	sp, #116	@ 0x74
 80096c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096c6:	89ab      	ldrh	r3, [r5, #12]
 80096c8:	0598      	lsls	r0, r3, #22
 80096ca:	d4f7      	bmi.n	80096bc <_vfiprintf_r+0x44>
 80096cc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80096ce:	f7ff ff55 	bl	800957c <__retarget_lock_release_recursive>
 80096d2:	e7f3      	b.n	80096bc <_vfiprintf_r+0x44>
 80096d4:	2300      	movs	r3, #0
 80096d6:	9309      	str	r3, [sp, #36]	@ 0x24
 80096d8:	2320      	movs	r3, #32
 80096da:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80096de:	f8cd 800c 	str.w	r8, [sp, #12]
 80096e2:	2330      	movs	r3, #48	@ 0x30
 80096e4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009894 <_vfiprintf_r+0x21c>
 80096e8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80096ec:	f04f 0901 	mov.w	r9, #1
 80096f0:	4623      	mov	r3, r4
 80096f2:	469a      	mov	sl, r3
 80096f4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80096f8:	b10a      	cbz	r2, 80096fe <_vfiprintf_r+0x86>
 80096fa:	2a25      	cmp	r2, #37	@ 0x25
 80096fc:	d1f9      	bne.n	80096f2 <_vfiprintf_r+0x7a>
 80096fe:	ebba 0b04 	subs.w	fp, sl, r4
 8009702:	d00b      	beq.n	800971c <_vfiprintf_r+0xa4>
 8009704:	465b      	mov	r3, fp
 8009706:	4622      	mov	r2, r4
 8009708:	4629      	mov	r1, r5
 800970a:	4630      	mov	r0, r6
 800970c:	f7ff ffa1 	bl	8009652 <__sfputs_r>
 8009710:	3001      	adds	r0, #1
 8009712:	f000 80a7 	beq.w	8009864 <_vfiprintf_r+0x1ec>
 8009716:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009718:	445a      	add	r2, fp
 800971a:	9209      	str	r2, [sp, #36]	@ 0x24
 800971c:	f89a 3000 	ldrb.w	r3, [sl]
 8009720:	2b00      	cmp	r3, #0
 8009722:	f000 809f 	beq.w	8009864 <_vfiprintf_r+0x1ec>
 8009726:	2300      	movs	r3, #0
 8009728:	f04f 32ff 	mov.w	r2, #4294967295
 800972c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009730:	f10a 0a01 	add.w	sl, sl, #1
 8009734:	9304      	str	r3, [sp, #16]
 8009736:	9307      	str	r3, [sp, #28]
 8009738:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800973c:	931a      	str	r3, [sp, #104]	@ 0x68
 800973e:	4654      	mov	r4, sl
 8009740:	2205      	movs	r2, #5
 8009742:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009746:	4853      	ldr	r0, [pc, #332]	@ (8009894 <_vfiprintf_r+0x21c>)
 8009748:	f7f6 fd62 	bl	8000210 <memchr>
 800974c:	9a04      	ldr	r2, [sp, #16]
 800974e:	b9d8      	cbnz	r0, 8009788 <_vfiprintf_r+0x110>
 8009750:	06d1      	lsls	r1, r2, #27
 8009752:	bf44      	itt	mi
 8009754:	2320      	movmi	r3, #32
 8009756:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800975a:	0713      	lsls	r3, r2, #28
 800975c:	bf44      	itt	mi
 800975e:	232b      	movmi	r3, #43	@ 0x2b
 8009760:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009764:	f89a 3000 	ldrb.w	r3, [sl]
 8009768:	2b2a      	cmp	r3, #42	@ 0x2a
 800976a:	d015      	beq.n	8009798 <_vfiprintf_r+0x120>
 800976c:	9a07      	ldr	r2, [sp, #28]
 800976e:	4654      	mov	r4, sl
 8009770:	2000      	movs	r0, #0
 8009772:	f04f 0c0a 	mov.w	ip, #10
 8009776:	4621      	mov	r1, r4
 8009778:	f811 3b01 	ldrb.w	r3, [r1], #1
 800977c:	3b30      	subs	r3, #48	@ 0x30
 800977e:	2b09      	cmp	r3, #9
 8009780:	d94b      	bls.n	800981a <_vfiprintf_r+0x1a2>
 8009782:	b1b0      	cbz	r0, 80097b2 <_vfiprintf_r+0x13a>
 8009784:	9207      	str	r2, [sp, #28]
 8009786:	e014      	b.n	80097b2 <_vfiprintf_r+0x13a>
 8009788:	eba0 0308 	sub.w	r3, r0, r8
 800978c:	fa09 f303 	lsl.w	r3, r9, r3
 8009790:	4313      	orrs	r3, r2
 8009792:	9304      	str	r3, [sp, #16]
 8009794:	46a2      	mov	sl, r4
 8009796:	e7d2      	b.n	800973e <_vfiprintf_r+0xc6>
 8009798:	9b03      	ldr	r3, [sp, #12]
 800979a:	1d19      	adds	r1, r3, #4
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	9103      	str	r1, [sp, #12]
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	bfbb      	ittet	lt
 80097a4:	425b      	neglt	r3, r3
 80097a6:	f042 0202 	orrlt.w	r2, r2, #2
 80097aa:	9307      	strge	r3, [sp, #28]
 80097ac:	9307      	strlt	r3, [sp, #28]
 80097ae:	bfb8      	it	lt
 80097b0:	9204      	strlt	r2, [sp, #16]
 80097b2:	7823      	ldrb	r3, [r4, #0]
 80097b4:	2b2e      	cmp	r3, #46	@ 0x2e
 80097b6:	d10a      	bne.n	80097ce <_vfiprintf_r+0x156>
 80097b8:	7863      	ldrb	r3, [r4, #1]
 80097ba:	2b2a      	cmp	r3, #42	@ 0x2a
 80097bc:	d132      	bne.n	8009824 <_vfiprintf_r+0x1ac>
 80097be:	9b03      	ldr	r3, [sp, #12]
 80097c0:	1d1a      	adds	r2, r3, #4
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	9203      	str	r2, [sp, #12]
 80097c6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80097ca:	3402      	adds	r4, #2
 80097cc:	9305      	str	r3, [sp, #20]
 80097ce:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80098a4 <_vfiprintf_r+0x22c>
 80097d2:	7821      	ldrb	r1, [r4, #0]
 80097d4:	2203      	movs	r2, #3
 80097d6:	4650      	mov	r0, sl
 80097d8:	f7f6 fd1a 	bl	8000210 <memchr>
 80097dc:	b138      	cbz	r0, 80097ee <_vfiprintf_r+0x176>
 80097de:	9b04      	ldr	r3, [sp, #16]
 80097e0:	eba0 000a 	sub.w	r0, r0, sl
 80097e4:	2240      	movs	r2, #64	@ 0x40
 80097e6:	4082      	lsls	r2, r0
 80097e8:	4313      	orrs	r3, r2
 80097ea:	3401      	adds	r4, #1
 80097ec:	9304      	str	r3, [sp, #16]
 80097ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80097f2:	4829      	ldr	r0, [pc, #164]	@ (8009898 <_vfiprintf_r+0x220>)
 80097f4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80097f8:	2206      	movs	r2, #6
 80097fa:	f7f6 fd09 	bl	8000210 <memchr>
 80097fe:	2800      	cmp	r0, #0
 8009800:	d03f      	beq.n	8009882 <_vfiprintf_r+0x20a>
 8009802:	4b26      	ldr	r3, [pc, #152]	@ (800989c <_vfiprintf_r+0x224>)
 8009804:	bb1b      	cbnz	r3, 800984e <_vfiprintf_r+0x1d6>
 8009806:	9b03      	ldr	r3, [sp, #12]
 8009808:	3307      	adds	r3, #7
 800980a:	f023 0307 	bic.w	r3, r3, #7
 800980e:	3308      	adds	r3, #8
 8009810:	9303      	str	r3, [sp, #12]
 8009812:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009814:	443b      	add	r3, r7
 8009816:	9309      	str	r3, [sp, #36]	@ 0x24
 8009818:	e76a      	b.n	80096f0 <_vfiprintf_r+0x78>
 800981a:	fb0c 3202 	mla	r2, ip, r2, r3
 800981e:	460c      	mov	r4, r1
 8009820:	2001      	movs	r0, #1
 8009822:	e7a8      	b.n	8009776 <_vfiprintf_r+0xfe>
 8009824:	2300      	movs	r3, #0
 8009826:	3401      	adds	r4, #1
 8009828:	9305      	str	r3, [sp, #20]
 800982a:	4619      	mov	r1, r3
 800982c:	f04f 0c0a 	mov.w	ip, #10
 8009830:	4620      	mov	r0, r4
 8009832:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009836:	3a30      	subs	r2, #48	@ 0x30
 8009838:	2a09      	cmp	r2, #9
 800983a:	d903      	bls.n	8009844 <_vfiprintf_r+0x1cc>
 800983c:	2b00      	cmp	r3, #0
 800983e:	d0c6      	beq.n	80097ce <_vfiprintf_r+0x156>
 8009840:	9105      	str	r1, [sp, #20]
 8009842:	e7c4      	b.n	80097ce <_vfiprintf_r+0x156>
 8009844:	fb0c 2101 	mla	r1, ip, r1, r2
 8009848:	4604      	mov	r4, r0
 800984a:	2301      	movs	r3, #1
 800984c:	e7f0      	b.n	8009830 <_vfiprintf_r+0x1b8>
 800984e:	ab03      	add	r3, sp, #12
 8009850:	9300      	str	r3, [sp, #0]
 8009852:	462a      	mov	r2, r5
 8009854:	4b12      	ldr	r3, [pc, #72]	@ (80098a0 <_vfiprintf_r+0x228>)
 8009856:	a904      	add	r1, sp, #16
 8009858:	4630      	mov	r0, r6
 800985a:	f3af 8000 	nop.w
 800985e:	4607      	mov	r7, r0
 8009860:	1c78      	adds	r0, r7, #1
 8009862:	d1d6      	bne.n	8009812 <_vfiprintf_r+0x19a>
 8009864:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009866:	07d9      	lsls	r1, r3, #31
 8009868:	d405      	bmi.n	8009876 <_vfiprintf_r+0x1fe>
 800986a:	89ab      	ldrh	r3, [r5, #12]
 800986c:	059a      	lsls	r2, r3, #22
 800986e:	d402      	bmi.n	8009876 <_vfiprintf_r+0x1fe>
 8009870:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009872:	f7ff fe83 	bl	800957c <__retarget_lock_release_recursive>
 8009876:	89ab      	ldrh	r3, [r5, #12]
 8009878:	065b      	lsls	r3, r3, #25
 800987a:	f53f af1f 	bmi.w	80096bc <_vfiprintf_r+0x44>
 800987e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009880:	e71e      	b.n	80096c0 <_vfiprintf_r+0x48>
 8009882:	ab03      	add	r3, sp, #12
 8009884:	9300      	str	r3, [sp, #0]
 8009886:	462a      	mov	r2, r5
 8009888:	4b05      	ldr	r3, [pc, #20]	@ (80098a0 <_vfiprintf_r+0x228>)
 800988a:	a904      	add	r1, sp, #16
 800988c:	4630      	mov	r0, r6
 800988e:	f000 f879 	bl	8009984 <_printf_i>
 8009892:	e7e4      	b.n	800985e <_vfiprintf_r+0x1e6>
 8009894:	0800d808 	.word	0x0800d808
 8009898:	0800d812 	.word	0x0800d812
 800989c:	00000000 	.word	0x00000000
 80098a0:	08009653 	.word	0x08009653
 80098a4:	0800d80e 	.word	0x0800d80e

080098a8 <_printf_common>:
 80098a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80098ac:	4616      	mov	r6, r2
 80098ae:	4698      	mov	r8, r3
 80098b0:	688a      	ldr	r2, [r1, #8]
 80098b2:	690b      	ldr	r3, [r1, #16]
 80098b4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80098b8:	4293      	cmp	r3, r2
 80098ba:	bfb8      	it	lt
 80098bc:	4613      	movlt	r3, r2
 80098be:	6033      	str	r3, [r6, #0]
 80098c0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80098c4:	4607      	mov	r7, r0
 80098c6:	460c      	mov	r4, r1
 80098c8:	b10a      	cbz	r2, 80098ce <_printf_common+0x26>
 80098ca:	3301      	adds	r3, #1
 80098cc:	6033      	str	r3, [r6, #0]
 80098ce:	6823      	ldr	r3, [r4, #0]
 80098d0:	0699      	lsls	r1, r3, #26
 80098d2:	bf42      	ittt	mi
 80098d4:	6833      	ldrmi	r3, [r6, #0]
 80098d6:	3302      	addmi	r3, #2
 80098d8:	6033      	strmi	r3, [r6, #0]
 80098da:	6825      	ldr	r5, [r4, #0]
 80098dc:	f015 0506 	ands.w	r5, r5, #6
 80098e0:	d106      	bne.n	80098f0 <_printf_common+0x48>
 80098e2:	f104 0a19 	add.w	sl, r4, #25
 80098e6:	68e3      	ldr	r3, [r4, #12]
 80098e8:	6832      	ldr	r2, [r6, #0]
 80098ea:	1a9b      	subs	r3, r3, r2
 80098ec:	42ab      	cmp	r3, r5
 80098ee:	dc26      	bgt.n	800993e <_printf_common+0x96>
 80098f0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80098f4:	6822      	ldr	r2, [r4, #0]
 80098f6:	3b00      	subs	r3, #0
 80098f8:	bf18      	it	ne
 80098fa:	2301      	movne	r3, #1
 80098fc:	0692      	lsls	r2, r2, #26
 80098fe:	d42b      	bmi.n	8009958 <_printf_common+0xb0>
 8009900:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009904:	4641      	mov	r1, r8
 8009906:	4638      	mov	r0, r7
 8009908:	47c8      	blx	r9
 800990a:	3001      	adds	r0, #1
 800990c:	d01e      	beq.n	800994c <_printf_common+0xa4>
 800990e:	6823      	ldr	r3, [r4, #0]
 8009910:	6922      	ldr	r2, [r4, #16]
 8009912:	f003 0306 	and.w	r3, r3, #6
 8009916:	2b04      	cmp	r3, #4
 8009918:	bf02      	ittt	eq
 800991a:	68e5      	ldreq	r5, [r4, #12]
 800991c:	6833      	ldreq	r3, [r6, #0]
 800991e:	1aed      	subeq	r5, r5, r3
 8009920:	68a3      	ldr	r3, [r4, #8]
 8009922:	bf0c      	ite	eq
 8009924:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009928:	2500      	movne	r5, #0
 800992a:	4293      	cmp	r3, r2
 800992c:	bfc4      	itt	gt
 800992e:	1a9b      	subgt	r3, r3, r2
 8009930:	18ed      	addgt	r5, r5, r3
 8009932:	2600      	movs	r6, #0
 8009934:	341a      	adds	r4, #26
 8009936:	42b5      	cmp	r5, r6
 8009938:	d11a      	bne.n	8009970 <_printf_common+0xc8>
 800993a:	2000      	movs	r0, #0
 800993c:	e008      	b.n	8009950 <_printf_common+0xa8>
 800993e:	2301      	movs	r3, #1
 8009940:	4652      	mov	r2, sl
 8009942:	4641      	mov	r1, r8
 8009944:	4638      	mov	r0, r7
 8009946:	47c8      	blx	r9
 8009948:	3001      	adds	r0, #1
 800994a:	d103      	bne.n	8009954 <_printf_common+0xac>
 800994c:	f04f 30ff 	mov.w	r0, #4294967295
 8009950:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009954:	3501      	adds	r5, #1
 8009956:	e7c6      	b.n	80098e6 <_printf_common+0x3e>
 8009958:	18e1      	adds	r1, r4, r3
 800995a:	1c5a      	adds	r2, r3, #1
 800995c:	2030      	movs	r0, #48	@ 0x30
 800995e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009962:	4422      	add	r2, r4
 8009964:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009968:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800996c:	3302      	adds	r3, #2
 800996e:	e7c7      	b.n	8009900 <_printf_common+0x58>
 8009970:	2301      	movs	r3, #1
 8009972:	4622      	mov	r2, r4
 8009974:	4641      	mov	r1, r8
 8009976:	4638      	mov	r0, r7
 8009978:	47c8      	blx	r9
 800997a:	3001      	adds	r0, #1
 800997c:	d0e6      	beq.n	800994c <_printf_common+0xa4>
 800997e:	3601      	adds	r6, #1
 8009980:	e7d9      	b.n	8009936 <_printf_common+0x8e>
	...

08009984 <_printf_i>:
 8009984:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009988:	7e0f      	ldrb	r7, [r1, #24]
 800998a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800998c:	2f78      	cmp	r7, #120	@ 0x78
 800998e:	4691      	mov	r9, r2
 8009990:	4680      	mov	r8, r0
 8009992:	460c      	mov	r4, r1
 8009994:	469a      	mov	sl, r3
 8009996:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800999a:	d807      	bhi.n	80099ac <_printf_i+0x28>
 800999c:	2f62      	cmp	r7, #98	@ 0x62
 800999e:	d80a      	bhi.n	80099b6 <_printf_i+0x32>
 80099a0:	2f00      	cmp	r7, #0
 80099a2:	f000 80d2 	beq.w	8009b4a <_printf_i+0x1c6>
 80099a6:	2f58      	cmp	r7, #88	@ 0x58
 80099a8:	f000 80b9 	beq.w	8009b1e <_printf_i+0x19a>
 80099ac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80099b0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80099b4:	e03a      	b.n	8009a2c <_printf_i+0xa8>
 80099b6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80099ba:	2b15      	cmp	r3, #21
 80099bc:	d8f6      	bhi.n	80099ac <_printf_i+0x28>
 80099be:	a101      	add	r1, pc, #4	@ (adr r1, 80099c4 <_printf_i+0x40>)
 80099c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80099c4:	08009a1d 	.word	0x08009a1d
 80099c8:	08009a31 	.word	0x08009a31
 80099cc:	080099ad 	.word	0x080099ad
 80099d0:	080099ad 	.word	0x080099ad
 80099d4:	080099ad 	.word	0x080099ad
 80099d8:	080099ad 	.word	0x080099ad
 80099dc:	08009a31 	.word	0x08009a31
 80099e0:	080099ad 	.word	0x080099ad
 80099e4:	080099ad 	.word	0x080099ad
 80099e8:	080099ad 	.word	0x080099ad
 80099ec:	080099ad 	.word	0x080099ad
 80099f0:	08009b31 	.word	0x08009b31
 80099f4:	08009a5b 	.word	0x08009a5b
 80099f8:	08009aeb 	.word	0x08009aeb
 80099fc:	080099ad 	.word	0x080099ad
 8009a00:	080099ad 	.word	0x080099ad
 8009a04:	08009b53 	.word	0x08009b53
 8009a08:	080099ad 	.word	0x080099ad
 8009a0c:	08009a5b 	.word	0x08009a5b
 8009a10:	080099ad 	.word	0x080099ad
 8009a14:	080099ad 	.word	0x080099ad
 8009a18:	08009af3 	.word	0x08009af3
 8009a1c:	6833      	ldr	r3, [r6, #0]
 8009a1e:	1d1a      	adds	r2, r3, #4
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	6032      	str	r2, [r6, #0]
 8009a24:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009a28:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009a2c:	2301      	movs	r3, #1
 8009a2e:	e09d      	b.n	8009b6c <_printf_i+0x1e8>
 8009a30:	6833      	ldr	r3, [r6, #0]
 8009a32:	6820      	ldr	r0, [r4, #0]
 8009a34:	1d19      	adds	r1, r3, #4
 8009a36:	6031      	str	r1, [r6, #0]
 8009a38:	0606      	lsls	r6, r0, #24
 8009a3a:	d501      	bpl.n	8009a40 <_printf_i+0xbc>
 8009a3c:	681d      	ldr	r5, [r3, #0]
 8009a3e:	e003      	b.n	8009a48 <_printf_i+0xc4>
 8009a40:	0645      	lsls	r5, r0, #25
 8009a42:	d5fb      	bpl.n	8009a3c <_printf_i+0xb8>
 8009a44:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009a48:	2d00      	cmp	r5, #0
 8009a4a:	da03      	bge.n	8009a54 <_printf_i+0xd0>
 8009a4c:	232d      	movs	r3, #45	@ 0x2d
 8009a4e:	426d      	negs	r5, r5
 8009a50:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009a54:	4859      	ldr	r0, [pc, #356]	@ (8009bbc <_printf_i+0x238>)
 8009a56:	230a      	movs	r3, #10
 8009a58:	e011      	b.n	8009a7e <_printf_i+0xfa>
 8009a5a:	6821      	ldr	r1, [r4, #0]
 8009a5c:	6833      	ldr	r3, [r6, #0]
 8009a5e:	0608      	lsls	r0, r1, #24
 8009a60:	f853 5b04 	ldr.w	r5, [r3], #4
 8009a64:	d402      	bmi.n	8009a6c <_printf_i+0xe8>
 8009a66:	0649      	lsls	r1, r1, #25
 8009a68:	bf48      	it	mi
 8009a6a:	b2ad      	uxthmi	r5, r5
 8009a6c:	2f6f      	cmp	r7, #111	@ 0x6f
 8009a6e:	4853      	ldr	r0, [pc, #332]	@ (8009bbc <_printf_i+0x238>)
 8009a70:	6033      	str	r3, [r6, #0]
 8009a72:	bf14      	ite	ne
 8009a74:	230a      	movne	r3, #10
 8009a76:	2308      	moveq	r3, #8
 8009a78:	2100      	movs	r1, #0
 8009a7a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009a7e:	6866      	ldr	r6, [r4, #4]
 8009a80:	60a6      	str	r6, [r4, #8]
 8009a82:	2e00      	cmp	r6, #0
 8009a84:	bfa2      	ittt	ge
 8009a86:	6821      	ldrge	r1, [r4, #0]
 8009a88:	f021 0104 	bicge.w	r1, r1, #4
 8009a8c:	6021      	strge	r1, [r4, #0]
 8009a8e:	b90d      	cbnz	r5, 8009a94 <_printf_i+0x110>
 8009a90:	2e00      	cmp	r6, #0
 8009a92:	d04b      	beq.n	8009b2c <_printf_i+0x1a8>
 8009a94:	4616      	mov	r6, r2
 8009a96:	fbb5 f1f3 	udiv	r1, r5, r3
 8009a9a:	fb03 5711 	mls	r7, r3, r1, r5
 8009a9e:	5dc7      	ldrb	r7, [r0, r7]
 8009aa0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009aa4:	462f      	mov	r7, r5
 8009aa6:	42bb      	cmp	r3, r7
 8009aa8:	460d      	mov	r5, r1
 8009aaa:	d9f4      	bls.n	8009a96 <_printf_i+0x112>
 8009aac:	2b08      	cmp	r3, #8
 8009aae:	d10b      	bne.n	8009ac8 <_printf_i+0x144>
 8009ab0:	6823      	ldr	r3, [r4, #0]
 8009ab2:	07df      	lsls	r7, r3, #31
 8009ab4:	d508      	bpl.n	8009ac8 <_printf_i+0x144>
 8009ab6:	6923      	ldr	r3, [r4, #16]
 8009ab8:	6861      	ldr	r1, [r4, #4]
 8009aba:	4299      	cmp	r1, r3
 8009abc:	bfde      	ittt	le
 8009abe:	2330      	movle	r3, #48	@ 0x30
 8009ac0:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009ac4:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009ac8:	1b92      	subs	r2, r2, r6
 8009aca:	6122      	str	r2, [r4, #16]
 8009acc:	f8cd a000 	str.w	sl, [sp]
 8009ad0:	464b      	mov	r3, r9
 8009ad2:	aa03      	add	r2, sp, #12
 8009ad4:	4621      	mov	r1, r4
 8009ad6:	4640      	mov	r0, r8
 8009ad8:	f7ff fee6 	bl	80098a8 <_printf_common>
 8009adc:	3001      	adds	r0, #1
 8009ade:	d14a      	bne.n	8009b76 <_printf_i+0x1f2>
 8009ae0:	f04f 30ff 	mov.w	r0, #4294967295
 8009ae4:	b004      	add	sp, #16
 8009ae6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009aea:	6823      	ldr	r3, [r4, #0]
 8009aec:	f043 0320 	orr.w	r3, r3, #32
 8009af0:	6023      	str	r3, [r4, #0]
 8009af2:	4833      	ldr	r0, [pc, #204]	@ (8009bc0 <_printf_i+0x23c>)
 8009af4:	2778      	movs	r7, #120	@ 0x78
 8009af6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009afa:	6823      	ldr	r3, [r4, #0]
 8009afc:	6831      	ldr	r1, [r6, #0]
 8009afe:	061f      	lsls	r7, r3, #24
 8009b00:	f851 5b04 	ldr.w	r5, [r1], #4
 8009b04:	d402      	bmi.n	8009b0c <_printf_i+0x188>
 8009b06:	065f      	lsls	r7, r3, #25
 8009b08:	bf48      	it	mi
 8009b0a:	b2ad      	uxthmi	r5, r5
 8009b0c:	6031      	str	r1, [r6, #0]
 8009b0e:	07d9      	lsls	r1, r3, #31
 8009b10:	bf44      	itt	mi
 8009b12:	f043 0320 	orrmi.w	r3, r3, #32
 8009b16:	6023      	strmi	r3, [r4, #0]
 8009b18:	b11d      	cbz	r5, 8009b22 <_printf_i+0x19e>
 8009b1a:	2310      	movs	r3, #16
 8009b1c:	e7ac      	b.n	8009a78 <_printf_i+0xf4>
 8009b1e:	4827      	ldr	r0, [pc, #156]	@ (8009bbc <_printf_i+0x238>)
 8009b20:	e7e9      	b.n	8009af6 <_printf_i+0x172>
 8009b22:	6823      	ldr	r3, [r4, #0]
 8009b24:	f023 0320 	bic.w	r3, r3, #32
 8009b28:	6023      	str	r3, [r4, #0]
 8009b2a:	e7f6      	b.n	8009b1a <_printf_i+0x196>
 8009b2c:	4616      	mov	r6, r2
 8009b2e:	e7bd      	b.n	8009aac <_printf_i+0x128>
 8009b30:	6833      	ldr	r3, [r6, #0]
 8009b32:	6825      	ldr	r5, [r4, #0]
 8009b34:	6961      	ldr	r1, [r4, #20]
 8009b36:	1d18      	adds	r0, r3, #4
 8009b38:	6030      	str	r0, [r6, #0]
 8009b3a:	062e      	lsls	r6, r5, #24
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	d501      	bpl.n	8009b44 <_printf_i+0x1c0>
 8009b40:	6019      	str	r1, [r3, #0]
 8009b42:	e002      	b.n	8009b4a <_printf_i+0x1c6>
 8009b44:	0668      	lsls	r0, r5, #25
 8009b46:	d5fb      	bpl.n	8009b40 <_printf_i+0x1bc>
 8009b48:	8019      	strh	r1, [r3, #0]
 8009b4a:	2300      	movs	r3, #0
 8009b4c:	6123      	str	r3, [r4, #16]
 8009b4e:	4616      	mov	r6, r2
 8009b50:	e7bc      	b.n	8009acc <_printf_i+0x148>
 8009b52:	6833      	ldr	r3, [r6, #0]
 8009b54:	1d1a      	adds	r2, r3, #4
 8009b56:	6032      	str	r2, [r6, #0]
 8009b58:	681e      	ldr	r6, [r3, #0]
 8009b5a:	6862      	ldr	r2, [r4, #4]
 8009b5c:	2100      	movs	r1, #0
 8009b5e:	4630      	mov	r0, r6
 8009b60:	f7f6 fb56 	bl	8000210 <memchr>
 8009b64:	b108      	cbz	r0, 8009b6a <_printf_i+0x1e6>
 8009b66:	1b80      	subs	r0, r0, r6
 8009b68:	6060      	str	r0, [r4, #4]
 8009b6a:	6863      	ldr	r3, [r4, #4]
 8009b6c:	6123      	str	r3, [r4, #16]
 8009b6e:	2300      	movs	r3, #0
 8009b70:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009b74:	e7aa      	b.n	8009acc <_printf_i+0x148>
 8009b76:	6923      	ldr	r3, [r4, #16]
 8009b78:	4632      	mov	r2, r6
 8009b7a:	4649      	mov	r1, r9
 8009b7c:	4640      	mov	r0, r8
 8009b7e:	47d0      	blx	sl
 8009b80:	3001      	adds	r0, #1
 8009b82:	d0ad      	beq.n	8009ae0 <_printf_i+0x15c>
 8009b84:	6823      	ldr	r3, [r4, #0]
 8009b86:	079b      	lsls	r3, r3, #30
 8009b88:	d413      	bmi.n	8009bb2 <_printf_i+0x22e>
 8009b8a:	68e0      	ldr	r0, [r4, #12]
 8009b8c:	9b03      	ldr	r3, [sp, #12]
 8009b8e:	4298      	cmp	r0, r3
 8009b90:	bfb8      	it	lt
 8009b92:	4618      	movlt	r0, r3
 8009b94:	e7a6      	b.n	8009ae4 <_printf_i+0x160>
 8009b96:	2301      	movs	r3, #1
 8009b98:	4632      	mov	r2, r6
 8009b9a:	4649      	mov	r1, r9
 8009b9c:	4640      	mov	r0, r8
 8009b9e:	47d0      	blx	sl
 8009ba0:	3001      	adds	r0, #1
 8009ba2:	d09d      	beq.n	8009ae0 <_printf_i+0x15c>
 8009ba4:	3501      	adds	r5, #1
 8009ba6:	68e3      	ldr	r3, [r4, #12]
 8009ba8:	9903      	ldr	r1, [sp, #12]
 8009baa:	1a5b      	subs	r3, r3, r1
 8009bac:	42ab      	cmp	r3, r5
 8009bae:	dcf2      	bgt.n	8009b96 <_printf_i+0x212>
 8009bb0:	e7eb      	b.n	8009b8a <_printf_i+0x206>
 8009bb2:	2500      	movs	r5, #0
 8009bb4:	f104 0619 	add.w	r6, r4, #25
 8009bb8:	e7f5      	b.n	8009ba6 <_printf_i+0x222>
 8009bba:	bf00      	nop
 8009bbc:	0800d819 	.word	0x0800d819
 8009bc0:	0800d82a 	.word	0x0800d82a

08009bc4 <__sflush_r>:
 8009bc4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009bc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009bcc:	0716      	lsls	r6, r2, #28
 8009bce:	4605      	mov	r5, r0
 8009bd0:	460c      	mov	r4, r1
 8009bd2:	d454      	bmi.n	8009c7e <__sflush_r+0xba>
 8009bd4:	684b      	ldr	r3, [r1, #4]
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	dc02      	bgt.n	8009be0 <__sflush_r+0x1c>
 8009bda:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	dd48      	ble.n	8009c72 <__sflush_r+0xae>
 8009be0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009be2:	2e00      	cmp	r6, #0
 8009be4:	d045      	beq.n	8009c72 <__sflush_r+0xae>
 8009be6:	2300      	movs	r3, #0
 8009be8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009bec:	682f      	ldr	r7, [r5, #0]
 8009bee:	6a21      	ldr	r1, [r4, #32]
 8009bf0:	602b      	str	r3, [r5, #0]
 8009bf2:	d030      	beq.n	8009c56 <__sflush_r+0x92>
 8009bf4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009bf6:	89a3      	ldrh	r3, [r4, #12]
 8009bf8:	0759      	lsls	r1, r3, #29
 8009bfa:	d505      	bpl.n	8009c08 <__sflush_r+0x44>
 8009bfc:	6863      	ldr	r3, [r4, #4]
 8009bfe:	1ad2      	subs	r2, r2, r3
 8009c00:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009c02:	b10b      	cbz	r3, 8009c08 <__sflush_r+0x44>
 8009c04:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009c06:	1ad2      	subs	r2, r2, r3
 8009c08:	2300      	movs	r3, #0
 8009c0a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009c0c:	6a21      	ldr	r1, [r4, #32]
 8009c0e:	4628      	mov	r0, r5
 8009c10:	47b0      	blx	r6
 8009c12:	1c43      	adds	r3, r0, #1
 8009c14:	89a3      	ldrh	r3, [r4, #12]
 8009c16:	d106      	bne.n	8009c26 <__sflush_r+0x62>
 8009c18:	6829      	ldr	r1, [r5, #0]
 8009c1a:	291d      	cmp	r1, #29
 8009c1c:	d82b      	bhi.n	8009c76 <__sflush_r+0xb2>
 8009c1e:	4a2a      	ldr	r2, [pc, #168]	@ (8009cc8 <__sflush_r+0x104>)
 8009c20:	410a      	asrs	r2, r1
 8009c22:	07d6      	lsls	r6, r2, #31
 8009c24:	d427      	bmi.n	8009c76 <__sflush_r+0xb2>
 8009c26:	2200      	movs	r2, #0
 8009c28:	6062      	str	r2, [r4, #4]
 8009c2a:	04d9      	lsls	r1, r3, #19
 8009c2c:	6922      	ldr	r2, [r4, #16]
 8009c2e:	6022      	str	r2, [r4, #0]
 8009c30:	d504      	bpl.n	8009c3c <__sflush_r+0x78>
 8009c32:	1c42      	adds	r2, r0, #1
 8009c34:	d101      	bne.n	8009c3a <__sflush_r+0x76>
 8009c36:	682b      	ldr	r3, [r5, #0]
 8009c38:	b903      	cbnz	r3, 8009c3c <__sflush_r+0x78>
 8009c3a:	6560      	str	r0, [r4, #84]	@ 0x54
 8009c3c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009c3e:	602f      	str	r7, [r5, #0]
 8009c40:	b1b9      	cbz	r1, 8009c72 <__sflush_r+0xae>
 8009c42:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009c46:	4299      	cmp	r1, r3
 8009c48:	d002      	beq.n	8009c50 <__sflush_r+0x8c>
 8009c4a:	4628      	mov	r0, r5
 8009c4c:	f7ff fca0 	bl	8009590 <_free_r>
 8009c50:	2300      	movs	r3, #0
 8009c52:	6363      	str	r3, [r4, #52]	@ 0x34
 8009c54:	e00d      	b.n	8009c72 <__sflush_r+0xae>
 8009c56:	2301      	movs	r3, #1
 8009c58:	4628      	mov	r0, r5
 8009c5a:	47b0      	blx	r6
 8009c5c:	4602      	mov	r2, r0
 8009c5e:	1c50      	adds	r0, r2, #1
 8009c60:	d1c9      	bne.n	8009bf6 <__sflush_r+0x32>
 8009c62:	682b      	ldr	r3, [r5, #0]
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d0c6      	beq.n	8009bf6 <__sflush_r+0x32>
 8009c68:	2b1d      	cmp	r3, #29
 8009c6a:	d001      	beq.n	8009c70 <__sflush_r+0xac>
 8009c6c:	2b16      	cmp	r3, #22
 8009c6e:	d11e      	bne.n	8009cae <__sflush_r+0xea>
 8009c70:	602f      	str	r7, [r5, #0]
 8009c72:	2000      	movs	r0, #0
 8009c74:	e022      	b.n	8009cbc <__sflush_r+0xf8>
 8009c76:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009c7a:	b21b      	sxth	r3, r3
 8009c7c:	e01b      	b.n	8009cb6 <__sflush_r+0xf2>
 8009c7e:	690f      	ldr	r7, [r1, #16]
 8009c80:	2f00      	cmp	r7, #0
 8009c82:	d0f6      	beq.n	8009c72 <__sflush_r+0xae>
 8009c84:	0793      	lsls	r3, r2, #30
 8009c86:	680e      	ldr	r6, [r1, #0]
 8009c88:	bf08      	it	eq
 8009c8a:	694b      	ldreq	r3, [r1, #20]
 8009c8c:	600f      	str	r7, [r1, #0]
 8009c8e:	bf18      	it	ne
 8009c90:	2300      	movne	r3, #0
 8009c92:	eba6 0807 	sub.w	r8, r6, r7
 8009c96:	608b      	str	r3, [r1, #8]
 8009c98:	f1b8 0f00 	cmp.w	r8, #0
 8009c9c:	dde9      	ble.n	8009c72 <__sflush_r+0xae>
 8009c9e:	6a21      	ldr	r1, [r4, #32]
 8009ca0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009ca2:	4643      	mov	r3, r8
 8009ca4:	463a      	mov	r2, r7
 8009ca6:	4628      	mov	r0, r5
 8009ca8:	47b0      	blx	r6
 8009caa:	2800      	cmp	r0, #0
 8009cac:	dc08      	bgt.n	8009cc0 <__sflush_r+0xfc>
 8009cae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009cb2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009cb6:	81a3      	strh	r3, [r4, #12]
 8009cb8:	f04f 30ff 	mov.w	r0, #4294967295
 8009cbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009cc0:	4407      	add	r7, r0
 8009cc2:	eba8 0800 	sub.w	r8, r8, r0
 8009cc6:	e7e7      	b.n	8009c98 <__sflush_r+0xd4>
 8009cc8:	dfbffffe 	.word	0xdfbffffe

08009ccc <_fflush_r>:
 8009ccc:	b538      	push	{r3, r4, r5, lr}
 8009cce:	690b      	ldr	r3, [r1, #16]
 8009cd0:	4605      	mov	r5, r0
 8009cd2:	460c      	mov	r4, r1
 8009cd4:	b913      	cbnz	r3, 8009cdc <_fflush_r+0x10>
 8009cd6:	2500      	movs	r5, #0
 8009cd8:	4628      	mov	r0, r5
 8009cda:	bd38      	pop	{r3, r4, r5, pc}
 8009cdc:	b118      	cbz	r0, 8009ce6 <_fflush_r+0x1a>
 8009cde:	6a03      	ldr	r3, [r0, #32]
 8009ce0:	b90b      	cbnz	r3, 8009ce6 <_fflush_r+0x1a>
 8009ce2:	f7ff fa43 	bl	800916c <__sinit>
 8009ce6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d0f3      	beq.n	8009cd6 <_fflush_r+0xa>
 8009cee:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009cf0:	07d0      	lsls	r0, r2, #31
 8009cf2:	d404      	bmi.n	8009cfe <_fflush_r+0x32>
 8009cf4:	0599      	lsls	r1, r3, #22
 8009cf6:	d402      	bmi.n	8009cfe <_fflush_r+0x32>
 8009cf8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009cfa:	f7ff fc3e 	bl	800957a <__retarget_lock_acquire_recursive>
 8009cfe:	4628      	mov	r0, r5
 8009d00:	4621      	mov	r1, r4
 8009d02:	f7ff ff5f 	bl	8009bc4 <__sflush_r>
 8009d06:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009d08:	07da      	lsls	r2, r3, #31
 8009d0a:	4605      	mov	r5, r0
 8009d0c:	d4e4      	bmi.n	8009cd8 <_fflush_r+0xc>
 8009d0e:	89a3      	ldrh	r3, [r4, #12]
 8009d10:	059b      	lsls	r3, r3, #22
 8009d12:	d4e1      	bmi.n	8009cd8 <_fflush_r+0xc>
 8009d14:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009d16:	f7ff fc31 	bl	800957c <__retarget_lock_release_recursive>
 8009d1a:	e7dd      	b.n	8009cd8 <_fflush_r+0xc>

08009d1c <__swhatbuf_r>:
 8009d1c:	b570      	push	{r4, r5, r6, lr}
 8009d1e:	460c      	mov	r4, r1
 8009d20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d24:	2900      	cmp	r1, #0
 8009d26:	b096      	sub	sp, #88	@ 0x58
 8009d28:	4615      	mov	r5, r2
 8009d2a:	461e      	mov	r6, r3
 8009d2c:	da0d      	bge.n	8009d4a <__swhatbuf_r+0x2e>
 8009d2e:	89a3      	ldrh	r3, [r4, #12]
 8009d30:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009d34:	f04f 0100 	mov.w	r1, #0
 8009d38:	bf14      	ite	ne
 8009d3a:	2340      	movne	r3, #64	@ 0x40
 8009d3c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009d40:	2000      	movs	r0, #0
 8009d42:	6031      	str	r1, [r6, #0]
 8009d44:	602b      	str	r3, [r5, #0]
 8009d46:	b016      	add	sp, #88	@ 0x58
 8009d48:	bd70      	pop	{r4, r5, r6, pc}
 8009d4a:	466a      	mov	r2, sp
 8009d4c:	f000 f848 	bl	8009de0 <_fstat_r>
 8009d50:	2800      	cmp	r0, #0
 8009d52:	dbec      	blt.n	8009d2e <__swhatbuf_r+0x12>
 8009d54:	9901      	ldr	r1, [sp, #4]
 8009d56:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009d5a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009d5e:	4259      	negs	r1, r3
 8009d60:	4159      	adcs	r1, r3
 8009d62:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009d66:	e7eb      	b.n	8009d40 <__swhatbuf_r+0x24>

08009d68 <__smakebuf_r>:
 8009d68:	898b      	ldrh	r3, [r1, #12]
 8009d6a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009d6c:	079d      	lsls	r5, r3, #30
 8009d6e:	4606      	mov	r6, r0
 8009d70:	460c      	mov	r4, r1
 8009d72:	d507      	bpl.n	8009d84 <__smakebuf_r+0x1c>
 8009d74:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009d78:	6023      	str	r3, [r4, #0]
 8009d7a:	6123      	str	r3, [r4, #16]
 8009d7c:	2301      	movs	r3, #1
 8009d7e:	6163      	str	r3, [r4, #20]
 8009d80:	b003      	add	sp, #12
 8009d82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009d84:	ab01      	add	r3, sp, #4
 8009d86:	466a      	mov	r2, sp
 8009d88:	f7ff ffc8 	bl	8009d1c <__swhatbuf_r>
 8009d8c:	9f00      	ldr	r7, [sp, #0]
 8009d8e:	4605      	mov	r5, r0
 8009d90:	4639      	mov	r1, r7
 8009d92:	4630      	mov	r0, r6
 8009d94:	f7ff f8d2 	bl	8008f3c <_malloc_r>
 8009d98:	b948      	cbnz	r0, 8009dae <__smakebuf_r+0x46>
 8009d9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009d9e:	059a      	lsls	r2, r3, #22
 8009da0:	d4ee      	bmi.n	8009d80 <__smakebuf_r+0x18>
 8009da2:	f023 0303 	bic.w	r3, r3, #3
 8009da6:	f043 0302 	orr.w	r3, r3, #2
 8009daa:	81a3      	strh	r3, [r4, #12]
 8009dac:	e7e2      	b.n	8009d74 <__smakebuf_r+0xc>
 8009dae:	89a3      	ldrh	r3, [r4, #12]
 8009db0:	6020      	str	r0, [r4, #0]
 8009db2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009db6:	81a3      	strh	r3, [r4, #12]
 8009db8:	9b01      	ldr	r3, [sp, #4]
 8009dba:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009dbe:	b15b      	cbz	r3, 8009dd8 <__smakebuf_r+0x70>
 8009dc0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009dc4:	4630      	mov	r0, r6
 8009dc6:	f000 f81d 	bl	8009e04 <_isatty_r>
 8009dca:	b128      	cbz	r0, 8009dd8 <__smakebuf_r+0x70>
 8009dcc:	89a3      	ldrh	r3, [r4, #12]
 8009dce:	f023 0303 	bic.w	r3, r3, #3
 8009dd2:	f043 0301 	orr.w	r3, r3, #1
 8009dd6:	81a3      	strh	r3, [r4, #12]
 8009dd8:	89a3      	ldrh	r3, [r4, #12]
 8009dda:	431d      	orrs	r5, r3
 8009ddc:	81a5      	strh	r5, [r4, #12]
 8009dde:	e7cf      	b.n	8009d80 <__smakebuf_r+0x18>

08009de0 <_fstat_r>:
 8009de0:	b538      	push	{r3, r4, r5, lr}
 8009de2:	4d07      	ldr	r5, [pc, #28]	@ (8009e00 <_fstat_r+0x20>)
 8009de4:	2300      	movs	r3, #0
 8009de6:	4604      	mov	r4, r0
 8009de8:	4608      	mov	r0, r1
 8009dea:	4611      	mov	r1, r2
 8009dec:	602b      	str	r3, [r5, #0]
 8009dee:	f7f8 fc40 	bl	8002672 <_fstat>
 8009df2:	1c43      	adds	r3, r0, #1
 8009df4:	d102      	bne.n	8009dfc <_fstat_r+0x1c>
 8009df6:	682b      	ldr	r3, [r5, #0]
 8009df8:	b103      	cbz	r3, 8009dfc <_fstat_r+0x1c>
 8009dfa:	6023      	str	r3, [r4, #0]
 8009dfc:	bd38      	pop	{r3, r4, r5, pc}
 8009dfe:	bf00      	nop
 8009e00:	200005a4 	.word	0x200005a4

08009e04 <_isatty_r>:
 8009e04:	b538      	push	{r3, r4, r5, lr}
 8009e06:	4d06      	ldr	r5, [pc, #24]	@ (8009e20 <_isatty_r+0x1c>)
 8009e08:	2300      	movs	r3, #0
 8009e0a:	4604      	mov	r4, r0
 8009e0c:	4608      	mov	r0, r1
 8009e0e:	602b      	str	r3, [r5, #0]
 8009e10:	f7f8 fc3f 	bl	8002692 <_isatty>
 8009e14:	1c43      	adds	r3, r0, #1
 8009e16:	d102      	bne.n	8009e1e <_isatty_r+0x1a>
 8009e18:	682b      	ldr	r3, [r5, #0]
 8009e1a:	b103      	cbz	r3, 8009e1e <_isatty_r+0x1a>
 8009e1c:	6023      	str	r3, [r4, #0]
 8009e1e:	bd38      	pop	{r3, r4, r5, pc}
 8009e20:	200005a4 	.word	0x200005a4

08009e24 <_init>:
 8009e24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e26:	bf00      	nop
 8009e28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e2a:	bc08      	pop	{r3}
 8009e2c:	469e      	mov	lr, r3
 8009e2e:	4770      	bx	lr

08009e30 <_fini>:
 8009e30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e32:	bf00      	nop
 8009e34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e36:	bc08      	pop	{r3}
 8009e38:	469e      	mov	lr, r3
 8009e3a:	4770      	bx	lr
