
GEI1049_Projet_session.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000043f0  080001c8  080001c8  000011c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  080045b8  080045b8  000055b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080045e0  080045e0  00006010  2**0
                  CONTENTS
  4 .ARM          00000008  080045e0  080045e0  000055e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080045e8  080045e8  00006010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080045e8  080045e8  000055e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080045ec  080045ec  000055ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  080045f0  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000154  20000010  08004600  00006010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000164  08004600  00006164  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e1c5  00000000  00000000  00006040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f9e  00000000  00000000  00014205  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cc8  00000000  00000000  000161a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a02  00000000  00000000  00016e70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002256c  00000000  00000000  00017872  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fc9c  00000000  00000000  00039dde  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d163b  00000000  00000000  00049a7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011b0b5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003708  00000000  00000000  0011b0f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  0011e800  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	@ (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	@ (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000010 	.word	0x20000010
 80001e4:	00000000 	.word	0x00000000
 80001e8:	080045a0 	.word	0x080045a0

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	@ (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	@ (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	@ (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000014 	.word	0x20000014
 8000204:	080045a0 	.word	0x080045a0

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	@ 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	3c01      	subs	r4, #1
 8000344:	bf28      	it	cs
 8000346:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800034a:	d2e9      	bcs.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__aeabi_d2iz>:
 80009a4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009a8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80009ac:	d215      	bcs.n	80009da <__aeabi_d2iz+0x36>
 80009ae:	d511      	bpl.n	80009d4 <__aeabi_d2iz+0x30>
 80009b0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80009b4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009b8:	d912      	bls.n	80009e0 <__aeabi_d2iz+0x3c>
 80009ba:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009be:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80009c2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009c6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80009ca:	fa23 f002 	lsr.w	r0, r3, r2
 80009ce:	bf18      	it	ne
 80009d0:	4240      	negne	r0, r0
 80009d2:	4770      	bx	lr
 80009d4:	f04f 0000 	mov.w	r0, #0
 80009d8:	4770      	bx	lr
 80009da:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009de:	d105      	bne.n	80009ec <__aeabi_d2iz+0x48>
 80009e0:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 80009e4:	bf08      	it	eq
 80009e6:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 80009ea:	4770      	bx	lr
 80009ec:	f04f 0000 	mov.w	r0, #0
 80009f0:	4770      	bx	lr
 80009f2:	bf00      	nop

080009f4 <__aeabi_d2uiz>:
 80009f4:	004a      	lsls	r2, r1, #1
 80009f6:	d211      	bcs.n	8000a1c <__aeabi_d2uiz+0x28>
 80009f8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80009fc:	d211      	bcs.n	8000a22 <__aeabi_d2uiz+0x2e>
 80009fe:	d50d      	bpl.n	8000a1c <__aeabi_d2uiz+0x28>
 8000a00:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a04:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a08:	d40e      	bmi.n	8000a28 <__aeabi_d2uiz+0x34>
 8000a0a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a0e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a12:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a16:	fa23 f002 	lsr.w	r0, r3, r2
 8000a1a:	4770      	bx	lr
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a26:	d102      	bne.n	8000a2e <__aeabi_d2uiz+0x3a>
 8000a28:	f04f 30ff 	mov.w	r0, #4294967295
 8000a2c:	4770      	bx	lr
 8000a2e:	f04f 0000 	mov.w	r0, #0
 8000a32:	4770      	bx	lr

08000a34 <__aeabi_d2f>:
 8000a34:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a38:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a3c:	bf24      	itt	cs
 8000a3e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a42:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a46:	d90d      	bls.n	8000a64 <__aeabi_d2f+0x30>
 8000a48:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a4c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a50:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a54:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a58:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a5c:	bf08      	it	eq
 8000a5e:	f020 0001 	biceq.w	r0, r0, #1
 8000a62:	4770      	bx	lr
 8000a64:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a68:	d121      	bne.n	8000aae <__aeabi_d2f+0x7a>
 8000a6a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a6e:	bfbc      	itt	lt
 8000a70:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a74:	4770      	bxlt	lr
 8000a76:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a7a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a7e:	f1c2 0218 	rsb	r2, r2, #24
 8000a82:	f1c2 0c20 	rsb	ip, r2, #32
 8000a86:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a8a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a8e:	bf18      	it	ne
 8000a90:	f040 0001 	orrne.w	r0, r0, #1
 8000a94:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a98:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a9c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000aa0:	ea40 000c 	orr.w	r0, r0, ip
 8000aa4:	fa23 f302 	lsr.w	r3, r3, r2
 8000aa8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000aac:	e7cc      	b.n	8000a48 <__aeabi_d2f+0x14>
 8000aae:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ab2:	d107      	bne.n	8000ac4 <__aeabi_d2f+0x90>
 8000ab4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ab8:	bf1e      	ittt	ne
 8000aba:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000abe:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000ac2:	4770      	bxne	lr
 8000ac4:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ac8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000acc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_uldivmod>:
 8000ad4:	b953      	cbnz	r3, 8000aec <__aeabi_uldivmod+0x18>
 8000ad6:	b94a      	cbnz	r2, 8000aec <__aeabi_uldivmod+0x18>
 8000ad8:	2900      	cmp	r1, #0
 8000ada:	bf08      	it	eq
 8000adc:	2800      	cmpeq	r0, #0
 8000ade:	bf1c      	itt	ne
 8000ae0:	f04f 31ff 	movne.w	r1, #4294967295
 8000ae4:	f04f 30ff 	movne.w	r0, #4294967295
 8000ae8:	f000 b96a 	b.w	8000dc0 <__aeabi_idiv0>
 8000aec:	f1ad 0c08 	sub.w	ip, sp, #8
 8000af0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000af4:	f000 f806 	bl	8000b04 <__udivmoddi4>
 8000af8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000afc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b00:	b004      	add	sp, #16
 8000b02:	4770      	bx	lr

08000b04 <__udivmoddi4>:
 8000b04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b08:	9d08      	ldr	r5, [sp, #32]
 8000b0a:	460c      	mov	r4, r1
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d14e      	bne.n	8000bae <__udivmoddi4+0xaa>
 8000b10:	4694      	mov	ip, r2
 8000b12:	458c      	cmp	ip, r1
 8000b14:	4686      	mov	lr, r0
 8000b16:	fab2 f282 	clz	r2, r2
 8000b1a:	d962      	bls.n	8000be2 <__udivmoddi4+0xde>
 8000b1c:	b14a      	cbz	r2, 8000b32 <__udivmoddi4+0x2e>
 8000b1e:	f1c2 0320 	rsb	r3, r2, #32
 8000b22:	4091      	lsls	r1, r2
 8000b24:	fa20 f303 	lsr.w	r3, r0, r3
 8000b28:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b2c:	4319      	orrs	r1, r3
 8000b2e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b32:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b36:	fa1f f68c 	uxth.w	r6, ip
 8000b3a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000b3e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b42:	fb07 1114 	mls	r1, r7, r4, r1
 8000b46:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b4a:	fb04 f106 	mul.w	r1, r4, r6
 8000b4e:	4299      	cmp	r1, r3
 8000b50:	d90a      	bls.n	8000b68 <__udivmoddi4+0x64>
 8000b52:	eb1c 0303 	adds.w	r3, ip, r3
 8000b56:	f104 30ff 	add.w	r0, r4, #4294967295
 8000b5a:	f080 8112 	bcs.w	8000d82 <__udivmoddi4+0x27e>
 8000b5e:	4299      	cmp	r1, r3
 8000b60:	f240 810f 	bls.w	8000d82 <__udivmoddi4+0x27e>
 8000b64:	3c02      	subs	r4, #2
 8000b66:	4463      	add	r3, ip
 8000b68:	1a59      	subs	r1, r3, r1
 8000b6a:	fa1f f38e 	uxth.w	r3, lr
 8000b6e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b72:	fb07 1110 	mls	r1, r7, r0, r1
 8000b76:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b7a:	fb00 f606 	mul.w	r6, r0, r6
 8000b7e:	429e      	cmp	r6, r3
 8000b80:	d90a      	bls.n	8000b98 <__udivmoddi4+0x94>
 8000b82:	eb1c 0303 	adds.w	r3, ip, r3
 8000b86:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b8a:	f080 80fc 	bcs.w	8000d86 <__udivmoddi4+0x282>
 8000b8e:	429e      	cmp	r6, r3
 8000b90:	f240 80f9 	bls.w	8000d86 <__udivmoddi4+0x282>
 8000b94:	4463      	add	r3, ip
 8000b96:	3802      	subs	r0, #2
 8000b98:	1b9b      	subs	r3, r3, r6
 8000b9a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b9e:	2100      	movs	r1, #0
 8000ba0:	b11d      	cbz	r5, 8000baa <__udivmoddi4+0xa6>
 8000ba2:	40d3      	lsrs	r3, r2
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	e9c5 3200 	strd	r3, r2, [r5]
 8000baa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bae:	428b      	cmp	r3, r1
 8000bb0:	d905      	bls.n	8000bbe <__udivmoddi4+0xba>
 8000bb2:	b10d      	cbz	r5, 8000bb8 <__udivmoddi4+0xb4>
 8000bb4:	e9c5 0100 	strd	r0, r1, [r5]
 8000bb8:	2100      	movs	r1, #0
 8000bba:	4608      	mov	r0, r1
 8000bbc:	e7f5      	b.n	8000baa <__udivmoddi4+0xa6>
 8000bbe:	fab3 f183 	clz	r1, r3
 8000bc2:	2900      	cmp	r1, #0
 8000bc4:	d146      	bne.n	8000c54 <__udivmoddi4+0x150>
 8000bc6:	42a3      	cmp	r3, r4
 8000bc8:	d302      	bcc.n	8000bd0 <__udivmoddi4+0xcc>
 8000bca:	4290      	cmp	r0, r2
 8000bcc:	f0c0 80f0 	bcc.w	8000db0 <__udivmoddi4+0x2ac>
 8000bd0:	1a86      	subs	r6, r0, r2
 8000bd2:	eb64 0303 	sbc.w	r3, r4, r3
 8000bd6:	2001      	movs	r0, #1
 8000bd8:	2d00      	cmp	r5, #0
 8000bda:	d0e6      	beq.n	8000baa <__udivmoddi4+0xa6>
 8000bdc:	e9c5 6300 	strd	r6, r3, [r5]
 8000be0:	e7e3      	b.n	8000baa <__udivmoddi4+0xa6>
 8000be2:	2a00      	cmp	r2, #0
 8000be4:	f040 8090 	bne.w	8000d08 <__udivmoddi4+0x204>
 8000be8:	eba1 040c 	sub.w	r4, r1, ip
 8000bec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bf0:	fa1f f78c 	uxth.w	r7, ip
 8000bf4:	2101      	movs	r1, #1
 8000bf6:	fbb4 f6f8 	udiv	r6, r4, r8
 8000bfa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bfe:	fb08 4416 	mls	r4, r8, r6, r4
 8000c02:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c06:	fb07 f006 	mul.w	r0, r7, r6
 8000c0a:	4298      	cmp	r0, r3
 8000c0c:	d908      	bls.n	8000c20 <__udivmoddi4+0x11c>
 8000c0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c12:	f106 34ff 	add.w	r4, r6, #4294967295
 8000c16:	d202      	bcs.n	8000c1e <__udivmoddi4+0x11a>
 8000c18:	4298      	cmp	r0, r3
 8000c1a:	f200 80cd 	bhi.w	8000db8 <__udivmoddi4+0x2b4>
 8000c1e:	4626      	mov	r6, r4
 8000c20:	1a1c      	subs	r4, r3, r0
 8000c22:	fa1f f38e 	uxth.w	r3, lr
 8000c26:	fbb4 f0f8 	udiv	r0, r4, r8
 8000c2a:	fb08 4410 	mls	r4, r8, r0, r4
 8000c2e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c32:	fb00 f707 	mul.w	r7, r0, r7
 8000c36:	429f      	cmp	r7, r3
 8000c38:	d908      	bls.n	8000c4c <__udivmoddi4+0x148>
 8000c3a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c3e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c42:	d202      	bcs.n	8000c4a <__udivmoddi4+0x146>
 8000c44:	429f      	cmp	r7, r3
 8000c46:	f200 80b0 	bhi.w	8000daa <__udivmoddi4+0x2a6>
 8000c4a:	4620      	mov	r0, r4
 8000c4c:	1bdb      	subs	r3, r3, r7
 8000c4e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c52:	e7a5      	b.n	8000ba0 <__udivmoddi4+0x9c>
 8000c54:	f1c1 0620 	rsb	r6, r1, #32
 8000c58:	408b      	lsls	r3, r1
 8000c5a:	fa22 f706 	lsr.w	r7, r2, r6
 8000c5e:	431f      	orrs	r7, r3
 8000c60:	fa20 fc06 	lsr.w	ip, r0, r6
 8000c64:	fa04 f301 	lsl.w	r3, r4, r1
 8000c68:	ea43 030c 	orr.w	r3, r3, ip
 8000c6c:	40f4      	lsrs	r4, r6
 8000c6e:	fa00 f801 	lsl.w	r8, r0, r1
 8000c72:	0c38      	lsrs	r0, r7, #16
 8000c74:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c78:	fbb4 fef0 	udiv	lr, r4, r0
 8000c7c:	fa1f fc87 	uxth.w	ip, r7
 8000c80:	fb00 441e 	mls	r4, r0, lr, r4
 8000c84:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c88:	fb0e f90c 	mul.w	r9, lr, ip
 8000c8c:	45a1      	cmp	r9, r4
 8000c8e:	fa02 f201 	lsl.w	r2, r2, r1
 8000c92:	d90a      	bls.n	8000caa <__udivmoddi4+0x1a6>
 8000c94:	193c      	adds	r4, r7, r4
 8000c96:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000c9a:	f080 8084 	bcs.w	8000da6 <__udivmoddi4+0x2a2>
 8000c9e:	45a1      	cmp	r9, r4
 8000ca0:	f240 8081 	bls.w	8000da6 <__udivmoddi4+0x2a2>
 8000ca4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ca8:	443c      	add	r4, r7
 8000caa:	eba4 0409 	sub.w	r4, r4, r9
 8000cae:	fa1f f983 	uxth.w	r9, r3
 8000cb2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000cb6:	fb00 4413 	mls	r4, r0, r3, r4
 8000cba:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000cbe:	fb03 fc0c 	mul.w	ip, r3, ip
 8000cc2:	45a4      	cmp	ip, r4
 8000cc4:	d907      	bls.n	8000cd6 <__udivmoddi4+0x1d2>
 8000cc6:	193c      	adds	r4, r7, r4
 8000cc8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000ccc:	d267      	bcs.n	8000d9e <__udivmoddi4+0x29a>
 8000cce:	45a4      	cmp	ip, r4
 8000cd0:	d965      	bls.n	8000d9e <__udivmoddi4+0x29a>
 8000cd2:	3b02      	subs	r3, #2
 8000cd4:	443c      	add	r4, r7
 8000cd6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000cda:	fba0 9302 	umull	r9, r3, r0, r2
 8000cde:	eba4 040c 	sub.w	r4, r4, ip
 8000ce2:	429c      	cmp	r4, r3
 8000ce4:	46ce      	mov	lr, r9
 8000ce6:	469c      	mov	ip, r3
 8000ce8:	d351      	bcc.n	8000d8e <__udivmoddi4+0x28a>
 8000cea:	d04e      	beq.n	8000d8a <__udivmoddi4+0x286>
 8000cec:	b155      	cbz	r5, 8000d04 <__udivmoddi4+0x200>
 8000cee:	ebb8 030e 	subs.w	r3, r8, lr
 8000cf2:	eb64 040c 	sbc.w	r4, r4, ip
 8000cf6:	fa04 f606 	lsl.w	r6, r4, r6
 8000cfa:	40cb      	lsrs	r3, r1
 8000cfc:	431e      	orrs	r6, r3
 8000cfe:	40cc      	lsrs	r4, r1
 8000d00:	e9c5 6400 	strd	r6, r4, [r5]
 8000d04:	2100      	movs	r1, #0
 8000d06:	e750      	b.n	8000baa <__udivmoddi4+0xa6>
 8000d08:	f1c2 0320 	rsb	r3, r2, #32
 8000d0c:	fa20 f103 	lsr.w	r1, r0, r3
 8000d10:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d14:	fa24 f303 	lsr.w	r3, r4, r3
 8000d18:	4094      	lsls	r4, r2
 8000d1a:	430c      	orrs	r4, r1
 8000d1c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d20:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d24:	fa1f f78c 	uxth.w	r7, ip
 8000d28:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d2c:	fb08 3110 	mls	r1, r8, r0, r3
 8000d30:	0c23      	lsrs	r3, r4, #16
 8000d32:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d36:	fb00 f107 	mul.w	r1, r0, r7
 8000d3a:	4299      	cmp	r1, r3
 8000d3c:	d908      	bls.n	8000d50 <__udivmoddi4+0x24c>
 8000d3e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d42:	f100 36ff 	add.w	r6, r0, #4294967295
 8000d46:	d22c      	bcs.n	8000da2 <__udivmoddi4+0x29e>
 8000d48:	4299      	cmp	r1, r3
 8000d4a:	d92a      	bls.n	8000da2 <__udivmoddi4+0x29e>
 8000d4c:	3802      	subs	r0, #2
 8000d4e:	4463      	add	r3, ip
 8000d50:	1a5b      	subs	r3, r3, r1
 8000d52:	b2a4      	uxth	r4, r4
 8000d54:	fbb3 f1f8 	udiv	r1, r3, r8
 8000d58:	fb08 3311 	mls	r3, r8, r1, r3
 8000d5c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d60:	fb01 f307 	mul.w	r3, r1, r7
 8000d64:	42a3      	cmp	r3, r4
 8000d66:	d908      	bls.n	8000d7a <__udivmoddi4+0x276>
 8000d68:	eb1c 0404 	adds.w	r4, ip, r4
 8000d6c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000d70:	d213      	bcs.n	8000d9a <__udivmoddi4+0x296>
 8000d72:	42a3      	cmp	r3, r4
 8000d74:	d911      	bls.n	8000d9a <__udivmoddi4+0x296>
 8000d76:	3902      	subs	r1, #2
 8000d78:	4464      	add	r4, ip
 8000d7a:	1ae4      	subs	r4, r4, r3
 8000d7c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d80:	e739      	b.n	8000bf6 <__udivmoddi4+0xf2>
 8000d82:	4604      	mov	r4, r0
 8000d84:	e6f0      	b.n	8000b68 <__udivmoddi4+0x64>
 8000d86:	4608      	mov	r0, r1
 8000d88:	e706      	b.n	8000b98 <__udivmoddi4+0x94>
 8000d8a:	45c8      	cmp	r8, r9
 8000d8c:	d2ae      	bcs.n	8000cec <__udivmoddi4+0x1e8>
 8000d8e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d92:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d96:	3801      	subs	r0, #1
 8000d98:	e7a8      	b.n	8000cec <__udivmoddi4+0x1e8>
 8000d9a:	4631      	mov	r1, r6
 8000d9c:	e7ed      	b.n	8000d7a <__udivmoddi4+0x276>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	e799      	b.n	8000cd6 <__udivmoddi4+0x1d2>
 8000da2:	4630      	mov	r0, r6
 8000da4:	e7d4      	b.n	8000d50 <__udivmoddi4+0x24c>
 8000da6:	46d6      	mov	lr, sl
 8000da8:	e77f      	b.n	8000caa <__udivmoddi4+0x1a6>
 8000daa:	4463      	add	r3, ip
 8000dac:	3802      	subs	r0, #2
 8000dae:	e74d      	b.n	8000c4c <__udivmoddi4+0x148>
 8000db0:	4606      	mov	r6, r0
 8000db2:	4623      	mov	r3, r4
 8000db4:	4608      	mov	r0, r1
 8000db6:	e70f      	b.n	8000bd8 <__udivmoddi4+0xd4>
 8000db8:	3e02      	subs	r6, #2
 8000dba:	4463      	add	r3, ip
 8000dbc:	e730      	b.n	8000c20 <__udivmoddi4+0x11c>
 8000dbe:	bf00      	nop

08000dc0 <__aeabi_idiv0>:
 8000dc0:	4770      	bx	lr
 8000dc2:	bf00      	nop

08000dc4 <Get_Mode>:

uint8_t curr_mode = 0;
volatile int timer_count = 0;
float turning_time = 0;

int Get_Mode(int MSB_state, int LSB_state) {
 8000dc4:	b480      	push	{r7}
 8000dc6:	b085      	sub	sp, #20
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
 8000dcc:	6039      	str	r1, [r7, #0]
	static const int id_lookup[4] = {MANUAL_ID, CIRCLE_ID, SQUARE_ID, BACK_FORTH_ID};
	int bin = ((MSB_state & 1) << 1) | (LSB_state & 1);
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	005b      	lsls	r3, r3, #1
 8000dd2:	f003 0202 	and.w	r2, r3, #2
 8000dd6:	683b      	ldr	r3, [r7, #0]
 8000dd8:	f003 0301 	and.w	r3, r3, #1
 8000ddc:	4313      	orrs	r3, r2
 8000dde:	60fb      	str	r3, [r7, #12]
	return id_lookup[bin];
 8000de0:	4a04      	ldr	r2, [pc, #16]	@ (8000df4 <Get_Mode+0x30>)
 8000de2:	68fb      	ldr	r3, [r7, #12]
 8000de4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8000de8:	4618      	mov	r0, r3
 8000dea:	3714      	adds	r7, #20
 8000dec:	46bd      	mov	sp, r7
 8000dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df2:	4770      	bx	lr
 8000df4:	080045b8 	.word	0x080045b8

08000df8 <Auto_Angle>:
			break;
	}
	return str;
}

void Auto_Angle(float value, TIM_HandleTypeDef* htim3) {
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b082      	sub	sp, #8
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	ed87 0a01 	vstr	s0, [r7, #4]
 8000e02:	6038      	str	r0, [r7, #0]
    // Calculate the duration for the turn
    turning_time = fabs(value) * TRACK_WIDTH;
 8000e04:	edd7 7a01 	vldr	s15, [r7, #4]
 8000e08:	eef0 7ae7 	vabs.f32	s15, s15
 8000e0c:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 8000ee8 <Auto_Angle+0xf0>
 8000e10:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000e14:	4b35      	ldr	r3, [pc, #212]	@ (8000eec <Auto_Angle+0xf4>)
 8000e16:	edc3 7a00 	vstr	s15, [r3]

    // Determine direction of turn
    if (value > 0) {
 8000e1a:	edd7 7a01 	vldr	s15, [r7, #4]
 8000e1e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000e22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e26:	dd18      	ble.n	8000e5a <Auto_Angle+0x62>
    	turning_time /= (360.0 * CLOCKWISE_FACTOR);
 8000e28:	4b30      	ldr	r3, [pc, #192]	@ (8000eec <Auto_Angle+0xf4>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f7ff fb4f 	bl	80004d0 <__aeabi_f2d>
 8000e32:	a329      	add	r3, pc, #164	@ (adr r3, 8000ed8 <Auto_Angle+0xe0>)
 8000e34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e38:	f7ff fccc 	bl	80007d4 <__aeabi_ddiv>
 8000e3c:	4602      	mov	r2, r0
 8000e3e:	460b      	mov	r3, r1
 8000e40:	4610      	mov	r0, r2
 8000e42:	4619      	mov	r1, r3
 8000e44:	f7ff fdf6 	bl	8000a34 <__aeabi_d2f>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	4a28      	ldr	r2, [pc, #160]	@ (8000eec <Auto_Angle+0xf4>)
 8000e4c:	6013      	str	r3, [r2, #0]
        Droite(BASE_SPEED, htim3);
 8000e4e:	6839      	ldr	r1, [r7, #0]
 8000e50:	f44f 70e1 	mov.w	r0, #450	@ 0x1c2
 8000e54:	f000 f988 	bl	8001168 <Droite>
 8000e58:	e017      	b.n	8000e8a <Auto_Angle+0x92>
    } else {
    	turning_time /= (360.0 * COUNTER_CLW_FACTOR);
 8000e5a:	4b24      	ldr	r3, [pc, #144]	@ (8000eec <Auto_Angle+0xf4>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f7ff fb36 	bl	80004d0 <__aeabi_f2d>
 8000e64:	a31e      	add	r3, pc, #120	@ (adr r3, 8000ee0 <Auto_Angle+0xe8>)
 8000e66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e6a:	f7ff fcb3 	bl	80007d4 <__aeabi_ddiv>
 8000e6e:	4602      	mov	r2, r0
 8000e70:	460b      	mov	r3, r1
 8000e72:	4610      	mov	r0, r2
 8000e74:	4619      	mov	r1, r3
 8000e76:	f7ff fddd 	bl	8000a34 <__aeabi_d2f>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	4a1b      	ldr	r2, [pc, #108]	@ (8000eec <Auto_Angle+0xf4>)
 8000e7e:	6013      	str	r3, [r2, #0]
    	Gauche(BASE_SPEED, htim3);
 8000e80:	6839      	ldr	r1, [r7, #0]
 8000e82:	f44f 70e1 	mov.w	r0, #450	@ 0x1c2
 8000e86:	f000 f9a7 	bl	80011d8 <Gauche>
    }

    // Convert turning time in µs
    //turning_time = 20;
    turning_time *= 1e6;
 8000e8a:	4b18      	ldr	r3, [pc, #96]	@ (8000eec <Auto_Angle+0xf4>)
 8000e8c:	edd3 7a00 	vldr	s15, [r3]
 8000e90:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8000ef0 <Auto_Angle+0xf8>
 8000e94:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000e98:	4b14      	ldr	r3, [pc, #80]	@ (8000eec <Auto_Angle+0xf4>)
 8000e9a:	edc3 7a00 	vstr	s15, [r3]

    // Delay for calculated turning time
    HAL_TIM_Base_Start_IT(&htim7);
 8000e9e:	4815      	ldr	r0, [pc, #84]	@ (8000ef4 <Auto_Angle+0xfc>)
 8000ea0:	f002 f880 	bl	8002fa4 <HAL_TIM_Base_Start_IT>
    while(timer_count < (int)turning_time) {
 8000ea4:	bf00      	nop
 8000ea6:	4b11      	ldr	r3, [pc, #68]	@ (8000eec <Auto_Angle+0xf4>)
 8000ea8:	edd3 7a00 	vldr	s15, [r3]
 8000eac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000eb0:	ee17 2a90 	vmov	r2, s15
 8000eb4:	4b10      	ldr	r3, [pc, #64]	@ (8000ef8 <Auto_Angle+0x100>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	429a      	cmp	r2, r3
 8000eba:	dcf4      	bgt.n	8000ea6 <Auto_Angle+0xae>
    	// Wait
    }
    HAL_TIM_Base_Stop_IT(&htim7);
 8000ebc:	480d      	ldr	r0, [pc, #52]	@ (8000ef4 <Auto_Angle+0xfc>)
 8000ebe:	f002 f8e1 	bl	8003084 <HAL_TIM_Base_Stop_IT>

    // Reset temporal counter
    timer_count = 0;
 8000ec2:	4b0d      	ldr	r3, [pc, #52]	@ (8000ef8 <Auto_Angle+0x100>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	601a      	str	r2, [r3, #0]

    // Stop the motors
    Stop(htim3);
 8000ec8:	6838      	ldr	r0, [r7, #0]
 8000eca:	f000 f9bd 	bl	8001248 <Stop>
}
 8000ece:	bf00      	nop
 8000ed0:	3708      	adds	r7, #8
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	b020c49b 	.word	0xb020c49b
 8000edc:	40d2cab2 	.word	0x40d2cab2
 8000ee0:	126e978d 	.word	0x126e978d
 8000ee4:	402fc083 	.word	0x402fc083
 8000ee8:	43880000 	.word	0x43880000
 8000eec:	20000034 	.word	0x20000034
 8000ef0:	49742400 	.word	0x49742400
 8000ef4:	200000c8 	.word	0x200000c8
 8000ef8:	20000030 	.word	0x20000030
 8000efc:	00000000 	.word	0x00000000

08000f00 <Auto_Line>:

void Auto_Line(int dist, int min_speed, int max_speed, TIM_HandleTypeDef* htim3) {
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b08c      	sub	sp, #48	@ 0x30
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	60f8      	str	r0, [r7, #12]
 8000f08:	60b9      	str	r1, [r7, #8]
 8000f0a:	607a      	str	r2, [r7, #4]
 8000f0c:	603b      	str	r3, [r7, #0]
    // Calculate total steps required
    int total_steps = (int)(dist / TRACK_RESOLUTION);
 8000f0e:	68f8      	ldr	r0, [r7, #12]
 8000f10:	f7ff facc 	bl	80004ac <__aeabi_i2d>
 8000f14:	a34f      	add	r3, pc, #316	@ (adr r3, 8001054 <Auto_Line+0x154>)
 8000f16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f1a:	f7ff fc5b 	bl	80007d4 <__aeabi_ddiv>
 8000f1e:	4602      	mov	r2, r0
 8000f20:	460b      	mov	r3, r1
 8000f22:	4610      	mov	r0, r2
 8000f24:	4619      	mov	r1, r3
 8000f26:	f7ff fd3d 	bl	80009a4 <__aeabi_d2iz>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	623b      	str	r3, [r7, #32]

    // Split into acceleration, constant speed, and deceleration
    int accel_steps = 2 * (total_steps / 5);
 8000f2e:	6a3b      	ldr	r3, [r7, #32]
 8000f30:	4a45      	ldr	r2, [pc, #276]	@ (8001048 <Auto_Line+0x148>)
 8000f32:	fb82 1203 	smull	r1, r2, r2, r3
 8000f36:	1052      	asrs	r2, r2, #1
 8000f38:	17db      	asrs	r3, r3, #31
 8000f3a:	1ad3      	subs	r3, r2, r3
 8000f3c:	005b      	lsls	r3, r3, #1
 8000f3e:	61fb      	str	r3, [r7, #28]
    int decel_steps = accel_steps;
 8000f40:	69fb      	ldr	r3, [r7, #28]
 8000f42:	61bb      	str	r3, [r7, #24]
    int mid_steps = total_steps - accel_steps - decel_steps;
 8000f44:	6a3a      	ldr	r2, [r7, #32]
 8000f46:	69fb      	ldr	r3, [r7, #28]
 8000f48:	1ad2      	subs	r2, r2, r3
 8000f4a:	69bb      	ldr	r3, [r7, #24]
 8000f4c:	1ad3      	subs	r3, r2, r3
 8000f4e:	617b      	str	r3, [r7, #20]

    // Initialize speed
    int current_speed = min_speed;
 8000f50:	68bb      	ldr	r3, [r7, #8]
 8000f52:	613b      	str	r3, [r7, #16]

    // Acceleration phase
    for (int step = 0; step < accel_steps; step++) {
 8000f54:	2300      	movs	r3, #0
 8000f56:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000f58:	e022      	b.n	8000fa0 <Auto_Line+0xa0>
        current_speed = min_speed + (max_speed - min_speed) * step / accel_steps;
 8000f5a:	687a      	ldr	r2, [r7, #4]
 8000f5c:	68bb      	ldr	r3, [r7, #8]
 8000f5e:	1ad3      	subs	r3, r2, r3
 8000f60:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000f62:	fb03 f202 	mul.w	r2, r3, r2
 8000f66:	69fb      	ldr	r3, [r7, #28]
 8000f68:	fb92 f3f3 	sdiv	r3, r2, r3
 8000f6c:	68ba      	ldr	r2, [r7, #8]
 8000f6e:	4413      	add	r3, r2
 8000f70:	613b      	str	r3, [r7, #16]
        Avancer(current_speed, htim3);
 8000f72:	6839      	ldr	r1, [r7, #0]
 8000f74:	6938      	ldr	r0, [r7, #16]
 8000f76:	f000 f8bf 	bl	80010f8 <Avancer>
        HAL_TIM_Base_Start_IT(&htim7);
 8000f7a:	4834      	ldr	r0, [pc, #208]	@ (800104c <Auto_Line+0x14c>)
 8000f7c:	f002 f812 	bl	8002fa4 <HAL_TIM_Base_Start_IT>
        while(timer_count < UPDATE_INTERVAL * 1e3) {
 8000f80:	bf00      	nop
 8000f82:	4b33      	ldr	r3, [pc, #204]	@ (8001050 <Auto_Line+0x150>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	f24c 324f 	movw	r2, #49999	@ 0xc34f
 8000f8a:	4293      	cmp	r3, r2
 8000f8c:	ddf9      	ble.n	8000f82 <Auto_Line+0x82>
        	// Wait for update interval
        }
        HAL_TIM_Base_Stop_IT(&htim7);
 8000f8e:	482f      	ldr	r0, [pc, #188]	@ (800104c <Auto_Line+0x14c>)
 8000f90:	f002 f878 	bl	8003084 <HAL_TIM_Base_Stop_IT>
        timer_count = 0;
 8000f94:	4b2e      	ldr	r3, [pc, #184]	@ (8001050 <Auto_Line+0x150>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	601a      	str	r2, [r3, #0]
    for (int step = 0; step < accel_steps; step++) {
 8000f9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000f9c:	3301      	adds	r3, #1
 8000f9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000fa0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000fa2:	69fb      	ldr	r3, [r7, #28]
 8000fa4:	429a      	cmp	r2, r3
 8000fa6:	dbd8      	blt.n	8000f5a <Auto_Line+0x5a>
    }

    // Constant speed phase
    for (int step = 0; step < mid_steps; step++) {
 8000fa8:	2300      	movs	r3, #0
 8000faa:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000fac:	e016      	b.n	8000fdc <Auto_Line+0xdc>
    	Avancer(max_speed, htim3);
 8000fae:	6839      	ldr	r1, [r7, #0]
 8000fb0:	6878      	ldr	r0, [r7, #4]
 8000fb2:	f000 f8a1 	bl	80010f8 <Avancer>
    	HAL_TIM_Base_Start_IT(&htim7);
 8000fb6:	4825      	ldr	r0, [pc, #148]	@ (800104c <Auto_Line+0x14c>)
 8000fb8:	f001 fff4 	bl	8002fa4 <HAL_TIM_Base_Start_IT>
    	while(timer_count < UPDATE_INTERVAL * 1e3) {
 8000fbc:	bf00      	nop
 8000fbe:	4b24      	ldr	r3, [pc, #144]	@ (8001050 <Auto_Line+0x150>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	f24c 324f 	movw	r2, #49999	@ 0xc34f
 8000fc6:	4293      	cmp	r3, r2
 8000fc8:	ddf9      	ble.n	8000fbe <Auto_Line+0xbe>
    		// Wait for update interval
    	}
    	HAL_TIM_Base_Stop_IT(&htim7);
 8000fca:	4820      	ldr	r0, [pc, #128]	@ (800104c <Auto_Line+0x14c>)
 8000fcc:	f002 f85a 	bl	8003084 <HAL_TIM_Base_Stop_IT>
    	timer_count = 0;
 8000fd0:	4b1f      	ldr	r3, [pc, #124]	@ (8001050 <Auto_Line+0x150>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	601a      	str	r2, [r3, #0]
    for (int step = 0; step < mid_steps; step++) {
 8000fd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000fd8:	3301      	adds	r3, #1
 8000fda:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000fdc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000fde:	697b      	ldr	r3, [r7, #20]
 8000fe0:	429a      	cmp	r2, r3
 8000fe2:	dbe4      	blt.n	8000fae <Auto_Line+0xae>
    }

    // Deceleration phase
    for (int step = 0; step < decel_steps; step++) {
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	627b      	str	r3, [r7, #36]	@ 0x24
 8000fe8:	e022      	b.n	8001030 <Auto_Line+0x130>
        current_speed = max_speed - (max_speed - min_speed) * step / decel_steps;
 8000fea:	687a      	ldr	r2, [r7, #4]
 8000fec:	68bb      	ldr	r3, [r7, #8]
 8000fee:	1ad3      	subs	r3, r2, r3
 8000ff0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000ff2:	fb03 f202 	mul.w	r2, r3, r2
 8000ff6:	69bb      	ldr	r3, [r7, #24]
 8000ff8:	fb92 f3f3 	sdiv	r3, r2, r3
 8000ffc:	687a      	ldr	r2, [r7, #4]
 8000ffe:	1ad3      	subs	r3, r2, r3
 8001000:	613b      	str	r3, [r7, #16]
        Avancer(current_speed, htim3);
 8001002:	6839      	ldr	r1, [r7, #0]
 8001004:	6938      	ldr	r0, [r7, #16]
 8001006:	f000 f877 	bl	80010f8 <Avancer>
        HAL_TIM_Base_Start_IT(&htim7);
 800100a:	4810      	ldr	r0, [pc, #64]	@ (800104c <Auto_Line+0x14c>)
 800100c:	f001 ffca 	bl	8002fa4 <HAL_TIM_Base_Start_IT>
        while(timer_count < UPDATE_INTERVAL * 1e3) {
 8001010:	bf00      	nop
 8001012:	4b0f      	ldr	r3, [pc, #60]	@ (8001050 <Auto_Line+0x150>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	f24c 324f 	movw	r2, #49999	@ 0xc34f
 800101a:	4293      	cmp	r3, r2
 800101c:	ddf9      	ble.n	8001012 <Auto_Line+0x112>
        	// Wait for update interval
        }
        HAL_TIM_Base_Stop_IT(&htim7);
 800101e:	480b      	ldr	r0, [pc, #44]	@ (800104c <Auto_Line+0x14c>)
 8001020:	f002 f830 	bl	8003084 <HAL_TIM_Base_Stop_IT>
        timer_count = 0;
 8001024:	4b0a      	ldr	r3, [pc, #40]	@ (8001050 <Auto_Line+0x150>)
 8001026:	2200      	movs	r2, #0
 8001028:	601a      	str	r2, [r3, #0]
    for (int step = 0; step < decel_steps; step++) {
 800102a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800102c:	3301      	adds	r3, #1
 800102e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001030:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001032:	69bb      	ldr	r3, [r7, #24]
 8001034:	429a      	cmp	r2, r3
 8001036:	dbd8      	blt.n	8000fea <Auto_Line+0xea>
    }

    // Stop the robot
    Stop(htim3);
 8001038:	6838      	ldr	r0, [r7, #0]
 800103a:	f000 f905 	bl	8001248 <Stop>
}
 800103e:	bf00      	nop
 8001040:	3730      	adds	r7, #48	@ 0x30
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	66666667 	.word	0x66666667
 800104c:	200000c8 	.word	0x200000c8
 8001050:	20000030 	.word	0x20000030
 8001054:	cccccccd 	.word	0xcccccccd
 8001058:	3ff4cccc 	.word	0x3ff4cccc

0800105c <Auto_Circle>:

void Auto_Circle(TIM_HandleTypeDef* htim3) {
 800105c:	b480      	push	{r7}
 800105e:	b083      	sub	sp, #12
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]

}
 8001064:	bf00      	nop
 8001066:	370c      	adds	r7, #12
 8001068:	46bd      	mov	sp, r7
 800106a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106e:	4770      	bx	lr

08001070 <Auto_Back_Forth>:

void Auto_Back_Forth(TIM_HandleTypeDef* htim3) {
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
    // Move forward 1 meter
    Auto_Line(DISTANCE, BASE_SPEED, BASE_SPEED, htim3);
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	f44f 72e1 	mov.w	r2, #450	@ 0x1c2
 800107e:	f44f 71e1 	mov.w	r1, #450	@ 0x1c2
 8001082:	20c8      	movs	r0, #200	@ 0xc8
 8001084:	f7ff ff3c 	bl	8000f00 <Auto_Line>

    // Turn 180 degrees
    Auto_Angle(180.0, htim3);
 8001088:	6878      	ldr	r0, [r7, #4]
 800108a:	ed9f 0a0a 	vldr	s0, [pc, #40]	@ 80010b4 <Auto_Back_Forth+0x44>
 800108e:	f7ff feb3 	bl	8000df8 <Auto_Angle>

    // Move backward 1 meter
    Auto_Line(DISTANCE, BASE_SPEED, BASE_SPEED, htim3);
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	f44f 72e1 	mov.w	r2, #450	@ 0x1c2
 8001098:	f44f 71e1 	mov.w	r1, #450	@ 0x1c2
 800109c:	20c8      	movs	r0, #200	@ 0xc8
 800109e:	f7ff ff2f 	bl	8000f00 <Auto_Line>

    // Turn 180 degrees again to face the original direction
    Auto_Angle(180.0, htim3);
 80010a2:	6878      	ldr	r0, [r7, #4]
 80010a4:	ed9f 0a03 	vldr	s0, [pc, #12]	@ 80010b4 <Auto_Back_Forth+0x44>
 80010a8:	f7ff fea6 	bl	8000df8 <Auto_Angle>
}
 80010ac:	bf00      	nop
 80010ae:	3708      	adds	r7, #8
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	43340000 	.word	0x43340000

080010b8 <Auto_Square>:

void Auto_Square(TIM_HandleTypeDef* htim3) {
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b084      	sub	sp, #16
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
    // Move forward and turn 90 degrees four times
    for (int i = 0; i < 4; i++) {
 80010c0:	2300      	movs	r3, #0
 80010c2:	60fb      	str	r3, [r7, #12]
 80010c4:	e00e      	b.n	80010e4 <Auto_Square+0x2c>
        Auto_Line(DISTANCE, (BASE_SPEED * 0.333), BASE_SPEED, htim3);
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	f44f 72e1 	mov.w	r2, #450	@ 0x1c2
 80010cc:	2195      	movs	r1, #149	@ 0x95
 80010ce:	20c8      	movs	r0, #200	@ 0xc8
 80010d0:	f7ff ff16 	bl	8000f00 <Auto_Line>
        Auto_Angle(90.0, htim3);
 80010d4:	6878      	ldr	r0, [r7, #4]
 80010d6:	ed9f 0a07 	vldr	s0, [pc, #28]	@ 80010f4 <Auto_Square+0x3c>
 80010da:	f7ff fe8d 	bl	8000df8 <Auto_Angle>
    for (int i = 0; i < 4; i++) {
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	3301      	adds	r3, #1
 80010e2:	60fb      	str	r3, [r7, #12]
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	2b03      	cmp	r3, #3
 80010e8:	dded      	ble.n	80010c6 <Auto_Square+0xe>
    }
}
 80010ea:	bf00      	nop
 80010ec:	bf00      	nop
 80010ee:	3710      	adds	r7, #16
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	42b40000 	.word	0x42b40000

080010f8 <Avancer>:
 *      Author: sebas
 */

#include "gestion_moteurs.h"

void Avancer(int Pulse, TIM_HandleTypeDef* htim3){
 80010f8:	b590      	push	{r4, r7, lr}
 80010fa:	b083      	sub	sp, #12
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
 8001100:	6039      	str	r1, [r7, #0]

	htim3->Instance -> CCR2 = 0;
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	2200      	movs	r2, #0
 8001108:	639a      	str	r2, [r3, #56]	@ 0x38
	htim3->Instance -> CCR4 = 0;
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	2200      	movs	r2, #0
 8001110:	641a      	str	r2, [r3, #64]	@ 0x40

	if(Pulse > 499){
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001118:	db02      	blt.n	8001120 <Avancer+0x28>
		Pulse = 499;
 800111a:	f240 13f3 	movw	r3, #499	@ 0x1f3
 800111e:	607b      	str	r3, [r7, #4]
	}

	htim3->Instance -> CCR1 = Pulse;
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	687a      	ldr	r2, [r7, #4]
 8001126:	635a      	str	r2, [r3, #52]	@ 0x34
	htim3->Instance -> CCR3 = htim3->Instance -> CCR1 * 0.9;
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800112e:	4618      	mov	r0, r3
 8001130:	f7ff f9ac 	bl	800048c <__aeabi_ui2d>
 8001134:	a30a      	add	r3, pc, #40	@ (adr r3, 8001160 <Avancer+0x68>)
 8001136:	e9d3 2300 	ldrd	r2, r3, [r3]
 800113a:	f7ff fa21 	bl	8000580 <__aeabi_dmul>
 800113e:	4602      	mov	r2, r0
 8001140:	460b      	mov	r3, r1
 8001142:	4610      	mov	r0, r2
 8001144:	4619      	mov	r1, r3
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	681c      	ldr	r4, [r3, #0]
 800114a:	f7ff fc53 	bl	80009f4 <__aeabi_d2uiz>
 800114e:	4603      	mov	r3, r0
 8001150:	63e3      	str	r3, [r4, #60]	@ 0x3c

	return;
 8001152:	bf00      	nop
}
 8001154:	370c      	adds	r7, #12
 8001156:	46bd      	mov	sp, r7
 8001158:	bd90      	pop	{r4, r7, pc}
 800115a:	bf00      	nop
 800115c:	f3af 8000 	nop.w
 8001160:	cccccccd 	.word	0xcccccccd
 8001164:	3feccccc 	.word	0x3feccccc

08001168 <Droite>:

void Droite(int Pulse, TIM_HandleTypeDef* htim3){
 8001168:	b590      	push	{r4, r7, lr}
 800116a:	b083      	sub	sp, #12
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
 8001170:	6039      	str	r1, [r7, #0]

	htim3->Instance -> CCR2 = 0;
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	2200      	movs	r2, #0
 8001178:	639a      	str	r2, [r3, #56]	@ 0x38
	htim3->Instance -> CCR3 = 0;
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	2200      	movs	r2, #0
 8001180:	63da      	str	r2, [r3, #60]	@ 0x3c

	if(Pulse > 499){
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001188:	db02      	blt.n	8001190 <Droite+0x28>
		Pulse = 499;
 800118a:	f240 13f3 	movw	r3, #499	@ 0x1f3
 800118e:	607b      	str	r3, [r7, #4]
	}
	htim3->Instance -> CCR1 = Pulse;
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	687a      	ldr	r2, [r7, #4]
 8001196:	635a      	str	r2, [r3, #52]	@ 0x34
	htim3->Instance -> CCR4 = htim3->Instance -> CCR1 * 0.9;
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800119e:	4618      	mov	r0, r3
 80011a0:	f7ff f974 	bl	800048c <__aeabi_ui2d>
 80011a4:	a30a      	add	r3, pc, #40	@ (adr r3, 80011d0 <Droite+0x68>)
 80011a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011aa:	f7ff f9e9 	bl	8000580 <__aeabi_dmul>
 80011ae:	4602      	mov	r2, r0
 80011b0:	460b      	mov	r3, r1
 80011b2:	4610      	mov	r0, r2
 80011b4:	4619      	mov	r1, r3
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	681c      	ldr	r4, [r3, #0]
 80011ba:	f7ff fc1b 	bl	80009f4 <__aeabi_d2uiz>
 80011be:	4603      	mov	r3, r0
 80011c0:	6423      	str	r3, [r4, #64]	@ 0x40
}
 80011c2:	bf00      	nop
 80011c4:	370c      	adds	r7, #12
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd90      	pop	{r4, r7, pc}
 80011ca:	bf00      	nop
 80011cc:	f3af 8000 	nop.w
 80011d0:	cccccccd 	.word	0xcccccccd
 80011d4:	3feccccc 	.word	0x3feccccc

080011d8 <Gauche>:

void Gauche(int Pulse, TIM_HandleTypeDef* htim3){
 80011d8:	b590      	push	{r4, r7, lr}
 80011da:	b083      	sub	sp, #12
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
 80011e0:	6039      	str	r1, [r7, #0]

	htim3->Instance -> CCR1 = 0;
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	2200      	movs	r2, #0
 80011e8:	635a      	str	r2, [r3, #52]	@ 0x34
	htim3->Instance -> CCR4 = 0;
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	2200      	movs	r2, #0
 80011f0:	641a      	str	r2, [r3, #64]	@ 0x40

	if(Pulse > 499){
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80011f8:	db02      	blt.n	8001200 <Gauche+0x28>
		Pulse = 499;
 80011fa:	f240 13f3 	movw	r3, #499	@ 0x1f3
 80011fe:	607b      	str	r3, [r7, #4]
	}
	htim3->Instance -> CCR2 = Pulse;
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	687a      	ldr	r2, [r7, #4]
 8001206:	639a      	str	r2, [r3, #56]	@ 0x38
	htim3->Instance -> CCR3 = htim3->Instance -> CCR2 * 0.9;
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800120e:	4618      	mov	r0, r3
 8001210:	f7ff f93c 	bl	800048c <__aeabi_ui2d>
 8001214:	a30a      	add	r3, pc, #40	@ (adr r3, 8001240 <Gauche+0x68>)
 8001216:	e9d3 2300 	ldrd	r2, r3, [r3]
 800121a:	f7ff f9b1 	bl	8000580 <__aeabi_dmul>
 800121e:	4602      	mov	r2, r0
 8001220:	460b      	mov	r3, r1
 8001222:	4610      	mov	r0, r2
 8001224:	4619      	mov	r1, r3
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	681c      	ldr	r4, [r3, #0]
 800122a:	f7ff fbe3 	bl	80009f4 <__aeabi_d2uiz>
 800122e:	4603      	mov	r3, r0
 8001230:	63e3      	str	r3, [r4, #60]	@ 0x3c
}
 8001232:	bf00      	nop
 8001234:	370c      	adds	r7, #12
 8001236:	46bd      	mov	sp, r7
 8001238:	bd90      	pop	{r4, r7, pc}
 800123a:	bf00      	nop
 800123c:	f3af 8000 	nop.w
 8001240:	cccccccd 	.word	0xcccccccd
 8001244:	3feccccc 	.word	0x3feccccc

08001248 <Stop>:
	htim3->Instance -> CCR4 = Pulse;
	htim3->Instance -> CCR2 = htim3->Instance -> CCR4 * 0.95;

	return;
}
void Stop(TIM_HandleTypeDef* htim3){
 8001248:	b480      	push	{r7}
 800124a:	b083      	sub	sp, #12
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
	htim3->Instance -> CCR1 = 0;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	2200      	movs	r2, #0
 8001256:	635a      	str	r2, [r3, #52]	@ 0x34
	htim3->Instance -> CCR2 = 0;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	2200      	movs	r2, #0
 800125e:	639a      	str	r2, [r3, #56]	@ 0x38
	htim3->Instance -> CCR3 = 0;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	2200      	movs	r2, #0
 8001266:	63da      	str	r2, [r3, #60]	@ 0x3c
	htim3->Instance -> CCR4 = 0;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	2200      	movs	r2, #0
 800126e:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001270:	bf00      	nop
 8001272:	370c      	adds	r7, #12
 8001274:	46bd      	mov	sp, r7
 8001276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127a:	4770      	bx	lr

0800127c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001280:	f000 fcf6 	bl	8001c70 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001284:	f000 f856 	bl	8001334 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001288:	f000 f9ee 	bl	8001668 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800128c:	f000 f9c2 	bl	8001614 <MX_USART2_UART_Init>
  MX_TIM6_Init();
 8001290:	f000 f956 	bl	8001540 <MX_TIM6_Init>
  MX_TIM3_Init();
 8001294:	f000 f8bc 	bl	8001410 <MX_TIM3_Init>
  MX_TIM7_Init();
 8001298:	f000 f988 	bl	80015ac <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim6);
 800129c:	4822      	ldr	r0, [pc, #136]	@ (8001328 <main+0xac>)
 800129e:	f001 fe81 	bl	8002fa4 <HAL_TIM_Base_Start_IT>

  if (HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1) != HAL_OK)
 80012a2:	2100      	movs	r1, #0
 80012a4:	4821      	ldr	r0, [pc, #132]	@ (800132c <main+0xb0>)
 80012a6:	f001 ff75 	bl	8003194 <HAL_TIM_PWM_Start>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d001      	beq.n	80012b4 <main+0x38>
  {
      Error_Handler();
 80012b0:	f000 fb1e 	bl	80018f0 <Error_Handler>
  }

  if (HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2) != HAL_OK)
 80012b4:	2104      	movs	r1, #4
 80012b6:	481d      	ldr	r0, [pc, #116]	@ (800132c <main+0xb0>)
 80012b8:	f001 ff6c 	bl	8003194 <HAL_TIM_PWM_Start>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d001      	beq.n	80012c6 <main+0x4a>
  {
      Error_Handler();
 80012c2:	f000 fb15 	bl	80018f0 <Error_Handler>
  }

  if (HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3) != HAL_OK)
 80012c6:	2108      	movs	r1, #8
 80012c8:	4818      	ldr	r0, [pc, #96]	@ (800132c <main+0xb0>)
 80012ca:	f001 ff63 	bl	8003194 <HAL_TIM_PWM_Start>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d001      	beq.n	80012d8 <main+0x5c>
  {
      Error_Handler();
 80012d4:	f000 fb0c 	bl	80018f0 <Error_Handler>
  }

  if (HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4) != HAL_OK)
 80012d8:	210c      	movs	r1, #12
 80012da:	4814      	ldr	r0, [pc, #80]	@ (800132c <main+0xb0>)
 80012dc:	f001 ff5a 	bl	8003194 <HAL_TIM_PWM_Start>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d001      	beq.n	80012ea <main+0x6e>
  {
      Error_Handler();
 80012e6:	f000 fb03 	bl	80018f0 <Error_Handler>
  {

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	if(curr_mode != 0) { 	// Toggle auto mode
 80012ea:	4b11      	ldr	r3, [pc, #68]	@ (8001330 <main+0xb4>)
 80012ec:	781b      	ldrb	r3, [r3, #0]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d0fb      	beq.n	80012ea <main+0x6e>
		switch(curr_mode) {
 80012f2:	4b0f      	ldr	r3, [pc, #60]	@ (8001330 <main+0xb4>)
 80012f4:	781b      	ldrb	r3, [r3, #0]
 80012f6:	2b03      	cmp	r3, #3
 80012f8:	d00e      	beq.n	8001318 <main+0x9c>
 80012fa:	2b03      	cmp	r3, #3
 80012fc:	dc10      	bgt.n	8001320 <main+0xa4>
 80012fe:	2b01      	cmp	r3, #1
 8001300:	d002      	beq.n	8001308 <main+0x8c>
 8001302:	2b02      	cmp	r3, #2
 8001304:	d004      	beq.n	8001310 <main+0x94>
 8001306:	e00b      	b.n	8001320 <main+0xa4>
			case CIRCLE_ID:
				Auto_Circle(&htim3);
 8001308:	4808      	ldr	r0, [pc, #32]	@ (800132c <main+0xb0>)
 800130a:	f7ff fea7 	bl	800105c <Auto_Circle>
				break;
 800130e:	e007      	b.n	8001320 <main+0xa4>
			case BACK_FORTH_ID:
				Auto_Back_Forth(&htim3);
 8001310:	4806      	ldr	r0, [pc, #24]	@ (800132c <main+0xb0>)
 8001312:	f7ff fead 	bl	8001070 <Auto_Back_Forth>
				break;
 8001316:	e003      	b.n	8001320 <main+0xa4>
			case SQUARE_ID:
				Auto_Square(&htim3);
 8001318:	4804      	ldr	r0, [pc, #16]	@ (800132c <main+0xb0>)
 800131a:	f7ff fecd 	bl	80010b8 <Auto_Square>
				break;
 800131e:	bf00      	nop
		}
		curr_mode = 0;	// Return to manual mode after drawing shape
 8001320:	4b03      	ldr	r3, [pc, #12]	@ (8001330 <main+0xb4>)
 8001322:	2200      	movs	r2, #0
 8001324:	701a      	strb	r2, [r3, #0]
	if(curr_mode != 0) { 	// Toggle auto mode
 8001326:	e7e0      	b.n	80012ea <main+0x6e>
 8001328:	20000080 	.word	0x20000080
 800132c:	20000038 	.word	0x20000038
 8001330:	2000002c 	.word	0x2000002c

08001334 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b094      	sub	sp, #80	@ 0x50
 8001338:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800133a:	f107 031c 	add.w	r3, r7, #28
 800133e:	2234      	movs	r2, #52	@ 0x34
 8001340:	2100      	movs	r1, #0
 8001342:	4618      	mov	r0, r3
 8001344:	f003 f900 	bl	8004548 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001348:	f107 0308 	add.w	r3, r7, #8
 800134c:	2200      	movs	r2, #0
 800134e:	601a      	str	r2, [r3, #0]
 8001350:	605a      	str	r2, [r3, #4]
 8001352:	609a      	str	r2, [r3, #8]
 8001354:	60da      	str	r2, [r3, #12]
 8001356:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001358:	2300      	movs	r3, #0
 800135a:	607b      	str	r3, [r7, #4]
 800135c:	4b2a      	ldr	r3, [pc, #168]	@ (8001408 <SystemClock_Config+0xd4>)
 800135e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001360:	4a29      	ldr	r2, [pc, #164]	@ (8001408 <SystemClock_Config+0xd4>)
 8001362:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001366:	6413      	str	r3, [r2, #64]	@ 0x40
 8001368:	4b27      	ldr	r3, [pc, #156]	@ (8001408 <SystemClock_Config+0xd4>)
 800136a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800136c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001370:	607b      	str	r3, [r7, #4]
 8001372:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001374:	2300      	movs	r3, #0
 8001376:	603b      	str	r3, [r7, #0]
 8001378:	4b24      	ldr	r3, [pc, #144]	@ (800140c <SystemClock_Config+0xd8>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001380:	4a22      	ldr	r2, [pc, #136]	@ (800140c <SystemClock_Config+0xd8>)
 8001382:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001386:	6013      	str	r3, [r2, #0]
 8001388:	4b20      	ldr	r3, [pc, #128]	@ (800140c <SystemClock_Config+0xd8>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001390:	603b      	str	r3, [r7, #0]
 8001392:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001394:	2302      	movs	r3, #2
 8001396:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001398:	2301      	movs	r3, #1
 800139a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800139c:	2310      	movs	r3, #16
 800139e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013a0:	2302      	movs	r3, #2
 80013a2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80013a4:	2300      	movs	r3, #0
 80013a6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80013a8:	2310      	movs	r3, #16
 80013aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80013ac:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80013b0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80013b2:	2304      	movs	r3, #4
 80013b4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80013b6:	2302      	movs	r3, #2
 80013b8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80013ba:	2302      	movs	r3, #2
 80013bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013be:	f107 031c 	add.w	r3, r7, #28
 80013c2:	4618      	mov	r0, r3
 80013c4:	f001 fb00 	bl	80029c8 <HAL_RCC_OscConfig>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d001      	beq.n	80013d2 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80013ce:	f000 fa8f 	bl	80018f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013d2:	230f      	movs	r3, #15
 80013d4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013d6:	2302      	movs	r3, #2
 80013d8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013da:	2300      	movs	r3, #0
 80013dc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80013de:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80013e2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013e4:	2300      	movs	r3, #0
 80013e6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80013e8:	f107 0308 	add.w	r3, r7, #8
 80013ec:	2102      	movs	r1, #2
 80013ee:	4618      	mov	r0, r3
 80013f0:	f000 ffa0 	bl	8002334 <HAL_RCC_ClockConfig>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d001      	beq.n	80013fe <SystemClock_Config+0xca>
  {
    Error_Handler();
 80013fa:	f000 fa79 	bl	80018f0 <Error_Handler>
  }
}
 80013fe:	bf00      	nop
 8001400:	3750      	adds	r7, #80	@ 0x50
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	40023800 	.word	0x40023800
 800140c:	40007000 	.word	0x40007000

08001410 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b08e      	sub	sp, #56	@ 0x38
 8001414:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001416:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800141a:	2200      	movs	r2, #0
 800141c:	601a      	str	r2, [r3, #0]
 800141e:	605a      	str	r2, [r3, #4]
 8001420:	609a      	str	r2, [r3, #8]
 8001422:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001424:	f107 0320 	add.w	r3, r7, #32
 8001428:	2200      	movs	r2, #0
 800142a:	601a      	str	r2, [r3, #0]
 800142c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800142e:	1d3b      	adds	r3, r7, #4
 8001430:	2200      	movs	r2, #0
 8001432:	601a      	str	r2, [r3, #0]
 8001434:	605a      	str	r2, [r3, #4]
 8001436:	609a      	str	r2, [r3, #8]
 8001438:	60da      	str	r2, [r3, #12]
 800143a:	611a      	str	r2, [r3, #16]
 800143c:	615a      	str	r2, [r3, #20]
 800143e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001440:	4b3d      	ldr	r3, [pc, #244]	@ (8001538 <MX_TIM3_Init+0x128>)
 8001442:	4a3e      	ldr	r2, [pc, #248]	@ (800153c <MX_TIM3_Init+0x12c>)
 8001444:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84-1;
 8001446:	4b3c      	ldr	r3, [pc, #240]	@ (8001538 <MX_TIM3_Init+0x128>)
 8001448:	2253      	movs	r2, #83	@ 0x53
 800144a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800144c:	4b3a      	ldr	r3, [pc, #232]	@ (8001538 <MX_TIM3_Init+0x128>)
 800144e:	2200      	movs	r2, #0
 8001450:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 500-1;
 8001452:	4b39      	ldr	r3, [pc, #228]	@ (8001538 <MX_TIM3_Init+0x128>)
 8001454:	f240 12f3 	movw	r2, #499	@ 0x1f3
 8001458:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800145a:	4b37      	ldr	r3, [pc, #220]	@ (8001538 <MX_TIM3_Init+0x128>)
 800145c:	2200      	movs	r2, #0
 800145e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001460:	4b35      	ldr	r3, [pc, #212]	@ (8001538 <MX_TIM3_Init+0x128>)
 8001462:	2200      	movs	r2, #0
 8001464:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001466:	4834      	ldr	r0, [pc, #208]	@ (8001538 <MX_TIM3_Init+0x128>)
 8001468:	f001 fd4c 	bl	8002f04 <HAL_TIM_Base_Init>
 800146c:	4603      	mov	r3, r0
 800146e:	2b00      	cmp	r3, #0
 8001470:	d001      	beq.n	8001476 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001472:	f000 fa3d 	bl	80018f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001476:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800147a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800147c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001480:	4619      	mov	r1, r3
 8001482:	482d      	ldr	r0, [pc, #180]	@ (8001538 <MX_TIM3_Init+0x128>)
 8001484:	f002 f900 	bl	8003688 <HAL_TIM_ConfigClockSource>
 8001488:	4603      	mov	r3, r0
 800148a:	2b00      	cmp	r3, #0
 800148c:	d001      	beq.n	8001492 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800148e:	f000 fa2f 	bl	80018f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001492:	4829      	ldr	r0, [pc, #164]	@ (8001538 <MX_TIM3_Init+0x128>)
 8001494:	f001 fe25 	bl	80030e2 <HAL_TIM_PWM_Init>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	d001      	beq.n	80014a2 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800149e:	f000 fa27 	bl	80018f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014a2:	2300      	movs	r3, #0
 80014a4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014a6:	2300      	movs	r3, #0
 80014a8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80014aa:	f107 0320 	add.w	r3, r7, #32
 80014ae:	4619      	mov	r1, r3
 80014b0:	4821      	ldr	r0, [pc, #132]	@ (8001538 <MX_TIM3_Init+0x128>)
 80014b2:	f002 fcf5 	bl	8003ea0 <HAL_TIMEx_MasterConfigSynchronization>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d001      	beq.n	80014c0 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80014bc:	f000 fa18 	bl	80018f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014c0:	2360      	movs	r3, #96	@ 0x60
 80014c2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80014c4:	2300      	movs	r3, #0
 80014c6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014c8:	2300      	movs	r3, #0
 80014ca:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014cc:	2300      	movs	r3, #0
 80014ce:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80014d0:	1d3b      	adds	r3, r7, #4
 80014d2:	2200      	movs	r2, #0
 80014d4:	4619      	mov	r1, r3
 80014d6:	4818      	ldr	r0, [pc, #96]	@ (8001538 <MX_TIM3_Init+0x128>)
 80014d8:	f002 f814 	bl	8003504 <HAL_TIM_PWM_ConfigChannel>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d001      	beq.n	80014e6 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80014e2:	f000 fa05 	bl	80018f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80014e6:	1d3b      	adds	r3, r7, #4
 80014e8:	2204      	movs	r2, #4
 80014ea:	4619      	mov	r1, r3
 80014ec:	4812      	ldr	r0, [pc, #72]	@ (8001538 <MX_TIM3_Init+0x128>)
 80014ee:	f002 f809 	bl	8003504 <HAL_TIM_PWM_ConfigChannel>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d001      	beq.n	80014fc <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 80014f8:	f000 f9fa 	bl	80018f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80014fc:	1d3b      	adds	r3, r7, #4
 80014fe:	2208      	movs	r2, #8
 8001500:	4619      	mov	r1, r3
 8001502:	480d      	ldr	r0, [pc, #52]	@ (8001538 <MX_TIM3_Init+0x128>)
 8001504:	f001 fffe 	bl	8003504 <HAL_TIM_PWM_ConfigChannel>
 8001508:	4603      	mov	r3, r0
 800150a:	2b00      	cmp	r3, #0
 800150c:	d001      	beq.n	8001512 <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 800150e:	f000 f9ef 	bl	80018f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001512:	1d3b      	adds	r3, r7, #4
 8001514:	220c      	movs	r2, #12
 8001516:	4619      	mov	r1, r3
 8001518:	4807      	ldr	r0, [pc, #28]	@ (8001538 <MX_TIM3_Init+0x128>)
 800151a:	f001 fff3 	bl	8003504 <HAL_TIM_PWM_ConfigChannel>
 800151e:	4603      	mov	r3, r0
 8001520:	2b00      	cmp	r3, #0
 8001522:	d001      	beq.n	8001528 <MX_TIM3_Init+0x118>
  {
    Error_Handler();
 8001524:	f000 f9e4 	bl	80018f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001528:	4803      	ldr	r0, [pc, #12]	@ (8001538 <MX_TIM3_Init+0x128>)
 800152a:	f000 fa6b 	bl	8001a04 <HAL_TIM_MspPostInit>

}
 800152e:	bf00      	nop
 8001530:	3738      	adds	r7, #56	@ 0x38
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	20000038 	.word	0x20000038
 800153c:	40000400 	.word	0x40000400

08001540 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b082      	sub	sp, #8
 8001544:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001546:	463b      	mov	r3, r7
 8001548:	2200      	movs	r2, #0
 800154a:	601a      	str	r2, [r3, #0]
 800154c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800154e:	4b15      	ldr	r3, [pc, #84]	@ (80015a4 <MX_TIM6_Init+0x64>)
 8001550:	4a15      	ldr	r2, [pc, #84]	@ (80015a8 <MX_TIM6_Init+0x68>)
 8001552:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 42000-1;
 8001554:	4b13      	ldr	r3, [pc, #76]	@ (80015a4 <MX_TIM6_Init+0x64>)
 8001556:	f24a 420f 	movw	r2, #41999	@ 0xa40f
 800155a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800155c:	4b11      	ldr	r3, [pc, #68]	@ (80015a4 <MX_TIM6_Init+0x64>)
 800155e:	2200      	movs	r2, #0
 8001560:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 200-1;
 8001562:	4b10      	ldr	r3, [pc, #64]	@ (80015a4 <MX_TIM6_Init+0x64>)
 8001564:	22c7      	movs	r2, #199	@ 0xc7
 8001566:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001568:	4b0e      	ldr	r3, [pc, #56]	@ (80015a4 <MX_TIM6_Init+0x64>)
 800156a:	2200      	movs	r2, #0
 800156c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800156e:	480d      	ldr	r0, [pc, #52]	@ (80015a4 <MX_TIM6_Init+0x64>)
 8001570:	f001 fcc8 	bl	8002f04 <HAL_TIM_Base_Init>
 8001574:	4603      	mov	r3, r0
 8001576:	2b00      	cmp	r3, #0
 8001578:	d001      	beq.n	800157e <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 800157a:	f000 f9b9 	bl	80018f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800157e:	2320      	movs	r3, #32
 8001580:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001582:	2300      	movs	r3, #0
 8001584:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001586:	463b      	mov	r3, r7
 8001588:	4619      	mov	r1, r3
 800158a:	4806      	ldr	r0, [pc, #24]	@ (80015a4 <MX_TIM6_Init+0x64>)
 800158c:	f002 fc88 	bl	8003ea0 <HAL_TIMEx_MasterConfigSynchronization>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d001      	beq.n	800159a <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8001596:	f000 f9ab 	bl	80018f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800159a:	bf00      	nop
 800159c:	3708      	adds	r7, #8
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	20000080 	.word	0x20000080
 80015a8:	40001000 	.word	0x40001000

080015ac <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b082      	sub	sp, #8
 80015b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015b2:	463b      	mov	r3, r7
 80015b4:	2200      	movs	r2, #0
 80015b6:	601a      	str	r2, [r3, #0]
 80015b8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80015ba:	4b14      	ldr	r3, [pc, #80]	@ (800160c <MX_TIM7_Init+0x60>)
 80015bc:	4a14      	ldr	r2, [pc, #80]	@ (8001610 <MX_TIM7_Init+0x64>)
 80015be:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 83;
 80015c0:	4b12      	ldr	r3, [pc, #72]	@ (800160c <MX_TIM7_Init+0x60>)
 80015c2:	2253      	movs	r2, #83	@ 0x53
 80015c4:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015c6:	4b11      	ldr	r3, [pc, #68]	@ (800160c <MX_TIM7_Init+0x60>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 9;
 80015cc:	4b0f      	ldr	r3, [pc, #60]	@ (800160c <MX_TIM7_Init+0x60>)
 80015ce:	2209      	movs	r2, #9
 80015d0:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015d2:	4b0e      	ldr	r3, [pc, #56]	@ (800160c <MX_TIM7_Init+0x60>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80015d8:	480c      	ldr	r0, [pc, #48]	@ (800160c <MX_TIM7_Init+0x60>)
 80015da:	f001 fc93 	bl	8002f04 <HAL_TIM_Base_Init>
 80015de:	4603      	mov	r3, r0
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d001      	beq.n	80015e8 <MX_TIM7_Init+0x3c>
  {
    Error_Handler();
 80015e4:	f000 f984 	bl	80018f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015e8:	2300      	movs	r3, #0
 80015ea:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015ec:	2300      	movs	r3, #0
 80015ee:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80015f0:	463b      	mov	r3, r7
 80015f2:	4619      	mov	r1, r3
 80015f4:	4805      	ldr	r0, [pc, #20]	@ (800160c <MX_TIM7_Init+0x60>)
 80015f6:	f002 fc53 	bl	8003ea0 <HAL_TIMEx_MasterConfigSynchronization>
 80015fa:	4603      	mov	r3, r0
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d001      	beq.n	8001604 <MX_TIM7_Init+0x58>
  {
    Error_Handler();
 8001600:	f000 f976 	bl	80018f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001604:	bf00      	nop
 8001606:	3708      	adds	r7, #8
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}
 800160c:	200000c8 	.word	0x200000c8
 8001610:	40001400 	.word	0x40001400

08001614 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001618:	4b11      	ldr	r3, [pc, #68]	@ (8001660 <MX_USART2_UART_Init+0x4c>)
 800161a:	4a12      	ldr	r2, [pc, #72]	@ (8001664 <MX_USART2_UART_Init+0x50>)
 800161c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800161e:	4b10      	ldr	r3, [pc, #64]	@ (8001660 <MX_USART2_UART_Init+0x4c>)
 8001620:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001624:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001626:	4b0e      	ldr	r3, [pc, #56]	@ (8001660 <MX_USART2_UART_Init+0x4c>)
 8001628:	2200      	movs	r2, #0
 800162a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800162c:	4b0c      	ldr	r3, [pc, #48]	@ (8001660 <MX_USART2_UART_Init+0x4c>)
 800162e:	2200      	movs	r2, #0
 8001630:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001632:	4b0b      	ldr	r3, [pc, #44]	@ (8001660 <MX_USART2_UART_Init+0x4c>)
 8001634:	2200      	movs	r2, #0
 8001636:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001638:	4b09      	ldr	r3, [pc, #36]	@ (8001660 <MX_USART2_UART_Init+0x4c>)
 800163a:	220c      	movs	r2, #12
 800163c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800163e:	4b08      	ldr	r3, [pc, #32]	@ (8001660 <MX_USART2_UART_Init+0x4c>)
 8001640:	2200      	movs	r2, #0
 8001642:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001644:	4b06      	ldr	r3, [pc, #24]	@ (8001660 <MX_USART2_UART_Init+0x4c>)
 8001646:	2200      	movs	r2, #0
 8001648:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800164a:	4805      	ldr	r0, [pc, #20]	@ (8001660 <MX_USART2_UART_Init+0x4c>)
 800164c:	f002 fcb8 	bl	8003fc0 <HAL_UART_Init>
 8001650:	4603      	mov	r3, r0
 8001652:	2b00      	cmp	r3, #0
 8001654:	d001      	beq.n	800165a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001656:	f000 f94b 	bl	80018f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800165a:	bf00      	nop
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	20000110 	.word	0x20000110
 8001664:	40004400 	.word	0x40004400

08001668 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b08a      	sub	sp, #40	@ 0x28
 800166c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800166e:	f107 0314 	add.w	r3, r7, #20
 8001672:	2200      	movs	r2, #0
 8001674:	601a      	str	r2, [r3, #0]
 8001676:	605a      	str	r2, [r3, #4]
 8001678:	609a      	str	r2, [r3, #8]
 800167a:	60da      	str	r2, [r3, #12]
 800167c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800167e:	2300      	movs	r3, #0
 8001680:	613b      	str	r3, [r7, #16]
 8001682:	4b42      	ldr	r3, [pc, #264]	@ (800178c <MX_GPIO_Init+0x124>)
 8001684:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001686:	4a41      	ldr	r2, [pc, #260]	@ (800178c <MX_GPIO_Init+0x124>)
 8001688:	f043 0304 	orr.w	r3, r3, #4
 800168c:	6313      	str	r3, [r2, #48]	@ 0x30
 800168e:	4b3f      	ldr	r3, [pc, #252]	@ (800178c <MX_GPIO_Init+0x124>)
 8001690:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001692:	f003 0304 	and.w	r3, r3, #4
 8001696:	613b      	str	r3, [r7, #16]
 8001698:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800169a:	2300      	movs	r3, #0
 800169c:	60fb      	str	r3, [r7, #12]
 800169e:	4b3b      	ldr	r3, [pc, #236]	@ (800178c <MX_GPIO_Init+0x124>)
 80016a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016a2:	4a3a      	ldr	r2, [pc, #232]	@ (800178c <MX_GPIO_Init+0x124>)
 80016a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80016a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80016aa:	4b38      	ldr	r3, [pc, #224]	@ (800178c <MX_GPIO_Init+0x124>)
 80016ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80016b2:	60fb      	str	r3, [r7, #12]
 80016b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016b6:	2300      	movs	r3, #0
 80016b8:	60bb      	str	r3, [r7, #8]
 80016ba:	4b34      	ldr	r3, [pc, #208]	@ (800178c <MX_GPIO_Init+0x124>)
 80016bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016be:	4a33      	ldr	r2, [pc, #204]	@ (800178c <MX_GPIO_Init+0x124>)
 80016c0:	f043 0301 	orr.w	r3, r3, #1
 80016c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80016c6:	4b31      	ldr	r3, [pc, #196]	@ (800178c <MX_GPIO_Init+0x124>)
 80016c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ca:	f003 0301 	and.w	r3, r3, #1
 80016ce:	60bb      	str	r3, [r7, #8]
 80016d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016d2:	2300      	movs	r3, #0
 80016d4:	607b      	str	r3, [r7, #4]
 80016d6:	4b2d      	ldr	r3, [pc, #180]	@ (800178c <MX_GPIO_Init+0x124>)
 80016d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016da:	4a2c      	ldr	r2, [pc, #176]	@ (800178c <MX_GPIO_Init+0x124>)
 80016dc:	f043 0302 	orr.w	r3, r3, #2
 80016e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80016e2:	4b2a      	ldr	r3, [pc, #168]	@ (800178c <MX_GPIO_Init+0x124>)
 80016e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016e6:	f003 0302 	and.w	r3, r3, #2
 80016ea:	607b      	str	r3, [r7, #4]
 80016ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80016ee:	2200      	movs	r2, #0
 80016f0:	2120      	movs	r1, #32
 80016f2:	4827      	ldr	r0, [pc, #156]	@ (8001790 <MX_GPIO_Init+0x128>)
 80016f4:	f000 fdec 	bl	80022d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Blue_Button_Pin */
  GPIO_InitStruct.Pin = Blue_Button_Pin;
 80016f8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80016fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80016fe:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001702:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001704:	2300      	movs	r3, #0
 8001706:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Blue_Button_GPIO_Port, &GPIO_InitStruct);
 8001708:	f107 0314 	add.w	r3, r7, #20
 800170c:	4619      	mov	r1, r3
 800170e:	4821      	ldr	r0, [pc, #132]	@ (8001794 <MX_GPIO_Init+0x12c>)
 8001710:	f000 fc32 	bl	8001f78 <HAL_GPIO_Init>

  /*Configure GPIO pins : Dipswitch_MSB_Pin Dipswitch_LSB_Pin Encodeur_D_B_Pin */
  GPIO_InitStruct.Pin = Dipswitch_MSB_Pin|Dipswitch_LSB_Pin|Encodeur_D_B_Pin;
 8001714:	238c      	movs	r3, #140	@ 0x8c
 8001716:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001718:	2300      	movs	r3, #0
 800171a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800171c:	2302      	movs	r3, #2
 800171e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001720:	f107 0314 	add.w	r3, r7, #20
 8001724:	4619      	mov	r1, r3
 8001726:	481b      	ldr	r0, [pc, #108]	@ (8001794 <MX_GPIO_Init+0x12c>)
 8001728:	f000 fc26 	bl	8001f78 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800172c:	2320      	movs	r3, #32
 800172e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001730:	2301      	movs	r3, #1
 8001732:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001734:	2300      	movs	r3, #0
 8001736:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001738:	2300      	movs	r3, #0
 800173a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800173c:	f107 0314 	add.w	r3, r7, #20
 8001740:	4619      	mov	r1, r3
 8001742:	4813      	ldr	r0, [pc, #76]	@ (8001790 <MX_GPIO_Init+0x128>)
 8001744:	f000 fc18 	bl	8001f78 <HAL_GPIO_Init>

  /*Configure GPIO pins : Encodeur_G_A_Pin Encodeur_D_A_Pin */
  GPIO_InitStruct.Pin = Encodeur_G_A_Pin|Encodeur_D_A_Pin;
 8001748:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800174c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800174e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001752:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001754:	2302      	movs	r3, #2
 8001756:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001758:	f107 0314 	add.w	r3, r7, #20
 800175c:	4619      	mov	r1, r3
 800175e:	480c      	ldr	r0, [pc, #48]	@ (8001790 <MX_GPIO_Init+0x128>)
 8001760:	f000 fc0a 	bl	8001f78 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001764:	2200      	movs	r2, #0
 8001766:	2100      	movs	r1, #0
 8001768:	2017      	movs	r0, #23
 800176a:	f000 fbce 	bl	8001f0a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800176e:	2017      	movs	r0, #23
 8001770:	f000 fbe7 	bl	8001f42 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001774:	2200      	movs	r2, #0
 8001776:	2100      	movs	r1, #0
 8001778:	2028      	movs	r0, #40	@ 0x28
 800177a:	f000 fbc6 	bl	8001f0a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800177e:	2028      	movs	r0, #40	@ 0x28
 8001780:	f000 fbdf 	bl	8001f42 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001784:	bf00      	nop
 8001786:	3728      	adds	r7, #40	@ 0x28
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}
 800178c:	40023800 	.word	0x40023800
 8001790:	40020000 	.word	0x40020000
 8001794:	40020800 	.word	0x40020800

08001798 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001798:	b590      	push	{r4, r7, lr}
 800179a:	b083      	sub	sp, #12
 800179c:	af00      	add	r7, sp, #0
 800179e:	4603      	mov	r3, r0
 80017a0:	80fb      	strh	r3, [r7, #6]

	if(GPIO_Pin == GPIO_PIN_9)
 80017a2:	88fb      	ldrh	r3, [r7, #6]
 80017a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80017a8:	d106      	bne.n	80017b8 <HAL_GPIO_EXTI_Callback+0x20>
	{
		nbPulseD++ ; // compte les pulses de lencodeur droit
 80017aa:	4b18      	ldr	r3, [pc, #96]	@ (800180c <HAL_GPIO_EXTI_Callback+0x74>)
 80017ac:	881b      	ldrh	r3, [r3, #0]
 80017ae:	b29b      	uxth	r3, r3
 80017b0:	3301      	adds	r3, #1
 80017b2:	b29a      	uxth	r2, r3
 80017b4:	4b15      	ldr	r3, [pc, #84]	@ (800180c <HAL_GPIO_EXTI_Callback+0x74>)
 80017b6:	801a      	strh	r2, [r3, #0]
	}

	if(GPIO_Pin == GPIO_PIN_8)
 80017b8:	88fb      	ldrh	r3, [r7, #6]
 80017ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80017be:	d106      	bne.n	80017ce <HAL_GPIO_EXTI_Callback+0x36>
	{
		nbPulseG++ ; // compte les pulses de lencodeur droit
 80017c0:	4b13      	ldr	r3, [pc, #76]	@ (8001810 <HAL_GPIO_EXTI_Callback+0x78>)
 80017c2:	881b      	ldrh	r3, [r3, #0]
 80017c4:	b29b      	uxth	r3, r3
 80017c6:	3301      	adds	r3, #1
 80017c8:	b29a      	uxth	r2, r3
 80017ca:	4b11      	ldr	r3, [pc, #68]	@ (8001810 <HAL_GPIO_EXTI_Callback+0x78>)
 80017cc:	801a      	strh	r2, [r3, #0]
	}

	if(GPIO_Pin == Blue_Button_Pin) {
 80017ce:	88fb      	ldrh	r3, [r7, #6]
 80017d0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80017d4:	d115      	bne.n	8001802 <HAL_GPIO_EXTI_Callback+0x6a>
		Stop(&htim3);
 80017d6:	480f      	ldr	r0, [pc, #60]	@ (8001814 <HAL_GPIO_EXTI_Callback+0x7c>)
 80017d8:	f7ff fd36 	bl	8001248 <Stop>
		curr_mode = Get_Mode(HAL_GPIO_ReadPin(Dipswitch_MSB_GPIO_Port, Dipswitch_MSB_Pin), HAL_GPIO_ReadPin(Dipswitch_LSB_GPIO_Port, Dipswitch_LSB_Pin));
 80017dc:	2104      	movs	r1, #4
 80017de:	480e      	ldr	r0, [pc, #56]	@ (8001818 <HAL_GPIO_EXTI_Callback+0x80>)
 80017e0:	f000 fd5e 	bl	80022a0 <HAL_GPIO_ReadPin>
 80017e4:	4603      	mov	r3, r0
 80017e6:	461c      	mov	r4, r3
 80017e8:	2108      	movs	r1, #8
 80017ea:	480b      	ldr	r0, [pc, #44]	@ (8001818 <HAL_GPIO_EXTI_Callback+0x80>)
 80017ec:	f000 fd58 	bl	80022a0 <HAL_GPIO_ReadPin>
 80017f0:	4603      	mov	r3, r0
 80017f2:	4619      	mov	r1, r3
 80017f4:	4620      	mov	r0, r4
 80017f6:	f7ff fae5 	bl	8000dc4 <Get_Mode>
 80017fa:	4603      	mov	r3, r0
 80017fc:	b2da      	uxtb	r2, r3
 80017fe:	4b07      	ldr	r3, [pc, #28]	@ (800181c <HAL_GPIO_EXTI_Callback+0x84>)
 8001800:	701a      	strb	r2, [r3, #0]
	}

} //fonctionne
 8001802:	bf00      	nop
 8001804:	370c      	adds	r7, #12
 8001806:	46bd      	mov	sp, r7
 8001808:	bd90      	pop	{r4, r7, pc}
 800180a:	bf00      	nop
 800180c:	20000158 	.word	0x20000158
 8001810:	2000015a 	.word	0x2000015a
 8001814:	20000038 	.word	0x20000038
 8001818:	40020800 	.word	0x40020800
 800181c:	2000002c 	.word	0x2000002c

08001820 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001820:	b480      	push	{r7}
 8001822:	b083      	sub	sp, #12
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
    if(htim->Instance == TIM6)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4a27      	ldr	r2, [pc, #156]	@ (80018cc <HAL_TIM_PeriodElapsedCallback+0xac>)
 800182e:	4293      	cmp	r3, r2
 8001830:	d13b      	bne.n	80018aa <HAL_TIM_PeriodElapsedCallback+0x8a>
    {
    	vitesseD = CIRCONFERENCE * nbPulseD / PULSE_PAR_TOUR * 2000 / (arrTimerVitesse + 1) ; // calcule la vitesse de la chenille droite en m/s
 8001832:	4b27      	ldr	r3, [pc, #156]	@ (80018d0 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8001834:	881b      	ldrh	r3, [r3, #0]
 8001836:	b29b      	uxth	r3, r3
 8001838:	461a      	mov	r2, r3
 800183a:	239d      	movs	r3, #157	@ 0x9d
 800183c:	fb02 f303 	mul.w	r3, r2, r3
 8001840:	4a24      	ldr	r2, [pc, #144]	@ (80018d4 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8001842:	fb82 1203 	smull	r1, r2, r2, r3
 8001846:	441a      	add	r2, r3
 8001848:	1192      	asrs	r2, r2, #6
 800184a:	17db      	asrs	r3, r3, #31
 800184c:	1ad3      	subs	r3, r2, r3
 800184e:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8001852:	fb03 f202 	mul.w	r2, r3, r2
 8001856:	4b20      	ldr	r3, [pc, #128]	@ (80018d8 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8001858:	881b      	ldrh	r3, [r3, #0]
 800185a:	b29b      	uxth	r3, r3
 800185c:	3301      	adds	r3, #1
 800185e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001862:	b29a      	uxth	r2, r3
 8001864:	4b1d      	ldr	r3, [pc, #116]	@ (80018dc <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8001866:	801a      	strh	r2, [r3, #0]
    	vitesseG = CIRCONFERENCE * nbPulseG / PULSE_PAR_TOUR * 2000 / (arrTimerVitesse + 1) ;
 8001868:	4b1d      	ldr	r3, [pc, #116]	@ (80018e0 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 800186a:	881b      	ldrh	r3, [r3, #0]
 800186c:	b29b      	uxth	r3, r3
 800186e:	461a      	mov	r2, r3
 8001870:	239d      	movs	r3, #157	@ 0x9d
 8001872:	fb02 f303 	mul.w	r3, r2, r3
 8001876:	4a17      	ldr	r2, [pc, #92]	@ (80018d4 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8001878:	fb82 1203 	smull	r1, r2, r2, r3
 800187c:	441a      	add	r2, r3
 800187e:	1192      	asrs	r2, r2, #6
 8001880:	17db      	asrs	r3, r3, #31
 8001882:	1ad3      	subs	r3, r2, r3
 8001884:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8001888:	fb03 f202 	mul.w	r2, r3, r2
 800188c:	4b12      	ldr	r3, [pc, #72]	@ (80018d8 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 800188e:	881b      	ldrh	r3, [r3, #0]
 8001890:	b29b      	uxth	r3, r3
 8001892:	3301      	adds	r3, #1
 8001894:	fb92 f3f3 	sdiv	r3, r2, r3
 8001898:	b29a      	uxth	r2, r3
 800189a:	4b12      	ldr	r3, [pc, #72]	@ (80018e4 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 800189c:	801a      	strh	r2, [r3, #0]

    	nbPulseD = 0 ;
 800189e:	4b0c      	ldr	r3, [pc, #48]	@ (80018d0 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	801a      	strh	r2, [r3, #0]
    	nbPulseG = 0;
 80018a4:	4b0e      	ldr	r3, [pc, #56]	@ (80018e0 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	801a      	strh	r2, [r3, #0]
    	//HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
    }

    if(htim->Instance == TIM7) {	// Triggered every 10 µs
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4a0e      	ldr	r2, [pc, #56]	@ (80018e8 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 80018b0:	4293      	cmp	r3, r2
 80018b2:	d104      	bne.n	80018be <HAL_TIM_PeriodElapsedCallback+0x9e>
    	timer_count += 10;
 80018b4:	4b0d      	ldr	r3, [pc, #52]	@ (80018ec <HAL_TIM_PeriodElapsedCallback+0xcc>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	330a      	adds	r3, #10
 80018ba:	4a0c      	ldr	r2, [pc, #48]	@ (80018ec <HAL_TIM_PeriodElapsedCallback+0xcc>)
 80018bc:	6013      	str	r3, [r2, #0]
    }
}
 80018be:	bf00      	nop
 80018c0:	370c      	adds	r7, #12
 80018c2:	46bd      	mov	sp, r7
 80018c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c8:	4770      	bx	lr
 80018ca:	bf00      	nop
 80018cc:	40001000 	.word	0x40001000
 80018d0:	20000158 	.word	0x20000158
 80018d4:	dd67c8a7 	.word	0xdd67c8a7
 80018d8:	20000000 	.word	0x20000000
 80018dc:	2000015c 	.word	0x2000015c
 80018e0:	2000015a 	.word	0x2000015a
 80018e4:	2000015e 	.word	0x2000015e
 80018e8:	40001400 	.word	0x40001400
 80018ec:	20000030 	.word	0x20000030

080018f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018f0:	b480      	push	{r7}
 80018f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018f4:	b672      	cpsid	i
}
 80018f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018f8:	bf00      	nop
 80018fa:	e7fd      	b.n	80018f8 <Error_Handler+0x8>

080018fc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b082      	sub	sp, #8
 8001900:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001902:	2300      	movs	r3, #0
 8001904:	607b      	str	r3, [r7, #4]
 8001906:	4b10      	ldr	r3, [pc, #64]	@ (8001948 <HAL_MspInit+0x4c>)
 8001908:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800190a:	4a0f      	ldr	r2, [pc, #60]	@ (8001948 <HAL_MspInit+0x4c>)
 800190c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001910:	6453      	str	r3, [r2, #68]	@ 0x44
 8001912:	4b0d      	ldr	r3, [pc, #52]	@ (8001948 <HAL_MspInit+0x4c>)
 8001914:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001916:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800191a:	607b      	str	r3, [r7, #4]
 800191c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800191e:	2300      	movs	r3, #0
 8001920:	603b      	str	r3, [r7, #0]
 8001922:	4b09      	ldr	r3, [pc, #36]	@ (8001948 <HAL_MspInit+0x4c>)
 8001924:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001926:	4a08      	ldr	r2, [pc, #32]	@ (8001948 <HAL_MspInit+0x4c>)
 8001928:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800192c:	6413      	str	r3, [r2, #64]	@ 0x40
 800192e:	4b06      	ldr	r3, [pc, #24]	@ (8001948 <HAL_MspInit+0x4c>)
 8001930:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001932:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001936:	603b      	str	r3, [r7, #0]
 8001938:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800193a:	2007      	movs	r0, #7
 800193c:	f000 fada 	bl	8001ef4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001940:	bf00      	nop
 8001942:	3708      	adds	r7, #8
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}
 8001948:	40023800 	.word	0x40023800

0800194c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b086      	sub	sp, #24
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a26      	ldr	r2, [pc, #152]	@ (80019f4 <HAL_TIM_Base_MspInit+0xa8>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d10e      	bne.n	800197c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800195e:	2300      	movs	r3, #0
 8001960:	617b      	str	r3, [r7, #20]
 8001962:	4b25      	ldr	r3, [pc, #148]	@ (80019f8 <HAL_TIM_Base_MspInit+0xac>)
 8001964:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001966:	4a24      	ldr	r2, [pc, #144]	@ (80019f8 <HAL_TIM_Base_MspInit+0xac>)
 8001968:	f043 0302 	orr.w	r3, r3, #2
 800196c:	6413      	str	r3, [r2, #64]	@ 0x40
 800196e:	4b22      	ldr	r3, [pc, #136]	@ (80019f8 <HAL_TIM_Base_MspInit+0xac>)
 8001970:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001972:	f003 0302 	and.w	r3, r3, #2
 8001976:	617b      	str	r3, [r7, #20]
 8001978:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 800197a:	e036      	b.n	80019ea <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM6)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a1e      	ldr	r2, [pc, #120]	@ (80019fc <HAL_TIM_Base_MspInit+0xb0>)
 8001982:	4293      	cmp	r3, r2
 8001984:	d116      	bne.n	80019b4 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001986:	2300      	movs	r3, #0
 8001988:	613b      	str	r3, [r7, #16]
 800198a:	4b1b      	ldr	r3, [pc, #108]	@ (80019f8 <HAL_TIM_Base_MspInit+0xac>)
 800198c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800198e:	4a1a      	ldr	r2, [pc, #104]	@ (80019f8 <HAL_TIM_Base_MspInit+0xac>)
 8001990:	f043 0310 	orr.w	r3, r3, #16
 8001994:	6413      	str	r3, [r2, #64]	@ 0x40
 8001996:	4b18      	ldr	r3, [pc, #96]	@ (80019f8 <HAL_TIM_Base_MspInit+0xac>)
 8001998:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800199a:	f003 0310 	and.w	r3, r3, #16
 800199e:	613b      	str	r3, [r7, #16]
 80019a0:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80019a2:	2200      	movs	r2, #0
 80019a4:	2100      	movs	r1, #0
 80019a6:	2036      	movs	r0, #54	@ 0x36
 80019a8:	f000 faaf 	bl	8001f0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80019ac:	2036      	movs	r0, #54	@ 0x36
 80019ae:	f000 fac8 	bl	8001f42 <HAL_NVIC_EnableIRQ>
}
 80019b2:	e01a      	b.n	80019ea <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM7)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a11      	ldr	r2, [pc, #68]	@ (8001a00 <HAL_TIM_Base_MspInit+0xb4>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d115      	bne.n	80019ea <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80019be:	2300      	movs	r3, #0
 80019c0:	60fb      	str	r3, [r7, #12]
 80019c2:	4b0d      	ldr	r3, [pc, #52]	@ (80019f8 <HAL_TIM_Base_MspInit+0xac>)
 80019c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019c6:	4a0c      	ldr	r2, [pc, #48]	@ (80019f8 <HAL_TIM_Base_MspInit+0xac>)
 80019c8:	f043 0320 	orr.w	r3, r3, #32
 80019cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80019ce:	4b0a      	ldr	r3, [pc, #40]	@ (80019f8 <HAL_TIM_Base_MspInit+0xac>)
 80019d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019d2:	f003 0320 	and.w	r3, r3, #32
 80019d6:	60fb      	str	r3, [r7, #12]
 80019d8:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80019da:	2200      	movs	r2, #0
 80019dc:	2100      	movs	r1, #0
 80019de:	2037      	movs	r0, #55	@ 0x37
 80019e0:	f000 fa93 	bl	8001f0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80019e4:	2037      	movs	r0, #55	@ 0x37
 80019e6:	f000 faac 	bl	8001f42 <HAL_NVIC_EnableIRQ>
}
 80019ea:	bf00      	nop
 80019ec:	3718      	adds	r7, #24
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	bf00      	nop
 80019f4:	40000400 	.word	0x40000400
 80019f8:	40023800 	.word	0x40023800
 80019fc:	40001000 	.word	0x40001000
 8001a00:	40001400 	.word	0x40001400

08001a04 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b08a      	sub	sp, #40	@ 0x28
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a0c:	f107 0314 	add.w	r3, r7, #20
 8001a10:	2200      	movs	r2, #0
 8001a12:	601a      	str	r2, [r3, #0]
 8001a14:	605a      	str	r2, [r3, #4]
 8001a16:	609a      	str	r2, [r3, #8]
 8001a18:	60da      	str	r2, [r3, #12]
 8001a1a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4a21      	ldr	r2, [pc, #132]	@ (8001aa8 <HAL_TIM_MspPostInit+0xa4>)
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d13b      	bne.n	8001a9e <HAL_TIM_MspPostInit+0x9a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a26:	2300      	movs	r3, #0
 8001a28:	613b      	str	r3, [r7, #16]
 8001a2a:	4b20      	ldr	r3, [pc, #128]	@ (8001aac <HAL_TIM_MspPostInit+0xa8>)
 8001a2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a2e:	4a1f      	ldr	r2, [pc, #124]	@ (8001aac <HAL_TIM_MspPostInit+0xa8>)
 8001a30:	f043 0301 	orr.w	r3, r3, #1
 8001a34:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a36:	4b1d      	ldr	r3, [pc, #116]	@ (8001aac <HAL_TIM_MspPostInit+0xa8>)
 8001a38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a3a:	f003 0301 	and.w	r3, r3, #1
 8001a3e:	613b      	str	r3, [r7, #16]
 8001a40:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a42:	2300      	movs	r3, #0
 8001a44:	60fb      	str	r3, [r7, #12]
 8001a46:	4b19      	ldr	r3, [pc, #100]	@ (8001aac <HAL_TIM_MspPostInit+0xa8>)
 8001a48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a4a:	4a18      	ldr	r2, [pc, #96]	@ (8001aac <HAL_TIM_MspPostInit+0xa8>)
 8001a4c:	f043 0302 	orr.w	r3, r3, #2
 8001a50:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a52:	4b16      	ldr	r3, [pc, #88]	@ (8001aac <HAL_TIM_MspPostInit+0xa8>)
 8001a54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a56:	f003 0302 	and.w	r3, r3, #2
 8001a5a:	60fb      	str	r3, [r7, #12]
 8001a5c:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = Gauche_av_Pin|Gauche_re_Pin;
 8001a5e:	23c0      	movs	r3, #192	@ 0xc0
 8001a60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a62:	2302      	movs	r3, #2
 8001a64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a66:	2300      	movs	r3, #0
 8001a68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001a6e:	2302      	movs	r3, #2
 8001a70:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a72:	f107 0314 	add.w	r3, r7, #20
 8001a76:	4619      	mov	r1, r3
 8001a78:	480d      	ldr	r0, [pc, #52]	@ (8001ab0 <HAL_TIM_MspPostInit+0xac>)
 8001a7a:	f000 fa7d 	bl	8001f78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Droit_av_Pin|Droit_re_Pin;
 8001a7e:	2303      	movs	r3, #3
 8001a80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a82:	2302      	movs	r3, #2
 8001a84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a86:	2300      	movs	r3, #0
 8001a88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001a8e:	2302      	movs	r3, #2
 8001a90:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a92:	f107 0314 	add.w	r3, r7, #20
 8001a96:	4619      	mov	r1, r3
 8001a98:	4806      	ldr	r0, [pc, #24]	@ (8001ab4 <HAL_TIM_MspPostInit+0xb0>)
 8001a9a:	f000 fa6d 	bl	8001f78 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001a9e:	bf00      	nop
 8001aa0:	3728      	adds	r7, #40	@ 0x28
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	40000400 	.word	0x40000400
 8001aac:	40023800 	.word	0x40023800
 8001ab0:	40020000 	.word	0x40020000
 8001ab4:	40020400 	.word	0x40020400

08001ab8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b08a      	sub	sp, #40	@ 0x28
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ac0:	f107 0314 	add.w	r3, r7, #20
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	601a      	str	r2, [r3, #0]
 8001ac8:	605a      	str	r2, [r3, #4]
 8001aca:	609a      	str	r2, [r3, #8]
 8001acc:	60da      	str	r2, [r3, #12]
 8001ace:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a19      	ldr	r2, [pc, #100]	@ (8001b3c <HAL_UART_MspInit+0x84>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d12b      	bne.n	8001b32 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001ada:	2300      	movs	r3, #0
 8001adc:	613b      	str	r3, [r7, #16]
 8001ade:	4b18      	ldr	r3, [pc, #96]	@ (8001b40 <HAL_UART_MspInit+0x88>)
 8001ae0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ae2:	4a17      	ldr	r2, [pc, #92]	@ (8001b40 <HAL_UART_MspInit+0x88>)
 8001ae4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ae8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001aea:	4b15      	ldr	r3, [pc, #84]	@ (8001b40 <HAL_UART_MspInit+0x88>)
 8001aec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001af2:	613b      	str	r3, [r7, #16]
 8001af4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001af6:	2300      	movs	r3, #0
 8001af8:	60fb      	str	r3, [r7, #12]
 8001afa:	4b11      	ldr	r3, [pc, #68]	@ (8001b40 <HAL_UART_MspInit+0x88>)
 8001afc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001afe:	4a10      	ldr	r2, [pc, #64]	@ (8001b40 <HAL_UART_MspInit+0x88>)
 8001b00:	f043 0301 	orr.w	r3, r3, #1
 8001b04:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b06:	4b0e      	ldr	r3, [pc, #56]	@ (8001b40 <HAL_UART_MspInit+0x88>)
 8001b08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b0a:	f003 0301 	and.w	r3, r3, #1
 8001b0e:	60fb      	str	r3, [r7, #12]
 8001b10:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001b12:	230c      	movs	r3, #12
 8001b14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b16:	2302      	movs	r3, #2
 8001b18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b1e:	2303      	movs	r3, #3
 8001b20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001b22:	2307      	movs	r3, #7
 8001b24:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b26:	f107 0314 	add.w	r3, r7, #20
 8001b2a:	4619      	mov	r1, r3
 8001b2c:	4805      	ldr	r0, [pc, #20]	@ (8001b44 <HAL_UART_MspInit+0x8c>)
 8001b2e:	f000 fa23 	bl	8001f78 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001b32:	bf00      	nop
 8001b34:	3728      	adds	r7, #40	@ 0x28
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	40004400 	.word	0x40004400
 8001b40:	40023800 	.word	0x40023800
 8001b44:	40020000 	.word	0x40020000

08001b48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001b4c:	bf00      	nop
 8001b4e:	e7fd      	b.n	8001b4c <NMI_Handler+0x4>

08001b50 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b50:	b480      	push	{r7}
 8001b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b54:	bf00      	nop
 8001b56:	e7fd      	b.n	8001b54 <HardFault_Handler+0x4>

08001b58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b5c:	bf00      	nop
 8001b5e:	e7fd      	b.n	8001b5c <MemManage_Handler+0x4>

08001b60 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b60:	b480      	push	{r7}
 8001b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b64:	bf00      	nop
 8001b66:	e7fd      	b.n	8001b64 <BusFault_Handler+0x4>

08001b68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b6c:	bf00      	nop
 8001b6e:	e7fd      	b.n	8001b6c <UsageFault_Handler+0x4>

08001b70 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b70:	b480      	push	{r7}
 8001b72:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b74:	bf00      	nop
 8001b76:	46bd      	mov	sp, r7
 8001b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7c:	4770      	bx	lr

08001b7e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b7e:	b480      	push	{r7}
 8001b80:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b82:	bf00      	nop
 8001b84:	46bd      	mov	sp, r7
 8001b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8a:	4770      	bx	lr

08001b8c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b90:	bf00      	nop
 8001b92:	46bd      	mov	sp, r7
 8001b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b98:	4770      	bx	lr

08001b9a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b9a:	b580      	push	{r7, lr}
 8001b9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b9e:	f000 f8b9 	bl	8001d14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ba2:	bf00      	nop
 8001ba4:	bd80      	pop	{r7, pc}

08001ba6 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001ba6:	b580      	push	{r7, lr}
 8001ba8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Encodeur_G_A_Pin);
 8001baa:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8001bae:	f000 fba9 	bl	8002304 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Encodeur_D_A_Pin);
 8001bb2:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001bb6:	f000 fba5 	bl	8002304 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001bba:	bf00      	nop
 8001bbc:	bd80      	pop	{r7, pc}

08001bbe <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001bbe:	b580      	push	{r7, lr}
 8001bc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Blue_Button_Pin);
 8001bc2:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001bc6:	f000 fb9d 	bl	8002304 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001bca:	bf00      	nop
 8001bcc:	bd80      	pop	{r7, pc}
	...

08001bd0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001bd4:	4802      	ldr	r0, [pc, #8]	@ (8001be0 <TIM6_DAC_IRQHandler+0x10>)
 8001bd6:	f001 fba5 	bl	8003324 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001bda:	bf00      	nop
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	20000080 	.word	0x20000080

08001be4 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001be8:	4802      	ldr	r0, [pc, #8]	@ (8001bf4 <TIM7_IRQHandler+0x10>)
 8001bea:	f001 fb9b 	bl	8003324 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001bee:	bf00      	nop
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	200000c8 	.word	0x200000c8

08001bf8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001bfc:	4b06      	ldr	r3, [pc, #24]	@ (8001c18 <SystemInit+0x20>)
 8001bfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001c02:	4a05      	ldr	r2, [pc, #20]	@ (8001c18 <SystemInit+0x20>)
 8001c04:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001c08:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c0c:	bf00      	nop
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c14:	4770      	bx	lr
 8001c16:	bf00      	nop
 8001c18:	e000ed00 	.word	0xe000ed00

08001c1c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001c1c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001c54 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001c20:	f7ff ffea 	bl	8001bf8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001c24:	480c      	ldr	r0, [pc, #48]	@ (8001c58 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001c26:	490d      	ldr	r1, [pc, #52]	@ (8001c5c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001c28:	4a0d      	ldr	r2, [pc, #52]	@ (8001c60 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001c2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c2c:	e002      	b.n	8001c34 <LoopCopyDataInit>

08001c2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c32:	3304      	adds	r3, #4

08001c34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c38:	d3f9      	bcc.n	8001c2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c3a:	4a0a      	ldr	r2, [pc, #40]	@ (8001c64 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001c3c:	4c0a      	ldr	r4, [pc, #40]	@ (8001c68 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001c3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c40:	e001      	b.n	8001c46 <LoopFillZerobss>

08001c42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c44:	3204      	adds	r2, #4

08001c46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c48:	d3fb      	bcc.n	8001c42 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001c4a:	f002 fc85 	bl	8004558 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c4e:	f7ff fb15 	bl	800127c <main>
  bx  lr    
 8001c52:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001c54:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001c58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c5c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001c60:	080045f0 	.word	0x080045f0
  ldr r2, =_sbss
 8001c64:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001c68:	20000164 	.word	0x20000164

08001c6c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c6c:	e7fe      	b.n	8001c6c <ADC_IRQHandler>
	...

08001c70 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001c74:	4b0e      	ldr	r3, [pc, #56]	@ (8001cb0 <HAL_Init+0x40>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a0d      	ldr	r2, [pc, #52]	@ (8001cb0 <HAL_Init+0x40>)
 8001c7a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001c7e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001c80:	4b0b      	ldr	r3, [pc, #44]	@ (8001cb0 <HAL_Init+0x40>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a0a      	ldr	r2, [pc, #40]	@ (8001cb0 <HAL_Init+0x40>)
 8001c86:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001c8a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c8c:	4b08      	ldr	r3, [pc, #32]	@ (8001cb0 <HAL_Init+0x40>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4a07      	ldr	r2, [pc, #28]	@ (8001cb0 <HAL_Init+0x40>)
 8001c92:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c96:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c98:	2003      	movs	r0, #3
 8001c9a:	f000 f92b 	bl	8001ef4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c9e:	2000      	movs	r0, #0
 8001ca0:	f000 f808 	bl	8001cb4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ca4:	f7ff fe2a 	bl	80018fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ca8:	2300      	movs	r3, #0
}
 8001caa:	4618      	mov	r0, r3
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	bf00      	nop
 8001cb0:	40023c00 	.word	0x40023c00

08001cb4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b082      	sub	sp, #8
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001cbc:	4b12      	ldr	r3, [pc, #72]	@ (8001d08 <HAL_InitTick+0x54>)
 8001cbe:	681a      	ldr	r2, [r3, #0]
 8001cc0:	4b12      	ldr	r3, [pc, #72]	@ (8001d0c <HAL_InitTick+0x58>)
 8001cc2:	781b      	ldrb	r3, [r3, #0]
 8001cc4:	4619      	mov	r1, r3
 8001cc6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001cca:	fbb3 f3f1 	udiv	r3, r3, r1
 8001cce:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	f000 f943 	bl	8001f5e <HAL_SYSTICK_Config>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d001      	beq.n	8001ce2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	e00e      	b.n	8001d00 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	2b0f      	cmp	r3, #15
 8001ce6:	d80a      	bhi.n	8001cfe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ce8:	2200      	movs	r2, #0
 8001cea:	6879      	ldr	r1, [r7, #4]
 8001cec:	f04f 30ff 	mov.w	r0, #4294967295
 8001cf0:	f000 f90b 	bl	8001f0a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001cf4:	4a06      	ldr	r2, [pc, #24]	@ (8001d10 <HAL_InitTick+0x5c>)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	e000      	b.n	8001d00 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001cfe:	2301      	movs	r3, #1
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	3708      	adds	r7, #8
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}
 8001d08:	20000004 	.word	0x20000004
 8001d0c:	2000000c 	.word	0x2000000c
 8001d10:	20000008 	.word	0x20000008

08001d14 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d14:	b480      	push	{r7}
 8001d16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d18:	4b06      	ldr	r3, [pc, #24]	@ (8001d34 <HAL_IncTick+0x20>)
 8001d1a:	781b      	ldrb	r3, [r3, #0]
 8001d1c:	461a      	mov	r2, r3
 8001d1e:	4b06      	ldr	r3, [pc, #24]	@ (8001d38 <HAL_IncTick+0x24>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4413      	add	r3, r2
 8001d24:	4a04      	ldr	r2, [pc, #16]	@ (8001d38 <HAL_IncTick+0x24>)
 8001d26:	6013      	str	r3, [r2, #0]
}
 8001d28:	bf00      	nop
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d30:	4770      	bx	lr
 8001d32:	bf00      	nop
 8001d34:	2000000c 	.word	0x2000000c
 8001d38:	20000160 	.word	0x20000160

08001d3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	af00      	add	r7, sp, #0
  return uwTick;
 8001d40:	4b03      	ldr	r3, [pc, #12]	@ (8001d50 <HAL_GetTick+0x14>)
 8001d42:	681b      	ldr	r3, [r3, #0]
}
 8001d44:	4618      	mov	r0, r3
 8001d46:	46bd      	mov	sp, r7
 8001d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4c:	4770      	bx	lr
 8001d4e:	bf00      	nop
 8001d50:	20000160 	.word	0x20000160

08001d54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d54:	b480      	push	{r7}
 8001d56:	b085      	sub	sp, #20
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	f003 0307 	and.w	r3, r3, #7
 8001d62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d64:	4b0c      	ldr	r3, [pc, #48]	@ (8001d98 <__NVIC_SetPriorityGrouping+0x44>)
 8001d66:	68db      	ldr	r3, [r3, #12]
 8001d68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d6a:	68ba      	ldr	r2, [r7, #8]
 8001d6c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001d70:	4013      	ands	r3, r2
 8001d72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d78:	68bb      	ldr	r3, [r7, #8]
 8001d7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d7c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001d80:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d86:	4a04      	ldr	r2, [pc, #16]	@ (8001d98 <__NVIC_SetPriorityGrouping+0x44>)
 8001d88:	68bb      	ldr	r3, [r7, #8]
 8001d8a:	60d3      	str	r3, [r2, #12]
}
 8001d8c:	bf00      	nop
 8001d8e:	3714      	adds	r7, #20
 8001d90:	46bd      	mov	sp, r7
 8001d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d96:	4770      	bx	lr
 8001d98:	e000ed00 	.word	0xe000ed00

08001d9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001da0:	4b04      	ldr	r3, [pc, #16]	@ (8001db4 <__NVIC_GetPriorityGrouping+0x18>)
 8001da2:	68db      	ldr	r3, [r3, #12]
 8001da4:	0a1b      	lsrs	r3, r3, #8
 8001da6:	f003 0307 	and.w	r3, r3, #7
}
 8001daa:	4618      	mov	r0, r3
 8001dac:	46bd      	mov	sp, r7
 8001dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db2:	4770      	bx	lr
 8001db4:	e000ed00 	.word	0xe000ed00

08001db8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b083      	sub	sp, #12
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	db0b      	blt.n	8001de2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001dca:	79fb      	ldrb	r3, [r7, #7]
 8001dcc:	f003 021f 	and.w	r2, r3, #31
 8001dd0:	4907      	ldr	r1, [pc, #28]	@ (8001df0 <__NVIC_EnableIRQ+0x38>)
 8001dd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dd6:	095b      	lsrs	r3, r3, #5
 8001dd8:	2001      	movs	r0, #1
 8001dda:	fa00 f202 	lsl.w	r2, r0, r2
 8001dde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001de2:	bf00      	nop
 8001de4:	370c      	adds	r7, #12
 8001de6:	46bd      	mov	sp, r7
 8001de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dec:	4770      	bx	lr
 8001dee:	bf00      	nop
 8001df0:	e000e100 	.word	0xe000e100

08001df4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b083      	sub	sp, #12
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	6039      	str	r1, [r7, #0]
 8001dfe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	db0a      	blt.n	8001e1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	b2da      	uxtb	r2, r3
 8001e0c:	490c      	ldr	r1, [pc, #48]	@ (8001e40 <__NVIC_SetPriority+0x4c>)
 8001e0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e12:	0112      	lsls	r2, r2, #4
 8001e14:	b2d2      	uxtb	r2, r2
 8001e16:	440b      	add	r3, r1
 8001e18:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e1c:	e00a      	b.n	8001e34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	b2da      	uxtb	r2, r3
 8001e22:	4908      	ldr	r1, [pc, #32]	@ (8001e44 <__NVIC_SetPriority+0x50>)
 8001e24:	79fb      	ldrb	r3, [r7, #7]
 8001e26:	f003 030f 	and.w	r3, r3, #15
 8001e2a:	3b04      	subs	r3, #4
 8001e2c:	0112      	lsls	r2, r2, #4
 8001e2e:	b2d2      	uxtb	r2, r2
 8001e30:	440b      	add	r3, r1
 8001e32:	761a      	strb	r2, [r3, #24]
}
 8001e34:	bf00      	nop
 8001e36:	370c      	adds	r7, #12
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3e:	4770      	bx	lr
 8001e40:	e000e100 	.word	0xe000e100
 8001e44:	e000ed00 	.word	0xe000ed00

08001e48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b089      	sub	sp, #36	@ 0x24
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	60f8      	str	r0, [r7, #12]
 8001e50:	60b9      	str	r1, [r7, #8]
 8001e52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	f003 0307 	and.w	r3, r3, #7
 8001e5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e5c:	69fb      	ldr	r3, [r7, #28]
 8001e5e:	f1c3 0307 	rsb	r3, r3, #7
 8001e62:	2b04      	cmp	r3, #4
 8001e64:	bf28      	it	cs
 8001e66:	2304      	movcs	r3, #4
 8001e68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e6a:	69fb      	ldr	r3, [r7, #28]
 8001e6c:	3304      	adds	r3, #4
 8001e6e:	2b06      	cmp	r3, #6
 8001e70:	d902      	bls.n	8001e78 <NVIC_EncodePriority+0x30>
 8001e72:	69fb      	ldr	r3, [r7, #28]
 8001e74:	3b03      	subs	r3, #3
 8001e76:	e000      	b.n	8001e7a <NVIC_EncodePriority+0x32>
 8001e78:	2300      	movs	r3, #0
 8001e7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e7c:	f04f 32ff 	mov.w	r2, #4294967295
 8001e80:	69bb      	ldr	r3, [r7, #24]
 8001e82:	fa02 f303 	lsl.w	r3, r2, r3
 8001e86:	43da      	mvns	r2, r3
 8001e88:	68bb      	ldr	r3, [r7, #8]
 8001e8a:	401a      	ands	r2, r3
 8001e8c:	697b      	ldr	r3, [r7, #20]
 8001e8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e90:	f04f 31ff 	mov.w	r1, #4294967295
 8001e94:	697b      	ldr	r3, [r7, #20]
 8001e96:	fa01 f303 	lsl.w	r3, r1, r3
 8001e9a:	43d9      	mvns	r1, r3
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ea0:	4313      	orrs	r3, r2
         );
}
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	3724      	adds	r7, #36	@ 0x24
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eac:	4770      	bx	lr
	...

08001eb0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b082      	sub	sp, #8
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	3b01      	subs	r3, #1
 8001ebc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001ec0:	d301      	bcc.n	8001ec6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	e00f      	b.n	8001ee6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ec6:	4a0a      	ldr	r2, [pc, #40]	@ (8001ef0 <SysTick_Config+0x40>)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	3b01      	subs	r3, #1
 8001ecc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ece:	210f      	movs	r1, #15
 8001ed0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ed4:	f7ff ff8e 	bl	8001df4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ed8:	4b05      	ldr	r3, [pc, #20]	@ (8001ef0 <SysTick_Config+0x40>)
 8001eda:	2200      	movs	r2, #0
 8001edc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ede:	4b04      	ldr	r3, [pc, #16]	@ (8001ef0 <SysTick_Config+0x40>)
 8001ee0:	2207      	movs	r2, #7
 8001ee2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ee4:	2300      	movs	r3, #0
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	3708      	adds	r7, #8
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	e000e010 	.word	0xe000e010

08001ef4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b082      	sub	sp, #8
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001efc:	6878      	ldr	r0, [r7, #4]
 8001efe:	f7ff ff29 	bl	8001d54 <__NVIC_SetPriorityGrouping>
}
 8001f02:	bf00      	nop
 8001f04:	3708      	adds	r7, #8
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}

08001f0a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f0a:	b580      	push	{r7, lr}
 8001f0c:	b086      	sub	sp, #24
 8001f0e:	af00      	add	r7, sp, #0
 8001f10:	4603      	mov	r3, r0
 8001f12:	60b9      	str	r1, [r7, #8]
 8001f14:	607a      	str	r2, [r7, #4]
 8001f16:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f1c:	f7ff ff3e 	bl	8001d9c <__NVIC_GetPriorityGrouping>
 8001f20:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f22:	687a      	ldr	r2, [r7, #4]
 8001f24:	68b9      	ldr	r1, [r7, #8]
 8001f26:	6978      	ldr	r0, [r7, #20]
 8001f28:	f7ff ff8e 	bl	8001e48 <NVIC_EncodePriority>
 8001f2c:	4602      	mov	r2, r0
 8001f2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f32:	4611      	mov	r1, r2
 8001f34:	4618      	mov	r0, r3
 8001f36:	f7ff ff5d 	bl	8001df4 <__NVIC_SetPriority>
}
 8001f3a:	bf00      	nop
 8001f3c:	3718      	adds	r7, #24
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}

08001f42 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f42:	b580      	push	{r7, lr}
 8001f44:	b082      	sub	sp, #8
 8001f46:	af00      	add	r7, sp, #0
 8001f48:	4603      	mov	r3, r0
 8001f4a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f50:	4618      	mov	r0, r3
 8001f52:	f7ff ff31 	bl	8001db8 <__NVIC_EnableIRQ>
}
 8001f56:	bf00      	nop
 8001f58:	3708      	adds	r7, #8
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}

08001f5e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f5e:	b580      	push	{r7, lr}
 8001f60:	b082      	sub	sp, #8
 8001f62:	af00      	add	r7, sp, #0
 8001f64:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f66:	6878      	ldr	r0, [r7, #4]
 8001f68:	f7ff ffa2 	bl	8001eb0 <SysTick_Config>
 8001f6c:	4603      	mov	r3, r0
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	3708      	adds	r7, #8
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}
	...

08001f78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b089      	sub	sp, #36	@ 0x24
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
 8001f80:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001f82:	2300      	movs	r3, #0
 8001f84:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001f86:	2300      	movs	r3, #0
 8001f88:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f8e:	2300      	movs	r3, #0
 8001f90:	61fb      	str	r3, [r7, #28]
 8001f92:	e165      	b.n	8002260 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001f94:	2201      	movs	r2, #1
 8001f96:	69fb      	ldr	r3, [r7, #28]
 8001f98:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	697a      	ldr	r2, [r7, #20]
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001fa8:	693a      	ldr	r2, [r7, #16]
 8001faa:	697b      	ldr	r3, [r7, #20]
 8001fac:	429a      	cmp	r2, r3
 8001fae:	f040 8154 	bne.w	800225a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	f003 0303 	and.w	r3, r3, #3
 8001fba:	2b01      	cmp	r3, #1
 8001fbc:	d005      	beq.n	8001fca <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001fc6:	2b02      	cmp	r3, #2
 8001fc8:	d130      	bne.n	800202c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	689b      	ldr	r3, [r3, #8]
 8001fce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001fd0:	69fb      	ldr	r3, [r7, #28]
 8001fd2:	005b      	lsls	r3, r3, #1
 8001fd4:	2203      	movs	r2, #3
 8001fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fda:	43db      	mvns	r3, r3
 8001fdc:	69ba      	ldr	r2, [r7, #24]
 8001fde:	4013      	ands	r3, r2
 8001fe0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	68da      	ldr	r2, [r3, #12]
 8001fe6:	69fb      	ldr	r3, [r7, #28]
 8001fe8:	005b      	lsls	r3, r3, #1
 8001fea:	fa02 f303 	lsl.w	r3, r2, r3
 8001fee:	69ba      	ldr	r2, [r7, #24]
 8001ff0:	4313      	orrs	r3, r2
 8001ff2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	69ba      	ldr	r2, [r7, #24]
 8001ff8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002000:	2201      	movs	r2, #1
 8002002:	69fb      	ldr	r3, [r7, #28]
 8002004:	fa02 f303 	lsl.w	r3, r2, r3
 8002008:	43db      	mvns	r3, r3
 800200a:	69ba      	ldr	r2, [r7, #24]
 800200c:	4013      	ands	r3, r2
 800200e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	091b      	lsrs	r3, r3, #4
 8002016:	f003 0201 	and.w	r2, r3, #1
 800201a:	69fb      	ldr	r3, [r7, #28]
 800201c:	fa02 f303 	lsl.w	r3, r2, r3
 8002020:	69ba      	ldr	r2, [r7, #24]
 8002022:	4313      	orrs	r3, r2
 8002024:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	69ba      	ldr	r2, [r7, #24]
 800202a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	f003 0303 	and.w	r3, r3, #3
 8002034:	2b03      	cmp	r3, #3
 8002036:	d017      	beq.n	8002068 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	68db      	ldr	r3, [r3, #12]
 800203c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800203e:	69fb      	ldr	r3, [r7, #28]
 8002040:	005b      	lsls	r3, r3, #1
 8002042:	2203      	movs	r2, #3
 8002044:	fa02 f303 	lsl.w	r3, r2, r3
 8002048:	43db      	mvns	r3, r3
 800204a:	69ba      	ldr	r2, [r7, #24]
 800204c:	4013      	ands	r3, r2
 800204e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	689a      	ldr	r2, [r3, #8]
 8002054:	69fb      	ldr	r3, [r7, #28]
 8002056:	005b      	lsls	r3, r3, #1
 8002058:	fa02 f303 	lsl.w	r3, r2, r3
 800205c:	69ba      	ldr	r2, [r7, #24]
 800205e:	4313      	orrs	r3, r2
 8002060:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	69ba      	ldr	r2, [r7, #24]
 8002066:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	f003 0303 	and.w	r3, r3, #3
 8002070:	2b02      	cmp	r3, #2
 8002072:	d123      	bne.n	80020bc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002074:	69fb      	ldr	r3, [r7, #28]
 8002076:	08da      	lsrs	r2, r3, #3
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	3208      	adds	r2, #8
 800207c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002080:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002082:	69fb      	ldr	r3, [r7, #28]
 8002084:	f003 0307 	and.w	r3, r3, #7
 8002088:	009b      	lsls	r3, r3, #2
 800208a:	220f      	movs	r2, #15
 800208c:	fa02 f303 	lsl.w	r3, r2, r3
 8002090:	43db      	mvns	r3, r3
 8002092:	69ba      	ldr	r2, [r7, #24]
 8002094:	4013      	ands	r3, r2
 8002096:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	691a      	ldr	r2, [r3, #16]
 800209c:	69fb      	ldr	r3, [r7, #28]
 800209e:	f003 0307 	and.w	r3, r3, #7
 80020a2:	009b      	lsls	r3, r3, #2
 80020a4:	fa02 f303 	lsl.w	r3, r2, r3
 80020a8:	69ba      	ldr	r2, [r7, #24]
 80020aa:	4313      	orrs	r3, r2
 80020ac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80020ae:	69fb      	ldr	r3, [r7, #28]
 80020b0:	08da      	lsrs	r2, r3, #3
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	3208      	adds	r2, #8
 80020b6:	69b9      	ldr	r1, [r7, #24]
 80020b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80020c2:	69fb      	ldr	r3, [r7, #28]
 80020c4:	005b      	lsls	r3, r3, #1
 80020c6:	2203      	movs	r2, #3
 80020c8:	fa02 f303 	lsl.w	r3, r2, r3
 80020cc:	43db      	mvns	r3, r3
 80020ce:	69ba      	ldr	r2, [r7, #24]
 80020d0:	4013      	ands	r3, r2
 80020d2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	f003 0203 	and.w	r2, r3, #3
 80020dc:	69fb      	ldr	r3, [r7, #28]
 80020de:	005b      	lsls	r3, r3, #1
 80020e0:	fa02 f303 	lsl.w	r3, r2, r3
 80020e4:	69ba      	ldr	r2, [r7, #24]
 80020e6:	4313      	orrs	r3, r2
 80020e8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	69ba      	ldr	r2, [r7, #24]
 80020ee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	f000 80ae 	beq.w	800225a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020fe:	2300      	movs	r3, #0
 8002100:	60fb      	str	r3, [r7, #12]
 8002102:	4b5d      	ldr	r3, [pc, #372]	@ (8002278 <HAL_GPIO_Init+0x300>)
 8002104:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002106:	4a5c      	ldr	r2, [pc, #368]	@ (8002278 <HAL_GPIO_Init+0x300>)
 8002108:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800210c:	6453      	str	r3, [r2, #68]	@ 0x44
 800210e:	4b5a      	ldr	r3, [pc, #360]	@ (8002278 <HAL_GPIO_Init+0x300>)
 8002110:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002112:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002116:	60fb      	str	r3, [r7, #12]
 8002118:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800211a:	4a58      	ldr	r2, [pc, #352]	@ (800227c <HAL_GPIO_Init+0x304>)
 800211c:	69fb      	ldr	r3, [r7, #28]
 800211e:	089b      	lsrs	r3, r3, #2
 8002120:	3302      	adds	r3, #2
 8002122:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002126:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002128:	69fb      	ldr	r3, [r7, #28]
 800212a:	f003 0303 	and.w	r3, r3, #3
 800212e:	009b      	lsls	r3, r3, #2
 8002130:	220f      	movs	r2, #15
 8002132:	fa02 f303 	lsl.w	r3, r2, r3
 8002136:	43db      	mvns	r3, r3
 8002138:	69ba      	ldr	r2, [r7, #24]
 800213a:	4013      	ands	r3, r2
 800213c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	4a4f      	ldr	r2, [pc, #316]	@ (8002280 <HAL_GPIO_Init+0x308>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d025      	beq.n	8002192 <HAL_GPIO_Init+0x21a>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	4a4e      	ldr	r2, [pc, #312]	@ (8002284 <HAL_GPIO_Init+0x30c>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d01f      	beq.n	800218e <HAL_GPIO_Init+0x216>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	4a4d      	ldr	r2, [pc, #308]	@ (8002288 <HAL_GPIO_Init+0x310>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d019      	beq.n	800218a <HAL_GPIO_Init+0x212>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	4a4c      	ldr	r2, [pc, #304]	@ (800228c <HAL_GPIO_Init+0x314>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d013      	beq.n	8002186 <HAL_GPIO_Init+0x20e>
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	4a4b      	ldr	r2, [pc, #300]	@ (8002290 <HAL_GPIO_Init+0x318>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d00d      	beq.n	8002182 <HAL_GPIO_Init+0x20a>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	4a4a      	ldr	r2, [pc, #296]	@ (8002294 <HAL_GPIO_Init+0x31c>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d007      	beq.n	800217e <HAL_GPIO_Init+0x206>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	4a49      	ldr	r2, [pc, #292]	@ (8002298 <HAL_GPIO_Init+0x320>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d101      	bne.n	800217a <HAL_GPIO_Init+0x202>
 8002176:	2306      	movs	r3, #6
 8002178:	e00c      	b.n	8002194 <HAL_GPIO_Init+0x21c>
 800217a:	2307      	movs	r3, #7
 800217c:	e00a      	b.n	8002194 <HAL_GPIO_Init+0x21c>
 800217e:	2305      	movs	r3, #5
 8002180:	e008      	b.n	8002194 <HAL_GPIO_Init+0x21c>
 8002182:	2304      	movs	r3, #4
 8002184:	e006      	b.n	8002194 <HAL_GPIO_Init+0x21c>
 8002186:	2303      	movs	r3, #3
 8002188:	e004      	b.n	8002194 <HAL_GPIO_Init+0x21c>
 800218a:	2302      	movs	r3, #2
 800218c:	e002      	b.n	8002194 <HAL_GPIO_Init+0x21c>
 800218e:	2301      	movs	r3, #1
 8002190:	e000      	b.n	8002194 <HAL_GPIO_Init+0x21c>
 8002192:	2300      	movs	r3, #0
 8002194:	69fa      	ldr	r2, [r7, #28]
 8002196:	f002 0203 	and.w	r2, r2, #3
 800219a:	0092      	lsls	r2, r2, #2
 800219c:	4093      	lsls	r3, r2
 800219e:	69ba      	ldr	r2, [r7, #24]
 80021a0:	4313      	orrs	r3, r2
 80021a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80021a4:	4935      	ldr	r1, [pc, #212]	@ (800227c <HAL_GPIO_Init+0x304>)
 80021a6:	69fb      	ldr	r3, [r7, #28]
 80021a8:	089b      	lsrs	r3, r3, #2
 80021aa:	3302      	adds	r3, #2
 80021ac:	69ba      	ldr	r2, [r7, #24]
 80021ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80021b2:	4b3a      	ldr	r3, [pc, #232]	@ (800229c <HAL_GPIO_Init+0x324>)
 80021b4:	689b      	ldr	r3, [r3, #8]
 80021b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021b8:	693b      	ldr	r3, [r7, #16]
 80021ba:	43db      	mvns	r3, r3
 80021bc:	69ba      	ldr	r2, [r7, #24]
 80021be:	4013      	ands	r3, r2
 80021c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d003      	beq.n	80021d6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80021ce:	69ba      	ldr	r2, [r7, #24]
 80021d0:	693b      	ldr	r3, [r7, #16]
 80021d2:	4313      	orrs	r3, r2
 80021d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80021d6:	4a31      	ldr	r2, [pc, #196]	@ (800229c <HAL_GPIO_Init+0x324>)
 80021d8:	69bb      	ldr	r3, [r7, #24]
 80021da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80021dc:	4b2f      	ldr	r3, [pc, #188]	@ (800229c <HAL_GPIO_Init+0x324>)
 80021de:	68db      	ldr	r3, [r3, #12]
 80021e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021e2:	693b      	ldr	r3, [r7, #16]
 80021e4:	43db      	mvns	r3, r3
 80021e6:	69ba      	ldr	r2, [r7, #24]
 80021e8:	4013      	ands	r3, r2
 80021ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d003      	beq.n	8002200 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80021f8:	69ba      	ldr	r2, [r7, #24]
 80021fa:	693b      	ldr	r3, [r7, #16]
 80021fc:	4313      	orrs	r3, r2
 80021fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002200:	4a26      	ldr	r2, [pc, #152]	@ (800229c <HAL_GPIO_Init+0x324>)
 8002202:	69bb      	ldr	r3, [r7, #24]
 8002204:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002206:	4b25      	ldr	r3, [pc, #148]	@ (800229c <HAL_GPIO_Init+0x324>)
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800220c:	693b      	ldr	r3, [r7, #16]
 800220e:	43db      	mvns	r3, r3
 8002210:	69ba      	ldr	r2, [r7, #24]
 8002212:	4013      	ands	r3, r2
 8002214:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800221e:	2b00      	cmp	r3, #0
 8002220:	d003      	beq.n	800222a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002222:	69ba      	ldr	r2, [r7, #24]
 8002224:	693b      	ldr	r3, [r7, #16]
 8002226:	4313      	orrs	r3, r2
 8002228:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800222a:	4a1c      	ldr	r2, [pc, #112]	@ (800229c <HAL_GPIO_Init+0x324>)
 800222c:	69bb      	ldr	r3, [r7, #24]
 800222e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002230:	4b1a      	ldr	r3, [pc, #104]	@ (800229c <HAL_GPIO_Init+0x324>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002236:	693b      	ldr	r3, [r7, #16]
 8002238:	43db      	mvns	r3, r3
 800223a:	69ba      	ldr	r2, [r7, #24]
 800223c:	4013      	ands	r3, r2
 800223e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002248:	2b00      	cmp	r3, #0
 800224a:	d003      	beq.n	8002254 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800224c:	69ba      	ldr	r2, [r7, #24]
 800224e:	693b      	ldr	r3, [r7, #16]
 8002250:	4313      	orrs	r3, r2
 8002252:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002254:	4a11      	ldr	r2, [pc, #68]	@ (800229c <HAL_GPIO_Init+0x324>)
 8002256:	69bb      	ldr	r3, [r7, #24]
 8002258:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800225a:	69fb      	ldr	r3, [r7, #28]
 800225c:	3301      	adds	r3, #1
 800225e:	61fb      	str	r3, [r7, #28]
 8002260:	69fb      	ldr	r3, [r7, #28]
 8002262:	2b0f      	cmp	r3, #15
 8002264:	f67f ae96 	bls.w	8001f94 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002268:	bf00      	nop
 800226a:	bf00      	nop
 800226c:	3724      	adds	r7, #36	@ 0x24
 800226e:	46bd      	mov	sp, r7
 8002270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002274:	4770      	bx	lr
 8002276:	bf00      	nop
 8002278:	40023800 	.word	0x40023800
 800227c:	40013800 	.word	0x40013800
 8002280:	40020000 	.word	0x40020000
 8002284:	40020400 	.word	0x40020400
 8002288:	40020800 	.word	0x40020800
 800228c:	40020c00 	.word	0x40020c00
 8002290:	40021000 	.word	0x40021000
 8002294:	40021400 	.word	0x40021400
 8002298:	40021800 	.word	0x40021800
 800229c:	40013c00 	.word	0x40013c00

080022a0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80022a0:	b480      	push	{r7}
 80022a2:	b085      	sub	sp, #20
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
 80022a8:	460b      	mov	r3, r1
 80022aa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	691a      	ldr	r2, [r3, #16]
 80022b0:	887b      	ldrh	r3, [r7, #2]
 80022b2:	4013      	ands	r3, r2
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d002      	beq.n	80022be <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80022b8:	2301      	movs	r3, #1
 80022ba:	73fb      	strb	r3, [r7, #15]
 80022bc:	e001      	b.n	80022c2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80022be:	2300      	movs	r3, #0
 80022c0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80022c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80022c4:	4618      	mov	r0, r3
 80022c6:	3714      	adds	r7, #20
 80022c8:	46bd      	mov	sp, r7
 80022ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ce:	4770      	bx	lr

080022d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022d0:	b480      	push	{r7}
 80022d2:	b083      	sub	sp, #12
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
 80022d8:	460b      	mov	r3, r1
 80022da:	807b      	strh	r3, [r7, #2]
 80022dc:	4613      	mov	r3, r2
 80022de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80022e0:	787b      	ldrb	r3, [r7, #1]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d003      	beq.n	80022ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80022e6:	887a      	ldrh	r2, [r7, #2]
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80022ec:	e003      	b.n	80022f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80022ee:	887b      	ldrh	r3, [r7, #2]
 80022f0:	041a      	lsls	r2, r3, #16
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	619a      	str	r2, [r3, #24]
}
 80022f6:	bf00      	nop
 80022f8:	370c      	adds	r7, #12
 80022fa:	46bd      	mov	sp, r7
 80022fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002300:	4770      	bx	lr
	...

08002304 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b082      	sub	sp, #8
 8002308:	af00      	add	r7, sp, #0
 800230a:	4603      	mov	r3, r0
 800230c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800230e:	4b08      	ldr	r3, [pc, #32]	@ (8002330 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002310:	695a      	ldr	r2, [r3, #20]
 8002312:	88fb      	ldrh	r3, [r7, #6]
 8002314:	4013      	ands	r3, r2
 8002316:	2b00      	cmp	r3, #0
 8002318:	d006      	beq.n	8002328 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800231a:	4a05      	ldr	r2, [pc, #20]	@ (8002330 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800231c:	88fb      	ldrh	r3, [r7, #6]
 800231e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002320:	88fb      	ldrh	r3, [r7, #6]
 8002322:	4618      	mov	r0, r3
 8002324:	f7ff fa38 	bl	8001798 <HAL_GPIO_EXTI_Callback>
  }
}
 8002328:	bf00      	nop
 800232a:	3708      	adds	r7, #8
 800232c:	46bd      	mov	sp, r7
 800232e:	bd80      	pop	{r7, pc}
 8002330:	40013c00 	.word	0x40013c00

08002334 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b084      	sub	sp, #16
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
 800233c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d101      	bne.n	8002348 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002344:	2301      	movs	r3, #1
 8002346:	e0cc      	b.n	80024e2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002348:	4b68      	ldr	r3, [pc, #416]	@ (80024ec <HAL_RCC_ClockConfig+0x1b8>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f003 030f 	and.w	r3, r3, #15
 8002350:	683a      	ldr	r2, [r7, #0]
 8002352:	429a      	cmp	r2, r3
 8002354:	d90c      	bls.n	8002370 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002356:	4b65      	ldr	r3, [pc, #404]	@ (80024ec <HAL_RCC_ClockConfig+0x1b8>)
 8002358:	683a      	ldr	r2, [r7, #0]
 800235a:	b2d2      	uxtb	r2, r2
 800235c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800235e:	4b63      	ldr	r3, [pc, #396]	@ (80024ec <HAL_RCC_ClockConfig+0x1b8>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f003 030f 	and.w	r3, r3, #15
 8002366:	683a      	ldr	r2, [r7, #0]
 8002368:	429a      	cmp	r2, r3
 800236a:	d001      	beq.n	8002370 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800236c:	2301      	movs	r3, #1
 800236e:	e0b8      	b.n	80024e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f003 0302 	and.w	r3, r3, #2
 8002378:	2b00      	cmp	r3, #0
 800237a:	d020      	beq.n	80023be <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f003 0304 	and.w	r3, r3, #4
 8002384:	2b00      	cmp	r3, #0
 8002386:	d005      	beq.n	8002394 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002388:	4b59      	ldr	r3, [pc, #356]	@ (80024f0 <HAL_RCC_ClockConfig+0x1bc>)
 800238a:	689b      	ldr	r3, [r3, #8]
 800238c:	4a58      	ldr	r2, [pc, #352]	@ (80024f0 <HAL_RCC_ClockConfig+0x1bc>)
 800238e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002392:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f003 0308 	and.w	r3, r3, #8
 800239c:	2b00      	cmp	r3, #0
 800239e:	d005      	beq.n	80023ac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80023a0:	4b53      	ldr	r3, [pc, #332]	@ (80024f0 <HAL_RCC_ClockConfig+0x1bc>)
 80023a2:	689b      	ldr	r3, [r3, #8]
 80023a4:	4a52      	ldr	r2, [pc, #328]	@ (80024f0 <HAL_RCC_ClockConfig+0x1bc>)
 80023a6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80023aa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023ac:	4b50      	ldr	r3, [pc, #320]	@ (80024f0 <HAL_RCC_ClockConfig+0x1bc>)
 80023ae:	689b      	ldr	r3, [r3, #8]
 80023b0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	689b      	ldr	r3, [r3, #8]
 80023b8:	494d      	ldr	r1, [pc, #308]	@ (80024f0 <HAL_RCC_ClockConfig+0x1bc>)
 80023ba:	4313      	orrs	r3, r2
 80023bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f003 0301 	and.w	r3, r3, #1
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d044      	beq.n	8002454 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	2b01      	cmp	r3, #1
 80023d0:	d107      	bne.n	80023e2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023d2:	4b47      	ldr	r3, [pc, #284]	@ (80024f0 <HAL_RCC_ClockConfig+0x1bc>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d119      	bne.n	8002412 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023de:	2301      	movs	r3, #1
 80023e0:	e07f      	b.n	80024e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	2b02      	cmp	r3, #2
 80023e8:	d003      	beq.n	80023f2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80023ee:	2b03      	cmp	r3, #3
 80023f0:	d107      	bne.n	8002402 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023f2:	4b3f      	ldr	r3, [pc, #252]	@ (80024f0 <HAL_RCC_ClockConfig+0x1bc>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d109      	bne.n	8002412 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023fe:	2301      	movs	r3, #1
 8002400:	e06f      	b.n	80024e2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002402:	4b3b      	ldr	r3, [pc, #236]	@ (80024f0 <HAL_RCC_ClockConfig+0x1bc>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f003 0302 	and.w	r3, r3, #2
 800240a:	2b00      	cmp	r3, #0
 800240c:	d101      	bne.n	8002412 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800240e:	2301      	movs	r3, #1
 8002410:	e067      	b.n	80024e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002412:	4b37      	ldr	r3, [pc, #220]	@ (80024f0 <HAL_RCC_ClockConfig+0x1bc>)
 8002414:	689b      	ldr	r3, [r3, #8]
 8002416:	f023 0203 	bic.w	r2, r3, #3
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	4934      	ldr	r1, [pc, #208]	@ (80024f0 <HAL_RCC_ClockConfig+0x1bc>)
 8002420:	4313      	orrs	r3, r2
 8002422:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002424:	f7ff fc8a 	bl	8001d3c <HAL_GetTick>
 8002428:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800242a:	e00a      	b.n	8002442 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800242c:	f7ff fc86 	bl	8001d3c <HAL_GetTick>
 8002430:	4602      	mov	r2, r0
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	1ad3      	subs	r3, r2, r3
 8002436:	f241 3288 	movw	r2, #5000	@ 0x1388
 800243a:	4293      	cmp	r3, r2
 800243c:	d901      	bls.n	8002442 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800243e:	2303      	movs	r3, #3
 8002440:	e04f      	b.n	80024e2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002442:	4b2b      	ldr	r3, [pc, #172]	@ (80024f0 <HAL_RCC_ClockConfig+0x1bc>)
 8002444:	689b      	ldr	r3, [r3, #8]
 8002446:	f003 020c 	and.w	r2, r3, #12
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	009b      	lsls	r3, r3, #2
 8002450:	429a      	cmp	r2, r3
 8002452:	d1eb      	bne.n	800242c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002454:	4b25      	ldr	r3, [pc, #148]	@ (80024ec <HAL_RCC_ClockConfig+0x1b8>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f003 030f 	and.w	r3, r3, #15
 800245c:	683a      	ldr	r2, [r7, #0]
 800245e:	429a      	cmp	r2, r3
 8002460:	d20c      	bcs.n	800247c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002462:	4b22      	ldr	r3, [pc, #136]	@ (80024ec <HAL_RCC_ClockConfig+0x1b8>)
 8002464:	683a      	ldr	r2, [r7, #0]
 8002466:	b2d2      	uxtb	r2, r2
 8002468:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800246a:	4b20      	ldr	r3, [pc, #128]	@ (80024ec <HAL_RCC_ClockConfig+0x1b8>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f003 030f 	and.w	r3, r3, #15
 8002472:	683a      	ldr	r2, [r7, #0]
 8002474:	429a      	cmp	r2, r3
 8002476:	d001      	beq.n	800247c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002478:	2301      	movs	r3, #1
 800247a:	e032      	b.n	80024e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f003 0304 	and.w	r3, r3, #4
 8002484:	2b00      	cmp	r3, #0
 8002486:	d008      	beq.n	800249a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002488:	4b19      	ldr	r3, [pc, #100]	@ (80024f0 <HAL_RCC_ClockConfig+0x1bc>)
 800248a:	689b      	ldr	r3, [r3, #8]
 800248c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	68db      	ldr	r3, [r3, #12]
 8002494:	4916      	ldr	r1, [pc, #88]	@ (80024f0 <HAL_RCC_ClockConfig+0x1bc>)
 8002496:	4313      	orrs	r3, r2
 8002498:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f003 0308 	and.w	r3, r3, #8
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d009      	beq.n	80024ba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80024a6:	4b12      	ldr	r3, [pc, #72]	@ (80024f0 <HAL_RCC_ClockConfig+0x1bc>)
 80024a8:	689b      	ldr	r3, [r3, #8]
 80024aa:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	691b      	ldr	r3, [r3, #16]
 80024b2:	00db      	lsls	r3, r3, #3
 80024b4:	490e      	ldr	r1, [pc, #56]	@ (80024f0 <HAL_RCC_ClockConfig+0x1bc>)
 80024b6:	4313      	orrs	r3, r2
 80024b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80024ba:	f000 f855 	bl	8002568 <HAL_RCC_GetSysClockFreq>
 80024be:	4602      	mov	r2, r0
 80024c0:	4b0b      	ldr	r3, [pc, #44]	@ (80024f0 <HAL_RCC_ClockConfig+0x1bc>)
 80024c2:	689b      	ldr	r3, [r3, #8]
 80024c4:	091b      	lsrs	r3, r3, #4
 80024c6:	f003 030f 	and.w	r3, r3, #15
 80024ca:	490a      	ldr	r1, [pc, #40]	@ (80024f4 <HAL_RCC_ClockConfig+0x1c0>)
 80024cc:	5ccb      	ldrb	r3, [r1, r3]
 80024ce:	fa22 f303 	lsr.w	r3, r2, r3
 80024d2:	4a09      	ldr	r2, [pc, #36]	@ (80024f8 <HAL_RCC_ClockConfig+0x1c4>)
 80024d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80024d6:	4b09      	ldr	r3, [pc, #36]	@ (80024fc <HAL_RCC_ClockConfig+0x1c8>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4618      	mov	r0, r3
 80024dc:	f7ff fbea 	bl	8001cb4 <HAL_InitTick>

  return HAL_OK;
 80024e0:	2300      	movs	r3, #0
}
 80024e2:	4618      	mov	r0, r3
 80024e4:	3710      	adds	r7, #16
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}
 80024ea:	bf00      	nop
 80024ec:	40023c00 	.word	0x40023c00
 80024f0:	40023800 	.word	0x40023800
 80024f4:	080045c8 	.word	0x080045c8
 80024f8:	20000004 	.word	0x20000004
 80024fc:	20000008 	.word	0x20000008

08002500 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002500:	b480      	push	{r7}
 8002502:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002504:	4b03      	ldr	r3, [pc, #12]	@ (8002514 <HAL_RCC_GetHCLKFreq+0x14>)
 8002506:	681b      	ldr	r3, [r3, #0]
}
 8002508:	4618      	mov	r0, r3
 800250a:	46bd      	mov	sp, r7
 800250c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002510:	4770      	bx	lr
 8002512:	bf00      	nop
 8002514:	20000004 	.word	0x20000004

08002518 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800251c:	f7ff fff0 	bl	8002500 <HAL_RCC_GetHCLKFreq>
 8002520:	4602      	mov	r2, r0
 8002522:	4b05      	ldr	r3, [pc, #20]	@ (8002538 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002524:	689b      	ldr	r3, [r3, #8]
 8002526:	0a9b      	lsrs	r3, r3, #10
 8002528:	f003 0307 	and.w	r3, r3, #7
 800252c:	4903      	ldr	r1, [pc, #12]	@ (800253c <HAL_RCC_GetPCLK1Freq+0x24>)
 800252e:	5ccb      	ldrb	r3, [r1, r3]
 8002530:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002534:	4618      	mov	r0, r3
 8002536:	bd80      	pop	{r7, pc}
 8002538:	40023800 	.word	0x40023800
 800253c:	080045d8 	.word	0x080045d8

08002540 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002544:	f7ff ffdc 	bl	8002500 <HAL_RCC_GetHCLKFreq>
 8002548:	4602      	mov	r2, r0
 800254a:	4b05      	ldr	r3, [pc, #20]	@ (8002560 <HAL_RCC_GetPCLK2Freq+0x20>)
 800254c:	689b      	ldr	r3, [r3, #8]
 800254e:	0b5b      	lsrs	r3, r3, #13
 8002550:	f003 0307 	and.w	r3, r3, #7
 8002554:	4903      	ldr	r1, [pc, #12]	@ (8002564 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002556:	5ccb      	ldrb	r3, [r1, r3]
 8002558:	fa22 f303 	lsr.w	r3, r2, r3
}
 800255c:	4618      	mov	r0, r3
 800255e:	bd80      	pop	{r7, pc}
 8002560:	40023800 	.word	0x40023800
 8002564:	080045d8 	.word	0x080045d8

08002568 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002568:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800256c:	b0ae      	sub	sp, #184	@ 0xb8
 800256e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002570:	2300      	movs	r3, #0
 8002572:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8002576:	2300      	movs	r3, #0
 8002578:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 800257c:	2300      	movs	r3, #0
 800257e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8002582:	2300      	movs	r3, #0
 8002584:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8002588:	2300      	movs	r3, #0
 800258a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800258e:	4bcb      	ldr	r3, [pc, #812]	@ (80028bc <HAL_RCC_GetSysClockFreq+0x354>)
 8002590:	689b      	ldr	r3, [r3, #8]
 8002592:	f003 030c 	and.w	r3, r3, #12
 8002596:	2b0c      	cmp	r3, #12
 8002598:	f200 8206 	bhi.w	80029a8 <HAL_RCC_GetSysClockFreq+0x440>
 800259c:	a201      	add	r2, pc, #4	@ (adr r2, 80025a4 <HAL_RCC_GetSysClockFreq+0x3c>)
 800259e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025a2:	bf00      	nop
 80025a4:	080025d9 	.word	0x080025d9
 80025a8:	080029a9 	.word	0x080029a9
 80025ac:	080029a9 	.word	0x080029a9
 80025b0:	080029a9 	.word	0x080029a9
 80025b4:	080025e1 	.word	0x080025e1
 80025b8:	080029a9 	.word	0x080029a9
 80025bc:	080029a9 	.word	0x080029a9
 80025c0:	080029a9 	.word	0x080029a9
 80025c4:	080025e9 	.word	0x080025e9
 80025c8:	080029a9 	.word	0x080029a9
 80025cc:	080029a9 	.word	0x080029a9
 80025d0:	080029a9 	.word	0x080029a9
 80025d4:	080027d9 	.word	0x080027d9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80025d8:	4bb9      	ldr	r3, [pc, #740]	@ (80028c0 <HAL_RCC_GetSysClockFreq+0x358>)
 80025da:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80025de:	e1e7      	b.n	80029b0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80025e0:	4bb8      	ldr	r3, [pc, #736]	@ (80028c4 <HAL_RCC_GetSysClockFreq+0x35c>)
 80025e2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80025e6:	e1e3      	b.n	80029b0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80025e8:	4bb4      	ldr	r3, [pc, #720]	@ (80028bc <HAL_RCC_GetSysClockFreq+0x354>)
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80025f0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80025f4:	4bb1      	ldr	r3, [pc, #708]	@ (80028bc <HAL_RCC_GetSysClockFreq+0x354>)
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d071      	beq.n	80026e4 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002600:	4bae      	ldr	r3, [pc, #696]	@ (80028bc <HAL_RCC_GetSysClockFreq+0x354>)
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	099b      	lsrs	r3, r3, #6
 8002606:	2200      	movs	r2, #0
 8002608:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800260c:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8002610:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002614:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002618:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800261c:	2300      	movs	r3, #0
 800261e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002622:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002626:	4622      	mov	r2, r4
 8002628:	462b      	mov	r3, r5
 800262a:	f04f 0000 	mov.w	r0, #0
 800262e:	f04f 0100 	mov.w	r1, #0
 8002632:	0159      	lsls	r1, r3, #5
 8002634:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002638:	0150      	lsls	r0, r2, #5
 800263a:	4602      	mov	r2, r0
 800263c:	460b      	mov	r3, r1
 800263e:	4621      	mov	r1, r4
 8002640:	1a51      	subs	r1, r2, r1
 8002642:	6439      	str	r1, [r7, #64]	@ 0x40
 8002644:	4629      	mov	r1, r5
 8002646:	eb63 0301 	sbc.w	r3, r3, r1
 800264a:	647b      	str	r3, [r7, #68]	@ 0x44
 800264c:	f04f 0200 	mov.w	r2, #0
 8002650:	f04f 0300 	mov.w	r3, #0
 8002654:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8002658:	4649      	mov	r1, r9
 800265a:	018b      	lsls	r3, r1, #6
 800265c:	4641      	mov	r1, r8
 800265e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002662:	4641      	mov	r1, r8
 8002664:	018a      	lsls	r2, r1, #6
 8002666:	4641      	mov	r1, r8
 8002668:	1a51      	subs	r1, r2, r1
 800266a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800266c:	4649      	mov	r1, r9
 800266e:	eb63 0301 	sbc.w	r3, r3, r1
 8002672:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002674:	f04f 0200 	mov.w	r2, #0
 8002678:	f04f 0300 	mov.w	r3, #0
 800267c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8002680:	4649      	mov	r1, r9
 8002682:	00cb      	lsls	r3, r1, #3
 8002684:	4641      	mov	r1, r8
 8002686:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800268a:	4641      	mov	r1, r8
 800268c:	00ca      	lsls	r2, r1, #3
 800268e:	4610      	mov	r0, r2
 8002690:	4619      	mov	r1, r3
 8002692:	4603      	mov	r3, r0
 8002694:	4622      	mov	r2, r4
 8002696:	189b      	adds	r3, r3, r2
 8002698:	633b      	str	r3, [r7, #48]	@ 0x30
 800269a:	462b      	mov	r3, r5
 800269c:	460a      	mov	r2, r1
 800269e:	eb42 0303 	adc.w	r3, r2, r3
 80026a2:	637b      	str	r3, [r7, #52]	@ 0x34
 80026a4:	f04f 0200 	mov.w	r2, #0
 80026a8:	f04f 0300 	mov.w	r3, #0
 80026ac:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80026b0:	4629      	mov	r1, r5
 80026b2:	024b      	lsls	r3, r1, #9
 80026b4:	4621      	mov	r1, r4
 80026b6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80026ba:	4621      	mov	r1, r4
 80026bc:	024a      	lsls	r2, r1, #9
 80026be:	4610      	mov	r0, r2
 80026c0:	4619      	mov	r1, r3
 80026c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80026c6:	2200      	movs	r2, #0
 80026c8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80026cc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80026d0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80026d4:	f7fe f9fe 	bl	8000ad4 <__aeabi_uldivmod>
 80026d8:	4602      	mov	r2, r0
 80026da:	460b      	mov	r3, r1
 80026dc:	4613      	mov	r3, r2
 80026de:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80026e2:	e067      	b.n	80027b4 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026e4:	4b75      	ldr	r3, [pc, #468]	@ (80028bc <HAL_RCC_GetSysClockFreq+0x354>)
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	099b      	lsrs	r3, r3, #6
 80026ea:	2200      	movs	r2, #0
 80026ec:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80026f0:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80026f4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80026f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80026fc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80026fe:	2300      	movs	r3, #0
 8002700:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002702:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8002706:	4622      	mov	r2, r4
 8002708:	462b      	mov	r3, r5
 800270a:	f04f 0000 	mov.w	r0, #0
 800270e:	f04f 0100 	mov.w	r1, #0
 8002712:	0159      	lsls	r1, r3, #5
 8002714:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002718:	0150      	lsls	r0, r2, #5
 800271a:	4602      	mov	r2, r0
 800271c:	460b      	mov	r3, r1
 800271e:	4621      	mov	r1, r4
 8002720:	1a51      	subs	r1, r2, r1
 8002722:	62b9      	str	r1, [r7, #40]	@ 0x28
 8002724:	4629      	mov	r1, r5
 8002726:	eb63 0301 	sbc.w	r3, r3, r1
 800272a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800272c:	f04f 0200 	mov.w	r2, #0
 8002730:	f04f 0300 	mov.w	r3, #0
 8002734:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8002738:	4649      	mov	r1, r9
 800273a:	018b      	lsls	r3, r1, #6
 800273c:	4641      	mov	r1, r8
 800273e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002742:	4641      	mov	r1, r8
 8002744:	018a      	lsls	r2, r1, #6
 8002746:	4641      	mov	r1, r8
 8002748:	ebb2 0a01 	subs.w	sl, r2, r1
 800274c:	4649      	mov	r1, r9
 800274e:	eb63 0b01 	sbc.w	fp, r3, r1
 8002752:	f04f 0200 	mov.w	r2, #0
 8002756:	f04f 0300 	mov.w	r3, #0
 800275a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800275e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002762:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002766:	4692      	mov	sl, r2
 8002768:	469b      	mov	fp, r3
 800276a:	4623      	mov	r3, r4
 800276c:	eb1a 0303 	adds.w	r3, sl, r3
 8002770:	623b      	str	r3, [r7, #32]
 8002772:	462b      	mov	r3, r5
 8002774:	eb4b 0303 	adc.w	r3, fp, r3
 8002778:	627b      	str	r3, [r7, #36]	@ 0x24
 800277a:	f04f 0200 	mov.w	r2, #0
 800277e:	f04f 0300 	mov.w	r3, #0
 8002782:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002786:	4629      	mov	r1, r5
 8002788:	028b      	lsls	r3, r1, #10
 800278a:	4621      	mov	r1, r4
 800278c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002790:	4621      	mov	r1, r4
 8002792:	028a      	lsls	r2, r1, #10
 8002794:	4610      	mov	r0, r2
 8002796:	4619      	mov	r1, r3
 8002798:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800279c:	2200      	movs	r2, #0
 800279e:	673b      	str	r3, [r7, #112]	@ 0x70
 80027a0:	677a      	str	r2, [r7, #116]	@ 0x74
 80027a2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80027a6:	f7fe f995 	bl	8000ad4 <__aeabi_uldivmod>
 80027aa:	4602      	mov	r2, r0
 80027ac:	460b      	mov	r3, r1
 80027ae:	4613      	mov	r3, r2
 80027b0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80027b4:	4b41      	ldr	r3, [pc, #260]	@ (80028bc <HAL_RCC_GetSysClockFreq+0x354>)
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	0c1b      	lsrs	r3, r3, #16
 80027ba:	f003 0303 	and.w	r3, r3, #3
 80027be:	3301      	adds	r3, #1
 80027c0:	005b      	lsls	r3, r3, #1
 80027c2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 80027c6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80027ca:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80027ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80027d2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80027d6:	e0eb      	b.n	80029b0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80027d8:	4b38      	ldr	r3, [pc, #224]	@ (80028bc <HAL_RCC_GetSysClockFreq+0x354>)
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80027e0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80027e4:	4b35      	ldr	r3, [pc, #212]	@ (80028bc <HAL_RCC_GetSysClockFreq+0x354>)
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d06b      	beq.n	80028c8 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027f0:	4b32      	ldr	r3, [pc, #200]	@ (80028bc <HAL_RCC_GetSysClockFreq+0x354>)
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	099b      	lsrs	r3, r3, #6
 80027f6:	2200      	movs	r2, #0
 80027f8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80027fa:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80027fc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80027fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002802:	663b      	str	r3, [r7, #96]	@ 0x60
 8002804:	2300      	movs	r3, #0
 8002806:	667b      	str	r3, [r7, #100]	@ 0x64
 8002808:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800280c:	4622      	mov	r2, r4
 800280e:	462b      	mov	r3, r5
 8002810:	f04f 0000 	mov.w	r0, #0
 8002814:	f04f 0100 	mov.w	r1, #0
 8002818:	0159      	lsls	r1, r3, #5
 800281a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800281e:	0150      	lsls	r0, r2, #5
 8002820:	4602      	mov	r2, r0
 8002822:	460b      	mov	r3, r1
 8002824:	4621      	mov	r1, r4
 8002826:	1a51      	subs	r1, r2, r1
 8002828:	61b9      	str	r1, [r7, #24]
 800282a:	4629      	mov	r1, r5
 800282c:	eb63 0301 	sbc.w	r3, r3, r1
 8002830:	61fb      	str	r3, [r7, #28]
 8002832:	f04f 0200 	mov.w	r2, #0
 8002836:	f04f 0300 	mov.w	r3, #0
 800283a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800283e:	4659      	mov	r1, fp
 8002840:	018b      	lsls	r3, r1, #6
 8002842:	4651      	mov	r1, sl
 8002844:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002848:	4651      	mov	r1, sl
 800284a:	018a      	lsls	r2, r1, #6
 800284c:	4651      	mov	r1, sl
 800284e:	ebb2 0801 	subs.w	r8, r2, r1
 8002852:	4659      	mov	r1, fp
 8002854:	eb63 0901 	sbc.w	r9, r3, r1
 8002858:	f04f 0200 	mov.w	r2, #0
 800285c:	f04f 0300 	mov.w	r3, #0
 8002860:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002864:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002868:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800286c:	4690      	mov	r8, r2
 800286e:	4699      	mov	r9, r3
 8002870:	4623      	mov	r3, r4
 8002872:	eb18 0303 	adds.w	r3, r8, r3
 8002876:	613b      	str	r3, [r7, #16]
 8002878:	462b      	mov	r3, r5
 800287a:	eb49 0303 	adc.w	r3, r9, r3
 800287e:	617b      	str	r3, [r7, #20]
 8002880:	f04f 0200 	mov.w	r2, #0
 8002884:	f04f 0300 	mov.w	r3, #0
 8002888:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800288c:	4629      	mov	r1, r5
 800288e:	024b      	lsls	r3, r1, #9
 8002890:	4621      	mov	r1, r4
 8002892:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002896:	4621      	mov	r1, r4
 8002898:	024a      	lsls	r2, r1, #9
 800289a:	4610      	mov	r0, r2
 800289c:	4619      	mov	r1, r3
 800289e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80028a2:	2200      	movs	r2, #0
 80028a4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80028a6:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80028a8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80028ac:	f7fe f912 	bl	8000ad4 <__aeabi_uldivmod>
 80028b0:	4602      	mov	r2, r0
 80028b2:	460b      	mov	r3, r1
 80028b4:	4613      	mov	r3, r2
 80028b6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80028ba:	e065      	b.n	8002988 <HAL_RCC_GetSysClockFreq+0x420>
 80028bc:	40023800 	.word	0x40023800
 80028c0:	00f42400 	.word	0x00f42400
 80028c4:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028c8:	4b3d      	ldr	r3, [pc, #244]	@ (80029c0 <HAL_RCC_GetSysClockFreq+0x458>)
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	099b      	lsrs	r3, r3, #6
 80028ce:	2200      	movs	r2, #0
 80028d0:	4618      	mov	r0, r3
 80028d2:	4611      	mov	r1, r2
 80028d4:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80028d8:	653b      	str	r3, [r7, #80]	@ 0x50
 80028da:	2300      	movs	r3, #0
 80028dc:	657b      	str	r3, [r7, #84]	@ 0x54
 80028de:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 80028e2:	4642      	mov	r2, r8
 80028e4:	464b      	mov	r3, r9
 80028e6:	f04f 0000 	mov.w	r0, #0
 80028ea:	f04f 0100 	mov.w	r1, #0
 80028ee:	0159      	lsls	r1, r3, #5
 80028f0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80028f4:	0150      	lsls	r0, r2, #5
 80028f6:	4602      	mov	r2, r0
 80028f8:	460b      	mov	r3, r1
 80028fa:	4641      	mov	r1, r8
 80028fc:	1a51      	subs	r1, r2, r1
 80028fe:	60b9      	str	r1, [r7, #8]
 8002900:	4649      	mov	r1, r9
 8002902:	eb63 0301 	sbc.w	r3, r3, r1
 8002906:	60fb      	str	r3, [r7, #12]
 8002908:	f04f 0200 	mov.w	r2, #0
 800290c:	f04f 0300 	mov.w	r3, #0
 8002910:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002914:	4659      	mov	r1, fp
 8002916:	018b      	lsls	r3, r1, #6
 8002918:	4651      	mov	r1, sl
 800291a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800291e:	4651      	mov	r1, sl
 8002920:	018a      	lsls	r2, r1, #6
 8002922:	4651      	mov	r1, sl
 8002924:	1a54      	subs	r4, r2, r1
 8002926:	4659      	mov	r1, fp
 8002928:	eb63 0501 	sbc.w	r5, r3, r1
 800292c:	f04f 0200 	mov.w	r2, #0
 8002930:	f04f 0300 	mov.w	r3, #0
 8002934:	00eb      	lsls	r3, r5, #3
 8002936:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800293a:	00e2      	lsls	r2, r4, #3
 800293c:	4614      	mov	r4, r2
 800293e:	461d      	mov	r5, r3
 8002940:	4643      	mov	r3, r8
 8002942:	18e3      	adds	r3, r4, r3
 8002944:	603b      	str	r3, [r7, #0]
 8002946:	464b      	mov	r3, r9
 8002948:	eb45 0303 	adc.w	r3, r5, r3
 800294c:	607b      	str	r3, [r7, #4]
 800294e:	f04f 0200 	mov.w	r2, #0
 8002952:	f04f 0300 	mov.w	r3, #0
 8002956:	e9d7 4500 	ldrd	r4, r5, [r7]
 800295a:	4629      	mov	r1, r5
 800295c:	028b      	lsls	r3, r1, #10
 800295e:	4621      	mov	r1, r4
 8002960:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002964:	4621      	mov	r1, r4
 8002966:	028a      	lsls	r2, r1, #10
 8002968:	4610      	mov	r0, r2
 800296a:	4619      	mov	r1, r3
 800296c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002970:	2200      	movs	r2, #0
 8002972:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002974:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8002976:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800297a:	f7fe f8ab 	bl	8000ad4 <__aeabi_uldivmod>
 800297e:	4602      	mov	r2, r0
 8002980:	460b      	mov	r3, r1
 8002982:	4613      	mov	r3, r2
 8002984:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002988:	4b0d      	ldr	r3, [pc, #52]	@ (80029c0 <HAL_RCC_GetSysClockFreq+0x458>)
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	0f1b      	lsrs	r3, r3, #28
 800298e:	f003 0307 	and.w	r3, r3, #7
 8002992:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8002996:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800299a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800299e:	fbb2 f3f3 	udiv	r3, r2, r3
 80029a2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80029a6:	e003      	b.n	80029b0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80029a8:	4b06      	ldr	r3, [pc, #24]	@ (80029c4 <HAL_RCC_GetSysClockFreq+0x45c>)
 80029aa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80029ae:	bf00      	nop
    }
  }
  return sysclockfreq;
 80029b0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 80029b4:	4618      	mov	r0, r3
 80029b6:	37b8      	adds	r7, #184	@ 0xb8
 80029b8:	46bd      	mov	sp, r7
 80029ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80029be:	bf00      	nop
 80029c0:	40023800 	.word	0x40023800
 80029c4:	00f42400 	.word	0x00f42400

080029c8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b086      	sub	sp, #24
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d101      	bne.n	80029da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80029d6:	2301      	movs	r3, #1
 80029d8:	e28d      	b.n	8002ef6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f003 0301 	and.w	r3, r3, #1
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	f000 8083 	beq.w	8002aee <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80029e8:	4b94      	ldr	r3, [pc, #592]	@ (8002c3c <HAL_RCC_OscConfig+0x274>)
 80029ea:	689b      	ldr	r3, [r3, #8]
 80029ec:	f003 030c 	and.w	r3, r3, #12
 80029f0:	2b04      	cmp	r3, #4
 80029f2:	d019      	beq.n	8002a28 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80029f4:	4b91      	ldr	r3, [pc, #580]	@ (8002c3c <HAL_RCC_OscConfig+0x274>)
 80029f6:	689b      	ldr	r3, [r3, #8]
 80029f8:	f003 030c 	and.w	r3, r3, #12
        || \
 80029fc:	2b08      	cmp	r3, #8
 80029fe:	d106      	bne.n	8002a0e <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002a00:	4b8e      	ldr	r3, [pc, #568]	@ (8002c3c <HAL_RCC_OscConfig+0x274>)
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a08:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002a0c:	d00c      	beq.n	8002a28 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a0e:	4b8b      	ldr	r3, [pc, #556]	@ (8002c3c <HAL_RCC_OscConfig+0x274>)
 8002a10:	689b      	ldr	r3, [r3, #8]
 8002a12:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002a16:	2b0c      	cmp	r3, #12
 8002a18:	d112      	bne.n	8002a40 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a1a:	4b88      	ldr	r3, [pc, #544]	@ (8002c3c <HAL_RCC_OscConfig+0x274>)
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a22:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002a26:	d10b      	bne.n	8002a40 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a28:	4b84      	ldr	r3, [pc, #528]	@ (8002c3c <HAL_RCC_OscConfig+0x274>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d05b      	beq.n	8002aec <HAL_RCC_OscConfig+0x124>
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d157      	bne.n	8002aec <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	e25a      	b.n	8002ef6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a48:	d106      	bne.n	8002a58 <HAL_RCC_OscConfig+0x90>
 8002a4a:	4b7c      	ldr	r3, [pc, #496]	@ (8002c3c <HAL_RCC_OscConfig+0x274>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4a7b      	ldr	r2, [pc, #492]	@ (8002c3c <HAL_RCC_OscConfig+0x274>)
 8002a50:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a54:	6013      	str	r3, [r2, #0]
 8002a56:	e01d      	b.n	8002a94 <HAL_RCC_OscConfig+0xcc>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002a60:	d10c      	bne.n	8002a7c <HAL_RCC_OscConfig+0xb4>
 8002a62:	4b76      	ldr	r3, [pc, #472]	@ (8002c3c <HAL_RCC_OscConfig+0x274>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4a75      	ldr	r2, [pc, #468]	@ (8002c3c <HAL_RCC_OscConfig+0x274>)
 8002a68:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002a6c:	6013      	str	r3, [r2, #0]
 8002a6e:	4b73      	ldr	r3, [pc, #460]	@ (8002c3c <HAL_RCC_OscConfig+0x274>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4a72      	ldr	r2, [pc, #456]	@ (8002c3c <HAL_RCC_OscConfig+0x274>)
 8002a74:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a78:	6013      	str	r3, [r2, #0]
 8002a7a:	e00b      	b.n	8002a94 <HAL_RCC_OscConfig+0xcc>
 8002a7c:	4b6f      	ldr	r3, [pc, #444]	@ (8002c3c <HAL_RCC_OscConfig+0x274>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a6e      	ldr	r2, [pc, #440]	@ (8002c3c <HAL_RCC_OscConfig+0x274>)
 8002a82:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a86:	6013      	str	r3, [r2, #0]
 8002a88:	4b6c      	ldr	r3, [pc, #432]	@ (8002c3c <HAL_RCC_OscConfig+0x274>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4a6b      	ldr	r2, [pc, #428]	@ (8002c3c <HAL_RCC_OscConfig+0x274>)
 8002a8e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002a92:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d013      	beq.n	8002ac4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a9c:	f7ff f94e 	bl	8001d3c <HAL_GetTick>
 8002aa0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002aa2:	e008      	b.n	8002ab6 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002aa4:	f7ff f94a 	bl	8001d3c <HAL_GetTick>
 8002aa8:	4602      	mov	r2, r0
 8002aaa:	693b      	ldr	r3, [r7, #16]
 8002aac:	1ad3      	subs	r3, r2, r3
 8002aae:	2b64      	cmp	r3, #100	@ 0x64
 8002ab0:	d901      	bls.n	8002ab6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002ab2:	2303      	movs	r3, #3
 8002ab4:	e21f      	b.n	8002ef6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ab6:	4b61      	ldr	r3, [pc, #388]	@ (8002c3c <HAL_RCC_OscConfig+0x274>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d0f0      	beq.n	8002aa4 <HAL_RCC_OscConfig+0xdc>
 8002ac2:	e014      	b.n	8002aee <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ac4:	f7ff f93a 	bl	8001d3c <HAL_GetTick>
 8002ac8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002aca:	e008      	b.n	8002ade <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002acc:	f7ff f936 	bl	8001d3c <HAL_GetTick>
 8002ad0:	4602      	mov	r2, r0
 8002ad2:	693b      	ldr	r3, [r7, #16]
 8002ad4:	1ad3      	subs	r3, r2, r3
 8002ad6:	2b64      	cmp	r3, #100	@ 0x64
 8002ad8:	d901      	bls.n	8002ade <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002ada:	2303      	movs	r3, #3
 8002adc:	e20b      	b.n	8002ef6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ade:	4b57      	ldr	r3, [pc, #348]	@ (8002c3c <HAL_RCC_OscConfig+0x274>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d1f0      	bne.n	8002acc <HAL_RCC_OscConfig+0x104>
 8002aea:	e000      	b.n	8002aee <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002aec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f003 0302 	and.w	r3, r3, #2
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d06f      	beq.n	8002bda <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002afa:	4b50      	ldr	r3, [pc, #320]	@ (8002c3c <HAL_RCC_OscConfig+0x274>)
 8002afc:	689b      	ldr	r3, [r3, #8]
 8002afe:	f003 030c 	and.w	r3, r3, #12
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d017      	beq.n	8002b36 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002b06:	4b4d      	ldr	r3, [pc, #308]	@ (8002c3c <HAL_RCC_OscConfig+0x274>)
 8002b08:	689b      	ldr	r3, [r3, #8]
 8002b0a:	f003 030c 	and.w	r3, r3, #12
        || \
 8002b0e:	2b08      	cmp	r3, #8
 8002b10:	d105      	bne.n	8002b1e <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002b12:	4b4a      	ldr	r3, [pc, #296]	@ (8002c3c <HAL_RCC_OscConfig+0x274>)
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d00b      	beq.n	8002b36 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b1e:	4b47      	ldr	r3, [pc, #284]	@ (8002c3c <HAL_RCC_OscConfig+0x274>)
 8002b20:	689b      	ldr	r3, [r3, #8]
 8002b22:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002b26:	2b0c      	cmp	r3, #12
 8002b28:	d11c      	bne.n	8002b64 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b2a:	4b44      	ldr	r3, [pc, #272]	@ (8002c3c <HAL_RCC_OscConfig+0x274>)
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d116      	bne.n	8002b64 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b36:	4b41      	ldr	r3, [pc, #260]	@ (8002c3c <HAL_RCC_OscConfig+0x274>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f003 0302 	and.w	r3, r3, #2
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d005      	beq.n	8002b4e <HAL_RCC_OscConfig+0x186>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	68db      	ldr	r3, [r3, #12]
 8002b46:	2b01      	cmp	r3, #1
 8002b48:	d001      	beq.n	8002b4e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	e1d3      	b.n	8002ef6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b4e:	4b3b      	ldr	r3, [pc, #236]	@ (8002c3c <HAL_RCC_OscConfig+0x274>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	691b      	ldr	r3, [r3, #16]
 8002b5a:	00db      	lsls	r3, r3, #3
 8002b5c:	4937      	ldr	r1, [pc, #220]	@ (8002c3c <HAL_RCC_OscConfig+0x274>)
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b62:	e03a      	b.n	8002bda <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	68db      	ldr	r3, [r3, #12]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d020      	beq.n	8002bae <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b6c:	4b34      	ldr	r3, [pc, #208]	@ (8002c40 <HAL_RCC_OscConfig+0x278>)
 8002b6e:	2201      	movs	r2, #1
 8002b70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b72:	f7ff f8e3 	bl	8001d3c <HAL_GetTick>
 8002b76:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b78:	e008      	b.n	8002b8c <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b7a:	f7ff f8df 	bl	8001d3c <HAL_GetTick>
 8002b7e:	4602      	mov	r2, r0
 8002b80:	693b      	ldr	r3, [r7, #16]
 8002b82:	1ad3      	subs	r3, r2, r3
 8002b84:	2b02      	cmp	r3, #2
 8002b86:	d901      	bls.n	8002b8c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002b88:	2303      	movs	r3, #3
 8002b8a:	e1b4      	b.n	8002ef6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b8c:	4b2b      	ldr	r3, [pc, #172]	@ (8002c3c <HAL_RCC_OscConfig+0x274>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f003 0302 	and.w	r3, r3, #2
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d0f0      	beq.n	8002b7a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b98:	4b28      	ldr	r3, [pc, #160]	@ (8002c3c <HAL_RCC_OscConfig+0x274>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	691b      	ldr	r3, [r3, #16]
 8002ba4:	00db      	lsls	r3, r3, #3
 8002ba6:	4925      	ldr	r1, [pc, #148]	@ (8002c3c <HAL_RCC_OscConfig+0x274>)
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	600b      	str	r3, [r1, #0]
 8002bac:	e015      	b.n	8002bda <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002bae:	4b24      	ldr	r3, [pc, #144]	@ (8002c40 <HAL_RCC_OscConfig+0x278>)
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bb4:	f7ff f8c2 	bl	8001d3c <HAL_GetTick>
 8002bb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bba:	e008      	b.n	8002bce <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bbc:	f7ff f8be 	bl	8001d3c <HAL_GetTick>
 8002bc0:	4602      	mov	r2, r0
 8002bc2:	693b      	ldr	r3, [r7, #16]
 8002bc4:	1ad3      	subs	r3, r2, r3
 8002bc6:	2b02      	cmp	r3, #2
 8002bc8:	d901      	bls.n	8002bce <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002bca:	2303      	movs	r3, #3
 8002bcc:	e193      	b.n	8002ef6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bce:	4b1b      	ldr	r3, [pc, #108]	@ (8002c3c <HAL_RCC_OscConfig+0x274>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f003 0302 	and.w	r3, r3, #2
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d1f0      	bne.n	8002bbc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f003 0308 	and.w	r3, r3, #8
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d036      	beq.n	8002c54 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	695b      	ldr	r3, [r3, #20]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d016      	beq.n	8002c1c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002bee:	4b15      	ldr	r3, [pc, #84]	@ (8002c44 <HAL_RCC_OscConfig+0x27c>)
 8002bf0:	2201      	movs	r2, #1
 8002bf2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bf4:	f7ff f8a2 	bl	8001d3c <HAL_GetTick>
 8002bf8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bfa:	e008      	b.n	8002c0e <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002bfc:	f7ff f89e 	bl	8001d3c <HAL_GetTick>
 8002c00:	4602      	mov	r2, r0
 8002c02:	693b      	ldr	r3, [r7, #16]
 8002c04:	1ad3      	subs	r3, r2, r3
 8002c06:	2b02      	cmp	r3, #2
 8002c08:	d901      	bls.n	8002c0e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002c0a:	2303      	movs	r3, #3
 8002c0c:	e173      	b.n	8002ef6 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c0e:	4b0b      	ldr	r3, [pc, #44]	@ (8002c3c <HAL_RCC_OscConfig+0x274>)
 8002c10:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c12:	f003 0302 	and.w	r3, r3, #2
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d0f0      	beq.n	8002bfc <HAL_RCC_OscConfig+0x234>
 8002c1a:	e01b      	b.n	8002c54 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c1c:	4b09      	ldr	r3, [pc, #36]	@ (8002c44 <HAL_RCC_OscConfig+0x27c>)
 8002c1e:	2200      	movs	r2, #0
 8002c20:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c22:	f7ff f88b 	bl	8001d3c <HAL_GetTick>
 8002c26:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c28:	e00e      	b.n	8002c48 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c2a:	f7ff f887 	bl	8001d3c <HAL_GetTick>
 8002c2e:	4602      	mov	r2, r0
 8002c30:	693b      	ldr	r3, [r7, #16]
 8002c32:	1ad3      	subs	r3, r2, r3
 8002c34:	2b02      	cmp	r3, #2
 8002c36:	d907      	bls.n	8002c48 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002c38:	2303      	movs	r3, #3
 8002c3a:	e15c      	b.n	8002ef6 <HAL_RCC_OscConfig+0x52e>
 8002c3c:	40023800 	.word	0x40023800
 8002c40:	42470000 	.word	0x42470000
 8002c44:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c48:	4b8a      	ldr	r3, [pc, #552]	@ (8002e74 <HAL_RCC_OscConfig+0x4ac>)
 8002c4a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c4c:	f003 0302 	and.w	r3, r3, #2
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d1ea      	bne.n	8002c2a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f003 0304 	and.w	r3, r3, #4
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	f000 8097 	beq.w	8002d90 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c62:	2300      	movs	r3, #0
 8002c64:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c66:	4b83      	ldr	r3, [pc, #524]	@ (8002e74 <HAL_RCC_OscConfig+0x4ac>)
 8002c68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d10f      	bne.n	8002c92 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c72:	2300      	movs	r3, #0
 8002c74:	60bb      	str	r3, [r7, #8]
 8002c76:	4b7f      	ldr	r3, [pc, #508]	@ (8002e74 <HAL_RCC_OscConfig+0x4ac>)
 8002c78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c7a:	4a7e      	ldr	r2, [pc, #504]	@ (8002e74 <HAL_RCC_OscConfig+0x4ac>)
 8002c7c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c80:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c82:	4b7c      	ldr	r3, [pc, #496]	@ (8002e74 <HAL_RCC_OscConfig+0x4ac>)
 8002c84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c8a:	60bb      	str	r3, [r7, #8]
 8002c8c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c92:	4b79      	ldr	r3, [pc, #484]	@ (8002e78 <HAL_RCC_OscConfig+0x4b0>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d118      	bne.n	8002cd0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c9e:	4b76      	ldr	r3, [pc, #472]	@ (8002e78 <HAL_RCC_OscConfig+0x4b0>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4a75      	ldr	r2, [pc, #468]	@ (8002e78 <HAL_RCC_OscConfig+0x4b0>)
 8002ca4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ca8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002caa:	f7ff f847 	bl	8001d3c <HAL_GetTick>
 8002cae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cb0:	e008      	b.n	8002cc4 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cb2:	f7ff f843 	bl	8001d3c <HAL_GetTick>
 8002cb6:	4602      	mov	r2, r0
 8002cb8:	693b      	ldr	r3, [r7, #16]
 8002cba:	1ad3      	subs	r3, r2, r3
 8002cbc:	2b02      	cmp	r3, #2
 8002cbe:	d901      	bls.n	8002cc4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002cc0:	2303      	movs	r3, #3
 8002cc2:	e118      	b.n	8002ef6 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cc4:	4b6c      	ldr	r3, [pc, #432]	@ (8002e78 <HAL_RCC_OscConfig+0x4b0>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d0f0      	beq.n	8002cb2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	689b      	ldr	r3, [r3, #8]
 8002cd4:	2b01      	cmp	r3, #1
 8002cd6:	d106      	bne.n	8002ce6 <HAL_RCC_OscConfig+0x31e>
 8002cd8:	4b66      	ldr	r3, [pc, #408]	@ (8002e74 <HAL_RCC_OscConfig+0x4ac>)
 8002cda:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cdc:	4a65      	ldr	r2, [pc, #404]	@ (8002e74 <HAL_RCC_OscConfig+0x4ac>)
 8002cde:	f043 0301 	orr.w	r3, r3, #1
 8002ce2:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ce4:	e01c      	b.n	8002d20 <HAL_RCC_OscConfig+0x358>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	689b      	ldr	r3, [r3, #8]
 8002cea:	2b05      	cmp	r3, #5
 8002cec:	d10c      	bne.n	8002d08 <HAL_RCC_OscConfig+0x340>
 8002cee:	4b61      	ldr	r3, [pc, #388]	@ (8002e74 <HAL_RCC_OscConfig+0x4ac>)
 8002cf0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cf2:	4a60      	ldr	r2, [pc, #384]	@ (8002e74 <HAL_RCC_OscConfig+0x4ac>)
 8002cf4:	f043 0304 	orr.w	r3, r3, #4
 8002cf8:	6713      	str	r3, [r2, #112]	@ 0x70
 8002cfa:	4b5e      	ldr	r3, [pc, #376]	@ (8002e74 <HAL_RCC_OscConfig+0x4ac>)
 8002cfc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cfe:	4a5d      	ldr	r2, [pc, #372]	@ (8002e74 <HAL_RCC_OscConfig+0x4ac>)
 8002d00:	f043 0301 	orr.w	r3, r3, #1
 8002d04:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d06:	e00b      	b.n	8002d20 <HAL_RCC_OscConfig+0x358>
 8002d08:	4b5a      	ldr	r3, [pc, #360]	@ (8002e74 <HAL_RCC_OscConfig+0x4ac>)
 8002d0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d0c:	4a59      	ldr	r2, [pc, #356]	@ (8002e74 <HAL_RCC_OscConfig+0x4ac>)
 8002d0e:	f023 0301 	bic.w	r3, r3, #1
 8002d12:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d14:	4b57      	ldr	r3, [pc, #348]	@ (8002e74 <HAL_RCC_OscConfig+0x4ac>)
 8002d16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d18:	4a56      	ldr	r2, [pc, #344]	@ (8002e74 <HAL_RCC_OscConfig+0x4ac>)
 8002d1a:	f023 0304 	bic.w	r3, r3, #4
 8002d1e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	689b      	ldr	r3, [r3, #8]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d015      	beq.n	8002d54 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d28:	f7ff f808 	bl	8001d3c <HAL_GetTick>
 8002d2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d2e:	e00a      	b.n	8002d46 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d30:	f7ff f804 	bl	8001d3c <HAL_GetTick>
 8002d34:	4602      	mov	r2, r0
 8002d36:	693b      	ldr	r3, [r7, #16]
 8002d38:	1ad3      	subs	r3, r2, r3
 8002d3a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d901      	bls.n	8002d46 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002d42:	2303      	movs	r3, #3
 8002d44:	e0d7      	b.n	8002ef6 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d46:	4b4b      	ldr	r3, [pc, #300]	@ (8002e74 <HAL_RCC_OscConfig+0x4ac>)
 8002d48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d4a:	f003 0302 	and.w	r3, r3, #2
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d0ee      	beq.n	8002d30 <HAL_RCC_OscConfig+0x368>
 8002d52:	e014      	b.n	8002d7e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d54:	f7fe fff2 	bl	8001d3c <HAL_GetTick>
 8002d58:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d5a:	e00a      	b.n	8002d72 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d5c:	f7fe ffee 	bl	8001d3c <HAL_GetTick>
 8002d60:	4602      	mov	r2, r0
 8002d62:	693b      	ldr	r3, [r7, #16]
 8002d64:	1ad3      	subs	r3, r2, r3
 8002d66:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d901      	bls.n	8002d72 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002d6e:	2303      	movs	r3, #3
 8002d70:	e0c1      	b.n	8002ef6 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d72:	4b40      	ldr	r3, [pc, #256]	@ (8002e74 <HAL_RCC_OscConfig+0x4ac>)
 8002d74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d76:	f003 0302 	and.w	r3, r3, #2
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d1ee      	bne.n	8002d5c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002d7e:	7dfb      	ldrb	r3, [r7, #23]
 8002d80:	2b01      	cmp	r3, #1
 8002d82:	d105      	bne.n	8002d90 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d84:	4b3b      	ldr	r3, [pc, #236]	@ (8002e74 <HAL_RCC_OscConfig+0x4ac>)
 8002d86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d88:	4a3a      	ldr	r2, [pc, #232]	@ (8002e74 <HAL_RCC_OscConfig+0x4ac>)
 8002d8a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002d8e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	699b      	ldr	r3, [r3, #24]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	f000 80ad 	beq.w	8002ef4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002d9a:	4b36      	ldr	r3, [pc, #216]	@ (8002e74 <HAL_RCC_OscConfig+0x4ac>)
 8002d9c:	689b      	ldr	r3, [r3, #8]
 8002d9e:	f003 030c 	and.w	r3, r3, #12
 8002da2:	2b08      	cmp	r3, #8
 8002da4:	d060      	beq.n	8002e68 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	699b      	ldr	r3, [r3, #24]
 8002daa:	2b02      	cmp	r3, #2
 8002dac:	d145      	bne.n	8002e3a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dae:	4b33      	ldr	r3, [pc, #204]	@ (8002e7c <HAL_RCC_OscConfig+0x4b4>)
 8002db0:	2200      	movs	r2, #0
 8002db2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002db4:	f7fe ffc2 	bl	8001d3c <HAL_GetTick>
 8002db8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dba:	e008      	b.n	8002dce <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dbc:	f7fe ffbe 	bl	8001d3c <HAL_GetTick>
 8002dc0:	4602      	mov	r2, r0
 8002dc2:	693b      	ldr	r3, [r7, #16]
 8002dc4:	1ad3      	subs	r3, r2, r3
 8002dc6:	2b02      	cmp	r3, #2
 8002dc8:	d901      	bls.n	8002dce <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002dca:	2303      	movs	r3, #3
 8002dcc:	e093      	b.n	8002ef6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dce:	4b29      	ldr	r3, [pc, #164]	@ (8002e74 <HAL_RCC_OscConfig+0x4ac>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d1f0      	bne.n	8002dbc <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	69da      	ldr	r2, [r3, #28]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6a1b      	ldr	r3, [r3, #32]
 8002de2:	431a      	orrs	r2, r3
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002de8:	019b      	lsls	r3, r3, #6
 8002dea:	431a      	orrs	r2, r3
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002df0:	085b      	lsrs	r3, r3, #1
 8002df2:	3b01      	subs	r3, #1
 8002df4:	041b      	lsls	r3, r3, #16
 8002df6:	431a      	orrs	r2, r3
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dfc:	061b      	lsls	r3, r3, #24
 8002dfe:	431a      	orrs	r2, r3
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e04:	071b      	lsls	r3, r3, #28
 8002e06:	491b      	ldr	r1, [pc, #108]	@ (8002e74 <HAL_RCC_OscConfig+0x4ac>)
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e0c:	4b1b      	ldr	r3, [pc, #108]	@ (8002e7c <HAL_RCC_OscConfig+0x4b4>)
 8002e0e:	2201      	movs	r2, #1
 8002e10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e12:	f7fe ff93 	bl	8001d3c <HAL_GetTick>
 8002e16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e18:	e008      	b.n	8002e2c <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e1a:	f7fe ff8f 	bl	8001d3c <HAL_GetTick>
 8002e1e:	4602      	mov	r2, r0
 8002e20:	693b      	ldr	r3, [r7, #16]
 8002e22:	1ad3      	subs	r3, r2, r3
 8002e24:	2b02      	cmp	r3, #2
 8002e26:	d901      	bls.n	8002e2c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002e28:	2303      	movs	r3, #3
 8002e2a:	e064      	b.n	8002ef6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e2c:	4b11      	ldr	r3, [pc, #68]	@ (8002e74 <HAL_RCC_OscConfig+0x4ac>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d0f0      	beq.n	8002e1a <HAL_RCC_OscConfig+0x452>
 8002e38:	e05c      	b.n	8002ef4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e3a:	4b10      	ldr	r3, [pc, #64]	@ (8002e7c <HAL_RCC_OscConfig+0x4b4>)
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e40:	f7fe ff7c 	bl	8001d3c <HAL_GetTick>
 8002e44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e46:	e008      	b.n	8002e5a <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e48:	f7fe ff78 	bl	8001d3c <HAL_GetTick>
 8002e4c:	4602      	mov	r2, r0
 8002e4e:	693b      	ldr	r3, [r7, #16]
 8002e50:	1ad3      	subs	r3, r2, r3
 8002e52:	2b02      	cmp	r3, #2
 8002e54:	d901      	bls.n	8002e5a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002e56:	2303      	movs	r3, #3
 8002e58:	e04d      	b.n	8002ef6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e5a:	4b06      	ldr	r3, [pc, #24]	@ (8002e74 <HAL_RCC_OscConfig+0x4ac>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d1f0      	bne.n	8002e48 <HAL_RCC_OscConfig+0x480>
 8002e66:	e045      	b.n	8002ef4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	699b      	ldr	r3, [r3, #24]
 8002e6c:	2b01      	cmp	r3, #1
 8002e6e:	d107      	bne.n	8002e80 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002e70:	2301      	movs	r3, #1
 8002e72:	e040      	b.n	8002ef6 <HAL_RCC_OscConfig+0x52e>
 8002e74:	40023800 	.word	0x40023800
 8002e78:	40007000 	.word	0x40007000
 8002e7c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002e80:	4b1f      	ldr	r3, [pc, #124]	@ (8002f00 <HAL_RCC_OscConfig+0x538>)
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	699b      	ldr	r3, [r3, #24]
 8002e8a:	2b01      	cmp	r3, #1
 8002e8c:	d030      	beq.n	8002ef0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e98:	429a      	cmp	r2, r3
 8002e9a:	d129      	bne.n	8002ef0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ea6:	429a      	cmp	r2, r3
 8002ea8:	d122      	bne.n	8002ef0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002eaa:	68fa      	ldr	r2, [r7, #12]
 8002eac:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002eb0:	4013      	ands	r3, r2
 8002eb2:	687a      	ldr	r2, [r7, #4]
 8002eb4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002eb6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d119      	bne.n	8002ef0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ec6:	085b      	lsrs	r3, r3, #1
 8002ec8:	3b01      	subs	r3, #1
 8002eca:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ecc:	429a      	cmp	r2, r3
 8002ece:	d10f      	bne.n	8002ef0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002eda:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002edc:	429a      	cmp	r2, r3
 8002ede:	d107      	bne.n	8002ef0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eea:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002eec:	429a      	cmp	r2, r3
 8002eee:	d001      	beq.n	8002ef4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	e000      	b.n	8002ef6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002ef4:	2300      	movs	r3, #0
}
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	3718      	adds	r7, #24
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bd80      	pop	{r7, pc}
 8002efe:	bf00      	nop
 8002f00:	40023800 	.word	0x40023800

08002f04 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b082      	sub	sp, #8
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d101      	bne.n	8002f16 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002f12:	2301      	movs	r3, #1
 8002f14:	e041      	b.n	8002f9a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f1c:	b2db      	uxtb	r3, r3
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d106      	bne.n	8002f30 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2200      	movs	r2, #0
 8002f26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002f2a:	6878      	ldr	r0, [r7, #4]
 8002f2c:	f7fe fd0e 	bl	800194c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2202      	movs	r2, #2
 8002f34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681a      	ldr	r2, [r3, #0]
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	3304      	adds	r3, #4
 8002f40:	4619      	mov	r1, r3
 8002f42:	4610      	mov	r0, r2
 8002f44:	f000 fc90 	bl	8003868 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2201      	movs	r2, #1
 8002f4c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2201      	movs	r2, #1
 8002f54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2201      	movs	r2, #1
 8002f5c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2201      	movs	r2, #1
 8002f64:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2201      	movs	r2, #1
 8002f6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2201      	movs	r2, #1
 8002f74:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2201      	movs	r2, #1
 8002f7c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2201      	movs	r2, #1
 8002f84:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2201      	movs	r2, #1
 8002f94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002f98:	2300      	movs	r3, #0
}
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	3708      	adds	r7, #8
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd80      	pop	{r7, pc}
	...

08002fa4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b085      	sub	sp, #20
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002fb2:	b2db      	uxtb	r3, r3
 8002fb4:	2b01      	cmp	r3, #1
 8002fb6:	d001      	beq.n	8002fbc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002fb8:	2301      	movs	r3, #1
 8002fba:	e04e      	b.n	800305a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2202      	movs	r2, #2
 8002fc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	68da      	ldr	r2, [r3, #12]
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f042 0201 	orr.w	r2, r2, #1
 8002fd2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a23      	ldr	r2, [pc, #140]	@ (8003068 <HAL_TIM_Base_Start_IT+0xc4>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d022      	beq.n	8003024 <HAL_TIM_Base_Start_IT+0x80>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002fe6:	d01d      	beq.n	8003024 <HAL_TIM_Base_Start_IT+0x80>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a1f      	ldr	r2, [pc, #124]	@ (800306c <HAL_TIM_Base_Start_IT+0xc8>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d018      	beq.n	8003024 <HAL_TIM_Base_Start_IT+0x80>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a1e      	ldr	r2, [pc, #120]	@ (8003070 <HAL_TIM_Base_Start_IT+0xcc>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d013      	beq.n	8003024 <HAL_TIM_Base_Start_IT+0x80>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4a1c      	ldr	r2, [pc, #112]	@ (8003074 <HAL_TIM_Base_Start_IT+0xd0>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d00e      	beq.n	8003024 <HAL_TIM_Base_Start_IT+0x80>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4a1b      	ldr	r2, [pc, #108]	@ (8003078 <HAL_TIM_Base_Start_IT+0xd4>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d009      	beq.n	8003024 <HAL_TIM_Base_Start_IT+0x80>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a19      	ldr	r2, [pc, #100]	@ (800307c <HAL_TIM_Base_Start_IT+0xd8>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d004      	beq.n	8003024 <HAL_TIM_Base_Start_IT+0x80>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4a18      	ldr	r2, [pc, #96]	@ (8003080 <HAL_TIM_Base_Start_IT+0xdc>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d111      	bne.n	8003048 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	689b      	ldr	r3, [r3, #8]
 800302a:	f003 0307 	and.w	r3, r3, #7
 800302e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	2b06      	cmp	r3, #6
 8003034:	d010      	beq.n	8003058 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	681a      	ldr	r2, [r3, #0]
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f042 0201 	orr.w	r2, r2, #1
 8003044:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003046:	e007      	b.n	8003058 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	681a      	ldr	r2, [r3, #0]
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f042 0201 	orr.w	r2, r2, #1
 8003056:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003058:	2300      	movs	r3, #0
}
 800305a:	4618      	mov	r0, r3
 800305c:	3714      	adds	r7, #20
 800305e:	46bd      	mov	sp, r7
 8003060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003064:	4770      	bx	lr
 8003066:	bf00      	nop
 8003068:	40010000 	.word	0x40010000
 800306c:	40000400 	.word	0x40000400
 8003070:	40000800 	.word	0x40000800
 8003074:	40000c00 	.word	0x40000c00
 8003078:	40010400 	.word	0x40010400
 800307c:	40014000 	.word	0x40014000
 8003080:	40001800 	.word	0x40001800

08003084 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8003084:	b480      	push	{r7}
 8003086:	b083      	sub	sp, #12
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	68da      	ldr	r2, [r3, #12]
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f022 0201 	bic.w	r2, r2, #1
 800309a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	6a1a      	ldr	r2, [r3, #32]
 80030a2:	f241 1311 	movw	r3, #4369	@ 0x1111
 80030a6:	4013      	ands	r3, r2
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d10f      	bne.n	80030cc <HAL_TIM_Base_Stop_IT+0x48>
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	6a1a      	ldr	r2, [r3, #32]
 80030b2:	f240 4344 	movw	r3, #1092	@ 0x444
 80030b6:	4013      	ands	r3, r2
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d107      	bne.n	80030cc <HAL_TIM_Base_Stop_IT+0x48>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	681a      	ldr	r2, [r3, #0]
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f022 0201 	bic.w	r2, r2, #1
 80030ca:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2201      	movs	r2, #1
 80030d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 80030d4:	2300      	movs	r3, #0
}
 80030d6:	4618      	mov	r0, r3
 80030d8:	370c      	adds	r7, #12
 80030da:	46bd      	mov	sp, r7
 80030dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e0:	4770      	bx	lr

080030e2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80030e2:	b580      	push	{r7, lr}
 80030e4:	b082      	sub	sp, #8
 80030e6:	af00      	add	r7, sp, #0
 80030e8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d101      	bne.n	80030f4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80030f0:	2301      	movs	r3, #1
 80030f2:	e041      	b.n	8003178 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80030fa:	b2db      	uxtb	r3, r3
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d106      	bne.n	800310e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2200      	movs	r2, #0
 8003104:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003108:	6878      	ldr	r0, [r7, #4]
 800310a:	f000 f839 	bl	8003180 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2202      	movs	r2, #2
 8003112:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681a      	ldr	r2, [r3, #0]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	3304      	adds	r3, #4
 800311e:	4619      	mov	r1, r3
 8003120:	4610      	mov	r0, r2
 8003122:	f000 fba1 	bl	8003868 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2201      	movs	r2, #1
 800312a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2201      	movs	r2, #1
 8003132:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2201      	movs	r2, #1
 800313a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2201      	movs	r2, #1
 8003142:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2201      	movs	r2, #1
 800314a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2201      	movs	r2, #1
 8003152:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2201      	movs	r2, #1
 800315a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2201      	movs	r2, #1
 8003162:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2201      	movs	r2, #1
 800316a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2201      	movs	r2, #1
 8003172:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003176:	2300      	movs	r3, #0
}
 8003178:	4618      	mov	r0, r3
 800317a:	3708      	adds	r7, #8
 800317c:	46bd      	mov	sp, r7
 800317e:	bd80      	pop	{r7, pc}

08003180 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003180:	b480      	push	{r7}
 8003182:	b083      	sub	sp, #12
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003188:	bf00      	nop
 800318a:	370c      	adds	r7, #12
 800318c:	46bd      	mov	sp, r7
 800318e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003192:	4770      	bx	lr

08003194 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b084      	sub	sp, #16
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
 800319c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d109      	bne.n	80031b8 <HAL_TIM_PWM_Start+0x24>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80031aa:	b2db      	uxtb	r3, r3
 80031ac:	2b01      	cmp	r3, #1
 80031ae:	bf14      	ite	ne
 80031b0:	2301      	movne	r3, #1
 80031b2:	2300      	moveq	r3, #0
 80031b4:	b2db      	uxtb	r3, r3
 80031b6:	e022      	b.n	80031fe <HAL_TIM_PWM_Start+0x6a>
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	2b04      	cmp	r3, #4
 80031bc:	d109      	bne.n	80031d2 <HAL_TIM_PWM_Start+0x3e>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80031c4:	b2db      	uxtb	r3, r3
 80031c6:	2b01      	cmp	r3, #1
 80031c8:	bf14      	ite	ne
 80031ca:	2301      	movne	r3, #1
 80031cc:	2300      	moveq	r3, #0
 80031ce:	b2db      	uxtb	r3, r3
 80031d0:	e015      	b.n	80031fe <HAL_TIM_PWM_Start+0x6a>
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	2b08      	cmp	r3, #8
 80031d6:	d109      	bne.n	80031ec <HAL_TIM_PWM_Start+0x58>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80031de:	b2db      	uxtb	r3, r3
 80031e0:	2b01      	cmp	r3, #1
 80031e2:	bf14      	ite	ne
 80031e4:	2301      	movne	r3, #1
 80031e6:	2300      	moveq	r3, #0
 80031e8:	b2db      	uxtb	r3, r3
 80031ea:	e008      	b.n	80031fe <HAL_TIM_PWM_Start+0x6a>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80031f2:	b2db      	uxtb	r3, r3
 80031f4:	2b01      	cmp	r3, #1
 80031f6:	bf14      	ite	ne
 80031f8:	2301      	movne	r3, #1
 80031fa:	2300      	moveq	r3, #0
 80031fc:	b2db      	uxtb	r3, r3
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d001      	beq.n	8003206 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003202:	2301      	movs	r3, #1
 8003204:	e07c      	b.n	8003300 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d104      	bne.n	8003216 <HAL_TIM_PWM_Start+0x82>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2202      	movs	r2, #2
 8003210:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003214:	e013      	b.n	800323e <HAL_TIM_PWM_Start+0xaa>
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	2b04      	cmp	r3, #4
 800321a:	d104      	bne.n	8003226 <HAL_TIM_PWM_Start+0x92>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2202      	movs	r2, #2
 8003220:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003224:	e00b      	b.n	800323e <HAL_TIM_PWM_Start+0xaa>
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	2b08      	cmp	r3, #8
 800322a:	d104      	bne.n	8003236 <HAL_TIM_PWM_Start+0xa2>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2202      	movs	r2, #2
 8003230:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003234:	e003      	b.n	800323e <HAL_TIM_PWM_Start+0xaa>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2202      	movs	r2, #2
 800323a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	2201      	movs	r2, #1
 8003244:	6839      	ldr	r1, [r7, #0]
 8003246:	4618      	mov	r0, r3
 8003248:	f000 fe04 	bl	8003e54 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a2d      	ldr	r2, [pc, #180]	@ (8003308 <HAL_TIM_PWM_Start+0x174>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d004      	beq.n	8003260 <HAL_TIM_PWM_Start+0xcc>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4a2c      	ldr	r2, [pc, #176]	@ (800330c <HAL_TIM_PWM_Start+0x178>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d101      	bne.n	8003264 <HAL_TIM_PWM_Start+0xd0>
 8003260:	2301      	movs	r3, #1
 8003262:	e000      	b.n	8003266 <HAL_TIM_PWM_Start+0xd2>
 8003264:	2300      	movs	r3, #0
 8003266:	2b00      	cmp	r3, #0
 8003268:	d007      	beq.n	800327a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003278:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4a22      	ldr	r2, [pc, #136]	@ (8003308 <HAL_TIM_PWM_Start+0x174>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d022      	beq.n	80032ca <HAL_TIM_PWM_Start+0x136>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800328c:	d01d      	beq.n	80032ca <HAL_TIM_PWM_Start+0x136>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a1f      	ldr	r2, [pc, #124]	@ (8003310 <HAL_TIM_PWM_Start+0x17c>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d018      	beq.n	80032ca <HAL_TIM_PWM_Start+0x136>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a1d      	ldr	r2, [pc, #116]	@ (8003314 <HAL_TIM_PWM_Start+0x180>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d013      	beq.n	80032ca <HAL_TIM_PWM_Start+0x136>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4a1c      	ldr	r2, [pc, #112]	@ (8003318 <HAL_TIM_PWM_Start+0x184>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d00e      	beq.n	80032ca <HAL_TIM_PWM_Start+0x136>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a16      	ldr	r2, [pc, #88]	@ (800330c <HAL_TIM_PWM_Start+0x178>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d009      	beq.n	80032ca <HAL_TIM_PWM_Start+0x136>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4a18      	ldr	r2, [pc, #96]	@ (800331c <HAL_TIM_PWM_Start+0x188>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d004      	beq.n	80032ca <HAL_TIM_PWM_Start+0x136>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4a16      	ldr	r2, [pc, #88]	@ (8003320 <HAL_TIM_PWM_Start+0x18c>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d111      	bne.n	80032ee <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	689b      	ldr	r3, [r3, #8]
 80032d0:	f003 0307 	and.w	r3, r3, #7
 80032d4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	2b06      	cmp	r3, #6
 80032da:	d010      	beq.n	80032fe <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	681a      	ldr	r2, [r3, #0]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f042 0201 	orr.w	r2, r2, #1
 80032ea:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032ec:	e007      	b.n	80032fe <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	681a      	ldr	r2, [r3, #0]
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f042 0201 	orr.w	r2, r2, #1
 80032fc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80032fe:	2300      	movs	r3, #0
}
 8003300:	4618      	mov	r0, r3
 8003302:	3710      	adds	r7, #16
 8003304:	46bd      	mov	sp, r7
 8003306:	bd80      	pop	{r7, pc}
 8003308:	40010000 	.word	0x40010000
 800330c:	40010400 	.word	0x40010400
 8003310:	40000400 	.word	0x40000400
 8003314:	40000800 	.word	0x40000800
 8003318:	40000c00 	.word	0x40000c00
 800331c:	40014000 	.word	0x40014000
 8003320:	40001800 	.word	0x40001800

08003324 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b084      	sub	sp, #16
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	68db      	ldr	r3, [r3, #12]
 8003332:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	691b      	ldr	r3, [r3, #16]
 800333a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800333c:	68bb      	ldr	r3, [r7, #8]
 800333e:	f003 0302 	and.w	r3, r3, #2
 8003342:	2b00      	cmp	r3, #0
 8003344:	d020      	beq.n	8003388 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	f003 0302 	and.w	r3, r3, #2
 800334c:	2b00      	cmp	r3, #0
 800334e:	d01b      	beq.n	8003388 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f06f 0202 	mvn.w	r2, #2
 8003358:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2201      	movs	r2, #1
 800335e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	699b      	ldr	r3, [r3, #24]
 8003366:	f003 0303 	and.w	r3, r3, #3
 800336a:	2b00      	cmp	r3, #0
 800336c:	d003      	beq.n	8003376 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800336e:	6878      	ldr	r0, [r7, #4]
 8003370:	f000 fa5b 	bl	800382a <HAL_TIM_IC_CaptureCallback>
 8003374:	e005      	b.n	8003382 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003376:	6878      	ldr	r0, [r7, #4]
 8003378:	f000 fa4d 	bl	8003816 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800337c:	6878      	ldr	r0, [r7, #4]
 800337e:	f000 fa5e 	bl	800383e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2200      	movs	r2, #0
 8003386:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003388:	68bb      	ldr	r3, [r7, #8]
 800338a:	f003 0304 	and.w	r3, r3, #4
 800338e:	2b00      	cmp	r3, #0
 8003390:	d020      	beq.n	80033d4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	f003 0304 	and.w	r3, r3, #4
 8003398:	2b00      	cmp	r3, #0
 800339a:	d01b      	beq.n	80033d4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f06f 0204 	mvn.w	r2, #4
 80033a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2202      	movs	r2, #2
 80033aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	699b      	ldr	r3, [r3, #24]
 80033b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d003      	beq.n	80033c2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033ba:	6878      	ldr	r0, [r7, #4]
 80033bc:	f000 fa35 	bl	800382a <HAL_TIM_IC_CaptureCallback>
 80033c0:	e005      	b.n	80033ce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033c2:	6878      	ldr	r0, [r7, #4]
 80033c4:	f000 fa27 	bl	8003816 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033c8:	6878      	ldr	r0, [r7, #4]
 80033ca:	f000 fa38 	bl	800383e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2200      	movs	r2, #0
 80033d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80033d4:	68bb      	ldr	r3, [r7, #8]
 80033d6:	f003 0308 	and.w	r3, r3, #8
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d020      	beq.n	8003420 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	f003 0308 	and.w	r3, r3, #8
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d01b      	beq.n	8003420 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f06f 0208 	mvn.w	r2, #8
 80033f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2204      	movs	r2, #4
 80033f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	69db      	ldr	r3, [r3, #28]
 80033fe:	f003 0303 	and.w	r3, r3, #3
 8003402:	2b00      	cmp	r3, #0
 8003404:	d003      	beq.n	800340e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003406:	6878      	ldr	r0, [r7, #4]
 8003408:	f000 fa0f 	bl	800382a <HAL_TIM_IC_CaptureCallback>
 800340c:	e005      	b.n	800341a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800340e:	6878      	ldr	r0, [r7, #4]
 8003410:	f000 fa01 	bl	8003816 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003414:	6878      	ldr	r0, [r7, #4]
 8003416:	f000 fa12 	bl	800383e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2200      	movs	r2, #0
 800341e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003420:	68bb      	ldr	r3, [r7, #8]
 8003422:	f003 0310 	and.w	r3, r3, #16
 8003426:	2b00      	cmp	r3, #0
 8003428:	d020      	beq.n	800346c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	f003 0310 	and.w	r3, r3, #16
 8003430:	2b00      	cmp	r3, #0
 8003432:	d01b      	beq.n	800346c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f06f 0210 	mvn.w	r2, #16
 800343c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2208      	movs	r2, #8
 8003442:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	69db      	ldr	r3, [r3, #28]
 800344a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800344e:	2b00      	cmp	r3, #0
 8003450:	d003      	beq.n	800345a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003452:	6878      	ldr	r0, [r7, #4]
 8003454:	f000 f9e9 	bl	800382a <HAL_TIM_IC_CaptureCallback>
 8003458:	e005      	b.n	8003466 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800345a:	6878      	ldr	r0, [r7, #4]
 800345c:	f000 f9db 	bl	8003816 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003460:	6878      	ldr	r0, [r7, #4]
 8003462:	f000 f9ec 	bl	800383e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2200      	movs	r2, #0
 800346a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800346c:	68bb      	ldr	r3, [r7, #8]
 800346e:	f003 0301 	and.w	r3, r3, #1
 8003472:	2b00      	cmp	r3, #0
 8003474:	d00c      	beq.n	8003490 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	f003 0301 	and.w	r3, r3, #1
 800347c:	2b00      	cmp	r3, #0
 800347e:	d007      	beq.n	8003490 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f06f 0201 	mvn.w	r2, #1
 8003488:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800348a:	6878      	ldr	r0, [r7, #4]
 800348c:	f7fe f9c8 	bl	8001820 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003490:	68bb      	ldr	r3, [r7, #8]
 8003492:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003496:	2b00      	cmp	r3, #0
 8003498:	d00c      	beq.n	80034b4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d007      	beq.n	80034b4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80034ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80034ae:	6878      	ldr	r0, [r7, #4]
 80034b0:	f000 fd7c 	bl	8003fac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80034b4:	68bb      	ldr	r3, [r7, #8]
 80034b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d00c      	beq.n	80034d8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d007      	beq.n	80034d8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80034d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80034d2:	6878      	ldr	r0, [r7, #4]
 80034d4:	f000 f9bd 	bl	8003852 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80034d8:	68bb      	ldr	r3, [r7, #8]
 80034da:	f003 0320 	and.w	r3, r3, #32
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d00c      	beq.n	80034fc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	f003 0320 	and.w	r3, r3, #32
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d007      	beq.n	80034fc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f06f 0220 	mvn.w	r2, #32
 80034f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80034f6:	6878      	ldr	r0, [r7, #4]
 80034f8:	f000 fd4e 	bl	8003f98 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80034fc:	bf00      	nop
 80034fe:	3710      	adds	r7, #16
 8003500:	46bd      	mov	sp, r7
 8003502:	bd80      	pop	{r7, pc}

08003504 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b086      	sub	sp, #24
 8003508:	af00      	add	r7, sp, #0
 800350a:	60f8      	str	r0, [r7, #12]
 800350c:	60b9      	str	r1, [r7, #8]
 800350e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003510:	2300      	movs	r3, #0
 8003512:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800351a:	2b01      	cmp	r3, #1
 800351c:	d101      	bne.n	8003522 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800351e:	2302      	movs	r3, #2
 8003520:	e0ae      	b.n	8003680 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	2201      	movs	r2, #1
 8003526:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2b0c      	cmp	r3, #12
 800352e:	f200 809f 	bhi.w	8003670 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003532:	a201      	add	r2, pc, #4	@ (adr r2, 8003538 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003534:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003538:	0800356d 	.word	0x0800356d
 800353c:	08003671 	.word	0x08003671
 8003540:	08003671 	.word	0x08003671
 8003544:	08003671 	.word	0x08003671
 8003548:	080035ad 	.word	0x080035ad
 800354c:	08003671 	.word	0x08003671
 8003550:	08003671 	.word	0x08003671
 8003554:	08003671 	.word	0x08003671
 8003558:	080035ef 	.word	0x080035ef
 800355c:	08003671 	.word	0x08003671
 8003560:	08003671 	.word	0x08003671
 8003564:	08003671 	.word	0x08003671
 8003568:	0800362f 	.word	0x0800362f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	68b9      	ldr	r1, [r7, #8]
 8003572:	4618      	mov	r0, r3
 8003574:	f000 fa24 	bl	80039c0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	699a      	ldr	r2, [r3, #24]
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f042 0208 	orr.w	r2, r2, #8
 8003586:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	699a      	ldr	r2, [r3, #24]
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f022 0204 	bic.w	r2, r2, #4
 8003596:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	6999      	ldr	r1, [r3, #24]
 800359e:	68bb      	ldr	r3, [r7, #8]
 80035a0:	691a      	ldr	r2, [r3, #16]
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	430a      	orrs	r2, r1
 80035a8:	619a      	str	r2, [r3, #24]
      break;
 80035aa:	e064      	b.n	8003676 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	68b9      	ldr	r1, [r7, #8]
 80035b2:	4618      	mov	r0, r3
 80035b4:	f000 fa74 	bl	8003aa0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	699a      	ldr	r2, [r3, #24]
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80035c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	699a      	ldr	r2, [r3, #24]
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80035d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	6999      	ldr	r1, [r3, #24]
 80035de:	68bb      	ldr	r3, [r7, #8]
 80035e0:	691b      	ldr	r3, [r3, #16]
 80035e2:	021a      	lsls	r2, r3, #8
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	430a      	orrs	r2, r1
 80035ea:	619a      	str	r2, [r3, #24]
      break;
 80035ec:	e043      	b.n	8003676 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	68b9      	ldr	r1, [r7, #8]
 80035f4:	4618      	mov	r0, r3
 80035f6:	f000 fac9 	bl	8003b8c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	69da      	ldr	r2, [r3, #28]
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f042 0208 	orr.w	r2, r2, #8
 8003608:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	69da      	ldr	r2, [r3, #28]
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f022 0204 	bic.w	r2, r2, #4
 8003618:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	69d9      	ldr	r1, [r3, #28]
 8003620:	68bb      	ldr	r3, [r7, #8]
 8003622:	691a      	ldr	r2, [r3, #16]
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	430a      	orrs	r2, r1
 800362a:	61da      	str	r2, [r3, #28]
      break;
 800362c:	e023      	b.n	8003676 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	68b9      	ldr	r1, [r7, #8]
 8003634:	4618      	mov	r0, r3
 8003636:	f000 fb1d 	bl	8003c74 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	69da      	ldr	r2, [r3, #28]
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003648:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	69da      	ldr	r2, [r3, #28]
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003658:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	69d9      	ldr	r1, [r3, #28]
 8003660:	68bb      	ldr	r3, [r7, #8]
 8003662:	691b      	ldr	r3, [r3, #16]
 8003664:	021a      	lsls	r2, r3, #8
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	430a      	orrs	r2, r1
 800366c:	61da      	str	r2, [r3, #28]
      break;
 800366e:	e002      	b.n	8003676 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003670:	2301      	movs	r3, #1
 8003672:	75fb      	strb	r3, [r7, #23]
      break;
 8003674:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	2200      	movs	r2, #0
 800367a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800367e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003680:	4618      	mov	r0, r3
 8003682:	3718      	adds	r7, #24
 8003684:	46bd      	mov	sp, r7
 8003686:	bd80      	pop	{r7, pc}

08003688 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b084      	sub	sp, #16
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
 8003690:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003692:	2300      	movs	r3, #0
 8003694:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800369c:	2b01      	cmp	r3, #1
 800369e:	d101      	bne.n	80036a4 <HAL_TIM_ConfigClockSource+0x1c>
 80036a0:	2302      	movs	r3, #2
 80036a2:	e0b4      	b.n	800380e <HAL_TIM_ConfigClockSource+0x186>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2201      	movs	r2, #1
 80036a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2202      	movs	r2, #2
 80036b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	689b      	ldr	r3, [r3, #8]
 80036ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80036bc:	68bb      	ldr	r3, [r7, #8]
 80036be:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80036c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80036c4:	68bb      	ldr	r3, [r7, #8]
 80036c6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80036ca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	68ba      	ldr	r2, [r7, #8]
 80036d2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80036dc:	d03e      	beq.n	800375c <HAL_TIM_ConfigClockSource+0xd4>
 80036de:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80036e2:	f200 8087 	bhi.w	80037f4 <HAL_TIM_ConfigClockSource+0x16c>
 80036e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80036ea:	f000 8086 	beq.w	80037fa <HAL_TIM_ConfigClockSource+0x172>
 80036ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80036f2:	d87f      	bhi.n	80037f4 <HAL_TIM_ConfigClockSource+0x16c>
 80036f4:	2b70      	cmp	r3, #112	@ 0x70
 80036f6:	d01a      	beq.n	800372e <HAL_TIM_ConfigClockSource+0xa6>
 80036f8:	2b70      	cmp	r3, #112	@ 0x70
 80036fa:	d87b      	bhi.n	80037f4 <HAL_TIM_ConfigClockSource+0x16c>
 80036fc:	2b60      	cmp	r3, #96	@ 0x60
 80036fe:	d050      	beq.n	80037a2 <HAL_TIM_ConfigClockSource+0x11a>
 8003700:	2b60      	cmp	r3, #96	@ 0x60
 8003702:	d877      	bhi.n	80037f4 <HAL_TIM_ConfigClockSource+0x16c>
 8003704:	2b50      	cmp	r3, #80	@ 0x50
 8003706:	d03c      	beq.n	8003782 <HAL_TIM_ConfigClockSource+0xfa>
 8003708:	2b50      	cmp	r3, #80	@ 0x50
 800370a:	d873      	bhi.n	80037f4 <HAL_TIM_ConfigClockSource+0x16c>
 800370c:	2b40      	cmp	r3, #64	@ 0x40
 800370e:	d058      	beq.n	80037c2 <HAL_TIM_ConfigClockSource+0x13a>
 8003710:	2b40      	cmp	r3, #64	@ 0x40
 8003712:	d86f      	bhi.n	80037f4 <HAL_TIM_ConfigClockSource+0x16c>
 8003714:	2b30      	cmp	r3, #48	@ 0x30
 8003716:	d064      	beq.n	80037e2 <HAL_TIM_ConfigClockSource+0x15a>
 8003718:	2b30      	cmp	r3, #48	@ 0x30
 800371a:	d86b      	bhi.n	80037f4 <HAL_TIM_ConfigClockSource+0x16c>
 800371c:	2b20      	cmp	r3, #32
 800371e:	d060      	beq.n	80037e2 <HAL_TIM_ConfigClockSource+0x15a>
 8003720:	2b20      	cmp	r3, #32
 8003722:	d867      	bhi.n	80037f4 <HAL_TIM_ConfigClockSource+0x16c>
 8003724:	2b00      	cmp	r3, #0
 8003726:	d05c      	beq.n	80037e2 <HAL_TIM_ConfigClockSource+0x15a>
 8003728:	2b10      	cmp	r3, #16
 800372a:	d05a      	beq.n	80037e2 <HAL_TIM_ConfigClockSource+0x15a>
 800372c:	e062      	b.n	80037f4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800373e:	f000 fb69 	bl	8003e14 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	689b      	ldr	r3, [r3, #8]
 8003748:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800374a:	68bb      	ldr	r3, [r7, #8]
 800374c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003750:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	68ba      	ldr	r2, [r7, #8]
 8003758:	609a      	str	r2, [r3, #8]
      break;
 800375a:	e04f      	b.n	80037fc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800376c:	f000 fb52 	bl	8003e14 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	689a      	ldr	r2, [r3, #8]
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800377e:	609a      	str	r2, [r3, #8]
      break;
 8003780:	e03c      	b.n	80037fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800378e:	461a      	mov	r2, r3
 8003790:	f000 fac6 	bl	8003d20 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	2150      	movs	r1, #80	@ 0x50
 800379a:	4618      	mov	r0, r3
 800379c:	f000 fb1f 	bl	8003dde <TIM_ITRx_SetConfig>
      break;
 80037a0:	e02c      	b.n	80037fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80037ae:	461a      	mov	r2, r3
 80037b0:	f000 fae5 	bl	8003d7e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	2160      	movs	r1, #96	@ 0x60
 80037ba:	4618      	mov	r0, r3
 80037bc:	f000 fb0f 	bl	8003dde <TIM_ITRx_SetConfig>
      break;
 80037c0:	e01c      	b.n	80037fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80037ce:	461a      	mov	r2, r3
 80037d0:	f000 faa6 	bl	8003d20 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	2140      	movs	r1, #64	@ 0x40
 80037da:	4618      	mov	r0, r3
 80037dc:	f000 faff 	bl	8003dde <TIM_ITRx_SetConfig>
      break;
 80037e0:	e00c      	b.n	80037fc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681a      	ldr	r2, [r3, #0]
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4619      	mov	r1, r3
 80037ec:	4610      	mov	r0, r2
 80037ee:	f000 faf6 	bl	8003dde <TIM_ITRx_SetConfig>
      break;
 80037f2:	e003      	b.n	80037fc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80037f4:	2301      	movs	r3, #1
 80037f6:	73fb      	strb	r3, [r7, #15]
      break;
 80037f8:	e000      	b.n	80037fc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80037fa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2201      	movs	r2, #1
 8003800:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2200      	movs	r2, #0
 8003808:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800380c:	7bfb      	ldrb	r3, [r7, #15]
}
 800380e:	4618      	mov	r0, r3
 8003810:	3710      	adds	r7, #16
 8003812:	46bd      	mov	sp, r7
 8003814:	bd80      	pop	{r7, pc}

08003816 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003816:	b480      	push	{r7}
 8003818:	b083      	sub	sp, #12
 800381a:	af00      	add	r7, sp, #0
 800381c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800381e:	bf00      	nop
 8003820:	370c      	adds	r7, #12
 8003822:	46bd      	mov	sp, r7
 8003824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003828:	4770      	bx	lr

0800382a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800382a:	b480      	push	{r7}
 800382c:	b083      	sub	sp, #12
 800382e:	af00      	add	r7, sp, #0
 8003830:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003832:	bf00      	nop
 8003834:	370c      	adds	r7, #12
 8003836:	46bd      	mov	sp, r7
 8003838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383c:	4770      	bx	lr

0800383e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800383e:	b480      	push	{r7}
 8003840:	b083      	sub	sp, #12
 8003842:	af00      	add	r7, sp, #0
 8003844:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003846:	bf00      	nop
 8003848:	370c      	adds	r7, #12
 800384a:	46bd      	mov	sp, r7
 800384c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003850:	4770      	bx	lr

08003852 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003852:	b480      	push	{r7}
 8003854:	b083      	sub	sp, #12
 8003856:	af00      	add	r7, sp, #0
 8003858:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800385a:	bf00      	nop
 800385c:	370c      	adds	r7, #12
 800385e:	46bd      	mov	sp, r7
 8003860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003864:	4770      	bx	lr
	...

08003868 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003868:	b480      	push	{r7}
 800386a:	b085      	sub	sp, #20
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
 8003870:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	4a46      	ldr	r2, [pc, #280]	@ (8003994 <TIM_Base_SetConfig+0x12c>)
 800387c:	4293      	cmp	r3, r2
 800387e:	d013      	beq.n	80038a8 <TIM_Base_SetConfig+0x40>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003886:	d00f      	beq.n	80038a8 <TIM_Base_SetConfig+0x40>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	4a43      	ldr	r2, [pc, #268]	@ (8003998 <TIM_Base_SetConfig+0x130>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d00b      	beq.n	80038a8 <TIM_Base_SetConfig+0x40>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	4a42      	ldr	r2, [pc, #264]	@ (800399c <TIM_Base_SetConfig+0x134>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d007      	beq.n	80038a8 <TIM_Base_SetConfig+0x40>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	4a41      	ldr	r2, [pc, #260]	@ (80039a0 <TIM_Base_SetConfig+0x138>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d003      	beq.n	80038a8 <TIM_Base_SetConfig+0x40>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	4a40      	ldr	r2, [pc, #256]	@ (80039a4 <TIM_Base_SetConfig+0x13c>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d108      	bne.n	80038ba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80038ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	68fa      	ldr	r2, [r7, #12]
 80038b6:	4313      	orrs	r3, r2
 80038b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	4a35      	ldr	r2, [pc, #212]	@ (8003994 <TIM_Base_SetConfig+0x12c>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d02b      	beq.n	800391a <TIM_Base_SetConfig+0xb2>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038c8:	d027      	beq.n	800391a <TIM_Base_SetConfig+0xb2>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	4a32      	ldr	r2, [pc, #200]	@ (8003998 <TIM_Base_SetConfig+0x130>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d023      	beq.n	800391a <TIM_Base_SetConfig+0xb2>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	4a31      	ldr	r2, [pc, #196]	@ (800399c <TIM_Base_SetConfig+0x134>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d01f      	beq.n	800391a <TIM_Base_SetConfig+0xb2>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	4a30      	ldr	r2, [pc, #192]	@ (80039a0 <TIM_Base_SetConfig+0x138>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d01b      	beq.n	800391a <TIM_Base_SetConfig+0xb2>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	4a2f      	ldr	r2, [pc, #188]	@ (80039a4 <TIM_Base_SetConfig+0x13c>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d017      	beq.n	800391a <TIM_Base_SetConfig+0xb2>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	4a2e      	ldr	r2, [pc, #184]	@ (80039a8 <TIM_Base_SetConfig+0x140>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d013      	beq.n	800391a <TIM_Base_SetConfig+0xb2>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	4a2d      	ldr	r2, [pc, #180]	@ (80039ac <TIM_Base_SetConfig+0x144>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d00f      	beq.n	800391a <TIM_Base_SetConfig+0xb2>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	4a2c      	ldr	r2, [pc, #176]	@ (80039b0 <TIM_Base_SetConfig+0x148>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d00b      	beq.n	800391a <TIM_Base_SetConfig+0xb2>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	4a2b      	ldr	r2, [pc, #172]	@ (80039b4 <TIM_Base_SetConfig+0x14c>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d007      	beq.n	800391a <TIM_Base_SetConfig+0xb2>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	4a2a      	ldr	r2, [pc, #168]	@ (80039b8 <TIM_Base_SetConfig+0x150>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d003      	beq.n	800391a <TIM_Base_SetConfig+0xb2>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	4a29      	ldr	r2, [pc, #164]	@ (80039bc <TIM_Base_SetConfig+0x154>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d108      	bne.n	800392c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003920:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	68db      	ldr	r3, [r3, #12]
 8003926:	68fa      	ldr	r2, [r7, #12]
 8003928:	4313      	orrs	r3, r2
 800392a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	695b      	ldr	r3, [r3, #20]
 8003936:	4313      	orrs	r3, r2
 8003938:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	68fa      	ldr	r2, [r7, #12]
 800393e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	689a      	ldr	r2, [r3, #8]
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	681a      	ldr	r2, [r3, #0]
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	4a10      	ldr	r2, [pc, #64]	@ (8003994 <TIM_Base_SetConfig+0x12c>)
 8003954:	4293      	cmp	r3, r2
 8003956:	d003      	beq.n	8003960 <TIM_Base_SetConfig+0xf8>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	4a12      	ldr	r2, [pc, #72]	@ (80039a4 <TIM_Base_SetConfig+0x13c>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d103      	bne.n	8003968 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	691a      	ldr	r2, [r3, #16]
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2201      	movs	r2, #1
 800396c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	691b      	ldr	r3, [r3, #16]
 8003972:	f003 0301 	and.w	r3, r3, #1
 8003976:	2b01      	cmp	r3, #1
 8003978:	d105      	bne.n	8003986 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	691b      	ldr	r3, [r3, #16]
 800397e:	f023 0201 	bic.w	r2, r3, #1
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	611a      	str	r2, [r3, #16]
  }
}
 8003986:	bf00      	nop
 8003988:	3714      	adds	r7, #20
 800398a:	46bd      	mov	sp, r7
 800398c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003990:	4770      	bx	lr
 8003992:	bf00      	nop
 8003994:	40010000 	.word	0x40010000
 8003998:	40000400 	.word	0x40000400
 800399c:	40000800 	.word	0x40000800
 80039a0:	40000c00 	.word	0x40000c00
 80039a4:	40010400 	.word	0x40010400
 80039a8:	40014000 	.word	0x40014000
 80039ac:	40014400 	.word	0x40014400
 80039b0:	40014800 	.word	0x40014800
 80039b4:	40001800 	.word	0x40001800
 80039b8:	40001c00 	.word	0x40001c00
 80039bc:	40002000 	.word	0x40002000

080039c0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80039c0:	b480      	push	{r7}
 80039c2:	b087      	sub	sp, #28
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
 80039c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6a1b      	ldr	r3, [r3, #32]
 80039ce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6a1b      	ldr	r3, [r3, #32]
 80039d4:	f023 0201 	bic.w	r2, r3, #1
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	699b      	ldr	r3, [r3, #24]
 80039e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80039ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	f023 0303 	bic.w	r3, r3, #3
 80039f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	68fa      	ldr	r2, [r7, #12]
 80039fe:	4313      	orrs	r3, r2
 8003a00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003a02:	697b      	ldr	r3, [r7, #20]
 8003a04:	f023 0302 	bic.w	r3, r3, #2
 8003a08:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	689b      	ldr	r3, [r3, #8]
 8003a0e:	697a      	ldr	r2, [r7, #20]
 8003a10:	4313      	orrs	r3, r2
 8003a12:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	4a20      	ldr	r2, [pc, #128]	@ (8003a98 <TIM_OC1_SetConfig+0xd8>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d003      	beq.n	8003a24 <TIM_OC1_SetConfig+0x64>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	4a1f      	ldr	r2, [pc, #124]	@ (8003a9c <TIM_OC1_SetConfig+0xdc>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d10c      	bne.n	8003a3e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003a24:	697b      	ldr	r3, [r7, #20]
 8003a26:	f023 0308 	bic.w	r3, r3, #8
 8003a2a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	68db      	ldr	r3, [r3, #12]
 8003a30:	697a      	ldr	r2, [r7, #20]
 8003a32:	4313      	orrs	r3, r2
 8003a34:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003a36:	697b      	ldr	r3, [r7, #20]
 8003a38:	f023 0304 	bic.w	r3, r3, #4
 8003a3c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	4a15      	ldr	r2, [pc, #84]	@ (8003a98 <TIM_OC1_SetConfig+0xd8>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d003      	beq.n	8003a4e <TIM_OC1_SetConfig+0x8e>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	4a14      	ldr	r2, [pc, #80]	@ (8003a9c <TIM_OC1_SetConfig+0xdc>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d111      	bne.n	8003a72 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003a4e:	693b      	ldr	r3, [r7, #16]
 8003a50:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003a54:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003a56:	693b      	ldr	r3, [r7, #16]
 8003a58:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003a5c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	695b      	ldr	r3, [r3, #20]
 8003a62:	693a      	ldr	r2, [r7, #16]
 8003a64:	4313      	orrs	r3, r2
 8003a66:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	699b      	ldr	r3, [r3, #24]
 8003a6c:	693a      	ldr	r2, [r7, #16]
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	693a      	ldr	r2, [r7, #16]
 8003a76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	68fa      	ldr	r2, [r7, #12]
 8003a7c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	685a      	ldr	r2, [r3, #4]
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	697a      	ldr	r2, [r7, #20]
 8003a8a:	621a      	str	r2, [r3, #32]
}
 8003a8c:	bf00      	nop
 8003a8e:	371c      	adds	r7, #28
 8003a90:	46bd      	mov	sp, r7
 8003a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a96:	4770      	bx	lr
 8003a98:	40010000 	.word	0x40010000
 8003a9c:	40010400 	.word	0x40010400

08003aa0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003aa0:	b480      	push	{r7}
 8003aa2:	b087      	sub	sp, #28
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
 8003aa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6a1b      	ldr	r3, [r3, #32]
 8003aae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6a1b      	ldr	r3, [r3, #32]
 8003ab4:	f023 0210 	bic.w	r2, r3, #16
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	685b      	ldr	r3, [r3, #4]
 8003ac0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	699b      	ldr	r3, [r3, #24]
 8003ac6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003ace:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003ad6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	021b      	lsls	r3, r3, #8
 8003ade:	68fa      	ldr	r2, [r7, #12]
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003ae4:	697b      	ldr	r3, [r7, #20]
 8003ae6:	f023 0320 	bic.w	r3, r3, #32
 8003aea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	689b      	ldr	r3, [r3, #8]
 8003af0:	011b      	lsls	r3, r3, #4
 8003af2:	697a      	ldr	r2, [r7, #20]
 8003af4:	4313      	orrs	r3, r2
 8003af6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	4a22      	ldr	r2, [pc, #136]	@ (8003b84 <TIM_OC2_SetConfig+0xe4>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d003      	beq.n	8003b08 <TIM_OC2_SetConfig+0x68>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	4a21      	ldr	r2, [pc, #132]	@ (8003b88 <TIM_OC2_SetConfig+0xe8>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d10d      	bne.n	8003b24 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003b08:	697b      	ldr	r3, [r7, #20]
 8003b0a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003b0e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	68db      	ldr	r3, [r3, #12]
 8003b14:	011b      	lsls	r3, r3, #4
 8003b16:	697a      	ldr	r2, [r7, #20]
 8003b18:	4313      	orrs	r3, r2
 8003b1a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003b1c:	697b      	ldr	r3, [r7, #20]
 8003b1e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003b22:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	4a17      	ldr	r2, [pc, #92]	@ (8003b84 <TIM_OC2_SetConfig+0xe4>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d003      	beq.n	8003b34 <TIM_OC2_SetConfig+0x94>
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	4a16      	ldr	r2, [pc, #88]	@ (8003b88 <TIM_OC2_SetConfig+0xe8>)
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d113      	bne.n	8003b5c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003b34:	693b      	ldr	r3, [r7, #16]
 8003b36:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003b3a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003b3c:	693b      	ldr	r3, [r7, #16]
 8003b3e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003b42:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	695b      	ldr	r3, [r3, #20]
 8003b48:	009b      	lsls	r3, r3, #2
 8003b4a:	693a      	ldr	r2, [r7, #16]
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	699b      	ldr	r3, [r3, #24]
 8003b54:	009b      	lsls	r3, r3, #2
 8003b56:	693a      	ldr	r2, [r7, #16]
 8003b58:	4313      	orrs	r3, r2
 8003b5a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	693a      	ldr	r2, [r7, #16]
 8003b60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	68fa      	ldr	r2, [r7, #12]
 8003b66:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	685a      	ldr	r2, [r3, #4]
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	697a      	ldr	r2, [r7, #20]
 8003b74:	621a      	str	r2, [r3, #32]
}
 8003b76:	bf00      	nop
 8003b78:	371c      	adds	r7, #28
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b80:	4770      	bx	lr
 8003b82:	bf00      	nop
 8003b84:	40010000 	.word	0x40010000
 8003b88:	40010400 	.word	0x40010400

08003b8c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	b087      	sub	sp, #28
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
 8003b94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6a1b      	ldr	r3, [r3, #32]
 8003b9a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6a1b      	ldr	r3, [r3, #32]
 8003ba0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	69db      	ldr	r3, [r3, #28]
 8003bb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003bba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	f023 0303 	bic.w	r3, r3, #3
 8003bc2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	68fa      	ldr	r2, [r7, #12]
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003bce:	697b      	ldr	r3, [r7, #20]
 8003bd0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003bd4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	689b      	ldr	r3, [r3, #8]
 8003bda:	021b      	lsls	r3, r3, #8
 8003bdc:	697a      	ldr	r2, [r7, #20]
 8003bde:	4313      	orrs	r3, r2
 8003be0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	4a21      	ldr	r2, [pc, #132]	@ (8003c6c <TIM_OC3_SetConfig+0xe0>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d003      	beq.n	8003bf2 <TIM_OC3_SetConfig+0x66>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	4a20      	ldr	r2, [pc, #128]	@ (8003c70 <TIM_OC3_SetConfig+0xe4>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d10d      	bne.n	8003c0e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003bf2:	697b      	ldr	r3, [r7, #20]
 8003bf4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003bf8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	68db      	ldr	r3, [r3, #12]
 8003bfe:	021b      	lsls	r3, r3, #8
 8003c00:	697a      	ldr	r2, [r7, #20]
 8003c02:	4313      	orrs	r3, r2
 8003c04:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003c06:	697b      	ldr	r3, [r7, #20]
 8003c08:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003c0c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	4a16      	ldr	r2, [pc, #88]	@ (8003c6c <TIM_OC3_SetConfig+0xe0>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d003      	beq.n	8003c1e <TIM_OC3_SetConfig+0x92>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	4a15      	ldr	r2, [pc, #84]	@ (8003c70 <TIM_OC3_SetConfig+0xe4>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d113      	bne.n	8003c46 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003c1e:	693b      	ldr	r3, [r7, #16]
 8003c20:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003c24:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003c26:	693b      	ldr	r3, [r7, #16]
 8003c28:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003c2c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	695b      	ldr	r3, [r3, #20]
 8003c32:	011b      	lsls	r3, r3, #4
 8003c34:	693a      	ldr	r2, [r7, #16]
 8003c36:	4313      	orrs	r3, r2
 8003c38:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	699b      	ldr	r3, [r3, #24]
 8003c3e:	011b      	lsls	r3, r3, #4
 8003c40:	693a      	ldr	r2, [r7, #16]
 8003c42:	4313      	orrs	r3, r2
 8003c44:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	693a      	ldr	r2, [r7, #16]
 8003c4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	68fa      	ldr	r2, [r7, #12]
 8003c50:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	685a      	ldr	r2, [r3, #4]
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	697a      	ldr	r2, [r7, #20]
 8003c5e:	621a      	str	r2, [r3, #32]
}
 8003c60:	bf00      	nop
 8003c62:	371c      	adds	r7, #28
 8003c64:	46bd      	mov	sp, r7
 8003c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6a:	4770      	bx	lr
 8003c6c:	40010000 	.word	0x40010000
 8003c70:	40010400 	.word	0x40010400

08003c74 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003c74:	b480      	push	{r7}
 8003c76:	b087      	sub	sp, #28
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
 8003c7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6a1b      	ldr	r3, [r3, #32]
 8003c82:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6a1b      	ldr	r3, [r3, #32]
 8003c88:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	685b      	ldr	r3, [r3, #4]
 8003c94:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	69db      	ldr	r3, [r3, #28]
 8003c9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003ca2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003caa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	021b      	lsls	r3, r3, #8
 8003cb2:	68fa      	ldr	r2, [r7, #12]
 8003cb4:	4313      	orrs	r3, r2
 8003cb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003cb8:	693b      	ldr	r3, [r7, #16]
 8003cba:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003cbe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	689b      	ldr	r3, [r3, #8]
 8003cc4:	031b      	lsls	r3, r3, #12
 8003cc6:	693a      	ldr	r2, [r7, #16]
 8003cc8:	4313      	orrs	r3, r2
 8003cca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	4a12      	ldr	r2, [pc, #72]	@ (8003d18 <TIM_OC4_SetConfig+0xa4>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d003      	beq.n	8003cdc <TIM_OC4_SetConfig+0x68>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	4a11      	ldr	r2, [pc, #68]	@ (8003d1c <TIM_OC4_SetConfig+0xa8>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d109      	bne.n	8003cf0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003cdc:	697b      	ldr	r3, [r7, #20]
 8003cde:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003ce2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	695b      	ldr	r3, [r3, #20]
 8003ce8:	019b      	lsls	r3, r3, #6
 8003cea:	697a      	ldr	r2, [r7, #20]
 8003cec:	4313      	orrs	r3, r2
 8003cee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	697a      	ldr	r2, [r7, #20]
 8003cf4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	68fa      	ldr	r2, [r7, #12]
 8003cfa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	685a      	ldr	r2, [r3, #4]
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	693a      	ldr	r2, [r7, #16]
 8003d08:	621a      	str	r2, [r3, #32]
}
 8003d0a:	bf00      	nop
 8003d0c:	371c      	adds	r7, #28
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d14:	4770      	bx	lr
 8003d16:	bf00      	nop
 8003d18:	40010000 	.word	0x40010000
 8003d1c:	40010400 	.word	0x40010400

08003d20 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d20:	b480      	push	{r7}
 8003d22:	b087      	sub	sp, #28
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	60f8      	str	r0, [r7, #12]
 8003d28:	60b9      	str	r1, [r7, #8]
 8003d2a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	6a1b      	ldr	r3, [r3, #32]
 8003d30:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	6a1b      	ldr	r3, [r3, #32]
 8003d36:	f023 0201 	bic.w	r2, r3, #1
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	699b      	ldr	r3, [r3, #24]
 8003d42:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003d44:	693b      	ldr	r3, [r7, #16]
 8003d46:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003d4a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	011b      	lsls	r3, r3, #4
 8003d50:	693a      	ldr	r2, [r7, #16]
 8003d52:	4313      	orrs	r3, r2
 8003d54:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003d56:	697b      	ldr	r3, [r7, #20]
 8003d58:	f023 030a 	bic.w	r3, r3, #10
 8003d5c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003d5e:	697a      	ldr	r2, [r7, #20]
 8003d60:	68bb      	ldr	r3, [r7, #8]
 8003d62:	4313      	orrs	r3, r2
 8003d64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	693a      	ldr	r2, [r7, #16]
 8003d6a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	697a      	ldr	r2, [r7, #20]
 8003d70:	621a      	str	r2, [r3, #32]
}
 8003d72:	bf00      	nop
 8003d74:	371c      	adds	r7, #28
 8003d76:	46bd      	mov	sp, r7
 8003d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7c:	4770      	bx	lr

08003d7e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d7e:	b480      	push	{r7}
 8003d80:	b087      	sub	sp, #28
 8003d82:	af00      	add	r7, sp, #0
 8003d84:	60f8      	str	r0, [r7, #12]
 8003d86:	60b9      	str	r1, [r7, #8]
 8003d88:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	6a1b      	ldr	r3, [r3, #32]
 8003d8e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	6a1b      	ldr	r3, [r3, #32]
 8003d94:	f023 0210 	bic.w	r2, r3, #16
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	699b      	ldr	r3, [r3, #24]
 8003da0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003da2:	693b      	ldr	r3, [r7, #16]
 8003da4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003da8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	031b      	lsls	r3, r3, #12
 8003dae:	693a      	ldr	r2, [r7, #16]
 8003db0:	4313      	orrs	r3, r2
 8003db2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003db4:	697b      	ldr	r3, [r7, #20]
 8003db6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003dba:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003dbc:	68bb      	ldr	r3, [r7, #8]
 8003dbe:	011b      	lsls	r3, r3, #4
 8003dc0:	697a      	ldr	r2, [r7, #20]
 8003dc2:	4313      	orrs	r3, r2
 8003dc4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	693a      	ldr	r2, [r7, #16]
 8003dca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	697a      	ldr	r2, [r7, #20]
 8003dd0:	621a      	str	r2, [r3, #32]
}
 8003dd2:	bf00      	nop
 8003dd4:	371c      	adds	r7, #28
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ddc:	4770      	bx	lr

08003dde <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003dde:	b480      	push	{r7}
 8003de0:	b085      	sub	sp, #20
 8003de2:	af00      	add	r7, sp, #0
 8003de4:	6078      	str	r0, [r7, #4]
 8003de6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	689b      	ldr	r3, [r3, #8]
 8003dec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003df4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003df6:	683a      	ldr	r2, [r7, #0]
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	4313      	orrs	r3, r2
 8003dfc:	f043 0307 	orr.w	r3, r3, #7
 8003e00:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	68fa      	ldr	r2, [r7, #12]
 8003e06:	609a      	str	r2, [r3, #8]
}
 8003e08:	bf00      	nop
 8003e0a:	3714      	adds	r7, #20
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e12:	4770      	bx	lr

08003e14 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003e14:	b480      	push	{r7}
 8003e16:	b087      	sub	sp, #28
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	60f8      	str	r0, [r7, #12]
 8003e1c:	60b9      	str	r1, [r7, #8]
 8003e1e:	607a      	str	r2, [r7, #4]
 8003e20:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	689b      	ldr	r3, [r3, #8]
 8003e26:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e28:	697b      	ldr	r3, [r7, #20]
 8003e2a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003e2e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	021a      	lsls	r2, r3, #8
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	431a      	orrs	r2, r3
 8003e38:	68bb      	ldr	r3, [r7, #8]
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	697a      	ldr	r2, [r7, #20]
 8003e3e:	4313      	orrs	r3, r2
 8003e40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	697a      	ldr	r2, [r7, #20]
 8003e46:	609a      	str	r2, [r3, #8]
}
 8003e48:	bf00      	nop
 8003e4a:	371c      	adds	r7, #28
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e52:	4770      	bx	lr

08003e54 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003e54:	b480      	push	{r7}
 8003e56:	b087      	sub	sp, #28
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	60f8      	str	r0, [r7, #12]
 8003e5c:	60b9      	str	r1, [r7, #8]
 8003e5e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003e60:	68bb      	ldr	r3, [r7, #8]
 8003e62:	f003 031f 	and.w	r3, r3, #31
 8003e66:	2201      	movs	r2, #1
 8003e68:	fa02 f303 	lsl.w	r3, r2, r3
 8003e6c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	6a1a      	ldr	r2, [r3, #32]
 8003e72:	697b      	ldr	r3, [r7, #20]
 8003e74:	43db      	mvns	r3, r3
 8003e76:	401a      	ands	r2, r3
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	6a1a      	ldr	r2, [r3, #32]
 8003e80:	68bb      	ldr	r3, [r7, #8]
 8003e82:	f003 031f 	and.w	r3, r3, #31
 8003e86:	6879      	ldr	r1, [r7, #4]
 8003e88:	fa01 f303 	lsl.w	r3, r1, r3
 8003e8c:	431a      	orrs	r2, r3
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	621a      	str	r2, [r3, #32]
}
 8003e92:	bf00      	nop
 8003e94:	371c      	adds	r7, #28
 8003e96:	46bd      	mov	sp, r7
 8003e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9c:	4770      	bx	lr
	...

08003ea0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	b085      	sub	sp, #20
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
 8003ea8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003eb0:	2b01      	cmp	r3, #1
 8003eb2:	d101      	bne.n	8003eb8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003eb4:	2302      	movs	r3, #2
 8003eb6:	e05a      	b.n	8003f6e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2201      	movs	r2, #1
 8003ebc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2202      	movs	r2, #2
 8003ec4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	685b      	ldr	r3, [r3, #4]
 8003ece:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	689b      	ldr	r3, [r3, #8]
 8003ed6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ede:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	68fa      	ldr	r2, [r7, #12]
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	68fa      	ldr	r2, [r7, #12]
 8003ef0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4a21      	ldr	r2, [pc, #132]	@ (8003f7c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d022      	beq.n	8003f42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f04:	d01d      	beq.n	8003f42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4a1d      	ldr	r2, [pc, #116]	@ (8003f80 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d018      	beq.n	8003f42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4a1b      	ldr	r2, [pc, #108]	@ (8003f84 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d013      	beq.n	8003f42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4a1a      	ldr	r2, [pc, #104]	@ (8003f88 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d00e      	beq.n	8003f42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4a18      	ldr	r2, [pc, #96]	@ (8003f8c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d009      	beq.n	8003f42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4a17      	ldr	r2, [pc, #92]	@ (8003f90 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d004      	beq.n	8003f42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4a15      	ldr	r2, [pc, #84]	@ (8003f94 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d10c      	bne.n	8003f5c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003f42:	68bb      	ldr	r3, [r7, #8]
 8003f44:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003f48:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	685b      	ldr	r3, [r3, #4]
 8003f4e:	68ba      	ldr	r2, [r7, #8]
 8003f50:	4313      	orrs	r3, r2
 8003f52:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	68ba      	ldr	r2, [r7, #8]
 8003f5a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2201      	movs	r2, #1
 8003f60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2200      	movs	r2, #0
 8003f68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003f6c:	2300      	movs	r3, #0
}
 8003f6e:	4618      	mov	r0, r3
 8003f70:	3714      	adds	r7, #20
 8003f72:	46bd      	mov	sp, r7
 8003f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f78:	4770      	bx	lr
 8003f7a:	bf00      	nop
 8003f7c:	40010000 	.word	0x40010000
 8003f80:	40000400 	.word	0x40000400
 8003f84:	40000800 	.word	0x40000800
 8003f88:	40000c00 	.word	0x40000c00
 8003f8c:	40010400 	.word	0x40010400
 8003f90:	40014000 	.word	0x40014000
 8003f94:	40001800 	.word	0x40001800

08003f98 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003f98:	b480      	push	{r7}
 8003f9a:	b083      	sub	sp, #12
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003fa0:	bf00      	nop
 8003fa2:	370c      	adds	r7, #12
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003faa:	4770      	bx	lr

08003fac <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003fac:	b480      	push	{r7}
 8003fae:	b083      	sub	sp, #12
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003fb4:	bf00      	nop
 8003fb6:	370c      	adds	r7, #12
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbe:	4770      	bx	lr

08003fc0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b082      	sub	sp, #8
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d101      	bne.n	8003fd2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003fce:	2301      	movs	r3, #1
 8003fd0:	e042      	b.n	8004058 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003fd8:	b2db      	uxtb	r3, r3
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d106      	bne.n	8003fec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003fe6:	6878      	ldr	r0, [r7, #4]
 8003fe8:	f7fd fd66 	bl	8001ab8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2224      	movs	r2, #36	@ 0x24
 8003ff0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	68da      	ldr	r2, [r3, #12]
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004002:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004004:	6878      	ldr	r0, [r7, #4]
 8004006:	f000 f82b 	bl	8004060 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	691a      	ldr	r2, [r3, #16]
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004018:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	695a      	ldr	r2, [r3, #20]
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004028:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	68da      	ldr	r2, [r3, #12]
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004038:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2200      	movs	r2, #0
 800403e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2220      	movs	r2, #32
 8004044:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2220      	movs	r2, #32
 800404c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2200      	movs	r2, #0
 8004054:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004056:	2300      	movs	r3, #0
}
 8004058:	4618      	mov	r0, r3
 800405a:	3708      	adds	r7, #8
 800405c:	46bd      	mov	sp, r7
 800405e:	bd80      	pop	{r7, pc}

08004060 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004060:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004064:	b0c0      	sub	sp, #256	@ 0x100
 8004066:	af00      	add	r7, sp, #0
 8004068:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800406c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	691b      	ldr	r3, [r3, #16]
 8004074:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004078:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800407c:	68d9      	ldr	r1, [r3, #12]
 800407e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004082:	681a      	ldr	r2, [r3, #0]
 8004084:	ea40 0301 	orr.w	r3, r0, r1
 8004088:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800408a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800408e:	689a      	ldr	r2, [r3, #8]
 8004090:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004094:	691b      	ldr	r3, [r3, #16]
 8004096:	431a      	orrs	r2, r3
 8004098:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800409c:	695b      	ldr	r3, [r3, #20]
 800409e:	431a      	orrs	r2, r3
 80040a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040a4:	69db      	ldr	r3, [r3, #28]
 80040a6:	4313      	orrs	r3, r2
 80040a8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80040ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	68db      	ldr	r3, [r3, #12]
 80040b4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80040b8:	f021 010c 	bic.w	r1, r1, #12
 80040bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040c0:	681a      	ldr	r2, [r3, #0]
 80040c2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80040c6:	430b      	orrs	r3, r1
 80040c8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80040ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	695b      	ldr	r3, [r3, #20]
 80040d2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80040d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040da:	6999      	ldr	r1, [r3, #24]
 80040dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040e0:	681a      	ldr	r2, [r3, #0]
 80040e2:	ea40 0301 	orr.w	r3, r0, r1
 80040e6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80040e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040ec:	681a      	ldr	r2, [r3, #0]
 80040ee:	4b8f      	ldr	r3, [pc, #572]	@ (800432c <UART_SetConfig+0x2cc>)
 80040f0:	429a      	cmp	r2, r3
 80040f2:	d005      	beq.n	8004100 <UART_SetConfig+0xa0>
 80040f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040f8:	681a      	ldr	r2, [r3, #0]
 80040fa:	4b8d      	ldr	r3, [pc, #564]	@ (8004330 <UART_SetConfig+0x2d0>)
 80040fc:	429a      	cmp	r2, r3
 80040fe:	d104      	bne.n	800410a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004100:	f7fe fa1e 	bl	8002540 <HAL_RCC_GetPCLK2Freq>
 8004104:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004108:	e003      	b.n	8004112 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800410a:	f7fe fa05 	bl	8002518 <HAL_RCC_GetPCLK1Freq>
 800410e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004112:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004116:	69db      	ldr	r3, [r3, #28]
 8004118:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800411c:	f040 810c 	bne.w	8004338 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004120:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004124:	2200      	movs	r2, #0
 8004126:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800412a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800412e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004132:	4622      	mov	r2, r4
 8004134:	462b      	mov	r3, r5
 8004136:	1891      	adds	r1, r2, r2
 8004138:	65b9      	str	r1, [r7, #88]	@ 0x58
 800413a:	415b      	adcs	r3, r3
 800413c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800413e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004142:	4621      	mov	r1, r4
 8004144:	eb12 0801 	adds.w	r8, r2, r1
 8004148:	4629      	mov	r1, r5
 800414a:	eb43 0901 	adc.w	r9, r3, r1
 800414e:	f04f 0200 	mov.w	r2, #0
 8004152:	f04f 0300 	mov.w	r3, #0
 8004156:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800415a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800415e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004162:	4690      	mov	r8, r2
 8004164:	4699      	mov	r9, r3
 8004166:	4623      	mov	r3, r4
 8004168:	eb18 0303 	adds.w	r3, r8, r3
 800416c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004170:	462b      	mov	r3, r5
 8004172:	eb49 0303 	adc.w	r3, r9, r3
 8004176:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800417a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800417e:	685b      	ldr	r3, [r3, #4]
 8004180:	2200      	movs	r2, #0
 8004182:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004186:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800418a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800418e:	460b      	mov	r3, r1
 8004190:	18db      	adds	r3, r3, r3
 8004192:	653b      	str	r3, [r7, #80]	@ 0x50
 8004194:	4613      	mov	r3, r2
 8004196:	eb42 0303 	adc.w	r3, r2, r3
 800419a:	657b      	str	r3, [r7, #84]	@ 0x54
 800419c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80041a0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80041a4:	f7fc fc96 	bl	8000ad4 <__aeabi_uldivmod>
 80041a8:	4602      	mov	r2, r0
 80041aa:	460b      	mov	r3, r1
 80041ac:	4b61      	ldr	r3, [pc, #388]	@ (8004334 <UART_SetConfig+0x2d4>)
 80041ae:	fba3 2302 	umull	r2, r3, r3, r2
 80041b2:	095b      	lsrs	r3, r3, #5
 80041b4:	011c      	lsls	r4, r3, #4
 80041b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80041ba:	2200      	movs	r2, #0
 80041bc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80041c0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80041c4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80041c8:	4642      	mov	r2, r8
 80041ca:	464b      	mov	r3, r9
 80041cc:	1891      	adds	r1, r2, r2
 80041ce:	64b9      	str	r1, [r7, #72]	@ 0x48
 80041d0:	415b      	adcs	r3, r3
 80041d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80041d4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80041d8:	4641      	mov	r1, r8
 80041da:	eb12 0a01 	adds.w	sl, r2, r1
 80041de:	4649      	mov	r1, r9
 80041e0:	eb43 0b01 	adc.w	fp, r3, r1
 80041e4:	f04f 0200 	mov.w	r2, #0
 80041e8:	f04f 0300 	mov.w	r3, #0
 80041ec:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80041f0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80041f4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80041f8:	4692      	mov	sl, r2
 80041fa:	469b      	mov	fp, r3
 80041fc:	4643      	mov	r3, r8
 80041fe:	eb1a 0303 	adds.w	r3, sl, r3
 8004202:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004206:	464b      	mov	r3, r9
 8004208:	eb4b 0303 	adc.w	r3, fp, r3
 800420c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004210:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	2200      	movs	r2, #0
 8004218:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800421c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004220:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004224:	460b      	mov	r3, r1
 8004226:	18db      	adds	r3, r3, r3
 8004228:	643b      	str	r3, [r7, #64]	@ 0x40
 800422a:	4613      	mov	r3, r2
 800422c:	eb42 0303 	adc.w	r3, r2, r3
 8004230:	647b      	str	r3, [r7, #68]	@ 0x44
 8004232:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004236:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800423a:	f7fc fc4b 	bl	8000ad4 <__aeabi_uldivmod>
 800423e:	4602      	mov	r2, r0
 8004240:	460b      	mov	r3, r1
 8004242:	4611      	mov	r1, r2
 8004244:	4b3b      	ldr	r3, [pc, #236]	@ (8004334 <UART_SetConfig+0x2d4>)
 8004246:	fba3 2301 	umull	r2, r3, r3, r1
 800424a:	095b      	lsrs	r3, r3, #5
 800424c:	2264      	movs	r2, #100	@ 0x64
 800424e:	fb02 f303 	mul.w	r3, r2, r3
 8004252:	1acb      	subs	r3, r1, r3
 8004254:	00db      	lsls	r3, r3, #3
 8004256:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800425a:	4b36      	ldr	r3, [pc, #216]	@ (8004334 <UART_SetConfig+0x2d4>)
 800425c:	fba3 2302 	umull	r2, r3, r3, r2
 8004260:	095b      	lsrs	r3, r3, #5
 8004262:	005b      	lsls	r3, r3, #1
 8004264:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004268:	441c      	add	r4, r3
 800426a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800426e:	2200      	movs	r2, #0
 8004270:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004274:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004278:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800427c:	4642      	mov	r2, r8
 800427e:	464b      	mov	r3, r9
 8004280:	1891      	adds	r1, r2, r2
 8004282:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004284:	415b      	adcs	r3, r3
 8004286:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004288:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800428c:	4641      	mov	r1, r8
 800428e:	1851      	adds	r1, r2, r1
 8004290:	6339      	str	r1, [r7, #48]	@ 0x30
 8004292:	4649      	mov	r1, r9
 8004294:	414b      	adcs	r3, r1
 8004296:	637b      	str	r3, [r7, #52]	@ 0x34
 8004298:	f04f 0200 	mov.w	r2, #0
 800429c:	f04f 0300 	mov.w	r3, #0
 80042a0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80042a4:	4659      	mov	r1, fp
 80042a6:	00cb      	lsls	r3, r1, #3
 80042a8:	4651      	mov	r1, sl
 80042aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80042ae:	4651      	mov	r1, sl
 80042b0:	00ca      	lsls	r2, r1, #3
 80042b2:	4610      	mov	r0, r2
 80042b4:	4619      	mov	r1, r3
 80042b6:	4603      	mov	r3, r0
 80042b8:	4642      	mov	r2, r8
 80042ba:	189b      	adds	r3, r3, r2
 80042bc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80042c0:	464b      	mov	r3, r9
 80042c2:	460a      	mov	r2, r1
 80042c4:	eb42 0303 	adc.w	r3, r2, r3
 80042c8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80042cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042d0:	685b      	ldr	r3, [r3, #4]
 80042d2:	2200      	movs	r2, #0
 80042d4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80042d8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80042dc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80042e0:	460b      	mov	r3, r1
 80042e2:	18db      	adds	r3, r3, r3
 80042e4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80042e6:	4613      	mov	r3, r2
 80042e8:	eb42 0303 	adc.w	r3, r2, r3
 80042ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80042ee:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80042f2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80042f6:	f7fc fbed 	bl	8000ad4 <__aeabi_uldivmod>
 80042fa:	4602      	mov	r2, r0
 80042fc:	460b      	mov	r3, r1
 80042fe:	4b0d      	ldr	r3, [pc, #52]	@ (8004334 <UART_SetConfig+0x2d4>)
 8004300:	fba3 1302 	umull	r1, r3, r3, r2
 8004304:	095b      	lsrs	r3, r3, #5
 8004306:	2164      	movs	r1, #100	@ 0x64
 8004308:	fb01 f303 	mul.w	r3, r1, r3
 800430c:	1ad3      	subs	r3, r2, r3
 800430e:	00db      	lsls	r3, r3, #3
 8004310:	3332      	adds	r3, #50	@ 0x32
 8004312:	4a08      	ldr	r2, [pc, #32]	@ (8004334 <UART_SetConfig+0x2d4>)
 8004314:	fba2 2303 	umull	r2, r3, r2, r3
 8004318:	095b      	lsrs	r3, r3, #5
 800431a:	f003 0207 	and.w	r2, r3, #7
 800431e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4422      	add	r2, r4
 8004326:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004328:	e106      	b.n	8004538 <UART_SetConfig+0x4d8>
 800432a:	bf00      	nop
 800432c:	40011000 	.word	0x40011000
 8004330:	40011400 	.word	0x40011400
 8004334:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004338:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800433c:	2200      	movs	r2, #0
 800433e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004342:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004346:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800434a:	4642      	mov	r2, r8
 800434c:	464b      	mov	r3, r9
 800434e:	1891      	adds	r1, r2, r2
 8004350:	6239      	str	r1, [r7, #32]
 8004352:	415b      	adcs	r3, r3
 8004354:	627b      	str	r3, [r7, #36]	@ 0x24
 8004356:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800435a:	4641      	mov	r1, r8
 800435c:	1854      	adds	r4, r2, r1
 800435e:	4649      	mov	r1, r9
 8004360:	eb43 0501 	adc.w	r5, r3, r1
 8004364:	f04f 0200 	mov.w	r2, #0
 8004368:	f04f 0300 	mov.w	r3, #0
 800436c:	00eb      	lsls	r3, r5, #3
 800436e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004372:	00e2      	lsls	r2, r4, #3
 8004374:	4614      	mov	r4, r2
 8004376:	461d      	mov	r5, r3
 8004378:	4643      	mov	r3, r8
 800437a:	18e3      	adds	r3, r4, r3
 800437c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004380:	464b      	mov	r3, r9
 8004382:	eb45 0303 	adc.w	r3, r5, r3
 8004386:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800438a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800438e:	685b      	ldr	r3, [r3, #4]
 8004390:	2200      	movs	r2, #0
 8004392:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004396:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800439a:	f04f 0200 	mov.w	r2, #0
 800439e:	f04f 0300 	mov.w	r3, #0
 80043a2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80043a6:	4629      	mov	r1, r5
 80043a8:	008b      	lsls	r3, r1, #2
 80043aa:	4621      	mov	r1, r4
 80043ac:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80043b0:	4621      	mov	r1, r4
 80043b2:	008a      	lsls	r2, r1, #2
 80043b4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80043b8:	f7fc fb8c 	bl	8000ad4 <__aeabi_uldivmod>
 80043bc:	4602      	mov	r2, r0
 80043be:	460b      	mov	r3, r1
 80043c0:	4b60      	ldr	r3, [pc, #384]	@ (8004544 <UART_SetConfig+0x4e4>)
 80043c2:	fba3 2302 	umull	r2, r3, r3, r2
 80043c6:	095b      	lsrs	r3, r3, #5
 80043c8:	011c      	lsls	r4, r3, #4
 80043ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80043ce:	2200      	movs	r2, #0
 80043d0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80043d4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80043d8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80043dc:	4642      	mov	r2, r8
 80043de:	464b      	mov	r3, r9
 80043e0:	1891      	adds	r1, r2, r2
 80043e2:	61b9      	str	r1, [r7, #24]
 80043e4:	415b      	adcs	r3, r3
 80043e6:	61fb      	str	r3, [r7, #28]
 80043e8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80043ec:	4641      	mov	r1, r8
 80043ee:	1851      	adds	r1, r2, r1
 80043f0:	6139      	str	r1, [r7, #16]
 80043f2:	4649      	mov	r1, r9
 80043f4:	414b      	adcs	r3, r1
 80043f6:	617b      	str	r3, [r7, #20]
 80043f8:	f04f 0200 	mov.w	r2, #0
 80043fc:	f04f 0300 	mov.w	r3, #0
 8004400:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004404:	4659      	mov	r1, fp
 8004406:	00cb      	lsls	r3, r1, #3
 8004408:	4651      	mov	r1, sl
 800440a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800440e:	4651      	mov	r1, sl
 8004410:	00ca      	lsls	r2, r1, #3
 8004412:	4610      	mov	r0, r2
 8004414:	4619      	mov	r1, r3
 8004416:	4603      	mov	r3, r0
 8004418:	4642      	mov	r2, r8
 800441a:	189b      	adds	r3, r3, r2
 800441c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004420:	464b      	mov	r3, r9
 8004422:	460a      	mov	r2, r1
 8004424:	eb42 0303 	adc.w	r3, r2, r3
 8004428:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800442c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004430:	685b      	ldr	r3, [r3, #4]
 8004432:	2200      	movs	r2, #0
 8004434:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004436:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004438:	f04f 0200 	mov.w	r2, #0
 800443c:	f04f 0300 	mov.w	r3, #0
 8004440:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004444:	4649      	mov	r1, r9
 8004446:	008b      	lsls	r3, r1, #2
 8004448:	4641      	mov	r1, r8
 800444a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800444e:	4641      	mov	r1, r8
 8004450:	008a      	lsls	r2, r1, #2
 8004452:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004456:	f7fc fb3d 	bl	8000ad4 <__aeabi_uldivmod>
 800445a:	4602      	mov	r2, r0
 800445c:	460b      	mov	r3, r1
 800445e:	4611      	mov	r1, r2
 8004460:	4b38      	ldr	r3, [pc, #224]	@ (8004544 <UART_SetConfig+0x4e4>)
 8004462:	fba3 2301 	umull	r2, r3, r3, r1
 8004466:	095b      	lsrs	r3, r3, #5
 8004468:	2264      	movs	r2, #100	@ 0x64
 800446a:	fb02 f303 	mul.w	r3, r2, r3
 800446e:	1acb      	subs	r3, r1, r3
 8004470:	011b      	lsls	r3, r3, #4
 8004472:	3332      	adds	r3, #50	@ 0x32
 8004474:	4a33      	ldr	r2, [pc, #204]	@ (8004544 <UART_SetConfig+0x4e4>)
 8004476:	fba2 2303 	umull	r2, r3, r2, r3
 800447a:	095b      	lsrs	r3, r3, #5
 800447c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004480:	441c      	add	r4, r3
 8004482:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004486:	2200      	movs	r2, #0
 8004488:	673b      	str	r3, [r7, #112]	@ 0x70
 800448a:	677a      	str	r2, [r7, #116]	@ 0x74
 800448c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004490:	4642      	mov	r2, r8
 8004492:	464b      	mov	r3, r9
 8004494:	1891      	adds	r1, r2, r2
 8004496:	60b9      	str	r1, [r7, #8]
 8004498:	415b      	adcs	r3, r3
 800449a:	60fb      	str	r3, [r7, #12]
 800449c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80044a0:	4641      	mov	r1, r8
 80044a2:	1851      	adds	r1, r2, r1
 80044a4:	6039      	str	r1, [r7, #0]
 80044a6:	4649      	mov	r1, r9
 80044a8:	414b      	adcs	r3, r1
 80044aa:	607b      	str	r3, [r7, #4]
 80044ac:	f04f 0200 	mov.w	r2, #0
 80044b0:	f04f 0300 	mov.w	r3, #0
 80044b4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80044b8:	4659      	mov	r1, fp
 80044ba:	00cb      	lsls	r3, r1, #3
 80044bc:	4651      	mov	r1, sl
 80044be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80044c2:	4651      	mov	r1, sl
 80044c4:	00ca      	lsls	r2, r1, #3
 80044c6:	4610      	mov	r0, r2
 80044c8:	4619      	mov	r1, r3
 80044ca:	4603      	mov	r3, r0
 80044cc:	4642      	mov	r2, r8
 80044ce:	189b      	adds	r3, r3, r2
 80044d0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80044d2:	464b      	mov	r3, r9
 80044d4:	460a      	mov	r2, r1
 80044d6:	eb42 0303 	adc.w	r3, r2, r3
 80044da:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80044dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044e0:	685b      	ldr	r3, [r3, #4]
 80044e2:	2200      	movs	r2, #0
 80044e4:	663b      	str	r3, [r7, #96]	@ 0x60
 80044e6:	667a      	str	r2, [r7, #100]	@ 0x64
 80044e8:	f04f 0200 	mov.w	r2, #0
 80044ec:	f04f 0300 	mov.w	r3, #0
 80044f0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80044f4:	4649      	mov	r1, r9
 80044f6:	008b      	lsls	r3, r1, #2
 80044f8:	4641      	mov	r1, r8
 80044fa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80044fe:	4641      	mov	r1, r8
 8004500:	008a      	lsls	r2, r1, #2
 8004502:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004506:	f7fc fae5 	bl	8000ad4 <__aeabi_uldivmod>
 800450a:	4602      	mov	r2, r0
 800450c:	460b      	mov	r3, r1
 800450e:	4b0d      	ldr	r3, [pc, #52]	@ (8004544 <UART_SetConfig+0x4e4>)
 8004510:	fba3 1302 	umull	r1, r3, r3, r2
 8004514:	095b      	lsrs	r3, r3, #5
 8004516:	2164      	movs	r1, #100	@ 0x64
 8004518:	fb01 f303 	mul.w	r3, r1, r3
 800451c:	1ad3      	subs	r3, r2, r3
 800451e:	011b      	lsls	r3, r3, #4
 8004520:	3332      	adds	r3, #50	@ 0x32
 8004522:	4a08      	ldr	r2, [pc, #32]	@ (8004544 <UART_SetConfig+0x4e4>)
 8004524:	fba2 2303 	umull	r2, r3, r2, r3
 8004528:	095b      	lsrs	r3, r3, #5
 800452a:	f003 020f 	and.w	r2, r3, #15
 800452e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4422      	add	r2, r4
 8004536:	609a      	str	r2, [r3, #8]
}
 8004538:	bf00      	nop
 800453a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800453e:	46bd      	mov	sp, r7
 8004540:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004544:	51eb851f 	.word	0x51eb851f

08004548 <memset>:
 8004548:	4402      	add	r2, r0
 800454a:	4603      	mov	r3, r0
 800454c:	4293      	cmp	r3, r2
 800454e:	d100      	bne.n	8004552 <memset+0xa>
 8004550:	4770      	bx	lr
 8004552:	f803 1b01 	strb.w	r1, [r3], #1
 8004556:	e7f9      	b.n	800454c <memset+0x4>

08004558 <__libc_init_array>:
 8004558:	b570      	push	{r4, r5, r6, lr}
 800455a:	4d0d      	ldr	r5, [pc, #52]	@ (8004590 <__libc_init_array+0x38>)
 800455c:	4c0d      	ldr	r4, [pc, #52]	@ (8004594 <__libc_init_array+0x3c>)
 800455e:	1b64      	subs	r4, r4, r5
 8004560:	10a4      	asrs	r4, r4, #2
 8004562:	2600      	movs	r6, #0
 8004564:	42a6      	cmp	r6, r4
 8004566:	d109      	bne.n	800457c <__libc_init_array+0x24>
 8004568:	4d0b      	ldr	r5, [pc, #44]	@ (8004598 <__libc_init_array+0x40>)
 800456a:	4c0c      	ldr	r4, [pc, #48]	@ (800459c <__libc_init_array+0x44>)
 800456c:	f000 f818 	bl	80045a0 <_init>
 8004570:	1b64      	subs	r4, r4, r5
 8004572:	10a4      	asrs	r4, r4, #2
 8004574:	2600      	movs	r6, #0
 8004576:	42a6      	cmp	r6, r4
 8004578:	d105      	bne.n	8004586 <__libc_init_array+0x2e>
 800457a:	bd70      	pop	{r4, r5, r6, pc}
 800457c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004580:	4798      	blx	r3
 8004582:	3601      	adds	r6, #1
 8004584:	e7ee      	b.n	8004564 <__libc_init_array+0xc>
 8004586:	f855 3b04 	ldr.w	r3, [r5], #4
 800458a:	4798      	blx	r3
 800458c:	3601      	adds	r6, #1
 800458e:	e7f2      	b.n	8004576 <__libc_init_array+0x1e>
 8004590:	080045e8 	.word	0x080045e8
 8004594:	080045e8 	.word	0x080045e8
 8004598:	080045e8 	.word	0x080045e8
 800459c:	080045ec 	.word	0x080045ec

080045a0 <_init>:
 80045a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045a2:	bf00      	nop
 80045a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045a6:	bc08      	pop	{r3}
 80045a8:	469e      	mov	lr, r3
 80045aa:	4770      	bx	lr

080045ac <_fini>:
 80045ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045ae:	bf00      	nop
 80045b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045b2:	bc08      	pop	{r3}
 80045b4:	469e      	mov	lr, r3
 80045b6:	4770      	bx	lr
