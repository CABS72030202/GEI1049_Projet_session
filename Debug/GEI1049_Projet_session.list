
GEI1049_Projet_session.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000059d0  080001c8  080001c8  000011c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08005b98  08005b98  00006b98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005bc0  08005bc0  00007020  2**0
                  CONTENTS
  4 .ARM          00000008  08005bc0  08005bc0  00006bc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005bc8  08005bc8  00007020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005bc8  08005bc8  00006bc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005bcc  08005bcc  00006bcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000020  20000000  08005bd0  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001e0  20000020  08005bf0  00007020  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000200  08005bf0  00007200  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007020  2**0
                  CONTENTS, READONLY
 12 .debug_info   000117f9  00000000  00000000  00007050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002436  00000000  00000000  00018849  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fb8  00000000  00000000  0001ac80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c73  00000000  00000000  0001bc38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022dad  00000000  00000000  0001c8ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000144b9  00000000  00000000  0003f658  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d3e7f  00000000  00000000  00053b11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00127990  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004468  00000000  00000000  001279d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  0012be3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	@ (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	@ (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000020 	.word	0x20000020
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08005b80 	.word	0x08005b80

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	@ (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	@ (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	@ (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000024 	.word	0x20000024
 8000204:	08005b80 	.word	0x08005b80

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	@ 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	3c01      	subs	r4, #1
 8000344:	bf28      	it	cs
 8000346:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800034a:	d2e9      	bcs.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__aeabi_d2iz>:
 80009a4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009a8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80009ac:	d215      	bcs.n	80009da <__aeabi_d2iz+0x36>
 80009ae:	d511      	bpl.n	80009d4 <__aeabi_d2iz+0x30>
 80009b0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80009b4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009b8:	d912      	bls.n	80009e0 <__aeabi_d2iz+0x3c>
 80009ba:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009be:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80009c2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009c6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80009ca:	fa23 f002 	lsr.w	r0, r3, r2
 80009ce:	bf18      	it	ne
 80009d0:	4240      	negne	r0, r0
 80009d2:	4770      	bx	lr
 80009d4:	f04f 0000 	mov.w	r0, #0
 80009d8:	4770      	bx	lr
 80009da:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009de:	d105      	bne.n	80009ec <__aeabi_d2iz+0x48>
 80009e0:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 80009e4:	bf08      	it	eq
 80009e6:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 80009ea:	4770      	bx	lr
 80009ec:	f04f 0000 	mov.w	r0, #0
 80009f0:	4770      	bx	lr
 80009f2:	bf00      	nop

080009f4 <__aeabi_d2uiz>:
 80009f4:	004a      	lsls	r2, r1, #1
 80009f6:	d211      	bcs.n	8000a1c <__aeabi_d2uiz+0x28>
 80009f8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80009fc:	d211      	bcs.n	8000a22 <__aeabi_d2uiz+0x2e>
 80009fe:	d50d      	bpl.n	8000a1c <__aeabi_d2uiz+0x28>
 8000a00:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a04:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a08:	d40e      	bmi.n	8000a28 <__aeabi_d2uiz+0x34>
 8000a0a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a0e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a12:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a16:	fa23 f002 	lsr.w	r0, r3, r2
 8000a1a:	4770      	bx	lr
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a26:	d102      	bne.n	8000a2e <__aeabi_d2uiz+0x3a>
 8000a28:	f04f 30ff 	mov.w	r0, #4294967295
 8000a2c:	4770      	bx	lr
 8000a2e:	f04f 0000 	mov.w	r0, #0
 8000a32:	4770      	bx	lr

08000a34 <__aeabi_d2f>:
 8000a34:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a38:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a3c:	bf24      	itt	cs
 8000a3e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a42:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a46:	d90d      	bls.n	8000a64 <__aeabi_d2f+0x30>
 8000a48:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a4c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a50:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a54:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a58:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a5c:	bf08      	it	eq
 8000a5e:	f020 0001 	biceq.w	r0, r0, #1
 8000a62:	4770      	bx	lr
 8000a64:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a68:	d121      	bne.n	8000aae <__aeabi_d2f+0x7a>
 8000a6a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a6e:	bfbc      	itt	lt
 8000a70:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a74:	4770      	bxlt	lr
 8000a76:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a7a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a7e:	f1c2 0218 	rsb	r2, r2, #24
 8000a82:	f1c2 0c20 	rsb	ip, r2, #32
 8000a86:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a8a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a8e:	bf18      	it	ne
 8000a90:	f040 0001 	orrne.w	r0, r0, #1
 8000a94:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a98:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a9c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000aa0:	ea40 000c 	orr.w	r0, r0, ip
 8000aa4:	fa23 f302 	lsr.w	r3, r3, r2
 8000aa8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000aac:	e7cc      	b.n	8000a48 <__aeabi_d2f+0x14>
 8000aae:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ab2:	d107      	bne.n	8000ac4 <__aeabi_d2f+0x90>
 8000ab4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ab8:	bf1e      	ittt	ne
 8000aba:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000abe:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000ac2:	4770      	bxne	lr
 8000ac4:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ac8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000acc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_uldivmod>:
 8000ad4:	b953      	cbnz	r3, 8000aec <__aeabi_uldivmod+0x18>
 8000ad6:	b94a      	cbnz	r2, 8000aec <__aeabi_uldivmod+0x18>
 8000ad8:	2900      	cmp	r1, #0
 8000ada:	bf08      	it	eq
 8000adc:	2800      	cmpeq	r0, #0
 8000ade:	bf1c      	itt	ne
 8000ae0:	f04f 31ff 	movne.w	r1, #4294967295
 8000ae4:	f04f 30ff 	movne.w	r0, #4294967295
 8000ae8:	f000 b96a 	b.w	8000dc0 <__aeabi_idiv0>
 8000aec:	f1ad 0c08 	sub.w	ip, sp, #8
 8000af0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000af4:	f000 f806 	bl	8000b04 <__udivmoddi4>
 8000af8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000afc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b00:	b004      	add	sp, #16
 8000b02:	4770      	bx	lr

08000b04 <__udivmoddi4>:
 8000b04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b08:	9d08      	ldr	r5, [sp, #32]
 8000b0a:	460c      	mov	r4, r1
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d14e      	bne.n	8000bae <__udivmoddi4+0xaa>
 8000b10:	4694      	mov	ip, r2
 8000b12:	458c      	cmp	ip, r1
 8000b14:	4686      	mov	lr, r0
 8000b16:	fab2 f282 	clz	r2, r2
 8000b1a:	d962      	bls.n	8000be2 <__udivmoddi4+0xde>
 8000b1c:	b14a      	cbz	r2, 8000b32 <__udivmoddi4+0x2e>
 8000b1e:	f1c2 0320 	rsb	r3, r2, #32
 8000b22:	4091      	lsls	r1, r2
 8000b24:	fa20 f303 	lsr.w	r3, r0, r3
 8000b28:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b2c:	4319      	orrs	r1, r3
 8000b2e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b32:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b36:	fa1f f68c 	uxth.w	r6, ip
 8000b3a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000b3e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b42:	fb07 1114 	mls	r1, r7, r4, r1
 8000b46:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b4a:	fb04 f106 	mul.w	r1, r4, r6
 8000b4e:	4299      	cmp	r1, r3
 8000b50:	d90a      	bls.n	8000b68 <__udivmoddi4+0x64>
 8000b52:	eb1c 0303 	adds.w	r3, ip, r3
 8000b56:	f104 30ff 	add.w	r0, r4, #4294967295
 8000b5a:	f080 8112 	bcs.w	8000d82 <__udivmoddi4+0x27e>
 8000b5e:	4299      	cmp	r1, r3
 8000b60:	f240 810f 	bls.w	8000d82 <__udivmoddi4+0x27e>
 8000b64:	3c02      	subs	r4, #2
 8000b66:	4463      	add	r3, ip
 8000b68:	1a59      	subs	r1, r3, r1
 8000b6a:	fa1f f38e 	uxth.w	r3, lr
 8000b6e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b72:	fb07 1110 	mls	r1, r7, r0, r1
 8000b76:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b7a:	fb00 f606 	mul.w	r6, r0, r6
 8000b7e:	429e      	cmp	r6, r3
 8000b80:	d90a      	bls.n	8000b98 <__udivmoddi4+0x94>
 8000b82:	eb1c 0303 	adds.w	r3, ip, r3
 8000b86:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b8a:	f080 80fc 	bcs.w	8000d86 <__udivmoddi4+0x282>
 8000b8e:	429e      	cmp	r6, r3
 8000b90:	f240 80f9 	bls.w	8000d86 <__udivmoddi4+0x282>
 8000b94:	4463      	add	r3, ip
 8000b96:	3802      	subs	r0, #2
 8000b98:	1b9b      	subs	r3, r3, r6
 8000b9a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b9e:	2100      	movs	r1, #0
 8000ba0:	b11d      	cbz	r5, 8000baa <__udivmoddi4+0xa6>
 8000ba2:	40d3      	lsrs	r3, r2
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	e9c5 3200 	strd	r3, r2, [r5]
 8000baa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bae:	428b      	cmp	r3, r1
 8000bb0:	d905      	bls.n	8000bbe <__udivmoddi4+0xba>
 8000bb2:	b10d      	cbz	r5, 8000bb8 <__udivmoddi4+0xb4>
 8000bb4:	e9c5 0100 	strd	r0, r1, [r5]
 8000bb8:	2100      	movs	r1, #0
 8000bba:	4608      	mov	r0, r1
 8000bbc:	e7f5      	b.n	8000baa <__udivmoddi4+0xa6>
 8000bbe:	fab3 f183 	clz	r1, r3
 8000bc2:	2900      	cmp	r1, #0
 8000bc4:	d146      	bne.n	8000c54 <__udivmoddi4+0x150>
 8000bc6:	42a3      	cmp	r3, r4
 8000bc8:	d302      	bcc.n	8000bd0 <__udivmoddi4+0xcc>
 8000bca:	4290      	cmp	r0, r2
 8000bcc:	f0c0 80f0 	bcc.w	8000db0 <__udivmoddi4+0x2ac>
 8000bd0:	1a86      	subs	r6, r0, r2
 8000bd2:	eb64 0303 	sbc.w	r3, r4, r3
 8000bd6:	2001      	movs	r0, #1
 8000bd8:	2d00      	cmp	r5, #0
 8000bda:	d0e6      	beq.n	8000baa <__udivmoddi4+0xa6>
 8000bdc:	e9c5 6300 	strd	r6, r3, [r5]
 8000be0:	e7e3      	b.n	8000baa <__udivmoddi4+0xa6>
 8000be2:	2a00      	cmp	r2, #0
 8000be4:	f040 8090 	bne.w	8000d08 <__udivmoddi4+0x204>
 8000be8:	eba1 040c 	sub.w	r4, r1, ip
 8000bec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bf0:	fa1f f78c 	uxth.w	r7, ip
 8000bf4:	2101      	movs	r1, #1
 8000bf6:	fbb4 f6f8 	udiv	r6, r4, r8
 8000bfa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bfe:	fb08 4416 	mls	r4, r8, r6, r4
 8000c02:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c06:	fb07 f006 	mul.w	r0, r7, r6
 8000c0a:	4298      	cmp	r0, r3
 8000c0c:	d908      	bls.n	8000c20 <__udivmoddi4+0x11c>
 8000c0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c12:	f106 34ff 	add.w	r4, r6, #4294967295
 8000c16:	d202      	bcs.n	8000c1e <__udivmoddi4+0x11a>
 8000c18:	4298      	cmp	r0, r3
 8000c1a:	f200 80cd 	bhi.w	8000db8 <__udivmoddi4+0x2b4>
 8000c1e:	4626      	mov	r6, r4
 8000c20:	1a1c      	subs	r4, r3, r0
 8000c22:	fa1f f38e 	uxth.w	r3, lr
 8000c26:	fbb4 f0f8 	udiv	r0, r4, r8
 8000c2a:	fb08 4410 	mls	r4, r8, r0, r4
 8000c2e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c32:	fb00 f707 	mul.w	r7, r0, r7
 8000c36:	429f      	cmp	r7, r3
 8000c38:	d908      	bls.n	8000c4c <__udivmoddi4+0x148>
 8000c3a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c3e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c42:	d202      	bcs.n	8000c4a <__udivmoddi4+0x146>
 8000c44:	429f      	cmp	r7, r3
 8000c46:	f200 80b0 	bhi.w	8000daa <__udivmoddi4+0x2a6>
 8000c4a:	4620      	mov	r0, r4
 8000c4c:	1bdb      	subs	r3, r3, r7
 8000c4e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c52:	e7a5      	b.n	8000ba0 <__udivmoddi4+0x9c>
 8000c54:	f1c1 0620 	rsb	r6, r1, #32
 8000c58:	408b      	lsls	r3, r1
 8000c5a:	fa22 f706 	lsr.w	r7, r2, r6
 8000c5e:	431f      	orrs	r7, r3
 8000c60:	fa20 fc06 	lsr.w	ip, r0, r6
 8000c64:	fa04 f301 	lsl.w	r3, r4, r1
 8000c68:	ea43 030c 	orr.w	r3, r3, ip
 8000c6c:	40f4      	lsrs	r4, r6
 8000c6e:	fa00 f801 	lsl.w	r8, r0, r1
 8000c72:	0c38      	lsrs	r0, r7, #16
 8000c74:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c78:	fbb4 fef0 	udiv	lr, r4, r0
 8000c7c:	fa1f fc87 	uxth.w	ip, r7
 8000c80:	fb00 441e 	mls	r4, r0, lr, r4
 8000c84:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c88:	fb0e f90c 	mul.w	r9, lr, ip
 8000c8c:	45a1      	cmp	r9, r4
 8000c8e:	fa02 f201 	lsl.w	r2, r2, r1
 8000c92:	d90a      	bls.n	8000caa <__udivmoddi4+0x1a6>
 8000c94:	193c      	adds	r4, r7, r4
 8000c96:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000c9a:	f080 8084 	bcs.w	8000da6 <__udivmoddi4+0x2a2>
 8000c9e:	45a1      	cmp	r9, r4
 8000ca0:	f240 8081 	bls.w	8000da6 <__udivmoddi4+0x2a2>
 8000ca4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ca8:	443c      	add	r4, r7
 8000caa:	eba4 0409 	sub.w	r4, r4, r9
 8000cae:	fa1f f983 	uxth.w	r9, r3
 8000cb2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000cb6:	fb00 4413 	mls	r4, r0, r3, r4
 8000cba:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000cbe:	fb03 fc0c 	mul.w	ip, r3, ip
 8000cc2:	45a4      	cmp	ip, r4
 8000cc4:	d907      	bls.n	8000cd6 <__udivmoddi4+0x1d2>
 8000cc6:	193c      	adds	r4, r7, r4
 8000cc8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000ccc:	d267      	bcs.n	8000d9e <__udivmoddi4+0x29a>
 8000cce:	45a4      	cmp	ip, r4
 8000cd0:	d965      	bls.n	8000d9e <__udivmoddi4+0x29a>
 8000cd2:	3b02      	subs	r3, #2
 8000cd4:	443c      	add	r4, r7
 8000cd6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000cda:	fba0 9302 	umull	r9, r3, r0, r2
 8000cde:	eba4 040c 	sub.w	r4, r4, ip
 8000ce2:	429c      	cmp	r4, r3
 8000ce4:	46ce      	mov	lr, r9
 8000ce6:	469c      	mov	ip, r3
 8000ce8:	d351      	bcc.n	8000d8e <__udivmoddi4+0x28a>
 8000cea:	d04e      	beq.n	8000d8a <__udivmoddi4+0x286>
 8000cec:	b155      	cbz	r5, 8000d04 <__udivmoddi4+0x200>
 8000cee:	ebb8 030e 	subs.w	r3, r8, lr
 8000cf2:	eb64 040c 	sbc.w	r4, r4, ip
 8000cf6:	fa04 f606 	lsl.w	r6, r4, r6
 8000cfa:	40cb      	lsrs	r3, r1
 8000cfc:	431e      	orrs	r6, r3
 8000cfe:	40cc      	lsrs	r4, r1
 8000d00:	e9c5 6400 	strd	r6, r4, [r5]
 8000d04:	2100      	movs	r1, #0
 8000d06:	e750      	b.n	8000baa <__udivmoddi4+0xa6>
 8000d08:	f1c2 0320 	rsb	r3, r2, #32
 8000d0c:	fa20 f103 	lsr.w	r1, r0, r3
 8000d10:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d14:	fa24 f303 	lsr.w	r3, r4, r3
 8000d18:	4094      	lsls	r4, r2
 8000d1a:	430c      	orrs	r4, r1
 8000d1c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d20:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d24:	fa1f f78c 	uxth.w	r7, ip
 8000d28:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d2c:	fb08 3110 	mls	r1, r8, r0, r3
 8000d30:	0c23      	lsrs	r3, r4, #16
 8000d32:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d36:	fb00 f107 	mul.w	r1, r0, r7
 8000d3a:	4299      	cmp	r1, r3
 8000d3c:	d908      	bls.n	8000d50 <__udivmoddi4+0x24c>
 8000d3e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d42:	f100 36ff 	add.w	r6, r0, #4294967295
 8000d46:	d22c      	bcs.n	8000da2 <__udivmoddi4+0x29e>
 8000d48:	4299      	cmp	r1, r3
 8000d4a:	d92a      	bls.n	8000da2 <__udivmoddi4+0x29e>
 8000d4c:	3802      	subs	r0, #2
 8000d4e:	4463      	add	r3, ip
 8000d50:	1a5b      	subs	r3, r3, r1
 8000d52:	b2a4      	uxth	r4, r4
 8000d54:	fbb3 f1f8 	udiv	r1, r3, r8
 8000d58:	fb08 3311 	mls	r3, r8, r1, r3
 8000d5c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d60:	fb01 f307 	mul.w	r3, r1, r7
 8000d64:	42a3      	cmp	r3, r4
 8000d66:	d908      	bls.n	8000d7a <__udivmoddi4+0x276>
 8000d68:	eb1c 0404 	adds.w	r4, ip, r4
 8000d6c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000d70:	d213      	bcs.n	8000d9a <__udivmoddi4+0x296>
 8000d72:	42a3      	cmp	r3, r4
 8000d74:	d911      	bls.n	8000d9a <__udivmoddi4+0x296>
 8000d76:	3902      	subs	r1, #2
 8000d78:	4464      	add	r4, ip
 8000d7a:	1ae4      	subs	r4, r4, r3
 8000d7c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d80:	e739      	b.n	8000bf6 <__udivmoddi4+0xf2>
 8000d82:	4604      	mov	r4, r0
 8000d84:	e6f0      	b.n	8000b68 <__udivmoddi4+0x64>
 8000d86:	4608      	mov	r0, r1
 8000d88:	e706      	b.n	8000b98 <__udivmoddi4+0x94>
 8000d8a:	45c8      	cmp	r8, r9
 8000d8c:	d2ae      	bcs.n	8000cec <__udivmoddi4+0x1e8>
 8000d8e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d92:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d96:	3801      	subs	r0, #1
 8000d98:	e7a8      	b.n	8000cec <__udivmoddi4+0x1e8>
 8000d9a:	4631      	mov	r1, r6
 8000d9c:	e7ed      	b.n	8000d7a <__udivmoddi4+0x276>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	e799      	b.n	8000cd6 <__udivmoddi4+0x1d2>
 8000da2:	4630      	mov	r0, r6
 8000da4:	e7d4      	b.n	8000d50 <__udivmoddi4+0x24c>
 8000da6:	46d6      	mov	lr, sl
 8000da8:	e77f      	b.n	8000caa <__udivmoddi4+0x1a6>
 8000daa:	4463      	add	r3, ip
 8000dac:	3802      	subs	r0, #2
 8000dae:	e74d      	b.n	8000c4c <__udivmoddi4+0x148>
 8000db0:	4606      	mov	r6, r0
 8000db2:	4623      	mov	r3, r4
 8000db4:	4608      	mov	r0, r1
 8000db6:	e70f      	b.n	8000bd8 <__udivmoddi4+0xd4>
 8000db8:	3e02      	subs	r6, #2
 8000dba:	4463      	add	r3, ip
 8000dbc:	e730      	b.n	8000c20 <__udivmoddi4+0x11c>
 8000dbe:	bf00      	nop

08000dc0 <__aeabi_idiv0>:
 8000dc0:	4770      	bx	lr
 8000dc2:	bf00      	nop

08000dc4 <Get_Mode>:
uint8_t dip_state = 0;
uint8_t curr_mode = 0;
volatile int timer_count = 0;
float turning_time = 0;

int Get_Mode(int MSB_state, int LSB_state) {
 8000dc4:	b480      	push	{r7}
 8000dc6:	b085      	sub	sp, #20
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
 8000dcc:	6039      	str	r1, [r7, #0]
	static const int id_lookup[4] = {MANUAL_MODE, CIRCLE_MODE, SQUARE_MODE, BACK_FORTH_MODE};
	int bin = ((MSB_state & 1) << 1) | (LSB_state & 1);
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	005b      	lsls	r3, r3, #1
 8000dd2:	f003 0202 	and.w	r2, r3, #2
 8000dd6:	683b      	ldr	r3, [r7, #0]
 8000dd8:	f003 0301 	and.w	r3, r3, #1
 8000ddc:	4313      	orrs	r3, r2
 8000dde:	60fb      	str	r3, [r7, #12]
	return id_lookup[bin];
 8000de0:	4a04      	ldr	r2, [pc, #16]	@ (8000df4 <Get_Mode+0x30>)
 8000de2:	68fb      	ldr	r3, [r7, #12]
 8000de4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8000de8:	4618      	mov	r0, r3
 8000dea:	3714      	adds	r7, #20
 8000dec:	46bd      	mov	sp, r7
 8000dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df2:	4770      	bx	lr
 8000df4:	08005b98 	.word	0x08005b98

08000df8 <Auto_Angle>:
			break;
	}
	return str;
}

void Auto_Angle(float value, TIM_HandleTypeDef* htim3) {
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b082      	sub	sp, #8
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	ed87 0a01 	vstr	s0, [r7, #4]
 8000e02:	6038      	str	r0, [r7, #0]
    // Calculate the duration for the turn
    turning_time = fabs(value) * TRACK_WIDTH;
 8000e04:	edd7 7a01 	vldr	s15, [r7, #4]
 8000e08:	eef0 7ae7 	vabs.f32	s15, s15
 8000e0c:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8000ed0 <Auto_Angle+0xd8>
 8000e10:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000e14:	4b2f      	ldr	r3, [pc, #188]	@ (8000ed4 <Auto_Angle+0xdc>)
 8000e16:	edc3 7a00 	vstr	s15, [r3]

    // Determine direction of turn
    if (value > 0) {
 8000e1a:	edd7 7a01 	vldr	s15, [r7, #4]
 8000e1e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000e22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e26:	dd18      	ble.n	8000e5a <Auto_Angle+0x62>
    	turning_time /= (360.0 * CLOCKWISE_FACTOR);
 8000e28:	4b2a      	ldr	r3, [pc, #168]	@ (8000ed4 <Auto_Angle+0xdc>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f7ff fb4f 	bl	80004d0 <__aeabi_f2d>
 8000e32:	a325      	add	r3, pc, #148	@ (adr r3, 8000ec8 <Auto_Angle+0xd0>)
 8000e34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e38:	f7ff fccc 	bl	80007d4 <__aeabi_ddiv>
 8000e3c:	4602      	mov	r2, r0
 8000e3e:	460b      	mov	r3, r1
 8000e40:	4610      	mov	r0, r2
 8000e42:	4619      	mov	r1, r3
 8000e44:	f7ff fdf6 	bl	8000a34 <__aeabi_d2f>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	4a22      	ldr	r2, [pc, #136]	@ (8000ed4 <Auto_Angle+0xdc>)
 8000e4c:	6013      	str	r3, [r2, #0]
        Droite(BASE_SPEED, htim3);
 8000e4e:	6839      	ldr	r1, [r7, #0]
 8000e50:	f44f 70e1 	mov.w	r0, #450	@ 0x1c2
 8000e54:	f000 f9d8 	bl	8001208 <Droite>
 8000e58:	e00e      	b.n	8000e78 <Auto_Angle+0x80>
    } else {
    	turning_time /= (360.0 * COUNTER_CLW_FACTOR);
 8000e5a:	4b1e      	ldr	r3, [pc, #120]	@ (8000ed4 <Auto_Angle+0xdc>)
 8000e5c:	ed93 7a00 	vldr	s14, [r3]
 8000e60:	eddf 6a1d 	vldr	s13, [pc, #116]	@ 8000ed8 <Auto_Angle+0xe0>
 8000e64:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000e68:	4b1a      	ldr	r3, [pc, #104]	@ (8000ed4 <Auto_Angle+0xdc>)
 8000e6a:	edc3 7a00 	vstr	s15, [r3]
    	Gauche(BASE_SPEED, htim3);
 8000e6e:	6839      	ldr	r1, [r7, #0]
 8000e70:	f44f 70e1 	mov.w	r0, #450	@ 0x1c2
 8000e74:	f000 fa00 	bl	8001278 <Gauche>
    }

    // Convert turning time in µs
    //turning_time = 20;
    turning_time *= 1e6;
 8000e78:	4b16      	ldr	r3, [pc, #88]	@ (8000ed4 <Auto_Angle+0xdc>)
 8000e7a:	edd3 7a00 	vldr	s15, [r3]
 8000e7e:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8000edc <Auto_Angle+0xe4>
 8000e82:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000e86:	4b13      	ldr	r3, [pc, #76]	@ (8000ed4 <Auto_Angle+0xdc>)
 8000e88:	edc3 7a00 	vstr	s15, [r3]

    // Delay for calculated turning time
    HAL_TIM_Base_Start_IT(&htim7);
 8000e8c:	4814      	ldr	r0, [pc, #80]	@ (8000ee0 <Auto_Angle+0xe8>)
 8000e8e:	f003 fb79 	bl	8004584 <HAL_TIM_Base_Start_IT>
    while(timer_count < (int)turning_time) {
 8000e92:	bf00      	nop
 8000e94:	4b0f      	ldr	r3, [pc, #60]	@ (8000ed4 <Auto_Angle+0xdc>)
 8000e96:	edd3 7a00 	vldr	s15, [r3]
 8000e9a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000e9e:	ee17 2a90 	vmov	r2, s15
 8000ea2:	4b10      	ldr	r3, [pc, #64]	@ (8000ee4 <Auto_Angle+0xec>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	429a      	cmp	r2, r3
 8000ea8:	dcf4      	bgt.n	8000e94 <Auto_Angle+0x9c>
    	// Wait
    }
    HAL_TIM_Base_Stop_IT(&htim7);
 8000eaa:	480d      	ldr	r0, [pc, #52]	@ (8000ee0 <Auto_Angle+0xe8>)
 8000eac:	f003 fbda 	bl	8004664 <HAL_TIM_Base_Stop_IT>

    // Reset temporal counter
    timer_count = 0;
 8000eb0:	4b0c      	ldr	r3, [pc, #48]	@ (8000ee4 <Auto_Angle+0xec>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	601a      	str	r2, [r3, #0]

    // Stop the motors
    Stop(htim3);
 8000eb6:	6838      	ldr	r0, [r7, #0]
 8000eb8:	f000 fa4e 	bl	8001358 <Stop>
}
 8000ebc:	bf00      	nop
 8000ebe:	3708      	adds	r7, #8
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	f3af 8000 	nop.w
 8000ec8:	b020c49b 	.word	0xb020c49b
 8000ecc:	40d2cab2 	.word	0x40d2cab2
 8000ed0:	43880000 	.word	0x43880000
 8000ed4:	20000044 	.word	0x20000044
 8000ed8:	468ca000 	.word	0x468ca000
 8000edc:	49742400 	.word	0x49742400
 8000ee0:	2000012c 	.word	0x2000012c
 8000ee4:	20000040 	.word	0x20000040

08000ee8 <Auto_Line>:

void Auto_Line(int dist, int min_speed, int max_speed, TIM_HandleTypeDef* htim3) {
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b08c      	sub	sp, #48	@ 0x30
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	60f8      	str	r0, [r7, #12]
 8000ef0:	60b9      	str	r1, [r7, #8]
 8000ef2:	607a      	str	r2, [r7, #4]
 8000ef4:	603b      	str	r3, [r7, #0]
    // Calculate total steps required
    int total_steps = (int)(dist / TRACK_RESOLUTION);
 8000ef6:	68f8      	ldr	r0, [r7, #12]
 8000ef8:	f7ff fad8 	bl	80004ac <__aeabi_i2d>
 8000efc:	f04f 0200 	mov.w	r2, #0
 8000f00:	4b4b      	ldr	r3, [pc, #300]	@ (8001030 <Auto_Line+0x148>)
 8000f02:	f7ff fc67 	bl	80007d4 <__aeabi_ddiv>
 8000f06:	4602      	mov	r2, r0
 8000f08:	460b      	mov	r3, r1
 8000f0a:	4610      	mov	r0, r2
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	f7ff fd49 	bl	80009a4 <__aeabi_d2iz>
 8000f12:	4603      	mov	r3, r0
 8000f14:	623b      	str	r3, [r7, #32]

    // Split into acceleration, constant speed, and deceleration
    int accel_steps = 2 * (total_steps / 5);
 8000f16:	6a3b      	ldr	r3, [r7, #32]
 8000f18:	4a46      	ldr	r2, [pc, #280]	@ (8001034 <Auto_Line+0x14c>)
 8000f1a:	fb82 1203 	smull	r1, r2, r2, r3
 8000f1e:	1052      	asrs	r2, r2, #1
 8000f20:	17db      	asrs	r3, r3, #31
 8000f22:	1ad3      	subs	r3, r2, r3
 8000f24:	005b      	lsls	r3, r3, #1
 8000f26:	61fb      	str	r3, [r7, #28]
    int decel_steps = accel_steps;
 8000f28:	69fb      	ldr	r3, [r7, #28]
 8000f2a:	61bb      	str	r3, [r7, #24]
    int mid_steps = total_steps - accel_steps - decel_steps;
 8000f2c:	6a3a      	ldr	r2, [r7, #32]
 8000f2e:	69fb      	ldr	r3, [r7, #28]
 8000f30:	1ad2      	subs	r2, r2, r3
 8000f32:	69bb      	ldr	r3, [r7, #24]
 8000f34:	1ad3      	subs	r3, r2, r3
 8000f36:	617b      	str	r3, [r7, #20]

    // Initialize speed
    int current_speed = min_speed;
 8000f38:	68bb      	ldr	r3, [r7, #8]
 8000f3a:	613b      	str	r3, [r7, #16]

    // Acceleration phase
    for (int step = 0; step < accel_steps; step++) {
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000f40:	e022      	b.n	8000f88 <Auto_Line+0xa0>
        current_speed = min_speed + (max_speed - min_speed) * step / accel_steps;
 8000f42:	687a      	ldr	r2, [r7, #4]
 8000f44:	68bb      	ldr	r3, [r7, #8]
 8000f46:	1ad3      	subs	r3, r2, r3
 8000f48:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000f4a:	fb03 f202 	mul.w	r2, r3, r2
 8000f4e:	69fb      	ldr	r3, [r7, #28]
 8000f50:	fb92 f3f3 	sdiv	r3, r2, r3
 8000f54:	68ba      	ldr	r2, [r7, #8]
 8000f56:	4413      	add	r3, r2
 8000f58:	613b      	str	r3, [r7, #16]
        Avancer(current_speed, htim3);
 8000f5a:	6839      	ldr	r1, [r7, #0]
 8000f5c:	6938      	ldr	r0, [r7, #16]
 8000f5e:	f000 f91b 	bl	8001198 <Avancer>
        HAL_TIM_Base_Start_IT(&htim7);
 8000f62:	4835      	ldr	r0, [pc, #212]	@ (8001038 <Auto_Line+0x150>)
 8000f64:	f003 fb0e 	bl	8004584 <HAL_TIM_Base_Start_IT>
        while(timer_count < UPDATE_INTERVAL * 1e3) {
 8000f68:	bf00      	nop
 8000f6a:	4b34      	ldr	r3, [pc, #208]	@ (800103c <Auto_Line+0x154>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	f24c 324f 	movw	r2, #49999	@ 0xc34f
 8000f72:	4293      	cmp	r3, r2
 8000f74:	ddf9      	ble.n	8000f6a <Auto_Line+0x82>
        	// Wait for update interval
        }
        HAL_TIM_Base_Stop_IT(&htim7);
 8000f76:	4830      	ldr	r0, [pc, #192]	@ (8001038 <Auto_Line+0x150>)
 8000f78:	f003 fb74 	bl	8004664 <HAL_TIM_Base_Stop_IT>
        timer_count = 0;
 8000f7c:	4b2f      	ldr	r3, [pc, #188]	@ (800103c <Auto_Line+0x154>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	601a      	str	r2, [r3, #0]
    for (int step = 0; step < accel_steps; step++) {
 8000f82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000f84:	3301      	adds	r3, #1
 8000f86:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000f88:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000f8a:	69fb      	ldr	r3, [r7, #28]
 8000f8c:	429a      	cmp	r2, r3
 8000f8e:	dbd8      	blt.n	8000f42 <Auto_Line+0x5a>
    }

    // Constant speed phase
    for (int step = 0; step < mid_steps; step++) {
 8000f90:	2300      	movs	r3, #0
 8000f92:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000f94:	e016      	b.n	8000fc4 <Auto_Line+0xdc>
    	Avancer(max_speed, htim3);
 8000f96:	6839      	ldr	r1, [r7, #0]
 8000f98:	6878      	ldr	r0, [r7, #4]
 8000f9a:	f000 f8fd 	bl	8001198 <Avancer>
    	HAL_TIM_Base_Start_IT(&htim7);
 8000f9e:	4826      	ldr	r0, [pc, #152]	@ (8001038 <Auto_Line+0x150>)
 8000fa0:	f003 faf0 	bl	8004584 <HAL_TIM_Base_Start_IT>
    	while(timer_count < UPDATE_INTERVAL * 1e3) {
 8000fa4:	bf00      	nop
 8000fa6:	4b25      	ldr	r3, [pc, #148]	@ (800103c <Auto_Line+0x154>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	f24c 324f 	movw	r2, #49999	@ 0xc34f
 8000fae:	4293      	cmp	r3, r2
 8000fb0:	ddf9      	ble.n	8000fa6 <Auto_Line+0xbe>
    		// Wait for update interval
    	}
    	HAL_TIM_Base_Stop_IT(&htim7);
 8000fb2:	4821      	ldr	r0, [pc, #132]	@ (8001038 <Auto_Line+0x150>)
 8000fb4:	f003 fb56 	bl	8004664 <HAL_TIM_Base_Stop_IT>
    	timer_count = 0;
 8000fb8:	4b20      	ldr	r3, [pc, #128]	@ (800103c <Auto_Line+0x154>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	601a      	str	r2, [r3, #0]
    for (int step = 0; step < mid_steps; step++) {
 8000fbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000fc0:	3301      	adds	r3, #1
 8000fc2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000fc4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000fc6:	697b      	ldr	r3, [r7, #20]
 8000fc8:	429a      	cmp	r2, r3
 8000fca:	dbe4      	blt.n	8000f96 <Auto_Line+0xae>
    }

    // Deceleration phase
    for (int step = 0; step < decel_steps; step++) {
 8000fcc:	2300      	movs	r3, #0
 8000fce:	627b      	str	r3, [r7, #36]	@ 0x24
 8000fd0:	e022      	b.n	8001018 <Auto_Line+0x130>
        current_speed = max_speed - (max_speed - min_speed) * step / decel_steps;
 8000fd2:	687a      	ldr	r2, [r7, #4]
 8000fd4:	68bb      	ldr	r3, [r7, #8]
 8000fd6:	1ad3      	subs	r3, r2, r3
 8000fd8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000fda:	fb03 f202 	mul.w	r2, r3, r2
 8000fde:	69bb      	ldr	r3, [r7, #24]
 8000fe0:	fb92 f3f3 	sdiv	r3, r2, r3
 8000fe4:	687a      	ldr	r2, [r7, #4]
 8000fe6:	1ad3      	subs	r3, r2, r3
 8000fe8:	613b      	str	r3, [r7, #16]
        Avancer(current_speed, htim3);
 8000fea:	6839      	ldr	r1, [r7, #0]
 8000fec:	6938      	ldr	r0, [r7, #16]
 8000fee:	f000 f8d3 	bl	8001198 <Avancer>
        HAL_TIM_Base_Start_IT(&htim7);
 8000ff2:	4811      	ldr	r0, [pc, #68]	@ (8001038 <Auto_Line+0x150>)
 8000ff4:	f003 fac6 	bl	8004584 <HAL_TIM_Base_Start_IT>
        while(timer_count < UPDATE_INTERVAL * 1e3) {
 8000ff8:	bf00      	nop
 8000ffa:	4b10      	ldr	r3, [pc, #64]	@ (800103c <Auto_Line+0x154>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	f24c 324f 	movw	r2, #49999	@ 0xc34f
 8001002:	4293      	cmp	r3, r2
 8001004:	ddf9      	ble.n	8000ffa <Auto_Line+0x112>
        	// Wait for update interval
        }
        HAL_TIM_Base_Stop_IT(&htim7);
 8001006:	480c      	ldr	r0, [pc, #48]	@ (8001038 <Auto_Line+0x150>)
 8001008:	f003 fb2c 	bl	8004664 <HAL_TIM_Base_Stop_IT>
        timer_count = 0;
 800100c:	4b0b      	ldr	r3, [pc, #44]	@ (800103c <Auto_Line+0x154>)
 800100e:	2200      	movs	r2, #0
 8001010:	601a      	str	r2, [r3, #0]
    for (int step = 0; step < decel_steps; step++) {
 8001012:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001014:	3301      	adds	r3, #1
 8001016:	627b      	str	r3, [r7, #36]	@ 0x24
 8001018:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800101a:	69bb      	ldr	r3, [r7, #24]
 800101c:	429a      	cmp	r2, r3
 800101e:	dbd8      	blt.n	8000fd2 <Auto_Line+0xea>
    }

    // Stop the robot
    Stop(htim3);
 8001020:	6838      	ldr	r0, [r7, #0]
 8001022:	f000 f999 	bl	8001358 <Stop>
}
 8001026:	bf00      	nop
 8001028:	3730      	adds	r7, #48	@ 0x30
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	401a0000 	.word	0x401a0000
 8001034:	66666667 	.word	0x66666667
 8001038:	2000012c 	.word	0x2000012c
 800103c:	20000040 	.word	0x20000040

08001040 <Auto_Circle>:

void Auto_Circle(TIM_HandleTypeDef* htim3) {
 8001040:	b580      	push	{r7, lr}
 8001042:	b086      	sub	sp, #24
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
	// Calculate total steps required
	int total_steps = (int)((PI * DISTANCE) / TRACK_RESOLUTION);
 8001048:	f240 13e3 	movw	r3, #483	@ 0x1e3
 800104c:	613b      	str	r3, [r7, #16]

	// Calculate wheel inner wheel ratio
	float ratio = 0.9 * ((int)((2 * PI * ((DISTANCE * 0.5) - TRACK_WIDTH)) / TRACK_RESOLUTION) / total_steps);
 800104e:	22dc      	movs	r2, #220	@ 0xdc
 8001050:	693b      	ldr	r3, [r7, #16]
 8001052:	fb92 f3f3 	sdiv	r3, r2, r3
 8001056:	4618      	mov	r0, r3
 8001058:	f7ff fa28 	bl	80004ac <__aeabi_i2d>
 800105c:	a328      	add	r3, pc, #160	@ (adr r3, 8001100 <Auto_Circle+0xc0>)
 800105e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001062:	f7ff fa8d 	bl	8000580 <__aeabi_dmul>
 8001066:	4602      	mov	r2, r0
 8001068:	460b      	mov	r3, r1
 800106a:	4610      	mov	r0, r2
 800106c:	4619      	mov	r1, r3
 800106e:	f7ff fce1 	bl	8000a34 <__aeabi_d2f>
 8001072:	4603      	mov	r3, r0
 8001074:	60fb      	str	r3, [r7, #12]

	// Constant speed phase
	for (int step = 0; step < total_steps; step++) {
 8001076:	2300      	movs	r3, #0
 8001078:	617b      	str	r3, [r7, #20]
 800107a:	e031      	b.n	80010e0 <Auto_Circle+0xa0>
		htim3->Instance -> CCR2 = 0;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	2200      	movs	r2, #0
 8001082:	639a      	str	r2, [r3, #56]	@ 0x38
		htim3->Instance -> CCR4 = 0;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	2200      	movs	r2, #0
 800108a:	641a      	str	r2, [r3, #64]	@ 0x40
		htim3->Instance -> CCR1 = BASE_SPEED;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	f44f 72e1 	mov.w	r2, #450	@ 0x1c2
 8001094:	635a      	str	r2, [r3, #52]	@ 0x34
		htim3->Instance -> CCR3 = htim3->Instance -> CCR1 * ratio;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800109c:	ee07 3a90 	vmov	s15, r3
 80010a0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80010a4:	edd7 7a03 	vldr	s15, [r7, #12]
 80010a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80010b4:	ee17 2a90 	vmov	r2, s15
 80010b8:	63da      	str	r2, [r3, #60]	@ 0x3c
		HAL_TIM_Base_Start_IT(&htim7);
 80010ba:	480f      	ldr	r0, [pc, #60]	@ (80010f8 <Auto_Circle+0xb8>)
 80010bc:	f003 fa62 	bl	8004584 <HAL_TIM_Base_Start_IT>
		while(timer_count < UPDATE_INTERVAL * 1e3) {
 80010c0:	bf00      	nop
 80010c2:	4b0e      	ldr	r3, [pc, #56]	@ (80010fc <Auto_Circle+0xbc>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	f24c 324f 	movw	r2, #49999	@ 0xc34f
 80010ca:	4293      	cmp	r3, r2
 80010cc:	ddf9      	ble.n	80010c2 <Auto_Circle+0x82>
			// Wait for update interval
	    }
	    HAL_TIM_Base_Stop_IT(&htim7);
 80010ce:	480a      	ldr	r0, [pc, #40]	@ (80010f8 <Auto_Circle+0xb8>)
 80010d0:	f003 fac8 	bl	8004664 <HAL_TIM_Base_Stop_IT>
	    timer_count = 0;
 80010d4:	4b09      	ldr	r3, [pc, #36]	@ (80010fc <Auto_Circle+0xbc>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	601a      	str	r2, [r3, #0]
	for (int step = 0; step < total_steps; step++) {
 80010da:	697b      	ldr	r3, [r7, #20]
 80010dc:	3301      	adds	r3, #1
 80010de:	617b      	str	r3, [r7, #20]
 80010e0:	697a      	ldr	r2, [r7, #20]
 80010e2:	693b      	ldr	r3, [r7, #16]
 80010e4:	429a      	cmp	r2, r3
 80010e6:	dbc9      	blt.n	800107c <Auto_Circle+0x3c>
	}

	// Stop the robot
	Stop(htim3);
 80010e8:	6878      	ldr	r0, [r7, #4]
 80010ea:	f000 f935 	bl	8001358 <Stop>
}
 80010ee:	bf00      	nop
 80010f0:	3718      	adds	r7, #24
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	2000012c 	.word	0x2000012c
 80010fc:	20000040 	.word	0x20000040
 8001100:	cccccccd 	.word	0xcccccccd
 8001104:	3feccccc 	.word	0x3feccccc

08001108 <Auto_Back_Forth>:

void Auto_Back_Forth(TIM_HandleTypeDef* htim3) {
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
    // Move forward 1 meter
    Auto_Line(DISTANCE, BASE_SPEED, BASE_SPEED, htim3);
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	f44f 72e1 	mov.w	r2, #450	@ 0x1c2
 8001116:	f44f 71e1 	mov.w	r1, #450	@ 0x1c2
 800111a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800111e:	f7ff fee3 	bl	8000ee8 <Auto_Line>

    // Turn 180 degrees
    Auto_Angle(180.0, htim3);
 8001122:	6878      	ldr	r0, [r7, #4]
 8001124:	ed9f 0a0a 	vldr	s0, [pc, #40]	@ 8001150 <Auto_Back_Forth+0x48>
 8001128:	f7ff fe66 	bl	8000df8 <Auto_Angle>

    // Move backward 1 meter
    Auto_Line(DISTANCE, BASE_SPEED, BASE_SPEED, htim3);
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	f44f 72e1 	mov.w	r2, #450	@ 0x1c2
 8001132:	f44f 71e1 	mov.w	r1, #450	@ 0x1c2
 8001136:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800113a:	f7ff fed5 	bl	8000ee8 <Auto_Line>

    // Turn 180 degrees again to face the original direction
    Auto_Angle(180.0, htim3);
 800113e:	6878      	ldr	r0, [r7, #4]
 8001140:	ed9f 0a03 	vldr	s0, [pc, #12]	@ 8001150 <Auto_Back_Forth+0x48>
 8001144:	f7ff fe58 	bl	8000df8 <Auto_Angle>
}
 8001148:	bf00      	nop
 800114a:	3708      	adds	r7, #8
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	43340000 	.word	0x43340000

08001154 <Auto_Square>:

void Auto_Square(TIM_HandleTypeDef* htim3) {
 8001154:	b580      	push	{r7, lr}
 8001156:	b084      	sub	sp, #16
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
    // Move forward and turn 90 degrees four times
    for (int i = 0; i < 4; i++) {
 800115c:	2300      	movs	r3, #0
 800115e:	60fb      	str	r3, [r7, #12]
 8001160:	e00f      	b.n	8001182 <Auto_Square+0x2e>
        Auto_Line(DISTANCE, (BASE_SPEED * 0.333), BASE_SPEED, htim3);
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	f44f 72e1 	mov.w	r2, #450	@ 0x1c2
 8001168:	2195      	movs	r1, #149	@ 0x95
 800116a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800116e:	f7ff febb 	bl	8000ee8 <Auto_Line>
        Auto_Angle(90.0, htim3);
 8001172:	6878      	ldr	r0, [r7, #4]
 8001174:	ed9f 0a07 	vldr	s0, [pc, #28]	@ 8001194 <Auto_Square+0x40>
 8001178:	f7ff fe3e 	bl	8000df8 <Auto_Angle>
    for (int i = 0; i < 4; i++) {
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	3301      	adds	r3, #1
 8001180:	60fb      	str	r3, [r7, #12]
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	2b03      	cmp	r3, #3
 8001186:	ddec      	ble.n	8001162 <Auto_Square+0xe>
    }
}
 8001188:	bf00      	nop
 800118a:	bf00      	nop
 800118c:	3710      	adds	r7, #16
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	42b40000 	.word	0x42b40000

08001198 <Avancer>:
 *      Author: sebas
 */

#include "gestion_moteurs.h"

void Avancer(int Pulse, TIM_HandleTypeDef* htim3){
 8001198:	b590      	push	{r4, r7, lr}
 800119a:	b083      	sub	sp, #12
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
 80011a0:	6039      	str	r1, [r7, #0]

	htim3->Instance -> CCR2 = 0;
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	2200      	movs	r2, #0
 80011a8:	639a      	str	r2, [r3, #56]	@ 0x38
	htim3->Instance -> CCR4 = 0;
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	2200      	movs	r2, #0
 80011b0:	641a      	str	r2, [r3, #64]	@ 0x40

	if(Pulse > 499){
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80011b8:	db02      	blt.n	80011c0 <Avancer+0x28>
		Pulse = 499;
 80011ba:	f240 13f3 	movw	r3, #499	@ 0x1f3
 80011be:	607b      	str	r3, [r7, #4]
	}

	htim3->Instance -> CCR1 = Pulse;
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	687a      	ldr	r2, [r7, #4]
 80011c6:	635a      	str	r2, [r3, #52]	@ 0x34
	htim3->Instance -> CCR3 = htim3->Instance -> CCR1 * 0.9;
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80011ce:	4618      	mov	r0, r3
 80011d0:	f7ff f95c 	bl	800048c <__aeabi_ui2d>
 80011d4:	a30a      	add	r3, pc, #40	@ (adr r3, 8001200 <Avancer+0x68>)
 80011d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011da:	f7ff f9d1 	bl	8000580 <__aeabi_dmul>
 80011de:	4602      	mov	r2, r0
 80011e0:	460b      	mov	r3, r1
 80011e2:	4610      	mov	r0, r2
 80011e4:	4619      	mov	r1, r3
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	681c      	ldr	r4, [r3, #0]
 80011ea:	f7ff fc03 	bl	80009f4 <__aeabi_d2uiz>
 80011ee:	4603      	mov	r3, r0
 80011f0:	63e3      	str	r3, [r4, #60]	@ 0x3c

	return;
 80011f2:	bf00      	nop
}
 80011f4:	370c      	adds	r7, #12
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd90      	pop	{r4, r7, pc}
 80011fa:	bf00      	nop
 80011fc:	f3af 8000 	nop.w
 8001200:	cccccccd 	.word	0xcccccccd
 8001204:	3feccccc 	.word	0x3feccccc

08001208 <Droite>:

void Droite(int Pulse, TIM_HandleTypeDef* htim3){
 8001208:	b590      	push	{r4, r7, lr}
 800120a:	b083      	sub	sp, #12
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
 8001210:	6039      	str	r1, [r7, #0]

	htim3->Instance -> CCR2 = 0;
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	2200      	movs	r2, #0
 8001218:	639a      	str	r2, [r3, #56]	@ 0x38
	htim3->Instance -> CCR3 = 0;
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	2200      	movs	r2, #0
 8001220:	63da      	str	r2, [r3, #60]	@ 0x3c

	if(Pulse > 499){
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001228:	db02      	blt.n	8001230 <Droite+0x28>
		Pulse = 499;
 800122a:	f240 13f3 	movw	r3, #499	@ 0x1f3
 800122e:	607b      	str	r3, [r7, #4]
	}
	htim3->Instance -> CCR1 = Pulse;
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	687a      	ldr	r2, [r7, #4]
 8001236:	635a      	str	r2, [r3, #52]	@ 0x34
	htim3->Instance -> CCR4 = htim3->Instance -> CCR1 * 0.9;
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800123e:	4618      	mov	r0, r3
 8001240:	f7ff f924 	bl	800048c <__aeabi_ui2d>
 8001244:	a30a      	add	r3, pc, #40	@ (adr r3, 8001270 <Droite+0x68>)
 8001246:	e9d3 2300 	ldrd	r2, r3, [r3]
 800124a:	f7ff f999 	bl	8000580 <__aeabi_dmul>
 800124e:	4602      	mov	r2, r0
 8001250:	460b      	mov	r3, r1
 8001252:	4610      	mov	r0, r2
 8001254:	4619      	mov	r1, r3
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	681c      	ldr	r4, [r3, #0]
 800125a:	f7ff fbcb 	bl	80009f4 <__aeabi_d2uiz>
 800125e:	4603      	mov	r3, r0
 8001260:	6423      	str	r3, [r4, #64]	@ 0x40
}
 8001262:	bf00      	nop
 8001264:	370c      	adds	r7, #12
 8001266:	46bd      	mov	sp, r7
 8001268:	bd90      	pop	{r4, r7, pc}
 800126a:	bf00      	nop
 800126c:	f3af 8000 	nop.w
 8001270:	cccccccd 	.word	0xcccccccd
 8001274:	3feccccc 	.word	0x3feccccc

08001278 <Gauche>:

void Gauche(int Pulse, TIM_HandleTypeDef* htim3){
 8001278:	b590      	push	{r4, r7, lr}
 800127a:	b083      	sub	sp, #12
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
 8001280:	6039      	str	r1, [r7, #0]

	htim3->Instance -> CCR1 = 0;
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	2200      	movs	r2, #0
 8001288:	635a      	str	r2, [r3, #52]	@ 0x34
	htim3->Instance -> CCR4 = 0;
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	2200      	movs	r2, #0
 8001290:	641a      	str	r2, [r3, #64]	@ 0x40

	if(Pulse > 499){
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001298:	db02      	blt.n	80012a0 <Gauche+0x28>
		Pulse = 499;
 800129a:	f240 13f3 	movw	r3, #499	@ 0x1f3
 800129e:	607b      	str	r3, [r7, #4]
	}
	htim3->Instance -> CCR2 = Pulse;
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	687a      	ldr	r2, [r7, #4]
 80012a6:	639a      	str	r2, [r3, #56]	@ 0x38
	htim3->Instance -> CCR3 = htim3->Instance -> CCR2 * 0.9;
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80012ae:	4618      	mov	r0, r3
 80012b0:	f7ff f8ec 	bl	800048c <__aeabi_ui2d>
 80012b4:	a30a      	add	r3, pc, #40	@ (adr r3, 80012e0 <Gauche+0x68>)
 80012b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012ba:	f7ff f961 	bl	8000580 <__aeabi_dmul>
 80012be:	4602      	mov	r2, r0
 80012c0:	460b      	mov	r3, r1
 80012c2:	4610      	mov	r0, r2
 80012c4:	4619      	mov	r1, r3
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	681c      	ldr	r4, [r3, #0]
 80012ca:	f7ff fb93 	bl	80009f4 <__aeabi_d2uiz>
 80012ce:	4603      	mov	r3, r0
 80012d0:	63e3      	str	r3, [r4, #60]	@ 0x3c
}
 80012d2:	bf00      	nop
 80012d4:	370c      	adds	r7, #12
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd90      	pop	{r4, r7, pc}
 80012da:	bf00      	nop
 80012dc:	f3af 8000 	nop.w
 80012e0:	cccccccd 	.word	0xcccccccd
 80012e4:	3feccccc 	.word	0x3feccccc

080012e8 <Reculer>:

void Reculer(int Pulse,TIM_HandleTypeDef* htim3){
 80012e8:	b590      	push	{r4, r7, lr}
 80012ea:	b083      	sub	sp, #12
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
 80012f0:	6039      	str	r1, [r7, #0]

	htim3->Instance -> CCR1 = 0;
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	2200      	movs	r2, #0
 80012f8:	635a      	str	r2, [r3, #52]	@ 0x34
	htim3->Instance -> CCR3 = 0;
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	2200      	movs	r2, #0
 8001300:	63da      	str	r2, [r3, #60]	@ 0x3c

	if(Pulse > 499){
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001308:	db02      	blt.n	8001310 <Reculer+0x28>
		Pulse = 499;
 800130a:	f240 13f3 	movw	r3, #499	@ 0x1f3
 800130e:	607b      	str	r3, [r7, #4]
	}

	htim3->Instance -> CCR4 = Pulse;
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	687a      	ldr	r2, [r7, #4]
 8001316:	641a      	str	r2, [r3, #64]	@ 0x40
	htim3->Instance -> CCR2 = htim3->Instance -> CCR4 * 0.95;
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800131e:	4618      	mov	r0, r3
 8001320:	f7ff f8b4 	bl	800048c <__aeabi_ui2d>
 8001324:	a30a      	add	r3, pc, #40	@ (adr r3, 8001350 <Reculer+0x68>)
 8001326:	e9d3 2300 	ldrd	r2, r3, [r3]
 800132a:	f7ff f929 	bl	8000580 <__aeabi_dmul>
 800132e:	4602      	mov	r2, r0
 8001330:	460b      	mov	r3, r1
 8001332:	4610      	mov	r0, r2
 8001334:	4619      	mov	r1, r3
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	681c      	ldr	r4, [r3, #0]
 800133a:	f7ff fb5b 	bl	80009f4 <__aeabi_d2uiz>
 800133e:	4603      	mov	r3, r0
 8001340:	63a3      	str	r3, [r4, #56]	@ 0x38

	return;
 8001342:	bf00      	nop
}
 8001344:	370c      	adds	r7, #12
 8001346:	46bd      	mov	sp, r7
 8001348:	bd90      	pop	{r4, r7, pc}
 800134a:	bf00      	nop
 800134c:	f3af 8000 	nop.w
 8001350:	66666666 	.word	0x66666666
 8001354:	3fee6666 	.word	0x3fee6666

08001358 <Stop>:
void Stop(TIM_HandleTypeDef* htim3){
 8001358:	b480      	push	{r7}
 800135a:	b083      	sub	sp, #12
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
	htim3->Instance -> CCR1 = 0;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	2200      	movs	r2, #0
 8001366:	635a      	str	r2, [r3, #52]	@ 0x34
	htim3->Instance -> CCR2 = 0;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	2200      	movs	r2, #0
 800136e:	639a      	str	r2, [r3, #56]	@ 0x38
	htim3->Instance -> CCR3 = 0;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	2200      	movs	r2, #0
 8001376:	63da      	str	r2, [r3, #60]	@ 0x3c
	htim3->Instance -> CCR4 = 0;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	2200      	movs	r2, #0
 800137e:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001380:	bf00      	nop
 8001382:	370c      	adds	r7, #12
 8001384:	46bd      	mov	sp, r7
 8001386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138a:	4770      	bx	lr

0800138c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001390:	f000 ff40 	bl	8002214 <HAL_Init>

  /* USER CODE BEGIN Init */

  Initialisation_manette();
 8001394:	f000 fbd6 	bl	8001b44 <Initialisation_manette>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001398:	f000 f85c 	bl	8001454 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800139c:	f000 fa22 	bl	80017e4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80013a0:	f000 f9f6 	bl	8001790 <MX_USART2_UART_Init>
  MX_TIM6_Init();
 80013a4:	f000 f98a 	bl	80016bc <MX_TIM6_Init>
  MX_TIM3_Init();
 80013a8:	f000 f8f0 	bl	800158c <MX_TIM3_Init>
  MX_TIM7_Init();
 80013ac:	f000 f9bc 	bl	8001728 <MX_TIM7_Init>
  MX_I2C1_Init();
 80013b0:	f000 f8be 	bl	8001530 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim6);
 80013b4:	4824      	ldr	r0, [pc, #144]	@ (8001448 <main+0xbc>)
 80013b6:	f003 f8e5 	bl	8004584 <HAL_TIM_Base_Start_IT>

  if (HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1) != HAL_OK)
 80013ba:	2100      	movs	r1, #0
 80013bc:	4823      	ldr	r0, [pc, #140]	@ (800144c <main+0xc0>)
 80013be:	f003 f9d9 	bl	8004774 <HAL_TIM_PWM_Start>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d001      	beq.n	80013cc <main+0x40>
  {
      Error_Handler();
 80013c8:	f000 fb70 	bl	8001aac <Error_Handler>
  }

  if (HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2) != HAL_OK)
 80013cc:	2104      	movs	r1, #4
 80013ce:	481f      	ldr	r0, [pc, #124]	@ (800144c <main+0xc0>)
 80013d0:	f003 f9d0 	bl	8004774 <HAL_TIM_PWM_Start>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d001      	beq.n	80013de <main+0x52>
  {
      Error_Handler();
 80013da:	f000 fb67 	bl	8001aac <Error_Handler>
  }

  if (HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3) != HAL_OK)
 80013de:	2108      	movs	r1, #8
 80013e0:	481a      	ldr	r0, [pc, #104]	@ (800144c <main+0xc0>)
 80013e2:	f003 f9c7 	bl	8004774 <HAL_TIM_PWM_Start>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d001      	beq.n	80013f0 <main+0x64>
  {
      Error_Handler();
 80013ec:	f000 fb5e 	bl	8001aac <Error_Handler>
  }

  if (HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4) != HAL_OK)
 80013f0:	210c      	movs	r1, #12
 80013f2:	4816      	ldr	r0, [pc, #88]	@ (800144c <main+0xc0>)
 80013f4:	f003 f9be 	bl	8004774 <HAL_TIM_PWM_Start>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d001      	beq.n	8001402 <main+0x76>
  {
      Error_Handler();
 80013fe:	f000 fb55 	bl	8001aac <Error_Handler>
  {

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	if(curr_mode != MANUAL_MODE) { 	// Toggle auto mode
 8001402:	4b13      	ldr	r3, [pc, #76]	@ (8001450 <main+0xc4>)
 8001404:	781b      	ldrb	r3, [r3, #0]
 8001406:	2b00      	cmp	r3, #0
 8001408:	d01b      	beq.n	8001442 <main+0xb6>
		switch(curr_mode) {
 800140a:	4b11      	ldr	r3, [pc, #68]	@ (8001450 <main+0xc4>)
 800140c:	781b      	ldrb	r3, [r3, #0]
 800140e:	2b03      	cmp	r3, #3
 8001410:	d00e      	beq.n	8001430 <main+0xa4>
 8001412:	2b03      	cmp	r3, #3
 8001414:	dc10      	bgt.n	8001438 <main+0xac>
 8001416:	2b01      	cmp	r3, #1
 8001418:	d002      	beq.n	8001420 <main+0x94>
 800141a:	2b02      	cmp	r3, #2
 800141c:	d004      	beq.n	8001428 <main+0x9c>
				break;
			case SQUARE_MODE:
				Auto_Square(&htim3);
				break;
			default:
				break;
 800141e:	e00b      	b.n	8001438 <main+0xac>
				Auto_Circle(&htim3);
 8001420:	480a      	ldr	r0, [pc, #40]	@ (800144c <main+0xc0>)
 8001422:	f7ff fe0d 	bl	8001040 <Auto_Circle>
				break;
 8001426:	e008      	b.n	800143a <main+0xae>
				Auto_Back_Forth(&htim3);
 8001428:	4808      	ldr	r0, [pc, #32]	@ (800144c <main+0xc0>)
 800142a:	f7ff fe6d 	bl	8001108 <Auto_Back_Forth>
				break;
 800142e:	e004      	b.n	800143a <main+0xae>
				Auto_Square(&htim3);
 8001430:	4806      	ldr	r0, [pc, #24]	@ (800144c <main+0xc0>)
 8001432:	f7ff fe8f 	bl	8001154 <Auto_Square>
				break;
 8001436:	e000      	b.n	800143a <main+0xae>
				break;
 8001438:	bf00      	nop
		}
		curr_mode = MANUAL_MODE;	// Return to manual mode after drawing shape
 800143a:	4b05      	ldr	r3, [pc, #20]	@ (8001450 <main+0xc4>)
 800143c:	2200      	movs	r2, #0
 800143e:	701a      	strb	r2, [r3, #0]
 8001440:	e7df      	b.n	8001402 <main+0x76>
	}

	else { 	// Manual mode

		controleRednek();
 8001442:	f000 fba1 	bl	8001b88 <controleRednek>
	if(curr_mode != MANUAL_MODE) { 	// Toggle auto mode
 8001446:	e7dc      	b.n	8001402 <main+0x76>
 8001448:	200000e4 	.word	0x200000e4
 800144c:	2000009c 	.word	0x2000009c
 8001450:	2000003e 	.word	0x2000003e

08001454 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b094      	sub	sp, #80	@ 0x50
 8001458:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800145a:	f107 031c 	add.w	r3, r7, #28
 800145e:	2234      	movs	r2, #52	@ 0x34
 8001460:	2100      	movs	r1, #0
 8001462:	4618      	mov	r0, r3
 8001464:	f004 fb60 	bl	8005b28 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001468:	f107 0308 	add.w	r3, r7, #8
 800146c:	2200      	movs	r2, #0
 800146e:	601a      	str	r2, [r3, #0]
 8001470:	605a      	str	r2, [r3, #4]
 8001472:	609a      	str	r2, [r3, #8]
 8001474:	60da      	str	r2, [r3, #12]
 8001476:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001478:	2300      	movs	r3, #0
 800147a:	607b      	str	r3, [r7, #4]
 800147c:	4b2a      	ldr	r3, [pc, #168]	@ (8001528 <SystemClock_Config+0xd4>)
 800147e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001480:	4a29      	ldr	r2, [pc, #164]	@ (8001528 <SystemClock_Config+0xd4>)
 8001482:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001486:	6413      	str	r3, [r2, #64]	@ 0x40
 8001488:	4b27      	ldr	r3, [pc, #156]	@ (8001528 <SystemClock_Config+0xd4>)
 800148a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800148c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001490:	607b      	str	r3, [r7, #4]
 8001492:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001494:	2300      	movs	r3, #0
 8001496:	603b      	str	r3, [r7, #0]
 8001498:	4b24      	ldr	r3, [pc, #144]	@ (800152c <SystemClock_Config+0xd8>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80014a0:	4a22      	ldr	r2, [pc, #136]	@ (800152c <SystemClock_Config+0xd8>)
 80014a2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80014a6:	6013      	str	r3, [r2, #0]
 80014a8:	4b20      	ldr	r3, [pc, #128]	@ (800152c <SystemClock_Config+0xd8>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80014b0:	603b      	str	r3, [r7, #0]
 80014b2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80014b4:	2302      	movs	r3, #2
 80014b6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014b8:	2301      	movs	r3, #1
 80014ba:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80014bc:	2310      	movs	r3, #16
 80014be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014c0:	2302      	movs	r3, #2
 80014c2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80014c4:	2300      	movs	r3, #0
 80014c6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80014c8:	2310      	movs	r3, #16
 80014ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80014cc:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80014d0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80014d2:	2304      	movs	r3, #4
 80014d4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80014d6:	2302      	movs	r3, #2
 80014d8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80014da:	2302      	movs	r3, #2
 80014dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014de:	f107 031c 	add.w	r3, r7, #28
 80014e2:	4618      	mov	r0, r3
 80014e4:	f002 fd60 	bl	8003fa8 <HAL_RCC_OscConfig>
 80014e8:	4603      	mov	r3, r0
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d001      	beq.n	80014f2 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80014ee:	f000 fadd 	bl	8001aac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014f2:	230f      	movs	r3, #15
 80014f4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014f6:	2302      	movs	r3, #2
 80014f8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014fa:	2300      	movs	r3, #0
 80014fc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80014fe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001502:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001504:	2300      	movs	r3, #0
 8001506:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001508:	f107 0308 	add.w	r3, r7, #8
 800150c:	2102      	movs	r1, #2
 800150e:	4618      	mov	r0, r3
 8001510:	f002 fa00 	bl	8003914 <HAL_RCC_ClockConfig>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	d001      	beq.n	800151e <SystemClock_Config+0xca>
  {
    Error_Handler();
 800151a:	f000 fac7 	bl	8001aac <Error_Handler>
  }
}
 800151e:	bf00      	nop
 8001520:	3750      	adds	r7, #80	@ 0x50
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	40023800 	.word	0x40023800
 800152c:	40007000 	.word	0x40007000

08001530 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001534:	4b12      	ldr	r3, [pc, #72]	@ (8001580 <MX_I2C1_Init+0x50>)
 8001536:	4a13      	ldr	r2, [pc, #76]	@ (8001584 <MX_I2C1_Init+0x54>)
 8001538:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800153a:	4b11      	ldr	r3, [pc, #68]	@ (8001580 <MX_I2C1_Init+0x50>)
 800153c:	4a12      	ldr	r2, [pc, #72]	@ (8001588 <MX_I2C1_Init+0x58>)
 800153e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001540:	4b0f      	ldr	r3, [pc, #60]	@ (8001580 <MX_I2C1_Init+0x50>)
 8001542:	2200      	movs	r2, #0
 8001544:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001546:	4b0e      	ldr	r3, [pc, #56]	@ (8001580 <MX_I2C1_Init+0x50>)
 8001548:	2200      	movs	r2, #0
 800154a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800154c:	4b0c      	ldr	r3, [pc, #48]	@ (8001580 <MX_I2C1_Init+0x50>)
 800154e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001552:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001554:	4b0a      	ldr	r3, [pc, #40]	@ (8001580 <MX_I2C1_Init+0x50>)
 8001556:	2200      	movs	r2, #0
 8001558:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800155a:	4b09      	ldr	r3, [pc, #36]	@ (8001580 <MX_I2C1_Init+0x50>)
 800155c:	2200      	movs	r2, #0
 800155e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001560:	4b07      	ldr	r3, [pc, #28]	@ (8001580 <MX_I2C1_Init+0x50>)
 8001562:	2200      	movs	r2, #0
 8001564:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001566:	4b06      	ldr	r3, [pc, #24]	@ (8001580 <MX_I2C1_Init+0x50>)
 8001568:	2200      	movs	r2, #0
 800156a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800156c:	4804      	ldr	r0, [pc, #16]	@ (8001580 <MX_I2C1_Init+0x50>)
 800156e:	f001 f9d7 	bl	8002920 <HAL_I2C_Init>
 8001572:	4603      	mov	r3, r0
 8001574:	2b00      	cmp	r3, #0
 8001576:	d001      	beq.n	800157c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001578:	f000 fa98 	bl	8001aac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800157c:	bf00      	nop
 800157e:	bd80      	pop	{r7, pc}
 8001580:	20000048 	.word	0x20000048
 8001584:	40005400 	.word	0x40005400
 8001588:	000186a0 	.word	0x000186a0

0800158c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b08e      	sub	sp, #56	@ 0x38
 8001590:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001592:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001596:	2200      	movs	r2, #0
 8001598:	601a      	str	r2, [r3, #0]
 800159a:	605a      	str	r2, [r3, #4]
 800159c:	609a      	str	r2, [r3, #8]
 800159e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015a0:	f107 0320 	add.w	r3, r7, #32
 80015a4:	2200      	movs	r2, #0
 80015a6:	601a      	str	r2, [r3, #0]
 80015a8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80015aa:	1d3b      	adds	r3, r7, #4
 80015ac:	2200      	movs	r2, #0
 80015ae:	601a      	str	r2, [r3, #0]
 80015b0:	605a      	str	r2, [r3, #4]
 80015b2:	609a      	str	r2, [r3, #8]
 80015b4:	60da      	str	r2, [r3, #12]
 80015b6:	611a      	str	r2, [r3, #16]
 80015b8:	615a      	str	r2, [r3, #20]
 80015ba:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80015bc:	4b3d      	ldr	r3, [pc, #244]	@ (80016b4 <MX_TIM3_Init+0x128>)
 80015be:	4a3e      	ldr	r2, [pc, #248]	@ (80016b8 <MX_TIM3_Init+0x12c>)
 80015c0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84-1;
 80015c2:	4b3c      	ldr	r3, [pc, #240]	@ (80016b4 <MX_TIM3_Init+0x128>)
 80015c4:	2253      	movs	r2, #83	@ 0x53
 80015c6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015c8:	4b3a      	ldr	r3, [pc, #232]	@ (80016b4 <MX_TIM3_Init+0x128>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 500-1;
 80015ce:	4b39      	ldr	r3, [pc, #228]	@ (80016b4 <MX_TIM3_Init+0x128>)
 80015d0:	f240 12f3 	movw	r2, #499	@ 0x1f3
 80015d4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015d6:	4b37      	ldr	r3, [pc, #220]	@ (80016b4 <MX_TIM3_Init+0x128>)
 80015d8:	2200      	movs	r2, #0
 80015da:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015dc:	4b35      	ldr	r3, [pc, #212]	@ (80016b4 <MX_TIM3_Init+0x128>)
 80015de:	2200      	movs	r2, #0
 80015e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80015e2:	4834      	ldr	r0, [pc, #208]	@ (80016b4 <MX_TIM3_Init+0x128>)
 80015e4:	f002 ff7e 	bl	80044e4 <HAL_TIM_Base_Init>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d001      	beq.n	80015f2 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80015ee:	f000 fa5d 	bl	8001aac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015f2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80015f6:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80015f8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80015fc:	4619      	mov	r1, r3
 80015fe:	482d      	ldr	r0, [pc, #180]	@ (80016b4 <MX_TIM3_Init+0x128>)
 8001600:	f003 fb32 	bl	8004c68 <HAL_TIM_ConfigClockSource>
 8001604:	4603      	mov	r3, r0
 8001606:	2b00      	cmp	r3, #0
 8001608:	d001      	beq.n	800160e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800160a:	f000 fa4f 	bl	8001aac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800160e:	4829      	ldr	r0, [pc, #164]	@ (80016b4 <MX_TIM3_Init+0x128>)
 8001610:	f003 f857 	bl	80046c2 <HAL_TIM_PWM_Init>
 8001614:	4603      	mov	r3, r0
 8001616:	2b00      	cmp	r3, #0
 8001618:	d001      	beq.n	800161e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800161a:	f000 fa47 	bl	8001aac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800161e:	2300      	movs	r3, #0
 8001620:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001622:	2300      	movs	r3, #0
 8001624:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001626:	f107 0320 	add.w	r3, r7, #32
 800162a:	4619      	mov	r1, r3
 800162c:	4821      	ldr	r0, [pc, #132]	@ (80016b4 <MX_TIM3_Init+0x128>)
 800162e:	f003 ff27 	bl	8005480 <HAL_TIMEx_MasterConfigSynchronization>
 8001632:	4603      	mov	r3, r0
 8001634:	2b00      	cmp	r3, #0
 8001636:	d001      	beq.n	800163c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001638:	f000 fa38 	bl	8001aac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800163c:	2360      	movs	r3, #96	@ 0x60
 800163e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001640:	2300      	movs	r3, #0
 8001642:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001644:	2300      	movs	r3, #0
 8001646:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001648:	2300      	movs	r3, #0
 800164a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800164c:	1d3b      	adds	r3, r7, #4
 800164e:	2200      	movs	r2, #0
 8001650:	4619      	mov	r1, r3
 8001652:	4818      	ldr	r0, [pc, #96]	@ (80016b4 <MX_TIM3_Init+0x128>)
 8001654:	f003 fa46 	bl	8004ae4 <HAL_TIM_PWM_ConfigChannel>
 8001658:	4603      	mov	r3, r0
 800165a:	2b00      	cmp	r3, #0
 800165c:	d001      	beq.n	8001662 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800165e:	f000 fa25 	bl	8001aac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001662:	1d3b      	adds	r3, r7, #4
 8001664:	2204      	movs	r2, #4
 8001666:	4619      	mov	r1, r3
 8001668:	4812      	ldr	r0, [pc, #72]	@ (80016b4 <MX_TIM3_Init+0x128>)
 800166a:	f003 fa3b 	bl	8004ae4 <HAL_TIM_PWM_ConfigChannel>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d001      	beq.n	8001678 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8001674:	f000 fa1a 	bl	8001aac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001678:	1d3b      	adds	r3, r7, #4
 800167a:	2208      	movs	r2, #8
 800167c:	4619      	mov	r1, r3
 800167e:	480d      	ldr	r0, [pc, #52]	@ (80016b4 <MX_TIM3_Init+0x128>)
 8001680:	f003 fa30 	bl	8004ae4 <HAL_TIM_PWM_ConfigChannel>
 8001684:	4603      	mov	r3, r0
 8001686:	2b00      	cmp	r3, #0
 8001688:	d001      	beq.n	800168e <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 800168a:	f000 fa0f 	bl	8001aac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800168e:	1d3b      	adds	r3, r7, #4
 8001690:	220c      	movs	r2, #12
 8001692:	4619      	mov	r1, r3
 8001694:	4807      	ldr	r0, [pc, #28]	@ (80016b4 <MX_TIM3_Init+0x128>)
 8001696:	f003 fa25 	bl	8004ae4 <HAL_TIM_PWM_ConfigChannel>
 800169a:	4603      	mov	r3, r0
 800169c:	2b00      	cmp	r3, #0
 800169e:	d001      	beq.n	80016a4 <MX_TIM3_Init+0x118>
  {
    Error_Handler();
 80016a0:	f000 fa04 	bl	8001aac <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80016a4:	4803      	ldr	r0, [pc, #12]	@ (80016b4 <MX_TIM3_Init+0x128>)
 80016a6:	f000 fc7f 	bl	8001fa8 <HAL_TIM_MspPostInit>

}
 80016aa:	bf00      	nop
 80016ac:	3738      	adds	r7, #56	@ 0x38
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	2000009c 	.word	0x2000009c
 80016b8:	40000400 	.word	0x40000400

080016bc <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b082      	sub	sp, #8
 80016c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016c2:	463b      	mov	r3, r7
 80016c4:	2200      	movs	r2, #0
 80016c6:	601a      	str	r2, [r3, #0]
 80016c8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80016ca:	4b15      	ldr	r3, [pc, #84]	@ (8001720 <MX_TIM6_Init+0x64>)
 80016cc:	4a15      	ldr	r2, [pc, #84]	@ (8001724 <MX_TIM6_Init+0x68>)
 80016ce:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 42000-1;
 80016d0:	4b13      	ldr	r3, [pc, #76]	@ (8001720 <MX_TIM6_Init+0x64>)
 80016d2:	f24a 420f 	movw	r2, #41999	@ 0xa40f
 80016d6:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016d8:	4b11      	ldr	r3, [pc, #68]	@ (8001720 <MX_TIM6_Init+0x64>)
 80016da:	2200      	movs	r2, #0
 80016dc:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 200-1;
 80016de:	4b10      	ldr	r3, [pc, #64]	@ (8001720 <MX_TIM6_Init+0x64>)
 80016e0:	22c7      	movs	r2, #199	@ 0xc7
 80016e2:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016e4:	4b0e      	ldr	r3, [pc, #56]	@ (8001720 <MX_TIM6_Init+0x64>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80016ea:	480d      	ldr	r0, [pc, #52]	@ (8001720 <MX_TIM6_Init+0x64>)
 80016ec:	f002 fefa 	bl	80044e4 <HAL_TIM_Base_Init>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d001      	beq.n	80016fa <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 80016f6:	f000 f9d9 	bl	8001aac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80016fa:	2320      	movs	r3, #32
 80016fc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016fe:	2300      	movs	r3, #0
 8001700:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001702:	463b      	mov	r3, r7
 8001704:	4619      	mov	r1, r3
 8001706:	4806      	ldr	r0, [pc, #24]	@ (8001720 <MX_TIM6_Init+0x64>)
 8001708:	f003 feba 	bl	8005480 <HAL_TIMEx_MasterConfigSynchronization>
 800170c:	4603      	mov	r3, r0
 800170e:	2b00      	cmp	r3, #0
 8001710:	d001      	beq.n	8001716 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8001712:	f000 f9cb 	bl	8001aac <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001716:	bf00      	nop
 8001718:	3708      	adds	r7, #8
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	200000e4 	.word	0x200000e4
 8001724:	40001000 	.word	0x40001000

08001728 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b082      	sub	sp, #8
 800172c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800172e:	463b      	mov	r3, r7
 8001730:	2200      	movs	r2, #0
 8001732:	601a      	str	r2, [r3, #0]
 8001734:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001736:	4b14      	ldr	r3, [pc, #80]	@ (8001788 <MX_TIM7_Init+0x60>)
 8001738:	4a14      	ldr	r2, [pc, #80]	@ (800178c <MX_TIM7_Init+0x64>)
 800173a:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 83;
 800173c:	4b12      	ldr	r3, [pc, #72]	@ (8001788 <MX_TIM7_Init+0x60>)
 800173e:	2253      	movs	r2, #83	@ 0x53
 8001740:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001742:	4b11      	ldr	r3, [pc, #68]	@ (8001788 <MX_TIM7_Init+0x60>)
 8001744:	2200      	movs	r2, #0
 8001746:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 9;
 8001748:	4b0f      	ldr	r3, [pc, #60]	@ (8001788 <MX_TIM7_Init+0x60>)
 800174a:	2209      	movs	r2, #9
 800174c:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800174e:	4b0e      	ldr	r3, [pc, #56]	@ (8001788 <MX_TIM7_Init+0x60>)
 8001750:	2200      	movs	r2, #0
 8001752:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001754:	480c      	ldr	r0, [pc, #48]	@ (8001788 <MX_TIM7_Init+0x60>)
 8001756:	f002 fec5 	bl	80044e4 <HAL_TIM_Base_Init>
 800175a:	4603      	mov	r3, r0
 800175c:	2b00      	cmp	r3, #0
 800175e:	d001      	beq.n	8001764 <MX_TIM7_Init+0x3c>
  {
    Error_Handler();
 8001760:	f000 f9a4 	bl	8001aac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001764:	2300      	movs	r3, #0
 8001766:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001768:	2300      	movs	r3, #0
 800176a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800176c:	463b      	mov	r3, r7
 800176e:	4619      	mov	r1, r3
 8001770:	4805      	ldr	r0, [pc, #20]	@ (8001788 <MX_TIM7_Init+0x60>)
 8001772:	f003 fe85 	bl	8005480 <HAL_TIMEx_MasterConfigSynchronization>
 8001776:	4603      	mov	r3, r0
 8001778:	2b00      	cmp	r3, #0
 800177a:	d001      	beq.n	8001780 <MX_TIM7_Init+0x58>
  {
    Error_Handler();
 800177c:	f000 f996 	bl	8001aac <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001780:	bf00      	nop
 8001782:	3708      	adds	r7, #8
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}
 8001788:	2000012c 	.word	0x2000012c
 800178c:	40001400 	.word	0x40001400

08001790 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001794:	4b11      	ldr	r3, [pc, #68]	@ (80017dc <MX_USART2_UART_Init+0x4c>)
 8001796:	4a12      	ldr	r2, [pc, #72]	@ (80017e0 <MX_USART2_UART_Init+0x50>)
 8001798:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800179a:	4b10      	ldr	r3, [pc, #64]	@ (80017dc <MX_USART2_UART_Init+0x4c>)
 800179c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80017a0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80017a2:	4b0e      	ldr	r3, [pc, #56]	@ (80017dc <MX_USART2_UART_Init+0x4c>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80017a8:	4b0c      	ldr	r3, [pc, #48]	@ (80017dc <MX_USART2_UART_Init+0x4c>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80017ae:	4b0b      	ldr	r3, [pc, #44]	@ (80017dc <MX_USART2_UART_Init+0x4c>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80017b4:	4b09      	ldr	r3, [pc, #36]	@ (80017dc <MX_USART2_UART_Init+0x4c>)
 80017b6:	220c      	movs	r2, #12
 80017b8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017ba:	4b08      	ldr	r3, [pc, #32]	@ (80017dc <MX_USART2_UART_Init+0x4c>)
 80017bc:	2200      	movs	r2, #0
 80017be:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80017c0:	4b06      	ldr	r3, [pc, #24]	@ (80017dc <MX_USART2_UART_Init+0x4c>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80017c6:	4805      	ldr	r0, [pc, #20]	@ (80017dc <MX_USART2_UART_Init+0x4c>)
 80017c8:	f003 feea 	bl	80055a0 <HAL_UART_Init>
 80017cc:	4603      	mov	r3, r0
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d001      	beq.n	80017d6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80017d2:	f000 f96b 	bl	8001aac <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80017d6:	bf00      	nop
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	20000174 	.word	0x20000174
 80017e0:	40004400 	.word	0x40004400

080017e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b08a      	sub	sp, #40	@ 0x28
 80017e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017ea:	f107 0314 	add.w	r3, r7, #20
 80017ee:	2200      	movs	r2, #0
 80017f0:	601a      	str	r2, [r3, #0]
 80017f2:	605a      	str	r2, [r3, #4]
 80017f4:	609a      	str	r2, [r3, #8]
 80017f6:	60da      	str	r2, [r3, #12]
 80017f8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017fa:	2300      	movs	r3, #0
 80017fc:	613b      	str	r3, [r7, #16]
 80017fe:	4b42      	ldr	r3, [pc, #264]	@ (8001908 <MX_GPIO_Init+0x124>)
 8001800:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001802:	4a41      	ldr	r2, [pc, #260]	@ (8001908 <MX_GPIO_Init+0x124>)
 8001804:	f043 0304 	orr.w	r3, r3, #4
 8001808:	6313      	str	r3, [r2, #48]	@ 0x30
 800180a:	4b3f      	ldr	r3, [pc, #252]	@ (8001908 <MX_GPIO_Init+0x124>)
 800180c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800180e:	f003 0304 	and.w	r3, r3, #4
 8001812:	613b      	str	r3, [r7, #16]
 8001814:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001816:	2300      	movs	r3, #0
 8001818:	60fb      	str	r3, [r7, #12]
 800181a:	4b3b      	ldr	r3, [pc, #236]	@ (8001908 <MX_GPIO_Init+0x124>)
 800181c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800181e:	4a3a      	ldr	r2, [pc, #232]	@ (8001908 <MX_GPIO_Init+0x124>)
 8001820:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001824:	6313      	str	r3, [r2, #48]	@ 0x30
 8001826:	4b38      	ldr	r3, [pc, #224]	@ (8001908 <MX_GPIO_Init+0x124>)
 8001828:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800182a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800182e:	60fb      	str	r3, [r7, #12]
 8001830:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001832:	2300      	movs	r3, #0
 8001834:	60bb      	str	r3, [r7, #8]
 8001836:	4b34      	ldr	r3, [pc, #208]	@ (8001908 <MX_GPIO_Init+0x124>)
 8001838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800183a:	4a33      	ldr	r2, [pc, #204]	@ (8001908 <MX_GPIO_Init+0x124>)
 800183c:	f043 0301 	orr.w	r3, r3, #1
 8001840:	6313      	str	r3, [r2, #48]	@ 0x30
 8001842:	4b31      	ldr	r3, [pc, #196]	@ (8001908 <MX_GPIO_Init+0x124>)
 8001844:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001846:	f003 0301 	and.w	r3, r3, #1
 800184a:	60bb      	str	r3, [r7, #8]
 800184c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800184e:	2300      	movs	r3, #0
 8001850:	607b      	str	r3, [r7, #4]
 8001852:	4b2d      	ldr	r3, [pc, #180]	@ (8001908 <MX_GPIO_Init+0x124>)
 8001854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001856:	4a2c      	ldr	r2, [pc, #176]	@ (8001908 <MX_GPIO_Init+0x124>)
 8001858:	f043 0302 	orr.w	r3, r3, #2
 800185c:	6313      	str	r3, [r2, #48]	@ 0x30
 800185e:	4b2a      	ldr	r3, [pc, #168]	@ (8001908 <MX_GPIO_Init+0x124>)
 8001860:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001862:	f003 0302 	and.w	r3, r3, #2
 8001866:	607b      	str	r3, [r7, #4]
 8001868:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800186a:	2200      	movs	r2, #0
 800186c:	2120      	movs	r1, #32
 800186e:	4827      	ldr	r0, [pc, #156]	@ (800190c <MX_GPIO_Init+0x128>)
 8001870:	f001 f824 	bl	80028bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Blue_Button_Pin */
  GPIO_InitStruct.Pin = Blue_Button_Pin;
 8001874:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001878:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800187a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800187e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001880:	2300      	movs	r3, #0
 8001882:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Blue_Button_GPIO_Port, &GPIO_InitStruct);
 8001884:	f107 0314 	add.w	r3, r7, #20
 8001888:	4619      	mov	r1, r3
 800188a:	4821      	ldr	r0, [pc, #132]	@ (8001910 <MX_GPIO_Init+0x12c>)
 800188c:	f000 fe6a 	bl	8002564 <HAL_GPIO_Init>

  /*Configure GPIO pins : Dipswitch_MSB_Pin Dipswitch_LSB_Pin Encodeur_D_B_Pin */
  GPIO_InitStruct.Pin = Dipswitch_MSB_Pin|Dipswitch_LSB_Pin|Encodeur_D_B_Pin;
 8001890:	238c      	movs	r3, #140	@ 0x8c
 8001892:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001894:	2300      	movs	r3, #0
 8001896:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001898:	2302      	movs	r3, #2
 800189a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800189c:	f107 0314 	add.w	r3, r7, #20
 80018a0:	4619      	mov	r1, r3
 80018a2:	481b      	ldr	r0, [pc, #108]	@ (8001910 <MX_GPIO_Init+0x12c>)
 80018a4:	f000 fe5e 	bl	8002564 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80018a8:	2320      	movs	r3, #32
 80018aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018ac:	2301      	movs	r3, #1
 80018ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b0:	2300      	movs	r3, #0
 80018b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018b4:	2300      	movs	r3, #0
 80018b6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80018b8:	f107 0314 	add.w	r3, r7, #20
 80018bc:	4619      	mov	r1, r3
 80018be:	4813      	ldr	r0, [pc, #76]	@ (800190c <MX_GPIO_Init+0x128>)
 80018c0:	f000 fe50 	bl	8002564 <HAL_GPIO_Init>

  /*Configure GPIO pins : Encodeur_G_A_Pin Encodeur_D_A_Pin */
  GPIO_InitStruct.Pin = Encodeur_G_A_Pin|Encodeur_D_A_Pin;
 80018c4:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80018c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80018ca:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80018ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80018d0:	2302      	movs	r3, #2
 80018d2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018d4:	f107 0314 	add.w	r3, r7, #20
 80018d8:	4619      	mov	r1, r3
 80018da:	480c      	ldr	r0, [pc, #48]	@ (800190c <MX_GPIO_Init+0x128>)
 80018dc:	f000 fe42 	bl	8002564 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80018e0:	2200      	movs	r2, #0
 80018e2:	2100      	movs	r1, #0
 80018e4:	2017      	movs	r0, #23
 80018e6:	f000 fe06 	bl	80024f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80018ea:	2017      	movs	r0, #23
 80018ec:	f000 fe1f 	bl	800252e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80018f0:	2200      	movs	r2, #0
 80018f2:	2100      	movs	r1, #0
 80018f4:	2028      	movs	r0, #40	@ 0x28
 80018f6:	f000 fdfe 	bl	80024f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80018fa:	2028      	movs	r0, #40	@ 0x28
 80018fc:	f000 fe17 	bl	800252e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001900:	bf00      	nop
 8001902:	3728      	adds	r7, #40	@ 0x28
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}
 8001908:	40023800 	.word	0x40023800
 800190c:	40020000 	.word	0x40020000
 8001910:	40020800 	.word	0x40020800

08001914 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001914:	b590      	push	{r4, r7, lr}
 8001916:	b083      	sub	sp, #12
 8001918:	af00      	add	r7, sp, #0
 800191a:	4603      	mov	r3, r0
 800191c:	80fb      	strh	r3, [r7, #6]

	if(GPIO_Pin == GPIO_PIN_9)
 800191e:	88fb      	ldrh	r3, [r7, #6]
 8001920:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001924:	d106      	bne.n	8001934 <HAL_GPIO_EXTI_Callback+0x20>
	{
		nbPulseD++ ; // compte les pulses de lencodeur droit
 8001926:	4b25      	ldr	r3, [pc, #148]	@ (80019bc <HAL_GPIO_EXTI_Callback+0xa8>)
 8001928:	881b      	ldrh	r3, [r3, #0]
 800192a:	b29b      	uxth	r3, r3
 800192c:	3301      	adds	r3, #1
 800192e:	b29a      	uxth	r2, r3
 8001930:	4b22      	ldr	r3, [pc, #136]	@ (80019bc <HAL_GPIO_EXTI_Callback+0xa8>)
 8001932:	801a      	strh	r2, [r3, #0]
	}

	if(GPIO_Pin == GPIO_PIN_8)
 8001934:	88fb      	ldrh	r3, [r7, #6]
 8001936:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800193a:	d106      	bne.n	800194a <HAL_GPIO_EXTI_Callback+0x36>
	{
		nbPulseG++ ; // compte les pulses de lencodeur droit
 800193c:	4b20      	ldr	r3, [pc, #128]	@ (80019c0 <HAL_GPIO_EXTI_Callback+0xac>)
 800193e:	881b      	ldrh	r3, [r3, #0]
 8001940:	b29b      	uxth	r3, r3
 8001942:	3301      	adds	r3, #1
 8001944:	b29a      	uxth	r2, r3
 8001946:	4b1e      	ldr	r3, [pc, #120]	@ (80019c0 <HAL_GPIO_EXTI_Callback+0xac>)
 8001948:	801a      	strh	r2, [r3, #0]
	}

	if(GPIO_Pin == Blue_Button_Pin) {
 800194a:	88fb      	ldrh	r3, [r7, #6]
 800194c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001950:	d130      	bne.n	80019b4 <HAL_GPIO_EXTI_Callback+0xa0>
		Stop(&htim3);
 8001952:	481c      	ldr	r0, [pc, #112]	@ (80019c4 <HAL_GPIO_EXTI_Callback+0xb0>)
 8001954:	f7ff fd00 	bl	8001358 <Stop>
		dip_state = Get_Mode(HAL_GPIO_ReadPin(Dipswitch_MSB_GPIO_Port, Dipswitch_MSB_Pin), HAL_GPIO_ReadPin(Dipswitch_LSB_GPIO_Port, Dipswitch_LSB_Pin));
 8001958:	2104      	movs	r1, #4
 800195a:	481b      	ldr	r0, [pc, #108]	@ (80019c8 <HAL_GPIO_EXTI_Callback+0xb4>)
 800195c:	f000 ff96 	bl	800288c <HAL_GPIO_ReadPin>
 8001960:	4603      	mov	r3, r0
 8001962:	461c      	mov	r4, r3
 8001964:	2108      	movs	r1, #8
 8001966:	4818      	ldr	r0, [pc, #96]	@ (80019c8 <HAL_GPIO_EXTI_Callback+0xb4>)
 8001968:	f000 ff90 	bl	800288c <HAL_GPIO_ReadPin>
 800196c:	4603      	mov	r3, r0
 800196e:	4619      	mov	r1, r3
 8001970:	4620      	mov	r0, r4
 8001972:	f7ff fa27 	bl	8000dc4 <Get_Mode>
 8001976:	4603      	mov	r3, r0
 8001978:	b2da      	uxtb	r2, r3
 800197a:	4b14      	ldr	r3, [pc, #80]	@ (80019cc <HAL_GPIO_EXTI_Callback+0xb8>)
 800197c:	701a      	strb	r2, [r3, #0]

		// Resume if paused
		if(pause) {
 800197e:	4b14      	ldr	r3, [pc, #80]	@ (80019d0 <HAL_GPIO_EXTI_Callback+0xbc>)
 8001980:	781b      	ldrb	r3, [r3, #0]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d006      	beq.n	8001994 <HAL_GPIO_EXTI_Callback+0x80>
			pause = 0;
 8001986:	4b12      	ldr	r3, [pc, #72]	@ (80019d0 <HAL_GPIO_EXTI_Callback+0xbc>)
 8001988:	2200      	movs	r2, #0
 800198a:	701a      	strb	r2, [r3, #0]
			HAL_TIM_Base_Start_IT(&htim7);
 800198c:	4811      	ldr	r0, [pc, #68]	@ (80019d4 <HAL_GPIO_EXTI_Callback+0xc0>)
 800198e:	f002 fdf9 	bl	8004584 <HAL_TIM_Base_Start_IT>
		else if(curr_mode == dip_state && curr_mode != MANUAL_MODE) {
			pause = 1;
			HAL_TIM_Base_Stop_IT(&htim7);
		}
	}
}
 8001992:	e00f      	b.n	80019b4 <HAL_GPIO_EXTI_Callback+0xa0>
		else if(curr_mode == dip_state && curr_mode != MANUAL_MODE) {
 8001994:	4b10      	ldr	r3, [pc, #64]	@ (80019d8 <HAL_GPIO_EXTI_Callback+0xc4>)
 8001996:	781a      	ldrb	r2, [r3, #0]
 8001998:	4b0c      	ldr	r3, [pc, #48]	@ (80019cc <HAL_GPIO_EXTI_Callback+0xb8>)
 800199a:	781b      	ldrb	r3, [r3, #0]
 800199c:	429a      	cmp	r2, r3
 800199e:	d109      	bne.n	80019b4 <HAL_GPIO_EXTI_Callback+0xa0>
 80019a0:	4b0d      	ldr	r3, [pc, #52]	@ (80019d8 <HAL_GPIO_EXTI_Callback+0xc4>)
 80019a2:	781b      	ldrb	r3, [r3, #0]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d005      	beq.n	80019b4 <HAL_GPIO_EXTI_Callback+0xa0>
			pause = 1;
 80019a8:	4b09      	ldr	r3, [pc, #36]	@ (80019d0 <HAL_GPIO_EXTI_Callback+0xbc>)
 80019aa:	2201      	movs	r2, #1
 80019ac:	701a      	strb	r2, [r3, #0]
			HAL_TIM_Base_Stop_IT(&htim7);
 80019ae:	4809      	ldr	r0, [pc, #36]	@ (80019d4 <HAL_GPIO_EXTI_Callback+0xc0>)
 80019b0:	f002 fe58 	bl	8004664 <HAL_TIM_Base_Stop_IT>
}
 80019b4:	bf00      	nop
 80019b6:	370c      	adds	r7, #12
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bd90      	pop	{r4, r7, pc}
 80019bc:	200001bc 	.word	0x200001bc
 80019c0:	200001be 	.word	0x200001be
 80019c4:	2000009c 	.word	0x2000009c
 80019c8:	40020800 	.word	0x40020800
 80019cc:	2000003d 	.word	0x2000003d
 80019d0:	2000003c 	.word	0x2000003c
 80019d4:	2000012c 	.word	0x2000012c
 80019d8:	2000003e 	.word	0x2000003e

080019dc <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80019dc:	b480      	push	{r7}
 80019de:	b083      	sub	sp, #12
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
    if(htim->Instance == TIM6)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a27      	ldr	r2, [pc, #156]	@ (8001a88 <HAL_TIM_PeriodElapsedCallback+0xac>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d13b      	bne.n	8001a66 <HAL_TIM_PeriodElapsedCallback+0x8a>
    {
    	vitesseD = CIRCONFERENCE * nbPulseD / PULSE_PAR_TOUR * 2000 / (arrTimerVitesse + 1) ; // calcule la vitesse de la chenille droite en m/s
 80019ee:	4b27      	ldr	r3, [pc, #156]	@ (8001a8c <HAL_TIM_PeriodElapsedCallback+0xb0>)
 80019f0:	881b      	ldrh	r3, [r3, #0]
 80019f2:	b29b      	uxth	r3, r3
 80019f4:	461a      	mov	r2, r3
 80019f6:	239d      	movs	r3, #157	@ 0x9d
 80019f8:	fb02 f303 	mul.w	r3, r2, r3
 80019fc:	4a24      	ldr	r2, [pc, #144]	@ (8001a90 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 80019fe:	fb82 1203 	smull	r1, r2, r2, r3
 8001a02:	441a      	add	r2, r3
 8001a04:	1192      	asrs	r2, r2, #6
 8001a06:	17db      	asrs	r3, r3, #31
 8001a08:	1ad3      	subs	r3, r2, r3
 8001a0a:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8001a0e:	fb03 f202 	mul.w	r2, r3, r2
 8001a12:	4b20      	ldr	r3, [pc, #128]	@ (8001a94 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8001a14:	881b      	ldrh	r3, [r3, #0]
 8001a16:	b29b      	uxth	r3, r3
 8001a18:	3301      	adds	r3, #1
 8001a1a:	fb92 f3f3 	sdiv	r3, r2, r3
 8001a1e:	b29a      	uxth	r2, r3
 8001a20:	4b1d      	ldr	r3, [pc, #116]	@ (8001a98 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8001a22:	801a      	strh	r2, [r3, #0]
    	vitesseG = CIRCONFERENCE * nbPulseG / PULSE_PAR_TOUR * 2000 / (arrTimerVitesse + 1) ;
 8001a24:	4b1d      	ldr	r3, [pc, #116]	@ (8001a9c <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8001a26:	881b      	ldrh	r3, [r3, #0]
 8001a28:	b29b      	uxth	r3, r3
 8001a2a:	461a      	mov	r2, r3
 8001a2c:	239d      	movs	r3, #157	@ 0x9d
 8001a2e:	fb02 f303 	mul.w	r3, r2, r3
 8001a32:	4a17      	ldr	r2, [pc, #92]	@ (8001a90 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8001a34:	fb82 1203 	smull	r1, r2, r2, r3
 8001a38:	441a      	add	r2, r3
 8001a3a:	1192      	asrs	r2, r2, #6
 8001a3c:	17db      	asrs	r3, r3, #31
 8001a3e:	1ad3      	subs	r3, r2, r3
 8001a40:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8001a44:	fb03 f202 	mul.w	r2, r3, r2
 8001a48:	4b12      	ldr	r3, [pc, #72]	@ (8001a94 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8001a4a:	881b      	ldrh	r3, [r3, #0]
 8001a4c:	b29b      	uxth	r3, r3
 8001a4e:	3301      	adds	r3, #1
 8001a50:	fb92 f3f3 	sdiv	r3, r2, r3
 8001a54:	b29a      	uxth	r2, r3
 8001a56:	4b12      	ldr	r3, [pc, #72]	@ (8001aa0 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8001a58:	801a      	strh	r2, [r3, #0]

    	nbPulseD = 0 ;
 8001a5a:	4b0c      	ldr	r3, [pc, #48]	@ (8001a8c <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	801a      	strh	r2, [r3, #0]
    	nbPulseG = 0;
 8001a60:	4b0e      	ldr	r3, [pc, #56]	@ (8001a9c <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	801a      	strh	r2, [r3, #0]
    	//HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
    }

    if(htim->Instance == TIM7) {	// Triggered every 10 µs
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4a0e      	ldr	r2, [pc, #56]	@ (8001aa4 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8001a6c:	4293      	cmp	r3, r2
 8001a6e:	d104      	bne.n	8001a7a <HAL_TIM_PeriodElapsedCallback+0x9e>
    	timer_count += 10;
 8001a70:	4b0d      	ldr	r3, [pc, #52]	@ (8001aa8 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	330a      	adds	r3, #10
 8001a76:	4a0c      	ldr	r2, [pc, #48]	@ (8001aa8 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8001a78:	6013      	str	r3, [r2, #0]
    }
}
 8001a7a:	bf00      	nop
 8001a7c:	370c      	adds	r7, #12
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a84:	4770      	bx	lr
 8001a86:	bf00      	nop
 8001a88:	40001000 	.word	0x40001000
 8001a8c:	200001bc 	.word	0x200001bc
 8001a90:	dd67c8a7 	.word	0xdd67c8a7
 8001a94:	20000000 	.word	0x20000000
 8001a98:	200001c0 	.word	0x200001c0
 8001a9c:	200001be 	.word	0x200001be
 8001aa0:	200001c2 	.word	0x200001c2
 8001aa4:	40001400 	.word	0x40001400
 8001aa8:	20000040 	.word	0x20000040

08001aac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001aac:	b480      	push	{r7}
 8001aae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ab0:	b672      	cpsid	i
}
 8001ab2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ab4:	bf00      	nop
 8001ab6:	e7fd      	b.n	8001ab4 <Error_Handler+0x8>

08001ab8 <Format_Data>:
int modeVitesse = 3;
float pulseCoeff = 1.96;
int sendPulseMotor;


void Format_Data() {
 8001ab8:	b480      	push	{r7}
 8001aba:	af00      	add	r7, sp, #0
	/*FROM LAB7*/
	formatted_data[0] = data[0];
 8001abc:	4b1b      	ldr	r3, [pc, #108]	@ (8001b2c <Format_Data+0x74>)
 8001abe:	781b      	ldrb	r3, [r3, #0]
 8001ac0:	461a      	mov	r2, r3
 8001ac2:	4b1b      	ldr	r3, [pc, #108]	@ (8001b30 <Format_Data+0x78>)
 8001ac4:	601a      	str	r2, [r3, #0]
	formatted_data[1] = data[1];
 8001ac6:	4b19      	ldr	r3, [pc, #100]	@ (8001b2c <Format_Data+0x74>)
 8001ac8:	785b      	ldrb	r3, [r3, #1]
 8001aca:	461a      	mov	r2, r3
 8001acc:	4b18      	ldr	r3, [pc, #96]	@ (8001b30 <Format_Data+0x78>)
 8001ace:	605a      	str	r2, [r3, #4]
	formatted_data[5] = (data[5] & 0x02);
 8001ad0:	4b16      	ldr	r3, [pc, #88]	@ (8001b2c <Format_Data+0x74>)
 8001ad2:	795b      	ldrb	r3, [r3, #5]
 8001ad4:	f003 0302 	and.w	r3, r3, #2
 8001ad8:	4a15      	ldr	r2, [pc, #84]	@ (8001b30 <Format_Data+0x78>)
 8001ada:	6153      	str	r3, [r2, #20]
	if(formatted_data[5] == 2)
 8001adc:	4b14      	ldr	r3, [pc, #80]	@ (8001b30 <Format_Data+0x78>)
 8001ade:	695b      	ldr	r3, [r3, #20]
 8001ae0:	2b02      	cmp	r3, #2
 8001ae2:	d102      	bne.n	8001aea <Format_Data+0x32>
		formatted_data[5] = 1;
 8001ae4:	4b12      	ldr	r3, [pc, #72]	@ (8001b30 <Format_Data+0x78>)
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	615a      	str	r2, [r3, #20]
	formatted_data[6] = (data[5] & 0x01);
 8001aea:	4b10      	ldr	r3, [pc, #64]	@ (8001b2c <Format_Data+0x74>)
 8001aec:	795b      	ldrb	r3, [r3, #5]
 8001aee:	f003 0301 	and.w	r3, r3, #1
 8001af2:	4a0f      	ldr	r2, [pc, #60]	@ (8001b30 <Format_Data+0x78>)
 8001af4:	6193      	str	r3, [r2, #24]

	/*MY DATA*/
	Xdata = data[0];
 8001af6:	4b0d      	ldr	r3, [pc, #52]	@ (8001b2c <Format_Data+0x74>)
 8001af8:	781b      	ldrb	r3, [r3, #0]
 8001afa:	461a      	mov	r2, r3
 8001afc:	4b0d      	ldr	r3, [pc, #52]	@ (8001b34 <Format_Data+0x7c>)
 8001afe:	601a      	str	r2, [r3, #0]
	Ydata = data[1];
 8001b00:	4b0a      	ldr	r3, [pc, #40]	@ (8001b2c <Format_Data+0x74>)
 8001b02:	785b      	ldrb	r3, [r3, #1]
 8001b04:	461a      	mov	r2, r3
 8001b06:	4b0c      	ldr	r3, [pc, #48]	@ (8001b38 <Format_Data+0x80>)
 8001b08:	601a      	str	r2, [r3, #0]
	Cbutton = (data[5] & 0x02);
 8001b0a:	4b08      	ldr	r3, [pc, #32]	@ (8001b2c <Format_Data+0x74>)
 8001b0c:	795b      	ldrb	r3, [r3, #5]
 8001b0e:	f003 0302 	and.w	r3, r3, #2
 8001b12:	4a0a      	ldr	r2, [pc, #40]	@ (8001b3c <Format_Data+0x84>)
 8001b14:	6013      	str	r3, [r2, #0]
	Zbutton = (data[5] & 0x01);
 8001b16:	4b05      	ldr	r3, [pc, #20]	@ (8001b2c <Format_Data+0x74>)
 8001b18:	795b      	ldrb	r3, [r3, #5]
 8001b1a:	f003 0301 	and.w	r3, r3, #1
 8001b1e:	4a08      	ldr	r2, [pc, #32]	@ (8001b40 <Format_Data+0x88>)
 8001b20:	6013      	str	r3, [r2, #0]

}
 8001b22:	bf00      	nop
 8001b24:	46bd      	mov	sp, r7
 8001b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2a:	4770      	bx	lr
 8001b2c:	200001c4 	.word	0x200001c4
 8001b30:	200001cc 	.word	0x200001cc
 8001b34:	200001e8 	.word	0x200001e8
 8001b38:	200001ec 	.word	0x200001ec
 8001b3c:	200001f0 	.word	0x200001f0
 8001b40:	200001f4 	.word	0x200001f4

08001b44 <Initialisation_manette>:


void Initialisation_manette(){
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b082      	sub	sp, #8
 8001b48:	af02      	add	r7, sp, #8

	HAL_I2C_Master_Transmit(&hi2c1, NUNCHUK_ADDRESS, initcomm1, 2, HAL_MAX_DELAY);
 8001b4a:	f04f 33ff 	mov.w	r3, #4294967295
 8001b4e:	9300      	str	r3, [sp, #0]
 8001b50:	2302      	movs	r3, #2
 8001b52:	4a0a      	ldr	r2, [pc, #40]	@ (8001b7c <Initialisation_manette+0x38>)
 8001b54:	21a4      	movs	r1, #164	@ 0xa4
 8001b56:	480a      	ldr	r0, [pc, #40]	@ (8001b80 <Initialisation_manette+0x3c>)
 8001b58:	f001 f826 	bl	8002ba8 <HAL_I2C_Master_Transmit>
	HAL_Delay(10);
 8001b5c:	200a      	movs	r0, #10
 8001b5e:	f000 fbcb 	bl	80022f8 <HAL_Delay>
	HAL_I2C_Master_Transmit(&hi2c1, NUNCHUK_ADDRESS, initcomm2, 2, HAL_MAX_DELAY);
 8001b62:	f04f 33ff 	mov.w	r3, #4294967295
 8001b66:	9300      	str	r3, [sp, #0]
 8001b68:	2302      	movs	r3, #2
 8001b6a:	4a06      	ldr	r2, [pc, #24]	@ (8001b84 <Initialisation_manette+0x40>)
 8001b6c:	21a4      	movs	r1, #164	@ 0xa4
 8001b6e:	4804      	ldr	r0, [pc, #16]	@ (8001b80 <Initialisation_manette+0x3c>)
 8001b70:	f001 f81a 	bl	8002ba8 <HAL_I2C_Master_Transmit>

}
 8001b74:	bf00      	nop
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	bf00      	nop
 8001b7c:	20000004 	.word	0x20000004
 8001b80:	20000048 	.word	0x20000048
 8001b84:	20000008 	.word	0x20000008

08001b88 <controleRednek>:


void controleRednek(){
 8001b88:	b5b0      	push	{r4, r5, r7, lr}
 8001b8a:	b082      	sub	sp, #8
 8001b8c:	af02      	add	r7, sp, #8

	HAL_I2C_Master_Transmit(&hi2c1, NUNCHUK_ADDRESS, 0x00, 1, HAL_MAX_DELAY);
 8001b8e:	f04f 33ff 	mov.w	r3, #4294967295
 8001b92:	9300      	str	r3, [sp, #0]
 8001b94:	2301      	movs	r3, #1
 8001b96:	2200      	movs	r2, #0
 8001b98:	21a4      	movs	r1, #164	@ 0xa4
 8001b9a:	4895      	ldr	r0, [pc, #596]	@ (8001df0 <controleRednek+0x268>)
 8001b9c:	f001 f804 	bl	8002ba8 <HAL_I2C_Master_Transmit>
	HAL_Delay(10);
 8001ba0:	200a      	movs	r0, #10
 8001ba2:	f000 fba9 	bl	80022f8 <HAL_Delay>
	HAL_I2C_Master_Receive(&hi2c1, NUNCHUK_ADDRESS, data, 6, HAL_MAX_DELAY);
 8001ba6:	f04f 33ff 	mov.w	r3, #4294967295
 8001baa:	9300      	str	r3, [sp, #0]
 8001bac:	2306      	movs	r3, #6
 8001bae:	4a91      	ldr	r2, [pc, #580]	@ (8001df4 <controleRednek+0x26c>)
 8001bb0:	21a4      	movs	r1, #164	@ 0xa4
 8001bb2:	488f      	ldr	r0, [pc, #572]	@ (8001df0 <controleRednek+0x268>)
 8001bb4:	f001 f8f6 	bl	8002da4 <HAL_I2C_Master_Receive>
	Format_Data();
 8001bb8:	f7ff ff7e 	bl	8001ab8 <Format_Data>



	if(Xdata && Ydata == 128){
 8001bbc:	4b8e      	ldr	r3, [pc, #568]	@ (8001df8 <controleRednek+0x270>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d007      	beq.n	8001bd4 <controleRednek+0x4c>
 8001bc4:	4b8d      	ldr	r3, [pc, #564]	@ (8001dfc <controleRednek+0x274>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	2b80      	cmp	r3, #128	@ 0x80
 8001bca:	d103      	bne.n	8001bd4 <controleRednek+0x4c>
			Stop(&htim3);
 8001bcc:	488c      	ldr	r0, [pc, #560]	@ (8001e00 <controleRednek+0x278>)
 8001bce:	f7ff fbc3 	bl	8001358 <Stop>


*/


}
 8001bd2:	e102      	b.n	8001dda <controleRednek+0x252>
	if(modeVitesse==1){
 8001bd4:	4b8b      	ldr	r3, [pc, #556]	@ (8001e04 <controleRednek+0x27c>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	2b01      	cmp	r3, #1
 8001bda:	d143      	bne.n	8001c64 <controleRednek+0xdc>
		Xdata = Xdata * 0.33 * pulseCoeff;
 8001bdc:	4b86      	ldr	r3, [pc, #536]	@ (8001df8 <controleRednek+0x270>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4618      	mov	r0, r3
 8001be2:	f7fe fc63 	bl	80004ac <__aeabi_i2d>
 8001be6:	a37e      	add	r3, pc, #504	@ (adr r3, 8001de0 <controleRednek+0x258>)
 8001be8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bec:	f7fe fcc8 	bl	8000580 <__aeabi_dmul>
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	460b      	mov	r3, r1
 8001bf4:	4614      	mov	r4, r2
 8001bf6:	461d      	mov	r5, r3
 8001bf8:	4b83      	ldr	r3, [pc, #524]	@ (8001e08 <controleRednek+0x280>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f7fe fc67 	bl	80004d0 <__aeabi_f2d>
 8001c02:	4602      	mov	r2, r0
 8001c04:	460b      	mov	r3, r1
 8001c06:	4620      	mov	r0, r4
 8001c08:	4629      	mov	r1, r5
 8001c0a:	f7fe fcb9 	bl	8000580 <__aeabi_dmul>
 8001c0e:	4602      	mov	r2, r0
 8001c10:	460b      	mov	r3, r1
 8001c12:	4610      	mov	r0, r2
 8001c14:	4619      	mov	r1, r3
 8001c16:	f7fe fec5 	bl	80009a4 <__aeabi_d2iz>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	4a76      	ldr	r2, [pc, #472]	@ (8001df8 <controleRednek+0x270>)
 8001c1e:	6013      	str	r3, [r2, #0]
		Ydata = Ydata * 0.33 * pulseCoeff;
 8001c20:	4b76      	ldr	r3, [pc, #472]	@ (8001dfc <controleRednek+0x274>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4618      	mov	r0, r3
 8001c26:	f7fe fc41 	bl	80004ac <__aeabi_i2d>
 8001c2a:	a36d      	add	r3, pc, #436	@ (adr r3, 8001de0 <controleRednek+0x258>)
 8001c2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c30:	f7fe fca6 	bl	8000580 <__aeabi_dmul>
 8001c34:	4602      	mov	r2, r0
 8001c36:	460b      	mov	r3, r1
 8001c38:	4614      	mov	r4, r2
 8001c3a:	461d      	mov	r5, r3
 8001c3c:	4b72      	ldr	r3, [pc, #456]	@ (8001e08 <controleRednek+0x280>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4618      	mov	r0, r3
 8001c42:	f7fe fc45 	bl	80004d0 <__aeabi_f2d>
 8001c46:	4602      	mov	r2, r0
 8001c48:	460b      	mov	r3, r1
 8001c4a:	4620      	mov	r0, r4
 8001c4c:	4629      	mov	r1, r5
 8001c4e:	f7fe fc97 	bl	8000580 <__aeabi_dmul>
 8001c52:	4602      	mov	r2, r0
 8001c54:	460b      	mov	r3, r1
 8001c56:	4610      	mov	r0, r2
 8001c58:	4619      	mov	r1, r3
 8001c5a:	f7fe fea3 	bl	80009a4 <__aeabi_d2iz>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	4a66      	ldr	r2, [pc, #408]	@ (8001dfc <controleRednek+0x274>)
 8001c62:	6013      	str	r3, [r2, #0]
	if(modeVitesse==2){
 8001c64:	4b67      	ldr	r3, [pc, #412]	@ (8001e04 <controleRednek+0x27c>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	2b02      	cmp	r3, #2
 8001c6a:	d143      	bne.n	8001cf4 <controleRednek+0x16c>
		Xdata = Xdata * 0.66 * pulseCoeff;
 8001c6c:	4b62      	ldr	r3, [pc, #392]	@ (8001df8 <controleRednek+0x270>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4618      	mov	r0, r3
 8001c72:	f7fe fc1b 	bl	80004ac <__aeabi_i2d>
 8001c76:	a35c      	add	r3, pc, #368	@ (adr r3, 8001de8 <controleRednek+0x260>)
 8001c78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c7c:	f7fe fc80 	bl	8000580 <__aeabi_dmul>
 8001c80:	4602      	mov	r2, r0
 8001c82:	460b      	mov	r3, r1
 8001c84:	4614      	mov	r4, r2
 8001c86:	461d      	mov	r5, r3
 8001c88:	4b5f      	ldr	r3, [pc, #380]	@ (8001e08 <controleRednek+0x280>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f7fe fc1f 	bl	80004d0 <__aeabi_f2d>
 8001c92:	4602      	mov	r2, r0
 8001c94:	460b      	mov	r3, r1
 8001c96:	4620      	mov	r0, r4
 8001c98:	4629      	mov	r1, r5
 8001c9a:	f7fe fc71 	bl	8000580 <__aeabi_dmul>
 8001c9e:	4602      	mov	r2, r0
 8001ca0:	460b      	mov	r3, r1
 8001ca2:	4610      	mov	r0, r2
 8001ca4:	4619      	mov	r1, r3
 8001ca6:	f7fe fe7d 	bl	80009a4 <__aeabi_d2iz>
 8001caa:	4603      	mov	r3, r0
 8001cac:	4a52      	ldr	r2, [pc, #328]	@ (8001df8 <controleRednek+0x270>)
 8001cae:	6013      	str	r3, [r2, #0]
		Ydata = Ydata * 0.66 * pulseCoeff;
 8001cb0:	4b52      	ldr	r3, [pc, #328]	@ (8001dfc <controleRednek+0x274>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f7fe fbf9 	bl	80004ac <__aeabi_i2d>
 8001cba:	a34b      	add	r3, pc, #300	@ (adr r3, 8001de8 <controleRednek+0x260>)
 8001cbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cc0:	f7fe fc5e 	bl	8000580 <__aeabi_dmul>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	460b      	mov	r3, r1
 8001cc8:	4614      	mov	r4, r2
 8001cca:	461d      	mov	r5, r3
 8001ccc:	4b4e      	ldr	r3, [pc, #312]	@ (8001e08 <controleRednek+0x280>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f7fe fbfd 	bl	80004d0 <__aeabi_f2d>
 8001cd6:	4602      	mov	r2, r0
 8001cd8:	460b      	mov	r3, r1
 8001cda:	4620      	mov	r0, r4
 8001cdc:	4629      	mov	r1, r5
 8001cde:	f7fe fc4f 	bl	8000580 <__aeabi_dmul>
 8001ce2:	4602      	mov	r2, r0
 8001ce4:	460b      	mov	r3, r1
 8001ce6:	4610      	mov	r0, r2
 8001ce8:	4619      	mov	r1, r3
 8001cea:	f7fe fe5b 	bl	80009a4 <__aeabi_d2iz>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	4a42      	ldr	r2, [pc, #264]	@ (8001dfc <controleRednek+0x274>)
 8001cf2:	6013      	str	r3, [r2, #0]
	if(modeVitesse==3){
 8001cf4:	4b43      	ldr	r3, [pc, #268]	@ (8001e04 <controleRednek+0x27c>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	2b03      	cmp	r3, #3
 8001cfa:	d132      	bne.n	8001d62 <controleRednek+0x1da>
		Xdata = Xdata * pulseCoeff;
 8001cfc:	4b3e      	ldr	r3, [pc, #248]	@ (8001df8 <controleRednek+0x270>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	ee07 3a90 	vmov	s15, r3
 8001d04:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d08:	4b3f      	ldr	r3, [pc, #252]	@ (8001e08 <controleRednek+0x280>)
 8001d0a:	edd3 7a00 	vldr	s15, [r3]
 8001d0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d12:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d16:	ee17 2a90 	vmov	r2, s15
 8001d1a:	4b37      	ldr	r3, [pc, #220]	@ (8001df8 <controleRednek+0x270>)
 8001d1c:	601a      	str	r2, [r3, #0]
		Ydata = Ydata * 0.66 * pulseCoeff;
 8001d1e:	4b37      	ldr	r3, [pc, #220]	@ (8001dfc <controleRednek+0x274>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4618      	mov	r0, r3
 8001d24:	f7fe fbc2 	bl	80004ac <__aeabi_i2d>
 8001d28:	a32f      	add	r3, pc, #188	@ (adr r3, 8001de8 <controleRednek+0x260>)
 8001d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d2e:	f7fe fc27 	bl	8000580 <__aeabi_dmul>
 8001d32:	4602      	mov	r2, r0
 8001d34:	460b      	mov	r3, r1
 8001d36:	4614      	mov	r4, r2
 8001d38:	461d      	mov	r5, r3
 8001d3a:	4b33      	ldr	r3, [pc, #204]	@ (8001e08 <controleRednek+0x280>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f7fe fbc6 	bl	80004d0 <__aeabi_f2d>
 8001d44:	4602      	mov	r2, r0
 8001d46:	460b      	mov	r3, r1
 8001d48:	4620      	mov	r0, r4
 8001d4a:	4629      	mov	r1, r5
 8001d4c:	f7fe fc18 	bl	8000580 <__aeabi_dmul>
 8001d50:	4602      	mov	r2, r0
 8001d52:	460b      	mov	r3, r1
 8001d54:	4610      	mov	r0, r2
 8001d56:	4619      	mov	r1, r3
 8001d58:	f7fe fe24 	bl	80009a4 <__aeabi_d2iz>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	4a27      	ldr	r2, [pc, #156]	@ (8001dfc <controleRednek+0x274>)
 8001d60:	6013      	str	r3, [r2, #0]
	if(Xdata>128){
 8001d62:	4b25      	ldr	r3, [pc, #148]	@ (8001df8 <controleRednek+0x270>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	2b80      	cmp	r3, #128	@ 0x80
 8001d68:	dd09      	ble.n	8001d7e <controleRednek+0x1f6>
		sendPulseMotor = Xdata;
 8001d6a:	4b23      	ldr	r3, [pc, #140]	@ (8001df8 <controleRednek+0x270>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4a27      	ldr	r2, [pc, #156]	@ (8001e0c <controleRednek+0x284>)
 8001d70:	6013      	str	r3, [r2, #0]
		Droite(sendPulseMotor,&htim3);
 8001d72:	4b26      	ldr	r3, [pc, #152]	@ (8001e0c <controleRednek+0x284>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4922      	ldr	r1, [pc, #136]	@ (8001e00 <controleRednek+0x278>)
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f7ff fa45 	bl	8001208 <Droite>
	if(Xdata<128) {
 8001d7e:	4b1e      	ldr	r3, [pc, #120]	@ (8001df8 <controleRednek+0x270>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	2b7f      	cmp	r3, #127	@ 0x7f
 8001d84:	dc0b      	bgt.n	8001d9e <controleRednek+0x216>
			sendPulseMotor = 330-Xdata;
 8001d86:	4b1c      	ldr	r3, [pc, #112]	@ (8001df8 <controleRednek+0x270>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f5c3 73a5 	rsb	r3, r3, #330	@ 0x14a
 8001d8e:	4a1f      	ldr	r2, [pc, #124]	@ (8001e0c <controleRednek+0x284>)
 8001d90:	6013      	str	r3, [r2, #0]
			Gauche(sendPulseMotor,&htim3);
 8001d92:	4b1e      	ldr	r3, [pc, #120]	@ (8001e0c <controleRednek+0x284>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	491a      	ldr	r1, [pc, #104]	@ (8001e00 <controleRednek+0x278>)
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f7ff fa6d 	bl	8001278 <Gauche>
	if(Ydata>128){
 8001d9e:	4b17      	ldr	r3, [pc, #92]	@ (8001dfc <controleRednek+0x274>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	2b80      	cmp	r3, #128	@ 0x80
 8001da4:	dd09      	ble.n	8001dba <controleRednek+0x232>
		sendPulseMotor = Ydata;
 8001da6:	4b15      	ldr	r3, [pc, #84]	@ (8001dfc <controleRednek+0x274>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4a18      	ldr	r2, [pc, #96]	@ (8001e0c <controleRednek+0x284>)
 8001dac:	6013      	str	r3, [r2, #0]
		Avancer(sendPulseMotor,&htim3);
 8001dae:	4b17      	ldr	r3, [pc, #92]	@ (8001e0c <controleRednek+0x284>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4913      	ldr	r1, [pc, #76]	@ (8001e00 <controleRednek+0x278>)
 8001db4:	4618      	mov	r0, r3
 8001db6:	f7ff f9ef 	bl	8001198 <Avancer>
	if(Ydata<128){
 8001dba:	4b10      	ldr	r3, [pc, #64]	@ (8001dfc <controleRednek+0x274>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	2b7f      	cmp	r3, #127	@ 0x7f
 8001dc0:	dc0b      	bgt.n	8001dda <controleRednek+0x252>
			sendPulseMotor = 330-Ydata;
 8001dc2:	4b0e      	ldr	r3, [pc, #56]	@ (8001dfc <controleRednek+0x274>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f5c3 73a5 	rsb	r3, r3, #330	@ 0x14a
 8001dca:	4a10      	ldr	r2, [pc, #64]	@ (8001e0c <controleRednek+0x284>)
 8001dcc:	6013      	str	r3, [r2, #0]
			Reculer(sendPulseMotor,&htim3);
 8001dce:	4b0f      	ldr	r3, [pc, #60]	@ (8001e0c <controleRednek+0x284>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	490b      	ldr	r1, [pc, #44]	@ (8001e00 <controleRednek+0x278>)
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f7ff fa87 	bl	80012e8 <Reculer>
}
 8001dda:	bf00      	nop
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bdb0      	pop	{r4, r5, r7, pc}
 8001de0:	51eb851f 	.word	0x51eb851f
 8001de4:	3fd51eb8 	.word	0x3fd51eb8
 8001de8:	51eb851f 	.word	0x51eb851f
 8001dec:	3fe51eb8 	.word	0x3fe51eb8
 8001df0:	20000048 	.word	0x20000048
 8001df4:	200001c4 	.word	0x200001c4
 8001df8:	200001e8 	.word	0x200001e8
 8001dfc:	200001ec 	.word	0x200001ec
 8001e00:	2000009c 	.word	0x2000009c
 8001e04:	2000000c 	.word	0x2000000c
 8001e08:	20000010 	.word	0x20000010
 8001e0c:	200001f8 	.word	0x200001f8

08001e10 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b082      	sub	sp, #8
 8001e14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e16:	2300      	movs	r3, #0
 8001e18:	607b      	str	r3, [r7, #4]
 8001e1a:	4b10      	ldr	r3, [pc, #64]	@ (8001e5c <HAL_MspInit+0x4c>)
 8001e1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e1e:	4a0f      	ldr	r2, [pc, #60]	@ (8001e5c <HAL_MspInit+0x4c>)
 8001e20:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e24:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e26:	4b0d      	ldr	r3, [pc, #52]	@ (8001e5c <HAL_MspInit+0x4c>)
 8001e28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e2a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e2e:	607b      	str	r3, [r7, #4]
 8001e30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e32:	2300      	movs	r3, #0
 8001e34:	603b      	str	r3, [r7, #0]
 8001e36:	4b09      	ldr	r3, [pc, #36]	@ (8001e5c <HAL_MspInit+0x4c>)
 8001e38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e3a:	4a08      	ldr	r2, [pc, #32]	@ (8001e5c <HAL_MspInit+0x4c>)
 8001e3c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e40:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e42:	4b06      	ldr	r3, [pc, #24]	@ (8001e5c <HAL_MspInit+0x4c>)
 8001e44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e4a:	603b      	str	r3, [r7, #0]
 8001e4c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001e4e:	2007      	movs	r0, #7
 8001e50:	f000 fb46 	bl	80024e0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e54:	bf00      	nop
 8001e56:	3708      	adds	r7, #8
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}
 8001e5c:	40023800 	.word	0x40023800

08001e60 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b08a      	sub	sp, #40	@ 0x28
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e68:	f107 0314 	add.w	r3, r7, #20
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	601a      	str	r2, [r3, #0]
 8001e70:	605a      	str	r2, [r3, #4]
 8001e72:	609a      	str	r2, [r3, #8]
 8001e74:	60da      	str	r2, [r3, #12]
 8001e76:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a19      	ldr	r2, [pc, #100]	@ (8001ee4 <HAL_I2C_MspInit+0x84>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d12c      	bne.n	8001edc <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e82:	2300      	movs	r3, #0
 8001e84:	613b      	str	r3, [r7, #16]
 8001e86:	4b18      	ldr	r3, [pc, #96]	@ (8001ee8 <HAL_I2C_MspInit+0x88>)
 8001e88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e8a:	4a17      	ldr	r2, [pc, #92]	@ (8001ee8 <HAL_I2C_MspInit+0x88>)
 8001e8c:	f043 0302 	orr.w	r3, r3, #2
 8001e90:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e92:	4b15      	ldr	r3, [pc, #84]	@ (8001ee8 <HAL_I2C_MspInit+0x88>)
 8001e94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e96:	f003 0302 	and.w	r3, r3, #2
 8001e9a:	613b      	str	r3, [r7, #16]
 8001e9c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001e9e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001ea2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ea4:	2312      	movs	r3, #18
 8001ea6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eac:	2303      	movs	r3, #3
 8001eae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001eb0:	2304      	movs	r3, #4
 8001eb2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001eb4:	f107 0314 	add.w	r3, r7, #20
 8001eb8:	4619      	mov	r1, r3
 8001eba:	480c      	ldr	r0, [pc, #48]	@ (8001eec <HAL_I2C_MspInit+0x8c>)
 8001ebc:	f000 fb52 	bl	8002564 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	60fb      	str	r3, [r7, #12]
 8001ec4:	4b08      	ldr	r3, [pc, #32]	@ (8001ee8 <HAL_I2C_MspInit+0x88>)
 8001ec6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ec8:	4a07      	ldr	r2, [pc, #28]	@ (8001ee8 <HAL_I2C_MspInit+0x88>)
 8001eca:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001ece:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ed0:	4b05      	ldr	r3, [pc, #20]	@ (8001ee8 <HAL_I2C_MspInit+0x88>)
 8001ed2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ed4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ed8:	60fb      	str	r3, [r7, #12]
 8001eda:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001edc:	bf00      	nop
 8001ede:	3728      	adds	r7, #40	@ 0x28
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd80      	pop	{r7, pc}
 8001ee4:	40005400 	.word	0x40005400
 8001ee8:	40023800 	.word	0x40023800
 8001eec:	40020400 	.word	0x40020400

08001ef0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b086      	sub	sp, #24
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a26      	ldr	r2, [pc, #152]	@ (8001f98 <HAL_TIM_Base_MspInit+0xa8>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d10e      	bne.n	8001f20 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001f02:	2300      	movs	r3, #0
 8001f04:	617b      	str	r3, [r7, #20]
 8001f06:	4b25      	ldr	r3, [pc, #148]	@ (8001f9c <HAL_TIM_Base_MspInit+0xac>)
 8001f08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f0a:	4a24      	ldr	r2, [pc, #144]	@ (8001f9c <HAL_TIM_Base_MspInit+0xac>)
 8001f0c:	f043 0302 	orr.w	r3, r3, #2
 8001f10:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f12:	4b22      	ldr	r3, [pc, #136]	@ (8001f9c <HAL_TIM_Base_MspInit+0xac>)
 8001f14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f16:	f003 0302 	and.w	r3, r3, #2
 8001f1a:	617b      	str	r3, [r7, #20]
 8001f1c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8001f1e:	e036      	b.n	8001f8e <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM6)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a1e      	ldr	r2, [pc, #120]	@ (8001fa0 <HAL_TIM_Base_MspInit+0xb0>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d116      	bne.n	8001f58 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	613b      	str	r3, [r7, #16]
 8001f2e:	4b1b      	ldr	r3, [pc, #108]	@ (8001f9c <HAL_TIM_Base_MspInit+0xac>)
 8001f30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f32:	4a1a      	ldr	r2, [pc, #104]	@ (8001f9c <HAL_TIM_Base_MspInit+0xac>)
 8001f34:	f043 0310 	orr.w	r3, r3, #16
 8001f38:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f3a:	4b18      	ldr	r3, [pc, #96]	@ (8001f9c <HAL_TIM_Base_MspInit+0xac>)
 8001f3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f3e:	f003 0310 	and.w	r3, r3, #16
 8001f42:	613b      	str	r3, [r7, #16]
 8001f44:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001f46:	2200      	movs	r2, #0
 8001f48:	2100      	movs	r1, #0
 8001f4a:	2036      	movs	r0, #54	@ 0x36
 8001f4c:	f000 fad3 	bl	80024f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001f50:	2036      	movs	r0, #54	@ 0x36
 8001f52:	f000 faec 	bl	800252e <HAL_NVIC_EnableIRQ>
}
 8001f56:	e01a      	b.n	8001f8e <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM7)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4a11      	ldr	r2, [pc, #68]	@ (8001fa4 <HAL_TIM_Base_MspInit+0xb4>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d115      	bne.n	8001f8e <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001f62:	2300      	movs	r3, #0
 8001f64:	60fb      	str	r3, [r7, #12]
 8001f66:	4b0d      	ldr	r3, [pc, #52]	@ (8001f9c <HAL_TIM_Base_MspInit+0xac>)
 8001f68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f6a:	4a0c      	ldr	r2, [pc, #48]	@ (8001f9c <HAL_TIM_Base_MspInit+0xac>)
 8001f6c:	f043 0320 	orr.w	r3, r3, #32
 8001f70:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f72:	4b0a      	ldr	r3, [pc, #40]	@ (8001f9c <HAL_TIM_Base_MspInit+0xac>)
 8001f74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f76:	f003 0320 	and.w	r3, r3, #32
 8001f7a:	60fb      	str	r3, [r7, #12]
 8001f7c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8001f7e:	2200      	movs	r2, #0
 8001f80:	2100      	movs	r1, #0
 8001f82:	2037      	movs	r0, #55	@ 0x37
 8001f84:	f000 fab7 	bl	80024f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001f88:	2037      	movs	r0, #55	@ 0x37
 8001f8a:	f000 fad0 	bl	800252e <HAL_NVIC_EnableIRQ>
}
 8001f8e:	bf00      	nop
 8001f90:	3718      	adds	r7, #24
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}
 8001f96:	bf00      	nop
 8001f98:	40000400 	.word	0x40000400
 8001f9c:	40023800 	.word	0x40023800
 8001fa0:	40001000 	.word	0x40001000
 8001fa4:	40001400 	.word	0x40001400

08001fa8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b08a      	sub	sp, #40	@ 0x28
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fb0:	f107 0314 	add.w	r3, r7, #20
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	601a      	str	r2, [r3, #0]
 8001fb8:	605a      	str	r2, [r3, #4]
 8001fba:	609a      	str	r2, [r3, #8]
 8001fbc:	60da      	str	r2, [r3, #12]
 8001fbe:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4a21      	ldr	r2, [pc, #132]	@ (800204c <HAL_TIM_MspPostInit+0xa4>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d13b      	bne.n	8002042 <HAL_TIM_MspPostInit+0x9a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fca:	2300      	movs	r3, #0
 8001fcc:	613b      	str	r3, [r7, #16]
 8001fce:	4b20      	ldr	r3, [pc, #128]	@ (8002050 <HAL_TIM_MspPostInit+0xa8>)
 8001fd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fd2:	4a1f      	ldr	r2, [pc, #124]	@ (8002050 <HAL_TIM_MspPostInit+0xa8>)
 8001fd4:	f043 0301 	orr.w	r3, r3, #1
 8001fd8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fda:	4b1d      	ldr	r3, [pc, #116]	@ (8002050 <HAL_TIM_MspPostInit+0xa8>)
 8001fdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fde:	f003 0301 	and.w	r3, r3, #1
 8001fe2:	613b      	str	r3, [r7, #16]
 8001fe4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	60fb      	str	r3, [r7, #12]
 8001fea:	4b19      	ldr	r3, [pc, #100]	@ (8002050 <HAL_TIM_MspPostInit+0xa8>)
 8001fec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fee:	4a18      	ldr	r2, [pc, #96]	@ (8002050 <HAL_TIM_MspPostInit+0xa8>)
 8001ff0:	f043 0302 	orr.w	r3, r3, #2
 8001ff4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ff6:	4b16      	ldr	r3, [pc, #88]	@ (8002050 <HAL_TIM_MspPostInit+0xa8>)
 8001ff8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ffa:	f003 0302 	and.w	r3, r3, #2
 8001ffe:	60fb      	str	r3, [r7, #12]
 8002000:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = Gauche_av_Pin|Gauche_re_Pin;
 8002002:	23c0      	movs	r3, #192	@ 0xc0
 8002004:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002006:	2302      	movs	r3, #2
 8002008:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800200a:	2300      	movs	r3, #0
 800200c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800200e:	2300      	movs	r3, #0
 8002010:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002012:	2302      	movs	r3, #2
 8002014:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002016:	f107 0314 	add.w	r3, r7, #20
 800201a:	4619      	mov	r1, r3
 800201c:	480d      	ldr	r0, [pc, #52]	@ (8002054 <HAL_TIM_MspPostInit+0xac>)
 800201e:	f000 faa1 	bl	8002564 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Droit_av_Pin|Droit_re_Pin;
 8002022:	2303      	movs	r3, #3
 8002024:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002026:	2302      	movs	r3, #2
 8002028:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800202a:	2300      	movs	r3, #0
 800202c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800202e:	2300      	movs	r3, #0
 8002030:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002032:	2302      	movs	r3, #2
 8002034:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002036:	f107 0314 	add.w	r3, r7, #20
 800203a:	4619      	mov	r1, r3
 800203c:	4806      	ldr	r0, [pc, #24]	@ (8002058 <HAL_TIM_MspPostInit+0xb0>)
 800203e:	f000 fa91 	bl	8002564 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002042:	bf00      	nop
 8002044:	3728      	adds	r7, #40	@ 0x28
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}
 800204a:	bf00      	nop
 800204c:	40000400 	.word	0x40000400
 8002050:	40023800 	.word	0x40023800
 8002054:	40020000 	.word	0x40020000
 8002058:	40020400 	.word	0x40020400

0800205c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b08a      	sub	sp, #40	@ 0x28
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002064:	f107 0314 	add.w	r3, r7, #20
 8002068:	2200      	movs	r2, #0
 800206a:	601a      	str	r2, [r3, #0]
 800206c:	605a      	str	r2, [r3, #4]
 800206e:	609a      	str	r2, [r3, #8]
 8002070:	60da      	str	r2, [r3, #12]
 8002072:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a19      	ldr	r2, [pc, #100]	@ (80020e0 <HAL_UART_MspInit+0x84>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d12b      	bne.n	80020d6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800207e:	2300      	movs	r3, #0
 8002080:	613b      	str	r3, [r7, #16]
 8002082:	4b18      	ldr	r3, [pc, #96]	@ (80020e4 <HAL_UART_MspInit+0x88>)
 8002084:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002086:	4a17      	ldr	r2, [pc, #92]	@ (80020e4 <HAL_UART_MspInit+0x88>)
 8002088:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800208c:	6413      	str	r3, [r2, #64]	@ 0x40
 800208e:	4b15      	ldr	r3, [pc, #84]	@ (80020e4 <HAL_UART_MspInit+0x88>)
 8002090:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002092:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002096:	613b      	str	r3, [r7, #16]
 8002098:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800209a:	2300      	movs	r3, #0
 800209c:	60fb      	str	r3, [r7, #12]
 800209e:	4b11      	ldr	r3, [pc, #68]	@ (80020e4 <HAL_UART_MspInit+0x88>)
 80020a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020a2:	4a10      	ldr	r2, [pc, #64]	@ (80020e4 <HAL_UART_MspInit+0x88>)
 80020a4:	f043 0301 	orr.w	r3, r3, #1
 80020a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80020aa:	4b0e      	ldr	r3, [pc, #56]	@ (80020e4 <HAL_UART_MspInit+0x88>)
 80020ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020ae:	f003 0301 	and.w	r3, r3, #1
 80020b2:	60fb      	str	r3, [r7, #12]
 80020b4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80020b6:	230c      	movs	r3, #12
 80020b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020ba:	2302      	movs	r3, #2
 80020bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020be:	2300      	movs	r3, #0
 80020c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020c2:	2303      	movs	r3, #3
 80020c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80020c6:	2307      	movs	r3, #7
 80020c8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020ca:	f107 0314 	add.w	r3, r7, #20
 80020ce:	4619      	mov	r1, r3
 80020d0:	4805      	ldr	r0, [pc, #20]	@ (80020e8 <HAL_UART_MspInit+0x8c>)
 80020d2:	f000 fa47 	bl	8002564 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80020d6:	bf00      	nop
 80020d8:	3728      	adds	r7, #40	@ 0x28
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}
 80020de:	bf00      	nop
 80020e0:	40004400 	.word	0x40004400
 80020e4:	40023800 	.word	0x40023800
 80020e8:	40020000 	.word	0x40020000

080020ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020ec:	b480      	push	{r7}
 80020ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80020f0:	bf00      	nop
 80020f2:	e7fd      	b.n	80020f0 <NMI_Handler+0x4>

080020f4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020f4:	b480      	push	{r7}
 80020f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020f8:	bf00      	nop
 80020fa:	e7fd      	b.n	80020f8 <HardFault_Handler+0x4>

080020fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020fc:	b480      	push	{r7}
 80020fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002100:	bf00      	nop
 8002102:	e7fd      	b.n	8002100 <MemManage_Handler+0x4>

08002104 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002104:	b480      	push	{r7}
 8002106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002108:	bf00      	nop
 800210a:	e7fd      	b.n	8002108 <BusFault_Handler+0x4>

0800210c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800210c:	b480      	push	{r7}
 800210e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002110:	bf00      	nop
 8002112:	e7fd      	b.n	8002110 <UsageFault_Handler+0x4>

08002114 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002114:	b480      	push	{r7}
 8002116:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002118:	bf00      	nop
 800211a:	46bd      	mov	sp, r7
 800211c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002120:	4770      	bx	lr

08002122 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002122:	b480      	push	{r7}
 8002124:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002126:	bf00      	nop
 8002128:	46bd      	mov	sp, r7
 800212a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212e:	4770      	bx	lr

08002130 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002130:	b480      	push	{r7}
 8002132:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002134:	bf00      	nop
 8002136:	46bd      	mov	sp, r7
 8002138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213c:	4770      	bx	lr

0800213e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800213e:	b580      	push	{r7, lr}
 8002140:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002142:	f000 f8b9 	bl	80022b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002146:	bf00      	nop
 8002148:	bd80      	pop	{r7, pc}

0800214a <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800214a:	b580      	push	{r7, lr}
 800214c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Encodeur_G_A_Pin);
 800214e:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8002152:	f000 fbcd 	bl	80028f0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Encodeur_D_A_Pin);
 8002156:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800215a:	f000 fbc9 	bl	80028f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800215e:	bf00      	nop
 8002160:	bd80      	pop	{r7, pc}

08002162 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002162:	b580      	push	{r7, lr}
 8002164:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Blue_Button_Pin);
 8002166:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800216a:	f000 fbc1 	bl	80028f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800216e:	bf00      	nop
 8002170:	bd80      	pop	{r7, pc}
	...

08002174 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002178:	4802      	ldr	r0, [pc, #8]	@ (8002184 <TIM6_DAC_IRQHandler+0x10>)
 800217a:	f002 fbc3 	bl	8004904 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800217e:	bf00      	nop
 8002180:	bd80      	pop	{r7, pc}
 8002182:	bf00      	nop
 8002184:	200000e4 	.word	0x200000e4

08002188 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800218c:	4802      	ldr	r0, [pc, #8]	@ (8002198 <TIM7_IRQHandler+0x10>)
 800218e:	f002 fbb9 	bl	8004904 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8002192:	bf00      	nop
 8002194:	bd80      	pop	{r7, pc}
 8002196:	bf00      	nop
 8002198:	2000012c 	.word	0x2000012c

0800219c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800219c:	b480      	push	{r7}
 800219e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80021a0:	4b06      	ldr	r3, [pc, #24]	@ (80021bc <SystemInit+0x20>)
 80021a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021a6:	4a05      	ldr	r2, [pc, #20]	@ (80021bc <SystemInit+0x20>)
 80021a8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80021ac:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80021b0:	bf00      	nop
 80021b2:	46bd      	mov	sp, r7
 80021b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b8:	4770      	bx	lr
 80021ba:	bf00      	nop
 80021bc:	e000ed00 	.word	0xe000ed00

080021c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80021c0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80021f8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80021c4:	f7ff ffea 	bl	800219c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80021c8:	480c      	ldr	r0, [pc, #48]	@ (80021fc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80021ca:	490d      	ldr	r1, [pc, #52]	@ (8002200 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80021cc:	4a0d      	ldr	r2, [pc, #52]	@ (8002204 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80021ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80021d0:	e002      	b.n	80021d8 <LoopCopyDataInit>

080021d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80021d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80021d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80021d6:	3304      	adds	r3, #4

080021d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80021d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80021da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021dc:	d3f9      	bcc.n	80021d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021de:	4a0a      	ldr	r2, [pc, #40]	@ (8002208 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80021e0:	4c0a      	ldr	r4, [pc, #40]	@ (800220c <LoopFillZerobss+0x22>)
  movs r3, #0
 80021e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021e4:	e001      	b.n	80021ea <LoopFillZerobss>

080021e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021e8:	3204      	adds	r2, #4

080021ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021ec:	d3fb      	bcc.n	80021e6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80021ee:	f003 fca3 	bl	8005b38 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80021f2:	f7ff f8cb 	bl	800138c <main>
  bx  lr    
 80021f6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80021f8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80021fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002200:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 8002204:	08005bd0 	.word	0x08005bd0
  ldr r2, =_sbss
 8002208:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 800220c:	20000200 	.word	0x20000200

08002210 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002210:	e7fe      	b.n	8002210 <ADC_IRQHandler>
	...

08002214 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002218:	4b0e      	ldr	r3, [pc, #56]	@ (8002254 <HAL_Init+0x40>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4a0d      	ldr	r2, [pc, #52]	@ (8002254 <HAL_Init+0x40>)
 800221e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002222:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002224:	4b0b      	ldr	r3, [pc, #44]	@ (8002254 <HAL_Init+0x40>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a0a      	ldr	r2, [pc, #40]	@ (8002254 <HAL_Init+0x40>)
 800222a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800222e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002230:	4b08      	ldr	r3, [pc, #32]	@ (8002254 <HAL_Init+0x40>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4a07      	ldr	r2, [pc, #28]	@ (8002254 <HAL_Init+0x40>)
 8002236:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800223a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800223c:	2003      	movs	r0, #3
 800223e:	f000 f94f 	bl	80024e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002242:	2000      	movs	r0, #0
 8002244:	f000 f808 	bl	8002258 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002248:	f7ff fde2 	bl	8001e10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800224c:	2300      	movs	r3, #0
}
 800224e:	4618      	mov	r0, r3
 8002250:	bd80      	pop	{r7, pc}
 8002252:	bf00      	nop
 8002254:	40023c00 	.word	0x40023c00

08002258 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b082      	sub	sp, #8
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002260:	4b12      	ldr	r3, [pc, #72]	@ (80022ac <HAL_InitTick+0x54>)
 8002262:	681a      	ldr	r2, [r3, #0]
 8002264:	4b12      	ldr	r3, [pc, #72]	@ (80022b0 <HAL_InitTick+0x58>)
 8002266:	781b      	ldrb	r3, [r3, #0]
 8002268:	4619      	mov	r1, r3
 800226a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800226e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002272:	fbb2 f3f3 	udiv	r3, r2, r3
 8002276:	4618      	mov	r0, r3
 8002278:	f000 f967 	bl	800254a <HAL_SYSTICK_Config>
 800227c:	4603      	mov	r3, r0
 800227e:	2b00      	cmp	r3, #0
 8002280:	d001      	beq.n	8002286 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002282:	2301      	movs	r3, #1
 8002284:	e00e      	b.n	80022a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2b0f      	cmp	r3, #15
 800228a:	d80a      	bhi.n	80022a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800228c:	2200      	movs	r2, #0
 800228e:	6879      	ldr	r1, [r7, #4]
 8002290:	f04f 30ff 	mov.w	r0, #4294967295
 8002294:	f000 f92f 	bl	80024f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002298:	4a06      	ldr	r2, [pc, #24]	@ (80022b4 <HAL_InitTick+0x5c>)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800229e:	2300      	movs	r3, #0
 80022a0:	e000      	b.n	80022a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80022a2:	2301      	movs	r3, #1
}
 80022a4:	4618      	mov	r0, r3
 80022a6:	3708      	adds	r7, #8
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bd80      	pop	{r7, pc}
 80022ac:	20000014 	.word	0x20000014
 80022b0:	2000001c 	.word	0x2000001c
 80022b4:	20000018 	.word	0x20000018

080022b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022b8:	b480      	push	{r7}
 80022ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80022bc:	4b06      	ldr	r3, [pc, #24]	@ (80022d8 <HAL_IncTick+0x20>)
 80022be:	781b      	ldrb	r3, [r3, #0]
 80022c0:	461a      	mov	r2, r3
 80022c2:	4b06      	ldr	r3, [pc, #24]	@ (80022dc <HAL_IncTick+0x24>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4413      	add	r3, r2
 80022c8:	4a04      	ldr	r2, [pc, #16]	@ (80022dc <HAL_IncTick+0x24>)
 80022ca:	6013      	str	r3, [r2, #0]
}
 80022cc:	bf00      	nop
 80022ce:	46bd      	mov	sp, r7
 80022d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d4:	4770      	bx	lr
 80022d6:	bf00      	nop
 80022d8:	2000001c 	.word	0x2000001c
 80022dc:	200001fc 	.word	0x200001fc

080022e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022e0:	b480      	push	{r7}
 80022e2:	af00      	add	r7, sp, #0
  return uwTick;
 80022e4:	4b03      	ldr	r3, [pc, #12]	@ (80022f4 <HAL_GetTick+0x14>)
 80022e6:	681b      	ldr	r3, [r3, #0]
}
 80022e8:	4618      	mov	r0, r3
 80022ea:	46bd      	mov	sp, r7
 80022ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f0:	4770      	bx	lr
 80022f2:	bf00      	nop
 80022f4:	200001fc 	.word	0x200001fc

080022f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b084      	sub	sp, #16
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002300:	f7ff ffee 	bl	80022e0 <HAL_GetTick>
 8002304:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002310:	d005      	beq.n	800231e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002312:	4b0a      	ldr	r3, [pc, #40]	@ (800233c <HAL_Delay+0x44>)
 8002314:	781b      	ldrb	r3, [r3, #0]
 8002316:	461a      	mov	r2, r3
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	4413      	add	r3, r2
 800231c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800231e:	bf00      	nop
 8002320:	f7ff ffde 	bl	80022e0 <HAL_GetTick>
 8002324:	4602      	mov	r2, r0
 8002326:	68bb      	ldr	r3, [r7, #8]
 8002328:	1ad3      	subs	r3, r2, r3
 800232a:	68fa      	ldr	r2, [r7, #12]
 800232c:	429a      	cmp	r2, r3
 800232e:	d8f7      	bhi.n	8002320 <HAL_Delay+0x28>
  {
  }
}
 8002330:	bf00      	nop
 8002332:	bf00      	nop
 8002334:	3710      	adds	r7, #16
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}
 800233a:	bf00      	nop
 800233c:	2000001c 	.word	0x2000001c

08002340 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002340:	b480      	push	{r7}
 8002342:	b085      	sub	sp, #20
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	f003 0307 	and.w	r3, r3, #7
 800234e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002350:	4b0c      	ldr	r3, [pc, #48]	@ (8002384 <__NVIC_SetPriorityGrouping+0x44>)
 8002352:	68db      	ldr	r3, [r3, #12]
 8002354:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002356:	68ba      	ldr	r2, [r7, #8]
 8002358:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800235c:	4013      	ands	r3, r2
 800235e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002364:	68bb      	ldr	r3, [r7, #8]
 8002366:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002368:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800236c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002370:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002372:	4a04      	ldr	r2, [pc, #16]	@ (8002384 <__NVIC_SetPriorityGrouping+0x44>)
 8002374:	68bb      	ldr	r3, [r7, #8]
 8002376:	60d3      	str	r3, [r2, #12]
}
 8002378:	bf00      	nop
 800237a:	3714      	adds	r7, #20
 800237c:	46bd      	mov	sp, r7
 800237e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002382:	4770      	bx	lr
 8002384:	e000ed00 	.word	0xe000ed00

08002388 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002388:	b480      	push	{r7}
 800238a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800238c:	4b04      	ldr	r3, [pc, #16]	@ (80023a0 <__NVIC_GetPriorityGrouping+0x18>)
 800238e:	68db      	ldr	r3, [r3, #12]
 8002390:	0a1b      	lsrs	r3, r3, #8
 8002392:	f003 0307 	and.w	r3, r3, #7
}
 8002396:	4618      	mov	r0, r3
 8002398:	46bd      	mov	sp, r7
 800239a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239e:	4770      	bx	lr
 80023a0:	e000ed00 	.word	0xe000ed00

080023a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023a4:	b480      	push	{r7}
 80023a6:	b083      	sub	sp, #12
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	4603      	mov	r3, r0
 80023ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	db0b      	blt.n	80023ce <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023b6:	79fb      	ldrb	r3, [r7, #7]
 80023b8:	f003 021f 	and.w	r2, r3, #31
 80023bc:	4907      	ldr	r1, [pc, #28]	@ (80023dc <__NVIC_EnableIRQ+0x38>)
 80023be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023c2:	095b      	lsrs	r3, r3, #5
 80023c4:	2001      	movs	r0, #1
 80023c6:	fa00 f202 	lsl.w	r2, r0, r2
 80023ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80023ce:	bf00      	nop
 80023d0:	370c      	adds	r7, #12
 80023d2:	46bd      	mov	sp, r7
 80023d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d8:	4770      	bx	lr
 80023da:	bf00      	nop
 80023dc:	e000e100 	.word	0xe000e100

080023e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023e0:	b480      	push	{r7}
 80023e2:	b083      	sub	sp, #12
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	4603      	mov	r3, r0
 80023e8:	6039      	str	r1, [r7, #0]
 80023ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	db0a      	blt.n	800240a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	b2da      	uxtb	r2, r3
 80023f8:	490c      	ldr	r1, [pc, #48]	@ (800242c <__NVIC_SetPriority+0x4c>)
 80023fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023fe:	0112      	lsls	r2, r2, #4
 8002400:	b2d2      	uxtb	r2, r2
 8002402:	440b      	add	r3, r1
 8002404:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002408:	e00a      	b.n	8002420 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	b2da      	uxtb	r2, r3
 800240e:	4908      	ldr	r1, [pc, #32]	@ (8002430 <__NVIC_SetPriority+0x50>)
 8002410:	79fb      	ldrb	r3, [r7, #7]
 8002412:	f003 030f 	and.w	r3, r3, #15
 8002416:	3b04      	subs	r3, #4
 8002418:	0112      	lsls	r2, r2, #4
 800241a:	b2d2      	uxtb	r2, r2
 800241c:	440b      	add	r3, r1
 800241e:	761a      	strb	r2, [r3, #24]
}
 8002420:	bf00      	nop
 8002422:	370c      	adds	r7, #12
 8002424:	46bd      	mov	sp, r7
 8002426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242a:	4770      	bx	lr
 800242c:	e000e100 	.word	0xe000e100
 8002430:	e000ed00 	.word	0xe000ed00

08002434 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002434:	b480      	push	{r7}
 8002436:	b089      	sub	sp, #36	@ 0x24
 8002438:	af00      	add	r7, sp, #0
 800243a:	60f8      	str	r0, [r7, #12]
 800243c:	60b9      	str	r1, [r7, #8]
 800243e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	f003 0307 	and.w	r3, r3, #7
 8002446:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002448:	69fb      	ldr	r3, [r7, #28]
 800244a:	f1c3 0307 	rsb	r3, r3, #7
 800244e:	2b04      	cmp	r3, #4
 8002450:	bf28      	it	cs
 8002452:	2304      	movcs	r3, #4
 8002454:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002456:	69fb      	ldr	r3, [r7, #28]
 8002458:	3304      	adds	r3, #4
 800245a:	2b06      	cmp	r3, #6
 800245c:	d902      	bls.n	8002464 <NVIC_EncodePriority+0x30>
 800245e:	69fb      	ldr	r3, [r7, #28]
 8002460:	3b03      	subs	r3, #3
 8002462:	e000      	b.n	8002466 <NVIC_EncodePriority+0x32>
 8002464:	2300      	movs	r3, #0
 8002466:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002468:	f04f 32ff 	mov.w	r2, #4294967295
 800246c:	69bb      	ldr	r3, [r7, #24]
 800246e:	fa02 f303 	lsl.w	r3, r2, r3
 8002472:	43da      	mvns	r2, r3
 8002474:	68bb      	ldr	r3, [r7, #8]
 8002476:	401a      	ands	r2, r3
 8002478:	697b      	ldr	r3, [r7, #20]
 800247a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800247c:	f04f 31ff 	mov.w	r1, #4294967295
 8002480:	697b      	ldr	r3, [r7, #20]
 8002482:	fa01 f303 	lsl.w	r3, r1, r3
 8002486:	43d9      	mvns	r1, r3
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800248c:	4313      	orrs	r3, r2
         );
}
 800248e:	4618      	mov	r0, r3
 8002490:	3724      	adds	r7, #36	@ 0x24
 8002492:	46bd      	mov	sp, r7
 8002494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002498:	4770      	bx	lr
	...

0800249c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b082      	sub	sp, #8
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	3b01      	subs	r3, #1
 80024a8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80024ac:	d301      	bcc.n	80024b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024ae:	2301      	movs	r3, #1
 80024b0:	e00f      	b.n	80024d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024b2:	4a0a      	ldr	r2, [pc, #40]	@ (80024dc <SysTick_Config+0x40>)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	3b01      	subs	r3, #1
 80024b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024ba:	210f      	movs	r1, #15
 80024bc:	f04f 30ff 	mov.w	r0, #4294967295
 80024c0:	f7ff ff8e 	bl	80023e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024c4:	4b05      	ldr	r3, [pc, #20]	@ (80024dc <SysTick_Config+0x40>)
 80024c6:	2200      	movs	r2, #0
 80024c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024ca:	4b04      	ldr	r3, [pc, #16]	@ (80024dc <SysTick_Config+0x40>)
 80024cc:	2207      	movs	r2, #7
 80024ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024d0:	2300      	movs	r3, #0
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	3708      	adds	r7, #8
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}
 80024da:	bf00      	nop
 80024dc:	e000e010 	.word	0xe000e010

080024e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b082      	sub	sp, #8
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024e8:	6878      	ldr	r0, [r7, #4]
 80024ea:	f7ff ff29 	bl	8002340 <__NVIC_SetPriorityGrouping>
}
 80024ee:	bf00      	nop
 80024f0:	3708      	adds	r7, #8
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}

080024f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80024f6:	b580      	push	{r7, lr}
 80024f8:	b086      	sub	sp, #24
 80024fa:	af00      	add	r7, sp, #0
 80024fc:	4603      	mov	r3, r0
 80024fe:	60b9      	str	r1, [r7, #8]
 8002500:	607a      	str	r2, [r7, #4]
 8002502:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002504:	2300      	movs	r3, #0
 8002506:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002508:	f7ff ff3e 	bl	8002388 <__NVIC_GetPriorityGrouping>
 800250c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800250e:	687a      	ldr	r2, [r7, #4]
 8002510:	68b9      	ldr	r1, [r7, #8]
 8002512:	6978      	ldr	r0, [r7, #20]
 8002514:	f7ff ff8e 	bl	8002434 <NVIC_EncodePriority>
 8002518:	4602      	mov	r2, r0
 800251a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800251e:	4611      	mov	r1, r2
 8002520:	4618      	mov	r0, r3
 8002522:	f7ff ff5d 	bl	80023e0 <__NVIC_SetPriority>
}
 8002526:	bf00      	nop
 8002528:	3718      	adds	r7, #24
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}

0800252e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800252e:	b580      	push	{r7, lr}
 8002530:	b082      	sub	sp, #8
 8002532:	af00      	add	r7, sp, #0
 8002534:	4603      	mov	r3, r0
 8002536:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002538:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800253c:	4618      	mov	r0, r3
 800253e:	f7ff ff31 	bl	80023a4 <__NVIC_EnableIRQ>
}
 8002542:	bf00      	nop
 8002544:	3708      	adds	r7, #8
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}

0800254a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800254a:	b580      	push	{r7, lr}
 800254c:	b082      	sub	sp, #8
 800254e:	af00      	add	r7, sp, #0
 8002550:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002552:	6878      	ldr	r0, [r7, #4]
 8002554:	f7ff ffa2 	bl	800249c <SysTick_Config>
 8002558:	4603      	mov	r3, r0
}
 800255a:	4618      	mov	r0, r3
 800255c:	3708      	adds	r7, #8
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}
	...

08002564 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002564:	b480      	push	{r7}
 8002566:	b089      	sub	sp, #36	@ 0x24
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
 800256c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800256e:	2300      	movs	r3, #0
 8002570:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002572:	2300      	movs	r3, #0
 8002574:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002576:	2300      	movs	r3, #0
 8002578:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800257a:	2300      	movs	r3, #0
 800257c:	61fb      	str	r3, [r7, #28]
 800257e:	e165      	b.n	800284c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002580:	2201      	movs	r2, #1
 8002582:	69fb      	ldr	r3, [r7, #28]
 8002584:	fa02 f303 	lsl.w	r3, r2, r3
 8002588:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	697a      	ldr	r2, [r7, #20]
 8002590:	4013      	ands	r3, r2
 8002592:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002594:	693a      	ldr	r2, [r7, #16]
 8002596:	697b      	ldr	r3, [r7, #20]
 8002598:	429a      	cmp	r2, r3
 800259a:	f040 8154 	bne.w	8002846 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	f003 0303 	and.w	r3, r3, #3
 80025a6:	2b01      	cmp	r3, #1
 80025a8:	d005      	beq.n	80025b6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80025b2:	2b02      	cmp	r3, #2
 80025b4:	d130      	bne.n	8002618 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	689b      	ldr	r3, [r3, #8]
 80025ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80025bc:	69fb      	ldr	r3, [r7, #28]
 80025be:	005b      	lsls	r3, r3, #1
 80025c0:	2203      	movs	r2, #3
 80025c2:	fa02 f303 	lsl.w	r3, r2, r3
 80025c6:	43db      	mvns	r3, r3
 80025c8:	69ba      	ldr	r2, [r7, #24]
 80025ca:	4013      	ands	r3, r2
 80025cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	68da      	ldr	r2, [r3, #12]
 80025d2:	69fb      	ldr	r3, [r7, #28]
 80025d4:	005b      	lsls	r3, r3, #1
 80025d6:	fa02 f303 	lsl.w	r3, r2, r3
 80025da:	69ba      	ldr	r2, [r7, #24]
 80025dc:	4313      	orrs	r3, r2
 80025de:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	69ba      	ldr	r2, [r7, #24]
 80025e4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80025ec:	2201      	movs	r2, #1
 80025ee:	69fb      	ldr	r3, [r7, #28]
 80025f0:	fa02 f303 	lsl.w	r3, r2, r3
 80025f4:	43db      	mvns	r3, r3
 80025f6:	69ba      	ldr	r2, [r7, #24]
 80025f8:	4013      	ands	r3, r2
 80025fa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	091b      	lsrs	r3, r3, #4
 8002602:	f003 0201 	and.w	r2, r3, #1
 8002606:	69fb      	ldr	r3, [r7, #28]
 8002608:	fa02 f303 	lsl.w	r3, r2, r3
 800260c:	69ba      	ldr	r2, [r7, #24]
 800260e:	4313      	orrs	r3, r2
 8002610:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	69ba      	ldr	r2, [r7, #24]
 8002616:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	f003 0303 	and.w	r3, r3, #3
 8002620:	2b03      	cmp	r3, #3
 8002622:	d017      	beq.n	8002654 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	68db      	ldr	r3, [r3, #12]
 8002628:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800262a:	69fb      	ldr	r3, [r7, #28]
 800262c:	005b      	lsls	r3, r3, #1
 800262e:	2203      	movs	r2, #3
 8002630:	fa02 f303 	lsl.w	r3, r2, r3
 8002634:	43db      	mvns	r3, r3
 8002636:	69ba      	ldr	r2, [r7, #24]
 8002638:	4013      	ands	r3, r2
 800263a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	689a      	ldr	r2, [r3, #8]
 8002640:	69fb      	ldr	r3, [r7, #28]
 8002642:	005b      	lsls	r3, r3, #1
 8002644:	fa02 f303 	lsl.w	r3, r2, r3
 8002648:	69ba      	ldr	r2, [r7, #24]
 800264a:	4313      	orrs	r3, r2
 800264c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	69ba      	ldr	r2, [r7, #24]
 8002652:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	f003 0303 	and.w	r3, r3, #3
 800265c:	2b02      	cmp	r3, #2
 800265e:	d123      	bne.n	80026a8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002660:	69fb      	ldr	r3, [r7, #28]
 8002662:	08da      	lsrs	r2, r3, #3
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	3208      	adds	r2, #8
 8002668:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800266c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800266e:	69fb      	ldr	r3, [r7, #28]
 8002670:	f003 0307 	and.w	r3, r3, #7
 8002674:	009b      	lsls	r3, r3, #2
 8002676:	220f      	movs	r2, #15
 8002678:	fa02 f303 	lsl.w	r3, r2, r3
 800267c:	43db      	mvns	r3, r3
 800267e:	69ba      	ldr	r2, [r7, #24]
 8002680:	4013      	ands	r3, r2
 8002682:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	691a      	ldr	r2, [r3, #16]
 8002688:	69fb      	ldr	r3, [r7, #28]
 800268a:	f003 0307 	and.w	r3, r3, #7
 800268e:	009b      	lsls	r3, r3, #2
 8002690:	fa02 f303 	lsl.w	r3, r2, r3
 8002694:	69ba      	ldr	r2, [r7, #24]
 8002696:	4313      	orrs	r3, r2
 8002698:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800269a:	69fb      	ldr	r3, [r7, #28]
 800269c:	08da      	lsrs	r2, r3, #3
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	3208      	adds	r2, #8
 80026a2:	69b9      	ldr	r1, [r7, #24]
 80026a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80026ae:	69fb      	ldr	r3, [r7, #28]
 80026b0:	005b      	lsls	r3, r3, #1
 80026b2:	2203      	movs	r2, #3
 80026b4:	fa02 f303 	lsl.w	r3, r2, r3
 80026b8:	43db      	mvns	r3, r3
 80026ba:	69ba      	ldr	r2, [r7, #24]
 80026bc:	4013      	ands	r3, r2
 80026be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	f003 0203 	and.w	r2, r3, #3
 80026c8:	69fb      	ldr	r3, [r7, #28]
 80026ca:	005b      	lsls	r3, r3, #1
 80026cc:	fa02 f303 	lsl.w	r3, r2, r3
 80026d0:	69ba      	ldr	r2, [r7, #24]
 80026d2:	4313      	orrs	r3, r2
 80026d4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	69ba      	ldr	r2, [r7, #24]
 80026da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	f000 80ae 	beq.w	8002846 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026ea:	2300      	movs	r3, #0
 80026ec:	60fb      	str	r3, [r7, #12]
 80026ee:	4b5d      	ldr	r3, [pc, #372]	@ (8002864 <HAL_GPIO_Init+0x300>)
 80026f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026f2:	4a5c      	ldr	r2, [pc, #368]	@ (8002864 <HAL_GPIO_Init+0x300>)
 80026f4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80026f8:	6453      	str	r3, [r2, #68]	@ 0x44
 80026fa:	4b5a      	ldr	r3, [pc, #360]	@ (8002864 <HAL_GPIO_Init+0x300>)
 80026fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026fe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002702:	60fb      	str	r3, [r7, #12]
 8002704:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002706:	4a58      	ldr	r2, [pc, #352]	@ (8002868 <HAL_GPIO_Init+0x304>)
 8002708:	69fb      	ldr	r3, [r7, #28]
 800270a:	089b      	lsrs	r3, r3, #2
 800270c:	3302      	adds	r3, #2
 800270e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002712:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002714:	69fb      	ldr	r3, [r7, #28]
 8002716:	f003 0303 	and.w	r3, r3, #3
 800271a:	009b      	lsls	r3, r3, #2
 800271c:	220f      	movs	r2, #15
 800271e:	fa02 f303 	lsl.w	r3, r2, r3
 8002722:	43db      	mvns	r3, r3
 8002724:	69ba      	ldr	r2, [r7, #24]
 8002726:	4013      	ands	r3, r2
 8002728:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	4a4f      	ldr	r2, [pc, #316]	@ (800286c <HAL_GPIO_Init+0x308>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d025      	beq.n	800277e <HAL_GPIO_Init+0x21a>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	4a4e      	ldr	r2, [pc, #312]	@ (8002870 <HAL_GPIO_Init+0x30c>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d01f      	beq.n	800277a <HAL_GPIO_Init+0x216>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	4a4d      	ldr	r2, [pc, #308]	@ (8002874 <HAL_GPIO_Init+0x310>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d019      	beq.n	8002776 <HAL_GPIO_Init+0x212>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	4a4c      	ldr	r2, [pc, #304]	@ (8002878 <HAL_GPIO_Init+0x314>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d013      	beq.n	8002772 <HAL_GPIO_Init+0x20e>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	4a4b      	ldr	r2, [pc, #300]	@ (800287c <HAL_GPIO_Init+0x318>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d00d      	beq.n	800276e <HAL_GPIO_Init+0x20a>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	4a4a      	ldr	r2, [pc, #296]	@ (8002880 <HAL_GPIO_Init+0x31c>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d007      	beq.n	800276a <HAL_GPIO_Init+0x206>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	4a49      	ldr	r2, [pc, #292]	@ (8002884 <HAL_GPIO_Init+0x320>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d101      	bne.n	8002766 <HAL_GPIO_Init+0x202>
 8002762:	2306      	movs	r3, #6
 8002764:	e00c      	b.n	8002780 <HAL_GPIO_Init+0x21c>
 8002766:	2307      	movs	r3, #7
 8002768:	e00a      	b.n	8002780 <HAL_GPIO_Init+0x21c>
 800276a:	2305      	movs	r3, #5
 800276c:	e008      	b.n	8002780 <HAL_GPIO_Init+0x21c>
 800276e:	2304      	movs	r3, #4
 8002770:	e006      	b.n	8002780 <HAL_GPIO_Init+0x21c>
 8002772:	2303      	movs	r3, #3
 8002774:	e004      	b.n	8002780 <HAL_GPIO_Init+0x21c>
 8002776:	2302      	movs	r3, #2
 8002778:	e002      	b.n	8002780 <HAL_GPIO_Init+0x21c>
 800277a:	2301      	movs	r3, #1
 800277c:	e000      	b.n	8002780 <HAL_GPIO_Init+0x21c>
 800277e:	2300      	movs	r3, #0
 8002780:	69fa      	ldr	r2, [r7, #28]
 8002782:	f002 0203 	and.w	r2, r2, #3
 8002786:	0092      	lsls	r2, r2, #2
 8002788:	4093      	lsls	r3, r2
 800278a:	69ba      	ldr	r2, [r7, #24]
 800278c:	4313      	orrs	r3, r2
 800278e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002790:	4935      	ldr	r1, [pc, #212]	@ (8002868 <HAL_GPIO_Init+0x304>)
 8002792:	69fb      	ldr	r3, [r7, #28]
 8002794:	089b      	lsrs	r3, r3, #2
 8002796:	3302      	adds	r3, #2
 8002798:	69ba      	ldr	r2, [r7, #24]
 800279a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800279e:	4b3a      	ldr	r3, [pc, #232]	@ (8002888 <HAL_GPIO_Init+0x324>)
 80027a0:	689b      	ldr	r3, [r3, #8]
 80027a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027a4:	693b      	ldr	r3, [r7, #16]
 80027a6:	43db      	mvns	r3, r3
 80027a8:	69ba      	ldr	r2, [r7, #24]
 80027aa:	4013      	ands	r3, r2
 80027ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d003      	beq.n	80027c2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80027ba:	69ba      	ldr	r2, [r7, #24]
 80027bc:	693b      	ldr	r3, [r7, #16]
 80027be:	4313      	orrs	r3, r2
 80027c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80027c2:	4a31      	ldr	r2, [pc, #196]	@ (8002888 <HAL_GPIO_Init+0x324>)
 80027c4:	69bb      	ldr	r3, [r7, #24]
 80027c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80027c8:	4b2f      	ldr	r3, [pc, #188]	@ (8002888 <HAL_GPIO_Init+0x324>)
 80027ca:	68db      	ldr	r3, [r3, #12]
 80027cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027ce:	693b      	ldr	r3, [r7, #16]
 80027d0:	43db      	mvns	r3, r3
 80027d2:	69ba      	ldr	r2, [r7, #24]
 80027d4:	4013      	ands	r3, r2
 80027d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d003      	beq.n	80027ec <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80027e4:	69ba      	ldr	r2, [r7, #24]
 80027e6:	693b      	ldr	r3, [r7, #16]
 80027e8:	4313      	orrs	r3, r2
 80027ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80027ec:	4a26      	ldr	r2, [pc, #152]	@ (8002888 <HAL_GPIO_Init+0x324>)
 80027ee:	69bb      	ldr	r3, [r7, #24]
 80027f0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80027f2:	4b25      	ldr	r3, [pc, #148]	@ (8002888 <HAL_GPIO_Init+0x324>)
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027f8:	693b      	ldr	r3, [r7, #16]
 80027fa:	43db      	mvns	r3, r3
 80027fc:	69ba      	ldr	r2, [r7, #24]
 80027fe:	4013      	ands	r3, r2
 8002800:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800280a:	2b00      	cmp	r3, #0
 800280c:	d003      	beq.n	8002816 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800280e:	69ba      	ldr	r2, [r7, #24]
 8002810:	693b      	ldr	r3, [r7, #16]
 8002812:	4313      	orrs	r3, r2
 8002814:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002816:	4a1c      	ldr	r2, [pc, #112]	@ (8002888 <HAL_GPIO_Init+0x324>)
 8002818:	69bb      	ldr	r3, [r7, #24]
 800281a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800281c:	4b1a      	ldr	r3, [pc, #104]	@ (8002888 <HAL_GPIO_Init+0x324>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002822:	693b      	ldr	r3, [r7, #16]
 8002824:	43db      	mvns	r3, r3
 8002826:	69ba      	ldr	r2, [r7, #24]
 8002828:	4013      	ands	r3, r2
 800282a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002834:	2b00      	cmp	r3, #0
 8002836:	d003      	beq.n	8002840 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002838:	69ba      	ldr	r2, [r7, #24]
 800283a:	693b      	ldr	r3, [r7, #16]
 800283c:	4313      	orrs	r3, r2
 800283e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002840:	4a11      	ldr	r2, [pc, #68]	@ (8002888 <HAL_GPIO_Init+0x324>)
 8002842:	69bb      	ldr	r3, [r7, #24]
 8002844:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002846:	69fb      	ldr	r3, [r7, #28]
 8002848:	3301      	adds	r3, #1
 800284a:	61fb      	str	r3, [r7, #28]
 800284c:	69fb      	ldr	r3, [r7, #28]
 800284e:	2b0f      	cmp	r3, #15
 8002850:	f67f ae96 	bls.w	8002580 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002854:	bf00      	nop
 8002856:	bf00      	nop
 8002858:	3724      	adds	r7, #36	@ 0x24
 800285a:	46bd      	mov	sp, r7
 800285c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002860:	4770      	bx	lr
 8002862:	bf00      	nop
 8002864:	40023800 	.word	0x40023800
 8002868:	40013800 	.word	0x40013800
 800286c:	40020000 	.word	0x40020000
 8002870:	40020400 	.word	0x40020400
 8002874:	40020800 	.word	0x40020800
 8002878:	40020c00 	.word	0x40020c00
 800287c:	40021000 	.word	0x40021000
 8002880:	40021400 	.word	0x40021400
 8002884:	40021800 	.word	0x40021800
 8002888:	40013c00 	.word	0x40013c00

0800288c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800288c:	b480      	push	{r7}
 800288e:	b085      	sub	sp, #20
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
 8002894:	460b      	mov	r3, r1
 8002896:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	691a      	ldr	r2, [r3, #16]
 800289c:	887b      	ldrh	r3, [r7, #2]
 800289e:	4013      	ands	r3, r2
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d002      	beq.n	80028aa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80028a4:	2301      	movs	r3, #1
 80028a6:	73fb      	strb	r3, [r7, #15]
 80028a8:	e001      	b.n	80028ae <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80028aa:	2300      	movs	r3, #0
 80028ac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80028ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80028b0:	4618      	mov	r0, r3
 80028b2:	3714      	adds	r7, #20
 80028b4:	46bd      	mov	sp, r7
 80028b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ba:	4770      	bx	lr

080028bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028bc:	b480      	push	{r7}
 80028be:	b083      	sub	sp, #12
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
 80028c4:	460b      	mov	r3, r1
 80028c6:	807b      	strh	r3, [r7, #2]
 80028c8:	4613      	mov	r3, r2
 80028ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80028cc:	787b      	ldrb	r3, [r7, #1]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d003      	beq.n	80028da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80028d2:	887a      	ldrh	r2, [r7, #2]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80028d8:	e003      	b.n	80028e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80028da:	887b      	ldrh	r3, [r7, #2]
 80028dc:	041a      	lsls	r2, r3, #16
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	619a      	str	r2, [r3, #24]
}
 80028e2:	bf00      	nop
 80028e4:	370c      	adds	r7, #12
 80028e6:	46bd      	mov	sp, r7
 80028e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ec:	4770      	bx	lr
	...

080028f0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b082      	sub	sp, #8
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	4603      	mov	r3, r0
 80028f8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80028fa:	4b08      	ldr	r3, [pc, #32]	@ (800291c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80028fc:	695a      	ldr	r2, [r3, #20]
 80028fe:	88fb      	ldrh	r3, [r7, #6]
 8002900:	4013      	ands	r3, r2
 8002902:	2b00      	cmp	r3, #0
 8002904:	d006      	beq.n	8002914 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002906:	4a05      	ldr	r2, [pc, #20]	@ (800291c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002908:	88fb      	ldrh	r3, [r7, #6]
 800290a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800290c:	88fb      	ldrh	r3, [r7, #6]
 800290e:	4618      	mov	r0, r3
 8002910:	f7ff f800 	bl	8001914 <HAL_GPIO_EXTI_Callback>
  }
}
 8002914:	bf00      	nop
 8002916:	3708      	adds	r7, #8
 8002918:	46bd      	mov	sp, r7
 800291a:	bd80      	pop	{r7, pc}
 800291c:	40013c00 	.word	0x40013c00

08002920 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b084      	sub	sp, #16
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d101      	bne.n	8002932 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800292e:	2301      	movs	r3, #1
 8002930:	e12b      	b.n	8002b8a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002938:	b2db      	uxtb	r3, r3
 800293a:	2b00      	cmp	r3, #0
 800293c:	d106      	bne.n	800294c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2200      	movs	r2, #0
 8002942:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002946:	6878      	ldr	r0, [r7, #4]
 8002948:	f7ff fa8a 	bl	8001e60 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2224      	movs	r2, #36	@ 0x24
 8002950:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	681a      	ldr	r2, [r3, #0]
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f022 0201 	bic.w	r2, r2, #1
 8002962:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	681a      	ldr	r2, [r3, #0]
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002972:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	681a      	ldr	r2, [r3, #0]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002982:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002984:	f001 f8b8 	bl	8003af8 <HAL_RCC_GetPCLK1Freq>
 8002988:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	4a81      	ldr	r2, [pc, #516]	@ (8002b94 <HAL_I2C_Init+0x274>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d807      	bhi.n	80029a4 <HAL_I2C_Init+0x84>
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	4a80      	ldr	r2, [pc, #512]	@ (8002b98 <HAL_I2C_Init+0x278>)
 8002998:	4293      	cmp	r3, r2
 800299a:	bf94      	ite	ls
 800299c:	2301      	movls	r3, #1
 800299e:	2300      	movhi	r3, #0
 80029a0:	b2db      	uxtb	r3, r3
 80029a2:	e006      	b.n	80029b2 <HAL_I2C_Init+0x92>
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	4a7d      	ldr	r2, [pc, #500]	@ (8002b9c <HAL_I2C_Init+0x27c>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	bf94      	ite	ls
 80029ac:	2301      	movls	r3, #1
 80029ae:	2300      	movhi	r3, #0
 80029b0:	b2db      	uxtb	r3, r3
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d001      	beq.n	80029ba <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80029b6:	2301      	movs	r3, #1
 80029b8:	e0e7      	b.n	8002b8a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	4a78      	ldr	r2, [pc, #480]	@ (8002ba0 <HAL_I2C_Init+0x280>)
 80029be:	fba2 2303 	umull	r2, r3, r2, r3
 80029c2:	0c9b      	lsrs	r3, r3, #18
 80029c4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	68ba      	ldr	r2, [r7, #8]
 80029d6:	430a      	orrs	r2, r1
 80029d8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	6a1b      	ldr	r3, [r3, #32]
 80029e0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	4a6a      	ldr	r2, [pc, #424]	@ (8002b94 <HAL_I2C_Init+0x274>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d802      	bhi.n	80029f4 <HAL_I2C_Init+0xd4>
 80029ee:	68bb      	ldr	r3, [r7, #8]
 80029f0:	3301      	adds	r3, #1
 80029f2:	e009      	b.n	8002a08 <HAL_I2C_Init+0xe8>
 80029f4:	68bb      	ldr	r3, [r7, #8]
 80029f6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80029fa:	fb02 f303 	mul.w	r3, r2, r3
 80029fe:	4a69      	ldr	r2, [pc, #420]	@ (8002ba4 <HAL_I2C_Init+0x284>)
 8002a00:	fba2 2303 	umull	r2, r3, r2, r3
 8002a04:	099b      	lsrs	r3, r3, #6
 8002a06:	3301      	adds	r3, #1
 8002a08:	687a      	ldr	r2, [r7, #4]
 8002a0a:	6812      	ldr	r2, [r2, #0]
 8002a0c:	430b      	orrs	r3, r1
 8002a0e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	69db      	ldr	r3, [r3, #28]
 8002a16:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002a1a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	495c      	ldr	r1, [pc, #368]	@ (8002b94 <HAL_I2C_Init+0x274>)
 8002a24:	428b      	cmp	r3, r1
 8002a26:	d819      	bhi.n	8002a5c <HAL_I2C_Init+0x13c>
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	1e59      	subs	r1, r3, #1
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	005b      	lsls	r3, r3, #1
 8002a32:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a36:	1c59      	adds	r1, r3, #1
 8002a38:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002a3c:	400b      	ands	r3, r1
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d00a      	beq.n	8002a58 <HAL_I2C_Init+0x138>
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	1e59      	subs	r1, r3, #1
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	005b      	lsls	r3, r3, #1
 8002a4c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a50:	3301      	adds	r3, #1
 8002a52:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a56:	e051      	b.n	8002afc <HAL_I2C_Init+0x1dc>
 8002a58:	2304      	movs	r3, #4
 8002a5a:	e04f      	b.n	8002afc <HAL_I2C_Init+0x1dc>
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	689b      	ldr	r3, [r3, #8]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d111      	bne.n	8002a88 <HAL_I2C_Init+0x168>
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	1e58      	subs	r0, r3, #1
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6859      	ldr	r1, [r3, #4]
 8002a6c:	460b      	mov	r3, r1
 8002a6e:	005b      	lsls	r3, r3, #1
 8002a70:	440b      	add	r3, r1
 8002a72:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a76:	3301      	adds	r3, #1
 8002a78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	bf0c      	ite	eq
 8002a80:	2301      	moveq	r3, #1
 8002a82:	2300      	movne	r3, #0
 8002a84:	b2db      	uxtb	r3, r3
 8002a86:	e012      	b.n	8002aae <HAL_I2C_Init+0x18e>
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	1e58      	subs	r0, r3, #1
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6859      	ldr	r1, [r3, #4]
 8002a90:	460b      	mov	r3, r1
 8002a92:	009b      	lsls	r3, r3, #2
 8002a94:	440b      	add	r3, r1
 8002a96:	0099      	lsls	r1, r3, #2
 8002a98:	440b      	add	r3, r1
 8002a9a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a9e:	3301      	adds	r3, #1
 8002aa0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	bf0c      	ite	eq
 8002aa8:	2301      	moveq	r3, #1
 8002aaa:	2300      	movne	r3, #0
 8002aac:	b2db      	uxtb	r3, r3
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d001      	beq.n	8002ab6 <HAL_I2C_Init+0x196>
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	e022      	b.n	8002afc <HAL_I2C_Init+0x1dc>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	689b      	ldr	r3, [r3, #8]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d10e      	bne.n	8002adc <HAL_I2C_Init+0x1bc>
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	1e58      	subs	r0, r3, #1
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6859      	ldr	r1, [r3, #4]
 8002ac6:	460b      	mov	r3, r1
 8002ac8:	005b      	lsls	r3, r3, #1
 8002aca:	440b      	add	r3, r1
 8002acc:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ad0:	3301      	adds	r3, #1
 8002ad2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ad6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002ada:	e00f      	b.n	8002afc <HAL_I2C_Init+0x1dc>
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	1e58      	subs	r0, r3, #1
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6859      	ldr	r1, [r3, #4]
 8002ae4:	460b      	mov	r3, r1
 8002ae6:	009b      	lsls	r3, r3, #2
 8002ae8:	440b      	add	r3, r1
 8002aea:	0099      	lsls	r1, r3, #2
 8002aec:	440b      	add	r3, r1
 8002aee:	fbb0 f3f3 	udiv	r3, r0, r3
 8002af2:	3301      	adds	r3, #1
 8002af4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002af8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002afc:	6879      	ldr	r1, [r7, #4]
 8002afe:	6809      	ldr	r1, [r1, #0]
 8002b00:	4313      	orrs	r3, r2
 8002b02:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	69da      	ldr	r2, [r3, #28]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6a1b      	ldr	r3, [r3, #32]
 8002b16:	431a      	orrs	r2, r3
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	430a      	orrs	r2, r1
 8002b1e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	689b      	ldr	r3, [r3, #8]
 8002b26:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002b2a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002b2e:	687a      	ldr	r2, [r7, #4]
 8002b30:	6911      	ldr	r1, [r2, #16]
 8002b32:	687a      	ldr	r2, [r7, #4]
 8002b34:	68d2      	ldr	r2, [r2, #12]
 8002b36:	4311      	orrs	r1, r2
 8002b38:	687a      	ldr	r2, [r7, #4]
 8002b3a:	6812      	ldr	r2, [r2, #0]
 8002b3c:	430b      	orrs	r3, r1
 8002b3e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	68db      	ldr	r3, [r3, #12]
 8002b46:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	695a      	ldr	r2, [r3, #20]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	699b      	ldr	r3, [r3, #24]
 8002b52:	431a      	orrs	r2, r3
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	430a      	orrs	r2, r1
 8002b5a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	681a      	ldr	r2, [r3, #0]
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f042 0201 	orr.w	r2, r2, #1
 8002b6a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2200      	movs	r2, #0
 8002b70:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2220      	movs	r2, #32
 8002b76:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2200      	movs	r2, #0
 8002b84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002b88:	2300      	movs	r3, #0
}
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	3710      	adds	r7, #16
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bd80      	pop	{r7, pc}
 8002b92:	bf00      	nop
 8002b94:	000186a0 	.word	0x000186a0
 8002b98:	001e847f 	.word	0x001e847f
 8002b9c:	003d08ff 	.word	0x003d08ff
 8002ba0:	431bde83 	.word	0x431bde83
 8002ba4:	10624dd3 	.word	0x10624dd3

08002ba8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b088      	sub	sp, #32
 8002bac:	af02      	add	r7, sp, #8
 8002bae:	60f8      	str	r0, [r7, #12]
 8002bb0:	607a      	str	r2, [r7, #4]
 8002bb2:	461a      	mov	r2, r3
 8002bb4:	460b      	mov	r3, r1
 8002bb6:	817b      	strh	r3, [r7, #10]
 8002bb8:	4613      	mov	r3, r2
 8002bba:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002bbc:	f7ff fb90 	bl	80022e0 <HAL_GetTick>
 8002bc0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002bc8:	b2db      	uxtb	r3, r3
 8002bca:	2b20      	cmp	r3, #32
 8002bcc:	f040 80e0 	bne.w	8002d90 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002bd0:	697b      	ldr	r3, [r7, #20]
 8002bd2:	9300      	str	r3, [sp, #0]
 8002bd4:	2319      	movs	r3, #25
 8002bd6:	2201      	movs	r2, #1
 8002bd8:	4970      	ldr	r1, [pc, #448]	@ (8002d9c <HAL_I2C_Master_Transmit+0x1f4>)
 8002bda:	68f8      	ldr	r0, [r7, #12]
 8002bdc:	f000 fc64 	bl	80034a8 <I2C_WaitOnFlagUntilTimeout>
 8002be0:	4603      	mov	r3, r0
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d001      	beq.n	8002bea <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002be6:	2302      	movs	r3, #2
 8002be8:	e0d3      	b.n	8002d92 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002bf0:	2b01      	cmp	r3, #1
 8002bf2:	d101      	bne.n	8002bf8 <HAL_I2C_Master_Transmit+0x50>
 8002bf4:	2302      	movs	r3, #2
 8002bf6:	e0cc      	b.n	8002d92 <HAL_I2C_Master_Transmit+0x1ea>
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	2201      	movs	r2, #1
 8002bfc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f003 0301 	and.w	r3, r3, #1
 8002c0a:	2b01      	cmp	r3, #1
 8002c0c:	d007      	beq.n	8002c1e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	681a      	ldr	r2, [r3, #0]
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f042 0201 	orr.w	r2, r2, #1
 8002c1c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	681a      	ldr	r2, [r3, #0]
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002c2c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	2221      	movs	r2, #33	@ 0x21
 8002c32:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	2210      	movs	r2, #16
 8002c3a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	2200      	movs	r2, #0
 8002c42:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	687a      	ldr	r2, [r7, #4]
 8002c48:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	893a      	ldrh	r2, [r7, #8]
 8002c4e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c54:	b29a      	uxth	r2, r3
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	4a50      	ldr	r2, [pc, #320]	@ (8002da0 <HAL_I2C_Master_Transmit+0x1f8>)
 8002c5e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002c60:	8979      	ldrh	r1, [r7, #10]
 8002c62:	697b      	ldr	r3, [r7, #20]
 8002c64:	6a3a      	ldr	r2, [r7, #32]
 8002c66:	68f8      	ldr	r0, [r7, #12]
 8002c68:	f000 face 	bl	8003208 <I2C_MasterRequestWrite>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d001      	beq.n	8002c76 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002c72:	2301      	movs	r3, #1
 8002c74:	e08d      	b.n	8002d92 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c76:	2300      	movs	r3, #0
 8002c78:	613b      	str	r3, [r7, #16]
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	695b      	ldr	r3, [r3, #20]
 8002c80:	613b      	str	r3, [r7, #16]
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	699b      	ldr	r3, [r3, #24]
 8002c88:	613b      	str	r3, [r7, #16]
 8002c8a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002c8c:	e066      	b.n	8002d5c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c8e:	697a      	ldr	r2, [r7, #20]
 8002c90:	6a39      	ldr	r1, [r7, #32]
 8002c92:	68f8      	ldr	r0, [r7, #12]
 8002c94:	f000 fd22 	bl	80036dc <I2C_WaitOnTXEFlagUntilTimeout>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d00d      	beq.n	8002cba <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ca2:	2b04      	cmp	r3, #4
 8002ca4:	d107      	bne.n	8002cb6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	681a      	ldr	r2, [r3, #0]
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002cb4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	e06b      	b.n	8002d92 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cbe:	781a      	ldrb	r2, [r3, #0]
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cca:	1c5a      	adds	r2, r3, #1
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cd4:	b29b      	uxth	r3, r3
 8002cd6:	3b01      	subs	r3, #1
 8002cd8:	b29a      	uxth	r2, r3
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ce2:	3b01      	subs	r3, #1
 8002ce4:	b29a      	uxth	r2, r3
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	695b      	ldr	r3, [r3, #20]
 8002cf0:	f003 0304 	and.w	r3, r3, #4
 8002cf4:	2b04      	cmp	r3, #4
 8002cf6:	d11b      	bne.n	8002d30 <HAL_I2C_Master_Transmit+0x188>
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d017      	beq.n	8002d30 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d04:	781a      	ldrb	r2, [r3, #0]
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d10:	1c5a      	adds	r2, r3, #1
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d1a:	b29b      	uxth	r3, r3
 8002d1c:	3b01      	subs	r3, #1
 8002d1e:	b29a      	uxth	r2, r3
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d28:	3b01      	subs	r3, #1
 8002d2a:	b29a      	uxth	r2, r3
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d30:	697a      	ldr	r2, [r7, #20]
 8002d32:	6a39      	ldr	r1, [r7, #32]
 8002d34:	68f8      	ldr	r0, [r7, #12]
 8002d36:	f000 fd19 	bl	800376c <I2C_WaitOnBTFFlagUntilTimeout>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d00d      	beq.n	8002d5c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d44:	2b04      	cmp	r3, #4
 8002d46:	d107      	bne.n	8002d58 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	681a      	ldr	r2, [r3, #0]
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d56:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002d58:	2301      	movs	r3, #1
 8002d5a:	e01a      	b.n	8002d92 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d194      	bne.n	8002c8e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	681a      	ldr	r2, [r3, #0]
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d72:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	2220      	movs	r2, #32
 8002d78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	2200      	movs	r2, #0
 8002d80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	2200      	movs	r2, #0
 8002d88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	e000      	b.n	8002d92 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002d90:	2302      	movs	r3, #2
  }
}
 8002d92:	4618      	mov	r0, r3
 8002d94:	3718      	adds	r7, #24
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd80      	pop	{r7, pc}
 8002d9a:	bf00      	nop
 8002d9c:	00100002 	.word	0x00100002
 8002da0:	ffff0000 	.word	0xffff0000

08002da4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b08c      	sub	sp, #48	@ 0x30
 8002da8:	af02      	add	r7, sp, #8
 8002daa:	60f8      	str	r0, [r7, #12]
 8002dac:	607a      	str	r2, [r7, #4]
 8002dae:	461a      	mov	r2, r3
 8002db0:	460b      	mov	r3, r1
 8002db2:	817b      	strh	r3, [r7, #10]
 8002db4:	4613      	mov	r3, r2
 8002db6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002db8:	f7ff fa92 	bl	80022e0 <HAL_GetTick>
 8002dbc:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002dc4:	b2db      	uxtb	r3, r3
 8002dc6:	2b20      	cmp	r3, #32
 8002dc8:	f040 8217 	bne.w	80031fa <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002dcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dce:	9300      	str	r3, [sp, #0]
 8002dd0:	2319      	movs	r3, #25
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	497c      	ldr	r1, [pc, #496]	@ (8002fc8 <HAL_I2C_Master_Receive+0x224>)
 8002dd6:	68f8      	ldr	r0, [r7, #12]
 8002dd8:	f000 fb66 	bl	80034a8 <I2C_WaitOnFlagUntilTimeout>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d001      	beq.n	8002de6 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8002de2:	2302      	movs	r3, #2
 8002de4:	e20a      	b.n	80031fc <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002dec:	2b01      	cmp	r3, #1
 8002dee:	d101      	bne.n	8002df4 <HAL_I2C_Master_Receive+0x50>
 8002df0:	2302      	movs	r3, #2
 8002df2:	e203      	b.n	80031fc <HAL_I2C_Master_Receive+0x458>
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	2201      	movs	r2, #1
 8002df8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f003 0301 	and.w	r3, r3, #1
 8002e06:	2b01      	cmp	r3, #1
 8002e08:	d007      	beq.n	8002e1a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	681a      	ldr	r2, [r3, #0]
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f042 0201 	orr.w	r2, r2, #1
 8002e18:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	681a      	ldr	r2, [r3, #0]
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002e28:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	2222      	movs	r2, #34	@ 0x22
 8002e2e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	2210      	movs	r2, #16
 8002e36:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	687a      	ldr	r2, [r7, #4]
 8002e44:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	893a      	ldrh	r2, [r7, #8]
 8002e4a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e50:	b29a      	uxth	r2, r3
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	4a5c      	ldr	r2, [pc, #368]	@ (8002fcc <HAL_I2C_Master_Receive+0x228>)
 8002e5a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002e5c:	8979      	ldrh	r1, [r7, #10]
 8002e5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e60:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002e62:	68f8      	ldr	r0, [r7, #12]
 8002e64:	f000 fa52 	bl	800330c <I2C_MasterRequestRead>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d001      	beq.n	8002e72 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	e1c4      	b.n	80031fc <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d113      	bne.n	8002ea2 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	623b      	str	r3, [r7, #32]
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	695b      	ldr	r3, [r3, #20]
 8002e84:	623b      	str	r3, [r7, #32]
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	699b      	ldr	r3, [r3, #24]
 8002e8c:	623b      	str	r3, [r7, #32]
 8002e8e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	681a      	ldr	r2, [r3, #0]
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e9e:	601a      	str	r2, [r3, #0]
 8002ea0:	e198      	b.n	80031d4 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ea6:	2b01      	cmp	r3, #1
 8002ea8:	d11b      	bne.n	8002ee2 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	681a      	ldr	r2, [r3, #0]
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002eb8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002eba:	2300      	movs	r3, #0
 8002ebc:	61fb      	str	r3, [r7, #28]
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	695b      	ldr	r3, [r3, #20]
 8002ec4:	61fb      	str	r3, [r7, #28]
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	699b      	ldr	r3, [r3, #24]
 8002ecc:	61fb      	str	r3, [r7, #28]
 8002ece:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	681a      	ldr	r2, [r3, #0]
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ede:	601a      	str	r2, [r3, #0]
 8002ee0:	e178      	b.n	80031d4 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ee6:	2b02      	cmp	r3, #2
 8002ee8:	d11b      	bne.n	8002f22 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	681a      	ldr	r2, [r3, #0]
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002ef8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	681a      	ldr	r2, [r3, #0]
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002f08:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	61bb      	str	r3, [r7, #24]
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	695b      	ldr	r3, [r3, #20]
 8002f14:	61bb      	str	r3, [r7, #24]
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	699b      	ldr	r3, [r3, #24]
 8002f1c:	61bb      	str	r3, [r7, #24]
 8002f1e:	69bb      	ldr	r3, [r7, #24]
 8002f20:	e158      	b.n	80031d4 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	681a      	ldr	r2, [r3, #0]
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002f30:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f32:	2300      	movs	r3, #0
 8002f34:	617b      	str	r3, [r7, #20]
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	695b      	ldr	r3, [r3, #20]
 8002f3c:	617b      	str	r3, [r7, #20]
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	699b      	ldr	r3, [r3, #24]
 8002f44:	617b      	str	r3, [r7, #20]
 8002f46:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002f48:	e144      	b.n	80031d4 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f4e:	2b03      	cmp	r3, #3
 8002f50:	f200 80f1 	bhi.w	8003136 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f58:	2b01      	cmp	r3, #1
 8002f5a:	d123      	bne.n	8002fa4 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f5c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f5e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002f60:	68f8      	ldr	r0, [r7, #12]
 8002f62:	f000 fc4b 	bl	80037fc <I2C_WaitOnRXNEFlagUntilTimeout>
 8002f66:	4603      	mov	r3, r0
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d001      	beq.n	8002f70 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	e145      	b.n	80031fc <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	691a      	ldr	r2, [r3, #16]
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f7a:	b2d2      	uxtb	r2, r2
 8002f7c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f82:	1c5a      	adds	r2, r3, #1
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f8c:	3b01      	subs	r3, #1
 8002f8e:	b29a      	uxth	r2, r3
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f98:	b29b      	uxth	r3, r3
 8002f9a:	3b01      	subs	r3, #1
 8002f9c:	b29a      	uxth	r2, r3
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002fa2:	e117      	b.n	80031d4 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fa8:	2b02      	cmp	r3, #2
 8002faa:	d14e      	bne.n	800304a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002fac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fae:	9300      	str	r3, [sp, #0]
 8002fb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	4906      	ldr	r1, [pc, #24]	@ (8002fd0 <HAL_I2C_Master_Receive+0x22c>)
 8002fb6:	68f8      	ldr	r0, [r7, #12]
 8002fb8:	f000 fa76 	bl	80034a8 <I2C_WaitOnFlagUntilTimeout>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d008      	beq.n	8002fd4 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	e11a      	b.n	80031fc <HAL_I2C_Master_Receive+0x458>
 8002fc6:	bf00      	nop
 8002fc8:	00100002 	.word	0x00100002
 8002fcc:	ffff0000 	.word	0xffff0000
 8002fd0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	681a      	ldr	r2, [r3, #0]
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002fe2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	691a      	ldr	r2, [r3, #16]
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fee:	b2d2      	uxtb	r2, r2
 8002ff0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ff6:	1c5a      	adds	r2, r3, #1
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003000:	3b01      	subs	r3, #1
 8003002:	b29a      	uxth	r2, r3
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800300c:	b29b      	uxth	r3, r3
 800300e:	3b01      	subs	r3, #1
 8003010:	b29a      	uxth	r2, r3
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	691a      	ldr	r2, [r3, #16]
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003020:	b2d2      	uxtb	r2, r2
 8003022:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003028:	1c5a      	adds	r2, r3, #1
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003032:	3b01      	subs	r3, #1
 8003034:	b29a      	uxth	r2, r3
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800303e:	b29b      	uxth	r3, r3
 8003040:	3b01      	subs	r3, #1
 8003042:	b29a      	uxth	r2, r3
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003048:	e0c4      	b.n	80031d4 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800304a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800304c:	9300      	str	r3, [sp, #0]
 800304e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003050:	2200      	movs	r2, #0
 8003052:	496c      	ldr	r1, [pc, #432]	@ (8003204 <HAL_I2C_Master_Receive+0x460>)
 8003054:	68f8      	ldr	r0, [r7, #12]
 8003056:	f000 fa27 	bl	80034a8 <I2C_WaitOnFlagUntilTimeout>
 800305a:	4603      	mov	r3, r0
 800305c:	2b00      	cmp	r3, #0
 800305e:	d001      	beq.n	8003064 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8003060:	2301      	movs	r3, #1
 8003062:	e0cb      	b.n	80031fc <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	681a      	ldr	r2, [r3, #0]
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003072:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	691a      	ldr	r2, [r3, #16]
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800307e:	b2d2      	uxtb	r2, r2
 8003080:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003086:	1c5a      	adds	r2, r3, #1
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003090:	3b01      	subs	r3, #1
 8003092:	b29a      	uxth	r2, r3
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800309c:	b29b      	uxth	r3, r3
 800309e:	3b01      	subs	r3, #1
 80030a0:	b29a      	uxth	r2, r3
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80030a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030a8:	9300      	str	r3, [sp, #0]
 80030aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030ac:	2200      	movs	r2, #0
 80030ae:	4955      	ldr	r1, [pc, #340]	@ (8003204 <HAL_I2C_Master_Receive+0x460>)
 80030b0:	68f8      	ldr	r0, [r7, #12]
 80030b2:	f000 f9f9 	bl	80034a8 <I2C_WaitOnFlagUntilTimeout>
 80030b6:	4603      	mov	r3, r0
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d001      	beq.n	80030c0 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80030bc:	2301      	movs	r3, #1
 80030be:	e09d      	b.n	80031fc <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	681a      	ldr	r2, [r3, #0]
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80030ce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	691a      	ldr	r2, [r3, #16]
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030da:	b2d2      	uxtb	r2, r2
 80030dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030e2:	1c5a      	adds	r2, r3, #1
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030ec:	3b01      	subs	r3, #1
 80030ee:	b29a      	uxth	r2, r3
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030f8:	b29b      	uxth	r3, r3
 80030fa:	3b01      	subs	r3, #1
 80030fc:	b29a      	uxth	r2, r3
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	691a      	ldr	r2, [r3, #16]
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800310c:	b2d2      	uxtb	r2, r2
 800310e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003114:	1c5a      	adds	r2, r3, #1
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800311e:	3b01      	subs	r3, #1
 8003120:	b29a      	uxth	r2, r3
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800312a:	b29b      	uxth	r3, r3
 800312c:	3b01      	subs	r3, #1
 800312e:	b29a      	uxth	r2, r3
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003134:	e04e      	b.n	80031d4 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003136:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003138:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800313a:	68f8      	ldr	r0, [r7, #12]
 800313c:	f000 fb5e 	bl	80037fc <I2C_WaitOnRXNEFlagUntilTimeout>
 8003140:	4603      	mov	r3, r0
 8003142:	2b00      	cmp	r3, #0
 8003144:	d001      	beq.n	800314a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8003146:	2301      	movs	r3, #1
 8003148:	e058      	b.n	80031fc <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	691a      	ldr	r2, [r3, #16]
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003154:	b2d2      	uxtb	r2, r2
 8003156:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800315c:	1c5a      	adds	r2, r3, #1
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003166:	3b01      	subs	r3, #1
 8003168:	b29a      	uxth	r2, r3
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003172:	b29b      	uxth	r3, r3
 8003174:	3b01      	subs	r3, #1
 8003176:	b29a      	uxth	r2, r3
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	695b      	ldr	r3, [r3, #20]
 8003182:	f003 0304 	and.w	r3, r3, #4
 8003186:	2b04      	cmp	r3, #4
 8003188:	d124      	bne.n	80031d4 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800318e:	2b03      	cmp	r3, #3
 8003190:	d107      	bne.n	80031a2 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	681a      	ldr	r2, [r3, #0]
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80031a0:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	691a      	ldr	r2, [r3, #16]
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031ac:	b2d2      	uxtb	r2, r2
 80031ae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031b4:	1c5a      	adds	r2, r3, #1
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031be:	3b01      	subs	r3, #1
 80031c0:	b29a      	uxth	r2, r3
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031ca:	b29b      	uxth	r3, r3
 80031cc:	3b01      	subs	r3, #1
 80031ce:	b29a      	uxth	r2, r3
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031d8:	2b00      	cmp	r3, #0
 80031da:	f47f aeb6 	bne.w	8002f4a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	2220      	movs	r2, #32
 80031e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	2200      	movs	r2, #0
 80031ea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	2200      	movs	r2, #0
 80031f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80031f6:	2300      	movs	r3, #0
 80031f8:	e000      	b.n	80031fc <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 80031fa:	2302      	movs	r3, #2
  }
}
 80031fc:	4618      	mov	r0, r3
 80031fe:	3728      	adds	r7, #40	@ 0x28
 8003200:	46bd      	mov	sp, r7
 8003202:	bd80      	pop	{r7, pc}
 8003204:	00010004 	.word	0x00010004

08003208 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b088      	sub	sp, #32
 800320c:	af02      	add	r7, sp, #8
 800320e:	60f8      	str	r0, [r7, #12]
 8003210:	607a      	str	r2, [r7, #4]
 8003212:	603b      	str	r3, [r7, #0]
 8003214:	460b      	mov	r3, r1
 8003216:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800321c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800321e:	697b      	ldr	r3, [r7, #20]
 8003220:	2b08      	cmp	r3, #8
 8003222:	d006      	beq.n	8003232 <I2C_MasterRequestWrite+0x2a>
 8003224:	697b      	ldr	r3, [r7, #20]
 8003226:	2b01      	cmp	r3, #1
 8003228:	d003      	beq.n	8003232 <I2C_MasterRequestWrite+0x2a>
 800322a:	697b      	ldr	r3, [r7, #20]
 800322c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003230:	d108      	bne.n	8003244 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	681a      	ldr	r2, [r3, #0]
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003240:	601a      	str	r2, [r3, #0]
 8003242:	e00b      	b.n	800325c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003248:	2b12      	cmp	r3, #18
 800324a:	d107      	bne.n	800325c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	681a      	ldr	r2, [r3, #0]
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800325a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	9300      	str	r3, [sp, #0]
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2200      	movs	r2, #0
 8003264:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003268:	68f8      	ldr	r0, [r7, #12]
 800326a:	f000 f91d 	bl	80034a8 <I2C_WaitOnFlagUntilTimeout>
 800326e:	4603      	mov	r3, r0
 8003270:	2b00      	cmp	r3, #0
 8003272:	d00d      	beq.n	8003290 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800327e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003282:	d103      	bne.n	800328c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800328a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800328c:	2303      	movs	r3, #3
 800328e:	e035      	b.n	80032fc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	691b      	ldr	r3, [r3, #16]
 8003294:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003298:	d108      	bne.n	80032ac <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800329a:	897b      	ldrh	r3, [r7, #10]
 800329c:	b2db      	uxtb	r3, r3
 800329e:	461a      	mov	r2, r3
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80032a8:	611a      	str	r2, [r3, #16]
 80032aa:	e01b      	b.n	80032e4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80032ac:	897b      	ldrh	r3, [r7, #10]
 80032ae:	11db      	asrs	r3, r3, #7
 80032b0:	b2db      	uxtb	r3, r3
 80032b2:	f003 0306 	and.w	r3, r3, #6
 80032b6:	b2db      	uxtb	r3, r3
 80032b8:	f063 030f 	orn	r3, r3, #15
 80032bc:	b2da      	uxtb	r2, r3
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	687a      	ldr	r2, [r7, #4]
 80032c8:	490e      	ldr	r1, [pc, #56]	@ (8003304 <I2C_MasterRequestWrite+0xfc>)
 80032ca:	68f8      	ldr	r0, [r7, #12]
 80032cc:	f000 f966 	bl	800359c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80032d0:	4603      	mov	r3, r0
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d001      	beq.n	80032da <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80032d6:	2301      	movs	r3, #1
 80032d8:	e010      	b.n	80032fc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80032da:	897b      	ldrh	r3, [r7, #10]
 80032dc:	b2da      	uxtb	r2, r3
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	687a      	ldr	r2, [r7, #4]
 80032e8:	4907      	ldr	r1, [pc, #28]	@ (8003308 <I2C_MasterRequestWrite+0x100>)
 80032ea:	68f8      	ldr	r0, [r7, #12]
 80032ec:	f000 f956 	bl	800359c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80032f0:	4603      	mov	r3, r0
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d001      	beq.n	80032fa <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80032f6:	2301      	movs	r3, #1
 80032f8:	e000      	b.n	80032fc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80032fa:	2300      	movs	r3, #0
}
 80032fc:	4618      	mov	r0, r3
 80032fe:	3718      	adds	r7, #24
 8003300:	46bd      	mov	sp, r7
 8003302:	bd80      	pop	{r7, pc}
 8003304:	00010008 	.word	0x00010008
 8003308:	00010002 	.word	0x00010002

0800330c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b088      	sub	sp, #32
 8003310:	af02      	add	r7, sp, #8
 8003312:	60f8      	str	r0, [r7, #12]
 8003314:	607a      	str	r2, [r7, #4]
 8003316:	603b      	str	r3, [r7, #0]
 8003318:	460b      	mov	r3, r1
 800331a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003320:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	681a      	ldr	r2, [r3, #0]
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003330:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003332:	697b      	ldr	r3, [r7, #20]
 8003334:	2b08      	cmp	r3, #8
 8003336:	d006      	beq.n	8003346 <I2C_MasterRequestRead+0x3a>
 8003338:	697b      	ldr	r3, [r7, #20]
 800333a:	2b01      	cmp	r3, #1
 800333c:	d003      	beq.n	8003346 <I2C_MasterRequestRead+0x3a>
 800333e:	697b      	ldr	r3, [r7, #20]
 8003340:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003344:	d108      	bne.n	8003358 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	681a      	ldr	r2, [r3, #0]
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003354:	601a      	str	r2, [r3, #0]
 8003356:	e00b      	b.n	8003370 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800335c:	2b11      	cmp	r3, #17
 800335e:	d107      	bne.n	8003370 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	681a      	ldr	r2, [r3, #0]
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800336e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	9300      	str	r3, [sp, #0]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2200      	movs	r2, #0
 8003378:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800337c:	68f8      	ldr	r0, [r7, #12]
 800337e:	f000 f893 	bl	80034a8 <I2C_WaitOnFlagUntilTimeout>
 8003382:	4603      	mov	r3, r0
 8003384:	2b00      	cmp	r3, #0
 8003386:	d00d      	beq.n	80033a4 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003392:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003396:	d103      	bne.n	80033a0 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800339e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80033a0:	2303      	movs	r3, #3
 80033a2:	e079      	b.n	8003498 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	691b      	ldr	r3, [r3, #16]
 80033a8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80033ac:	d108      	bne.n	80033c0 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80033ae:	897b      	ldrh	r3, [r7, #10]
 80033b0:	b2db      	uxtb	r3, r3
 80033b2:	f043 0301 	orr.w	r3, r3, #1
 80033b6:	b2da      	uxtb	r2, r3
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	611a      	str	r2, [r3, #16]
 80033be:	e05f      	b.n	8003480 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80033c0:	897b      	ldrh	r3, [r7, #10]
 80033c2:	11db      	asrs	r3, r3, #7
 80033c4:	b2db      	uxtb	r3, r3
 80033c6:	f003 0306 	and.w	r3, r3, #6
 80033ca:	b2db      	uxtb	r3, r3
 80033cc:	f063 030f 	orn	r3, r3, #15
 80033d0:	b2da      	uxtb	r2, r3
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	687a      	ldr	r2, [r7, #4]
 80033dc:	4930      	ldr	r1, [pc, #192]	@ (80034a0 <I2C_MasterRequestRead+0x194>)
 80033de:	68f8      	ldr	r0, [r7, #12]
 80033e0:	f000 f8dc 	bl	800359c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80033e4:	4603      	mov	r3, r0
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d001      	beq.n	80033ee <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80033ea:	2301      	movs	r3, #1
 80033ec:	e054      	b.n	8003498 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80033ee:	897b      	ldrh	r3, [r7, #10]
 80033f0:	b2da      	uxtb	r2, r3
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	687a      	ldr	r2, [r7, #4]
 80033fc:	4929      	ldr	r1, [pc, #164]	@ (80034a4 <I2C_MasterRequestRead+0x198>)
 80033fe:	68f8      	ldr	r0, [r7, #12]
 8003400:	f000 f8cc 	bl	800359c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003404:	4603      	mov	r3, r0
 8003406:	2b00      	cmp	r3, #0
 8003408:	d001      	beq.n	800340e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800340a:	2301      	movs	r3, #1
 800340c:	e044      	b.n	8003498 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800340e:	2300      	movs	r3, #0
 8003410:	613b      	str	r3, [r7, #16]
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	695b      	ldr	r3, [r3, #20]
 8003418:	613b      	str	r3, [r7, #16]
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	699b      	ldr	r3, [r3, #24]
 8003420:	613b      	str	r3, [r7, #16]
 8003422:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	681a      	ldr	r2, [r3, #0]
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003432:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	9300      	str	r3, [sp, #0]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2200      	movs	r2, #0
 800343c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003440:	68f8      	ldr	r0, [r7, #12]
 8003442:	f000 f831 	bl	80034a8 <I2C_WaitOnFlagUntilTimeout>
 8003446:	4603      	mov	r3, r0
 8003448:	2b00      	cmp	r3, #0
 800344a:	d00d      	beq.n	8003468 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003456:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800345a:	d103      	bne.n	8003464 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003462:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8003464:	2303      	movs	r3, #3
 8003466:	e017      	b.n	8003498 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003468:	897b      	ldrh	r3, [r7, #10]
 800346a:	11db      	asrs	r3, r3, #7
 800346c:	b2db      	uxtb	r3, r3
 800346e:	f003 0306 	and.w	r3, r3, #6
 8003472:	b2db      	uxtb	r3, r3
 8003474:	f063 030e 	orn	r3, r3, #14
 8003478:	b2da      	uxtb	r2, r3
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	687a      	ldr	r2, [r7, #4]
 8003484:	4907      	ldr	r1, [pc, #28]	@ (80034a4 <I2C_MasterRequestRead+0x198>)
 8003486:	68f8      	ldr	r0, [r7, #12]
 8003488:	f000 f888 	bl	800359c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800348c:	4603      	mov	r3, r0
 800348e:	2b00      	cmp	r3, #0
 8003490:	d001      	beq.n	8003496 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8003492:	2301      	movs	r3, #1
 8003494:	e000      	b.n	8003498 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8003496:	2300      	movs	r3, #0
}
 8003498:	4618      	mov	r0, r3
 800349a:	3718      	adds	r7, #24
 800349c:	46bd      	mov	sp, r7
 800349e:	bd80      	pop	{r7, pc}
 80034a0:	00010008 	.word	0x00010008
 80034a4:	00010002 	.word	0x00010002

080034a8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b084      	sub	sp, #16
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	60f8      	str	r0, [r7, #12]
 80034b0:	60b9      	str	r1, [r7, #8]
 80034b2:	603b      	str	r3, [r7, #0]
 80034b4:	4613      	mov	r3, r2
 80034b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80034b8:	e048      	b.n	800354c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034c0:	d044      	beq.n	800354c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034c2:	f7fe ff0d 	bl	80022e0 <HAL_GetTick>
 80034c6:	4602      	mov	r2, r0
 80034c8:	69bb      	ldr	r3, [r7, #24]
 80034ca:	1ad3      	subs	r3, r2, r3
 80034cc:	683a      	ldr	r2, [r7, #0]
 80034ce:	429a      	cmp	r2, r3
 80034d0:	d302      	bcc.n	80034d8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d139      	bne.n	800354c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80034d8:	68bb      	ldr	r3, [r7, #8]
 80034da:	0c1b      	lsrs	r3, r3, #16
 80034dc:	b2db      	uxtb	r3, r3
 80034de:	2b01      	cmp	r3, #1
 80034e0:	d10d      	bne.n	80034fe <I2C_WaitOnFlagUntilTimeout+0x56>
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	695b      	ldr	r3, [r3, #20]
 80034e8:	43da      	mvns	r2, r3
 80034ea:	68bb      	ldr	r3, [r7, #8]
 80034ec:	4013      	ands	r3, r2
 80034ee:	b29b      	uxth	r3, r3
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	bf0c      	ite	eq
 80034f4:	2301      	moveq	r3, #1
 80034f6:	2300      	movne	r3, #0
 80034f8:	b2db      	uxtb	r3, r3
 80034fa:	461a      	mov	r2, r3
 80034fc:	e00c      	b.n	8003518 <I2C_WaitOnFlagUntilTimeout+0x70>
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	699b      	ldr	r3, [r3, #24]
 8003504:	43da      	mvns	r2, r3
 8003506:	68bb      	ldr	r3, [r7, #8]
 8003508:	4013      	ands	r3, r2
 800350a:	b29b      	uxth	r3, r3
 800350c:	2b00      	cmp	r3, #0
 800350e:	bf0c      	ite	eq
 8003510:	2301      	moveq	r3, #1
 8003512:	2300      	movne	r3, #0
 8003514:	b2db      	uxtb	r3, r3
 8003516:	461a      	mov	r2, r3
 8003518:	79fb      	ldrb	r3, [r7, #7]
 800351a:	429a      	cmp	r2, r3
 800351c:	d116      	bne.n	800354c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	2200      	movs	r2, #0
 8003522:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	2220      	movs	r2, #32
 8003528:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	2200      	movs	r2, #0
 8003530:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003538:	f043 0220 	orr.w	r2, r3, #32
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	2200      	movs	r2, #0
 8003544:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003548:	2301      	movs	r3, #1
 800354a:	e023      	b.n	8003594 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800354c:	68bb      	ldr	r3, [r7, #8]
 800354e:	0c1b      	lsrs	r3, r3, #16
 8003550:	b2db      	uxtb	r3, r3
 8003552:	2b01      	cmp	r3, #1
 8003554:	d10d      	bne.n	8003572 <I2C_WaitOnFlagUntilTimeout+0xca>
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	695b      	ldr	r3, [r3, #20]
 800355c:	43da      	mvns	r2, r3
 800355e:	68bb      	ldr	r3, [r7, #8]
 8003560:	4013      	ands	r3, r2
 8003562:	b29b      	uxth	r3, r3
 8003564:	2b00      	cmp	r3, #0
 8003566:	bf0c      	ite	eq
 8003568:	2301      	moveq	r3, #1
 800356a:	2300      	movne	r3, #0
 800356c:	b2db      	uxtb	r3, r3
 800356e:	461a      	mov	r2, r3
 8003570:	e00c      	b.n	800358c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	699b      	ldr	r3, [r3, #24]
 8003578:	43da      	mvns	r2, r3
 800357a:	68bb      	ldr	r3, [r7, #8]
 800357c:	4013      	ands	r3, r2
 800357e:	b29b      	uxth	r3, r3
 8003580:	2b00      	cmp	r3, #0
 8003582:	bf0c      	ite	eq
 8003584:	2301      	moveq	r3, #1
 8003586:	2300      	movne	r3, #0
 8003588:	b2db      	uxtb	r3, r3
 800358a:	461a      	mov	r2, r3
 800358c:	79fb      	ldrb	r3, [r7, #7]
 800358e:	429a      	cmp	r2, r3
 8003590:	d093      	beq.n	80034ba <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003592:	2300      	movs	r3, #0
}
 8003594:	4618      	mov	r0, r3
 8003596:	3710      	adds	r7, #16
 8003598:	46bd      	mov	sp, r7
 800359a:	bd80      	pop	{r7, pc}

0800359c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b084      	sub	sp, #16
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	60f8      	str	r0, [r7, #12]
 80035a4:	60b9      	str	r1, [r7, #8]
 80035a6:	607a      	str	r2, [r7, #4]
 80035a8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80035aa:	e071      	b.n	8003690 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	695b      	ldr	r3, [r3, #20]
 80035b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80035b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80035ba:	d123      	bne.n	8003604 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	681a      	ldr	r2, [r3, #0]
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80035ca:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80035d4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	2200      	movs	r2, #0
 80035da:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	2220      	movs	r2, #32
 80035e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	2200      	movs	r2, #0
 80035e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035f0:	f043 0204 	orr.w	r2, r3, #4
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	2200      	movs	r2, #0
 80035fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003600:	2301      	movs	r3, #1
 8003602:	e067      	b.n	80036d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	f1b3 3fff 	cmp.w	r3, #4294967295
 800360a:	d041      	beq.n	8003690 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800360c:	f7fe fe68 	bl	80022e0 <HAL_GetTick>
 8003610:	4602      	mov	r2, r0
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	1ad3      	subs	r3, r2, r3
 8003616:	687a      	ldr	r2, [r7, #4]
 8003618:	429a      	cmp	r2, r3
 800361a:	d302      	bcc.n	8003622 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d136      	bne.n	8003690 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003622:	68bb      	ldr	r3, [r7, #8]
 8003624:	0c1b      	lsrs	r3, r3, #16
 8003626:	b2db      	uxtb	r3, r3
 8003628:	2b01      	cmp	r3, #1
 800362a:	d10c      	bne.n	8003646 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	695b      	ldr	r3, [r3, #20]
 8003632:	43da      	mvns	r2, r3
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	4013      	ands	r3, r2
 8003638:	b29b      	uxth	r3, r3
 800363a:	2b00      	cmp	r3, #0
 800363c:	bf14      	ite	ne
 800363e:	2301      	movne	r3, #1
 8003640:	2300      	moveq	r3, #0
 8003642:	b2db      	uxtb	r3, r3
 8003644:	e00b      	b.n	800365e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	699b      	ldr	r3, [r3, #24]
 800364c:	43da      	mvns	r2, r3
 800364e:	68bb      	ldr	r3, [r7, #8]
 8003650:	4013      	ands	r3, r2
 8003652:	b29b      	uxth	r3, r3
 8003654:	2b00      	cmp	r3, #0
 8003656:	bf14      	ite	ne
 8003658:	2301      	movne	r3, #1
 800365a:	2300      	moveq	r3, #0
 800365c:	b2db      	uxtb	r3, r3
 800365e:	2b00      	cmp	r3, #0
 8003660:	d016      	beq.n	8003690 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	2200      	movs	r2, #0
 8003666:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	2220      	movs	r2, #32
 800366c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	2200      	movs	r2, #0
 8003674:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800367c:	f043 0220 	orr.w	r2, r3, #32
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	2200      	movs	r2, #0
 8003688:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800368c:	2301      	movs	r3, #1
 800368e:	e021      	b.n	80036d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003690:	68bb      	ldr	r3, [r7, #8]
 8003692:	0c1b      	lsrs	r3, r3, #16
 8003694:	b2db      	uxtb	r3, r3
 8003696:	2b01      	cmp	r3, #1
 8003698:	d10c      	bne.n	80036b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	695b      	ldr	r3, [r3, #20]
 80036a0:	43da      	mvns	r2, r3
 80036a2:	68bb      	ldr	r3, [r7, #8]
 80036a4:	4013      	ands	r3, r2
 80036a6:	b29b      	uxth	r3, r3
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	bf14      	ite	ne
 80036ac:	2301      	movne	r3, #1
 80036ae:	2300      	moveq	r3, #0
 80036b0:	b2db      	uxtb	r3, r3
 80036b2:	e00b      	b.n	80036cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	699b      	ldr	r3, [r3, #24]
 80036ba:	43da      	mvns	r2, r3
 80036bc:	68bb      	ldr	r3, [r7, #8]
 80036be:	4013      	ands	r3, r2
 80036c0:	b29b      	uxth	r3, r3
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	bf14      	ite	ne
 80036c6:	2301      	movne	r3, #1
 80036c8:	2300      	moveq	r3, #0
 80036ca:	b2db      	uxtb	r3, r3
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	f47f af6d 	bne.w	80035ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80036d2:	2300      	movs	r3, #0
}
 80036d4:	4618      	mov	r0, r3
 80036d6:	3710      	adds	r7, #16
 80036d8:	46bd      	mov	sp, r7
 80036da:	bd80      	pop	{r7, pc}

080036dc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b084      	sub	sp, #16
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	60f8      	str	r0, [r7, #12]
 80036e4:	60b9      	str	r1, [r7, #8]
 80036e6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80036e8:	e034      	b.n	8003754 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80036ea:	68f8      	ldr	r0, [r7, #12]
 80036ec:	f000 f8e3 	bl	80038b6 <I2C_IsAcknowledgeFailed>
 80036f0:	4603      	mov	r3, r0
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d001      	beq.n	80036fa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80036f6:	2301      	movs	r3, #1
 80036f8:	e034      	b.n	8003764 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036fa:	68bb      	ldr	r3, [r7, #8]
 80036fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003700:	d028      	beq.n	8003754 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003702:	f7fe fded 	bl	80022e0 <HAL_GetTick>
 8003706:	4602      	mov	r2, r0
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	1ad3      	subs	r3, r2, r3
 800370c:	68ba      	ldr	r2, [r7, #8]
 800370e:	429a      	cmp	r2, r3
 8003710:	d302      	bcc.n	8003718 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003712:	68bb      	ldr	r3, [r7, #8]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d11d      	bne.n	8003754 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	695b      	ldr	r3, [r3, #20]
 800371e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003722:	2b80      	cmp	r3, #128	@ 0x80
 8003724:	d016      	beq.n	8003754 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	2200      	movs	r2, #0
 800372a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	2220      	movs	r2, #32
 8003730:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	2200      	movs	r2, #0
 8003738:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003740:	f043 0220 	orr.w	r2, r3, #32
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	2200      	movs	r2, #0
 800374c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003750:	2301      	movs	r3, #1
 8003752:	e007      	b.n	8003764 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	695b      	ldr	r3, [r3, #20]
 800375a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800375e:	2b80      	cmp	r3, #128	@ 0x80
 8003760:	d1c3      	bne.n	80036ea <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003762:	2300      	movs	r3, #0
}
 8003764:	4618      	mov	r0, r3
 8003766:	3710      	adds	r7, #16
 8003768:	46bd      	mov	sp, r7
 800376a:	bd80      	pop	{r7, pc}

0800376c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b084      	sub	sp, #16
 8003770:	af00      	add	r7, sp, #0
 8003772:	60f8      	str	r0, [r7, #12]
 8003774:	60b9      	str	r1, [r7, #8]
 8003776:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003778:	e034      	b.n	80037e4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800377a:	68f8      	ldr	r0, [r7, #12]
 800377c:	f000 f89b 	bl	80038b6 <I2C_IsAcknowledgeFailed>
 8003780:	4603      	mov	r3, r0
 8003782:	2b00      	cmp	r3, #0
 8003784:	d001      	beq.n	800378a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003786:	2301      	movs	r3, #1
 8003788:	e034      	b.n	80037f4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800378a:	68bb      	ldr	r3, [r7, #8]
 800378c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003790:	d028      	beq.n	80037e4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003792:	f7fe fda5 	bl	80022e0 <HAL_GetTick>
 8003796:	4602      	mov	r2, r0
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	1ad3      	subs	r3, r2, r3
 800379c:	68ba      	ldr	r2, [r7, #8]
 800379e:	429a      	cmp	r2, r3
 80037a0:	d302      	bcc.n	80037a8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80037a2:	68bb      	ldr	r3, [r7, #8]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d11d      	bne.n	80037e4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	695b      	ldr	r3, [r3, #20]
 80037ae:	f003 0304 	and.w	r3, r3, #4
 80037b2:	2b04      	cmp	r3, #4
 80037b4:	d016      	beq.n	80037e4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	2200      	movs	r2, #0
 80037ba:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	2220      	movs	r2, #32
 80037c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	2200      	movs	r2, #0
 80037c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037d0:	f043 0220 	orr.w	r2, r3, #32
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	2200      	movs	r2, #0
 80037dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80037e0:	2301      	movs	r3, #1
 80037e2:	e007      	b.n	80037f4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	695b      	ldr	r3, [r3, #20]
 80037ea:	f003 0304 	and.w	r3, r3, #4
 80037ee:	2b04      	cmp	r3, #4
 80037f0:	d1c3      	bne.n	800377a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80037f2:	2300      	movs	r3, #0
}
 80037f4:	4618      	mov	r0, r3
 80037f6:	3710      	adds	r7, #16
 80037f8:	46bd      	mov	sp, r7
 80037fa:	bd80      	pop	{r7, pc}

080037fc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b084      	sub	sp, #16
 8003800:	af00      	add	r7, sp, #0
 8003802:	60f8      	str	r0, [r7, #12]
 8003804:	60b9      	str	r1, [r7, #8]
 8003806:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003808:	e049      	b.n	800389e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	695b      	ldr	r3, [r3, #20]
 8003810:	f003 0310 	and.w	r3, r3, #16
 8003814:	2b10      	cmp	r3, #16
 8003816:	d119      	bne.n	800384c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f06f 0210 	mvn.w	r2, #16
 8003820:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	2200      	movs	r2, #0
 8003826:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	2220      	movs	r2, #32
 800382c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	2200      	movs	r2, #0
 8003834:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	2200      	movs	r2, #0
 8003844:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003848:	2301      	movs	r3, #1
 800384a:	e030      	b.n	80038ae <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800384c:	f7fe fd48 	bl	80022e0 <HAL_GetTick>
 8003850:	4602      	mov	r2, r0
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	1ad3      	subs	r3, r2, r3
 8003856:	68ba      	ldr	r2, [r7, #8]
 8003858:	429a      	cmp	r2, r3
 800385a:	d302      	bcc.n	8003862 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800385c:	68bb      	ldr	r3, [r7, #8]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d11d      	bne.n	800389e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	695b      	ldr	r3, [r3, #20]
 8003868:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800386c:	2b40      	cmp	r3, #64	@ 0x40
 800386e:	d016      	beq.n	800389e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	2200      	movs	r2, #0
 8003874:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	2220      	movs	r2, #32
 800387a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	2200      	movs	r2, #0
 8003882:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800388a:	f043 0220 	orr.w	r2, r3, #32
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	2200      	movs	r2, #0
 8003896:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800389a:	2301      	movs	r3, #1
 800389c:	e007      	b.n	80038ae <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	695b      	ldr	r3, [r3, #20]
 80038a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038a8:	2b40      	cmp	r3, #64	@ 0x40
 80038aa:	d1ae      	bne.n	800380a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80038ac:	2300      	movs	r3, #0
}
 80038ae:	4618      	mov	r0, r3
 80038b0:	3710      	adds	r7, #16
 80038b2:	46bd      	mov	sp, r7
 80038b4:	bd80      	pop	{r7, pc}

080038b6 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80038b6:	b480      	push	{r7}
 80038b8:	b083      	sub	sp, #12
 80038ba:	af00      	add	r7, sp, #0
 80038bc:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	695b      	ldr	r3, [r3, #20]
 80038c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80038c8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80038cc:	d11b      	bne.n	8003906 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80038d6:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2200      	movs	r2, #0
 80038dc:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2220      	movs	r2, #32
 80038e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2200      	movs	r2, #0
 80038ea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038f2:	f043 0204 	orr.w	r2, r3, #4
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2200      	movs	r2, #0
 80038fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003902:	2301      	movs	r3, #1
 8003904:	e000      	b.n	8003908 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003906:	2300      	movs	r3, #0
}
 8003908:	4618      	mov	r0, r3
 800390a:	370c      	adds	r7, #12
 800390c:	46bd      	mov	sp, r7
 800390e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003912:	4770      	bx	lr

08003914 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b084      	sub	sp, #16
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
 800391c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d101      	bne.n	8003928 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003924:	2301      	movs	r3, #1
 8003926:	e0cc      	b.n	8003ac2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003928:	4b68      	ldr	r3, [pc, #416]	@ (8003acc <HAL_RCC_ClockConfig+0x1b8>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f003 030f 	and.w	r3, r3, #15
 8003930:	683a      	ldr	r2, [r7, #0]
 8003932:	429a      	cmp	r2, r3
 8003934:	d90c      	bls.n	8003950 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003936:	4b65      	ldr	r3, [pc, #404]	@ (8003acc <HAL_RCC_ClockConfig+0x1b8>)
 8003938:	683a      	ldr	r2, [r7, #0]
 800393a:	b2d2      	uxtb	r2, r2
 800393c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800393e:	4b63      	ldr	r3, [pc, #396]	@ (8003acc <HAL_RCC_ClockConfig+0x1b8>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f003 030f 	and.w	r3, r3, #15
 8003946:	683a      	ldr	r2, [r7, #0]
 8003948:	429a      	cmp	r2, r3
 800394a:	d001      	beq.n	8003950 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800394c:	2301      	movs	r3, #1
 800394e:	e0b8      	b.n	8003ac2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f003 0302 	and.w	r3, r3, #2
 8003958:	2b00      	cmp	r3, #0
 800395a:	d020      	beq.n	800399e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f003 0304 	and.w	r3, r3, #4
 8003964:	2b00      	cmp	r3, #0
 8003966:	d005      	beq.n	8003974 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003968:	4b59      	ldr	r3, [pc, #356]	@ (8003ad0 <HAL_RCC_ClockConfig+0x1bc>)
 800396a:	689b      	ldr	r3, [r3, #8]
 800396c:	4a58      	ldr	r2, [pc, #352]	@ (8003ad0 <HAL_RCC_ClockConfig+0x1bc>)
 800396e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003972:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f003 0308 	and.w	r3, r3, #8
 800397c:	2b00      	cmp	r3, #0
 800397e:	d005      	beq.n	800398c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003980:	4b53      	ldr	r3, [pc, #332]	@ (8003ad0 <HAL_RCC_ClockConfig+0x1bc>)
 8003982:	689b      	ldr	r3, [r3, #8]
 8003984:	4a52      	ldr	r2, [pc, #328]	@ (8003ad0 <HAL_RCC_ClockConfig+0x1bc>)
 8003986:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800398a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800398c:	4b50      	ldr	r3, [pc, #320]	@ (8003ad0 <HAL_RCC_ClockConfig+0x1bc>)
 800398e:	689b      	ldr	r3, [r3, #8]
 8003990:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	689b      	ldr	r3, [r3, #8]
 8003998:	494d      	ldr	r1, [pc, #308]	@ (8003ad0 <HAL_RCC_ClockConfig+0x1bc>)
 800399a:	4313      	orrs	r3, r2
 800399c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f003 0301 	and.w	r3, r3, #1
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d044      	beq.n	8003a34 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	2b01      	cmp	r3, #1
 80039b0:	d107      	bne.n	80039c2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039b2:	4b47      	ldr	r3, [pc, #284]	@ (8003ad0 <HAL_RCC_ClockConfig+0x1bc>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d119      	bne.n	80039f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039be:	2301      	movs	r3, #1
 80039c0:	e07f      	b.n	8003ac2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	2b02      	cmp	r3, #2
 80039c8:	d003      	beq.n	80039d2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80039ce:	2b03      	cmp	r3, #3
 80039d0:	d107      	bne.n	80039e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039d2:	4b3f      	ldr	r3, [pc, #252]	@ (8003ad0 <HAL_RCC_ClockConfig+0x1bc>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d109      	bne.n	80039f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039de:	2301      	movs	r3, #1
 80039e0:	e06f      	b.n	8003ac2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039e2:	4b3b      	ldr	r3, [pc, #236]	@ (8003ad0 <HAL_RCC_ClockConfig+0x1bc>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f003 0302 	and.w	r3, r3, #2
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d101      	bne.n	80039f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039ee:	2301      	movs	r3, #1
 80039f0:	e067      	b.n	8003ac2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80039f2:	4b37      	ldr	r3, [pc, #220]	@ (8003ad0 <HAL_RCC_ClockConfig+0x1bc>)
 80039f4:	689b      	ldr	r3, [r3, #8]
 80039f6:	f023 0203 	bic.w	r2, r3, #3
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	4934      	ldr	r1, [pc, #208]	@ (8003ad0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a00:	4313      	orrs	r3, r2
 8003a02:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003a04:	f7fe fc6c 	bl	80022e0 <HAL_GetTick>
 8003a08:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a0a:	e00a      	b.n	8003a22 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a0c:	f7fe fc68 	bl	80022e0 <HAL_GetTick>
 8003a10:	4602      	mov	r2, r0
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	1ad3      	subs	r3, r2, r3
 8003a16:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d901      	bls.n	8003a22 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003a1e:	2303      	movs	r3, #3
 8003a20:	e04f      	b.n	8003ac2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a22:	4b2b      	ldr	r3, [pc, #172]	@ (8003ad0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a24:	689b      	ldr	r3, [r3, #8]
 8003a26:	f003 020c 	and.w	r2, r3, #12
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	009b      	lsls	r3, r3, #2
 8003a30:	429a      	cmp	r2, r3
 8003a32:	d1eb      	bne.n	8003a0c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003a34:	4b25      	ldr	r3, [pc, #148]	@ (8003acc <HAL_RCC_ClockConfig+0x1b8>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f003 030f 	and.w	r3, r3, #15
 8003a3c:	683a      	ldr	r2, [r7, #0]
 8003a3e:	429a      	cmp	r2, r3
 8003a40:	d20c      	bcs.n	8003a5c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a42:	4b22      	ldr	r3, [pc, #136]	@ (8003acc <HAL_RCC_ClockConfig+0x1b8>)
 8003a44:	683a      	ldr	r2, [r7, #0]
 8003a46:	b2d2      	uxtb	r2, r2
 8003a48:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a4a:	4b20      	ldr	r3, [pc, #128]	@ (8003acc <HAL_RCC_ClockConfig+0x1b8>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f003 030f 	and.w	r3, r3, #15
 8003a52:	683a      	ldr	r2, [r7, #0]
 8003a54:	429a      	cmp	r2, r3
 8003a56:	d001      	beq.n	8003a5c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003a58:	2301      	movs	r3, #1
 8003a5a:	e032      	b.n	8003ac2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f003 0304 	and.w	r3, r3, #4
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d008      	beq.n	8003a7a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a68:	4b19      	ldr	r3, [pc, #100]	@ (8003ad0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a6a:	689b      	ldr	r3, [r3, #8]
 8003a6c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	68db      	ldr	r3, [r3, #12]
 8003a74:	4916      	ldr	r1, [pc, #88]	@ (8003ad0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a76:	4313      	orrs	r3, r2
 8003a78:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f003 0308 	and.w	r3, r3, #8
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d009      	beq.n	8003a9a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a86:	4b12      	ldr	r3, [pc, #72]	@ (8003ad0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a88:	689b      	ldr	r3, [r3, #8]
 8003a8a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	691b      	ldr	r3, [r3, #16]
 8003a92:	00db      	lsls	r3, r3, #3
 8003a94:	490e      	ldr	r1, [pc, #56]	@ (8003ad0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a96:	4313      	orrs	r3, r2
 8003a98:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003a9a:	f000 f855 	bl	8003b48 <HAL_RCC_GetSysClockFreq>
 8003a9e:	4602      	mov	r2, r0
 8003aa0:	4b0b      	ldr	r3, [pc, #44]	@ (8003ad0 <HAL_RCC_ClockConfig+0x1bc>)
 8003aa2:	689b      	ldr	r3, [r3, #8]
 8003aa4:	091b      	lsrs	r3, r3, #4
 8003aa6:	f003 030f 	and.w	r3, r3, #15
 8003aaa:	490a      	ldr	r1, [pc, #40]	@ (8003ad4 <HAL_RCC_ClockConfig+0x1c0>)
 8003aac:	5ccb      	ldrb	r3, [r1, r3]
 8003aae:	fa22 f303 	lsr.w	r3, r2, r3
 8003ab2:	4a09      	ldr	r2, [pc, #36]	@ (8003ad8 <HAL_RCC_ClockConfig+0x1c4>)
 8003ab4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003ab6:	4b09      	ldr	r3, [pc, #36]	@ (8003adc <HAL_RCC_ClockConfig+0x1c8>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4618      	mov	r0, r3
 8003abc:	f7fe fbcc 	bl	8002258 <HAL_InitTick>

  return HAL_OK;
 8003ac0:	2300      	movs	r3, #0
}
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	3710      	adds	r7, #16
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	bd80      	pop	{r7, pc}
 8003aca:	bf00      	nop
 8003acc:	40023c00 	.word	0x40023c00
 8003ad0:	40023800 	.word	0x40023800
 8003ad4:	08005ba8 	.word	0x08005ba8
 8003ad8:	20000014 	.word	0x20000014
 8003adc:	20000018 	.word	0x20000018

08003ae0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ae4:	4b03      	ldr	r3, [pc, #12]	@ (8003af4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
}
 8003ae8:	4618      	mov	r0, r3
 8003aea:	46bd      	mov	sp, r7
 8003aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af0:	4770      	bx	lr
 8003af2:	bf00      	nop
 8003af4:	20000014 	.word	0x20000014

08003af8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003afc:	f7ff fff0 	bl	8003ae0 <HAL_RCC_GetHCLKFreq>
 8003b00:	4602      	mov	r2, r0
 8003b02:	4b05      	ldr	r3, [pc, #20]	@ (8003b18 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003b04:	689b      	ldr	r3, [r3, #8]
 8003b06:	0a9b      	lsrs	r3, r3, #10
 8003b08:	f003 0307 	and.w	r3, r3, #7
 8003b0c:	4903      	ldr	r1, [pc, #12]	@ (8003b1c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b0e:	5ccb      	ldrb	r3, [r1, r3]
 8003b10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b14:	4618      	mov	r0, r3
 8003b16:	bd80      	pop	{r7, pc}
 8003b18:	40023800 	.word	0x40023800
 8003b1c:	08005bb8 	.word	0x08005bb8

08003b20 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003b24:	f7ff ffdc 	bl	8003ae0 <HAL_RCC_GetHCLKFreq>
 8003b28:	4602      	mov	r2, r0
 8003b2a:	4b05      	ldr	r3, [pc, #20]	@ (8003b40 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003b2c:	689b      	ldr	r3, [r3, #8]
 8003b2e:	0b5b      	lsrs	r3, r3, #13
 8003b30:	f003 0307 	and.w	r3, r3, #7
 8003b34:	4903      	ldr	r1, [pc, #12]	@ (8003b44 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b36:	5ccb      	ldrb	r3, [r1, r3]
 8003b38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	bd80      	pop	{r7, pc}
 8003b40:	40023800 	.word	0x40023800
 8003b44:	08005bb8 	.word	0x08005bb8

08003b48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b4c:	b0ae      	sub	sp, #184	@ 0xb8
 8003b4e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003b50:	2300      	movs	r3, #0
 8003b52:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8003b56:	2300      	movs	r3, #0
 8003b58:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8003b62:	2300      	movs	r3, #0
 8003b64:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8003b68:	2300      	movs	r3, #0
 8003b6a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003b6e:	4bcb      	ldr	r3, [pc, #812]	@ (8003e9c <HAL_RCC_GetSysClockFreq+0x354>)
 8003b70:	689b      	ldr	r3, [r3, #8]
 8003b72:	f003 030c 	and.w	r3, r3, #12
 8003b76:	2b0c      	cmp	r3, #12
 8003b78:	f200 8206 	bhi.w	8003f88 <HAL_RCC_GetSysClockFreq+0x440>
 8003b7c:	a201      	add	r2, pc, #4	@ (adr r2, 8003b84 <HAL_RCC_GetSysClockFreq+0x3c>)
 8003b7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b82:	bf00      	nop
 8003b84:	08003bb9 	.word	0x08003bb9
 8003b88:	08003f89 	.word	0x08003f89
 8003b8c:	08003f89 	.word	0x08003f89
 8003b90:	08003f89 	.word	0x08003f89
 8003b94:	08003bc1 	.word	0x08003bc1
 8003b98:	08003f89 	.word	0x08003f89
 8003b9c:	08003f89 	.word	0x08003f89
 8003ba0:	08003f89 	.word	0x08003f89
 8003ba4:	08003bc9 	.word	0x08003bc9
 8003ba8:	08003f89 	.word	0x08003f89
 8003bac:	08003f89 	.word	0x08003f89
 8003bb0:	08003f89 	.word	0x08003f89
 8003bb4:	08003db9 	.word	0x08003db9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003bb8:	4bb9      	ldr	r3, [pc, #740]	@ (8003ea0 <HAL_RCC_GetSysClockFreq+0x358>)
 8003bba:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003bbe:	e1e7      	b.n	8003f90 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003bc0:	4bb8      	ldr	r3, [pc, #736]	@ (8003ea4 <HAL_RCC_GetSysClockFreq+0x35c>)
 8003bc2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003bc6:	e1e3      	b.n	8003f90 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003bc8:	4bb4      	ldr	r3, [pc, #720]	@ (8003e9c <HAL_RCC_GetSysClockFreq+0x354>)
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003bd0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003bd4:	4bb1      	ldr	r3, [pc, #708]	@ (8003e9c <HAL_RCC_GetSysClockFreq+0x354>)
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d071      	beq.n	8003cc4 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003be0:	4bae      	ldr	r3, [pc, #696]	@ (8003e9c <HAL_RCC_GetSysClockFreq+0x354>)
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	099b      	lsrs	r3, r3, #6
 8003be6:	2200      	movs	r2, #0
 8003be8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003bec:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8003bf0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003bf4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003bf8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003c02:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003c06:	4622      	mov	r2, r4
 8003c08:	462b      	mov	r3, r5
 8003c0a:	f04f 0000 	mov.w	r0, #0
 8003c0e:	f04f 0100 	mov.w	r1, #0
 8003c12:	0159      	lsls	r1, r3, #5
 8003c14:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c18:	0150      	lsls	r0, r2, #5
 8003c1a:	4602      	mov	r2, r0
 8003c1c:	460b      	mov	r3, r1
 8003c1e:	4621      	mov	r1, r4
 8003c20:	1a51      	subs	r1, r2, r1
 8003c22:	6439      	str	r1, [r7, #64]	@ 0x40
 8003c24:	4629      	mov	r1, r5
 8003c26:	eb63 0301 	sbc.w	r3, r3, r1
 8003c2a:	647b      	str	r3, [r7, #68]	@ 0x44
 8003c2c:	f04f 0200 	mov.w	r2, #0
 8003c30:	f04f 0300 	mov.w	r3, #0
 8003c34:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8003c38:	4649      	mov	r1, r9
 8003c3a:	018b      	lsls	r3, r1, #6
 8003c3c:	4641      	mov	r1, r8
 8003c3e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003c42:	4641      	mov	r1, r8
 8003c44:	018a      	lsls	r2, r1, #6
 8003c46:	4641      	mov	r1, r8
 8003c48:	1a51      	subs	r1, r2, r1
 8003c4a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003c4c:	4649      	mov	r1, r9
 8003c4e:	eb63 0301 	sbc.w	r3, r3, r1
 8003c52:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003c54:	f04f 0200 	mov.w	r2, #0
 8003c58:	f04f 0300 	mov.w	r3, #0
 8003c5c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8003c60:	4649      	mov	r1, r9
 8003c62:	00cb      	lsls	r3, r1, #3
 8003c64:	4641      	mov	r1, r8
 8003c66:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003c6a:	4641      	mov	r1, r8
 8003c6c:	00ca      	lsls	r2, r1, #3
 8003c6e:	4610      	mov	r0, r2
 8003c70:	4619      	mov	r1, r3
 8003c72:	4603      	mov	r3, r0
 8003c74:	4622      	mov	r2, r4
 8003c76:	189b      	adds	r3, r3, r2
 8003c78:	633b      	str	r3, [r7, #48]	@ 0x30
 8003c7a:	462b      	mov	r3, r5
 8003c7c:	460a      	mov	r2, r1
 8003c7e:	eb42 0303 	adc.w	r3, r2, r3
 8003c82:	637b      	str	r3, [r7, #52]	@ 0x34
 8003c84:	f04f 0200 	mov.w	r2, #0
 8003c88:	f04f 0300 	mov.w	r3, #0
 8003c8c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003c90:	4629      	mov	r1, r5
 8003c92:	024b      	lsls	r3, r1, #9
 8003c94:	4621      	mov	r1, r4
 8003c96:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003c9a:	4621      	mov	r1, r4
 8003c9c:	024a      	lsls	r2, r1, #9
 8003c9e:	4610      	mov	r0, r2
 8003ca0:	4619      	mov	r1, r3
 8003ca2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003cac:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003cb0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8003cb4:	f7fc ff0e 	bl	8000ad4 <__aeabi_uldivmod>
 8003cb8:	4602      	mov	r2, r0
 8003cba:	460b      	mov	r3, r1
 8003cbc:	4613      	mov	r3, r2
 8003cbe:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003cc2:	e067      	b.n	8003d94 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003cc4:	4b75      	ldr	r3, [pc, #468]	@ (8003e9c <HAL_RCC_GetSysClockFreq+0x354>)
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	099b      	lsrs	r3, r3, #6
 8003cca:	2200      	movs	r2, #0
 8003ccc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003cd0:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8003cd4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003cd8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003cdc:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003cde:	2300      	movs	r3, #0
 8003ce0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003ce2:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8003ce6:	4622      	mov	r2, r4
 8003ce8:	462b      	mov	r3, r5
 8003cea:	f04f 0000 	mov.w	r0, #0
 8003cee:	f04f 0100 	mov.w	r1, #0
 8003cf2:	0159      	lsls	r1, r3, #5
 8003cf4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003cf8:	0150      	lsls	r0, r2, #5
 8003cfa:	4602      	mov	r2, r0
 8003cfc:	460b      	mov	r3, r1
 8003cfe:	4621      	mov	r1, r4
 8003d00:	1a51      	subs	r1, r2, r1
 8003d02:	62b9      	str	r1, [r7, #40]	@ 0x28
 8003d04:	4629      	mov	r1, r5
 8003d06:	eb63 0301 	sbc.w	r3, r3, r1
 8003d0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003d0c:	f04f 0200 	mov.w	r2, #0
 8003d10:	f04f 0300 	mov.w	r3, #0
 8003d14:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8003d18:	4649      	mov	r1, r9
 8003d1a:	018b      	lsls	r3, r1, #6
 8003d1c:	4641      	mov	r1, r8
 8003d1e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003d22:	4641      	mov	r1, r8
 8003d24:	018a      	lsls	r2, r1, #6
 8003d26:	4641      	mov	r1, r8
 8003d28:	ebb2 0a01 	subs.w	sl, r2, r1
 8003d2c:	4649      	mov	r1, r9
 8003d2e:	eb63 0b01 	sbc.w	fp, r3, r1
 8003d32:	f04f 0200 	mov.w	r2, #0
 8003d36:	f04f 0300 	mov.w	r3, #0
 8003d3a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003d3e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003d42:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003d46:	4692      	mov	sl, r2
 8003d48:	469b      	mov	fp, r3
 8003d4a:	4623      	mov	r3, r4
 8003d4c:	eb1a 0303 	adds.w	r3, sl, r3
 8003d50:	623b      	str	r3, [r7, #32]
 8003d52:	462b      	mov	r3, r5
 8003d54:	eb4b 0303 	adc.w	r3, fp, r3
 8003d58:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d5a:	f04f 0200 	mov.w	r2, #0
 8003d5e:	f04f 0300 	mov.w	r3, #0
 8003d62:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003d66:	4629      	mov	r1, r5
 8003d68:	028b      	lsls	r3, r1, #10
 8003d6a:	4621      	mov	r1, r4
 8003d6c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003d70:	4621      	mov	r1, r4
 8003d72:	028a      	lsls	r2, r1, #10
 8003d74:	4610      	mov	r0, r2
 8003d76:	4619      	mov	r1, r3
 8003d78:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	673b      	str	r3, [r7, #112]	@ 0x70
 8003d80:	677a      	str	r2, [r7, #116]	@ 0x74
 8003d82:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8003d86:	f7fc fea5 	bl	8000ad4 <__aeabi_uldivmod>
 8003d8a:	4602      	mov	r2, r0
 8003d8c:	460b      	mov	r3, r1
 8003d8e:	4613      	mov	r3, r2
 8003d90:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003d94:	4b41      	ldr	r3, [pc, #260]	@ (8003e9c <HAL_RCC_GetSysClockFreq+0x354>)
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	0c1b      	lsrs	r3, r3, #16
 8003d9a:	f003 0303 	and.w	r3, r3, #3
 8003d9e:	3301      	adds	r3, #1
 8003da0:	005b      	lsls	r3, r3, #1
 8003da2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8003da6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003daa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003dae:	fbb2 f3f3 	udiv	r3, r2, r3
 8003db2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003db6:	e0eb      	b.n	8003f90 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003db8:	4b38      	ldr	r3, [pc, #224]	@ (8003e9c <HAL_RCC_GetSysClockFreq+0x354>)
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003dc0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003dc4:	4b35      	ldr	r3, [pc, #212]	@ (8003e9c <HAL_RCC_GetSysClockFreq+0x354>)
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d06b      	beq.n	8003ea8 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003dd0:	4b32      	ldr	r3, [pc, #200]	@ (8003e9c <HAL_RCC_GetSysClockFreq+0x354>)
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	099b      	lsrs	r3, r3, #6
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003dda:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003ddc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003dde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003de2:	663b      	str	r3, [r7, #96]	@ 0x60
 8003de4:	2300      	movs	r3, #0
 8003de6:	667b      	str	r3, [r7, #100]	@ 0x64
 8003de8:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8003dec:	4622      	mov	r2, r4
 8003dee:	462b      	mov	r3, r5
 8003df0:	f04f 0000 	mov.w	r0, #0
 8003df4:	f04f 0100 	mov.w	r1, #0
 8003df8:	0159      	lsls	r1, r3, #5
 8003dfa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003dfe:	0150      	lsls	r0, r2, #5
 8003e00:	4602      	mov	r2, r0
 8003e02:	460b      	mov	r3, r1
 8003e04:	4621      	mov	r1, r4
 8003e06:	1a51      	subs	r1, r2, r1
 8003e08:	61b9      	str	r1, [r7, #24]
 8003e0a:	4629      	mov	r1, r5
 8003e0c:	eb63 0301 	sbc.w	r3, r3, r1
 8003e10:	61fb      	str	r3, [r7, #28]
 8003e12:	f04f 0200 	mov.w	r2, #0
 8003e16:	f04f 0300 	mov.w	r3, #0
 8003e1a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003e1e:	4659      	mov	r1, fp
 8003e20:	018b      	lsls	r3, r1, #6
 8003e22:	4651      	mov	r1, sl
 8003e24:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003e28:	4651      	mov	r1, sl
 8003e2a:	018a      	lsls	r2, r1, #6
 8003e2c:	4651      	mov	r1, sl
 8003e2e:	ebb2 0801 	subs.w	r8, r2, r1
 8003e32:	4659      	mov	r1, fp
 8003e34:	eb63 0901 	sbc.w	r9, r3, r1
 8003e38:	f04f 0200 	mov.w	r2, #0
 8003e3c:	f04f 0300 	mov.w	r3, #0
 8003e40:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003e44:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003e48:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003e4c:	4690      	mov	r8, r2
 8003e4e:	4699      	mov	r9, r3
 8003e50:	4623      	mov	r3, r4
 8003e52:	eb18 0303 	adds.w	r3, r8, r3
 8003e56:	613b      	str	r3, [r7, #16]
 8003e58:	462b      	mov	r3, r5
 8003e5a:	eb49 0303 	adc.w	r3, r9, r3
 8003e5e:	617b      	str	r3, [r7, #20]
 8003e60:	f04f 0200 	mov.w	r2, #0
 8003e64:	f04f 0300 	mov.w	r3, #0
 8003e68:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003e6c:	4629      	mov	r1, r5
 8003e6e:	024b      	lsls	r3, r1, #9
 8003e70:	4621      	mov	r1, r4
 8003e72:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003e76:	4621      	mov	r1, r4
 8003e78:	024a      	lsls	r2, r1, #9
 8003e7a:	4610      	mov	r0, r2
 8003e7c:	4619      	mov	r1, r3
 8003e7e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003e82:	2200      	movs	r2, #0
 8003e84:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003e86:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8003e88:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003e8c:	f7fc fe22 	bl	8000ad4 <__aeabi_uldivmod>
 8003e90:	4602      	mov	r2, r0
 8003e92:	460b      	mov	r3, r1
 8003e94:	4613      	mov	r3, r2
 8003e96:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003e9a:	e065      	b.n	8003f68 <HAL_RCC_GetSysClockFreq+0x420>
 8003e9c:	40023800 	.word	0x40023800
 8003ea0:	00f42400 	.word	0x00f42400
 8003ea4:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ea8:	4b3d      	ldr	r3, [pc, #244]	@ (8003fa0 <HAL_RCC_GetSysClockFreq+0x458>)
 8003eaa:	685b      	ldr	r3, [r3, #4]
 8003eac:	099b      	lsrs	r3, r3, #6
 8003eae:	2200      	movs	r2, #0
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	4611      	mov	r1, r2
 8003eb4:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003eb8:	653b      	str	r3, [r7, #80]	@ 0x50
 8003eba:	2300      	movs	r3, #0
 8003ebc:	657b      	str	r3, [r7, #84]	@ 0x54
 8003ebe:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8003ec2:	4642      	mov	r2, r8
 8003ec4:	464b      	mov	r3, r9
 8003ec6:	f04f 0000 	mov.w	r0, #0
 8003eca:	f04f 0100 	mov.w	r1, #0
 8003ece:	0159      	lsls	r1, r3, #5
 8003ed0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ed4:	0150      	lsls	r0, r2, #5
 8003ed6:	4602      	mov	r2, r0
 8003ed8:	460b      	mov	r3, r1
 8003eda:	4641      	mov	r1, r8
 8003edc:	1a51      	subs	r1, r2, r1
 8003ede:	60b9      	str	r1, [r7, #8]
 8003ee0:	4649      	mov	r1, r9
 8003ee2:	eb63 0301 	sbc.w	r3, r3, r1
 8003ee6:	60fb      	str	r3, [r7, #12]
 8003ee8:	f04f 0200 	mov.w	r2, #0
 8003eec:	f04f 0300 	mov.w	r3, #0
 8003ef0:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003ef4:	4659      	mov	r1, fp
 8003ef6:	018b      	lsls	r3, r1, #6
 8003ef8:	4651      	mov	r1, sl
 8003efa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003efe:	4651      	mov	r1, sl
 8003f00:	018a      	lsls	r2, r1, #6
 8003f02:	4651      	mov	r1, sl
 8003f04:	1a54      	subs	r4, r2, r1
 8003f06:	4659      	mov	r1, fp
 8003f08:	eb63 0501 	sbc.w	r5, r3, r1
 8003f0c:	f04f 0200 	mov.w	r2, #0
 8003f10:	f04f 0300 	mov.w	r3, #0
 8003f14:	00eb      	lsls	r3, r5, #3
 8003f16:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003f1a:	00e2      	lsls	r2, r4, #3
 8003f1c:	4614      	mov	r4, r2
 8003f1e:	461d      	mov	r5, r3
 8003f20:	4643      	mov	r3, r8
 8003f22:	18e3      	adds	r3, r4, r3
 8003f24:	603b      	str	r3, [r7, #0]
 8003f26:	464b      	mov	r3, r9
 8003f28:	eb45 0303 	adc.w	r3, r5, r3
 8003f2c:	607b      	str	r3, [r7, #4]
 8003f2e:	f04f 0200 	mov.w	r2, #0
 8003f32:	f04f 0300 	mov.w	r3, #0
 8003f36:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003f3a:	4629      	mov	r1, r5
 8003f3c:	028b      	lsls	r3, r1, #10
 8003f3e:	4621      	mov	r1, r4
 8003f40:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003f44:	4621      	mov	r1, r4
 8003f46:	028a      	lsls	r2, r1, #10
 8003f48:	4610      	mov	r0, r2
 8003f4a:	4619      	mov	r1, r3
 8003f4c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003f50:	2200      	movs	r2, #0
 8003f52:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003f54:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8003f56:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003f5a:	f7fc fdbb 	bl	8000ad4 <__aeabi_uldivmod>
 8003f5e:	4602      	mov	r2, r0
 8003f60:	460b      	mov	r3, r1
 8003f62:	4613      	mov	r3, r2
 8003f64:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003f68:	4b0d      	ldr	r3, [pc, #52]	@ (8003fa0 <HAL_RCC_GetSysClockFreq+0x458>)
 8003f6a:	685b      	ldr	r3, [r3, #4]
 8003f6c:	0f1b      	lsrs	r3, r3, #28
 8003f6e:	f003 0307 	and.w	r3, r3, #7
 8003f72:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8003f76:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003f7a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003f7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f82:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003f86:	e003      	b.n	8003f90 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003f88:	4b06      	ldr	r3, [pc, #24]	@ (8003fa4 <HAL_RCC_GetSysClockFreq+0x45c>)
 8003f8a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003f8e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f90:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8003f94:	4618      	mov	r0, r3
 8003f96:	37b8      	adds	r7, #184	@ 0xb8
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f9e:	bf00      	nop
 8003fa0:	40023800 	.word	0x40023800
 8003fa4:	00f42400 	.word	0x00f42400

08003fa8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b086      	sub	sp, #24
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d101      	bne.n	8003fba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	e28d      	b.n	80044d6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f003 0301 	and.w	r3, r3, #1
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	f000 8083 	beq.w	80040ce <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003fc8:	4b94      	ldr	r3, [pc, #592]	@ (800421c <HAL_RCC_OscConfig+0x274>)
 8003fca:	689b      	ldr	r3, [r3, #8]
 8003fcc:	f003 030c 	and.w	r3, r3, #12
 8003fd0:	2b04      	cmp	r3, #4
 8003fd2:	d019      	beq.n	8004008 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003fd4:	4b91      	ldr	r3, [pc, #580]	@ (800421c <HAL_RCC_OscConfig+0x274>)
 8003fd6:	689b      	ldr	r3, [r3, #8]
 8003fd8:	f003 030c 	and.w	r3, r3, #12
        || \
 8003fdc:	2b08      	cmp	r3, #8
 8003fde:	d106      	bne.n	8003fee <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003fe0:	4b8e      	ldr	r3, [pc, #568]	@ (800421c <HAL_RCC_OscConfig+0x274>)
 8003fe2:	685b      	ldr	r3, [r3, #4]
 8003fe4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003fe8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003fec:	d00c      	beq.n	8004008 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003fee:	4b8b      	ldr	r3, [pc, #556]	@ (800421c <HAL_RCC_OscConfig+0x274>)
 8003ff0:	689b      	ldr	r3, [r3, #8]
 8003ff2:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003ff6:	2b0c      	cmp	r3, #12
 8003ff8:	d112      	bne.n	8004020 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ffa:	4b88      	ldr	r3, [pc, #544]	@ (800421c <HAL_RCC_OscConfig+0x274>)
 8003ffc:	685b      	ldr	r3, [r3, #4]
 8003ffe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004002:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004006:	d10b      	bne.n	8004020 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004008:	4b84      	ldr	r3, [pc, #528]	@ (800421c <HAL_RCC_OscConfig+0x274>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004010:	2b00      	cmp	r3, #0
 8004012:	d05b      	beq.n	80040cc <HAL_RCC_OscConfig+0x124>
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d157      	bne.n	80040cc <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800401c:	2301      	movs	r3, #1
 800401e:	e25a      	b.n	80044d6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004028:	d106      	bne.n	8004038 <HAL_RCC_OscConfig+0x90>
 800402a:	4b7c      	ldr	r3, [pc, #496]	@ (800421c <HAL_RCC_OscConfig+0x274>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4a7b      	ldr	r2, [pc, #492]	@ (800421c <HAL_RCC_OscConfig+0x274>)
 8004030:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004034:	6013      	str	r3, [r2, #0]
 8004036:	e01d      	b.n	8004074 <HAL_RCC_OscConfig+0xcc>
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004040:	d10c      	bne.n	800405c <HAL_RCC_OscConfig+0xb4>
 8004042:	4b76      	ldr	r3, [pc, #472]	@ (800421c <HAL_RCC_OscConfig+0x274>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	4a75      	ldr	r2, [pc, #468]	@ (800421c <HAL_RCC_OscConfig+0x274>)
 8004048:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800404c:	6013      	str	r3, [r2, #0]
 800404e:	4b73      	ldr	r3, [pc, #460]	@ (800421c <HAL_RCC_OscConfig+0x274>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4a72      	ldr	r2, [pc, #456]	@ (800421c <HAL_RCC_OscConfig+0x274>)
 8004054:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004058:	6013      	str	r3, [r2, #0]
 800405a:	e00b      	b.n	8004074 <HAL_RCC_OscConfig+0xcc>
 800405c:	4b6f      	ldr	r3, [pc, #444]	@ (800421c <HAL_RCC_OscConfig+0x274>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4a6e      	ldr	r2, [pc, #440]	@ (800421c <HAL_RCC_OscConfig+0x274>)
 8004062:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004066:	6013      	str	r3, [r2, #0]
 8004068:	4b6c      	ldr	r3, [pc, #432]	@ (800421c <HAL_RCC_OscConfig+0x274>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4a6b      	ldr	r2, [pc, #428]	@ (800421c <HAL_RCC_OscConfig+0x274>)
 800406e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004072:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d013      	beq.n	80040a4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800407c:	f7fe f930 	bl	80022e0 <HAL_GetTick>
 8004080:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004082:	e008      	b.n	8004096 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004084:	f7fe f92c 	bl	80022e0 <HAL_GetTick>
 8004088:	4602      	mov	r2, r0
 800408a:	693b      	ldr	r3, [r7, #16]
 800408c:	1ad3      	subs	r3, r2, r3
 800408e:	2b64      	cmp	r3, #100	@ 0x64
 8004090:	d901      	bls.n	8004096 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004092:	2303      	movs	r3, #3
 8004094:	e21f      	b.n	80044d6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004096:	4b61      	ldr	r3, [pc, #388]	@ (800421c <HAL_RCC_OscConfig+0x274>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d0f0      	beq.n	8004084 <HAL_RCC_OscConfig+0xdc>
 80040a2:	e014      	b.n	80040ce <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040a4:	f7fe f91c 	bl	80022e0 <HAL_GetTick>
 80040a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040aa:	e008      	b.n	80040be <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80040ac:	f7fe f918 	bl	80022e0 <HAL_GetTick>
 80040b0:	4602      	mov	r2, r0
 80040b2:	693b      	ldr	r3, [r7, #16]
 80040b4:	1ad3      	subs	r3, r2, r3
 80040b6:	2b64      	cmp	r3, #100	@ 0x64
 80040b8:	d901      	bls.n	80040be <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80040ba:	2303      	movs	r3, #3
 80040bc:	e20b      	b.n	80044d6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040be:	4b57      	ldr	r3, [pc, #348]	@ (800421c <HAL_RCC_OscConfig+0x274>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d1f0      	bne.n	80040ac <HAL_RCC_OscConfig+0x104>
 80040ca:	e000      	b.n	80040ce <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f003 0302 	and.w	r3, r3, #2
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d06f      	beq.n	80041ba <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80040da:	4b50      	ldr	r3, [pc, #320]	@ (800421c <HAL_RCC_OscConfig+0x274>)
 80040dc:	689b      	ldr	r3, [r3, #8]
 80040de:	f003 030c 	and.w	r3, r3, #12
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d017      	beq.n	8004116 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80040e6:	4b4d      	ldr	r3, [pc, #308]	@ (800421c <HAL_RCC_OscConfig+0x274>)
 80040e8:	689b      	ldr	r3, [r3, #8]
 80040ea:	f003 030c 	and.w	r3, r3, #12
        || \
 80040ee:	2b08      	cmp	r3, #8
 80040f0:	d105      	bne.n	80040fe <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80040f2:	4b4a      	ldr	r3, [pc, #296]	@ (800421c <HAL_RCC_OscConfig+0x274>)
 80040f4:	685b      	ldr	r3, [r3, #4]
 80040f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d00b      	beq.n	8004116 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80040fe:	4b47      	ldr	r3, [pc, #284]	@ (800421c <HAL_RCC_OscConfig+0x274>)
 8004100:	689b      	ldr	r3, [r3, #8]
 8004102:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004106:	2b0c      	cmp	r3, #12
 8004108:	d11c      	bne.n	8004144 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800410a:	4b44      	ldr	r3, [pc, #272]	@ (800421c <HAL_RCC_OscConfig+0x274>)
 800410c:	685b      	ldr	r3, [r3, #4]
 800410e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004112:	2b00      	cmp	r3, #0
 8004114:	d116      	bne.n	8004144 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004116:	4b41      	ldr	r3, [pc, #260]	@ (800421c <HAL_RCC_OscConfig+0x274>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f003 0302 	and.w	r3, r3, #2
 800411e:	2b00      	cmp	r3, #0
 8004120:	d005      	beq.n	800412e <HAL_RCC_OscConfig+0x186>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	68db      	ldr	r3, [r3, #12]
 8004126:	2b01      	cmp	r3, #1
 8004128:	d001      	beq.n	800412e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800412a:	2301      	movs	r3, #1
 800412c:	e1d3      	b.n	80044d6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800412e:	4b3b      	ldr	r3, [pc, #236]	@ (800421c <HAL_RCC_OscConfig+0x274>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	691b      	ldr	r3, [r3, #16]
 800413a:	00db      	lsls	r3, r3, #3
 800413c:	4937      	ldr	r1, [pc, #220]	@ (800421c <HAL_RCC_OscConfig+0x274>)
 800413e:	4313      	orrs	r3, r2
 8004140:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004142:	e03a      	b.n	80041ba <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	68db      	ldr	r3, [r3, #12]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d020      	beq.n	800418e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800414c:	4b34      	ldr	r3, [pc, #208]	@ (8004220 <HAL_RCC_OscConfig+0x278>)
 800414e:	2201      	movs	r2, #1
 8004150:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004152:	f7fe f8c5 	bl	80022e0 <HAL_GetTick>
 8004156:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004158:	e008      	b.n	800416c <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800415a:	f7fe f8c1 	bl	80022e0 <HAL_GetTick>
 800415e:	4602      	mov	r2, r0
 8004160:	693b      	ldr	r3, [r7, #16]
 8004162:	1ad3      	subs	r3, r2, r3
 8004164:	2b02      	cmp	r3, #2
 8004166:	d901      	bls.n	800416c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004168:	2303      	movs	r3, #3
 800416a:	e1b4      	b.n	80044d6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800416c:	4b2b      	ldr	r3, [pc, #172]	@ (800421c <HAL_RCC_OscConfig+0x274>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f003 0302 	and.w	r3, r3, #2
 8004174:	2b00      	cmp	r3, #0
 8004176:	d0f0      	beq.n	800415a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004178:	4b28      	ldr	r3, [pc, #160]	@ (800421c <HAL_RCC_OscConfig+0x274>)
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	691b      	ldr	r3, [r3, #16]
 8004184:	00db      	lsls	r3, r3, #3
 8004186:	4925      	ldr	r1, [pc, #148]	@ (800421c <HAL_RCC_OscConfig+0x274>)
 8004188:	4313      	orrs	r3, r2
 800418a:	600b      	str	r3, [r1, #0]
 800418c:	e015      	b.n	80041ba <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800418e:	4b24      	ldr	r3, [pc, #144]	@ (8004220 <HAL_RCC_OscConfig+0x278>)
 8004190:	2200      	movs	r2, #0
 8004192:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004194:	f7fe f8a4 	bl	80022e0 <HAL_GetTick>
 8004198:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800419a:	e008      	b.n	80041ae <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800419c:	f7fe f8a0 	bl	80022e0 <HAL_GetTick>
 80041a0:	4602      	mov	r2, r0
 80041a2:	693b      	ldr	r3, [r7, #16]
 80041a4:	1ad3      	subs	r3, r2, r3
 80041a6:	2b02      	cmp	r3, #2
 80041a8:	d901      	bls.n	80041ae <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80041aa:	2303      	movs	r3, #3
 80041ac:	e193      	b.n	80044d6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80041ae:	4b1b      	ldr	r3, [pc, #108]	@ (800421c <HAL_RCC_OscConfig+0x274>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f003 0302 	and.w	r3, r3, #2
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d1f0      	bne.n	800419c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f003 0308 	and.w	r3, r3, #8
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d036      	beq.n	8004234 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	695b      	ldr	r3, [r3, #20]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d016      	beq.n	80041fc <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80041ce:	4b15      	ldr	r3, [pc, #84]	@ (8004224 <HAL_RCC_OscConfig+0x27c>)
 80041d0:	2201      	movs	r2, #1
 80041d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041d4:	f7fe f884 	bl	80022e0 <HAL_GetTick>
 80041d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041da:	e008      	b.n	80041ee <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80041dc:	f7fe f880 	bl	80022e0 <HAL_GetTick>
 80041e0:	4602      	mov	r2, r0
 80041e2:	693b      	ldr	r3, [r7, #16]
 80041e4:	1ad3      	subs	r3, r2, r3
 80041e6:	2b02      	cmp	r3, #2
 80041e8:	d901      	bls.n	80041ee <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80041ea:	2303      	movs	r3, #3
 80041ec:	e173      	b.n	80044d6 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041ee:	4b0b      	ldr	r3, [pc, #44]	@ (800421c <HAL_RCC_OscConfig+0x274>)
 80041f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80041f2:	f003 0302 	and.w	r3, r3, #2
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d0f0      	beq.n	80041dc <HAL_RCC_OscConfig+0x234>
 80041fa:	e01b      	b.n	8004234 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80041fc:	4b09      	ldr	r3, [pc, #36]	@ (8004224 <HAL_RCC_OscConfig+0x27c>)
 80041fe:	2200      	movs	r2, #0
 8004200:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004202:	f7fe f86d 	bl	80022e0 <HAL_GetTick>
 8004206:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004208:	e00e      	b.n	8004228 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800420a:	f7fe f869 	bl	80022e0 <HAL_GetTick>
 800420e:	4602      	mov	r2, r0
 8004210:	693b      	ldr	r3, [r7, #16]
 8004212:	1ad3      	subs	r3, r2, r3
 8004214:	2b02      	cmp	r3, #2
 8004216:	d907      	bls.n	8004228 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004218:	2303      	movs	r3, #3
 800421a:	e15c      	b.n	80044d6 <HAL_RCC_OscConfig+0x52e>
 800421c:	40023800 	.word	0x40023800
 8004220:	42470000 	.word	0x42470000
 8004224:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004228:	4b8a      	ldr	r3, [pc, #552]	@ (8004454 <HAL_RCC_OscConfig+0x4ac>)
 800422a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800422c:	f003 0302 	and.w	r3, r3, #2
 8004230:	2b00      	cmp	r3, #0
 8004232:	d1ea      	bne.n	800420a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f003 0304 	and.w	r3, r3, #4
 800423c:	2b00      	cmp	r3, #0
 800423e:	f000 8097 	beq.w	8004370 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004242:	2300      	movs	r3, #0
 8004244:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004246:	4b83      	ldr	r3, [pc, #524]	@ (8004454 <HAL_RCC_OscConfig+0x4ac>)
 8004248:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800424a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800424e:	2b00      	cmp	r3, #0
 8004250:	d10f      	bne.n	8004272 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004252:	2300      	movs	r3, #0
 8004254:	60bb      	str	r3, [r7, #8]
 8004256:	4b7f      	ldr	r3, [pc, #508]	@ (8004454 <HAL_RCC_OscConfig+0x4ac>)
 8004258:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800425a:	4a7e      	ldr	r2, [pc, #504]	@ (8004454 <HAL_RCC_OscConfig+0x4ac>)
 800425c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004260:	6413      	str	r3, [r2, #64]	@ 0x40
 8004262:	4b7c      	ldr	r3, [pc, #496]	@ (8004454 <HAL_RCC_OscConfig+0x4ac>)
 8004264:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004266:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800426a:	60bb      	str	r3, [r7, #8]
 800426c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800426e:	2301      	movs	r3, #1
 8004270:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004272:	4b79      	ldr	r3, [pc, #484]	@ (8004458 <HAL_RCC_OscConfig+0x4b0>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800427a:	2b00      	cmp	r3, #0
 800427c:	d118      	bne.n	80042b0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800427e:	4b76      	ldr	r3, [pc, #472]	@ (8004458 <HAL_RCC_OscConfig+0x4b0>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	4a75      	ldr	r2, [pc, #468]	@ (8004458 <HAL_RCC_OscConfig+0x4b0>)
 8004284:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004288:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800428a:	f7fe f829 	bl	80022e0 <HAL_GetTick>
 800428e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004290:	e008      	b.n	80042a4 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004292:	f7fe f825 	bl	80022e0 <HAL_GetTick>
 8004296:	4602      	mov	r2, r0
 8004298:	693b      	ldr	r3, [r7, #16]
 800429a:	1ad3      	subs	r3, r2, r3
 800429c:	2b02      	cmp	r3, #2
 800429e:	d901      	bls.n	80042a4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80042a0:	2303      	movs	r3, #3
 80042a2:	e118      	b.n	80044d6 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042a4:	4b6c      	ldr	r3, [pc, #432]	@ (8004458 <HAL_RCC_OscConfig+0x4b0>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d0f0      	beq.n	8004292 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	689b      	ldr	r3, [r3, #8]
 80042b4:	2b01      	cmp	r3, #1
 80042b6:	d106      	bne.n	80042c6 <HAL_RCC_OscConfig+0x31e>
 80042b8:	4b66      	ldr	r3, [pc, #408]	@ (8004454 <HAL_RCC_OscConfig+0x4ac>)
 80042ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042bc:	4a65      	ldr	r2, [pc, #404]	@ (8004454 <HAL_RCC_OscConfig+0x4ac>)
 80042be:	f043 0301 	orr.w	r3, r3, #1
 80042c2:	6713      	str	r3, [r2, #112]	@ 0x70
 80042c4:	e01c      	b.n	8004300 <HAL_RCC_OscConfig+0x358>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	689b      	ldr	r3, [r3, #8]
 80042ca:	2b05      	cmp	r3, #5
 80042cc:	d10c      	bne.n	80042e8 <HAL_RCC_OscConfig+0x340>
 80042ce:	4b61      	ldr	r3, [pc, #388]	@ (8004454 <HAL_RCC_OscConfig+0x4ac>)
 80042d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042d2:	4a60      	ldr	r2, [pc, #384]	@ (8004454 <HAL_RCC_OscConfig+0x4ac>)
 80042d4:	f043 0304 	orr.w	r3, r3, #4
 80042d8:	6713      	str	r3, [r2, #112]	@ 0x70
 80042da:	4b5e      	ldr	r3, [pc, #376]	@ (8004454 <HAL_RCC_OscConfig+0x4ac>)
 80042dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042de:	4a5d      	ldr	r2, [pc, #372]	@ (8004454 <HAL_RCC_OscConfig+0x4ac>)
 80042e0:	f043 0301 	orr.w	r3, r3, #1
 80042e4:	6713      	str	r3, [r2, #112]	@ 0x70
 80042e6:	e00b      	b.n	8004300 <HAL_RCC_OscConfig+0x358>
 80042e8:	4b5a      	ldr	r3, [pc, #360]	@ (8004454 <HAL_RCC_OscConfig+0x4ac>)
 80042ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042ec:	4a59      	ldr	r2, [pc, #356]	@ (8004454 <HAL_RCC_OscConfig+0x4ac>)
 80042ee:	f023 0301 	bic.w	r3, r3, #1
 80042f2:	6713      	str	r3, [r2, #112]	@ 0x70
 80042f4:	4b57      	ldr	r3, [pc, #348]	@ (8004454 <HAL_RCC_OscConfig+0x4ac>)
 80042f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042f8:	4a56      	ldr	r2, [pc, #344]	@ (8004454 <HAL_RCC_OscConfig+0x4ac>)
 80042fa:	f023 0304 	bic.w	r3, r3, #4
 80042fe:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	689b      	ldr	r3, [r3, #8]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d015      	beq.n	8004334 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004308:	f7fd ffea 	bl	80022e0 <HAL_GetTick>
 800430c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800430e:	e00a      	b.n	8004326 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004310:	f7fd ffe6 	bl	80022e0 <HAL_GetTick>
 8004314:	4602      	mov	r2, r0
 8004316:	693b      	ldr	r3, [r7, #16]
 8004318:	1ad3      	subs	r3, r2, r3
 800431a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800431e:	4293      	cmp	r3, r2
 8004320:	d901      	bls.n	8004326 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004322:	2303      	movs	r3, #3
 8004324:	e0d7      	b.n	80044d6 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004326:	4b4b      	ldr	r3, [pc, #300]	@ (8004454 <HAL_RCC_OscConfig+0x4ac>)
 8004328:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800432a:	f003 0302 	and.w	r3, r3, #2
 800432e:	2b00      	cmp	r3, #0
 8004330:	d0ee      	beq.n	8004310 <HAL_RCC_OscConfig+0x368>
 8004332:	e014      	b.n	800435e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004334:	f7fd ffd4 	bl	80022e0 <HAL_GetTick>
 8004338:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800433a:	e00a      	b.n	8004352 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800433c:	f7fd ffd0 	bl	80022e0 <HAL_GetTick>
 8004340:	4602      	mov	r2, r0
 8004342:	693b      	ldr	r3, [r7, #16]
 8004344:	1ad3      	subs	r3, r2, r3
 8004346:	f241 3288 	movw	r2, #5000	@ 0x1388
 800434a:	4293      	cmp	r3, r2
 800434c:	d901      	bls.n	8004352 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800434e:	2303      	movs	r3, #3
 8004350:	e0c1      	b.n	80044d6 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004352:	4b40      	ldr	r3, [pc, #256]	@ (8004454 <HAL_RCC_OscConfig+0x4ac>)
 8004354:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004356:	f003 0302 	and.w	r3, r3, #2
 800435a:	2b00      	cmp	r3, #0
 800435c:	d1ee      	bne.n	800433c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800435e:	7dfb      	ldrb	r3, [r7, #23]
 8004360:	2b01      	cmp	r3, #1
 8004362:	d105      	bne.n	8004370 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004364:	4b3b      	ldr	r3, [pc, #236]	@ (8004454 <HAL_RCC_OscConfig+0x4ac>)
 8004366:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004368:	4a3a      	ldr	r2, [pc, #232]	@ (8004454 <HAL_RCC_OscConfig+0x4ac>)
 800436a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800436e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	699b      	ldr	r3, [r3, #24]
 8004374:	2b00      	cmp	r3, #0
 8004376:	f000 80ad 	beq.w	80044d4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800437a:	4b36      	ldr	r3, [pc, #216]	@ (8004454 <HAL_RCC_OscConfig+0x4ac>)
 800437c:	689b      	ldr	r3, [r3, #8]
 800437e:	f003 030c 	and.w	r3, r3, #12
 8004382:	2b08      	cmp	r3, #8
 8004384:	d060      	beq.n	8004448 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	699b      	ldr	r3, [r3, #24]
 800438a:	2b02      	cmp	r3, #2
 800438c:	d145      	bne.n	800441a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800438e:	4b33      	ldr	r3, [pc, #204]	@ (800445c <HAL_RCC_OscConfig+0x4b4>)
 8004390:	2200      	movs	r2, #0
 8004392:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004394:	f7fd ffa4 	bl	80022e0 <HAL_GetTick>
 8004398:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800439a:	e008      	b.n	80043ae <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800439c:	f7fd ffa0 	bl	80022e0 <HAL_GetTick>
 80043a0:	4602      	mov	r2, r0
 80043a2:	693b      	ldr	r3, [r7, #16]
 80043a4:	1ad3      	subs	r3, r2, r3
 80043a6:	2b02      	cmp	r3, #2
 80043a8:	d901      	bls.n	80043ae <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80043aa:	2303      	movs	r3, #3
 80043ac:	e093      	b.n	80044d6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043ae:	4b29      	ldr	r3, [pc, #164]	@ (8004454 <HAL_RCC_OscConfig+0x4ac>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d1f0      	bne.n	800439c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	69da      	ldr	r2, [r3, #28]
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6a1b      	ldr	r3, [r3, #32]
 80043c2:	431a      	orrs	r2, r3
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043c8:	019b      	lsls	r3, r3, #6
 80043ca:	431a      	orrs	r2, r3
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043d0:	085b      	lsrs	r3, r3, #1
 80043d2:	3b01      	subs	r3, #1
 80043d4:	041b      	lsls	r3, r3, #16
 80043d6:	431a      	orrs	r2, r3
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043dc:	061b      	lsls	r3, r3, #24
 80043de:	431a      	orrs	r2, r3
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043e4:	071b      	lsls	r3, r3, #28
 80043e6:	491b      	ldr	r1, [pc, #108]	@ (8004454 <HAL_RCC_OscConfig+0x4ac>)
 80043e8:	4313      	orrs	r3, r2
 80043ea:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80043ec:	4b1b      	ldr	r3, [pc, #108]	@ (800445c <HAL_RCC_OscConfig+0x4b4>)
 80043ee:	2201      	movs	r2, #1
 80043f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043f2:	f7fd ff75 	bl	80022e0 <HAL_GetTick>
 80043f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043f8:	e008      	b.n	800440c <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043fa:	f7fd ff71 	bl	80022e0 <HAL_GetTick>
 80043fe:	4602      	mov	r2, r0
 8004400:	693b      	ldr	r3, [r7, #16]
 8004402:	1ad3      	subs	r3, r2, r3
 8004404:	2b02      	cmp	r3, #2
 8004406:	d901      	bls.n	800440c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004408:	2303      	movs	r3, #3
 800440a:	e064      	b.n	80044d6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800440c:	4b11      	ldr	r3, [pc, #68]	@ (8004454 <HAL_RCC_OscConfig+0x4ac>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004414:	2b00      	cmp	r3, #0
 8004416:	d0f0      	beq.n	80043fa <HAL_RCC_OscConfig+0x452>
 8004418:	e05c      	b.n	80044d4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800441a:	4b10      	ldr	r3, [pc, #64]	@ (800445c <HAL_RCC_OscConfig+0x4b4>)
 800441c:	2200      	movs	r2, #0
 800441e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004420:	f7fd ff5e 	bl	80022e0 <HAL_GetTick>
 8004424:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004426:	e008      	b.n	800443a <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004428:	f7fd ff5a 	bl	80022e0 <HAL_GetTick>
 800442c:	4602      	mov	r2, r0
 800442e:	693b      	ldr	r3, [r7, #16]
 8004430:	1ad3      	subs	r3, r2, r3
 8004432:	2b02      	cmp	r3, #2
 8004434:	d901      	bls.n	800443a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004436:	2303      	movs	r3, #3
 8004438:	e04d      	b.n	80044d6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800443a:	4b06      	ldr	r3, [pc, #24]	@ (8004454 <HAL_RCC_OscConfig+0x4ac>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004442:	2b00      	cmp	r3, #0
 8004444:	d1f0      	bne.n	8004428 <HAL_RCC_OscConfig+0x480>
 8004446:	e045      	b.n	80044d4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	699b      	ldr	r3, [r3, #24]
 800444c:	2b01      	cmp	r3, #1
 800444e:	d107      	bne.n	8004460 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004450:	2301      	movs	r3, #1
 8004452:	e040      	b.n	80044d6 <HAL_RCC_OscConfig+0x52e>
 8004454:	40023800 	.word	0x40023800
 8004458:	40007000 	.word	0x40007000
 800445c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004460:	4b1f      	ldr	r3, [pc, #124]	@ (80044e0 <HAL_RCC_OscConfig+0x538>)
 8004462:	685b      	ldr	r3, [r3, #4]
 8004464:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	699b      	ldr	r3, [r3, #24]
 800446a:	2b01      	cmp	r3, #1
 800446c:	d030      	beq.n	80044d0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004478:	429a      	cmp	r2, r3
 800447a:	d129      	bne.n	80044d0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004486:	429a      	cmp	r2, r3
 8004488:	d122      	bne.n	80044d0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800448a:	68fa      	ldr	r2, [r7, #12]
 800448c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004490:	4013      	ands	r3, r2
 8004492:	687a      	ldr	r2, [r7, #4]
 8004494:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004496:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004498:	4293      	cmp	r3, r2
 800449a:	d119      	bne.n	80044d0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044a6:	085b      	lsrs	r3, r3, #1
 80044a8:	3b01      	subs	r3, #1
 80044aa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80044ac:	429a      	cmp	r2, r3
 80044ae:	d10f      	bne.n	80044d0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044ba:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80044bc:	429a      	cmp	r2, r3
 80044be:	d107      	bne.n	80044d0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044ca:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80044cc:	429a      	cmp	r2, r3
 80044ce:	d001      	beq.n	80044d4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80044d0:	2301      	movs	r3, #1
 80044d2:	e000      	b.n	80044d6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80044d4:	2300      	movs	r3, #0
}
 80044d6:	4618      	mov	r0, r3
 80044d8:	3718      	adds	r7, #24
 80044da:	46bd      	mov	sp, r7
 80044dc:	bd80      	pop	{r7, pc}
 80044de:	bf00      	nop
 80044e0:	40023800 	.word	0x40023800

080044e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b082      	sub	sp, #8
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d101      	bne.n	80044f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80044f2:	2301      	movs	r3, #1
 80044f4:	e041      	b.n	800457a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80044fc:	b2db      	uxtb	r3, r3
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d106      	bne.n	8004510 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2200      	movs	r2, #0
 8004506:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800450a:	6878      	ldr	r0, [r7, #4]
 800450c:	f7fd fcf0 	bl	8001ef0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2202      	movs	r2, #2
 8004514:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681a      	ldr	r2, [r3, #0]
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	3304      	adds	r3, #4
 8004520:	4619      	mov	r1, r3
 8004522:	4610      	mov	r0, r2
 8004524:	f000 fc90 	bl	8004e48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2201      	movs	r2, #1
 800452c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2201      	movs	r2, #1
 8004534:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2201      	movs	r2, #1
 800453c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2201      	movs	r2, #1
 8004544:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2201      	movs	r2, #1
 800454c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2201      	movs	r2, #1
 8004554:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2201      	movs	r2, #1
 800455c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2201      	movs	r2, #1
 8004564:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2201      	movs	r2, #1
 800456c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2201      	movs	r2, #1
 8004574:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004578:	2300      	movs	r3, #0
}
 800457a:	4618      	mov	r0, r3
 800457c:	3708      	adds	r7, #8
 800457e:	46bd      	mov	sp, r7
 8004580:	bd80      	pop	{r7, pc}
	...

08004584 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004584:	b480      	push	{r7}
 8004586:	b085      	sub	sp, #20
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004592:	b2db      	uxtb	r3, r3
 8004594:	2b01      	cmp	r3, #1
 8004596:	d001      	beq.n	800459c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004598:	2301      	movs	r3, #1
 800459a:	e04e      	b.n	800463a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2202      	movs	r2, #2
 80045a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	68da      	ldr	r2, [r3, #12]
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f042 0201 	orr.w	r2, r2, #1
 80045b2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	4a23      	ldr	r2, [pc, #140]	@ (8004648 <HAL_TIM_Base_Start_IT+0xc4>)
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d022      	beq.n	8004604 <HAL_TIM_Base_Start_IT+0x80>
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80045c6:	d01d      	beq.n	8004604 <HAL_TIM_Base_Start_IT+0x80>
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	4a1f      	ldr	r2, [pc, #124]	@ (800464c <HAL_TIM_Base_Start_IT+0xc8>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d018      	beq.n	8004604 <HAL_TIM_Base_Start_IT+0x80>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	4a1e      	ldr	r2, [pc, #120]	@ (8004650 <HAL_TIM_Base_Start_IT+0xcc>)
 80045d8:	4293      	cmp	r3, r2
 80045da:	d013      	beq.n	8004604 <HAL_TIM_Base_Start_IT+0x80>
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	4a1c      	ldr	r2, [pc, #112]	@ (8004654 <HAL_TIM_Base_Start_IT+0xd0>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d00e      	beq.n	8004604 <HAL_TIM_Base_Start_IT+0x80>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4a1b      	ldr	r2, [pc, #108]	@ (8004658 <HAL_TIM_Base_Start_IT+0xd4>)
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d009      	beq.n	8004604 <HAL_TIM_Base_Start_IT+0x80>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4a19      	ldr	r2, [pc, #100]	@ (800465c <HAL_TIM_Base_Start_IT+0xd8>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d004      	beq.n	8004604 <HAL_TIM_Base_Start_IT+0x80>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	4a18      	ldr	r2, [pc, #96]	@ (8004660 <HAL_TIM_Base_Start_IT+0xdc>)
 8004600:	4293      	cmp	r3, r2
 8004602:	d111      	bne.n	8004628 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	689b      	ldr	r3, [r3, #8]
 800460a:	f003 0307 	and.w	r3, r3, #7
 800460e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	2b06      	cmp	r3, #6
 8004614:	d010      	beq.n	8004638 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	681a      	ldr	r2, [r3, #0]
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f042 0201 	orr.w	r2, r2, #1
 8004624:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004626:	e007      	b.n	8004638 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	681a      	ldr	r2, [r3, #0]
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f042 0201 	orr.w	r2, r2, #1
 8004636:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004638:	2300      	movs	r3, #0
}
 800463a:	4618      	mov	r0, r3
 800463c:	3714      	adds	r7, #20
 800463e:	46bd      	mov	sp, r7
 8004640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004644:	4770      	bx	lr
 8004646:	bf00      	nop
 8004648:	40010000 	.word	0x40010000
 800464c:	40000400 	.word	0x40000400
 8004650:	40000800 	.word	0x40000800
 8004654:	40000c00 	.word	0x40000c00
 8004658:	40010400 	.word	0x40010400
 800465c:	40014000 	.word	0x40014000
 8004660:	40001800 	.word	0x40001800

08004664 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8004664:	b480      	push	{r7}
 8004666:	b083      	sub	sp, #12
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	68da      	ldr	r2, [r3, #12]
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f022 0201 	bic.w	r2, r2, #1
 800467a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	6a1a      	ldr	r2, [r3, #32]
 8004682:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004686:	4013      	ands	r3, r2
 8004688:	2b00      	cmp	r3, #0
 800468a:	d10f      	bne.n	80046ac <HAL_TIM_Base_Stop_IT+0x48>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	6a1a      	ldr	r2, [r3, #32]
 8004692:	f240 4344 	movw	r3, #1092	@ 0x444
 8004696:	4013      	ands	r3, r2
 8004698:	2b00      	cmp	r3, #0
 800469a:	d107      	bne.n	80046ac <HAL_TIM_Base_Stop_IT+0x48>
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	681a      	ldr	r2, [r3, #0]
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f022 0201 	bic.w	r2, r2, #1
 80046aa:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2201      	movs	r2, #1
 80046b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 80046b4:	2300      	movs	r3, #0
}
 80046b6:	4618      	mov	r0, r3
 80046b8:	370c      	adds	r7, #12
 80046ba:	46bd      	mov	sp, r7
 80046bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c0:	4770      	bx	lr

080046c2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80046c2:	b580      	push	{r7, lr}
 80046c4:	b082      	sub	sp, #8
 80046c6:	af00      	add	r7, sp, #0
 80046c8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d101      	bne.n	80046d4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80046d0:	2301      	movs	r3, #1
 80046d2:	e041      	b.n	8004758 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80046da:	b2db      	uxtb	r3, r3
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d106      	bne.n	80046ee <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2200      	movs	r2, #0
 80046e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80046e8:	6878      	ldr	r0, [r7, #4]
 80046ea:	f000 f839 	bl	8004760 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2202      	movs	r2, #2
 80046f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681a      	ldr	r2, [r3, #0]
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	3304      	adds	r3, #4
 80046fe:	4619      	mov	r1, r3
 8004700:	4610      	mov	r0, r2
 8004702:	f000 fba1 	bl	8004e48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2201      	movs	r2, #1
 800470a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2201      	movs	r2, #1
 8004712:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2201      	movs	r2, #1
 800471a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2201      	movs	r2, #1
 8004722:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2201      	movs	r2, #1
 800472a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2201      	movs	r2, #1
 8004732:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2201      	movs	r2, #1
 800473a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2201      	movs	r2, #1
 8004742:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2201      	movs	r2, #1
 800474a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2201      	movs	r2, #1
 8004752:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004756:	2300      	movs	r3, #0
}
 8004758:	4618      	mov	r0, r3
 800475a:	3708      	adds	r7, #8
 800475c:	46bd      	mov	sp, r7
 800475e:	bd80      	pop	{r7, pc}

08004760 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004760:	b480      	push	{r7}
 8004762:	b083      	sub	sp, #12
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004768:	bf00      	nop
 800476a:	370c      	adds	r7, #12
 800476c:	46bd      	mov	sp, r7
 800476e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004772:	4770      	bx	lr

08004774 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004774:	b580      	push	{r7, lr}
 8004776:	b084      	sub	sp, #16
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
 800477c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d109      	bne.n	8004798 <HAL_TIM_PWM_Start+0x24>
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800478a:	b2db      	uxtb	r3, r3
 800478c:	2b01      	cmp	r3, #1
 800478e:	bf14      	ite	ne
 8004790:	2301      	movne	r3, #1
 8004792:	2300      	moveq	r3, #0
 8004794:	b2db      	uxtb	r3, r3
 8004796:	e022      	b.n	80047de <HAL_TIM_PWM_Start+0x6a>
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	2b04      	cmp	r3, #4
 800479c:	d109      	bne.n	80047b2 <HAL_TIM_PWM_Start+0x3e>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80047a4:	b2db      	uxtb	r3, r3
 80047a6:	2b01      	cmp	r3, #1
 80047a8:	bf14      	ite	ne
 80047aa:	2301      	movne	r3, #1
 80047ac:	2300      	moveq	r3, #0
 80047ae:	b2db      	uxtb	r3, r3
 80047b0:	e015      	b.n	80047de <HAL_TIM_PWM_Start+0x6a>
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	2b08      	cmp	r3, #8
 80047b6:	d109      	bne.n	80047cc <HAL_TIM_PWM_Start+0x58>
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80047be:	b2db      	uxtb	r3, r3
 80047c0:	2b01      	cmp	r3, #1
 80047c2:	bf14      	ite	ne
 80047c4:	2301      	movne	r3, #1
 80047c6:	2300      	moveq	r3, #0
 80047c8:	b2db      	uxtb	r3, r3
 80047ca:	e008      	b.n	80047de <HAL_TIM_PWM_Start+0x6a>
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80047d2:	b2db      	uxtb	r3, r3
 80047d4:	2b01      	cmp	r3, #1
 80047d6:	bf14      	ite	ne
 80047d8:	2301      	movne	r3, #1
 80047da:	2300      	moveq	r3, #0
 80047dc:	b2db      	uxtb	r3, r3
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d001      	beq.n	80047e6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80047e2:	2301      	movs	r3, #1
 80047e4:	e07c      	b.n	80048e0 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d104      	bne.n	80047f6 <HAL_TIM_PWM_Start+0x82>
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2202      	movs	r2, #2
 80047f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80047f4:	e013      	b.n	800481e <HAL_TIM_PWM_Start+0xaa>
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	2b04      	cmp	r3, #4
 80047fa:	d104      	bne.n	8004806 <HAL_TIM_PWM_Start+0x92>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2202      	movs	r2, #2
 8004800:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004804:	e00b      	b.n	800481e <HAL_TIM_PWM_Start+0xaa>
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	2b08      	cmp	r3, #8
 800480a:	d104      	bne.n	8004816 <HAL_TIM_PWM_Start+0xa2>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2202      	movs	r2, #2
 8004810:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004814:	e003      	b.n	800481e <HAL_TIM_PWM_Start+0xaa>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2202      	movs	r2, #2
 800481a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	2201      	movs	r2, #1
 8004824:	6839      	ldr	r1, [r7, #0]
 8004826:	4618      	mov	r0, r3
 8004828:	f000 fe04 	bl	8005434 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4a2d      	ldr	r2, [pc, #180]	@ (80048e8 <HAL_TIM_PWM_Start+0x174>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d004      	beq.n	8004840 <HAL_TIM_PWM_Start+0xcc>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	4a2c      	ldr	r2, [pc, #176]	@ (80048ec <HAL_TIM_PWM_Start+0x178>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d101      	bne.n	8004844 <HAL_TIM_PWM_Start+0xd0>
 8004840:	2301      	movs	r3, #1
 8004842:	e000      	b.n	8004846 <HAL_TIM_PWM_Start+0xd2>
 8004844:	2300      	movs	r3, #0
 8004846:	2b00      	cmp	r3, #0
 8004848:	d007      	beq.n	800485a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004858:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4a22      	ldr	r2, [pc, #136]	@ (80048e8 <HAL_TIM_PWM_Start+0x174>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d022      	beq.n	80048aa <HAL_TIM_PWM_Start+0x136>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800486c:	d01d      	beq.n	80048aa <HAL_TIM_PWM_Start+0x136>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	4a1f      	ldr	r2, [pc, #124]	@ (80048f0 <HAL_TIM_PWM_Start+0x17c>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d018      	beq.n	80048aa <HAL_TIM_PWM_Start+0x136>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	4a1d      	ldr	r2, [pc, #116]	@ (80048f4 <HAL_TIM_PWM_Start+0x180>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d013      	beq.n	80048aa <HAL_TIM_PWM_Start+0x136>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	4a1c      	ldr	r2, [pc, #112]	@ (80048f8 <HAL_TIM_PWM_Start+0x184>)
 8004888:	4293      	cmp	r3, r2
 800488a:	d00e      	beq.n	80048aa <HAL_TIM_PWM_Start+0x136>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4a16      	ldr	r2, [pc, #88]	@ (80048ec <HAL_TIM_PWM_Start+0x178>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d009      	beq.n	80048aa <HAL_TIM_PWM_Start+0x136>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4a18      	ldr	r2, [pc, #96]	@ (80048fc <HAL_TIM_PWM_Start+0x188>)
 800489c:	4293      	cmp	r3, r2
 800489e:	d004      	beq.n	80048aa <HAL_TIM_PWM_Start+0x136>
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4a16      	ldr	r2, [pc, #88]	@ (8004900 <HAL_TIM_PWM_Start+0x18c>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d111      	bne.n	80048ce <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	689b      	ldr	r3, [r3, #8]
 80048b0:	f003 0307 	and.w	r3, r3, #7
 80048b4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	2b06      	cmp	r3, #6
 80048ba:	d010      	beq.n	80048de <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	681a      	ldr	r2, [r3, #0]
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f042 0201 	orr.w	r2, r2, #1
 80048ca:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048cc:	e007      	b.n	80048de <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	681a      	ldr	r2, [r3, #0]
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f042 0201 	orr.w	r2, r2, #1
 80048dc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80048de:	2300      	movs	r3, #0
}
 80048e0:	4618      	mov	r0, r3
 80048e2:	3710      	adds	r7, #16
 80048e4:	46bd      	mov	sp, r7
 80048e6:	bd80      	pop	{r7, pc}
 80048e8:	40010000 	.word	0x40010000
 80048ec:	40010400 	.word	0x40010400
 80048f0:	40000400 	.word	0x40000400
 80048f4:	40000800 	.word	0x40000800
 80048f8:	40000c00 	.word	0x40000c00
 80048fc:	40014000 	.word	0x40014000
 8004900:	40001800 	.word	0x40001800

08004904 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004904:	b580      	push	{r7, lr}
 8004906:	b084      	sub	sp, #16
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	68db      	ldr	r3, [r3, #12]
 8004912:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	691b      	ldr	r3, [r3, #16]
 800491a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800491c:	68bb      	ldr	r3, [r7, #8]
 800491e:	f003 0302 	and.w	r3, r3, #2
 8004922:	2b00      	cmp	r3, #0
 8004924:	d020      	beq.n	8004968 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	f003 0302 	and.w	r3, r3, #2
 800492c:	2b00      	cmp	r3, #0
 800492e:	d01b      	beq.n	8004968 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f06f 0202 	mvn.w	r2, #2
 8004938:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2201      	movs	r2, #1
 800493e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	699b      	ldr	r3, [r3, #24]
 8004946:	f003 0303 	and.w	r3, r3, #3
 800494a:	2b00      	cmp	r3, #0
 800494c:	d003      	beq.n	8004956 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800494e:	6878      	ldr	r0, [r7, #4]
 8004950:	f000 fa5b 	bl	8004e0a <HAL_TIM_IC_CaptureCallback>
 8004954:	e005      	b.n	8004962 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004956:	6878      	ldr	r0, [r7, #4]
 8004958:	f000 fa4d 	bl	8004df6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800495c:	6878      	ldr	r0, [r7, #4]
 800495e:	f000 fa5e 	bl	8004e1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2200      	movs	r2, #0
 8004966:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004968:	68bb      	ldr	r3, [r7, #8]
 800496a:	f003 0304 	and.w	r3, r3, #4
 800496e:	2b00      	cmp	r3, #0
 8004970:	d020      	beq.n	80049b4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	f003 0304 	and.w	r3, r3, #4
 8004978:	2b00      	cmp	r3, #0
 800497a:	d01b      	beq.n	80049b4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f06f 0204 	mvn.w	r2, #4
 8004984:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2202      	movs	r2, #2
 800498a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	699b      	ldr	r3, [r3, #24]
 8004992:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004996:	2b00      	cmp	r3, #0
 8004998:	d003      	beq.n	80049a2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800499a:	6878      	ldr	r0, [r7, #4]
 800499c:	f000 fa35 	bl	8004e0a <HAL_TIM_IC_CaptureCallback>
 80049a0:	e005      	b.n	80049ae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049a2:	6878      	ldr	r0, [r7, #4]
 80049a4:	f000 fa27 	bl	8004df6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049a8:	6878      	ldr	r0, [r7, #4]
 80049aa:	f000 fa38 	bl	8004e1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2200      	movs	r2, #0
 80049b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80049b4:	68bb      	ldr	r3, [r7, #8]
 80049b6:	f003 0308 	and.w	r3, r3, #8
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d020      	beq.n	8004a00 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	f003 0308 	and.w	r3, r3, #8
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d01b      	beq.n	8004a00 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f06f 0208 	mvn.w	r2, #8
 80049d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2204      	movs	r2, #4
 80049d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	69db      	ldr	r3, [r3, #28]
 80049de:	f003 0303 	and.w	r3, r3, #3
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d003      	beq.n	80049ee <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049e6:	6878      	ldr	r0, [r7, #4]
 80049e8:	f000 fa0f 	bl	8004e0a <HAL_TIM_IC_CaptureCallback>
 80049ec:	e005      	b.n	80049fa <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049ee:	6878      	ldr	r0, [r7, #4]
 80049f0:	f000 fa01 	bl	8004df6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049f4:	6878      	ldr	r0, [r7, #4]
 80049f6:	f000 fa12 	bl	8004e1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2200      	movs	r2, #0
 80049fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004a00:	68bb      	ldr	r3, [r7, #8]
 8004a02:	f003 0310 	and.w	r3, r3, #16
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d020      	beq.n	8004a4c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	f003 0310 	and.w	r3, r3, #16
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d01b      	beq.n	8004a4c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f06f 0210 	mvn.w	r2, #16
 8004a1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2208      	movs	r2, #8
 8004a22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	69db      	ldr	r3, [r3, #28]
 8004a2a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d003      	beq.n	8004a3a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a32:	6878      	ldr	r0, [r7, #4]
 8004a34:	f000 f9e9 	bl	8004e0a <HAL_TIM_IC_CaptureCallback>
 8004a38:	e005      	b.n	8004a46 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a3a:	6878      	ldr	r0, [r7, #4]
 8004a3c:	f000 f9db 	bl	8004df6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a40:	6878      	ldr	r0, [r7, #4]
 8004a42:	f000 f9ec 	bl	8004e1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2200      	movs	r2, #0
 8004a4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004a4c:	68bb      	ldr	r3, [r7, #8]
 8004a4e:	f003 0301 	and.w	r3, r3, #1
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d00c      	beq.n	8004a70 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	f003 0301 	and.w	r3, r3, #1
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d007      	beq.n	8004a70 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f06f 0201 	mvn.w	r2, #1
 8004a68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004a6a:	6878      	ldr	r0, [r7, #4]
 8004a6c:	f7fc ffb6 	bl	80019dc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004a70:	68bb      	ldr	r3, [r7, #8]
 8004a72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d00c      	beq.n	8004a94 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d007      	beq.n	8004a94 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004a8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004a8e:	6878      	ldr	r0, [r7, #4]
 8004a90:	f000 fd7c 	bl	800558c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004a94:	68bb      	ldr	r3, [r7, #8]
 8004a96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d00c      	beq.n	8004ab8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d007      	beq.n	8004ab8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004ab0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004ab2:	6878      	ldr	r0, [r7, #4]
 8004ab4:	f000 f9bd 	bl	8004e32 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004ab8:	68bb      	ldr	r3, [r7, #8]
 8004aba:	f003 0320 	and.w	r3, r3, #32
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d00c      	beq.n	8004adc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	f003 0320 	and.w	r3, r3, #32
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d007      	beq.n	8004adc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f06f 0220 	mvn.w	r2, #32
 8004ad4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004ad6:	6878      	ldr	r0, [r7, #4]
 8004ad8:	f000 fd4e 	bl	8005578 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004adc:	bf00      	nop
 8004ade:	3710      	adds	r7, #16
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	bd80      	pop	{r7, pc}

08004ae4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b086      	sub	sp, #24
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	60f8      	str	r0, [r7, #12]
 8004aec:	60b9      	str	r1, [r7, #8]
 8004aee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004af0:	2300      	movs	r3, #0
 8004af2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004afa:	2b01      	cmp	r3, #1
 8004afc:	d101      	bne.n	8004b02 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004afe:	2302      	movs	r3, #2
 8004b00:	e0ae      	b.n	8004c60 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	2201      	movs	r2, #1
 8004b06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2b0c      	cmp	r3, #12
 8004b0e:	f200 809f 	bhi.w	8004c50 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004b12:	a201      	add	r2, pc, #4	@ (adr r2, 8004b18 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004b14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b18:	08004b4d 	.word	0x08004b4d
 8004b1c:	08004c51 	.word	0x08004c51
 8004b20:	08004c51 	.word	0x08004c51
 8004b24:	08004c51 	.word	0x08004c51
 8004b28:	08004b8d 	.word	0x08004b8d
 8004b2c:	08004c51 	.word	0x08004c51
 8004b30:	08004c51 	.word	0x08004c51
 8004b34:	08004c51 	.word	0x08004c51
 8004b38:	08004bcf 	.word	0x08004bcf
 8004b3c:	08004c51 	.word	0x08004c51
 8004b40:	08004c51 	.word	0x08004c51
 8004b44:	08004c51 	.word	0x08004c51
 8004b48:	08004c0f 	.word	0x08004c0f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	68b9      	ldr	r1, [r7, #8]
 8004b52:	4618      	mov	r0, r3
 8004b54:	f000 fa24 	bl	8004fa0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	699a      	ldr	r2, [r3, #24]
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f042 0208 	orr.w	r2, r2, #8
 8004b66:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	699a      	ldr	r2, [r3, #24]
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f022 0204 	bic.w	r2, r2, #4
 8004b76:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	6999      	ldr	r1, [r3, #24]
 8004b7e:	68bb      	ldr	r3, [r7, #8]
 8004b80:	691a      	ldr	r2, [r3, #16]
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	430a      	orrs	r2, r1
 8004b88:	619a      	str	r2, [r3, #24]
      break;
 8004b8a:	e064      	b.n	8004c56 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	68b9      	ldr	r1, [r7, #8]
 8004b92:	4618      	mov	r0, r3
 8004b94:	f000 fa74 	bl	8005080 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	699a      	ldr	r2, [r3, #24]
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004ba6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	699a      	ldr	r2, [r3, #24]
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004bb6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	6999      	ldr	r1, [r3, #24]
 8004bbe:	68bb      	ldr	r3, [r7, #8]
 8004bc0:	691b      	ldr	r3, [r3, #16]
 8004bc2:	021a      	lsls	r2, r3, #8
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	430a      	orrs	r2, r1
 8004bca:	619a      	str	r2, [r3, #24]
      break;
 8004bcc:	e043      	b.n	8004c56 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	68b9      	ldr	r1, [r7, #8]
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	f000 fac9 	bl	800516c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	69da      	ldr	r2, [r3, #28]
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f042 0208 	orr.w	r2, r2, #8
 8004be8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	69da      	ldr	r2, [r3, #28]
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f022 0204 	bic.w	r2, r2, #4
 8004bf8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	69d9      	ldr	r1, [r3, #28]
 8004c00:	68bb      	ldr	r3, [r7, #8]
 8004c02:	691a      	ldr	r2, [r3, #16]
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	430a      	orrs	r2, r1
 8004c0a:	61da      	str	r2, [r3, #28]
      break;
 8004c0c:	e023      	b.n	8004c56 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	68b9      	ldr	r1, [r7, #8]
 8004c14:	4618      	mov	r0, r3
 8004c16:	f000 fb1d 	bl	8005254 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	69da      	ldr	r2, [r3, #28]
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004c28:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	69da      	ldr	r2, [r3, #28]
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004c38:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	69d9      	ldr	r1, [r3, #28]
 8004c40:	68bb      	ldr	r3, [r7, #8]
 8004c42:	691b      	ldr	r3, [r3, #16]
 8004c44:	021a      	lsls	r2, r3, #8
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	430a      	orrs	r2, r1
 8004c4c:	61da      	str	r2, [r3, #28]
      break;
 8004c4e:	e002      	b.n	8004c56 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004c50:	2301      	movs	r3, #1
 8004c52:	75fb      	strb	r3, [r7, #23]
      break;
 8004c54:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	2200      	movs	r2, #0
 8004c5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004c5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c60:	4618      	mov	r0, r3
 8004c62:	3718      	adds	r7, #24
 8004c64:	46bd      	mov	sp, r7
 8004c66:	bd80      	pop	{r7, pc}

08004c68 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b084      	sub	sp, #16
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
 8004c70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004c72:	2300      	movs	r3, #0
 8004c74:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004c7c:	2b01      	cmp	r3, #1
 8004c7e:	d101      	bne.n	8004c84 <HAL_TIM_ConfigClockSource+0x1c>
 8004c80:	2302      	movs	r3, #2
 8004c82:	e0b4      	b.n	8004dee <HAL_TIM_ConfigClockSource+0x186>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2201      	movs	r2, #1
 8004c88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2202      	movs	r2, #2
 8004c90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	689b      	ldr	r3, [r3, #8]
 8004c9a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004c9c:	68bb      	ldr	r3, [r7, #8]
 8004c9e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004ca2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ca4:	68bb      	ldr	r3, [r7, #8]
 8004ca6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004caa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	68ba      	ldr	r2, [r7, #8]
 8004cb2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004cbc:	d03e      	beq.n	8004d3c <HAL_TIM_ConfigClockSource+0xd4>
 8004cbe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004cc2:	f200 8087 	bhi.w	8004dd4 <HAL_TIM_ConfigClockSource+0x16c>
 8004cc6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004cca:	f000 8086 	beq.w	8004dda <HAL_TIM_ConfigClockSource+0x172>
 8004cce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004cd2:	d87f      	bhi.n	8004dd4 <HAL_TIM_ConfigClockSource+0x16c>
 8004cd4:	2b70      	cmp	r3, #112	@ 0x70
 8004cd6:	d01a      	beq.n	8004d0e <HAL_TIM_ConfigClockSource+0xa6>
 8004cd8:	2b70      	cmp	r3, #112	@ 0x70
 8004cda:	d87b      	bhi.n	8004dd4 <HAL_TIM_ConfigClockSource+0x16c>
 8004cdc:	2b60      	cmp	r3, #96	@ 0x60
 8004cde:	d050      	beq.n	8004d82 <HAL_TIM_ConfigClockSource+0x11a>
 8004ce0:	2b60      	cmp	r3, #96	@ 0x60
 8004ce2:	d877      	bhi.n	8004dd4 <HAL_TIM_ConfigClockSource+0x16c>
 8004ce4:	2b50      	cmp	r3, #80	@ 0x50
 8004ce6:	d03c      	beq.n	8004d62 <HAL_TIM_ConfigClockSource+0xfa>
 8004ce8:	2b50      	cmp	r3, #80	@ 0x50
 8004cea:	d873      	bhi.n	8004dd4 <HAL_TIM_ConfigClockSource+0x16c>
 8004cec:	2b40      	cmp	r3, #64	@ 0x40
 8004cee:	d058      	beq.n	8004da2 <HAL_TIM_ConfigClockSource+0x13a>
 8004cf0:	2b40      	cmp	r3, #64	@ 0x40
 8004cf2:	d86f      	bhi.n	8004dd4 <HAL_TIM_ConfigClockSource+0x16c>
 8004cf4:	2b30      	cmp	r3, #48	@ 0x30
 8004cf6:	d064      	beq.n	8004dc2 <HAL_TIM_ConfigClockSource+0x15a>
 8004cf8:	2b30      	cmp	r3, #48	@ 0x30
 8004cfa:	d86b      	bhi.n	8004dd4 <HAL_TIM_ConfigClockSource+0x16c>
 8004cfc:	2b20      	cmp	r3, #32
 8004cfe:	d060      	beq.n	8004dc2 <HAL_TIM_ConfigClockSource+0x15a>
 8004d00:	2b20      	cmp	r3, #32
 8004d02:	d867      	bhi.n	8004dd4 <HAL_TIM_ConfigClockSource+0x16c>
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d05c      	beq.n	8004dc2 <HAL_TIM_ConfigClockSource+0x15a>
 8004d08:	2b10      	cmp	r3, #16
 8004d0a:	d05a      	beq.n	8004dc2 <HAL_TIM_ConfigClockSource+0x15a>
 8004d0c:	e062      	b.n	8004dd4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004d1e:	f000 fb69 	bl	80053f4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	689b      	ldr	r3, [r3, #8]
 8004d28:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004d2a:	68bb      	ldr	r3, [r7, #8]
 8004d2c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004d30:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	68ba      	ldr	r2, [r7, #8]
 8004d38:	609a      	str	r2, [r3, #8]
      break;
 8004d3a:	e04f      	b.n	8004ddc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004d4c:	f000 fb52 	bl	80053f4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	689a      	ldr	r2, [r3, #8]
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004d5e:	609a      	str	r2, [r3, #8]
      break;
 8004d60:	e03c      	b.n	8004ddc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d6e:	461a      	mov	r2, r3
 8004d70:	f000 fac6 	bl	8005300 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	2150      	movs	r1, #80	@ 0x50
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	f000 fb1f 	bl	80053be <TIM_ITRx_SetConfig>
      break;
 8004d80:	e02c      	b.n	8004ddc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d8e:	461a      	mov	r2, r3
 8004d90:	f000 fae5 	bl	800535e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	2160      	movs	r1, #96	@ 0x60
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	f000 fb0f 	bl	80053be <TIM_ITRx_SetConfig>
      break;
 8004da0:	e01c      	b.n	8004ddc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004dae:	461a      	mov	r2, r3
 8004db0:	f000 faa6 	bl	8005300 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	2140      	movs	r1, #64	@ 0x40
 8004dba:	4618      	mov	r0, r3
 8004dbc:	f000 faff 	bl	80053be <TIM_ITRx_SetConfig>
      break;
 8004dc0:	e00c      	b.n	8004ddc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681a      	ldr	r2, [r3, #0]
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	4619      	mov	r1, r3
 8004dcc:	4610      	mov	r0, r2
 8004dce:	f000 faf6 	bl	80053be <TIM_ITRx_SetConfig>
      break;
 8004dd2:	e003      	b.n	8004ddc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004dd4:	2301      	movs	r3, #1
 8004dd6:	73fb      	strb	r3, [r7, #15]
      break;
 8004dd8:	e000      	b.n	8004ddc <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004dda:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2201      	movs	r2, #1
 8004de0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2200      	movs	r2, #0
 8004de8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004dec:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dee:	4618      	mov	r0, r3
 8004df0:	3710      	adds	r7, #16
 8004df2:	46bd      	mov	sp, r7
 8004df4:	bd80      	pop	{r7, pc}

08004df6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004df6:	b480      	push	{r7}
 8004df8:	b083      	sub	sp, #12
 8004dfa:	af00      	add	r7, sp, #0
 8004dfc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004dfe:	bf00      	nop
 8004e00:	370c      	adds	r7, #12
 8004e02:	46bd      	mov	sp, r7
 8004e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e08:	4770      	bx	lr

08004e0a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004e0a:	b480      	push	{r7}
 8004e0c:	b083      	sub	sp, #12
 8004e0e:	af00      	add	r7, sp, #0
 8004e10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004e12:	bf00      	nop
 8004e14:	370c      	adds	r7, #12
 8004e16:	46bd      	mov	sp, r7
 8004e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1c:	4770      	bx	lr

08004e1e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004e1e:	b480      	push	{r7}
 8004e20:	b083      	sub	sp, #12
 8004e22:	af00      	add	r7, sp, #0
 8004e24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004e26:	bf00      	nop
 8004e28:	370c      	adds	r7, #12
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e30:	4770      	bx	lr

08004e32 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004e32:	b480      	push	{r7}
 8004e34:	b083      	sub	sp, #12
 8004e36:	af00      	add	r7, sp, #0
 8004e38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004e3a:	bf00      	nop
 8004e3c:	370c      	adds	r7, #12
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e44:	4770      	bx	lr
	...

08004e48 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004e48:	b480      	push	{r7}
 8004e4a:	b085      	sub	sp, #20
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
 8004e50:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	4a46      	ldr	r2, [pc, #280]	@ (8004f74 <TIM_Base_SetConfig+0x12c>)
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d013      	beq.n	8004e88 <TIM_Base_SetConfig+0x40>
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e66:	d00f      	beq.n	8004e88 <TIM_Base_SetConfig+0x40>
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	4a43      	ldr	r2, [pc, #268]	@ (8004f78 <TIM_Base_SetConfig+0x130>)
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d00b      	beq.n	8004e88 <TIM_Base_SetConfig+0x40>
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	4a42      	ldr	r2, [pc, #264]	@ (8004f7c <TIM_Base_SetConfig+0x134>)
 8004e74:	4293      	cmp	r3, r2
 8004e76:	d007      	beq.n	8004e88 <TIM_Base_SetConfig+0x40>
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	4a41      	ldr	r2, [pc, #260]	@ (8004f80 <TIM_Base_SetConfig+0x138>)
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	d003      	beq.n	8004e88 <TIM_Base_SetConfig+0x40>
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	4a40      	ldr	r2, [pc, #256]	@ (8004f84 <TIM_Base_SetConfig+0x13c>)
 8004e84:	4293      	cmp	r3, r2
 8004e86:	d108      	bne.n	8004e9a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e8e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	685b      	ldr	r3, [r3, #4]
 8004e94:	68fa      	ldr	r2, [r7, #12]
 8004e96:	4313      	orrs	r3, r2
 8004e98:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	4a35      	ldr	r2, [pc, #212]	@ (8004f74 <TIM_Base_SetConfig+0x12c>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d02b      	beq.n	8004efa <TIM_Base_SetConfig+0xb2>
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ea8:	d027      	beq.n	8004efa <TIM_Base_SetConfig+0xb2>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	4a32      	ldr	r2, [pc, #200]	@ (8004f78 <TIM_Base_SetConfig+0x130>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d023      	beq.n	8004efa <TIM_Base_SetConfig+0xb2>
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	4a31      	ldr	r2, [pc, #196]	@ (8004f7c <TIM_Base_SetConfig+0x134>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d01f      	beq.n	8004efa <TIM_Base_SetConfig+0xb2>
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	4a30      	ldr	r2, [pc, #192]	@ (8004f80 <TIM_Base_SetConfig+0x138>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d01b      	beq.n	8004efa <TIM_Base_SetConfig+0xb2>
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	4a2f      	ldr	r2, [pc, #188]	@ (8004f84 <TIM_Base_SetConfig+0x13c>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d017      	beq.n	8004efa <TIM_Base_SetConfig+0xb2>
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	4a2e      	ldr	r2, [pc, #184]	@ (8004f88 <TIM_Base_SetConfig+0x140>)
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d013      	beq.n	8004efa <TIM_Base_SetConfig+0xb2>
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	4a2d      	ldr	r2, [pc, #180]	@ (8004f8c <TIM_Base_SetConfig+0x144>)
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d00f      	beq.n	8004efa <TIM_Base_SetConfig+0xb2>
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	4a2c      	ldr	r2, [pc, #176]	@ (8004f90 <TIM_Base_SetConfig+0x148>)
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d00b      	beq.n	8004efa <TIM_Base_SetConfig+0xb2>
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	4a2b      	ldr	r2, [pc, #172]	@ (8004f94 <TIM_Base_SetConfig+0x14c>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d007      	beq.n	8004efa <TIM_Base_SetConfig+0xb2>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	4a2a      	ldr	r2, [pc, #168]	@ (8004f98 <TIM_Base_SetConfig+0x150>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d003      	beq.n	8004efa <TIM_Base_SetConfig+0xb2>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	4a29      	ldr	r2, [pc, #164]	@ (8004f9c <TIM_Base_SetConfig+0x154>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d108      	bne.n	8004f0c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004f00:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	68db      	ldr	r3, [r3, #12]
 8004f06:	68fa      	ldr	r2, [r7, #12]
 8004f08:	4313      	orrs	r3, r2
 8004f0a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	695b      	ldr	r3, [r3, #20]
 8004f16:	4313      	orrs	r3, r2
 8004f18:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	68fa      	ldr	r2, [r7, #12]
 8004f1e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	689a      	ldr	r2, [r3, #8]
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	681a      	ldr	r2, [r3, #0]
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	4a10      	ldr	r2, [pc, #64]	@ (8004f74 <TIM_Base_SetConfig+0x12c>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d003      	beq.n	8004f40 <TIM_Base_SetConfig+0xf8>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	4a12      	ldr	r2, [pc, #72]	@ (8004f84 <TIM_Base_SetConfig+0x13c>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d103      	bne.n	8004f48 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	691a      	ldr	r2, [r3, #16]
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2201      	movs	r2, #1
 8004f4c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	691b      	ldr	r3, [r3, #16]
 8004f52:	f003 0301 	and.w	r3, r3, #1
 8004f56:	2b01      	cmp	r3, #1
 8004f58:	d105      	bne.n	8004f66 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	691b      	ldr	r3, [r3, #16]
 8004f5e:	f023 0201 	bic.w	r2, r3, #1
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	611a      	str	r2, [r3, #16]
  }
}
 8004f66:	bf00      	nop
 8004f68:	3714      	adds	r7, #20
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f70:	4770      	bx	lr
 8004f72:	bf00      	nop
 8004f74:	40010000 	.word	0x40010000
 8004f78:	40000400 	.word	0x40000400
 8004f7c:	40000800 	.word	0x40000800
 8004f80:	40000c00 	.word	0x40000c00
 8004f84:	40010400 	.word	0x40010400
 8004f88:	40014000 	.word	0x40014000
 8004f8c:	40014400 	.word	0x40014400
 8004f90:	40014800 	.word	0x40014800
 8004f94:	40001800 	.word	0x40001800
 8004f98:	40001c00 	.word	0x40001c00
 8004f9c:	40002000 	.word	0x40002000

08004fa0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004fa0:	b480      	push	{r7}
 8004fa2:	b087      	sub	sp, #28
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
 8004fa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6a1b      	ldr	r3, [r3, #32]
 8004fae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6a1b      	ldr	r3, [r3, #32]
 8004fb4:	f023 0201 	bic.w	r2, r3, #1
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	685b      	ldr	r3, [r3, #4]
 8004fc0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	699b      	ldr	r3, [r3, #24]
 8004fc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004fce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	f023 0303 	bic.w	r3, r3, #3
 8004fd6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	68fa      	ldr	r2, [r7, #12]
 8004fde:	4313      	orrs	r3, r2
 8004fe0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004fe2:	697b      	ldr	r3, [r7, #20]
 8004fe4:	f023 0302 	bic.w	r3, r3, #2
 8004fe8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	689b      	ldr	r3, [r3, #8]
 8004fee:	697a      	ldr	r2, [r7, #20]
 8004ff0:	4313      	orrs	r3, r2
 8004ff2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	4a20      	ldr	r2, [pc, #128]	@ (8005078 <TIM_OC1_SetConfig+0xd8>)
 8004ff8:	4293      	cmp	r3, r2
 8004ffa:	d003      	beq.n	8005004 <TIM_OC1_SetConfig+0x64>
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	4a1f      	ldr	r2, [pc, #124]	@ (800507c <TIM_OC1_SetConfig+0xdc>)
 8005000:	4293      	cmp	r3, r2
 8005002:	d10c      	bne.n	800501e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005004:	697b      	ldr	r3, [r7, #20]
 8005006:	f023 0308 	bic.w	r3, r3, #8
 800500a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	68db      	ldr	r3, [r3, #12]
 8005010:	697a      	ldr	r2, [r7, #20]
 8005012:	4313      	orrs	r3, r2
 8005014:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005016:	697b      	ldr	r3, [r7, #20]
 8005018:	f023 0304 	bic.w	r3, r3, #4
 800501c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	4a15      	ldr	r2, [pc, #84]	@ (8005078 <TIM_OC1_SetConfig+0xd8>)
 8005022:	4293      	cmp	r3, r2
 8005024:	d003      	beq.n	800502e <TIM_OC1_SetConfig+0x8e>
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	4a14      	ldr	r2, [pc, #80]	@ (800507c <TIM_OC1_SetConfig+0xdc>)
 800502a:	4293      	cmp	r3, r2
 800502c:	d111      	bne.n	8005052 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800502e:	693b      	ldr	r3, [r7, #16]
 8005030:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005034:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005036:	693b      	ldr	r3, [r7, #16]
 8005038:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800503c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	695b      	ldr	r3, [r3, #20]
 8005042:	693a      	ldr	r2, [r7, #16]
 8005044:	4313      	orrs	r3, r2
 8005046:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	699b      	ldr	r3, [r3, #24]
 800504c:	693a      	ldr	r2, [r7, #16]
 800504e:	4313      	orrs	r3, r2
 8005050:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	693a      	ldr	r2, [r7, #16]
 8005056:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	68fa      	ldr	r2, [r7, #12]
 800505c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	685a      	ldr	r2, [r3, #4]
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	697a      	ldr	r2, [r7, #20]
 800506a:	621a      	str	r2, [r3, #32]
}
 800506c:	bf00      	nop
 800506e:	371c      	adds	r7, #28
 8005070:	46bd      	mov	sp, r7
 8005072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005076:	4770      	bx	lr
 8005078:	40010000 	.word	0x40010000
 800507c:	40010400 	.word	0x40010400

08005080 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005080:	b480      	push	{r7}
 8005082:	b087      	sub	sp, #28
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
 8005088:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6a1b      	ldr	r3, [r3, #32]
 800508e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	6a1b      	ldr	r3, [r3, #32]
 8005094:	f023 0210 	bic.w	r2, r3, #16
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	685b      	ldr	r3, [r3, #4]
 80050a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	699b      	ldr	r3, [r3, #24]
 80050a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80050ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80050b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	021b      	lsls	r3, r3, #8
 80050be:	68fa      	ldr	r2, [r7, #12]
 80050c0:	4313      	orrs	r3, r2
 80050c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80050c4:	697b      	ldr	r3, [r7, #20]
 80050c6:	f023 0320 	bic.w	r3, r3, #32
 80050ca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	689b      	ldr	r3, [r3, #8]
 80050d0:	011b      	lsls	r3, r3, #4
 80050d2:	697a      	ldr	r2, [r7, #20]
 80050d4:	4313      	orrs	r3, r2
 80050d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	4a22      	ldr	r2, [pc, #136]	@ (8005164 <TIM_OC2_SetConfig+0xe4>)
 80050dc:	4293      	cmp	r3, r2
 80050de:	d003      	beq.n	80050e8 <TIM_OC2_SetConfig+0x68>
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	4a21      	ldr	r2, [pc, #132]	@ (8005168 <TIM_OC2_SetConfig+0xe8>)
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d10d      	bne.n	8005104 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80050e8:	697b      	ldr	r3, [r7, #20]
 80050ea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80050ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	68db      	ldr	r3, [r3, #12]
 80050f4:	011b      	lsls	r3, r3, #4
 80050f6:	697a      	ldr	r2, [r7, #20]
 80050f8:	4313      	orrs	r3, r2
 80050fa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80050fc:	697b      	ldr	r3, [r7, #20]
 80050fe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005102:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	4a17      	ldr	r2, [pc, #92]	@ (8005164 <TIM_OC2_SetConfig+0xe4>)
 8005108:	4293      	cmp	r3, r2
 800510a:	d003      	beq.n	8005114 <TIM_OC2_SetConfig+0x94>
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	4a16      	ldr	r2, [pc, #88]	@ (8005168 <TIM_OC2_SetConfig+0xe8>)
 8005110:	4293      	cmp	r3, r2
 8005112:	d113      	bne.n	800513c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005114:	693b      	ldr	r3, [r7, #16]
 8005116:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800511a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800511c:	693b      	ldr	r3, [r7, #16]
 800511e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005122:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	695b      	ldr	r3, [r3, #20]
 8005128:	009b      	lsls	r3, r3, #2
 800512a:	693a      	ldr	r2, [r7, #16]
 800512c:	4313      	orrs	r3, r2
 800512e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	699b      	ldr	r3, [r3, #24]
 8005134:	009b      	lsls	r3, r3, #2
 8005136:	693a      	ldr	r2, [r7, #16]
 8005138:	4313      	orrs	r3, r2
 800513a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	693a      	ldr	r2, [r7, #16]
 8005140:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	68fa      	ldr	r2, [r7, #12]
 8005146:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	685a      	ldr	r2, [r3, #4]
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	697a      	ldr	r2, [r7, #20]
 8005154:	621a      	str	r2, [r3, #32]
}
 8005156:	bf00      	nop
 8005158:	371c      	adds	r7, #28
 800515a:	46bd      	mov	sp, r7
 800515c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005160:	4770      	bx	lr
 8005162:	bf00      	nop
 8005164:	40010000 	.word	0x40010000
 8005168:	40010400 	.word	0x40010400

0800516c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800516c:	b480      	push	{r7}
 800516e:	b087      	sub	sp, #28
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
 8005174:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6a1b      	ldr	r3, [r3, #32]
 800517a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	6a1b      	ldr	r3, [r3, #32]
 8005180:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	685b      	ldr	r3, [r3, #4]
 800518c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	69db      	ldr	r3, [r3, #28]
 8005192:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800519a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	f023 0303 	bic.w	r3, r3, #3
 80051a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	68fa      	ldr	r2, [r7, #12]
 80051aa:	4313      	orrs	r3, r2
 80051ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80051ae:	697b      	ldr	r3, [r7, #20]
 80051b0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80051b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	689b      	ldr	r3, [r3, #8]
 80051ba:	021b      	lsls	r3, r3, #8
 80051bc:	697a      	ldr	r2, [r7, #20]
 80051be:	4313      	orrs	r3, r2
 80051c0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	4a21      	ldr	r2, [pc, #132]	@ (800524c <TIM_OC3_SetConfig+0xe0>)
 80051c6:	4293      	cmp	r3, r2
 80051c8:	d003      	beq.n	80051d2 <TIM_OC3_SetConfig+0x66>
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	4a20      	ldr	r2, [pc, #128]	@ (8005250 <TIM_OC3_SetConfig+0xe4>)
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d10d      	bne.n	80051ee <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80051d2:	697b      	ldr	r3, [r7, #20]
 80051d4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80051d8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	68db      	ldr	r3, [r3, #12]
 80051de:	021b      	lsls	r3, r3, #8
 80051e0:	697a      	ldr	r2, [r7, #20]
 80051e2:	4313      	orrs	r3, r2
 80051e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80051e6:	697b      	ldr	r3, [r7, #20]
 80051e8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80051ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	4a16      	ldr	r2, [pc, #88]	@ (800524c <TIM_OC3_SetConfig+0xe0>)
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d003      	beq.n	80051fe <TIM_OC3_SetConfig+0x92>
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	4a15      	ldr	r2, [pc, #84]	@ (8005250 <TIM_OC3_SetConfig+0xe4>)
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d113      	bne.n	8005226 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80051fe:	693b      	ldr	r3, [r7, #16]
 8005200:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005204:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005206:	693b      	ldr	r3, [r7, #16]
 8005208:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800520c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	695b      	ldr	r3, [r3, #20]
 8005212:	011b      	lsls	r3, r3, #4
 8005214:	693a      	ldr	r2, [r7, #16]
 8005216:	4313      	orrs	r3, r2
 8005218:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	699b      	ldr	r3, [r3, #24]
 800521e:	011b      	lsls	r3, r3, #4
 8005220:	693a      	ldr	r2, [r7, #16]
 8005222:	4313      	orrs	r3, r2
 8005224:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	693a      	ldr	r2, [r7, #16]
 800522a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	68fa      	ldr	r2, [r7, #12]
 8005230:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	685a      	ldr	r2, [r3, #4]
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	697a      	ldr	r2, [r7, #20]
 800523e:	621a      	str	r2, [r3, #32]
}
 8005240:	bf00      	nop
 8005242:	371c      	adds	r7, #28
 8005244:	46bd      	mov	sp, r7
 8005246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524a:	4770      	bx	lr
 800524c:	40010000 	.word	0x40010000
 8005250:	40010400 	.word	0x40010400

08005254 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005254:	b480      	push	{r7}
 8005256:	b087      	sub	sp, #28
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
 800525c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6a1b      	ldr	r3, [r3, #32]
 8005262:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	6a1b      	ldr	r3, [r3, #32]
 8005268:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	685b      	ldr	r3, [r3, #4]
 8005274:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	69db      	ldr	r3, [r3, #28]
 800527a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005282:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800528a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	021b      	lsls	r3, r3, #8
 8005292:	68fa      	ldr	r2, [r7, #12]
 8005294:	4313      	orrs	r3, r2
 8005296:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005298:	693b      	ldr	r3, [r7, #16]
 800529a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800529e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	689b      	ldr	r3, [r3, #8]
 80052a4:	031b      	lsls	r3, r3, #12
 80052a6:	693a      	ldr	r2, [r7, #16]
 80052a8:	4313      	orrs	r3, r2
 80052aa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	4a12      	ldr	r2, [pc, #72]	@ (80052f8 <TIM_OC4_SetConfig+0xa4>)
 80052b0:	4293      	cmp	r3, r2
 80052b2:	d003      	beq.n	80052bc <TIM_OC4_SetConfig+0x68>
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	4a11      	ldr	r2, [pc, #68]	@ (80052fc <TIM_OC4_SetConfig+0xa8>)
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d109      	bne.n	80052d0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80052bc:	697b      	ldr	r3, [r7, #20]
 80052be:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80052c2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	695b      	ldr	r3, [r3, #20]
 80052c8:	019b      	lsls	r3, r3, #6
 80052ca:	697a      	ldr	r2, [r7, #20]
 80052cc:	4313      	orrs	r3, r2
 80052ce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	697a      	ldr	r2, [r7, #20]
 80052d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	68fa      	ldr	r2, [r7, #12]
 80052da:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	685a      	ldr	r2, [r3, #4]
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	693a      	ldr	r2, [r7, #16]
 80052e8:	621a      	str	r2, [r3, #32]
}
 80052ea:	bf00      	nop
 80052ec:	371c      	adds	r7, #28
 80052ee:	46bd      	mov	sp, r7
 80052f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f4:	4770      	bx	lr
 80052f6:	bf00      	nop
 80052f8:	40010000 	.word	0x40010000
 80052fc:	40010400 	.word	0x40010400

08005300 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005300:	b480      	push	{r7}
 8005302:	b087      	sub	sp, #28
 8005304:	af00      	add	r7, sp, #0
 8005306:	60f8      	str	r0, [r7, #12]
 8005308:	60b9      	str	r1, [r7, #8]
 800530a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	6a1b      	ldr	r3, [r3, #32]
 8005310:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	6a1b      	ldr	r3, [r3, #32]
 8005316:	f023 0201 	bic.w	r2, r3, #1
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	699b      	ldr	r3, [r3, #24]
 8005322:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005324:	693b      	ldr	r3, [r7, #16]
 8005326:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800532a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	011b      	lsls	r3, r3, #4
 8005330:	693a      	ldr	r2, [r7, #16]
 8005332:	4313      	orrs	r3, r2
 8005334:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005336:	697b      	ldr	r3, [r7, #20]
 8005338:	f023 030a 	bic.w	r3, r3, #10
 800533c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800533e:	697a      	ldr	r2, [r7, #20]
 8005340:	68bb      	ldr	r3, [r7, #8]
 8005342:	4313      	orrs	r3, r2
 8005344:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	693a      	ldr	r2, [r7, #16]
 800534a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	697a      	ldr	r2, [r7, #20]
 8005350:	621a      	str	r2, [r3, #32]
}
 8005352:	bf00      	nop
 8005354:	371c      	adds	r7, #28
 8005356:	46bd      	mov	sp, r7
 8005358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535c:	4770      	bx	lr

0800535e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800535e:	b480      	push	{r7}
 8005360:	b087      	sub	sp, #28
 8005362:	af00      	add	r7, sp, #0
 8005364:	60f8      	str	r0, [r7, #12]
 8005366:	60b9      	str	r1, [r7, #8]
 8005368:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	6a1b      	ldr	r3, [r3, #32]
 800536e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	6a1b      	ldr	r3, [r3, #32]
 8005374:	f023 0210 	bic.w	r2, r3, #16
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	699b      	ldr	r3, [r3, #24]
 8005380:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005382:	693b      	ldr	r3, [r7, #16]
 8005384:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005388:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	031b      	lsls	r3, r3, #12
 800538e:	693a      	ldr	r2, [r7, #16]
 8005390:	4313      	orrs	r3, r2
 8005392:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005394:	697b      	ldr	r3, [r7, #20]
 8005396:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800539a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800539c:	68bb      	ldr	r3, [r7, #8]
 800539e:	011b      	lsls	r3, r3, #4
 80053a0:	697a      	ldr	r2, [r7, #20]
 80053a2:	4313      	orrs	r3, r2
 80053a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	693a      	ldr	r2, [r7, #16]
 80053aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	697a      	ldr	r2, [r7, #20]
 80053b0:	621a      	str	r2, [r3, #32]
}
 80053b2:	bf00      	nop
 80053b4:	371c      	adds	r7, #28
 80053b6:	46bd      	mov	sp, r7
 80053b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053bc:	4770      	bx	lr

080053be <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80053be:	b480      	push	{r7}
 80053c0:	b085      	sub	sp, #20
 80053c2:	af00      	add	r7, sp, #0
 80053c4:	6078      	str	r0, [r7, #4]
 80053c6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	689b      	ldr	r3, [r3, #8]
 80053cc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80053d4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80053d6:	683a      	ldr	r2, [r7, #0]
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	4313      	orrs	r3, r2
 80053dc:	f043 0307 	orr.w	r3, r3, #7
 80053e0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	68fa      	ldr	r2, [r7, #12]
 80053e6:	609a      	str	r2, [r3, #8]
}
 80053e8:	bf00      	nop
 80053ea:	3714      	adds	r7, #20
 80053ec:	46bd      	mov	sp, r7
 80053ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f2:	4770      	bx	lr

080053f4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80053f4:	b480      	push	{r7}
 80053f6:	b087      	sub	sp, #28
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	60f8      	str	r0, [r7, #12]
 80053fc:	60b9      	str	r1, [r7, #8]
 80053fe:	607a      	str	r2, [r7, #4]
 8005400:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	689b      	ldr	r3, [r3, #8]
 8005406:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005408:	697b      	ldr	r3, [r7, #20]
 800540a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800540e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	021a      	lsls	r2, r3, #8
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	431a      	orrs	r2, r3
 8005418:	68bb      	ldr	r3, [r7, #8]
 800541a:	4313      	orrs	r3, r2
 800541c:	697a      	ldr	r2, [r7, #20]
 800541e:	4313      	orrs	r3, r2
 8005420:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	697a      	ldr	r2, [r7, #20]
 8005426:	609a      	str	r2, [r3, #8]
}
 8005428:	bf00      	nop
 800542a:	371c      	adds	r7, #28
 800542c:	46bd      	mov	sp, r7
 800542e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005432:	4770      	bx	lr

08005434 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005434:	b480      	push	{r7}
 8005436:	b087      	sub	sp, #28
 8005438:	af00      	add	r7, sp, #0
 800543a:	60f8      	str	r0, [r7, #12]
 800543c:	60b9      	str	r1, [r7, #8]
 800543e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005440:	68bb      	ldr	r3, [r7, #8]
 8005442:	f003 031f 	and.w	r3, r3, #31
 8005446:	2201      	movs	r2, #1
 8005448:	fa02 f303 	lsl.w	r3, r2, r3
 800544c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	6a1a      	ldr	r2, [r3, #32]
 8005452:	697b      	ldr	r3, [r7, #20]
 8005454:	43db      	mvns	r3, r3
 8005456:	401a      	ands	r2, r3
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	6a1a      	ldr	r2, [r3, #32]
 8005460:	68bb      	ldr	r3, [r7, #8]
 8005462:	f003 031f 	and.w	r3, r3, #31
 8005466:	6879      	ldr	r1, [r7, #4]
 8005468:	fa01 f303 	lsl.w	r3, r1, r3
 800546c:	431a      	orrs	r2, r3
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	621a      	str	r2, [r3, #32]
}
 8005472:	bf00      	nop
 8005474:	371c      	adds	r7, #28
 8005476:	46bd      	mov	sp, r7
 8005478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547c:	4770      	bx	lr
	...

08005480 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005480:	b480      	push	{r7}
 8005482:	b085      	sub	sp, #20
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
 8005488:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005490:	2b01      	cmp	r3, #1
 8005492:	d101      	bne.n	8005498 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005494:	2302      	movs	r3, #2
 8005496:	e05a      	b.n	800554e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2201      	movs	r2, #1
 800549c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2202      	movs	r2, #2
 80054a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	685b      	ldr	r3, [r3, #4]
 80054ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	689b      	ldr	r3, [r3, #8]
 80054b6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80054be:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	68fa      	ldr	r2, [r7, #12]
 80054c6:	4313      	orrs	r3, r2
 80054c8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	68fa      	ldr	r2, [r7, #12]
 80054d0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	4a21      	ldr	r2, [pc, #132]	@ (800555c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80054d8:	4293      	cmp	r3, r2
 80054da:	d022      	beq.n	8005522 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80054e4:	d01d      	beq.n	8005522 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	4a1d      	ldr	r2, [pc, #116]	@ (8005560 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d018      	beq.n	8005522 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	4a1b      	ldr	r2, [pc, #108]	@ (8005564 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d013      	beq.n	8005522 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	4a1a      	ldr	r2, [pc, #104]	@ (8005568 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005500:	4293      	cmp	r3, r2
 8005502:	d00e      	beq.n	8005522 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	4a18      	ldr	r2, [pc, #96]	@ (800556c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d009      	beq.n	8005522 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	4a17      	ldr	r2, [pc, #92]	@ (8005570 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005514:	4293      	cmp	r3, r2
 8005516:	d004      	beq.n	8005522 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	4a15      	ldr	r2, [pc, #84]	@ (8005574 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d10c      	bne.n	800553c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005522:	68bb      	ldr	r3, [r7, #8]
 8005524:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005528:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	685b      	ldr	r3, [r3, #4]
 800552e:	68ba      	ldr	r2, [r7, #8]
 8005530:	4313      	orrs	r3, r2
 8005532:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	68ba      	ldr	r2, [r7, #8]
 800553a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2201      	movs	r2, #1
 8005540:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2200      	movs	r2, #0
 8005548:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800554c:	2300      	movs	r3, #0
}
 800554e:	4618      	mov	r0, r3
 8005550:	3714      	adds	r7, #20
 8005552:	46bd      	mov	sp, r7
 8005554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005558:	4770      	bx	lr
 800555a:	bf00      	nop
 800555c:	40010000 	.word	0x40010000
 8005560:	40000400 	.word	0x40000400
 8005564:	40000800 	.word	0x40000800
 8005568:	40000c00 	.word	0x40000c00
 800556c:	40010400 	.word	0x40010400
 8005570:	40014000 	.word	0x40014000
 8005574:	40001800 	.word	0x40001800

08005578 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005578:	b480      	push	{r7}
 800557a:	b083      	sub	sp, #12
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005580:	bf00      	nop
 8005582:	370c      	adds	r7, #12
 8005584:	46bd      	mov	sp, r7
 8005586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558a:	4770      	bx	lr

0800558c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800558c:	b480      	push	{r7}
 800558e:	b083      	sub	sp, #12
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005594:	bf00      	nop
 8005596:	370c      	adds	r7, #12
 8005598:	46bd      	mov	sp, r7
 800559a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559e:	4770      	bx	lr

080055a0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b082      	sub	sp, #8
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d101      	bne.n	80055b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80055ae:	2301      	movs	r3, #1
 80055b0:	e042      	b.n	8005638 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80055b8:	b2db      	uxtb	r3, r3
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d106      	bne.n	80055cc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	2200      	movs	r2, #0
 80055c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80055c6:	6878      	ldr	r0, [r7, #4]
 80055c8:	f7fc fd48 	bl	800205c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2224      	movs	r2, #36	@ 0x24
 80055d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	68da      	ldr	r2, [r3, #12]
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80055e2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80055e4:	6878      	ldr	r0, [r7, #4]
 80055e6:	f000 f82b 	bl	8005640 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	691a      	ldr	r2, [r3, #16]
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80055f8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	695a      	ldr	r2, [r3, #20]
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005608:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	68da      	ldr	r2, [r3, #12]
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005618:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	2200      	movs	r2, #0
 800561e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2220      	movs	r2, #32
 8005624:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2220      	movs	r2, #32
 800562c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2200      	movs	r2, #0
 8005634:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005636:	2300      	movs	r3, #0
}
 8005638:	4618      	mov	r0, r3
 800563a:	3708      	adds	r7, #8
 800563c:	46bd      	mov	sp, r7
 800563e:	bd80      	pop	{r7, pc}

08005640 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005640:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005644:	b0c0      	sub	sp, #256	@ 0x100
 8005646:	af00      	add	r7, sp, #0
 8005648:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800564c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	691b      	ldr	r3, [r3, #16]
 8005654:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005658:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800565c:	68d9      	ldr	r1, [r3, #12]
 800565e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005662:	681a      	ldr	r2, [r3, #0]
 8005664:	ea40 0301 	orr.w	r3, r0, r1
 8005668:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800566a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800566e:	689a      	ldr	r2, [r3, #8]
 8005670:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005674:	691b      	ldr	r3, [r3, #16]
 8005676:	431a      	orrs	r2, r3
 8005678:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800567c:	695b      	ldr	r3, [r3, #20]
 800567e:	431a      	orrs	r2, r3
 8005680:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005684:	69db      	ldr	r3, [r3, #28]
 8005686:	4313      	orrs	r3, r2
 8005688:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800568c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	68db      	ldr	r3, [r3, #12]
 8005694:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005698:	f021 010c 	bic.w	r1, r1, #12
 800569c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056a0:	681a      	ldr	r2, [r3, #0]
 80056a2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80056a6:	430b      	orrs	r3, r1
 80056a8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80056aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	695b      	ldr	r3, [r3, #20]
 80056b2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80056b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056ba:	6999      	ldr	r1, [r3, #24]
 80056bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056c0:	681a      	ldr	r2, [r3, #0]
 80056c2:	ea40 0301 	orr.w	r3, r0, r1
 80056c6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80056c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056cc:	681a      	ldr	r2, [r3, #0]
 80056ce:	4b8f      	ldr	r3, [pc, #572]	@ (800590c <UART_SetConfig+0x2cc>)
 80056d0:	429a      	cmp	r2, r3
 80056d2:	d005      	beq.n	80056e0 <UART_SetConfig+0xa0>
 80056d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056d8:	681a      	ldr	r2, [r3, #0]
 80056da:	4b8d      	ldr	r3, [pc, #564]	@ (8005910 <UART_SetConfig+0x2d0>)
 80056dc:	429a      	cmp	r2, r3
 80056de:	d104      	bne.n	80056ea <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80056e0:	f7fe fa1e 	bl	8003b20 <HAL_RCC_GetPCLK2Freq>
 80056e4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80056e8:	e003      	b.n	80056f2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80056ea:	f7fe fa05 	bl	8003af8 <HAL_RCC_GetPCLK1Freq>
 80056ee:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80056f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056f6:	69db      	ldr	r3, [r3, #28]
 80056f8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80056fc:	f040 810c 	bne.w	8005918 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005700:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005704:	2200      	movs	r2, #0
 8005706:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800570a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800570e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005712:	4622      	mov	r2, r4
 8005714:	462b      	mov	r3, r5
 8005716:	1891      	adds	r1, r2, r2
 8005718:	65b9      	str	r1, [r7, #88]	@ 0x58
 800571a:	415b      	adcs	r3, r3
 800571c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800571e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005722:	4621      	mov	r1, r4
 8005724:	eb12 0801 	adds.w	r8, r2, r1
 8005728:	4629      	mov	r1, r5
 800572a:	eb43 0901 	adc.w	r9, r3, r1
 800572e:	f04f 0200 	mov.w	r2, #0
 8005732:	f04f 0300 	mov.w	r3, #0
 8005736:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800573a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800573e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005742:	4690      	mov	r8, r2
 8005744:	4699      	mov	r9, r3
 8005746:	4623      	mov	r3, r4
 8005748:	eb18 0303 	adds.w	r3, r8, r3
 800574c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005750:	462b      	mov	r3, r5
 8005752:	eb49 0303 	adc.w	r3, r9, r3
 8005756:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800575a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800575e:	685b      	ldr	r3, [r3, #4]
 8005760:	2200      	movs	r2, #0
 8005762:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005766:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800576a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800576e:	460b      	mov	r3, r1
 8005770:	18db      	adds	r3, r3, r3
 8005772:	653b      	str	r3, [r7, #80]	@ 0x50
 8005774:	4613      	mov	r3, r2
 8005776:	eb42 0303 	adc.w	r3, r2, r3
 800577a:	657b      	str	r3, [r7, #84]	@ 0x54
 800577c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005780:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005784:	f7fb f9a6 	bl	8000ad4 <__aeabi_uldivmod>
 8005788:	4602      	mov	r2, r0
 800578a:	460b      	mov	r3, r1
 800578c:	4b61      	ldr	r3, [pc, #388]	@ (8005914 <UART_SetConfig+0x2d4>)
 800578e:	fba3 2302 	umull	r2, r3, r3, r2
 8005792:	095b      	lsrs	r3, r3, #5
 8005794:	011c      	lsls	r4, r3, #4
 8005796:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800579a:	2200      	movs	r2, #0
 800579c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80057a0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80057a4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80057a8:	4642      	mov	r2, r8
 80057aa:	464b      	mov	r3, r9
 80057ac:	1891      	adds	r1, r2, r2
 80057ae:	64b9      	str	r1, [r7, #72]	@ 0x48
 80057b0:	415b      	adcs	r3, r3
 80057b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80057b4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80057b8:	4641      	mov	r1, r8
 80057ba:	eb12 0a01 	adds.w	sl, r2, r1
 80057be:	4649      	mov	r1, r9
 80057c0:	eb43 0b01 	adc.w	fp, r3, r1
 80057c4:	f04f 0200 	mov.w	r2, #0
 80057c8:	f04f 0300 	mov.w	r3, #0
 80057cc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80057d0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80057d4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80057d8:	4692      	mov	sl, r2
 80057da:	469b      	mov	fp, r3
 80057dc:	4643      	mov	r3, r8
 80057de:	eb1a 0303 	adds.w	r3, sl, r3
 80057e2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80057e6:	464b      	mov	r3, r9
 80057e8:	eb4b 0303 	adc.w	r3, fp, r3
 80057ec:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80057f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057f4:	685b      	ldr	r3, [r3, #4]
 80057f6:	2200      	movs	r2, #0
 80057f8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80057fc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005800:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005804:	460b      	mov	r3, r1
 8005806:	18db      	adds	r3, r3, r3
 8005808:	643b      	str	r3, [r7, #64]	@ 0x40
 800580a:	4613      	mov	r3, r2
 800580c:	eb42 0303 	adc.w	r3, r2, r3
 8005810:	647b      	str	r3, [r7, #68]	@ 0x44
 8005812:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005816:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800581a:	f7fb f95b 	bl	8000ad4 <__aeabi_uldivmod>
 800581e:	4602      	mov	r2, r0
 8005820:	460b      	mov	r3, r1
 8005822:	4611      	mov	r1, r2
 8005824:	4b3b      	ldr	r3, [pc, #236]	@ (8005914 <UART_SetConfig+0x2d4>)
 8005826:	fba3 2301 	umull	r2, r3, r3, r1
 800582a:	095b      	lsrs	r3, r3, #5
 800582c:	2264      	movs	r2, #100	@ 0x64
 800582e:	fb02 f303 	mul.w	r3, r2, r3
 8005832:	1acb      	subs	r3, r1, r3
 8005834:	00db      	lsls	r3, r3, #3
 8005836:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800583a:	4b36      	ldr	r3, [pc, #216]	@ (8005914 <UART_SetConfig+0x2d4>)
 800583c:	fba3 2302 	umull	r2, r3, r3, r2
 8005840:	095b      	lsrs	r3, r3, #5
 8005842:	005b      	lsls	r3, r3, #1
 8005844:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005848:	441c      	add	r4, r3
 800584a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800584e:	2200      	movs	r2, #0
 8005850:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005854:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005858:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800585c:	4642      	mov	r2, r8
 800585e:	464b      	mov	r3, r9
 8005860:	1891      	adds	r1, r2, r2
 8005862:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005864:	415b      	adcs	r3, r3
 8005866:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005868:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800586c:	4641      	mov	r1, r8
 800586e:	1851      	adds	r1, r2, r1
 8005870:	6339      	str	r1, [r7, #48]	@ 0x30
 8005872:	4649      	mov	r1, r9
 8005874:	414b      	adcs	r3, r1
 8005876:	637b      	str	r3, [r7, #52]	@ 0x34
 8005878:	f04f 0200 	mov.w	r2, #0
 800587c:	f04f 0300 	mov.w	r3, #0
 8005880:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005884:	4659      	mov	r1, fp
 8005886:	00cb      	lsls	r3, r1, #3
 8005888:	4651      	mov	r1, sl
 800588a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800588e:	4651      	mov	r1, sl
 8005890:	00ca      	lsls	r2, r1, #3
 8005892:	4610      	mov	r0, r2
 8005894:	4619      	mov	r1, r3
 8005896:	4603      	mov	r3, r0
 8005898:	4642      	mov	r2, r8
 800589a:	189b      	adds	r3, r3, r2
 800589c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80058a0:	464b      	mov	r3, r9
 80058a2:	460a      	mov	r2, r1
 80058a4:	eb42 0303 	adc.w	r3, r2, r3
 80058a8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80058ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058b0:	685b      	ldr	r3, [r3, #4]
 80058b2:	2200      	movs	r2, #0
 80058b4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80058b8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80058bc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80058c0:	460b      	mov	r3, r1
 80058c2:	18db      	adds	r3, r3, r3
 80058c4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80058c6:	4613      	mov	r3, r2
 80058c8:	eb42 0303 	adc.w	r3, r2, r3
 80058cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80058ce:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80058d2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80058d6:	f7fb f8fd 	bl	8000ad4 <__aeabi_uldivmod>
 80058da:	4602      	mov	r2, r0
 80058dc:	460b      	mov	r3, r1
 80058de:	4b0d      	ldr	r3, [pc, #52]	@ (8005914 <UART_SetConfig+0x2d4>)
 80058e0:	fba3 1302 	umull	r1, r3, r3, r2
 80058e4:	095b      	lsrs	r3, r3, #5
 80058e6:	2164      	movs	r1, #100	@ 0x64
 80058e8:	fb01 f303 	mul.w	r3, r1, r3
 80058ec:	1ad3      	subs	r3, r2, r3
 80058ee:	00db      	lsls	r3, r3, #3
 80058f0:	3332      	adds	r3, #50	@ 0x32
 80058f2:	4a08      	ldr	r2, [pc, #32]	@ (8005914 <UART_SetConfig+0x2d4>)
 80058f4:	fba2 2303 	umull	r2, r3, r2, r3
 80058f8:	095b      	lsrs	r3, r3, #5
 80058fa:	f003 0207 	and.w	r2, r3, #7
 80058fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	4422      	add	r2, r4
 8005906:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005908:	e106      	b.n	8005b18 <UART_SetConfig+0x4d8>
 800590a:	bf00      	nop
 800590c:	40011000 	.word	0x40011000
 8005910:	40011400 	.word	0x40011400
 8005914:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005918:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800591c:	2200      	movs	r2, #0
 800591e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005922:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005926:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800592a:	4642      	mov	r2, r8
 800592c:	464b      	mov	r3, r9
 800592e:	1891      	adds	r1, r2, r2
 8005930:	6239      	str	r1, [r7, #32]
 8005932:	415b      	adcs	r3, r3
 8005934:	627b      	str	r3, [r7, #36]	@ 0x24
 8005936:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800593a:	4641      	mov	r1, r8
 800593c:	1854      	adds	r4, r2, r1
 800593e:	4649      	mov	r1, r9
 8005940:	eb43 0501 	adc.w	r5, r3, r1
 8005944:	f04f 0200 	mov.w	r2, #0
 8005948:	f04f 0300 	mov.w	r3, #0
 800594c:	00eb      	lsls	r3, r5, #3
 800594e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005952:	00e2      	lsls	r2, r4, #3
 8005954:	4614      	mov	r4, r2
 8005956:	461d      	mov	r5, r3
 8005958:	4643      	mov	r3, r8
 800595a:	18e3      	adds	r3, r4, r3
 800595c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005960:	464b      	mov	r3, r9
 8005962:	eb45 0303 	adc.w	r3, r5, r3
 8005966:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800596a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800596e:	685b      	ldr	r3, [r3, #4]
 8005970:	2200      	movs	r2, #0
 8005972:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005976:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800597a:	f04f 0200 	mov.w	r2, #0
 800597e:	f04f 0300 	mov.w	r3, #0
 8005982:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005986:	4629      	mov	r1, r5
 8005988:	008b      	lsls	r3, r1, #2
 800598a:	4621      	mov	r1, r4
 800598c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005990:	4621      	mov	r1, r4
 8005992:	008a      	lsls	r2, r1, #2
 8005994:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005998:	f7fb f89c 	bl	8000ad4 <__aeabi_uldivmod>
 800599c:	4602      	mov	r2, r0
 800599e:	460b      	mov	r3, r1
 80059a0:	4b60      	ldr	r3, [pc, #384]	@ (8005b24 <UART_SetConfig+0x4e4>)
 80059a2:	fba3 2302 	umull	r2, r3, r3, r2
 80059a6:	095b      	lsrs	r3, r3, #5
 80059a8:	011c      	lsls	r4, r3, #4
 80059aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80059ae:	2200      	movs	r2, #0
 80059b0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80059b4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80059b8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80059bc:	4642      	mov	r2, r8
 80059be:	464b      	mov	r3, r9
 80059c0:	1891      	adds	r1, r2, r2
 80059c2:	61b9      	str	r1, [r7, #24]
 80059c4:	415b      	adcs	r3, r3
 80059c6:	61fb      	str	r3, [r7, #28]
 80059c8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80059cc:	4641      	mov	r1, r8
 80059ce:	1851      	adds	r1, r2, r1
 80059d0:	6139      	str	r1, [r7, #16]
 80059d2:	4649      	mov	r1, r9
 80059d4:	414b      	adcs	r3, r1
 80059d6:	617b      	str	r3, [r7, #20]
 80059d8:	f04f 0200 	mov.w	r2, #0
 80059dc:	f04f 0300 	mov.w	r3, #0
 80059e0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80059e4:	4659      	mov	r1, fp
 80059e6:	00cb      	lsls	r3, r1, #3
 80059e8:	4651      	mov	r1, sl
 80059ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80059ee:	4651      	mov	r1, sl
 80059f0:	00ca      	lsls	r2, r1, #3
 80059f2:	4610      	mov	r0, r2
 80059f4:	4619      	mov	r1, r3
 80059f6:	4603      	mov	r3, r0
 80059f8:	4642      	mov	r2, r8
 80059fa:	189b      	adds	r3, r3, r2
 80059fc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005a00:	464b      	mov	r3, r9
 8005a02:	460a      	mov	r2, r1
 8005a04:	eb42 0303 	adc.w	r3, r2, r3
 8005a08:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005a0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a10:	685b      	ldr	r3, [r3, #4]
 8005a12:	2200      	movs	r2, #0
 8005a14:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005a16:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005a18:	f04f 0200 	mov.w	r2, #0
 8005a1c:	f04f 0300 	mov.w	r3, #0
 8005a20:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005a24:	4649      	mov	r1, r9
 8005a26:	008b      	lsls	r3, r1, #2
 8005a28:	4641      	mov	r1, r8
 8005a2a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005a2e:	4641      	mov	r1, r8
 8005a30:	008a      	lsls	r2, r1, #2
 8005a32:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005a36:	f7fb f84d 	bl	8000ad4 <__aeabi_uldivmod>
 8005a3a:	4602      	mov	r2, r0
 8005a3c:	460b      	mov	r3, r1
 8005a3e:	4611      	mov	r1, r2
 8005a40:	4b38      	ldr	r3, [pc, #224]	@ (8005b24 <UART_SetConfig+0x4e4>)
 8005a42:	fba3 2301 	umull	r2, r3, r3, r1
 8005a46:	095b      	lsrs	r3, r3, #5
 8005a48:	2264      	movs	r2, #100	@ 0x64
 8005a4a:	fb02 f303 	mul.w	r3, r2, r3
 8005a4e:	1acb      	subs	r3, r1, r3
 8005a50:	011b      	lsls	r3, r3, #4
 8005a52:	3332      	adds	r3, #50	@ 0x32
 8005a54:	4a33      	ldr	r2, [pc, #204]	@ (8005b24 <UART_SetConfig+0x4e4>)
 8005a56:	fba2 2303 	umull	r2, r3, r2, r3
 8005a5a:	095b      	lsrs	r3, r3, #5
 8005a5c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005a60:	441c      	add	r4, r3
 8005a62:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005a66:	2200      	movs	r2, #0
 8005a68:	673b      	str	r3, [r7, #112]	@ 0x70
 8005a6a:	677a      	str	r2, [r7, #116]	@ 0x74
 8005a6c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005a70:	4642      	mov	r2, r8
 8005a72:	464b      	mov	r3, r9
 8005a74:	1891      	adds	r1, r2, r2
 8005a76:	60b9      	str	r1, [r7, #8]
 8005a78:	415b      	adcs	r3, r3
 8005a7a:	60fb      	str	r3, [r7, #12]
 8005a7c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005a80:	4641      	mov	r1, r8
 8005a82:	1851      	adds	r1, r2, r1
 8005a84:	6039      	str	r1, [r7, #0]
 8005a86:	4649      	mov	r1, r9
 8005a88:	414b      	adcs	r3, r1
 8005a8a:	607b      	str	r3, [r7, #4]
 8005a8c:	f04f 0200 	mov.w	r2, #0
 8005a90:	f04f 0300 	mov.w	r3, #0
 8005a94:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005a98:	4659      	mov	r1, fp
 8005a9a:	00cb      	lsls	r3, r1, #3
 8005a9c:	4651      	mov	r1, sl
 8005a9e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005aa2:	4651      	mov	r1, sl
 8005aa4:	00ca      	lsls	r2, r1, #3
 8005aa6:	4610      	mov	r0, r2
 8005aa8:	4619      	mov	r1, r3
 8005aaa:	4603      	mov	r3, r0
 8005aac:	4642      	mov	r2, r8
 8005aae:	189b      	adds	r3, r3, r2
 8005ab0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005ab2:	464b      	mov	r3, r9
 8005ab4:	460a      	mov	r2, r1
 8005ab6:	eb42 0303 	adc.w	r3, r2, r3
 8005aba:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005abc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ac0:	685b      	ldr	r3, [r3, #4]
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	663b      	str	r3, [r7, #96]	@ 0x60
 8005ac6:	667a      	str	r2, [r7, #100]	@ 0x64
 8005ac8:	f04f 0200 	mov.w	r2, #0
 8005acc:	f04f 0300 	mov.w	r3, #0
 8005ad0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005ad4:	4649      	mov	r1, r9
 8005ad6:	008b      	lsls	r3, r1, #2
 8005ad8:	4641      	mov	r1, r8
 8005ada:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005ade:	4641      	mov	r1, r8
 8005ae0:	008a      	lsls	r2, r1, #2
 8005ae2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005ae6:	f7fa fff5 	bl	8000ad4 <__aeabi_uldivmod>
 8005aea:	4602      	mov	r2, r0
 8005aec:	460b      	mov	r3, r1
 8005aee:	4b0d      	ldr	r3, [pc, #52]	@ (8005b24 <UART_SetConfig+0x4e4>)
 8005af0:	fba3 1302 	umull	r1, r3, r3, r2
 8005af4:	095b      	lsrs	r3, r3, #5
 8005af6:	2164      	movs	r1, #100	@ 0x64
 8005af8:	fb01 f303 	mul.w	r3, r1, r3
 8005afc:	1ad3      	subs	r3, r2, r3
 8005afe:	011b      	lsls	r3, r3, #4
 8005b00:	3332      	adds	r3, #50	@ 0x32
 8005b02:	4a08      	ldr	r2, [pc, #32]	@ (8005b24 <UART_SetConfig+0x4e4>)
 8005b04:	fba2 2303 	umull	r2, r3, r2, r3
 8005b08:	095b      	lsrs	r3, r3, #5
 8005b0a:	f003 020f 	and.w	r2, r3, #15
 8005b0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	4422      	add	r2, r4
 8005b16:	609a      	str	r2, [r3, #8]
}
 8005b18:	bf00      	nop
 8005b1a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005b24:	51eb851f 	.word	0x51eb851f

08005b28 <memset>:
 8005b28:	4402      	add	r2, r0
 8005b2a:	4603      	mov	r3, r0
 8005b2c:	4293      	cmp	r3, r2
 8005b2e:	d100      	bne.n	8005b32 <memset+0xa>
 8005b30:	4770      	bx	lr
 8005b32:	f803 1b01 	strb.w	r1, [r3], #1
 8005b36:	e7f9      	b.n	8005b2c <memset+0x4>

08005b38 <__libc_init_array>:
 8005b38:	b570      	push	{r4, r5, r6, lr}
 8005b3a:	4d0d      	ldr	r5, [pc, #52]	@ (8005b70 <__libc_init_array+0x38>)
 8005b3c:	4c0d      	ldr	r4, [pc, #52]	@ (8005b74 <__libc_init_array+0x3c>)
 8005b3e:	1b64      	subs	r4, r4, r5
 8005b40:	10a4      	asrs	r4, r4, #2
 8005b42:	2600      	movs	r6, #0
 8005b44:	42a6      	cmp	r6, r4
 8005b46:	d109      	bne.n	8005b5c <__libc_init_array+0x24>
 8005b48:	4d0b      	ldr	r5, [pc, #44]	@ (8005b78 <__libc_init_array+0x40>)
 8005b4a:	4c0c      	ldr	r4, [pc, #48]	@ (8005b7c <__libc_init_array+0x44>)
 8005b4c:	f000 f818 	bl	8005b80 <_init>
 8005b50:	1b64      	subs	r4, r4, r5
 8005b52:	10a4      	asrs	r4, r4, #2
 8005b54:	2600      	movs	r6, #0
 8005b56:	42a6      	cmp	r6, r4
 8005b58:	d105      	bne.n	8005b66 <__libc_init_array+0x2e>
 8005b5a:	bd70      	pop	{r4, r5, r6, pc}
 8005b5c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b60:	4798      	blx	r3
 8005b62:	3601      	adds	r6, #1
 8005b64:	e7ee      	b.n	8005b44 <__libc_init_array+0xc>
 8005b66:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b6a:	4798      	blx	r3
 8005b6c:	3601      	adds	r6, #1
 8005b6e:	e7f2      	b.n	8005b56 <__libc_init_array+0x1e>
 8005b70:	08005bc8 	.word	0x08005bc8
 8005b74:	08005bc8 	.word	0x08005bc8
 8005b78:	08005bc8 	.word	0x08005bc8
 8005b7c:	08005bcc 	.word	0x08005bcc

08005b80 <_init>:
 8005b80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b82:	bf00      	nop
 8005b84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b86:	bc08      	pop	{r3}
 8005b88:	469e      	mov	lr, r3
 8005b8a:	4770      	bx	lr

08005b8c <_fini>:
 8005b8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b8e:	bf00      	nop
 8005b90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b92:	bc08      	pop	{r3}
 8005b94:	469e      	mov	lr, r3
 8005b96:	4770      	bx	lr
