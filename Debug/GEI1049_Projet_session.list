
GEI1049_Projet_session.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006208  080001c8  080001c8  000011c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  080063d0  080063d0  000073d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080063f8  080063f8  00008024  2**0
                  CONTENTS
  4 .ARM          00000008  080063f8  080063f8  000073f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006400  08006400  00008024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006400  08006400  00007400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006404  08006404  00007404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000024  20000000  08006408  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b0  20000024  0800642c  00008024  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002d4  0800642c  000082d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008024  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014687  00000000  00000000  00008054  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ec8  00000000  00000000  0001c6db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001240  00000000  00000000  0001f5a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e59  00000000  00000000  000207e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002460e  00000000  00000000  00021641  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000195f5  00000000  00000000  00045c4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d6272  00000000  00000000  0005f244  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001354b6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004df0  00000000  00000000  001354fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  0013a2ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	@ (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	@ (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000024 	.word	0x20000024
 80001e4:	00000000 	.word	0x00000000
 80001e8:	080063b8 	.word	0x080063b8

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	@ (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	@ (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	@ (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000028 	.word	0x20000028
 8000204:	080063b8 	.word	0x080063b8

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	@ 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	3c01      	subs	r4, #1
 8000344:	bf28      	it	cs
 8000346:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800034a:	d2e9      	bcs.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__aeabi_d2iz>:
 80009a4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009a8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80009ac:	d215      	bcs.n	80009da <__aeabi_d2iz+0x36>
 80009ae:	d511      	bpl.n	80009d4 <__aeabi_d2iz+0x30>
 80009b0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80009b4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009b8:	d912      	bls.n	80009e0 <__aeabi_d2iz+0x3c>
 80009ba:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009be:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80009c2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009c6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80009ca:	fa23 f002 	lsr.w	r0, r3, r2
 80009ce:	bf18      	it	ne
 80009d0:	4240      	negne	r0, r0
 80009d2:	4770      	bx	lr
 80009d4:	f04f 0000 	mov.w	r0, #0
 80009d8:	4770      	bx	lr
 80009da:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009de:	d105      	bne.n	80009ec <__aeabi_d2iz+0x48>
 80009e0:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 80009e4:	bf08      	it	eq
 80009e6:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 80009ea:	4770      	bx	lr
 80009ec:	f04f 0000 	mov.w	r0, #0
 80009f0:	4770      	bx	lr
 80009f2:	bf00      	nop

080009f4 <__aeabi_d2uiz>:
 80009f4:	004a      	lsls	r2, r1, #1
 80009f6:	d211      	bcs.n	8000a1c <__aeabi_d2uiz+0x28>
 80009f8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80009fc:	d211      	bcs.n	8000a22 <__aeabi_d2uiz+0x2e>
 80009fe:	d50d      	bpl.n	8000a1c <__aeabi_d2uiz+0x28>
 8000a00:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a04:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a08:	d40e      	bmi.n	8000a28 <__aeabi_d2uiz+0x34>
 8000a0a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a0e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a12:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a16:	fa23 f002 	lsr.w	r0, r3, r2
 8000a1a:	4770      	bx	lr
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a26:	d102      	bne.n	8000a2e <__aeabi_d2uiz+0x3a>
 8000a28:	f04f 30ff 	mov.w	r0, #4294967295
 8000a2c:	4770      	bx	lr
 8000a2e:	f04f 0000 	mov.w	r0, #0
 8000a32:	4770      	bx	lr

08000a34 <__aeabi_d2f>:
 8000a34:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a38:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a3c:	bf24      	itt	cs
 8000a3e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a42:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a46:	d90d      	bls.n	8000a64 <__aeabi_d2f+0x30>
 8000a48:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a4c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a50:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a54:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a58:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a5c:	bf08      	it	eq
 8000a5e:	f020 0001 	biceq.w	r0, r0, #1
 8000a62:	4770      	bx	lr
 8000a64:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a68:	d121      	bne.n	8000aae <__aeabi_d2f+0x7a>
 8000a6a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a6e:	bfbc      	itt	lt
 8000a70:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a74:	4770      	bxlt	lr
 8000a76:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a7a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a7e:	f1c2 0218 	rsb	r2, r2, #24
 8000a82:	f1c2 0c20 	rsb	ip, r2, #32
 8000a86:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a8a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a8e:	bf18      	it	ne
 8000a90:	f040 0001 	orrne.w	r0, r0, #1
 8000a94:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a98:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a9c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000aa0:	ea40 000c 	orr.w	r0, r0, ip
 8000aa4:	fa23 f302 	lsr.w	r3, r3, r2
 8000aa8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000aac:	e7cc      	b.n	8000a48 <__aeabi_d2f+0x14>
 8000aae:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ab2:	d107      	bne.n	8000ac4 <__aeabi_d2f+0x90>
 8000ab4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ab8:	bf1e      	ittt	ne
 8000aba:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000abe:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000ac2:	4770      	bxne	lr
 8000ac4:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ac8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000acc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_uldivmod>:
 8000ad4:	b953      	cbnz	r3, 8000aec <__aeabi_uldivmod+0x18>
 8000ad6:	b94a      	cbnz	r2, 8000aec <__aeabi_uldivmod+0x18>
 8000ad8:	2900      	cmp	r1, #0
 8000ada:	bf08      	it	eq
 8000adc:	2800      	cmpeq	r0, #0
 8000ade:	bf1c      	itt	ne
 8000ae0:	f04f 31ff 	movne.w	r1, #4294967295
 8000ae4:	f04f 30ff 	movne.w	r0, #4294967295
 8000ae8:	f000 b96a 	b.w	8000dc0 <__aeabi_idiv0>
 8000aec:	f1ad 0c08 	sub.w	ip, sp, #8
 8000af0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000af4:	f000 f806 	bl	8000b04 <__udivmoddi4>
 8000af8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000afc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b00:	b004      	add	sp, #16
 8000b02:	4770      	bx	lr

08000b04 <__udivmoddi4>:
 8000b04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b08:	9d08      	ldr	r5, [sp, #32]
 8000b0a:	460c      	mov	r4, r1
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d14e      	bne.n	8000bae <__udivmoddi4+0xaa>
 8000b10:	4694      	mov	ip, r2
 8000b12:	458c      	cmp	ip, r1
 8000b14:	4686      	mov	lr, r0
 8000b16:	fab2 f282 	clz	r2, r2
 8000b1a:	d962      	bls.n	8000be2 <__udivmoddi4+0xde>
 8000b1c:	b14a      	cbz	r2, 8000b32 <__udivmoddi4+0x2e>
 8000b1e:	f1c2 0320 	rsb	r3, r2, #32
 8000b22:	4091      	lsls	r1, r2
 8000b24:	fa20 f303 	lsr.w	r3, r0, r3
 8000b28:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b2c:	4319      	orrs	r1, r3
 8000b2e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b32:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b36:	fa1f f68c 	uxth.w	r6, ip
 8000b3a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000b3e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b42:	fb07 1114 	mls	r1, r7, r4, r1
 8000b46:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b4a:	fb04 f106 	mul.w	r1, r4, r6
 8000b4e:	4299      	cmp	r1, r3
 8000b50:	d90a      	bls.n	8000b68 <__udivmoddi4+0x64>
 8000b52:	eb1c 0303 	adds.w	r3, ip, r3
 8000b56:	f104 30ff 	add.w	r0, r4, #4294967295
 8000b5a:	f080 8112 	bcs.w	8000d82 <__udivmoddi4+0x27e>
 8000b5e:	4299      	cmp	r1, r3
 8000b60:	f240 810f 	bls.w	8000d82 <__udivmoddi4+0x27e>
 8000b64:	3c02      	subs	r4, #2
 8000b66:	4463      	add	r3, ip
 8000b68:	1a59      	subs	r1, r3, r1
 8000b6a:	fa1f f38e 	uxth.w	r3, lr
 8000b6e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b72:	fb07 1110 	mls	r1, r7, r0, r1
 8000b76:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b7a:	fb00 f606 	mul.w	r6, r0, r6
 8000b7e:	429e      	cmp	r6, r3
 8000b80:	d90a      	bls.n	8000b98 <__udivmoddi4+0x94>
 8000b82:	eb1c 0303 	adds.w	r3, ip, r3
 8000b86:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b8a:	f080 80fc 	bcs.w	8000d86 <__udivmoddi4+0x282>
 8000b8e:	429e      	cmp	r6, r3
 8000b90:	f240 80f9 	bls.w	8000d86 <__udivmoddi4+0x282>
 8000b94:	4463      	add	r3, ip
 8000b96:	3802      	subs	r0, #2
 8000b98:	1b9b      	subs	r3, r3, r6
 8000b9a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b9e:	2100      	movs	r1, #0
 8000ba0:	b11d      	cbz	r5, 8000baa <__udivmoddi4+0xa6>
 8000ba2:	40d3      	lsrs	r3, r2
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	e9c5 3200 	strd	r3, r2, [r5]
 8000baa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bae:	428b      	cmp	r3, r1
 8000bb0:	d905      	bls.n	8000bbe <__udivmoddi4+0xba>
 8000bb2:	b10d      	cbz	r5, 8000bb8 <__udivmoddi4+0xb4>
 8000bb4:	e9c5 0100 	strd	r0, r1, [r5]
 8000bb8:	2100      	movs	r1, #0
 8000bba:	4608      	mov	r0, r1
 8000bbc:	e7f5      	b.n	8000baa <__udivmoddi4+0xa6>
 8000bbe:	fab3 f183 	clz	r1, r3
 8000bc2:	2900      	cmp	r1, #0
 8000bc4:	d146      	bne.n	8000c54 <__udivmoddi4+0x150>
 8000bc6:	42a3      	cmp	r3, r4
 8000bc8:	d302      	bcc.n	8000bd0 <__udivmoddi4+0xcc>
 8000bca:	4290      	cmp	r0, r2
 8000bcc:	f0c0 80f0 	bcc.w	8000db0 <__udivmoddi4+0x2ac>
 8000bd0:	1a86      	subs	r6, r0, r2
 8000bd2:	eb64 0303 	sbc.w	r3, r4, r3
 8000bd6:	2001      	movs	r0, #1
 8000bd8:	2d00      	cmp	r5, #0
 8000bda:	d0e6      	beq.n	8000baa <__udivmoddi4+0xa6>
 8000bdc:	e9c5 6300 	strd	r6, r3, [r5]
 8000be0:	e7e3      	b.n	8000baa <__udivmoddi4+0xa6>
 8000be2:	2a00      	cmp	r2, #0
 8000be4:	f040 8090 	bne.w	8000d08 <__udivmoddi4+0x204>
 8000be8:	eba1 040c 	sub.w	r4, r1, ip
 8000bec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bf0:	fa1f f78c 	uxth.w	r7, ip
 8000bf4:	2101      	movs	r1, #1
 8000bf6:	fbb4 f6f8 	udiv	r6, r4, r8
 8000bfa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bfe:	fb08 4416 	mls	r4, r8, r6, r4
 8000c02:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c06:	fb07 f006 	mul.w	r0, r7, r6
 8000c0a:	4298      	cmp	r0, r3
 8000c0c:	d908      	bls.n	8000c20 <__udivmoddi4+0x11c>
 8000c0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c12:	f106 34ff 	add.w	r4, r6, #4294967295
 8000c16:	d202      	bcs.n	8000c1e <__udivmoddi4+0x11a>
 8000c18:	4298      	cmp	r0, r3
 8000c1a:	f200 80cd 	bhi.w	8000db8 <__udivmoddi4+0x2b4>
 8000c1e:	4626      	mov	r6, r4
 8000c20:	1a1c      	subs	r4, r3, r0
 8000c22:	fa1f f38e 	uxth.w	r3, lr
 8000c26:	fbb4 f0f8 	udiv	r0, r4, r8
 8000c2a:	fb08 4410 	mls	r4, r8, r0, r4
 8000c2e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c32:	fb00 f707 	mul.w	r7, r0, r7
 8000c36:	429f      	cmp	r7, r3
 8000c38:	d908      	bls.n	8000c4c <__udivmoddi4+0x148>
 8000c3a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c3e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c42:	d202      	bcs.n	8000c4a <__udivmoddi4+0x146>
 8000c44:	429f      	cmp	r7, r3
 8000c46:	f200 80b0 	bhi.w	8000daa <__udivmoddi4+0x2a6>
 8000c4a:	4620      	mov	r0, r4
 8000c4c:	1bdb      	subs	r3, r3, r7
 8000c4e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c52:	e7a5      	b.n	8000ba0 <__udivmoddi4+0x9c>
 8000c54:	f1c1 0620 	rsb	r6, r1, #32
 8000c58:	408b      	lsls	r3, r1
 8000c5a:	fa22 f706 	lsr.w	r7, r2, r6
 8000c5e:	431f      	orrs	r7, r3
 8000c60:	fa20 fc06 	lsr.w	ip, r0, r6
 8000c64:	fa04 f301 	lsl.w	r3, r4, r1
 8000c68:	ea43 030c 	orr.w	r3, r3, ip
 8000c6c:	40f4      	lsrs	r4, r6
 8000c6e:	fa00 f801 	lsl.w	r8, r0, r1
 8000c72:	0c38      	lsrs	r0, r7, #16
 8000c74:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c78:	fbb4 fef0 	udiv	lr, r4, r0
 8000c7c:	fa1f fc87 	uxth.w	ip, r7
 8000c80:	fb00 441e 	mls	r4, r0, lr, r4
 8000c84:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c88:	fb0e f90c 	mul.w	r9, lr, ip
 8000c8c:	45a1      	cmp	r9, r4
 8000c8e:	fa02 f201 	lsl.w	r2, r2, r1
 8000c92:	d90a      	bls.n	8000caa <__udivmoddi4+0x1a6>
 8000c94:	193c      	adds	r4, r7, r4
 8000c96:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000c9a:	f080 8084 	bcs.w	8000da6 <__udivmoddi4+0x2a2>
 8000c9e:	45a1      	cmp	r9, r4
 8000ca0:	f240 8081 	bls.w	8000da6 <__udivmoddi4+0x2a2>
 8000ca4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ca8:	443c      	add	r4, r7
 8000caa:	eba4 0409 	sub.w	r4, r4, r9
 8000cae:	fa1f f983 	uxth.w	r9, r3
 8000cb2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000cb6:	fb00 4413 	mls	r4, r0, r3, r4
 8000cba:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000cbe:	fb03 fc0c 	mul.w	ip, r3, ip
 8000cc2:	45a4      	cmp	ip, r4
 8000cc4:	d907      	bls.n	8000cd6 <__udivmoddi4+0x1d2>
 8000cc6:	193c      	adds	r4, r7, r4
 8000cc8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000ccc:	d267      	bcs.n	8000d9e <__udivmoddi4+0x29a>
 8000cce:	45a4      	cmp	ip, r4
 8000cd0:	d965      	bls.n	8000d9e <__udivmoddi4+0x29a>
 8000cd2:	3b02      	subs	r3, #2
 8000cd4:	443c      	add	r4, r7
 8000cd6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000cda:	fba0 9302 	umull	r9, r3, r0, r2
 8000cde:	eba4 040c 	sub.w	r4, r4, ip
 8000ce2:	429c      	cmp	r4, r3
 8000ce4:	46ce      	mov	lr, r9
 8000ce6:	469c      	mov	ip, r3
 8000ce8:	d351      	bcc.n	8000d8e <__udivmoddi4+0x28a>
 8000cea:	d04e      	beq.n	8000d8a <__udivmoddi4+0x286>
 8000cec:	b155      	cbz	r5, 8000d04 <__udivmoddi4+0x200>
 8000cee:	ebb8 030e 	subs.w	r3, r8, lr
 8000cf2:	eb64 040c 	sbc.w	r4, r4, ip
 8000cf6:	fa04 f606 	lsl.w	r6, r4, r6
 8000cfa:	40cb      	lsrs	r3, r1
 8000cfc:	431e      	orrs	r6, r3
 8000cfe:	40cc      	lsrs	r4, r1
 8000d00:	e9c5 6400 	strd	r6, r4, [r5]
 8000d04:	2100      	movs	r1, #0
 8000d06:	e750      	b.n	8000baa <__udivmoddi4+0xa6>
 8000d08:	f1c2 0320 	rsb	r3, r2, #32
 8000d0c:	fa20 f103 	lsr.w	r1, r0, r3
 8000d10:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d14:	fa24 f303 	lsr.w	r3, r4, r3
 8000d18:	4094      	lsls	r4, r2
 8000d1a:	430c      	orrs	r4, r1
 8000d1c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d20:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d24:	fa1f f78c 	uxth.w	r7, ip
 8000d28:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d2c:	fb08 3110 	mls	r1, r8, r0, r3
 8000d30:	0c23      	lsrs	r3, r4, #16
 8000d32:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d36:	fb00 f107 	mul.w	r1, r0, r7
 8000d3a:	4299      	cmp	r1, r3
 8000d3c:	d908      	bls.n	8000d50 <__udivmoddi4+0x24c>
 8000d3e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d42:	f100 36ff 	add.w	r6, r0, #4294967295
 8000d46:	d22c      	bcs.n	8000da2 <__udivmoddi4+0x29e>
 8000d48:	4299      	cmp	r1, r3
 8000d4a:	d92a      	bls.n	8000da2 <__udivmoddi4+0x29e>
 8000d4c:	3802      	subs	r0, #2
 8000d4e:	4463      	add	r3, ip
 8000d50:	1a5b      	subs	r3, r3, r1
 8000d52:	b2a4      	uxth	r4, r4
 8000d54:	fbb3 f1f8 	udiv	r1, r3, r8
 8000d58:	fb08 3311 	mls	r3, r8, r1, r3
 8000d5c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d60:	fb01 f307 	mul.w	r3, r1, r7
 8000d64:	42a3      	cmp	r3, r4
 8000d66:	d908      	bls.n	8000d7a <__udivmoddi4+0x276>
 8000d68:	eb1c 0404 	adds.w	r4, ip, r4
 8000d6c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000d70:	d213      	bcs.n	8000d9a <__udivmoddi4+0x296>
 8000d72:	42a3      	cmp	r3, r4
 8000d74:	d911      	bls.n	8000d9a <__udivmoddi4+0x296>
 8000d76:	3902      	subs	r1, #2
 8000d78:	4464      	add	r4, ip
 8000d7a:	1ae4      	subs	r4, r4, r3
 8000d7c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d80:	e739      	b.n	8000bf6 <__udivmoddi4+0xf2>
 8000d82:	4604      	mov	r4, r0
 8000d84:	e6f0      	b.n	8000b68 <__udivmoddi4+0x64>
 8000d86:	4608      	mov	r0, r1
 8000d88:	e706      	b.n	8000b98 <__udivmoddi4+0x94>
 8000d8a:	45c8      	cmp	r8, r9
 8000d8c:	d2ae      	bcs.n	8000cec <__udivmoddi4+0x1e8>
 8000d8e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d92:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d96:	3801      	subs	r0, #1
 8000d98:	e7a8      	b.n	8000cec <__udivmoddi4+0x1e8>
 8000d9a:	4631      	mov	r1, r6
 8000d9c:	e7ed      	b.n	8000d7a <__udivmoddi4+0x276>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	e799      	b.n	8000cd6 <__udivmoddi4+0x1d2>
 8000da2:	4630      	mov	r0, r6
 8000da4:	e7d4      	b.n	8000d50 <__udivmoddi4+0x24c>
 8000da6:	46d6      	mov	lr, sl
 8000da8:	e77f      	b.n	8000caa <__udivmoddi4+0x1a6>
 8000daa:	4463      	add	r3, ip
 8000dac:	3802      	subs	r0, #2
 8000dae:	e74d      	b.n	8000c4c <__udivmoddi4+0x148>
 8000db0:	4606      	mov	r6, r0
 8000db2:	4623      	mov	r3, r4
 8000db4:	4608      	mov	r0, r1
 8000db6:	e70f      	b.n	8000bd8 <__udivmoddi4+0xd4>
 8000db8:	3e02      	subs	r6, #2
 8000dba:	4463      	add	r3, ip
 8000dbc:	e730      	b.n	8000c20 <__udivmoddi4+0x11c>
 8000dbe:	bf00      	nop

08000dc0 <__aeabi_idiv0>:
 8000dc0:	4770      	bx	lr
 8000dc2:	bf00      	nop

08000dc4 <Get_Mode>:
volatile int timer_count = 0;
float turning_time = 0;
int save[4] = {0, 0, 0, 0};
float ratio = 0;

int Get_Mode(int MSB_state, int LSB_state) {
 8000dc4:	b480      	push	{r7}
 8000dc6:	b085      	sub	sp, #20
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
 8000dcc:	6039      	str	r1, [r7, #0]
	static const int id_lookup[4] = {MANUAL_MODE, CIRCLE_MODE,  BACK_FORTH_MODE, SQUARE_MODE};
	int bin = ((MSB_state & 1) << 1) | (LSB_state & 1);
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	005b      	lsls	r3, r3, #1
 8000dd2:	f003 0202 	and.w	r2, r3, #2
 8000dd6:	683b      	ldr	r3, [r7, #0]
 8000dd8:	f003 0301 	and.w	r3, r3, #1
 8000ddc:	4313      	orrs	r3, r2
 8000dde:	60fb      	str	r3, [r7, #12]
	return id_lookup[bin];
 8000de0:	4a04      	ldr	r2, [pc, #16]	@ (8000df4 <Get_Mode+0x30>)
 8000de2:	68fb      	ldr	r3, [r7, #12]
 8000de4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8000de8:	4618      	mov	r0, r3
 8000dea:	3714      	adds	r7, #20
 8000dec:	46bd      	mov	sp, r7
 8000dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df2:	4770      	bx	lr
 8000df4:	080063d0 	.word	0x080063d0

08000df8 <Auto_Angle>:
			break;
	}
	return str;
}

void Auto_Angle(float value, TIM_HandleTypeDef* htim3) {
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b082      	sub	sp, #8
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	ed87 0a01 	vstr	s0, [r7, #4]
 8000e02:	6038      	str	r0, [r7, #0]
	// Initial setup
	if(timer_count == 0) {
 8000e04:	4b36      	ldr	r3, [pc, #216]	@ (8000ee0 <Auto_Angle+0xe8>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d146      	bne.n	8000e9a <Auto_Angle+0xa2>
		// Calculate the duration for the turn
		turning_time = fabs(value) * TRACK_WIDTH;
 8000e0c:	edd7 7a01 	vldr	s15, [r7, #4]
 8000e10:	eef0 7ae7 	vabs.f32	s15, s15
 8000e14:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 8000ee4 <Auto_Angle+0xec>
 8000e18:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000e1c:	4b32      	ldr	r3, [pc, #200]	@ (8000ee8 <Auto_Angle+0xf0>)
 8000e1e:	edc3 7a00 	vstr	s15, [r3]

		// Determine direction of turn
		if (value > 0) {
 8000e22:	edd7 7a01 	vldr	s15, [r7, #4]
 8000e26:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000e2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e2e:	dd18      	ble.n	8000e62 <Auto_Angle+0x6a>
			turning_time /= (360.0 * CLOCKWISE_FACTOR);
 8000e30:	4b2d      	ldr	r3, [pc, #180]	@ (8000ee8 <Auto_Angle+0xf0>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	4618      	mov	r0, r3
 8000e36:	f7ff fb4b 	bl	80004d0 <__aeabi_f2d>
 8000e3a:	a327      	add	r3, pc, #156	@ (adr r3, 8000ed8 <Auto_Angle+0xe0>)
 8000e3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e40:	f7ff fcc8 	bl	80007d4 <__aeabi_ddiv>
 8000e44:	4602      	mov	r2, r0
 8000e46:	460b      	mov	r3, r1
 8000e48:	4610      	mov	r0, r2
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	f7ff fdf2 	bl	8000a34 <__aeabi_d2f>
 8000e50:	4603      	mov	r3, r0
 8000e52:	4a25      	ldr	r2, [pc, #148]	@ (8000ee8 <Auto_Angle+0xf0>)
 8000e54:	6013      	str	r3, [r2, #0]
			Droite(BASE_SPEED, htim3);
 8000e56:	6839      	ldr	r1, [r7, #0]
 8000e58:	f44f 70e1 	mov.w	r0, #450	@ 0x1c2
 8000e5c:	f000 fb0c 	bl	8001478 <Droite>
 8000e60:	e00e      	b.n	8000e80 <Auto_Angle+0x88>
		}
		else {
			turning_time /= (360.0 * COUNTER_CLW_FACTOR);
 8000e62:	4b21      	ldr	r3, [pc, #132]	@ (8000ee8 <Auto_Angle+0xf0>)
 8000e64:	ed93 7a00 	vldr	s14, [r3]
 8000e68:	eddf 6a20 	vldr	s13, [pc, #128]	@ 8000eec <Auto_Angle+0xf4>
 8000e6c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000e70:	4b1d      	ldr	r3, [pc, #116]	@ (8000ee8 <Auto_Angle+0xf0>)
 8000e72:	edc3 7a00 	vstr	s15, [r3]
			Gauche(BASE_SPEED, htim3);
 8000e76:	6839      	ldr	r1, [r7, #0]
 8000e78:	f44f 70e1 	mov.w	r0, #450	@ 0x1c2
 8000e7c:	f000 fb34 	bl	80014e8 <Gauche>
		}

		// Convert turning time in µs
		turning_time *= 1e6;
 8000e80:	4b19      	ldr	r3, [pc, #100]	@ (8000ee8 <Auto_Angle+0xf0>)
 8000e82:	edd3 7a00 	vldr	s15, [r3]
 8000e86:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 8000ef0 <Auto_Angle+0xf8>
 8000e8a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000e8e:	4b16      	ldr	r3, [pc, #88]	@ (8000ee8 <Auto_Angle+0xf0>)
 8000e90:	edc3 7a00 	vstr	s15, [r3]

		// Start timer
	    HAL_TIM_Base_Start_IT(&htim7);
 8000e94:	4817      	ldr	r0, [pc, #92]	@ (8000ef4 <Auto_Angle+0xfc>)
 8000e96:	f003 ff21 	bl	8004cdc <HAL_TIM_Base_Start_IT>
	}

    // Stop when finished
	if(timer_count > (int)turning_time) {
 8000e9a:	4b13      	ldr	r3, [pc, #76]	@ (8000ee8 <Auto_Angle+0xf0>)
 8000e9c:	edd3 7a00 	vldr	s15, [r3]
 8000ea0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000ea4:	ee17 2a90 	vmov	r2, s15
 8000ea8:	4b0d      	ldr	r3, [pc, #52]	@ (8000ee0 <Auto_Angle+0xe8>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	429a      	cmp	r2, r3
 8000eae:	da0f      	bge.n	8000ed0 <Auto_Angle+0xd8>

		// Stop timer
		HAL_TIM_Base_Stop_IT(&htim7);
 8000eb0:	4810      	ldr	r0, [pc, #64]	@ (8000ef4 <Auto_Angle+0xfc>)
 8000eb2:	f003 ff83 	bl	8004dbc <HAL_TIM_Base_Stop_IT>

		// Stop the motors
		Stop(htim3);
 8000eb6:	6838      	ldr	r0, [r7, #0]
 8000eb8:	f000 fb86 	bl	80015c8 <Stop>

		// Reset temporal counter
		timer_count = 0;
 8000ebc:	4b08      	ldr	r3, [pc, #32]	@ (8000ee0 <Auto_Angle+0xe8>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	601a      	str	r2, [r3, #0]

		// Ready for next step
		curr_step++;
 8000ec2:	4b0d      	ldr	r3, [pc, #52]	@ (8000ef8 <Auto_Angle+0x100>)
 8000ec4:	781b      	ldrb	r3, [r3, #0]
 8000ec6:	3301      	adds	r3, #1
 8000ec8:	b2da      	uxtb	r2, r3
 8000eca:	4b0b      	ldr	r3, [pc, #44]	@ (8000ef8 <Auto_Angle+0x100>)
 8000ecc:	701a      	strb	r2, [r3, #0]
	}

	return;
 8000ece:	bf00      	nop
 8000ed0:	bf00      	nop
}
 8000ed2:	3708      	adds	r7, #8
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	b020c49b 	.word	0xb020c49b
 8000edc:	40d2cab2 	.word	0x40d2cab2
 8000ee0:	20000058 	.word	0x20000058
 8000ee4:	43880000 	.word	0x43880000
 8000ee8:	2000005c 	.word	0x2000005c
 8000eec:	468ca000 	.word	0x468ca000
 8000ef0:	49742400 	.word	0x49742400
 8000ef4:	20000240 	.word	0x20000240
 8000ef8:	20000000 	.word	0x20000000
 8000efc:	00000000 	.word	0x00000000

08000f00 <Auto_Line>:

void Auto_Line(int dist, int min_speed, int max_speed, TIM_HandleTypeDef* htim3) {
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b088      	sub	sp, #32
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	60f8      	str	r0, [r7, #12]
 8000f08:	60b9      	str	r1, [r7, #8]
 8000f0a:	607a      	str	r2, [r7, #4]
 8000f0c:	603b      	str	r3, [r7, #0]
    // Constants
    const float accel_fraction = 0.4; // 40% of total time for acceleration
 8000f0e:	4b68      	ldr	r3, [pc, #416]	@ (80010b0 <Auto_Line+0x1b0>)
 8000f10:	61fb      	str	r3, [r7, #28]
    const float decel_fraction = 0.4; // 40% of total time for deceleration
 8000f12:	4b67      	ldr	r3, [pc, #412]	@ (80010b0 <Auto_Line+0x1b0>)
 8000f14:	61bb      	str	r3, [r7, #24]

    // Initial setup
    if (timer_count == 0) {
 8000f16:	4b67      	ldr	r3, [pc, #412]	@ (80010b4 <Auto_Line+0x1b4>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d163      	bne.n	8000fe6 <Auto_Line+0xe6>
    	// Calculate total pulses required
    	int total_pulses = (int)(dist / TRACK_RESOLUTION);
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	da00      	bge.n	8000f26 <Auto_Line+0x26>
 8000f24:	3303      	adds	r3, #3
 8000f26:	109b      	asrs	r3, r3, #2
 8000f28:	617b      	str	r3, [r7, #20]

        // Calculate total time
        turning_time = (min_speed + max_speed) / 2.0;
 8000f2a:	68ba      	ldr	r2, [r7, #8]
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	4413      	add	r3, r2
 8000f30:	4618      	mov	r0, r3
 8000f32:	f7ff fabb 	bl	80004ac <__aeabi_i2d>
 8000f36:	f04f 0200 	mov.w	r2, #0
 8000f3a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000f3e:	f7ff fc49 	bl	80007d4 <__aeabi_ddiv>
 8000f42:	4602      	mov	r2, r0
 8000f44:	460b      	mov	r3, r1
 8000f46:	4610      	mov	r0, r2
 8000f48:	4619      	mov	r1, r3
 8000f4a:	f7ff fd73 	bl	8000a34 <__aeabi_d2f>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	4a59      	ldr	r2, [pc, #356]	@ (80010b8 <Auto_Line+0x1b8>)
 8000f52:	6013      	str	r3, [r2, #0]
        total_time = (int)((total_pulses / turning_time) * 1e7);
 8000f54:	697b      	ldr	r3, [r7, #20]
 8000f56:	ee07 3a90 	vmov	s15, r3
 8000f5a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f5e:	4b56      	ldr	r3, [pc, #344]	@ (80010b8 <Auto_Line+0x1b8>)
 8000f60:	edd3 7a00 	vldr	s15, [r3]
 8000f64:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8000f68:	ee16 0a90 	vmov	r0, s13
 8000f6c:	f7ff fab0 	bl	80004d0 <__aeabi_f2d>
 8000f70:	a34d      	add	r3, pc, #308	@ (adr r3, 80010a8 <Auto_Line+0x1a8>)
 8000f72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f76:	f7ff fb03 	bl	8000580 <__aeabi_dmul>
 8000f7a:	4602      	mov	r2, r0
 8000f7c:	460b      	mov	r3, r1
 8000f7e:	4610      	mov	r0, r2
 8000f80:	4619      	mov	r1, r3
 8000f82:	f7ff fd0f 	bl	80009a4 <__aeabi_d2iz>
 8000f86:	4603      	mov	r3, r0
 8000f88:	4a4c      	ldr	r2, [pc, #304]	@ (80010bc <Auto_Line+0x1bc>)
 8000f8a:	6013      	str	r3, [r2, #0]

        // Calculate time for each phase
        accel_time = (int)(total_time * accel_fraction);
 8000f8c:	4b4b      	ldr	r3, [pc, #300]	@ (80010bc <Auto_Line+0x1bc>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	ee07 3a90 	vmov	s15, r3
 8000f94:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f98:	edd7 7a07 	vldr	s15, [r7, #28]
 8000f9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000fa0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000fa4:	ee17 2a90 	vmov	r2, s15
 8000fa8:	4b45      	ldr	r3, [pc, #276]	@ (80010c0 <Auto_Line+0x1c0>)
 8000faa:	601a      	str	r2, [r3, #0]
        decel_time = (int)(total_time * decel_fraction);
 8000fac:	4b43      	ldr	r3, [pc, #268]	@ (80010bc <Auto_Line+0x1bc>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	ee07 3a90 	vmov	s15, r3
 8000fb4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000fb8:	edd7 7a06 	vldr	s15, [r7, #24]
 8000fbc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000fc0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000fc4:	ee17 2a90 	vmov	r2, s15
 8000fc8:	4b3e      	ldr	r3, [pc, #248]	@ (80010c4 <Auto_Line+0x1c4>)
 8000fca:	601a      	str	r2, [r3, #0]
        mid_time = total_time - accel_time - decel_time;
 8000fcc:	4b3b      	ldr	r3, [pc, #236]	@ (80010bc <Auto_Line+0x1bc>)
 8000fce:	681a      	ldr	r2, [r3, #0]
 8000fd0:	4b3b      	ldr	r3, [pc, #236]	@ (80010c0 <Auto_Line+0x1c0>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	1ad2      	subs	r2, r2, r3
 8000fd6:	4b3b      	ldr	r3, [pc, #236]	@ (80010c4 <Auto_Line+0x1c4>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	1ad3      	subs	r3, r2, r3
 8000fdc:	4a3a      	ldr	r2, [pc, #232]	@ (80010c8 <Auto_Line+0x1c8>)
 8000fde:	6013      	str	r3, [r2, #0]

        // Start timer
        HAL_TIM_Base_Start_IT(&htim7);
 8000fe0:	483a      	ldr	r0, [pc, #232]	@ (80010cc <Auto_Line+0x1cc>)
 8000fe2:	f003 fe7b 	bl	8004cdc <HAL_TIM_Base_Start_IT>
    }

    // Acceleration phase
    if (timer_count < accel_time) {
 8000fe6:	4b33      	ldr	r3, [pc, #204]	@ (80010b4 <Auto_Line+0x1b4>)
 8000fe8:	681a      	ldr	r2, [r3, #0]
 8000fea:	4b35      	ldr	r3, [pc, #212]	@ (80010c0 <Auto_Line+0x1c0>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	429a      	cmp	r2, r3
 8000ff0:	da0f      	bge.n	8001012 <Auto_Line+0x112>
        current_speed = min_speed + (max_speed - min_speed) * timer_count / accel_time;
 8000ff2:	687a      	ldr	r2, [r7, #4]
 8000ff4:	68bb      	ldr	r3, [r7, #8]
 8000ff6:	1ad3      	subs	r3, r2, r3
 8000ff8:	4a2e      	ldr	r2, [pc, #184]	@ (80010b4 <Auto_Line+0x1b4>)
 8000ffa:	6812      	ldr	r2, [r2, #0]
 8000ffc:	fb03 f202 	mul.w	r2, r3, r2
 8001000:	4b2f      	ldr	r3, [pc, #188]	@ (80010c0 <Auto_Line+0x1c0>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	fb92 f2f3 	sdiv	r2, r2, r3
 8001008:	68bb      	ldr	r3, [r7, #8]
 800100a:	4413      	add	r3, r2
 800100c:	4a30      	ldr	r2, [pc, #192]	@ (80010d0 <Auto_Line+0x1d0>)
 800100e:	6013      	str	r3, [r2, #0]
 8001010:	e03a      	b.n	8001088 <Auto_Line+0x188>
    }

    // Constant speed phase
    else if (timer_count < accel_time + mid_time) {
 8001012:	4b2b      	ldr	r3, [pc, #172]	@ (80010c0 <Auto_Line+0x1c0>)
 8001014:	681a      	ldr	r2, [r3, #0]
 8001016:	4b2c      	ldr	r3, [pc, #176]	@ (80010c8 <Auto_Line+0x1c8>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	441a      	add	r2, r3
 800101c:	4b25      	ldr	r3, [pc, #148]	@ (80010b4 <Auto_Line+0x1b4>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	429a      	cmp	r2, r3
 8001022:	dd03      	ble.n	800102c <Auto_Line+0x12c>
        current_speed = max_speed;
 8001024:	4a2a      	ldr	r2, [pc, #168]	@ (80010d0 <Auto_Line+0x1d0>)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	6013      	str	r3, [r2, #0]
 800102a:	e02d      	b.n	8001088 <Auto_Line+0x188>
    }

    // Deceleration phase
    else if (timer_count < total_time) {
 800102c:	4b21      	ldr	r3, [pc, #132]	@ (80010b4 <Auto_Line+0x1b4>)
 800102e:	681a      	ldr	r2, [r3, #0]
 8001030:	4b22      	ldr	r3, [pc, #136]	@ (80010bc <Auto_Line+0x1bc>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	429a      	cmp	r2, r3
 8001036:	da17      	bge.n	8001068 <Auto_Line+0x168>
        int decel_time_elapsed = timer_count - (accel_time + mid_time);
 8001038:	4b1e      	ldr	r3, [pc, #120]	@ (80010b4 <Auto_Line+0x1b4>)
 800103a:	681a      	ldr	r2, [r3, #0]
 800103c:	4b20      	ldr	r3, [pc, #128]	@ (80010c0 <Auto_Line+0x1c0>)
 800103e:	6819      	ldr	r1, [r3, #0]
 8001040:	4b21      	ldr	r3, [pc, #132]	@ (80010c8 <Auto_Line+0x1c8>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	440b      	add	r3, r1
 8001046:	1ad3      	subs	r3, r2, r3
 8001048:	613b      	str	r3, [r7, #16]
        current_speed = max_speed - (max_speed - min_speed) * decel_time_elapsed / decel_time;
 800104a:	687a      	ldr	r2, [r7, #4]
 800104c:	68bb      	ldr	r3, [r7, #8]
 800104e:	1ad3      	subs	r3, r2, r3
 8001050:	693a      	ldr	r2, [r7, #16]
 8001052:	fb03 f202 	mul.w	r2, r3, r2
 8001056:	4b1b      	ldr	r3, [pc, #108]	@ (80010c4 <Auto_Line+0x1c4>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	fb92 f3f3 	sdiv	r3, r2, r3
 800105e:	687a      	ldr	r2, [r7, #4]
 8001060:	1ad3      	subs	r3, r2, r3
 8001062:	4a1b      	ldr	r2, [pc, #108]	@ (80010d0 <Auto_Line+0x1d0>)
 8001064:	6013      	str	r3, [r2, #0]
 8001066:	e00f      	b.n	8001088 <Auto_Line+0x188>
    }

    // Stop when finished
    else {
        // Stop timer
        HAL_TIM_Base_Stop_IT(&htim7);
 8001068:	4818      	ldr	r0, [pc, #96]	@ (80010cc <Auto_Line+0x1cc>)
 800106a:	f003 fea7 	bl	8004dbc <HAL_TIM_Base_Stop_IT>

        // Stop the motors
        Stop(htim3);
 800106e:	6838      	ldr	r0, [r7, #0]
 8001070:	f000 faaa 	bl	80015c8 <Stop>

        // Reset temporal counter
        timer_count = 0;
 8001074:	4b0f      	ldr	r3, [pc, #60]	@ (80010b4 <Auto_Line+0x1b4>)
 8001076:	2200      	movs	r2, #0
 8001078:	601a      	str	r2, [r3, #0]

        // Ready for next step
        curr_step++;
 800107a:	4b16      	ldr	r3, [pc, #88]	@ (80010d4 <Auto_Line+0x1d4>)
 800107c:	781b      	ldrb	r3, [r3, #0]
 800107e:	3301      	adds	r3, #1
 8001080:	b2da      	uxtb	r2, r3
 8001082:	4b14      	ldr	r3, [pc, #80]	@ (80010d4 <Auto_Line+0x1d4>)
 8001084:	701a      	strb	r2, [r3, #0]

        // Exit
        return;
 8001086:	e00a      	b.n	800109e <Auto_Line+0x19e>
    }

    // Adjust speed every iteration
    if(!pause)
 8001088:	4b13      	ldr	r3, [pc, #76]	@ (80010d8 <Auto_Line+0x1d8>)
 800108a:	781b      	ldrb	r3, [r3, #0]
 800108c:	2b00      	cmp	r3, #0
 800108e:	d105      	bne.n	800109c <Auto_Line+0x19c>
    	Avancer(current_speed, htim3);
 8001090:	4b0f      	ldr	r3, [pc, #60]	@ (80010d0 <Auto_Line+0x1d0>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	6839      	ldr	r1, [r7, #0]
 8001096:	4618      	mov	r0, r3
 8001098:	f000 f9b6 	bl	8001408 <Avancer>

    return;
 800109c:	bf00      	nop
}
 800109e:	3720      	adds	r7, #32
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	f3af 8000 	nop.w
 80010a8:	00000000 	.word	0x00000000
 80010ac:	416312d0 	.word	0x416312d0
 80010b0:	3ecccccd 	.word	0x3ecccccd
 80010b4:	20000058 	.word	0x20000058
 80010b8:	2000005c 	.word	0x2000005c
 80010bc:	20000044 	.word	0x20000044
 80010c0:	20000048 	.word	0x20000048
 80010c4:	2000004c 	.word	0x2000004c
 80010c8:	20000050 	.word	0x20000050
 80010cc:	20000240 	.word	0x20000240
 80010d0:	20000054 	.word	0x20000054
 80010d4:	20000000 	.word	0x20000000
 80010d8:	20000040 	.word	0x20000040
 80010dc:	00000000 	.word	0x00000000

080010e0 <Auto_Circle>:


void Auto_Circle(TIM_HandleTypeDef* htim3) {
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b084      	sub	sp, #16
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
	// Initial setup
	if(timer_count == 0) {
 80010e8:	4b3d      	ldr	r3, [pc, #244]	@ (80011e0 <Auto_Circle+0x100>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d157      	bne.n	80011a0 <Auto_Circle+0xc0>

		// Calculate total outer wheel distance
		float outer_circumference = (PI*DISTANCE) / TRACK_RESOLUTION;//785
 80010f0:	4b3c      	ldr	r3, [pc, #240]	@ (80011e4 <Auto_Circle+0x104>)
 80010f2:	60fb      	str	r3, [r7, #12]
		float inner_circumference = outer_circumference - TRACK_WIDTH;//513
 80010f4:	edd7 7a03 	vldr	s15, [r7, #12]
 80010f8:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 80011e8 <Auto_Circle+0x108>
 80010fc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001100:	edc7 7a02 	vstr	s15, [r7, #8]

		// Calculate total time
		total_time = (int)((outer_circumference / BASE_SPEED) * 1e7);//17.4s
 8001104:	edd7 7a03 	vldr	s15, [r7, #12]
 8001108:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 80011ec <Auto_Circle+0x10c>
 800110c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001110:	ee16 0a90 	vmov	r0, s13
 8001114:	f7ff f9dc 	bl	80004d0 <__aeabi_f2d>
 8001118:	a32d      	add	r3, pc, #180	@ (adr r3, 80011d0 <Auto_Circle+0xf0>)
 800111a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800111e:	f7ff fa2f 	bl	8000580 <__aeabi_dmul>
 8001122:	4602      	mov	r2, r0
 8001124:	460b      	mov	r3, r1
 8001126:	4610      	mov	r0, r2
 8001128:	4619      	mov	r1, r3
 800112a:	f7ff fc3b 	bl	80009a4 <__aeabi_d2iz>
 800112e:	4603      	mov	r3, r0
 8001130:	4a2f      	ldr	r2, [pc, #188]	@ (80011f0 <Auto_Circle+0x110>)
 8001132:	6013      	str	r3, [r2, #0]

		// Calculate wheel inner wheel speed
		ratio = 0.9 * (inner_circumference / outer_circumference);//0.588
 8001134:	ed97 7a02 	vldr	s14, [r7, #8]
 8001138:	edd7 7a03 	vldr	s15, [r7, #12]
 800113c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001140:	ee16 0a90 	vmov	r0, s13
 8001144:	f7ff f9c4 	bl	80004d0 <__aeabi_f2d>
 8001148:	a323      	add	r3, pc, #140	@ (adr r3, 80011d8 <Auto_Circle+0xf8>)
 800114a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800114e:	f7ff fa17 	bl	8000580 <__aeabi_dmul>
 8001152:	4602      	mov	r2, r0
 8001154:	460b      	mov	r3, r1
 8001156:	4610      	mov	r0, r2
 8001158:	4619      	mov	r1, r3
 800115a:	f7ff fc6b 	bl	8000a34 <__aeabi_d2f>
 800115e:	4603      	mov	r3, r0
 8001160:	4a24      	ldr	r2, [pc, #144]	@ (80011f4 <Auto_Circle+0x114>)
 8001162:	6013      	str	r3, [r2, #0]

		// Constant speed
		htim3->Instance -> CCR2 = 0;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	2200      	movs	r2, #0
 800116a:	639a      	str	r2, [r3, #56]	@ 0x38
		htim3->Instance -> CCR4 = 0;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	2200      	movs	r2, #0
 8001172:	641a      	str	r2, [r3, #64]	@ 0x40
		htim3->Instance -> CCR1 = BASE_SPEED;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	f44f 72e1 	mov.w	r2, #450	@ 0x1c2
 800117c:	635a      	str	r2, [r3, #52]	@ 0x34
		htim3->Instance -> CCR3 = (ratio * BASE_SPEED);
 800117e:	4b1d      	ldr	r3, [pc, #116]	@ (80011f4 <Auto_Circle+0x114>)
 8001180:	edd3 7a00 	vldr	s15, [r3]
 8001184:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 80011ec <Auto_Circle+0x10c>
 8001188:	ee67 7a87 	vmul.f32	s15, s15, s14
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001194:	ee17 2a90 	vmov	r2, s15
 8001198:	63da      	str	r2, [r3, #60]	@ 0x3c
		HAL_TIM_Base_Start_IT(&htim7);
 800119a:	4817      	ldr	r0, [pc, #92]	@ (80011f8 <Auto_Circle+0x118>)
 800119c:	f003 fd9e 	bl	8004cdc <HAL_TIM_Base_Start_IT>
	}

	// Stop when finished
	if(timer_count > (int)total_time) {
 80011a0:	4b0f      	ldr	r3, [pc, #60]	@ (80011e0 <Auto_Circle+0x100>)
 80011a2:	681a      	ldr	r2, [r3, #0]
 80011a4:	4b12      	ldr	r3, [pc, #72]	@ (80011f0 <Auto_Circle+0x110>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	429a      	cmp	r2, r3
 80011aa:	dd0c      	ble.n	80011c6 <Auto_Circle+0xe6>

		// Stop timer
		HAL_TIM_Base_Stop_IT(&htim7);
 80011ac:	4812      	ldr	r0, [pc, #72]	@ (80011f8 <Auto_Circle+0x118>)
 80011ae:	f003 fe05 	bl	8004dbc <HAL_TIM_Base_Stop_IT>

		// Stop the motors
		Stop(htim3);
 80011b2:	6878      	ldr	r0, [r7, #4]
 80011b4:	f000 fa08 	bl	80015c8 <Stop>

		// Reset temporal counter
		timer_count = 0;
 80011b8:	4b09      	ldr	r3, [pc, #36]	@ (80011e0 <Auto_Circle+0x100>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	601a      	str	r2, [r3, #0]

		// End of sequence : reset current step and set to manual mode after drawing shape
		curr_mode = MANUAL_MODE;
 80011be:	4b0f      	ldr	r3, [pc, #60]	@ (80011fc <Auto_Circle+0x11c>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	701a      	strb	r2, [r3, #0]
	}

	return;
 80011c4:	bf00      	nop
 80011c6:	bf00      	nop
}
 80011c8:	3710      	adds	r7, #16
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	00000000 	.word	0x00000000
 80011d4:	416312d0 	.word	0x416312d0
 80011d8:	cccccccd 	.word	0xcccccccd
 80011dc:	3feccccc 	.word	0x3feccccc
 80011e0:	20000058 	.word	0x20000058
 80011e4:	44445971 	.word	0x44445971
 80011e8:	43880000 	.word	0x43880000
 80011ec:	43e10000 	.word	0x43e10000
 80011f0:	20000044 	.word	0x20000044
 80011f4:	20000070 	.word	0x20000070
 80011f8:	20000240 	.word	0x20000240
 80011fc:	20000042 	.word	0x20000042

08001200 <Auto_Back_Forth>:

void Auto_Back_Forth(TIM_HandleTypeDef* htim3) {
 8001200:	b580      	push	{r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
	// Manage ongoing step
	switch(curr_step) {
 8001208:	4b1d      	ldr	r3, [pc, #116]	@ (8001280 <Auto_Back_Forth+0x80>)
 800120a:	781b      	ldrb	r3, [r3, #0]
 800120c:	3b01      	subs	r3, #1
 800120e:	2b03      	cmp	r3, #3
 8001210:	d82a      	bhi.n	8001268 <Auto_Back_Forth+0x68>
 8001212:	a201      	add	r2, pc, #4	@ (adr r2, 8001218 <Auto_Back_Forth+0x18>)
 8001214:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001218:	08001229 	.word	0x08001229
 800121c:	0800123d 	.word	0x0800123d
 8001220:	08001249 	.word	0x08001249
 8001224:	0800125d 	.word	0x0800125d
	case 1:
		// Step 1: Move forward 1 meter
		Auto_Line(DISTANCE, BASE_SPEED, BASE_SPEED, htim3);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	f44f 72e1 	mov.w	r2, #450	@ 0x1c2
 800122e:	f44f 71e1 	mov.w	r1, #450	@ 0x1c2
 8001232:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001236:	f7ff fe63 	bl	8000f00 <Auto_Line>
		break;
 800123a:	e01c      	b.n	8001276 <Auto_Back_Forth+0x76>

	case 2:
		// Step 2: Turn 180 degrees
		Auto_Angle(180.0, htim3);
 800123c:	6878      	ldr	r0, [r7, #4]
 800123e:	ed9f 0a11 	vldr	s0, [pc, #68]	@ 8001284 <Auto_Back_Forth+0x84>
 8001242:	f7ff fdd9 	bl	8000df8 <Auto_Angle>
		break;
 8001246:	e016      	b.n	8001276 <Auto_Back_Forth+0x76>

	case 3:
		// Step 3: Move backward 1 meter
		Auto_Line(DISTANCE, BASE_SPEED, BASE_SPEED, htim3);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	f44f 72e1 	mov.w	r2, #450	@ 0x1c2
 800124e:	f44f 71e1 	mov.w	r1, #450	@ 0x1c2
 8001252:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001256:	f7ff fe53 	bl	8000f00 <Auto_Line>
		break;
 800125a:	e00c      	b.n	8001276 <Auto_Back_Forth+0x76>

	case 4:
		// Step 4: Turn 180 degrees again to face the original direction
	    Auto_Angle(180.0, htim3);
 800125c:	6878      	ldr	r0, [r7, #4]
 800125e:	ed9f 0a09 	vldr	s0, [pc, #36]	@ 8001284 <Auto_Back_Forth+0x84>
 8001262:	f7ff fdc9 	bl	8000df8 <Auto_Angle>
		break;
 8001266:	e006      	b.n	8001276 <Auto_Back_Forth+0x76>

	default:
		// End of sequence : reset current step and set to manual mode after drawing shape
		curr_step = 1;
 8001268:	4b05      	ldr	r3, [pc, #20]	@ (8001280 <Auto_Back_Forth+0x80>)
 800126a:	2201      	movs	r2, #1
 800126c:	701a      	strb	r2, [r3, #0]
		curr_mode = MANUAL_MODE;
 800126e:	4b06      	ldr	r3, [pc, #24]	@ (8001288 <Auto_Back_Forth+0x88>)
 8001270:	2200      	movs	r2, #0
 8001272:	701a      	strb	r2, [r3, #0]
		break;
 8001274:	bf00      	nop
	}
	return;
 8001276:	bf00      	nop
}
 8001278:	3708      	adds	r7, #8
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	20000000 	.word	0x20000000
 8001284:	43340000 	.word	0x43340000
 8001288:	20000042 	.word	0x20000042

0800128c <Auto_Square>:

void Auto_Square(TIM_HandleTypeDef* htim3) {
 800128c:	b580      	push	{r7, lr}
 800128e:	b082      	sub	sp, #8
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
	// Manage ongoing step
	switch(curr_step) {
 8001294:	4b1b      	ldr	r3, [pc, #108]	@ (8001304 <Auto_Square+0x78>)
 8001296:	781b      	ldrb	r3, [r3, #0]
 8001298:	2b08      	cmp	r3, #8
 800129a:	bf8c      	ite	hi
 800129c:	2201      	movhi	r2, #1
 800129e:	2200      	movls	r2, #0
 80012a0:	b2d2      	uxtb	r2, r2
 80012a2:	2a00      	cmp	r2, #0
 80012a4:	d123      	bne.n	80012ee <Auto_Square+0x62>
 80012a6:	2201      	movs	r2, #1
 80012a8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ac:	f403 72aa 	and.w	r2, r3, #340	@ 0x154
 80012b0:	2a00      	cmp	r2, #0
 80012b2:	bf14      	ite	ne
 80012b4:	2201      	movne	r2, #1
 80012b6:	2200      	moveq	r2, #0
 80012b8:	b2d2      	uxtb	r2, r2
 80012ba:	2a00      	cmp	r2, #0
 80012bc:	d111      	bne.n	80012e2 <Auto_Square+0x56>
 80012be:	f003 03aa 	and.w	r3, r3, #170	@ 0xaa
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	bf14      	ite	ne
 80012c6:	2301      	movne	r3, #1
 80012c8:	2300      	moveq	r3, #0
 80012ca:	b2db      	uxtb	r3, r3
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d00e      	beq.n	80012ee <Auto_Square+0x62>
	case 1:
	case 3:
	case 5:
	case 7:
		// Odd steps: Move forward
		Auto_Line(DISTANCE, (BASE_SPEED * 0.333), BASE_SPEED, htim3);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	f44f 72e1 	mov.w	r2, #450	@ 0x1c2
 80012d6:	2195      	movs	r1, #149	@ 0x95
 80012d8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80012dc:	f7ff fe10 	bl	8000f00 <Auto_Line>
		break;
 80012e0:	e00c      	b.n	80012fc <Auto_Square+0x70>
	case 2:
	case 4:
	case 6:
	case 8:
		// Even steps: Turn 90 degrees
		Auto_Angle(90.0, htim3);
 80012e2:	6878      	ldr	r0, [r7, #4]
 80012e4:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8001308 <Auto_Square+0x7c>
 80012e8:	f7ff fd86 	bl	8000df8 <Auto_Angle>
		break;
 80012ec:	e006      	b.n	80012fc <Auto_Square+0x70>

	default:
		// End of sequence : reset current step and set to manual mode after drawing shape
		curr_step = 1;
 80012ee:	4b05      	ldr	r3, [pc, #20]	@ (8001304 <Auto_Square+0x78>)
 80012f0:	2201      	movs	r2, #1
 80012f2:	701a      	strb	r2, [r3, #0]
		curr_mode = MANUAL_MODE;
 80012f4:	4b05      	ldr	r3, [pc, #20]	@ (800130c <Auto_Square+0x80>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	701a      	strb	r2, [r3, #0]
		break;
 80012fa:	bf00      	nop
	}
	return;
 80012fc:	bf00      	nop
}
 80012fe:	3708      	adds	r7, #8
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}
 8001304:	20000000 	.word	0x20000000
 8001308:	42b40000 	.word	0x42b40000
 800130c:	20000042 	.word	0x20000042

08001310 <Pause>:

void Pause(TIM_HandleTypeDef* htim3) {
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
	pause = pause ^ 1;
 8001318:	4b1a      	ldr	r3, [pc, #104]	@ (8001384 <Pause+0x74>)
 800131a:	781b      	ldrb	r3, [r3, #0]
 800131c:	f083 0301 	eor.w	r3, r3, #1
 8001320:	b2da      	uxtb	r2, r3
 8001322:	4b18      	ldr	r3, [pc, #96]	@ (8001384 <Pause+0x74>)
 8001324:	701a      	strb	r2, [r3, #0]

	// Save currrent CCR values
	save[0] = htim3->Instance -> CCR1;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800132c:	461a      	mov	r2, r3
 800132e:	4b16      	ldr	r3, [pc, #88]	@ (8001388 <Pause+0x78>)
 8001330:	601a      	str	r2, [r3, #0]
	save[1] = htim3->Instance -> CCR2;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001338:	461a      	mov	r2, r3
 800133a:	4b13      	ldr	r3, [pc, #76]	@ (8001388 <Pause+0x78>)
 800133c:	605a      	str	r2, [r3, #4]
	save[2] = htim3->Instance -> CCR3;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001344:	461a      	mov	r2, r3
 8001346:	4b10      	ldr	r3, [pc, #64]	@ (8001388 <Pause+0x78>)
 8001348:	609a      	str	r2, [r3, #8]
	save[3] = htim3->Instance -> CCR4;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001350:	461a      	mov	r2, r3
 8001352:	4b0d      	ldr	r3, [pc, #52]	@ (8001388 <Pause+0x78>)
 8001354:	60da      	str	r2, [r3, #12]

	// Stop
	HAL_TIM_PWM_Stop(htim3, TIM_CHANNEL_1);
 8001356:	2100      	movs	r1, #0
 8001358:	6878      	ldr	r0, [r7, #4]
 800135a:	f003 fe7f 	bl	800505c <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(htim3, TIM_CHANNEL_2);
 800135e:	2104      	movs	r1, #4
 8001360:	6878      	ldr	r0, [r7, #4]
 8001362:	f003 fe7b 	bl	800505c <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(htim3, TIM_CHANNEL_3);
 8001366:	2108      	movs	r1, #8
 8001368:	6878      	ldr	r0, [r7, #4]
 800136a:	f003 fe77 	bl	800505c <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(htim3, TIM_CHANNEL_4);
 800136e:	210c      	movs	r1, #12
 8001370:	6878      	ldr	r0, [r7, #4]
 8001372:	f003 fe73 	bl	800505c <HAL_TIM_PWM_Stop>
	HAL_TIM_Base_Stop_IT(&htim7);
 8001376:	4805      	ldr	r0, [pc, #20]	@ (800138c <Pause+0x7c>)
 8001378:	f003 fd20 	bl	8004dbc <HAL_TIM_Base_Stop_IT>

	return;
 800137c:	bf00      	nop
}
 800137e:	3708      	adds	r7, #8
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}
 8001384:	20000040 	.word	0x20000040
 8001388:	20000060 	.word	0x20000060
 800138c:	20000240 	.word	0x20000240

08001390 <Resume>:

void Resume(TIM_HandleTypeDef* htim3) {
 8001390:	b580      	push	{r7, lr}
 8001392:	b082      	sub	sp, #8
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
	pause = pause ^ 1;
 8001398:	4b18      	ldr	r3, [pc, #96]	@ (80013fc <Resume+0x6c>)
 800139a:	781b      	ldrb	r3, [r3, #0]
 800139c:	f083 0301 	eor.w	r3, r3, #1
 80013a0:	b2da      	uxtb	r2, r3
 80013a2:	4b16      	ldr	r3, [pc, #88]	@ (80013fc <Resume+0x6c>)
 80013a4:	701a      	strb	r2, [r3, #0]

	// Restore saved CCR values
	HAL_TIM_PWM_Start(htim3, TIM_CHANNEL_1);
 80013a6:	2100      	movs	r1, #0
 80013a8:	6878      	ldr	r0, [r7, #4]
 80013aa:	f003 fd8f 	bl	8004ecc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(htim3, TIM_CHANNEL_2);
 80013ae:	2104      	movs	r1, #4
 80013b0:	6878      	ldr	r0, [r7, #4]
 80013b2:	f003 fd8b 	bl	8004ecc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(htim3, TIM_CHANNEL_3);
 80013b6:	2108      	movs	r1, #8
 80013b8:	6878      	ldr	r0, [r7, #4]
 80013ba:	f003 fd87 	bl	8004ecc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(htim3, TIM_CHANNEL_4);
 80013be:	210c      	movs	r1, #12
 80013c0:	6878      	ldr	r0, [r7, #4]
 80013c2:	f003 fd83 	bl	8004ecc <HAL_TIM_PWM_Start>
	htim3->Instance -> CCR1 = save[0];
 80013c6:	4b0e      	ldr	r3, [pc, #56]	@ (8001400 <Resume+0x70>)
 80013c8:	681a      	ldr	r2, [r3, #0]
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	635a      	str	r2, [r3, #52]	@ 0x34
	htim3->Instance -> CCR2 = save[1];
 80013d0:	4b0b      	ldr	r3, [pc, #44]	@ (8001400 <Resume+0x70>)
 80013d2:	685a      	ldr	r2, [r3, #4]
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	639a      	str	r2, [r3, #56]	@ 0x38
	htim3->Instance -> CCR3 = save[2];
 80013da:	4b09      	ldr	r3, [pc, #36]	@ (8001400 <Resume+0x70>)
 80013dc:	689a      	ldr	r2, [r3, #8]
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	63da      	str	r2, [r3, #60]	@ 0x3c
	htim3->Instance -> CCR4 = save[3];
 80013e4:	4b06      	ldr	r3, [pc, #24]	@ (8001400 <Resume+0x70>)
 80013e6:	68da      	ldr	r2, [r3, #12]
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	641a      	str	r2, [r3, #64]	@ 0x40
	HAL_TIM_Base_Start_IT(&htim7);
 80013ee:	4805      	ldr	r0, [pc, #20]	@ (8001404 <Resume+0x74>)
 80013f0:	f003 fc74 	bl	8004cdc <HAL_TIM_Base_Start_IT>

	return;
 80013f4:	bf00      	nop
}
 80013f6:	3708      	adds	r7, #8
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	20000040 	.word	0x20000040
 8001400:	20000060 	.word	0x20000060
 8001404:	20000240 	.word	0x20000240

08001408 <Avancer>:
 *      Author: sebas
 */

#include "gestion_moteurs.h"

void Avancer(int Pulse, TIM_HandleTypeDef* htim3){
 8001408:	b590      	push	{r4, r7, lr}
 800140a:	b083      	sub	sp, #12
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
 8001410:	6039      	str	r1, [r7, #0]

	htim3->Instance -> CCR2 = 0;
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	2200      	movs	r2, #0
 8001418:	639a      	str	r2, [r3, #56]	@ 0x38
	htim3->Instance -> CCR4 = 0;
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	2200      	movs	r2, #0
 8001420:	641a      	str	r2, [r3, #64]	@ 0x40

	if(Pulse > 499){
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001428:	db02      	blt.n	8001430 <Avancer+0x28>
		Pulse = 499;
 800142a:	f240 13f3 	movw	r3, #499	@ 0x1f3
 800142e:	607b      	str	r3, [r7, #4]
	}

	htim3->Instance -> CCR1 = Pulse;
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	687a      	ldr	r2, [r7, #4]
 8001436:	635a      	str	r2, [r3, #52]	@ 0x34
	htim3->Instance -> CCR3 = htim3->Instance -> CCR1 * 0.9;
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800143e:	4618      	mov	r0, r3
 8001440:	f7ff f824 	bl	800048c <__aeabi_ui2d>
 8001444:	a30a      	add	r3, pc, #40	@ (adr r3, 8001470 <Avancer+0x68>)
 8001446:	e9d3 2300 	ldrd	r2, r3, [r3]
 800144a:	f7ff f899 	bl	8000580 <__aeabi_dmul>
 800144e:	4602      	mov	r2, r0
 8001450:	460b      	mov	r3, r1
 8001452:	4610      	mov	r0, r2
 8001454:	4619      	mov	r1, r3
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	681c      	ldr	r4, [r3, #0]
 800145a:	f7ff facb 	bl	80009f4 <__aeabi_d2uiz>
 800145e:	4603      	mov	r3, r0
 8001460:	63e3      	str	r3, [r4, #60]	@ 0x3c

	return;
 8001462:	bf00      	nop
}
 8001464:	370c      	adds	r7, #12
 8001466:	46bd      	mov	sp, r7
 8001468:	bd90      	pop	{r4, r7, pc}
 800146a:	bf00      	nop
 800146c:	f3af 8000 	nop.w
 8001470:	cccccccd 	.word	0xcccccccd
 8001474:	3feccccc 	.word	0x3feccccc

08001478 <Droite>:

void Droite(int Pulse, TIM_HandleTypeDef* htim3){
 8001478:	b590      	push	{r4, r7, lr}
 800147a:	b083      	sub	sp, #12
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
 8001480:	6039      	str	r1, [r7, #0]

	htim3->Instance -> CCR2 = 0;
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	2200      	movs	r2, #0
 8001488:	639a      	str	r2, [r3, #56]	@ 0x38
	htim3->Instance -> CCR3 = 0;
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	2200      	movs	r2, #0
 8001490:	63da      	str	r2, [r3, #60]	@ 0x3c

	if(Pulse > 499){
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001498:	db02      	blt.n	80014a0 <Droite+0x28>
		Pulse = 499;
 800149a:	f240 13f3 	movw	r3, #499	@ 0x1f3
 800149e:	607b      	str	r3, [r7, #4]
	}
	htim3->Instance -> CCR1 = Pulse;
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	687a      	ldr	r2, [r7, #4]
 80014a6:	635a      	str	r2, [r3, #52]	@ 0x34
	htim3->Instance -> CCR4 = htim3->Instance -> CCR1 * 0.9;
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80014ae:	4618      	mov	r0, r3
 80014b0:	f7fe ffec 	bl	800048c <__aeabi_ui2d>
 80014b4:	a30a      	add	r3, pc, #40	@ (adr r3, 80014e0 <Droite+0x68>)
 80014b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014ba:	f7ff f861 	bl	8000580 <__aeabi_dmul>
 80014be:	4602      	mov	r2, r0
 80014c0:	460b      	mov	r3, r1
 80014c2:	4610      	mov	r0, r2
 80014c4:	4619      	mov	r1, r3
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	681c      	ldr	r4, [r3, #0]
 80014ca:	f7ff fa93 	bl	80009f4 <__aeabi_d2uiz>
 80014ce:	4603      	mov	r3, r0
 80014d0:	6423      	str	r3, [r4, #64]	@ 0x40
}
 80014d2:	bf00      	nop
 80014d4:	370c      	adds	r7, #12
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd90      	pop	{r4, r7, pc}
 80014da:	bf00      	nop
 80014dc:	f3af 8000 	nop.w
 80014e0:	cccccccd 	.word	0xcccccccd
 80014e4:	3feccccc 	.word	0x3feccccc

080014e8 <Gauche>:

void Gauche(int Pulse, TIM_HandleTypeDef* htim3){
 80014e8:	b590      	push	{r4, r7, lr}
 80014ea:	b083      	sub	sp, #12
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
 80014f0:	6039      	str	r1, [r7, #0]

	htim3->Instance -> CCR1 = 0;
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	2200      	movs	r2, #0
 80014f8:	635a      	str	r2, [r3, #52]	@ 0x34
	htim3->Instance -> CCR4 = 0;
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	2200      	movs	r2, #0
 8001500:	641a      	str	r2, [r3, #64]	@ 0x40

	if(Pulse > 499){
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001508:	db02      	blt.n	8001510 <Gauche+0x28>
		Pulse = 499;
 800150a:	f240 13f3 	movw	r3, #499	@ 0x1f3
 800150e:	607b      	str	r3, [r7, #4]
	}
	htim3->Instance -> CCR2 = Pulse;
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	687a      	ldr	r2, [r7, #4]
 8001516:	639a      	str	r2, [r3, #56]	@ 0x38
	htim3->Instance -> CCR3 = htim3->Instance -> CCR2 * 0.9;
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800151e:	4618      	mov	r0, r3
 8001520:	f7fe ffb4 	bl	800048c <__aeabi_ui2d>
 8001524:	a30a      	add	r3, pc, #40	@ (adr r3, 8001550 <Gauche+0x68>)
 8001526:	e9d3 2300 	ldrd	r2, r3, [r3]
 800152a:	f7ff f829 	bl	8000580 <__aeabi_dmul>
 800152e:	4602      	mov	r2, r0
 8001530:	460b      	mov	r3, r1
 8001532:	4610      	mov	r0, r2
 8001534:	4619      	mov	r1, r3
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	681c      	ldr	r4, [r3, #0]
 800153a:	f7ff fa5b 	bl	80009f4 <__aeabi_d2uiz>
 800153e:	4603      	mov	r3, r0
 8001540:	63e3      	str	r3, [r4, #60]	@ 0x3c
}
 8001542:	bf00      	nop
 8001544:	370c      	adds	r7, #12
 8001546:	46bd      	mov	sp, r7
 8001548:	bd90      	pop	{r4, r7, pc}
 800154a:	bf00      	nop
 800154c:	f3af 8000 	nop.w
 8001550:	cccccccd 	.word	0xcccccccd
 8001554:	3feccccc 	.word	0x3feccccc

08001558 <Reculer>:

void Reculer(int Pulse,TIM_HandleTypeDef* htim3){
 8001558:	b590      	push	{r4, r7, lr}
 800155a:	b083      	sub	sp, #12
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
 8001560:	6039      	str	r1, [r7, #0]

	htim3->Instance -> CCR1 = 0;
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	2200      	movs	r2, #0
 8001568:	635a      	str	r2, [r3, #52]	@ 0x34
	htim3->Instance -> CCR3 = 0;
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	2200      	movs	r2, #0
 8001570:	63da      	str	r2, [r3, #60]	@ 0x3c

	if(Pulse > 499){
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001578:	db02      	blt.n	8001580 <Reculer+0x28>
		Pulse = 499;
 800157a:	f240 13f3 	movw	r3, #499	@ 0x1f3
 800157e:	607b      	str	r3, [r7, #4]
	}

	htim3->Instance -> CCR4 = Pulse;
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	687a      	ldr	r2, [r7, #4]
 8001586:	641a      	str	r2, [r3, #64]	@ 0x40
	htim3->Instance -> CCR2 = htim3->Instance -> CCR4 * 0.95;
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800158e:	4618      	mov	r0, r3
 8001590:	f7fe ff7c 	bl	800048c <__aeabi_ui2d>
 8001594:	a30a      	add	r3, pc, #40	@ (adr r3, 80015c0 <Reculer+0x68>)
 8001596:	e9d3 2300 	ldrd	r2, r3, [r3]
 800159a:	f7fe fff1 	bl	8000580 <__aeabi_dmul>
 800159e:	4602      	mov	r2, r0
 80015a0:	460b      	mov	r3, r1
 80015a2:	4610      	mov	r0, r2
 80015a4:	4619      	mov	r1, r3
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	681c      	ldr	r4, [r3, #0]
 80015aa:	f7ff fa23 	bl	80009f4 <__aeabi_d2uiz>
 80015ae:	4603      	mov	r3, r0
 80015b0:	63a3      	str	r3, [r4, #56]	@ 0x38

	return;
 80015b2:	bf00      	nop
}
 80015b4:	370c      	adds	r7, #12
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd90      	pop	{r4, r7, pc}
 80015ba:	bf00      	nop
 80015bc:	f3af 8000 	nop.w
 80015c0:	66666666 	.word	0x66666666
 80015c4:	3fee6666 	.word	0x3fee6666

080015c8 <Stop>:
void Stop(TIM_HandleTypeDef* htim3){
 80015c8:	b480      	push	{r7}
 80015ca:	b083      	sub	sp, #12
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
	htim3->Instance -> CCR1 = 0;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	2200      	movs	r2, #0
 80015d6:	635a      	str	r2, [r3, #52]	@ 0x34
	htim3->Instance -> CCR2 = 0;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	2200      	movs	r2, #0
 80015de:	639a      	str	r2, [r3, #56]	@ 0x38
	htim3->Instance -> CCR3 = 0;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	2200      	movs	r2, #0
 80015e6:	63da      	str	r2, [r3, #60]	@ 0x3c
	htim3->Instance -> CCR4 = 0;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	2200      	movs	r2, #0
 80015ee:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80015f0:	bf00      	nop
 80015f2:	370c      	adds	r7, #12
 80015f4:	46bd      	mov	sp, r7
 80015f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fa:	4770      	bx	lr

080015fc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b08a      	sub	sp, #40	@ 0x28
 8001600:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001602:	f107 0314 	add.w	r3, r7, #20
 8001606:	2200      	movs	r2, #0
 8001608:	601a      	str	r2, [r3, #0]
 800160a:	605a      	str	r2, [r3, #4]
 800160c:	609a      	str	r2, [r3, #8]
 800160e:	60da      	str	r2, [r3, #12]
 8001610:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001612:	2300      	movs	r3, #0
 8001614:	613b      	str	r3, [r7, #16]
 8001616:	4b4d      	ldr	r3, [pc, #308]	@ (800174c <MX_GPIO_Init+0x150>)
 8001618:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800161a:	4a4c      	ldr	r2, [pc, #304]	@ (800174c <MX_GPIO_Init+0x150>)
 800161c:	f043 0304 	orr.w	r3, r3, #4
 8001620:	6313      	str	r3, [r2, #48]	@ 0x30
 8001622:	4b4a      	ldr	r3, [pc, #296]	@ (800174c <MX_GPIO_Init+0x150>)
 8001624:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001626:	f003 0304 	and.w	r3, r3, #4
 800162a:	613b      	str	r3, [r7, #16]
 800162c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800162e:	2300      	movs	r3, #0
 8001630:	60fb      	str	r3, [r7, #12]
 8001632:	4b46      	ldr	r3, [pc, #280]	@ (800174c <MX_GPIO_Init+0x150>)
 8001634:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001636:	4a45      	ldr	r2, [pc, #276]	@ (800174c <MX_GPIO_Init+0x150>)
 8001638:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800163c:	6313      	str	r3, [r2, #48]	@ 0x30
 800163e:	4b43      	ldr	r3, [pc, #268]	@ (800174c <MX_GPIO_Init+0x150>)
 8001640:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001642:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001646:	60fb      	str	r3, [r7, #12]
 8001648:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800164a:	2300      	movs	r3, #0
 800164c:	60bb      	str	r3, [r7, #8]
 800164e:	4b3f      	ldr	r3, [pc, #252]	@ (800174c <MX_GPIO_Init+0x150>)
 8001650:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001652:	4a3e      	ldr	r2, [pc, #248]	@ (800174c <MX_GPIO_Init+0x150>)
 8001654:	f043 0301 	orr.w	r3, r3, #1
 8001658:	6313      	str	r3, [r2, #48]	@ 0x30
 800165a:	4b3c      	ldr	r3, [pc, #240]	@ (800174c <MX_GPIO_Init+0x150>)
 800165c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800165e:	f003 0301 	and.w	r3, r3, #1
 8001662:	60bb      	str	r3, [r7, #8]
 8001664:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001666:	2300      	movs	r3, #0
 8001668:	607b      	str	r3, [r7, #4]
 800166a:	4b38      	ldr	r3, [pc, #224]	@ (800174c <MX_GPIO_Init+0x150>)
 800166c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800166e:	4a37      	ldr	r2, [pc, #220]	@ (800174c <MX_GPIO_Init+0x150>)
 8001670:	f043 0302 	orr.w	r3, r3, #2
 8001674:	6313      	str	r3, [r2, #48]	@ 0x30
 8001676:	4b35      	ldr	r3, [pc, #212]	@ (800174c <MX_GPIO_Init+0x150>)
 8001678:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800167a:	f003 0302 	and.w	r3, r3, #2
 800167e:	607b      	str	r3, [r7, #4]
 8001680:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001682:	2200      	movs	r2, #0
 8001684:	2120      	movs	r1, #32
 8001686:	4832      	ldr	r0, [pc, #200]	@ (8001750 <MX_GPIO_Init+0x154>)
 8001688:	f001 fc3c 	bl	8002f04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI_RST_Pin|SPI_CS_Pin|SPI_DC_Pin, GPIO_PIN_RESET);
 800168c:	2200      	movs	r2, #0
 800168e:	f44f 4160 	mov.w	r1, #57344	@ 0xe000
 8001692:	4830      	ldr	r0, [pc, #192]	@ (8001754 <MX_GPIO_Init+0x158>)
 8001694:	f001 fc36 	bl	8002f04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Blue_Button_Pin;
 8001698:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800169c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800169e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80016a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a4:	2300      	movs	r3, #0
 80016a6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Blue_Button_GPIO_Port, &GPIO_InitStruct);
 80016a8:	f107 0314 	add.w	r3, r7, #20
 80016ac:	4619      	mov	r1, r3
 80016ae:	482a      	ldr	r0, [pc, #168]	@ (8001758 <MX_GPIO_Init+0x15c>)
 80016b0:	f001 fa7c 	bl	8002bac <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = Dipswitch_MSB_Pin|Dipswitch_LSB_Pin|Encodeur_D_B_Pin;
 80016b4:	238c      	movs	r3, #140	@ 0x8c
 80016b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016b8:	2300      	movs	r3, #0
 80016ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80016bc:	2302      	movs	r3, #2
 80016be:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016c0:	f107 0314 	add.w	r3, r7, #20
 80016c4:	4619      	mov	r1, r3
 80016c6:	4824      	ldr	r0, [pc, #144]	@ (8001758 <MX_GPIO_Init+0x15c>)
 80016c8:	f001 fa70 	bl	8002bac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80016cc:	2320      	movs	r3, #32
 80016ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016d0:	2301      	movs	r3, #1
 80016d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d4:	2300      	movs	r3, #0
 80016d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016d8:	2300      	movs	r3, #0
 80016da:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80016dc:	f107 0314 	add.w	r3, r7, #20
 80016e0:	4619      	mov	r1, r3
 80016e2:	481b      	ldr	r0, [pc, #108]	@ (8001750 <MX_GPIO_Init+0x154>)
 80016e4:	f001 fa62 	bl	8002bac <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = SPI_RST_Pin|SPI_CS_Pin|SPI_DC_Pin;
 80016e8:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 80016ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016ee:	2301      	movs	r3, #1
 80016f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f2:	2300      	movs	r3, #0
 80016f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016f6:	2300      	movs	r3, #0
 80016f8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016fa:	f107 0314 	add.w	r3, r7, #20
 80016fe:	4619      	mov	r1, r3
 8001700:	4814      	ldr	r0, [pc, #80]	@ (8001754 <MX_GPIO_Init+0x158>)
 8001702:	f001 fa53 	bl	8002bac <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = Encodeur_G_A_Pin|Encodeur_D_A_Pin;
 8001706:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800170a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800170c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001710:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001712:	2302      	movs	r3, #2
 8001714:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001716:	f107 0314 	add.w	r3, r7, #20
 800171a:	4619      	mov	r1, r3
 800171c:	480c      	ldr	r0, [pc, #48]	@ (8001750 <MX_GPIO_Init+0x154>)
 800171e:	f001 fa45 	bl	8002bac <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001722:	2200      	movs	r2, #0
 8001724:	2100      	movs	r1, #0
 8001726:	2017      	movs	r0, #23
 8001728:	f001 fa09 	bl	8002b3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800172c:	2017      	movs	r0, #23
 800172e:	f001 fa22 	bl	8002b76 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001732:	2200      	movs	r2, #0
 8001734:	2100      	movs	r1, #0
 8001736:	2028      	movs	r0, #40	@ 0x28
 8001738:	f001 fa01 	bl	8002b3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800173c:	2028      	movs	r0, #40	@ 0x28
 800173e:	f001 fa1a 	bl	8002b76 <HAL_NVIC_EnableIRQ>

}
 8001742:	bf00      	nop
 8001744:	3728      	adds	r7, #40	@ 0x28
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	40023800 	.word	0x40023800
 8001750:	40020000 	.word	0x40020000
 8001754:	40020400 	.word	0x40020400
 8001758:	40020800 	.word	0x40020800

0800175c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001760:	4b12      	ldr	r3, [pc, #72]	@ (80017ac <MX_I2C1_Init+0x50>)
 8001762:	4a13      	ldr	r2, [pc, #76]	@ (80017b0 <MX_I2C1_Init+0x54>)
 8001764:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001766:	4b11      	ldr	r3, [pc, #68]	@ (80017ac <MX_I2C1_Init+0x50>)
 8001768:	4a12      	ldr	r2, [pc, #72]	@ (80017b4 <MX_I2C1_Init+0x58>)
 800176a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800176c:	4b0f      	ldr	r3, [pc, #60]	@ (80017ac <MX_I2C1_Init+0x50>)
 800176e:	2200      	movs	r2, #0
 8001770:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001772:	4b0e      	ldr	r3, [pc, #56]	@ (80017ac <MX_I2C1_Init+0x50>)
 8001774:	2200      	movs	r2, #0
 8001776:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001778:	4b0c      	ldr	r3, [pc, #48]	@ (80017ac <MX_I2C1_Init+0x50>)
 800177a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800177e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001780:	4b0a      	ldr	r3, [pc, #40]	@ (80017ac <MX_I2C1_Init+0x50>)
 8001782:	2200      	movs	r2, #0
 8001784:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001786:	4b09      	ldr	r3, [pc, #36]	@ (80017ac <MX_I2C1_Init+0x50>)
 8001788:	2200      	movs	r2, #0
 800178a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800178c:	4b07      	ldr	r3, [pc, #28]	@ (80017ac <MX_I2C1_Init+0x50>)
 800178e:	2200      	movs	r2, #0
 8001790:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001792:	4b06      	ldr	r3, [pc, #24]	@ (80017ac <MX_I2C1_Init+0x50>)
 8001794:	2200      	movs	r2, #0
 8001796:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001798:	4804      	ldr	r0, [pc, #16]	@ (80017ac <MX_I2C1_Init+0x50>)
 800179a:	f001 fbe5 	bl	8002f68 <HAL_I2C_Init>
 800179e:	4603      	mov	r3, r0
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d001      	beq.n	80017a8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80017a4:	f000 f9e8 	bl	8001b78 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80017a8:	bf00      	nop
 80017aa:	bd80      	pop	{r7, pc}
 80017ac:	20000074 	.word	0x20000074
 80017b0:	40005400 	.word	0x40005400
 80017b4:	000186a0 	.word	0x000186a0

080017b8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b08a      	sub	sp, #40	@ 0x28
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017c0:	f107 0314 	add.w	r3, r7, #20
 80017c4:	2200      	movs	r2, #0
 80017c6:	601a      	str	r2, [r3, #0]
 80017c8:	605a      	str	r2, [r3, #4]
 80017ca:	609a      	str	r2, [r3, #8]
 80017cc:	60da      	str	r2, [r3, #12]
 80017ce:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a19      	ldr	r2, [pc, #100]	@ (800183c <HAL_I2C_MspInit+0x84>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d12c      	bne.n	8001834 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017da:	2300      	movs	r3, #0
 80017dc:	613b      	str	r3, [r7, #16]
 80017de:	4b18      	ldr	r3, [pc, #96]	@ (8001840 <HAL_I2C_MspInit+0x88>)
 80017e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017e2:	4a17      	ldr	r2, [pc, #92]	@ (8001840 <HAL_I2C_MspInit+0x88>)
 80017e4:	f043 0302 	orr.w	r3, r3, #2
 80017e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80017ea:	4b15      	ldr	r3, [pc, #84]	@ (8001840 <HAL_I2C_MspInit+0x88>)
 80017ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ee:	f003 0302 	and.w	r3, r3, #2
 80017f2:	613b      	str	r3, [r7, #16]
 80017f4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80017f6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80017fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017fc:	2312      	movs	r3, #18
 80017fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001800:	2300      	movs	r3, #0
 8001802:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001804:	2303      	movs	r3, #3
 8001806:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001808:	2304      	movs	r3, #4
 800180a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800180c:	f107 0314 	add.w	r3, r7, #20
 8001810:	4619      	mov	r1, r3
 8001812:	480c      	ldr	r0, [pc, #48]	@ (8001844 <HAL_I2C_MspInit+0x8c>)
 8001814:	f001 f9ca 	bl	8002bac <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001818:	2300      	movs	r3, #0
 800181a:	60fb      	str	r3, [r7, #12]
 800181c:	4b08      	ldr	r3, [pc, #32]	@ (8001840 <HAL_I2C_MspInit+0x88>)
 800181e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001820:	4a07      	ldr	r2, [pc, #28]	@ (8001840 <HAL_I2C_MspInit+0x88>)
 8001822:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001826:	6413      	str	r3, [r2, #64]	@ 0x40
 8001828:	4b05      	ldr	r3, [pc, #20]	@ (8001840 <HAL_I2C_MspInit+0x88>)
 800182a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800182c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001830:	60fb      	str	r3, [r7, #12]
 8001832:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001834:	bf00      	nop
 8001836:	3728      	adds	r7, #40	@ 0x28
 8001838:	46bd      	mov	sp, r7
 800183a:	bd80      	pop	{r7, pc}
 800183c:	40005400 	.word	0x40005400
 8001840:	40023800 	.word	0x40023800
 8001844:	40020400 	.word	0x40020400

08001848 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800184c:	f001 f806 	bl	800285c <HAL_Init>

  /* USER CODE BEGIN Init */

  Initialisation_manette();
 8001850:	f000 f9ec 	bl	8001c2c <Initialisation_manette>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001854:	f000 f85e 	bl	8001914 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001858:	f7ff fed0 	bl	80015fc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800185c:	f000 ff62 	bl	8002724 <MX_USART2_UART_Init>
  MX_TIM6_Init();
 8001860:	f000 fe04 	bl	800246c <MX_TIM6_Init>
  MX_TIM3_Init();
 8001864:	f000 fcf2 	bl	800224c <MX_TIM3_Init>
  MX_TIM7_Init();
 8001868:	f000 fe36 	bl	80024d8 <MX_TIM7_Init>
  MX_I2C1_Init();
 800186c:	f7ff ff76 	bl	800175c <MX_I2C1_Init>
  MX_SPI2_Init();
 8001870:	f000 fbba 	bl	8001fe8 <MX_SPI2_Init>
  MX_TIM4_Init();
 8001874:	f000 fd82 	bl	800237c <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim6);
 8001878:	4823      	ldr	r0, [pc, #140]	@ (8001908 <main+0xc0>)
 800187a:	f003 fa2f 	bl	8004cdc <HAL_TIM_Base_Start_IT>

  if (HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1) != HAL_OK)
 800187e:	2100      	movs	r1, #0
 8001880:	4822      	ldr	r0, [pc, #136]	@ (800190c <main+0xc4>)
 8001882:	f003 fb23 	bl	8004ecc <HAL_TIM_PWM_Start>
 8001886:	4603      	mov	r3, r0
 8001888:	2b00      	cmp	r3, #0
 800188a:	d001      	beq.n	8001890 <main+0x48>
  {
      Error_Handler();
 800188c:	f000 f974 	bl	8001b78 <Error_Handler>
  }

  if (HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2) != HAL_OK)
 8001890:	2104      	movs	r1, #4
 8001892:	481e      	ldr	r0, [pc, #120]	@ (800190c <main+0xc4>)
 8001894:	f003 fb1a 	bl	8004ecc <HAL_TIM_PWM_Start>
 8001898:	4603      	mov	r3, r0
 800189a:	2b00      	cmp	r3, #0
 800189c:	d001      	beq.n	80018a2 <main+0x5a>
  {
      Error_Handler();
 800189e:	f000 f96b 	bl	8001b78 <Error_Handler>
  }

  if (HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3) != HAL_OK)
 80018a2:	2108      	movs	r1, #8
 80018a4:	4819      	ldr	r0, [pc, #100]	@ (800190c <main+0xc4>)
 80018a6:	f003 fb11 	bl	8004ecc <HAL_TIM_PWM_Start>
 80018aa:	4603      	mov	r3, r0
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d001      	beq.n	80018b4 <main+0x6c>
  {
      Error_Handler();
 80018b0:	f000 f962 	bl	8001b78 <Error_Handler>
  }

  if (HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4) != HAL_OK)
 80018b4:	210c      	movs	r1, #12
 80018b6:	4815      	ldr	r0, [pc, #84]	@ (800190c <main+0xc4>)
 80018b8:	f003 fb08 	bl	8004ecc <HAL_TIM_PWM_Start>
 80018bc:	4603      	mov	r3, r0
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d001      	beq.n	80018c6 <main+0x7e>
  {
      Error_Handler();
 80018c2:	f000 f959 	bl	8001b78 <Error_Handler>
  }

  //LCD_Init(&LCD_Init_OK);
  curr_mode = MANUAL_MODE;
 80018c6:	4b12      	ldr	r3, [pc, #72]	@ (8001910 <main+0xc8>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	701a      	strb	r2, [r3, #0]
  {

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	if(curr_mode != MANUAL_MODE) { 	// Toggle auto mode
 80018cc:	4b10      	ldr	r3, [pc, #64]	@ (8001910 <main+0xc8>)
 80018ce:	781b      	ldrb	r3, [r3, #0]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d016      	beq.n	8001902 <main+0xba>
		switch(curr_mode) {
 80018d4:	4b0e      	ldr	r3, [pc, #56]	@ (8001910 <main+0xc8>)
 80018d6:	781b      	ldrb	r3, [r3, #0]
 80018d8:	2b03      	cmp	r3, #3
 80018da:	d00e      	beq.n	80018fa <main+0xb2>
 80018dc:	2b03      	cmp	r3, #3
 80018de:	dcf5      	bgt.n	80018cc <main+0x84>
 80018e0:	2b01      	cmp	r3, #1
 80018e2:	d002      	beq.n	80018ea <main+0xa2>
 80018e4:	2b02      	cmp	r3, #2
 80018e6:	d004      	beq.n	80018f2 <main+0xaa>
 80018e8:	e00d      	b.n	8001906 <main+0xbe>
			case CIRCLE_MODE:
				Auto_Circle(&htim3);
 80018ea:	4808      	ldr	r0, [pc, #32]	@ (800190c <main+0xc4>)
 80018ec:	f7ff fbf8 	bl	80010e0 <Auto_Circle>
				break;
 80018f0:	e009      	b.n	8001906 <main+0xbe>
			case BACK_FORTH_MODE:
				Auto_Back_Forth(&htim3);
 80018f2:	4806      	ldr	r0, [pc, #24]	@ (800190c <main+0xc4>)
 80018f4:	f7ff fc84 	bl	8001200 <Auto_Back_Forth>
				break;
 80018f8:	e005      	b.n	8001906 <main+0xbe>
			case SQUARE_MODE:
				Auto_Square(&htim3);
 80018fa:	4804      	ldr	r0, [pc, #16]	@ (800190c <main+0xc4>)
 80018fc:	f7ff fcc6 	bl	800128c <Auto_Square>
				break;
 8001900:	e001      	b.n	8001906 <main+0xbe>
		}
	}

	else { 	// Manual mode
		Controller();
 8001902:	f000 f9b5 	bl	8001c70 <Controller>
	if(curr_mode != MANUAL_MODE) { 	// Toggle auto mode
 8001906:	e7e1      	b.n	80018cc <main+0x84>
 8001908:	200001f8 	.word	0x200001f8
 800190c:	20000168 	.word	0x20000168
 8001910:	20000042 	.word	0x20000042

08001914 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b094      	sub	sp, #80	@ 0x50
 8001918:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800191a:	f107 031c 	add.w	r3, r7, #28
 800191e:	2234      	movs	r2, #52	@ 0x34
 8001920:	2100      	movs	r1, #0
 8001922:	4618      	mov	r0, r3
 8001924:	f004 fd1c 	bl	8006360 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001928:	f107 0308 	add.w	r3, r7, #8
 800192c:	2200      	movs	r2, #0
 800192e:	601a      	str	r2, [r3, #0]
 8001930:	605a      	str	r2, [r3, #4]
 8001932:	609a      	str	r2, [r3, #8]
 8001934:	60da      	str	r2, [r3, #12]
 8001936:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001938:	2300      	movs	r3, #0
 800193a:	607b      	str	r3, [r7, #4]
 800193c:	4b2a      	ldr	r3, [pc, #168]	@ (80019e8 <SystemClock_Config+0xd4>)
 800193e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001940:	4a29      	ldr	r2, [pc, #164]	@ (80019e8 <SystemClock_Config+0xd4>)
 8001942:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001946:	6413      	str	r3, [r2, #64]	@ 0x40
 8001948:	4b27      	ldr	r3, [pc, #156]	@ (80019e8 <SystemClock_Config+0xd4>)
 800194a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800194c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001950:	607b      	str	r3, [r7, #4]
 8001952:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001954:	2300      	movs	r3, #0
 8001956:	603b      	str	r3, [r7, #0]
 8001958:	4b24      	ldr	r3, [pc, #144]	@ (80019ec <SystemClock_Config+0xd8>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001960:	4a22      	ldr	r2, [pc, #136]	@ (80019ec <SystemClock_Config+0xd8>)
 8001962:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001966:	6013      	str	r3, [r2, #0]
 8001968:	4b20      	ldr	r3, [pc, #128]	@ (80019ec <SystemClock_Config+0xd8>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001970:	603b      	str	r3, [r7, #0]
 8001972:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001974:	2302      	movs	r3, #2
 8001976:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001978:	2301      	movs	r3, #1
 800197a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800197c:	2310      	movs	r3, #16
 800197e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001980:	2302      	movs	r3, #2
 8001982:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001984:	2300      	movs	r3, #0
 8001986:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001988:	2310      	movs	r3, #16
 800198a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 800198c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001990:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001992:	2304      	movs	r3, #4
 8001994:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001996:	2302      	movs	r3, #2
 8001998:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800199a:	2302      	movs	r3, #2
 800199c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800199e:	f107 031c 	add.w	r3, r7, #28
 80019a2:	4618      	mov	r0, r3
 80019a4:	f002 fe24 	bl	80045f0 <HAL_RCC_OscConfig>
 80019a8:	4603      	mov	r3, r0
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d001      	beq.n	80019b2 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80019ae:	f000 f8e3 	bl	8001b78 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019b2:	230f      	movs	r3, #15
 80019b4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80019b6:	2302      	movs	r3, #2
 80019b8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019ba:	2300      	movs	r3, #0
 80019bc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80019be:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80019c2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80019c4:	2300      	movs	r3, #0
 80019c6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80019c8:	f107 0308 	add.w	r3, r7, #8
 80019cc:	2102      	movs	r1, #2
 80019ce:	4618      	mov	r0, r3
 80019d0:	f002 fac4 	bl	8003f5c <HAL_RCC_ClockConfig>
 80019d4:	4603      	mov	r3, r0
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d001      	beq.n	80019de <SystemClock_Config+0xca>
  {
    Error_Handler();
 80019da:	f000 f8cd 	bl	8001b78 <Error_Handler>
  }
}
 80019de:	bf00      	nop
 80019e0:	3750      	adds	r7, #80	@ 0x50
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	40023800 	.word	0x40023800
 80019ec:	40007000 	.word	0x40007000

080019f0 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80019f0:	b590      	push	{r4, r7, lr}
 80019f2:	b083      	sub	sp, #12
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	4603      	mov	r3, r0
 80019f8:	80fb      	strh	r3, [r7, #6]

	if(GPIO_Pin == GPIO_PIN_9)
 80019fa:	88fb      	ldrh	r3, [r7, #6]
 80019fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001a00:	d106      	bne.n	8001a10 <HAL_GPIO_EXTI_Callback+0x20>
	{
		nbPulseD++ ; // compte les pulses de lencodeur droit
 8001a02:	4b22      	ldr	r3, [pc, #136]	@ (8001a8c <HAL_GPIO_EXTI_Callback+0x9c>)
 8001a04:	881b      	ldrh	r3, [r3, #0]
 8001a06:	b29b      	uxth	r3, r3
 8001a08:	3301      	adds	r3, #1
 8001a0a:	b29a      	uxth	r2, r3
 8001a0c:	4b1f      	ldr	r3, [pc, #124]	@ (8001a8c <HAL_GPIO_EXTI_Callback+0x9c>)
 8001a0e:	801a      	strh	r2, [r3, #0]
	}

	if(GPIO_Pin == GPIO_PIN_8)
 8001a10:	88fb      	ldrh	r3, [r7, #6]
 8001a12:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001a16:	d106      	bne.n	8001a26 <HAL_GPIO_EXTI_Callback+0x36>
	{
		nbPulseG++ ; // compte les pulses de lencodeur droit
 8001a18:	4b1d      	ldr	r3, [pc, #116]	@ (8001a90 <HAL_GPIO_EXTI_Callback+0xa0>)
 8001a1a:	881b      	ldrh	r3, [r3, #0]
 8001a1c:	b29b      	uxth	r3, r3
 8001a1e:	3301      	adds	r3, #1
 8001a20:	b29a      	uxth	r2, r3
 8001a22:	4b1b      	ldr	r3, [pc, #108]	@ (8001a90 <HAL_GPIO_EXTI_Callback+0xa0>)
 8001a24:	801a      	strh	r2, [r3, #0]
	}

	if(GPIO_Pin == Blue_Button_Pin) {
 8001a26:	88fb      	ldrh	r3, [r7, #6]
 8001a28:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001a2c:	d129      	bne.n	8001a82 <HAL_GPIO_EXTI_Callback+0x92>
		dip_state = Get_Mode(HAL_GPIO_ReadPin(Dipswitch_MSB_GPIO_Port, Dipswitch_MSB_Pin), HAL_GPIO_ReadPin(Dipswitch_LSB_GPIO_Port, Dipswitch_LSB_Pin));
 8001a2e:	2104      	movs	r1, #4
 8001a30:	4818      	ldr	r0, [pc, #96]	@ (8001a94 <HAL_GPIO_EXTI_Callback+0xa4>)
 8001a32:	f001 fa4f 	bl	8002ed4 <HAL_GPIO_ReadPin>
 8001a36:	4603      	mov	r3, r0
 8001a38:	461c      	mov	r4, r3
 8001a3a:	2108      	movs	r1, #8
 8001a3c:	4815      	ldr	r0, [pc, #84]	@ (8001a94 <HAL_GPIO_EXTI_Callback+0xa4>)
 8001a3e:	f001 fa49 	bl	8002ed4 <HAL_GPIO_ReadPin>
 8001a42:	4603      	mov	r3, r0
 8001a44:	4619      	mov	r1, r3
 8001a46:	4620      	mov	r0, r4
 8001a48:	f7ff f9bc 	bl	8000dc4 <Get_Mode>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	b2da      	uxtb	r2, r3
 8001a50:	4b11      	ldr	r3, [pc, #68]	@ (8001a98 <HAL_GPIO_EXTI_Callback+0xa8>)
 8001a52:	701a      	strb	r2, [r3, #0]

		// Resume if paused
		if(pause)
 8001a54:	4b11      	ldr	r3, [pc, #68]	@ (8001a9c <HAL_GPIO_EXTI_Callback+0xac>)
 8001a56:	781b      	ldrb	r3, [r3, #0]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d003      	beq.n	8001a64 <HAL_GPIO_EXTI_Callback+0x74>
			Resume(&htim3);
 8001a5c:	4810      	ldr	r0, [pc, #64]	@ (8001aa0 <HAL_GPIO_EXTI_Callback+0xb0>)
 8001a5e:	f7ff fc97 	bl	8001390 <Resume>
 8001a62:	e006      	b.n	8001a72 <HAL_GPIO_EXTI_Callback+0x82>

		// Pause if button pressed while auto mode on
		else if(curr_mode != MANUAL_MODE)
 8001a64:	4b0f      	ldr	r3, [pc, #60]	@ (8001aa4 <HAL_GPIO_EXTI_Callback+0xb4>)
 8001a66:	781b      	ldrb	r3, [r3, #0]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d002      	beq.n	8001a72 <HAL_GPIO_EXTI_Callback+0x82>
			Pause(&htim3);
 8001a6c:	480c      	ldr	r0, [pc, #48]	@ (8001aa0 <HAL_GPIO_EXTI_Callback+0xb0>)
 8001a6e:	f7ff fc4f 	bl	8001310 <Pause>

		// Change current mode only on manual mode
		if(curr_mode == MANUAL_MODE)
 8001a72:	4b0c      	ldr	r3, [pc, #48]	@ (8001aa4 <HAL_GPIO_EXTI_Callback+0xb4>)
 8001a74:	781b      	ldrb	r3, [r3, #0]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d103      	bne.n	8001a82 <HAL_GPIO_EXTI_Callback+0x92>
			curr_mode = dip_state;
 8001a7a:	4b07      	ldr	r3, [pc, #28]	@ (8001a98 <HAL_GPIO_EXTI_Callback+0xa8>)
 8001a7c:	781a      	ldrb	r2, [r3, #0]
 8001a7e:	4b09      	ldr	r3, [pc, #36]	@ (8001aa4 <HAL_GPIO_EXTI_Callback+0xb4>)
 8001a80:	701a      	strb	r2, [r3, #0]
	}
}
 8001a82:	bf00      	nop
 8001a84:	370c      	adds	r7, #12
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd90      	pop	{r4, r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	200000c8 	.word	0x200000c8
 8001a90:	200000ca 	.word	0x200000ca
 8001a94:	40020800 	.word	0x40020800
 8001a98:	20000041 	.word	0x20000041
 8001a9c:	20000040 	.word	0x20000040
 8001aa0:	20000168 	.word	0x20000168
 8001aa4:	20000042 	.word	0x20000042

08001aa8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b083      	sub	sp, #12
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
    if(htim->Instance == TIM6)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4a27      	ldr	r2, [pc, #156]	@ (8001b54 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d13b      	bne.n	8001b32 <HAL_TIM_PeriodElapsedCallback+0x8a>
    {
    	vitesseD = CIRCONFERENCE * nbPulseD / PULSE_PAR_TOUR * 2000 / (arrTimerVitesse + 1) ; // calcule la vitesse de la chenille droite en m/s
 8001aba:	4b27      	ldr	r3, [pc, #156]	@ (8001b58 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8001abc:	881b      	ldrh	r3, [r3, #0]
 8001abe:	b29b      	uxth	r3, r3
 8001ac0:	461a      	mov	r2, r3
 8001ac2:	239d      	movs	r3, #157	@ 0x9d
 8001ac4:	fb02 f303 	mul.w	r3, r2, r3
 8001ac8:	4a24      	ldr	r2, [pc, #144]	@ (8001b5c <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8001aca:	fb82 1203 	smull	r1, r2, r2, r3
 8001ace:	441a      	add	r2, r3
 8001ad0:	1192      	asrs	r2, r2, #6
 8001ad2:	17db      	asrs	r3, r3, #31
 8001ad4:	1ad3      	subs	r3, r2, r3
 8001ad6:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8001ada:	fb03 f202 	mul.w	r2, r3, r2
 8001ade:	4b20      	ldr	r3, [pc, #128]	@ (8001b60 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8001ae0:	881b      	ldrh	r3, [r3, #0]
 8001ae2:	b29b      	uxth	r3, r3
 8001ae4:	3301      	adds	r3, #1
 8001ae6:	fb92 f3f3 	sdiv	r3, r2, r3
 8001aea:	b29a      	uxth	r2, r3
 8001aec:	4b1d      	ldr	r3, [pc, #116]	@ (8001b64 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8001aee:	801a      	strh	r2, [r3, #0]
    	vitesseG = CIRCONFERENCE * nbPulseG / PULSE_PAR_TOUR * 2000 / (arrTimerVitesse + 1) ;
 8001af0:	4b1d      	ldr	r3, [pc, #116]	@ (8001b68 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8001af2:	881b      	ldrh	r3, [r3, #0]
 8001af4:	b29b      	uxth	r3, r3
 8001af6:	461a      	mov	r2, r3
 8001af8:	239d      	movs	r3, #157	@ 0x9d
 8001afa:	fb02 f303 	mul.w	r3, r2, r3
 8001afe:	4a17      	ldr	r2, [pc, #92]	@ (8001b5c <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8001b00:	fb82 1203 	smull	r1, r2, r2, r3
 8001b04:	441a      	add	r2, r3
 8001b06:	1192      	asrs	r2, r2, #6
 8001b08:	17db      	asrs	r3, r3, #31
 8001b0a:	1ad3      	subs	r3, r2, r3
 8001b0c:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8001b10:	fb03 f202 	mul.w	r2, r3, r2
 8001b14:	4b12      	ldr	r3, [pc, #72]	@ (8001b60 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8001b16:	881b      	ldrh	r3, [r3, #0]
 8001b18:	b29b      	uxth	r3, r3
 8001b1a:	3301      	adds	r3, #1
 8001b1c:	fb92 f3f3 	sdiv	r3, r2, r3
 8001b20:	b29a      	uxth	r2, r3
 8001b22:	4b12      	ldr	r3, [pc, #72]	@ (8001b6c <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8001b24:	801a      	strh	r2, [r3, #0]

    	nbPulseD = 0 ;
 8001b26:	4b0c      	ldr	r3, [pc, #48]	@ (8001b58 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	801a      	strh	r2, [r3, #0]
    	nbPulseG = 0;
 8001b2c:	4b0e      	ldr	r3, [pc, #56]	@ (8001b68 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8001b2e:	2200      	movs	r2, #0
 8001b30:	801a      	strh	r2, [r3, #0]
    	//HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
    }

    if(htim->Instance == TIM7) {	// Triggered every 10 µs
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4a0e      	ldr	r2, [pc, #56]	@ (8001b70 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8001b38:	4293      	cmp	r3, r2
 8001b3a:	d104      	bne.n	8001b46 <HAL_TIM_PeriodElapsedCallback+0x9e>
    	timer_count += 10;
 8001b3c:	4b0d      	ldr	r3, [pc, #52]	@ (8001b74 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	330a      	adds	r3, #10
 8001b42:	4a0c      	ldr	r2, [pc, #48]	@ (8001b74 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8001b44:	6013      	str	r3, [r2, #0]
    }
}
 8001b46:	bf00      	nop
 8001b48:	370c      	adds	r7, #12
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b50:	4770      	bx	lr
 8001b52:	bf00      	nop
 8001b54:	40001000 	.word	0x40001000
 8001b58:	200000c8 	.word	0x200000c8
 8001b5c:	dd67c8a7 	.word	0xdd67c8a7
 8001b60:	20000002 	.word	0x20000002
 8001b64:	200000cc 	.word	0x200000cc
 8001b68:	200000ca 	.word	0x200000ca
 8001b6c:	200000ce 	.word	0x200000ce
 8001b70:	40001400 	.word	0x40001400
 8001b74:	20000058 	.word	0x20000058

08001b78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b7c:	b672      	cpsid	i
}
 8001b7e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b80:	bf00      	nop
 8001b82:	e7fd      	b.n	8001b80 <Error_Handler+0x8>

08001b84 <Format_Data>:
int maxInverse = 500;
int sendPulseMotor;

int toggle;

void Format_Data() {
 8001b84:	b480      	push	{r7}
 8001b86:	af00      	add	r7, sp, #0
	/*FROM LAB7*/
	formatted_data[0] = data[0];
 8001b88:	4b20      	ldr	r3, [pc, #128]	@ (8001c0c <Format_Data+0x88>)
 8001b8a:	781b      	ldrb	r3, [r3, #0]
 8001b8c:	461a      	mov	r2, r3
 8001b8e:	4b20      	ldr	r3, [pc, #128]	@ (8001c10 <Format_Data+0x8c>)
 8001b90:	601a      	str	r2, [r3, #0]
	formatted_data[1] = data[1];
 8001b92:	4b1e      	ldr	r3, [pc, #120]	@ (8001c0c <Format_Data+0x88>)
 8001b94:	785b      	ldrb	r3, [r3, #1]
 8001b96:	461a      	mov	r2, r3
 8001b98:	4b1d      	ldr	r3, [pc, #116]	@ (8001c10 <Format_Data+0x8c>)
 8001b9a:	605a      	str	r2, [r3, #4]
	formatted_data[5] = (data[5] & 0x02);
 8001b9c:	4b1b      	ldr	r3, [pc, #108]	@ (8001c0c <Format_Data+0x88>)
 8001b9e:	795b      	ldrb	r3, [r3, #5]
 8001ba0:	f003 0302 	and.w	r3, r3, #2
 8001ba4:	4a1a      	ldr	r2, [pc, #104]	@ (8001c10 <Format_Data+0x8c>)
 8001ba6:	6153      	str	r3, [r2, #20]
	if(formatted_data[5] == 2)
 8001ba8:	4b19      	ldr	r3, [pc, #100]	@ (8001c10 <Format_Data+0x8c>)
 8001baa:	695b      	ldr	r3, [r3, #20]
 8001bac:	2b02      	cmp	r3, #2
 8001bae:	d102      	bne.n	8001bb6 <Format_Data+0x32>
		formatted_data[5] = 1;
 8001bb0:	4b17      	ldr	r3, [pc, #92]	@ (8001c10 <Format_Data+0x8c>)
 8001bb2:	2201      	movs	r2, #1
 8001bb4:	615a      	str	r2, [r3, #20]
	formatted_data[6] = (data[5] & 0x01);
 8001bb6:	4b15      	ldr	r3, [pc, #84]	@ (8001c0c <Format_Data+0x88>)
 8001bb8:	795b      	ldrb	r3, [r3, #5]
 8001bba:	f003 0301 	and.w	r3, r3, #1
 8001bbe:	4a14      	ldr	r2, [pc, #80]	@ (8001c10 <Format_Data+0x8c>)
 8001bc0:	6193      	str	r3, [r2, #24]

	/*MY DATA*/
	Xdata = data[0];
 8001bc2:	4b12      	ldr	r3, [pc, #72]	@ (8001c0c <Format_Data+0x88>)
 8001bc4:	781b      	ldrb	r3, [r3, #0]
 8001bc6:	461a      	mov	r2, r3
 8001bc8:	4b12      	ldr	r3, [pc, #72]	@ (8001c14 <Format_Data+0x90>)
 8001bca:	601a      	str	r2, [r3, #0]
	Ydata = data[1];
 8001bcc:	4b0f      	ldr	r3, [pc, #60]	@ (8001c0c <Format_Data+0x88>)
 8001bce:	785b      	ldrb	r3, [r3, #1]
 8001bd0:	461a      	mov	r2, r3
 8001bd2:	4b11      	ldr	r3, [pc, #68]	@ (8001c18 <Format_Data+0x94>)
 8001bd4:	601a      	str	r2, [r3, #0]
	Xpulse = data[0];
 8001bd6:	4b0d      	ldr	r3, [pc, #52]	@ (8001c0c <Format_Data+0x88>)
 8001bd8:	781b      	ldrb	r3, [r3, #0]
 8001bda:	461a      	mov	r2, r3
 8001bdc:	4b0f      	ldr	r3, [pc, #60]	@ (8001c1c <Format_Data+0x98>)
 8001bde:	601a      	str	r2, [r3, #0]
	Ypulse = data[1];
 8001be0:	4b0a      	ldr	r3, [pc, #40]	@ (8001c0c <Format_Data+0x88>)
 8001be2:	785b      	ldrb	r3, [r3, #1]
 8001be4:	461a      	mov	r2, r3
 8001be6:	4b0e      	ldr	r3, [pc, #56]	@ (8001c20 <Format_Data+0x9c>)
 8001be8:	601a      	str	r2, [r3, #0]
	Cbutton = (data[5] & 0x02);
 8001bea:	4b08      	ldr	r3, [pc, #32]	@ (8001c0c <Format_Data+0x88>)
 8001bec:	795b      	ldrb	r3, [r3, #5]
 8001bee:	f003 0302 	and.w	r3, r3, #2
 8001bf2:	4a0c      	ldr	r2, [pc, #48]	@ (8001c24 <Format_Data+0xa0>)
 8001bf4:	6013      	str	r3, [r2, #0]
	Zbutton = (data[5] & 0x01);
 8001bf6:	4b05      	ldr	r3, [pc, #20]	@ (8001c0c <Format_Data+0x88>)
 8001bf8:	795b      	ldrb	r3, [r3, #5]
 8001bfa:	f003 0301 	and.w	r3, r3, #1
 8001bfe:	4a0a      	ldr	r2, [pc, #40]	@ (8001c28 <Format_Data+0xa4>)
 8001c00:	6013      	str	r3, [r2, #0]
	/* neutral x and y data: 128
	max x and y data: 1-254 */

}
 8001c02:	bf00      	nop
 8001c04:	46bd      	mov	sp, r7
 8001c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0a:	4770      	bx	lr
 8001c0c:	200000d0 	.word	0x200000d0
 8001c10:	200000d8 	.word	0x200000d8
 8001c14:	200000f4 	.word	0x200000f4
 8001c18:	200000f8 	.word	0x200000f8
 8001c1c:	200000fc 	.word	0x200000fc
 8001c20:	20000100 	.word	0x20000100
 8001c24:	20000104 	.word	0x20000104
 8001c28:	20000108 	.word	0x20000108

08001c2c <Initialisation_manette>:


void Initialisation_manette(){
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b082      	sub	sp, #8
 8001c30:	af02      	add	r7, sp, #8

	HAL_I2C_Master_Transmit(&hi2c1, NUNCHUK_ADDRESS, initcomm1, 2, HAL_MAX_DELAY);
 8001c32:	f04f 33ff 	mov.w	r3, #4294967295
 8001c36:	9300      	str	r3, [sp, #0]
 8001c38:	2302      	movs	r3, #2
 8001c3a:	4a0a      	ldr	r2, [pc, #40]	@ (8001c64 <Initialisation_manette+0x38>)
 8001c3c:	21a4      	movs	r1, #164	@ 0xa4
 8001c3e:	480a      	ldr	r0, [pc, #40]	@ (8001c68 <Initialisation_manette+0x3c>)
 8001c40:	f001 fad6 	bl	80031f0 <HAL_I2C_Master_Transmit>
	HAL_Delay(10);
 8001c44:	200a      	movs	r0, #10
 8001c46:	f000 fe7b 	bl	8002940 <HAL_Delay>
	HAL_I2C_Master_Transmit(&hi2c1, NUNCHUK_ADDRESS, initcomm2, 2, HAL_MAX_DELAY);
 8001c4a:	f04f 33ff 	mov.w	r3, #4294967295
 8001c4e:	9300      	str	r3, [sp, #0]
 8001c50:	2302      	movs	r3, #2
 8001c52:	4a06      	ldr	r2, [pc, #24]	@ (8001c6c <Initialisation_manette+0x40>)
 8001c54:	21a4      	movs	r1, #164	@ 0xa4
 8001c56:	4804      	ldr	r0, [pc, #16]	@ (8001c68 <Initialisation_manette+0x3c>)
 8001c58:	f001 faca 	bl	80031f0 <HAL_I2C_Master_Transmit>

}
 8001c5c:	bf00      	nop
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	bf00      	nop
 8001c64:	20000004 	.word	0x20000004
 8001c68:	20000074 	.word	0x20000074
 8001c6c:	20000008 	.word	0x20000008

08001c70 <Controller>:


void Controller(){
 8001c70:	b5b0      	push	{r4, r5, r7, lr}
 8001c72:	b082      	sub	sp, #8
 8001c74:	af02      	add	r7, sp, #8

	HAL_I2C_Master_Transmit(&hi2c1, NUNCHUK_ADDRESS, 0x00, 1, HAL_MAX_DELAY);
 8001c76:	f04f 33ff 	mov.w	r3, #4294967295
 8001c7a:	9300      	str	r3, [sp, #0]
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	2200      	movs	r2, #0
 8001c80:	21a4      	movs	r1, #164	@ 0xa4
 8001c82:	48b1      	ldr	r0, [pc, #708]	@ (8001f48 <Controller+0x2d8>)
 8001c84:	f001 fab4 	bl	80031f0 <HAL_I2C_Master_Transmit>
	HAL_Delay(10);
 8001c88:	200a      	movs	r0, #10
 8001c8a:	f000 fe59 	bl	8002940 <HAL_Delay>
	HAL_I2C_Master_Receive(&hi2c1, NUNCHUK_ADDRESS, data, 6, HAL_MAX_DELAY);
 8001c8e:	f04f 33ff 	mov.w	r3, #4294967295
 8001c92:	9300      	str	r3, [sp, #0]
 8001c94:	2306      	movs	r3, #6
 8001c96:	4aad      	ldr	r2, [pc, #692]	@ (8001f4c <Controller+0x2dc>)
 8001c98:	21a4      	movs	r1, #164	@ 0xa4
 8001c9a:	48ab      	ldr	r0, [pc, #684]	@ (8001f48 <Controller+0x2d8>)
 8001c9c:	f001 fba6 	bl	80033ec <HAL_I2C_Master_Receive>
	Format_Data();
 8001ca0:	f7ff ff70 	bl	8001b84 <Format_Data>

	if(Xdata == 0){
 8001ca4:	4baa      	ldr	r3, [pc, #680]	@ (8001f50 <Controller+0x2e0>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d102      	bne.n	8001cb2 <Controller+0x42>
		Xdata = 1;
 8001cac:	4ba8      	ldr	r3, [pc, #672]	@ (8001f50 <Controller+0x2e0>)
 8001cae:	2201      	movs	r2, #1
 8001cb0:	601a      	str	r2, [r3, #0]
	}
	if(Ydata == 0){
 8001cb2:	4ba8      	ldr	r3, [pc, #672]	@ (8001f54 <Controller+0x2e4>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d102      	bne.n	8001cc0 <Controller+0x50>
		Ydata = 1;
 8001cba:	4ba6      	ldr	r3, [pc, #664]	@ (8001f54 <Controller+0x2e4>)
 8001cbc:	2201      	movs	r2, #1
 8001cbe:	601a      	str	r2, [r3, #0]
	}



	if(Cbutton == 0){
 8001cc0:	4ba5      	ldr	r3, [pc, #660]	@ (8001f58 <Controller+0x2e8>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d101      	bne.n	8001ccc <Controller+0x5c>
		ToggleModeMan();
 8001cc8:	f000 f976 	bl	8001fb8 <ToggleModeMan>
	}
	if(Zbutton == 0){
 8001ccc:	4ba3      	ldr	r3, [pc, #652]	@ (8001f5c <Controller+0x2ec>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d101      	bne.n	8001cd8 <Controller+0x68>
		ToggleModeVit();
 8001cd4:	f000 f95a 	bl	8001f8c <ToggleModeVit>
	}


	if(Cbutton == 2){
 8001cd8:	4b9f      	ldr	r3, [pc, #636]	@ (8001f58 <Controller+0x2e8>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	2b02      	cmp	r3, #2
 8001cde:	f040 814d 	bne.w	8001f7c <Controller+0x30c>


		if(Xdata == 128 && Ydata == 128){
 8001ce2:	4b9b      	ldr	r3, [pc, #620]	@ (8001f50 <Controller+0x2e0>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	2b80      	cmp	r3, #128	@ 0x80
 8001ce8:	d107      	bne.n	8001cfa <Controller+0x8a>
 8001cea:	4b9a      	ldr	r3, [pc, #616]	@ (8001f54 <Controller+0x2e4>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	2b80      	cmp	r3, #128	@ 0x80
 8001cf0:	d103      	bne.n	8001cfa <Controller+0x8a>
				Stop(&htim3);
 8001cf2:	489b      	ldr	r0, [pc, #620]	@ (8001f60 <Controller+0x2f0>)
 8001cf4:	f7ff fc68 	bl	80015c8 <Stop>
	}
	else{
		Stop(&htim3);
	}

}
 8001cf8:	e143      	b.n	8001f82 <Controller+0x312>
		if(modeVitesse==1){
 8001cfa:	4b9a      	ldr	r3, [pc, #616]	@ (8001f64 <Controller+0x2f4>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	2b01      	cmp	r3, #1
 8001d00:	d156      	bne.n	8001db0 <Controller+0x140>
			Xpulse = Xdata * 0.33 * pulseCoeff;
 8001d02:	4b93      	ldr	r3, [pc, #588]	@ (8001f50 <Controller+0x2e0>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4618      	mov	r0, r3
 8001d08:	f7fe fbd0 	bl	80004ac <__aeabi_i2d>
 8001d0c:	a38a      	add	r3, pc, #552	@ (adr r3, 8001f38 <Controller+0x2c8>)
 8001d0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d12:	f7fe fc35 	bl	8000580 <__aeabi_dmul>
 8001d16:	4602      	mov	r2, r0
 8001d18:	460b      	mov	r3, r1
 8001d1a:	4614      	mov	r4, r2
 8001d1c:	461d      	mov	r5, r3
 8001d1e:	4b92      	ldr	r3, [pc, #584]	@ (8001f68 <Controller+0x2f8>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4618      	mov	r0, r3
 8001d24:	f7fe fbd4 	bl	80004d0 <__aeabi_f2d>
 8001d28:	4602      	mov	r2, r0
 8001d2a:	460b      	mov	r3, r1
 8001d2c:	4620      	mov	r0, r4
 8001d2e:	4629      	mov	r1, r5
 8001d30:	f7fe fc26 	bl	8000580 <__aeabi_dmul>
 8001d34:	4602      	mov	r2, r0
 8001d36:	460b      	mov	r3, r1
 8001d38:	4610      	mov	r0, r2
 8001d3a:	4619      	mov	r1, r3
 8001d3c:	f7fe fe32 	bl	80009a4 <__aeabi_d2iz>
 8001d40:	4603      	mov	r3, r0
 8001d42:	4a8a      	ldr	r2, [pc, #552]	@ (8001f6c <Controller+0x2fc>)
 8001d44:	6013      	str	r3, [r2, #0]
			Ypulse = Ydata * 0.33 * pulseCoeff;
 8001d46:	4b83      	ldr	r3, [pc, #524]	@ (8001f54 <Controller+0x2e4>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f7fe fbae 	bl	80004ac <__aeabi_i2d>
 8001d50:	a379      	add	r3, pc, #484	@ (adr r3, 8001f38 <Controller+0x2c8>)
 8001d52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d56:	f7fe fc13 	bl	8000580 <__aeabi_dmul>
 8001d5a:	4602      	mov	r2, r0
 8001d5c:	460b      	mov	r3, r1
 8001d5e:	4614      	mov	r4, r2
 8001d60:	461d      	mov	r5, r3
 8001d62:	4b81      	ldr	r3, [pc, #516]	@ (8001f68 <Controller+0x2f8>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4618      	mov	r0, r3
 8001d68:	f7fe fbb2 	bl	80004d0 <__aeabi_f2d>
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	460b      	mov	r3, r1
 8001d70:	4620      	mov	r0, r4
 8001d72:	4629      	mov	r1, r5
 8001d74:	f7fe fc04 	bl	8000580 <__aeabi_dmul>
 8001d78:	4602      	mov	r2, r0
 8001d7a:	460b      	mov	r3, r1
 8001d7c:	4610      	mov	r0, r2
 8001d7e:	4619      	mov	r1, r3
 8001d80:	f7fe fe10 	bl	80009a4 <__aeabi_d2iz>
 8001d84:	4603      	mov	r3, r0
 8001d86:	4a7a      	ldr	r2, [pc, #488]	@ (8001f70 <Controller+0x300>)
 8001d88:	6013      	str	r3, [r2, #0]
			maxInverse = maxInverse * 0.33;
 8001d8a:	4b7a      	ldr	r3, [pc, #488]	@ (8001f74 <Controller+0x304>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f7fe fb8c 	bl	80004ac <__aeabi_i2d>
 8001d94:	a368      	add	r3, pc, #416	@ (adr r3, 8001f38 <Controller+0x2c8>)
 8001d96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d9a:	f7fe fbf1 	bl	8000580 <__aeabi_dmul>
 8001d9e:	4602      	mov	r2, r0
 8001da0:	460b      	mov	r3, r1
 8001da2:	4610      	mov	r0, r2
 8001da4:	4619      	mov	r1, r3
 8001da6:	f7fe fdfd 	bl	80009a4 <__aeabi_d2iz>
 8001daa:	4603      	mov	r3, r0
 8001dac:	4a71      	ldr	r2, [pc, #452]	@ (8001f74 <Controller+0x304>)
 8001dae:	6013      	str	r3, [r2, #0]
		if(modeVitesse==2){
 8001db0:	4b6c      	ldr	r3, [pc, #432]	@ (8001f64 <Controller+0x2f4>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	2b02      	cmp	r3, #2
 8001db6:	d156      	bne.n	8001e66 <Controller+0x1f6>
			Xpulse = Xdata * 0.66 * pulseCoeff;
 8001db8:	4b65      	ldr	r3, [pc, #404]	@ (8001f50 <Controller+0x2e0>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f7fe fb75 	bl	80004ac <__aeabi_i2d>
 8001dc2:	a35f      	add	r3, pc, #380	@ (adr r3, 8001f40 <Controller+0x2d0>)
 8001dc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dc8:	f7fe fbda 	bl	8000580 <__aeabi_dmul>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	460b      	mov	r3, r1
 8001dd0:	4614      	mov	r4, r2
 8001dd2:	461d      	mov	r5, r3
 8001dd4:	4b64      	ldr	r3, [pc, #400]	@ (8001f68 <Controller+0x2f8>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f7fe fb79 	bl	80004d0 <__aeabi_f2d>
 8001dde:	4602      	mov	r2, r0
 8001de0:	460b      	mov	r3, r1
 8001de2:	4620      	mov	r0, r4
 8001de4:	4629      	mov	r1, r5
 8001de6:	f7fe fbcb 	bl	8000580 <__aeabi_dmul>
 8001dea:	4602      	mov	r2, r0
 8001dec:	460b      	mov	r3, r1
 8001dee:	4610      	mov	r0, r2
 8001df0:	4619      	mov	r1, r3
 8001df2:	f7fe fdd7 	bl	80009a4 <__aeabi_d2iz>
 8001df6:	4603      	mov	r3, r0
 8001df8:	4a5c      	ldr	r2, [pc, #368]	@ (8001f6c <Controller+0x2fc>)
 8001dfa:	6013      	str	r3, [r2, #0]
			Ypulse = Ydata * 0.66 * pulseCoeff;
 8001dfc:	4b55      	ldr	r3, [pc, #340]	@ (8001f54 <Controller+0x2e4>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4618      	mov	r0, r3
 8001e02:	f7fe fb53 	bl	80004ac <__aeabi_i2d>
 8001e06:	a34e      	add	r3, pc, #312	@ (adr r3, 8001f40 <Controller+0x2d0>)
 8001e08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e0c:	f7fe fbb8 	bl	8000580 <__aeabi_dmul>
 8001e10:	4602      	mov	r2, r0
 8001e12:	460b      	mov	r3, r1
 8001e14:	4614      	mov	r4, r2
 8001e16:	461d      	mov	r5, r3
 8001e18:	4b53      	ldr	r3, [pc, #332]	@ (8001f68 <Controller+0x2f8>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f7fe fb57 	bl	80004d0 <__aeabi_f2d>
 8001e22:	4602      	mov	r2, r0
 8001e24:	460b      	mov	r3, r1
 8001e26:	4620      	mov	r0, r4
 8001e28:	4629      	mov	r1, r5
 8001e2a:	f7fe fba9 	bl	8000580 <__aeabi_dmul>
 8001e2e:	4602      	mov	r2, r0
 8001e30:	460b      	mov	r3, r1
 8001e32:	4610      	mov	r0, r2
 8001e34:	4619      	mov	r1, r3
 8001e36:	f7fe fdb5 	bl	80009a4 <__aeabi_d2iz>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	4a4c      	ldr	r2, [pc, #304]	@ (8001f70 <Controller+0x300>)
 8001e3e:	6013      	str	r3, [r2, #0]
			maxInverse = maxInverse * 0.66;
 8001e40:	4b4c      	ldr	r3, [pc, #304]	@ (8001f74 <Controller+0x304>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4618      	mov	r0, r3
 8001e46:	f7fe fb31 	bl	80004ac <__aeabi_i2d>
 8001e4a:	a33d      	add	r3, pc, #244	@ (adr r3, 8001f40 <Controller+0x2d0>)
 8001e4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e50:	f7fe fb96 	bl	8000580 <__aeabi_dmul>
 8001e54:	4602      	mov	r2, r0
 8001e56:	460b      	mov	r3, r1
 8001e58:	4610      	mov	r0, r2
 8001e5a:	4619      	mov	r1, r3
 8001e5c:	f7fe fda2 	bl	80009a4 <__aeabi_d2iz>
 8001e60:	4603      	mov	r3, r0
 8001e62:	4a44      	ldr	r2, [pc, #272]	@ (8001f74 <Controller+0x304>)
 8001e64:	6013      	str	r3, [r2, #0]
		if(modeVitesse==3){
 8001e66:	4b3f      	ldr	r3, [pc, #252]	@ (8001f64 <Controller+0x2f4>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	2b03      	cmp	r3, #3
 8001e6c:	d121      	bne.n	8001eb2 <Controller+0x242>
			Xpulse = Xdata * pulseCoeff;
 8001e6e:	4b38      	ldr	r3, [pc, #224]	@ (8001f50 <Controller+0x2e0>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	ee07 3a90 	vmov	s15, r3
 8001e76:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e7a:	4b3b      	ldr	r3, [pc, #236]	@ (8001f68 <Controller+0x2f8>)
 8001e7c:	edd3 7a00 	vldr	s15, [r3]
 8001e80:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e84:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e88:	ee17 2a90 	vmov	r2, s15
 8001e8c:	4b37      	ldr	r3, [pc, #220]	@ (8001f6c <Controller+0x2fc>)
 8001e8e:	601a      	str	r2, [r3, #0]
			Ypulse = Ydata * pulseCoeff;
 8001e90:	4b30      	ldr	r3, [pc, #192]	@ (8001f54 <Controller+0x2e4>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	ee07 3a90 	vmov	s15, r3
 8001e98:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e9c:	4b32      	ldr	r3, [pc, #200]	@ (8001f68 <Controller+0x2f8>)
 8001e9e:	edd3 7a00 	vldr	s15, [r3]
 8001ea2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ea6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001eaa:	ee17 2a90 	vmov	r2, s15
 8001eae:	4b30      	ldr	r3, [pc, #192]	@ (8001f70 <Controller+0x300>)
 8001eb0:	601a      	str	r2, [r3, #0]
		if(Xdata>128){
 8001eb2:	4b27      	ldr	r3, [pc, #156]	@ (8001f50 <Controller+0x2e0>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	2b80      	cmp	r3, #128	@ 0x80
 8001eb8:	dd0a      	ble.n	8001ed0 <Controller+0x260>
			sendPulseMotor = Xpulse;
 8001eba:	4b2c      	ldr	r3, [pc, #176]	@ (8001f6c <Controller+0x2fc>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4a2e      	ldr	r2, [pc, #184]	@ (8001f78 <Controller+0x308>)
 8001ec0:	6013      	str	r3, [r2, #0]
			Droite(sendPulseMotor,&htim3);
 8001ec2:	4b2d      	ldr	r3, [pc, #180]	@ (8001f78 <Controller+0x308>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4926      	ldr	r1, [pc, #152]	@ (8001f60 <Controller+0x2f0>)
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f7ff fad5 	bl	8001478 <Droite>
 8001ece:	e010      	b.n	8001ef2 <Controller+0x282>
		else if(Xdata<128) {
 8001ed0:	4b1f      	ldr	r3, [pc, #124]	@ (8001f50 <Controller+0x2e0>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	2b7f      	cmp	r3, #127	@ 0x7f
 8001ed6:	dc0c      	bgt.n	8001ef2 <Controller+0x282>
				sendPulseMotor = maxInverse - Xpulse;
 8001ed8:	4b26      	ldr	r3, [pc, #152]	@ (8001f74 <Controller+0x304>)
 8001eda:	681a      	ldr	r2, [r3, #0]
 8001edc:	4b23      	ldr	r3, [pc, #140]	@ (8001f6c <Controller+0x2fc>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	1ad3      	subs	r3, r2, r3
 8001ee2:	4a25      	ldr	r2, [pc, #148]	@ (8001f78 <Controller+0x308>)
 8001ee4:	6013      	str	r3, [r2, #0]
				Gauche(sendPulseMotor,&htim3);
 8001ee6:	4b24      	ldr	r3, [pc, #144]	@ (8001f78 <Controller+0x308>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	491d      	ldr	r1, [pc, #116]	@ (8001f60 <Controller+0x2f0>)
 8001eec:	4618      	mov	r0, r3
 8001eee:	f7ff fafb 	bl	80014e8 <Gauche>
		if(Ydata>128){
 8001ef2:	4b18      	ldr	r3, [pc, #96]	@ (8001f54 <Controller+0x2e4>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	2b80      	cmp	r3, #128	@ 0x80
 8001ef8:	dd0a      	ble.n	8001f10 <Controller+0x2a0>
			sendPulseMotor = Ypulse;
 8001efa:	4b1d      	ldr	r3, [pc, #116]	@ (8001f70 <Controller+0x300>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4a1e      	ldr	r2, [pc, #120]	@ (8001f78 <Controller+0x308>)
 8001f00:	6013      	str	r3, [r2, #0]
			Avancer(sendPulseMotor,&htim3);
 8001f02:	4b1d      	ldr	r3, [pc, #116]	@ (8001f78 <Controller+0x308>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4916      	ldr	r1, [pc, #88]	@ (8001f60 <Controller+0x2f0>)
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f7ff fa7d 	bl	8001408 <Avancer>
}
 8001f0e:	e038      	b.n	8001f82 <Controller+0x312>
		else if(Ydata<128){
 8001f10:	4b10      	ldr	r3, [pc, #64]	@ (8001f54 <Controller+0x2e4>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	2b7f      	cmp	r3, #127	@ 0x7f
 8001f16:	dc34      	bgt.n	8001f82 <Controller+0x312>
				sendPulseMotor = maxInverse - Ypulse;
 8001f18:	4b16      	ldr	r3, [pc, #88]	@ (8001f74 <Controller+0x304>)
 8001f1a:	681a      	ldr	r2, [r3, #0]
 8001f1c:	4b14      	ldr	r3, [pc, #80]	@ (8001f70 <Controller+0x300>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	1ad3      	subs	r3, r2, r3
 8001f22:	4a15      	ldr	r2, [pc, #84]	@ (8001f78 <Controller+0x308>)
 8001f24:	6013      	str	r3, [r2, #0]
				Reculer(sendPulseMotor,&htim3);
 8001f26:	4b14      	ldr	r3, [pc, #80]	@ (8001f78 <Controller+0x308>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	490d      	ldr	r1, [pc, #52]	@ (8001f60 <Controller+0x2f0>)
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f7ff fb13 	bl	8001558 <Reculer>
}
 8001f32:	e026      	b.n	8001f82 <Controller+0x312>
 8001f34:	f3af 8000 	nop.w
 8001f38:	51eb851f 	.word	0x51eb851f
 8001f3c:	3fd51eb8 	.word	0x3fd51eb8
 8001f40:	51eb851f 	.word	0x51eb851f
 8001f44:	3fe51eb8 	.word	0x3fe51eb8
 8001f48:	20000074 	.word	0x20000074
 8001f4c:	200000d0 	.word	0x200000d0
 8001f50:	200000f4 	.word	0x200000f4
 8001f54:	200000f8 	.word	0x200000f8
 8001f58:	20000104 	.word	0x20000104
 8001f5c:	20000108 	.word	0x20000108
 8001f60:	20000168 	.word	0x20000168
 8001f64:	2000000c 	.word	0x2000000c
 8001f68:	20000010 	.word	0x20000010
 8001f6c:	200000fc 	.word	0x200000fc
 8001f70:	20000100 	.word	0x20000100
 8001f74:	20000014 	.word	0x20000014
 8001f78:	2000010c 	.word	0x2000010c
		Stop(&htim3);
 8001f7c:	4802      	ldr	r0, [pc, #8]	@ (8001f88 <Controller+0x318>)
 8001f7e:	f7ff fb23 	bl	80015c8 <Stop>
}
 8001f82:	bf00      	nop
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bdb0      	pop	{r4, r5, r7, pc}
 8001f88:	20000168 	.word	0x20000168

08001f8c <ToggleModeVit>:


void ToggleModeVit() {
 8001f8c:	b480      	push	{r7}
 8001f8e:	af00      	add	r7, sp, #0
	if(modeVitesse == 3) {
 8001f90:	4b08      	ldr	r3, [pc, #32]	@ (8001fb4 <ToggleModeVit+0x28>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	2b03      	cmp	r3, #3
 8001f96:	d103      	bne.n	8001fa0 <ToggleModeVit+0x14>
		modeVitesse = 1;
 8001f98:	4b06      	ldr	r3, [pc, #24]	@ (8001fb4 <ToggleModeVit+0x28>)
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	601a      	str	r2, [r3, #0]
	}
	else {
		modeVitesse++;
	}
}
 8001f9e:	e004      	b.n	8001faa <ToggleModeVit+0x1e>
		modeVitesse++;
 8001fa0:	4b04      	ldr	r3, [pc, #16]	@ (8001fb4 <ToggleModeVit+0x28>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	3301      	adds	r3, #1
 8001fa6:	4a03      	ldr	r2, [pc, #12]	@ (8001fb4 <ToggleModeVit+0x28>)
 8001fa8:	6013      	str	r3, [r2, #0]
}
 8001faa:	bf00      	nop
 8001fac:	46bd      	mov	sp, r7
 8001fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb2:	4770      	bx	lr
 8001fb4:	2000000c 	.word	0x2000000c

08001fb8 <ToggleModeMan>:

void ToggleModeMan() {
 8001fb8:	b480      	push	{r7}
 8001fba:	af00      	add	r7, sp, #0

	if(Cbutton == 2){
 8001fbc:	4b09      	ldr	r3, [pc, #36]	@ (8001fe4 <ToggleModeMan+0x2c>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	2b02      	cmp	r3, #2
 8001fc2:	d102      	bne.n	8001fca <ToggleModeMan+0x12>
		Cbutton = 0;
 8001fc4:	4b07      	ldr	r3, [pc, #28]	@ (8001fe4 <ToggleModeMan+0x2c>)
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	601a      	str	r2, [r3, #0]
	}
	if(Cbutton == 0){
 8001fca:	4b06      	ldr	r3, [pc, #24]	@ (8001fe4 <ToggleModeMan+0x2c>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d102      	bne.n	8001fd8 <ToggleModeMan+0x20>
		Cbutton = 2;
 8001fd2:	4b04      	ldr	r3, [pc, #16]	@ (8001fe4 <ToggleModeMan+0x2c>)
 8001fd4:	2202      	movs	r2, #2
 8001fd6:	601a      	str	r2, [r3, #0]
	}

}
 8001fd8:	bf00      	nop
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe0:	4770      	bx	lr
 8001fe2:	bf00      	nop
 8001fe4:	20000104 	.word	0x20000104

08001fe8 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8001fec:	4b18      	ldr	r3, [pc, #96]	@ (8002050 <MX_SPI2_Init+0x68>)
 8001fee:	4a19      	ldr	r2, [pc, #100]	@ (8002054 <MX_SPI2_Init+0x6c>)
 8001ff0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001ff2:	4b17      	ldr	r3, [pc, #92]	@ (8002050 <MX_SPI2_Init+0x68>)
 8001ff4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001ff8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_1LINE;
 8001ffa:	4b15      	ldr	r3, [pc, #84]	@ (8002050 <MX_SPI2_Init+0x68>)
 8001ffc:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002000:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002002:	4b13      	ldr	r3, [pc, #76]	@ (8002050 <MX_SPI2_Init+0x68>)
 8002004:	2200      	movs	r2, #0
 8002006:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002008:	4b11      	ldr	r3, [pc, #68]	@ (8002050 <MX_SPI2_Init+0x68>)
 800200a:	2200      	movs	r2, #0
 800200c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800200e:	4b10      	ldr	r3, [pc, #64]	@ (8002050 <MX_SPI2_Init+0x68>)
 8002010:	2200      	movs	r2, #0
 8002012:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002014:	4b0e      	ldr	r3, [pc, #56]	@ (8002050 <MX_SPI2_Init+0x68>)
 8002016:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800201a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800201c:	4b0c      	ldr	r3, [pc, #48]	@ (8002050 <MX_SPI2_Init+0x68>)
 800201e:	2208      	movs	r2, #8
 8002020:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002022:	4b0b      	ldr	r3, [pc, #44]	@ (8002050 <MX_SPI2_Init+0x68>)
 8002024:	2200      	movs	r2, #0
 8002026:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002028:	4b09      	ldr	r3, [pc, #36]	@ (8002050 <MX_SPI2_Init+0x68>)
 800202a:	2200      	movs	r2, #0
 800202c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800202e:	4b08      	ldr	r3, [pc, #32]	@ (8002050 <MX_SPI2_Init+0x68>)
 8002030:	2200      	movs	r2, #0
 8002032:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8002034:	4b06      	ldr	r3, [pc, #24]	@ (8002050 <MX_SPI2_Init+0x68>)
 8002036:	220a      	movs	r2, #10
 8002038:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800203a:	4805      	ldr	r0, [pc, #20]	@ (8002050 <MX_SPI2_Init+0x68>)
 800203c:	f002 fd76 	bl	8004b2c <HAL_SPI_Init>
 8002040:	4603      	mov	r3, r0
 8002042:	2b00      	cmp	r3, #0
 8002044:	d001      	beq.n	800204a <MX_SPI2_Init+0x62>
  {
    Error_Handler();
 8002046:	f7ff fd97 	bl	8001b78 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800204a:	bf00      	nop
 800204c:	bd80      	pop	{r7, pc}
 800204e:	bf00      	nop
 8002050:	20000110 	.word	0x20000110
 8002054:	40003800 	.word	0x40003800

08002058 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b08a      	sub	sp, #40	@ 0x28
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002060:	f107 0314 	add.w	r3, r7, #20
 8002064:	2200      	movs	r2, #0
 8002066:	601a      	str	r2, [r3, #0]
 8002068:	605a      	str	r2, [r3, #4]
 800206a:	609a      	str	r2, [r3, #8]
 800206c:	60da      	str	r2, [r3, #12]
 800206e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a28      	ldr	r2, [pc, #160]	@ (8002118 <HAL_SPI_MspInit+0xc0>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d14a      	bne.n	8002110 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800207a:	2300      	movs	r3, #0
 800207c:	613b      	str	r3, [r7, #16]
 800207e:	4b27      	ldr	r3, [pc, #156]	@ (800211c <HAL_SPI_MspInit+0xc4>)
 8002080:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002082:	4a26      	ldr	r2, [pc, #152]	@ (800211c <HAL_SPI_MspInit+0xc4>)
 8002084:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002088:	6413      	str	r3, [r2, #64]	@ 0x40
 800208a:	4b24      	ldr	r3, [pc, #144]	@ (800211c <HAL_SPI_MspInit+0xc4>)
 800208c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800208e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002092:	613b      	str	r3, [r7, #16]
 8002094:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002096:	2300      	movs	r3, #0
 8002098:	60fb      	str	r3, [r7, #12]
 800209a:	4b20      	ldr	r3, [pc, #128]	@ (800211c <HAL_SPI_MspInit+0xc4>)
 800209c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800209e:	4a1f      	ldr	r2, [pc, #124]	@ (800211c <HAL_SPI_MspInit+0xc4>)
 80020a0:	f043 0304 	orr.w	r3, r3, #4
 80020a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80020a6:	4b1d      	ldr	r3, [pc, #116]	@ (800211c <HAL_SPI_MspInit+0xc4>)
 80020a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020aa:	f003 0304 	and.w	r3, r3, #4
 80020ae:	60fb      	str	r3, [r7, #12]
 80020b0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020b2:	2300      	movs	r3, #0
 80020b4:	60bb      	str	r3, [r7, #8]
 80020b6:	4b19      	ldr	r3, [pc, #100]	@ (800211c <HAL_SPI_MspInit+0xc4>)
 80020b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020ba:	4a18      	ldr	r2, [pc, #96]	@ (800211c <HAL_SPI_MspInit+0xc4>)
 80020bc:	f043 0302 	orr.w	r3, r3, #2
 80020c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80020c2:	4b16      	ldr	r3, [pc, #88]	@ (800211c <HAL_SPI_MspInit+0xc4>)
 80020c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020c6:	f003 0302 	and.w	r3, r3, #2
 80020ca:	60bb      	str	r3, [r7, #8]
 80020cc:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC1     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80020ce:	2302      	movs	r3, #2
 80020d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020d2:	2302      	movs	r3, #2
 80020d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d6:	2300      	movs	r3, #0
 80020d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020da:	2303      	movs	r3, #3
 80020dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 80020de:	2307      	movs	r3, #7
 80020e0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020e2:	f107 0314 	add.w	r3, r7, #20
 80020e6:	4619      	mov	r1, r3
 80020e8:	480d      	ldr	r0, [pc, #52]	@ (8002120 <HAL_SPI_MspInit+0xc8>)
 80020ea:	f000 fd5f 	bl	8002bac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80020ee:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80020f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020f4:	2302      	movs	r3, #2
 80020f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020f8:	2300      	movs	r3, #0
 80020fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020fc:	2303      	movs	r3, #3
 80020fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002100:	2305      	movs	r3, #5
 8002102:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002104:	f107 0314 	add.w	r3, r7, #20
 8002108:	4619      	mov	r1, r3
 800210a:	4806      	ldr	r0, [pc, #24]	@ (8002124 <HAL_SPI_MspInit+0xcc>)
 800210c:	f000 fd4e 	bl	8002bac <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8002110:	bf00      	nop
 8002112:	3728      	adds	r7, #40	@ 0x28
 8002114:	46bd      	mov	sp, r7
 8002116:	bd80      	pop	{r7, pc}
 8002118:	40003800 	.word	0x40003800
 800211c:	40023800 	.word	0x40023800
 8002120:	40020800 	.word	0x40020800
 8002124:	40020400 	.word	0x40020400

08002128 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b082      	sub	sp, #8
 800212c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800212e:	2300      	movs	r3, #0
 8002130:	607b      	str	r3, [r7, #4]
 8002132:	4b10      	ldr	r3, [pc, #64]	@ (8002174 <HAL_MspInit+0x4c>)
 8002134:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002136:	4a0f      	ldr	r2, [pc, #60]	@ (8002174 <HAL_MspInit+0x4c>)
 8002138:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800213c:	6453      	str	r3, [r2, #68]	@ 0x44
 800213e:	4b0d      	ldr	r3, [pc, #52]	@ (8002174 <HAL_MspInit+0x4c>)
 8002140:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002142:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002146:	607b      	str	r3, [r7, #4]
 8002148:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800214a:	2300      	movs	r3, #0
 800214c:	603b      	str	r3, [r7, #0]
 800214e:	4b09      	ldr	r3, [pc, #36]	@ (8002174 <HAL_MspInit+0x4c>)
 8002150:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002152:	4a08      	ldr	r2, [pc, #32]	@ (8002174 <HAL_MspInit+0x4c>)
 8002154:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002158:	6413      	str	r3, [r2, #64]	@ 0x40
 800215a:	4b06      	ldr	r3, [pc, #24]	@ (8002174 <HAL_MspInit+0x4c>)
 800215c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800215e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002162:	603b      	str	r3, [r7, #0]
 8002164:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002166:	2007      	movs	r0, #7
 8002168:	f000 fcde 	bl	8002b28 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800216c:	bf00      	nop
 800216e:	3708      	adds	r7, #8
 8002170:	46bd      	mov	sp, r7
 8002172:	bd80      	pop	{r7, pc}
 8002174:	40023800 	.word	0x40023800

08002178 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002178:	b480      	push	{r7}
 800217a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800217c:	bf00      	nop
 800217e:	e7fd      	b.n	800217c <NMI_Handler+0x4>

08002180 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002180:	b480      	push	{r7}
 8002182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002184:	bf00      	nop
 8002186:	e7fd      	b.n	8002184 <HardFault_Handler+0x4>

08002188 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002188:	b480      	push	{r7}
 800218a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800218c:	bf00      	nop
 800218e:	e7fd      	b.n	800218c <MemManage_Handler+0x4>

08002190 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002190:	b480      	push	{r7}
 8002192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002194:	bf00      	nop
 8002196:	e7fd      	b.n	8002194 <BusFault_Handler+0x4>

08002198 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002198:	b480      	push	{r7}
 800219a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800219c:	bf00      	nop
 800219e:	e7fd      	b.n	800219c <UsageFault_Handler+0x4>

080021a0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80021a0:	b480      	push	{r7}
 80021a2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80021a4:	bf00      	nop
 80021a6:	46bd      	mov	sp, r7
 80021a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ac:	4770      	bx	lr

080021ae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80021ae:	b480      	push	{r7}
 80021b0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021b2:	bf00      	nop
 80021b4:	46bd      	mov	sp, r7
 80021b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ba:	4770      	bx	lr

080021bc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80021bc:	b480      	push	{r7}
 80021be:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80021c0:	bf00      	nop
 80021c2:	46bd      	mov	sp, r7
 80021c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c8:	4770      	bx	lr

080021ca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80021ca:	b580      	push	{r7, lr}
 80021cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80021ce:	f000 fb97 	bl	8002900 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80021d2:	bf00      	nop
 80021d4:	bd80      	pop	{r7, pc}

080021d6 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80021d6:	b580      	push	{r7, lr}
 80021d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Encodeur_G_A_Pin);
 80021da:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80021de:	f000 feab 	bl	8002f38 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Encodeur_D_A_Pin);
 80021e2:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80021e6:	f000 fea7 	bl	8002f38 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80021ea:	bf00      	nop
 80021ec:	bd80      	pop	{r7, pc}

080021ee <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80021ee:	b580      	push	{r7, lr}
 80021f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Blue_Button_Pin);
 80021f2:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80021f6:	f000 fe9f 	bl	8002f38 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80021fa:	bf00      	nop
 80021fc:	bd80      	pop	{r7, pc}
	...

08002200 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002204:	4802      	ldr	r0, [pc, #8]	@ (8002210 <TIM6_DAC_IRQHandler+0x10>)
 8002206:	f002 ff99 	bl	800513c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800220a:	bf00      	nop
 800220c:	bd80      	pop	{r7, pc}
 800220e:	bf00      	nop
 8002210:	200001f8 	.word	0x200001f8

08002214 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002218:	4802      	ldr	r0, [pc, #8]	@ (8002224 <TIM7_IRQHandler+0x10>)
 800221a:	f002 ff8f 	bl	800513c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800221e:	bf00      	nop
 8002220:	bd80      	pop	{r7, pc}
 8002222:	bf00      	nop
 8002224:	20000240 	.word	0x20000240

08002228 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002228:	b480      	push	{r7}
 800222a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800222c:	4b06      	ldr	r3, [pc, #24]	@ (8002248 <SystemInit+0x20>)
 800222e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002232:	4a05      	ldr	r2, [pc, #20]	@ (8002248 <SystemInit+0x20>)
 8002234:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002238:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800223c:	bf00      	nop
 800223e:	46bd      	mov	sp, r7
 8002240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002244:	4770      	bx	lr
 8002246:	bf00      	nop
 8002248:	e000ed00 	.word	0xe000ed00

0800224c <MX_TIM3_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim7;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b08e      	sub	sp, #56	@ 0x38
 8002250:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002252:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002256:	2200      	movs	r2, #0
 8002258:	601a      	str	r2, [r3, #0]
 800225a:	605a      	str	r2, [r3, #4]
 800225c:	609a      	str	r2, [r3, #8]
 800225e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002260:	f107 0320 	add.w	r3, r7, #32
 8002264:	2200      	movs	r2, #0
 8002266:	601a      	str	r2, [r3, #0]
 8002268:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800226a:	1d3b      	adds	r3, r7, #4
 800226c:	2200      	movs	r2, #0
 800226e:	601a      	str	r2, [r3, #0]
 8002270:	605a      	str	r2, [r3, #4]
 8002272:	609a      	str	r2, [r3, #8]
 8002274:	60da      	str	r2, [r3, #12]
 8002276:	611a      	str	r2, [r3, #16]
 8002278:	615a      	str	r2, [r3, #20]
 800227a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800227c:	4b3d      	ldr	r3, [pc, #244]	@ (8002374 <MX_TIM3_Init+0x128>)
 800227e:	4a3e      	ldr	r2, [pc, #248]	@ (8002378 <MX_TIM3_Init+0x12c>)
 8002280:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84-1;
 8002282:	4b3c      	ldr	r3, [pc, #240]	@ (8002374 <MX_TIM3_Init+0x128>)
 8002284:	2253      	movs	r2, #83	@ 0x53
 8002286:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002288:	4b3a      	ldr	r3, [pc, #232]	@ (8002374 <MX_TIM3_Init+0x128>)
 800228a:	2200      	movs	r2, #0
 800228c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 500-1;
 800228e:	4b39      	ldr	r3, [pc, #228]	@ (8002374 <MX_TIM3_Init+0x128>)
 8002290:	f240 12f3 	movw	r2, #499	@ 0x1f3
 8002294:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002296:	4b37      	ldr	r3, [pc, #220]	@ (8002374 <MX_TIM3_Init+0x128>)
 8002298:	2200      	movs	r2, #0
 800229a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800229c:	4b35      	ldr	r3, [pc, #212]	@ (8002374 <MX_TIM3_Init+0x128>)
 800229e:	2200      	movs	r2, #0
 80022a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80022a2:	4834      	ldr	r0, [pc, #208]	@ (8002374 <MX_TIM3_Init+0x128>)
 80022a4:	f002 fccb 	bl	8004c3e <HAL_TIM_Base_Init>
 80022a8:	4603      	mov	r3, r0
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d001      	beq.n	80022b2 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80022ae:	f7ff fc63 	bl	8001b78 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80022b2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80022b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80022b8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80022bc:	4619      	mov	r1, r3
 80022be:	482d      	ldr	r0, [pc, #180]	@ (8002374 <MX_TIM3_Init+0x128>)
 80022c0:	f003 f8ee 	bl	80054a0 <HAL_TIM_ConfigClockSource>
 80022c4:	4603      	mov	r3, r0
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d001      	beq.n	80022ce <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80022ca:	f7ff fc55 	bl	8001b78 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80022ce:	4829      	ldr	r0, [pc, #164]	@ (8002374 <MX_TIM3_Init+0x128>)
 80022d0:	f002 fda3 	bl	8004e1a <HAL_TIM_PWM_Init>
 80022d4:	4603      	mov	r3, r0
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d001      	beq.n	80022de <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80022da:	f7ff fc4d 	bl	8001b78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022de:	2300      	movs	r3, #0
 80022e0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022e2:	2300      	movs	r3, #0
 80022e4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80022e6:	f107 0320 	add.w	r3, r7, #32
 80022ea:	4619      	mov	r1, r3
 80022ec:	4821      	ldr	r0, [pc, #132]	@ (8002374 <MX_TIM3_Init+0x128>)
 80022ee:	f003 fce3 	bl	8005cb8 <HAL_TIMEx_MasterConfigSynchronization>
 80022f2:	4603      	mov	r3, r0
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d001      	beq.n	80022fc <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80022f8:	f7ff fc3e 	bl	8001b78 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80022fc:	2360      	movs	r3, #96	@ 0x60
 80022fe:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002300:	2300      	movs	r3, #0
 8002302:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002304:	2300      	movs	r3, #0
 8002306:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002308:	2300      	movs	r3, #0
 800230a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800230c:	1d3b      	adds	r3, r7, #4
 800230e:	2200      	movs	r2, #0
 8002310:	4619      	mov	r1, r3
 8002312:	4818      	ldr	r0, [pc, #96]	@ (8002374 <MX_TIM3_Init+0x128>)
 8002314:	f003 f802 	bl	800531c <HAL_TIM_PWM_ConfigChannel>
 8002318:	4603      	mov	r3, r0
 800231a:	2b00      	cmp	r3, #0
 800231c:	d001      	beq.n	8002322 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800231e:	f7ff fc2b 	bl	8001b78 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002322:	1d3b      	adds	r3, r7, #4
 8002324:	2204      	movs	r2, #4
 8002326:	4619      	mov	r1, r3
 8002328:	4812      	ldr	r0, [pc, #72]	@ (8002374 <MX_TIM3_Init+0x128>)
 800232a:	f002 fff7 	bl	800531c <HAL_TIM_PWM_ConfigChannel>
 800232e:	4603      	mov	r3, r0
 8002330:	2b00      	cmp	r3, #0
 8002332:	d001      	beq.n	8002338 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8002334:	f7ff fc20 	bl	8001b78 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002338:	1d3b      	adds	r3, r7, #4
 800233a:	2208      	movs	r2, #8
 800233c:	4619      	mov	r1, r3
 800233e:	480d      	ldr	r0, [pc, #52]	@ (8002374 <MX_TIM3_Init+0x128>)
 8002340:	f002 ffec 	bl	800531c <HAL_TIM_PWM_ConfigChannel>
 8002344:	4603      	mov	r3, r0
 8002346:	2b00      	cmp	r3, #0
 8002348:	d001      	beq.n	800234e <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 800234a:	f7ff fc15 	bl	8001b78 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800234e:	1d3b      	adds	r3, r7, #4
 8002350:	220c      	movs	r2, #12
 8002352:	4619      	mov	r1, r3
 8002354:	4807      	ldr	r0, [pc, #28]	@ (8002374 <MX_TIM3_Init+0x128>)
 8002356:	f002 ffe1 	bl	800531c <HAL_TIM_PWM_ConfigChannel>
 800235a:	4603      	mov	r3, r0
 800235c:	2b00      	cmp	r3, #0
 800235e:	d001      	beq.n	8002364 <MX_TIM3_Init+0x118>
  {
    Error_Handler();
 8002360:	f7ff fc0a 	bl	8001b78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002364:	4803      	ldr	r0, [pc, #12]	@ (8002374 <MX_TIM3_Init+0x128>)
 8002366:	f000 f95d 	bl	8002624 <HAL_TIM_MspPostInit>

}
 800236a:	bf00      	nop
 800236c:	3738      	adds	r7, #56	@ 0x38
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}
 8002372:	bf00      	nop
 8002374:	20000168 	.word	0x20000168
 8002378:	40000400 	.word	0x40000400

0800237c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b08e      	sub	sp, #56	@ 0x38
 8002380:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002382:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002386:	2200      	movs	r2, #0
 8002388:	601a      	str	r2, [r3, #0]
 800238a:	605a      	str	r2, [r3, #4]
 800238c:	609a      	str	r2, [r3, #8]
 800238e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002390:	f107 0320 	add.w	r3, r7, #32
 8002394:	2200      	movs	r2, #0
 8002396:	601a      	str	r2, [r3, #0]
 8002398:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800239a:	1d3b      	adds	r3, r7, #4
 800239c:	2200      	movs	r2, #0
 800239e:	601a      	str	r2, [r3, #0]
 80023a0:	605a      	str	r2, [r3, #4]
 80023a2:	609a      	str	r2, [r3, #8]
 80023a4:	60da      	str	r2, [r3, #12]
 80023a6:	611a      	str	r2, [r3, #16]
 80023a8:	615a      	str	r2, [r3, #20]
 80023aa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80023ac:	4b2d      	ldr	r3, [pc, #180]	@ (8002464 <MX_TIM4_Init+0xe8>)
 80023ae:	4a2e      	ldr	r2, [pc, #184]	@ (8002468 <MX_TIM4_Init+0xec>)
 80023b0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 300-1;
 80023b2:	4b2c      	ldr	r3, [pc, #176]	@ (8002464 <MX_TIM4_Init+0xe8>)
 80023b4:	f240 122b 	movw	r2, #299	@ 0x12b
 80023b8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023ba:	4b2a      	ldr	r3, [pc, #168]	@ (8002464 <MX_TIM4_Init+0xe8>)
 80023bc:	2200      	movs	r2, #0
 80023be:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000-1;
 80023c0:	4b28      	ldr	r3, [pc, #160]	@ (8002464 <MX_TIM4_Init+0xe8>)
 80023c2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80023c6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023c8:	4b26      	ldr	r3, [pc, #152]	@ (8002464 <MX_TIM4_Init+0xe8>)
 80023ca:	2200      	movs	r2, #0
 80023cc:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023ce:	4b25      	ldr	r3, [pc, #148]	@ (8002464 <MX_TIM4_Init+0xe8>)
 80023d0:	2200      	movs	r2, #0
 80023d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80023d4:	4823      	ldr	r0, [pc, #140]	@ (8002464 <MX_TIM4_Init+0xe8>)
 80023d6:	f002 fc32 	bl	8004c3e <HAL_TIM_Base_Init>
 80023da:	4603      	mov	r3, r0
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d001      	beq.n	80023e4 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 80023e0:	f7ff fbca 	bl	8001b78 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80023e4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80023e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80023ea:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80023ee:	4619      	mov	r1, r3
 80023f0:	481c      	ldr	r0, [pc, #112]	@ (8002464 <MX_TIM4_Init+0xe8>)
 80023f2:	f003 f855 	bl	80054a0 <HAL_TIM_ConfigClockSource>
 80023f6:	4603      	mov	r3, r0
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d001      	beq.n	8002400 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 80023fc:	f7ff fbbc 	bl	8001b78 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002400:	4818      	ldr	r0, [pc, #96]	@ (8002464 <MX_TIM4_Init+0xe8>)
 8002402:	f002 fd0a 	bl	8004e1a <HAL_TIM_PWM_Init>
 8002406:	4603      	mov	r3, r0
 8002408:	2b00      	cmp	r3, #0
 800240a:	d001      	beq.n	8002410 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 800240c:	f7ff fbb4 	bl	8001b78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002410:	2300      	movs	r3, #0
 8002412:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002414:	2300      	movs	r3, #0
 8002416:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002418:	f107 0320 	add.w	r3, r7, #32
 800241c:	4619      	mov	r1, r3
 800241e:	4811      	ldr	r0, [pc, #68]	@ (8002464 <MX_TIM4_Init+0xe8>)
 8002420:	f003 fc4a 	bl	8005cb8 <HAL_TIMEx_MasterConfigSynchronization>
 8002424:	4603      	mov	r3, r0
 8002426:	2b00      	cmp	r3, #0
 8002428:	d001      	beq.n	800242e <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 800242a:	f7ff fba5 	bl	8001b78 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800242e:	2360      	movs	r3, #96	@ 0x60
 8002430:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002432:	2300      	movs	r3, #0
 8002434:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002436:	2300      	movs	r3, #0
 8002438:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800243a:	2300      	movs	r3, #0
 800243c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800243e:	1d3b      	adds	r3, r7, #4
 8002440:	2204      	movs	r2, #4
 8002442:	4619      	mov	r1, r3
 8002444:	4807      	ldr	r0, [pc, #28]	@ (8002464 <MX_TIM4_Init+0xe8>)
 8002446:	f002 ff69 	bl	800531c <HAL_TIM_PWM_ConfigChannel>
 800244a:	4603      	mov	r3, r0
 800244c:	2b00      	cmp	r3, #0
 800244e:	d001      	beq.n	8002454 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8002450:	f7ff fb92 	bl	8001b78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002454:	4803      	ldr	r0, [pc, #12]	@ (8002464 <MX_TIM4_Init+0xe8>)
 8002456:	f000 f8e5 	bl	8002624 <HAL_TIM_MspPostInit>

}
 800245a:	bf00      	nop
 800245c:	3738      	adds	r7, #56	@ 0x38
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}
 8002462:	bf00      	nop
 8002464:	200001b0 	.word	0x200001b0
 8002468:	40000800 	.word	0x40000800

0800246c <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b082      	sub	sp, #8
 8002470:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002472:	463b      	mov	r3, r7
 8002474:	2200      	movs	r2, #0
 8002476:	601a      	str	r2, [r3, #0]
 8002478:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800247a:	4b15      	ldr	r3, [pc, #84]	@ (80024d0 <MX_TIM6_Init+0x64>)
 800247c:	4a15      	ldr	r2, [pc, #84]	@ (80024d4 <MX_TIM6_Init+0x68>)
 800247e:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 42000-1;
 8002480:	4b13      	ldr	r3, [pc, #76]	@ (80024d0 <MX_TIM6_Init+0x64>)
 8002482:	f24a 420f 	movw	r2, #41999	@ 0xa40f
 8002486:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002488:	4b11      	ldr	r3, [pc, #68]	@ (80024d0 <MX_TIM6_Init+0x64>)
 800248a:	2200      	movs	r2, #0
 800248c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 200-1;
 800248e:	4b10      	ldr	r3, [pc, #64]	@ (80024d0 <MX_TIM6_Init+0x64>)
 8002490:	22c7      	movs	r2, #199	@ 0xc7
 8002492:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002494:	4b0e      	ldr	r3, [pc, #56]	@ (80024d0 <MX_TIM6_Init+0x64>)
 8002496:	2200      	movs	r2, #0
 8002498:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800249a:	480d      	ldr	r0, [pc, #52]	@ (80024d0 <MX_TIM6_Init+0x64>)
 800249c:	f002 fbcf 	bl	8004c3e <HAL_TIM_Base_Init>
 80024a0:	4603      	mov	r3, r0
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d001      	beq.n	80024aa <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 80024a6:	f7ff fb67 	bl	8001b78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80024aa:	2320      	movs	r3, #32
 80024ac:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024ae:	2300      	movs	r3, #0
 80024b0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80024b2:	463b      	mov	r3, r7
 80024b4:	4619      	mov	r1, r3
 80024b6:	4806      	ldr	r0, [pc, #24]	@ (80024d0 <MX_TIM6_Init+0x64>)
 80024b8:	f003 fbfe 	bl	8005cb8 <HAL_TIMEx_MasterConfigSynchronization>
 80024bc:	4603      	mov	r3, r0
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d001      	beq.n	80024c6 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 80024c2:	f7ff fb59 	bl	8001b78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80024c6:	bf00      	nop
 80024c8:	3708      	adds	r7, #8
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}
 80024ce:	bf00      	nop
 80024d0:	200001f8 	.word	0x200001f8
 80024d4:	40001000 	.word	0x40001000

080024d8 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b082      	sub	sp, #8
 80024dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024de:	463b      	mov	r3, r7
 80024e0:	2200      	movs	r2, #0
 80024e2:	601a      	str	r2, [r3, #0]
 80024e4:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80024e6:	4b14      	ldr	r3, [pc, #80]	@ (8002538 <MX_TIM7_Init+0x60>)
 80024e8:	4a14      	ldr	r2, [pc, #80]	@ (800253c <MX_TIM7_Init+0x64>)
 80024ea:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 83;
 80024ec:	4b12      	ldr	r3, [pc, #72]	@ (8002538 <MX_TIM7_Init+0x60>)
 80024ee:	2253      	movs	r2, #83	@ 0x53
 80024f0:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024f2:	4b11      	ldr	r3, [pc, #68]	@ (8002538 <MX_TIM7_Init+0x60>)
 80024f4:	2200      	movs	r2, #0
 80024f6:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 9;
 80024f8:	4b0f      	ldr	r3, [pc, #60]	@ (8002538 <MX_TIM7_Init+0x60>)
 80024fa:	2209      	movs	r2, #9
 80024fc:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024fe:	4b0e      	ldr	r3, [pc, #56]	@ (8002538 <MX_TIM7_Init+0x60>)
 8002500:	2200      	movs	r2, #0
 8002502:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8002504:	480c      	ldr	r0, [pc, #48]	@ (8002538 <MX_TIM7_Init+0x60>)
 8002506:	f002 fb9a 	bl	8004c3e <HAL_TIM_Base_Init>
 800250a:	4603      	mov	r3, r0
 800250c:	2b00      	cmp	r3, #0
 800250e:	d001      	beq.n	8002514 <MX_TIM7_Init+0x3c>
  {
    Error_Handler();
 8002510:	f7ff fb32 	bl	8001b78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002514:	2300      	movs	r3, #0
 8002516:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002518:	2300      	movs	r3, #0
 800251a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800251c:	463b      	mov	r3, r7
 800251e:	4619      	mov	r1, r3
 8002520:	4805      	ldr	r0, [pc, #20]	@ (8002538 <MX_TIM7_Init+0x60>)
 8002522:	f003 fbc9 	bl	8005cb8 <HAL_TIMEx_MasterConfigSynchronization>
 8002526:	4603      	mov	r3, r0
 8002528:	2b00      	cmp	r3, #0
 800252a:	d001      	beq.n	8002530 <MX_TIM7_Init+0x58>
  {
    Error_Handler();
 800252c:	f7ff fb24 	bl	8001b78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8002530:	bf00      	nop
 8002532:	3708      	adds	r7, #8
 8002534:	46bd      	mov	sp, r7
 8002536:	bd80      	pop	{r7, pc}
 8002538:	20000240 	.word	0x20000240
 800253c:	40001400 	.word	0x40001400

08002540 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b086      	sub	sp, #24
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a30      	ldr	r2, [pc, #192]	@ (8002610 <HAL_TIM_Base_MspInit+0xd0>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d10e      	bne.n	8002570 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002552:	2300      	movs	r3, #0
 8002554:	617b      	str	r3, [r7, #20]
 8002556:	4b2f      	ldr	r3, [pc, #188]	@ (8002614 <HAL_TIM_Base_MspInit+0xd4>)
 8002558:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800255a:	4a2e      	ldr	r2, [pc, #184]	@ (8002614 <HAL_TIM_Base_MspInit+0xd4>)
 800255c:	f043 0302 	orr.w	r3, r3, #2
 8002560:	6413      	str	r3, [r2, #64]	@ 0x40
 8002562:	4b2c      	ldr	r3, [pc, #176]	@ (8002614 <HAL_TIM_Base_MspInit+0xd4>)
 8002564:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002566:	f003 0302 	and.w	r3, r3, #2
 800256a:	617b      	str	r3, [r7, #20]
 800256c:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 800256e:	e04a      	b.n	8002606 <HAL_TIM_Base_MspInit+0xc6>
  else if(tim_baseHandle->Instance==TIM4)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a28      	ldr	r2, [pc, #160]	@ (8002618 <HAL_TIM_Base_MspInit+0xd8>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d10e      	bne.n	8002598 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800257a:	2300      	movs	r3, #0
 800257c:	613b      	str	r3, [r7, #16]
 800257e:	4b25      	ldr	r3, [pc, #148]	@ (8002614 <HAL_TIM_Base_MspInit+0xd4>)
 8002580:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002582:	4a24      	ldr	r2, [pc, #144]	@ (8002614 <HAL_TIM_Base_MspInit+0xd4>)
 8002584:	f043 0304 	orr.w	r3, r3, #4
 8002588:	6413      	str	r3, [r2, #64]	@ 0x40
 800258a:	4b22      	ldr	r3, [pc, #136]	@ (8002614 <HAL_TIM_Base_MspInit+0xd4>)
 800258c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800258e:	f003 0304 	and.w	r3, r3, #4
 8002592:	613b      	str	r3, [r7, #16]
 8002594:	693b      	ldr	r3, [r7, #16]
}
 8002596:	e036      	b.n	8002606 <HAL_TIM_Base_MspInit+0xc6>
  else if(tim_baseHandle->Instance==TIM6)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a1f      	ldr	r2, [pc, #124]	@ (800261c <HAL_TIM_Base_MspInit+0xdc>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d116      	bne.n	80025d0 <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80025a2:	2300      	movs	r3, #0
 80025a4:	60fb      	str	r3, [r7, #12]
 80025a6:	4b1b      	ldr	r3, [pc, #108]	@ (8002614 <HAL_TIM_Base_MspInit+0xd4>)
 80025a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025aa:	4a1a      	ldr	r2, [pc, #104]	@ (8002614 <HAL_TIM_Base_MspInit+0xd4>)
 80025ac:	f043 0310 	orr.w	r3, r3, #16
 80025b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80025b2:	4b18      	ldr	r3, [pc, #96]	@ (8002614 <HAL_TIM_Base_MspInit+0xd4>)
 80025b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025b6:	f003 0310 	and.w	r3, r3, #16
 80025ba:	60fb      	str	r3, [r7, #12]
 80025bc:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80025be:	2200      	movs	r2, #0
 80025c0:	2100      	movs	r1, #0
 80025c2:	2036      	movs	r0, #54	@ 0x36
 80025c4:	f000 fabb 	bl	8002b3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80025c8:	2036      	movs	r0, #54	@ 0x36
 80025ca:	f000 fad4 	bl	8002b76 <HAL_NVIC_EnableIRQ>
}
 80025ce:	e01a      	b.n	8002606 <HAL_TIM_Base_MspInit+0xc6>
  else if(tim_baseHandle->Instance==TIM7)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4a12      	ldr	r2, [pc, #72]	@ (8002620 <HAL_TIM_Base_MspInit+0xe0>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d115      	bne.n	8002606 <HAL_TIM_Base_MspInit+0xc6>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80025da:	2300      	movs	r3, #0
 80025dc:	60bb      	str	r3, [r7, #8]
 80025de:	4b0d      	ldr	r3, [pc, #52]	@ (8002614 <HAL_TIM_Base_MspInit+0xd4>)
 80025e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025e2:	4a0c      	ldr	r2, [pc, #48]	@ (8002614 <HAL_TIM_Base_MspInit+0xd4>)
 80025e4:	f043 0320 	orr.w	r3, r3, #32
 80025e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80025ea:	4b0a      	ldr	r3, [pc, #40]	@ (8002614 <HAL_TIM_Base_MspInit+0xd4>)
 80025ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025ee:	f003 0320 	and.w	r3, r3, #32
 80025f2:	60bb      	str	r3, [r7, #8]
 80025f4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80025f6:	2200      	movs	r2, #0
 80025f8:	2100      	movs	r1, #0
 80025fa:	2037      	movs	r0, #55	@ 0x37
 80025fc:	f000 fa9f 	bl	8002b3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002600:	2037      	movs	r0, #55	@ 0x37
 8002602:	f000 fab8 	bl	8002b76 <HAL_NVIC_EnableIRQ>
}
 8002606:	bf00      	nop
 8002608:	3718      	adds	r7, #24
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}
 800260e:	bf00      	nop
 8002610:	40000400 	.word	0x40000400
 8002614:	40023800 	.word	0x40023800
 8002618:	40000800 	.word	0x40000800
 800261c:	40001000 	.word	0x40001000
 8002620:	40001400 	.word	0x40001400

08002624 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b08a      	sub	sp, #40	@ 0x28
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800262c:	f107 0314 	add.w	r3, r7, #20
 8002630:	2200      	movs	r2, #0
 8002632:	601a      	str	r2, [r3, #0]
 8002634:	605a      	str	r2, [r3, #4]
 8002636:	609a      	str	r2, [r3, #8]
 8002638:	60da      	str	r2, [r3, #12]
 800263a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a33      	ldr	r2, [pc, #204]	@ (8002710 <HAL_TIM_MspPostInit+0xec>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d13c      	bne.n	80026c0 <HAL_TIM_MspPostInit+0x9c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002646:	2300      	movs	r3, #0
 8002648:	613b      	str	r3, [r7, #16]
 800264a:	4b32      	ldr	r3, [pc, #200]	@ (8002714 <HAL_TIM_MspPostInit+0xf0>)
 800264c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800264e:	4a31      	ldr	r2, [pc, #196]	@ (8002714 <HAL_TIM_MspPostInit+0xf0>)
 8002650:	f043 0301 	orr.w	r3, r3, #1
 8002654:	6313      	str	r3, [r2, #48]	@ 0x30
 8002656:	4b2f      	ldr	r3, [pc, #188]	@ (8002714 <HAL_TIM_MspPostInit+0xf0>)
 8002658:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800265a:	f003 0301 	and.w	r3, r3, #1
 800265e:	613b      	str	r3, [r7, #16]
 8002660:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002662:	2300      	movs	r3, #0
 8002664:	60fb      	str	r3, [r7, #12]
 8002666:	4b2b      	ldr	r3, [pc, #172]	@ (8002714 <HAL_TIM_MspPostInit+0xf0>)
 8002668:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800266a:	4a2a      	ldr	r2, [pc, #168]	@ (8002714 <HAL_TIM_MspPostInit+0xf0>)
 800266c:	f043 0302 	orr.w	r3, r3, #2
 8002670:	6313      	str	r3, [r2, #48]	@ 0x30
 8002672:	4b28      	ldr	r3, [pc, #160]	@ (8002714 <HAL_TIM_MspPostInit+0xf0>)
 8002674:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002676:	f003 0302 	and.w	r3, r3, #2
 800267a:	60fb      	str	r3, [r7, #12]
 800267c:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = Gauche_av_Pin|Gauche_re_Pin;
 800267e:	23c0      	movs	r3, #192	@ 0xc0
 8002680:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002682:	2302      	movs	r3, #2
 8002684:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002686:	2300      	movs	r3, #0
 8002688:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800268a:	2300      	movs	r3, #0
 800268c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800268e:	2302      	movs	r3, #2
 8002690:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002692:	f107 0314 	add.w	r3, r7, #20
 8002696:	4619      	mov	r1, r3
 8002698:	481f      	ldr	r0, [pc, #124]	@ (8002718 <HAL_TIM_MspPostInit+0xf4>)
 800269a:	f000 fa87 	bl	8002bac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Droit_av_Pin|Droit_re_Pin;
 800269e:	2303      	movs	r3, #3
 80026a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026a2:	2302      	movs	r3, #2
 80026a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026a6:	2300      	movs	r3, #0
 80026a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026aa:	2300      	movs	r3, #0
 80026ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80026ae:	2302      	movs	r3, #2
 80026b0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026b2:	f107 0314 	add.w	r3, r7, #20
 80026b6:	4619      	mov	r1, r3
 80026b8:	4818      	ldr	r0, [pc, #96]	@ (800271c <HAL_TIM_MspPostInit+0xf8>)
 80026ba:	f000 fa77 	bl	8002bac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80026be:	e022      	b.n	8002706 <HAL_TIM_MspPostInit+0xe2>
  else if(timHandle->Instance==TIM4)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a16      	ldr	r2, [pc, #88]	@ (8002720 <HAL_TIM_MspPostInit+0xfc>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d11d      	bne.n	8002706 <HAL_TIM_MspPostInit+0xe2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026ca:	2300      	movs	r3, #0
 80026cc:	60bb      	str	r3, [r7, #8]
 80026ce:	4b11      	ldr	r3, [pc, #68]	@ (8002714 <HAL_TIM_MspPostInit+0xf0>)
 80026d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026d2:	4a10      	ldr	r2, [pc, #64]	@ (8002714 <HAL_TIM_MspPostInit+0xf0>)
 80026d4:	f043 0302 	orr.w	r3, r3, #2
 80026d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80026da:	4b0e      	ldr	r3, [pc, #56]	@ (8002714 <HAL_TIM_MspPostInit+0xf0>)
 80026dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026de:	f003 0302 	and.w	r3, r3, #2
 80026e2:	60bb      	str	r3, [r7, #8]
 80026e4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = LCD_BL_Pin;
 80026e6:	2380      	movs	r3, #128	@ 0x80
 80026e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026ea:	2302      	movs	r3, #2
 80026ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ee:	2300      	movs	r3, #0
 80026f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026f2:	2300      	movs	r3, #0
 80026f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80026f6:	2302      	movs	r3, #2
 80026f8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(LCD_BL_GPIO_Port, &GPIO_InitStruct);
 80026fa:	f107 0314 	add.w	r3, r7, #20
 80026fe:	4619      	mov	r1, r3
 8002700:	4806      	ldr	r0, [pc, #24]	@ (800271c <HAL_TIM_MspPostInit+0xf8>)
 8002702:	f000 fa53 	bl	8002bac <HAL_GPIO_Init>
}
 8002706:	bf00      	nop
 8002708:	3728      	adds	r7, #40	@ 0x28
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}
 800270e:	bf00      	nop
 8002710:	40000400 	.word	0x40000400
 8002714:	40023800 	.word	0x40023800
 8002718:	40020000 	.word	0x40020000
 800271c:	40020400 	.word	0x40020400
 8002720:	40000800 	.word	0x40000800

08002724 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002728:	4b11      	ldr	r3, [pc, #68]	@ (8002770 <MX_USART2_UART_Init+0x4c>)
 800272a:	4a12      	ldr	r2, [pc, #72]	@ (8002774 <MX_USART2_UART_Init+0x50>)
 800272c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800272e:	4b10      	ldr	r3, [pc, #64]	@ (8002770 <MX_USART2_UART_Init+0x4c>)
 8002730:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002734:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002736:	4b0e      	ldr	r3, [pc, #56]	@ (8002770 <MX_USART2_UART_Init+0x4c>)
 8002738:	2200      	movs	r2, #0
 800273a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800273c:	4b0c      	ldr	r3, [pc, #48]	@ (8002770 <MX_USART2_UART_Init+0x4c>)
 800273e:	2200      	movs	r2, #0
 8002740:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002742:	4b0b      	ldr	r3, [pc, #44]	@ (8002770 <MX_USART2_UART_Init+0x4c>)
 8002744:	2200      	movs	r2, #0
 8002746:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002748:	4b09      	ldr	r3, [pc, #36]	@ (8002770 <MX_USART2_UART_Init+0x4c>)
 800274a:	220c      	movs	r2, #12
 800274c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800274e:	4b08      	ldr	r3, [pc, #32]	@ (8002770 <MX_USART2_UART_Init+0x4c>)
 8002750:	2200      	movs	r2, #0
 8002752:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002754:	4b06      	ldr	r3, [pc, #24]	@ (8002770 <MX_USART2_UART_Init+0x4c>)
 8002756:	2200      	movs	r2, #0
 8002758:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800275a:	4805      	ldr	r0, [pc, #20]	@ (8002770 <MX_USART2_UART_Init+0x4c>)
 800275c:	f003 fb3c 	bl	8005dd8 <HAL_UART_Init>
 8002760:	4603      	mov	r3, r0
 8002762:	2b00      	cmp	r3, #0
 8002764:	d001      	beq.n	800276a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002766:	f7ff fa07 	bl	8001b78 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800276a:	bf00      	nop
 800276c:	bd80      	pop	{r7, pc}
 800276e:	bf00      	nop
 8002770:	20000288 	.word	0x20000288
 8002774:	40004400 	.word	0x40004400

08002778 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b08a      	sub	sp, #40	@ 0x28
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002780:	f107 0314 	add.w	r3, r7, #20
 8002784:	2200      	movs	r2, #0
 8002786:	601a      	str	r2, [r3, #0]
 8002788:	605a      	str	r2, [r3, #4]
 800278a:	609a      	str	r2, [r3, #8]
 800278c:	60da      	str	r2, [r3, #12]
 800278e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a19      	ldr	r2, [pc, #100]	@ (80027fc <HAL_UART_MspInit+0x84>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d12b      	bne.n	80027f2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800279a:	2300      	movs	r3, #0
 800279c:	613b      	str	r3, [r7, #16]
 800279e:	4b18      	ldr	r3, [pc, #96]	@ (8002800 <HAL_UART_MspInit+0x88>)
 80027a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027a2:	4a17      	ldr	r2, [pc, #92]	@ (8002800 <HAL_UART_MspInit+0x88>)
 80027a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80027a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80027aa:	4b15      	ldr	r3, [pc, #84]	@ (8002800 <HAL_UART_MspInit+0x88>)
 80027ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027b2:	613b      	str	r3, [r7, #16]
 80027b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027b6:	2300      	movs	r3, #0
 80027b8:	60fb      	str	r3, [r7, #12]
 80027ba:	4b11      	ldr	r3, [pc, #68]	@ (8002800 <HAL_UART_MspInit+0x88>)
 80027bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027be:	4a10      	ldr	r2, [pc, #64]	@ (8002800 <HAL_UART_MspInit+0x88>)
 80027c0:	f043 0301 	orr.w	r3, r3, #1
 80027c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80027c6:	4b0e      	ldr	r3, [pc, #56]	@ (8002800 <HAL_UART_MspInit+0x88>)
 80027c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027ca:	f003 0301 	and.w	r3, r3, #1
 80027ce:	60fb      	str	r3, [r7, #12]
 80027d0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80027d2:	230c      	movs	r3, #12
 80027d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027d6:	2302      	movs	r3, #2
 80027d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027da:	2300      	movs	r3, #0
 80027dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027de:	2303      	movs	r3, #3
 80027e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80027e2:	2307      	movs	r3, #7
 80027e4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027e6:	f107 0314 	add.w	r3, r7, #20
 80027ea:	4619      	mov	r1, r3
 80027ec:	4805      	ldr	r0, [pc, #20]	@ (8002804 <HAL_UART_MspInit+0x8c>)
 80027ee:	f000 f9dd 	bl	8002bac <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80027f2:	bf00      	nop
 80027f4:	3728      	adds	r7, #40	@ 0x28
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}
 80027fa:	bf00      	nop
 80027fc:	40004400 	.word	0x40004400
 8002800:	40023800 	.word	0x40023800
 8002804:	40020000 	.word	0x40020000

08002808 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002808:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002840 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800280c:	f7ff fd0c 	bl	8002228 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002810:	480c      	ldr	r0, [pc, #48]	@ (8002844 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002812:	490d      	ldr	r1, [pc, #52]	@ (8002848 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002814:	4a0d      	ldr	r2, [pc, #52]	@ (800284c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002816:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002818:	e002      	b.n	8002820 <LoopCopyDataInit>

0800281a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800281a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800281c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800281e:	3304      	adds	r3, #4

08002820 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002820:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002822:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002824:	d3f9      	bcc.n	800281a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002826:	4a0a      	ldr	r2, [pc, #40]	@ (8002850 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002828:	4c0a      	ldr	r4, [pc, #40]	@ (8002854 <LoopFillZerobss+0x22>)
  movs r3, #0
 800282a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800282c:	e001      	b.n	8002832 <LoopFillZerobss>

0800282e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800282e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002830:	3204      	adds	r2, #4

08002832 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002832:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002834:	d3fb      	bcc.n	800282e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002836:	f003 fd9b 	bl	8006370 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800283a:	f7ff f805 	bl	8001848 <main>
  bx  lr    
 800283e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002840:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002844:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002848:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 800284c:	08006408 	.word	0x08006408
  ldr r2, =_sbss
 8002850:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 8002854:	200002d4 	.word	0x200002d4

08002858 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002858:	e7fe      	b.n	8002858 <ADC_IRQHandler>
	...

0800285c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002860:	4b0e      	ldr	r3, [pc, #56]	@ (800289c <HAL_Init+0x40>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4a0d      	ldr	r2, [pc, #52]	@ (800289c <HAL_Init+0x40>)
 8002866:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800286a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800286c:	4b0b      	ldr	r3, [pc, #44]	@ (800289c <HAL_Init+0x40>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a0a      	ldr	r2, [pc, #40]	@ (800289c <HAL_Init+0x40>)
 8002872:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002876:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002878:	4b08      	ldr	r3, [pc, #32]	@ (800289c <HAL_Init+0x40>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a07      	ldr	r2, [pc, #28]	@ (800289c <HAL_Init+0x40>)
 800287e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002882:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002884:	2003      	movs	r0, #3
 8002886:	f000 f94f 	bl	8002b28 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800288a:	2000      	movs	r0, #0
 800288c:	f000 f808 	bl	80028a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002890:	f7ff fc4a 	bl	8002128 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002894:	2300      	movs	r3, #0
}
 8002896:	4618      	mov	r0, r3
 8002898:	bd80      	pop	{r7, pc}
 800289a:	bf00      	nop
 800289c:	40023c00 	.word	0x40023c00

080028a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b082      	sub	sp, #8
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80028a8:	4b12      	ldr	r3, [pc, #72]	@ (80028f4 <HAL_InitTick+0x54>)
 80028aa:	681a      	ldr	r2, [r3, #0]
 80028ac:	4b12      	ldr	r3, [pc, #72]	@ (80028f8 <HAL_InitTick+0x58>)
 80028ae:	781b      	ldrb	r3, [r3, #0]
 80028b0:	4619      	mov	r1, r3
 80028b2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80028b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80028ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80028be:	4618      	mov	r0, r3
 80028c0:	f000 f967 	bl	8002b92 <HAL_SYSTICK_Config>
 80028c4:	4603      	mov	r3, r0
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d001      	beq.n	80028ce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80028ca:	2301      	movs	r3, #1
 80028cc:	e00e      	b.n	80028ec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2b0f      	cmp	r3, #15
 80028d2:	d80a      	bhi.n	80028ea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80028d4:	2200      	movs	r2, #0
 80028d6:	6879      	ldr	r1, [r7, #4]
 80028d8:	f04f 30ff 	mov.w	r0, #4294967295
 80028dc:	f000 f92f 	bl	8002b3e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80028e0:	4a06      	ldr	r2, [pc, #24]	@ (80028fc <HAL_InitTick+0x5c>)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80028e6:	2300      	movs	r3, #0
 80028e8:	e000      	b.n	80028ec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80028ea:	2301      	movs	r3, #1
}
 80028ec:	4618      	mov	r0, r3
 80028ee:	3708      	adds	r7, #8
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bd80      	pop	{r7, pc}
 80028f4:	20000018 	.word	0x20000018
 80028f8:	20000020 	.word	0x20000020
 80028fc:	2000001c 	.word	0x2000001c

08002900 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002900:	b480      	push	{r7}
 8002902:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002904:	4b06      	ldr	r3, [pc, #24]	@ (8002920 <HAL_IncTick+0x20>)
 8002906:	781b      	ldrb	r3, [r3, #0]
 8002908:	461a      	mov	r2, r3
 800290a:	4b06      	ldr	r3, [pc, #24]	@ (8002924 <HAL_IncTick+0x24>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4413      	add	r3, r2
 8002910:	4a04      	ldr	r2, [pc, #16]	@ (8002924 <HAL_IncTick+0x24>)
 8002912:	6013      	str	r3, [r2, #0]
}
 8002914:	bf00      	nop
 8002916:	46bd      	mov	sp, r7
 8002918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291c:	4770      	bx	lr
 800291e:	bf00      	nop
 8002920:	20000020 	.word	0x20000020
 8002924:	200002d0 	.word	0x200002d0

08002928 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002928:	b480      	push	{r7}
 800292a:	af00      	add	r7, sp, #0
  return uwTick;
 800292c:	4b03      	ldr	r3, [pc, #12]	@ (800293c <HAL_GetTick+0x14>)
 800292e:	681b      	ldr	r3, [r3, #0]
}
 8002930:	4618      	mov	r0, r3
 8002932:	46bd      	mov	sp, r7
 8002934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002938:	4770      	bx	lr
 800293a:	bf00      	nop
 800293c:	200002d0 	.word	0x200002d0

08002940 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b084      	sub	sp, #16
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002948:	f7ff ffee 	bl	8002928 <HAL_GetTick>
 800294c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002958:	d005      	beq.n	8002966 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800295a:	4b0a      	ldr	r3, [pc, #40]	@ (8002984 <HAL_Delay+0x44>)
 800295c:	781b      	ldrb	r3, [r3, #0]
 800295e:	461a      	mov	r2, r3
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	4413      	add	r3, r2
 8002964:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002966:	bf00      	nop
 8002968:	f7ff ffde 	bl	8002928 <HAL_GetTick>
 800296c:	4602      	mov	r2, r0
 800296e:	68bb      	ldr	r3, [r7, #8]
 8002970:	1ad3      	subs	r3, r2, r3
 8002972:	68fa      	ldr	r2, [r7, #12]
 8002974:	429a      	cmp	r2, r3
 8002976:	d8f7      	bhi.n	8002968 <HAL_Delay+0x28>
  {
  }
}
 8002978:	bf00      	nop
 800297a:	bf00      	nop
 800297c:	3710      	adds	r7, #16
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}
 8002982:	bf00      	nop
 8002984:	20000020 	.word	0x20000020

08002988 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002988:	b480      	push	{r7}
 800298a:	b085      	sub	sp, #20
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	f003 0307 	and.w	r3, r3, #7
 8002996:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002998:	4b0c      	ldr	r3, [pc, #48]	@ (80029cc <__NVIC_SetPriorityGrouping+0x44>)
 800299a:	68db      	ldr	r3, [r3, #12]
 800299c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800299e:	68ba      	ldr	r2, [r7, #8]
 80029a0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80029a4:	4013      	ands	r3, r2
 80029a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80029ac:	68bb      	ldr	r3, [r7, #8]
 80029ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80029b0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80029b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80029b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80029ba:	4a04      	ldr	r2, [pc, #16]	@ (80029cc <__NVIC_SetPriorityGrouping+0x44>)
 80029bc:	68bb      	ldr	r3, [r7, #8]
 80029be:	60d3      	str	r3, [r2, #12]
}
 80029c0:	bf00      	nop
 80029c2:	3714      	adds	r7, #20
 80029c4:	46bd      	mov	sp, r7
 80029c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ca:	4770      	bx	lr
 80029cc:	e000ed00 	.word	0xe000ed00

080029d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80029d0:	b480      	push	{r7}
 80029d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80029d4:	4b04      	ldr	r3, [pc, #16]	@ (80029e8 <__NVIC_GetPriorityGrouping+0x18>)
 80029d6:	68db      	ldr	r3, [r3, #12]
 80029d8:	0a1b      	lsrs	r3, r3, #8
 80029da:	f003 0307 	and.w	r3, r3, #7
}
 80029de:	4618      	mov	r0, r3
 80029e0:	46bd      	mov	sp, r7
 80029e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e6:	4770      	bx	lr
 80029e8:	e000ed00 	.word	0xe000ed00

080029ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029ec:	b480      	push	{r7}
 80029ee:	b083      	sub	sp, #12
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	4603      	mov	r3, r0
 80029f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	db0b      	blt.n	8002a16 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80029fe:	79fb      	ldrb	r3, [r7, #7]
 8002a00:	f003 021f 	and.w	r2, r3, #31
 8002a04:	4907      	ldr	r1, [pc, #28]	@ (8002a24 <__NVIC_EnableIRQ+0x38>)
 8002a06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a0a:	095b      	lsrs	r3, r3, #5
 8002a0c:	2001      	movs	r0, #1
 8002a0e:	fa00 f202 	lsl.w	r2, r0, r2
 8002a12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002a16:	bf00      	nop
 8002a18:	370c      	adds	r7, #12
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a20:	4770      	bx	lr
 8002a22:	bf00      	nop
 8002a24:	e000e100 	.word	0xe000e100

08002a28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b083      	sub	sp, #12
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	4603      	mov	r3, r0
 8002a30:	6039      	str	r1, [r7, #0]
 8002a32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	db0a      	blt.n	8002a52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	b2da      	uxtb	r2, r3
 8002a40:	490c      	ldr	r1, [pc, #48]	@ (8002a74 <__NVIC_SetPriority+0x4c>)
 8002a42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a46:	0112      	lsls	r2, r2, #4
 8002a48:	b2d2      	uxtb	r2, r2
 8002a4a:	440b      	add	r3, r1
 8002a4c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a50:	e00a      	b.n	8002a68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	b2da      	uxtb	r2, r3
 8002a56:	4908      	ldr	r1, [pc, #32]	@ (8002a78 <__NVIC_SetPriority+0x50>)
 8002a58:	79fb      	ldrb	r3, [r7, #7]
 8002a5a:	f003 030f 	and.w	r3, r3, #15
 8002a5e:	3b04      	subs	r3, #4
 8002a60:	0112      	lsls	r2, r2, #4
 8002a62:	b2d2      	uxtb	r2, r2
 8002a64:	440b      	add	r3, r1
 8002a66:	761a      	strb	r2, [r3, #24]
}
 8002a68:	bf00      	nop
 8002a6a:	370c      	adds	r7, #12
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a72:	4770      	bx	lr
 8002a74:	e000e100 	.word	0xe000e100
 8002a78:	e000ed00 	.word	0xe000ed00

08002a7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b089      	sub	sp, #36	@ 0x24
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	60f8      	str	r0, [r7, #12]
 8002a84:	60b9      	str	r1, [r7, #8]
 8002a86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	f003 0307 	and.w	r3, r3, #7
 8002a8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a90:	69fb      	ldr	r3, [r7, #28]
 8002a92:	f1c3 0307 	rsb	r3, r3, #7
 8002a96:	2b04      	cmp	r3, #4
 8002a98:	bf28      	it	cs
 8002a9a:	2304      	movcs	r3, #4
 8002a9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a9e:	69fb      	ldr	r3, [r7, #28]
 8002aa0:	3304      	adds	r3, #4
 8002aa2:	2b06      	cmp	r3, #6
 8002aa4:	d902      	bls.n	8002aac <NVIC_EncodePriority+0x30>
 8002aa6:	69fb      	ldr	r3, [r7, #28]
 8002aa8:	3b03      	subs	r3, #3
 8002aaa:	e000      	b.n	8002aae <NVIC_EncodePriority+0x32>
 8002aac:	2300      	movs	r3, #0
 8002aae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ab0:	f04f 32ff 	mov.w	r2, #4294967295
 8002ab4:	69bb      	ldr	r3, [r7, #24]
 8002ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aba:	43da      	mvns	r2, r3
 8002abc:	68bb      	ldr	r3, [r7, #8]
 8002abe:	401a      	ands	r2, r3
 8002ac0:	697b      	ldr	r3, [r7, #20]
 8002ac2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ac4:	f04f 31ff 	mov.w	r1, #4294967295
 8002ac8:	697b      	ldr	r3, [r7, #20]
 8002aca:	fa01 f303 	lsl.w	r3, r1, r3
 8002ace:	43d9      	mvns	r1, r3
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ad4:	4313      	orrs	r3, r2
         );
}
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	3724      	adds	r7, #36	@ 0x24
 8002ada:	46bd      	mov	sp, r7
 8002adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae0:	4770      	bx	lr
	...

08002ae4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b082      	sub	sp, #8
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	3b01      	subs	r3, #1
 8002af0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002af4:	d301      	bcc.n	8002afa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002af6:	2301      	movs	r3, #1
 8002af8:	e00f      	b.n	8002b1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002afa:	4a0a      	ldr	r2, [pc, #40]	@ (8002b24 <SysTick_Config+0x40>)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	3b01      	subs	r3, #1
 8002b00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b02:	210f      	movs	r1, #15
 8002b04:	f04f 30ff 	mov.w	r0, #4294967295
 8002b08:	f7ff ff8e 	bl	8002a28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b0c:	4b05      	ldr	r3, [pc, #20]	@ (8002b24 <SysTick_Config+0x40>)
 8002b0e:	2200      	movs	r2, #0
 8002b10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b12:	4b04      	ldr	r3, [pc, #16]	@ (8002b24 <SysTick_Config+0x40>)
 8002b14:	2207      	movs	r2, #7
 8002b16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b18:	2300      	movs	r3, #0
}
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	3708      	adds	r7, #8
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bd80      	pop	{r7, pc}
 8002b22:	bf00      	nop
 8002b24:	e000e010 	.word	0xe000e010

08002b28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b082      	sub	sp, #8
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b30:	6878      	ldr	r0, [r7, #4]
 8002b32:	f7ff ff29 	bl	8002988 <__NVIC_SetPriorityGrouping>
}
 8002b36:	bf00      	nop
 8002b38:	3708      	adds	r7, #8
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd80      	pop	{r7, pc}

08002b3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002b3e:	b580      	push	{r7, lr}
 8002b40:	b086      	sub	sp, #24
 8002b42:	af00      	add	r7, sp, #0
 8002b44:	4603      	mov	r3, r0
 8002b46:	60b9      	str	r1, [r7, #8]
 8002b48:	607a      	str	r2, [r7, #4]
 8002b4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002b50:	f7ff ff3e 	bl	80029d0 <__NVIC_GetPriorityGrouping>
 8002b54:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b56:	687a      	ldr	r2, [r7, #4]
 8002b58:	68b9      	ldr	r1, [r7, #8]
 8002b5a:	6978      	ldr	r0, [r7, #20]
 8002b5c:	f7ff ff8e 	bl	8002a7c <NVIC_EncodePriority>
 8002b60:	4602      	mov	r2, r0
 8002b62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b66:	4611      	mov	r1, r2
 8002b68:	4618      	mov	r0, r3
 8002b6a:	f7ff ff5d 	bl	8002a28 <__NVIC_SetPriority>
}
 8002b6e:	bf00      	nop
 8002b70:	3718      	adds	r7, #24
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bd80      	pop	{r7, pc}

08002b76 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b76:	b580      	push	{r7, lr}
 8002b78:	b082      	sub	sp, #8
 8002b7a:	af00      	add	r7, sp, #0
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b84:	4618      	mov	r0, r3
 8002b86:	f7ff ff31 	bl	80029ec <__NVIC_EnableIRQ>
}
 8002b8a:	bf00      	nop
 8002b8c:	3708      	adds	r7, #8
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bd80      	pop	{r7, pc}

08002b92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b92:	b580      	push	{r7, lr}
 8002b94:	b082      	sub	sp, #8
 8002b96:	af00      	add	r7, sp, #0
 8002b98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b9a:	6878      	ldr	r0, [r7, #4]
 8002b9c:	f7ff ffa2 	bl	8002ae4 <SysTick_Config>
 8002ba0:	4603      	mov	r3, r0
}
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	3708      	adds	r7, #8
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}
	...

08002bac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002bac:	b480      	push	{r7}
 8002bae:	b089      	sub	sp, #36	@ 0x24
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
 8002bb4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	61fb      	str	r3, [r7, #28]
 8002bc6:	e165      	b.n	8002e94 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002bc8:	2201      	movs	r2, #1
 8002bca:	69fb      	ldr	r3, [r7, #28]
 8002bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	697a      	ldr	r2, [r7, #20]
 8002bd8:	4013      	ands	r3, r2
 8002bda:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002bdc:	693a      	ldr	r2, [r7, #16]
 8002bde:	697b      	ldr	r3, [r7, #20]
 8002be0:	429a      	cmp	r2, r3
 8002be2:	f040 8154 	bne.w	8002e8e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	f003 0303 	and.w	r3, r3, #3
 8002bee:	2b01      	cmp	r3, #1
 8002bf0:	d005      	beq.n	8002bfe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002bfa:	2b02      	cmp	r3, #2
 8002bfc:	d130      	bne.n	8002c60 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	689b      	ldr	r3, [r3, #8]
 8002c02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002c04:	69fb      	ldr	r3, [r7, #28]
 8002c06:	005b      	lsls	r3, r3, #1
 8002c08:	2203      	movs	r2, #3
 8002c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c0e:	43db      	mvns	r3, r3
 8002c10:	69ba      	ldr	r2, [r7, #24]
 8002c12:	4013      	ands	r3, r2
 8002c14:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	68da      	ldr	r2, [r3, #12]
 8002c1a:	69fb      	ldr	r3, [r7, #28]
 8002c1c:	005b      	lsls	r3, r3, #1
 8002c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c22:	69ba      	ldr	r2, [r7, #24]
 8002c24:	4313      	orrs	r3, r2
 8002c26:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	69ba      	ldr	r2, [r7, #24]
 8002c2c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c34:	2201      	movs	r2, #1
 8002c36:	69fb      	ldr	r3, [r7, #28]
 8002c38:	fa02 f303 	lsl.w	r3, r2, r3
 8002c3c:	43db      	mvns	r3, r3
 8002c3e:	69ba      	ldr	r2, [r7, #24]
 8002c40:	4013      	ands	r3, r2
 8002c42:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	091b      	lsrs	r3, r3, #4
 8002c4a:	f003 0201 	and.w	r2, r3, #1
 8002c4e:	69fb      	ldr	r3, [r7, #28]
 8002c50:	fa02 f303 	lsl.w	r3, r2, r3
 8002c54:	69ba      	ldr	r2, [r7, #24]
 8002c56:	4313      	orrs	r3, r2
 8002c58:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	69ba      	ldr	r2, [r7, #24]
 8002c5e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	f003 0303 	and.w	r3, r3, #3
 8002c68:	2b03      	cmp	r3, #3
 8002c6a:	d017      	beq.n	8002c9c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	68db      	ldr	r3, [r3, #12]
 8002c70:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002c72:	69fb      	ldr	r3, [r7, #28]
 8002c74:	005b      	lsls	r3, r3, #1
 8002c76:	2203      	movs	r2, #3
 8002c78:	fa02 f303 	lsl.w	r3, r2, r3
 8002c7c:	43db      	mvns	r3, r3
 8002c7e:	69ba      	ldr	r2, [r7, #24]
 8002c80:	4013      	ands	r3, r2
 8002c82:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	689a      	ldr	r2, [r3, #8]
 8002c88:	69fb      	ldr	r3, [r7, #28]
 8002c8a:	005b      	lsls	r3, r3, #1
 8002c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c90:	69ba      	ldr	r2, [r7, #24]
 8002c92:	4313      	orrs	r3, r2
 8002c94:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	69ba      	ldr	r2, [r7, #24]
 8002c9a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	f003 0303 	and.w	r3, r3, #3
 8002ca4:	2b02      	cmp	r3, #2
 8002ca6:	d123      	bne.n	8002cf0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002ca8:	69fb      	ldr	r3, [r7, #28]
 8002caa:	08da      	lsrs	r2, r3, #3
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	3208      	adds	r2, #8
 8002cb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002cb4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002cb6:	69fb      	ldr	r3, [r7, #28]
 8002cb8:	f003 0307 	and.w	r3, r3, #7
 8002cbc:	009b      	lsls	r3, r3, #2
 8002cbe:	220f      	movs	r2, #15
 8002cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc4:	43db      	mvns	r3, r3
 8002cc6:	69ba      	ldr	r2, [r7, #24]
 8002cc8:	4013      	ands	r3, r2
 8002cca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	691a      	ldr	r2, [r3, #16]
 8002cd0:	69fb      	ldr	r3, [r7, #28]
 8002cd2:	f003 0307 	and.w	r3, r3, #7
 8002cd6:	009b      	lsls	r3, r3, #2
 8002cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cdc:	69ba      	ldr	r2, [r7, #24]
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002ce2:	69fb      	ldr	r3, [r7, #28]
 8002ce4:	08da      	lsrs	r2, r3, #3
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	3208      	adds	r2, #8
 8002cea:	69b9      	ldr	r1, [r7, #24]
 8002cec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002cf6:	69fb      	ldr	r3, [r7, #28]
 8002cf8:	005b      	lsls	r3, r3, #1
 8002cfa:	2203      	movs	r2, #3
 8002cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8002d00:	43db      	mvns	r3, r3
 8002d02:	69ba      	ldr	r2, [r7, #24]
 8002d04:	4013      	ands	r3, r2
 8002d06:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	f003 0203 	and.w	r2, r3, #3
 8002d10:	69fb      	ldr	r3, [r7, #28]
 8002d12:	005b      	lsls	r3, r3, #1
 8002d14:	fa02 f303 	lsl.w	r3, r2, r3
 8002d18:	69ba      	ldr	r2, [r7, #24]
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	69ba      	ldr	r2, [r7, #24]
 8002d22:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	f000 80ae 	beq.w	8002e8e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d32:	2300      	movs	r3, #0
 8002d34:	60fb      	str	r3, [r7, #12]
 8002d36:	4b5d      	ldr	r3, [pc, #372]	@ (8002eac <HAL_GPIO_Init+0x300>)
 8002d38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d3a:	4a5c      	ldr	r2, [pc, #368]	@ (8002eac <HAL_GPIO_Init+0x300>)
 8002d3c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002d40:	6453      	str	r3, [r2, #68]	@ 0x44
 8002d42:	4b5a      	ldr	r3, [pc, #360]	@ (8002eac <HAL_GPIO_Init+0x300>)
 8002d44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d46:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002d4a:	60fb      	str	r3, [r7, #12]
 8002d4c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002d4e:	4a58      	ldr	r2, [pc, #352]	@ (8002eb0 <HAL_GPIO_Init+0x304>)
 8002d50:	69fb      	ldr	r3, [r7, #28]
 8002d52:	089b      	lsrs	r3, r3, #2
 8002d54:	3302      	adds	r3, #2
 8002d56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002d5c:	69fb      	ldr	r3, [r7, #28]
 8002d5e:	f003 0303 	and.w	r3, r3, #3
 8002d62:	009b      	lsls	r3, r3, #2
 8002d64:	220f      	movs	r2, #15
 8002d66:	fa02 f303 	lsl.w	r3, r2, r3
 8002d6a:	43db      	mvns	r3, r3
 8002d6c:	69ba      	ldr	r2, [r7, #24]
 8002d6e:	4013      	ands	r3, r2
 8002d70:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	4a4f      	ldr	r2, [pc, #316]	@ (8002eb4 <HAL_GPIO_Init+0x308>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d025      	beq.n	8002dc6 <HAL_GPIO_Init+0x21a>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	4a4e      	ldr	r2, [pc, #312]	@ (8002eb8 <HAL_GPIO_Init+0x30c>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d01f      	beq.n	8002dc2 <HAL_GPIO_Init+0x216>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	4a4d      	ldr	r2, [pc, #308]	@ (8002ebc <HAL_GPIO_Init+0x310>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d019      	beq.n	8002dbe <HAL_GPIO_Init+0x212>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	4a4c      	ldr	r2, [pc, #304]	@ (8002ec0 <HAL_GPIO_Init+0x314>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d013      	beq.n	8002dba <HAL_GPIO_Init+0x20e>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	4a4b      	ldr	r2, [pc, #300]	@ (8002ec4 <HAL_GPIO_Init+0x318>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d00d      	beq.n	8002db6 <HAL_GPIO_Init+0x20a>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	4a4a      	ldr	r2, [pc, #296]	@ (8002ec8 <HAL_GPIO_Init+0x31c>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d007      	beq.n	8002db2 <HAL_GPIO_Init+0x206>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	4a49      	ldr	r2, [pc, #292]	@ (8002ecc <HAL_GPIO_Init+0x320>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d101      	bne.n	8002dae <HAL_GPIO_Init+0x202>
 8002daa:	2306      	movs	r3, #6
 8002dac:	e00c      	b.n	8002dc8 <HAL_GPIO_Init+0x21c>
 8002dae:	2307      	movs	r3, #7
 8002db0:	e00a      	b.n	8002dc8 <HAL_GPIO_Init+0x21c>
 8002db2:	2305      	movs	r3, #5
 8002db4:	e008      	b.n	8002dc8 <HAL_GPIO_Init+0x21c>
 8002db6:	2304      	movs	r3, #4
 8002db8:	e006      	b.n	8002dc8 <HAL_GPIO_Init+0x21c>
 8002dba:	2303      	movs	r3, #3
 8002dbc:	e004      	b.n	8002dc8 <HAL_GPIO_Init+0x21c>
 8002dbe:	2302      	movs	r3, #2
 8002dc0:	e002      	b.n	8002dc8 <HAL_GPIO_Init+0x21c>
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	e000      	b.n	8002dc8 <HAL_GPIO_Init+0x21c>
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	69fa      	ldr	r2, [r7, #28]
 8002dca:	f002 0203 	and.w	r2, r2, #3
 8002dce:	0092      	lsls	r2, r2, #2
 8002dd0:	4093      	lsls	r3, r2
 8002dd2:	69ba      	ldr	r2, [r7, #24]
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002dd8:	4935      	ldr	r1, [pc, #212]	@ (8002eb0 <HAL_GPIO_Init+0x304>)
 8002dda:	69fb      	ldr	r3, [r7, #28]
 8002ddc:	089b      	lsrs	r3, r3, #2
 8002dde:	3302      	adds	r3, #2
 8002de0:	69ba      	ldr	r2, [r7, #24]
 8002de2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002de6:	4b3a      	ldr	r3, [pc, #232]	@ (8002ed0 <HAL_GPIO_Init+0x324>)
 8002de8:	689b      	ldr	r3, [r3, #8]
 8002dea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dec:	693b      	ldr	r3, [r7, #16]
 8002dee:	43db      	mvns	r3, r3
 8002df0:	69ba      	ldr	r2, [r7, #24]
 8002df2:	4013      	ands	r3, r2
 8002df4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d003      	beq.n	8002e0a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002e02:	69ba      	ldr	r2, [r7, #24]
 8002e04:	693b      	ldr	r3, [r7, #16]
 8002e06:	4313      	orrs	r3, r2
 8002e08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002e0a:	4a31      	ldr	r2, [pc, #196]	@ (8002ed0 <HAL_GPIO_Init+0x324>)
 8002e0c:	69bb      	ldr	r3, [r7, #24]
 8002e0e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002e10:	4b2f      	ldr	r3, [pc, #188]	@ (8002ed0 <HAL_GPIO_Init+0x324>)
 8002e12:	68db      	ldr	r3, [r3, #12]
 8002e14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e16:	693b      	ldr	r3, [r7, #16]
 8002e18:	43db      	mvns	r3, r3
 8002e1a:	69ba      	ldr	r2, [r7, #24]
 8002e1c:	4013      	ands	r3, r2
 8002e1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d003      	beq.n	8002e34 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002e2c:	69ba      	ldr	r2, [r7, #24]
 8002e2e:	693b      	ldr	r3, [r7, #16]
 8002e30:	4313      	orrs	r3, r2
 8002e32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002e34:	4a26      	ldr	r2, [pc, #152]	@ (8002ed0 <HAL_GPIO_Init+0x324>)
 8002e36:	69bb      	ldr	r3, [r7, #24]
 8002e38:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002e3a:	4b25      	ldr	r3, [pc, #148]	@ (8002ed0 <HAL_GPIO_Init+0x324>)
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e40:	693b      	ldr	r3, [r7, #16]
 8002e42:	43db      	mvns	r3, r3
 8002e44:	69ba      	ldr	r2, [r7, #24]
 8002e46:	4013      	ands	r3, r2
 8002e48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d003      	beq.n	8002e5e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002e56:	69ba      	ldr	r2, [r7, #24]
 8002e58:	693b      	ldr	r3, [r7, #16]
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002e5e:	4a1c      	ldr	r2, [pc, #112]	@ (8002ed0 <HAL_GPIO_Init+0x324>)
 8002e60:	69bb      	ldr	r3, [r7, #24]
 8002e62:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e64:	4b1a      	ldr	r3, [pc, #104]	@ (8002ed0 <HAL_GPIO_Init+0x324>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e6a:	693b      	ldr	r3, [r7, #16]
 8002e6c:	43db      	mvns	r3, r3
 8002e6e:	69ba      	ldr	r2, [r7, #24]
 8002e70:	4013      	ands	r3, r2
 8002e72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d003      	beq.n	8002e88 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002e80:	69ba      	ldr	r2, [r7, #24]
 8002e82:	693b      	ldr	r3, [r7, #16]
 8002e84:	4313      	orrs	r3, r2
 8002e86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002e88:	4a11      	ldr	r2, [pc, #68]	@ (8002ed0 <HAL_GPIO_Init+0x324>)
 8002e8a:	69bb      	ldr	r3, [r7, #24]
 8002e8c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e8e:	69fb      	ldr	r3, [r7, #28]
 8002e90:	3301      	adds	r3, #1
 8002e92:	61fb      	str	r3, [r7, #28]
 8002e94:	69fb      	ldr	r3, [r7, #28]
 8002e96:	2b0f      	cmp	r3, #15
 8002e98:	f67f ae96 	bls.w	8002bc8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002e9c:	bf00      	nop
 8002e9e:	bf00      	nop
 8002ea0:	3724      	adds	r7, #36	@ 0x24
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea8:	4770      	bx	lr
 8002eaa:	bf00      	nop
 8002eac:	40023800 	.word	0x40023800
 8002eb0:	40013800 	.word	0x40013800
 8002eb4:	40020000 	.word	0x40020000
 8002eb8:	40020400 	.word	0x40020400
 8002ebc:	40020800 	.word	0x40020800
 8002ec0:	40020c00 	.word	0x40020c00
 8002ec4:	40021000 	.word	0x40021000
 8002ec8:	40021400 	.word	0x40021400
 8002ecc:	40021800 	.word	0x40021800
 8002ed0:	40013c00 	.word	0x40013c00

08002ed4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	b085      	sub	sp, #20
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
 8002edc:	460b      	mov	r3, r1
 8002ede:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	691a      	ldr	r2, [r3, #16]
 8002ee4:	887b      	ldrh	r3, [r7, #2]
 8002ee6:	4013      	ands	r3, r2
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d002      	beq.n	8002ef2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002eec:	2301      	movs	r3, #1
 8002eee:	73fb      	strb	r3, [r7, #15]
 8002ef0:	e001      	b.n	8002ef6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002ef6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ef8:	4618      	mov	r0, r3
 8002efa:	3714      	adds	r7, #20
 8002efc:	46bd      	mov	sp, r7
 8002efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f02:	4770      	bx	lr

08002f04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f04:	b480      	push	{r7}
 8002f06:	b083      	sub	sp, #12
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
 8002f0c:	460b      	mov	r3, r1
 8002f0e:	807b      	strh	r3, [r7, #2]
 8002f10:	4613      	mov	r3, r2
 8002f12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002f14:	787b      	ldrb	r3, [r7, #1]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d003      	beq.n	8002f22 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f1a:	887a      	ldrh	r2, [r7, #2]
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002f20:	e003      	b.n	8002f2a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002f22:	887b      	ldrh	r3, [r7, #2]
 8002f24:	041a      	lsls	r2, r3, #16
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	619a      	str	r2, [r3, #24]
}
 8002f2a:	bf00      	nop
 8002f2c:	370c      	adds	r7, #12
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f34:	4770      	bx	lr
	...

08002f38 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b082      	sub	sp, #8
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	4603      	mov	r3, r0
 8002f40:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002f42:	4b08      	ldr	r3, [pc, #32]	@ (8002f64 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002f44:	695a      	ldr	r2, [r3, #20]
 8002f46:	88fb      	ldrh	r3, [r7, #6]
 8002f48:	4013      	ands	r3, r2
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d006      	beq.n	8002f5c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002f4e:	4a05      	ldr	r2, [pc, #20]	@ (8002f64 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002f50:	88fb      	ldrh	r3, [r7, #6]
 8002f52:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002f54:	88fb      	ldrh	r3, [r7, #6]
 8002f56:	4618      	mov	r0, r3
 8002f58:	f7fe fd4a 	bl	80019f0 <HAL_GPIO_EXTI_Callback>
  }
}
 8002f5c:	bf00      	nop
 8002f5e:	3708      	adds	r7, #8
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bd80      	pop	{r7, pc}
 8002f64:	40013c00 	.word	0x40013c00

08002f68 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b084      	sub	sp, #16
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d101      	bne.n	8002f7a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002f76:	2301      	movs	r3, #1
 8002f78:	e12b      	b.n	80031d2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f80:	b2db      	uxtb	r3, r3
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d106      	bne.n	8002f94 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2200      	movs	r2, #0
 8002f8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002f8e:	6878      	ldr	r0, [r7, #4]
 8002f90:	f7fe fc12 	bl	80017b8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2224      	movs	r2, #36	@ 0x24
 8002f98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	681a      	ldr	r2, [r3, #0]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f022 0201 	bic.w	r2, r2, #1
 8002faa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	681a      	ldr	r2, [r3, #0]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002fba:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	681a      	ldr	r2, [r3, #0]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002fca:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002fcc:	f001 f8b8 	bl	8004140 <HAL_RCC_GetPCLK1Freq>
 8002fd0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	4a81      	ldr	r2, [pc, #516]	@ (80031dc <HAL_I2C_Init+0x274>)
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d807      	bhi.n	8002fec <HAL_I2C_Init+0x84>
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	4a80      	ldr	r2, [pc, #512]	@ (80031e0 <HAL_I2C_Init+0x278>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	bf94      	ite	ls
 8002fe4:	2301      	movls	r3, #1
 8002fe6:	2300      	movhi	r3, #0
 8002fe8:	b2db      	uxtb	r3, r3
 8002fea:	e006      	b.n	8002ffa <HAL_I2C_Init+0x92>
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	4a7d      	ldr	r2, [pc, #500]	@ (80031e4 <HAL_I2C_Init+0x27c>)
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	bf94      	ite	ls
 8002ff4:	2301      	movls	r3, #1
 8002ff6:	2300      	movhi	r3, #0
 8002ff8:	b2db      	uxtb	r3, r3
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d001      	beq.n	8003002 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002ffe:	2301      	movs	r3, #1
 8003000:	e0e7      	b.n	80031d2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	4a78      	ldr	r2, [pc, #480]	@ (80031e8 <HAL_I2C_Init+0x280>)
 8003006:	fba2 2303 	umull	r2, r3, r2, r3
 800300a:	0c9b      	lsrs	r3, r3, #18
 800300c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	68ba      	ldr	r2, [r7, #8]
 800301e:	430a      	orrs	r2, r1
 8003020:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	6a1b      	ldr	r3, [r3, #32]
 8003028:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	4a6a      	ldr	r2, [pc, #424]	@ (80031dc <HAL_I2C_Init+0x274>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d802      	bhi.n	800303c <HAL_I2C_Init+0xd4>
 8003036:	68bb      	ldr	r3, [r7, #8]
 8003038:	3301      	adds	r3, #1
 800303a:	e009      	b.n	8003050 <HAL_I2C_Init+0xe8>
 800303c:	68bb      	ldr	r3, [r7, #8]
 800303e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003042:	fb02 f303 	mul.w	r3, r2, r3
 8003046:	4a69      	ldr	r2, [pc, #420]	@ (80031ec <HAL_I2C_Init+0x284>)
 8003048:	fba2 2303 	umull	r2, r3, r2, r3
 800304c:	099b      	lsrs	r3, r3, #6
 800304e:	3301      	adds	r3, #1
 8003050:	687a      	ldr	r2, [r7, #4]
 8003052:	6812      	ldr	r2, [r2, #0]
 8003054:	430b      	orrs	r3, r1
 8003056:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	69db      	ldr	r3, [r3, #28]
 800305e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003062:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	495c      	ldr	r1, [pc, #368]	@ (80031dc <HAL_I2C_Init+0x274>)
 800306c:	428b      	cmp	r3, r1
 800306e:	d819      	bhi.n	80030a4 <HAL_I2C_Init+0x13c>
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	1e59      	subs	r1, r3, #1
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	005b      	lsls	r3, r3, #1
 800307a:	fbb1 f3f3 	udiv	r3, r1, r3
 800307e:	1c59      	adds	r1, r3, #1
 8003080:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003084:	400b      	ands	r3, r1
 8003086:	2b00      	cmp	r3, #0
 8003088:	d00a      	beq.n	80030a0 <HAL_I2C_Init+0x138>
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	1e59      	subs	r1, r3, #1
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	005b      	lsls	r3, r3, #1
 8003094:	fbb1 f3f3 	udiv	r3, r1, r3
 8003098:	3301      	adds	r3, #1
 800309a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800309e:	e051      	b.n	8003144 <HAL_I2C_Init+0x1dc>
 80030a0:	2304      	movs	r3, #4
 80030a2:	e04f      	b.n	8003144 <HAL_I2C_Init+0x1dc>
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	689b      	ldr	r3, [r3, #8]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d111      	bne.n	80030d0 <HAL_I2C_Init+0x168>
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	1e58      	subs	r0, r3, #1
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6859      	ldr	r1, [r3, #4]
 80030b4:	460b      	mov	r3, r1
 80030b6:	005b      	lsls	r3, r3, #1
 80030b8:	440b      	add	r3, r1
 80030ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80030be:	3301      	adds	r3, #1
 80030c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	bf0c      	ite	eq
 80030c8:	2301      	moveq	r3, #1
 80030ca:	2300      	movne	r3, #0
 80030cc:	b2db      	uxtb	r3, r3
 80030ce:	e012      	b.n	80030f6 <HAL_I2C_Init+0x18e>
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	1e58      	subs	r0, r3, #1
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6859      	ldr	r1, [r3, #4]
 80030d8:	460b      	mov	r3, r1
 80030da:	009b      	lsls	r3, r3, #2
 80030dc:	440b      	add	r3, r1
 80030de:	0099      	lsls	r1, r3, #2
 80030e0:	440b      	add	r3, r1
 80030e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80030e6:	3301      	adds	r3, #1
 80030e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	bf0c      	ite	eq
 80030f0:	2301      	moveq	r3, #1
 80030f2:	2300      	movne	r3, #0
 80030f4:	b2db      	uxtb	r3, r3
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d001      	beq.n	80030fe <HAL_I2C_Init+0x196>
 80030fa:	2301      	movs	r3, #1
 80030fc:	e022      	b.n	8003144 <HAL_I2C_Init+0x1dc>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	689b      	ldr	r3, [r3, #8]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d10e      	bne.n	8003124 <HAL_I2C_Init+0x1bc>
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	1e58      	subs	r0, r3, #1
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6859      	ldr	r1, [r3, #4]
 800310e:	460b      	mov	r3, r1
 8003110:	005b      	lsls	r3, r3, #1
 8003112:	440b      	add	r3, r1
 8003114:	fbb0 f3f3 	udiv	r3, r0, r3
 8003118:	3301      	adds	r3, #1
 800311a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800311e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003122:	e00f      	b.n	8003144 <HAL_I2C_Init+0x1dc>
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	1e58      	subs	r0, r3, #1
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6859      	ldr	r1, [r3, #4]
 800312c:	460b      	mov	r3, r1
 800312e:	009b      	lsls	r3, r3, #2
 8003130:	440b      	add	r3, r1
 8003132:	0099      	lsls	r1, r3, #2
 8003134:	440b      	add	r3, r1
 8003136:	fbb0 f3f3 	udiv	r3, r0, r3
 800313a:	3301      	adds	r3, #1
 800313c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003140:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003144:	6879      	ldr	r1, [r7, #4]
 8003146:	6809      	ldr	r1, [r1, #0]
 8003148:	4313      	orrs	r3, r2
 800314a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	69da      	ldr	r2, [r3, #28]
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6a1b      	ldr	r3, [r3, #32]
 800315e:	431a      	orrs	r2, r3
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	430a      	orrs	r2, r1
 8003166:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	689b      	ldr	r3, [r3, #8]
 800316e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003172:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003176:	687a      	ldr	r2, [r7, #4]
 8003178:	6911      	ldr	r1, [r2, #16]
 800317a:	687a      	ldr	r2, [r7, #4]
 800317c:	68d2      	ldr	r2, [r2, #12]
 800317e:	4311      	orrs	r1, r2
 8003180:	687a      	ldr	r2, [r7, #4]
 8003182:	6812      	ldr	r2, [r2, #0]
 8003184:	430b      	orrs	r3, r1
 8003186:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	68db      	ldr	r3, [r3, #12]
 800318e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	695a      	ldr	r2, [r3, #20]
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	699b      	ldr	r3, [r3, #24]
 800319a:	431a      	orrs	r2, r3
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	430a      	orrs	r2, r1
 80031a2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	681a      	ldr	r2, [r3, #0]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f042 0201 	orr.w	r2, r2, #1
 80031b2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2200      	movs	r2, #0
 80031b8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2220      	movs	r2, #32
 80031be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2200      	movs	r2, #0
 80031c6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2200      	movs	r2, #0
 80031cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80031d0:	2300      	movs	r3, #0
}
 80031d2:	4618      	mov	r0, r3
 80031d4:	3710      	adds	r7, #16
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd80      	pop	{r7, pc}
 80031da:	bf00      	nop
 80031dc:	000186a0 	.word	0x000186a0
 80031e0:	001e847f 	.word	0x001e847f
 80031e4:	003d08ff 	.word	0x003d08ff
 80031e8:	431bde83 	.word	0x431bde83
 80031ec:	10624dd3 	.word	0x10624dd3

080031f0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b088      	sub	sp, #32
 80031f4:	af02      	add	r7, sp, #8
 80031f6:	60f8      	str	r0, [r7, #12]
 80031f8:	607a      	str	r2, [r7, #4]
 80031fa:	461a      	mov	r2, r3
 80031fc:	460b      	mov	r3, r1
 80031fe:	817b      	strh	r3, [r7, #10]
 8003200:	4613      	mov	r3, r2
 8003202:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003204:	f7ff fb90 	bl	8002928 <HAL_GetTick>
 8003208:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003210:	b2db      	uxtb	r3, r3
 8003212:	2b20      	cmp	r3, #32
 8003214:	f040 80e0 	bne.w	80033d8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003218:	697b      	ldr	r3, [r7, #20]
 800321a:	9300      	str	r3, [sp, #0]
 800321c:	2319      	movs	r3, #25
 800321e:	2201      	movs	r2, #1
 8003220:	4970      	ldr	r1, [pc, #448]	@ (80033e4 <HAL_I2C_Master_Transmit+0x1f4>)
 8003222:	68f8      	ldr	r0, [r7, #12]
 8003224:	f000 fc64 	bl	8003af0 <I2C_WaitOnFlagUntilTimeout>
 8003228:	4603      	mov	r3, r0
 800322a:	2b00      	cmp	r3, #0
 800322c:	d001      	beq.n	8003232 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800322e:	2302      	movs	r3, #2
 8003230:	e0d3      	b.n	80033da <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003238:	2b01      	cmp	r3, #1
 800323a:	d101      	bne.n	8003240 <HAL_I2C_Master_Transmit+0x50>
 800323c:	2302      	movs	r3, #2
 800323e:	e0cc      	b.n	80033da <HAL_I2C_Master_Transmit+0x1ea>
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	2201      	movs	r2, #1
 8003244:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f003 0301 	and.w	r3, r3, #1
 8003252:	2b01      	cmp	r3, #1
 8003254:	d007      	beq.n	8003266 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	681a      	ldr	r2, [r3, #0]
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f042 0201 	orr.w	r2, r2, #1
 8003264:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	681a      	ldr	r2, [r3, #0]
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003274:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	2221      	movs	r2, #33	@ 0x21
 800327a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	2210      	movs	r2, #16
 8003282:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	2200      	movs	r2, #0
 800328a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	687a      	ldr	r2, [r7, #4]
 8003290:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	893a      	ldrh	r2, [r7, #8]
 8003296:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800329c:	b29a      	uxth	r2, r3
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	4a50      	ldr	r2, [pc, #320]	@ (80033e8 <HAL_I2C_Master_Transmit+0x1f8>)
 80032a6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80032a8:	8979      	ldrh	r1, [r7, #10]
 80032aa:	697b      	ldr	r3, [r7, #20]
 80032ac:	6a3a      	ldr	r2, [r7, #32]
 80032ae:	68f8      	ldr	r0, [r7, #12]
 80032b0:	f000 face 	bl	8003850 <I2C_MasterRequestWrite>
 80032b4:	4603      	mov	r3, r0
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d001      	beq.n	80032be <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80032ba:	2301      	movs	r3, #1
 80032bc:	e08d      	b.n	80033da <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032be:	2300      	movs	r3, #0
 80032c0:	613b      	str	r3, [r7, #16]
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	695b      	ldr	r3, [r3, #20]
 80032c8:	613b      	str	r3, [r7, #16]
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	699b      	ldr	r3, [r3, #24]
 80032d0:	613b      	str	r3, [r7, #16]
 80032d2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80032d4:	e066      	b.n	80033a4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032d6:	697a      	ldr	r2, [r7, #20]
 80032d8:	6a39      	ldr	r1, [r7, #32]
 80032da:	68f8      	ldr	r0, [r7, #12]
 80032dc:	f000 fd22 	bl	8003d24 <I2C_WaitOnTXEFlagUntilTimeout>
 80032e0:	4603      	mov	r3, r0
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d00d      	beq.n	8003302 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032ea:	2b04      	cmp	r3, #4
 80032ec:	d107      	bne.n	80032fe <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	681a      	ldr	r2, [r3, #0]
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80032fc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80032fe:	2301      	movs	r3, #1
 8003300:	e06b      	b.n	80033da <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003306:	781a      	ldrb	r2, [r3, #0]
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003312:	1c5a      	adds	r2, r3, #1
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800331c:	b29b      	uxth	r3, r3
 800331e:	3b01      	subs	r3, #1
 8003320:	b29a      	uxth	r2, r3
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800332a:	3b01      	subs	r3, #1
 800332c:	b29a      	uxth	r2, r3
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	695b      	ldr	r3, [r3, #20]
 8003338:	f003 0304 	and.w	r3, r3, #4
 800333c:	2b04      	cmp	r3, #4
 800333e:	d11b      	bne.n	8003378 <HAL_I2C_Master_Transmit+0x188>
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003344:	2b00      	cmp	r3, #0
 8003346:	d017      	beq.n	8003378 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800334c:	781a      	ldrb	r2, [r3, #0]
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003358:	1c5a      	adds	r2, r3, #1
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003362:	b29b      	uxth	r3, r3
 8003364:	3b01      	subs	r3, #1
 8003366:	b29a      	uxth	r2, r3
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003370:	3b01      	subs	r3, #1
 8003372:	b29a      	uxth	r2, r3
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003378:	697a      	ldr	r2, [r7, #20]
 800337a:	6a39      	ldr	r1, [r7, #32]
 800337c:	68f8      	ldr	r0, [r7, #12]
 800337e:	f000 fd19 	bl	8003db4 <I2C_WaitOnBTFFlagUntilTimeout>
 8003382:	4603      	mov	r3, r0
 8003384:	2b00      	cmp	r3, #0
 8003386:	d00d      	beq.n	80033a4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800338c:	2b04      	cmp	r3, #4
 800338e:	d107      	bne.n	80033a0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	681a      	ldr	r2, [r3, #0]
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800339e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80033a0:	2301      	movs	r3, #1
 80033a2:	e01a      	b.n	80033da <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d194      	bne.n	80032d6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	681a      	ldr	r2, [r3, #0]
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80033ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	2220      	movs	r2, #32
 80033c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	2200      	movs	r2, #0
 80033c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	2200      	movs	r2, #0
 80033d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80033d4:	2300      	movs	r3, #0
 80033d6:	e000      	b.n	80033da <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80033d8:	2302      	movs	r3, #2
  }
}
 80033da:	4618      	mov	r0, r3
 80033dc:	3718      	adds	r7, #24
 80033de:	46bd      	mov	sp, r7
 80033e0:	bd80      	pop	{r7, pc}
 80033e2:	bf00      	nop
 80033e4:	00100002 	.word	0x00100002
 80033e8:	ffff0000 	.word	0xffff0000

080033ec <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b08c      	sub	sp, #48	@ 0x30
 80033f0:	af02      	add	r7, sp, #8
 80033f2:	60f8      	str	r0, [r7, #12]
 80033f4:	607a      	str	r2, [r7, #4]
 80033f6:	461a      	mov	r2, r3
 80033f8:	460b      	mov	r3, r1
 80033fa:	817b      	strh	r3, [r7, #10]
 80033fc:	4613      	mov	r3, r2
 80033fe:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003400:	f7ff fa92 	bl	8002928 <HAL_GetTick>
 8003404:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800340c:	b2db      	uxtb	r3, r3
 800340e:	2b20      	cmp	r3, #32
 8003410:	f040 8217 	bne.w	8003842 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003414:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003416:	9300      	str	r3, [sp, #0]
 8003418:	2319      	movs	r3, #25
 800341a:	2201      	movs	r2, #1
 800341c:	497c      	ldr	r1, [pc, #496]	@ (8003610 <HAL_I2C_Master_Receive+0x224>)
 800341e:	68f8      	ldr	r0, [r7, #12]
 8003420:	f000 fb66 	bl	8003af0 <I2C_WaitOnFlagUntilTimeout>
 8003424:	4603      	mov	r3, r0
 8003426:	2b00      	cmp	r3, #0
 8003428:	d001      	beq.n	800342e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800342a:	2302      	movs	r3, #2
 800342c:	e20a      	b.n	8003844 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003434:	2b01      	cmp	r3, #1
 8003436:	d101      	bne.n	800343c <HAL_I2C_Master_Receive+0x50>
 8003438:	2302      	movs	r3, #2
 800343a:	e203      	b.n	8003844 <HAL_I2C_Master_Receive+0x458>
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	2201      	movs	r2, #1
 8003440:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f003 0301 	and.w	r3, r3, #1
 800344e:	2b01      	cmp	r3, #1
 8003450:	d007      	beq.n	8003462 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	681a      	ldr	r2, [r3, #0]
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f042 0201 	orr.w	r2, r2, #1
 8003460:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	681a      	ldr	r2, [r3, #0]
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003470:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	2222      	movs	r2, #34	@ 0x22
 8003476:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	2210      	movs	r2, #16
 800347e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	2200      	movs	r2, #0
 8003486:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	687a      	ldr	r2, [r7, #4]
 800348c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	893a      	ldrh	r2, [r7, #8]
 8003492:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003498:	b29a      	uxth	r2, r3
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	4a5c      	ldr	r2, [pc, #368]	@ (8003614 <HAL_I2C_Master_Receive+0x228>)
 80034a2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80034a4:	8979      	ldrh	r1, [r7, #10]
 80034a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80034aa:	68f8      	ldr	r0, [r7, #12]
 80034ac:	f000 fa52 	bl	8003954 <I2C_MasterRequestRead>
 80034b0:	4603      	mov	r3, r0
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d001      	beq.n	80034ba <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80034b6:	2301      	movs	r3, #1
 80034b8:	e1c4      	b.n	8003844 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d113      	bne.n	80034ea <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034c2:	2300      	movs	r3, #0
 80034c4:	623b      	str	r3, [r7, #32]
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	695b      	ldr	r3, [r3, #20]
 80034cc:	623b      	str	r3, [r7, #32]
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	699b      	ldr	r3, [r3, #24]
 80034d4:	623b      	str	r3, [r7, #32]
 80034d6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	681a      	ldr	r2, [r3, #0]
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80034e6:	601a      	str	r2, [r3, #0]
 80034e8:	e198      	b.n	800381c <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034ee:	2b01      	cmp	r3, #1
 80034f0:	d11b      	bne.n	800352a <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	681a      	ldr	r2, [r3, #0]
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003500:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003502:	2300      	movs	r3, #0
 8003504:	61fb      	str	r3, [r7, #28]
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	695b      	ldr	r3, [r3, #20]
 800350c:	61fb      	str	r3, [r7, #28]
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	699b      	ldr	r3, [r3, #24]
 8003514:	61fb      	str	r3, [r7, #28]
 8003516:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	681a      	ldr	r2, [r3, #0]
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003526:	601a      	str	r2, [r3, #0]
 8003528:	e178      	b.n	800381c <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800352e:	2b02      	cmp	r3, #2
 8003530:	d11b      	bne.n	800356a <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	681a      	ldr	r2, [r3, #0]
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003540:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	681a      	ldr	r2, [r3, #0]
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003550:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003552:	2300      	movs	r3, #0
 8003554:	61bb      	str	r3, [r7, #24]
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	695b      	ldr	r3, [r3, #20]
 800355c:	61bb      	str	r3, [r7, #24]
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	699b      	ldr	r3, [r3, #24]
 8003564:	61bb      	str	r3, [r7, #24]
 8003566:	69bb      	ldr	r3, [r7, #24]
 8003568:	e158      	b.n	800381c <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	681a      	ldr	r2, [r3, #0]
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003578:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800357a:	2300      	movs	r3, #0
 800357c:	617b      	str	r3, [r7, #20]
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	695b      	ldr	r3, [r3, #20]
 8003584:	617b      	str	r3, [r7, #20]
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	699b      	ldr	r3, [r3, #24]
 800358c:	617b      	str	r3, [r7, #20]
 800358e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003590:	e144      	b.n	800381c <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003596:	2b03      	cmp	r3, #3
 8003598:	f200 80f1 	bhi.w	800377e <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035a0:	2b01      	cmp	r3, #1
 80035a2:	d123      	bne.n	80035ec <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035a6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80035a8:	68f8      	ldr	r0, [r7, #12]
 80035aa:	f000 fc4b 	bl	8003e44 <I2C_WaitOnRXNEFlagUntilTimeout>
 80035ae:	4603      	mov	r3, r0
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d001      	beq.n	80035b8 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80035b4:	2301      	movs	r3, #1
 80035b6:	e145      	b.n	8003844 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	691a      	ldr	r2, [r3, #16]
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035c2:	b2d2      	uxtb	r2, r2
 80035c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035ca:	1c5a      	adds	r2, r3, #1
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035d4:	3b01      	subs	r3, #1
 80035d6:	b29a      	uxth	r2, r3
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035e0:	b29b      	uxth	r3, r3
 80035e2:	3b01      	subs	r3, #1
 80035e4:	b29a      	uxth	r2, r3
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80035ea:	e117      	b.n	800381c <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035f0:	2b02      	cmp	r3, #2
 80035f2:	d14e      	bne.n	8003692 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80035f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035f6:	9300      	str	r3, [sp, #0]
 80035f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035fa:	2200      	movs	r2, #0
 80035fc:	4906      	ldr	r1, [pc, #24]	@ (8003618 <HAL_I2C_Master_Receive+0x22c>)
 80035fe:	68f8      	ldr	r0, [r7, #12]
 8003600:	f000 fa76 	bl	8003af0 <I2C_WaitOnFlagUntilTimeout>
 8003604:	4603      	mov	r3, r0
 8003606:	2b00      	cmp	r3, #0
 8003608:	d008      	beq.n	800361c <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800360a:	2301      	movs	r3, #1
 800360c:	e11a      	b.n	8003844 <HAL_I2C_Master_Receive+0x458>
 800360e:	bf00      	nop
 8003610:	00100002 	.word	0x00100002
 8003614:	ffff0000 	.word	0xffff0000
 8003618:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	681a      	ldr	r2, [r3, #0]
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800362a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	691a      	ldr	r2, [r3, #16]
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003636:	b2d2      	uxtb	r2, r2
 8003638:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800363e:	1c5a      	adds	r2, r3, #1
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003648:	3b01      	subs	r3, #1
 800364a:	b29a      	uxth	r2, r3
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003654:	b29b      	uxth	r3, r3
 8003656:	3b01      	subs	r3, #1
 8003658:	b29a      	uxth	r2, r3
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	691a      	ldr	r2, [r3, #16]
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003668:	b2d2      	uxtb	r2, r2
 800366a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003670:	1c5a      	adds	r2, r3, #1
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800367a:	3b01      	subs	r3, #1
 800367c:	b29a      	uxth	r2, r3
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003686:	b29b      	uxth	r3, r3
 8003688:	3b01      	subs	r3, #1
 800368a:	b29a      	uxth	r2, r3
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003690:	e0c4      	b.n	800381c <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003692:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003694:	9300      	str	r3, [sp, #0]
 8003696:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003698:	2200      	movs	r2, #0
 800369a:	496c      	ldr	r1, [pc, #432]	@ (800384c <HAL_I2C_Master_Receive+0x460>)
 800369c:	68f8      	ldr	r0, [r7, #12]
 800369e:	f000 fa27 	bl	8003af0 <I2C_WaitOnFlagUntilTimeout>
 80036a2:	4603      	mov	r3, r0
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d001      	beq.n	80036ac <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80036a8:	2301      	movs	r3, #1
 80036aa:	e0cb      	b.n	8003844 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	681a      	ldr	r2, [r3, #0]
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80036ba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	691a      	ldr	r2, [r3, #16]
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036c6:	b2d2      	uxtb	r2, r2
 80036c8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036ce:	1c5a      	adds	r2, r3, #1
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036d8:	3b01      	subs	r3, #1
 80036da:	b29a      	uxth	r2, r3
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036e4:	b29b      	uxth	r3, r3
 80036e6:	3b01      	subs	r3, #1
 80036e8:	b29a      	uxth	r2, r3
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80036ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036f0:	9300      	str	r3, [sp, #0]
 80036f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036f4:	2200      	movs	r2, #0
 80036f6:	4955      	ldr	r1, [pc, #340]	@ (800384c <HAL_I2C_Master_Receive+0x460>)
 80036f8:	68f8      	ldr	r0, [r7, #12]
 80036fa:	f000 f9f9 	bl	8003af0 <I2C_WaitOnFlagUntilTimeout>
 80036fe:	4603      	mov	r3, r0
 8003700:	2b00      	cmp	r3, #0
 8003702:	d001      	beq.n	8003708 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8003704:	2301      	movs	r3, #1
 8003706:	e09d      	b.n	8003844 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	681a      	ldr	r2, [r3, #0]
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003716:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	691a      	ldr	r2, [r3, #16]
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003722:	b2d2      	uxtb	r2, r2
 8003724:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800372a:	1c5a      	adds	r2, r3, #1
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003734:	3b01      	subs	r3, #1
 8003736:	b29a      	uxth	r2, r3
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003740:	b29b      	uxth	r3, r3
 8003742:	3b01      	subs	r3, #1
 8003744:	b29a      	uxth	r2, r3
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	691a      	ldr	r2, [r3, #16]
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003754:	b2d2      	uxtb	r2, r2
 8003756:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800375c:	1c5a      	adds	r2, r3, #1
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003766:	3b01      	subs	r3, #1
 8003768:	b29a      	uxth	r2, r3
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003772:	b29b      	uxth	r3, r3
 8003774:	3b01      	subs	r3, #1
 8003776:	b29a      	uxth	r2, r3
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800377c:	e04e      	b.n	800381c <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800377e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003780:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003782:	68f8      	ldr	r0, [r7, #12]
 8003784:	f000 fb5e 	bl	8003e44 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003788:	4603      	mov	r3, r0
 800378a:	2b00      	cmp	r3, #0
 800378c:	d001      	beq.n	8003792 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800378e:	2301      	movs	r3, #1
 8003790:	e058      	b.n	8003844 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	691a      	ldr	r2, [r3, #16]
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800379c:	b2d2      	uxtb	r2, r2
 800379e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037a4:	1c5a      	adds	r2, r3, #1
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037ae:	3b01      	subs	r3, #1
 80037b0:	b29a      	uxth	r2, r3
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037ba:	b29b      	uxth	r3, r3
 80037bc:	3b01      	subs	r3, #1
 80037be:	b29a      	uxth	r2, r3
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	695b      	ldr	r3, [r3, #20]
 80037ca:	f003 0304 	and.w	r3, r3, #4
 80037ce:	2b04      	cmp	r3, #4
 80037d0:	d124      	bne.n	800381c <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037d6:	2b03      	cmp	r3, #3
 80037d8:	d107      	bne.n	80037ea <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	681a      	ldr	r2, [r3, #0]
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80037e8:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	691a      	ldr	r2, [r3, #16]
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037f4:	b2d2      	uxtb	r2, r2
 80037f6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037fc:	1c5a      	adds	r2, r3, #1
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003806:	3b01      	subs	r3, #1
 8003808:	b29a      	uxth	r2, r3
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003812:	b29b      	uxth	r3, r3
 8003814:	3b01      	subs	r3, #1
 8003816:	b29a      	uxth	r2, r3
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003820:	2b00      	cmp	r3, #0
 8003822:	f47f aeb6 	bne.w	8003592 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	2220      	movs	r2, #32
 800382a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	2200      	movs	r2, #0
 8003832:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	2200      	movs	r2, #0
 800383a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800383e:	2300      	movs	r3, #0
 8003840:	e000      	b.n	8003844 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8003842:	2302      	movs	r3, #2
  }
}
 8003844:	4618      	mov	r0, r3
 8003846:	3728      	adds	r7, #40	@ 0x28
 8003848:	46bd      	mov	sp, r7
 800384a:	bd80      	pop	{r7, pc}
 800384c:	00010004 	.word	0x00010004

08003850 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b088      	sub	sp, #32
 8003854:	af02      	add	r7, sp, #8
 8003856:	60f8      	str	r0, [r7, #12]
 8003858:	607a      	str	r2, [r7, #4]
 800385a:	603b      	str	r3, [r7, #0]
 800385c:	460b      	mov	r3, r1
 800385e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003864:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003866:	697b      	ldr	r3, [r7, #20]
 8003868:	2b08      	cmp	r3, #8
 800386a:	d006      	beq.n	800387a <I2C_MasterRequestWrite+0x2a>
 800386c:	697b      	ldr	r3, [r7, #20]
 800386e:	2b01      	cmp	r3, #1
 8003870:	d003      	beq.n	800387a <I2C_MasterRequestWrite+0x2a>
 8003872:	697b      	ldr	r3, [r7, #20]
 8003874:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003878:	d108      	bne.n	800388c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	681a      	ldr	r2, [r3, #0]
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003888:	601a      	str	r2, [r3, #0]
 800388a:	e00b      	b.n	80038a4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003890:	2b12      	cmp	r3, #18
 8003892:	d107      	bne.n	80038a4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	681a      	ldr	r2, [r3, #0]
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80038a2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	9300      	str	r3, [sp, #0]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2200      	movs	r2, #0
 80038ac:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80038b0:	68f8      	ldr	r0, [r7, #12]
 80038b2:	f000 f91d 	bl	8003af0 <I2C_WaitOnFlagUntilTimeout>
 80038b6:	4603      	mov	r3, r0
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d00d      	beq.n	80038d8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038c6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80038ca:	d103      	bne.n	80038d4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80038d2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80038d4:	2303      	movs	r3, #3
 80038d6:	e035      	b.n	8003944 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	691b      	ldr	r3, [r3, #16]
 80038dc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80038e0:	d108      	bne.n	80038f4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80038e2:	897b      	ldrh	r3, [r7, #10]
 80038e4:	b2db      	uxtb	r3, r3
 80038e6:	461a      	mov	r2, r3
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80038f0:	611a      	str	r2, [r3, #16]
 80038f2:	e01b      	b.n	800392c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80038f4:	897b      	ldrh	r3, [r7, #10]
 80038f6:	11db      	asrs	r3, r3, #7
 80038f8:	b2db      	uxtb	r3, r3
 80038fa:	f003 0306 	and.w	r3, r3, #6
 80038fe:	b2db      	uxtb	r3, r3
 8003900:	f063 030f 	orn	r3, r3, #15
 8003904:	b2da      	uxtb	r2, r3
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	687a      	ldr	r2, [r7, #4]
 8003910:	490e      	ldr	r1, [pc, #56]	@ (800394c <I2C_MasterRequestWrite+0xfc>)
 8003912:	68f8      	ldr	r0, [r7, #12]
 8003914:	f000 f966 	bl	8003be4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003918:	4603      	mov	r3, r0
 800391a:	2b00      	cmp	r3, #0
 800391c:	d001      	beq.n	8003922 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800391e:	2301      	movs	r3, #1
 8003920:	e010      	b.n	8003944 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003922:	897b      	ldrh	r3, [r7, #10]
 8003924:	b2da      	uxtb	r2, r3
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	687a      	ldr	r2, [r7, #4]
 8003930:	4907      	ldr	r1, [pc, #28]	@ (8003950 <I2C_MasterRequestWrite+0x100>)
 8003932:	68f8      	ldr	r0, [r7, #12]
 8003934:	f000 f956 	bl	8003be4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003938:	4603      	mov	r3, r0
 800393a:	2b00      	cmp	r3, #0
 800393c:	d001      	beq.n	8003942 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800393e:	2301      	movs	r3, #1
 8003940:	e000      	b.n	8003944 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003942:	2300      	movs	r3, #0
}
 8003944:	4618      	mov	r0, r3
 8003946:	3718      	adds	r7, #24
 8003948:	46bd      	mov	sp, r7
 800394a:	bd80      	pop	{r7, pc}
 800394c:	00010008 	.word	0x00010008
 8003950:	00010002 	.word	0x00010002

08003954 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b088      	sub	sp, #32
 8003958:	af02      	add	r7, sp, #8
 800395a:	60f8      	str	r0, [r7, #12]
 800395c:	607a      	str	r2, [r7, #4]
 800395e:	603b      	str	r3, [r7, #0]
 8003960:	460b      	mov	r3, r1
 8003962:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003968:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	681a      	ldr	r2, [r3, #0]
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003978:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800397a:	697b      	ldr	r3, [r7, #20]
 800397c:	2b08      	cmp	r3, #8
 800397e:	d006      	beq.n	800398e <I2C_MasterRequestRead+0x3a>
 8003980:	697b      	ldr	r3, [r7, #20]
 8003982:	2b01      	cmp	r3, #1
 8003984:	d003      	beq.n	800398e <I2C_MasterRequestRead+0x3a>
 8003986:	697b      	ldr	r3, [r7, #20]
 8003988:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800398c:	d108      	bne.n	80039a0 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	681a      	ldr	r2, [r3, #0]
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800399c:	601a      	str	r2, [r3, #0]
 800399e:	e00b      	b.n	80039b8 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039a4:	2b11      	cmp	r3, #17
 80039a6:	d107      	bne.n	80039b8 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	681a      	ldr	r2, [r3, #0]
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80039b6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	9300      	str	r3, [sp, #0]
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2200      	movs	r2, #0
 80039c0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80039c4:	68f8      	ldr	r0, [r7, #12]
 80039c6:	f000 f893 	bl	8003af0 <I2C_WaitOnFlagUntilTimeout>
 80039ca:	4603      	mov	r3, r0
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d00d      	beq.n	80039ec <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80039de:	d103      	bne.n	80039e8 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80039e6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80039e8:	2303      	movs	r3, #3
 80039ea:	e079      	b.n	8003ae0 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	691b      	ldr	r3, [r3, #16]
 80039f0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80039f4:	d108      	bne.n	8003a08 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80039f6:	897b      	ldrh	r3, [r7, #10]
 80039f8:	b2db      	uxtb	r3, r3
 80039fa:	f043 0301 	orr.w	r3, r3, #1
 80039fe:	b2da      	uxtb	r2, r3
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	611a      	str	r2, [r3, #16]
 8003a06:	e05f      	b.n	8003ac8 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003a08:	897b      	ldrh	r3, [r7, #10]
 8003a0a:	11db      	asrs	r3, r3, #7
 8003a0c:	b2db      	uxtb	r3, r3
 8003a0e:	f003 0306 	and.w	r3, r3, #6
 8003a12:	b2db      	uxtb	r3, r3
 8003a14:	f063 030f 	orn	r3, r3, #15
 8003a18:	b2da      	uxtb	r2, r3
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	687a      	ldr	r2, [r7, #4]
 8003a24:	4930      	ldr	r1, [pc, #192]	@ (8003ae8 <I2C_MasterRequestRead+0x194>)
 8003a26:	68f8      	ldr	r0, [r7, #12]
 8003a28:	f000 f8dc 	bl	8003be4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003a2c:	4603      	mov	r3, r0
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d001      	beq.n	8003a36 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8003a32:	2301      	movs	r3, #1
 8003a34:	e054      	b.n	8003ae0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003a36:	897b      	ldrh	r3, [r7, #10]
 8003a38:	b2da      	uxtb	r2, r3
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	687a      	ldr	r2, [r7, #4]
 8003a44:	4929      	ldr	r1, [pc, #164]	@ (8003aec <I2C_MasterRequestRead+0x198>)
 8003a46:	68f8      	ldr	r0, [r7, #12]
 8003a48:	f000 f8cc 	bl	8003be4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d001      	beq.n	8003a56 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8003a52:	2301      	movs	r3, #1
 8003a54:	e044      	b.n	8003ae0 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a56:	2300      	movs	r3, #0
 8003a58:	613b      	str	r3, [r7, #16]
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	695b      	ldr	r3, [r3, #20]
 8003a60:	613b      	str	r3, [r7, #16]
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	699b      	ldr	r3, [r3, #24]
 8003a68:	613b      	str	r3, [r7, #16]
 8003a6a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	681a      	ldr	r2, [r3, #0]
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003a7a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	9300      	str	r3, [sp, #0]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2200      	movs	r2, #0
 8003a84:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003a88:	68f8      	ldr	r0, [r7, #12]
 8003a8a:	f000 f831 	bl	8003af0 <I2C_WaitOnFlagUntilTimeout>
 8003a8e:	4603      	mov	r3, r0
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d00d      	beq.n	8003ab0 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a9e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003aa2:	d103      	bne.n	8003aac <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003aaa:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8003aac:	2303      	movs	r3, #3
 8003aae:	e017      	b.n	8003ae0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003ab0:	897b      	ldrh	r3, [r7, #10]
 8003ab2:	11db      	asrs	r3, r3, #7
 8003ab4:	b2db      	uxtb	r3, r3
 8003ab6:	f003 0306 	and.w	r3, r3, #6
 8003aba:	b2db      	uxtb	r3, r3
 8003abc:	f063 030e 	orn	r3, r3, #14
 8003ac0:	b2da      	uxtb	r2, r3
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	687a      	ldr	r2, [r7, #4]
 8003acc:	4907      	ldr	r1, [pc, #28]	@ (8003aec <I2C_MasterRequestRead+0x198>)
 8003ace:	68f8      	ldr	r0, [r7, #12]
 8003ad0:	f000 f888 	bl	8003be4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d001      	beq.n	8003ade <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8003ada:	2301      	movs	r3, #1
 8003adc:	e000      	b.n	8003ae0 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8003ade:	2300      	movs	r3, #0
}
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	3718      	adds	r7, #24
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	bd80      	pop	{r7, pc}
 8003ae8:	00010008 	.word	0x00010008
 8003aec:	00010002 	.word	0x00010002

08003af0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b084      	sub	sp, #16
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	60f8      	str	r0, [r7, #12]
 8003af8:	60b9      	str	r1, [r7, #8]
 8003afa:	603b      	str	r3, [r7, #0]
 8003afc:	4613      	mov	r3, r2
 8003afe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b00:	e048      	b.n	8003b94 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b08:	d044      	beq.n	8003b94 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b0a:	f7fe ff0d 	bl	8002928 <HAL_GetTick>
 8003b0e:	4602      	mov	r2, r0
 8003b10:	69bb      	ldr	r3, [r7, #24]
 8003b12:	1ad3      	subs	r3, r2, r3
 8003b14:	683a      	ldr	r2, [r7, #0]
 8003b16:	429a      	cmp	r2, r3
 8003b18:	d302      	bcc.n	8003b20 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d139      	bne.n	8003b94 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003b20:	68bb      	ldr	r3, [r7, #8]
 8003b22:	0c1b      	lsrs	r3, r3, #16
 8003b24:	b2db      	uxtb	r3, r3
 8003b26:	2b01      	cmp	r3, #1
 8003b28:	d10d      	bne.n	8003b46 <I2C_WaitOnFlagUntilTimeout+0x56>
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	695b      	ldr	r3, [r3, #20]
 8003b30:	43da      	mvns	r2, r3
 8003b32:	68bb      	ldr	r3, [r7, #8]
 8003b34:	4013      	ands	r3, r2
 8003b36:	b29b      	uxth	r3, r3
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	bf0c      	ite	eq
 8003b3c:	2301      	moveq	r3, #1
 8003b3e:	2300      	movne	r3, #0
 8003b40:	b2db      	uxtb	r3, r3
 8003b42:	461a      	mov	r2, r3
 8003b44:	e00c      	b.n	8003b60 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	699b      	ldr	r3, [r3, #24]
 8003b4c:	43da      	mvns	r2, r3
 8003b4e:	68bb      	ldr	r3, [r7, #8]
 8003b50:	4013      	ands	r3, r2
 8003b52:	b29b      	uxth	r3, r3
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	bf0c      	ite	eq
 8003b58:	2301      	moveq	r3, #1
 8003b5a:	2300      	movne	r3, #0
 8003b5c:	b2db      	uxtb	r3, r3
 8003b5e:	461a      	mov	r2, r3
 8003b60:	79fb      	ldrb	r3, [r7, #7]
 8003b62:	429a      	cmp	r2, r3
 8003b64:	d116      	bne.n	8003b94 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	2200      	movs	r2, #0
 8003b6a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	2220      	movs	r2, #32
 8003b70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	2200      	movs	r2, #0
 8003b78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b80:	f043 0220 	orr.w	r2, r3, #32
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003b90:	2301      	movs	r3, #1
 8003b92:	e023      	b.n	8003bdc <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b94:	68bb      	ldr	r3, [r7, #8]
 8003b96:	0c1b      	lsrs	r3, r3, #16
 8003b98:	b2db      	uxtb	r3, r3
 8003b9a:	2b01      	cmp	r3, #1
 8003b9c:	d10d      	bne.n	8003bba <I2C_WaitOnFlagUntilTimeout+0xca>
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	695b      	ldr	r3, [r3, #20]
 8003ba4:	43da      	mvns	r2, r3
 8003ba6:	68bb      	ldr	r3, [r7, #8]
 8003ba8:	4013      	ands	r3, r2
 8003baa:	b29b      	uxth	r3, r3
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	bf0c      	ite	eq
 8003bb0:	2301      	moveq	r3, #1
 8003bb2:	2300      	movne	r3, #0
 8003bb4:	b2db      	uxtb	r3, r3
 8003bb6:	461a      	mov	r2, r3
 8003bb8:	e00c      	b.n	8003bd4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	699b      	ldr	r3, [r3, #24]
 8003bc0:	43da      	mvns	r2, r3
 8003bc2:	68bb      	ldr	r3, [r7, #8]
 8003bc4:	4013      	ands	r3, r2
 8003bc6:	b29b      	uxth	r3, r3
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	bf0c      	ite	eq
 8003bcc:	2301      	moveq	r3, #1
 8003bce:	2300      	movne	r3, #0
 8003bd0:	b2db      	uxtb	r3, r3
 8003bd2:	461a      	mov	r2, r3
 8003bd4:	79fb      	ldrb	r3, [r7, #7]
 8003bd6:	429a      	cmp	r2, r3
 8003bd8:	d093      	beq.n	8003b02 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003bda:	2300      	movs	r3, #0
}
 8003bdc:	4618      	mov	r0, r3
 8003bde:	3710      	adds	r7, #16
 8003be0:	46bd      	mov	sp, r7
 8003be2:	bd80      	pop	{r7, pc}

08003be4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b084      	sub	sp, #16
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	60f8      	str	r0, [r7, #12]
 8003bec:	60b9      	str	r1, [r7, #8]
 8003bee:	607a      	str	r2, [r7, #4]
 8003bf0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003bf2:	e071      	b.n	8003cd8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	695b      	ldr	r3, [r3, #20]
 8003bfa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003bfe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c02:	d123      	bne.n	8003c4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	681a      	ldr	r2, [r3, #0]
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c12:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003c1c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	2200      	movs	r2, #0
 8003c22:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	2220      	movs	r2, #32
 8003c28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	2200      	movs	r2, #0
 8003c30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c38:	f043 0204 	orr.w	r2, r3, #4
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	2200      	movs	r2, #0
 8003c44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003c48:	2301      	movs	r3, #1
 8003c4a:	e067      	b.n	8003d1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c52:	d041      	beq.n	8003cd8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c54:	f7fe fe68 	bl	8002928 <HAL_GetTick>
 8003c58:	4602      	mov	r2, r0
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	1ad3      	subs	r3, r2, r3
 8003c5e:	687a      	ldr	r2, [r7, #4]
 8003c60:	429a      	cmp	r2, r3
 8003c62:	d302      	bcc.n	8003c6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d136      	bne.n	8003cd8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003c6a:	68bb      	ldr	r3, [r7, #8]
 8003c6c:	0c1b      	lsrs	r3, r3, #16
 8003c6e:	b2db      	uxtb	r3, r3
 8003c70:	2b01      	cmp	r3, #1
 8003c72:	d10c      	bne.n	8003c8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	695b      	ldr	r3, [r3, #20]
 8003c7a:	43da      	mvns	r2, r3
 8003c7c:	68bb      	ldr	r3, [r7, #8]
 8003c7e:	4013      	ands	r3, r2
 8003c80:	b29b      	uxth	r3, r3
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	bf14      	ite	ne
 8003c86:	2301      	movne	r3, #1
 8003c88:	2300      	moveq	r3, #0
 8003c8a:	b2db      	uxtb	r3, r3
 8003c8c:	e00b      	b.n	8003ca6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	699b      	ldr	r3, [r3, #24]
 8003c94:	43da      	mvns	r2, r3
 8003c96:	68bb      	ldr	r3, [r7, #8]
 8003c98:	4013      	ands	r3, r2
 8003c9a:	b29b      	uxth	r3, r3
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	bf14      	ite	ne
 8003ca0:	2301      	movne	r3, #1
 8003ca2:	2300      	moveq	r3, #0
 8003ca4:	b2db      	uxtb	r3, r3
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d016      	beq.n	8003cd8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	2200      	movs	r2, #0
 8003cae:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	2220      	movs	r2, #32
 8003cb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	2200      	movs	r2, #0
 8003cbc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cc4:	f043 0220 	orr.w	r2, r3, #32
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	2200      	movs	r2, #0
 8003cd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	e021      	b.n	8003d1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003cd8:	68bb      	ldr	r3, [r7, #8]
 8003cda:	0c1b      	lsrs	r3, r3, #16
 8003cdc:	b2db      	uxtb	r3, r3
 8003cde:	2b01      	cmp	r3, #1
 8003ce0:	d10c      	bne.n	8003cfc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	695b      	ldr	r3, [r3, #20]
 8003ce8:	43da      	mvns	r2, r3
 8003cea:	68bb      	ldr	r3, [r7, #8]
 8003cec:	4013      	ands	r3, r2
 8003cee:	b29b      	uxth	r3, r3
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	bf14      	ite	ne
 8003cf4:	2301      	movne	r3, #1
 8003cf6:	2300      	moveq	r3, #0
 8003cf8:	b2db      	uxtb	r3, r3
 8003cfa:	e00b      	b.n	8003d14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	699b      	ldr	r3, [r3, #24]
 8003d02:	43da      	mvns	r2, r3
 8003d04:	68bb      	ldr	r3, [r7, #8]
 8003d06:	4013      	ands	r3, r2
 8003d08:	b29b      	uxth	r3, r3
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	bf14      	ite	ne
 8003d0e:	2301      	movne	r3, #1
 8003d10:	2300      	moveq	r3, #0
 8003d12:	b2db      	uxtb	r3, r3
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	f47f af6d 	bne.w	8003bf4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003d1a:	2300      	movs	r3, #0
}
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	3710      	adds	r7, #16
 8003d20:	46bd      	mov	sp, r7
 8003d22:	bd80      	pop	{r7, pc}

08003d24 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b084      	sub	sp, #16
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	60f8      	str	r0, [r7, #12]
 8003d2c:	60b9      	str	r1, [r7, #8]
 8003d2e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003d30:	e034      	b.n	8003d9c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003d32:	68f8      	ldr	r0, [r7, #12]
 8003d34:	f000 f8e3 	bl	8003efe <I2C_IsAcknowledgeFailed>
 8003d38:	4603      	mov	r3, r0
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d001      	beq.n	8003d42 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003d3e:	2301      	movs	r3, #1
 8003d40:	e034      	b.n	8003dac <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d42:	68bb      	ldr	r3, [r7, #8]
 8003d44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d48:	d028      	beq.n	8003d9c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d4a:	f7fe fded 	bl	8002928 <HAL_GetTick>
 8003d4e:	4602      	mov	r2, r0
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	1ad3      	subs	r3, r2, r3
 8003d54:	68ba      	ldr	r2, [r7, #8]
 8003d56:	429a      	cmp	r2, r3
 8003d58:	d302      	bcc.n	8003d60 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003d5a:	68bb      	ldr	r3, [r7, #8]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d11d      	bne.n	8003d9c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	695b      	ldr	r3, [r3, #20]
 8003d66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d6a:	2b80      	cmp	r3, #128	@ 0x80
 8003d6c:	d016      	beq.n	8003d9c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	2200      	movs	r2, #0
 8003d72:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	2220      	movs	r2, #32
 8003d78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	2200      	movs	r2, #0
 8003d80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d88:	f043 0220 	orr.w	r2, r3, #32
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	2200      	movs	r2, #0
 8003d94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003d98:	2301      	movs	r3, #1
 8003d9a:	e007      	b.n	8003dac <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	695b      	ldr	r3, [r3, #20]
 8003da2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003da6:	2b80      	cmp	r3, #128	@ 0x80
 8003da8:	d1c3      	bne.n	8003d32 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003daa:	2300      	movs	r3, #0
}
 8003dac:	4618      	mov	r0, r3
 8003dae:	3710      	adds	r7, #16
 8003db0:	46bd      	mov	sp, r7
 8003db2:	bd80      	pop	{r7, pc}

08003db4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b084      	sub	sp, #16
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	60f8      	str	r0, [r7, #12]
 8003dbc:	60b9      	str	r1, [r7, #8]
 8003dbe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003dc0:	e034      	b.n	8003e2c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003dc2:	68f8      	ldr	r0, [r7, #12]
 8003dc4:	f000 f89b 	bl	8003efe <I2C_IsAcknowledgeFailed>
 8003dc8:	4603      	mov	r3, r0
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d001      	beq.n	8003dd2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003dce:	2301      	movs	r3, #1
 8003dd0:	e034      	b.n	8003e3c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003dd2:	68bb      	ldr	r3, [r7, #8]
 8003dd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dd8:	d028      	beq.n	8003e2c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003dda:	f7fe fda5 	bl	8002928 <HAL_GetTick>
 8003dde:	4602      	mov	r2, r0
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	1ad3      	subs	r3, r2, r3
 8003de4:	68ba      	ldr	r2, [r7, #8]
 8003de6:	429a      	cmp	r2, r3
 8003de8:	d302      	bcc.n	8003df0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003dea:	68bb      	ldr	r3, [r7, #8]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d11d      	bne.n	8003e2c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	695b      	ldr	r3, [r3, #20]
 8003df6:	f003 0304 	and.w	r3, r3, #4
 8003dfa:	2b04      	cmp	r3, #4
 8003dfc:	d016      	beq.n	8003e2c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	2200      	movs	r2, #0
 8003e02:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	2220      	movs	r2, #32
 8003e08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e18:	f043 0220 	orr.w	r2, r3, #32
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	2200      	movs	r2, #0
 8003e24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003e28:	2301      	movs	r3, #1
 8003e2a:	e007      	b.n	8003e3c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	695b      	ldr	r3, [r3, #20]
 8003e32:	f003 0304 	and.w	r3, r3, #4
 8003e36:	2b04      	cmp	r3, #4
 8003e38:	d1c3      	bne.n	8003dc2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003e3a:	2300      	movs	r3, #0
}
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	3710      	adds	r7, #16
 8003e40:	46bd      	mov	sp, r7
 8003e42:	bd80      	pop	{r7, pc}

08003e44 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b084      	sub	sp, #16
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	60f8      	str	r0, [r7, #12]
 8003e4c:	60b9      	str	r1, [r7, #8]
 8003e4e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003e50:	e049      	b.n	8003ee6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	695b      	ldr	r3, [r3, #20]
 8003e58:	f003 0310 	and.w	r3, r3, #16
 8003e5c:	2b10      	cmp	r3, #16
 8003e5e:	d119      	bne.n	8003e94 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f06f 0210 	mvn.w	r2, #16
 8003e68:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	2220      	movs	r2, #32
 8003e74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003e90:	2301      	movs	r3, #1
 8003e92:	e030      	b.n	8003ef6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e94:	f7fe fd48 	bl	8002928 <HAL_GetTick>
 8003e98:	4602      	mov	r2, r0
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	1ad3      	subs	r3, r2, r3
 8003e9e:	68ba      	ldr	r2, [r7, #8]
 8003ea0:	429a      	cmp	r2, r3
 8003ea2:	d302      	bcc.n	8003eaa <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003ea4:	68bb      	ldr	r3, [r7, #8]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d11d      	bne.n	8003ee6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	695b      	ldr	r3, [r3, #20]
 8003eb0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003eb4:	2b40      	cmp	r3, #64	@ 0x40
 8003eb6:	d016      	beq.n	8003ee6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	2200      	movs	r2, #0
 8003ebc:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	2220      	movs	r2, #32
 8003ec2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	2200      	movs	r2, #0
 8003eca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ed2:	f043 0220 	orr.w	r2, r3, #32
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	2200      	movs	r2, #0
 8003ede:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	e007      	b.n	8003ef6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	695b      	ldr	r3, [r3, #20]
 8003eec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ef0:	2b40      	cmp	r3, #64	@ 0x40
 8003ef2:	d1ae      	bne.n	8003e52 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003ef4:	2300      	movs	r3, #0
}
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	3710      	adds	r7, #16
 8003efa:	46bd      	mov	sp, r7
 8003efc:	bd80      	pop	{r7, pc}

08003efe <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003efe:	b480      	push	{r7}
 8003f00:	b083      	sub	sp, #12
 8003f02:	af00      	add	r7, sp, #0
 8003f04:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	695b      	ldr	r3, [r3, #20]
 8003f0c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f10:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f14:	d11b      	bne.n	8003f4e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003f1e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2200      	movs	r2, #0
 8003f24:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2220      	movs	r2, #32
 8003f2a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2200      	movs	r2, #0
 8003f32:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f3a:	f043 0204 	orr.w	r2, r3, #4
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2200      	movs	r2, #0
 8003f46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	e000      	b.n	8003f50 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003f4e:	2300      	movs	r3, #0
}
 8003f50:	4618      	mov	r0, r3
 8003f52:	370c      	adds	r7, #12
 8003f54:	46bd      	mov	sp, r7
 8003f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5a:	4770      	bx	lr

08003f5c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b084      	sub	sp, #16
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
 8003f64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d101      	bne.n	8003f70 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f6c:	2301      	movs	r3, #1
 8003f6e:	e0cc      	b.n	800410a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003f70:	4b68      	ldr	r3, [pc, #416]	@ (8004114 <HAL_RCC_ClockConfig+0x1b8>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f003 030f 	and.w	r3, r3, #15
 8003f78:	683a      	ldr	r2, [r7, #0]
 8003f7a:	429a      	cmp	r2, r3
 8003f7c:	d90c      	bls.n	8003f98 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f7e:	4b65      	ldr	r3, [pc, #404]	@ (8004114 <HAL_RCC_ClockConfig+0x1b8>)
 8003f80:	683a      	ldr	r2, [r7, #0]
 8003f82:	b2d2      	uxtb	r2, r2
 8003f84:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f86:	4b63      	ldr	r3, [pc, #396]	@ (8004114 <HAL_RCC_ClockConfig+0x1b8>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f003 030f 	and.w	r3, r3, #15
 8003f8e:	683a      	ldr	r2, [r7, #0]
 8003f90:	429a      	cmp	r2, r3
 8003f92:	d001      	beq.n	8003f98 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003f94:	2301      	movs	r3, #1
 8003f96:	e0b8      	b.n	800410a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f003 0302 	and.w	r3, r3, #2
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d020      	beq.n	8003fe6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f003 0304 	and.w	r3, r3, #4
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d005      	beq.n	8003fbc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003fb0:	4b59      	ldr	r3, [pc, #356]	@ (8004118 <HAL_RCC_ClockConfig+0x1bc>)
 8003fb2:	689b      	ldr	r3, [r3, #8]
 8003fb4:	4a58      	ldr	r2, [pc, #352]	@ (8004118 <HAL_RCC_ClockConfig+0x1bc>)
 8003fb6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003fba:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f003 0308 	and.w	r3, r3, #8
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d005      	beq.n	8003fd4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003fc8:	4b53      	ldr	r3, [pc, #332]	@ (8004118 <HAL_RCC_ClockConfig+0x1bc>)
 8003fca:	689b      	ldr	r3, [r3, #8]
 8003fcc:	4a52      	ldr	r2, [pc, #328]	@ (8004118 <HAL_RCC_ClockConfig+0x1bc>)
 8003fce:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003fd2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003fd4:	4b50      	ldr	r3, [pc, #320]	@ (8004118 <HAL_RCC_ClockConfig+0x1bc>)
 8003fd6:	689b      	ldr	r3, [r3, #8]
 8003fd8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	689b      	ldr	r3, [r3, #8]
 8003fe0:	494d      	ldr	r1, [pc, #308]	@ (8004118 <HAL_RCC_ClockConfig+0x1bc>)
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f003 0301 	and.w	r3, r3, #1
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d044      	beq.n	800407c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	2b01      	cmp	r3, #1
 8003ff8:	d107      	bne.n	800400a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ffa:	4b47      	ldr	r3, [pc, #284]	@ (8004118 <HAL_RCC_ClockConfig+0x1bc>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004002:	2b00      	cmp	r3, #0
 8004004:	d119      	bne.n	800403a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004006:	2301      	movs	r3, #1
 8004008:	e07f      	b.n	800410a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	685b      	ldr	r3, [r3, #4]
 800400e:	2b02      	cmp	r3, #2
 8004010:	d003      	beq.n	800401a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004016:	2b03      	cmp	r3, #3
 8004018:	d107      	bne.n	800402a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800401a:	4b3f      	ldr	r3, [pc, #252]	@ (8004118 <HAL_RCC_ClockConfig+0x1bc>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004022:	2b00      	cmp	r3, #0
 8004024:	d109      	bne.n	800403a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004026:	2301      	movs	r3, #1
 8004028:	e06f      	b.n	800410a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800402a:	4b3b      	ldr	r3, [pc, #236]	@ (8004118 <HAL_RCC_ClockConfig+0x1bc>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f003 0302 	and.w	r3, r3, #2
 8004032:	2b00      	cmp	r3, #0
 8004034:	d101      	bne.n	800403a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004036:	2301      	movs	r3, #1
 8004038:	e067      	b.n	800410a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800403a:	4b37      	ldr	r3, [pc, #220]	@ (8004118 <HAL_RCC_ClockConfig+0x1bc>)
 800403c:	689b      	ldr	r3, [r3, #8]
 800403e:	f023 0203 	bic.w	r2, r3, #3
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	685b      	ldr	r3, [r3, #4]
 8004046:	4934      	ldr	r1, [pc, #208]	@ (8004118 <HAL_RCC_ClockConfig+0x1bc>)
 8004048:	4313      	orrs	r3, r2
 800404a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800404c:	f7fe fc6c 	bl	8002928 <HAL_GetTick>
 8004050:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004052:	e00a      	b.n	800406a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004054:	f7fe fc68 	bl	8002928 <HAL_GetTick>
 8004058:	4602      	mov	r2, r0
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	1ad3      	subs	r3, r2, r3
 800405e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004062:	4293      	cmp	r3, r2
 8004064:	d901      	bls.n	800406a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004066:	2303      	movs	r3, #3
 8004068:	e04f      	b.n	800410a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800406a:	4b2b      	ldr	r3, [pc, #172]	@ (8004118 <HAL_RCC_ClockConfig+0x1bc>)
 800406c:	689b      	ldr	r3, [r3, #8]
 800406e:	f003 020c 	and.w	r2, r3, #12
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	685b      	ldr	r3, [r3, #4]
 8004076:	009b      	lsls	r3, r3, #2
 8004078:	429a      	cmp	r2, r3
 800407a:	d1eb      	bne.n	8004054 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800407c:	4b25      	ldr	r3, [pc, #148]	@ (8004114 <HAL_RCC_ClockConfig+0x1b8>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f003 030f 	and.w	r3, r3, #15
 8004084:	683a      	ldr	r2, [r7, #0]
 8004086:	429a      	cmp	r2, r3
 8004088:	d20c      	bcs.n	80040a4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800408a:	4b22      	ldr	r3, [pc, #136]	@ (8004114 <HAL_RCC_ClockConfig+0x1b8>)
 800408c:	683a      	ldr	r2, [r7, #0]
 800408e:	b2d2      	uxtb	r2, r2
 8004090:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004092:	4b20      	ldr	r3, [pc, #128]	@ (8004114 <HAL_RCC_ClockConfig+0x1b8>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f003 030f 	and.w	r3, r3, #15
 800409a:	683a      	ldr	r2, [r7, #0]
 800409c:	429a      	cmp	r2, r3
 800409e:	d001      	beq.n	80040a4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80040a0:	2301      	movs	r3, #1
 80040a2:	e032      	b.n	800410a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f003 0304 	and.w	r3, r3, #4
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d008      	beq.n	80040c2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80040b0:	4b19      	ldr	r3, [pc, #100]	@ (8004118 <HAL_RCC_ClockConfig+0x1bc>)
 80040b2:	689b      	ldr	r3, [r3, #8]
 80040b4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	68db      	ldr	r3, [r3, #12]
 80040bc:	4916      	ldr	r1, [pc, #88]	@ (8004118 <HAL_RCC_ClockConfig+0x1bc>)
 80040be:	4313      	orrs	r3, r2
 80040c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f003 0308 	and.w	r3, r3, #8
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d009      	beq.n	80040e2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80040ce:	4b12      	ldr	r3, [pc, #72]	@ (8004118 <HAL_RCC_ClockConfig+0x1bc>)
 80040d0:	689b      	ldr	r3, [r3, #8]
 80040d2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	691b      	ldr	r3, [r3, #16]
 80040da:	00db      	lsls	r3, r3, #3
 80040dc:	490e      	ldr	r1, [pc, #56]	@ (8004118 <HAL_RCC_ClockConfig+0x1bc>)
 80040de:	4313      	orrs	r3, r2
 80040e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80040e2:	f000 f855 	bl	8004190 <HAL_RCC_GetSysClockFreq>
 80040e6:	4602      	mov	r2, r0
 80040e8:	4b0b      	ldr	r3, [pc, #44]	@ (8004118 <HAL_RCC_ClockConfig+0x1bc>)
 80040ea:	689b      	ldr	r3, [r3, #8]
 80040ec:	091b      	lsrs	r3, r3, #4
 80040ee:	f003 030f 	and.w	r3, r3, #15
 80040f2:	490a      	ldr	r1, [pc, #40]	@ (800411c <HAL_RCC_ClockConfig+0x1c0>)
 80040f4:	5ccb      	ldrb	r3, [r1, r3]
 80040f6:	fa22 f303 	lsr.w	r3, r2, r3
 80040fa:	4a09      	ldr	r2, [pc, #36]	@ (8004120 <HAL_RCC_ClockConfig+0x1c4>)
 80040fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80040fe:	4b09      	ldr	r3, [pc, #36]	@ (8004124 <HAL_RCC_ClockConfig+0x1c8>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	4618      	mov	r0, r3
 8004104:	f7fe fbcc 	bl	80028a0 <HAL_InitTick>

  return HAL_OK;
 8004108:	2300      	movs	r3, #0
}
 800410a:	4618      	mov	r0, r3
 800410c:	3710      	adds	r7, #16
 800410e:	46bd      	mov	sp, r7
 8004110:	bd80      	pop	{r7, pc}
 8004112:	bf00      	nop
 8004114:	40023c00 	.word	0x40023c00
 8004118:	40023800 	.word	0x40023800
 800411c:	080063e0 	.word	0x080063e0
 8004120:	20000018 	.word	0x20000018
 8004124:	2000001c 	.word	0x2000001c

08004128 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004128:	b480      	push	{r7}
 800412a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800412c:	4b03      	ldr	r3, [pc, #12]	@ (800413c <HAL_RCC_GetHCLKFreq+0x14>)
 800412e:	681b      	ldr	r3, [r3, #0]
}
 8004130:	4618      	mov	r0, r3
 8004132:	46bd      	mov	sp, r7
 8004134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004138:	4770      	bx	lr
 800413a:	bf00      	nop
 800413c:	20000018 	.word	0x20000018

08004140 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004144:	f7ff fff0 	bl	8004128 <HAL_RCC_GetHCLKFreq>
 8004148:	4602      	mov	r2, r0
 800414a:	4b05      	ldr	r3, [pc, #20]	@ (8004160 <HAL_RCC_GetPCLK1Freq+0x20>)
 800414c:	689b      	ldr	r3, [r3, #8]
 800414e:	0a9b      	lsrs	r3, r3, #10
 8004150:	f003 0307 	and.w	r3, r3, #7
 8004154:	4903      	ldr	r1, [pc, #12]	@ (8004164 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004156:	5ccb      	ldrb	r3, [r1, r3]
 8004158:	fa22 f303 	lsr.w	r3, r2, r3
}
 800415c:	4618      	mov	r0, r3
 800415e:	bd80      	pop	{r7, pc}
 8004160:	40023800 	.word	0x40023800
 8004164:	080063f0 	.word	0x080063f0

08004168 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800416c:	f7ff ffdc 	bl	8004128 <HAL_RCC_GetHCLKFreq>
 8004170:	4602      	mov	r2, r0
 8004172:	4b05      	ldr	r3, [pc, #20]	@ (8004188 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004174:	689b      	ldr	r3, [r3, #8]
 8004176:	0b5b      	lsrs	r3, r3, #13
 8004178:	f003 0307 	and.w	r3, r3, #7
 800417c:	4903      	ldr	r1, [pc, #12]	@ (800418c <HAL_RCC_GetPCLK2Freq+0x24>)
 800417e:	5ccb      	ldrb	r3, [r1, r3]
 8004180:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004184:	4618      	mov	r0, r3
 8004186:	bd80      	pop	{r7, pc}
 8004188:	40023800 	.word	0x40023800
 800418c:	080063f0 	.word	0x080063f0

08004190 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004190:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004194:	b0ae      	sub	sp, #184	@ 0xb8
 8004196:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004198:	2300      	movs	r3, #0
 800419a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 800419e:	2300      	movs	r3, #0
 80041a0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80041a4:	2300      	movs	r3, #0
 80041a6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 80041aa:	2300      	movs	r3, #0
 80041ac:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 80041b0:	2300      	movs	r3, #0
 80041b2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80041b6:	4bcb      	ldr	r3, [pc, #812]	@ (80044e4 <HAL_RCC_GetSysClockFreq+0x354>)
 80041b8:	689b      	ldr	r3, [r3, #8]
 80041ba:	f003 030c 	and.w	r3, r3, #12
 80041be:	2b0c      	cmp	r3, #12
 80041c0:	f200 8206 	bhi.w	80045d0 <HAL_RCC_GetSysClockFreq+0x440>
 80041c4:	a201      	add	r2, pc, #4	@ (adr r2, 80041cc <HAL_RCC_GetSysClockFreq+0x3c>)
 80041c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041ca:	bf00      	nop
 80041cc:	08004201 	.word	0x08004201
 80041d0:	080045d1 	.word	0x080045d1
 80041d4:	080045d1 	.word	0x080045d1
 80041d8:	080045d1 	.word	0x080045d1
 80041dc:	08004209 	.word	0x08004209
 80041e0:	080045d1 	.word	0x080045d1
 80041e4:	080045d1 	.word	0x080045d1
 80041e8:	080045d1 	.word	0x080045d1
 80041ec:	08004211 	.word	0x08004211
 80041f0:	080045d1 	.word	0x080045d1
 80041f4:	080045d1 	.word	0x080045d1
 80041f8:	080045d1 	.word	0x080045d1
 80041fc:	08004401 	.word	0x08004401
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004200:	4bb9      	ldr	r3, [pc, #740]	@ (80044e8 <HAL_RCC_GetSysClockFreq+0x358>)
 8004202:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004206:	e1e7      	b.n	80045d8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004208:	4bb8      	ldr	r3, [pc, #736]	@ (80044ec <HAL_RCC_GetSysClockFreq+0x35c>)
 800420a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800420e:	e1e3      	b.n	80045d8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004210:	4bb4      	ldr	r3, [pc, #720]	@ (80044e4 <HAL_RCC_GetSysClockFreq+0x354>)
 8004212:	685b      	ldr	r3, [r3, #4]
 8004214:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004218:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800421c:	4bb1      	ldr	r3, [pc, #708]	@ (80044e4 <HAL_RCC_GetSysClockFreq+0x354>)
 800421e:	685b      	ldr	r3, [r3, #4]
 8004220:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004224:	2b00      	cmp	r3, #0
 8004226:	d071      	beq.n	800430c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004228:	4bae      	ldr	r3, [pc, #696]	@ (80044e4 <HAL_RCC_GetSysClockFreq+0x354>)
 800422a:	685b      	ldr	r3, [r3, #4]
 800422c:	099b      	lsrs	r3, r3, #6
 800422e:	2200      	movs	r2, #0
 8004230:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004234:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8004238:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800423c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004240:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004244:	2300      	movs	r3, #0
 8004246:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800424a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800424e:	4622      	mov	r2, r4
 8004250:	462b      	mov	r3, r5
 8004252:	f04f 0000 	mov.w	r0, #0
 8004256:	f04f 0100 	mov.w	r1, #0
 800425a:	0159      	lsls	r1, r3, #5
 800425c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004260:	0150      	lsls	r0, r2, #5
 8004262:	4602      	mov	r2, r0
 8004264:	460b      	mov	r3, r1
 8004266:	4621      	mov	r1, r4
 8004268:	1a51      	subs	r1, r2, r1
 800426a:	6439      	str	r1, [r7, #64]	@ 0x40
 800426c:	4629      	mov	r1, r5
 800426e:	eb63 0301 	sbc.w	r3, r3, r1
 8004272:	647b      	str	r3, [r7, #68]	@ 0x44
 8004274:	f04f 0200 	mov.w	r2, #0
 8004278:	f04f 0300 	mov.w	r3, #0
 800427c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8004280:	4649      	mov	r1, r9
 8004282:	018b      	lsls	r3, r1, #6
 8004284:	4641      	mov	r1, r8
 8004286:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800428a:	4641      	mov	r1, r8
 800428c:	018a      	lsls	r2, r1, #6
 800428e:	4641      	mov	r1, r8
 8004290:	1a51      	subs	r1, r2, r1
 8004292:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004294:	4649      	mov	r1, r9
 8004296:	eb63 0301 	sbc.w	r3, r3, r1
 800429a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800429c:	f04f 0200 	mov.w	r2, #0
 80042a0:	f04f 0300 	mov.w	r3, #0
 80042a4:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 80042a8:	4649      	mov	r1, r9
 80042aa:	00cb      	lsls	r3, r1, #3
 80042ac:	4641      	mov	r1, r8
 80042ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80042b2:	4641      	mov	r1, r8
 80042b4:	00ca      	lsls	r2, r1, #3
 80042b6:	4610      	mov	r0, r2
 80042b8:	4619      	mov	r1, r3
 80042ba:	4603      	mov	r3, r0
 80042bc:	4622      	mov	r2, r4
 80042be:	189b      	adds	r3, r3, r2
 80042c0:	633b      	str	r3, [r7, #48]	@ 0x30
 80042c2:	462b      	mov	r3, r5
 80042c4:	460a      	mov	r2, r1
 80042c6:	eb42 0303 	adc.w	r3, r2, r3
 80042ca:	637b      	str	r3, [r7, #52]	@ 0x34
 80042cc:	f04f 0200 	mov.w	r2, #0
 80042d0:	f04f 0300 	mov.w	r3, #0
 80042d4:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80042d8:	4629      	mov	r1, r5
 80042da:	024b      	lsls	r3, r1, #9
 80042dc:	4621      	mov	r1, r4
 80042de:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80042e2:	4621      	mov	r1, r4
 80042e4:	024a      	lsls	r2, r1, #9
 80042e6:	4610      	mov	r0, r2
 80042e8:	4619      	mov	r1, r3
 80042ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80042ee:	2200      	movs	r2, #0
 80042f0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80042f4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80042f8:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80042fc:	f7fc fbea 	bl	8000ad4 <__aeabi_uldivmod>
 8004300:	4602      	mov	r2, r0
 8004302:	460b      	mov	r3, r1
 8004304:	4613      	mov	r3, r2
 8004306:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800430a:	e067      	b.n	80043dc <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800430c:	4b75      	ldr	r3, [pc, #468]	@ (80044e4 <HAL_RCC_GetSysClockFreq+0x354>)
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	099b      	lsrs	r3, r3, #6
 8004312:	2200      	movs	r2, #0
 8004314:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004318:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 800431c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004320:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004324:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004326:	2300      	movs	r3, #0
 8004328:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800432a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800432e:	4622      	mov	r2, r4
 8004330:	462b      	mov	r3, r5
 8004332:	f04f 0000 	mov.w	r0, #0
 8004336:	f04f 0100 	mov.w	r1, #0
 800433a:	0159      	lsls	r1, r3, #5
 800433c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004340:	0150      	lsls	r0, r2, #5
 8004342:	4602      	mov	r2, r0
 8004344:	460b      	mov	r3, r1
 8004346:	4621      	mov	r1, r4
 8004348:	1a51      	subs	r1, r2, r1
 800434a:	62b9      	str	r1, [r7, #40]	@ 0x28
 800434c:	4629      	mov	r1, r5
 800434e:	eb63 0301 	sbc.w	r3, r3, r1
 8004352:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004354:	f04f 0200 	mov.w	r2, #0
 8004358:	f04f 0300 	mov.w	r3, #0
 800435c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8004360:	4649      	mov	r1, r9
 8004362:	018b      	lsls	r3, r1, #6
 8004364:	4641      	mov	r1, r8
 8004366:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800436a:	4641      	mov	r1, r8
 800436c:	018a      	lsls	r2, r1, #6
 800436e:	4641      	mov	r1, r8
 8004370:	ebb2 0a01 	subs.w	sl, r2, r1
 8004374:	4649      	mov	r1, r9
 8004376:	eb63 0b01 	sbc.w	fp, r3, r1
 800437a:	f04f 0200 	mov.w	r2, #0
 800437e:	f04f 0300 	mov.w	r3, #0
 8004382:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004386:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800438a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800438e:	4692      	mov	sl, r2
 8004390:	469b      	mov	fp, r3
 8004392:	4623      	mov	r3, r4
 8004394:	eb1a 0303 	adds.w	r3, sl, r3
 8004398:	623b      	str	r3, [r7, #32]
 800439a:	462b      	mov	r3, r5
 800439c:	eb4b 0303 	adc.w	r3, fp, r3
 80043a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80043a2:	f04f 0200 	mov.w	r2, #0
 80043a6:	f04f 0300 	mov.w	r3, #0
 80043aa:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80043ae:	4629      	mov	r1, r5
 80043b0:	028b      	lsls	r3, r1, #10
 80043b2:	4621      	mov	r1, r4
 80043b4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80043b8:	4621      	mov	r1, r4
 80043ba:	028a      	lsls	r2, r1, #10
 80043bc:	4610      	mov	r0, r2
 80043be:	4619      	mov	r1, r3
 80043c0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80043c4:	2200      	movs	r2, #0
 80043c6:	673b      	str	r3, [r7, #112]	@ 0x70
 80043c8:	677a      	str	r2, [r7, #116]	@ 0x74
 80043ca:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80043ce:	f7fc fb81 	bl	8000ad4 <__aeabi_uldivmod>
 80043d2:	4602      	mov	r2, r0
 80043d4:	460b      	mov	r3, r1
 80043d6:	4613      	mov	r3, r2
 80043d8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80043dc:	4b41      	ldr	r3, [pc, #260]	@ (80044e4 <HAL_RCC_GetSysClockFreq+0x354>)
 80043de:	685b      	ldr	r3, [r3, #4]
 80043e0:	0c1b      	lsrs	r3, r3, #16
 80043e2:	f003 0303 	and.w	r3, r3, #3
 80043e6:	3301      	adds	r3, #1
 80043e8:	005b      	lsls	r3, r3, #1
 80043ea:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 80043ee:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80043f2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80043f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80043fa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80043fe:	e0eb      	b.n	80045d8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004400:	4b38      	ldr	r3, [pc, #224]	@ (80044e4 <HAL_RCC_GetSysClockFreq+0x354>)
 8004402:	685b      	ldr	r3, [r3, #4]
 8004404:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004408:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800440c:	4b35      	ldr	r3, [pc, #212]	@ (80044e4 <HAL_RCC_GetSysClockFreq+0x354>)
 800440e:	685b      	ldr	r3, [r3, #4]
 8004410:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004414:	2b00      	cmp	r3, #0
 8004416:	d06b      	beq.n	80044f0 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004418:	4b32      	ldr	r3, [pc, #200]	@ (80044e4 <HAL_RCC_GetSysClockFreq+0x354>)
 800441a:	685b      	ldr	r3, [r3, #4]
 800441c:	099b      	lsrs	r3, r3, #6
 800441e:	2200      	movs	r2, #0
 8004420:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004422:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004424:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004426:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800442a:	663b      	str	r3, [r7, #96]	@ 0x60
 800442c:	2300      	movs	r3, #0
 800442e:	667b      	str	r3, [r7, #100]	@ 0x64
 8004430:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8004434:	4622      	mov	r2, r4
 8004436:	462b      	mov	r3, r5
 8004438:	f04f 0000 	mov.w	r0, #0
 800443c:	f04f 0100 	mov.w	r1, #0
 8004440:	0159      	lsls	r1, r3, #5
 8004442:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004446:	0150      	lsls	r0, r2, #5
 8004448:	4602      	mov	r2, r0
 800444a:	460b      	mov	r3, r1
 800444c:	4621      	mov	r1, r4
 800444e:	1a51      	subs	r1, r2, r1
 8004450:	61b9      	str	r1, [r7, #24]
 8004452:	4629      	mov	r1, r5
 8004454:	eb63 0301 	sbc.w	r3, r3, r1
 8004458:	61fb      	str	r3, [r7, #28]
 800445a:	f04f 0200 	mov.w	r2, #0
 800445e:	f04f 0300 	mov.w	r3, #0
 8004462:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8004466:	4659      	mov	r1, fp
 8004468:	018b      	lsls	r3, r1, #6
 800446a:	4651      	mov	r1, sl
 800446c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004470:	4651      	mov	r1, sl
 8004472:	018a      	lsls	r2, r1, #6
 8004474:	4651      	mov	r1, sl
 8004476:	ebb2 0801 	subs.w	r8, r2, r1
 800447a:	4659      	mov	r1, fp
 800447c:	eb63 0901 	sbc.w	r9, r3, r1
 8004480:	f04f 0200 	mov.w	r2, #0
 8004484:	f04f 0300 	mov.w	r3, #0
 8004488:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800448c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004490:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004494:	4690      	mov	r8, r2
 8004496:	4699      	mov	r9, r3
 8004498:	4623      	mov	r3, r4
 800449a:	eb18 0303 	adds.w	r3, r8, r3
 800449e:	613b      	str	r3, [r7, #16]
 80044a0:	462b      	mov	r3, r5
 80044a2:	eb49 0303 	adc.w	r3, r9, r3
 80044a6:	617b      	str	r3, [r7, #20]
 80044a8:	f04f 0200 	mov.w	r2, #0
 80044ac:	f04f 0300 	mov.w	r3, #0
 80044b0:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80044b4:	4629      	mov	r1, r5
 80044b6:	024b      	lsls	r3, r1, #9
 80044b8:	4621      	mov	r1, r4
 80044ba:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80044be:	4621      	mov	r1, r4
 80044c0:	024a      	lsls	r2, r1, #9
 80044c2:	4610      	mov	r0, r2
 80044c4:	4619      	mov	r1, r3
 80044c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80044ca:	2200      	movs	r2, #0
 80044cc:	65bb      	str	r3, [r7, #88]	@ 0x58
 80044ce:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80044d0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80044d4:	f7fc fafe 	bl	8000ad4 <__aeabi_uldivmod>
 80044d8:	4602      	mov	r2, r0
 80044da:	460b      	mov	r3, r1
 80044dc:	4613      	mov	r3, r2
 80044de:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80044e2:	e065      	b.n	80045b0 <HAL_RCC_GetSysClockFreq+0x420>
 80044e4:	40023800 	.word	0x40023800
 80044e8:	00f42400 	.word	0x00f42400
 80044ec:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80044f0:	4b3d      	ldr	r3, [pc, #244]	@ (80045e8 <HAL_RCC_GetSysClockFreq+0x458>)
 80044f2:	685b      	ldr	r3, [r3, #4]
 80044f4:	099b      	lsrs	r3, r3, #6
 80044f6:	2200      	movs	r2, #0
 80044f8:	4618      	mov	r0, r3
 80044fa:	4611      	mov	r1, r2
 80044fc:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004500:	653b      	str	r3, [r7, #80]	@ 0x50
 8004502:	2300      	movs	r3, #0
 8004504:	657b      	str	r3, [r7, #84]	@ 0x54
 8004506:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800450a:	4642      	mov	r2, r8
 800450c:	464b      	mov	r3, r9
 800450e:	f04f 0000 	mov.w	r0, #0
 8004512:	f04f 0100 	mov.w	r1, #0
 8004516:	0159      	lsls	r1, r3, #5
 8004518:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800451c:	0150      	lsls	r0, r2, #5
 800451e:	4602      	mov	r2, r0
 8004520:	460b      	mov	r3, r1
 8004522:	4641      	mov	r1, r8
 8004524:	1a51      	subs	r1, r2, r1
 8004526:	60b9      	str	r1, [r7, #8]
 8004528:	4649      	mov	r1, r9
 800452a:	eb63 0301 	sbc.w	r3, r3, r1
 800452e:	60fb      	str	r3, [r7, #12]
 8004530:	f04f 0200 	mov.w	r2, #0
 8004534:	f04f 0300 	mov.w	r3, #0
 8004538:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800453c:	4659      	mov	r1, fp
 800453e:	018b      	lsls	r3, r1, #6
 8004540:	4651      	mov	r1, sl
 8004542:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004546:	4651      	mov	r1, sl
 8004548:	018a      	lsls	r2, r1, #6
 800454a:	4651      	mov	r1, sl
 800454c:	1a54      	subs	r4, r2, r1
 800454e:	4659      	mov	r1, fp
 8004550:	eb63 0501 	sbc.w	r5, r3, r1
 8004554:	f04f 0200 	mov.w	r2, #0
 8004558:	f04f 0300 	mov.w	r3, #0
 800455c:	00eb      	lsls	r3, r5, #3
 800455e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004562:	00e2      	lsls	r2, r4, #3
 8004564:	4614      	mov	r4, r2
 8004566:	461d      	mov	r5, r3
 8004568:	4643      	mov	r3, r8
 800456a:	18e3      	adds	r3, r4, r3
 800456c:	603b      	str	r3, [r7, #0]
 800456e:	464b      	mov	r3, r9
 8004570:	eb45 0303 	adc.w	r3, r5, r3
 8004574:	607b      	str	r3, [r7, #4]
 8004576:	f04f 0200 	mov.w	r2, #0
 800457a:	f04f 0300 	mov.w	r3, #0
 800457e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004582:	4629      	mov	r1, r5
 8004584:	028b      	lsls	r3, r1, #10
 8004586:	4621      	mov	r1, r4
 8004588:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800458c:	4621      	mov	r1, r4
 800458e:	028a      	lsls	r2, r1, #10
 8004590:	4610      	mov	r0, r2
 8004592:	4619      	mov	r1, r3
 8004594:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004598:	2200      	movs	r2, #0
 800459a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800459c:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800459e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80045a2:	f7fc fa97 	bl	8000ad4 <__aeabi_uldivmod>
 80045a6:	4602      	mov	r2, r0
 80045a8:	460b      	mov	r3, r1
 80045aa:	4613      	mov	r3, r2
 80045ac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80045b0:	4b0d      	ldr	r3, [pc, #52]	@ (80045e8 <HAL_RCC_GetSysClockFreq+0x458>)
 80045b2:	685b      	ldr	r3, [r3, #4]
 80045b4:	0f1b      	lsrs	r3, r3, #28
 80045b6:	f003 0307 	and.w	r3, r3, #7
 80045ba:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 80045be:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80045c2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80045c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80045ca:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80045ce:	e003      	b.n	80045d8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80045d0:	4b06      	ldr	r3, [pc, #24]	@ (80045ec <HAL_RCC_GetSysClockFreq+0x45c>)
 80045d2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80045d6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80045d8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 80045dc:	4618      	mov	r0, r3
 80045de:	37b8      	adds	r7, #184	@ 0xb8
 80045e0:	46bd      	mov	sp, r7
 80045e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80045e6:	bf00      	nop
 80045e8:	40023800 	.word	0x40023800
 80045ec:	00f42400 	.word	0x00f42400

080045f0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b086      	sub	sp, #24
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d101      	bne.n	8004602 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80045fe:	2301      	movs	r3, #1
 8004600:	e28d      	b.n	8004b1e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f003 0301 	and.w	r3, r3, #1
 800460a:	2b00      	cmp	r3, #0
 800460c:	f000 8083 	beq.w	8004716 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004610:	4b94      	ldr	r3, [pc, #592]	@ (8004864 <HAL_RCC_OscConfig+0x274>)
 8004612:	689b      	ldr	r3, [r3, #8]
 8004614:	f003 030c 	and.w	r3, r3, #12
 8004618:	2b04      	cmp	r3, #4
 800461a:	d019      	beq.n	8004650 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800461c:	4b91      	ldr	r3, [pc, #580]	@ (8004864 <HAL_RCC_OscConfig+0x274>)
 800461e:	689b      	ldr	r3, [r3, #8]
 8004620:	f003 030c 	and.w	r3, r3, #12
        || \
 8004624:	2b08      	cmp	r3, #8
 8004626:	d106      	bne.n	8004636 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004628:	4b8e      	ldr	r3, [pc, #568]	@ (8004864 <HAL_RCC_OscConfig+0x274>)
 800462a:	685b      	ldr	r3, [r3, #4]
 800462c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004630:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004634:	d00c      	beq.n	8004650 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004636:	4b8b      	ldr	r3, [pc, #556]	@ (8004864 <HAL_RCC_OscConfig+0x274>)
 8004638:	689b      	ldr	r3, [r3, #8]
 800463a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800463e:	2b0c      	cmp	r3, #12
 8004640:	d112      	bne.n	8004668 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004642:	4b88      	ldr	r3, [pc, #544]	@ (8004864 <HAL_RCC_OscConfig+0x274>)
 8004644:	685b      	ldr	r3, [r3, #4]
 8004646:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800464a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800464e:	d10b      	bne.n	8004668 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004650:	4b84      	ldr	r3, [pc, #528]	@ (8004864 <HAL_RCC_OscConfig+0x274>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004658:	2b00      	cmp	r3, #0
 800465a:	d05b      	beq.n	8004714 <HAL_RCC_OscConfig+0x124>
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	685b      	ldr	r3, [r3, #4]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d157      	bne.n	8004714 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004664:	2301      	movs	r3, #1
 8004666:	e25a      	b.n	8004b1e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	685b      	ldr	r3, [r3, #4]
 800466c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004670:	d106      	bne.n	8004680 <HAL_RCC_OscConfig+0x90>
 8004672:	4b7c      	ldr	r3, [pc, #496]	@ (8004864 <HAL_RCC_OscConfig+0x274>)
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	4a7b      	ldr	r2, [pc, #492]	@ (8004864 <HAL_RCC_OscConfig+0x274>)
 8004678:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800467c:	6013      	str	r3, [r2, #0]
 800467e:	e01d      	b.n	80046bc <HAL_RCC_OscConfig+0xcc>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	685b      	ldr	r3, [r3, #4]
 8004684:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004688:	d10c      	bne.n	80046a4 <HAL_RCC_OscConfig+0xb4>
 800468a:	4b76      	ldr	r3, [pc, #472]	@ (8004864 <HAL_RCC_OscConfig+0x274>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4a75      	ldr	r2, [pc, #468]	@ (8004864 <HAL_RCC_OscConfig+0x274>)
 8004690:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004694:	6013      	str	r3, [r2, #0]
 8004696:	4b73      	ldr	r3, [pc, #460]	@ (8004864 <HAL_RCC_OscConfig+0x274>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	4a72      	ldr	r2, [pc, #456]	@ (8004864 <HAL_RCC_OscConfig+0x274>)
 800469c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80046a0:	6013      	str	r3, [r2, #0]
 80046a2:	e00b      	b.n	80046bc <HAL_RCC_OscConfig+0xcc>
 80046a4:	4b6f      	ldr	r3, [pc, #444]	@ (8004864 <HAL_RCC_OscConfig+0x274>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4a6e      	ldr	r2, [pc, #440]	@ (8004864 <HAL_RCC_OscConfig+0x274>)
 80046aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80046ae:	6013      	str	r3, [r2, #0]
 80046b0:	4b6c      	ldr	r3, [pc, #432]	@ (8004864 <HAL_RCC_OscConfig+0x274>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	4a6b      	ldr	r2, [pc, #428]	@ (8004864 <HAL_RCC_OscConfig+0x274>)
 80046b6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80046ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	685b      	ldr	r3, [r3, #4]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d013      	beq.n	80046ec <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046c4:	f7fe f930 	bl	8002928 <HAL_GetTick>
 80046c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046ca:	e008      	b.n	80046de <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80046cc:	f7fe f92c 	bl	8002928 <HAL_GetTick>
 80046d0:	4602      	mov	r2, r0
 80046d2:	693b      	ldr	r3, [r7, #16]
 80046d4:	1ad3      	subs	r3, r2, r3
 80046d6:	2b64      	cmp	r3, #100	@ 0x64
 80046d8:	d901      	bls.n	80046de <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80046da:	2303      	movs	r3, #3
 80046dc:	e21f      	b.n	8004b1e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046de:	4b61      	ldr	r3, [pc, #388]	@ (8004864 <HAL_RCC_OscConfig+0x274>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d0f0      	beq.n	80046cc <HAL_RCC_OscConfig+0xdc>
 80046ea:	e014      	b.n	8004716 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046ec:	f7fe f91c 	bl	8002928 <HAL_GetTick>
 80046f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80046f2:	e008      	b.n	8004706 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80046f4:	f7fe f918 	bl	8002928 <HAL_GetTick>
 80046f8:	4602      	mov	r2, r0
 80046fa:	693b      	ldr	r3, [r7, #16]
 80046fc:	1ad3      	subs	r3, r2, r3
 80046fe:	2b64      	cmp	r3, #100	@ 0x64
 8004700:	d901      	bls.n	8004706 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004702:	2303      	movs	r3, #3
 8004704:	e20b      	b.n	8004b1e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004706:	4b57      	ldr	r3, [pc, #348]	@ (8004864 <HAL_RCC_OscConfig+0x274>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800470e:	2b00      	cmp	r3, #0
 8004710:	d1f0      	bne.n	80046f4 <HAL_RCC_OscConfig+0x104>
 8004712:	e000      	b.n	8004716 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004714:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f003 0302 	and.w	r3, r3, #2
 800471e:	2b00      	cmp	r3, #0
 8004720:	d06f      	beq.n	8004802 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004722:	4b50      	ldr	r3, [pc, #320]	@ (8004864 <HAL_RCC_OscConfig+0x274>)
 8004724:	689b      	ldr	r3, [r3, #8]
 8004726:	f003 030c 	and.w	r3, r3, #12
 800472a:	2b00      	cmp	r3, #0
 800472c:	d017      	beq.n	800475e <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800472e:	4b4d      	ldr	r3, [pc, #308]	@ (8004864 <HAL_RCC_OscConfig+0x274>)
 8004730:	689b      	ldr	r3, [r3, #8]
 8004732:	f003 030c 	and.w	r3, r3, #12
        || \
 8004736:	2b08      	cmp	r3, #8
 8004738:	d105      	bne.n	8004746 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800473a:	4b4a      	ldr	r3, [pc, #296]	@ (8004864 <HAL_RCC_OscConfig+0x274>)
 800473c:	685b      	ldr	r3, [r3, #4]
 800473e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004742:	2b00      	cmp	r3, #0
 8004744:	d00b      	beq.n	800475e <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004746:	4b47      	ldr	r3, [pc, #284]	@ (8004864 <HAL_RCC_OscConfig+0x274>)
 8004748:	689b      	ldr	r3, [r3, #8]
 800474a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800474e:	2b0c      	cmp	r3, #12
 8004750:	d11c      	bne.n	800478c <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004752:	4b44      	ldr	r3, [pc, #272]	@ (8004864 <HAL_RCC_OscConfig+0x274>)
 8004754:	685b      	ldr	r3, [r3, #4]
 8004756:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800475a:	2b00      	cmp	r3, #0
 800475c:	d116      	bne.n	800478c <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800475e:	4b41      	ldr	r3, [pc, #260]	@ (8004864 <HAL_RCC_OscConfig+0x274>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f003 0302 	and.w	r3, r3, #2
 8004766:	2b00      	cmp	r3, #0
 8004768:	d005      	beq.n	8004776 <HAL_RCC_OscConfig+0x186>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	68db      	ldr	r3, [r3, #12]
 800476e:	2b01      	cmp	r3, #1
 8004770:	d001      	beq.n	8004776 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004772:	2301      	movs	r3, #1
 8004774:	e1d3      	b.n	8004b1e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004776:	4b3b      	ldr	r3, [pc, #236]	@ (8004864 <HAL_RCC_OscConfig+0x274>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	691b      	ldr	r3, [r3, #16]
 8004782:	00db      	lsls	r3, r3, #3
 8004784:	4937      	ldr	r1, [pc, #220]	@ (8004864 <HAL_RCC_OscConfig+0x274>)
 8004786:	4313      	orrs	r3, r2
 8004788:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800478a:	e03a      	b.n	8004802 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	68db      	ldr	r3, [r3, #12]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d020      	beq.n	80047d6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004794:	4b34      	ldr	r3, [pc, #208]	@ (8004868 <HAL_RCC_OscConfig+0x278>)
 8004796:	2201      	movs	r2, #1
 8004798:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800479a:	f7fe f8c5 	bl	8002928 <HAL_GetTick>
 800479e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047a0:	e008      	b.n	80047b4 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80047a2:	f7fe f8c1 	bl	8002928 <HAL_GetTick>
 80047a6:	4602      	mov	r2, r0
 80047a8:	693b      	ldr	r3, [r7, #16]
 80047aa:	1ad3      	subs	r3, r2, r3
 80047ac:	2b02      	cmp	r3, #2
 80047ae:	d901      	bls.n	80047b4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80047b0:	2303      	movs	r3, #3
 80047b2:	e1b4      	b.n	8004b1e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047b4:	4b2b      	ldr	r3, [pc, #172]	@ (8004864 <HAL_RCC_OscConfig+0x274>)
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f003 0302 	and.w	r3, r3, #2
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d0f0      	beq.n	80047a2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047c0:	4b28      	ldr	r3, [pc, #160]	@ (8004864 <HAL_RCC_OscConfig+0x274>)
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	691b      	ldr	r3, [r3, #16]
 80047cc:	00db      	lsls	r3, r3, #3
 80047ce:	4925      	ldr	r1, [pc, #148]	@ (8004864 <HAL_RCC_OscConfig+0x274>)
 80047d0:	4313      	orrs	r3, r2
 80047d2:	600b      	str	r3, [r1, #0]
 80047d4:	e015      	b.n	8004802 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80047d6:	4b24      	ldr	r3, [pc, #144]	@ (8004868 <HAL_RCC_OscConfig+0x278>)
 80047d8:	2200      	movs	r2, #0
 80047da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047dc:	f7fe f8a4 	bl	8002928 <HAL_GetTick>
 80047e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80047e2:	e008      	b.n	80047f6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80047e4:	f7fe f8a0 	bl	8002928 <HAL_GetTick>
 80047e8:	4602      	mov	r2, r0
 80047ea:	693b      	ldr	r3, [r7, #16]
 80047ec:	1ad3      	subs	r3, r2, r3
 80047ee:	2b02      	cmp	r3, #2
 80047f0:	d901      	bls.n	80047f6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80047f2:	2303      	movs	r3, #3
 80047f4:	e193      	b.n	8004b1e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80047f6:	4b1b      	ldr	r3, [pc, #108]	@ (8004864 <HAL_RCC_OscConfig+0x274>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f003 0302 	and.w	r3, r3, #2
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d1f0      	bne.n	80047e4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f003 0308 	and.w	r3, r3, #8
 800480a:	2b00      	cmp	r3, #0
 800480c:	d036      	beq.n	800487c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	695b      	ldr	r3, [r3, #20]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d016      	beq.n	8004844 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004816:	4b15      	ldr	r3, [pc, #84]	@ (800486c <HAL_RCC_OscConfig+0x27c>)
 8004818:	2201      	movs	r2, #1
 800481a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800481c:	f7fe f884 	bl	8002928 <HAL_GetTick>
 8004820:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004822:	e008      	b.n	8004836 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004824:	f7fe f880 	bl	8002928 <HAL_GetTick>
 8004828:	4602      	mov	r2, r0
 800482a:	693b      	ldr	r3, [r7, #16]
 800482c:	1ad3      	subs	r3, r2, r3
 800482e:	2b02      	cmp	r3, #2
 8004830:	d901      	bls.n	8004836 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004832:	2303      	movs	r3, #3
 8004834:	e173      	b.n	8004b1e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004836:	4b0b      	ldr	r3, [pc, #44]	@ (8004864 <HAL_RCC_OscConfig+0x274>)
 8004838:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800483a:	f003 0302 	and.w	r3, r3, #2
 800483e:	2b00      	cmp	r3, #0
 8004840:	d0f0      	beq.n	8004824 <HAL_RCC_OscConfig+0x234>
 8004842:	e01b      	b.n	800487c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004844:	4b09      	ldr	r3, [pc, #36]	@ (800486c <HAL_RCC_OscConfig+0x27c>)
 8004846:	2200      	movs	r2, #0
 8004848:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800484a:	f7fe f86d 	bl	8002928 <HAL_GetTick>
 800484e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004850:	e00e      	b.n	8004870 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004852:	f7fe f869 	bl	8002928 <HAL_GetTick>
 8004856:	4602      	mov	r2, r0
 8004858:	693b      	ldr	r3, [r7, #16]
 800485a:	1ad3      	subs	r3, r2, r3
 800485c:	2b02      	cmp	r3, #2
 800485e:	d907      	bls.n	8004870 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004860:	2303      	movs	r3, #3
 8004862:	e15c      	b.n	8004b1e <HAL_RCC_OscConfig+0x52e>
 8004864:	40023800 	.word	0x40023800
 8004868:	42470000 	.word	0x42470000
 800486c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004870:	4b8a      	ldr	r3, [pc, #552]	@ (8004a9c <HAL_RCC_OscConfig+0x4ac>)
 8004872:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004874:	f003 0302 	and.w	r3, r3, #2
 8004878:	2b00      	cmp	r3, #0
 800487a:	d1ea      	bne.n	8004852 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f003 0304 	and.w	r3, r3, #4
 8004884:	2b00      	cmp	r3, #0
 8004886:	f000 8097 	beq.w	80049b8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800488a:	2300      	movs	r3, #0
 800488c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800488e:	4b83      	ldr	r3, [pc, #524]	@ (8004a9c <HAL_RCC_OscConfig+0x4ac>)
 8004890:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004892:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004896:	2b00      	cmp	r3, #0
 8004898:	d10f      	bne.n	80048ba <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800489a:	2300      	movs	r3, #0
 800489c:	60bb      	str	r3, [r7, #8]
 800489e:	4b7f      	ldr	r3, [pc, #508]	@ (8004a9c <HAL_RCC_OscConfig+0x4ac>)
 80048a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048a2:	4a7e      	ldr	r2, [pc, #504]	@ (8004a9c <HAL_RCC_OscConfig+0x4ac>)
 80048a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80048a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80048aa:	4b7c      	ldr	r3, [pc, #496]	@ (8004a9c <HAL_RCC_OscConfig+0x4ac>)
 80048ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80048b2:	60bb      	str	r3, [r7, #8]
 80048b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80048b6:	2301      	movs	r3, #1
 80048b8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048ba:	4b79      	ldr	r3, [pc, #484]	@ (8004aa0 <HAL_RCC_OscConfig+0x4b0>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d118      	bne.n	80048f8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80048c6:	4b76      	ldr	r3, [pc, #472]	@ (8004aa0 <HAL_RCC_OscConfig+0x4b0>)
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	4a75      	ldr	r2, [pc, #468]	@ (8004aa0 <HAL_RCC_OscConfig+0x4b0>)
 80048cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80048d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80048d2:	f7fe f829 	bl	8002928 <HAL_GetTick>
 80048d6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048d8:	e008      	b.n	80048ec <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048da:	f7fe f825 	bl	8002928 <HAL_GetTick>
 80048de:	4602      	mov	r2, r0
 80048e0:	693b      	ldr	r3, [r7, #16]
 80048e2:	1ad3      	subs	r3, r2, r3
 80048e4:	2b02      	cmp	r3, #2
 80048e6:	d901      	bls.n	80048ec <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80048e8:	2303      	movs	r3, #3
 80048ea:	e118      	b.n	8004b1e <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048ec:	4b6c      	ldr	r3, [pc, #432]	@ (8004aa0 <HAL_RCC_OscConfig+0x4b0>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d0f0      	beq.n	80048da <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	689b      	ldr	r3, [r3, #8]
 80048fc:	2b01      	cmp	r3, #1
 80048fe:	d106      	bne.n	800490e <HAL_RCC_OscConfig+0x31e>
 8004900:	4b66      	ldr	r3, [pc, #408]	@ (8004a9c <HAL_RCC_OscConfig+0x4ac>)
 8004902:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004904:	4a65      	ldr	r2, [pc, #404]	@ (8004a9c <HAL_RCC_OscConfig+0x4ac>)
 8004906:	f043 0301 	orr.w	r3, r3, #1
 800490a:	6713      	str	r3, [r2, #112]	@ 0x70
 800490c:	e01c      	b.n	8004948 <HAL_RCC_OscConfig+0x358>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	689b      	ldr	r3, [r3, #8]
 8004912:	2b05      	cmp	r3, #5
 8004914:	d10c      	bne.n	8004930 <HAL_RCC_OscConfig+0x340>
 8004916:	4b61      	ldr	r3, [pc, #388]	@ (8004a9c <HAL_RCC_OscConfig+0x4ac>)
 8004918:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800491a:	4a60      	ldr	r2, [pc, #384]	@ (8004a9c <HAL_RCC_OscConfig+0x4ac>)
 800491c:	f043 0304 	orr.w	r3, r3, #4
 8004920:	6713      	str	r3, [r2, #112]	@ 0x70
 8004922:	4b5e      	ldr	r3, [pc, #376]	@ (8004a9c <HAL_RCC_OscConfig+0x4ac>)
 8004924:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004926:	4a5d      	ldr	r2, [pc, #372]	@ (8004a9c <HAL_RCC_OscConfig+0x4ac>)
 8004928:	f043 0301 	orr.w	r3, r3, #1
 800492c:	6713      	str	r3, [r2, #112]	@ 0x70
 800492e:	e00b      	b.n	8004948 <HAL_RCC_OscConfig+0x358>
 8004930:	4b5a      	ldr	r3, [pc, #360]	@ (8004a9c <HAL_RCC_OscConfig+0x4ac>)
 8004932:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004934:	4a59      	ldr	r2, [pc, #356]	@ (8004a9c <HAL_RCC_OscConfig+0x4ac>)
 8004936:	f023 0301 	bic.w	r3, r3, #1
 800493a:	6713      	str	r3, [r2, #112]	@ 0x70
 800493c:	4b57      	ldr	r3, [pc, #348]	@ (8004a9c <HAL_RCC_OscConfig+0x4ac>)
 800493e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004940:	4a56      	ldr	r2, [pc, #344]	@ (8004a9c <HAL_RCC_OscConfig+0x4ac>)
 8004942:	f023 0304 	bic.w	r3, r3, #4
 8004946:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	689b      	ldr	r3, [r3, #8]
 800494c:	2b00      	cmp	r3, #0
 800494e:	d015      	beq.n	800497c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004950:	f7fd ffea 	bl	8002928 <HAL_GetTick>
 8004954:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004956:	e00a      	b.n	800496e <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004958:	f7fd ffe6 	bl	8002928 <HAL_GetTick>
 800495c:	4602      	mov	r2, r0
 800495e:	693b      	ldr	r3, [r7, #16]
 8004960:	1ad3      	subs	r3, r2, r3
 8004962:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004966:	4293      	cmp	r3, r2
 8004968:	d901      	bls.n	800496e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800496a:	2303      	movs	r3, #3
 800496c:	e0d7      	b.n	8004b1e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800496e:	4b4b      	ldr	r3, [pc, #300]	@ (8004a9c <HAL_RCC_OscConfig+0x4ac>)
 8004970:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004972:	f003 0302 	and.w	r3, r3, #2
 8004976:	2b00      	cmp	r3, #0
 8004978:	d0ee      	beq.n	8004958 <HAL_RCC_OscConfig+0x368>
 800497a:	e014      	b.n	80049a6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800497c:	f7fd ffd4 	bl	8002928 <HAL_GetTick>
 8004980:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004982:	e00a      	b.n	800499a <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004984:	f7fd ffd0 	bl	8002928 <HAL_GetTick>
 8004988:	4602      	mov	r2, r0
 800498a:	693b      	ldr	r3, [r7, #16]
 800498c:	1ad3      	subs	r3, r2, r3
 800498e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004992:	4293      	cmp	r3, r2
 8004994:	d901      	bls.n	800499a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004996:	2303      	movs	r3, #3
 8004998:	e0c1      	b.n	8004b1e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800499a:	4b40      	ldr	r3, [pc, #256]	@ (8004a9c <HAL_RCC_OscConfig+0x4ac>)
 800499c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800499e:	f003 0302 	and.w	r3, r3, #2
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d1ee      	bne.n	8004984 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80049a6:	7dfb      	ldrb	r3, [r7, #23]
 80049a8:	2b01      	cmp	r3, #1
 80049aa:	d105      	bne.n	80049b8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80049ac:	4b3b      	ldr	r3, [pc, #236]	@ (8004a9c <HAL_RCC_OscConfig+0x4ac>)
 80049ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049b0:	4a3a      	ldr	r2, [pc, #232]	@ (8004a9c <HAL_RCC_OscConfig+0x4ac>)
 80049b2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80049b6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	699b      	ldr	r3, [r3, #24]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	f000 80ad 	beq.w	8004b1c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80049c2:	4b36      	ldr	r3, [pc, #216]	@ (8004a9c <HAL_RCC_OscConfig+0x4ac>)
 80049c4:	689b      	ldr	r3, [r3, #8]
 80049c6:	f003 030c 	and.w	r3, r3, #12
 80049ca:	2b08      	cmp	r3, #8
 80049cc:	d060      	beq.n	8004a90 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	699b      	ldr	r3, [r3, #24]
 80049d2:	2b02      	cmp	r3, #2
 80049d4:	d145      	bne.n	8004a62 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049d6:	4b33      	ldr	r3, [pc, #204]	@ (8004aa4 <HAL_RCC_OscConfig+0x4b4>)
 80049d8:	2200      	movs	r2, #0
 80049da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049dc:	f7fd ffa4 	bl	8002928 <HAL_GetTick>
 80049e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049e2:	e008      	b.n	80049f6 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049e4:	f7fd ffa0 	bl	8002928 <HAL_GetTick>
 80049e8:	4602      	mov	r2, r0
 80049ea:	693b      	ldr	r3, [r7, #16]
 80049ec:	1ad3      	subs	r3, r2, r3
 80049ee:	2b02      	cmp	r3, #2
 80049f0:	d901      	bls.n	80049f6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80049f2:	2303      	movs	r3, #3
 80049f4:	e093      	b.n	8004b1e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049f6:	4b29      	ldr	r3, [pc, #164]	@ (8004a9c <HAL_RCC_OscConfig+0x4ac>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d1f0      	bne.n	80049e4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	69da      	ldr	r2, [r3, #28]
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6a1b      	ldr	r3, [r3, #32]
 8004a0a:	431a      	orrs	r2, r3
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a10:	019b      	lsls	r3, r3, #6
 8004a12:	431a      	orrs	r2, r3
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a18:	085b      	lsrs	r3, r3, #1
 8004a1a:	3b01      	subs	r3, #1
 8004a1c:	041b      	lsls	r3, r3, #16
 8004a1e:	431a      	orrs	r2, r3
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a24:	061b      	lsls	r3, r3, #24
 8004a26:	431a      	orrs	r2, r3
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a2c:	071b      	lsls	r3, r3, #28
 8004a2e:	491b      	ldr	r1, [pc, #108]	@ (8004a9c <HAL_RCC_OscConfig+0x4ac>)
 8004a30:	4313      	orrs	r3, r2
 8004a32:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004a34:	4b1b      	ldr	r3, [pc, #108]	@ (8004aa4 <HAL_RCC_OscConfig+0x4b4>)
 8004a36:	2201      	movs	r2, #1
 8004a38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a3a:	f7fd ff75 	bl	8002928 <HAL_GetTick>
 8004a3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a40:	e008      	b.n	8004a54 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a42:	f7fd ff71 	bl	8002928 <HAL_GetTick>
 8004a46:	4602      	mov	r2, r0
 8004a48:	693b      	ldr	r3, [r7, #16]
 8004a4a:	1ad3      	subs	r3, r2, r3
 8004a4c:	2b02      	cmp	r3, #2
 8004a4e:	d901      	bls.n	8004a54 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004a50:	2303      	movs	r3, #3
 8004a52:	e064      	b.n	8004b1e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a54:	4b11      	ldr	r3, [pc, #68]	@ (8004a9c <HAL_RCC_OscConfig+0x4ac>)
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d0f0      	beq.n	8004a42 <HAL_RCC_OscConfig+0x452>
 8004a60:	e05c      	b.n	8004b1c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a62:	4b10      	ldr	r3, [pc, #64]	@ (8004aa4 <HAL_RCC_OscConfig+0x4b4>)
 8004a64:	2200      	movs	r2, #0
 8004a66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a68:	f7fd ff5e 	bl	8002928 <HAL_GetTick>
 8004a6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a6e:	e008      	b.n	8004a82 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a70:	f7fd ff5a 	bl	8002928 <HAL_GetTick>
 8004a74:	4602      	mov	r2, r0
 8004a76:	693b      	ldr	r3, [r7, #16]
 8004a78:	1ad3      	subs	r3, r2, r3
 8004a7a:	2b02      	cmp	r3, #2
 8004a7c:	d901      	bls.n	8004a82 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004a7e:	2303      	movs	r3, #3
 8004a80:	e04d      	b.n	8004b1e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a82:	4b06      	ldr	r3, [pc, #24]	@ (8004a9c <HAL_RCC_OscConfig+0x4ac>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d1f0      	bne.n	8004a70 <HAL_RCC_OscConfig+0x480>
 8004a8e:	e045      	b.n	8004b1c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	699b      	ldr	r3, [r3, #24]
 8004a94:	2b01      	cmp	r3, #1
 8004a96:	d107      	bne.n	8004aa8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004a98:	2301      	movs	r3, #1
 8004a9a:	e040      	b.n	8004b1e <HAL_RCC_OscConfig+0x52e>
 8004a9c:	40023800 	.word	0x40023800
 8004aa0:	40007000 	.word	0x40007000
 8004aa4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004aa8:	4b1f      	ldr	r3, [pc, #124]	@ (8004b28 <HAL_RCC_OscConfig+0x538>)
 8004aaa:	685b      	ldr	r3, [r3, #4]
 8004aac:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	699b      	ldr	r3, [r3, #24]
 8004ab2:	2b01      	cmp	r3, #1
 8004ab4:	d030      	beq.n	8004b18 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ac0:	429a      	cmp	r2, r3
 8004ac2:	d129      	bne.n	8004b18 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ace:	429a      	cmp	r2, r3
 8004ad0:	d122      	bne.n	8004b18 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004ad2:	68fa      	ldr	r2, [r7, #12]
 8004ad4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004ad8:	4013      	ands	r3, r2
 8004ada:	687a      	ldr	r2, [r7, #4]
 8004adc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004ade:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	d119      	bne.n	8004b18 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004aee:	085b      	lsrs	r3, r3, #1
 8004af0:	3b01      	subs	r3, #1
 8004af2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004af4:	429a      	cmp	r2, r3
 8004af6:	d10f      	bne.n	8004b18 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b02:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004b04:	429a      	cmp	r2, r3
 8004b06:	d107      	bne.n	8004b18 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b12:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004b14:	429a      	cmp	r2, r3
 8004b16:	d001      	beq.n	8004b1c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004b18:	2301      	movs	r3, #1
 8004b1a:	e000      	b.n	8004b1e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004b1c:	2300      	movs	r3, #0
}
 8004b1e:	4618      	mov	r0, r3
 8004b20:	3718      	adds	r7, #24
 8004b22:	46bd      	mov	sp, r7
 8004b24:	bd80      	pop	{r7, pc}
 8004b26:	bf00      	nop
 8004b28:	40023800 	.word	0x40023800

08004b2c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b082      	sub	sp, #8
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d101      	bne.n	8004b3e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004b3a:	2301      	movs	r3, #1
 8004b3c:	e07b      	b.n	8004c36 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d108      	bne.n	8004b58 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	685b      	ldr	r3, [r3, #4]
 8004b4a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004b4e:	d009      	beq.n	8004b64 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2200      	movs	r2, #0
 8004b54:	61da      	str	r2, [r3, #28]
 8004b56:	e005      	b.n	8004b64 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2200      	movs	r2, #0
 8004b62:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2200      	movs	r2, #0
 8004b68:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004b70:	b2db      	uxtb	r3, r3
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d106      	bne.n	8004b84 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2200      	movs	r2, #0
 8004b7a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004b7e:	6878      	ldr	r0, [r7, #4]
 8004b80:	f7fd fa6a 	bl	8002058 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2202      	movs	r2, #2
 8004b88:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	681a      	ldr	r2, [r3, #0]
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004b9a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	685b      	ldr	r3, [r3, #4]
 8004ba0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	689b      	ldr	r3, [r3, #8]
 8004ba8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004bac:	431a      	orrs	r2, r3
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	68db      	ldr	r3, [r3, #12]
 8004bb2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004bb6:	431a      	orrs	r2, r3
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	691b      	ldr	r3, [r3, #16]
 8004bbc:	f003 0302 	and.w	r3, r3, #2
 8004bc0:	431a      	orrs	r2, r3
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	695b      	ldr	r3, [r3, #20]
 8004bc6:	f003 0301 	and.w	r3, r3, #1
 8004bca:	431a      	orrs	r2, r3
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	699b      	ldr	r3, [r3, #24]
 8004bd0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004bd4:	431a      	orrs	r2, r3
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	69db      	ldr	r3, [r3, #28]
 8004bda:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004bde:	431a      	orrs	r2, r3
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6a1b      	ldr	r3, [r3, #32]
 8004be4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004be8:	ea42 0103 	orr.w	r1, r2, r3
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bf0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	430a      	orrs	r2, r1
 8004bfa:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	699b      	ldr	r3, [r3, #24]
 8004c00:	0c1b      	lsrs	r3, r3, #16
 8004c02:	f003 0104 	and.w	r1, r3, #4
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c0a:	f003 0210 	and.w	r2, r3, #16
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	430a      	orrs	r2, r1
 8004c14:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	69da      	ldr	r2, [r3, #28]
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004c24:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2200      	movs	r2, #0
 8004c2a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2201      	movs	r2, #1
 8004c30:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004c34:	2300      	movs	r3, #0
}
 8004c36:	4618      	mov	r0, r3
 8004c38:	3708      	adds	r7, #8
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	bd80      	pop	{r7, pc}

08004c3e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004c3e:	b580      	push	{r7, lr}
 8004c40:	b082      	sub	sp, #8
 8004c42:	af00      	add	r7, sp, #0
 8004c44:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d101      	bne.n	8004c50 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004c4c:	2301      	movs	r3, #1
 8004c4e:	e041      	b.n	8004cd4 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c56:	b2db      	uxtb	r3, r3
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d106      	bne.n	8004c6a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2200      	movs	r2, #0
 8004c60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004c64:	6878      	ldr	r0, [r7, #4]
 8004c66:	f7fd fc6b 	bl	8002540 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2202      	movs	r2, #2
 8004c6e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681a      	ldr	r2, [r3, #0]
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	3304      	adds	r3, #4
 8004c7a:	4619      	mov	r1, r3
 8004c7c:	4610      	mov	r0, r2
 8004c7e:	f000 fcff 	bl	8005680 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2201      	movs	r2, #1
 8004c86:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2201      	movs	r2, #1
 8004c8e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2201      	movs	r2, #1
 8004c96:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2201      	movs	r2, #1
 8004c9e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2201      	movs	r2, #1
 8004ca6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2201      	movs	r2, #1
 8004cae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2201      	movs	r2, #1
 8004cb6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2201      	movs	r2, #1
 8004cbe:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	2201      	movs	r2, #1
 8004cc6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	2201      	movs	r2, #1
 8004cce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004cd2:	2300      	movs	r3, #0
}
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	3708      	adds	r7, #8
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	bd80      	pop	{r7, pc}

08004cdc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004cdc:	b480      	push	{r7}
 8004cde:	b085      	sub	sp, #20
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004cea:	b2db      	uxtb	r3, r3
 8004cec:	2b01      	cmp	r3, #1
 8004cee:	d001      	beq.n	8004cf4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004cf0:	2301      	movs	r3, #1
 8004cf2:	e04e      	b.n	8004d92 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2202      	movs	r2, #2
 8004cf8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	68da      	ldr	r2, [r3, #12]
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f042 0201 	orr.w	r2, r2, #1
 8004d0a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	4a23      	ldr	r2, [pc, #140]	@ (8004da0 <HAL_TIM_Base_Start_IT+0xc4>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d022      	beq.n	8004d5c <HAL_TIM_Base_Start_IT+0x80>
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d1e:	d01d      	beq.n	8004d5c <HAL_TIM_Base_Start_IT+0x80>
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4a1f      	ldr	r2, [pc, #124]	@ (8004da4 <HAL_TIM_Base_Start_IT+0xc8>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d018      	beq.n	8004d5c <HAL_TIM_Base_Start_IT+0x80>
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	4a1e      	ldr	r2, [pc, #120]	@ (8004da8 <HAL_TIM_Base_Start_IT+0xcc>)
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d013      	beq.n	8004d5c <HAL_TIM_Base_Start_IT+0x80>
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	4a1c      	ldr	r2, [pc, #112]	@ (8004dac <HAL_TIM_Base_Start_IT+0xd0>)
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d00e      	beq.n	8004d5c <HAL_TIM_Base_Start_IT+0x80>
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	4a1b      	ldr	r2, [pc, #108]	@ (8004db0 <HAL_TIM_Base_Start_IT+0xd4>)
 8004d44:	4293      	cmp	r3, r2
 8004d46:	d009      	beq.n	8004d5c <HAL_TIM_Base_Start_IT+0x80>
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	4a19      	ldr	r2, [pc, #100]	@ (8004db4 <HAL_TIM_Base_Start_IT+0xd8>)
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d004      	beq.n	8004d5c <HAL_TIM_Base_Start_IT+0x80>
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	4a18      	ldr	r2, [pc, #96]	@ (8004db8 <HAL_TIM_Base_Start_IT+0xdc>)
 8004d58:	4293      	cmp	r3, r2
 8004d5a:	d111      	bne.n	8004d80 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	689b      	ldr	r3, [r3, #8]
 8004d62:	f003 0307 	and.w	r3, r3, #7
 8004d66:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	2b06      	cmp	r3, #6
 8004d6c:	d010      	beq.n	8004d90 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	681a      	ldr	r2, [r3, #0]
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f042 0201 	orr.w	r2, r2, #1
 8004d7c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d7e:	e007      	b.n	8004d90 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	681a      	ldr	r2, [r3, #0]
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f042 0201 	orr.w	r2, r2, #1
 8004d8e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004d90:	2300      	movs	r3, #0
}
 8004d92:	4618      	mov	r0, r3
 8004d94:	3714      	adds	r7, #20
 8004d96:	46bd      	mov	sp, r7
 8004d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9c:	4770      	bx	lr
 8004d9e:	bf00      	nop
 8004da0:	40010000 	.word	0x40010000
 8004da4:	40000400 	.word	0x40000400
 8004da8:	40000800 	.word	0x40000800
 8004dac:	40000c00 	.word	0x40000c00
 8004db0:	40010400 	.word	0x40010400
 8004db4:	40014000 	.word	0x40014000
 8004db8:	40001800 	.word	0x40001800

08004dbc <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8004dbc:	b480      	push	{r7}
 8004dbe:	b083      	sub	sp, #12
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	68da      	ldr	r2, [r3, #12]
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f022 0201 	bic.w	r2, r2, #1
 8004dd2:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	6a1a      	ldr	r2, [r3, #32]
 8004dda:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004dde:	4013      	ands	r3, r2
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d10f      	bne.n	8004e04 <HAL_TIM_Base_Stop_IT+0x48>
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	6a1a      	ldr	r2, [r3, #32]
 8004dea:	f240 4344 	movw	r3, #1092	@ 0x444
 8004dee:	4013      	ands	r3, r2
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d107      	bne.n	8004e04 <HAL_TIM_Base_Stop_IT+0x48>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	681a      	ldr	r2, [r3, #0]
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f022 0201 	bic.w	r2, r2, #1
 8004e02:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2201      	movs	r2, #1
 8004e08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8004e0c:	2300      	movs	r3, #0
}
 8004e0e:	4618      	mov	r0, r3
 8004e10:	370c      	adds	r7, #12
 8004e12:	46bd      	mov	sp, r7
 8004e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e18:	4770      	bx	lr

08004e1a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004e1a:	b580      	push	{r7, lr}
 8004e1c:	b082      	sub	sp, #8
 8004e1e:	af00      	add	r7, sp, #0
 8004e20:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d101      	bne.n	8004e2c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004e28:	2301      	movs	r3, #1
 8004e2a:	e041      	b.n	8004eb0 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e32:	b2db      	uxtb	r3, r3
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d106      	bne.n	8004e46 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004e40:	6878      	ldr	r0, [r7, #4]
 8004e42:	f000 f839 	bl	8004eb8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2202      	movs	r2, #2
 8004e4a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681a      	ldr	r2, [r3, #0]
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	3304      	adds	r3, #4
 8004e56:	4619      	mov	r1, r3
 8004e58:	4610      	mov	r0, r2
 8004e5a:	f000 fc11 	bl	8005680 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	2201      	movs	r2, #1
 8004e62:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	2201      	movs	r2, #1
 8004e6a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2201      	movs	r2, #1
 8004e72:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	2201      	movs	r2, #1
 8004e7a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2201      	movs	r2, #1
 8004e82:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2201      	movs	r2, #1
 8004e8a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	2201      	movs	r2, #1
 8004e92:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2201      	movs	r2, #1
 8004e9a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2201      	movs	r2, #1
 8004ea2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2201      	movs	r2, #1
 8004eaa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004eae:	2300      	movs	r3, #0
}
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	3708      	adds	r7, #8
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	bd80      	pop	{r7, pc}

08004eb8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004eb8:	b480      	push	{r7}
 8004eba:	b083      	sub	sp, #12
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004ec0:	bf00      	nop
 8004ec2:	370c      	adds	r7, #12
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eca:	4770      	bx	lr

08004ecc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b084      	sub	sp, #16
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
 8004ed4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d109      	bne.n	8004ef0 <HAL_TIM_PWM_Start+0x24>
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004ee2:	b2db      	uxtb	r3, r3
 8004ee4:	2b01      	cmp	r3, #1
 8004ee6:	bf14      	ite	ne
 8004ee8:	2301      	movne	r3, #1
 8004eea:	2300      	moveq	r3, #0
 8004eec:	b2db      	uxtb	r3, r3
 8004eee:	e022      	b.n	8004f36 <HAL_TIM_PWM_Start+0x6a>
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	2b04      	cmp	r3, #4
 8004ef4:	d109      	bne.n	8004f0a <HAL_TIM_PWM_Start+0x3e>
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004efc:	b2db      	uxtb	r3, r3
 8004efe:	2b01      	cmp	r3, #1
 8004f00:	bf14      	ite	ne
 8004f02:	2301      	movne	r3, #1
 8004f04:	2300      	moveq	r3, #0
 8004f06:	b2db      	uxtb	r3, r3
 8004f08:	e015      	b.n	8004f36 <HAL_TIM_PWM_Start+0x6a>
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	2b08      	cmp	r3, #8
 8004f0e:	d109      	bne.n	8004f24 <HAL_TIM_PWM_Start+0x58>
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004f16:	b2db      	uxtb	r3, r3
 8004f18:	2b01      	cmp	r3, #1
 8004f1a:	bf14      	ite	ne
 8004f1c:	2301      	movne	r3, #1
 8004f1e:	2300      	moveq	r3, #0
 8004f20:	b2db      	uxtb	r3, r3
 8004f22:	e008      	b.n	8004f36 <HAL_TIM_PWM_Start+0x6a>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004f2a:	b2db      	uxtb	r3, r3
 8004f2c:	2b01      	cmp	r3, #1
 8004f2e:	bf14      	ite	ne
 8004f30:	2301      	movne	r3, #1
 8004f32:	2300      	moveq	r3, #0
 8004f34:	b2db      	uxtb	r3, r3
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d001      	beq.n	8004f3e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	e07c      	b.n	8005038 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d104      	bne.n	8004f4e <HAL_TIM_PWM_Start+0x82>
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2202      	movs	r2, #2
 8004f48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004f4c:	e013      	b.n	8004f76 <HAL_TIM_PWM_Start+0xaa>
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	2b04      	cmp	r3, #4
 8004f52:	d104      	bne.n	8004f5e <HAL_TIM_PWM_Start+0x92>
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2202      	movs	r2, #2
 8004f58:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004f5c:	e00b      	b.n	8004f76 <HAL_TIM_PWM_Start+0xaa>
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	2b08      	cmp	r3, #8
 8004f62:	d104      	bne.n	8004f6e <HAL_TIM_PWM_Start+0xa2>
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2202      	movs	r2, #2
 8004f68:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004f6c:	e003      	b.n	8004f76 <HAL_TIM_PWM_Start+0xaa>
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2202      	movs	r2, #2
 8004f72:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	2201      	movs	r2, #1
 8004f7c:	6839      	ldr	r1, [r7, #0]
 8004f7e:	4618      	mov	r0, r3
 8004f80:	f000 fe74 	bl	8005c6c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	4a2d      	ldr	r2, [pc, #180]	@ (8005040 <HAL_TIM_PWM_Start+0x174>)
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d004      	beq.n	8004f98 <HAL_TIM_PWM_Start+0xcc>
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	4a2c      	ldr	r2, [pc, #176]	@ (8005044 <HAL_TIM_PWM_Start+0x178>)
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d101      	bne.n	8004f9c <HAL_TIM_PWM_Start+0xd0>
 8004f98:	2301      	movs	r3, #1
 8004f9a:	e000      	b.n	8004f9e <HAL_TIM_PWM_Start+0xd2>
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d007      	beq.n	8004fb2 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004fb0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	4a22      	ldr	r2, [pc, #136]	@ (8005040 <HAL_TIM_PWM_Start+0x174>)
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	d022      	beq.n	8005002 <HAL_TIM_PWM_Start+0x136>
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004fc4:	d01d      	beq.n	8005002 <HAL_TIM_PWM_Start+0x136>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	4a1f      	ldr	r2, [pc, #124]	@ (8005048 <HAL_TIM_PWM_Start+0x17c>)
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d018      	beq.n	8005002 <HAL_TIM_PWM_Start+0x136>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	4a1d      	ldr	r2, [pc, #116]	@ (800504c <HAL_TIM_PWM_Start+0x180>)
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d013      	beq.n	8005002 <HAL_TIM_PWM_Start+0x136>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	4a1c      	ldr	r2, [pc, #112]	@ (8005050 <HAL_TIM_PWM_Start+0x184>)
 8004fe0:	4293      	cmp	r3, r2
 8004fe2:	d00e      	beq.n	8005002 <HAL_TIM_PWM_Start+0x136>
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	4a16      	ldr	r2, [pc, #88]	@ (8005044 <HAL_TIM_PWM_Start+0x178>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d009      	beq.n	8005002 <HAL_TIM_PWM_Start+0x136>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	4a18      	ldr	r2, [pc, #96]	@ (8005054 <HAL_TIM_PWM_Start+0x188>)
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d004      	beq.n	8005002 <HAL_TIM_PWM_Start+0x136>
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4a16      	ldr	r2, [pc, #88]	@ (8005058 <HAL_TIM_PWM_Start+0x18c>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d111      	bne.n	8005026 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	689b      	ldr	r3, [r3, #8]
 8005008:	f003 0307 	and.w	r3, r3, #7
 800500c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	2b06      	cmp	r3, #6
 8005012:	d010      	beq.n	8005036 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	681a      	ldr	r2, [r3, #0]
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f042 0201 	orr.w	r2, r2, #1
 8005022:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005024:	e007      	b.n	8005036 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	681a      	ldr	r2, [r3, #0]
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f042 0201 	orr.w	r2, r2, #1
 8005034:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005036:	2300      	movs	r3, #0
}
 8005038:	4618      	mov	r0, r3
 800503a:	3710      	adds	r7, #16
 800503c:	46bd      	mov	sp, r7
 800503e:	bd80      	pop	{r7, pc}
 8005040:	40010000 	.word	0x40010000
 8005044:	40010400 	.word	0x40010400
 8005048:	40000400 	.word	0x40000400
 800504c:	40000800 	.word	0x40000800
 8005050:	40000c00 	.word	0x40000c00
 8005054:	40014000 	.word	0x40014000
 8005058:	40001800 	.word	0x40001800

0800505c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800505c:	b580      	push	{r7, lr}
 800505e:	b082      	sub	sp, #8
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
 8005064:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	2200      	movs	r2, #0
 800506c:	6839      	ldr	r1, [r7, #0]
 800506e:	4618      	mov	r0, r3
 8005070:	f000 fdfc 	bl	8005c6c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	4a2e      	ldr	r2, [pc, #184]	@ (8005134 <HAL_TIM_PWM_Stop+0xd8>)
 800507a:	4293      	cmp	r3, r2
 800507c:	d004      	beq.n	8005088 <HAL_TIM_PWM_Stop+0x2c>
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	4a2d      	ldr	r2, [pc, #180]	@ (8005138 <HAL_TIM_PWM_Stop+0xdc>)
 8005084:	4293      	cmp	r3, r2
 8005086:	d101      	bne.n	800508c <HAL_TIM_PWM_Stop+0x30>
 8005088:	2301      	movs	r3, #1
 800508a:	e000      	b.n	800508e <HAL_TIM_PWM_Stop+0x32>
 800508c:	2300      	movs	r3, #0
 800508e:	2b00      	cmp	r3, #0
 8005090:	d017      	beq.n	80050c2 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	6a1a      	ldr	r2, [r3, #32]
 8005098:	f241 1311 	movw	r3, #4369	@ 0x1111
 800509c:	4013      	ands	r3, r2
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d10f      	bne.n	80050c2 <HAL_TIM_PWM_Stop+0x66>
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	6a1a      	ldr	r2, [r3, #32]
 80050a8:	f240 4344 	movw	r3, #1092	@ 0x444
 80050ac:	4013      	ands	r3, r2
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d107      	bne.n	80050c2 <HAL_TIM_PWM_Stop+0x66>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80050c0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	6a1a      	ldr	r2, [r3, #32]
 80050c8:	f241 1311 	movw	r3, #4369	@ 0x1111
 80050cc:	4013      	ands	r3, r2
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d10f      	bne.n	80050f2 <HAL_TIM_PWM_Stop+0x96>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	6a1a      	ldr	r2, [r3, #32]
 80050d8:	f240 4344 	movw	r3, #1092	@ 0x444
 80050dc:	4013      	ands	r3, r2
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d107      	bne.n	80050f2 <HAL_TIM_PWM_Stop+0x96>
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	681a      	ldr	r2, [r3, #0]
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f022 0201 	bic.w	r2, r2, #1
 80050f0:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d104      	bne.n	8005102 <HAL_TIM_PWM_Stop+0xa6>
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2201      	movs	r2, #1
 80050fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005100:	e013      	b.n	800512a <HAL_TIM_PWM_Stop+0xce>
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	2b04      	cmp	r3, #4
 8005106:	d104      	bne.n	8005112 <HAL_TIM_PWM_Stop+0xb6>
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2201      	movs	r2, #1
 800510c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005110:	e00b      	b.n	800512a <HAL_TIM_PWM_Stop+0xce>
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	2b08      	cmp	r3, #8
 8005116:	d104      	bne.n	8005122 <HAL_TIM_PWM_Stop+0xc6>
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2201      	movs	r2, #1
 800511c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005120:	e003      	b.n	800512a <HAL_TIM_PWM_Stop+0xce>
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2201      	movs	r2, #1
 8005126:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 800512a:	2300      	movs	r3, #0
}
 800512c:	4618      	mov	r0, r3
 800512e:	3708      	adds	r7, #8
 8005130:	46bd      	mov	sp, r7
 8005132:	bd80      	pop	{r7, pc}
 8005134:	40010000 	.word	0x40010000
 8005138:	40010400 	.word	0x40010400

0800513c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800513c:	b580      	push	{r7, lr}
 800513e:	b084      	sub	sp, #16
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	68db      	ldr	r3, [r3, #12]
 800514a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	691b      	ldr	r3, [r3, #16]
 8005152:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005154:	68bb      	ldr	r3, [r7, #8]
 8005156:	f003 0302 	and.w	r3, r3, #2
 800515a:	2b00      	cmp	r3, #0
 800515c:	d020      	beq.n	80051a0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	f003 0302 	and.w	r3, r3, #2
 8005164:	2b00      	cmp	r3, #0
 8005166:	d01b      	beq.n	80051a0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f06f 0202 	mvn.w	r2, #2
 8005170:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2201      	movs	r2, #1
 8005176:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	699b      	ldr	r3, [r3, #24]
 800517e:	f003 0303 	and.w	r3, r3, #3
 8005182:	2b00      	cmp	r3, #0
 8005184:	d003      	beq.n	800518e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005186:	6878      	ldr	r0, [r7, #4]
 8005188:	f000 fa5b 	bl	8005642 <HAL_TIM_IC_CaptureCallback>
 800518c:	e005      	b.n	800519a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800518e:	6878      	ldr	r0, [r7, #4]
 8005190:	f000 fa4d 	bl	800562e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005194:	6878      	ldr	r0, [r7, #4]
 8005196:	f000 fa5e 	bl	8005656 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2200      	movs	r2, #0
 800519e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80051a0:	68bb      	ldr	r3, [r7, #8]
 80051a2:	f003 0304 	and.w	r3, r3, #4
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d020      	beq.n	80051ec <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	f003 0304 	and.w	r3, r3, #4
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d01b      	beq.n	80051ec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f06f 0204 	mvn.w	r2, #4
 80051bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	2202      	movs	r2, #2
 80051c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	699b      	ldr	r3, [r3, #24]
 80051ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d003      	beq.n	80051da <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051d2:	6878      	ldr	r0, [r7, #4]
 80051d4:	f000 fa35 	bl	8005642 <HAL_TIM_IC_CaptureCallback>
 80051d8:	e005      	b.n	80051e6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051da:	6878      	ldr	r0, [r7, #4]
 80051dc:	f000 fa27 	bl	800562e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051e0:	6878      	ldr	r0, [r7, #4]
 80051e2:	f000 fa38 	bl	8005656 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2200      	movs	r2, #0
 80051ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80051ec:	68bb      	ldr	r3, [r7, #8]
 80051ee:	f003 0308 	and.w	r3, r3, #8
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d020      	beq.n	8005238 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	f003 0308 	and.w	r3, r3, #8
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d01b      	beq.n	8005238 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f06f 0208 	mvn.w	r2, #8
 8005208:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2204      	movs	r2, #4
 800520e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	69db      	ldr	r3, [r3, #28]
 8005216:	f003 0303 	and.w	r3, r3, #3
 800521a:	2b00      	cmp	r3, #0
 800521c:	d003      	beq.n	8005226 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800521e:	6878      	ldr	r0, [r7, #4]
 8005220:	f000 fa0f 	bl	8005642 <HAL_TIM_IC_CaptureCallback>
 8005224:	e005      	b.n	8005232 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005226:	6878      	ldr	r0, [r7, #4]
 8005228:	f000 fa01 	bl	800562e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800522c:	6878      	ldr	r0, [r7, #4]
 800522e:	f000 fa12 	bl	8005656 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2200      	movs	r2, #0
 8005236:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005238:	68bb      	ldr	r3, [r7, #8]
 800523a:	f003 0310 	and.w	r3, r3, #16
 800523e:	2b00      	cmp	r3, #0
 8005240:	d020      	beq.n	8005284 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	f003 0310 	and.w	r3, r3, #16
 8005248:	2b00      	cmp	r3, #0
 800524a:	d01b      	beq.n	8005284 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f06f 0210 	mvn.w	r2, #16
 8005254:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2208      	movs	r2, #8
 800525a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	69db      	ldr	r3, [r3, #28]
 8005262:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005266:	2b00      	cmp	r3, #0
 8005268:	d003      	beq.n	8005272 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800526a:	6878      	ldr	r0, [r7, #4]
 800526c:	f000 f9e9 	bl	8005642 <HAL_TIM_IC_CaptureCallback>
 8005270:	e005      	b.n	800527e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005272:	6878      	ldr	r0, [r7, #4]
 8005274:	f000 f9db 	bl	800562e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005278:	6878      	ldr	r0, [r7, #4]
 800527a:	f000 f9ec 	bl	8005656 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	2200      	movs	r2, #0
 8005282:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005284:	68bb      	ldr	r3, [r7, #8]
 8005286:	f003 0301 	and.w	r3, r3, #1
 800528a:	2b00      	cmp	r3, #0
 800528c:	d00c      	beq.n	80052a8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	f003 0301 	and.w	r3, r3, #1
 8005294:	2b00      	cmp	r3, #0
 8005296:	d007      	beq.n	80052a8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f06f 0201 	mvn.w	r2, #1
 80052a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80052a2:	6878      	ldr	r0, [r7, #4]
 80052a4:	f7fc fc00 	bl	8001aa8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80052a8:	68bb      	ldr	r3, [r7, #8]
 80052aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d00c      	beq.n	80052cc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d007      	beq.n	80052cc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80052c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80052c6:	6878      	ldr	r0, [r7, #4]
 80052c8:	f000 fd7c 	bl	8005dc4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80052cc:	68bb      	ldr	r3, [r7, #8]
 80052ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d00c      	beq.n	80052f0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d007      	beq.n	80052f0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80052e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80052ea:	6878      	ldr	r0, [r7, #4]
 80052ec:	f000 f9bd 	bl	800566a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80052f0:	68bb      	ldr	r3, [r7, #8]
 80052f2:	f003 0320 	and.w	r3, r3, #32
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d00c      	beq.n	8005314 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	f003 0320 	and.w	r3, r3, #32
 8005300:	2b00      	cmp	r3, #0
 8005302:	d007      	beq.n	8005314 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f06f 0220 	mvn.w	r2, #32
 800530c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800530e:	6878      	ldr	r0, [r7, #4]
 8005310:	f000 fd4e 	bl	8005db0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005314:	bf00      	nop
 8005316:	3710      	adds	r7, #16
 8005318:	46bd      	mov	sp, r7
 800531a:	bd80      	pop	{r7, pc}

0800531c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800531c:	b580      	push	{r7, lr}
 800531e:	b086      	sub	sp, #24
 8005320:	af00      	add	r7, sp, #0
 8005322:	60f8      	str	r0, [r7, #12]
 8005324:	60b9      	str	r1, [r7, #8]
 8005326:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005328:	2300      	movs	r3, #0
 800532a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005332:	2b01      	cmp	r3, #1
 8005334:	d101      	bne.n	800533a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005336:	2302      	movs	r3, #2
 8005338:	e0ae      	b.n	8005498 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	2201      	movs	r2, #1
 800533e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2b0c      	cmp	r3, #12
 8005346:	f200 809f 	bhi.w	8005488 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800534a:	a201      	add	r2, pc, #4	@ (adr r2, 8005350 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800534c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005350:	08005385 	.word	0x08005385
 8005354:	08005489 	.word	0x08005489
 8005358:	08005489 	.word	0x08005489
 800535c:	08005489 	.word	0x08005489
 8005360:	080053c5 	.word	0x080053c5
 8005364:	08005489 	.word	0x08005489
 8005368:	08005489 	.word	0x08005489
 800536c:	08005489 	.word	0x08005489
 8005370:	08005407 	.word	0x08005407
 8005374:	08005489 	.word	0x08005489
 8005378:	08005489 	.word	0x08005489
 800537c:	08005489 	.word	0x08005489
 8005380:	08005447 	.word	0x08005447
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	68b9      	ldr	r1, [r7, #8]
 800538a:	4618      	mov	r0, r3
 800538c:	f000 fa24 	bl	80057d8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	699a      	ldr	r2, [r3, #24]
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f042 0208 	orr.w	r2, r2, #8
 800539e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	699a      	ldr	r2, [r3, #24]
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f022 0204 	bic.w	r2, r2, #4
 80053ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	6999      	ldr	r1, [r3, #24]
 80053b6:	68bb      	ldr	r3, [r7, #8]
 80053b8:	691a      	ldr	r2, [r3, #16]
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	430a      	orrs	r2, r1
 80053c0:	619a      	str	r2, [r3, #24]
      break;
 80053c2:	e064      	b.n	800548e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	68b9      	ldr	r1, [r7, #8]
 80053ca:	4618      	mov	r0, r3
 80053cc:	f000 fa74 	bl	80058b8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	699a      	ldr	r2, [r3, #24]
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80053de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	699a      	ldr	r2, [r3, #24]
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80053ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	6999      	ldr	r1, [r3, #24]
 80053f6:	68bb      	ldr	r3, [r7, #8]
 80053f8:	691b      	ldr	r3, [r3, #16]
 80053fa:	021a      	lsls	r2, r3, #8
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	430a      	orrs	r2, r1
 8005402:	619a      	str	r2, [r3, #24]
      break;
 8005404:	e043      	b.n	800548e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	68b9      	ldr	r1, [r7, #8]
 800540c:	4618      	mov	r0, r3
 800540e:	f000 fac9 	bl	80059a4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	69da      	ldr	r2, [r3, #28]
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f042 0208 	orr.w	r2, r2, #8
 8005420:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	69da      	ldr	r2, [r3, #28]
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f022 0204 	bic.w	r2, r2, #4
 8005430:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	69d9      	ldr	r1, [r3, #28]
 8005438:	68bb      	ldr	r3, [r7, #8]
 800543a:	691a      	ldr	r2, [r3, #16]
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	430a      	orrs	r2, r1
 8005442:	61da      	str	r2, [r3, #28]
      break;
 8005444:	e023      	b.n	800548e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	68b9      	ldr	r1, [r7, #8]
 800544c:	4618      	mov	r0, r3
 800544e:	f000 fb1d 	bl	8005a8c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	69da      	ldr	r2, [r3, #28]
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005460:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	69da      	ldr	r2, [r3, #28]
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005470:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	69d9      	ldr	r1, [r3, #28]
 8005478:	68bb      	ldr	r3, [r7, #8]
 800547a:	691b      	ldr	r3, [r3, #16]
 800547c:	021a      	lsls	r2, r3, #8
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	430a      	orrs	r2, r1
 8005484:	61da      	str	r2, [r3, #28]
      break;
 8005486:	e002      	b.n	800548e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005488:	2301      	movs	r3, #1
 800548a:	75fb      	strb	r3, [r7, #23]
      break;
 800548c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	2200      	movs	r2, #0
 8005492:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005496:	7dfb      	ldrb	r3, [r7, #23]
}
 8005498:	4618      	mov	r0, r3
 800549a:	3718      	adds	r7, #24
 800549c:	46bd      	mov	sp, r7
 800549e:	bd80      	pop	{r7, pc}

080054a0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b084      	sub	sp, #16
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
 80054a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80054aa:	2300      	movs	r3, #0
 80054ac:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80054b4:	2b01      	cmp	r3, #1
 80054b6:	d101      	bne.n	80054bc <HAL_TIM_ConfigClockSource+0x1c>
 80054b8:	2302      	movs	r3, #2
 80054ba:	e0b4      	b.n	8005626 <HAL_TIM_ConfigClockSource+0x186>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2201      	movs	r2, #1
 80054c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2202      	movs	r2, #2
 80054c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	689b      	ldr	r3, [r3, #8]
 80054d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80054d4:	68bb      	ldr	r3, [r7, #8]
 80054d6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80054da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80054dc:	68bb      	ldr	r3, [r7, #8]
 80054de:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80054e2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	68ba      	ldr	r2, [r7, #8]
 80054ea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80054f4:	d03e      	beq.n	8005574 <HAL_TIM_ConfigClockSource+0xd4>
 80054f6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80054fa:	f200 8087 	bhi.w	800560c <HAL_TIM_ConfigClockSource+0x16c>
 80054fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005502:	f000 8086 	beq.w	8005612 <HAL_TIM_ConfigClockSource+0x172>
 8005506:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800550a:	d87f      	bhi.n	800560c <HAL_TIM_ConfigClockSource+0x16c>
 800550c:	2b70      	cmp	r3, #112	@ 0x70
 800550e:	d01a      	beq.n	8005546 <HAL_TIM_ConfigClockSource+0xa6>
 8005510:	2b70      	cmp	r3, #112	@ 0x70
 8005512:	d87b      	bhi.n	800560c <HAL_TIM_ConfigClockSource+0x16c>
 8005514:	2b60      	cmp	r3, #96	@ 0x60
 8005516:	d050      	beq.n	80055ba <HAL_TIM_ConfigClockSource+0x11a>
 8005518:	2b60      	cmp	r3, #96	@ 0x60
 800551a:	d877      	bhi.n	800560c <HAL_TIM_ConfigClockSource+0x16c>
 800551c:	2b50      	cmp	r3, #80	@ 0x50
 800551e:	d03c      	beq.n	800559a <HAL_TIM_ConfigClockSource+0xfa>
 8005520:	2b50      	cmp	r3, #80	@ 0x50
 8005522:	d873      	bhi.n	800560c <HAL_TIM_ConfigClockSource+0x16c>
 8005524:	2b40      	cmp	r3, #64	@ 0x40
 8005526:	d058      	beq.n	80055da <HAL_TIM_ConfigClockSource+0x13a>
 8005528:	2b40      	cmp	r3, #64	@ 0x40
 800552a:	d86f      	bhi.n	800560c <HAL_TIM_ConfigClockSource+0x16c>
 800552c:	2b30      	cmp	r3, #48	@ 0x30
 800552e:	d064      	beq.n	80055fa <HAL_TIM_ConfigClockSource+0x15a>
 8005530:	2b30      	cmp	r3, #48	@ 0x30
 8005532:	d86b      	bhi.n	800560c <HAL_TIM_ConfigClockSource+0x16c>
 8005534:	2b20      	cmp	r3, #32
 8005536:	d060      	beq.n	80055fa <HAL_TIM_ConfigClockSource+0x15a>
 8005538:	2b20      	cmp	r3, #32
 800553a:	d867      	bhi.n	800560c <HAL_TIM_ConfigClockSource+0x16c>
 800553c:	2b00      	cmp	r3, #0
 800553e:	d05c      	beq.n	80055fa <HAL_TIM_ConfigClockSource+0x15a>
 8005540:	2b10      	cmp	r3, #16
 8005542:	d05a      	beq.n	80055fa <HAL_TIM_ConfigClockSource+0x15a>
 8005544:	e062      	b.n	800560c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005556:	f000 fb69 	bl	8005c2c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	689b      	ldr	r3, [r3, #8]
 8005560:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005562:	68bb      	ldr	r3, [r7, #8]
 8005564:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005568:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	68ba      	ldr	r2, [r7, #8]
 8005570:	609a      	str	r2, [r3, #8]
      break;
 8005572:	e04f      	b.n	8005614 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005584:	f000 fb52 	bl	8005c2c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	689a      	ldr	r2, [r3, #8]
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005596:	609a      	str	r2, [r3, #8]
      break;
 8005598:	e03c      	b.n	8005614 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80055a6:	461a      	mov	r2, r3
 80055a8:	f000 fac6 	bl	8005b38 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	2150      	movs	r1, #80	@ 0x50
 80055b2:	4618      	mov	r0, r3
 80055b4:	f000 fb1f 	bl	8005bf6 <TIM_ITRx_SetConfig>
      break;
 80055b8:	e02c      	b.n	8005614 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80055c6:	461a      	mov	r2, r3
 80055c8:	f000 fae5 	bl	8005b96 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	2160      	movs	r1, #96	@ 0x60
 80055d2:	4618      	mov	r0, r3
 80055d4:	f000 fb0f 	bl	8005bf6 <TIM_ITRx_SetConfig>
      break;
 80055d8:	e01c      	b.n	8005614 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80055e6:	461a      	mov	r2, r3
 80055e8:	f000 faa6 	bl	8005b38 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	2140      	movs	r1, #64	@ 0x40
 80055f2:	4618      	mov	r0, r3
 80055f4:	f000 faff 	bl	8005bf6 <TIM_ITRx_SetConfig>
      break;
 80055f8:	e00c      	b.n	8005614 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681a      	ldr	r2, [r3, #0]
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	4619      	mov	r1, r3
 8005604:	4610      	mov	r0, r2
 8005606:	f000 faf6 	bl	8005bf6 <TIM_ITRx_SetConfig>
      break;
 800560a:	e003      	b.n	8005614 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800560c:	2301      	movs	r3, #1
 800560e:	73fb      	strb	r3, [r7, #15]
      break;
 8005610:	e000      	b.n	8005614 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005612:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2201      	movs	r2, #1
 8005618:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2200      	movs	r2, #0
 8005620:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005624:	7bfb      	ldrb	r3, [r7, #15]
}
 8005626:	4618      	mov	r0, r3
 8005628:	3710      	adds	r7, #16
 800562a:	46bd      	mov	sp, r7
 800562c:	bd80      	pop	{r7, pc}

0800562e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800562e:	b480      	push	{r7}
 8005630:	b083      	sub	sp, #12
 8005632:	af00      	add	r7, sp, #0
 8005634:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005636:	bf00      	nop
 8005638:	370c      	adds	r7, #12
 800563a:	46bd      	mov	sp, r7
 800563c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005640:	4770      	bx	lr

08005642 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005642:	b480      	push	{r7}
 8005644:	b083      	sub	sp, #12
 8005646:	af00      	add	r7, sp, #0
 8005648:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800564a:	bf00      	nop
 800564c:	370c      	adds	r7, #12
 800564e:	46bd      	mov	sp, r7
 8005650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005654:	4770      	bx	lr

08005656 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005656:	b480      	push	{r7}
 8005658:	b083      	sub	sp, #12
 800565a:	af00      	add	r7, sp, #0
 800565c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800565e:	bf00      	nop
 8005660:	370c      	adds	r7, #12
 8005662:	46bd      	mov	sp, r7
 8005664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005668:	4770      	bx	lr

0800566a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800566a:	b480      	push	{r7}
 800566c:	b083      	sub	sp, #12
 800566e:	af00      	add	r7, sp, #0
 8005670:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005672:	bf00      	nop
 8005674:	370c      	adds	r7, #12
 8005676:	46bd      	mov	sp, r7
 8005678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567c:	4770      	bx	lr
	...

08005680 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005680:	b480      	push	{r7}
 8005682:	b085      	sub	sp, #20
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
 8005688:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	4a46      	ldr	r2, [pc, #280]	@ (80057ac <TIM_Base_SetConfig+0x12c>)
 8005694:	4293      	cmp	r3, r2
 8005696:	d013      	beq.n	80056c0 <TIM_Base_SetConfig+0x40>
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800569e:	d00f      	beq.n	80056c0 <TIM_Base_SetConfig+0x40>
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	4a43      	ldr	r2, [pc, #268]	@ (80057b0 <TIM_Base_SetConfig+0x130>)
 80056a4:	4293      	cmp	r3, r2
 80056a6:	d00b      	beq.n	80056c0 <TIM_Base_SetConfig+0x40>
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	4a42      	ldr	r2, [pc, #264]	@ (80057b4 <TIM_Base_SetConfig+0x134>)
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d007      	beq.n	80056c0 <TIM_Base_SetConfig+0x40>
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	4a41      	ldr	r2, [pc, #260]	@ (80057b8 <TIM_Base_SetConfig+0x138>)
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d003      	beq.n	80056c0 <TIM_Base_SetConfig+0x40>
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	4a40      	ldr	r2, [pc, #256]	@ (80057bc <TIM_Base_SetConfig+0x13c>)
 80056bc:	4293      	cmp	r3, r2
 80056be:	d108      	bne.n	80056d2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80056c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	685b      	ldr	r3, [r3, #4]
 80056cc:	68fa      	ldr	r2, [r7, #12]
 80056ce:	4313      	orrs	r3, r2
 80056d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	4a35      	ldr	r2, [pc, #212]	@ (80057ac <TIM_Base_SetConfig+0x12c>)
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d02b      	beq.n	8005732 <TIM_Base_SetConfig+0xb2>
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80056e0:	d027      	beq.n	8005732 <TIM_Base_SetConfig+0xb2>
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	4a32      	ldr	r2, [pc, #200]	@ (80057b0 <TIM_Base_SetConfig+0x130>)
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d023      	beq.n	8005732 <TIM_Base_SetConfig+0xb2>
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	4a31      	ldr	r2, [pc, #196]	@ (80057b4 <TIM_Base_SetConfig+0x134>)
 80056ee:	4293      	cmp	r3, r2
 80056f0:	d01f      	beq.n	8005732 <TIM_Base_SetConfig+0xb2>
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	4a30      	ldr	r2, [pc, #192]	@ (80057b8 <TIM_Base_SetConfig+0x138>)
 80056f6:	4293      	cmp	r3, r2
 80056f8:	d01b      	beq.n	8005732 <TIM_Base_SetConfig+0xb2>
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	4a2f      	ldr	r2, [pc, #188]	@ (80057bc <TIM_Base_SetConfig+0x13c>)
 80056fe:	4293      	cmp	r3, r2
 8005700:	d017      	beq.n	8005732 <TIM_Base_SetConfig+0xb2>
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	4a2e      	ldr	r2, [pc, #184]	@ (80057c0 <TIM_Base_SetConfig+0x140>)
 8005706:	4293      	cmp	r3, r2
 8005708:	d013      	beq.n	8005732 <TIM_Base_SetConfig+0xb2>
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	4a2d      	ldr	r2, [pc, #180]	@ (80057c4 <TIM_Base_SetConfig+0x144>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d00f      	beq.n	8005732 <TIM_Base_SetConfig+0xb2>
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	4a2c      	ldr	r2, [pc, #176]	@ (80057c8 <TIM_Base_SetConfig+0x148>)
 8005716:	4293      	cmp	r3, r2
 8005718:	d00b      	beq.n	8005732 <TIM_Base_SetConfig+0xb2>
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	4a2b      	ldr	r2, [pc, #172]	@ (80057cc <TIM_Base_SetConfig+0x14c>)
 800571e:	4293      	cmp	r3, r2
 8005720:	d007      	beq.n	8005732 <TIM_Base_SetConfig+0xb2>
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	4a2a      	ldr	r2, [pc, #168]	@ (80057d0 <TIM_Base_SetConfig+0x150>)
 8005726:	4293      	cmp	r3, r2
 8005728:	d003      	beq.n	8005732 <TIM_Base_SetConfig+0xb2>
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	4a29      	ldr	r2, [pc, #164]	@ (80057d4 <TIM_Base_SetConfig+0x154>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d108      	bne.n	8005744 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005738:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	68db      	ldr	r3, [r3, #12]
 800573e:	68fa      	ldr	r2, [r7, #12]
 8005740:	4313      	orrs	r3, r2
 8005742:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	695b      	ldr	r3, [r3, #20]
 800574e:	4313      	orrs	r3, r2
 8005750:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	68fa      	ldr	r2, [r7, #12]
 8005756:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	689a      	ldr	r2, [r3, #8]
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	681a      	ldr	r2, [r3, #0]
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	4a10      	ldr	r2, [pc, #64]	@ (80057ac <TIM_Base_SetConfig+0x12c>)
 800576c:	4293      	cmp	r3, r2
 800576e:	d003      	beq.n	8005778 <TIM_Base_SetConfig+0xf8>
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	4a12      	ldr	r2, [pc, #72]	@ (80057bc <TIM_Base_SetConfig+0x13c>)
 8005774:	4293      	cmp	r3, r2
 8005776:	d103      	bne.n	8005780 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	691a      	ldr	r2, [r3, #16]
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2201      	movs	r2, #1
 8005784:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	691b      	ldr	r3, [r3, #16]
 800578a:	f003 0301 	and.w	r3, r3, #1
 800578e:	2b01      	cmp	r3, #1
 8005790:	d105      	bne.n	800579e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	691b      	ldr	r3, [r3, #16]
 8005796:	f023 0201 	bic.w	r2, r3, #1
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	611a      	str	r2, [r3, #16]
  }
}
 800579e:	bf00      	nop
 80057a0:	3714      	adds	r7, #20
 80057a2:	46bd      	mov	sp, r7
 80057a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a8:	4770      	bx	lr
 80057aa:	bf00      	nop
 80057ac:	40010000 	.word	0x40010000
 80057b0:	40000400 	.word	0x40000400
 80057b4:	40000800 	.word	0x40000800
 80057b8:	40000c00 	.word	0x40000c00
 80057bc:	40010400 	.word	0x40010400
 80057c0:	40014000 	.word	0x40014000
 80057c4:	40014400 	.word	0x40014400
 80057c8:	40014800 	.word	0x40014800
 80057cc:	40001800 	.word	0x40001800
 80057d0:	40001c00 	.word	0x40001c00
 80057d4:	40002000 	.word	0x40002000

080057d8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80057d8:	b480      	push	{r7}
 80057da:	b087      	sub	sp, #28
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
 80057e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6a1b      	ldr	r3, [r3, #32]
 80057e6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	6a1b      	ldr	r3, [r3, #32]
 80057ec:	f023 0201 	bic.w	r2, r3, #1
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	685b      	ldr	r3, [r3, #4]
 80057f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	699b      	ldr	r3, [r3, #24]
 80057fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005806:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	f023 0303 	bic.w	r3, r3, #3
 800580e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005810:	683b      	ldr	r3, [r7, #0]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	68fa      	ldr	r2, [r7, #12]
 8005816:	4313      	orrs	r3, r2
 8005818:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800581a:	697b      	ldr	r3, [r7, #20]
 800581c:	f023 0302 	bic.w	r3, r3, #2
 8005820:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005822:	683b      	ldr	r3, [r7, #0]
 8005824:	689b      	ldr	r3, [r3, #8]
 8005826:	697a      	ldr	r2, [r7, #20]
 8005828:	4313      	orrs	r3, r2
 800582a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	4a20      	ldr	r2, [pc, #128]	@ (80058b0 <TIM_OC1_SetConfig+0xd8>)
 8005830:	4293      	cmp	r3, r2
 8005832:	d003      	beq.n	800583c <TIM_OC1_SetConfig+0x64>
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	4a1f      	ldr	r2, [pc, #124]	@ (80058b4 <TIM_OC1_SetConfig+0xdc>)
 8005838:	4293      	cmp	r3, r2
 800583a:	d10c      	bne.n	8005856 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800583c:	697b      	ldr	r3, [r7, #20]
 800583e:	f023 0308 	bic.w	r3, r3, #8
 8005842:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005844:	683b      	ldr	r3, [r7, #0]
 8005846:	68db      	ldr	r3, [r3, #12]
 8005848:	697a      	ldr	r2, [r7, #20]
 800584a:	4313      	orrs	r3, r2
 800584c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800584e:	697b      	ldr	r3, [r7, #20]
 8005850:	f023 0304 	bic.w	r3, r3, #4
 8005854:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	4a15      	ldr	r2, [pc, #84]	@ (80058b0 <TIM_OC1_SetConfig+0xd8>)
 800585a:	4293      	cmp	r3, r2
 800585c:	d003      	beq.n	8005866 <TIM_OC1_SetConfig+0x8e>
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	4a14      	ldr	r2, [pc, #80]	@ (80058b4 <TIM_OC1_SetConfig+0xdc>)
 8005862:	4293      	cmp	r3, r2
 8005864:	d111      	bne.n	800588a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005866:	693b      	ldr	r3, [r7, #16]
 8005868:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800586c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800586e:	693b      	ldr	r3, [r7, #16]
 8005870:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005874:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005876:	683b      	ldr	r3, [r7, #0]
 8005878:	695b      	ldr	r3, [r3, #20]
 800587a:	693a      	ldr	r2, [r7, #16]
 800587c:	4313      	orrs	r3, r2
 800587e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	699b      	ldr	r3, [r3, #24]
 8005884:	693a      	ldr	r2, [r7, #16]
 8005886:	4313      	orrs	r3, r2
 8005888:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	693a      	ldr	r2, [r7, #16]
 800588e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	68fa      	ldr	r2, [r7, #12]
 8005894:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	685a      	ldr	r2, [r3, #4]
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	697a      	ldr	r2, [r7, #20]
 80058a2:	621a      	str	r2, [r3, #32]
}
 80058a4:	bf00      	nop
 80058a6:	371c      	adds	r7, #28
 80058a8:	46bd      	mov	sp, r7
 80058aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ae:	4770      	bx	lr
 80058b0:	40010000 	.word	0x40010000
 80058b4:	40010400 	.word	0x40010400

080058b8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80058b8:	b480      	push	{r7}
 80058ba:	b087      	sub	sp, #28
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
 80058c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6a1b      	ldr	r3, [r3, #32]
 80058c6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	6a1b      	ldr	r3, [r3, #32]
 80058cc:	f023 0210 	bic.w	r2, r3, #16
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	685b      	ldr	r3, [r3, #4]
 80058d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	699b      	ldr	r3, [r3, #24]
 80058de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80058e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80058ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	021b      	lsls	r3, r3, #8
 80058f6:	68fa      	ldr	r2, [r7, #12]
 80058f8:	4313      	orrs	r3, r2
 80058fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80058fc:	697b      	ldr	r3, [r7, #20]
 80058fe:	f023 0320 	bic.w	r3, r3, #32
 8005902:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	689b      	ldr	r3, [r3, #8]
 8005908:	011b      	lsls	r3, r3, #4
 800590a:	697a      	ldr	r2, [r7, #20]
 800590c:	4313      	orrs	r3, r2
 800590e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	4a22      	ldr	r2, [pc, #136]	@ (800599c <TIM_OC2_SetConfig+0xe4>)
 8005914:	4293      	cmp	r3, r2
 8005916:	d003      	beq.n	8005920 <TIM_OC2_SetConfig+0x68>
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	4a21      	ldr	r2, [pc, #132]	@ (80059a0 <TIM_OC2_SetConfig+0xe8>)
 800591c:	4293      	cmp	r3, r2
 800591e:	d10d      	bne.n	800593c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005920:	697b      	ldr	r3, [r7, #20]
 8005922:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005926:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	68db      	ldr	r3, [r3, #12]
 800592c:	011b      	lsls	r3, r3, #4
 800592e:	697a      	ldr	r2, [r7, #20]
 8005930:	4313      	orrs	r3, r2
 8005932:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005934:	697b      	ldr	r3, [r7, #20]
 8005936:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800593a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	4a17      	ldr	r2, [pc, #92]	@ (800599c <TIM_OC2_SetConfig+0xe4>)
 8005940:	4293      	cmp	r3, r2
 8005942:	d003      	beq.n	800594c <TIM_OC2_SetConfig+0x94>
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	4a16      	ldr	r2, [pc, #88]	@ (80059a0 <TIM_OC2_SetConfig+0xe8>)
 8005948:	4293      	cmp	r3, r2
 800594a:	d113      	bne.n	8005974 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800594c:	693b      	ldr	r3, [r7, #16]
 800594e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005952:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005954:	693b      	ldr	r3, [r7, #16]
 8005956:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800595a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	695b      	ldr	r3, [r3, #20]
 8005960:	009b      	lsls	r3, r3, #2
 8005962:	693a      	ldr	r2, [r7, #16]
 8005964:	4313      	orrs	r3, r2
 8005966:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	699b      	ldr	r3, [r3, #24]
 800596c:	009b      	lsls	r3, r3, #2
 800596e:	693a      	ldr	r2, [r7, #16]
 8005970:	4313      	orrs	r3, r2
 8005972:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	693a      	ldr	r2, [r7, #16]
 8005978:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	68fa      	ldr	r2, [r7, #12]
 800597e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	685a      	ldr	r2, [r3, #4]
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	697a      	ldr	r2, [r7, #20]
 800598c:	621a      	str	r2, [r3, #32]
}
 800598e:	bf00      	nop
 8005990:	371c      	adds	r7, #28
 8005992:	46bd      	mov	sp, r7
 8005994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005998:	4770      	bx	lr
 800599a:	bf00      	nop
 800599c:	40010000 	.word	0x40010000
 80059a0:	40010400 	.word	0x40010400

080059a4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80059a4:	b480      	push	{r7}
 80059a6:	b087      	sub	sp, #28
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
 80059ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6a1b      	ldr	r3, [r3, #32]
 80059b2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6a1b      	ldr	r3, [r3, #32]
 80059b8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	685b      	ldr	r3, [r3, #4]
 80059c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	69db      	ldr	r3, [r3, #28]
 80059ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80059d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	f023 0303 	bic.w	r3, r3, #3
 80059da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80059dc:	683b      	ldr	r3, [r7, #0]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	68fa      	ldr	r2, [r7, #12]
 80059e2:	4313      	orrs	r3, r2
 80059e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80059e6:	697b      	ldr	r3, [r7, #20]
 80059e8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80059ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	689b      	ldr	r3, [r3, #8]
 80059f2:	021b      	lsls	r3, r3, #8
 80059f4:	697a      	ldr	r2, [r7, #20]
 80059f6:	4313      	orrs	r3, r2
 80059f8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	4a21      	ldr	r2, [pc, #132]	@ (8005a84 <TIM_OC3_SetConfig+0xe0>)
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d003      	beq.n	8005a0a <TIM_OC3_SetConfig+0x66>
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	4a20      	ldr	r2, [pc, #128]	@ (8005a88 <TIM_OC3_SetConfig+0xe4>)
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d10d      	bne.n	8005a26 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005a0a:	697b      	ldr	r3, [r7, #20]
 8005a0c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005a10:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	68db      	ldr	r3, [r3, #12]
 8005a16:	021b      	lsls	r3, r3, #8
 8005a18:	697a      	ldr	r2, [r7, #20]
 8005a1a:	4313      	orrs	r3, r2
 8005a1c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005a1e:	697b      	ldr	r3, [r7, #20]
 8005a20:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005a24:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	4a16      	ldr	r2, [pc, #88]	@ (8005a84 <TIM_OC3_SetConfig+0xe0>)
 8005a2a:	4293      	cmp	r3, r2
 8005a2c:	d003      	beq.n	8005a36 <TIM_OC3_SetConfig+0x92>
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	4a15      	ldr	r2, [pc, #84]	@ (8005a88 <TIM_OC3_SetConfig+0xe4>)
 8005a32:	4293      	cmp	r3, r2
 8005a34:	d113      	bne.n	8005a5e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005a36:	693b      	ldr	r3, [r7, #16]
 8005a38:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005a3c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005a3e:	693b      	ldr	r3, [r7, #16]
 8005a40:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005a44:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	695b      	ldr	r3, [r3, #20]
 8005a4a:	011b      	lsls	r3, r3, #4
 8005a4c:	693a      	ldr	r2, [r7, #16]
 8005a4e:	4313      	orrs	r3, r2
 8005a50:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	699b      	ldr	r3, [r3, #24]
 8005a56:	011b      	lsls	r3, r3, #4
 8005a58:	693a      	ldr	r2, [r7, #16]
 8005a5a:	4313      	orrs	r3, r2
 8005a5c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	693a      	ldr	r2, [r7, #16]
 8005a62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	68fa      	ldr	r2, [r7, #12]
 8005a68:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	685a      	ldr	r2, [r3, #4]
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	697a      	ldr	r2, [r7, #20]
 8005a76:	621a      	str	r2, [r3, #32]
}
 8005a78:	bf00      	nop
 8005a7a:	371c      	adds	r7, #28
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a82:	4770      	bx	lr
 8005a84:	40010000 	.word	0x40010000
 8005a88:	40010400 	.word	0x40010400

08005a8c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005a8c:	b480      	push	{r7}
 8005a8e:	b087      	sub	sp, #28
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
 8005a94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6a1b      	ldr	r3, [r3, #32]
 8005a9a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	6a1b      	ldr	r3, [r3, #32]
 8005aa0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	685b      	ldr	r3, [r3, #4]
 8005aac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	69db      	ldr	r3, [r3, #28]
 8005ab2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005aba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005ac2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	021b      	lsls	r3, r3, #8
 8005aca:	68fa      	ldr	r2, [r7, #12]
 8005acc:	4313      	orrs	r3, r2
 8005ace:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005ad0:	693b      	ldr	r3, [r7, #16]
 8005ad2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005ad6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	689b      	ldr	r3, [r3, #8]
 8005adc:	031b      	lsls	r3, r3, #12
 8005ade:	693a      	ldr	r2, [r7, #16]
 8005ae0:	4313      	orrs	r3, r2
 8005ae2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	4a12      	ldr	r2, [pc, #72]	@ (8005b30 <TIM_OC4_SetConfig+0xa4>)
 8005ae8:	4293      	cmp	r3, r2
 8005aea:	d003      	beq.n	8005af4 <TIM_OC4_SetConfig+0x68>
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	4a11      	ldr	r2, [pc, #68]	@ (8005b34 <TIM_OC4_SetConfig+0xa8>)
 8005af0:	4293      	cmp	r3, r2
 8005af2:	d109      	bne.n	8005b08 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005af4:	697b      	ldr	r3, [r7, #20]
 8005af6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005afa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	695b      	ldr	r3, [r3, #20]
 8005b00:	019b      	lsls	r3, r3, #6
 8005b02:	697a      	ldr	r2, [r7, #20]
 8005b04:	4313      	orrs	r3, r2
 8005b06:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	697a      	ldr	r2, [r7, #20]
 8005b0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	68fa      	ldr	r2, [r7, #12]
 8005b12:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	685a      	ldr	r2, [r3, #4]
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	693a      	ldr	r2, [r7, #16]
 8005b20:	621a      	str	r2, [r3, #32]
}
 8005b22:	bf00      	nop
 8005b24:	371c      	adds	r7, #28
 8005b26:	46bd      	mov	sp, r7
 8005b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2c:	4770      	bx	lr
 8005b2e:	bf00      	nop
 8005b30:	40010000 	.word	0x40010000
 8005b34:	40010400 	.word	0x40010400

08005b38 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b38:	b480      	push	{r7}
 8005b3a:	b087      	sub	sp, #28
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	60f8      	str	r0, [r7, #12]
 8005b40:	60b9      	str	r1, [r7, #8]
 8005b42:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	6a1b      	ldr	r3, [r3, #32]
 8005b48:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	6a1b      	ldr	r3, [r3, #32]
 8005b4e:	f023 0201 	bic.w	r2, r3, #1
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	699b      	ldr	r3, [r3, #24]
 8005b5a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005b5c:	693b      	ldr	r3, [r7, #16]
 8005b5e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005b62:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	011b      	lsls	r3, r3, #4
 8005b68:	693a      	ldr	r2, [r7, #16]
 8005b6a:	4313      	orrs	r3, r2
 8005b6c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005b6e:	697b      	ldr	r3, [r7, #20]
 8005b70:	f023 030a 	bic.w	r3, r3, #10
 8005b74:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005b76:	697a      	ldr	r2, [r7, #20]
 8005b78:	68bb      	ldr	r3, [r7, #8]
 8005b7a:	4313      	orrs	r3, r2
 8005b7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	693a      	ldr	r2, [r7, #16]
 8005b82:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	697a      	ldr	r2, [r7, #20]
 8005b88:	621a      	str	r2, [r3, #32]
}
 8005b8a:	bf00      	nop
 8005b8c:	371c      	adds	r7, #28
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b94:	4770      	bx	lr

08005b96 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b96:	b480      	push	{r7}
 8005b98:	b087      	sub	sp, #28
 8005b9a:	af00      	add	r7, sp, #0
 8005b9c:	60f8      	str	r0, [r7, #12]
 8005b9e:	60b9      	str	r1, [r7, #8]
 8005ba0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	6a1b      	ldr	r3, [r3, #32]
 8005ba6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	6a1b      	ldr	r3, [r3, #32]
 8005bac:	f023 0210 	bic.w	r2, r3, #16
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	699b      	ldr	r3, [r3, #24]
 8005bb8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005bba:	693b      	ldr	r3, [r7, #16]
 8005bbc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005bc0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	031b      	lsls	r3, r3, #12
 8005bc6:	693a      	ldr	r2, [r7, #16]
 8005bc8:	4313      	orrs	r3, r2
 8005bca:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005bcc:	697b      	ldr	r3, [r7, #20]
 8005bce:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005bd2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005bd4:	68bb      	ldr	r3, [r7, #8]
 8005bd6:	011b      	lsls	r3, r3, #4
 8005bd8:	697a      	ldr	r2, [r7, #20]
 8005bda:	4313      	orrs	r3, r2
 8005bdc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	693a      	ldr	r2, [r7, #16]
 8005be2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	697a      	ldr	r2, [r7, #20]
 8005be8:	621a      	str	r2, [r3, #32]
}
 8005bea:	bf00      	nop
 8005bec:	371c      	adds	r7, #28
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf4:	4770      	bx	lr

08005bf6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005bf6:	b480      	push	{r7}
 8005bf8:	b085      	sub	sp, #20
 8005bfa:	af00      	add	r7, sp, #0
 8005bfc:	6078      	str	r0, [r7, #4]
 8005bfe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	689b      	ldr	r3, [r3, #8]
 8005c04:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c0c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005c0e:	683a      	ldr	r2, [r7, #0]
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	4313      	orrs	r3, r2
 8005c14:	f043 0307 	orr.w	r3, r3, #7
 8005c18:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	68fa      	ldr	r2, [r7, #12]
 8005c1e:	609a      	str	r2, [r3, #8]
}
 8005c20:	bf00      	nop
 8005c22:	3714      	adds	r7, #20
 8005c24:	46bd      	mov	sp, r7
 8005c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2a:	4770      	bx	lr

08005c2c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005c2c:	b480      	push	{r7}
 8005c2e:	b087      	sub	sp, #28
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	60f8      	str	r0, [r7, #12]
 8005c34:	60b9      	str	r1, [r7, #8]
 8005c36:	607a      	str	r2, [r7, #4]
 8005c38:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	689b      	ldr	r3, [r3, #8]
 8005c3e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c40:	697b      	ldr	r3, [r7, #20]
 8005c42:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005c46:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	021a      	lsls	r2, r3, #8
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	431a      	orrs	r2, r3
 8005c50:	68bb      	ldr	r3, [r7, #8]
 8005c52:	4313      	orrs	r3, r2
 8005c54:	697a      	ldr	r2, [r7, #20]
 8005c56:	4313      	orrs	r3, r2
 8005c58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	697a      	ldr	r2, [r7, #20]
 8005c5e:	609a      	str	r2, [r3, #8]
}
 8005c60:	bf00      	nop
 8005c62:	371c      	adds	r7, #28
 8005c64:	46bd      	mov	sp, r7
 8005c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6a:	4770      	bx	lr

08005c6c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005c6c:	b480      	push	{r7}
 8005c6e:	b087      	sub	sp, #28
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	60f8      	str	r0, [r7, #12]
 8005c74:	60b9      	str	r1, [r7, #8]
 8005c76:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005c78:	68bb      	ldr	r3, [r7, #8]
 8005c7a:	f003 031f 	and.w	r3, r3, #31
 8005c7e:	2201      	movs	r2, #1
 8005c80:	fa02 f303 	lsl.w	r3, r2, r3
 8005c84:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	6a1a      	ldr	r2, [r3, #32]
 8005c8a:	697b      	ldr	r3, [r7, #20]
 8005c8c:	43db      	mvns	r3, r3
 8005c8e:	401a      	ands	r2, r3
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	6a1a      	ldr	r2, [r3, #32]
 8005c98:	68bb      	ldr	r3, [r7, #8]
 8005c9a:	f003 031f 	and.w	r3, r3, #31
 8005c9e:	6879      	ldr	r1, [r7, #4]
 8005ca0:	fa01 f303 	lsl.w	r3, r1, r3
 8005ca4:	431a      	orrs	r2, r3
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	621a      	str	r2, [r3, #32]
}
 8005caa:	bf00      	nop
 8005cac:	371c      	adds	r7, #28
 8005cae:	46bd      	mov	sp, r7
 8005cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb4:	4770      	bx	lr
	...

08005cb8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005cb8:	b480      	push	{r7}
 8005cba:	b085      	sub	sp, #20
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
 8005cc0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005cc8:	2b01      	cmp	r3, #1
 8005cca:	d101      	bne.n	8005cd0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005ccc:	2302      	movs	r3, #2
 8005cce:	e05a      	b.n	8005d86 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2201      	movs	r2, #1
 8005cd4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2202      	movs	r2, #2
 8005cdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	685b      	ldr	r3, [r3, #4]
 8005ce6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	689b      	ldr	r3, [r3, #8]
 8005cee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005cf6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	68fa      	ldr	r2, [r7, #12]
 8005cfe:	4313      	orrs	r3, r2
 8005d00:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	68fa      	ldr	r2, [r7, #12]
 8005d08:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	4a21      	ldr	r2, [pc, #132]	@ (8005d94 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005d10:	4293      	cmp	r3, r2
 8005d12:	d022      	beq.n	8005d5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d1c:	d01d      	beq.n	8005d5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	4a1d      	ldr	r2, [pc, #116]	@ (8005d98 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005d24:	4293      	cmp	r3, r2
 8005d26:	d018      	beq.n	8005d5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	4a1b      	ldr	r2, [pc, #108]	@ (8005d9c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005d2e:	4293      	cmp	r3, r2
 8005d30:	d013      	beq.n	8005d5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	4a1a      	ldr	r2, [pc, #104]	@ (8005da0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005d38:	4293      	cmp	r3, r2
 8005d3a:	d00e      	beq.n	8005d5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	4a18      	ldr	r2, [pc, #96]	@ (8005da4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005d42:	4293      	cmp	r3, r2
 8005d44:	d009      	beq.n	8005d5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	4a17      	ldr	r2, [pc, #92]	@ (8005da8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005d4c:	4293      	cmp	r3, r2
 8005d4e:	d004      	beq.n	8005d5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	4a15      	ldr	r2, [pc, #84]	@ (8005dac <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005d56:	4293      	cmp	r3, r2
 8005d58:	d10c      	bne.n	8005d74 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005d5a:	68bb      	ldr	r3, [r7, #8]
 8005d5c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005d60:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	685b      	ldr	r3, [r3, #4]
 8005d66:	68ba      	ldr	r2, [r7, #8]
 8005d68:	4313      	orrs	r3, r2
 8005d6a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	68ba      	ldr	r2, [r7, #8]
 8005d72:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2201      	movs	r2, #1
 8005d78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2200      	movs	r2, #0
 8005d80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005d84:	2300      	movs	r3, #0
}
 8005d86:	4618      	mov	r0, r3
 8005d88:	3714      	adds	r7, #20
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d90:	4770      	bx	lr
 8005d92:	bf00      	nop
 8005d94:	40010000 	.word	0x40010000
 8005d98:	40000400 	.word	0x40000400
 8005d9c:	40000800 	.word	0x40000800
 8005da0:	40000c00 	.word	0x40000c00
 8005da4:	40010400 	.word	0x40010400
 8005da8:	40014000 	.word	0x40014000
 8005dac:	40001800 	.word	0x40001800

08005db0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005db0:	b480      	push	{r7}
 8005db2:	b083      	sub	sp, #12
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005db8:	bf00      	nop
 8005dba:	370c      	adds	r7, #12
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc2:	4770      	bx	lr

08005dc4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005dc4:	b480      	push	{r7}
 8005dc6:	b083      	sub	sp, #12
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005dcc:	bf00      	nop
 8005dce:	370c      	adds	r7, #12
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd6:	4770      	bx	lr

08005dd8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	b082      	sub	sp, #8
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d101      	bne.n	8005dea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005de6:	2301      	movs	r3, #1
 8005de8:	e042      	b.n	8005e70 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005df0:	b2db      	uxtb	r3, r3
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d106      	bne.n	8005e04 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	2200      	movs	r2, #0
 8005dfa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005dfe:	6878      	ldr	r0, [r7, #4]
 8005e00:	f7fc fcba 	bl	8002778 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2224      	movs	r2, #36	@ 0x24
 8005e08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	68da      	ldr	r2, [r3, #12]
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005e1a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005e1c:	6878      	ldr	r0, [r7, #4]
 8005e1e:	f000 f82b 	bl	8005e78 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	691a      	ldr	r2, [r3, #16]
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005e30:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	695a      	ldr	r2, [r3, #20]
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005e40:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	68da      	ldr	r2, [r3, #12]
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005e50:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	2200      	movs	r2, #0
 8005e56:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2220      	movs	r2, #32
 8005e5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2220      	movs	r2, #32
 8005e64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005e6e:	2300      	movs	r3, #0
}
 8005e70:	4618      	mov	r0, r3
 8005e72:	3708      	adds	r7, #8
 8005e74:	46bd      	mov	sp, r7
 8005e76:	bd80      	pop	{r7, pc}

08005e78 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005e78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005e7c:	b0c0      	sub	sp, #256	@ 0x100
 8005e7e:	af00      	add	r7, sp, #0
 8005e80:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005e84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	691b      	ldr	r3, [r3, #16]
 8005e8c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005e90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e94:	68d9      	ldr	r1, [r3, #12]
 8005e96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e9a:	681a      	ldr	r2, [r3, #0]
 8005e9c:	ea40 0301 	orr.w	r3, r0, r1
 8005ea0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005ea2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ea6:	689a      	ldr	r2, [r3, #8]
 8005ea8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005eac:	691b      	ldr	r3, [r3, #16]
 8005eae:	431a      	orrs	r2, r3
 8005eb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005eb4:	695b      	ldr	r3, [r3, #20]
 8005eb6:	431a      	orrs	r2, r3
 8005eb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ebc:	69db      	ldr	r3, [r3, #28]
 8005ebe:	4313      	orrs	r3, r2
 8005ec0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005ec4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	68db      	ldr	r3, [r3, #12]
 8005ecc:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005ed0:	f021 010c 	bic.w	r1, r1, #12
 8005ed4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ed8:	681a      	ldr	r2, [r3, #0]
 8005eda:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005ede:	430b      	orrs	r3, r1
 8005ee0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005ee2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	695b      	ldr	r3, [r3, #20]
 8005eea:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005eee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ef2:	6999      	ldr	r1, [r3, #24]
 8005ef4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ef8:	681a      	ldr	r2, [r3, #0]
 8005efa:	ea40 0301 	orr.w	r3, r0, r1
 8005efe:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005f00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f04:	681a      	ldr	r2, [r3, #0]
 8005f06:	4b8f      	ldr	r3, [pc, #572]	@ (8006144 <UART_SetConfig+0x2cc>)
 8005f08:	429a      	cmp	r2, r3
 8005f0a:	d005      	beq.n	8005f18 <UART_SetConfig+0xa0>
 8005f0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f10:	681a      	ldr	r2, [r3, #0]
 8005f12:	4b8d      	ldr	r3, [pc, #564]	@ (8006148 <UART_SetConfig+0x2d0>)
 8005f14:	429a      	cmp	r2, r3
 8005f16:	d104      	bne.n	8005f22 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005f18:	f7fe f926 	bl	8004168 <HAL_RCC_GetPCLK2Freq>
 8005f1c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005f20:	e003      	b.n	8005f2a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005f22:	f7fe f90d 	bl	8004140 <HAL_RCC_GetPCLK1Freq>
 8005f26:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005f2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f2e:	69db      	ldr	r3, [r3, #28]
 8005f30:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005f34:	f040 810c 	bne.w	8006150 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005f38:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005f42:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005f46:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005f4a:	4622      	mov	r2, r4
 8005f4c:	462b      	mov	r3, r5
 8005f4e:	1891      	adds	r1, r2, r2
 8005f50:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005f52:	415b      	adcs	r3, r3
 8005f54:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005f56:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005f5a:	4621      	mov	r1, r4
 8005f5c:	eb12 0801 	adds.w	r8, r2, r1
 8005f60:	4629      	mov	r1, r5
 8005f62:	eb43 0901 	adc.w	r9, r3, r1
 8005f66:	f04f 0200 	mov.w	r2, #0
 8005f6a:	f04f 0300 	mov.w	r3, #0
 8005f6e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005f72:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005f76:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005f7a:	4690      	mov	r8, r2
 8005f7c:	4699      	mov	r9, r3
 8005f7e:	4623      	mov	r3, r4
 8005f80:	eb18 0303 	adds.w	r3, r8, r3
 8005f84:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005f88:	462b      	mov	r3, r5
 8005f8a:	eb49 0303 	adc.w	r3, r9, r3
 8005f8e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005f92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f96:	685b      	ldr	r3, [r3, #4]
 8005f98:	2200      	movs	r2, #0
 8005f9a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005f9e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005fa2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005fa6:	460b      	mov	r3, r1
 8005fa8:	18db      	adds	r3, r3, r3
 8005faa:	653b      	str	r3, [r7, #80]	@ 0x50
 8005fac:	4613      	mov	r3, r2
 8005fae:	eb42 0303 	adc.w	r3, r2, r3
 8005fb2:	657b      	str	r3, [r7, #84]	@ 0x54
 8005fb4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005fb8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005fbc:	f7fa fd8a 	bl	8000ad4 <__aeabi_uldivmod>
 8005fc0:	4602      	mov	r2, r0
 8005fc2:	460b      	mov	r3, r1
 8005fc4:	4b61      	ldr	r3, [pc, #388]	@ (800614c <UART_SetConfig+0x2d4>)
 8005fc6:	fba3 2302 	umull	r2, r3, r3, r2
 8005fca:	095b      	lsrs	r3, r3, #5
 8005fcc:	011c      	lsls	r4, r3, #4
 8005fce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005fd8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005fdc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005fe0:	4642      	mov	r2, r8
 8005fe2:	464b      	mov	r3, r9
 8005fe4:	1891      	adds	r1, r2, r2
 8005fe6:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005fe8:	415b      	adcs	r3, r3
 8005fea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005fec:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005ff0:	4641      	mov	r1, r8
 8005ff2:	eb12 0a01 	adds.w	sl, r2, r1
 8005ff6:	4649      	mov	r1, r9
 8005ff8:	eb43 0b01 	adc.w	fp, r3, r1
 8005ffc:	f04f 0200 	mov.w	r2, #0
 8006000:	f04f 0300 	mov.w	r3, #0
 8006004:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006008:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800600c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006010:	4692      	mov	sl, r2
 8006012:	469b      	mov	fp, r3
 8006014:	4643      	mov	r3, r8
 8006016:	eb1a 0303 	adds.w	r3, sl, r3
 800601a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800601e:	464b      	mov	r3, r9
 8006020:	eb4b 0303 	adc.w	r3, fp, r3
 8006024:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006028:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800602c:	685b      	ldr	r3, [r3, #4]
 800602e:	2200      	movs	r2, #0
 8006030:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006034:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006038:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800603c:	460b      	mov	r3, r1
 800603e:	18db      	adds	r3, r3, r3
 8006040:	643b      	str	r3, [r7, #64]	@ 0x40
 8006042:	4613      	mov	r3, r2
 8006044:	eb42 0303 	adc.w	r3, r2, r3
 8006048:	647b      	str	r3, [r7, #68]	@ 0x44
 800604a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800604e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8006052:	f7fa fd3f 	bl	8000ad4 <__aeabi_uldivmod>
 8006056:	4602      	mov	r2, r0
 8006058:	460b      	mov	r3, r1
 800605a:	4611      	mov	r1, r2
 800605c:	4b3b      	ldr	r3, [pc, #236]	@ (800614c <UART_SetConfig+0x2d4>)
 800605e:	fba3 2301 	umull	r2, r3, r3, r1
 8006062:	095b      	lsrs	r3, r3, #5
 8006064:	2264      	movs	r2, #100	@ 0x64
 8006066:	fb02 f303 	mul.w	r3, r2, r3
 800606a:	1acb      	subs	r3, r1, r3
 800606c:	00db      	lsls	r3, r3, #3
 800606e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8006072:	4b36      	ldr	r3, [pc, #216]	@ (800614c <UART_SetConfig+0x2d4>)
 8006074:	fba3 2302 	umull	r2, r3, r3, r2
 8006078:	095b      	lsrs	r3, r3, #5
 800607a:	005b      	lsls	r3, r3, #1
 800607c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006080:	441c      	add	r4, r3
 8006082:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006086:	2200      	movs	r2, #0
 8006088:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800608c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006090:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006094:	4642      	mov	r2, r8
 8006096:	464b      	mov	r3, r9
 8006098:	1891      	adds	r1, r2, r2
 800609a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800609c:	415b      	adcs	r3, r3
 800609e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80060a0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80060a4:	4641      	mov	r1, r8
 80060a6:	1851      	adds	r1, r2, r1
 80060a8:	6339      	str	r1, [r7, #48]	@ 0x30
 80060aa:	4649      	mov	r1, r9
 80060ac:	414b      	adcs	r3, r1
 80060ae:	637b      	str	r3, [r7, #52]	@ 0x34
 80060b0:	f04f 0200 	mov.w	r2, #0
 80060b4:	f04f 0300 	mov.w	r3, #0
 80060b8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80060bc:	4659      	mov	r1, fp
 80060be:	00cb      	lsls	r3, r1, #3
 80060c0:	4651      	mov	r1, sl
 80060c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80060c6:	4651      	mov	r1, sl
 80060c8:	00ca      	lsls	r2, r1, #3
 80060ca:	4610      	mov	r0, r2
 80060cc:	4619      	mov	r1, r3
 80060ce:	4603      	mov	r3, r0
 80060d0:	4642      	mov	r2, r8
 80060d2:	189b      	adds	r3, r3, r2
 80060d4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80060d8:	464b      	mov	r3, r9
 80060da:	460a      	mov	r2, r1
 80060dc:	eb42 0303 	adc.w	r3, r2, r3
 80060e0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80060e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060e8:	685b      	ldr	r3, [r3, #4]
 80060ea:	2200      	movs	r2, #0
 80060ec:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80060f0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80060f4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80060f8:	460b      	mov	r3, r1
 80060fa:	18db      	adds	r3, r3, r3
 80060fc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80060fe:	4613      	mov	r3, r2
 8006100:	eb42 0303 	adc.w	r3, r2, r3
 8006104:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006106:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800610a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800610e:	f7fa fce1 	bl	8000ad4 <__aeabi_uldivmod>
 8006112:	4602      	mov	r2, r0
 8006114:	460b      	mov	r3, r1
 8006116:	4b0d      	ldr	r3, [pc, #52]	@ (800614c <UART_SetConfig+0x2d4>)
 8006118:	fba3 1302 	umull	r1, r3, r3, r2
 800611c:	095b      	lsrs	r3, r3, #5
 800611e:	2164      	movs	r1, #100	@ 0x64
 8006120:	fb01 f303 	mul.w	r3, r1, r3
 8006124:	1ad3      	subs	r3, r2, r3
 8006126:	00db      	lsls	r3, r3, #3
 8006128:	3332      	adds	r3, #50	@ 0x32
 800612a:	4a08      	ldr	r2, [pc, #32]	@ (800614c <UART_SetConfig+0x2d4>)
 800612c:	fba2 2303 	umull	r2, r3, r2, r3
 8006130:	095b      	lsrs	r3, r3, #5
 8006132:	f003 0207 	and.w	r2, r3, #7
 8006136:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	4422      	add	r2, r4
 800613e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006140:	e106      	b.n	8006350 <UART_SetConfig+0x4d8>
 8006142:	bf00      	nop
 8006144:	40011000 	.word	0x40011000
 8006148:	40011400 	.word	0x40011400
 800614c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006150:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006154:	2200      	movs	r2, #0
 8006156:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800615a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800615e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006162:	4642      	mov	r2, r8
 8006164:	464b      	mov	r3, r9
 8006166:	1891      	adds	r1, r2, r2
 8006168:	6239      	str	r1, [r7, #32]
 800616a:	415b      	adcs	r3, r3
 800616c:	627b      	str	r3, [r7, #36]	@ 0x24
 800616e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006172:	4641      	mov	r1, r8
 8006174:	1854      	adds	r4, r2, r1
 8006176:	4649      	mov	r1, r9
 8006178:	eb43 0501 	adc.w	r5, r3, r1
 800617c:	f04f 0200 	mov.w	r2, #0
 8006180:	f04f 0300 	mov.w	r3, #0
 8006184:	00eb      	lsls	r3, r5, #3
 8006186:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800618a:	00e2      	lsls	r2, r4, #3
 800618c:	4614      	mov	r4, r2
 800618e:	461d      	mov	r5, r3
 8006190:	4643      	mov	r3, r8
 8006192:	18e3      	adds	r3, r4, r3
 8006194:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006198:	464b      	mov	r3, r9
 800619a:	eb45 0303 	adc.w	r3, r5, r3
 800619e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80061a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061a6:	685b      	ldr	r3, [r3, #4]
 80061a8:	2200      	movs	r2, #0
 80061aa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80061ae:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80061b2:	f04f 0200 	mov.w	r2, #0
 80061b6:	f04f 0300 	mov.w	r3, #0
 80061ba:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80061be:	4629      	mov	r1, r5
 80061c0:	008b      	lsls	r3, r1, #2
 80061c2:	4621      	mov	r1, r4
 80061c4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80061c8:	4621      	mov	r1, r4
 80061ca:	008a      	lsls	r2, r1, #2
 80061cc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80061d0:	f7fa fc80 	bl	8000ad4 <__aeabi_uldivmod>
 80061d4:	4602      	mov	r2, r0
 80061d6:	460b      	mov	r3, r1
 80061d8:	4b60      	ldr	r3, [pc, #384]	@ (800635c <UART_SetConfig+0x4e4>)
 80061da:	fba3 2302 	umull	r2, r3, r3, r2
 80061de:	095b      	lsrs	r3, r3, #5
 80061e0:	011c      	lsls	r4, r3, #4
 80061e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80061e6:	2200      	movs	r2, #0
 80061e8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80061ec:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80061f0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80061f4:	4642      	mov	r2, r8
 80061f6:	464b      	mov	r3, r9
 80061f8:	1891      	adds	r1, r2, r2
 80061fa:	61b9      	str	r1, [r7, #24]
 80061fc:	415b      	adcs	r3, r3
 80061fe:	61fb      	str	r3, [r7, #28]
 8006200:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006204:	4641      	mov	r1, r8
 8006206:	1851      	adds	r1, r2, r1
 8006208:	6139      	str	r1, [r7, #16]
 800620a:	4649      	mov	r1, r9
 800620c:	414b      	adcs	r3, r1
 800620e:	617b      	str	r3, [r7, #20]
 8006210:	f04f 0200 	mov.w	r2, #0
 8006214:	f04f 0300 	mov.w	r3, #0
 8006218:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800621c:	4659      	mov	r1, fp
 800621e:	00cb      	lsls	r3, r1, #3
 8006220:	4651      	mov	r1, sl
 8006222:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006226:	4651      	mov	r1, sl
 8006228:	00ca      	lsls	r2, r1, #3
 800622a:	4610      	mov	r0, r2
 800622c:	4619      	mov	r1, r3
 800622e:	4603      	mov	r3, r0
 8006230:	4642      	mov	r2, r8
 8006232:	189b      	adds	r3, r3, r2
 8006234:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006238:	464b      	mov	r3, r9
 800623a:	460a      	mov	r2, r1
 800623c:	eb42 0303 	adc.w	r3, r2, r3
 8006240:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006244:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006248:	685b      	ldr	r3, [r3, #4]
 800624a:	2200      	movs	r2, #0
 800624c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800624e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006250:	f04f 0200 	mov.w	r2, #0
 8006254:	f04f 0300 	mov.w	r3, #0
 8006258:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800625c:	4649      	mov	r1, r9
 800625e:	008b      	lsls	r3, r1, #2
 8006260:	4641      	mov	r1, r8
 8006262:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006266:	4641      	mov	r1, r8
 8006268:	008a      	lsls	r2, r1, #2
 800626a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800626e:	f7fa fc31 	bl	8000ad4 <__aeabi_uldivmod>
 8006272:	4602      	mov	r2, r0
 8006274:	460b      	mov	r3, r1
 8006276:	4611      	mov	r1, r2
 8006278:	4b38      	ldr	r3, [pc, #224]	@ (800635c <UART_SetConfig+0x4e4>)
 800627a:	fba3 2301 	umull	r2, r3, r3, r1
 800627e:	095b      	lsrs	r3, r3, #5
 8006280:	2264      	movs	r2, #100	@ 0x64
 8006282:	fb02 f303 	mul.w	r3, r2, r3
 8006286:	1acb      	subs	r3, r1, r3
 8006288:	011b      	lsls	r3, r3, #4
 800628a:	3332      	adds	r3, #50	@ 0x32
 800628c:	4a33      	ldr	r2, [pc, #204]	@ (800635c <UART_SetConfig+0x4e4>)
 800628e:	fba2 2303 	umull	r2, r3, r2, r3
 8006292:	095b      	lsrs	r3, r3, #5
 8006294:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006298:	441c      	add	r4, r3
 800629a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800629e:	2200      	movs	r2, #0
 80062a0:	673b      	str	r3, [r7, #112]	@ 0x70
 80062a2:	677a      	str	r2, [r7, #116]	@ 0x74
 80062a4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80062a8:	4642      	mov	r2, r8
 80062aa:	464b      	mov	r3, r9
 80062ac:	1891      	adds	r1, r2, r2
 80062ae:	60b9      	str	r1, [r7, #8]
 80062b0:	415b      	adcs	r3, r3
 80062b2:	60fb      	str	r3, [r7, #12]
 80062b4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80062b8:	4641      	mov	r1, r8
 80062ba:	1851      	adds	r1, r2, r1
 80062bc:	6039      	str	r1, [r7, #0]
 80062be:	4649      	mov	r1, r9
 80062c0:	414b      	adcs	r3, r1
 80062c2:	607b      	str	r3, [r7, #4]
 80062c4:	f04f 0200 	mov.w	r2, #0
 80062c8:	f04f 0300 	mov.w	r3, #0
 80062cc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80062d0:	4659      	mov	r1, fp
 80062d2:	00cb      	lsls	r3, r1, #3
 80062d4:	4651      	mov	r1, sl
 80062d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80062da:	4651      	mov	r1, sl
 80062dc:	00ca      	lsls	r2, r1, #3
 80062de:	4610      	mov	r0, r2
 80062e0:	4619      	mov	r1, r3
 80062e2:	4603      	mov	r3, r0
 80062e4:	4642      	mov	r2, r8
 80062e6:	189b      	adds	r3, r3, r2
 80062e8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80062ea:	464b      	mov	r3, r9
 80062ec:	460a      	mov	r2, r1
 80062ee:	eb42 0303 	adc.w	r3, r2, r3
 80062f2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80062f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80062f8:	685b      	ldr	r3, [r3, #4]
 80062fa:	2200      	movs	r2, #0
 80062fc:	663b      	str	r3, [r7, #96]	@ 0x60
 80062fe:	667a      	str	r2, [r7, #100]	@ 0x64
 8006300:	f04f 0200 	mov.w	r2, #0
 8006304:	f04f 0300 	mov.w	r3, #0
 8006308:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800630c:	4649      	mov	r1, r9
 800630e:	008b      	lsls	r3, r1, #2
 8006310:	4641      	mov	r1, r8
 8006312:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006316:	4641      	mov	r1, r8
 8006318:	008a      	lsls	r2, r1, #2
 800631a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800631e:	f7fa fbd9 	bl	8000ad4 <__aeabi_uldivmod>
 8006322:	4602      	mov	r2, r0
 8006324:	460b      	mov	r3, r1
 8006326:	4b0d      	ldr	r3, [pc, #52]	@ (800635c <UART_SetConfig+0x4e4>)
 8006328:	fba3 1302 	umull	r1, r3, r3, r2
 800632c:	095b      	lsrs	r3, r3, #5
 800632e:	2164      	movs	r1, #100	@ 0x64
 8006330:	fb01 f303 	mul.w	r3, r1, r3
 8006334:	1ad3      	subs	r3, r2, r3
 8006336:	011b      	lsls	r3, r3, #4
 8006338:	3332      	adds	r3, #50	@ 0x32
 800633a:	4a08      	ldr	r2, [pc, #32]	@ (800635c <UART_SetConfig+0x4e4>)
 800633c:	fba2 2303 	umull	r2, r3, r2, r3
 8006340:	095b      	lsrs	r3, r3, #5
 8006342:	f003 020f 	and.w	r2, r3, #15
 8006346:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	4422      	add	r2, r4
 800634e:	609a      	str	r2, [r3, #8]
}
 8006350:	bf00      	nop
 8006352:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006356:	46bd      	mov	sp, r7
 8006358:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800635c:	51eb851f 	.word	0x51eb851f

08006360 <memset>:
 8006360:	4402      	add	r2, r0
 8006362:	4603      	mov	r3, r0
 8006364:	4293      	cmp	r3, r2
 8006366:	d100      	bne.n	800636a <memset+0xa>
 8006368:	4770      	bx	lr
 800636a:	f803 1b01 	strb.w	r1, [r3], #1
 800636e:	e7f9      	b.n	8006364 <memset+0x4>

08006370 <__libc_init_array>:
 8006370:	b570      	push	{r4, r5, r6, lr}
 8006372:	4d0d      	ldr	r5, [pc, #52]	@ (80063a8 <__libc_init_array+0x38>)
 8006374:	4c0d      	ldr	r4, [pc, #52]	@ (80063ac <__libc_init_array+0x3c>)
 8006376:	1b64      	subs	r4, r4, r5
 8006378:	10a4      	asrs	r4, r4, #2
 800637a:	2600      	movs	r6, #0
 800637c:	42a6      	cmp	r6, r4
 800637e:	d109      	bne.n	8006394 <__libc_init_array+0x24>
 8006380:	4d0b      	ldr	r5, [pc, #44]	@ (80063b0 <__libc_init_array+0x40>)
 8006382:	4c0c      	ldr	r4, [pc, #48]	@ (80063b4 <__libc_init_array+0x44>)
 8006384:	f000 f818 	bl	80063b8 <_init>
 8006388:	1b64      	subs	r4, r4, r5
 800638a:	10a4      	asrs	r4, r4, #2
 800638c:	2600      	movs	r6, #0
 800638e:	42a6      	cmp	r6, r4
 8006390:	d105      	bne.n	800639e <__libc_init_array+0x2e>
 8006392:	bd70      	pop	{r4, r5, r6, pc}
 8006394:	f855 3b04 	ldr.w	r3, [r5], #4
 8006398:	4798      	blx	r3
 800639a:	3601      	adds	r6, #1
 800639c:	e7ee      	b.n	800637c <__libc_init_array+0xc>
 800639e:	f855 3b04 	ldr.w	r3, [r5], #4
 80063a2:	4798      	blx	r3
 80063a4:	3601      	adds	r6, #1
 80063a6:	e7f2      	b.n	800638e <__libc_init_array+0x1e>
 80063a8:	08006400 	.word	0x08006400
 80063ac:	08006400 	.word	0x08006400
 80063b0:	08006400 	.word	0x08006400
 80063b4:	08006404 	.word	0x08006404

080063b8 <_init>:
 80063b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063ba:	bf00      	nop
 80063bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063be:	bc08      	pop	{r3}
 80063c0:	469e      	mov	lr, r3
 80063c2:	4770      	bx	lr

080063c4 <_fini>:
 80063c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063c6:	bf00      	nop
 80063c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063ca:	bc08      	pop	{r3}
 80063cc:	469e      	mov	lr, r3
 80063ce:	4770      	bx	lr
