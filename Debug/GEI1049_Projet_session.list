
GEI1049_Projet_session.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006290  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002da8  08006460  08006460  00007460  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009208  08009208  0000b07c  2**0
                  CONTENTS
  4 .ARM          00000008  08009208  08009208  0000a208  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009210  08009210  0000b07c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009210  08009210  0000a210  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009214  08009214  0000a214  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  08009218  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000364  2000007c  08009294  0000b07c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003e0  08009294  0000b3e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b07c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012d53  00000000  00000000  0000b0ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000314f  00000000  00000000  0001ddff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001128  00000000  00000000  00020f50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d1e  00000000  00000000  00022078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000248dd  00000000  00000000  00022d96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018060  00000000  00000000  00047673  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d5ef9  00000000  00000000  0005f6d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001355cc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ed8  00000000  00000000  00135610  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  0013a4e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000007c 	.word	0x2000007c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006448 	.word	0x08006448

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000080 	.word	0x20000080
 800020c:	08006448 	.word	0x08006448

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96a 	b.w	800059c <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	460c      	mov	r4, r1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d14e      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ec:	4694      	mov	ip, r2
 80002ee:	458c      	cmp	ip, r1
 80002f0:	4686      	mov	lr, r0
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	d962      	bls.n	80003be <__udivmoddi4+0xde>
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0320 	rsb	r3, r2, #32
 80002fe:	4091      	lsls	r1, r2
 8000300:	fa20 f303 	lsr.w	r3, r0, r3
 8000304:	fa0c fc02 	lsl.w	ip, ip, r2
 8000308:	4319      	orrs	r1, r3
 800030a:	fa00 fe02 	lsl.w	lr, r0, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f f68c 	uxth.w	r6, ip
 8000316:	fbb1 f4f7 	udiv	r4, r1, r7
 800031a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031e:	fb07 1114 	mls	r1, r7, r4, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb04 f106 	mul.w	r1, r4, r6
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f104 30ff 	add.w	r0, r4, #4294967295
 8000336:	f080 8112 	bcs.w	800055e <__udivmoddi4+0x27e>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 810f 	bls.w	800055e <__udivmoddi4+0x27e>
 8000340:	3c02      	subs	r4, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	fa1f f38e 	uxth.w	r3, lr
 800034a:	fbb1 f0f7 	udiv	r0, r1, r7
 800034e:	fb07 1110 	mls	r1, r7, r0, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb00 f606 	mul.w	r6, r0, r6
 800035a:	429e      	cmp	r6, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x94>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f100 31ff 	add.w	r1, r0, #4294967295
 8000366:	f080 80fc 	bcs.w	8000562 <__udivmoddi4+0x282>
 800036a:	429e      	cmp	r6, r3
 800036c:	f240 80f9 	bls.w	8000562 <__udivmoddi4+0x282>
 8000370:	4463      	add	r3, ip
 8000372:	3802      	subs	r0, #2
 8000374:	1b9b      	subs	r3, r3, r6
 8000376:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800037a:	2100      	movs	r1, #0
 800037c:	b11d      	cbz	r5, 8000386 <__udivmoddi4+0xa6>
 800037e:	40d3      	lsrs	r3, r2
 8000380:	2200      	movs	r2, #0
 8000382:	e9c5 3200 	strd	r3, r2, [r5]
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d905      	bls.n	800039a <__udivmoddi4+0xba>
 800038e:	b10d      	cbz	r5, 8000394 <__udivmoddi4+0xb4>
 8000390:	e9c5 0100 	strd	r0, r1, [r5]
 8000394:	2100      	movs	r1, #0
 8000396:	4608      	mov	r0, r1
 8000398:	e7f5      	b.n	8000386 <__udivmoddi4+0xa6>
 800039a:	fab3 f183 	clz	r1, r3
 800039e:	2900      	cmp	r1, #0
 80003a0:	d146      	bne.n	8000430 <__udivmoddi4+0x150>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d302      	bcc.n	80003ac <__udivmoddi4+0xcc>
 80003a6:	4290      	cmp	r0, r2
 80003a8:	f0c0 80f0 	bcc.w	800058c <__udivmoddi4+0x2ac>
 80003ac:	1a86      	subs	r6, r0, r2
 80003ae:	eb64 0303 	sbc.w	r3, r4, r3
 80003b2:	2001      	movs	r0, #1
 80003b4:	2d00      	cmp	r5, #0
 80003b6:	d0e6      	beq.n	8000386 <__udivmoddi4+0xa6>
 80003b8:	e9c5 6300 	strd	r6, r3, [r5]
 80003bc:	e7e3      	b.n	8000386 <__udivmoddi4+0xa6>
 80003be:	2a00      	cmp	r2, #0
 80003c0:	f040 8090 	bne.w	80004e4 <__udivmoddi4+0x204>
 80003c4:	eba1 040c 	sub.w	r4, r1, ip
 80003c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003cc:	fa1f f78c 	uxth.w	r7, ip
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003da:	fb08 4416 	mls	r4, r8, r6, r4
 80003de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003e2:	fb07 f006 	mul.w	r0, r7, r6
 80003e6:	4298      	cmp	r0, r3
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x11c>
 80003ea:	eb1c 0303 	adds.w	r3, ip, r3
 80003ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x11a>
 80003f4:	4298      	cmp	r0, r3
 80003f6:	f200 80cd 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003fa:	4626      	mov	r6, r4
 80003fc:	1a1c      	subs	r4, r3, r0
 80003fe:	fa1f f38e 	uxth.w	r3, lr
 8000402:	fbb4 f0f8 	udiv	r0, r4, r8
 8000406:	fb08 4410 	mls	r4, r8, r0, r4
 800040a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040e:	fb00 f707 	mul.w	r7, r0, r7
 8000412:	429f      	cmp	r7, r3
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x148>
 8000416:	eb1c 0303 	adds.w	r3, ip, r3
 800041a:	f100 34ff 	add.w	r4, r0, #4294967295
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x146>
 8000420:	429f      	cmp	r7, r3
 8000422:	f200 80b0 	bhi.w	8000586 <__udivmoddi4+0x2a6>
 8000426:	4620      	mov	r0, r4
 8000428:	1bdb      	subs	r3, r3, r7
 800042a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800042e:	e7a5      	b.n	800037c <__udivmoddi4+0x9c>
 8000430:	f1c1 0620 	rsb	r6, r1, #32
 8000434:	408b      	lsls	r3, r1
 8000436:	fa22 f706 	lsr.w	r7, r2, r6
 800043a:	431f      	orrs	r7, r3
 800043c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000440:	fa04 f301 	lsl.w	r3, r4, r1
 8000444:	ea43 030c 	orr.w	r3, r3, ip
 8000448:	40f4      	lsrs	r4, r6
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	0c38      	lsrs	r0, r7, #16
 8000450:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000454:	fbb4 fef0 	udiv	lr, r4, r0
 8000458:	fa1f fc87 	uxth.w	ip, r7
 800045c:	fb00 441e 	mls	r4, r0, lr, r4
 8000460:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000464:	fb0e f90c 	mul.w	r9, lr, ip
 8000468:	45a1      	cmp	r9, r4
 800046a:	fa02 f201 	lsl.w	r2, r2, r1
 800046e:	d90a      	bls.n	8000486 <__udivmoddi4+0x1a6>
 8000470:	193c      	adds	r4, r7, r4
 8000472:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000476:	f080 8084 	bcs.w	8000582 <__udivmoddi4+0x2a2>
 800047a:	45a1      	cmp	r9, r4
 800047c:	f240 8081 	bls.w	8000582 <__udivmoddi4+0x2a2>
 8000480:	f1ae 0e02 	sub.w	lr, lr, #2
 8000484:	443c      	add	r4, r7
 8000486:	eba4 0409 	sub.w	r4, r4, r9
 800048a:	fa1f f983 	uxth.w	r9, r3
 800048e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000492:	fb00 4413 	mls	r4, r0, r3, r4
 8000496:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049a:	fb03 fc0c 	mul.w	ip, r3, ip
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x1d2>
 80004a2:	193c      	adds	r4, r7, r4
 80004a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004a8:	d267      	bcs.n	800057a <__udivmoddi4+0x29a>
 80004aa:	45a4      	cmp	ip, r4
 80004ac:	d965      	bls.n	800057a <__udivmoddi4+0x29a>
 80004ae:	3b02      	subs	r3, #2
 80004b0:	443c      	add	r4, r7
 80004b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004b6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ba:	eba4 040c 	sub.w	r4, r4, ip
 80004be:	429c      	cmp	r4, r3
 80004c0:	46ce      	mov	lr, r9
 80004c2:	469c      	mov	ip, r3
 80004c4:	d351      	bcc.n	800056a <__udivmoddi4+0x28a>
 80004c6:	d04e      	beq.n	8000566 <__udivmoddi4+0x286>
 80004c8:	b155      	cbz	r5, 80004e0 <__udivmoddi4+0x200>
 80004ca:	ebb8 030e 	subs.w	r3, r8, lr
 80004ce:	eb64 040c 	sbc.w	r4, r4, ip
 80004d2:	fa04 f606 	lsl.w	r6, r4, r6
 80004d6:	40cb      	lsrs	r3, r1
 80004d8:	431e      	orrs	r6, r3
 80004da:	40cc      	lsrs	r4, r1
 80004dc:	e9c5 6400 	strd	r6, r4, [r5]
 80004e0:	2100      	movs	r1, #0
 80004e2:	e750      	b.n	8000386 <__udivmoddi4+0xa6>
 80004e4:	f1c2 0320 	rsb	r3, r2, #32
 80004e8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f0:	fa24 f303 	lsr.w	r3, r4, r3
 80004f4:	4094      	lsls	r4, r2
 80004f6:	430c      	orrs	r4, r1
 80004f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000500:	fa1f f78c 	uxth.w	r7, ip
 8000504:	fbb3 f0f8 	udiv	r0, r3, r8
 8000508:	fb08 3110 	mls	r1, r8, r0, r3
 800050c:	0c23      	lsrs	r3, r4, #16
 800050e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000512:	fb00 f107 	mul.w	r1, r0, r7
 8000516:	4299      	cmp	r1, r3
 8000518:	d908      	bls.n	800052c <__udivmoddi4+0x24c>
 800051a:	eb1c 0303 	adds.w	r3, ip, r3
 800051e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000522:	d22c      	bcs.n	800057e <__udivmoddi4+0x29e>
 8000524:	4299      	cmp	r1, r3
 8000526:	d92a      	bls.n	800057e <__udivmoddi4+0x29e>
 8000528:	3802      	subs	r0, #2
 800052a:	4463      	add	r3, ip
 800052c:	1a5b      	subs	r3, r3, r1
 800052e:	b2a4      	uxth	r4, r4
 8000530:	fbb3 f1f8 	udiv	r1, r3, r8
 8000534:	fb08 3311 	mls	r3, r8, r1, r3
 8000538:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800053c:	fb01 f307 	mul.w	r3, r1, r7
 8000540:	42a3      	cmp	r3, r4
 8000542:	d908      	bls.n	8000556 <__udivmoddi4+0x276>
 8000544:	eb1c 0404 	adds.w	r4, ip, r4
 8000548:	f101 36ff 	add.w	r6, r1, #4294967295
 800054c:	d213      	bcs.n	8000576 <__udivmoddi4+0x296>
 800054e:	42a3      	cmp	r3, r4
 8000550:	d911      	bls.n	8000576 <__udivmoddi4+0x296>
 8000552:	3902      	subs	r1, #2
 8000554:	4464      	add	r4, ip
 8000556:	1ae4      	subs	r4, r4, r3
 8000558:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800055c:	e739      	b.n	80003d2 <__udivmoddi4+0xf2>
 800055e:	4604      	mov	r4, r0
 8000560:	e6f0      	b.n	8000344 <__udivmoddi4+0x64>
 8000562:	4608      	mov	r0, r1
 8000564:	e706      	b.n	8000374 <__udivmoddi4+0x94>
 8000566:	45c8      	cmp	r8, r9
 8000568:	d2ae      	bcs.n	80004c8 <__udivmoddi4+0x1e8>
 800056a:	ebb9 0e02 	subs.w	lr, r9, r2
 800056e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000572:	3801      	subs	r0, #1
 8000574:	e7a8      	b.n	80004c8 <__udivmoddi4+0x1e8>
 8000576:	4631      	mov	r1, r6
 8000578:	e7ed      	b.n	8000556 <__udivmoddi4+0x276>
 800057a:	4603      	mov	r3, r0
 800057c:	e799      	b.n	80004b2 <__udivmoddi4+0x1d2>
 800057e:	4630      	mov	r0, r6
 8000580:	e7d4      	b.n	800052c <__udivmoddi4+0x24c>
 8000582:	46d6      	mov	lr, sl
 8000584:	e77f      	b.n	8000486 <__udivmoddi4+0x1a6>
 8000586:	4463      	add	r3, ip
 8000588:	3802      	subs	r0, #2
 800058a:	e74d      	b.n	8000428 <__udivmoddi4+0x148>
 800058c:	4606      	mov	r6, r0
 800058e:	4623      	mov	r3, r4
 8000590:	4608      	mov	r0, r1
 8000592:	e70f      	b.n	80003b4 <__udivmoddi4+0xd4>
 8000594:	3e02      	subs	r6, #2
 8000596:	4463      	add	r3, ip
 8000598:	e730      	b.n	80003fc <__udivmoddi4+0x11c>
 800059a:	bf00      	nop

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <VitCommande>:
#include "gestion_moteurs.h"

#define max 200
#define min -200

void VitCommande(int Vgc, int Vdc, int *Vgv, int *Vdv, TIM_HandleTypeDef htim7){
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b084      	sub	sp, #16
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	60f8      	str	r0, [r7, #12]
 80005a8:	60b9      	str	r1, [r7, #8]
 80005aa:	607a      	str	r2, [r7, #4]
 80005ac:	603b      	str	r3, [r7, #0]

	if(Vgc >= max){
 80005ae:	68fb      	ldr	r3, [r7, #12]
 80005b0:	2bc7      	cmp	r3, #199	@ 0xc7
 80005b2:	dd03      	ble.n	80005bc <VitCommande+0x1c>
		*Vgv = max;
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	22c8      	movs	r2, #200	@ 0xc8
 80005b8:	601a      	str	r2, [r3, #0]
 80005ba:	e00b      	b.n	80005d4 <VitCommande+0x34>
	}
	else if(Vgc <= min){
 80005bc:	68fb      	ldr	r3, [r7, #12]
 80005be:	f113 0fc7 	cmn.w	r3, #199	@ 0xc7
 80005c2:	da04      	bge.n	80005ce <VitCommande+0x2e>
		*Vgv = min;
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	f06f 02c7 	mvn.w	r2, #199	@ 0xc7
 80005ca:	601a      	str	r2, [r3, #0]
 80005cc:	e002      	b.n	80005d4 <VitCommande+0x34>
	}
	else{
		*Vgv = Vgc;
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	68fa      	ldr	r2, [r7, #12]
 80005d2:	601a      	str	r2, [r3, #0]
	}

	if(Vdc >= max){
 80005d4:	68bb      	ldr	r3, [r7, #8]
 80005d6:	2bc7      	cmp	r3, #199	@ 0xc7
 80005d8:	dd03      	ble.n	80005e2 <VitCommande+0x42>
		*Vdv = max;
 80005da:	683b      	ldr	r3, [r7, #0]
 80005dc:	22c8      	movs	r2, #200	@ 0xc8
 80005de:	601a      	str	r2, [r3, #0]
 80005e0:	e00b      	b.n	80005fa <VitCommande+0x5a>
	}
	else if(Vdc <= min){
 80005e2:	68bb      	ldr	r3, [r7, #8]
 80005e4:	f113 0fc7 	cmn.w	r3, #199	@ 0xc7
 80005e8:	da04      	bge.n	80005f4 <VitCommande+0x54>
		*Vdv = min;
 80005ea:	683b      	ldr	r3, [r7, #0]
 80005ec:	f06f 02c7 	mvn.w	r2, #199	@ 0xc7
 80005f0:	601a      	str	r2, [r3, #0]
 80005f2:	e002      	b.n	80005fa <VitCommande+0x5a>
	}
	else{
		*Vdv = Vdc;
 80005f4:	683b      	ldr	r3, [r7, #0]
 80005f6:	68ba      	ldr	r2, [r7, #8]
 80005f8:	601a      	str	r2, [r3, #0]
	}
	HAL_TIM_Base_Start_IT(&htim7);
 80005fa:	f107 0018 	add.w	r0, r7, #24
 80005fe:	f002 fe0f 	bl	8003220 <HAL_TIM_Base_Start_IT>
}
 8000602:	bf00      	nop
 8000604:	3710      	adds	r7, #16
 8000606:	46bd      	mov	sp, r7
 8000608:	bd80      	pop	{r7, pc}
	...

0800060c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b08a      	sub	sp, #40	@ 0x28
 8000610:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000612:	f107 0314 	add.w	r3, r7, #20
 8000616:	2200      	movs	r2, #0
 8000618:	601a      	str	r2, [r3, #0]
 800061a:	605a      	str	r2, [r3, #4]
 800061c:	609a      	str	r2, [r3, #8]
 800061e:	60da      	str	r2, [r3, #12]
 8000620:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000622:	2300      	movs	r3, #0
 8000624:	613b      	str	r3, [r7, #16]
 8000626:	4b4f      	ldr	r3, [pc, #316]	@ (8000764 <MX_GPIO_Init+0x158>)
 8000628:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800062a:	4a4e      	ldr	r2, [pc, #312]	@ (8000764 <MX_GPIO_Init+0x158>)
 800062c:	f043 0304 	orr.w	r3, r3, #4
 8000630:	6313      	str	r3, [r2, #48]	@ 0x30
 8000632:	4b4c      	ldr	r3, [pc, #304]	@ (8000764 <MX_GPIO_Init+0x158>)
 8000634:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000636:	f003 0304 	and.w	r3, r3, #4
 800063a:	613b      	str	r3, [r7, #16]
 800063c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800063e:	2300      	movs	r3, #0
 8000640:	60fb      	str	r3, [r7, #12]
 8000642:	4b48      	ldr	r3, [pc, #288]	@ (8000764 <MX_GPIO_Init+0x158>)
 8000644:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000646:	4a47      	ldr	r2, [pc, #284]	@ (8000764 <MX_GPIO_Init+0x158>)
 8000648:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800064c:	6313      	str	r3, [r2, #48]	@ 0x30
 800064e:	4b45      	ldr	r3, [pc, #276]	@ (8000764 <MX_GPIO_Init+0x158>)
 8000650:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000652:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000656:	60fb      	str	r3, [r7, #12]
 8000658:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800065a:	2300      	movs	r3, #0
 800065c:	60bb      	str	r3, [r7, #8]
 800065e:	4b41      	ldr	r3, [pc, #260]	@ (8000764 <MX_GPIO_Init+0x158>)
 8000660:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000662:	4a40      	ldr	r2, [pc, #256]	@ (8000764 <MX_GPIO_Init+0x158>)
 8000664:	f043 0301 	orr.w	r3, r3, #1
 8000668:	6313      	str	r3, [r2, #48]	@ 0x30
 800066a:	4b3e      	ldr	r3, [pc, #248]	@ (8000764 <MX_GPIO_Init+0x158>)
 800066c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800066e:	f003 0301 	and.w	r3, r3, #1
 8000672:	60bb      	str	r3, [r7, #8]
 8000674:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000676:	2300      	movs	r3, #0
 8000678:	607b      	str	r3, [r7, #4]
 800067a:	4b3a      	ldr	r3, [pc, #232]	@ (8000764 <MX_GPIO_Init+0x158>)
 800067c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800067e:	4a39      	ldr	r2, [pc, #228]	@ (8000764 <MX_GPIO_Init+0x158>)
 8000680:	f043 0302 	orr.w	r3, r3, #2
 8000684:	6313      	str	r3, [r2, #48]	@ 0x30
 8000686:	4b37      	ldr	r3, [pc, #220]	@ (8000764 <MX_GPIO_Init+0x158>)
 8000688:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800068a:	f003 0302 	and.w	r3, r3, #2
 800068e:	607b      	str	r3, [r7, #4]
 8000690:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000692:	2200      	movs	r2, #0
 8000694:	2120      	movs	r1, #32
 8000696:	4834      	ldr	r0, [pc, #208]	@ (8000768 <MX_GPIO_Init+0x15c>)
 8000698:	f001 fcae 	bl	8001ff8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI_CS_Pin|SPI_DC_Pin|SPI_RST_Pin, GPIO_PIN_RESET);
 800069c:	2200      	movs	r2, #0
 800069e:	f44f 4160 	mov.w	r1, #57344	@ 0xe000
 80006a2:	4832      	ldr	r0, [pc, #200]	@ (800076c <MX_GPIO_Init+0x160>)
 80006a4:	f001 fca8 	bl	8001ff8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80006a8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80006ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80006ae:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80006b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b4:	2300      	movs	r3, #0
 80006b6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80006b8:	f107 0314 	add.w	r3, r7, #20
 80006bc:	4619      	mov	r1, r3
 80006be:	482c      	ldr	r0, [pc, #176]	@ (8000770 <MX_GPIO_Init+0x164>)
 80006c0:	f001 faee 	bl	8001ca0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80006c4:	2320      	movs	r3, #32
 80006c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006c8:	2301      	movs	r3, #1
 80006ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006cc:	2300      	movs	r3, #0
 80006ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006d0:	2300      	movs	r3, #0
 80006d2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80006d4:	f107 0314 	add.w	r3, r7, #20
 80006d8:	4619      	mov	r1, r3
 80006da:	4823      	ldr	r0, [pc, #140]	@ (8000768 <MX_GPIO_Init+0x15c>)
 80006dc:	f001 fae0 	bl	8001ca0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = SPI_CS_Pin|SPI_DC_Pin|SPI_RST_Pin;
 80006e0:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 80006e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006e6:	2301      	movs	r3, #1
 80006e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ea:	2300      	movs	r3, #0
 80006ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006ee:	2300      	movs	r3, #0
 80006f0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006f2:	f107 0314 	add.w	r3, r7, #20
 80006f6:	4619      	mov	r1, r3
 80006f8:	481c      	ldr	r0, [pc, #112]	@ (800076c <MX_GPIO_Init+0x160>)
 80006fa:	f001 fad1 	bl	8001ca0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = Encodeur_D_B_Pin|DIP_Switch_A_Pin|DIP_Switch_B_Pin;
 80006fe:	f44f 6348 	mov.w	r3, #3200	@ 0xc80
 8000702:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000704:	2300      	movs	r3, #0
 8000706:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000708:	2302      	movs	r3, #2
 800070a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800070c:	f107 0314 	add.w	r3, r7, #20
 8000710:	4619      	mov	r1, r3
 8000712:	4817      	ldr	r0, [pc, #92]	@ (8000770 <MX_GPIO_Init+0x164>)
 8000714:	f001 fac4 	bl	8001ca0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = Encodeur_G_A_Pin|Encodeur_D_A_Pin;
 8000718:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800071c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800071e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000722:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000724:	2302      	movs	r3, #2
 8000726:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000728:	f107 0314 	add.w	r3, r7, #20
 800072c:	4619      	mov	r1, r3
 800072e:	480e      	ldr	r0, [pc, #56]	@ (8000768 <MX_GPIO_Init+0x15c>)
 8000730:	f001 fab6 	bl	8001ca0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Encodeur_G_B_Pin;
 8000734:	2340      	movs	r3, #64	@ 0x40
 8000736:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000738:	2300      	movs	r3, #0
 800073a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800073c:	2302      	movs	r3, #2
 800073e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Encodeur_G_B_GPIO_Port, &GPIO_InitStruct);
 8000740:	f107 0314 	add.w	r3, r7, #20
 8000744:	4619      	mov	r1, r3
 8000746:	4809      	ldr	r0, [pc, #36]	@ (800076c <MX_GPIO_Init+0x160>)
 8000748:	f001 faaa 	bl	8001ca0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800074c:	2200      	movs	r2, #0
 800074e:	2100      	movs	r1, #0
 8000750:	2017      	movs	r0, #23
 8000752:	f001 fa6e 	bl	8001c32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000756:	2017      	movs	r0, #23
 8000758:	f001 fa87 	bl	8001c6a <HAL_NVIC_EnableIRQ>

}
 800075c:	bf00      	nop
 800075e:	3728      	adds	r7, #40	@ 0x28
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}
 8000764:	40023800 	.word	0x40023800
 8000768:	40020000 	.word	0x40020000
 800076c:	40020400 	.word	0x40020400
 8000770:	40020800 	.word	0x40020800

08000774 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b092      	sub	sp, #72	@ 0x48
 8000778:	af12      	add	r7, sp, #72	@ 0x48
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800077a:	f001 f8e9 	bl	8001950 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800077e:	f000 f85d 	bl	800083c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000782:	f7ff ff43 	bl	800060c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000786:	f000 fe67 	bl	8001458 <MX_USART2_UART_Init>
  MX_TIM6_Init();
 800078a:	f000 fd07 	bl	800119c <MX_TIM6_Init>
  MX_TIM3_Init();
 800078e:	f000 fbf5 	bl	8000f7c <MX_TIM3_Init>
  MX_TIM7_Init();
 8000792:	f000 fd39 	bl	8001208 <MX_TIM7_Init>
  MX_SPI2_Init();
 8000796:	f000 fa23 	bl	8000be0 <MX_SPI2_Init>
  MX_TIM4_Init();
 800079a:	f000 fc87 	bl	80010ac <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim6);
 800079e:	481e      	ldr	r0, [pc, #120]	@ (8000818 <main+0xa4>)
 80007a0:	f002 fd3e 	bl	8003220 <HAL_TIM_Base_Start_IT>

  modeB = HAL_GPIO_ReadPin(DIP_Switch_B_GPIO_Port, DIP_Switch_B_Pin); // fonction lecture de pin pour les 4 modes
 80007a4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80007a8:	481c      	ldr	r0, [pc, #112]	@ (800081c <main+0xa8>)
 80007aa:	f001 fc0d 	bl	8001fc8 <HAL_GPIO_ReadPin>
 80007ae:	4603      	mov	r3, r0
 80007b0:	461a      	mov	r2, r3
 80007b2:	4b1b      	ldr	r3, [pc, #108]	@ (8000820 <main+0xac>)
 80007b4:	701a      	strb	r2, [r3, #0]
  modeA = HAL_GPIO_ReadPin(DIP_Switch_A_GPIO_Port, DIP_Switch_A_Pin); // fonction lecture de pin pour les 4 modes
 80007b6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80007ba:	4818      	ldr	r0, [pc, #96]	@ (800081c <main+0xa8>)
 80007bc:	f001 fc04 	bl	8001fc8 <HAL_GPIO_ReadPin>
 80007c0:	4603      	mov	r3, r0
 80007c2:	461a      	mov	r2, r3
 80007c4:	4b17      	ldr	r3, [pc, #92]	@ (8000824 <main+0xb0>)
 80007c6:	701a      	strb	r2, [r3, #0]
  LCD_Init(&lcdInitOk, modeA, modeB);
 80007c8:	4b16      	ldr	r3, [pc, #88]	@ (8000824 <main+0xb0>)
 80007ca:	781b      	ldrb	r3, [r3, #0]
 80007cc:	4a14      	ldr	r2, [pc, #80]	@ (8000820 <main+0xac>)
 80007ce:	7812      	ldrb	r2, [r2, #0]
 80007d0:	4619      	mov	r1, r3
 80007d2:	4815      	ldr	r0, [pc, #84]	@ (8000828 <main+0xb4>)
 80007d4:	f000 ff42 	bl	800165c <LCD_Init>

  LCD_Mode(test);
 80007d8:	4b14      	ldr	r3, [pc, #80]	@ (800082c <main+0xb8>)
 80007da:	781b      	ldrb	r3, [r3, #0]
 80007dc:	4618      	mov	r0, r3
 80007de:	f000 fead 	bl	800153c <LCD_Mode>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_Delay(2000);
 80007e2:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80007e6:	f001 f925 	bl	8001a34 <HAL_Delay>
	  VitCommande(22, 43, &VitCommandeGauche, &VitCommandeDroite, htim7);
 80007ea:	4a11      	ldr	r2, [pc, #68]	@ (8000830 <main+0xbc>)
 80007ec:	466b      	mov	r3, sp
 80007ee:	4611      	mov	r1, r2
 80007f0:	2248      	movs	r2, #72	@ 0x48
 80007f2:	4618      	mov	r0, r3
 80007f4:	f005 f827 	bl	8005846 <memcpy>
 80007f8:	4b0e      	ldr	r3, [pc, #56]	@ (8000834 <main+0xc0>)
 80007fa:	4a0f      	ldr	r2, [pc, #60]	@ (8000838 <main+0xc4>)
 80007fc:	212b      	movs	r1, #43	@ 0x2b
 80007fe:	2016      	movs	r0, #22
 8000800:	f7ff fece 	bl	80005a0 <VitCommande>
	  HAL_Delay(2000);
 8000804:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000808:	f001 f914 	bl	8001a34 <HAL_Delay>
	  HAL_TIM_Base_Stop_IT(&htim7);
 800080c:	4808      	ldr	r0, [pc, #32]	@ (8000830 <main+0xbc>)
 800080e:	f002 fd77 	bl	8003300 <HAL_TIM_Base_Stop_IT>
	  HAL_Delay(2000);
 8000812:	bf00      	nop
 8000814:	e7e5      	b.n	80007e2 <main+0x6e>
 8000816:	bf00      	nop
 8000818:	20000198 	.word	0x20000198
 800081c:	40020800 	.word	0x40020800
 8000820:	200000aa 	.word	0x200000aa
 8000824:	200000a9 	.word	0x200000a9
 8000828:	200000a8 	.word	0x200000a8
 800082c:	20000002 	.word	0x20000002
 8000830:	200001e0 	.word	0x200001e0
 8000834:	200000a4 	.word	0x200000a4
 8000838:	200000a0 	.word	0x200000a0

0800083c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b094      	sub	sp, #80	@ 0x50
 8000840:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000842:	f107 031c 	add.w	r3, r7, #28
 8000846:	2234      	movs	r2, #52	@ 0x34
 8000848:	2100      	movs	r1, #0
 800084a:	4618      	mov	r0, r3
 800084c:	f004 ff70 	bl	8005730 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000850:	f107 0308 	add.w	r3, r7, #8
 8000854:	2200      	movs	r2, #0
 8000856:	601a      	str	r2, [r3, #0]
 8000858:	605a      	str	r2, [r3, #4]
 800085a:	609a      	str	r2, [r3, #8]
 800085c:	60da      	str	r2, [r3, #12]
 800085e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000860:	2300      	movs	r3, #0
 8000862:	607b      	str	r3, [r7, #4]
 8000864:	4b2a      	ldr	r3, [pc, #168]	@ (8000910 <SystemClock_Config+0xd4>)
 8000866:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000868:	4a29      	ldr	r2, [pc, #164]	@ (8000910 <SystemClock_Config+0xd4>)
 800086a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800086e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000870:	4b27      	ldr	r3, [pc, #156]	@ (8000910 <SystemClock_Config+0xd4>)
 8000872:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000874:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000878:	607b      	str	r3, [r7, #4]
 800087a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800087c:	2300      	movs	r3, #0
 800087e:	603b      	str	r3, [r7, #0]
 8000880:	4b24      	ldr	r3, [pc, #144]	@ (8000914 <SystemClock_Config+0xd8>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000888:	4a22      	ldr	r2, [pc, #136]	@ (8000914 <SystemClock_Config+0xd8>)
 800088a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800088e:	6013      	str	r3, [r2, #0]
 8000890:	4b20      	ldr	r3, [pc, #128]	@ (8000914 <SystemClock_Config+0xd8>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000898:	603b      	str	r3, [r7, #0]
 800089a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800089c:	2302      	movs	r3, #2
 800089e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008a0:	2301      	movs	r3, #1
 80008a2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008a4:	2310      	movs	r3, #16
 80008a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008a8:	2302      	movs	r3, #2
 80008aa:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80008ac:	2300      	movs	r3, #0
 80008ae:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80008b0:	2310      	movs	r3, #16
 80008b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80008b4:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80008b8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80008ba:	2304      	movs	r3, #4
 80008bc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80008be:	2302      	movs	r3, #2
 80008c0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80008c2:	2302      	movs	r3, #2
 80008c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008c6:	f107 031c 	add.w	r3, r7, #28
 80008ca:	4618      	mov	r0, r3
 80008cc:	f001 ff10 	bl	80026f0 <HAL_RCC_OscConfig>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80008d6:	f000 f97d 	bl	8000bd4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008da:	230f      	movs	r3, #15
 80008dc:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008de:	2302      	movs	r3, #2
 80008e0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008e2:	2300      	movs	r3, #0
 80008e4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008e6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008ea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008ec:	2300      	movs	r3, #0
 80008ee:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80008f0:	f107 0308 	add.w	r3, r7, #8
 80008f4:	2102      	movs	r1, #2
 80008f6:	4618      	mov	r0, r3
 80008f8:	f001 fbb0 	bl	800205c <HAL_RCC_ClockConfig>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d001      	beq.n	8000906 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000902:	f000 f967 	bl	8000bd4 <Error_Handler>
  }
}
 8000906:	bf00      	nop
 8000908:	3750      	adds	r7, #80	@ 0x50
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	40023800 	.word	0x40023800
 8000914:	40007000 	.word	0x40007000

08000918 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000918:	b480      	push	{r7}
 800091a:	b083      	sub	sp, #12
 800091c:	af00      	add	r7, sp, #0
 800091e:	4603      	mov	r3, r0
 8000920:	80fb      	strh	r3, [r7, #6]

	if(GPIO_Pin == GPIO_PIN_9)
 8000922:	88fb      	ldrh	r3, [r7, #6]
 8000924:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000928:	d106      	bne.n	8000938 <HAL_GPIO_EXTI_Callback+0x20>
	{
		nbPulseD ++ ; // compte les pulses de lencodeur droit
 800092a:	4b0c      	ldr	r3, [pc, #48]	@ (800095c <HAL_GPIO_EXTI_Callback+0x44>)
 800092c:	881b      	ldrh	r3, [r3, #0]
 800092e:	b29b      	uxth	r3, r3
 8000930:	3301      	adds	r3, #1
 8000932:	b29a      	uxth	r2, r3
 8000934:	4b09      	ldr	r3, [pc, #36]	@ (800095c <HAL_GPIO_EXTI_Callback+0x44>)
 8000936:	801a      	strh	r2, [r3, #0]
	}

	if(GPIO_Pin == GPIO_PIN_8)
 8000938:	88fb      	ldrh	r3, [r7, #6]
 800093a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800093e:	d106      	bne.n	800094e <HAL_GPIO_EXTI_Callback+0x36>
	{
		nbPulseG ++ ; // compte les pulses de lencodeur droit
 8000940:	4b07      	ldr	r3, [pc, #28]	@ (8000960 <HAL_GPIO_EXTI_Callback+0x48>)
 8000942:	881b      	ldrh	r3, [r3, #0]
 8000944:	b29b      	uxth	r3, r3
 8000946:	3301      	adds	r3, #1
 8000948:	b29a      	uxth	r2, r3
 800094a:	4b05      	ldr	r3, [pc, #20]	@ (8000960 <HAL_GPIO_EXTI_Callback+0x48>)
 800094c:	801a      	strh	r2, [r3, #0]
	}

} //fonctionne
 800094e:	bf00      	nop
 8000950:	370c      	adds	r7, #12
 8000952:	46bd      	mov	sp, r7
 8000954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000958:	4770      	bx	lr
 800095a:	bf00      	nop
 800095c:	20000098 	.word	0x20000098
 8000960:	2000009a 	.word	0x2000009a

08000964 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b082      	sub	sp, #8
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
    if(htim->Instance == TIM6)
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	4a8a      	ldr	r2, [pc, #552]	@ (8000b9c <HAL_TIM_PeriodElapsedCallback+0x238>)
 8000972:	4293      	cmp	r3, r2
 8000974:	d149      	bne.n	8000a0a <HAL_TIM_PeriodElapsedCallback+0xa6>
    {
    	vitesseD = CIRCONFERENCE * nbPulseD / PULSE_PAR_TOUR * 2000 / (arrTimerVitesse + 1) ; // calcule la vitesse de la chenille droite en m/s
 8000976:	4b8a      	ldr	r3, [pc, #552]	@ (8000ba0 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8000978:	881b      	ldrh	r3, [r3, #0]
 800097a:	b29b      	uxth	r3, r3
 800097c:	461a      	mov	r2, r3
 800097e:	239d      	movs	r3, #157	@ 0x9d
 8000980:	fb02 f303 	mul.w	r3, r2, r3
 8000984:	4a87      	ldr	r2, [pc, #540]	@ (8000ba4 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8000986:	fb82 1203 	smull	r1, r2, r2, r3
 800098a:	441a      	add	r2, r3
 800098c:	1192      	asrs	r2, r2, #6
 800098e:	17db      	asrs	r3, r3, #31
 8000990:	1ad3      	subs	r3, r2, r3
 8000992:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8000996:	fb03 f202 	mul.w	r2, r3, r2
 800099a:	4b83      	ldr	r3, [pc, #524]	@ (8000ba8 <HAL_TIM_PeriodElapsedCallback+0x244>)
 800099c:	881b      	ldrh	r3, [r3, #0]
 800099e:	b29b      	uxth	r3, r3
 80009a0:	3301      	adds	r3, #1
 80009a2:	fb92 f3f3 	sdiv	r3, r2, r3
 80009a6:	b29a      	uxth	r2, r3
 80009a8:	4b80      	ldr	r3, [pc, #512]	@ (8000bac <HAL_TIM_PeriodElapsedCallback+0x248>)
 80009aa:	801a      	strh	r2, [r3, #0]
    	vitesseG = CIRCONFERENCE * nbPulseG / PULSE_PAR_TOUR * 2000 / (arrTimerVitesse + 1) ;
 80009ac:	4b80      	ldr	r3, [pc, #512]	@ (8000bb0 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 80009ae:	881b      	ldrh	r3, [r3, #0]
 80009b0:	b29b      	uxth	r3, r3
 80009b2:	461a      	mov	r2, r3
 80009b4:	239d      	movs	r3, #157	@ 0x9d
 80009b6:	fb02 f303 	mul.w	r3, r2, r3
 80009ba:	4a7a      	ldr	r2, [pc, #488]	@ (8000ba4 <HAL_TIM_PeriodElapsedCallback+0x240>)
 80009bc:	fb82 1203 	smull	r1, r2, r2, r3
 80009c0:	441a      	add	r2, r3
 80009c2:	1192      	asrs	r2, r2, #6
 80009c4:	17db      	asrs	r3, r3, #31
 80009c6:	1ad3      	subs	r3, r2, r3
 80009c8:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80009cc:	fb03 f202 	mul.w	r2, r3, r2
 80009d0:	4b75      	ldr	r3, [pc, #468]	@ (8000ba8 <HAL_TIM_PeriodElapsedCallback+0x244>)
 80009d2:	881b      	ldrh	r3, [r3, #0]
 80009d4:	b29b      	uxth	r3, r3
 80009d6:	3301      	adds	r3, #1
 80009d8:	fb92 f3f3 	sdiv	r3, r2, r3
 80009dc:	b29a      	uxth	r2, r3
 80009de:	4b75      	ldr	r3, [pc, #468]	@ (8000bb4 <HAL_TIM_PeriodElapsedCallback+0x250>)
 80009e0:	801a      	strh	r2, [r3, #0]

    	nbPulseD = 0 ;
 80009e2:	4b6f      	ldr	r3, [pc, #444]	@ (8000ba0 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	801a      	strh	r2, [r3, #0]
    	nbPulseG = 0;
 80009e8:	4b71      	ldr	r3, [pc, #452]	@ (8000bb0 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	801a      	strh	r2, [r3, #0]
    	//HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);

    	// fonction a Emeric

		if(lcdInitOk)
 80009ee:	4b72      	ldr	r3, [pc, #456]	@ (8000bb8 <HAL_TIM_PeriodElapsedCallback+0x254>)
 80009f0:	781b      	ldrb	r3, [r3, #0]
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d009      	beq.n	8000a0a <HAL_TIM_PeriodElapsedCallback+0xa6>
		 {
			LCD_Vitesse(vitesseG, vitesseD);
 80009f6:	4b6f      	ldr	r3, [pc, #444]	@ (8000bb4 <HAL_TIM_PeriodElapsedCallback+0x250>)
 80009f8:	881b      	ldrh	r3, [r3, #0]
 80009fa:	b29b      	uxth	r3, r3
 80009fc:	4a6b      	ldr	r2, [pc, #428]	@ (8000bac <HAL_TIM_PeriodElapsedCallback+0x248>)
 80009fe:	8812      	ldrh	r2, [r2, #0]
 8000a00:	b292      	uxth	r2, r2
 8000a02:	4611      	mov	r1, r2
 8000a04:	4618      	mov	r0, r3
 8000a06:	f000 fdf1 	bl	80015ec <LCD_Vitesse>
		 }
		 }

    if(htim->Instance == TIM7)//Émeric
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	4a6b      	ldr	r2, [pc, #428]	@ (8000bbc <HAL_TIM_PeriodElapsedCallback+0x258>)
 8000a10:	4293      	cmp	r3, r2
 8000a12:	f040 80c0 	bne.w	8000b96 <HAL_TIM_PeriodElapsedCallback+0x232>
    {
    	if((VitCommandeGauche == vitesseG + INCERTITUDE || VitCommandeGauche == vitesseG - INCERTITUDE) && (VitCommandeDroite == vitesseD + INCERTITUDE || VitCommandeDroite == vitesseD - INCERTITUDE)){
 8000a16:	4b67      	ldr	r3, [pc, #412]	@ (8000bb4 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8000a18:	881b      	ldrh	r3, [r3, #0]
 8000a1a:	b29b      	uxth	r3, r3
 8000a1c:	f103 020a 	add.w	r2, r3, #10
 8000a20:	4b67      	ldr	r3, [pc, #412]	@ (8000bc0 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	429a      	cmp	r2, r3
 8000a26:	d008      	beq.n	8000a3a <HAL_TIM_PeriodElapsedCallback+0xd6>
 8000a28:	4b62      	ldr	r3, [pc, #392]	@ (8000bb4 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8000a2a:	881b      	ldrh	r3, [r3, #0]
 8000a2c:	b29b      	uxth	r3, r3
 8000a2e:	f1a3 020a 	sub.w	r2, r3, #10
 8000a32:	4b63      	ldr	r3, [pc, #396]	@ (8000bc0 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	429a      	cmp	r2, r3
 8000a38:	d115      	bne.n	8000a66 <HAL_TIM_PeriodElapsedCallback+0x102>
 8000a3a:	4b5c      	ldr	r3, [pc, #368]	@ (8000bac <HAL_TIM_PeriodElapsedCallback+0x248>)
 8000a3c:	881b      	ldrh	r3, [r3, #0]
 8000a3e:	b29b      	uxth	r3, r3
 8000a40:	f103 020a 	add.w	r2, r3, #10
 8000a44:	4b5f      	ldr	r3, [pc, #380]	@ (8000bc4 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	429a      	cmp	r2, r3
 8000a4a:	d008      	beq.n	8000a5e <HAL_TIM_PeriodElapsedCallback+0xfa>
 8000a4c:	4b57      	ldr	r3, [pc, #348]	@ (8000bac <HAL_TIM_PeriodElapsedCallback+0x248>)
 8000a4e:	881b      	ldrh	r3, [r3, #0]
 8000a50:	b29b      	uxth	r3, r3
 8000a52:	f1a3 020a 	sub.w	r2, r3, #10
 8000a56:	4b5b      	ldr	r3, [pc, #364]	@ (8000bc4 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	429a      	cmp	r2, r3
 8000a5c:	d103      	bne.n	8000a66 <HAL_TIM_PeriodElapsedCallback+0x102>
    		HAL_TIM_Base_Stop_IT(&htim7);
 8000a5e:	485a      	ldr	r0, [pc, #360]	@ (8000bc8 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8000a60:	f002 fc4e 	bl	8003300 <HAL_TIM_Base_Stop_IT>
    		return;
 8000a64:	e097      	b.n	8000b96 <HAL_TIM_PeriodElapsedCallback+0x232>
    	}

    	else{

    		if(VitCommandeGauche > 0){
 8000a66:	4b56      	ldr	r3, [pc, #344]	@ (8000bc0 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	dd1d      	ble.n	8000aaa <HAL_TIM_PeriodElapsedCallback+0x146>

			    htim3.Instance -> CCR2 = 0;
 8000a6e:	4b57      	ldr	r3, [pc, #348]	@ (8000bcc <HAL_TIM_PeriodElapsedCallback+0x268>)
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	2200      	movs	r2, #0
 8000a74:	639a      	str	r2, [r3, #56]	@ 0x38
			    htim3.Instance -> CCR1 = htim3.Instance -> CCR1 + ((VitCommandeGauche - vitesseG)/MAX_VIT_REEL * ARRTIM7);
 8000a76:	4b55      	ldr	r3, [pc, #340]	@ (8000bcc <HAL_TIM_PeriodElapsedCallback+0x268>)
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000a7c:	4b50      	ldr	r3, [pc, #320]	@ (8000bc0 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	494c      	ldr	r1, [pc, #304]	@ (8000bb4 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8000a82:	8809      	ldrh	r1, [r1, #0]
 8000a84:	b289      	uxth	r1, r1
 8000a86:	1a5b      	subs	r3, r3, r1
 8000a88:	4951      	ldr	r1, [pc, #324]	@ (8000bd0 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8000a8a:	fb81 0103 	smull	r0, r1, r1, r3
 8000a8e:	4419      	add	r1, r3
 8000a90:	11c9      	asrs	r1, r1, #7
 8000a92:	17db      	asrs	r3, r3, #31
 8000a94:	1acb      	subs	r3, r1, r3
 8000a96:	f240 11f3 	movw	r1, #499	@ 0x1f3
 8000a9a:	fb01 f303 	mul.w	r3, r1, r3
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	4b4a      	ldr	r3, [pc, #296]	@ (8000bcc <HAL_TIM_PeriodElapsedCallback+0x268>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	440a      	add	r2, r1
 8000aa6:	635a      	str	r2, [r3, #52]	@ 0x34
 8000aa8:	e029      	b.n	8000afe <HAL_TIM_PeriodElapsedCallback+0x19a>

    		}

    		else if(VitCommandeGauche < 0){
 8000aaa:	4b45      	ldr	r3, [pc, #276]	@ (8000bc0 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	da1d      	bge.n	8000aee <HAL_TIM_PeriodElapsedCallback+0x18a>

    			htim3.Instance -> CCR1 = 0;
 8000ab2:	4b46      	ldr	r3, [pc, #280]	@ (8000bcc <HAL_TIM_PeriodElapsedCallback+0x268>)
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	635a      	str	r2, [r3, #52]	@ 0x34
    			htim3.Instance -> CCR2 = htim3.Instance -> CCR2 - ((VitCommandeGauche - vitesseG)/MAX_VIT_REEL * ARRTIM7);
 8000aba:	4b44      	ldr	r3, [pc, #272]	@ (8000bcc <HAL_TIM_PeriodElapsedCallback+0x268>)
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000ac0:	4b3f      	ldr	r3, [pc, #252]	@ (8000bc0 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	493b      	ldr	r1, [pc, #236]	@ (8000bb4 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8000ac6:	8809      	ldrh	r1, [r1, #0]
 8000ac8:	b289      	uxth	r1, r1
 8000aca:	1a5b      	subs	r3, r3, r1
 8000acc:	4940      	ldr	r1, [pc, #256]	@ (8000bd0 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8000ace:	fb81 0103 	smull	r0, r1, r1, r3
 8000ad2:	4419      	add	r1, r3
 8000ad4:	11c9      	asrs	r1, r1, #7
 8000ad6:	17db      	asrs	r3, r3, #31
 8000ad8:	1acb      	subs	r3, r1, r3
 8000ada:	f240 11f3 	movw	r1, #499	@ 0x1f3
 8000ade:	fb01 f303 	mul.w	r3, r1, r3
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	4b39      	ldr	r3, [pc, #228]	@ (8000bcc <HAL_TIM_PeriodElapsedCallback+0x268>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	1a52      	subs	r2, r2, r1
 8000aea:	639a      	str	r2, [r3, #56]	@ 0x38
 8000aec:	e007      	b.n	8000afe <HAL_TIM_PeriodElapsedCallback+0x19a>

    		}

    		else{
    			htim3.Instance -> CCR1 = 0;
 8000aee:	4b37      	ldr	r3, [pc, #220]	@ (8000bcc <HAL_TIM_PeriodElapsedCallback+0x268>)
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	2200      	movs	r2, #0
 8000af4:	635a      	str	r2, [r3, #52]	@ 0x34
    			htim3.Instance -> CCR2 = 0;
 8000af6:	4b35      	ldr	r3, [pc, #212]	@ (8000bcc <HAL_TIM_PeriodElapsedCallback+0x268>)
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	2200      	movs	r2, #0
 8000afc:	639a      	str	r2, [r3, #56]	@ 0x38
    		}

    		if(VitCommandeDroite > 0){
 8000afe:	4b31      	ldr	r3, [pc, #196]	@ (8000bc4 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	dd1d      	ble.n	8000b42 <HAL_TIM_PeriodElapsedCallback+0x1de>

    			htim3.Instance -> CCR4 = 0;
 8000b06:	4b31      	ldr	r3, [pc, #196]	@ (8000bcc <HAL_TIM_PeriodElapsedCallback+0x268>)
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	641a      	str	r2, [r3, #64]	@ 0x40
    			htim3.Instance -> CCR3 = htim3.Instance -> CCR3 + ((VitCommandeDroite - vitesseD)/MAX_VIT_REEL * ARRTIM7);
 8000b0e:	4b2f      	ldr	r3, [pc, #188]	@ (8000bcc <HAL_TIM_PeriodElapsedCallback+0x268>)
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000b14:	4b2b      	ldr	r3, [pc, #172]	@ (8000bc4 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	4924      	ldr	r1, [pc, #144]	@ (8000bac <HAL_TIM_PeriodElapsedCallback+0x248>)
 8000b1a:	8809      	ldrh	r1, [r1, #0]
 8000b1c:	b289      	uxth	r1, r1
 8000b1e:	1a5b      	subs	r3, r3, r1
 8000b20:	492b      	ldr	r1, [pc, #172]	@ (8000bd0 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8000b22:	fb81 0103 	smull	r0, r1, r1, r3
 8000b26:	4419      	add	r1, r3
 8000b28:	11c9      	asrs	r1, r1, #7
 8000b2a:	17db      	asrs	r3, r3, #31
 8000b2c:	1acb      	subs	r3, r1, r3
 8000b2e:	f240 11f3 	movw	r1, #499	@ 0x1f3
 8000b32:	fb01 f303 	mul.w	r3, r1, r3
 8000b36:	4619      	mov	r1, r3
 8000b38:	4b24      	ldr	r3, [pc, #144]	@ (8000bcc <HAL_TIM_PeriodElapsedCallback+0x268>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	440a      	add	r2, r1
 8000b3e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000b40:	e029      	b.n	8000b96 <HAL_TIM_PeriodElapsedCallback+0x232>


    		}

    		else if(VitCommandeDroite < 0){
 8000b42:	4b20      	ldr	r3, [pc, #128]	@ (8000bc4 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	da1d      	bge.n	8000b86 <HAL_TIM_PeriodElapsedCallback+0x222>


    			htim3.Instance -> CCR3 = 0;
 8000b4a:	4b20      	ldr	r3, [pc, #128]	@ (8000bcc <HAL_TIM_PeriodElapsedCallback+0x268>)
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	2200      	movs	r2, #0
 8000b50:	63da      	str	r2, [r3, #60]	@ 0x3c
    			htim3.Instance -> CCR4 = htim3.Instance -> CCR4 - ((VitCommandeDroite - vitesseD)/MAX_VIT_REEL * ARRTIM7);
 8000b52:	4b1e      	ldr	r3, [pc, #120]	@ (8000bcc <HAL_TIM_PeriodElapsedCallback+0x268>)
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000b58:	4b1a      	ldr	r3, [pc, #104]	@ (8000bc4 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	4913      	ldr	r1, [pc, #76]	@ (8000bac <HAL_TIM_PeriodElapsedCallback+0x248>)
 8000b5e:	8809      	ldrh	r1, [r1, #0]
 8000b60:	b289      	uxth	r1, r1
 8000b62:	1a5b      	subs	r3, r3, r1
 8000b64:	491a      	ldr	r1, [pc, #104]	@ (8000bd0 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8000b66:	fb81 0103 	smull	r0, r1, r1, r3
 8000b6a:	4419      	add	r1, r3
 8000b6c:	11c9      	asrs	r1, r1, #7
 8000b6e:	17db      	asrs	r3, r3, #31
 8000b70:	1acb      	subs	r3, r1, r3
 8000b72:	f240 11f3 	movw	r1, #499	@ 0x1f3
 8000b76:	fb01 f303 	mul.w	r3, r1, r3
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	4b13      	ldr	r3, [pc, #76]	@ (8000bcc <HAL_TIM_PeriodElapsedCallback+0x268>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	1a52      	subs	r2, r2, r1
 8000b82:	641a      	str	r2, [r3, #64]	@ 0x40
 8000b84:	e007      	b.n	8000b96 <HAL_TIM_PeriodElapsedCallback+0x232>

    		}

    		else {
    			htim3.Instance -> CCR3 = 0;
 8000b86:	4b11      	ldr	r3, [pc, #68]	@ (8000bcc <HAL_TIM_PeriodElapsedCallback+0x268>)
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	63da      	str	r2, [r3, #60]	@ 0x3c
    			htim3.Instance -> CCR4 = 0;
 8000b8e:	4b0f      	ldr	r3, [pc, #60]	@ (8000bcc <HAL_TIM_PeriodElapsedCallback+0x268>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	2200      	movs	r2, #0
 8000b94:	641a      	str	r2, [r3, #64]	@ 0x40
    		}
    	}

    }
}
 8000b96:	3708      	adds	r7, #8
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	40001000 	.word	0x40001000
 8000ba0:	20000098 	.word	0x20000098
 8000ba4:	dd67c8a7 	.word	0xdd67c8a7
 8000ba8:	20000000 	.word	0x20000000
 8000bac:	2000009c 	.word	0x2000009c
 8000bb0:	2000009a 	.word	0x2000009a
 8000bb4:	2000009e 	.word	0x2000009e
 8000bb8:	200000a8 	.word	0x200000a8
 8000bbc:	40001400 	.word	0x40001400
 8000bc0:	200000a0 	.word	0x200000a0
 8000bc4:	200000a4 	.word	0x200000a4
 8000bc8:	200001e0 	.word	0x200001e0
 8000bcc:	20000108 	.word	0x20000108
 8000bd0:	91a2b3c5 	.word	0x91a2b3c5

08000bd4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bd8:	b672      	cpsid	i
}
 8000bda:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bdc:	bf00      	nop
 8000bde:	e7fd      	b.n	8000bdc <Error_Handler+0x8>

08000be0 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8000be4:	4b18      	ldr	r3, [pc, #96]	@ (8000c48 <MX_SPI2_Init+0x68>)
 8000be6:	4a19      	ldr	r2, [pc, #100]	@ (8000c4c <MX_SPI2_Init+0x6c>)
 8000be8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000bea:	4b17      	ldr	r3, [pc, #92]	@ (8000c48 <MX_SPI2_Init+0x68>)
 8000bec:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000bf0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_1LINE;
 8000bf2:	4b15      	ldr	r3, [pc, #84]	@ (8000c48 <MX_SPI2_Init+0x68>)
 8000bf4:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000bf8:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000bfa:	4b13      	ldr	r3, [pc, #76]	@ (8000c48 <MX_SPI2_Init+0x68>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c00:	4b11      	ldr	r3, [pc, #68]	@ (8000c48 <MX_SPI2_Init+0x68>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c06:	4b10      	ldr	r3, [pc, #64]	@ (8000c48 <MX_SPI2_Init+0x68>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000c0c:	4b0e      	ldr	r3, [pc, #56]	@ (8000c48 <MX_SPI2_Init+0x68>)
 8000c0e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000c12:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000c14:	4b0c      	ldr	r3, [pc, #48]	@ (8000c48 <MX_SPI2_Init+0x68>)
 8000c16:	2208      	movs	r2, #8
 8000c18:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c1a:	4b0b      	ldr	r3, [pc, #44]	@ (8000c48 <MX_SPI2_Init+0x68>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c20:	4b09      	ldr	r3, [pc, #36]	@ (8000c48 <MX_SPI2_Init+0x68>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c26:	4b08      	ldr	r3, [pc, #32]	@ (8000c48 <MX_SPI2_Init+0x68>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000c2c:	4b06      	ldr	r3, [pc, #24]	@ (8000c48 <MX_SPI2_Init+0x68>)
 8000c2e:	220a      	movs	r2, #10
 8000c30:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000c32:	4805      	ldr	r0, [pc, #20]	@ (8000c48 <MX_SPI2_Init+0x68>)
 8000c34:	f001 fffa 	bl	8002c2c <HAL_SPI_Init>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d001      	beq.n	8000c42 <MX_SPI2_Init+0x62>
  {
    Error_Handler();
 8000c3e:	f7ff ffc9 	bl	8000bd4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000c42:	bf00      	nop
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	200000ac 	.word	0x200000ac
 8000c4c:	40003800 	.word	0x40003800

08000c50 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b08a      	sub	sp, #40	@ 0x28
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c58:	f107 0314 	add.w	r3, r7, #20
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	601a      	str	r2, [r3, #0]
 8000c60:	605a      	str	r2, [r3, #4]
 8000c62:	609a      	str	r2, [r3, #8]
 8000c64:	60da      	str	r2, [r3, #12]
 8000c66:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	4a28      	ldr	r2, [pc, #160]	@ (8000d10 <HAL_SPI_MspInit+0xc0>)
 8000c6e:	4293      	cmp	r3, r2
 8000c70:	d14a      	bne.n	8000d08 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000c72:	2300      	movs	r3, #0
 8000c74:	613b      	str	r3, [r7, #16]
 8000c76:	4b27      	ldr	r3, [pc, #156]	@ (8000d14 <HAL_SPI_MspInit+0xc4>)
 8000c78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c7a:	4a26      	ldr	r2, [pc, #152]	@ (8000d14 <HAL_SPI_MspInit+0xc4>)
 8000c7c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c80:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c82:	4b24      	ldr	r3, [pc, #144]	@ (8000d14 <HAL_SPI_MspInit+0xc4>)
 8000c84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c86:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c8a:	613b      	str	r3, [r7, #16]
 8000c8c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c8e:	2300      	movs	r3, #0
 8000c90:	60fb      	str	r3, [r7, #12]
 8000c92:	4b20      	ldr	r3, [pc, #128]	@ (8000d14 <HAL_SPI_MspInit+0xc4>)
 8000c94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c96:	4a1f      	ldr	r2, [pc, #124]	@ (8000d14 <HAL_SPI_MspInit+0xc4>)
 8000c98:	f043 0304 	orr.w	r3, r3, #4
 8000c9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c9e:	4b1d      	ldr	r3, [pc, #116]	@ (8000d14 <HAL_SPI_MspInit+0xc4>)
 8000ca0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ca2:	f003 0304 	and.w	r3, r3, #4
 8000ca6:	60fb      	str	r3, [r7, #12]
 8000ca8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000caa:	2300      	movs	r3, #0
 8000cac:	60bb      	str	r3, [r7, #8]
 8000cae:	4b19      	ldr	r3, [pc, #100]	@ (8000d14 <HAL_SPI_MspInit+0xc4>)
 8000cb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cb2:	4a18      	ldr	r2, [pc, #96]	@ (8000d14 <HAL_SPI_MspInit+0xc4>)
 8000cb4:	f043 0302 	orr.w	r3, r3, #2
 8000cb8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cba:	4b16      	ldr	r3, [pc, #88]	@ (8000d14 <HAL_SPI_MspInit+0xc4>)
 8000cbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cbe:	f003 0302 	and.w	r3, r3, #2
 8000cc2:	60bb      	str	r3, [r7, #8]
 8000cc4:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC1     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000cc6:	2302      	movs	r3, #2
 8000cc8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cca:	2302      	movs	r3, #2
 8000ccc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cd2:	2303      	movs	r3, #3
 8000cd4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 8000cd6:	2307      	movs	r3, #7
 8000cd8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cda:	f107 0314 	add.w	r3, r7, #20
 8000cde:	4619      	mov	r1, r3
 8000ce0:	480d      	ldr	r0, [pc, #52]	@ (8000d18 <HAL_SPI_MspInit+0xc8>)
 8000ce2:	f000 ffdd 	bl	8001ca0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000ce6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000cea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cec:	2302      	movs	r3, #2
 8000cee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cf4:	2303      	movs	r3, #3
 8000cf6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000cf8:	2305      	movs	r3, #5
 8000cfa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cfc:	f107 0314 	add.w	r3, r7, #20
 8000d00:	4619      	mov	r1, r3
 8000d02:	4806      	ldr	r0, [pc, #24]	@ (8000d1c <HAL_SPI_MspInit+0xcc>)
 8000d04:	f000 ffcc 	bl	8001ca0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000d08:	bf00      	nop
 8000d0a:	3728      	adds	r7, #40	@ 0x28
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}
 8000d10:	40003800 	.word	0x40003800
 8000d14:	40023800 	.word	0x40023800
 8000d18:	40020800 	.word	0x40020800
 8000d1c:	40020400 	.word	0x40020400

08000d20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b082      	sub	sp, #8
 8000d24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d26:	2300      	movs	r3, #0
 8000d28:	607b      	str	r3, [r7, #4]
 8000d2a:	4b10      	ldr	r3, [pc, #64]	@ (8000d6c <HAL_MspInit+0x4c>)
 8000d2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d2e:	4a0f      	ldr	r2, [pc, #60]	@ (8000d6c <HAL_MspInit+0x4c>)
 8000d30:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d34:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d36:	4b0d      	ldr	r3, [pc, #52]	@ (8000d6c <HAL_MspInit+0x4c>)
 8000d38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d3a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d3e:	607b      	str	r3, [r7, #4]
 8000d40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d42:	2300      	movs	r3, #0
 8000d44:	603b      	str	r3, [r7, #0]
 8000d46:	4b09      	ldr	r3, [pc, #36]	@ (8000d6c <HAL_MspInit+0x4c>)
 8000d48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d4a:	4a08      	ldr	r2, [pc, #32]	@ (8000d6c <HAL_MspInit+0x4c>)
 8000d4c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d50:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d52:	4b06      	ldr	r3, [pc, #24]	@ (8000d6c <HAL_MspInit+0x4c>)
 8000d54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d5a:	603b      	str	r3, [r7, #0]
 8000d5c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000d5e:	2007      	movs	r0, #7
 8000d60:	f000 ff5c 	bl	8001c1c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d64:	bf00      	nop
 8000d66:	3708      	adds	r7, #8
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	40023800 	.word	0x40023800

08000d70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d74:	bf00      	nop
 8000d76:	e7fd      	b.n	8000d74 <NMI_Handler+0x4>

08000d78 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d7c:	bf00      	nop
 8000d7e:	e7fd      	b.n	8000d7c <HardFault_Handler+0x4>

08000d80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d84:	bf00      	nop
 8000d86:	e7fd      	b.n	8000d84 <MemManage_Handler+0x4>

08000d88 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d8c:	bf00      	nop
 8000d8e:	e7fd      	b.n	8000d8c <BusFault_Handler+0x4>

08000d90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d94:	bf00      	nop
 8000d96:	e7fd      	b.n	8000d94 <UsageFault_Handler+0x4>

08000d98 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d9c:	bf00      	nop
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da4:	4770      	bx	lr

08000da6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000da6:	b480      	push	{r7}
 8000da8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000daa:	bf00      	nop
 8000dac:	46bd      	mov	sp, r7
 8000dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db2:	4770      	bx	lr

08000db4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000db8:	bf00      	nop
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr

08000dc2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dc2:	b580      	push	{r7, lr}
 8000dc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dc6:	f000 fe15 	bl	80019f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dca:	bf00      	nop
 8000dcc:	bd80      	pop	{r7, pc}

08000dce <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000dce:	b580      	push	{r7, lr}
 8000dd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Encodeur_G_A_Pin);
 8000dd2:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8000dd6:	f001 f929 	bl	800202c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Encodeur_D_A_Pin);
 8000dda:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000dde:	f001 f925 	bl	800202c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000de2:	bf00      	nop
 8000de4:	bd80      	pop	{r7, pc}
	...

08000de8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000dec:	4802      	ldr	r0, [pc, #8]	@ (8000df8 <TIM6_DAC_IRQHandler+0x10>)
 8000dee:	f002 fbd7 	bl	80035a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000df2:	bf00      	nop
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	20000198 	.word	0x20000198

08000dfc <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8000e00:	4802      	ldr	r0, [pc, #8]	@ (8000e0c <TIM7_IRQHandler+0x10>)
 8000e02:	f002 fbcd 	bl	80035a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8000e06:	bf00      	nop
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	200001e0 	.word	0x200001e0

08000e10 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b086      	sub	sp, #24
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	60f8      	str	r0, [r7, #12]
 8000e18:	60b9      	str	r1, [r7, #8]
 8000e1a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	617b      	str	r3, [r7, #20]
 8000e20:	e00a      	b.n	8000e38 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000e22:	f3af 8000 	nop.w
 8000e26:	4601      	mov	r1, r0
 8000e28:	68bb      	ldr	r3, [r7, #8]
 8000e2a:	1c5a      	adds	r2, r3, #1
 8000e2c:	60ba      	str	r2, [r7, #8]
 8000e2e:	b2ca      	uxtb	r2, r1
 8000e30:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e32:	697b      	ldr	r3, [r7, #20]
 8000e34:	3301      	adds	r3, #1
 8000e36:	617b      	str	r3, [r7, #20]
 8000e38:	697a      	ldr	r2, [r7, #20]
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	429a      	cmp	r2, r3
 8000e3e:	dbf0      	blt.n	8000e22 <_read+0x12>
  }

  return len;
 8000e40:	687b      	ldr	r3, [r7, #4]
}
 8000e42:	4618      	mov	r0, r3
 8000e44:	3718      	adds	r7, #24
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}

08000e4a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000e4a:	b580      	push	{r7, lr}
 8000e4c:	b086      	sub	sp, #24
 8000e4e:	af00      	add	r7, sp, #0
 8000e50:	60f8      	str	r0, [r7, #12]
 8000e52:	60b9      	str	r1, [r7, #8]
 8000e54:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e56:	2300      	movs	r3, #0
 8000e58:	617b      	str	r3, [r7, #20]
 8000e5a:	e009      	b.n	8000e70 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000e5c:	68bb      	ldr	r3, [r7, #8]
 8000e5e:	1c5a      	adds	r2, r3, #1
 8000e60:	60ba      	str	r2, [r7, #8]
 8000e62:	781b      	ldrb	r3, [r3, #0]
 8000e64:	4618      	mov	r0, r3
 8000e66:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e6a:	697b      	ldr	r3, [r7, #20]
 8000e6c:	3301      	adds	r3, #1
 8000e6e:	617b      	str	r3, [r7, #20]
 8000e70:	697a      	ldr	r2, [r7, #20]
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	429a      	cmp	r2, r3
 8000e76:	dbf1      	blt.n	8000e5c <_write+0x12>
  }
  return len;
 8000e78:	687b      	ldr	r3, [r7, #4]
}
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	3718      	adds	r7, #24
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}

08000e82 <_close>:

int _close(int file)
{
 8000e82:	b480      	push	{r7}
 8000e84:	b083      	sub	sp, #12
 8000e86:	af00      	add	r7, sp, #0
 8000e88:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000e8a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e8e:	4618      	mov	r0, r3
 8000e90:	370c      	adds	r7, #12
 8000e92:	46bd      	mov	sp, r7
 8000e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e98:	4770      	bx	lr

08000e9a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e9a:	b480      	push	{r7}
 8000e9c:	b083      	sub	sp, #12
 8000e9e:	af00      	add	r7, sp, #0
 8000ea0:	6078      	str	r0, [r7, #4]
 8000ea2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000eaa:	605a      	str	r2, [r3, #4]
  return 0;
 8000eac:	2300      	movs	r3, #0
}
 8000eae:	4618      	mov	r0, r3
 8000eb0:	370c      	adds	r7, #12
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb8:	4770      	bx	lr

08000eba <_isatty>:

int _isatty(int file)
{
 8000eba:	b480      	push	{r7}
 8000ebc:	b083      	sub	sp, #12
 8000ebe:	af00      	add	r7, sp, #0
 8000ec0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000ec2:	2301      	movs	r3, #1
}
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	370c      	adds	r7, #12
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ece:	4770      	bx	lr

08000ed0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	b085      	sub	sp, #20
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	60f8      	str	r0, [r7, #12]
 8000ed8:	60b9      	str	r1, [r7, #8]
 8000eda:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000edc:	2300      	movs	r3, #0
}
 8000ede:	4618      	mov	r0, r3
 8000ee0:	3714      	adds	r7, #20
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee8:	4770      	bx	lr
	...

08000eec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b086      	sub	sp, #24
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ef4:	4a14      	ldr	r2, [pc, #80]	@ (8000f48 <_sbrk+0x5c>)
 8000ef6:	4b15      	ldr	r3, [pc, #84]	@ (8000f4c <_sbrk+0x60>)
 8000ef8:	1ad3      	subs	r3, r2, r3
 8000efa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000efc:	697b      	ldr	r3, [r7, #20]
 8000efe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f00:	4b13      	ldr	r3, [pc, #76]	@ (8000f50 <_sbrk+0x64>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d102      	bne.n	8000f0e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f08:	4b11      	ldr	r3, [pc, #68]	@ (8000f50 <_sbrk+0x64>)
 8000f0a:	4a12      	ldr	r2, [pc, #72]	@ (8000f54 <_sbrk+0x68>)
 8000f0c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f0e:	4b10      	ldr	r3, [pc, #64]	@ (8000f50 <_sbrk+0x64>)
 8000f10:	681a      	ldr	r2, [r3, #0]
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	4413      	add	r3, r2
 8000f16:	693a      	ldr	r2, [r7, #16]
 8000f18:	429a      	cmp	r2, r3
 8000f1a:	d207      	bcs.n	8000f2c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f1c:	f004 fc66 	bl	80057ec <__errno>
 8000f20:	4603      	mov	r3, r0
 8000f22:	220c      	movs	r2, #12
 8000f24:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f26:	f04f 33ff 	mov.w	r3, #4294967295
 8000f2a:	e009      	b.n	8000f40 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f2c:	4b08      	ldr	r3, [pc, #32]	@ (8000f50 <_sbrk+0x64>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f32:	4b07      	ldr	r3, [pc, #28]	@ (8000f50 <_sbrk+0x64>)
 8000f34:	681a      	ldr	r2, [r3, #0]
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	4413      	add	r3, r2
 8000f3a:	4a05      	ldr	r2, [pc, #20]	@ (8000f50 <_sbrk+0x64>)
 8000f3c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f3e:	68fb      	ldr	r3, [r7, #12]
}
 8000f40:	4618      	mov	r0, r3
 8000f42:	3718      	adds	r7, #24
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}
 8000f48:	20020000 	.word	0x20020000
 8000f4c:	00000400 	.word	0x00000400
 8000f50:	20000104 	.word	0x20000104
 8000f54:	200003e0 	.word	0x200003e0

08000f58 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f5c:	4b06      	ldr	r3, [pc, #24]	@ (8000f78 <SystemInit+0x20>)
 8000f5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f62:	4a05      	ldr	r2, [pc, #20]	@ (8000f78 <SystemInit+0x20>)
 8000f64:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f68:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f6c:	bf00      	nop
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop
 8000f78:	e000ed00 	.word	0xe000ed00

08000f7c <MX_TIM3_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim7;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b08e      	sub	sp, #56	@ 0x38
 8000f80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f82:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000f86:	2200      	movs	r2, #0
 8000f88:	601a      	str	r2, [r3, #0]
 8000f8a:	605a      	str	r2, [r3, #4]
 8000f8c:	609a      	str	r2, [r3, #8]
 8000f8e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f90:	f107 0320 	add.w	r3, r7, #32
 8000f94:	2200      	movs	r2, #0
 8000f96:	601a      	str	r2, [r3, #0]
 8000f98:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f9a:	1d3b      	adds	r3, r7, #4
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	601a      	str	r2, [r3, #0]
 8000fa0:	605a      	str	r2, [r3, #4]
 8000fa2:	609a      	str	r2, [r3, #8]
 8000fa4:	60da      	str	r2, [r3, #12]
 8000fa6:	611a      	str	r2, [r3, #16]
 8000fa8:	615a      	str	r2, [r3, #20]
 8000faa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000fac:	4b3d      	ldr	r3, [pc, #244]	@ (80010a4 <MX_TIM3_Init+0x128>)
 8000fae:	4a3e      	ldr	r2, [pc, #248]	@ (80010a8 <MX_TIM3_Init+0x12c>)
 8000fb0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84-1;
 8000fb2:	4b3c      	ldr	r3, [pc, #240]	@ (80010a4 <MX_TIM3_Init+0x128>)
 8000fb4:	2253      	movs	r2, #83	@ 0x53
 8000fb6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fb8:	4b3a      	ldr	r3, [pc, #232]	@ (80010a4 <MX_TIM3_Init+0x128>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 500-1;
 8000fbe:	4b39      	ldr	r3, [pc, #228]	@ (80010a4 <MX_TIM3_Init+0x128>)
 8000fc0:	f240 12f3 	movw	r2, #499	@ 0x1f3
 8000fc4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fc6:	4b37      	ldr	r3, [pc, #220]	@ (80010a4 <MX_TIM3_Init+0x128>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fcc:	4b35      	ldr	r3, [pc, #212]	@ (80010a4 <MX_TIM3_Init+0x128>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000fd2:	4834      	ldr	r0, [pc, #208]	@ (80010a4 <MX_TIM3_Init+0x128>)
 8000fd4:	f002 f8d4 	bl	8003180 <HAL_TIM_Base_Init>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d001      	beq.n	8000fe2 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000fde:	f7ff fdf9 	bl	8000bd4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fe2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000fe6:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000fe8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000fec:	4619      	mov	r1, r3
 8000fee:	482d      	ldr	r0, [pc, #180]	@ (80010a4 <MX_TIM3_Init+0x128>)
 8000ff0:	f002 fc88 	bl	8003904 <HAL_TIM_ConfigClockSource>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d001      	beq.n	8000ffe <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000ffa:	f7ff fdeb 	bl	8000bd4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000ffe:	4829      	ldr	r0, [pc, #164]	@ (80010a4 <MX_TIM3_Init+0x128>)
 8001000:	f002 f9ad 	bl	800335e <HAL_TIM_PWM_Init>
 8001004:	4603      	mov	r3, r0
 8001006:	2b00      	cmp	r3, #0
 8001008:	d001      	beq.n	800100e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800100a:	f7ff fde3 	bl	8000bd4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800100e:	2300      	movs	r3, #0
 8001010:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001012:	2300      	movs	r3, #0
 8001014:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001016:	f107 0320 	add.w	r3, r7, #32
 800101a:	4619      	mov	r1, r3
 800101c:	4821      	ldr	r0, [pc, #132]	@ (80010a4 <MX_TIM3_Init+0x128>)
 800101e:	f003 f87d 	bl	800411c <HAL_TIMEx_MasterConfigSynchronization>
 8001022:	4603      	mov	r3, r0
 8001024:	2b00      	cmp	r3, #0
 8001026:	d001      	beq.n	800102c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001028:	f7ff fdd4 	bl	8000bd4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800102c:	2360      	movs	r3, #96	@ 0x60
 800102e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001030:	2300      	movs	r3, #0
 8001032:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001034:	2300      	movs	r3, #0
 8001036:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001038:	2300      	movs	r3, #0
 800103a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800103c:	1d3b      	adds	r3, r7, #4
 800103e:	2200      	movs	r2, #0
 8001040:	4619      	mov	r1, r3
 8001042:	4818      	ldr	r0, [pc, #96]	@ (80010a4 <MX_TIM3_Init+0x128>)
 8001044:	f002 fb9c 	bl	8003780 <HAL_TIM_PWM_ConfigChannel>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d001      	beq.n	8001052 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800104e:	f7ff fdc1 	bl	8000bd4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001052:	1d3b      	adds	r3, r7, #4
 8001054:	2204      	movs	r2, #4
 8001056:	4619      	mov	r1, r3
 8001058:	4812      	ldr	r0, [pc, #72]	@ (80010a4 <MX_TIM3_Init+0x128>)
 800105a:	f002 fb91 	bl	8003780 <HAL_TIM_PWM_ConfigChannel>
 800105e:	4603      	mov	r3, r0
 8001060:	2b00      	cmp	r3, #0
 8001062:	d001      	beq.n	8001068 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8001064:	f7ff fdb6 	bl	8000bd4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001068:	1d3b      	adds	r3, r7, #4
 800106a:	2208      	movs	r2, #8
 800106c:	4619      	mov	r1, r3
 800106e:	480d      	ldr	r0, [pc, #52]	@ (80010a4 <MX_TIM3_Init+0x128>)
 8001070:	f002 fb86 	bl	8003780 <HAL_TIM_PWM_ConfigChannel>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d001      	beq.n	800107e <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 800107a:	f7ff fdab 	bl	8000bd4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800107e:	1d3b      	adds	r3, r7, #4
 8001080:	220c      	movs	r2, #12
 8001082:	4619      	mov	r1, r3
 8001084:	4807      	ldr	r0, [pc, #28]	@ (80010a4 <MX_TIM3_Init+0x128>)
 8001086:	f002 fb7b 	bl	8003780 <HAL_TIM_PWM_ConfigChannel>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	d001      	beq.n	8001094 <MX_TIM3_Init+0x118>
  {
    Error_Handler();
 8001090:	f7ff fda0 	bl	8000bd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001094:	4803      	ldr	r0, [pc, #12]	@ (80010a4 <MX_TIM3_Init+0x128>)
 8001096:	f000 f95f 	bl	8001358 <HAL_TIM_MspPostInit>

}
 800109a:	bf00      	nop
 800109c:	3738      	adds	r7, #56	@ 0x38
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	20000108 	.word	0x20000108
 80010a8:	40000400 	.word	0x40000400

080010ac <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b08e      	sub	sp, #56	@ 0x38
 80010b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010b2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80010b6:	2200      	movs	r2, #0
 80010b8:	601a      	str	r2, [r3, #0]
 80010ba:	605a      	str	r2, [r3, #4]
 80010bc:	609a      	str	r2, [r3, #8]
 80010be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010c0:	f107 0320 	add.w	r3, r7, #32
 80010c4:	2200      	movs	r2, #0
 80010c6:	601a      	str	r2, [r3, #0]
 80010c8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80010ca:	1d3b      	adds	r3, r7, #4
 80010cc:	2200      	movs	r2, #0
 80010ce:	601a      	str	r2, [r3, #0]
 80010d0:	605a      	str	r2, [r3, #4]
 80010d2:	609a      	str	r2, [r3, #8]
 80010d4:	60da      	str	r2, [r3, #12]
 80010d6:	611a      	str	r2, [r3, #16]
 80010d8:	615a      	str	r2, [r3, #20]
 80010da:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80010dc:	4b2d      	ldr	r3, [pc, #180]	@ (8001194 <MX_TIM4_Init+0xe8>)
 80010de:	4a2e      	ldr	r2, [pc, #184]	@ (8001198 <MX_TIM4_Init+0xec>)
 80010e0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 300-1;
 80010e2:	4b2c      	ldr	r3, [pc, #176]	@ (8001194 <MX_TIM4_Init+0xe8>)
 80010e4:	f240 122b 	movw	r2, #299	@ 0x12b
 80010e8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010ea:	4b2a      	ldr	r3, [pc, #168]	@ (8001194 <MX_TIM4_Init+0xe8>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000-1;
 80010f0:	4b28      	ldr	r3, [pc, #160]	@ (8001194 <MX_TIM4_Init+0xe8>)
 80010f2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80010f6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010f8:	4b26      	ldr	r3, [pc, #152]	@ (8001194 <MX_TIM4_Init+0xe8>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010fe:	4b25      	ldr	r3, [pc, #148]	@ (8001194 <MX_TIM4_Init+0xe8>)
 8001100:	2200      	movs	r2, #0
 8001102:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001104:	4823      	ldr	r0, [pc, #140]	@ (8001194 <MX_TIM4_Init+0xe8>)
 8001106:	f002 f83b 	bl	8003180 <HAL_TIM_Base_Init>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d001      	beq.n	8001114 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8001110:	f7ff fd60 	bl	8000bd4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001114:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001118:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800111a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800111e:	4619      	mov	r1, r3
 8001120:	481c      	ldr	r0, [pc, #112]	@ (8001194 <MX_TIM4_Init+0xe8>)
 8001122:	f002 fbef 	bl	8003904 <HAL_TIM_ConfigClockSource>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d001      	beq.n	8001130 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 800112c:	f7ff fd52 	bl	8000bd4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001130:	4818      	ldr	r0, [pc, #96]	@ (8001194 <MX_TIM4_Init+0xe8>)
 8001132:	f002 f914 	bl	800335e <HAL_TIM_PWM_Init>
 8001136:	4603      	mov	r3, r0
 8001138:	2b00      	cmp	r3, #0
 800113a:	d001      	beq.n	8001140 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 800113c:	f7ff fd4a 	bl	8000bd4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001140:	2300      	movs	r3, #0
 8001142:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001144:	2300      	movs	r3, #0
 8001146:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001148:	f107 0320 	add.w	r3, r7, #32
 800114c:	4619      	mov	r1, r3
 800114e:	4811      	ldr	r0, [pc, #68]	@ (8001194 <MX_TIM4_Init+0xe8>)
 8001150:	f002 ffe4 	bl	800411c <HAL_TIMEx_MasterConfigSynchronization>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d001      	beq.n	800115e <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 800115a:	f7ff fd3b 	bl	8000bd4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800115e:	2360      	movs	r3, #96	@ 0x60
 8001160:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001162:	2300      	movs	r3, #0
 8001164:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001166:	2300      	movs	r3, #0
 8001168:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800116a:	2300      	movs	r3, #0
 800116c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800116e:	1d3b      	adds	r3, r7, #4
 8001170:	2204      	movs	r2, #4
 8001172:	4619      	mov	r1, r3
 8001174:	4807      	ldr	r0, [pc, #28]	@ (8001194 <MX_TIM4_Init+0xe8>)
 8001176:	f002 fb03 	bl	8003780 <HAL_TIM_PWM_ConfigChannel>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	d001      	beq.n	8001184 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8001180:	f7ff fd28 	bl	8000bd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001184:	4803      	ldr	r0, [pc, #12]	@ (8001194 <MX_TIM4_Init+0xe8>)
 8001186:	f000 f8e7 	bl	8001358 <HAL_TIM_MspPostInit>

}
 800118a:	bf00      	nop
 800118c:	3738      	adds	r7, #56	@ 0x38
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	20000150 	.word	0x20000150
 8001198:	40000800 	.word	0x40000800

0800119c <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011a2:	463b      	mov	r3, r7
 80011a4:	2200      	movs	r2, #0
 80011a6:	601a      	str	r2, [r3, #0]
 80011a8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80011aa:	4b15      	ldr	r3, [pc, #84]	@ (8001200 <MX_TIM6_Init+0x64>)
 80011ac:	4a15      	ldr	r2, [pc, #84]	@ (8001204 <MX_TIM6_Init+0x68>)
 80011ae:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 42000-1;
 80011b0:	4b13      	ldr	r3, [pc, #76]	@ (8001200 <MX_TIM6_Init+0x64>)
 80011b2:	f24a 420f 	movw	r2, #41999	@ 0xa40f
 80011b6:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011b8:	4b11      	ldr	r3, [pc, #68]	@ (8001200 <MX_TIM6_Init+0x64>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 200-1;
 80011be:	4b10      	ldr	r3, [pc, #64]	@ (8001200 <MX_TIM6_Init+0x64>)
 80011c0:	22c7      	movs	r2, #199	@ 0xc7
 80011c2:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011c4:	4b0e      	ldr	r3, [pc, #56]	@ (8001200 <MX_TIM6_Init+0x64>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80011ca:	480d      	ldr	r0, [pc, #52]	@ (8001200 <MX_TIM6_Init+0x64>)
 80011cc:	f001 ffd8 	bl	8003180 <HAL_TIM_Base_Init>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d001      	beq.n	80011da <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 80011d6:	f7ff fcfd 	bl	8000bd4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80011da:	2320      	movs	r3, #32
 80011dc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011de:	2300      	movs	r3, #0
 80011e0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80011e2:	463b      	mov	r3, r7
 80011e4:	4619      	mov	r1, r3
 80011e6:	4806      	ldr	r0, [pc, #24]	@ (8001200 <MX_TIM6_Init+0x64>)
 80011e8:	f002 ff98 	bl	800411c <HAL_TIMEx_MasterConfigSynchronization>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d001      	beq.n	80011f6 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 80011f2:	f7ff fcef 	bl	8000bd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80011f6:	bf00      	nop
 80011f8:	3708      	adds	r7, #8
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	20000198 	.word	0x20000198
 8001204:	40001000 	.word	0x40001000

08001208 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b082      	sub	sp, #8
 800120c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800120e:	463b      	mov	r3, r7
 8001210:	2200      	movs	r2, #0
 8001212:	601a      	str	r2, [r3, #0]
 8001214:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001216:	4b15      	ldr	r3, [pc, #84]	@ (800126c <MX_TIM7_Init+0x64>)
 8001218:	4a15      	ldr	r2, [pc, #84]	@ (8001270 <MX_TIM7_Init+0x68>)
 800121a:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 42000-1;
 800121c:	4b13      	ldr	r3, [pc, #76]	@ (800126c <MX_TIM7_Init+0x64>)
 800121e:	f24a 420f 	movw	r2, #41999	@ 0xa40f
 8001222:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001224:	4b11      	ldr	r3, [pc, #68]	@ (800126c <MX_TIM7_Init+0x64>)
 8001226:	2200      	movs	r2, #0
 8001228:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 200-1;
 800122a:	4b10      	ldr	r3, [pc, #64]	@ (800126c <MX_TIM7_Init+0x64>)
 800122c:	22c7      	movs	r2, #199	@ 0xc7
 800122e:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001230:	4b0e      	ldr	r3, [pc, #56]	@ (800126c <MX_TIM7_Init+0x64>)
 8001232:	2200      	movs	r2, #0
 8001234:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001236:	480d      	ldr	r0, [pc, #52]	@ (800126c <MX_TIM7_Init+0x64>)
 8001238:	f001 ffa2 	bl	8003180 <HAL_TIM_Base_Init>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d001      	beq.n	8001246 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8001242:	f7ff fcc7 	bl	8000bd4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001246:	2320      	movs	r3, #32
 8001248:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800124a:	2300      	movs	r3, #0
 800124c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800124e:	463b      	mov	r3, r7
 8001250:	4619      	mov	r1, r3
 8001252:	4806      	ldr	r0, [pc, #24]	@ (800126c <MX_TIM7_Init+0x64>)
 8001254:	f002 ff62 	bl	800411c <HAL_TIMEx_MasterConfigSynchronization>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d001      	beq.n	8001262 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 800125e:	f7ff fcb9 	bl	8000bd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001262:	bf00      	nop
 8001264:	3708      	adds	r7, #8
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	200001e0 	.word	0x200001e0
 8001270:	40001400 	.word	0x40001400

08001274 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b086      	sub	sp, #24
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4a30      	ldr	r2, [pc, #192]	@ (8001344 <HAL_TIM_Base_MspInit+0xd0>)
 8001282:	4293      	cmp	r3, r2
 8001284:	d10e      	bne.n	80012a4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001286:	2300      	movs	r3, #0
 8001288:	617b      	str	r3, [r7, #20]
 800128a:	4b2f      	ldr	r3, [pc, #188]	@ (8001348 <HAL_TIM_Base_MspInit+0xd4>)
 800128c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800128e:	4a2e      	ldr	r2, [pc, #184]	@ (8001348 <HAL_TIM_Base_MspInit+0xd4>)
 8001290:	f043 0302 	orr.w	r3, r3, #2
 8001294:	6413      	str	r3, [r2, #64]	@ 0x40
 8001296:	4b2c      	ldr	r3, [pc, #176]	@ (8001348 <HAL_TIM_Base_MspInit+0xd4>)
 8001298:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800129a:	f003 0302 	and.w	r3, r3, #2
 800129e:	617b      	str	r3, [r7, #20]
 80012a0:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 80012a2:	e04a      	b.n	800133a <HAL_TIM_Base_MspInit+0xc6>
  else if(tim_baseHandle->Instance==TIM4)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4a28      	ldr	r2, [pc, #160]	@ (800134c <HAL_TIM_Base_MspInit+0xd8>)
 80012aa:	4293      	cmp	r3, r2
 80012ac:	d10e      	bne.n	80012cc <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80012ae:	2300      	movs	r3, #0
 80012b0:	613b      	str	r3, [r7, #16]
 80012b2:	4b25      	ldr	r3, [pc, #148]	@ (8001348 <HAL_TIM_Base_MspInit+0xd4>)
 80012b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012b6:	4a24      	ldr	r2, [pc, #144]	@ (8001348 <HAL_TIM_Base_MspInit+0xd4>)
 80012b8:	f043 0304 	orr.w	r3, r3, #4
 80012bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80012be:	4b22      	ldr	r3, [pc, #136]	@ (8001348 <HAL_TIM_Base_MspInit+0xd4>)
 80012c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012c2:	f003 0304 	and.w	r3, r3, #4
 80012c6:	613b      	str	r3, [r7, #16]
 80012c8:	693b      	ldr	r3, [r7, #16]
}
 80012ca:	e036      	b.n	800133a <HAL_TIM_Base_MspInit+0xc6>
  else if(tim_baseHandle->Instance==TIM6)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4a1f      	ldr	r2, [pc, #124]	@ (8001350 <HAL_TIM_Base_MspInit+0xdc>)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d116      	bne.n	8001304 <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80012d6:	2300      	movs	r3, #0
 80012d8:	60fb      	str	r3, [r7, #12]
 80012da:	4b1b      	ldr	r3, [pc, #108]	@ (8001348 <HAL_TIM_Base_MspInit+0xd4>)
 80012dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012de:	4a1a      	ldr	r2, [pc, #104]	@ (8001348 <HAL_TIM_Base_MspInit+0xd4>)
 80012e0:	f043 0310 	orr.w	r3, r3, #16
 80012e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80012e6:	4b18      	ldr	r3, [pc, #96]	@ (8001348 <HAL_TIM_Base_MspInit+0xd4>)
 80012e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012ea:	f003 0310 	and.w	r3, r3, #16
 80012ee:	60fb      	str	r3, [r7, #12]
 80012f0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80012f2:	2200      	movs	r2, #0
 80012f4:	2100      	movs	r1, #0
 80012f6:	2036      	movs	r0, #54	@ 0x36
 80012f8:	f000 fc9b 	bl	8001c32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80012fc:	2036      	movs	r0, #54	@ 0x36
 80012fe:	f000 fcb4 	bl	8001c6a <HAL_NVIC_EnableIRQ>
}
 8001302:	e01a      	b.n	800133a <HAL_TIM_Base_MspInit+0xc6>
  else if(tim_baseHandle->Instance==TIM7)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4a12      	ldr	r2, [pc, #72]	@ (8001354 <HAL_TIM_Base_MspInit+0xe0>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d115      	bne.n	800133a <HAL_TIM_Base_MspInit+0xc6>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800130e:	2300      	movs	r3, #0
 8001310:	60bb      	str	r3, [r7, #8]
 8001312:	4b0d      	ldr	r3, [pc, #52]	@ (8001348 <HAL_TIM_Base_MspInit+0xd4>)
 8001314:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001316:	4a0c      	ldr	r2, [pc, #48]	@ (8001348 <HAL_TIM_Base_MspInit+0xd4>)
 8001318:	f043 0320 	orr.w	r3, r3, #32
 800131c:	6413      	str	r3, [r2, #64]	@ 0x40
 800131e:	4b0a      	ldr	r3, [pc, #40]	@ (8001348 <HAL_TIM_Base_MspInit+0xd4>)
 8001320:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001322:	f003 0320 	and.w	r3, r3, #32
 8001326:	60bb      	str	r3, [r7, #8]
 8001328:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 800132a:	2200      	movs	r2, #0
 800132c:	2100      	movs	r1, #0
 800132e:	2037      	movs	r0, #55	@ 0x37
 8001330:	f000 fc7f 	bl	8001c32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001334:	2037      	movs	r0, #55	@ 0x37
 8001336:	f000 fc98 	bl	8001c6a <HAL_NVIC_EnableIRQ>
}
 800133a:	bf00      	nop
 800133c:	3718      	adds	r7, #24
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	40000400 	.word	0x40000400
 8001348:	40023800 	.word	0x40023800
 800134c:	40000800 	.word	0x40000800
 8001350:	40001000 	.word	0x40001000
 8001354:	40001400 	.word	0x40001400

08001358 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b08a      	sub	sp, #40	@ 0x28
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001360:	f107 0314 	add.w	r3, r7, #20
 8001364:	2200      	movs	r2, #0
 8001366:	601a      	str	r2, [r3, #0]
 8001368:	605a      	str	r2, [r3, #4]
 800136a:	609a      	str	r2, [r3, #8]
 800136c:	60da      	str	r2, [r3, #12]
 800136e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4a33      	ldr	r2, [pc, #204]	@ (8001444 <HAL_TIM_MspPostInit+0xec>)
 8001376:	4293      	cmp	r3, r2
 8001378:	d13c      	bne.n	80013f4 <HAL_TIM_MspPostInit+0x9c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800137a:	2300      	movs	r3, #0
 800137c:	613b      	str	r3, [r7, #16]
 800137e:	4b32      	ldr	r3, [pc, #200]	@ (8001448 <HAL_TIM_MspPostInit+0xf0>)
 8001380:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001382:	4a31      	ldr	r2, [pc, #196]	@ (8001448 <HAL_TIM_MspPostInit+0xf0>)
 8001384:	f043 0301 	orr.w	r3, r3, #1
 8001388:	6313      	str	r3, [r2, #48]	@ 0x30
 800138a:	4b2f      	ldr	r3, [pc, #188]	@ (8001448 <HAL_TIM_MspPostInit+0xf0>)
 800138c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800138e:	f003 0301 	and.w	r3, r3, #1
 8001392:	613b      	str	r3, [r7, #16]
 8001394:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001396:	2300      	movs	r3, #0
 8001398:	60fb      	str	r3, [r7, #12]
 800139a:	4b2b      	ldr	r3, [pc, #172]	@ (8001448 <HAL_TIM_MspPostInit+0xf0>)
 800139c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800139e:	4a2a      	ldr	r2, [pc, #168]	@ (8001448 <HAL_TIM_MspPostInit+0xf0>)
 80013a0:	f043 0302 	orr.w	r3, r3, #2
 80013a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80013a6:	4b28      	ldr	r3, [pc, #160]	@ (8001448 <HAL_TIM_MspPostInit+0xf0>)
 80013a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013aa:	f003 0302 	and.w	r3, r3, #2
 80013ae:	60fb      	str	r3, [r7, #12]
 80013b0:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = Gauche_av_Pin|Gauche_re_Pin;
 80013b2:	23c0      	movs	r3, #192	@ 0xc0
 80013b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013b6:	2302      	movs	r3, #2
 80013b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ba:	2300      	movs	r3, #0
 80013bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013be:	2300      	movs	r3, #0
 80013c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80013c2:	2302      	movs	r3, #2
 80013c4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013c6:	f107 0314 	add.w	r3, r7, #20
 80013ca:	4619      	mov	r1, r3
 80013cc:	481f      	ldr	r0, [pc, #124]	@ (800144c <HAL_TIM_MspPostInit+0xf4>)
 80013ce:	f000 fc67 	bl	8001ca0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Droit_av_Pin|Droit_re_Pin;
 80013d2:	2303      	movs	r3, #3
 80013d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013d6:	2302      	movs	r3, #2
 80013d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013da:	2300      	movs	r3, #0
 80013dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013de:	2300      	movs	r3, #0
 80013e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80013e2:	2302      	movs	r3, #2
 80013e4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013e6:	f107 0314 	add.w	r3, r7, #20
 80013ea:	4619      	mov	r1, r3
 80013ec:	4818      	ldr	r0, [pc, #96]	@ (8001450 <HAL_TIM_MspPostInit+0xf8>)
 80013ee:	f000 fc57 	bl	8001ca0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80013f2:	e022      	b.n	800143a <HAL_TIM_MspPostInit+0xe2>
  else if(timHandle->Instance==TIM4)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4a16      	ldr	r2, [pc, #88]	@ (8001454 <HAL_TIM_MspPostInit+0xfc>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d11d      	bne.n	800143a <HAL_TIM_MspPostInit+0xe2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013fe:	2300      	movs	r3, #0
 8001400:	60bb      	str	r3, [r7, #8]
 8001402:	4b11      	ldr	r3, [pc, #68]	@ (8001448 <HAL_TIM_MspPostInit+0xf0>)
 8001404:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001406:	4a10      	ldr	r2, [pc, #64]	@ (8001448 <HAL_TIM_MspPostInit+0xf0>)
 8001408:	f043 0302 	orr.w	r3, r3, #2
 800140c:	6313      	str	r3, [r2, #48]	@ 0x30
 800140e:	4b0e      	ldr	r3, [pc, #56]	@ (8001448 <HAL_TIM_MspPostInit+0xf0>)
 8001410:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001412:	f003 0302 	and.w	r3, r3, #2
 8001416:	60bb      	str	r3, [r7, #8]
 8001418:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = SPI_BL_Pin;
 800141a:	2380      	movs	r3, #128	@ 0x80
 800141c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800141e:	2302      	movs	r3, #2
 8001420:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001422:	2300      	movs	r3, #0
 8001424:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001426:	2300      	movs	r3, #0
 8001428:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800142a:	2302      	movs	r3, #2
 800142c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(SPI_BL_GPIO_Port, &GPIO_InitStruct);
 800142e:	f107 0314 	add.w	r3, r7, #20
 8001432:	4619      	mov	r1, r3
 8001434:	4806      	ldr	r0, [pc, #24]	@ (8001450 <HAL_TIM_MspPostInit+0xf8>)
 8001436:	f000 fc33 	bl	8001ca0 <HAL_GPIO_Init>
}
 800143a:	bf00      	nop
 800143c:	3728      	adds	r7, #40	@ 0x28
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	40000400 	.word	0x40000400
 8001448:	40023800 	.word	0x40023800
 800144c:	40020000 	.word	0x40020000
 8001450:	40020400 	.word	0x40020400
 8001454:	40000800 	.word	0x40000800

08001458 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800145c:	4b11      	ldr	r3, [pc, #68]	@ (80014a4 <MX_USART2_UART_Init+0x4c>)
 800145e:	4a12      	ldr	r2, [pc, #72]	@ (80014a8 <MX_USART2_UART_Init+0x50>)
 8001460:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001462:	4b10      	ldr	r3, [pc, #64]	@ (80014a4 <MX_USART2_UART_Init+0x4c>)
 8001464:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001468:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800146a:	4b0e      	ldr	r3, [pc, #56]	@ (80014a4 <MX_USART2_UART_Init+0x4c>)
 800146c:	2200      	movs	r2, #0
 800146e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001470:	4b0c      	ldr	r3, [pc, #48]	@ (80014a4 <MX_USART2_UART_Init+0x4c>)
 8001472:	2200      	movs	r2, #0
 8001474:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001476:	4b0b      	ldr	r3, [pc, #44]	@ (80014a4 <MX_USART2_UART_Init+0x4c>)
 8001478:	2200      	movs	r2, #0
 800147a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800147c:	4b09      	ldr	r3, [pc, #36]	@ (80014a4 <MX_USART2_UART_Init+0x4c>)
 800147e:	220c      	movs	r2, #12
 8001480:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001482:	4b08      	ldr	r3, [pc, #32]	@ (80014a4 <MX_USART2_UART_Init+0x4c>)
 8001484:	2200      	movs	r2, #0
 8001486:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001488:	4b06      	ldr	r3, [pc, #24]	@ (80014a4 <MX_USART2_UART_Init+0x4c>)
 800148a:	2200      	movs	r2, #0
 800148c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800148e:	4805      	ldr	r0, [pc, #20]	@ (80014a4 <MX_USART2_UART_Init+0x4c>)
 8001490:	f002 fed4 	bl	800423c <HAL_UART_Init>
 8001494:	4603      	mov	r3, r0
 8001496:	2b00      	cmp	r3, #0
 8001498:	d001      	beq.n	800149e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800149a:	f7ff fb9b 	bl	8000bd4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800149e:	bf00      	nop
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	20000228 	.word	0x20000228
 80014a8:	40004400 	.word	0x40004400

080014ac <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b08a      	sub	sp, #40	@ 0x28
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014b4:	f107 0314 	add.w	r3, r7, #20
 80014b8:	2200      	movs	r2, #0
 80014ba:	601a      	str	r2, [r3, #0]
 80014bc:	605a      	str	r2, [r3, #4]
 80014be:	609a      	str	r2, [r3, #8]
 80014c0:	60da      	str	r2, [r3, #12]
 80014c2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4a19      	ldr	r2, [pc, #100]	@ (8001530 <HAL_UART_MspInit+0x84>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d12b      	bne.n	8001526 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80014ce:	2300      	movs	r3, #0
 80014d0:	613b      	str	r3, [r7, #16]
 80014d2:	4b18      	ldr	r3, [pc, #96]	@ (8001534 <HAL_UART_MspInit+0x88>)
 80014d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014d6:	4a17      	ldr	r2, [pc, #92]	@ (8001534 <HAL_UART_MspInit+0x88>)
 80014d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80014dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80014de:	4b15      	ldr	r3, [pc, #84]	@ (8001534 <HAL_UART_MspInit+0x88>)
 80014e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014e6:	613b      	str	r3, [r7, #16]
 80014e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ea:	2300      	movs	r3, #0
 80014ec:	60fb      	str	r3, [r7, #12]
 80014ee:	4b11      	ldr	r3, [pc, #68]	@ (8001534 <HAL_UART_MspInit+0x88>)
 80014f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014f2:	4a10      	ldr	r2, [pc, #64]	@ (8001534 <HAL_UART_MspInit+0x88>)
 80014f4:	f043 0301 	orr.w	r3, r3, #1
 80014f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80014fa:	4b0e      	ldr	r3, [pc, #56]	@ (8001534 <HAL_UART_MspInit+0x88>)
 80014fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014fe:	f003 0301 	and.w	r3, r3, #1
 8001502:	60fb      	str	r3, [r7, #12]
 8001504:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001506:	230c      	movs	r3, #12
 8001508:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800150a:	2302      	movs	r3, #2
 800150c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150e:	2300      	movs	r3, #0
 8001510:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001512:	2303      	movs	r3, #3
 8001514:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001516:	2307      	movs	r3, #7
 8001518:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800151a:	f107 0314 	add.w	r3, r7, #20
 800151e:	4619      	mov	r1, r3
 8001520:	4805      	ldr	r0, [pc, #20]	@ (8001538 <HAL_UART_MspInit+0x8c>)
 8001522:	f000 fbbd 	bl	8001ca0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001526:	bf00      	nop
 8001528:	3728      	adds	r7, #40	@ 0x28
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	40004400 	.word	0x40004400
 8001534:	40023800 	.word	0x40023800
 8001538:	40020000 	.word	0x40020000

0800153c <LCD_Mode>:
#include <stdint.h>
#include <stdio.h>
#include <string.h>

void LCD_Mode(uint8_t modeManuel)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b088      	sub	sp, #32
 8001540:	af02      	add	r7, sp, #8
 8001542:	4603      	mov	r3, r0
 8001544:	71fb      	strb	r3, [r7, #7]
	char buffModeMan[10] = {0};
 8001546:	2300      	movs	r3, #0
 8001548:	60fb      	str	r3, [r7, #12]
 800154a:	f107 0310 	add.w	r3, r7, #16
 800154e:	2200      	movs	r2, #0
 8001550:	601a      	str	r2, [r3, #0]
 8001552:	809a      	strh	r2, [r3, #4]

    switch(modeManuel) {
 8001554:	79fb      	ldrb	r3, [r7, #7]
 8001556:	2b03      	cmp	r3, #3
 8001558:	d01a      	beq.n	8001590 <LCD_Mode+0x54>
 800155a:	2b03      	cmp	r3, #3
 800155c:	dc22      	bgt.n	80015a4 <LCD_Mode+0x68>
 800155e:	2b01      	cmp	r3, #1
 8001560:	d002      	beq.n	8001568 <LCD_Mode+0x2c>
 8001562:	2b02      	cmp	r3, #2
 8001564:	d00a      	beq.n	800157c <LCD_Mode+0x40>
 8001566:	e01d      	b.n	80015a4 <LCD_Mode+0x68>
        case 1:
            strcpy(buffModeMan, "M1");
 8001568:	f107 030c 	add.w	r3, r7, #12
 800156c:	4a1a      	ldr	r2, [pc, #104]	@ (80015d8 <LCD_Mode+0x9c>)
 800156e:	6812      	ldr	r2, [r2, #0]
 8001570:	4611      	mov	r1, r2
 8001572:	8019      	strh	r1, [r3, #0]
 8001574:	3302      	adds	r3, #2
 8001576:	0c12      	lsrs	r2, r2, #16
 8001578:	701a      	strb	r2, [r3, #0]
            break;
 800157a:	e01b      	b.n	80015b4 <LCD_Mode+0x78>
        case 2:
            strcpy(buffModeMan, "M2");
 800157c:	f107 030c 	add.w	r3, r7, #12
 8001580:	4a16      	ldr	r2, [pc, #88]	@ (80015dc <LCD_Mode+0xa0>)
 8001582:	6812      	ldr	r2, [r2, #0]
 8001584:	4611      	mov	r1, r2
 8001586:	8019      	strh	r1, [r3, #0]
 8001588:	3302      	adds	r3, #2
 800158a:	0c12      	lsrs	r2, r2, #16
 800158c:	701a      	strb	r2, [r3, #0]
            break;
 800158e:	e011      	b.n	80015b4 <LCD_Mode+0x78>
        case 3:
            strcpy(buffModeMan, "M3");
 8001590:	f107 030c 	add.w	r3, r7, #12
 8001594:	4a12      	ldr	r2, [pc, #72]	@ (80015e0 <LCD_Mode+0xa4>)
 8001596:	6812      	ldr	r2, [r2, #0]
 8001598:	4611      	mov	r1, r2
 800159a:	8019      	strh	r1, [r3, #0]
 800159c:	3302      	adds	r3, #2
 800159e:	0c12      	lsrs	r2, r2, #16
 80015a0:	701a      	strb	r2, [r3, #0]
            break;
 80015a2:	e007      	b.n	80015b4 <LCD_Mode+0x78>
        default:
            sprintf(buffModeMan, "M %d", modeManuel);
 80015a4:	79fa      	ldrb	r2, [r7, #7]
 80015a6:	f107 030c 	add.w	r3, r7, #12
 80015aa:	490e      	ldr	r1, [pc, #56]	@ (80015e4 <LCD_Mode+0xa8>)
 80015ac:	4618      	mov	r0, r3
 80015ae:	f003 ffc7 	bl	8005540 <siprintf>
            break;
 80015b2:	bf00      	nop
    }
 	Paint_DrawString_EN (250, 50, buffModeMan,        &Font24,    MAGENTA,  WHITE);
 80015b4:	f107 020c 	add.w	r2, r7, #12
 80015b8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80015bc:	9301      	str	r3, [sp, #4]
 80015be:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 80015c2:	9300      	str	r3, [sp, #0]
 80015c4:	4b08      	ldr	r3, [pc, #32]	@ (80015e8 <LCD_Mode+0xac>)
 80015c6:	2132      	movs	r1, #50	@ 0x32
 80015c8:	20fa      	movs	r0, #250	@ 0xfa
 80015ca:	f003 fb2f 	bl	8004c2c <Paint_DrawString_EN>
}
 80015ce:	bf00      	nop
 80015d0:	3718      	adds	r7, #24
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	08006460 	.word	0x08006460
 80015dc:	08006464 	.word	0x08006464
 80015e0:	08006468 	.word	0x08006468
 80015e4:	0800646c 	.word	0x0800646c
 80015e8:	20000018 	.word	0x20000018

080015ec <LCD_Vitesse>:

void LCD_Vitesse(uint16_t vitesseG, uint16_t vitesseD)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b08a      	sub	sp, #40	@ 0x28
 80015f0:	af02      	add	r7, sp, #8
 80015f2:	4603      	mov	r3, r0
 80015f4:	460a      	mov	r2, r1
 80015f6:	80fb      	strh	r3, [r7, #6]
 80015f8:	4613      	mov	r3, r2
 80015fa:	80bb      	strh	r3, [r7, #4]
	char buffVG[11];
	char buffVD[11];
	sprintf(buffVG,
 80015fc:	88fa      	ldrh	r2, [r7, #6]
 80015fe:	f107 0314 	add.w	r3, r7, #20
 8001602:	4914      	ldr	r1, [pc, #80]	@ (8001654 <LCD_Vitesse+0x68>)
 8001604:	4618      	mov	r0, r3
 8001606:	f003 ff9b 	bl	8005540 <siprintf>
		  "%3d mm/s",
		   vitesseG);

	sprintf(buffVD,
 800160a:	88ba      	ldrh	r2, [r7, #4]
 800160c:	f107 0308 	add.w	r3, r7, #8
 8001610:	4910      	ldr	r1, [pc, #64]	@ (8001654 <LCD_Vitesse+0x68>)
 8001612:	4618      	mov	r0, r3
 8001614:	f003 ff94 	bl	8005540 <siprintf>
		  "%3d mm/s",
		   vitesseD);

	Paint_DrawString_EN (190, 100, buffVG,        &Font20,    MAGENTA,  WHITE);
 8001618:	f107 0214 	add.w	r2, r7, #20
 800161c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001620:	9301      	str	r3, [sp, #4]
 8001622:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 8001626:	9300      	str	r3, [sp, #0]
 8001628:	4b0b      	ldr	r3, [pc, #44]	@ (8001658 <LCD_Vitesse+0x6c>)
 800162a:	2164      	movs	r1, #100	@ 0x64
 800162c:	20be      	movs	r0, #190	@ 0xbe
 800162e:	f003 fafd 	bl	8004c2c <Paint_DrawString_EN>
	Paint_DrawString_EN (190, 125, buffVD,        &Font20,    MAGENTA,  WHITE);
 8001632:	f107 0208 	add.w	r2, r7, #8
 8001636:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800163a:	9301      	str	r3, [sp, #4]
 800163c:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 8001640:	9300      	str	r3, [sp, #0]
 8001642:	4b05      	ldr	r3, [pc, #20]	@ (8001658 <LCD_Vitesse+0x6c>)
 8001644:	217d      	movs	r1, #125	@ 0x7d
 8001646:	20be      	movs	r0, #190	@ 0xbe
 8001648:	f003 faf0 	bl	8004c2c <Paint_DrawString_EN>
}
 800164c:	bf00      	nop
 800164e:	3720      	adds	r7, #32
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}
 8001654:	08006474 	.word	0x08006474
 8001658:	20000010 	.word	0x20000010

0800165c <LCD_Init>:

void LCD_Init(uint8_t* a, uint8_t modeA, uint8_t modeB)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b084      	sub	sp, #16
 8001660:	af02      	add	r7, sp, #8
 8001662:	6078      	str	r0, [r7, #4]
 8001664:	460b      	mov	r3, r1
 8001666:	70fb      	strb	r3, [r7, #3]
 8001668:	4613      	mov	r3, r2
 800166a:	70bb      	strb	r3, [r7, #2]
//	printf("LCD_2IN_test Demo\r\n");
	DEV_Module_Init();
 800166c:	f003 f8bc 	bl	80047e8 <DEV_Module_Init>

//  printf("LCD_2IN_ Init and Clear...\r\n");
	LCD_2IN_SetBackLight(1000);
 8001670:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001674:	f003 fd74 	bl	8005160 <LCD_2IN_SetBackLight>
	LCD_2IN_Init();
 8001678:	f003 fbba 	bl	8004df0 <LCD_2IN_Init>
	LCD_2IN_Clear(WHITE);
 800167c:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001680:	f003 fd26 	bl	80050d0 <LCD_2IN_Clear>

//  printf("Paint_NewImage\r\n");
	Paint_NewImage(LCD_2IN_WIDTH,LCD_2IN_HEIGHT, ROTATE_90, WHITE);
 8001684:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001688:	225a      	movs	r2, #90	@ 0x5a
 800168a:	f44f 71a0 	mov.w	r1, #320	@ 0x140
 800168e:	20f0      	movs	r0, #240	@ 0xf0
 8001690:	f003 f8ca 	bl	8004828 <Paint_NewImage>

//  printf("Set Clear and Display Funtion\r\n");
	Paint_SetClearFuntion(LCD_2IN_Clear);
 8001694:	4885      	ldr	r0, [pc, #532]	@ (80018ac <LCD_Init+0x250>)
 8001696:	f003 f913 	bl	80048c0 <Paint_SetClearFuntion>
	Paint_SetDisplayFuntion(LCD_2IN_DrawPaint);
 800169a:	4885      	ldr	r0, [pc, #532]	@ (80018b0 <LCD_Init+0x254>)
 800169c:	f003 f920 	bl	80048e0 <Paint_SetDisplayFuntion>

  printf("Paint_Clear\r\n");
 80016a0:	4884      	ldr	r0, [pc, #528]	@ (80018b4 <LCD_Init+0x258>)
 80016a2:	f003 ff45 	bl	8005530 <puts>
	Paint_Clear(MAGENTA);
 80016a6:	f64f 001f 	movw	r0, #63519	@ 0xf81f
 80016aa:	f003 fa03 	bl	8004ab4 <Paint_Clear>
	DEV_Delay_ms(500);
 80016ae:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80016b2:	f000 f9bf 	bl	8001a34 <HAL_Delay>

	//  printf("Painting...\r\n");
	Paint_SetRotate(ROTATE_270);
 80016b6:	f44f 7087 	mov.w	r0, #270	@ 0x10e
 80016ba:	f003 f921 	bl	8004900 <Paint_SetRotate>
	Paint_DrawString_EN (50, 100, "DEMARRAGE DU",        &Font24,    MAGENTA,  WHITE);
 80016be:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80016c2:	9301      	str	r3, [sp, #4]
 80016c4:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 80016c8:	9300      	str	r3, [sp, #0]
 80016ca:	4b7b      	ldr	r3, [pc, #492]	@ (80018b8 <LCD_Init+0x25c>)
 80016cc:	4a7b      	ldr	r2, [pc, #492]	@ (80018bc <LCD_Init+0x260>)
 80016ce:	2164      	movs	r1, #100	@ 0x64
 80016d0:	2032      	movs	r0, #50	@ 0x32
 80016d2:	f003 faab 	bl	8004c2c <Paint_DrawString_EN>
	Paint_DrawString_EN (100, 125, "PROJET",        &Font24,    MAGENTA,  WHITE);
 80016d6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80016da:	9301      	str	r3, [sp, #4]
 80016dc:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 80016e0:	9300      	str	r3, [sp, #0]
 80016e2:	4b75      	ldr	r3, [pc, #468]	@ (80018b8 <LCD_Init+0x25c>)
 80016e4:	4a76      	ldr	r2, [pc, #472]	@ (80018c0 <LCD_Init+0x264>)
 80016e6:	217d      	movs	r1, #125	@ 0x7d
 80016e8:	2064      	movs	r0, #100	@ 0x64
 80016ea:	f003 fa9f 	bl	8004c2c <Paint_DrawString_EN>
	Paint_DrawString_EN (70, 150, "VROUM-VROUM",        &Font24,    MAGENTA,  WHITE);
 80016ee:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80016f2:	9301      	str	r3, [sp, #4]
 80016f4:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 80016f8:	9300      	str	r3, [sp, #0]
 80016fa:	4b6f      	ldr	r3, [pc, #444]	@ (80018b8 <LCD_Init+0x25c>)
 80016fc:	4a71      	ldr	r2, [pc, #452]	@ (80018c4 <LCD_Init+0x268>)
 80016fe:	2196      	movs	r1, #150	@ 0x96
 8001700:	2046      	movs	r0, #70	@ 0x46
 8001702:	f003 fa93 	bl	8004c2c <Paint_DrawString_EN>
	DEV_Delay_ms(500);
 8001706:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800170a:	f000 f993 	bl	8001a34 <HAL_Delay>
	Paint_Clear(MAGENTA);
 800170e:	f64f 001f 	movw	r0, #63519	@ 0xf81f
 8001712:	f003 f9cf 	bl	8004ab4 <Paint_Clear>

	Paint_DrawString_EN (85, 100, "LE PROJET",        &Font24,    MAGENTA,  WHITE);
 8001716:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800171a:	9301      	str	r3, [sp, #4]
 800171c:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 8001720:	9300      	str	r3, [sp, #0]
 8001722:	4b65      	ldr	r3, [pc, #404]	@ (80018b8 <LCD_Init+0x25c>)
 8001724:	4a68      	ldr	r2, [pc, #416]	@ (80018c8 <LCD_Init+0x26c>)
 8001726:	2164      	movs	r1, #100	@ 0x64
 8001728:	2055      	movs	r0, #85	@ 0x55
 800172a:	f003 fa7f 	bl	8004c2c <Paint_DrawString_EN>
	Paint_DrawString_EN (70, 125, "VROUM-VROUM",        &Font24,    MAGENTA,  WHITE);
 800172e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001732:	9301      	str	r3, [sp, #4]
 8001734:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 8001738:	9300      	str	r3, [sp, #0]
 800173a:	4b5f      	ldr	r3, [pc, #380]	@ (80018b8 <LCD_Init+0x25c>)
 800173c:	4a61      	ldr	r2, [pc, #388]	@ (80018c4 <LCD_Init+0x268>)
 800173e:	217d      	movs	r1, #125	@ 0x7d
 8001740:	2046      	movs	r0, #70	@ 0x46
 8001742:	f003 fa73 	bl	8004c2c <Paint_DrawString_EN>
	Paint_DrawString_EN (85, 150, "VOUS SALUT",        &Font24,    MAGENTA,  WHITE);
 8001746:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800174a:	9301      	str	r3, [sp, #4]
 800174c:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 8001750:	9300      	str	r3, [sp, #0]
 8001752:	4b59      	ldr	r3, [pc, #356]	@ (80018b8 <LCD_Init+0x25c>)
 8001754:	4a5d      	ldr	r2, [pc, #372]	@ (80018cc <LCD_Init+0x270>)
 8001756:	2196      	movs	r1, #150	@ 0x96
 8001758:	2055      	movs	r0, #85	@ 0x55
 800175a:	f003 fa67 	bl	8004c2c <Paint_DrawString_EN>
	DEV_Delay_ms(500);
 800175e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001762:	f000 f967 	bl	8001a34 <HAL_Delay>
	Paint_Clear(MAGENTA);
 8001766:	f64f 001f 	movw	r0, #63519	@ 0xf81f
 800176a:	f003 f9a3 	bl	8004ab4 <Paint_Clear>

	Paint_DrawString_EN (5, 1, "La date : ",        &Font24,    MAGENTA,  WHITE);
 800176e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001772:	9301      	str	r3, [sp, #4]
 8001774:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 8001778:	9300      	str	r3, [sp, #0]
 800177a:	4b4f      	ldr	r3, [pc, #316]	@ (80018b8 <LCD_Init+0x25c>)
 800177c:	4a54      	ldr	r2, [pc, #336]	@ (80018d0 <LCD_Init+0x274>)
 800177e:	2101      	movs	r1, #1
 8001780:	2005      	movs	r0, #5
 8001782:	f003 fa53 	bl	8004c2c <Paint_DrawString_EN>
	Paint_DrawString_EN (5, 25, "L'heure : ",        &Font24,    MAGENTA,  WHITE);
 8001786:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800178a:	9301      	str	r3, [sp, #4]
 800178c:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 8001790:	9300      	str	r3, [sp, #0]
 8001792:	4b49      	ldr	r3, [pc, #292]	@ (80018b8 <LCD_Init+0x25c>)
 8001794:	4a4f      	ldr	r2, [pc, #316]	@ (80018d4 <LCD_Init+0x278>)
 8001796:	2119      	movs	r1, #25
 8001798:	2005      	movs	r0, #5
 800179a:	f003 fa47 	bl	8004c2c <Paint_DrawString_EN>
	Paint_DrawString_EN (5, 50, "Mode actuel : ",        &Font24,    MAGENTA,  WHITE);
 800179e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80017a2:	9301      	str	r3, [sp, #4]
 80017a4:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 80017a8:	9300      	str	r3, [sp, #0]
 80017aa:	4b43      	ldr	r3, [pc, #268]	@ (80018b8 <LCD_Init+0x25c>)
 80017ac:	4a4a      	ldr	r2, [pc, #296]	@ (80018d8 <LCD_Init+0x27c>)
 80017ae:	2132      	movs	r1, #50	@ 0x32
 80017b0:	2005      	movs	r0, #5
 80017b2:	f003 fa3b 	bl	8004c2c <Paint_DrawString_EN>

	if(modeA == 0 && modeB == 0)
 80017b6:	78fb      	ldrb	r3, [r7, #3]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d10f      	bne.n	80017dc <LCD_Init+0x180>
 80017bc:	78bb      	ldrb	r3, [r7, #2]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d10c      	bne.n	80017dc <LCD_Init+0x180>
	{
		Paint_DrawString_EN (250, 50, "A1",        &Font24,    MAGENTA,  WHITE);
 80017c2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80017c6:	9301      	str	r3, [sp, #4]
 80017c8:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 80017cc:	9300      	str	r3, [sp, #0]
 80017ce:	4b3a      	ldr	r3, [pc, #232]	@ (80018b8 <LCD_Init+0x25c>)
 80017d0:	4a42      	ldr	r2, [pc, #264]	@ (80018dc <LCD_Init+0x280>)
 80017d2:	2132      	movs	r1, #50	@ 0x32
 80017d4:	20fa      	movs	r0, #250	@ 0xfa
 80017d6:	f003 fa29 	bl	8004c2c <Paint_DrawString_EN>
 80017da:	e037      	b.n	800184c <LCD_Init+0x1f0>
	}
	else if(modeA == 1 && modeB == 0)
 80017dc:	78fb      	ldrb	r3, [r7, #3]
 80017de:	2b01      	cmp	r3, #1
 80017e0:	d10f      	bne.n	8001802 <LCD_Init+0x1a6>
 80017e2:	78bb      	ldrb	r3, [r7, #2]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d10c      	bne.n	8001802 <LCD_Init+0x1a6>
	{
		Paint_DrawString_EN (250, 50, "A2",        &Font24,    MAGENTA,  WHITE);
 80017e8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80017ec:	9301      	str	r3, [sp, #4]
 80017ee:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 80017f2:	9300      	str	r3, [sp, #0]
 80017f4:	4b30      	ldr	r3, [pc, #192]	@ (80018b8 <LCD_Init+0x25c>)
 80017f6:	4a3a      	ldr	r2, [pc, #232]	@ (80018e0 <LCD_Init+0x284>)
 80017f8:	2132      	movs	r1, #50	@ 0x32
 80017fa:	20fa      	movs	r0, #250	@ 0xfa
 80017fc:	f003 fa16 	bl	8004c2c <Paint_DrawString_EN>
 8001800:	e024      	b.n	800184c <LCD_Init+0x1f0>
	}
	else if(modeA == 0 && modeB == 1)
 8001802:	78fb      	ldrb	r3, [r7, #3]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d10f      	bne.n	8001828 <LCD_Init+0x1cc>
 8001808:	78bb      	ldrb	r3, [r7, #2]
 800180a:	2b01      	cmp	r3, #1
 800180c:	d10c      	bne.n	8001828 <LCD_Init+0x1cc>
	{
		Paint_DrawString_EN (250, 50, "A3",        &Font24,    MAGENTA,  WHITE);
 800180e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001812:	9301      	str	r3, [sp, #4]
 8001814:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 8001818:	9300      	str	r3, [sp, #0]
 800181a:	4b27      	ldr	r3, [pc, #156]	@ (80018b8 <LCD_Init+0x25c>)
 800181c:	4a31      	ldr	r2, [pc, #196]	@ (80018e4 <LCD_Init+0x288>)
 800181e:	2132      	movs	r1, #50	@ 0x32
 8001820:	20fa      	movs	r0, #250	@ 0xfa
 8001822:	f003 fa03 	bl	8004c2c <Paint_DrawString_EN>
 8001826:	e011      	b.n	800184c <LCD_Init+0x1f0>
	}
	else if(modeA == 1 && modeB == 1)
 8001828:	78fb      	ldrb	r3, [r7, #3]
 800182a:	2b01      	cmp	r3, #1
 800182c:	d10e      	bne.n	800184c <LCD_Init+0x1f0>
 800182e:	78bb      	ldrb	r3, [r7, #2]
 8001830:	2b01      	cmp	r3, #1
 8001832:	d10b      	bne.n	800184c <LCD_Init+0x1f0>
	{
		Paint_DrawString_EN (250, 50, "M1",        &Font24,    MAGENTA,  WHITE);
 8001834:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001838:	9301      	str	r3, [sp, #4]
 800183a:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 800183e:	9300      	str	r3, [sp, #0]
 8001840:	4b1d      	ldr	r3, [pc, #116]	@ (80018b8 <LCD_Init+0x25c>)
 8001842:	4a29      	ldr	r2, [pc, #164]	@ (80018e8 <LCD_Init+0x28c>)
 8001844:	2132      	movs	r1, #50	@ 0x32
 8001846:	20fa      	movs	r0, #250	@ 0xfa
 8001848:	f003 f9f0 	bl	8004c2c <Paint_DrawString_EN>
	}
	Paint_DrawString_EN (5, 100, "Vitesse G : ",        &Font24,    MAGENTA,  WHITE);
 800184c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001850:	9301      	str	r3, [sp, #4]
 8001852:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 8001856:	9300      	str	r3, [sp, #0]
 8001858:	4b17      	ldr	r3, [pc, #92]	@ (80018b8 <LCD_Init+0x25c>)
 800185a:	4a24      	ldr	r2, [pc, #144]	@ (80018ec <LCD_Init+0x290>)
 800185c:	2164      	movs	r1, #100	@ 0x64
 800185e:	2005      	movs	r0, #5
 8001860:	f003 f9e4 	bl	8004c2c <Paint_DrawString_EN>
	Paint_DrawString_EN (5, 125, "Vitesse D : ",        &Font24,    MAGENTA,  WHITE);
 8001864:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001868:	9301      	str	r3, [sp, #4]
 800186a:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 800186e:	9300      	str	r3, [sp, #0]
 8001870:	4b11      	ldr	r3, [pc, #68]	@ (80018b8 <LCD_Init+0x25c>)
 8001872:	4a1f      	ldr	r2, [pc, #124]	@ (80018f0 <LCD_Init+0x294>)
 8001874:	217d      	movs	r1, #125	@ 0x7d
 8001876:	2005      	movs	r0, #5
 8001878:	f003 f9d8 	bl	8004c2c <Paint_DrawString_EN>
	Paint_DrawString_EN (10, 220, "Attention aux enfants",        &Font20,    YELLOW,  RED);
 800187c:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001880:	9301      	str	r3, [sp, #4]
 8001882:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8001886:	9300      	str	r3, [sp, #0]
 8001888:	4b1a      	ldr	r3, [pc, #104]	@ (80018f4 <LCD_Init+0x298>)
 800188a:	4a1b      	ldr	r2, [pc, #108]	@ (80018f8 <LCD_Init+0x29c>)
 800188c:	21dc      	movs	r1, #220	@ 0xdc
 800188e:	200a      	movs	r0, #10
 8001890:	f003 f9cc 	bl	8004c2c <Paint_DrawString_EN>

	DEV_Delay_ms(3000);
 8001894:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8001898:	f000 f8cc 	bl	8001a34 <HAL_Delay>

	*a = 1;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2201      	movs	r2, #1
 80018a0:	701a      	strb	r2, [r3, #0]
	//DEV_Module_Exit();

}
 80018a2:	bf00      	nop
 80018a4:	3708      	adds	r7, #8
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	080050d1 	.word	0x080050d1
 80018b0:	08005131 	.word	0x08005131
 80018b4:	08006480 	.word	0x08006480
 80018b8:	20000018 	.word	0x20000018
 80018bc:	08006490 	.word	0x08006490
 80018c0:	080064a0 	.word	0x080064a0
 80018c4:	080064a8 	.word	0x080064a8
 80018c8:	080064b4 	.word	0x080064b4
 80018cc:	080064c0 	.word	0x080064c0
 80018d0:	080064cc 	.word	0x080064cc
 80018d4:	080064d8 	.word	0x080064d8
 80018d8:	080064e4 	.word	0x080064e4
 80018dc:	080064f4 	.word	0x080064f4
 80018e0:	080064f8 	.word	0x080064f8
 80018e4:	080064fc 	.word	0x080064fc
 80018e8:	08006460 	.word	0x08006460
 80018ec:	08006500 	.word	0x08006500
 80018f0:	08006510 	.word	0x08006510
 80018f4:	20000010 	.word	0x20000010
 80018f8:	08006520 	.word	0x08006520

080018fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80018fc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001934 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001900:	f7ff fb2a 	bl	8000f58 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001904:	480c      	ldr	r0, [pc, #48]	@ (8001938 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001906:	490d      	ldr	r1, [pc, #52]	@ (800193c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001908:	4a0d      	ldr	r2, [pc, #52]	@ (8001940 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800190a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800190c:	e002      	b.n	8001914 <LoopCopyDataInit>

0800190e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800190e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001910:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001912:	3304      	adds	r3, #4

08001914 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001914:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001916:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001918:	d3f9      	bcc.n	800190e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800191a:	4a0a      	ldr	r2, [pc, #40]	@ (8001944 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800191c:	4c0a      	ldr	r4, [pc, #40]	@ (8001948 <LoopFillZerobss+0x22>)
  movs r3, #0
 800191e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001920:	e001      	b.n	8001926 <LoopFillZerobss>

08001922 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001922:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001924:	3204      	adds	r2, #4

08001926 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001926:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001928:	d3fb      	bcc.n	8001922 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800192a:	f003 ff65 	bl	80057f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800192e:	f7fe ff21 	bl	8000774 <main>
  bx  lr    
 8001932:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001934:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001938:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800193c:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8001940:	08009218 	.word	0x08009218
  ldr r2, =_sbss
 8001944:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8001948:	200003e0 	.word	0x200003e0

0800194c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800194c:	e7fe      	b.n	800194c <ADC_IRQHandler>
	...

08001950 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001954:	4b0e      	ldr	r3, [pc, #56]	@ (8001990 <HAL_Init+0x40>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a0d      	ldr	r2, [pc, #52]	@ (8001990 <HAL_Init+0x40>)
 800195a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800195e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001960:	4b0b      	ldr	r3, [pc, #44]	@ (8001990 <HAL_Init+0x40>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4a0a      	ldr	r2, [pc, #40]	@ (8001990 <HAL_Init+0x40>)
 8001966:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800196a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800196c:	4b08      	ldr	r3, [pc, #32]	@ (8001990 <HAL_Init+0x40>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a07      	ldr	r2, [pc, #28]	@ (8001990 <HAL_Init+0x40>)
 8001972:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001976:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001978:	2003      	movs	r0, #3
 800197a:	f000 f94f 	bl	8001c1c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800197e:	2000      	movs	r0, #0
 8001980:	f000 f808 	bl	8001994 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001984:	f7ff f9cc 	bl	8000d20 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001988:	2300      	movs	r3, #0
}
 800198a:	4618      	mov	r0, r3
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	40023c00 	.word	0x40023c00

08001994 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b082      	sub	sp, #8
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800199c:	4b12      	ldr	r3, [pc, #72]	@ (80019e8 <HAL_InitTick+0x54>)
 800199e:	681a      	ldr	r2, [r3, #0]
 80019a0:	4b12      	ldr	r3, [pc, #72]	@ (80019ec <HAL_InitTick+0x58>)
 80019a2:	781b      	ldrb	r3, [r3, #0]
 80019a4:	4619      	mov	r1, r3
 80019a6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80019aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80019ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80019b2:	4618      	mov	r0, r3
 80019b4:	f000 f967 	bl	8001c86 <HAL_SYSTICK_Config>
 80019b8:	4603      	mov	r3, r0
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d001      	beq.n	80019c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019be:	2301      	movs	r3, #1
 80019c0:	e00e      	b.n	80019e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	2b0f      	cmp	r3, #15
 80019c6:	d80a      	bhi.n	80019de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019c8:	2200      	movs	r2, #0
 80019ca:	6879      	ldr	r1, [r7, #4]
 80019cc:	f04f 30ff 	mov.w	r0, #4294967295
 80019d0:	f000 f92f 	bl	8001c32 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019d4:	4a06      	ldr	r2, [pc, #24]	@ (80019f0 <HAL_InitTick+0x5c>)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019da:	2300      	movs	r3, #0
 80019dc:	e000      	b.n	80019e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80019de:	2301      	movs	r3, #1
}
 80019e0:	4618      	mov	r0, r3
 80019e2:	3708      	adds	r7, #8
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	20000004 	.word	0x20000004
 80019ec:	2000000c 	.word	0x2000000c
 80019f0:	20000008 	.word	0x20000008

080019f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019f4:	b480      	push	{r7}
 80019f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019f8:	4b06      	ldr	r3, [pc, #24]	@ (8001a14 <HAL_IncTick+0x20>)
 80019fa:	781b      	ldrb	r3, [r3, #0]
 80019fc:	461a      	mov	r2, r3
 80019fe:	4b06      	ldr	r3, [pc, #24]	@ (8001a18 <HAL_IncTick+0x24>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4413      	add	r3, r2
 8001a04:	4a04      	ldr	r2, [pc, #16]	@ (8001a18 <HAL_IncTick+0x24>)
 8001a06:	6013      	str	r3, [r2, #0]
}
 8001a08:	bf00      	nop
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a10:	4770      	bx	lr
 8001a12:	bf00      	nop
 8001a14:	2000000c 	.word	0x2000000c
 8001a18:	20000270 	.word	0x20000270

08001a1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	af00      	add	r7, sp, #0
  return uwTick;
 8001a20:	4b03      	ldr	r3, [pc, #12]	@ (8001a30 <HAL_GetTick+0x14>)
 8001a22:	681b      	ldr	r3, [r3, #0]
}
 8001a24:	4618      	mov	r0, r3
 8001a26:	46bd      	mov	sp, r7
 8001a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2c:	4770      	bx	lr
 8001a2e:	bf00      	nop
 8001a30:	20000270 	.word	0x20000270

08001a34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b084      	sub	sp, #16
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a3c:	f7ff ffee 	bl	8001a1c <HAL_GetTick>
 8001a40:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a4c:	d005      	beq.n	8001a5a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a4e:	4b0a      	ldr	r3, [pc, #40]	@ (8001a78 <HAL_Delay+0x44>)
 8001a50:	781b      	ldrb	r3, [r3, #0]
 8001a52:	461a      	mov	r2, r3
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	4413      	add	r3, r2
 8001a58:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001a5a:	bf00      	nop
 8001a5c:	f7ff ffde 	bl	8001a1c <HAL_GetTick>
 8001a60:	4602      	mov	r2, r0
 8001a62:	68bb      	ldr	r3, [r7, #8]
 8001a64:	1ad3      	subs	r3, r2, r3
 8001a66:	68fa      	ldr	r2, [r7, #12]
 8001a68:	429a      	cmp	r2, r3
 8001a6a:	d8f7      	bhi.n	8001a5c <HAL_Delay+0x28>
  {
  }
}
 8001a6c:	bf00      	nop
 8001a6e:	bf00      	nop
 8001a70:	3710      	adds	r7, #16
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop
 8001a78:	2000000c 	.word	0x2000000c

08001a7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b085      	sub	sp, #20
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	f003 0307 	and.w	r3, r3, #7
 8001a8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a8c:	4b0c      	ldr	r3, [pc, #48]	@ (8001ac0 <__NVIC_SetPriorityGrouping+0x44>)
 8001a8e:	68db      	ldr	r3, [r3, #12]
 8001a90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a92:	68ba      	ldr	r2, [r7, #8]
 8001a94:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001a98:	4013      	ands	r3, r2
 8001a9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001aa0:	68bb      	ldr	r3, [r7, #8]
 8001aa2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001aa4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001aa8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001aac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001aae:	4a04      	ldr	r2, [pc, #16]	@ (8001ac0 <__NVIC_SetPriorityGrouping+0x44>)
 8001ab0:	68bb      	ldr	r3, [r7, #8]
 8001ab2:	60d3      	str	r3, [r2, #12]
}
 8001ab4:	bf00      	nop
 8001ab6:	3714      	adds	r7, #20
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abe:	4770      	bx	lr
 8001ac0:	e000ed00 	.word	0xe000ed00

08001ac4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ac8:	4b04      	ldr	r3, [pc, #16]	@ (8001adc <__NVIC_GetPriorityGrouping+0x18>)
 8001aca:	68db      	ldr	r3, [r3, #12]
 8001acc:	0a1b      	lsrs	r3, r3, #8
 8001ace:	f003 0307 	and.w	r3, r3, #7
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ada:	4770      	bx	lr
 8001adc:	e000ed00 	.word	0xe000ed00

08001ae0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	b083      	sub	sp, #12
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001aea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	db0b      	blt.n	8001b0a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001af2:	79fb      	ldrb	r3, [r7, #7]
 8001af4:	f003 021f 	and.w	r2, r3, #31
 8001af8:	4907      	ldr	r1, [pc, #28]	@ (8001b18 <__NVIC_EnableIRQ+0x38>)
 8001afa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001afe:	095b      	lsrs	r3, r3, #5
 8001b00:	2001      	movs	r0, #1
 8001b02:	fa00 f202 	lsl.w	r2, r0, r2
 8001b06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001b0a:	bf00      	nop
 8001b0c:	370c      	adds	r7, #12
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b14:	4770      	bx	lr
 8001b16:	bf00      	nop
 8001b18:	e000e100 	.word	0xe000e100

08001b1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b083      	sub	sp, #12
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	4603      	mov	r3, r0
 8001b24:	6039      	str	r1, [r7, #0]
 8001b26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	db0a      	blt.n	8001b46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	b2da      	uxtb	r2, r3
 8001b34:	490c      	ldr	r1, [pc, #48]	@ (8001b68 <__NVIC_SetPriority+0x4c>)
 8001b36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b3a:	0112      	lsls	r2, r2, #4
 8001b3c:	b2d2      	uxtb	r2, r2
 8001b3e:	440b      	add	r3, r1
 8001b40:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b44:	e00a      	b.n	8001b5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	b2da      	uxtb	r2, r3
 8001b4a:	4908      	ldr	r1, [pc, #32]	@ (8001b6c <__NVIC_SetPriority+0x50>)
 8001b4c:	79fb      	ldrb	r3, [r7, #7]
 8001b4e:	f003 030f 	and.w	r3, r3, #15
 8001b52:	3b04      	subs	r3, #4
 8001b54:	0112      	lsls	r2, r2, #4
 8001b56:	b2d2      	uxtb	r2, r2
 8001b58:	440b      	add	r3, r1
 8001b5a:	761a      	strb	r2, [r3, #24]
}
 8001b5c:	bf00      	nop
 8001b5e:	370c      	adds	r7, #12
 8001b60:	46bd      	mov	sp, r7
 8001b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b66:	4770      	bx	lr
 8001b68:	e000e100 	.word	0xe000e100
 8001b6c:	e000ed00 	.word	0xe000ed00

08001b70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b70:	b480      	push	{r7}
 8001b72:	b089      	sub	sp, #36	@ 0x24
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	60f8      	str	r0, [r7, #12]
 8001b78:	60b9      	str	r1, [r7, #8]
 8001b7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	f003 0307 	and.w	r3, r3, #7
 8001b82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b84:	69fb      	ldr	r3, [r7, #28]
 8001b86:	f1c3 0307 	rsb	r3, r3, #7
 8001b8a:	2b04      	cmp	r3, #4
 8001b8c:	bf28      	it	cs
 8001b8e:	2304      	movcs	r3, #4
 8001b90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b92:	69fb      	ldr	r3, [r7, #28]
 8001b94:	3304      	adds	r3, #4
 8001b96:	2b06      	cmp	r3, #6
 8001b98:	d902      	bls.n	8001ba0 <NVIC_EncodePriority+0x30>
 8001b9a:	69fb      	ldr	r3, [r7, #28]
 8001b9c:	3b03      	subs	r3, #3
 8001b9e:	e000      	b.n	8001ba2 <NVIC_EncodePriority+0x32>
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ba4:	f04f 32ff 	mov.w	r2, #4294967295
 8001ba8:	69bb      	ldr	r3, [r7, #24]
 8001baa:	fa02 f303 	lsl.w	r3, r2, r3
 8001bae:	43da      	mvns	r2, r3
 8001bb0:	68bb      	ldr	r3, [r7, #8]
 8001bb2:	401a      	ands	r2, r3
 8001bb4:	697b      	ldr	r3, [r7, #20]
 8001bb6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bb8:	f04f 31ff 	mov.w	r1, #4294967295
 8001bbc:	697b      	ldr	r3, [r7, #20]
 8001bbe:	fa01 f303 	lsl.w	r3, r1, r3
 8001bc2:	43d9      	mvns	r1, r3
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bc8:	4313      	orrs	r3, r2
         );
}
 8001bca:	4618      	mov	r0, r3
 8001bcc:	3724      	adds	r7, #36	@ 0x24
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd4:	4770      	bx	lr
	...

08001bd8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b082      	sub	sp, #8
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	3b01      	subs	r3, #1
 8001be4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001be8:	d301      	bcc.n	8001bee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001bea:	2301      	movs	r3, #1
 8001bec:	e00f      	b.n	8001c0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bee:	4a0a      	ldr	r2, [pc, #40]	@ (8001c18 <SysTick_Config+0x40>)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	3b01      	subs	r3, #1
 8001bf4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001bf6:	210f      	movs	r1, #15
 8001bf8:	f04f 30ff 	mov.w	r0, #4294967295
 8001bfc:	f7ff ff8e 	bl	8001b1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c00:	4b05      	ldr	r3, [pc, #20]	@ (8001c18 <SysTick_Config+0x40>)
 8001c02:	2200      	movs	r2, #0
 8001c04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c06:	4b04      	ldr	r3, [pc, #16]	@ (8001c18 <SysTick_Config+0x40>)
 8001c08:	2207      	movs	r2, #7
 8001c0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c0c:	2300      	movs	r3, #0
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	3708      	adds	r7, #8
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	bf00      	nop
 8001c18:	e000e010 	.word	0xe000e010

08001c1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b082      	sub	sp, #8
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c24:	6878      	ldr	r0, [r7, #4]
 8001c26:	f7ff ff29 	bl	8001a7c <__NVIC_SetPriorityGrouping>
}
 8001c2a:	bf00      	nop
 8001c2c:	3708      	adds	r7, #8
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}

08001c32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c32:	b580      	push	{r7, lr}
 8001c34:	b086      	sub	sp, #24
 8001c36:	af00      	add	r7, sp, #0
 8001c38:	4603      	mov	r3, r0
 8001c3a:	60b9      	str	r1, [r7, #8]
 8001c3c:	607a      	str	r2, [r7, #4]
 8001c3e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c40:	2300      	movs	r3, #0
 8001c42:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c44:	f7ff ff3e 	bl	8001ac4 <__NVIC_GetPriorityGrouping>
 8001c48:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c4a:	687a      	ldr	r2, [r7, #4]
 8001c4c:	68b9      	ldr	r1, [r7, #8]
 8001c4e:	6978      	ldr	r0, [r7, #20]
 8001c50:	f7ff ff8e 	bl	8001b70 <NVIC_EncodePriority>
 8001c54:	4602      	mov	r2, r0
 8001c56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c5a:	4611      	mov	r1, r2
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f7ff ff5d 	bl	8001b1c <__NVIC_SetPriority>
}
 8001c62:	bf00      	nop
 8001c64:	3718      	adds	r7, #24
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}

08001c6a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c6a:	b580      	push	{r7, lr}
 8001c6c:	b082      	sub	sp, #8
 8001c6e:	af00      	add	r7, sp, #0
 8001c70:	4603      	mov	r3, r0
 8001c72:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f7ff ff31 	bl	8001ae0 <__NVIC_EnableIRQ>
}
 8001c7e:	bf00      	nop
 8001c80:	3708      	adds	r7, #8
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}

08001c86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c86:	b580      	push	{r7, lr}
 8001c88:	b082      	sub	sp, #8
 8001c8a:	af00      	add	r7, sp, #0
 8001c8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c8e:	6878      	ldr	r0, [r7, #4]
 8001c90:	f7ff ffa2 	bl	8001bd8 <SysTick_Config>
 8001c94:	4603      	mov	r3, r0
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	3708      	adds	r7, #8
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}
	...

08001ca0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b089      	sub	sp, #36	@ 0x24
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
 8001ca8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001caa:	2300      	movs	r3, #0
 8001cac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	61fb      	str	r3, [r7, #28]
 8001cba:	e165      	b.n	8001f88 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001cbc:	2201      	movs	r2, #1
 8001cbe:	69fb      	ldr	r3, [r7, #28]
 8001cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	697a      	ldr	r2, [r7, #20]
 8001ccc:	4013      	ands	r3, r2
 8001cce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001cd0:	693a      	ldr	r2, [r7, #16]
 8001cd2:	697b      	ldr	r3, [r7, #20]
 8001cd4:	429a      	cmp	r2, r3
 8001cd6:	f040 8154 	bne.w	8001f82 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	f003 0303 	and.w	r3, r3, #3
 8001ce2:	2b01      	cmp	r3, #1
 8001ce4:	d005      	beq.n	8001cf2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001cee:	2b02      	cmp	r3, #2
 8001cf0:	d130      	bne.n	8001d54 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	689b      	ldr	r3, [r3, #8]
 8001cf6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001cf8:	69fb      	ldr	r3, [r7, #28]
 8001cfa:	005b      	lsls	r3, r3, #1
 8001cfc:	2203      	movs	r2, #3
 8001cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001d02:	43db      	mvns	r3, r3
 8001d04:	69ba      	ldr	r2, [r7, #24]
 8001d06:	4013      	ands	r3, r2
 8001d08:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	68da      	ldr	r2, [r3, #12]
 8001d0e:	69fb      	ldr	r3, [r7, #28]
 8001d10:	005b      	lsls	r3, r3, #1
 8001d12:	fa02 f303 	lsl.w	r3, r2, r3
 8001d16:	69ba      	ldr	r2, [r7, #24]
 8001d18:	4313      	orrs	r3, r2
 8001d1a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	69ba      	ldr	r2, [r7, #24]
 8001d20:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d28:	2201      	movs	r2, #1
 8001d2a:	69fb      	ldr	r3, [r7, #28]
 8001d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d30:	43db      	mvns	r3, r3
 8001d32:	69ba      	ldr	r2, [r7, #24]
 8001d34:	4013      	ands	r3, r2
 8001d36:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	091b      	lsrs	r3, r3, #4
 8001d3e:	f003 0201 	and.w	r2, r3, #1
 8001d42:	69fb      	ldr	r3, [r7, #28]
 8001d44:	fa02 f303 	lsl.w	r3, r2, r3
 8001d48:	69ba      	ldr	r2, [r7, #24]
 8001d4a:	4313      	orrs	r3, r2
 8001d4c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	69ba      	ldr	r2, [r7, #24]
 8001d52:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	f003 0303 	and.w	r3, r3, #3
 8001d5c:	2b03      	cmp	r3, #3
 8001d5e:	d017      	beq.n	8001d90 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	68db      	ldr	r3, [r3, #12]
 8001d64:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d66:	69fb      	ldr	r3, [r7, #28]
 8001d68:	005b      	lsls	r3, r3, #1
 8001d6a:	2203      	movs	r2, #3
 8001d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d70:	43db      	mvns	r3, r3
 8001d72:	69ba      	ldr	r2, [r7, #24]
 8001d74:	4013      	ands	r3, r2
 8001d76:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	689a      	ldr	r2, [r3, #8]
 8001d7c:	69fb      	ldr	r3, [r7, #28]
 8001d7e:	005b      	lsls	r3, r3, #1
 8001d80:	fa02 f303 	lsl.w	r3, r2, r3
 8001d84:	69ba      	ldr	r2, [r7, #24]
 8001d86:	4313      	orrs	r3, r2
 8001d88:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	69ba      	ldr	r2, [r7, #24]
 8001d8e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	f003 0303 	and.w	r3, r3, #3
 8001d98:	2b02      	cmp	r3, #2
 8001d9a:	d123      	bne.n	8001de4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d9c:	69fb      	ldr	r3, [r7, #28]
 8001d9e:	08da      	lsrs	r2, r3, #3
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	3208      	adds	r2, #8
 8001da4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001da8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001daa:	69fb      	ldr	r3, [r7, #28]
 8001dac:	f003 0307 	and.w	r3, r3, #7
 8001db0:	009b      	lsls	r3, r3, #2
 8001db2:	220f      	movs	r2, #15
 8001db4:	fa02 f303 	lsl.w	r3, r2, r3
 8001db8:	43db      	mvns	r3, r3
 8001dba:	69ba      	ldr	r2, [r7, #24]
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	691a      	ldr	r2, [r3, #16]
 8001dc4:	69fb      	ldr	r3, [r7, #28]
 8001dc6:	f003 0307 	and.w	r3, r3, #7
 8001dca:	009b      	lsls	r3, r3, #2
 8001dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd0:	69ba      	ldr	r2, [r7, #24]
 8001dd2:	4313      	orrs	r3, r2
 8001dd4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001dd6:	69fb      	ldr	r3, [r7, #28]
 8001dd8:	08da      	lsrs	r2, r3, #3
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	3208      	adds	r2, #8
 8001dde:	69b9      	ldr	r1, [r7, #24]
 8001de0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001dea:	69fb      	ldr	r3, [r7, #28]
 8001dec:	005b      	lsls	r3, r3, #1
 8001dee:	2203      	movs	r2, #3
 8001df0:	fa02 f303 	lsl.w	r3, r2, r3
 8001df4:	43db      	mvns	r3, r3
 8001df6:	69ba      	ldr	r2, [r7, #24]
 8001df8:	4013      	ands	r3, r2
 8001dfa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	f003 0203 	and.w	r2, r3, #3
 8001e04:	69fb      	ldr	r3, [r7, #28]
 8001e06:	005b      	lsls	r3, r3, #1
 8001e08:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0c:	69ba      	ldr	r2, [r7, #24]
 8001e0e:	4313      	orrs	r3, r2
 8001e10:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	69ba      	ldr	r2, [r7, #24]
 8001e16:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	f000 80ae 	beq.w	8001f82 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e26:	2300      	movs	r3, #0
 8001e28:	60fb      	str	r3, [r7, #12]
 8001e2a:	4b5d      	ldr	r3, [pc, #372]	@ (8001fa0 <HAL_GPIO_Init+0x300>)
 8001e2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e2e:	4a5c      	ldr	r2, [pc, #368]	@ (8001fa0 <HAL_GPIO_Init+0x300>)
 8001e30:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e34:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e36:	4b5a      	ldr	r3, [pc, #360]	@ (8001fa0 <HAL_GPIO_Init+0x300>)
 8001e38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e3a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e3e:	60fb      	str	r3, [r7, #12]
 8001e40:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e42:	4a58      	ldr	r2, [pc, #352]	@ (8001fa4 <HAL_GPIO_Init+0x304>)
 8001e44:	69fb      	ldr	r3, [r7, #28]
 8001e46:	089b      	lsrs	r3, r3, #2
 8001e48:	3302      	adds	r3, #2
 8001e4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e50:	69fb      	ldr	r3, [r7, #28]
 8001e52:	f003 0303 	and.w	r3, r3, #3
 8001e56:	009b      	lsls	r3, r3, #2
 8001e58:	220f      	movs	r2, #15
 8001e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5e:	43db      	mvns	r3, r3
 8001e60:	69ba      	ldr	r2, [r7, #24]
 8001e62:	4013      	ands	r3, r2
 8001e64:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	4a4f      	ldr	r2, [pc, #316]	@ (8001fa8 <HAL_GPIO_Init+0x308>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d025      	beq.n	8001eba <HAL_GPIO_Init+0x21a>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	4a4e      	ldr	r2, [pc, #312]	@ (8001fac <HAL_GPIO_Init+0x30c>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d01f      	beq.n	8001eb6 <HAL_GPIO_Init+0x216>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	4a4d      	ldr	r2, [pc, #308]	@ (8001fb0 <HAL_GPIO_Init+0x310>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d019      	beq.n	8001eb2 <HAL_GPIO_Init+0x212>
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	4a4c      	ldr	r2, [pc, #304]	@ (8001fb4 <HAL_GPIO_Init+0x314>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d013      	beq.n	8001eae <HAL_GPIO_Init+0x20e>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	4a4b      	ldr	r2, [pc, #300]	@ (8001fb8 <HAL_GPIO_Init+0x318>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d00d      	beq.n	8001eaa <HAL_GPIO_Init+0x20a>
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	4a4a      	ldr	r2, [pc, #296]	@ (8001fbc <HAL_GPIO_Init+0x31c>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d007      	beq.n	8001ea6 <HAL_GPIO_Init+0x206>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	4a49      	ldr	r2, [pc, #292]	@ (8001fc0 <HAL_GPIO_Init+0x320>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d101      	bne.n	8001ea2 <HAL_GPIO_Init+0x202>
 8001e9e:	2306      	movs	r3, #6
 8001ea0:	e00c      	b.n	8001ebc <HAL_GPIO_Init+0x21c>
 8001ea2:	2307      	movs	r3, #7
 8001ea4:	e00a      	b.n	8001ebc <HAL_GPIO_Init+0x21c>
 8001ea6:	2305      	movs	r3, #5
 8001ea8:	e008      	b.n	8001ebc <HAL_GPIO_Init+0x21c>
 8001eaa:	2304      	movs	r3, #4
 8001eac:	e006      	b.n	8001ebc <HAL_GPIO_Init+0x21c>
 8001eae:	2303      	movs	r3, #3
 8001eb0:	e004      	b.n	8001ebc <HAL_GPIO_Init+0x21c>
 8001eb2:	2302      	movs	r3, #2
 8001eb4:	e002      	b.n	8001ebc <HAL_GPIO_Init+0x21c>
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	e000      	b.n	8001ebc <HAL_GPIO_Init+0x21c>
 8001eba:	2300      	movs	r3, #0
 8001ebc:	69fa      	ldr	r2, [r7, #28]
 8001ebe:	f002 0203 	and.w	r2, r2, #3
 8001ec2:	0092      	lsls	r2, r2, #2
 8001ec4:	4093      	lsls	r3, r2
 8001ec6:	69ba      	ldr	r2, [r7, #24]
 8001ec8:	4313      	orrs	r3, r2
 8001eca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ecc:	4935      	ldr	r1, [pc, #212]	@ (8001fa4 <HAL_GPIO_Init+0x304>)
 8001ece:	69fb      	ldr	r3, [r7, #28]
 8001ed0:	089b      	lsrs	r3, r3, #2
 8001ed2:	3302      	adds	r3, #2
 8001ed4:	69ba      	ldr	r2, [r7, #24]
 8001ed6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001eda:	4b3a      	ldr	r3, [pc, #232]	@ (8001fc4 <HAL_GPIO_Init+0x324>)
 8001edc:	689b      	ldr	r3, [r3, #8]
 8001ede:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ee0:	693b      	ldr	r3, [r7, #16]
 8001ee2:	43db      	mvns	r3, r3
 8001ee4:	69ba      	ldr	r2, [r7, #24]
 8001ee6:	4013      	ands	r3, r2
 8001ee8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d003      	beq.n	8001efe <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001ef6:	69ba      	ldr	r2, [r7, #24]
 8001ef8:	693b      	ldr	r3, [r7, #16]
 8001efa:	4313      	orrs	r3, r2
 8001efc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001efe:	4a31      	ldr	r2, [pc, #196]	@ (8001fc4 <HAL_GPIO_Init+0x324>)
 8001f00:	69bb      	ldr	r3, [r7, #24]
 8001f02:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f04:	4b2f      	ldr	r3, [pc, #188]	@ (8001fc4 <HAL_GPIO_Init+0x324>)
 8001f06:	68db      	ldr	r3, [r3, #12]
 8001f08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f0a:	693b      	ldr	r3, [r7, #16]
 8001f0c:	43db      	mvns	r3, r3
 8001f0e:	69ba      	ldr	r2, [r7, #24]
 8001f10:	4013      	ands	r3, r2
 8001f12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d003      	beq.n	8001f28 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001f20:	69ba      	ldr	r2, [r7, #24]
 8001f22:	693b      	ldr	r3, [r7, #16]
 8001f24:	4313      	orrs	r3, r2
 8001f26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f28:	4a26      	ldr	r2, [pc, #152]	@ (8001fc4 <HAL_GPIO_Init+0x324>)
 8001f2a:	69bb      	ldr	r3, [r7, #24]
 8001f2c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001f2e:	4b25      	ldr	r3, [pc, #148]	@ (8001fc4 <HAL_GPIO_Init+0x324>)
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f34:	693b      	ldr	r3, [r7, #16]
 8001f36:	43db      	mvns	r3, r3
 8001f38:	69ba      	ldr	r2, [r7, #24]
 8001f3a:	4013      	ands	r3, r2
 8001f3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d003      	beq.n	8001f52 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001f4a:	69ba      	ldr	r2, [r7, #24]
 8001f4c:	693b      	ldr	r3, [r7, #16]
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f52:	4a1c      	ldr	r2, [pc, #112]	@ (8001fc4 <HAL_GPIO_Init+0x324>)
 8001f54:	69bb      	ldr	r3, [r7, #24]
 8001f56:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f58:	4b1a      	ldr	r3, [pc, #104]	@ (8001fc4 <HAL_GPIO_Init+0x324>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f5e:	693b      	ldr	r3, [r7, #16]
 8001f60:	43db      	mvns	r3, r3
 8001f62:	69ba      	ldr	r2, [r7, #24]
 8001f64:	4013      	ands	r3, r2
 8001f66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d003      	beq.n	8001f7c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001f74:	69ba      	ldr	r2, [r7, #24]
 8001f76:	693b      	ldr	r3, [r7, #16]
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f7c:	4a11      	ldr	r2, [pc, #68]	@ (8001fc4 <HAL_GPIO_Init+0x324>)
 8001f7e:	69bb      	ldr	r3, [r7, #24]
 8001f80:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f82:	69fb      	ldr	r3, [r7, #28]
 8001f84:	3301      	adds	r3, #1
 8001f86:	61fb      	str	r3, [r7, #28]
 8001f88:	69fb      	ldr	r3, [r7, #28]
 8001f8a:	2b0f      	cmp	r3, #15
 8001f8c:	f67f ae96 	bls.w	8001cbc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001f90:	bf00      	nop
 8001f92:	bf00      	nop
 8001f94:	3724      	adds	r7, #36	@ 0x24
 8001f96:	46bd      	mov	sp, r7
 8001f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9c:	4770      	bx	lr
 8001f9e:	bf00      	nop
 8001fa0:	40023800 	.word	0x40023800
 8001fa4:	40013800 	.word	0x40013800
 8001fa8:	40020000 	.word	0x40020000
 8001fac:	40020400 	.word	0x40020400
 8001fb0:	40020800 	.word	0x40020800
 8001fb4:	40020c00 	.word	0x40020c00
 8001fb8:	40021000 	.word	0x40021000
 8001fbc:	40021400 	.word	0x40021400
 8001fc0:	40021800 	.word	0x40021800
 8001fc4:	40013c00 	.word	0x40013c00

08001fc8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b085      	sub	sp, #20
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
 8001fd0:	460b      	mov	r3, r1
 8001fd2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	691a      	ldr	r2, [r3, #16]
 8001fd8:	887b      	ldrh	r3, [r7, #2]
 8001fda:	4013      	ands	r3, r2
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d002      	beq.n	8001fe6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	73fb      	strb	r3, [r7, #15]
 8001fe4:	e001      	b.n	8001fea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001fea:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fec:	4618      	mov	r0, r3
 8001fee:	3714      	adds	r7, #20
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff6:	4770      	bx	lr

08001ff8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b083      	sub	sp, #12
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
 8002000:	460b      	mov	r3, r1
 8002002:	807b      	strh	r3, [r7, #2]
 8002004:	4613      	mov	r3, r2
 8002006:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002008:	787b      	ldrb	r3, [r7, #1]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d003      	beq.n	8002016 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800200e:	887a      	ldrh	r2, [r7, #2]
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002014:	e003      	b.n	800201e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002016:	887b      	ldrh	r3, [r7, #2]
 8002018:	041a      	lsls	r2, r3, #16
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	619a      	str	r2, [r3, #24]
}
 800201e:	bf00      	nop
 8002020:	370c      	adds	r7, #12
 8002022:	46bd      	mov	sp, r7
 8002024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002028:	4770      	bx	lr
	...

0800202c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b082      	sub	sp, #8
 8002030:	af00      	add	r7, sp, #0
 8002032:	4603      	mov	r3, r0
 8002034:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002036:	4b08      	ldr	r3, [pc, #32]	@ (8002058 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002038:	695a      	ldr	r2, [r3, #20]
 800203a:	88fb      	ldrh	r3, [r7, #6]
 800203c:	4013      	ands	r3, r2
 800203e:	2b00      	cmp	r3, #0
 8002040:	d006      	beq.n	8002050 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002042:	4a05      	ldr	r2, [pc, #20]	@ (8002058 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002044:	88fb      	ldrh	r3, [r7, #6]
 8002046:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002048:	88fb      	ldrh	r3, [r7, #6]
 800204a:	4618      	mov	r0, r3
 800204c:	f7fe fc64 	bl	8000918 <HAL_GPIO_EXTI_Callback>
  }
}
 8002050:	bf00      	nop
 8002052:	3708      	adds	r7, #8
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}
 8002058:	40013c00 	.word	0x40013c00

0800205c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b084      	sub	sp, #16
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
 8002064:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d101      	bne.n	8002070 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800206c:	2301      	movs	r3, #1
 800206e:	e0cc      	b.n	800220a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002070:	4b68      	ldr	r3, [pc, #416]	@ (8002214 <HAL_RCC_ClockConfig+0x1b8>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f003 030f 	and.w	r3, r3, #15
 8002078:	683a      	ldr	r2, [r7, #0]
 800207a:	429a      	cmp	r2, r3
 800207c:	d90c      	bls.n	8002098 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800207e:	4b65      	ldr	r3, [pc, #404]	@ (8002214 <HAL_RCC_ClockConfig+0x1b8>)
 8002080:	683a      	ldr	r2, [r7, #0]
 8002082:	b2d2      	uxtb	r2, r2
 8002084:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002086:	4b63      	ldr	r3, [pc, #396]	@ (8002214 <HAL_RCC_ClockConfig+0x1b8>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f003 030f 	and.w	r3, r3, #15
 800208e:	683a      	ldr	r2, [r7, #0]
 8002090:	429a      	cmp	r2, r3
 8002092:	d001      	beq.n	8002098 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002094:	2301      	movs	r3, #1
 8002096:	e0b8      	b.n	800220a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f003 0302 	and.w	r3, r3, #2
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d020      	beq.n	80020e6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f003 0304 	and.w	r3, r3, #4
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d005      	beq.n	80020bc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80020b0:	4b59      	ldr	r3, [pc, #356]	@ (8002218 <HAL_RCC_ClockConfig+0x1bc>)
 80020b2:	689b      	ldr	r3, [r3, #8]
 80020b4:	4a58      	ldr	r2, [pc, #352]	@ (8002218 <HAL_RCC_ClockConfig+0x1bc>)
 80020b6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80020ba:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f003 0308 	and.w	r3, r3, #8
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d005      	beq.n	80020d4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80020c8:	4b53      	ldr	r3, [pc, #332]	@ (8002218 <HAL_RCC_ClockConfig+0x1bc>)
 80020ca:	689b      	ldr	r3, [r3, #8]
 80020cc:	4a52      	ldr	r2, [pc, #328]	@ (8002218 <HAL_RCC_ClockConfig+0x1bc>)
 80020ce:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80020d2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020d4:	4b50      	ldr	r3, [pc, #320]	@ (8002218 <HAL_RCC_ClockConfig+0x1bc>)
 80020d6:	689b      	ldr	r3, [r3, #8]
 80020d8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	689b      	ldr	r3, [r3, #8]
 80020e0:	494d      	ldr	r1, [pc, #308]	@ (8002218 <HAL_RCC_ClockConfig+0x1bc>)
 80020e2:	4313      	orrs	r3, r2
 80020e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f003 0301 	and.w	r3, r3, #1
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d044      	beq.n	800217c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	2b01      	cmp	r3, #1
 80020f8:	d107      	bne.n	800210a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020fa:	4b47      	ldr	r3, [pc, #284]	@ (8002218 <HAL_RCC_ClockConfig+0x1bc>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002102:	2b00      	cmp	r3, #0
 8002104:	d119      	bne.n	800213a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002106:	2301      	movs	r3, #1
 8002108:	e07f      	b.n	800220a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	2b02      	cmp	r3, #2
 8002110:	d003      	beq.n	800211a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002116:	2b03      	cmp	r3, #3
 8002118:	d107      	bne.n	800212a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800211a:	4b3f      	ldr	r3, [pc, #252]	@ (8002218 <HAL_RCC_ClockConfig+0x1bc>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002122:	2b00      	cmp	r3, #0
 8002124:	d109      	bne.n	800213a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002126:	2301      	movs	r3, #1
 8002128:	e06f      	b.n	800220a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800212a:	4b3b      	ldr	r3, [pc, #236]	@ (8002218 <HAL_RCC_ClockConfig+0x1bc>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f003 0302 	and.w	r3, r3, #2
 8002132:	2b00      	cmp	r3, #0
 8002134:	d101      	bne.n	800213a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002136:	2301      	movs	r3, #1
 8002138:	e067      	b.n	800220a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800213a:	4b37      	ldr	r3, [pc, #220]	@ (8002218 <HAL_RCC_ClockConfig+0x1bc>)
 800213c:	689b      	ldr	r3, [r3, #8]
 800213e:	f023 0203 	bic.w	r2, r3, #3
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	4934      	ldr	r1, [pc, #208]	@ (8002218 <HAL_RCC_ClockConfig+0x1bc>)
 8002148:	4313      	orrs	r3, r2
 800214a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800214c:	f7ff fc66 	bl	8001a1c <HAL_GetTick>
 8002150:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002152:	e00a      	b.n	800216a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002154:	f7ff fc62 	bl	8001a1c <HAL_GetTick>
 8002158:	4602      	mov	r2, r0
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	1ad3      	subs	r3, r2, r3
 800215e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002162:	4293      	cmp	r3, r2
 8002164:	d901      	bls.n	800216a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002166:	2303      	movs	r3, #3
 8002168:	e04f      	b.n	800220a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800216a:	4b2b      	ldr	r3, [pc, #172]	@ (8002218 <HAL_RCC_ClockConfig+0x1bc>)
 800216c:	689b      	ldr	r3, [r3, #8]
 800216e:	f003 020c 	and.w	r2, r3, #12
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	009b      	lsls	r3, r3, #2
 8002178:	429a      	cmp	r2, r3
 800217a:	d1eb      	bne.n	8002154 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800217c:	4b25      	ldr	r3, [pc, #148]	@ (8002214 <HAL_RCC_ClockConfig+0x1b8>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f003 030f 	and.w	r3, r3, #15
 8002184:	683a      	ldr	r2, [r7, #0]
 8002186:	429a      	cmp	r2, r3
 8002188:	d20c      	bcs.n	80021a4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800218a:	4b22      	ldr	r3, [pc, #136]	@ (8002214 <HAL_RCC_ClockConfig+0x1b8>)
 800218c:	683a      	ldr	r2, [r7, #0]
 800218e:	b2d2      	uxtb	r2, r2
 8002190:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002192:	4b20      	ldr	r3, [pc, #128]	@ (8002214 <HAL_RCC_ClockConfig+0x1b8>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f003 030f 	and.w	r3, r3, #15
 800219a:	683a      	ldr	r2, [r7, #0]
 800219c:	429a      	cmp	r2, r3
 800219e:	d001      	beq.n	80021a4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80021a0:	2301      	movs	r3, #1
 80021a2:	e032      	b.n	800220a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f003 0304 	and.w	r3, r3, #4
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d008      	beq.n	80021c2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021b0:	4b19      	ldr	r3, [pc, #100]	@ (8002218 <HAL_RCC_ClockConfig+0x1bc>)
 80021b2:	689b      	ldr	r3, [r3, #8]
 80021b4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	68db      	ldr	r3, [r3, #12]
 80021bc:	4916      	ldr	r1, [pc, #88]	@ (8002218 <HAL_RCC_ClockConfig+0x1bc>)
 80021be:	4313      	orrs	r3, r2
 80021c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f003 0308 	and.w	r3, r3, #8
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d009      	beq.n	80021e2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80021ce:	4b12      	ldr	r3, [pc, #72]	@ (8002218 <HAL_RCC_ClockConfig+0x1bc>)
 80021d0:	689b      	ldr	r3, [r3, #8]
 80021d2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	691b      	ldr	r3, [r3, #16]
 80021da:	00db      	lsls	r3, r3, #3
 80021dc:	490e      	ldr	r1, [pc, #56]	@ (8002218 <HAL_RCC_ClockConfig+0x1bc>)
 80021de:	4313      	orrs	r3, r2
 80021e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80021e2:	f000 f855 	bl	8002290 <HAL_RCC_GetSysClockFreq>
 80021e6:	4602      	mov	r2, r0
 80021e8:	4b0b      	ldr	r3, [pc, #44]	@ (8002218 <HAL_RCC_ClockConfig+0x1bc>)
 80021ea:	689b      	ldr	r3, [r3, #8]
 80021ec:	091b      	lsrs	r3, r3, #4
 80021ee:	f003 030f 	and.w	r3, r3, #15
 80021f2:	490a      	ldr	r1, [pc, #40]	@ (800221c <HAL_RCC_ClockConfig+0x1c0>)
 80021f4:	5ccb      	ldrb	r3, [r1, r3]
 80021f6:	fa22 f303 	lsr.w	r3, r2, r3
 80021fa:	4a09      	ldr	r2, [pc, #36]	@ (8002220 <HAL_RCC_ClockConfig+0x1c4>)
 80021fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80021fe:	4b09      	ldr	r3, [pc, #36]	@ (8002224 <HAL_RCC_ClockConfig+0x1c8>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4618      	mov	r0, r3
 8002204:	f7ff fbc6 	bl	8001994 <HAL_InitTick>

  return HAL_OK;
 8002208:	2300      	movs	r3, #0
}
 800220a:	4618      	mov	r0, r3
 800220c:	3710      	adds	r7, #16
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}
 8002212:	bf00      	nop
 8002214:	40023c00 	.word	0x40023c00
 8002218:	40023800 	.word	0x40023800
 800221c:	0800682c 	.word	0x0800682c
 8002220:	20000004 	.word	0x20000004
 8002224:	20000008 	.word	0x20000008

08002228 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002228:	b480      	push	{r7}
 800222a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800222c:	4b03      	ldr	r3, [pc, #12]	@ (800223c <HAL_RCC_GetHCLKFreq+0x14>)
 800222e:	681b      	ldr	r3, [r3, #0]
}
 8002230:	4618      	mov	r0, r3
 8002232:	46bd      	mov	sp, r7
 8002234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002238:	4770      	bx	lr
 800223a:	bf00      	nop
 800223c:	20000004 	.word	0x20000004

08002240 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002244:	f7ff fff0 	bl	8002228 <HAL_RCC_GetHCLKFreq>
 8002248:	4602      	mov	r2, r0
 800224a:	4b05      	ldr	r3, [pc, #20]	@ (8002260 <HAL_RCC_GetPCLK1Freq+0x20>)
 800224c:	689b      	ldr	r3, [r3, #8]
 800224e:	0a9b      	lsrs	r3, r3, #10
 8002250:	f003 0307 	and.w	r3, r3, #7
 8002254:	4903      	ldr	r1, [pc, #12]	@ (8002264 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002256:	5ccb      	ldrb	r3, [r1, r3]
 8002258:	fa22 f303 	lsr.w	r3, r2, r3
}
 800225c:	4618      	mov	r0, r3
 800225e:	bd80      	pop	{r7, pc}
 8002260:	40023800 	.word	0x40023800
 8002264:	0800683c 	.word	0x0800683c

08002268 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800226c:	f7ff ffdc 	bl	8002228 <HAL_RCC_GetHCLKFreq>
 8002270:	4602      	mov	r2, r0
 8002272:	4b05      	ldr	r3, [pc, #20]	@ (8002288 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002274:	689b      	ldr	r3, [r3, #8]
 8002276:	0b5b      	lsrs	r3, r3, #13
 8002278:	f003 0307 	and.w	r3, r3, #7
 800227c:	4903      	ldr	r1, [pc, #12]	@ (800228c <HAL_RCC_GetPCLK2Freq+0x24>)
 800227e:	5ccb      	ldrb	r3, [r1, r3]
 8002280:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002284:	4618      	mov	r0, r3
 8002286:	bd80      	pop	{r7, pc}
 8002288:	40023800 	.word	0x40023800
 800228c:	0800683c 	.word	0x0800683c

08002290 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002290:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002294:	b0ae      	sub	sp, #184	@ 0xb8
 8002296:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002298:	2300      	movs	r3, #0
 800229a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 800229e:	2300      	movs	r3, #0
 80022a0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80022a4:	2300      	movs	r3, #0
 80022a6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 80022aa:	2300      	movs	r3, #0
 80022ac:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 80022b0:	2300      	movs	r3, #0
 80022b2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80022b6:	4bcb      	ldr	r3, [pc, #812]	@ (80025e4 <HAL_RCC_GetSysClockFreq+0x354>)
 80022b8:	689b      	ldr	r3, [r3, #8]
 80022ba:	f003 030c 	and.w	r3, r3, #12
 80022be:	2b0c      	cmp	r3, #12
 80022c0:	f200 8206 	bhi.w	80026d0 <HAL_RCC_GetSysClockFreq+0x440>
 80022c4:	a201      	add	r2, pc, #4	@ (adr r2, 80022cc <HAL_RCC_GetSysClockFreq+0x3c>)
 80022c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022ca:	bf00      	nop
 80022cc:	08002301 	.word	0x08002301
 80022d0:	080026d1 	.word	0x080026d1
 80022d4:	080026d1 	.word	0x080026d1
 80022d8:	080026d1 	.word	0x080026d1
 80022dc:	08002309 	.word	0x08002309
 80022e0:	080026d1 	.word	0x080026d1
 80022e4:	080026d1 	.word	0x080026d1
 80022e8:	080026d1 	.word	0x080026d1
 80022ec:	08002311 	.word	0x08002311
 80022f0:	080026d1 	.word	0x080026d1
 80022f4:	080026d1 	.word	0x080026d1
 80022f8:	080026d1 	.word	0x080026d1
 80022fc:	08002501 	.word	0x08002501
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002300:	4bb9      	ldr	r3, [pc, #740]	@ (80025e8 <HAL_RCC_GetSysClockFreq+0x358>)
 8002302:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002306:	e1e7      	b.n	80026d8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002308:	4bb8      	ldr	r3, [pc, #736]	@ (80025ec <HAL_RCC_GetSysClockFreq+0x35c>)
 800230a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800230e:	e1e3      	b.n	80026d8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002310:	4bb4      	ldr	r3, [pc, #720]	@ (80025e4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002318:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800231c:	4bb1      	ldr	r3, [pc, #708]	@ (80025e4 <HAL_RCC_GetSysClockFreq+0x354>)
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002324:	2b00      	cmp	r3, #0
 8002326:	d071      	beq.n	800240c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002328:	4bae      	ldr	r3, [pc, #696]	@ (80025e4 <HAL_RCC_GetSysClockFreq+0x354>)
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	099b      	lsrs	r3, r3, #6
 800232e:	2200      	movs	r2, #0
 8002330:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002334:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8002338:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800233c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002340:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002344:	2300      	movs	r3, #0
 8002346:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800234a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800234e:	4622      	mov	r2, r4
 8002350:	462b      	mov	r3, r5
 8002352:	f04f 0000 	mov.w	r0, #0
 8002356:	f04f 0100 	mov.w	r1, #0
 800235a:	0159      	lsls	r1, r3, #5
 800235c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002360:	0150      	lsls	r0, r2, #5
 8002362:	4602      	mov	r2, r0
 8002364:	460b      	mov	r3, r1
 8002366:	4621      	mov	r1, r4
 8002368:	1a51      	subs	r1, r2, r1
 800236a:	6439      	str	r1, [r7, #64]	@ 0x40
 800236c:	4629      	mov	r1, r5
 800236e:	eb63 0301 	sbc.w	r3, r3, r1
 8002372:	647b      	str	r3, [r7, #68]	@ 0x44
 8002374:	f04f 0200 	mov.w	r2, #0
 8002378:	f04f 0300 	mov.w	r3, #0
 800237c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8002380:	4649      	mov	r1, r9
 8002382:	018b      	lsls	r3, r1, #6
 8002384:	4641      	mov	r1, r8
 8002386:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800238a:	4641      	mov	r1, r8
 800238c:	018a      	lsls	r2, r1, #6
 800238e:	4641      	mov	r1, r8
 8002390:	1a51      	subs	r1, r2, r1
 8002392:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002394:	4649      	mov	r1, r9
 8002396:	eb63 0301 	sbc.w	r3, r3, r1
 800239a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800239c:	f04f 0200 	mov.w	r2, #0
 80023a0:	f04f 0300 	mov.w	r3, #0
 80023a4:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 80023a8:	4649      	mov	r1, r9
 80023aa:	00cb      	lsls	r3, r1, #3
 80023ac:	4641      	mov	r1, r8
 80023ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80023b2:	4641      	mov	r1, r8
 80023b4:	00ca      	lsls	r2, r1, #3
 80023b6:	4610      	mov	r0, r2
 80023b8:	4619      	mov	r1, r3
 80023ba:	4603      	mov	r3, r0
 80023bc:	4622      	mov	r2, r4
 80023be:	189b      	adds	r3, r3, r2
 80023c0:	633b      	str	r3, [r7, #48]	@ 0x30
 80023c2:	462b      	mov	r3, r5
 80023c4:	460a      	mov	r2, r1
 80023c6:	eb42 0303 	adc.w	r3, r2, r3
 80023ca:	637b      	str	r3, [r7, #52]	@ 0x34
 80023cc:	f04f 0200 	mov.w	r2, #0
 80023d0:	f04f 0300 	mov.w	r3, #0
 80023d4:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80023d8:	4629      	mov	r1, r5
 80023da:	024b      	lsls	r3, r1, #9
 80023dc:	4621      	mov	r1, r4
 80023de:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80023e2:	4621      	mov	r1, r4
 80023e4:	024a      	lsls	r2, r1, #9
 80023e6:	4610      	mov	r0, r2
 80023e8:	4619      	mov	r1, r3
 80023ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80023ee:	2200      	movs	r2, #0
 80023f0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80023f4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80023f8:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80023fc:	f7fd ff58 	bl	80002b0 <__aeabi_uldivmod>
 8002400:	4602      	mov	r2, r0
 8002402:	460b      	mov	r3, r1
 8002404:	4613      	mov	r3, r2
 8002406:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800240a:	e067      	b.n	80024dc <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800240c:	4b75      	ldr	r3, [pc, #468]	@ (80025e4 <HAL_RCC_GetSysClockFreq+0x354>)
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	099b      	lsrs	r3, r3, #6
 8002412:	2200      	movs	r2, #0
 8002414:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002418:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 800241c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002420:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002424:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002426:	2300      	movs	r3, #0
 8002428:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800242a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800242e:	4622      	mov	r2, r4
 8002430:	462b      	mov	r3, r5
 8002432:	f04f 0000 	mov.w	r0, #0
 8002436:	f04f 0100 	mov.w	r1, #0
 800243a:	0159      	lsls	r1, r3, #5
 800243c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002440:	0150      	lsls	r0, r2, #5
 8002442:	4602      	mov	r2, r0
 8002444:	460b      	mov	r3, r1
 8002446:	4621      	mov	r1, r4
 8002448:	1a51      	subs	r1, r2, r1
 800244a:	62b9      	str	r1, [r7, #40]	@ 0x28
 800244c:	4629      	mov	r1, r5
 800244e:	eb63 0301 	sbc.w	r3, r3, r1
 8002452:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002454:	f04f 0200 	mov.w	r2, #0
 8002458:	f04f 0300 	mov.w	r3, #0
 800245c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8002460:	4649      	mov	r1, r9
 8002462:	018b      	lsls	r3, r1, #6
 8002464:	4641      	mov	r1, r8
 8002466:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800246a:	4641      	mov	r1, r8
 800246c:	018a      	lsls	r2, r1, #6
 800246e:	4641      	mov	r1, r8
 8002470:	ebb2 0a01 	subs.w	sl, r2, r1
 8002474:	4649      	mov	r1, r9
 8002476:	eb63 0b01 	sbc.w	fp, r3, r1
 800247a:	f04f 0200 	mov.w	r2, #0
 800247e:	f04f 0300 	mov.w	r3, #0
 8002482:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002486:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800248a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800248e:	4692      	mov	sl, r2
 8002490:	469b      	mov	fp, r3
 8002492:	4623      	mov	r3, r4
 8002494:	eb1a 0303 	adds.w	r3, sl, r3
 8002498:	623b      	str	r3, [r7, #32]
 800249a:	462b      	mov	r3, r5
 800249c:	eb4b 0303 	adc.w	r3, fp, r3
 80024a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80024a2:	f04f 0200 	mov.w	r2, #0
 80024a6:	f04f 0300 	mov.w	r3, #0
 80024aa:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80024ae:	4629      	mov	r1, r5
 80024b0:	028b      	lsls	r3, r1, #10
 80024b2:	4621      	mov	r1, r4
 80024b4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80024b8:	4621      	mov	r1, r4
 80024ba:	028a      	lsls	r2, r1, #10
 80024bc:	4610      	mov	r0, r2
 80024be:	4619      	mov	r1, r3
 80024c0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80024c4:	2200      	movs	r2, #0
 80024c6:	673b      	str	r3, [r7, #112]	@ 0x70
 80024c8:	677a      	str	r2, [r7, #116]	@ 0x74
 80024ca:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80024ce:	f7fd feef 	bl	80002b0 <__aeabi_uldivmod>
 80024d2:	4602      	mov	r2, r0
 80024d4:	460b      	mov	r3, r1
 80024d6:	4613      	mov	r3, r2
 80024d8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80024dc:	4b41      	ldr	r3, [pc, #260]	@ (80025e4 <HAL_RCC_GetSysClockFreq+0x354>)
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	0c1b      	lsrs	r3, r3, #16
 80024e2:	f003 0303 	and.w	r3, r3, #3
 80024e6:	3301      	adds	r3, #1
 80024e8:	005b      	lsls	r3, r3, #1
 80024ea:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 80024ee:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80024f2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80024f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80024fa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80024fe:	e0eb      	b.n	80026d8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002500:	4b38      	ldr	r3, [pc, #224]	@ (80025e4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002508:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800250c:	4b35      	ldr	r3, [pc, #212]	@ (80025e4 <HAL_RCC_GetSysClockFreq+0x354>)
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002514:	2b00      	cmp	r3, #0
 8002516:	d06b      	beq.n	80025f0 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002518:	4b32      	ldr	r3, [pc, #200]	@ (80025e4 <HAL_RCC_GetSysClockFreq+0x354>)
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	099b      	lsrs	r3, r3, #6
 800251e:	2200      	movs	r2, #0
 8002520:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002522:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002524:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002526:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800252a:	663b      	str	r3, [r7, #96]	@ 0x60
 800252c:	2300      	movs	r3, #0
 800252e:	667b      	str	r3, [r7, #100]	@ 0x64
 8002530:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8002534:	4622      	mov	r2, r4
 8002536:	462b      	mov	r3, r5
 8002538:	f04f 0000 	mov.w	r0, #0
 800253c:	f04f 0100 	mov.w	r1, #0
 8002540:	0159      	lsls	r1, r3, #5
 8002542:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002546:	0150      	lsls	r0, r2, #5
 8002548:	4602      	mov	r2, r0
 800254a:	460b      	mov	r3, r1
 800254c:	4621      	mov	r1, r4
 800254e:	1a51      	subs	r1, r2, r1
 8002550:	61b9      	str	r1, [r7, #24]
 8002552:	4629      	mov	r1, r5
 8002554:	eb63 0301 	sbc.w	r3, r3, r1
 8002558:	61fb      	str	r3, [r7, #28]
 800255a:	f04f 0200 	mov.w	r2, #0
 800255e:	f04f 0300 	mov.w	r3, #0
 8002562:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002566:	4659      	mov	r1, fp
 8002568:	018b      	lsls	r3, r1, #6
 800256a:	4651      	mov	r1, sl
 800256c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002570:	4651      	mov	r1, sl
 8002572:	018a      	lsls	r2, r1, #6
 8002574:	4651      	mov	r1, sl
 8002576:	ebb2 0801 	subs.w	r8, r2, r1
 800257a:	4659      	mov	r1, fp
 800257c:	eb63 0901 	sbc.w	r9, r3, r1
 8002580:	f04f 0200 	mov.w	r2, #0
 8002584:	f04f 0300 	mov.w	r3, #0
 8002588:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800258c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002590:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002594:	4690      	mov	r8, r2
 8002596:	4699      	mov	r9, r3
 8002598:	4623      	mov	r3, r4
 800259a:	eb18 0303 	adds.w	r3, r8, r3
 800259e:	613b      	str	r3, [r7, #16]
 80025a0:	462b      	mov	r3, r5
 80025a2:	eb49 0303 	adc.w	r3, r9, r3
 80025a6:	617b      	str	r3, [r7, #20]
 80025a8:	f04f 0200 	mov.w	r2, #0
 80025ac:	f04f 0300 	mov.w	r3, #0
 80025b0:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80025b4:	4629      	mov	r1, r5
 80025b6:	024b      	lsls	r3, r1, #9
 80025b8:	4621      	mov	r1, r4
 80025ba:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80025be:	4621      	mov	r1, r4
 80025c0:	024a      	lsls	r2, r1, #9
 80025c2:	4610      	mov	r0, r2
 80025c4:	4619      	mov	r1, r3
 80025c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80025ca:	2200      	movs	r2, #0
 80025cc:	65bb      	str	r3, [r7, #88]	@ 0x58
 80025ce:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80025d0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80025d4:	f7fd fe6c 	bl	80002b0 <__aeabi_uldivmod>
 80025d8:	4602      	mov	r2, r0
 80025da:	460b      	mov	r3, r1
 80025dc:	4613      	mov	r3, r2
 80025de:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80025e2:	e065      	b.n	80026b0 <HAL_RCC_GetSysClockFreq+0x420>
 80025e4:	40023800 	.word	0x40023800
 80025e8:	00f42400 	.word	0x00f42400
 80025ec:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025f0:	4b3d      	ldr	r3, [pc, #244]	@ (80026e8 <HAL_RCC_GetSysClockFreq+0x458>)
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	099b      	lsrs	r3, r3, #6
 80025f6:	2200      	movs	r2, #0
 80025f8:	4618      	mov	r0, r3
 80025fa:	4611      	mov	r1, r2
 80025fc:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002600:	653b      	str	r3, [r7, #80]	@ 0x50
 8002602:	2300      	movs	r3, #0
 8002604:	657b      	str	r3, [r7, #84]	@ 0x54
 8002606:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800260a:	4642      	mov	r2, r8
 800260c:	464b      	mov	r3, r9
 800260e:	f04f 0000 	mov.w	r0, #0
 8002612:	f04f 0100 	mov.w	r1, #0
 8002616:	0159      	lsls	r1, r3, #5
 8002618:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800261c:	0150      	lsls	r0, r2, #5
 800261e:	4602      	mov	r2, r0
 8002620:	460b      	mov	r3, r1
 8002622:	4641      	mov	r1, r8
 8002624:	1a51      	subs	r1, r2, r1
 8002626:	60b9      	str	r1, [r7, #8]
 8002628:	4649      	mov	r1, r9
 800262a:	eb63 0301 	sbc.w	r3, r3, r1
 800262e:	60fb      	str	r3, [r7, #12]
 8002630:	f04f 0200 	mov.w	r2, #0
 8002634:	f04f 0300 	mov.w	r3, #0
 8002638:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800263c:	4659      	mov	r1, fp
 800263e:	018b      	lsls	r3, r1, #6
 8002640:	4651      	mov	r1, sl
 8002642:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002646:	4651      	mov	r1, sl
 8002648:	018a      	lsls	r2, r1, #6
 800264a:	4651      	mov	r1, sl
 800264c:	1a54      	subs	r4, r2, r1
 800264e:	4659      	mov	r1, fp
 8002650:	eb63 0501 	sbc.w	r5, r3, r1
 8002654:	f04f 0200 	mov.w	r2, #0
 8002658:	f04f 0300 	mov.w	r3, #0
 800265c:	00eb      	lsls	r3, r5, #3
 800265e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002662:	00e2      	lsls	r2, r4, #3
 8002664:	4614      	mov	r4, r2
 8002666:	461d      	mov	r5, r3
 8002668:	4643      	mov	r3, r8
 800266a:	18e3      	adds	r3, r4, r3
 800266c:	603b      	str	r3, [r7, #0]
 800266e:	464b      	mov	r3, r9
 8002670:	eb45 0303 	adc.w	r3, r5, r3
 8002674:	607b      	str	r3, [r7, #4]
 8002676:	f04f 0200 	mov.w	r2, #0
 800267a:	f04f 0300 	mov.w	r3, #0
 800267e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002682:	4629      	mov	r1, r5
 8002684:	028b      	lsls	r3, r1, #10
 8002686:	4621      	mov	r1, r4
 8002688:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800268c:	4621      	mov	r1, r4
 800268e:	028a      	lsls	r2, r1, #10
 8002690:	4610      	mov	r0, r2
 8002692:	4619      	mov	r1, r3
 8002694:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002698:	2200      	movs	r2, #0
 800269a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800269c:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800269e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80026a2:	f7fd fe05 	bl	80002b0 <__aeabi_uldivmod>
 80026a6:	4602      	mov	r2, r0
 80026a8:	460b      	mov	r3, r1
 80026aa:	4613      	mov	r3, r2
 80026ac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80026b0:	4b0d      	ldr	r3, [pc, #52]	@ (80026e8 <HAL_RCC_GetSysClockFreq+0x458>)
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	0f1b      	lsrs	r3, r3, #28
 80026b6:	f003 0307 	and.w	r3, r3, #7
 80026ba:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 80026be:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80026c2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80026c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80026ca:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80026ce:	e003      	b.n	80026d8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80026d0:	4b06      	ldr	r3, [pc, #24]	@ (80026ec <HAL_RCC_GetSysClockFreq+0x45c>)
 80026d2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80026d6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80026d8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 80026dc:	4618      	mov	r0, r3
 80026de:	37b8      	adds	r7, #184	@ 0xb8
 80026e0:	46bd      	mov	sp, r7
 80026e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80026e6:	bf00      	nop
 80026e8:	40023800 	.word	0x40023800
 80026ec:	00f42400 	.word	0x00f42400

080026f0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b086      	sub	sp, #24
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d101      	bne.n	8002702 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80026fe:	2301      	movs	r3, #1
 8002700:	e28d      	b.n	8002c1e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f003 0301 	and.w	r3, r3, #1
 800270a:	2b00      	cmp	r3, #0
 800270c:	f000 8083 	beq.w	8002816 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002710:	4b94      	ldr	r3, [pc, #592]	@ (8002964 <HAL_RCC_OscConfig+0x274>)
 8002712:	689b      	ldr	r3, [r3, #8]
 8002714:	f003 030c 	and.w	r3, r3, #12
 8002718:	2b04      	cmp	r3, #4
 800271a:	d019      	beq.n	8002750 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800271c:	4b91      	ldr	r3, [pc, #580]	@ (8002964 <HAL_RCC_OscConfig+0x274>)
 800271e:	689b      	ldr	r3, [r3, #8]
 8002720:	f003 030c 	and.w	r3, r3, #12
        || \
 8002724:	2b08      	cmp	r3, #8
 8002726:	d106      	bne.n	8002736 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002728:	4b8e      	ldr	r3, [pc, #568]	@ (8002964 <HAL_RCC_OscConfig+0x274>)
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002730:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002734:	d00c      	beq.n	8002750 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002736:	4b8b      	ldr	r3, [pc, #556]	@ (8002964 <HAL_RCC_OscConfig+0x274>)
 8002738:	689b      	ldr	r3, [r3, #8]
 800273a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800273e:	2b0c      	cmp	r3, #12
 8002740:	d112      	bne.n	8002768 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002742:	4b88      	ldr	r3, [pc, #544]	@ (8002964 <HAL_RCC_OscConfig+0x274>)
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800274a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800274e:	d10b      	bne.n	8002768 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002750:	4b84      	ldr	r3, [pc, #528]	@ (8002964 <HAL_RCC_OscConfig+0x274>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002758:	2b00      	cmp	r3, #0
 800275a:	d05b      	beq.n	8002814 <HAL_RCC_OscConfig+0x124>
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d157      	bne.n	8002814 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002764:	2301      	movs	r3, #1
 8002766:	e25a      	b.n	8002c1e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002770:	d106      	bne.n	8002780 <HAL_RCC_OscConfig+0x90>
 8002772:	4b7c      	ldr	r3, [pc, #496]	@ (8002964 <HAL_RCC_OscConfig+0x274>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4a7b      	ldr	r2, [pc, #492]	@ (8002964 <HAL_RCC_OscConfig+0x274>)
 8002778:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800277c:	6013      	str	r3, [r2, #0]
 800277e:	e01d      	b.n	80027bc <HAL_RCC_OscConfig+0xcc>
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002788:	d10c      	bne.n	80027a4 <HAL_RCC_OscConfig+0xb4>
 800278a:	4b76      	ldr	r3, [pc, #472]	@ (8002964 <HAL_RCC_OscConfig+0x274>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4a75      	ldr	r2, [pc, #468]	@ (8002964 <HAL_RCC_OscConfig+0x274>)
 8002790:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002794:	6013      	str	r3, [r2, #0]
 8002796:	4b73      	ldr	r3, [pc, #460]	@ (8002964 <HAL_RCC_OscConfig+0x274>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4a72      	ldr	r2, [pc, #456]	@ (8002964 <HAL_RCC_OscConfig+0x274>)
 800279c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80027a0:	6013      	str	r3, [r2, #0]
 80027a2:	e00b      	b.n	80027bc <HAL_RCC_OscConfig+0xcc>
 80027a4:	4b6f      	ldr	r3, [pc, #444]	@ (8002964 <HAL_RCC_OscConfig+0x274>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a6e      	ldr	r2, [pc, #440]	@ (8002964 <HAL_RCC_OscConfig+0x274>)
 80027aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80027ae:	6013      	str	r3, [r2, #0]
 80027b0:	4b6c      	ldr	r3, [pc, #432]	@ (8002964 <HAL_RCC_OscConfig+0x274>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a6b      	ldr	r2, [pc, #428]	@ (8002964 <HAL_RCC_OscConfig+0x274>)
 80027b6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80027ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d013      	beq.n	80027ec <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027c4:	f7ff f92a 	bl	8001a1c <HAL_GetTick>
 80027c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027ca:	e008      	b.n	80027de <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027cc:	f7ff f926 	bl	8001a1c <HAL_GetTick>
 80027d0:	4602      	mov	r2, r0
 80027d2:	693b      	ldr	r3, [r7, #16]
 80027d4:	1ad3      	subs	r3, r2, r3
 80027d6:	2b64      	cmp	r3, #100	@ 0x64
 80027d8:	d901      	bls.n	80027de <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80027da:	2303      	movs	r3, #3
 80027dc:	e21f      	b.n	8002c1e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027de:	4b61      	ldr	r3, [pc, #388]	@ (8002964 <HAL_RCC_OscConfig+0x274>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d0f0      	beq.n	80027cc <HAL_RCC_OscConfig+0xdc>
 80027ea:	e014      	b.n	8002816 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027ec:	f7ff f916 	bl	8001a1c <HAL_GetTick>
 80027f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027f2:	e008      	b.n	8002806 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027f4:	f7ff f912 	bl	8001a1c <HAL_GetTick>
 80027f8:	4602      	mov	r2, r0
 80027fa:	693b      	ldr	r3, [r7, #16]
 80027fc:	1ad3      	subs	r3, r2, r3
 80027fe:	2b64      	cmp	r3, #100	@ 0x64
 8002800:	d901      	bls.n	8002806 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002802:	2303      	movs	r3, #3
 8002804:	e20b      	b.n	8002c1e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002806:	4b57      	ldr	r3, [pc, #348]	@ (8002964 <HAL_RCC_OscConfig+0x274>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800280e:	2b00      	cmp	r3, #0
 8002810:	d1f0      	bne.n	80027f4 <HAL_RCC_OscConfig+0x104>
 8002812:	e000      	b.n	8002816 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002814:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f003 0302 	and.w	r3, r3, #2
 800281e:	2b00      	cmp	r3, #0
 8002820:	d06f      	beq.n	8002902 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002822:	4b50      	ldr	r3, [pc, #320]	@ (8002964 <HAL_RCC_OscConfig+0x274>)
 8002824:	689b      	ldr	r3, [r3, #8]
 8002826:	f003 030c 	and.w	r3, r3, #12
 800282a:	2b00      	cmp	r3, #0
 800282c:	d017      	beq.n	800285e <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800282e:	4b4d      	ldr	r3, [pc, #308]	@ (8002964 <HAL_RCC_OscConfig+0x274>)
 8002830:	689b      	ldr	r3, [r3, #8]
 8002832:	f003 030c 	and.w	r3, r3, #12
        || \
 8002836:	2b08      	cmp	r3, #8
 8002838:	d105      	bne.n	8002846 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800283a:	4b4a      	ldr	r3, [pc, #296]	@ (8002964 <HAL_RCC_OscConfig+0x274>)
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002842:	2b00      	cmp	r3, #0
 8002844:	d00b      	beq.n	800285e <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002846:	4b47      	ldr	r3, [pc, #284]	@ (8002964 <HAL_RCC_OscConfig+0x274>)
 8002848:	689b      	ldr	r3, [r3, #8]
 800284a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800284e:	2b0c      	cmp	r3, #12
 8002850:	d11c      	bne.n	800288c <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002852:	4b44      	ldr	r3, [pc, #272]	@ (8002964 <HAL_RCC_OscConfig+0x274>)
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800285a:	2b00      	cmp	r3, #0
 800285c:	d116      	bne.n	800288c <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800285e:	4b41      	ldr	r3, [pc, #260]	@ (8002964 <HAL_RCC_OscConfig+0x274>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f003 0302 	and.w	r3, r3, #2
 8002866:	2b00      	cmp	r3, #0
 8002868:	d005      	beq.n	8002876 <HAL_RCC_OscConfig+0x186>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	68db      	ldr	r3, [r3, #12]
 800286e:	2b01      	cmp	r3, #1
 8002870:	d001      	beq.n	8002876 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002872:	2301      	movs	r3, #1
 8002874:	e1d3      	b.n	8002c1e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002876:	4b3b      	ldr	r3, [pc, #236]	@ (8002964 <HAL_RCC_OscConfig+0x274>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	691b      	ldr	r3, [r3, #16]
 8002882:	00db      	lsls	r3, r3, #3
 8002884:	4937      	ldr	r1, [pc, #220]	@ (8002964 <HAL_RCC_OscConfig+0x274>)
 8002886:	4313      	orrs	r3, r2
 8002888:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800288a:	e03a      	b.n	8002902 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	68db      	ldr	r3, [r3, #12]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d020      	beq.n	80028d6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002894:	4b34      	ldr	r3, [pc, #208]	@ (8002968 <HAL_RCC_OscConfig+0x278>)
 8002896:	2201      	movs	r2, #1
 8002898:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800289a:	f7ff f8bf 	bl	8001a1c <HAL_GetTick>
 800289e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028a0:	e008      	b.n	80028b4 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028a2:	f7ff f8bb 	bl	8001a1c <HAL_GetTick>
 80028a6:	4602      	mov	r2, r0
 80028a8:	693b      	ldr	r3, [r7, #16]
 80028aa:	1ad3      	subs	r3, r2, r3
 80028ac:	2b02      	cmp	r3, #2
 80028ae:	d901      	bls.n	80028b4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80028b0:	2303      	movs	r3, #3
 80028b2:	e1b4      	b.n	8002c1e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028b4:	4b2b      	ldr	r3, [pc, #172]	@ (8002964 <HAL_RCC_OscConfig+0x274>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f003 0302 	and.w	r3, r3, #2
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d0f0      	beq.n	80028a2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028c0:	4b28      	ldr	r3, [pc, #160]	@ (8002964 <HAL_RCC_OscConfig+0x274>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	691b      	ldr	r3, [r3, #16]
 80028cc:	00db      	lsls	r3, r3, #3
 80028ce:	4925      	ldr	r1, [pc, #148]	@ (8002964 <HAL_RCC_OscConfig+0x274>)
 80028d0:	4313      	orrs	r3, r2
 80028d2:	600b      	str	r3, [r1, #0]
 80028d4:	e015      	b.n	8002902 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028d6:	4b24      	ldr	r3, [pc, #144]	@ (8002968 <HAL_RCC_OscConfig+0x278>)
 80028d8:	2200      	movs	r2, #0
 80028da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028dc:	f7ff f89e 	bl	8001a1c <HAL_GetTick>
 80028e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028e2:	e008      	b.n	80028f6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028e4:	f7ff f89a 	bl	8001a1c <HAL_GetTick>
 80028e8:	4602      	mov	r2, r0
 80028ea:	693b      	ldr	r3, [r7, #16]
 80028ec:	1ad3      	subs	r3, r2, r3
 80028ee:	2b02      	cmp	r3, #2
 80028f0:	d901      	bls.n	80028f6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80028f2:	2303      	movs	r3, #3
 80028f4:	e193      	b.n	8002c1e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028f6:	4b1b      	ldr	r3, [pc, #108]	@ (8002964 <HAL_RCC_OscConfig+0x274>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f003 0302 	and.w	r3, r3, #2
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d1f0      	bne.n	80028e4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f003 0308 	and.w	r3, r3, #8
 800290a:	2b00      	cmp	r3, #0
 800290c:	d036      	beq.n	800297c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	695b      	ldr	r3, [r3, #20]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d016      	beq.n	8002944 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002916:	4b15      	ldr	r3, [pc, #84]	@ (800296c <HAL_RCC_OscConfig+0x27c>)
 8002918:	2201      	movs	r2, #1
 800291a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800291c:	f7ff f87e 	bl	8001a1c <HAL_GetTick>
 8002920:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002922:	e008      	b.n	8002936 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002924:	f7ff f87a 	bl	8001a1c <HAL_GetTick>
 8002928:	4602      	mov	r2, r0
 800292a:	693b      	ldr	r3, [r7, #16]
 800292c:	1ad3      	subs	r3, r2, r3
 800292e:	2b02      	cmp	r3, #2
 8002930:	d901      	bls.n	8002936 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002932:	2303      	movs	r3, #3
 8002934:	e173      	b.n	8002c1e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002936:	4b0b      	ldr	r3, [pc, #44]	@ (8002964 <HAL_RCC_OscConfig+0x274>)
 8002938:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800293a:	f003 0302 	and.w	r3, r3, #2
 800293e:	2b00      	cmp	r3, #0
 8002940:	d0f0      	beq.n	8002924 <HAL_RCC_OscConfig+0x234>
 8002942:	e01b      	b.n	800297c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002944:	4b09      	ldr	r3, [pc, #36]	@ (800296c <HAL_RCC_OscConfig+0x27c>)
 8002946:	2200      	movs	r2, #0
 8002948:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800294a:	f7ff f867 	bl	8001a1c <HAL_GetTick>
 800294e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002950:	e00e      	b.n	8002970 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002952:	f7ff f863 	bl	8001a1c <HAL_GetTick>
 8002956:	4602      	mov	r2, r0
 8002958:	693b      	ldr	r3, [r7, #16]
 800295a:	1ad3      	subs	r3, r2, r3
 800295c:	2b02      	cmp	r3, #2
 800295e:	d907      	bls.n	8002970 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002960:	2303      	movs	r3, #3
 8002962:	e15c      	b.n	8002c1e <HAL_RCC_OscConfig+0x52e>
 8002964:	40023800 	.word	0x40023800
 8002968:	42470000 	.word	0x42470000
 800296c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002970:	4b8a      	ldr	r3, [pc, #552]	@ (8002b9c <HAL_RCC_OscConfig+0x4ac>)
 8002972:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002974:	f003 0302 	and.w	r3, r3, #2
 8002978:	2b00      	cmp	r3, #0
 800297a:	d1ea      	bne.n	8002952 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f003 0304 	and.w	r3, r3, #4
 8002984:	2b00      	cmp	r3, #0
 8002986:	f000 8097 	beq.w	8002ab8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800298a:	2300      	movs	r3, #0
 800298c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800298e:	4b83      	ldr	r3, [pc, #524]	@ (8002b9c <HAL_RCC_OscConfig+0x4ac>)
 8002990:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002992:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002996:	2b00      	cmp	r3, #0
 8002998:	d10f      	bne.n	80029ba <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800299a:	2300      	movs	r3, #0
 800299c:	60bb      	str	r3, [r7, #8]
 800299e:	4b7f      	ldr	r3, [pc, #508]	@ (8002b9c <HAL_RCC_OscConfig+0x4ac>)
 80029a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029a2:	4a7e      	ldr	r2, [pc, #504]	@ (8002b9c <HAL_RCC_OscConfig+0x4ac>)
 80029a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80029a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80029aa:	4b7c      	ldr	r3, [pc, #496]	@ (8002b9c <HAL_RCC_OscConfig+0x4ac>)
 80029ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029b2:	60bb      	str	r3, [r7, #8]
 80029b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029b6:	2301      	movs	r3, #1
 80029b8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029ba:	4b79      	ldr	r3, [pc, #484]	@ (8002ba0 <HAL_RCC_OscConfig+0x4b0>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d118      	bne.n	80029f8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80029c6:	4b76      	ldr	r3, [pc, #472]	@ (8002ba0 <HAL_RCC_OscConfig+0x4b0>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4a75      	ldr	r2, [pc, #468]	@ (8002ba0 <HAL_RCC_OscConfig+0x4b0>)
 80029cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80029d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029d2:	f7ff f823 	bl	8001a1c <HAL_GetTick>
 80029d6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029d8:	e008      	b.n	80029ec <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029da:	f7ff f81f 	bl	8001a1c <HAL_GetTick>
 80029de:	4602      	mov	r2, r0
 80029e0:	693b      	ldr	r3, [r7, #16]
 80029e2:	1ad3      	subs	r3, r2, r3
 80029e4:	2b02      	cmp	r3, #2
 80029e6:	d901      	bls.n	80029ec <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80029e8:	2303      	movs	r3, #3
 80029ea:	e118      	b.n	8002c1e <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029ec:	4b6c      	ldr	r3, [pc, #432]	@ (8002ba0 <HAL_RCC_OscConfig+0x4b0>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d0f0      	beq.n	80029da <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	689b      	ldr	r3, [r3, #8]
 80029fc:	2b01      	cmp	r3, #1
 80029fe:	d106      	bne.n	8002a0e <HAL_RCC_OscConfig+0x31e>
 8002a00:	4b66      	ldr	r3, [pc, #408]	@ (8002b9c <HAL_RCC_OscConfig+0x4ac>)
 8002a02:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a04:	4a65      	ldr	r2, [pc, #404]	@ (8002b9c <HAL_RCC_OscConfig+0x4ac>)
 8002a06:	f043 0301 	orr.w	r3, r3, #1
 8002a0a:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a0c:	e01c      	b.n	8002a48 <HAL_RCC_OscConfig+0x358>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	689b      	ldr	r3, [r3, #8]
 8002a12:	2b05      	cmp	r3, #5
 8002a14:	d10c      	bne.n	8002a30 <HAL_RCC_OscConfig+0x340>
 8002a16:	4b61      	ldr	r3, [pc, #388]	@ (8002b9c <HAL_RCC_OscConfig+0x4ac>)
 8002a18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a1a:	4a60      	ldr	r2, [pc, #384]	@ (8002b9c <HAL_RCC_OscConfig+0x4ac>)
 8002a1c:	f043 0304 	orr.w	r3, r3, #4
 8002a20:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a22:	4b5e      	ldr	r3, [pc, #376]	@ (8002b9c <HAL_RCC_OscConfig+0x4ac>)
 8002a24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a26:	4a5d      	ldr	r2, [pc, #372]	@ (8002b9c <HAL_RCC_OscConfig+0x4ac>)
 8002a28:	f043 0301 	orr.w	r3, r3, #1
 8002a2c:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a2e:	e00b      	b.n	8002a48 <HAL_RCC_OscConfig+0x358>
 8002a30:	4b5a      	ldr	r3, [pc, #360]	@ (8002b9c <HAL_RCC_OscConfig+0x4ac>)
 8002a32:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a34:	4a59      	ldr	r2, [pc, #356]	@ (8002b9c <HAL_RCC_OscConfig+0x4ac>)
 8002a36:	f023 0301 	bic.w	r3, r3, #1
 8002a3a:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a3c:	4b57      	ldr	r3, [pc, #348]	@ (8002b9c <HAL_RCC_OscConfig+0x4ac>)
 8002a3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a40:	4a56      	ldr	r2, [pc, #344]	@ (8002b9c <HAL_RCC_OscConfig+0x4ac>)
 8002a42:	f023 0304 	bic.w	r3, r3, #4
 8002a46:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	689b      	ldr	r3, [r3, #8]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d015      	beq.n	8002a7c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a50:	f7fe ffe4 	bl	8001a1c <HAL_GetTick>
 8002a54:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a56:	e00a      	b.n	8002a6e <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a58:	f7fe ffe0 	bl	8001a1c <HAL_GetTick>
 8002a5c:	4602      	mov	r2, r0
 8002a5e:	693b      	ldr	r3, [r7, #16]
 8002a60:	1ad3      	subs	r3, r2, r3
 8002a62:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d901      	bls.n	8002a6e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002a6a:	2303      	movs	r3, #3
 8002a6c:	e0d7      	b.n	8002c1e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a6e:	4b4b      	ldr	r3, [pc, #300]	@ (8002b9c <HAL_RCC_OscConfig+0x4ac>)
 8002a70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a72:	f003 0302 	and.w	r3, r3, #2
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d0ee      	beq.n	8002a58 <HAL_RCC_OscConfig+0x368>
 8002a7a:	e014      	b.n	8002aa6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a7c:	f7fe ffce 	bl	8001a1c <HAL_GetTick>
 8002a80:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a82:	e00a      	b.n	8002a9a <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a84:	f7fe ffca 	bl	8001a1c <HAL_GetTick>
 8002a88:	4602      	mov	r2, r0
 8002a8a:	693b      	ldr	r3, [r7, #16]
 8002a8c:	1ad3      	subs	r3, r2, r3
 8002a8e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d901      	bls.n	8002a9a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002a96:	2303      	movs	r3, #3
 8002a98:	e0c1      	b.n	8002c1e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a9a:	4b40      	ldr	r3, [pc, #256]	@ (8002b9c <HAL_RCC_OscConfig+0x4ac>)
 8002a9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a9e:	f003 0302 	and.w	r3, r3, #2
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d1ee      	bne.n	8002a84 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002aa6:	7dfb      	ldrb	r3, [r7, #23]
 8002aa8:	2b01      	cmp	r3, #1
 8002aaa:	d105      	bne.n	8002ab8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002aac:	4b3b      	ldr	r3, [pc, #236]	@ (8002b9c <HAL_RCC_OscConfig+0x4ac>)
 8002aae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ab0:	4a3a      	ldr	r2, [pc, #232]	@ (8002b9c <HAL_RCC_OscConfig+0x4ac>)
 8002ab2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002ab6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	699b      	ldr	r3, [r3, #24]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	f000 80ad 	beq.w	8002c1c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002ac2:	4b36      	ldr	r3, [pc, #216]	@ (8002b9c <HAL_RCC_OscConfig+0x4ac>)
 8002ac4:	689b      	ldr	r3, [r3, #8]
 8002ac6:	f003 030c 	and.w	r3, r3, #12
 8002aca:	2b08      	cmp	r3, #8
 8002acc:	d060      	beq.n	8002b90 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	699b      	ldr	r3, [r3, #24]
 8002ad2:	2b02      	cmp	r3, #2
 8002ad4:	d145      	bne.n	8002b62 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ad6:	4b33      	ldr	r3, [pc, #204]	@ (8002ba4 <HAL_RCC_OscConfig+0x4b4>)
 8002ad8:	2200      	movs	r2, #0
 8002ada:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002adc:	f7fe ff9e 	bl	8001a1c <HAL_GetTick>
 8002ae0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ae2:	e008      	b.n	8002af6 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ae4:	f7fe ff9a 	bl	8001a1c <HAL_GetTick>
 8002ae8:	4602      	mov	r2, r0
 8002aea:	693b      	ldr	r3, [r7, #16]
 8002aec:	1ad3      	subs	r3, r2, r3
 8002aee:	2b02      	cmp	r3, #2
 8002af0:	d901      	bls.n	8002af6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002af2:	2303      	movs	r3, #3
 8002af4:	e093      	b.n	8002c1e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002af6:	4b29      	ldr	r3, [pc, #164]	@ (8002b9c <HAL_RCC_OscConfig+0x4ac>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d1f0      	bne.n	8002ae4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	69da      	ldr	r2, [r3, #28]
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6a1b      	ldr	r3, [r3, #32]
 8002b0a:	431a      	orrs	r2, r3
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b10:	019b      	lsls	r3, r3, #6
 8002b12:	431a      	orrs	r2, r3
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b18:	085b      	lsrs	r3, r3, #1
 8002b1a:	3b01      	subs	r3, #1
 8002b1c:	041b      	lsls	r3, r3, #16
 8002b1e:	431a      	orrs	r2, r3
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b24:	061b      	lsls	r3, r3, #24
 8002b26:	431a      	orrs	r2, r3
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b2c:	071b      	lsls	r3, r3, #28
 8002b2e:	491b      	ldr	r1, [pc, #108]	@ (8002b9c <HAL_RCC_OscConfig+0x4ac>)
 8002b30:	4313      	orrs	r3, r2
 8002b32:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b34:	4b1b      	ldr	r3, [pc, #108]	@ (8002ba4 <HAL_RCC_OscConfig+0x4b4>)
 8002b36:	2201      	movs	r2, #1
 8002b38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b3a:	f7fe ff6f 	bl	8001a1c <HAL_GetTick>
 8002b3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b40:	e008      	b.n	8002b54 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b42:	f7fe ff6b 	bl	8001a1c <HAL_GetTick>
 8002b46:	4602      	mov	r2, r0
 8002b48:	693b      	ldr	r3, [r7, #16]
 8002b4a:	1ad3      	subs	r3, r2, r3
 8002b4c:	2b02      	cmp	r3, #2
 8002b4e:	d901      	bls.n	8002b54 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002b50:	2303      	movs	r3, #3
 8002b52:	e064      	b.n	8002c1e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b54:	4b11      	ldr	r3, [pc, #68]	@ (8002b9c <HAL_RCC_OscConfig+0x4ac>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d0f0      	beq.n	8002b42 <HAL_RCC_OscConfig+0x452>
 8002b60:	e05c      	b.n	8002c1c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b62:	4b10      	ldr	r3, [pc, #64]	@ (8002ba4 <HAL_RCC_OscConfig+0x4b4>)
 8002b64:	2200      	movs	r2, #0
 8002b66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b68:	f7fe ff58 	bl	8001a1c <HAL_GetTick>
 8002b6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b6e:	e008      	b.n	8002b82 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b70:	f7fe ff54 	bl	8001a1c <HAL_GetTick>
 8002b74:	4602      	mov	r2, r0
 8002b76:	693b      	ldr	r3, [r7, #16]
 8002b78:	1ad3      	subs	r3, r2, r3
 8002b7a:	2b02      	cmp	r3, #2
 8002b7c:	d901      	bls.n	8002b82 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002b7e:	2303      	movs	r3, #3
 8002b80:	e04d      	b.n	8002c1e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b82:	4b06      	ldr	r3, [pc, #24]	@ (8002b9c <HAL_RCC_OscConfig+0x4ac>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d1f0      	bne.n	8002b70 <HAL_RCC_OscConfig+0x480>
 8002b8e:	e045      	b.n	8002c1c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	699b      	ldr	r3, [r3, #24]
 8002b94:	2b01      	cmp	r3, #1
 8002b96:	d107      	bne.n	8002ba8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002b98:	2301      	movs	r3, #1
 8002b9a:	e040      	b.n	8002c1e <HAL_RCC_OscConfig+0x52e>
 8002b9c:	40023800 	.word	0x40023800
 8002ba0:	40007000 	.word	0x40007000
 8002ba4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002ba8:	4b1f      	ldr	r3, [pc, #124]	@ (8002c28 <HAL_RCC_OscConfig+0x538>)
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	699b      	ldr	r3, [r3, #24]
 8002bb2:	2b01      	cmp	r3, #1
 8002bb4:	d030      	beq.n	8002c18 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002bc0:	429a      	cmp	r2, r3
 8002bc2:	d129      	bne.n	8002c18 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bce:	429a      	cmp	r2, r3
 8002bd0:	d122      	bne.n	8002c18 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002bd2:	68fa      	ldr	r2, [r7, #12]
 8002bd4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002bd8:	4013      	ands	r3, r2
 8002bda:	687a      	ldr	r2, [r7, #4]
 8002bdc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002bde:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d119      	bne.n	8002c18 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bee:	085b      	lsrs	r3, r3, #1
 8002bf0:	3b01      	subs	r3, #1
 8002bf2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002bf4:	429a      	cmp	r2, r3
 8002bf6:	d10f      	bne.n	8002c18 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c02:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c04:	429a      	cmp	r2, r3
 8002c06:	d107      	bne.n	8002c18 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c12:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002c14:	429a      	cmp	r2, r3
 8002c16:	d001      	beq.n	8002c1c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002c18:	2301      	movs	r3, #1
 8002c1a:	e000      	b.n	8002c1e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002c1c:	2300      	movs	r3, #0
}
 8002c1e:	4618      	mov	r0, r3
 8002c20:	3718      	adds	r7, #24
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}
 8002c26:	bf00      	nop
 8002c28:	40023800 	.word	0x40023800

08002c2c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b082      	sub	sp, #8
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d101      	bne.n	8002c3e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	e07b      	b.n	8002d36 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d108      	bne.n	8002c58 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002c4e:	d009      	beq.n	8002c64 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2200      	movs	r2, #0
 8002c54:	61da      	str	r2, [r3, #28]
 8002c56:	e005      	b.n	8002c64 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2200      	movs	r2, #0
 8002c62:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2200      	movs	r2, #0
 8002c68:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002c70:	b2db      	uxtb	r3, r3
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d106      	bne.n	8002c84 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2200      	movs	r2, #0
 8002c7a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002c7e:	6878      	ldr	r0, [r7, #4]
 8002c80:	f7fd ffe6 	bl	8000c50 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2202      	movs	r2, #2
 8002c88:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	681a      	ldr	r2, [r3, #0]
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002c9a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	689b      	ldr	r3, [r3, #8]
 8002ca8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002cac:	431a      	orrs	r2, r3
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	68db      	ldr	r3, [r3, #12]
 8002cb2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002cb6:	431a      	orrs	r2, r3
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	691b      	ldr	r3, [r3, #16]
 8002cbc:	f003 0302 	and.w	r3, r3, #2
 8002cc0:	431a      	orrs	r2, r3
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	695b      	ldr	r3, [r3, #20]
 8002cc6:	f003 0301 	and.w	r3, r3, #1
 8002cca:	431a      	orrs	r2, r3
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	699b      	ldr	r3, [r3, #24]
 8002cd0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002cd4:	431a      	orrs	r2, r3
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	69db      	ldr	r3, [r3, #28]
 8002cda:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002cde:	431a      	orrs	r2, r3
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6a1b      	ldr	r3, [r3, #32]
 8002ce4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ce8:	ea42 0103 	orr.w	r1, r2, r3
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cf0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	430a      	orrs	r2, r1
 8002cfa:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	699b      	ldr	r3, [r3, #24]
 8002d00:	0c1b      	lsrs	r3, r3, #16
 8002d02:	f003 0104 	and.w	r1, r3, #4
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d0a:	f003 0210 	and.w	r2, r3, #16
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	430a      	orrs	r2, r1
 8002d14:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	69da      	ldr	r2, [r3, #28]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002d24:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2200      	movs	r2, #0
 8002d2a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2201      	movs	r2, #1
 8002d30:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8002d34:	2300      	movs	r3, #0
}
 8002d36:	4618      	mov	r0, r3
 8002d38:	3708      	adds	r7, #8
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bd80      	pop	{r7, pc}

08002d3e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d3e:	b580      	push	{r7, lr}
 8002d40:	b088      	sub	sp, #32
 8002d42:	af00      	add	r7, sp, #0
 8002d44:	60f8      	str	r0, [r7, #12]
 8002d46:	60b9      	str	r1, [r7, #8]
 8002d48:	603b      	str	r3, [r7, #0]
 8002d4a:	4613      	mov	r3, r2
 8002d4c:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002d4e:	f7fe fe65 	bl	8001a1c <HAL_GetTick>
 8002d52:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8002d54:	88fb      	ldrh	r3, [r7, #6]
 8002d56:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002d5e:	b2db      	uxtb	r3, r3
 8002d60:	2b01      	cmp	r3, #1
 8002d62:	d001      	beq.n	8002d68 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8002d64:	2302      	movs	r3, #2
 8002d66:	e12a      	b.n	8002fbe <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8002d68:	68bb      	ldr	r3, [r7, #8]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d002      	beq.n	8002d74 <HAL_SPI_Transmit+0x36>
 8002d6e:	88fb      	ldrh	r3, [r7, #6]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d101      	bne.n	8002d78 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8002d74:	2301      	movs	r3, #1
 8002d76:	e122      	b.n	8002fbe <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002d7e:	2b01      	cmp	r3, #1
 8002d80:	d101      	bne.n	8002d86 <HAL_SPI_Transmit+0x48>
 8002d82:	2302      	movs	r3, #2
 8002d84:	e11b      	b.n	8002fbe <HAL_SPI_Transmit+0x280>
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	2201      	movs	r2, #1
 8002d8a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	2203      	movs	r2, #3
 8002d92:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	2200      	movs	r2, #0
 8002d9a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	68ba      	ldr	r2, [r7, #8]
 8002da0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	88fa      	ldrh	r2, [r7, #6]
 8002da6:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	88fa      	ldrh	r2, [r7, #6]
 8002dac:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	2200      	movs	r2, #0
 8002db2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	2200      	movs	r2, #0
 8002db8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	2200      	movs	r2, #0
 8002dca:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	689b      	ldr	r3, [r3, #8]
 8002dd0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002dd4:	d10f      	bne.n	8002df6 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	681a      	ldr	r2, [r3, #0]
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002de4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	681a      	ldr	r2, [r3, #0]
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002df4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e00:	2b40      	cmp	r3, #64	@ 0x40
 8002e02:	d007      	beq.n	8002e14 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	681a      	ldr	r2, [r3, #0]
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002e12:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	68db      	ldr	r3, [r3, #12]
 8002e18:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002e1c:	d152      	bne.n	8002ec4 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d002      	beq.n	8002e2c <HAL_SPI_Transmit+0xee>
 8002e26:	8b7b      	ldrh	r3, [r7, #26]
 8002e28:	2b01      	cmp	r3, #1
 8002e2a:	d145      	bne.n	8002eb8 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e30:	881a      	ldrh	r2, [r3, #0]
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e3c:	1c9a      	adds	r2, r3, #2
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002e46:	b29b      	uxth	r3, r3
 8002e48:	3b01      	subs	r3, #1
 8002e4a:	b29a      	uxth	r2, r3
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002e50:	e032      	b.n	8002eb8 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	689b      	ldr	r3, [r3, #8]
 8002e58:	f003 0302 	and.w	r3, r3, #2
 8002e5c:	2b02      	cmp	r3, #2
 8002e5e:	d112      	bne.n	8002e86 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e64:	881a      	ldrh	r2, [r3, #0]
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e70:	1c9a      	adds	r2, r3, #2
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002e7a:	b29b      	uxth	r3, r3
 8002e7c:	3b01      	subs	r3, #1
 8002e7e:	b29a      	uxth	r2, r3
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002e84:	e018      	b.n	8002eb8 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002e86:	f7fe fdc9 	bl	8001a1c <HAL_GetTick>
 8002e8a:	4602      	mov	r2, r0
 8002e8c:	69fb      	ldr	r3, [r7, #28]
 8002e8e:	1ad3      	subs	r3, r2, r3
 8002e90:	683a      	ldr	r2, [r7, #0]
 8002e92:	429a      	cmp	r2, r3
 8002e94:	d803      	bhi.n	8002e9e <HAL_SPI_Transmit+0x160>
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e9c:	d102      	bne.n	8002ea4 <HAL_SPI_Transmit+0x166>
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d109      	bne.n	8002eb8 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	2201      	movs	r2, #1
 8002ea8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	2200      	movs	r2, #0
 8002eb0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002eb4:	2303      	movs	r3, #3
 8002eb6:	e082      	b.n	8002fbe <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002ebc:	b29b      	uxth	r3, r3
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d1c7      	bne.n	8002e52 <HAL_SPI_Transmit+0x114>
 8002ec2:	e053      	b.n	8002f6c <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d002      	beq.n	8002ed2 <HAL_SPI_Transmit+0x194>
 8002ecc:	8b7b      	ldrh	r3, [r7, #26]
 8002ece:	2b01      	cmp	r3, #1
 8002ed0:	d147      	bne.n	8002f62 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	330c      	adds	r3, #12
 8002edc:	7812      	ldrb	r2, [r2, #0]
 8002ede:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ee4:	1c5a      	adds	r2, r3, #1
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002eee:	b29b      	uxth	r3, r3
 8002ef0:	3b01      	subs	r3, #1
 8002ef2:	b29a      	uxth	r2, r3
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002ef8:	e033      	b.n	8002f62 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	689b      	ldr	r3, [r3, #8]
 8002f00:	f003 0302 	and.w	r3, r3, #2
 8002f04:	2b02      	cmp	r3, #2
 8002f06:	d113      	bne.n	8002f30 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	330c      	adds	r3, #12
 8002f12:	7812      	ldrb	r2, [r2, #0]
 8002f14:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f1a:	1c5a      	adds	r2, r3, #1
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002f24:	b29b      	uxth	r3, r3
 8002f26:	3b01      	subs	r3, #1
 8002f28:	b29a      	uxth	r2, r3
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002f2e:	e018      	b.n	8002f62 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002f30:	f7fe fd74 	bl	8001a1c <HAL_GetTick>
 8002f34:	4602      	mov	r2, r0
 8002f36:	69fb      	ldr	r3, [r7, #28]
 8002f38:	1ad3      	subs	r3, r2, r3
 8002f3a:	683a      	ldr	r2, [r7, #0]
 8002f3c:	429a      	cmp	r2, r3
 8002f3e:	d803      	bhi.n	8002f48 <HAL_SPI_Transmit+0x20a>
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f46:	d102      	bne.n	8002f4e <HAL_SPI_Transmit+0x210>
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d109      	bne.n	8002f62 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	2201      	movs	r2, #1
 8002f52:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	2200      	movs	r2, #0
 8002f5a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002f5e:	2303      	movs	r3, #3
 8002f60:	e02d      	b.n	8002fbe <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002f66:	b29b      	uxth	r3, r3
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d1c6      	bne.n	8002efa <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002f6c:	69fa      	ldr	r2, [r7, #28]
 8002f6e:	6839      	ldr	r1, [r7, #0]
 8002f70:	68f8      	ldr	r0, [r7, #12]
 8002f72:	f000 f8b1 	bl	80030d8 <SPI_EndRxTxTransaction>
 8002f76:	4603      	mov	r3, r0
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d002      	beq.n	8002f82 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	2220      	movs	r2, #32
 8002f80:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	689b      	ldr	r3, [r3, #8]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d10a      	bne.n	8002fa0 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	617b      	str	r3, [r7, #20]
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	68db      	ldr	r3, [r3, #12]
 8002f94:	617b      	str	r3, [r7, #20]
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	689b      	ldr	r3, [r3, #8]
 8002f9c:	617b      	str	r3, [r7, #20]
 8002f9e:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	2201      	movs	r2, #1
 8002fa4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	2200      	movs	r2, #0
 8002fac:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d001      	beq.n	8002fbc <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8002fb8:	2301      	movs	r3, #1
 8002fba:	e000      	b.n	8002fbe <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8002fbc:	2300      	movs	r3, #0
  }
}
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	3720      	adds	r7, #32
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bd80      	pop	{r7, pc}
	...

08002fc8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b088      	sub	sp, #32
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	60f8      	str	r0, [r7, #12]
 8002fd0:	60b9      	str	r1, [r7, #8]
 8002fd2:	603b      	str	r3, [r7, #0]
 8002fd4:	4613      	mov	r3, r2
 8002fd6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002fd8:	f7fe fd20 	bl	8001a1c <HAL_GetTick>
 8002fdc:	4602      	mov	r2, r0
 8002fde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fe0:	1a9b      	subs	r3, r3, r2
 8002fe2:	683a      	ldr	r2, [r7, #0]
 8002fe4:	4413      	add	r3, r2
 8002fe6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002fe8:	f7fe fd18 	bl	8001a1c <HAL_GetTick>
 8002fec:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002fee:	4b39      	ldr	r3, [pc, #228]	@ (80030d4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	015b      	lsls	r3, r3, #5
 8002ff4:	0d1b      	lsrs	r3, r3, #20
 8002ff6:	69fa      	ldr	r2, [r7, #28]
 8002ff8:	fb02 f303 	mul.w	r3, r2, r3
 8002ffc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002ffe:	e054      	b.n	80030aa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003006:	d050      	beq.n	80030aa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003008:	f7fe fd08 	bl	8001a1c <HAL_GetTick>
 800300c:	4602      	mov	r2, r0
 800300e:	69bb      	ldr	r3, [r7, #24]
 8003010:	1ad3      	subs	r3, r2, r3
 8003012:	69fa      	ldr	r2, [r7, #28]
 8003014:	429a      	cmp	r2, r3
 8003016:	d902      	bls.n	800301e <SPI_WaitFlagStateUntilTimeout+0x56>
 8003018:	69fb      	ldr	r3, [r7, #28]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d13d      	bne.n	800309a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	685a      	ldr	r2, [r3, #4]
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800302c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003036:	d111      	bne.n	800305c <SPI_WaitFlagStateUntilTimeout+0x94>
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	689b      	ldr	r3, [r3, #8]
 800303c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003040:	d004      	beq.n	800304c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	689b      	ldr	r3, [r3, #8]
 8003046:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800304a:	d107      	bne.n	800305c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	681a      	ldr	r2, [r3, #0]
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800305a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003060:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003064:	d10f      	bne.n	8003086 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	681a      	ldr	r2, [r3, #0]
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003074:	601a      	str	r2, [r3, #0]
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	681a      	ldr	r2, [r3, #0]
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003084:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	2201      	movs	r2, #1
 800308a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	2200      	movs	r2, #0
 8003092:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8003096:	2303      	movs	r3, #3
 8003098:	e017      	b.n	80030ca <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800309a:	697b      	ldr	r3, [r7, #20]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d101      	bne.n	80030a4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80030a0:	2300      	movs	r3, #0
 80030a2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80030a4:	697b      	ldr	r3, [r7, #20]
 80030a6:	3b01      	subs	r3, #1
 80030a8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	689a      	ldr	r2, [r3, #8]
 80030b0:	68bb      	ldr	r3, [r7, #8]
 80030b2:	4013      	ands	r3, r2
 80030b4:	68ba      	ldr	r2, [r7, #8]
 80030b6:	429a      	cmp	r2, r3
 80030b8:	bf0c      	ite	eq
 80030ba:	2301      	moveq	r3, #1
 80030bc:	2300      	movne	r3, #0
 80030be:	b2db      	uxtb	r3, r3
 80030c0:	461a      	mov	r2, r3
 80030c2:	79fb      	ldrb	r3, [r7, #7]
 80030c4:	429a      	cmp	r2, r3
 80030c6:	d19b      	bne.n	8003000 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80030c8:	2300      	movs	r3, #0
}
 80030ca:	4618      	mov	r0, r3
 80030cc:	3720      	adds	r7, #32
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bd80      	pop	{r7, pc}
 80030d2:	bf00      	nop
 80030d4:	20000004 	.word	0x20000004

080030d8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b088      	sub	sp, #32
 80030dc:	af02      	add	r7, sp, #8
 80030de:	60f8      	str	r0, [r7, #12]
 80030e0:	60b9      	str	r1, [r7, #8]
 80030e2:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	9300      	str	r3, [sp, #0]
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	2201      	movs	r2, #1
 80030ec:	2102      	movs	r1, #2
 80030ee:	68f8      	ldr	r0, [r7, #12]
 80030f0:	f7ff ff6a 	bl	8002fc8 <SPI_WaitFlagStateUntilTimeout>
 80030f4:	4603      	mov	r3, r0
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d007      	beq.n	800310a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030fe:	f043 0220 	orr.w	r2, r3, #32
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8003106:	2303      	movs	r3, #3
 8003108:	e032      	b.n	8003170 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800310a:	4b1b      	ldr	r3, [pc, #108]	@ (8003178 <SPI_EndRxTxTransaction+0xa0>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4a1b      	ldr	r2, [pc, #108]	@ (800317c <SPI_EndRxTxTransaction+0xa4>)
 8003110:	fba2 2303 	umull	r2, r3, r2, r3
 8003114:	0d5b      	lsrs	r3, r3, #21
 8003116:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800311a:	fb02 f303 	mul.w	r3, r2, r3
 800311e:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003128:	d112      	bne.n	8003150 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	9300      	str	r3, [sp, #0]
 800312e:	68bb      	ldr	r3, [r7, #8]
 8003130:	2200      	movs	r2, #0
 8003132:	2180      	movs	r1, #128	@ 0x80
 8003134:	68f8      	ldr	r0, [r7, #12]
 8003136:	f7ff ff47 	bl	8002fc8 <SPI_WaitFlagStateUntilTimeout>
 800313a:	4603      	mov	r3, r0
 800313c:	2b00      	cmp	r3, #0
 800313e:	d016      	beq.n	800316e <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003144:	f043 0220 	orr.w	r2, r3, #32
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800314c:	2303      	movs	r3, #3
 800314e:	e00f      	b.n	8003170 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003150:	697b      	ldr	r3, [r7, #20]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d00a      	beq.n	800316c <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8003156:	697b      	ldr	r3, [r7, #20]
 8003158:	3b01      	subs	r3, #1
 800315a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	689b      	ldr	r3, [r3, #8]
 8003162:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003166:	2b80      	cmp	r3, #128	@ 0x80
 8003168:	d0f2      	beq.n	8003150 <SPI_EndRxTxTransaction+0x78>
 800316a:	e000      	b.n	800316e <SPI_EndRxTxTransaction+0x96>
        break;
 800316c:	bf00      	nop
  }

  return HAL_OK;
 800316e:	2300      	movs	r3, #0
}
 8003170:	4618      	mov	r0, r3
 8003172:	3718      	adds	r7, #24
 8003174:	46bd      	mov	sp, r7
 8003176:	bd80      	pop	{r7, pc}
 8003178:	20000004 	.word	0x20000004
 800317c:	165e9f81 	.word	0x165e9f81

08003180 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b082      	sub	sp, #8
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d101      	bne.n	8003192 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800318e:	2301      	movs	r3, #1
 8003190:	e041      	b.n	8003216 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003198:	b2db      	uxtb	r3, r3
 800319a:	2b00      	cmp	r3, #0
 800319c:	d106      	bne.n	80031ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2200      	movs	r2, #0
 80031a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80031a6:	6878      	ldr	r0, [r7, #4]
 80031a8:	f7fe f864 	bl	8001274 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2202      	movs	r2, #2
 80031b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681a      	ldr	r2, [r3, #0]
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	3304      	adds	r3, #4
 80031bc:	4619      	mov	r1, r3
 80031be:	4610      	mov	r0, r2
 80031c0:	f000 fc90 	bl	8003ae4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2201      	movs	r2, #1
 80031c8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2201      	movs	r2, #1
 80031d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2201      	movs	r2, #1
 80031d8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2201      	movs	r2, #1
 80031e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2201      	movs	r2, #1
 80031e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2201      	movs	r2, #1
 80031f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2201      	movs	r2, #1
 80031f8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2201      	movs	r2, #1
 8003200:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2201      	movs	r2, #1
 8003208:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2201      	movs	r2, #1
 8003210:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003214:	2300      	movs	r3, #0
}
 8003216:	4618      	mov	r0, r3
 8003218:	3708      	adds	r7, #8
 800321a:	46bd      	mov	sp, r7
 800321c:	bd80      	pop	{r7, pc}
	...

08003220 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003220:	b480      	push	{r7}
 8003222:	b085      	sub	sp, #20
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800322e:	b2db      	uxtb	r3, r3
 8003230:	2b01      	cmp	r3, #1
 8003232:	d001      	beq.n	8003238 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003234:	2301      	movs	r3, #1
 8003236:	e04e      	b.n	80032d6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2202      	movs	r2, #2
 800323c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	68da      	ldr	r2, [r3, #12]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f042 0201 	orr.w	r2, r2, #1
 800324e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a23      	ldr	r2, [pc, #140]	@ (80032e4 <HAL_TIM_Base_Start_IT+0xc4>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d022      	beq.n	80032a0 <HAL_TIM_Base_Start_IT+0x80>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003262:	d01d      	beq.n	80032a0 <HAL_TIM_Base_Start_IT+0x80>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4a1f      	ldr	r2, [pc, #124]	@ (80032e8 <HAL_TIM_Base_Start_IT+0xc8>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d018      	beq.n	80032a0 <HAL_TIM_Base_Start_IT+0x80>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4a1e      	ldr	r2, [pc, #120]	@ (80032ec <HAL_TIM_Base_Start_IT+0xcc>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d013      	beq.n	80032a0 <HAL_TIM_Base_Start_IT+0x80>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a1c      	ldr	r2, [pc, #112]	@ (80032f0 <HAL_TIM_Base_Start_IT+0xd0>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d00e      	beq.n	80032a0 <HAL_TIM_Base_Start_IT+0x80>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4a1b      	ldr	r2, [pc, #108]	@ (80032f4 <HAL_TIM_Base_Start_IT+0xd4>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d009      	beq.n	80032a0 <HAL_TIM_Base_Start_IT+0x80>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a19      	ldr	r2, [pc, #100]	@ (80032f8 <HAL_TIM_Base_Start_IT+0xd8>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d004      	beq.n	80032a0 <HAL_TIM_Base_Start_IT+0x80>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4a18      	ldr	r2, [pc, #96]	@ (80032fc <HAL_TIM_Base_Start_IT+0xdc>)
 800329c:	4293      	cmp	r3, r2
 800329e:	d111      	bne.n	80032c4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	689b      	ldr	r3, [r3, #8]
 80032a6:	f003 0307 	and.w	r3, r3, #7
 80032aa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	2b06      	cmp	r3, #6
 80032b0:	d010      	beq.n	80032d4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	681a      	ldr	r2, [r3, #0]
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f042 0201 	orr.w	r2, r2, #1
 80032c0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032c2:	e007      	b.n	80032d4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	681a      	ldr	r2, [r3, #0]
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f042 0201 	orr.w	r2, r2, #1
 80032d2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80032d4:	2300      	movs	r3, #0
}
 80032d6:	4618      	mov	r0, r3
 80032d8:	3714      	adds	r7, #20
 80032da:	46bd      	mov	sp, r7
 80032dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e0:	4770      	bx	lr
 80032e2:	bf00      	nop
 80032e4:	40010000 	.word	0x40010000
 80032e8:	40000400 	.word	0x40000400
 80032ec:	40000800 	.word	0x40000800
 80032f0:	40000c00 	.word	0x40000c00
 80032f4:	40010400 	.word	0x40010400
 80032f8:	40014000 	.word	0x40014000
 80032fc:	40001800 	.word	0x40001800

08003300 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8003300:	b480      	push	{r7}
 8003302:	b083      	sub	sp, #12
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	68da      	ldr	r2, [r3, #12]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f022 0201 	bic.w	r2, r2, #1
 8003316:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	6a1a      	ldr	r2, [r3, #32]
 800331e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8003322:	4013      	ands	r3, r2
 8003324:	2b00      	cmp	r3, #0
 8003326:	d10f      	bne.n	8003348 <HAL_TIM_Base_Stop_IT+0x48>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	6a1a      	ldr	r2, [r3, #32]
 800332e:	f240 4344 	movw	r3, #1092	@ 0x444
 8003332:	4013      	ands	r3, r2
 8003334:	2b00      	cmp	r3, #0
 8003336:	d107      	bne.n	8003348 <HAL_TIM_Base_Stop_IT+0x48>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	681a      	ldr	r2, [r3, #0]
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f022 0201 	bic.w	r2, r2, #1
 8003346:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2201      	movs	r2, #1
 800334c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8003350:	2300      	movs	r3, #0
}
 8003352:	4618      	mov	r0, r3
 8003354:	370c      	adds	r7, #12
 8003356:	46bd      	mov	sp, r7
 8003358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335c:	4770      	bx	lr

0800335e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800335e:	b580      	push	{r7, lr}
 8003360:	b082      	sub	sp, #8
 8003362:	af00      	add	r7, sp, #0
 8003364:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d101      	bne.n	8003370 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800336c:	2301      	movs	r3, #1
 800336e:	e041      	b.n	80033f4 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003376:	b2db      	uxtb	r3, r3
 8003378:	2b00      	cmp	r3, #0
 800337a:	d106      	bne.n	800338a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2200      	movs	r2, #0
 8003380:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003384:	6878      	ldr	r0, [r7, #4]
 8003386:	f000 f839 	bl	80033fc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2202      	movs	r2, #2
 800338e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681a      	ldr	r2, [r3, #0]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	3304      	adds	r3, #4
 800339a:	4619      	mov	r1, r3
 800339c:	4610      	mov	r0, r2
 800339e:	f000 fba1 	bl	8003ae4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2201      	movs	r2, #1
 80033a6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2201      	movs	r2, #1
 80033ae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2201      	movs	r2, #1
 80033b6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2201      	movs	r2, #1
 80033be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2201      	movs	r2, #1
 80033c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2201      	movs	r2, #1
 80033ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2201      	movs	r2, #1
 80033d6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2201      	movs	r2, #1
 80033de:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2201      	movs	r2, #1
 80033e6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2201      	movs	r2, #1
 80033ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80033f2:	2300      	movs	r3, #0
}
 80033f4:	4618      	mov	r0, r3
 80033f6:	3708      	adds	r7, #8
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bd80      	pop	{r7, pc}

080033fc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80033fc:	b480      	push	{r7}
 80033fe:	b083      	sub	sp, #12
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003404:	bf00      	nop
 8003406:	370c      	adds	r7, #12
 8003408:	46bd      	mov	sp, r7
 800340a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340e:	4770      	bx	lr

08003410 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b084      	sub	sp, #16
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
 8003418:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d109      	bne.n	8003434 <HAL_TIM_PWM_Start+0x24>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003426:	b2db      	uxtb	r3, r3
 8003428:	2b01      	cmp	r3, #1
 800342a:	bf14      	ite	ne
 800342c:	2301      	movne	r3, #1
 800342e:	2300      	moveq	r3, #0
 8003430:	b2db      	uxtb	r3, r3
 8003432:	e022      	b.n	800347a <HAL_TIM_PWM_Start+0x6a>
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	2b04      	cmp	r3, #4
 8003438:	d109      	bne.n	800344e <HAL_TIM_PWM_Start+0x3e>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003440:	b2db      	uxtb	r3, r3
 8003442:	2b01      	cmp	r3, #1
 8003444:	bf14      	ite	ne
 8003446:	2301      	movne	r3, #1
 8003448:	2300      	moveq	r3, #0
 800344a:	b2db      	uxtb	r3, r3
 800344c:	e015      	b.n	800347a <HAL_TIM_PWM_Start+0x6a>
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	2b08      	cmp	r3, #8
 8003452:	d109      	bne.n	8003468 <HAL_TIM_PWM_Start+0x58>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800345a:	b2db      	uxtb	r3, r3
 800345c:	2b01      	cmp	r3, #1
 800345e:	bf14      	ite	ne
 8003460:	2301      	movne	r3, #1
 8003462:	2300      	moveq	r3, #0
 8003464:	b2db      	uxtb	r3, r3
 8003466:	e008      	b.n	800347a <HAL_TIM_PWM_Start+0x6a>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800346e:	b2db      	uxtb	r3, r3
 8003470:	2b01      	cmp	r3, #1
 8003472:	bf14      	ite	ne
 8003474:	2301      	movne	r3, #1
 8003476:	2300      	moveq	r3, #0
 8003478:	b2db      	uxtb	r3, r3
 800347a:	2b00      	cmp	r3, #0
 800347c:	d001      	beq.n	8003482 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800347e:	2301      	movs	r3, #1
 8003480:	e07c      	b.n	800357c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d104      	bne.n	8003492 <HAL_TIM_PWM_Start+0x82>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2202      	movs	r2, #2
 800348c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003490:	e013      	b.n	80034ba <HAL_TIM_PWM_Start+0xaa>
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	2b04      	cmp	r3, #4
 8003496:	d104      	bne.n	80034a2 <HAL_TIM_PWM_Start+0x92>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2202      	movs	r2, #2
 800349c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80034a0:	e00b      	b.n	80034ba <HAL_TIM_PWM_Start+0xaa>
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	2b08      	cmp	r3, #8
 80034a6:	d104      	bne.n	80034b2 <HAL_TIM_PWM_Start+0xa2>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2202      	movs	r2, #2
 80034ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80034b0:	e003      	b.n	80034ba <HAL_TIM_PWM_Start+0xaa>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2202      	movs	r2, #2
 80034b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	2201      	movs	r2, #1
 80034c0:	6839      	ldr	r1, [r7, #0]
 80034c2:	4618      	mov	r0, r3
 80034c4:	f000 fe04 	bl	80040d0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4a2d      	ldr	r2, [pc, #180]	@ (8003584 <HAL_TIM_PWM_Start+0x174>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d004      	beq.n	80034dc <HAL_TIM_PWM_Start+0xcc>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4a2c      	ldr	r2, [pc, #176]	@ (8003588 <HAL_TIM_PWM_Start+0x178>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	d101      	bne.n	80034e0 <HAL_TIM_PWM_Start+0xd0>
 80034dc:	2301      	movs	r3, #1
 80034de:	e000      	b.n	80034e2 <HAL_TIM_PWM_Start+0xd2>
 80034e0:	2300      	movs	r3, #0
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d007      	beq.n	80034f6 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80034f4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4a22      	ldr	r2, [pc, #136]	@ (8003584 <HAL_TIM_PWM_Start+0x174>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d022      	beq.n	8003546 <HAL_TIM_PWM_Start+0x136>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003508:	d01d      	beq.n	8003546 <HAL_TIM_PWM_Start+0x136>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4a1f      	ldr	r2, [pc, #124]	@ (800358c <HAL_TIM_PWM_Start+0x17c>)
 8003510:	4293      	cmp	r3, r2
 8003512:	d018      	beq.n	8003546 <HAL_TIM_PWM_Start+0x136>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4a1d      	ldr	r2, [pc, #116]	@ (8003590 <HAL_TIM_PWM_Start+0x180>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d013      	beq.n	8003546 <HAL_TIM_PWM_Start+0x136>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4a1c      	ldr	r2, [pc, #112]	@ (8003594 <HAL_TIM_PWM_Start+0x184>)
 8003524:	4293      	cmp	r3, r2
 8003526:	d00e      	beq.n	8003546 <HAL_TIM_PWM_Start+0x136>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4a16      	ldr	r2, [pc, #88]	@ (8003588 <HAL_TIM_PWM_Start+0x178>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d009      	beq.n	8003546 <HAL_TIM_PWM_Start+0x136>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4a18      	ldr	r2, [pc, #96]	@ (8003598 <HAL_TIM_PWM_Start+0x188>)
 8003538:	4293      	cmp	r3, r2
 800353a:	d004      	beq.n	8003546 <HAL_TIM_PWM_Start+0x136>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a16      	ldr	r2, [pc, #88]	@ (800359c <HAL_TIM_PWM_Start+0x18c>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d111      	bne.n	800356a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	689b      	ldr	r3, [r3, #8]
 800354c:	f003 0307 	and.w	r3, r3, #7
 8003550:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	2b06      	cmp	r3, #6
 8003556:	d010      	beq.n	800357a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	681a      	ldr	r2, [r3, #0]
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f042 0201 	orr.w	r2, r2, #1
 8003566:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003568:	e007      	b.n	800357a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	681a      	ldr	r2, [r3, #0]
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f042 0201 	orr.w	r2, r2, #1
 8003578:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800357a:	2300      	movs	r3, #0
}
 800357c:	4618      	mov	r0, r3
 800357e:	3710      	adds	r7, #16
 8003580:	46bd      	mov	sp, r7
 8003582:	bd80      	pop	{r7, pc}
 8003584:	40010000 	.word	0x40010000
 8003588:	40010400 	.word	0x40010400
 800358c:	40000400 	.word	0x40000400
 8003590:	40000800 	.word	0x40000800
 8003594:	40000c00 	.word	0x40000c00
 8003598:	40014000 	.word	0x40014000
 800359c:	40001800 	.word	0x40001800

080035a0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b084      	sub	sp, #16
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	68db      	ldr	r3, [r3, #12]
 80035ae:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	691b      	ldr	r3, [r3, #16]
 80035b6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80035b8:	68bb      	ldr	r3, [r7, #8]
 80035ba:	f003 0302 	and.w	r3, r3, #2
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d020      	beq.n	8003604 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	f003 0302 	and.w	r3, r3, #2
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d01b      	beq.n	8003604 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f06f 0202 	mvn.w	r2, #2
 80035d4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2201      	movs	r2, #1
 80035da:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	699b      	ldr	r3, [r3, #24]
 80035e2:	f003 0303 	and.w	r3, r3, #3
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d003      	beq.n	80035f2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80035ea:	6878      	ldr	r0, [r7, #4]
 80035ec:	f000 fa5b 	bl	8003aa6 <HAL_TIM_IC_CaptureCallback>
 80035f0:	e005      	b.n	80035fe <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80035f2:	6878      	ldr	r0, [r7, #4]
 80035f4:	f000 fa4d 	bl	8003a92 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035f8:	6878      	ldr	r0, [r7, #4]
 80035fa:	f000 fa5e 	bl	8003aba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2200      	movs	r2, #0
 8003602:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003604:	68bb      	ldr	r3, [r7, #8]
 8003606:	f003 0304 	and.w	r3, r3, #4
 800360a:	2b00      	cmp	r3, #0
 800360c:	d020      	beq.n	8003650 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	f003 0304 	and.w	r3, r3, #4
 8003614:	2b00      	cmp	r3, #0
 8003616:	d01b      	beq.n	8003650 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f06f 0204 	mvn.w	r2, #4
 8003620:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2202      	movs	r2, #2
 8003626:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	699b      	ldr	r3, [r3, #24]
 800362e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003632:	2b00      	cmp	r3, #0
 8003634:	d003      	beq.n	800363e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003636:	6878      	ldr	r0, [r7, #4]
 8003638:	f000 fa35 	bl	8003aa6 <HAL_TIM_IC_CaptureCallback>
 800363c:	e005      	b.n	800364a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800363e:	6878      	ldr	r0, [r7, #4]
 8003640:	f000 fa27 	bl	8003a92 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003644:	6878      	ldr	r0, [r7, #4]
 8003646:	f000 fa38 	bl	8003aba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2200      	movs	r2, #0
 800364e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003650:	68bb      	ldr	r3, [r7, #8]
 8003652:	f003 0308 	and.w	r3, r3, #8
 8003656:	2b00      	cmp	r3, #0
 8003658:	d020      	beq.n	800369c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	f003 0308 	and.w	r3, r3, #8
 8003660:	2b00      	cmp	r3, #0
 8003662:	d01b      	beq.n	800369c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f06f 0208 	mvn.w	r2, #8
 800366c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2204      	movs	r2, #4
 8003672:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	69db      	ldr	r3, [r3, #28]
 800367a:	f003 0303 	and.w	r3, r3, #3
 800367e:	2b00      	cmp	r3, #0
 8003680:	d003      	beq.n	800368a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003682:	6878      	ldr	r0, [r7, #4]
 8003684:	f000 fa0f 	bl	8003aa6 <HAL_TIM_IC_CaptureCallback>
 8003688:	e005      	b.n	8003696 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800368a:	6878      	ldr	r0, [r7, #4]
 800368c:	f000 fa01 	bl	8003a92 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003690:	6878      	ldr	r0, [r7, #4]
 8003692:	f000 fa12 	bl	8003aba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2200      	movs	r2, #0
 800369a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800369c:	68bb      	ldr	r3, [r7, #8]
 800369e:	f003 0310 	and.w	r3, r3, #16
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d020      	beq.n	80036e8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	f003 0310 	and.w	r3, r3, #16
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d01b      	beq.n	80036e8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f06f 0210 	mvn.w	r2, #16
 80036b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2208      	movs	r2, #8
 80036be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	69db      	ldr	r3, [r3, #28]
 80036c6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d003      	beq.n	80036d6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036ce:	6878      	ldr	r0, [r7, #4]
 80036d0:	f000 f9e9 	bl	8003aa6 <HAL_TIM_IC_CaptureCallback>
 80036d4:	e005      	b.n	80036e2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036d6:	6878      	ldr	r0, [r7, #4]
 80036d8:	f000 f9db 	bl	8003a92 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036dc:	6878      	ldr	r0, [r7, #4]
 80036de:	f000 f9ec 	bl	8003aba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2200      	movs	r2, #0
 80036e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80036e8:	68bb      	ldr	r3, [r7, #8]
 80036ea:	f003 0301 	and.w	r3, r3, #1
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d00c      	beq.n	800370c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	f003 0301 	and.w	r3, r3, #1
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d007      	beq.n	800370c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f06f 0201 	mvn.w	r2, #1
 8003704:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003706:	6878      	ldr	r0, [r7, #4]
 8003708:	f7fd f92c 	bl	8000964 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003712:	2b00      	cmp	r3, #0
 8003714:	d00c      	beq.n	8003730 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800371c:	2b00      	cmp	r3, #0
 800371e:	d007      	beq.n	8003730 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003728:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800372a:	6878      	ldr	r0, [r7, #4]
 800372c:	f000 fd7c 	bl	8004228 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003730:	68bb      	ldr	r3, [r7, #8]
 8003732:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003736:	2b00      	cmp	r3, #0
 8003738:	d00c      	beq.n	8003754 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003740:	2b00      	cmp	r3, #0
 8003742:	d007      	beq.n	8003754 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800374c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800374e:	6878      	ldr	r0, [r7, #4]
 8003750:	f000 f9bd 	bl	8003ace <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003754:	68bb      	ldr	r3, [r7, #8]
 8003756:	f003 0320 	and.w	r3, r3, #32
 800375a:	2b00      	cmp	r3, #0
 800375c:	d00c      	beq.n	8003778 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	f003 0320 	and.w	r3, r3, #32
 8003764:	2b00      	cmp	r3, #0
 8003766:	d007      	beq.n	8003778 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f06f 0220 	mvn.w	r2, #32
 8003770:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003772:	6878      	ldr	r0, [r7, #4]
 8003774:	f000 fd4e 	bl	8004214 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003778:	bf00      	nop
 800377a:	3710      	adds	r7, #16
 800377c:	46bd      	mov	sp, r7
 800377e:	bd80      	pop	{r7, pc}

08003780 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b086      	sub	sp, #24
 8003784:	af00      	add	r7, sp, #0
 8003786:	60f8      	str	r0, [r7, #12]
 8003788:	60b9      	str	r1, [r7, #8]
 800378a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800378c:	2300      	movs	r3, #0
 800378e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003796:	2b01      	cmp	r3, #1
 8003798:	d101      	bne.n	800379e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800379a:	2302      	movs	r3, #2
 800379c:	e0ae      	b.n	80038fc <HAL_TIM_PWM_ConfigChannel+0x17c>
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	2201      	movs	r2, #1
 80037a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2b0c      	cmp	r3, #12
 80037aa:	f200 809f 	bhi.w	80038ec <HAL_TIM_PWM_ConfigChannel+0x16c>
 80037ae:	a201      	add	r2, pc, #4	@ (adr r2, 80037b4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80037b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037b4:	080037e9 	.word	0x080037e9
 80037b8:	080038ed 	.word	0x080038ed
 80037bc:	080038ed 	.word	0x080038ed
 80037c0:	080038ed 	.word	0x080038ed
 80037c4:	08003829 	.word	0x08003829
 80037c8:	080038ed 	.word	0x080038ed
 80037cc:	080038ed 	.word	0x080038ed
 80037d0:	080038ed 	.word	0x080038ed
 80037d4:	0800386b 	.word	0x0800386b
 80037d8:	080038ed 	.word	0x080038ed
 80037dc:	080038ed 	.word	0x080038ed
 80037e0:	080038ed 	.word	0x080038ed
 80037e4:	080038ab 	.word	0x080038ab
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	68b9      	ldr	r1, [r7, #8]
 80037ee:	4618      	mov	r0, r3
 80037f0:	f000 fa24 	bl	8003c3c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	699a      	ldr	r2, [r3, #24]
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f042 0208 	orr.w	r2, r2, #8
 8003802:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	699a      	ldr	r2, [r3, #24]
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f022 0204 	bic.w	r2, r2, #4
 8003812:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	6999      	ldr	r1, [r3, #24]
 800381a:	68bb      	ldr	r3, [r7, #8]
 800381c:	691a      	ldr	r2, [r3, #16]
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	430a      	orrs	r2, r1
 8003824:	619a      	str	r2, [r3, #24]
      break;
 8003826:	e064      	b.n	80038f2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	68b9      	ldr	r1, [r7, #8]
 800382e:	4618      	mov	r0, r3
 8003830:	f000 fa74 	bl	8003d1c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	699a      	ldr	r2, [r3, #24]
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003842:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	699a      	ldr	r2, [r3, #24]
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003852:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	6999      	ldr	r1, [r3, #24]
 800385a:	68bb      	ldr	r3, [r7, #8]
 800385c:	691b      	ldr	r3, [r3, #16]
 800385e:	021a      	lsls	r2, r3, #8
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	430a      	orrs	r2, r1
 8003866:	619a      	str	r2, [r3, #24]
      break;
 8003868:	e043      	b.n	80038f2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	68b9      	ldr	r1, [r7, #8]
 8003870:	4618      	mov	r0, r3
 8003872:	f000 fac9 	bl	8003e08 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	69da      	ldr	r2, [r3, #28]
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f042 0208 	orr.w	r2, r2, #8
 8003884:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	69da      	ldr	r2, [r3, #28]
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f022 0204 	bic.w	r2, r2, #4
 8003894:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	69d9      	ldr	r1, [r3, #28]
 800389c:	68bb      	ldr	r3, [r7, #8]
 800389e:	691a      	ldr	r2, [r3, #16]
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	430a      	orrs	r2, r1
 80038a6:	61da      	str	r2, [r3, #28]
      break;
 80038a8:	e023      	b.n	80038f2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	68b9      	ldr	r1, [r7, #8]
 80038b0:	4618      	mov	r0, r3
 80038b2:	f000 fb1d 	bl	8003ef0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	69da      	ldr	r2, [r3, #28]
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80038c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	69da      	ldr	r2, [r3, #28]
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80038d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	69d9      	ldr	r1, [r3, #28]
 80038dc:	68bb      	ldr	r3, [r7, #8]
 80038de:	691b      	ldr	r3, [r3, #16]
 80038e0:	021a      	lsls	r2, r3, #8
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	430a      	orrs	r2, r1
 80038e8:	61da      	str	r2, [r3, #28]
      break;
 80038ea:	e002      	b.n	80038f2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80038ec:	2301      	movs	r3, #1
 80038ee:	75fb      	strb	r3, [r7, #23]
      break;
 80038f0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	2200      	movs	r2, #0
 80038f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80038fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80038fc:	4618      	mov	r0, r3
 80038fe:	3718      	adds	r7, #24
 8003900:	46bd      	mov	sp, r7
 8003902:	bd80      	pop	{r7, pc}

08003904 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b084      	sub	sp, #16
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
 800390c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800390e:	2300      	movs	r3, #0
 8003910:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003918:	2b01      	cmp	r3, #1
 800391a:	d101      	bne.n	8003920 <HAL_TIM_ConfigClockSource+0x1c>
 800391c:	2302      	movs	r3, #2
 800391e:	e0b4      	b.n	8003a8a <HAL_TIM_ConfigClockSource+0x186>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2201      	movs	r2, #1
 8003924:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2202      	movs	r2, #2
 800392c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	689b      	ldr	r3, [r3, #8]
 8003936:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003938:	68bb      	ldr	r3, [r7, #8]
 800393a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800393e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003940:	68bb      	ldr	r3, [r7, #8]
 8003942:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003946:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	68ba      	ldr	r2, [r7, #8]
 800394e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003958:	d03e      	beq.n	80039d8 <HAL_TIM_ConfigClockSource+0xd4>
 800395a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800395e:	f200 8087 	bhi.w	8003a70 <HAL_TIM_ConfigClockSource+0x16c>
 8003962:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003966:	f000 8086 	beq.w	8003a76 <HAL_TIM_ConfigClockSource+0x172>
 800396a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800396e:	d87f      	bhi.n	8003a70 <HAL_TIM_ConfigClockSource+0x16c>
 8003970:	2b70      	cmp	r3, #112	@ 0x70
 8003972:	d01a      	beq.n	80039aa <HAL_TIM_ConfigClockSource+0xa6>
 8003974:	2b70      	cmp	r3, #112	@ 0x70
 8003976:	d87b      	bhi.n	8003a70 <HAL_TIM_ConfigClockSource+0x16c>
 8003978:	2b60      	cmp	r3, #96	@ 0x60
 800397a:	d050      	beq.n	8003a1e <HAL_TIM_ConfigClockSource+0x11a>
 800397c:	2b60      	cmp	r3, #96	@ 0x60
 800397e:	d877      	bhi.n	8003a70 <HAL_TIM_ConfigClockSource+0x16c>
 8003980:	2b50      	cmp	r3, #80	@ 0x50
 8003982:	d03c      	beq.n	80039fe <HAL_TIM_ConfigClockSource+0xfa>
 8003984:	2b50      	cmp	r3, #80	@ 0x50
 8003986:	d873      	bhi.n	8003a70 <HAL_TIM_ConfigClockSource+0x16c>
 8003988:	2b40      	cmp	r3, #64	@ 0x40
 800398a:	d058      	beq.n	8003a3e <HAL_TIM_ConfigClockSource+0x13a>
 800398c:	2b40      	cmp	r3, #64	@ 0x40
 800398e:	d86f      	bhi.n	8003a70 <HAL_TIM_ConfigClockSource+0x16c>
 8003990:	2b30      	cmp	r3, #48	@ 0x30
 8003992:	d064      	beq.n	8003a5e <HAL_TIM_ConfigClockSource+0x15a>
 8003994:	2b30      	cmp	r3, #48	@ 0x30
 8003996:	d86b      	bhi.n	8003a70 <HAL_TIM_ConfigClockSource+0x16c>
 8003998:	2b20      	cmp	r3, #32
 800399a:	d060      	beq.n	8003a5e <HAL_TIM_ConfigClockSource+0x15a>
 800399c:	2b20      	cmp	r3, #32
 800399e:	d867      	bhi.n	8003a70 <HAL_TIM_ConfigClockSource+0x16c>
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d05c      	beq.n	8003a5e <HAL_TIM_ConfigClockSource+0x15a>
 80039a4:	2b10      	cmp	r3, #16
 80039a6:	d05a      	beq.n	8003a5e <HAL_TIM_ConfigClockSource+0x15a>
 80039a8:	e062      	b.n	8003a70 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80039ba:	f000 fb69 	bl	8004090 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	689b      	ldr	r3, [r3, #8]
 80039c4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80039c6:	68bb      	ldr	r3, [r7, #8]
 80039c8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80039cc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	68ba      	ldr	r2, [r7, #8]
 80039d4:	609a      	str	r2, [r3, #8]
      break;
 80039d6:	e04f      	b.n	8003a78 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80039e8:	f000 fb52 	bl	8004090 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	689a      	ldr	r2, [r3, #8]
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80039fa:	609a      	str	r2, [r3, #8]
      break;
 80039fc:	e03c      	b.n	8003a78 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a0a:	461a      	mov	r2, r3
 8003a0c:	f000 fac6 	bl	8003f9c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	2150      	movs	r1, #80	@ 0x50
 8003a16:	4618      	mov	r0, r3
 8003a18:	f000 fb1f 	bl	800405a <TIM_ITRx_SetConfig>
      break;
 8003a1c:	e02c      	b.n	8003a78 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003a2a:	461a      	mov	r2, r3
 8003a2c:	f000 fae5 	bl	8003ffa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	2160      	movs	r1, #96	@ 0x60
 8003a36:	4618      	mov	r0, r3
 8003a38:	f000 fb0f 	bl	800405a <TIM_ITRx_SetConfig>
      break;
 8003a3c:	e01c      	b.n	8003a78 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a4a:	461a      	mov	r2, r3
 8003a4c:	f000 faa6 	bl	8003f9c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	2140      	movs	r1, #64	@ 0x40
 8003a56:	4618      	mov	r0, r3
 8003a58:	f000 faff 	bl	800405a <TIM_ITRx_SetConfig>
      break;
 8003a5c:	e00c      	b.n	8003a78 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681a      	ldr	r2, [r3, #0]
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4619      	mov	r1, r3
 8003a68:	4610      	mov	r0, r2
 8003a6a:	f000 faf6 	bl	800405a <TIM_ITRx_SetConfig>
      break;
 8003a6e:	e003      	b.n	8003a78 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003a70:	2301      	movs	r3, #1
 8003a72:	73fb      	strb	r3, [r7, #15]
      break;
 8003a74:	e000      	b.n	8003a78 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003a76:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2201      	movs	r2, #1
 8003a7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2200      	movs	r2, #0
 8003a84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003a88:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	3710      	adds	r7, #16
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	bd80      	pop	{r7, pc}

08003a92 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003a92:	b480      	push	{r7}
 8003a94:	b083      	sub	sp, #12
 8003a96:	af00      	add	r7, sp, #0
 8003a98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003a9a:	bf00      	nop
 8003a9c:	370c      	adds	r7, #12
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa4:	4770      	bx	lr

08003aa6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003aa6:	b480      	push	{r7}
 8003aa8:	b083      	sub	sp, #12
 8003aaa:	af00      	add	r7, sp, #0
 8003aac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003aae:	bf00      	nop
 8003ab0:	370c      	adds	r7, #12
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab8:	4770      	bx	lr

08003aba <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003aba:	b480      	push	{r7}
 8003abc:	b083      	sub	sp, #12
 8003abe:	af00      	add	r7, sp, #0
 8003ac0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003ac2:	bf00      	nop
 8003ac4:	370c      	adds	r7, #12
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003acc:	4770      	bx	lr

08003ace <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003ace:	b480      	push	{r7}
 8003ad0:	b083      	sub	sp, #12
 8003ad2:	af00      	add	r7, sp, #0
 8003ad4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003ad6:	bf00      	nop
 8003ad8:	370c      	adds	r7, #12
 8003ada:	46bd      	mov	sp, r7
 8003adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae0:	4770      	bx	lr
	...

08003ae4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	b085      	sub	sp, #20
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
 8003aec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	4a46      	ldr	r2, [pc, #280]	@ (8003c10 <TIM_Base_SetConfig+0x12c>)
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d013      	beq.n	8003b24 <TIM_Base_SetConfig+0x40>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b02:	d00f      	beq.n	8003b24 <TIM_Base_SetConfig+0x40>
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	4a43      	ldr	r2, [pc, #268]	@ (8003c14 <TIM_Base_SetConfig+0x130>)
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d00b      	beq.n	8003b24 <TIM_Base_SetConfig+0x40>
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	4a42      	ldr	r2, [pc, #264]	@ (8003c18 <TIM_Base_SetConfig+0x134>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d007      	beq.n	8003b24 <TIM_Base_SetConfig+0x40>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	4a41      	ldr	r2, [pc, #260]	@ (8003c1c <TIM_Base_SetConfig+0x138>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d003      	beq.n	8003b24 <TIM_Base_SetConfig+0x40>
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	4a40      	ldr	r2, [pc, #256]	@ (8003c20 <TIM_Base_SetConfig+0x13c>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d108      	bne.n	8003b36 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b2a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	68fa      	ldr	r2, [r7, #12]
 8003b32:	4313      	orrs	r3, r2
 8003b34:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	4a35      	ldr	r2, [pc, #212]	@ (8003c10 <TIM_Base_SetConfig+0x12c>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d02b      	beq.n	8003b96 <TIM_Base_SetConfig+0xb2>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b44:	d027      	beq.n	8003b96 <TIM_Base_SetConfig+0xb2>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	4a32      	ldr	r2, [pc, #200]	@ (8003c14 <TIM_Base_SetConfig+0x130>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d023      	beq.n	8003b96 <TIM_Base_SetConfig+0xb2>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	4a31      	ldr	r2, [pc, #196]	@ (8003c18 <TIM_Base_SetConfig+0x134>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d01f      	beq.n	8003b96 <TIM_Base_SetConfig+0xb2>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	4a30      	ldr	r2, [pc, #192]	@ (8003c1c <TIM_Base_SetConfig+0x138>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d01b      	beq.n	8003b96 <TIM_Base_SetConfig+0xb2>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	4a2f      	ldr	r2, [pc, #188]	@ (8003c20 <TIM_Base_SetConfig+0x13c>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d017      	beq.n	8003b96 <TIM_Base_SetConfig+0xb2>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	4a2e      	ldr	r2, [pc, #184]	@ (8003c24 <TIM_Base_SetConfig+0x140>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d013      	beq.n	8003b96 <TIM_Base_SetConfig+0xb2>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	4a2d      	ldr	r2, [pc, #180]	@ (8003c28 <TIM_Base_SetConfig+0x144>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d00f      	beq.n	8003b96 <TIM_Base_SetConfig+0xb2>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	4a2c      	ldr	r2, [pc, #176]	@ (8003c2c <TIM_Base_SetConfig+0x148>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d00b      	beq.n	8003b96 <TIM_Base_SetConfig+0xb2>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	4a2b      	ldr	r2, [pc, #172]	@ (8003c30 <TIM_Base_SetConfig+0x14c>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d007      	beq.n	8003b96 <TIM_Base_SetConfig+0xb2>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	4a2a      	ldr	r2, [pc, #168]	@ (8003c34 <TIM_Base_SetConfig+0x150>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d003      	beq.n	8003b96 <TIM_Base_SetConfig+0xb2>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	4a29      	ldr	r2, [pc, #164]	@ (8003c38 <TIM_Base_SetConfig+0x154>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d108      	bne.n	8003ba8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b9c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	68db      	ldr	r3, [r3, #12]
 8003ba2:	68fa      	ldr	r2, [r7, #12]
 8003ba4:	4313      	orrs	r3, r2
 8003ba6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	695b      	ldr	r3, [r3, #20]
 8003bb2:	4313      	orrs	r3, r2
 8003bb4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	68fa      	ldr	r2, [r7, #12]
 8003bba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	689a      	ldr	r2, [r3, #8]
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	681a      	ldr	r2, [r3, #0]
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	4a10      	ldr	r2, [pc, #64]	@ (8003c10 <TIM_Base_SetConfig+0x12c>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d003      	beq.n	8003bdc <TIM_Base_SetConfig+0xf8>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	4a12      	ldr	r2, [pc, #72]	@ (8003c20 <TIM_Base_SetConfig+0x13c>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d103      	bne.n	8003be4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	691a      	ldr	r2, [r3, #16]
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2201      	movs	r2, #1
 8003be8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	691b      	ldr	r3, [r3, #16]
 8003bee:	f003 0301 	and.w	r3, r3, #1
 8003bf2:	2b01      	cmp	r3, #1
 8003bf4:	d105      	bne.n	8003c02 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	691b      	ldr	r3, [r3, #16]
 8003bfa:	f023 0201 	bic.w	r2, r3, #1
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	611a      	str	r2, [r3, #16]
  }
}
 8003c02:	bf00      	nop
 8003c04:	3714      	adds	r7, #20
 8003c06:	46bd      	mov	sp, r7
 8003c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0c:	4770      	bx	lr
 8003c0e:	bf00      	nop
 8003c10:	40010000 	.word	0x40010000
 8003c14:	40000400 	.word	0x40000400
 8003c18:	40000800 	.word	0x40000800
 8003c1c:	40000c00 	.word	0x40000c00
 8003c20:	40010400 	.word	0x40010400
 8003c24:	40014000 	.word	0x40014000
 8003c28:	40014400 	.word	0x40014400
 8003c2c:	40014800 	.word	0x40014800
 8003c30:	40001800 	.word	0x40001800
 8003c34:	40001c00 	.word	0x40001c00
 8003c38:	40002000 	.word	0x40002000

08003c3c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	b087      	sub	sp, #28
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
 8003c44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6a1b      	ldr	r3, [r3, #32]
 8003c4a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6a1b      	ldr	r3, [r3, #32]
 8003c50:	f023 0201 	bic.w	r2, r3, #1
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	685b      	ldr	r3, [r3, #4]
 8003c5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	699b      	ldr	r3, [r3, #24]
 8003c62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	f023 0303 	bic.w	r3, r3, #3
 8003c72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	68fa      	ldr	r2, [r7, #12]
 8003c7a:	4313      	orrs	r3, r2
 8003c7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003c7e:	697b      	ldr	r3, [r7, #20]
 8003c80:	f023 0302 	bic.w	r3, r3, #2
 8003c84:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	689b      	ldr	r3, [r3, #8]
 8003c8a:	697a      	ldr	r2, [r7, #20]
 8003c8c:	4313      	orrs	r3, r2
 8003c8e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	4a20      	ldr	r2, [pc, #128]	@ (8003d14 <TIM_OC1_SetConfig+0xd8>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d003      	beq.n	8003ca0 <TIM_OC1_SetConfig+0x64>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	4a1f      	ldr	r2, [pc, #124]	@ (8003d18 <TIM_OC1_SetConfig+0xdc>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d10c      	bne.n	8003cba <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003ca0:	697b      	ldr	r3, [r7, #20]
 8003ca2:	f023 0308 	bic.w	r3, r3, #8
 8003ca6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	68db      	ldr	r3, [r3, #12]
 8003cac:	697a      	ldr	r2, [r7, #20]
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003cb2:	697b      	ldr	r3, [r7, #20]
 8003cb4:	f023 0304 	bic.w	r3, r3, #4
 8003cb8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	4a15      	ldr	r2, [pc, #84]	@ (8003d14 <TIM_OC1_SetConfig+0xd8>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d003      	beq.n	8003cca <TIM_OC1_SetConfig+0x8e>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	4a14      	ldr	r2, [pc, #80]	@ (8003d18 <TIM_OC1_SetConfig+0xdc>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d111      	bne.n	8003cee <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003cca:	693b      	ldr	r3, [r7, #16]
 8003ccc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003cd0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003cd2:	693b      	ldr	r3, [r7, #16]
 8003cd4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003cd8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	695b      	ldr	r3, [r3, #20]
 8003cde:	693a      	ldr	r2, [r7, #16]
 8003ce0:	4313      	orrs	r3, r2
 8003ce2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	699b      	ldr	r3, [r3, #24]
 8003ce8:	693a      	ldr	r2, [r7, #16]
 8003cea:	4313      	orrs	r3, r2
 8003cec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	693a      	ldr	r2, [r7, #16]
 8003cf2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	68fa      	ldr	r2, [r7, #12]
 8003cf8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	685a      	ldr	r2, [r3, #4]
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	697a      	ldr	r2, [r7, #20]
 8003d06:	621a      	str	r2, [r3, #32]
}
 8003d08:	bf00      	nop
 8003d0a:	371c      	adds	r7, #28
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d12:	4770      	bx	lr
 8003d14:	40010000 	.word	0x40010000
 8003d18:	40010400 	.word	0x40010400

08003d1c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	b087      	sub	sp, #28
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
 8003d24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6a1b      	ldr	r3, [r3, #32]
 8003d2a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6a1b      	ldr	r3, [r3, #32]
 8003d30:	f023 0210 	bic.w	r2, r3, #16
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	699b      	ldr	r3, [r3, #24]
 8003d42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003d4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d52:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	021b      	lsls	r3, r3, #8
 8003d5a:	68fa      	ldr	r2, [r7, #12]
 8003d5c:	4313      	orrs	r3, r2
 8003d5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003d60:	697b      	ldr	r3, [r7, #20]
 8003d62:	f023 0320 	bic.w	r3, r3, #32
 8003d66:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	689b      	ldr	r3, [r3, #8]
 8003d6c:	011b      	lsls	r3, r3, #4
 8003d6e:	697a      	ldr	r2, [r7, #20]
 8003d70:	4313      	orrs	r3, r2
 8003d72:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	4a22      	ldr	r2, [pc, #136]	@ (8003e00 <TIM_OC2_SetConfig+0xe4>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d003      	beq.n	8003d84 <TIM_OC2_SetConfig+0x68>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	4a21      	ldr	r2, [pc, #132]	@ (8003e04 <TIM_OC2_SetConfig+0xe8>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d10d      	bne.n	8003da0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003d84:	697b      	ldr	r3, [r7, #20]
 8003d86:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003d8a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	68db      	ldr	r3, [r3, #12]
 8003d90:	011b      	lsls	r3, r3, #4
 8003d92:	697a      	ldr	r2, [r7, #20]
 8003d94:	4313      	orrs	r3, r2
 8003d96:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003d98:	697b      	ldr	r3, [r7, #20]
 8003d9a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003d9e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	4a17      	ldr	r2, [pc, #92]	@ (8003e00 <TIM_OC2_SetConfig+0xe4>)
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d003      	beq.n	8003db0 <TIM_OC2_SetConfig+0x94>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	4a16      	ldr	r2, [pc, #88]	@ (8003e04 <TIM_OC2_SetConfig+0xe8>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d113      	bne.n	8003dd8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003db0:	693b      	ldr	r3, [r7, #16]
 8003db2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003db6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003db8:	693b      	ldr	r3, [r7, #16]
 8003dba:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003dbe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	695b      	ldr	r3, [r3, #20]
 8003dc4:	009b      	lsls	r3, r3, #2
 8003dc6:	693a      	ldr	r2, [r7, #16]
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	699b      	ldr	r3, [r3, #24]
 8003dd0:	009b      	lsls	r3, r3, #2
 8003dd2:	693a      	ldr	r2, [r7, #16]
 8003dd4:	4313      	orrs	r3, r2
 8003dd6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	693a      	ldr	r2, [r7, #16]
 8003ddc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	68fa      	ldr	r2, [r7, #12]
 8003de2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	685a      	ldr	r2, [r3, #4]
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	697a      	ldr	r2, [r7, #20]
 8003df0:	621a      	str	r2, [r3, #32]
}
 8003df2:	bf00      	nop
 8003df4:	371c      	adds	r7, #28
 8003df6:	46bd      	mov	sp, r7
 8003df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfc:	4770      	bx	lr
 8003dfe:	bf00      	nop
 8003e00:	40010000 	.word	0x40010000
 8003e04:	40010400 	.word	0x40010400

08003e08 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003e08:	b480      	push	{r7}
 8003e0a:	b087      	sub	sp, #28
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
 8003e10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6a1b      	ldr	r3, [r3, #32]
 8003e16:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6a1b      	ldr	r3, [r3, #32]
 8003e1c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	69db      	ldr	r3, [r3, #28]
 8003e2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	f023 0303 	bic.w	r3, r3, #3
 8003e3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	68fa      	ldr	r2, [r7, #12]
 8003e46:	4313      	orrs	r3, r2
 8003e48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003e4a:	697b      	ldr	r3, [r7, #20]
 8003e4c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003e50:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	689b      	ldr	r3, [r3, #8]
 8003e56:	021b      	lsls	r3, r3, #8
 8003e58:	697a      	ldr	r2, [r7, #20]
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	4a21      	ldr	r2, [pc, #132]	@ (8003ee8 <TIM_OC3_SetConfig+0xe0>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d003      	beq.n	8003e6e <TIM_OC3_SetConfig+0x66>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	4a20      	ldr	r2, [pc, #128]	@ (8003eec <TIM_OC3_SetConfig+0xe4>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d10d      	bne.n	8003e8a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003e6e:	697b      	ldr	r3, [r7, #20]
 8003e70:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003e74:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	68db      	ldr	r3, [r3, #12]
 8003e7a:	021b      	lsls	r3, r3, #8
 8003e7c:	697a      	ldr	r2, [r7, #20]
 8003e7e:	4313      	orrs	r3, r2
 8003e80:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003e82:	697b      	ldr	r3, [r7, #20]
 8003e84:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003e88:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	4a16      	ldr	r2, [pc, #88]	@ (8003ee8 <TIM_OC3_SetConfig+0xe0>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d003      	beq.n	8003e9a <TIM_OC3_SetConfig+0x92>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	4a15      	ldr	r2, [pc, #84]	@ (8003eec <TIM_OC3_SetConfig+0xe4>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d113      	bne.n	8003ec2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003e9a:	693b      	ldr	r3, [r7, #16]
 8003e9c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003ea0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003ea2:	693b      	ldr	r3, [r7, #16]
 8003ea4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003ea8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	695b      	ldr	r3, [r3, #20]
 8003eae:	011b      	lsls	r3, r3, #4
 8003eb0:	693a      	ldr	r2, [r7, #16]
 8003eb2:	4313      	orrs	r3, r2
 8003eb4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	699b      	ldr	r3, [r3, #24]
 8003eba:	011b      	lsls	r3, r3, #4
 8003ebc:	693a      	ldr	r2, [r7, #16]
 8003ebe:	4313      	orrs	r3, r2
 8003ec0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	693a      	ldr	r2, [r7, #16]
 8003ec6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	68fa      	ldr	r2, [r7, #12]
 8003ecc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	685a      	ldr	r2, [r3, #4]
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	697a      	ldr	r2, [r7, #20]
 8003eda:	621a      	str	r2, [r3, #32]
}
 8003edc:	bf00      	nop
 8003ede:	371c      	adds	r7, #28
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee6:	4770      	bx	lr
 8003ee8:	40010000 	.word	0x40010000
 8003eec:	40010400 	.word	0x40010400

08003ef0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003ef0:	b480      	push	{r7}
 8003ef2:	b087      	sub	sp, #28
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
 8003ef8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6a1b      	ldr	r3, [r3, #32]
 8003efe:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6a1b      	ldr	r3, [r3, #32]
 8003f04:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	685b      	ldr	r3, [r3, #4]
 8003f10:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	69db      	ldr	r3, [r3, #28]
 8003f16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003f1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003f26:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	021b      	lsls	r3, r3, #8
 8003f2e:	68fa      	ldr	r2, [r7, #12]
 8003f30:	4313      	orrs	r3, r2
 8003f32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003f34:	693b      	ldr	r3, [r7, #16]
 8003f36:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003f3a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	689b      	ldr	r3, [r3, #8]
 8003f40:	031b      	lsls	r3, r3, #12
 8003f42:	693a      	ldr	r2, [r7, #16]
 8003f44:	4313      	orrs	r3, r2
 8003f46:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	4a12      	ldr	r2, [pc, #72]	@ (8003f94 <TIM_OC4_SetConfig+0xa4>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d003      	beq.n	8003f58 <TIM_OC4_SetConfig+0x68>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	4a11      	ldr	r2, [pc, #68]	@ (8003f98 <TIM_OC4_SetConfig+0xa8>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d109      	bne.n	8003f6c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003f58:	697b      	ldr	r3, [r7, #20]
 8003f5a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003f5e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	695b      	ldr	r3, [r3, #20]
 8003f64:	019b      	lsls	r3, r3, #6
 8003f66:	697a      	ldr	r2, [r7, #20]
 8003f68:	4313      	orrs	r3, r2
 8003f6a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	697a      	ldr	r2, [r7, #20]
 8003f70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	68fa      	ldr	r2, [r7, #12]
 8003f76:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	685a      	ldr	r2, [r3, #4]
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	693a      	ldr	r2, [r7, #16]
 8003f84:	621a      	str	r2, [r3, #32]
}
 8003f86:	bf00      	nop
 8003f88:	371c      	adds	r7, #28
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f90:	4770      	bx	lr
 8003f92:	bf00      	nop
 8003f94:	40010000 	.word	0x40010000
 8003f98:	40010400 	.word	0x40010400

08003f9c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	b087      	sub	sp, #28
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	60f8      	str	r0, [r7, #12]
 8003fa4:	60b9      	str	r1, [r7, #8]
 8003fa6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	6a1b      	ldr	r3, [r3, #32]
 8003fac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	6a1b      	ldr	r3, [r3, #32]
 8003fb2:	f023 0201 	bic.w	r2, r3, #1
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	699b      	ldr	r3, [r3, #24]
 8003fbe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003fc0:	693b      	ldr	r3, [r7, #16]
 8003fc2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003fc6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	011b      	lsls	r3, r3, #4
 8003fcc:	693a      	ldr	r2, [r7, #16]
 8003fce:	4313      	orrs	r3, r2
 8003fd0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003fd2:	697b      	ldr	r3, [r7, #20]
 8003fd4:	f023 030a 	bic.w	r3, r3, #10
 8003fd8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003fda:	697a      	ldr	r2, [r7, #20]
 8003fdc:	68bb      	ldr	r3, [r7, #8]
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	693a      	ldr	r2, [r7, #16]
 8003fe6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	697a      	ldr	r2, [r7, #20]
 8003fec:	621a      	str	r2, [r3, #32]
}
 8003fee:	bf00      	nop
 8003ff0:	371c      	adds	r7, #28
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff8:	4770      	bx	lr

08003ffa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ffa:	b480      	push	{r7}
 8003ffc:	b087      	sub	sp, #28
 8003ffe:	af00      	add	r7, sp, #0
 8004000:	60f8      	str	r0, [r7, #12]
 8004002:	60b9      	str	r1, [r7, #8]
 8004004:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	6a1b      	ldr	r3, [r3, #32]
 800400a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	6a1b      	ldr	r3, [r3, #32]
 8004010:	f023 0210 	bic.w	r2, r3, #16
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	699b      	ldr	r3, [r3, #24]
 800401c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800401e:	693b      	ldr	r3, [r7, #16]
 8004020:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004024:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	031b      	lsls	r3, r3, #12
 800402a:	693a      	ldr	r2, [r7, #16]
 800402c:	4313      	orrs	r3, r2
 800402e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004030:	697b      	ldr	r3, [r7, #20]
 8004032:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004036:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004038:	68bb      	ldr	r3, [r7, #8]
 800403a:	011b      	lsls	r3, r3, #4
 800403c:	697a      	ldr	r2, [r7, #20]
 800403e:	4313      	orrs	r3, r2
 8004040:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	693a      	ldr	r2, [r7, #16]
 8004046:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	697a      	ldr	r2, [r7, #20]
 800404c:	621a      	str	r2, [r3, #32]
}
 800404e:	bf00      	nop
 8004050:	371c      	adds	r7, #28
 8004052:	46bd      	mov	sp, r7
 8004054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004058:	4770      	bx	lr

0800405a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800405a:	b480      	push	{r7}
 800405c:	b085      	sub	sp, #20
 800405e:	af00      	add	r7, sp, #0
 8004060:	6078      	str	r0, [r7, #4]
 8004062:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	689b      	ldr	r3, [r3, #8]
 8004068:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004070:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004072:	683a      	ldr	r2, [r7, #0]
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	4313      	orrs	r3, r2
 8004078:	f043 0307 	orr.w	r3, r3, #7
 800407c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	68fa      	ldr	r2, [r7, #12]
 8004082:	609a      	str	r2, [r3, #8]
}
 8004084:	bf00      	nop
 8004086:	3714      	adds	r7, #20
 8004088:	46bd      	mov	sp, r7
 800408a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408e:	4770      	bx	lr

08004090 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004090:	b480      	push	{r7}
 8004092:	b087      	sub	sp, #28
 8004094:	af00      	add	r7, sp, #0
 8004096:	60f8      	str	r0, [r7, #12]
 8004098:	60b9      	str	r1, [r7, #8]
 800409a:	607a      	str	r2, [r7, #4]
 800409c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	689b      	ldr	r3, [r3, #8]
 80040a2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80040a4:	697b      	ldr	r3, [r7, #20]
 80040a6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80040aa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	021a      	lsls	r2, r3, #8
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	431a      	orrs	r2, r3
 80040b4:	68bb      	ldr	r3, [r7, #8]
 80040b6:	4313      	orrs	r3, r2
 80040b8:	697a      	ldr	r2, [r7, #20]
 80040ba:	4313      	orrs	r3, r2
 80040bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	697a      	ldr	r2, [r7, #20]
 80040c2:	609a      	str	r2, [r3, #8]
}
 80040c4:	bf00      	nop
 80040c6:	371c      	adds	r7, #28
 80040c8:	46bd      	mov	sp, r7
 80040ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ce:	4770      	bx	lr

080040d0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80040d0:	b480      	push	{r7}
 80040d2:	b087      	sub	sp, #28
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	60f8      	str	r0, [r7, #12]
 80040d8:	60b9      	str	r1, [r7, #8]
 80040da:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80040dc:	68bb      	ldr	r3, [r7, #8]
 80040de:	f003 031f 	and.w	r3, r3, #31
 80040e2:	2201      	movs	r2, #1
 80040e4:	fa02 f303 	lsl.w	r3, r2, r3
 80040e8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	6a1a      	ldr	r2, [r3, #32]
 80040ee:	697b      	ldr	r3, [r7, #20]
 80040f0:	43db      	mvns	r3, r3
 80040f2:	401a      	ands	r2, r3
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	6a1a      	ldr	r2, [r3, #32]
 80040fc:	68bb      	ldr	r3, [r7, #8]
 80040fe:	f003 031f 	and.w	r3, r3, #31
 8004102:	6879      	ldr	r1, [r7, #4]
 8004104:	fa01 f303 	lsl.w	r3, r1, r3
 8004108:	431a      	orrs	r2, r3
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	621a      	str	r2, [r3, #32]
}
 800410e:	bf00      	nop
 8004110:	371c      	adds	r7, #28
 8004112:	46bd      	mov	sp, r7
 8004114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004118:	4770      	bx	lr
	...

0800411c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800411c:	b480      	push	{r7}
 800411e:	b085      	sub	sp, #20
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
 8004124:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800412c:	2b01      	cmp	r3, #1
 800412e:	d101      	bne.n	8004134 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004130:	2302      	movs	r3, #2
 8004132:	e05a      	b.n	80041ea <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2201      	movs	r2, #1
 8004138:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2202      	movs	r2, #2
 8004140:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	685b      	ldr	r3, [r3, #4]
 800414a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	689b      	ldr	r3, [r3, #8]
 8004152:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800415a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	68fa      	ldr	r2, [r7, #12]
 8004162:	4313      	orrs	r3, r2
 8004164:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	68fa      	ldr	r2, [r7, #12]
 800416c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4a21      	ldr	r2, [pc, #132]	@ (80041f8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d022      	beq.n	80041be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004180:	d01d      	beq.n	80041be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4a1d      	ldr	r2, [pc, #116]	@ (80041fc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d018      	beq.n	80041be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4a1b      	ldr	r2, [pc, #108]	@ (8004200 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d013      	beq.n	80041be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4a1a      	ldr	r2, [pc, #104]	@ (8004204 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d00e      	beq.n	80041be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4a18      	ldr	r2, [pc, #96]	@ (8004208 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d009      	beq.n	80041be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4a17      	ldr	r2, [pc, #92]	@ (800420c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d004      	beq.n	80041be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4a15      	ldr	r2, [pc, #84]	@ (8004210 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d10c      	bne.n	80041d8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80041be:	68bb      	ldr	r3, [r7, #8]
 80041c0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80041c4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	68ba      	ldr	r2, [r7, #8]
 80041cc:	4313      	orrs	r3, r2
 80041ce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	68ba      	ldr	r2, [r7, #8]
 80041d6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2201      	movs	r2, #1
 80041dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2200      	movs	r2, #0
 80041e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80041e8:	2300      	movs	r3, #0
}
 80041ea:	4618      	mov	r0, r3
 80041ec:	3714      	adds	r7, #20
 80041ee:	46bd      	mov	sp, r7
 80041f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f4:	4770      	bx	lr
 80041f6:	bf00      	nop
 80041f8:	40010000 	.word	0x40010000
 80041fc:	40000400 	.word	0x40000400
 8004200:	40000800 	.word	0x40000800
 8004204:	40000c00 	.word	0x40000c00
 8004208:	40010400 	.word	0x40010400
 800420c:	40014000 	.word	0x40014000
 8004210:	40001800 	.word	0x40001800

08004214 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004214:	b480      	push	{r7}
 8004216:	b083      	sub	sp, #12
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800421c:	bf00      	nop
 800421e:	370c      	adds	r7, #12
 8004220:	46bd      	mov	sp, r7
 8004222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004226:	4770      	bx	lr

08004228 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004228:	b480      	push	{r7}
 800422a:	b083      	sub	sp, #12
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004230:	bf00      	nop
 8004232:	370c      	adds	r7, #12
 8004234:	46bd      	mov	sp, r7
 8004236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423a:	4770      	bx	lr

0800423c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b082      	sub	sp, #8
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d101      	bne.n	800424e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800424a:	2301      	movs	r3, #1
 800424c:	e042      	b.n	80042d4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004254:	b2db      	uxtb	r3, r3
 8004256:	2b00      	cmp	r3, #0
 8004258:	d106      	bne.n	8004268 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2200      	movs	r2, #0
 800425e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004262:	6878      	ldr	r0, [r7, #4]
 8004264:	f7fd f922 	bl	80014ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2224      	movs	r2, #36	@ 0x24
 800426c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	68da      	ldr	r2, [r3, #12]
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800427e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004280:	6878      	ldr	r0, [r7, #4]
 8004282:	f000 f82b 	bl	80042dc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	691a      	ldr	r2, [r3, #16]
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004294:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	695a      	ldr	r2, [r3, #20]
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80042a4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	68da      	ldr	r2, [r3, #12]
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80042b4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2200      	movs	r2, #0
 80042ba:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2220      	movs	r2, #32
 80042c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2220      	movs	r2, #32
 80042c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2200      	movs	r2, #0
 80042d0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80042d2:	2300      	movs	r3, #0
}
 80042d4:	4618      	mov	r0, r3
 80042d6:	3708      	adds	r7, #8
 80042d8:	46bd      	mov	sp, r7
 80042da:	bd80      	pop	{r7, pc}

080042dc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80042dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80042e0:	b0c0      	sub	sp, #256	@ 0x100
 80042e2:	af00      	add	r7, sp, #0
 80042e4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80042e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	691b      	ldr	r3, [r3, #16]
 80042f0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80042f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042f8:	68d9      	ldr	r1, [r3, #12]
 80042fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042fe:	681a      	ldr	r2, [r3, #0]
 8004300:	ea40 0301 	orr.w	r3, r0, r1
 8004304:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004306:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800430a:	689a      	ldr	r2, [r3, #8]
 800430c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004310:	691b      	ldr	r3, [r3, #16]
 8004312:	431a      	orrs	r2, r3
 8004314:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004318:	695b      	ldr	r3, [r3, #20]
 800431a:	431a      	orrs	r2, r3
 800431c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004320:	69db      	ldr	r3, [r3, #28]
 8004322:	4313      	orrs	r3, r2
 8004324:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004328:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	68db      	ldr	r3, [r3, #12]
 8004330:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004334:	f021 010c 	bic.w	r1, r1, #12
 8004338:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800433c:	681a      	ldr	r2, [r3, #0]
 800433e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004342:	430b      	orrs	r3, r1
 8004344:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004346:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	695b      	ldr	r3, [r3, #20]
 800434e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004352:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004356:	6999      	ldr	r1, [r3, #24]
 8004358:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800435c:	681a      	ldr	r2, [r3, #0]
 800435e:	ea40 0301 	orr.w	r3, r0, r1
 8004362:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004364:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004368:	681a      	ldr	r2, [r3, #0]
 800436a:	4b8f      	ldr	r3, [pc, #572]	@ (80045a8 <UART_SetConfig+0x2cc>)
 800436c:	429a      	cmp	r2, r3
 800436e:	d005      	beq.n	800437c <UART_SetConfig+0xa0>
 8004370:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004374:	681a      	ldr	r2, [r3, #0]
 8004376:	4b8d      	ldr	r3, [pc, #564]	@ (80045ac <UART_SetConfig+0x2d0>)
 8004378:	429a      	cmp	r2, r3
 800437a:	d104      	bne.n	8004386 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800437c:	f7fd ff74 	bl	8002268 <HAL_RCC_GetPCLK2Freq>
 8004380:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004384:	e003      	b.n	800438e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004386:	f7fd ff5b 	bl	8002240 <HAL_RCC_GetPCLK1Freq>
 800438a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800438e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004392:	69db      	ldr	r3, [r3, #28]
 8004394:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004398:	f040 810c 	bne.w	80045b4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800439c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80043a0:	2200      	movs	r2, #0
 80043a2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80043a6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80043aa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80043ae:	4622      	mov	r2, r4
 80043b0:	462b      	mov	r3, r5
 80043b2:	1891      	adds	r1, r2, r2
 80043b4:	65b9      	str	r1, [r7, #88]	@ 0x58
 80043b6:	415b      	adcs	r3, r3
 80043b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80043ba:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80043be:	4621      	mov	r1, r4
 80043c0:	eb12 0801 	adds.w	r8, r2, r1
 80043c4:	4629      	mov	r1, r5
 80043c6:	eb43 0901 	adc.w	r9, r3, r1
 80043ca:	f04f 0200 	mov.w	r2, #0
 80043ce:	f04f 0300 	mov.w	r3, #0
 80043d2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80043d6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80043da:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80043de:	4690      	mov	r8, r2
 80043e0:	4699      	mov	r9, r3
 80043e2:	4623      	mov	r3, r4
 80043e4:	eb18 0303 	adds.w	r3, r8, r3
 80043e8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80043ec:	462b      	mov	r3, r5
 80043ee:	eb49 0303 	adc.w	r3, r9, r3
 80043f2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80043f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043fa:	685b      	ldr	r3, [r3, #4]
 80043fc:	2200      	movs	r2, #0
 80043fe:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004402:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004406:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800440a:	460b      	mov	r3, r1
 800440c:	18db      	adds	r3, r3, r3
 800440e:	653b      	str	r3, [r7, #80]	@ 0x50
 8004410:	4613      	mov	r3, r2
 8004412:	eb42 0303 	adc.w	r3, r2, r3
 8004416:	657b      	str	r3, [r7, #84]	@ 0x54
 8004418:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800441c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004420:	f7fb ff46 	bl	80002b0 <__aeabi_uldivmod>
 8004424:	4602      	mov	r2, r0
 8004426:	460b      	mov	r3, r1
 8004428:	4b61      	ldr	r3, [pc, #388]	@ (80045b0 <UART_SetConfig+0x2d4>)
 800442a:	fba3 2302 	umull	r2, r3, r3, r2
 800442e:	095b      	lsrs	r3, r3, #5
 8004430:	011c      	lsls	r4, r3, #4
 8004432:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004436:	2200      	movs	r2, #0
 8004438:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800443c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004440:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004444:	4642      	mov	r2, r8
 8004446:	464b      	mov	r3, r9
 8004448:	1891      	adds	r1, r2, r2
 800444a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800444c:	415b      	adcs	r3, r3
 800444e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004450:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004454:	4641      	mov	r1, r8
 8004456:	eb12 0a01 	adds.w	sl, r2, r1
 800445a:	4649      	mov	r1, r9
 800445c:	eb43 0b01 	adc.w	fp, r3, r1
 8004460:	f04f 0200 	mov.w	r2, #0
 8004464:	f04f 0300 	mov.w	r3, #0
 8004468:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800446c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004470:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004474:	4692      	mov	sl, r2
 8004476:	469b      	mov	fp, r3
 8004478:	4643      	mov	r3, r8
 800447a:	eb1a 0303 	adds.w	r3, sl, r3
 800447e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004482:	464b      	mov	r3, r9
 8004484:	eb4b 0303 	adc.w	r3, fp, r3
 8004488:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800448c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004490:	685b      	ldr	r3, [r3, #4]
 8004492:	2200      	movs	r2, #0
 8004494:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004498:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800449c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80044a0:	460b      	mov	r3, r1
 80044a2:	18db      	adds	r3, r3, r3
 80044a4:	643b      	str	r3, [r7, #64]	@ 0x40
 80044a6:	4613      	mov	r3, r2
 80044a8:	eb42 0303 	adc.w	r3, r2, r3
 80044ac:	647b      	str	r3, [r7, #68]	@ 0x44
 80044ae:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80044b2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80044b6:	f7fb fefb 	bl	80002b0 <__aeabi_uldivmod>
 80044ba:	4602      	mov	r2, r0
 80044bc:	460b      	mov	r3, r1
 80044be:	4611      	mov	r1, r2
 80044c0:	4b3b      	ldr	r3, [pc, #236]	@ (80045b0 <UART_SetConfig+0x2d4>)
 80044c2:	fba3 2301 	umull	r2, r3, r3, r1
 80044c6:	095b      	lsrs	r3, r3, #5
 80044c8:	2264      	movs	r2, #100	@ 0x64
 80044ca:	fb02 f303 	mul.w	r3, r2, r3
 80044ce:	1acb      	subs	r3, r1, r3
 80044d0:	00db      	lsls	r3, r3, #3
 80044d2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80044d6:	4b36      	ldr	r3, [pc, #216]	@ (80045b0 <UART_SetConfig+0x2d4>)
 80044d8:	fba3 2302 	umull	r2, r3, r3, r2
 80044dc:	095b      	lsrs	r3, r3, #5
 80044de:	005b      	lsls	r3, r3, #1
 80044e0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80044e4:	441c      	add	r4, r3
 80044e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80044ea:	2200      	movs	r2, #0
 80044ec:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80044f0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80044f4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80044f8:	4642      	mov	r2, r8
 80044fa:	464b      	mov	r3, r9
 80044fc:	1891      	adds	r1, r2, r2
 80044fe:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004500:	415b      	adcs	r3, r3
 8004502:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004504:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004508:	4641      	mov	r1, r8
 800450a:	1851      	adds	r1, r2, r1
 800450c:	6339      	str	r1, [r7, #48]	@ 0x30
 800450e:	4649      	mov	r1, r9
 8004510:	414b      	adcs	r3, r1
 8004512:	637b      	str	r3, [r7, #52]	@ 0x34
 8004514:	f04f 0200 	mov.w	r2, #0
 8004518:	f04f 0300 	mov.w	r3, #0
 800451c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004520:	4659      	mov	r1, fp
 8004522:	00cb      	lsls	r3, r1, #3
 8004524:	4651      	mov	r1, sl
 8004526:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800452a:	4651      	mov	r1, sl
 800452c:	00ca      	lsls	r2, r1, #3
 800452e:	4610      	mov	r0, r2
 8004530:	4619      	mov	r1, r3
 8004532:	4603      	mov	r3, r0
 8004534:	4642      	mov	r2, r8
 8004536:	189b      	adds	r3, r3, r2
 8004538:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800453c:	464b      	mov	r3, r9
 800453e:	460a      	mov	r2, r1
 8004540:	eb42 0303 	adc.w	r3, r2, r3
 8004544:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004548:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800454c:	685b      	ldr	r3, [r3, #4]
 800454e:	2200      	movs	r2, #0
 8004550:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004554:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004558:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800455c:	460b      	mov	r3, r1
 800455e:	18db      	adds	r3, r3, r3
 8004560:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004562:	4613      	mov	r3, r2
 8004564:	eb42 0303 	adc.w	r3, r2, r3
 8004568:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800456a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800456e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004572:	f7fb fe9d 	bl	80002b0 <__aeabi_uldivmod>
 8004576:	4602      	mov	r2, r0
 8004578:	460b      	mov	r3, r1
 800457a:	4b0d      	ldr	r3, [pc, #52]	@ (80045b0 <UART_SetConfig+0x2d4>)
 800457c:	fba3 1302 	umull	r1, r3, r3, r2
 8004580:	095b      	lsrs	r3, r3, #5
 8004582:	2164      	movs	r1, #100	@ 0x64
 8004584:	fb01 f303 	mul.w	r3, r1, r3
 8004588:	1ad3      	subs	r3, r2, r3
 800458a:	00db      	lsls	r3, r3, #3
 800458c:	3332      	adds	r3, #50	@ 0x32
 800458e:	4a08      	ldr	r2, [pc, #32]	@ (80045b0 <UART_SetConfig+0x2d4>)
 8004590:	fba2 2303 	umull	r2, r3, r2, r3
 8004594:	095b      	lsrs	r3, r3, #5
 8004596:	f003 0207 	and.w	r2, r3, #7
 800459a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4422      	add	r2, r4
 80045a2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80045a4:	e106      	b.n	80047b4 <UART_SetConfig+0x4d8>
 80045a6:	bf00      	nop
 80045a8:	40011000 	.word	0x40011000
 80045ac:	40011400 	.word	0x40011400
 80045b0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80045b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80045b8:	2200      	movs	r2, #0
 80045ba:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80045be:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80045c2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80045c6:	4642      	mov	r2, r8
 80045c8:	464b      	mov	r3, r9
 80045ca:	1891      	adds	r1, r2, r2
 80045cc:	6239      	str	r1, [r7, #32]
 80045ce:	415b      	adcs	r3, r3
 80045d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80045d2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80045d6:	4641      	mov	r1, r8
 80045d8:	1854      	adds	r4, r2, r1
 80045da:	4649      	mov	r1, r9
 80045dc:	eb43 0501 	adc.w	r5, r3, r1
 80045e0:	f04f 0200 	mov.w	r2, #0
 80045e4:	f04f 0300 	mov.w	r3, #0
 80045e8:	00eb      	lsls	r3, r5, #3
 80045ea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80045ee:	00e2      	lsls	r2, r4, #3
 80045f0:	4614      	mov	r4, r2
 80045f2:	461d      	mov	r5, r3
 80045f4:	4643      	mov	r3, r8
 80045f6:	18e3      	adds	r3, r4, r3
 80045f8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80045fc:	464b      	mov	r3, r9
 80045fe:	eb45 0303 	adc.w	r3, r5, r3
 8004602:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004606:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800460a:	685b      	ldr	r3, [r3, #4]
 800460c:	2200      	movs	r2, #0
 800460e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004612:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004616:	f04f 0200 	mov.w	r2, #0
 800461a:	f04f 0300 	mov.w	r3, #0
 800461e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004622:	4629      	mov	r1, r5
 8004624:	008b      	lsls	r3, r1, #2
 8004626:	4621      	mov	r1, r4
 8004628:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800462c:	4621      	mov	r1, r4
 800462e:	008a      	lsls	r2, r1, #2
 8004630:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004634:	f7fb fe3c 	bl	80002b0 <__aeabi_uldivmod>
 8004638:	4602      	mov	r2, r0
 800463a:	460b      	mov	r3, r1
 800463c:	4b60      	ldr	r3, [pc, #384]	@ (80047c0 <UART_SetConfig+0x4e4>)
 800463e:	fba3 2302 	umull	r2, r3, r3, r2
 8004642:	095b      	lsrs	r3, r3, #5
 8004644:	011c      	lsls	r4, r3, #4
 8004646:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800464a:	2200      	movs	r2, #0
 800464c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004650:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004654:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004658:	4642      	mov	r2, r8
 800465a:	464b      	mov	r3, r9
 800465c:	1891      	adds	r1, r2, r2
 800465e:	61b9      	str	r1, [r7, #24]
 8004660:	415b      	adcs	r3, r3
 8004662:	61fb      	str	r3, [r7, #28]
 8004664:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004668:	4641      	mov	r1, r8
 800466a:	1851      	adds	r1, r2, r1
 800466c:	6139      	str	r1, [r7, #16]
 800466e:	4649      	mov	r1, r9
 8004670:	414b      	adcs	r3, r1
 8004672:	617b      	str	r3, [r7, #20]
 8004674:	f04f 0200 	mov.w	r2, #0
 8004678:	f04f 0300 	mov.w	r3, #0
 800467c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004680:	4659      	mov	r1, fp
 8004682:	00cb      	lsls	r3, r1, #3
 8004684:	4651      	mov	r1, sl
 8004686:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800468a:	4651      	mov	r1, sl
 800468c:	00ca      	lsls	r2, r1, #3
 800468e:	4610      	mov	r0, r2
 8004690:	4619      	mov	r1, r3
 8004692:	4603      	mov	r3, r0
 8004694:	4642      	mov	r2, r8
 8004696:	189b      	adds	r3, r3, r2
 8004698:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800469c:	464b      	mov	r3, r9
 800469e:	460a      	mov	r2, r1
 80046a0:	eb42 0303 	adc.w	r3, r2, r3
 80046a4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80046a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046ac:	685b      	ldr	r3, [r3, #4]
 80046ae:	2200      	movs	r2, #0
 80046b0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80046b2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80046b4:	f04f 0200 	mov.w	r2, #0
 80046b8:	f04f 0300 	mov.w	r3, #0
 80046bc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80046c0:	4649      	mov	r1, r9
 80046c2:	008b      	lsls	r3, r1, #2
 80046c4:	4641      	mov	r1, r8
 80046c6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80046ca:	4641      	mov	r1, r8
 80046cc:	008a      	lsls	r2, r1, #2
 80046ce:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80046d2:	f7fb fded 	bl	80002b0 <__aeabi_uldivmod>
 80046d6:	4602      	mov	r2, r0
 80046d8:	460b      	mov	r3, r1
 80046da:	4611      	mov	r1, r2
 80046dc:	4b38      	ldr	r3, [pc, #224]	@ (80047c0 <UART_SetConfig+0x4e4>)
 80046de:	fba3 2301 	umull	r2, r3, r3, r1
 80046e2:	095b      	lsrs	r3, r3, #5
 80046e4:	2264      	movs	r2, #100	@ 0x64
 80046e6:	fb02 f303 	mul.w	r3, r2, r3
 80046ea:	1acb      	subs	r3, r1, r3
 80046ec:	011b      	lsls	r3, r3, #4
 80046ee:	3332      	adds	r3, #50	@ 0x32
 80046f0:	4a33      	ldr	r2, [pc, #204]	@ (80047c0 <UART_SetConfig+0x4e4>)
 80046f2:	fba2 2303 	umull	r2, r3, r2, r3
 80046f6:	095b      	lsrs	r3, r3, #5
 80046f8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80046fc:	441c      	add	r4, r3
 80046fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004702:	2200      	movs	r2, #0
 8004704:	673b      	str	r3, [r7, #112]	@ 0x70
 8004706:	677a      	str	r2, [r7, #116]	@ 0x74
 8004708:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800470c:	4642      	mov	r2, r8
 800470e:	464b      	mov	r3, r9
 8004710:	1891      	adds	r1, r2, r2
 8004712:	60b9      	str	r1, [r7, #8]
 8004714:	415b      	adcs	r3, r3
 8004716:	60fb      	str	r3, [r7, #12]
 8004718:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800471c:	4641      	mov	r1, r8
 800471e:	1851      	adds	r1, r2, r1
 8004720:	6039      	str	r1, [r7, #0]
 8004722:	4649      	mov	r1, r9
 8004724:	414b      	adcs	r3, r1
 8004726:	607b      	str	r3, [r7, #4]
 8004728:	f04f 0200 	mov.w	r2, #0
 800472c:	f04f 0300 	mov.w	r3, #0
 8004730:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004734:	4659      	mov	r1, fp
 8004736:	00cb      	lsls	r3, r1, #3
 8004738:	4651      	mov	r1, sl
 800473a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800473e:	4651      	mov	r1, sl
 8004740:	00ca      	lsls	r2, r1, #3
 8004742:	4610      	mov	r0, r2
 8004744:	4619      	mov	r1, r3
 8004746:	4603      	mov	r3, r0
 8004748:	4642      	mov	r2, r8
 800474a:	189b      	adds	r3, r3, r2
 800474c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800474e:	464b      	mov	r3, r9
 8004750:	460a      	mov	r2, r1
 8004752:	eb42 0303 	adc.w	r3, r2, r3
 8004756:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004758:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800475c:	685b      	ldr	r3, [r3, #4]
 800475e:	2200      	movs	r2, #0
 8004760:	663b      	str	r3, [r7, #96]	@ 0x60
 8004762:	667a      	str	r2, [r7, #100]	@ 0x64
 8004764:	f04f 0200 	mov.w	r2, #0
 8004768:	f04f 0300 	mov.w	r3, #0
 800476c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004770:	4649      	mov	r1, r9
 8004772:	008b      	lsls	r3, r1, #2
 8004774:	4641      	mov	r1, r8
 8004776:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800477a:	4641      	mov	r1, r8
 800477c:	008a      	lsls	r2, r1, #2
 800477e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004782:	f7fb fd95 	bl	80002b0 <__aeabi_uldivmod>
 8004786:	4602      	mov	r2, r0
 8004788:	460b      	mov	r3, r1
 800478a:	4b0d      	ldr	r3, [pc, #52]	@ (80047c0 <UART_SetConfig+0x4e4>)
 800478c:	fba3 1302 	umull	r1, r3, r3, r2
 8004790:	095b      	lsrs	r3, r3, #5
 8004792:	2164      	movs	r1, #100	@ 0x64
 8004794:	fb01 f303 	mul.w	r3, r1, r3
 8004798:	1ad3      	subs	r3, r2, r3
 800479a:	011b      	lsls	r3, r3, #4
 800479c:	3332      	adds	r3, #50	@ 0x32
 800479e:	4a08      	ldr	r2, [pc, #32]	@ (80047c0 <UART_SetConfig+0x4e4>)
 80047a0:	fba2 2303 	umull	r2, r3, r2, r3
 80047a4:	095b      	lsrs	r3, r3, #5
 80047a6:	f003 020f 	and.w	r2, r3, #15
 80047aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4422      	add	r2, r4
 80047b2:	609a      	str	r2, [r3, #8]
}
 80047b4:	bf00      	nop
 80047b6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80047ba:	46bd      	mov	sp, r7
 80047bc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80047c0:	51eb851f 	.word	0x51eb851f

080047c4 <DEV_SPI_WRite>:
	HAL_Delay(xms);
}


void DEV_SPI_WRite(UBYTE _dat)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b082      	sub	sp, #8
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	4603      	mov	r3, r0
 80047cc:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&hspi2, (uint8_t *)&_dat, 1, 500);
 80047ce:	1df9      	adds	r1, r7, #7
 80047d0:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80047d4:	2201      	movs	r2, #1
 80047d6:	4803      	ldr	r0, [pc, #12]	@ (80047e4 <DEV_SPI_WRite+0x20>)
 80047d8:	f7fe fab1 	bl	8002d3e <HAL_SPI_Transmit>
}
 80047dc:	bf00      	nop
 80047de:	3708      	adds	r7, #8
 80047e0:	46bd      	mov	sp, r7
 80047e2:	bd80      	pop	{r7, pc}
 80047e4:	200000ac 	.word	0x200000ac

080047e8 <DEV_Module_Init>:

int DEV_Module_Init(void)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	af00      	add	r7, sp, #0
    DEV_Digital_Write(DEV_DC_PIN, 1);
 80047ec:	2201      	movs	r2, #1
 80047ee:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80047f2:	480b      	ldr	r0, [pc, #44]	@ (8004820 <DEV_Module_Init+0x38>)
 80047f4:	f7fd fc00 	bl	8001ff8 <HAL_GPIO_WritePin>
    DEV_Digital_Write(DEV_CS_PIN, 1);
 80047f8:	2201      	movs	r2, #1
 80047fa:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80047fe:	4808      	ldr	r0, [pc, #32]	@ (8004820 <DEV_Module_Init+0x38>)
 8004800:	f7fd fbfa 	bl	8001ff8 <HAL_GPIO_WritePin>
    DEV_Digital_Write(DEV_RST_PIN, 1);
 8004804:	2201      	movs	r2, #1
 8004806:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800480a:	4805      	ldr	r0, [pc, #20]	@ (8004820 <DEV_Module_Init+0x38>)
 800480c:	f7fd fbf4 	bl	8001ff8 <HAL_GPIO_WritePin>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8004810:	2104      	movs	r1, #4
 8004812:	4804      	ldr	r0, [pc, #16]	@ (8004824 <DEV_Module_Init+0x3c>)
 8004814:	f7fe fdfc 	bl	8003410 <HAL_TIM_PWM_Start>
		return 0;
 8004818:	2300      	movs	r3, #0
}
 800481a:	4618      	mov	r0, r3
 800481c:	bd80      	pop	{r7, pc}
 800481e:	bf00      	nop
 8004820:	40020400 	.word	0x40020400
 8004824:	20000108 	.word	0x20000108

08004828 <Paint_NewImage>:
    width   :   The width of the picture
    Height  :   The height of the picture
    Color   :   Whether the picture is inverted
******************************************************************************/
void Paint_NewImage(UWORD Width, UWORD Height, UWORD Rotate, UWORD Color)
{
 8004828:	b590      	push	{r4, r7, lr}
 800482a:	b083      	sub	sp, #12
 800482c:	af00      	add	r7, sp, #0
 800482e:	4604      	mov	r4, r0
 8004830:	4608      	mov	r0, r1
 8004832:	4611      	mov	r1, r2
 8004834:	461a      	mov	r2, r3
 8004836:	4623      	mov	r3, r4
 8004838:	80fb      	strh	r3, [r7, #6]
 800483a:	4603      	mov	r3, r0
 800483c:	80bb      	strh	r3, [r7, #4]
 800483e:	460b      	mov	r3, r1
 8004840:	807b      	strh	r3, [r7, #2]
 8004842:	4613      	mov	r3, r2
 8004844:	803b      	strh	r3, [r7, #0]
    Paint.WidthMemory = Width;
 8004846:	4a1c      	ldr	r2, [pc, #112]	@ (80048b8 <Paint_NewImage+0x90>)
 8004848:	88fb      	ldrh	r3, [r7, #6]
 800484a:	8113      	strh	r3, [r2, #8]
    Paint.HeightMemory = Height;
 800484c:	4a1a      	ldr	r2, [pc, #104]	@ (80048b8 <Paint_NewImage+0x90>)
 800484e:	88bb      	ldrh	r3, [r7, #4]
 8004850:	8153      	strh	r3, [r2, #10]
    Paint.Color = Color;    
 8004852:	4a19      	ldr	r2, [pc, #100]	@ (80048b8 <Paint_NewImage+0x90>)
 8004854:	883b      	ldrh	r3, [r7, #0]
 8004856:	8193      	strh	r3, [r2, #12]
    Paint.WidthByte = Width;
 8004858:	4a17      	ldr	r2, [pc, #92]	@ (80048b8 <Paint_NewImage+0x90>)
 800485a:	88fb      	ldrh	r3, [r7, #6]
 800485c:	8253      	strh	r3, [r2, #18]
    Paint.HeightByte = Height;    
 800485e:	4a16      	ldr	r2, [pc, #88]	@ (80048b8 <Paint_NewImage+0x90>)
 8004860:	88bb      	ldrh	r3, [r7, #4]
 8004862:	8293      	strh	r3, [r2, #20]
    printf("WidthByte = %d, HeightByte = %d\r\n", Paint.WidthByte, Paint.HeightByte);
 8004864:	4b14      	ldr	r3, [pc, #80]	@ (80048b8 <Paint_NewImage+0x90>)
 8004866:	8a5b      	ldrh	r3, [r3, #18]
 8004868:	b29b      	uxth	r3, r3
 800486a:	4619      	mov	r1, r3
 800486c:	4b12      	ldr	r3, [pc, #72]	@ (80048b8 <Paint_NewImage+0x90>)
 800486e:	8a9b      	ldrh	r3, [r3, #20]
 8004870:	b29b      	uxth	r3, r3
 8004872:	461a      	mov	r2, r3
 8004874:	4811      	ldr	r0, [pc, #68]	@ (80048bc <Paint_NewImage+0x94>)
 8004876:	f000 fdf3 	bl	8005460 <iprintf>
   
    Paint.Rotate = Rotate;
 800487a:	4a0f      	ldr	r2, [pc, #60]	@ (80048b8 <Paint_NewImage+0x90>)
 800487c:	887b      	ldrh	r3, [r7, #2]
 800487e:	81d3      	strh	r3, [r2, #14]
    Paint.Mirror = MIRROR_NONE;
 8004880:	4b0d      	ldr	r3, [pc, #52]	@ (80048b8 <Paint_NewImage+0x90>)
 8004882:	2200      	movs	r2, #0
 8004884:	821a      	strh	r2, [r3, #16]
    
    if(Rotate == ROTATE_0 || Rotate == ROTATE_180) {
 8004886:	887b      	ldrh	r3, [r7, #2]
 8004888:	2b00      	cmp	r3, #0
 800488a:	d002      	beq.n	8004892 <Paint_NewImage+0x6a>
 800488c:	887b      	ldrh	r3, [r7, #2]
 800488e:	2bb4      	cmp	r3, #180	@ 0xb4
 8004890:	d106      	bne.n	80048a0 <Paint_NewImage+0x78>
        Paint.Width = Width;
 8004892:	4a09      	ldr	r2, [pc, #36]	@ (80048b8 <Paint_NewImage+0x90>)
 8004894:	88fb      	ldrh	r3, [r7, #6]
 8004896:	8093      	strh	r3, [r2, #4]
        Paint.Height = Height;
 8004898:	4a07      	ldr	r2, [pc, #28]	@ (80048b8 <Paint_NewImage+0x90>)
 800489a:	88bb      	ldrh	r3, [r7, #4]
 800489c:	80d3      	strh	r3, [r2, #6]
 800489e:	e006      	b.n	80048ae <Paint_NewImage+0x86>
    } else {
        Paint.Width = Height;
 80048a0:	4a05      	ldr	r2, [pc, #20]	@ (80048b8 <Paint_NewImage+0x90>)
 80048a2:	88bb      	ldrh	r3, [r7, #4]
 80048a4:	8093      	strh	r3, [r2, #4]
        Paint.Height = Width;
 80048a6:	4a04      	ldr	r2, [pc, #16]	@ (80048b8 <Paint_NewImage+0x90>)
 80048a8:	88fb      	ldrh	r3, [r7, #6]
 80048aa:	80d3      	strh	r3, [r2, #6]
    }
}
 80048ac:	bf00      	nop
 80048ae:	bf00      	nop
 80048b0:	370c      	adds	r7, #12
 80048b2:	46bd      	mov	sp, r7
 80048b4:	bd90      	pop	{r4, r7, pc}
 80048b6:	bf00      	nop
 80048b8:	20000274 	.word	0x20000274
 80048bc:	08006538 	.word	0x08006538

080048c0 <Paint_SetClearFuntion>:
function:	Select Clear Funtion
parameter:
      Clear :   Pointer to Clear funtion 
******************************************************************************/
void Paint_SetClearFuntion(void (*Clear)(UWORD))
{
 80048c0:	b480      	push	{r7}
 80048c2:	b083      	sub	sp, #12
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
  CLEAR=Clear;
 80048c8:	4a04      	ldr	r2, [pc, #16]	@ (80048dc <Paint_SetClearFuntion+0x1c>)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6013      	str	r3, [r2, #0]
}
 80048ce:	bf00      	nop
 80048d0:	370c      	adds	r7, #12
 80048d2:	46bd      	mov	sp, r7
 80048d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d8:	4770      	bx	lr
 80048da:	bf00      	nop
 80048dc:	20000290 	.word	0x20000290

080048e0 <Paint_SetDisplayFuntion>:
function:	Select DisplayF untion
parameter:
      Display :   Pointer to display funtion 
******************************************************************************/
void Paint_SetDisplayFuntion(void (*Display)(UWORD,UWORD,UWORD))
{
 80048e0:	b480      	push	{r7}
 80048e2:	b083      	sub	sp, #12
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
  DISPLAY=Display;
 80048e8:	4a04      	ldr	r2, [pc, #16]	@ (80048fc <Paint_SetDisplayFuntion+0x1c>)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6013      	str	r3, [r2, #0]
}
 80048ee:	bf00      	nop
 80048f0:	370c      	adds	r7, #12
 80048f2:	46bd      	mov	sp, r7
 80048f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f8:	4770      	bx	lr
 80048fa:	bf00      	nop
 80048fc:	2000028c 	.word	0x2000028c

08004900 <Paint_SetRotate>:
function:	Select Image Rotate
parameter:
    Rotate   :   0,90,180,270
******************************************************************************/
void Paint_SetRotate(UWORD Rotate)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b082      	sub	sp, #8
 8004904:	af00      	add	r7, sp, #0
 8004906:	4603      	mov	r3, r0
 8004908:	80fb      	strh	r3, [r7, #6]
    if(Rotate == ROTATE_0 || Rotate == ROTATE_90 || Rotate == ROTATE_180 || Rotate == ROTATE_270) {
 800490a:	88fb      	ldrh	r3, [r7, #6]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d009      	beq.n	8004924 <Paint_SetRotate+0x24>
 8004910:	88fb      	ldrh	r3, [r7, #6]
 8004912:	2b5a      	cmp	r3, #90	@ 0x5a
 8004914:	d006      	beq.n	8004924 <Paint_SetRotate+0x24>
 8004916:	88fb      	ldrh	r3, [r7, #6]
 8004918:	2bb4      	cmp	r3, #180	@ 0xb4
 800491a:	d003      	beq.n	8004924 <Paint_SetRotate+0x24>
 800491c:	88fb      	ldrh	r3, [r7, #6]
 800491e:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 8004922:	d108      	bne.n	8004936 <Paint_SetRotate+0x36>
        Debug("Set image Rotate %d\r\n", Rotate);
 8004924:	88fb      	ldrh	r3, [r7, #6]
 8004926:	4619      	mov	r1, r3
 8004928:	4807      	ldr	r0, [pc, #28]	@ (8004948 <Paint_SetRotate+0x48>)
 800492a:	f000 fd99 	bl	8005460 <iprintf>
        Paint.Rotate = Rotate;
 800492e:	4a07      	ldr	r2, [pc, #28]	@ (800494c <Paint_SetRotate+0x4c>)
 8004930:	88fb      	ldrh	r3, [r7, #6]
 8004932:	81d3      	strh	r3, [r2, #14]
 8004934:	e003      	b.n	800493e <Paint_SetRotate+0x3e>
    } else {
        Debug("rotate = 0, 90, 180, 270\r\n");
 8004936:	4806      	ldr	r0, [pc, #24]	@ (8004950 <Paint_SetRotate+0x50>)
 8004938:	f000 fdfa 	bl	8005530 <puts>
      //  exit(0);
    }
}
 800493c:	bf00      	nop
 800493e:	bf00      	nop
 8004940:	3708      	adds	r7, #8
 8004942:	46bd      	mov	sp, r7
 8004944:	bd80      	pop	{r7, pc}
 8004946:	bf00      	nop
 8004948:	0800655c 	.word	0x0800655c
 800494c:	20000274 	.word	0x20000274
 8004950:	0800657c 	.word	0x0800657c

08004954 <Paint_SetPixel>:
    Xpoint  :   At point X
    Ypoint  :   At point Y
    Color   :   Painted colors
******************************************************************************/
void Paint_SetPixel(UWORD Xpoint, UWORD Ypoint, UWORD Color)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b084      	sub	sp, #16
 8004958:	af00      	add	r7, sp, #0
 800495a:	4603      	mov	r3, r0
 800495c:	80fb      	strh	r3, [r7, #6]
 800495e:	460b      	mov	r3, r1
 8004960:	80bb      	strh	r3, [r7, #4]
 8004962:	4613      	mov	r3, r2
 8004964:	807b      	strh	r3, [r7, #2]
    if(Xpoint > Paint.Width || Ypoint > Paint.Height){
 8004966:	4b50      	ldr	r3, [pc, #320]	@ (8004aa8 <Paint_SetPixel+0x154>)
 8004968:	889b      	ldrh	r3, [r3, #4]
 800496a:	b29b      	uxth	r3, r3
 800496c:	88fa      	ldrh	r2, [r7, #6]
 800496e:	429a      	cmp	r2, r3
 8004970:	d805      	bhi.n	800497e <Paint_SetPixel+0x2a>
 8004972:	4b4d      	ldr	r3, [pc, #308]	@ (8004aa8 <Paint_SetPixel+0x154>)
 8004974:	88db      	ldrh	r3, [r3, #6]
 8004976:	b29b      	uxth	r3, r3
 8004978:	88ba      	ldrh	r2, [r7, #4]
 800497a:	429a      	cmp	r2, r3
 800497c:	d903      	bls.n	8004986 <Paint_SetPixel+0x32>
        Debug("Exceeding display boundaries\r\n");
 800497e:	484b      	ldr	r0, [pc, #300]	@ (8004aac <Paint_SetPixel+0x158>)
 8004980:	f000 fdd6 	bl	8005530 <puts>
        return;
 8004984:	e08c      	b.n	8004aa0 <Paint_SetPixel+0x14c>
    }      
    UWORD X, Y;

    switch(Paint.Rotate) {
 8004986:	4b48      	ldr	r3, [pc, #288]	@ (8004aa8 <Paint_SetPixel+0x154>)
 8004988:	89db      	ldrh	r3, [r3, #14]
 800498a:	b29b      	uxth	r3, r3
 800498c:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 8004990:	d02d      	beq.n	80049ee <Paint_SetPixel+0x9a>
 8004992:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 8004996:	f300 8080 	bgt.w	8004a9a <Paint_SetPixel+0x146>
 800499a:	2bb4      	cmp	r3, #180	@ 0xb4
 800499c:	d016      	beq.n	80049cc <Paint_SetPixel+0x78>
 800499e:	2bb4      	cmp	r3, #180	@ 0xb4
 80049a0:	dc7b      	bgt.n	8004a9a <Paint_SetPixel+0x146>
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d002      	beq.n	80049ac <Paint_SetPixel+0x58>
 80049a6:	2b5a      	cmp	r3, #90	@ 0x5a
 80049a8:	d005      	beq.n	80049b6 <Paint_SetPixel+0x62>
        X = Ypoint;
        Y = Paint.HeightMemory - Xpoint - 1;
        break;

    default:
        return;
 80049aa:	e076      	b.n	8004a9a <Paint_SetPixel+0x146>
        X = Xpoint;
 80049ac:	88fb      	ldrh	r3, [r7, #6]
 80049ae:	81fb      	strh	r3, [r7, #14]
        Y = Ypoint;  
 80049b0:	88bb      	ldrh	r3, [r7, #4]
 80049b2:	81bb      	strh	r3, [r7, #12]
        break;
 80049b4:	e026      	b.n	8004a04 <Paint_SetPixel+0xb0>
        X = Paint.WidthMemory - Ypoint - 1;
 80049b6:	4b3c      	ldr	r3, [pc, #240]	@ (8004aa8 <Paint_SetPixel+0x154>)
 80049b8:	891b      	ldrh	r3, [r3, #8]
 80049ba:	b29a      	uxth	r2, r3
 80049bc:	88bb      	ldrh	r3, [r7, #4]
 80049be:	1ad3      	subs	r3, r2, r3
 80049c0:	b29b      	uxth	r3, r3
 80049c2:	3b01      	subs	r3, #1
 80049c4:	81fb      	strh	r3, [r7, #14]
        Y = Xpoint;
 80049c6:	88fb      	ldrh	r3, [r7, #6]
 80049c8:	81bb      	strh	r3, [r7, #12]
        break;
 80049ca:	e01b      	b.n	8004a04 <Paint_SetPixel+0xb0>
        X = Paint.WidthMemory - Xpoint - 1;
 80049cc:	4b36      	ldr	r3, [pc, #216]	@ (8004aa8 <Paint_SetPixel+0x154>)
 80049ce:	891b      	ldrh	r3, [r3, #8]
 80049d0:	b29a      	uxth	r2, r3
 80049d2:	88fb      	ldrh	r3, [r7, #6]
 80049d4:	1ad3      	subs	r3, r2, r3
 80049d6:	b29b      	uxth	r3, r3
 80049d8:	3b01      	subs	r3, #1
 80049da:	81fb      	strh	r3, [r7, #14]
        Y = Paint.HeightMemory - Ypoint - 1;
 80049dc:	4b32      	ldr	r3, [pc, #200]	@ (8004aa8 <Paint_SetPixel+0x154>)
 80049de:	895b      	ldrh	r3, [r3, #10]
 80049e0:	b29a      	uxth	r2, r3
 80049e2:	88bb      	ldrh	r3, [r7, #4]
 80049e4:	1ad3      	subs	r3, r2, r3
 80049e6:	b29b      	uxth	r3, r3
 80049e8:	3b01      	subs	r3, #1
 80049ea:	81bb      	strh	r3, [r7, #12]
        break;
 80049ec:	e00a      	b.n	8004a04 <Paint_SetPixel+0xb0>
        X = Ypoint;
 80049ee:	88bb      	ldrh	r3, [r7, #4]
 80049f0:	81fb      	strh	r3, [r7, #14]
        Y = Paint.HeightMemory - Xpoint - 1;
 80049f2:	4b2d      	ldr	r3, [pc, #180]	@ (8004aa8 <Paint_SetPixel+0x154>)
 80049f4:	895b      	ldrh	r3, [r3, #10]
 80049f6:	b29a      	uxth	r2, r3
 80049f8:	88fb      	ldrh	r3, [r7, #6]
 80049fa:	1ad3      	subs	r3, r2, r3
 80049fc:	b29b      	uxth	r3, r3
 80049fe:	3b01      	subs	r3, #1
 8004a00:	81bb      	strh	r3, [r7, #12]
        break;
 8004a02:	bf00      	nop
    }
    
    switch(Paint.Mirror) {
 8004a04:	4b28      	ldr	r3, [pc, #160]	@ (8004aa8 <Paint_SetPixel+0x154>)
 8004a06:	8a1b      	ldrh	r3, [r3, #16]
 8004a08:	b29b      	uxth	r3, r3
 8004a0a:	2b03      	cmp	r3, #3
 8004a0c:	d847      	bhi.n	8004a9e <Paint_SetPixel+0x14a>
 8004a0e:	a201      	add	r2, pc, #4	@ (adr r2, 8004a14 <Paint_SetPixel+0xc0>)
 8004a10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a14:	08004a6b 	.word	0x08004a6b
 8004a18:	08004a25 	.word	0x08004a25
 8004a1c:	08004a37 	.word	0x08004a37
 8004a20:	08004a49 	.word	0x08004a49
    case MIRROR_NONE:
        break;
    case MIRROR_HORIZONTAL:
        X = Paint.WidthMemory - X - 1;
 8004a24:	4b20      	ldr	r3, [pc, #128]	@ (8004aa8 <Paint_SetPixel+0x154>)
 8004a26:	891b      	ldrh	r3, [r3, #8]
 8004a28:	b29a      	uxth	r2, r3
 8004a2a:	89fb      	ldrh	r3, [r7, #14]
 8004a2c:	1ad3      	subs	r3, r2, r3
 8004a2e:	b29b      	uxth	r3, r3
 8004a30:	3b01      	subs	r3, #1
 8004a32:	81fb      	strh	r3, [r7, #14]
        break;
 8004a34:	e01a      	b.n	8004a6c <Paint_SetPixel+0x118>
    case MIRROR_VERTICAL:
        Y = Paint.HeightMemory - Y - 1;
 8004a36:	4b1c      	ldr	r3, [pc, #112]	@ (8004aa8 <Paint_SetPixel+0x154>)
 8004a38:	895b      	ldrh	r3, [r3, #10]
 8004a3a:	b29a      	uxth	r2, r3
 8004a3c:	89bb      	ldrh	r3, [r7, #12]
 8004a3e:	1ad3      	subs	r3, r2, r3
 8004a40:	b29b      	uxth	r3, r3
 8004a42:	3b01      	subs	r3, #1
 8004a44:	81bb      	strh	r3, [r7, #12]
        break;
 8004a46:	e011      	b.n	8004a6c <Paint_SetPixel+0x118>
    case MIRROR_ORIGIN:
        X = Paint.WidthMemory - X - 1;
 8004a48:	4b17      	ldr	r3, [pc, #92]	@ (8004aa8 <Paint_SetPixel+0x154>)
 8004a4a:	891b      	ldrh	r3, [r3, #8]
 8004a4c:	b29a      	uxth	r2, r3
 8004a4e:	89fb      	ldrh	r3, [r7, #14]
 8004a50:	1ad3      	subs	r3, r2, r3
 8004a52:	b29b      	uxth	r3, r3
 8004a54:	3b01      	subs	r3, #1
 8004a56:	81fb      	strh	r3, [r7, #14]
        Y = Paint.HeightMemory - Y - 1;
 8004a58:	4b13      	ldr	r3, [pc, #76]	@ (8004aa8 <Paint_SetPixel+0x154>)
 8004a5a:	895b      	ldrh	r3, [r3, #10]
 8004a5c:	b29a      	uxth	r2, r3
 8004a5e:	89bb      	ldrh	r3, [r7, #12]
 8004a60:	1ad3      	subs	r3, r2, r3
 8004a62:	b29b      	uxth	r3, r3
 8004a64:	3b01      	subs	r3, #1
 8004a66:	81bb      	strh	r3, [r7, #12]
        break;
 8004a68:	e000      	b.n	8004a6c <Paint_SetPixel+0x118>
        break;
 8004a6a:	bf00      	nop
    default:
        return;
    }

    // printf("x = %d, y = %d\r\n", X, Y);
    if(X > Paint.WidthMemory || Y > Paint.HeightMemory){
 8004a6c:	4b0e      	ldr	r3, [pc, #56]	@ (8004aa8 <Paint_SetPixel+0x154>)
 8004a6e:	891b      	ldrh	r3, [r3, #8]
 8004a70:	b29b      	uxth	r3, r3
 8004a72:	89fa      	ldrh	r2, [r7, #14]
 8004a74:	429a      	cmp	r2, r3
 8004a76:	d805      	bhi.n	8004a84 <Paint_SetPixel+0x130>
 8004a78:	4b0b      	ldr	r3, [pc, #44]	@ (8004aa8 <Paint_SetPixel+0x154>)
 8004a7a:	895b      	ldrh	r3, [r3, #10]
 8004a7c:	b29b      	uxth	r3, r3
 8004a7e:	89ba      	ldrh	r2, [r7, #12]
 8004a80:	429a      	cmp	r2, r3
 8004a82:	d903      	bls.n	8004a8c <Paint_SetPixel+0x138>
        Debug("Exceeding display boundaries\r\n");
 8004a84:	4809      	ldr	r0, [pc, #36]	@ (8004aac <Paint_SetPixel+0x158>)
 8004a86:	f000 fd53 	bl	8005530 <puts>
        return;
 8004a8a:	e009      	b.n	8004aa0 <Paint_SetPixel+0x14c>
    }
    
   // UDOUBLE Addr = X / 8 + Y * Paint.WidthByte;
		DISPLAY(X,Y, Color);
 8004a8c:	4b08      	ldr	r3, [pc, #32]	@ (8004ab0 <Paint_SetPixel+0x15c>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	887a      	ldrh	r2, [r7, #2]
 8004a92:	89b9      	ldrh	r1, [r7, #12]
 8004a94:	89f8      	ldrh	r0, [r7, #14]
 8004a96:	4798      	blx	r3
 8004a98:	e002      	b.n	8004aa0 <Paint_SetPixel+0x14c>
        return;
 8004a9a:	bf00      	nop
 8004a9c:	e000      	b.n	8004aa0 <Paint_SetPixel+0x14c>
        return;
 8004a9e:	bf00      	nop
}
 8004aa0:	3710      	adds	r7, #16
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	bd80      	pop	{r7, pc}
 8004aa6:	bf00      	nop
 8004aa8:	20000274 	.word	0x20000274
 8004aac:	08006638 	.word	0x08006638
 8004ab0:	2000028c 	.word	0x2000028c

08004ab4 <Paint_Clear>:
function:	Clear the color of the picture
parameter:
    Color   :   Painted colors
******************************************************************************/
void Paint_Clear(UWORD Color)
{	
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b082      	sub	sp, #8
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	4603      	mov	r3, r0
 8004abc:	80fb      	strh	r3, [r7, #6]
	CLEAR(Color);
 8004abe:	4b04      	ldr	r3, [pc, #16]	@ (8004ad0 <Paint_Clear+0x1c>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	88fa      	ldrh	r2, [r7, #6]
 8004ac4:	4610      	mov	r0, r2
 8004ac6:	4798      	blx	r3
}
 8004ac8:	bf00      	nop
 8004aca:	3708      	adds	r7, #8
 8004acc:	46bd      	mov	sp, r7
 8004ace:	bd80      	pop	{r7, pc}
 8004ad0:	20000290 	.word	0x20000290

08004ad4 <Paint_DrawChar>:
    Color_Background : Select the background color of the English character
    Color_Foreground : Select the foreground color of the English character
******************************************************************************/
void Paint_DrawChar(UWORD Xpoint, UWORD Ypoint, const char Acsii_Char,
                    sFONT* Font, UWORD Color_Background, UWORD Color_Foreground)
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b088      	sub	sp, #32
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	607b      	str	r3, [r7, #4]
 8004adc:	4603      	mov	r3, r0
 8004ade:	81fb      	strh	r3, [r7, #14]
 8004ae0:	460b      	mov	r3, r1
 8004ae2:	81bb      	strh	r3, [r7, #12]
 8004ae4:	4613      	mov	r3, r2
 8004ae6:	72fb      	strb	r3, [r7, #11]
    UWORD Page, Column;

    if (Xpoint > Paint.Width || Ypoint > Paint.Height) {
 8004ae8:	4b4e      	ldr	r3, [pc, #312]	@ (8004c24 <Paint_DrawChar+0x150>)
 8004aea:	889b      	ldrh	r3, [r3, #4]
 8004aec:	b29b      	uxth	r3, r3
 8004aee:	89fa      	ldrh	r2, [r7, #14]
 8004af0:	429a      	cmp	r2, r3
 8004af2:	d805      	bhi.n	8004b00 <Paint_DrawChar+0x2c>
 8004af4:	4b4b      	ldr	r3, [pc, #300]	@ (8004c24 <Paint_DrawChar+0x150>)
 8004af6:	88db      	ldrh	r3, [r3, #6]
 8004af8:	b29b      	uxth	r3, r3
 8004afa:	89ba      	ldrh	r2, [r7, #12]
 8004afc:	429a      	cmp	r2, r3
 8004afe:	d903      	bls.n	8004b08 <Paint_DrawChar+0x34>
        Debug("Paint_DrawChar Input exceeds the normal display range\r\n");
 8004b00:	4849      	ldr	r0, [pc, #292]	@ (8004c28 <Paint_DrawChar+0x154>)
 8004b02:	f000 fd15 	bl	8005530 <puts>
        return;
 8004b06:	e089      	b.n	8004c1c <Paint_DrawChar+0x148>
    }

    uint32_t Char_Offset = (Acsii_Char - ' ') * Font->Height * (Font->Width / 8 + (Font->Width % 8 ? 1 : 0));
 8004b08:	7afb      	ldrb	r3, [r7, #11]
 8004b0a:	3b20      	subs	r3, #32
 8004b0c:	687a      	ldr	r2, [r7, #4]
 8004b0e:	88d2      	ldrh	r2, [r2, #6]
 8004b10:	fb02 f303 	mul.w	r3, r2, r3
 8004b14:	687a      	ldr	r2, [r7, #4]
 8004b16:	8892      	ldrh	r2, [r2, #4]
 8004b18:	08d2      	lsrs	r2, r2, #3
 8004b1a:	b292      	uxth	r2, r2
 8004b1c:	4611      	mov	r1, r2
 8004b1e:	687a      	ldr	r2, [r7, #4]
 8004b20:	8892      	ldrh	r2, [r2, #4]
 8004b22:	f002 0207 	and.w	r2, r2, #7
 8004b26:	b292      	uxth	r2, r2
 8004b28:	2a00      	cmp	r2, #0
 8004b2a:	bf14      	ite	ne
 8004b2c:	2201      	movne	r2, #1
 8004b2e:	2200      	moveq	r2, #0
 8004b30:	b2d2      	uxtb	r2, r2
 8004b32:	440a      	add	r2, r1
 8004b34:	fb02 f303 	mul.w	r3, r2, r3
 8004b38:	617b      	str	r3, [r7, #20]
    const unsigned char *ptr = &Font->table[Char_Offset];
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681a      	ldr	r2, [r3, #0]
 8004b3e:	697b      	ldr	r3, [r7, #20]
 8004b40:	4413      	add	r3, r2
 8004b42:	61bb      	str	r3, [r7, #24]

    for (Page = 0; Page < Font->Height; Page ++ ) {
 8004b44:	2300      	movs	r3, #0
 8004b46:	83fb      	strh	r3, [r7, #30]
 8004b48:	e063      	b.n	8004c12 <Paint_DrawChar+0x13e>
        for (Column = 0; Column < Font->Width; Column ++ ) {
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	83bb      	strh	r3, [r7, #28]
 8004b4e:	e04e      	b.n	8004bee <Paint_DrawChar+0x11a>

            //To determine whether the font background color and screen background color is consistent
            if (FONT_BACKGROUND == Color_Background) { //this process is to speed up the scan
 8004b50:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8004b52:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d118      	bne.n	8004b8c <Paint_DrawChar+0xb8>
                if (*ptr & (0x80 >> (Column % 8)))
 8004b5a:	69bb      	ldr	r3, [r7, #24]
 8004b5c:	781b      	ldrb	r3, [r3, #0]
 8004b5e:	4619      	mov	r1, r3
 8004b60:	8bbb      	ldrh	r3, [r7, #28]
 8004b62:	f003 0307 	and.w	r3, r3, #7
 8004b66:	2280      	movs	r2, #128	@ 0x80
 8004b68:	fa42 f303 	asr.w	r3, r2, r3
 8004b6c:	400b      	ands	r3, r1
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d031      	beq.n	8004bd6 <Paint_DrawChar+0x102>
                    Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Foreground);
 8004b72:	89fa      	ldrh	r2, [r7, #14]
 8004b74:	8bbb      	ldrh	r3, [r7, #28]
 8004b76:	4413      	add	r3, r2
 8004b78:	b298      	uxth	r0, r3
 8004b7a:	89ba      	ldrh	r2, [r7, #12]
 8004b7c:	8bfb      	ldrh	r3, [r7, #30]
 8004b7e:	4413      	add	r3, r2
 8004b80:	b29b      	uxth	r3, r3
 8004b82:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8004b84:	4619      	mov	r1, r3
 8004b86:	f7ff fee5 	bl	8004954 <Paint_SetPixel>
 8004b8a:	e024      	b.n	8004bd6 <Paint_DrawChar+0x102>
                    // Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Foreground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
            } else {
                if (*ptr & (0x80 >> (Column % 8))) {
 8004b8c:	69bb      	ldr	r3, [r7, #24]
 8004b8e:	781b      	ldrb	r3, [r3, #0]
 8004b90:	4619      	mov	r1, r3
 8004b92:	8bbb      	ldrh	r3, [r7, #28]
 8004b94:	f003 0307 	and.w	r3, r3, #7
 8004b98:	2280      	movs	r2, #128	@ 0x80
 8004b9a:	fa42 f303 	asr.w	r3, r2, r3
 8004b9e:	400b      	ands	r3, r1
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d00c      	beq.n	8004bbe <Paint_DrawChar+0xea>
                    Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Foreground);
 8004ba4:	89fa      	ldrh	r2, [r7, #14]
 8004ba6:	8bbb      	ldrh	r3, [r7, #28]
 8004ba8:	4413      	add	r3, r2
 8004baa:	b298      	uxth	r0, r3
 8004bac:	89ba      	ldrh	r2, [r7, #12]
 8004bae:	8bfb      	ldrh	r3, [r7, #30]
 8004bb0:	4413      	add	r3, r2
 8004bb2:	b29b      	uxth	r3, r3
 8004bb4:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8004bb6:	4619      	mov	r1, r3
 8004bb8:	f7ff fecc 	bl	8004954 <Paint_SetPixel>
 8004bbc:	e00b      	b.n	8004bd6 <Paint_DrawChar+0x102>
                    // Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Foreground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
                } else {
                    Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Background);
 8004bbe:	89fa      	ldrh	r2, [r7, #14]
 8004bc0:	8bbb      	ldrh	r3, [r7, #28]
 8004bc2:	4413      	add	r3, r2
 8004bc4:	b298      	uxth	r0, r3
 8004bc6:	89ba      	ldrh	r2, [r7, #12]
 8004bc8:	8bfb      	ldrh	r3, [r7, #30]
 8004bca:	4413      	add	r3, r2
 8004bcc:	b29b      	uxth	r3, r3
 8004bce:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8004bd0:	4619      	mov	r1, r3
 8004bd2:	f7ff febf 	bl	8004954 <Paint_SetPixel>
                    // Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Background, DOT_PIXEL_DFT, DOT_STYLE_DFT);
                }
            }
            //One pixel is 8 bits
            if (Column % 8 == 7)
 8004bd6:	8bbb      	ldrh	r3, [r7, #28]
 8004bd8:	f003 0307 	and.w	r3, r3, #7
 8004bdc:	b29b      	uxth	r3, r3
 8004bde:	2b07      	cmp	r3, #7
 8004be0:	d102      	bne.n	8004be8 <Paint_DrawChar+0x114>
                ptr++;
 8004be2:	69bb      	ldr	r3, [r7, #24]
 8004be4:	3301      	adds	r3, #1
 8004be6:	61bb      	str	r3, [r7, #24]
        for (Column = 0; Column < Font->Width; Column ++ ) {
 8004be8:	8bbb      	ldrh	r3, [r7, #28]
 8004bea:	3301      	adds	r3, #1
 8004bec:	83bb      	strh	r3, [r7, #28]
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	889b      	ldrh	r3, [r3, #4]
 8004bf2:	8bba      	ldrh	r2, [r7, #28]
 8004bf4:	429a      	cmp	r2, r3
 8004bf6:	d3ab      	bcc.n	8004b50 <Paint_DrawChar+0x7c>
        }// Write a line
        if (Font->Width % 8 != 0)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	889b      	ldrh	r3, [r3, #4]
 8004bfc:	f003 0307 	and.w	r3, r3, #7
 8004c00:	b29b      	uxth	r3, r3
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d002      	beq.n	8004c0c <Paint_DrawChar+0x138>
            ptr++;
 8004c06:	69bb      	ldr	r3, [r7, #24]
 8004c08:	3301      	adds	r3, #1
 8004c0a:	61bb      	str	r3, [r7, #24]
    for (Page = 0; Page < Font->Height; Page ++ ) {
 8004c0c:	8bfb      	ldrh	r3, [r7, #30]
 8004c0e:	3301      	adds	r3, #1
 8004c10:	83fb      	strh	r3, [r7, #30]
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	88db      	ldrh	r3, [r3, #6]
 8004c16:	8bfa      	ldrh	r2, [r7, #30]
 8004c18:	429a      	cmp	r2, r3
 8004c1a:	d396      	bcc.n	8004b4a <Paint_DrawChar+0x76>
    }// Write all
}
 8004c1c:	3720      	adds	r7, #32
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	bd80      	pop	{r7, pc}
 8004c22:	bf00      	nop
 8004c24:	20000274 	.word	0x20000274
 8004c28:	08006754 	.word	0x08006754

08004c2c <Paint_DrawString_EN>:
    Color_Background : Select the background color of the English character
    Color_Foreground : Select the foreground color of the English character
******************************************************************************/
void Paint_DrawString_EN(UWORD Xstart, UWORD Ystart, const char * pString,
                         sFONT* Font, UWORD Color_Background, UWORD Color_Foreground )
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b088      	sub	sp, #32
 8004c30:	af02      	add	r7, sp, #8
 8004c32:	60ba      	str	r2, [r7, #8]
 8004c34:	607b      	str	r3, [r7, #4]
 8004c36:	4603      	mov	r3, r0
 8004c38:	81fb      	strh	r3, [r7, #14]
 8004c3a:	460b      	mov	r3, r1
 8004c3c:	81bb      	strh	r3, [r7, #12]
    UWORD Xpoint = Xstart;
 8004c3e:	89fb      	ldrh	r3, [r7, #14]
 8004c40:	82fb      	strh	r3, [r7, #22]
    UWORD Ypoint = Ystart;
 8004c42:	89bb      	ldrh	r3, [r7, #12]
 8004c44:	82bb      	strh	r3, [r7, #20]

    if (Xstart > Paint.Width || Ystart > Paint.Height) {
 8004c46:	4b23      	ldr	r3, [pc, #140]	@ (8004cd4 <Paint_DrawString_EN+0xa8>)
 8004c48:	889b      	ldrh	r3, [r3, #4]
 8004c4a:	b29b      	uxth	r3, r3
 8004c4c:	89fa      	ldrh	r2, [r7, #14]
 8004c4e:	429a      	cmp	r2, r3
 8004c50:	d805      	bhi.n	8004c5e <Paint_DrawString_EN+0x32>
 8004c52:	4b20      	ldr	r3, [pc, #128]	@ (8004cd4 <Paint_DrawString_EN+0xa8>)
 8004c54:	88db      	ldrh	r3, [r3, #6]
 8004c56:	b29b      	uxth	r3, r3
 8004c58:	89ba      	ldrh	r2, [r7, #12]
 8004c5a:	429a      	cmp	r2, r3
 8004c5c:	d933      	bls.n	8004cc6 <Paint_DrawString_EN+0x9a>
        Debug("Paint_DrawString_EN Input exceeds the normal display range\r\n");
 8004c5e:	481e      	ldr	r0, [pc, #120]	@ (8004cd8 <Paint_DrawString_EN+0xac>)
 8004c60:	f000 fc66 	bl	8005530 <puts>
        return;
 8004c64:	e033      	b.n	8004cce <Paint_DrawString_EN+0xa2>
    }

    while (* pString != '\0') {
        //if X direction filled , reposition to(Xstart,Ypoint),Ypoint is Y direction plus the Height of the character
        if ((Xpoint + Font->Width ) > Paint.Width ) {
 8004c66:	8afb      	ldrh	r3, [r7, #22]
 8004c68:	687a      	ldr	r2, [r7, #4]
 8004c6a:	8892      	ldrh	r2, [r2, #4]
 8004c6c:	4413      	add	r3, r2
 8004c6e:	4a19      	ldr	r2, [pc, #100]	@ (8004cd4 <Paint_DrawString_EN+0xa8>)
 8004c70:	8892      	ldrh	r2, [r2, #4]
 8004c72:	b292      	uxth	r2, r2
 8004c74:	4293      	cmp	r3, r2
 8004c76:	dd06      	ble.n	8004c86 <Paint_DrawString_EN+0x5a>
            Xpoint = Xstart;
 8004c78:	89fb      	ldrh	r3, [r7, #14]
 8004c7a:	82fb      	strh	r3, [r7, #22]
            Ypoint += Font->Height;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	88da      	ldrh	r2, [r3, #6]
 8004c80:	8abb      	ldrh	r3, [r7, #20]
 8004c82:	4413      	add	r3, r2
 8004c84:	82bb      	strh	r3, [r7, #20]
        }

        // If the Y direction is full, reposition to(Xstart, Ystart)
        if ((Ypoint  + Font->Height ) > Paint.Height ) {
 8004c86:	8abb      	ldrh	r3, [r7, #20]
 8004c88:	687a      	ldr	r2, [r7, #4]
 8004c8a:	88d2      	ldrh	r2, [r2, #6]
 8004c8c:	4413      	add	r3, r2
 8004c8e:	4a11      	ldr	r2, [pc, #68]	@ (8004cd4 <Paint_DrawString_EN+0xa8>)
 8004c90:	88d2      	ldrh	r2, [r2, #6]
 8004c92:	b292      	uxth	r2, r2
 8004c94:	4293      	cmp	r3, r2
 8004c96:	dd03      	ble.n	8004ca0 <Paint_DrawString_EN+0x74>
            Xpoint = Xstart;
 8004c98:	89fb      	ldrh	r3, [r7, #14]
 8004c9a:	82fb      	strh	r3, [r7, #22]
            Ypoint = Ystart;
 8004c9c:	89bb      	ldrh	r3, [r7, #12]
 8004c9e:	82bb      	strh	r3, [r7, #20]
        }
        Paint_DrawChar(Xpoint, Ypoint, * pString, Font, Color_Background, Color_Foreground);
 8004ca0:	68bb      	ldr	r3, [r7, #8]
 8004ca2:	781a      	ldrb	r2, [r3, #0]
 8004ca4:	8ab9      	ldrh	r1, [r7, #20]
 8004ca6:	8af8      	ldrh	r0, [r7, #22]
 8004ca8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004caa:	9301      	str	r3, [sp, #4]
 8004cac:	8c3b      	ldrh	r3, [r7, #32]
 8004cae:	9300      	str	r3, [sp, #0]
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	f7ff ff0f 	bl	8004ad4 <Paint_DrawChar>

        //The next character of the address
        pString ++;
 8004cb6:	68bb      	ldr	r3, [r7, #8]
 8004cb8:	3301      	adds	r3, #1
 8004cba:	60bb      	str	r3, [r7, #8]

        //The next word of the abscissa increases the font of the broadband
        Xpoint += Font->Width;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	889a      	ldrh	r2, [r3, #4]
 8004cc0:	8afb      	ldrh	r3, [r7, #22]
 8004cc2:	4413      	add	r3, r2
 8004cc4:	82fb      	strh	r3, [r7, #22]
    while (* pString != '\0') {
 8004cc6:	68bb      	ldr	r3, [r7, #8]
 8004cc8:	781b      	ldrb	r3, [r3, #0]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d1cb      	bne.n	8004c66 <Paint_DrawString_EN+0x3a>
    }
}
 8004cce:	3718      	adds	r7, #24
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	bd80      	pop	{r7, pc}
 8004cd4:	20000274 	.word	0x20000274
 8004cd8:	08006794 	.word	0x08006794

08004cdc <LCD_2IN_Reset>:
/*******************************************************************************
function:
	Hardware reset
*******************************************************************************/
static void LCD_2IN_Reset(void)
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	af00      	add	r7, sp, #0
	LCD_2IN_RST_1;
 8004ce0:	2201      	movs	r2, #1
 8004ce2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004ce6:	480d      	ldr	r0, [pc, #52]	@ (8004d1c <LCD_2IN_Reset+0x40>)
 8004ce8:	f7fd f986 	bl	8001ff8 <HAL_GPIO_WritePin>
	DEV_Delay_ms(100);
 8004cec:	2064      	movs	r0, #100	@ 0x64
 8004cee:	f7fc fea1 	bl	8001a34 <HAL_Delay>
	LCD_2IN_RST_0;
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004cf8:	4808      	ldr	r0, [pc, #32]	@ (8004d1c <LCD_2IN_Reset+0x40>)
 8004cfa:	f7fd f97d 	bl	8001ff8 <HAL_GPIO_WritePin>
	DEV_Delay_ms(100);
 8004cfe:	2064      	movs	r0, #100	@ 0x64
 8004d00:	f7fc fe98 	bl	8001a34 <HAL_Delay>
	LCD_2IN_RST_1;
 8004d04:	2201      	movs	r2, #1
 8004d06:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004d0a:	4804      	ldr	r0, [pc, #16]	@ (8004d1c <LCD_2IN_Reset+0x40>)
 8004d0c:	f7fd f974 	bl	8001ff8 <HAL_GPIO_WritePin>
	DEV_Delay_ms(100);
 8004d10:	2064      	movs	r0, #100	@ 0x64
 8004d12:	f7fc fe8f 	bl	8001a34 <HAL_Delay>
}
 8004d16:	bf00      	nop
 8004d18:	bd80      	pop	{r7, pc}
 8004d1a:	bf00      	nop
 8004d1c:	40020400 	.word	0x40020400

08004d20 <LCD_2IN_Write_Command>:
/*******************************************************************************
function:
		Write data and commands
*******************************************************************************/
static void LCD_2IN_Write_Command(UBYTE data)	 
{	
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b082      	sub	sp, #8
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	4603      	mov	r3, r0
 8004d28:	71fb      	strb	r3, [r7, #7]
	LCD_2IN_CS_0;
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004d30:	4808      	ldr	r0, [pc, #32]	@ (8004d54 <LCD_2IN_Write_Command+0x34>)
 8004d32:	f7fd f961 	bl	8001ff8 <HAL_GPIO_WritePin>
	LCD_2IN_DC_0;
 8004d36:	2200      	movs	r2, #0
 8004d38:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004d3c:	4805      	ldr	r0, [pc, #20]	@ (8004d54 <LCD_2IN_Write_Command+0x34>)
 8004d3e:	f7fd f95b 	bl	8001ff8 <HAL_GPIO_WritePin>
	DEV_SPI_WRITE(data);
 8004d42:	79fb      	ldrb	r3, [r7, #7]
 8004d44:	4618      	mov	r0, r3
 8004d46:	f7ff fd3d 	bl	80047c4 <DEV_SPI_WRite>
}
 8004d4a:	bf00      	nop
 8004d4c:	3708      	adds	r7, #8
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	bd80      	pop	{r7, pc}
 8004d52:	bf00      	nop
 8004d54:	40020400 	.word	0x40020400

08004d58 <LCD_2IN_WriteData_Byte>:

static void LCD_2IN_WriteData_Byte(UBYTE data) 
{	
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b082      	sub	sp, #8
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	4603      	mov	r3, r0
 8004d60:	71fb      	strb	r3, [r7, #7]
	LCD_2IN_CS_0;
 8004d62:	2200      	movs	r2, #0
 8004d64:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004d68:	480b      	ldr	r0, [pc, #44]	@ (8004d98 <LCD_2IN_WriteData_Byte+0x40>)
 8004d6a:	f7fd f945 	bl	8001ff8 <HAL_GPIO_WritePin>
	LCD_2IN_DC_1;
 8004d6e:	2201      	movs	r2, #1
 8004d70:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004d74:	4808      	ldr	r0, [pc, #32]	@ (8004d98 <LCD_2IN_WriteData_Byte+0x40>)
 8004d76:	f7fd f93f 	bl	8001ff8 <HAL_GPIO_WritePin>
	DEV_SPI_WRITE(data);  
 8004d7a:	79fb      	ldrb	r3, [r7, #7]
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	f7ff fd21 	bl	80047c4 <DEV_SPI_WRite>
	LCD_2IN_CS_1;
 8004d82:	2201      	movs	r2, #1
 8004d84:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004d88:	4803      	ldr	r0, [pc, #12]	@ (8004d98 <LCD_2IN_WriteData_Byte+0x40>)
 8004d8a:	f7fd f935 	bl	8001ff8 <HAL_GPIO_WritePin>
}  
 8004d8e:	bf00      	nop
 8004d90:	3708      	adds	r7, #8
 8004d92:	46bd      	mov	sp, r7
 8004d94:	bd80      	pop	{r7, pc}
 8004d96:	bf00      	nop
 8004d98:	40020400 	.word	0x40020400

08004d9c <LCD_2IN_WriteData_Word>:

void LCD_2IN_WriteData_Word(UWORD data)
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b082      	sub	sp, #8
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	4603      	mov	r3, r0
 8004da4:	80fb      	strh	r3, [r7, #6]
	LCD_2IN_CS_0;
 8004da6:	2200      	movs	r2, #0
 8004da8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004dac:	480f      	ldr	r0, [pc, #60]	@ (8004dec <LCD_2IN_WriteData_Word+0x50>)
 8004dae:	f7fd f923 	bl	8001ff8 <HAL_GPIO_WritePin>
	LCD_2IN_DC_1;
 8004db2:	2201      	movs	r2, #1
 8004db4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004db8:	480c      	ldr	r0, [pc, #48]	@ (8004dec <LCD_2IN_WriteData_Word+0x50>)
 8004dba:	f7fd f91d 	bl	8001ff8 <HAL_GPIO_WritePin>
	DEV_SPI_WRITE((data>>8) & 0xff);
 8004dbe:	88fb      	ldrh	r3, [r7, #6]
 8004dc0:	0a1b      	lsrs	r3, r3, #8
 8004dc2:	b29b      	uxth	r3, r3
 8004dc4:	b2db      	uxtb	r3, r3
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	f7ff fcfc 	bl	80047c4 <DEV_SPI_WRite>
	DEV_SPI_WRITE(data);
 8004dcc:	88fb      	ldrh	r3, [r7, #6]
 8004dce:	b2db      	uxtb	r3, r3
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	f7ff fcf7 	bl	80047c4 <DEV_SPI_WRite>
	LCD_2IN_CS_1;
 8004dd6:	2201      	movs	r2, #1
 8004dd8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004ddc:	4803      	ldr	r0, [pc, #12]	@ (8004dec <LCD_2IN_WriteData_Word+0x50>)
 8004dde:	f7fd f90b 	bl	8001ff8 <HAL_GPIO_WritePin>
}	  
 8004de2:	bf00      	nop
 8004de4:	3708      	adds	r7, #8
 8004de6:	46bd      	mov	sp, r7
 8004de8:	bd80      	pop	{r7, pc}
 8004dea:	bf00      	nop
 8004dec:	40020400 	.word	0x40020400

08004df0 <LCD_2IN_Init>:
/******************************************************************************
function:	
		Common register initialization
******************************************************************************/
void LCD_2IN_Init(void)
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	af00      	add	r7, sp, #0
	LCD_2IN_Reset();
 8004df4:	f7ff ff72 	bl	8004cdc <LCD_2IN_Reset>

	LCD_2IN_Write_Command(0x36);
 8004df8:	2036      	movs	r0, #54	@ 0x36
 8004dfa:	f7ff ff91 	bl	8004d20 <LCD_2IN_Write_Command>
	LCD_2IN_WriteData_Byte(0x00); 
 8004dfe:	2000      	movs	r0, #0
 8004e00:	f7ff ffaa 	bl	8004d58 <LCD_2IN_WriteData_Byte>

	LCD_2IN_Write_Command(0x3A); 
 8004e04:	203a      	movs	r0, #58	@ 0x3a
 8004e06:	f7ff ff8b 	bl	8004d20 <LCD_2IN_Write_Command>
	LCD_2IN_WriteData_Byte(0x05);
 8004e0a:	2005      	movs	r0, #5
 8004e0c:	f7ff ffa4 	bl	8004d58 <LCD_2IN_WriteData_Byte>

	LCD_2IN_Write_Command(0x21); 
 8004e10:	2021      	movs	r0, #33	@ 0x21
 8004e12:	f7ff ff85 	bl	8004d20 <LCD_2IN_Write_Command>

	LCD_2IN_Write_Command(0x2A);
 8004e16:	202a      	movs	r0, #42	@ 0x2a
 8004e18:	f7ff ff82 	bl	8004d20 <LCD_2IN_Write_Command>
	LCD_2IN_WriteData_Byte(0x00);
 8004e1c:	2000      	movs	r0, #0
 8004e1e:	f7ff ff9b 	bl	8004d58 <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x00);
 8004e22:	2000      	movs	r0, #0
 8004e24:	f7ff ff98 	bl	8004d58 <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x01);
 8004e28:	2001      	movs	r0, #1
 8004e2a:	f7ff ff95 	bl	8004d58 <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x3F);
 8004e2e:	203f      	movs	r0, #63	@ 0x3f
 8004e30:	f7ff ff92 	bl	8004d58 <LCD_2IN_WriteData_Byte>

	LCD_2IN_Write_Command(0x2B);
 8004e34:	202b      	movs	r0, #43	@ 0x2b
 8004e36:	f7ff ff73 	bl	8004d20 <LCD_2IN_Write_Command>
	LCD_2IN_WriteData_Byte(0x00);
 8004e3a:	2000      	movs	r0, #0
 8004e3c:	f7ff ff8c 	bl	8004d58 <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x00);
 8004e40:	2000      	movs	r0, #0
 8004e42:	f7ff ff89 	bl	8004d58 <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x00);
 8004e46:	2000      	movs	r0, #0
 8004e48:	f7ff ff86 	bl	8004d58 <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0xEF);
 8004e4c:	20ef      	movs	r0, #239	@ 0xef
 8004e4e:	f7ff ff83 	bl	8004d58 <LCD_2IN_WriteData_Byte>

	LCD_2IN_Write_Command(0xB2);
 8004e52:	20b2      	movs	r0, #178	@ 0xb2
 8004e54:	f7ff ff64 	bl	8004d20 <LCD_2IN_Write_Command>
	LCD_2IN_WriteData_Byte(0x0C);
 8004e58:	200c      	movs	r0, #12
 8004e5a:	f7ff ff7d 	bl	8004d58 <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x0C);
 8004e5e:	200c      	movs	r0, #12
 8004e60:	f7ff ff7a 	bl	8004d58 <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x00);
 8004e64:	2000      	movs	r0, #0
 8004e66:	f7ff ff77 	bl	8004d58 <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x33);
 8004e6a:	2033      	movs	r0, #51	@ 0x33
 8004e6c:	f7ff ff74 	bl	8004d58 <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x33);
 8004e70:	2033      	movs	r0, #51	@ 0x33
 8004e72:	f7ff ff71 	bl	8004d58 <LCD_2IN_WriteData_Byte>

	LCD_2IN_Write_Command(0xB7);
 8004e76:	20b7      	movs	r0, #183	@ 0xb7
 8004e78:	f7ff ff52 	bl	8004d20 <LCD_2IN_Write_Command>
	LCD_2IN_WriteData_Byte(0x35); 
 8004e7c:	2035      	movs	r0, #53	@ 0x35
 8004e7e:	f7ff ff6b 	bl	8004d58 <LCD_2IN_WriteData_Byte>

	LCD_2IN_Write_Command(0xBB);
 8004e82:	20bb      	movs	r0, #187	@ 0xbb
 8004e84:	f7ff ff4c 	bl	8004d20 <LCD_2IN_Write_Command>
	LCD_2IN_WriteData_Byte(0x1F);
 8004e88:	201f      	movs	r0, #31
 8004e8a:	f7ff ff65 	bl	8004d58 <LCD_2IN_WriteData_Byte>

	LCD_2IN_Write_Command(0xC0);
 8004e8e:	20c0      	movs	r0, #192	@ 0xc0
 8004e90:	f7ff ff46 	bl	8004d20 <LCD_2IN_Write_Command>
	LCD_2IN_WriteData_Byte(0x2C);
 8004e94:	202c      	movs	r0, #44	@ 0x2c
 8004e96:	f7ff ff5f 	bl	8004d58 <LCD_2IN_WriteData_Byte>

	LCD_2IN_Write_Command(0xC2);
 8004e9a:	20c2      	movs	r0, #194	@ 0xc2
 8004e9c:	f7ff ff40 	bl	8004d20 <LCD_2IN_Write_Command>
	LCD_2IN_WriteData_Byte(0x01);
 8004ea0:	2001      	movs	r0, #1
 8004ea2:	f7ff ff59 	bl	8004d58 <LCD_2IN_WriteData_Byte>

	LCD_2IN_Write_Command(0xC3);
 8004ea6:	20c3      	movs	r0, #195	@ 0xc3
 8004ea8:	f7ff ff3a 	bl	8004d20 <LCD_2IN_Write_Command>
	LCD_2IN_WriteData_Byte(0x12);   
 8004eac:	2012      	movs	r0, #18
 8004eae:	f7ff ff53 	bl	8004d58 <LCD_2IN_WriteData_Byte>

	LCD_2IN_Write_Command(0xC4);
 8004eb2:	20c4      	movs	r0, #196	@ 0xc4
 8004eb4:	f7ff ff34 	bl	8004d20 <LCD_2IN_Write_Command>
	LCD_2IN_WriteData_Byte(0x20);
 8004eb8:	2020      	movs	r0, #32
 8004eba:	f7ff ff4d 	bl	8004d58 <LCD_2IN_WriteData_Byte>

	LCD_2IN_Write_Command(0xC6);
 8004ebe:	20c6      	movs	r0, #198	@ 0xc6
 8004ec0:	f7ff ff2e 	bl	8004d20 <LCD_2IN_Write_Command>
	LCD_2IN_WriteData_Byte(0x0F); 
 8004ec4:	200f      	movs	r0, #15
 8004ec6:	f7ff ff47 	bl	8004d58 <LCD_2IN_WriteData_Byte>

	LCD_2IN_Write_Command(0xD0);
 8004eca:	20d0      	movs	r0, #208	@ 0xd0
 8004ecc:	f7ff ff28 	bl	8004d20 <LCD_2IN_Write_Command>
	LCD_2IN_WriteData_Byte(0xA4);
 8004ed0:	20a4      	movs	r0, #164	@ 0xa4
 8004ed2:	f7ff ff41 	bl	8004d58 <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0xA1);
 8004ed6:	20a1      	movs	r0, #161	@ 0xa1
 8004ed8:	f7ff ff3e 	bl	8004d58 <LCD_2IN_WriteData_Byte>

	LCD_2IN_Write_Command(0xE0);
 8004edc:	20e0      	movs	r0, #224	@ 0xe0
 8004ede:	f7ff ff1f 	bl	8004d20 <LCD_2IN_Write_Command>
	LCD_2IN_WriteData_Byte(0xD0);
 8004ee2:	20d0      	movs	r0, #208	@ 0xd0
 8004ee4:	f7ff ff38 	bl	8004d58 <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x08);
 8004ee8:	2008      	movs	r0, #8
 8004eea:	f7ff ff35 	bl	8004d58 <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x11);
 8004eee:	2011      	movs	r0, #17
 8004ef0:	f7ff ff32 	bl	8004d58 <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x08);
 8004ef4:	2008      	movs	r0, #8
 8004ef6:	f7ff ff2f 	bl	8004d58 <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x0C);
 8004efa:	200c      	movs	r0, #12
 8004efc:	f7ff ff2c 	bl	8004d58 <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x15);
 8004f00:	2015      	movs	r0, #21
 8004f02:	f7ff ff29 	bl	8004d58 <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x39);
 8004f06:	2039      	movs	r0, #57	@ 0x39
 8004f08:	f7ff ff26 	bl	8004d58 <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x33);
 8004f0c:	2033      	movs	r0, #51	@ 0x33
 8004f0e:	f7ff ff23 	bl	8004d58 <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x50);
 8004f12:	2050      	movs	r0, #80	@ 0x50
 8004f14:	f7ff ff20 	bl	8004d58 <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x36);
 8004f18:	2036      	movs	r0, #54	@ 0x36
 8004f1a:	f7ff ff1d 	bl	8004d58 <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x13);
 8004f1e:	2013      	movs	r0, #19
 8004f20:	f7ff ff1a 	bl	8004d58 <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x14);
 8004f24:	2014      	movs	r0, #20
 8004f26:	f7ff ff17 	bl	8004d58 <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x29);
 8004f2a:	2029      	movs	r0, #41	@ 0x29
 8004f2c:	f7ff ff14 	bl	8004d58 <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x2D);
 8004f30:	202d      	movs	r0, #45	@ 0x2d
 8004f32:	f7ff ff11 	bl	8004d58 <LCD_2IN_WriteData_Byte>

	LCD_2IN_Write_Command(0xE1);
 8004f36:	20e1      	movs	r0, #225	@ 0xe1
 8004f38:	f7ff fef2 	bl	8004d20 <LCD_2IN_Write_Command>
	LCD_2IN_WriteData_Byte(0xD0);
 8004f3c:	20d0      	movs	r0, #208	@ 0xd0
 8004f3e:	f7ff ff0b 	bl	8004d58 <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x08);
 8004f42:	2008      	movs	r0, #8
 8004f44:	f7ff ff08 	bl	8004d58 <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x10);
 8004f48:	2010      	movs	r0, #16
 8004f4a:	f7ff ff05 	bl	8004d58 <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x08);
 8004f4e:	2008      	movs	r0, #8
 8004f50:	f7ff ff02 	bl	8004d58 <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x06);
 8004f54:	2006      	movs	r0, #6
 8004f56:	f7ff feff 	bl	8004d58 <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x06);
 8004f5a:	2006      	movs	r0, #6
 8004f5c:	f7ff fefc 	bl	8004d58 <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x39);
 8004f60:	2039      	movs	r0, #57	@ 0x39
 8004f62:	f7ff fef9 	bl	8004d58 <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x44);
 8004f66:	2044      	movs	r0, #68	@ 0x44
 8004f68:	f7ff fef6 	bl	8004d58 <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x51);
 8004f6c:	2051      	movs	r0, #81	@ 0x51
 8004f6e:	f7ff fef3 	bl	8004d58 <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x0B);
 8004f72:	200b      	movs	r0, #11
 8004f74:	f7ff fef0 	bl	8004d58 <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x16);
 8004f78:	2016      	movs	r0, #22
 8004f7a:	f7ff feed 	bl	8004d58 <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x14);
 8004f7e:	2014      	movs	r0, #20
 8004f80:	f7ff feea 	bl	8004d58 <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x2F);
 8004f84:	202f      	movs	r0, #47	@ 0x2f
 8004f86:	f7ff fee7 	bl	8004d58 <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x31);
 8004f8a:	2031      	movs	r0, #49	@ 0x31
 8004f8c:	f7ff fee4 	bl	8004d58 <LCD_2IN_WriteData_Byte>
	LCD_2IN_Write_Command(0x21);
 8004f90:	2021      	movs	r0, #33	@ 0x21
 8004f92:	f7ff fec5 	bl	8004d20 <LCD_2IN_Write_Command>

	LCD_2IN_Write_Command(0x11);
 8004f96:	2011      	movs	r0, #17
 8004f98:	f7ff fec2 	bl	8004d20 <LCD_2IN_Write_Command>

	LCD_2IN_Write_Command(0x29);
 8004f9c:	2029      	movs	r0, #41	@ 0x29
 8004f9e:	f7ff febf 	bl	8004d20 <LCD_2IN_Write_Command>
}
 8004fa2:	bf00      	nop
 8004fa4:	bd80      	pop	{r7, pc}

08004fa6 <LCD_2IN_SetWindow>:
	  Ystart:	Start UWORD y coordinate
	  Xend  :	End UWORD coordinates
	  Yend  :	End UWORD coordinatesen
******************************************************************************/
void LCD_2IN_SetWindow(UWORD Xstart, UWORD Ystart, UWORD Xend, UWORD  Yend)
{ 
 8004fa6:	b590      	push	{r4, r7, lr}
 8004fa8:	b083      	sub	sp, #12
 8004faa:	af00      	add	r7, sp, #0
 8004fac:	4604      	mov	r4, r0
 8004fae:	4608      	mov	r0, r1
 8004fb0:	4611      	mov	r1, r2
 8004fb2:	461a      	mov	r2, r3
 8004fb4:	4623      	mov	r3, r4
 8004fb6:	80fb      	strh	r3, [r7, #6]
 8004fb8:	4603      	mov	r3, r0
 8004fba:	80bb      	strh	r3, [r7, #4]
 8004fbc:	460b      	mov	r3, r1
 8004fbe:	807b      	strh	r3, [r7, #2]
 8004fc0:	4613      	mov	r3, r2
 8004fc2:	803b      	strh	r3, [r7, #0]
	LCD_2IN_Write_Command(0x2a);
 8004fc4:	202a      	movs	r0, #42	@ 0x2a
 8004fc6:	f7ff feab 	bl	8004d20 <LCD_2IN_Write_Command>
	LCD_2IN_WriteData_Byte(Xstart >>8);
 8004fca:	88fb      	ldrh	r3, [r7, #6]
 8004fcc:	0a1b      	lsrs	r3, r3, #8
 8004fce:	b29b      	uxth	r3, r3
 8004fd0:	b2db      	uxtb	r3, r3
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	f7ff fec0 	bl	8004d58 <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(Xstart & 0xff);
 8004fd8:	88fb      	ldrh	r3, [r7, #6]
 8004fda:	b2db      	uxtb	r3, r3
 8004fdc:	4618      	mov	r0, r3
 8004fde:	f7ff febb 	bl	8004d58 <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte((Xend - 1) >> 8);
 8004fe2:	887b      	ldrh	r3, [r7, #2]
 8004fe4:	3b01      	subs	r3, #1
 8004fe6:	121b      	asrs	r3, r3, #8
 8004fe8:	b2db      	uxtb	r3, r3
 8004fea:	4618      	mov	r0, r3
 8004fec:	f7ff feb4 	bl	8004d58 <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte((Xend - 1) & 0xff);
 8004ff0:	887b      	ldrh	r3, [r7, #2]
 8004ff2:	b2db      	uxtb	r3, r3
 8004ff4:	3b01      	subs	r3, #1
 8004ff6:	b2db      	uxtb	r3, r3
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	f7ff fead 	bl	8004d58 <LCD_2IN_WriteData_Byte>

	LCD_2IN_Write_Command(0x2b);
 8004ffe:	202b      	movs	r0, #43	@ 0x2b
 8005000:	f7ff fe8e 	bl	8004d20 <LCD_2IN_Write_Command>
	LCD_2IN_WriteData_Byte(Ystart >>8);
 8005004:	88bb      	ldrh	r3, [r7, #4]
 8005006:	0a1b      	lsrs	r3, r3, #8
 8005008:	b29b      	uxth	r3, r3
 800500a:	b2db      	uxtb	r3, r3
 800500c:	4618      	mov	r0, r3
 800500e:	f7ff fea3 	bl	8004d58 <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(Ystart & 0xff);
 8005012:	88bb      	ldrh	r3, [r7, #4]
 8005014:	b2db      	uxtb	r3, r3
 8005016:	4618      	mov	r0, r3
 8005018:	f7ff fe9e 	bl	8004d58 <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte((Yend - 1) >> 8);
 800501c:	883b      	ldrh	r3, [r7, #0]
 800501e:	3b01      	subs	r3, #1
 8005020:	121b      	asrs	r3, r3, #8
 8005022:	b2db      	uxtb	r3, r3
 8005024:	4618      	mov	r0, r3
 8005026:	f7ff fe97 	bl	8004d58 <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte((Yend - 1) & 0xff);
 800502a:	883b      	ldrh	r3, [r7, #0]
 800502c:	b2db      	uxtb	r3, r3
 800502e:	3b01      	subs	r3, #1
 8005030:	b2db      	uxtb	r3, r3
 8005032:	4618      	mov	r0, r3
 8005034:	f7ff fe90 	bl	8004d58 <LCD_2IN_WriteData_Byte>

	LCD_2IN_Write_Command(0x2C);
 8005038:	202c      	movs	r0, #44	@ 0x2c
 800503a:	f7ff fe71 	bl	8004d20 <LCD_2IN_Write_Command>
}
 800503e:	bf00      	nop
 8005040:	370c      	adds	r7, #12
 8005042:	46bd      	mov	sp, r7
 8005044:	bd90      	pop	{r4, r7, pc}

08005046 <LCD_2IN_SetCursor>:
	  Xstart: 	Start UWORD x coordinate
	  Ystart:	Start UWORD y coordinate

******************************************************************************/
void LCD_2IN_SetCursor(UWORD X, UWORD Y)
{ 
 8005046:	b580      	push	{r7, lr}
 8005048:	b082      	sub	sp, #8
 800504a:	af00      	add	r7, sp, #0
 800504c:	4603      	mov	r3, r0
 800504e:	460a      	mov	r2, r1
 8005050:	80fb      	strh	r3, [r7, #6]
 8005052:	4613      	mov	r3, r2
 8005054:	80bb      	strh	r3, [r7, #4]
	LCD_2IN_Write_Command(0x2a);
 8005056:	202a      	movs	r0, #42	@ 0x2a
 8005058:	f7ff fe62 	bl	8004d20 <LCD_2IN_Write_Command>
	LCD_2IN_WriteData_Byte(X >> 8);
 800505c:	88fb      	ldrh	r3, [r7, #6]
 800505e:	0a1b      	lsrs	r3, r3, #8
 8005060:	b29b      	uxth	r3, r3
 8005062:	b2db      	uxtb	r3, r3
 8005064:	4618      	mov	r0, r3
 8005066:	f7ff fe77 	bl	8004d58 <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(X);
 800506a:	88fb      	ldrh	r3, [r7, #6]
 800506c:	b2db      	uxtb	r3, r3
 800506e:	4618      	mov	r0, r3
 8005070:	f7ff fe72 	bl	8004d58 <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(X >> 8);
 8005074:	88fb      	ldrh	r3, [r7, #6]
 8005076:	0a1b      	lsrs	r3, r3, #8
 8005078:	b29b      	uxth	r3, r3
 800507a:	b2db      	uxtb	r3, r3
 800507c:	4618      	mov	r0, r3
 800507e:	f7ff fe6b 	bl	8004d58 <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(X);
 8005082:	88fb      	ldrh	r3, [r7, #6]
 8005084:	b2db      	uxtb	r3, r3
 8005086:	4618      	mov	r0, r3
 8005088:	f7ff fe66 	bl	8004d58 <LCD_2IN_WriteData_Byte>

	LCD_2IN_Write_Command(0x2b);
 800508c:	202b      	movs	r0, #43	@ 0x2b
 800508e:	f7ff fe47 	bl	8004d20 <LCD_2IN_Write_Command>
	LCD_2IN_WriteData_Byte(Y >> 8);
 8005092:	88bb      	ldrh	r3, [r7, #4]
 8005094:	0a1b      	lsrs	r3, r3, #8
 8005096:	b29b      	uxth	r3, r3
 8005098:	b2db      	uxtb	r3, r3
 800509a:	4618      	mov	r0, r3
 800509c:	f7ff fe5c 	bl	8004d58 <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(Y);
 80050a0:	88bb      	ldrh	r3, [r7, #4]
 80050a2:	b2db      	uxtb	r3, r3
 80050a4:	4618      	mov	r0, r3
 80050a6:	f7ff fe57 	bl	8004d58 <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(Y >> 8);
 80050aa:	88bb      	ldrh	r3, [r7, #4]
 80050ac:	0a1b      	lsrs	r3, r3, #8
 80050ae:	b29b      	uxth	r3, r3
 80050b0:	b2db      	uxtb	r3, r3
 80050b2:	4618      	mov	r0, r3
 80050b4:	f7ff fe50 	bl	8004d58 <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(Y);
 80050b8:	88bb      	ldrh	r3, [r7, #4]
 80050ba:	b2db      	uxtb	r3, r3
 80050bc:	4618      	mov	r0, r3
 80050be:	f7ff fe4b 	bl	8004d58 <LCD_2IN_WriteData_Byte>

	LCD_2IN_Write_Command(0x2C);
 80050c2:	202c      	movs	r0, #44	@ 0x2c
 80050c4:	f7ff fe2c 	bl	8004d20 <LCD_2IN_Write_Command>
}
 80050c8:	bf00      	nop
 80050ca:	3708      	adds	r7, #8
 80050cc:	46bd      	mov	sp, r7
 80050ce:	bd80      	pop	{r7, pc}

080050d0 <LCD_2IN_Clear>:
function:	Clear screen function, refresh the screen to a certain color
parameter	:
	  Color :		The color you want to clear all the screen
******************************************************************************/
void LCD_2IN_Clear(UWORD Color)
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b084      	sub	sp, #16
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	4603      	mov	r3, r0
 80050d8:	80fb      	strh	r3, [r7, #6]
    UWORD i,j;
    LCD_2IN_SetWindow(0, 0, LCD_2IN_WIDTH, LCD_2IN_HEIGHT);
 80050da:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 80050de:	22f0      	movs	r2, #240	@ 0xf0
 80050e0:	2100      	movs	r1, #0
 80050e2:	2000      	movs	r0, #0
 80050e4:	f7ff ff5f 	bl	8004fa6 <LCD_2IN_SetWindow>

	DEV_Digital_Write(DEV_DC_PIN, 1);
 80050e8:	2201      	movs	r2, #1
 80050ea:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80050ee:	480f      	ldr	r0, [pc, #60]	@ (800512c <LCD_2IN_Clear+0x5c>)
 80050f0:	f7fc ff82 	bl	8001ff8 <HAL_GPIO_WritePin>
	for(i = 0; i < LCD_2IN_WIDTH; i++){
 80050f4:	2300      	movs	r3, #0
 80050f6:	81fb      	strh	r3, [r7, #14]
 80050f8:	e010      	b.n	800511c <LCD_2IN_Clear+0x4c>
		for(j = 0; j < LCD_2IN_HEIGHT; j++){
 80050fa:	2300      	movs	r3, #0
 80050fc:	81bb      	strh	r3, [r7, #12]
 80050fe:	e006      	b.n	800510e <LCD_2IN_Clear+0x3e>
			LCD_2IN_WriteData_Word(Color);
 8005100:	88fb      	ldrh	r3, [r7, #6]
 8005102:	4618      	mov	r0, r3
 8005104:	f7ff fe4a 	bl	8004d9c <LCD_2IN_WriteData_Word>
		for(j = 0; j < LCD_2IN_HEIGHT; j++){
 8005108:	89bb      	ldrh	r3, [r7, #12]
 800510a:	3301      	adds	r3, #1
 800510c:	81bb      	strh	r3, [r7, #12]
 800510e:	89bb      	ldrh	r3, [r7, #12]
 8005110:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8005114:	d3f4      	bcc.n	8005100 <LCD_2IN_Clear+0x30>
	for(i = 0; i < LCD_2IN_WIDTH; i++){
 8005116:	89fb      	ldrh	r3, [r7, #14]
 8005118:	3301      	adds	r3, #1
 800511a:	81fb      	strh	r3, [r7, #14]
 800511c:	89fb      	ldrh	r3, [r7, #14]
 800511e:	2bef      	cmp	r3, #239	@ 0xef
 8005120:	d9eb      	bls.n	80050fa <LCD_2IN_Clear+0x2a>
		}
	 }
}
 8005122:	bf00      	nop
 8005124:	bf00      	nop
 8005126:	3710      	adds	r7, #16
 8005128:	46bd      	mov	sp, r7
 800512a:	bd80      	pop	{r7, pc}
 800512c:	40020400 	.word	0x40020400

08005130 <LCD_2IN_DrawPaint>:
	    X	: 	Set the X coordinate
	    Y	:	Set the Y coordinate
	  Color :	Set the color
******************************************************************************/
void LCD_2IN_DrawPaint(UWORD x, UWORD y, UWORD Color)
{
 8005130:	b580      	push	{r7, lr}
 8005132:	b082      	sub	sp, #8
 8005134:	af00      	add	r7, sp, #0
 8005136:	4603      	mov	r3, r0
 8005138:	80fb      	strh	r3, [r7, #6]
 800513a:	460b      	mov	r3, r1
 800513c:	80bb      	strh	r3, [r7, #4]
 800513e:	4613      	mov	r3, r2
 8005140:	807b      	strh	r3, [r7, #2]
	LCD_2IN_SetCursor(x, y);
 8005142:	88ba      	ldrh	r2, [r7, #4]
 8005144:	88fb      	ldrh	r3, [r7, #6]
 8005146:	4611      	mov	r1, r2
 8005148:	4618      	mov	r0, r3
 800514a:	f7ff ff7c 	bl	8005046 <LCD_2IN_SetCursor>
	LCD_2IN_WriteData_Word(Color); 	    
 800514e:	887b      	ldrh	r3, [r7, #2]
 8005150:	4618      	mov	r0, r3
 8005152:	f7ff fe23 	bl	8004d9c <LCD_2IN_WriteData_Word>
}
 8005156:	bf00      	nop
 8005158:	3708      	adds	r7, #8
 800515a:	46bd      	mov	sp, r7
 800515c:	bd80      	pop	{r7, pc}
	...

08005160 <LCD_2IN_SetBackLight>:
	Setting backlight
parameter	:
	  value : Range 0~1000   Duty cycle is value/1000	
*******************************************************************************/
void LCD_2IN_SetBackLight(UWORD Value)
{
 8005160:	b480      	push	{r7}
 8005162:	b083      	sub	sp, #12
 8005164:	af00      	add	r7, sp, #0
 8005166:	4603      	mov	r3, r0
 8005168:	80fb      	strh	r3, [r7, #6]
	DEV_Set_PWM(Value);
 800516a:	4a04      	ldr	r2, [pc, #16]	@ (800517c <LCD_2IN_SetBackLight+0x1c>)
 800516c:	88fb      	ldrh	r3, [r7, #6]
 800516e:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8005170:	bf00      	nop
 8005172:	370c      	adds	r7, #12
 8005174:	46bd      	mov	sp, r7
 8005176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517a:	4770      	bx	lr
 800517c:	40000800 	.word	0x40000800

08005180 <sbrk_aligned>:
 8005180:	b570      	push	{r4, r5, r6, lr}
 8005182:	4e0f      	ldr	r6, [pc, #60]	@ (80051c0 <sbrk_aligned+0x40>)
 8005184:	460c      	mov	r4, r1
 8005186:	6831      	ldr	r1, [r6, #0]
 8005188:	4605      	mov	r5, r0
 800518a:	b911      	cbnz	r1, 8005192 <sbrk_aligned+0x12>
 800518c:	f000 fb0c 	bl	80057a8 <_sbrk_r>
 8005190:	6030      	str	r0, [r6, #0]
 8005192:	4621      	mov	r1, r4
 8005194:	4628      	mov	r0, r5
 8005196:	f000 fb07 	bl	80057a8 <_sbrk_r>
 800519a:	1c43      	adds	r3, r0, #1
 800519c:	d103      	bne.n	80051a6 <sbrk_aligned+0x26>
 800519e:	f04f 34ff 	mov.w	r4, #4294967295
 80051a2:	4620      	mov	r0, r4
 80051a4:	bd70      	pop	{r4, r5, r6, pc}
 80051a6:	1cc4      	adds	r4, r0, #3
 80051a8:	f024 0403 	bic.w	r4, r4, #3
 80051ac:	42a0      	cmp	r0, r4
 80051ae:	d0f8      	beq.n	80051a2 <sbrk_aligned+0x22>
 80051b0:	1a21      	subs	r1, r4, r0
 80051b2:	4628      	mov	r0, r5
 80051b4:	f000 faf8 	bl	80057a8 <_sbrk_r>
 80051b8:	3001      	adds	r0, #1
 80051ba:	d1f2      	bne.n	80051a2 <sbrk_aligned+0x22>
 80051bc:	e7ef      	b.n	800519e <sbrk_aligned+0x1e>
 80051be:	bf00      	nop
 80051c0:	20000294 	.word	0x20000294

080051c4 <_malloc_r>:
 80051c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80051c8:	1ccd      	adds	r5, r1, #3
 80051ca:	f025 0503 	bic.w	r5, r5, #3
 80051ce:	3508      	adds	r5, #8
 80051d0:	2d0c      	cmp	r5, #12
 80051d2:	bf38      	it	cc
 80051d4:	250c      	movcc	r5, #12
 80051d6:	2d00      	cmp	r5, #0
 80051d8:	4606      	mov	r6, r0
 80051da:	db01      	blt.n	80051e0 <_malloc_r+0x1c>
 80051dc:	42a9      	cmp	r1, r5
 80051de:	d904      	bls.n	80051ea <_malloc_r+0x26>
 80051e0:	230c      	movs	r3, #12
 80051e2:	6033      	str	r3, [r6, #0]
 80051e4:	2000      	movs	r0, #0
 80051e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80051ea:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80052c0 <_malloc_r+0xfc>
 80051ee:	f000 f869 	bl	80052c4 <__malloc_lock>
 80051f2:	f8d8 3000 	ldr.w	r3, [r8]
 80051f6:	461c      	mov	r4, r3
 80051f8:	bb44      	cbnz	r4, 800524c <_malloc_r+0x88>
 80051fa:	4629      	mov	r1, r5
 80051fc:	4630      	mov	r0, r6
 80051fe:	f7ff ffbf 	bl	8005180 <sbrk_aligned>
 8005202:	1c43      	adds	r3, r0, #1
 8005204:	4604      	mov	r4, r0
 8005206:	d158      	bne.n	80052ba <_malloc_r+0xf6>
 8005208:	f8d8 4000 	ldr.w	r4, [r8]
 800520c:	4627      	mov	r7, r4
 800520e:	2f00      	cmp	r7, #0
 8005210:	d143      	bne.n	800529a <_malloc_r+0xd6>
 8005212:	2c00      	cmp	r4, #0
 8005214:	d04b      	beq.n	80052ae <_malloc_r+0xea>
 8005216:	6823      	ldr	r3, [r4, #0]
 8005218:	4639      	mov	r1, r7
 800521a:	4630      	mov	r0, r6
 800521c:	eb04 0903 	add.w	r9, r4, r3
 8005220:	f000 fac2 	bl	80057a8 <_sbrk_r>
 8005224:	4581      	cmp	r9, r0
 8005226:	d142      	bne.n	80052ae <_malloc_r+0xea>
 8005228:	6821      	ldr	r1, [r4, #0]
 800522a:	1a6d      	subs	r5, r5, r1
 800522c:	4629      	mov	r1, r5
 800522e:	4630      	mov	r0, r6
 8005230:	f7ff ffa6 	bl	8005180 <sbrk_aligned>
 8005234:	3001      	adds	r0, #1
 8005236:	d03a      	beq.n	80052ae <_malloc_r+0xea>
 8005238:	6823      	ldr	r3, [r4, #0]
 800523a:	442b      	add	r3, r5
 800523c:	6023      	str	r3, [r4, #0]
 800523e:	f8d8 3000 	ldr.w	r3, [r8]
 8005242:	685a      	ldr	r2, [r3, #4]
 8005244:	bb62      	cbnz	r2, 80052a0 <_malloc_r+0xdc>
 8005246:	f8c8 7000 	str.w	r7, [r8]
 800524a:	e00f      	b.n	800526c <_malloc_r+0xa8>
 800524c:	6822      	ldr	r2, [r4, #0]
 800524e:	1b52      	subs	r2, r2, r5
 8005250:	d420      	bmi.n	8005294 <_malloc_r+0xd0>
 8005252:	2a0b      	cmp	r2, #11
 8005254:	d917      	bls.n	8005286 <_malloc_r+0xc2>
 8005256:	1961      	adds	r1, r4, r5
 8005258:	42a3      	cmp	r3, r4
 800525a:	6025      	str	r5, [r4, #0]
 800525c:	bf18      	it	ne
 800525e:	6059      	strne	r1, [r3, #4]
 8005260:	6863      	ldr	r3, [r4, #4]
 8005262:	bf08      	it	eq
 8005264:	f8c8 1000 	streq.w	r1, [r8]
 8005268:	5162      	str	r2, [r4, r5]
 800526a:	604b      	str	r3, [r1, #4]
 800526c:	4630      	mov	r0, r6
 800526e:	f000 f82f 	bl	80052d0 <__malloc_unlock>
 8005272:	f104 000b 	add.w	r0, r4, #11
 8005276:	1d23      	adds	r3, r4, #4
 8005278:	f020 0007 	bic.w	r0, r0, #7
 800527c:	1ac2      	subs	r2, r0, r3
 800527e:	bf1c      	itt	ne
 8005280:	1a1b      	subne	r3, r3, r0
 8005282:	50a3      	strne	r3, [r4, r2]
 8005284:	e7af      	b.n	80051e6 <_malloc_r+0x22>
 8005286:	6862      	ldr	r2, [r4, #4]
 8005288:	42a3      	cmp	r3, r4
 800528a:	bf0c      	ite	eq
 800528c:	f8c8 2000 	streq.w	r2, [r8]
 8005290:	605a      	strne	r2, [r3, #4]
 8005292:	e7eb      	b.n	800526c <_malloc_r+0xa8>
 8005294:	4623      	mov	r3, r4
 8005296:	6864      	ldr	r4, [r4, #4]
 8005298:	e7ae      	b.n	80051f8 <_malloc_r+0x34>
 800529a:	463c      	mov	r4, r7
 800529c:	687f      	ldr	r7, [r7, #4]
 800529e:	e7b6      	b.n	800520e <_malloc_r+0x4a>
 80052a0:	461a      	mov	r2, r3
 80052a2:	685b      	ldr	r3, [r3, #4]
 80052a4:	42a3      	cmp	r3, r4
 80052a6:	d1fb      	bne.n	80052a0 <_malloc_r+0xdc>
 80052a8:	2300      	movs	r3, #0
 80052aa:	6053      	str	r3, [r2, #4]
 80052ac:	e7de      	b.n	800526c <_malloc_r+0xa8>
 80052ae:	230c      	movs	r3, #12
 80052b0:	6033      	str	r3, [r6, #0]
 80052b2:	4630      	mov	r0, r6
 80052b4:	f000 f80c 	bl	80052d0 <__malloc_unlock>
 80052b8:	e794      	b.n	80051e4 <_malloc_r+0x20>
 80052ba:	6005      	str	r5, [r0, #0]
 80052bc:	e7d6      	b.n	800526c <_malloc_r+0xa8>
 80052be:	bf00      	nop
 80052c0:	20000298 	.word	0x20000298

080052c4 <__malloc_lock>:
 80052c4:	4801      	ldr	r0, [pc, #4]	@ (80052cc <__malloc_lock+0x8>)
 80052c6:	f000 babc 	b.w	8005842 <__retarget_lock_acquire_recursive>
 80052ca:	bf00      	nop
 80052cc:	200003dc 	.word	0x200003dc

080052d0 <__malloc_unlock>:
 80052d0:	4801      	ldr	r0, [pc, #4]	@ (80052d8 <__malloc_unlock+0x8>)
 80052d2:	f000 bab7 	b.w	8005844 <__retarget_lock_release_recursive>
 80052d6:	bf00      	nop
 80052d8:	200003dc 	.word	0x200003dc

080052dc <std>:
 80052dc:	2300      	movs	r3, #0
 80052de:	b510      	push	{r4, lr}
 80052e0:	4604      	mov	r4, r0
 80052e2:	e9c0 3300 	strd	r3, r3, [r0]
 80052e6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80052ea:	6083      	str	r3, [r0, #8]
 80052ec:	8181      	strh	r1, [r0, #12]
 80052ee:	6643      	str	r3, [r0, #100]	@ 0x64
 80052f0:	81c2      	strh	r2, [r0, #14]
 80052f2:	6183      	str	r3, [r0, #24]
 80052f4:	4619      	mov	r1, r3
 80052f6:	2208      	movs	r2, #8
 80052f8:	305c      	adds	r0, #92	@ 0x5c
 80052fa:	f000 fa19 	bl	8005730 <memset>
 80052fe:	4b0d      	ldr	r3, [pc, #52]	@ (8005334 <std+0x58>)
 8005300:	6263      	str	r3, [r4, #36]	@ 0x24
 8005302:	4b0d      	ldr	r3, [pc, #52]	@ (8005338 <std+0x5c>)
 8005304:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005306:	4b0d      	ldr	r3, [pc, #52]	@ (800533c <std+0x60>)
 8005308:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800530a:	4b0d      	ldr	r3, [pc, #52]	@ (8005340 <std+0x64>)
 800530c:	6323      	str	r3, [r4, #48]	@ 0x30
 800530e:	4b0d      	ldr	r3, [pc, #52]	@ (8005344 <std+0x68>)
 8005310:	6224      	str	r4, [r4, #32]
 8005312:	429c      	cmp	r4, r3
 8005314:	d006      	beq.n	8005324 <std+0x48>
 8005316:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800531a:	4294      	cmp	r4, r2
 800531c:	d002      	beq.n	8005324 <std+0x48>
 800531e:	33d0      	adds	r3, #208	@ 0xd0
 8005320:	429c      	cmp	r4, r3
 8005322:	d105      	bne.n	8005330 <std+0x54>
 8005324:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005328:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800532c:	f000 ba88 	b.w	8005840 <__retarget_lock_init_recursive>
 8005330:	bd10      	pop	{r4, pc}
 8005332:	bf00      	nop
 8005334:	08005581 	.word	0x08005581
 8005338:	080055a3 	.word	0x080055a3
 800533c:	080055db 	.word	0x080055db
 8005340:	080055ff 	.word	0x080055ff
 8005344:	2000029c 	.word	0x2000029c

08005348 <stdio_exit_handler>:
 8005348:	4a02      	ldr	r2, [pc, #8]	@ (8005354 <stdio_exit_handler+0xc>)
 800534a:	4903      	ldr	r1, [pc, #12]	@ (8005358 <stdio_exit_handler+0x10>)
 800534c:	4803      	ldr	r0, [pc, #12]	@ (800535c <stdio_exit_handler+0x14>)
 800534e:	f000 b869 	b.w	8005424 <_fwalk_sglue>
 8005352:	bf00      	nop
 8005354:	20000020 	.word	0x20000020
 8005358:	08006251 	.word	0x08006251
 800535c:	20000030 	.word	0x20000030

08005360 <cleanup_stdio>:
 8005360:	6841      	ldr	r1, [r0, #4]
 8005362:	4b0c      	ldr	r3, [pc, #48]	@ (8005394 <cleanup_stdio+0x34>)
 8005364:	4299      	cmp	r1, r3
 8005366:	b510      	push	{r4, lr}
 8005368:	4604      	mov	r4, r0
 800536a:	d001      	beq.n	8005370 <cleanup_stdio+0x10>
 800536c:	f000 ff70 	bl	8006250 <_fflush_r>
 8005370:	68a1      	ldr	r1, [r4, #8]
 8005372:	4b09      	ldr	r3, [pc, #36]	@ (8005398 <cleanup_stdio+0x38>)
 8005374:	4299      	cmp	r1, r3
 8005376:	d002      	beq.n	800537e <cleanup_stdio+0x1e>
 8005378:	4620      	mov	r0, r4
 800537a:	f000 ff69 	bl	8006250 <_fflush_r>
 800537e:	68e1      	ldr	r1, [r4, #12]
 8005380:	4b06      	ldr	r3, [pc, #24]	@ (800539c <cleanup_stdio+0x3c>)
 8005382:	4299      	cmp	r1, r3
 8005384:	d004      	beq.n	8005390 <cleanup_stdio+0x30>
 8005386:	4620      	mov	r0, r4
 8005388:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800538c:	f000 bf60 	b.w	8006250 <_fflush_r>
 8005390:	bd10      	pop	{r4, pc}
 8005392:	bf00      	nop
 8005394:	2000029c 	.word	0x2000029c
 8005398:	20000304 	.word	0x20000304
 800539c:	2000036c 	.word	0x2000036c

080053a0 <global_stdio_init.part.0>:
 80053a0:	b510      	push	{r4, lr}
 80053a2:	4b0b      	ldr	r3, [pc, #44]	@ (80053d0 <global_stdio_init.part.0+0x30>)
 80053a4:	4c0b      	ldr	r4, [pc, #44]	@ (80053d4 <global_stdio_init.part.0+0x34>)
 80053a6:	4a0c      	ldr	r2, [pc, #48]	@ (80053d8 <global_stdio_init.part.0+0x38>)
 80053a8:	601a      	str	r2, [r3, #0]
 80053aa:	4620      	mov	r0, r4
 80053ac:	2200      	movs	r2, #0
 80053ae:	2104      	movs	r1, #4
 80053b0:	f7ff ff94 	bl	80052dc <std>
 80053b4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80053b8:	2201      	movs	r2, #1
 80053ba:	2109      	movs	r1, #9
 80053bc:	f7ff ff8e 	bl	80052dc <std>
 80053c0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80053c4:	2202      	movs	r2, #2
 80053c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80053ca:	2112      	movs	r1, #18
 80053cc:	f7ff bf86 	b.w	80052dc <std>
 80053d0:	200003d4 	.word	0x200003d4
 80053d4:	2000029c 	.word	0x2000029c
 80053d8:	08005349 	.word	0x08005349

080053dc <__sfp_lock_acquire>:
 80053dc:	4801      	ldr	r0, [pc, #4]	@ (80053e4 <__sfp_lock_acquire+0x8>)
 80053de:	f000 ba30 	b.w	8005842 <__retarget_lock_acquire_recursive>
 80053e2:	bf00      	nop
 80053e4:	200003dd 	.word	0x200003dd

080053e8 <__sfp_lock_release>:
 80053e8:	4801      	ldr	r0, [pc, #4]	@ (80053f0 <__sfp_lock_release+0x8>)
 80053ea:	f000 ba2b 	b.w	8005844 <__retarget_lock_release_recursive>
 80053ee:	bf00      	nop
 80053f0:	200003dd 	.word	0x200003dd

080053f4 <__sinit>:
 80053f4:	b510      	push	{r4, lr}
 80053f6:	4604      	mov	r4, r0
 80053f8:	f7ff fff0 	bl	80053dc <__sfp_lock_acquire>
 80053fc:	6a23      	ldr	r3, [r4, #32]
 80053fe:	b11b      	cbz	r3, 8005408 <__sinit+0x14>
 8005400:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005404:	f7ff bff0 	b.w	80053e8 <__sfp_lock_release>
 8005408:	4b04      	ldr	r3, [pc, #16]	@ (800541c <__sinit+0x28>)
 800540a:	6223      	str	r3, [r4, #32]
 800540c:	4b04      	ldr	r3, [pc, #16]	@ (8005420 <__sinit+0x2c>)
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d1f5      	bne.n	8005400 <__sinit+0xc>
 8005414:	f7ff ffc4 	bl	80053a0 <global_stdio_init.part.0>
 8005418:	e7f2      	b.n	8005400 <__sinit+0xc>
 800541a:	bf00      	nop
 800541c:	08005361 	.word	0x08005361
 8005420:	200003d4 	.word	0x200003d4

08005424 <_fwalk_sglue>:
 8005424:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005428:	4607      	mov	r7, r0
 800542a:	4688      	mov	r8, r1
 800542c:	4614      	mov	r4, r2
 800542e:	2600      	movs	r6, #0
 8005430:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005434:	f1b9 0901 	subs.w	r9, r9, #1
 8005438:	d505      	bpl.n	8005446 <_fwalk_sglue+0x22>
 800543a:	6824      	ldr	r4, [r4, #0]
 800543c:	2c00      	cmp	r4, #0
 800543e:	d1f7      	bne.n	8005430 <_fwalk_sglue+0xc>
 8005440:	4630      	mov	r0, r6
 8005442:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005446:	89ab      	ldrh	r3, [r5, #12]
 8005448:	2b01      	cmp	r3, #1
 800544a:	d907      	bls.n	800545c <_fwalk_sglue+0x38>
 800544c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005450:	3301      	adds	r3, #1
 8005452:	d003      	beq.n	800545c <_fwalk_sglue+0x38>
 8005454:	4629      	mov	r1, r5
 8005456:	4638      	mov	r0, r7
 8005458:	47c0      	blx	r8
 800545a:	4306      	orrs	r6, r0
 800545c:	3568      	adds	r5, #104	@ 0x68
 800545e:	e7e9      	b.n	8005434 <_fwalk_sglue+0x10>

08005460 <iprintf>:
 8005460:	b40f      	push	{r0, r1, r2, r3}
 8005462:	b507      	push	{r0, r1, r2, lr}
 8005464:	4906      	ldr	r1, [pc, #24]	@ (8005480 <iprintf+0x20>)
 8005466:	ab04      	add	r3, sp, #16
 8005468:	6808      	ldr	r0, [r1, #0]
 800546a:	f853 2b04 	ldr.w	r2, [r3], #4
 800546e:	6881      	ldr	r1, [r0, #8]
 8005470:	9301      	str	r3, [sp, #4]
 8005472:	f000 fbc3 	bl	8005bfc <_vfiprintf_r>
 8005476:	b003      	add	sp, #12
 8005478:	f85d eb04 	ldr.w	lr, [sp], #4
 800547c:	b004      	add	sp, #16
 800547e:	4770      	bx	lr
 8005480:	2000002c 	.word	0x2000002c

08005484 <_puts_r>:
 8005484:	6a03      	ldr	r3, [r0, #32]
 8005486:	b570      	push	{r4, r5, r6, lr}
 8005488:	6884      	ldr	r4, [r0, #8]
 800548a:	4605      	mov	r5, r0
 800548c:	460e      	mov	r6, r1
 800548e:	b90b      	cbnz	r3, 8005494 <_puts_r+0x10>
 8005490:	f7ff ffb0 	bl	80053f4 <__sinit>
 8005494:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005496:	07db      	lsls	r3, r3, #31
 8005498:	d405      	bmi.n	80054a6 <_puts_r+0x22>
 800549a:	89a3      	ldrh	r3, [r4, #12]
 800549c:	0598      	lsls	r0, r3, #22
 800549e:	d402      	bmi.n	80054a6 <_puts_r+0x22>
 80054a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80054a2:	f000 f9ce 	bl	8005842 <__retarget_lock_acquire_recursive>
 80054a6:	89a3      	ldrh	r3, [r4, #12]
 80054a8:	0719      	lsls	r1, r3, #28
 80054aa:	d502      	bpl.n	80054b2 <_puts_r+0x2e>
 80054ac:	6923      	ldr	r3, [r4, #16]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d135      	bne.n	800551e <_puts_r+0x9a>
 80054b2:	4621      	mov	r1, r4
 80054b4:	4628      	mov	r0, r5
 80054b6:	f000 f8e5 	bl	8005684 <__swsetup_r>
 80054ba:	b380      	cbz	r0, 800551e <_puts_r+0x9a>
 80054bc:	f04f 35ff 	mov.w	r5, #4294967295
 80054c0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80054c2:	07da      	lsls	r2, r3, #31
 80054c4:	d405      	bmi.n	80054d2 <_puts_r+0x4e>
 80054c6:	89a3      	ldrh	r3, [r4, #12]
 80054c8:	059b      	lsls	r3, r3, #22
 80054ca:	d402      	bmi.n	80054d2 <_puts_r+0x4e>
 80054cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80054ce:	f000 f9b9 	bl	8005844 <__retarget_lock_release_recursive>
 80054d2:	4628      	mov	r0, r5
 80054d4:	bd70      	pop	{r4, r5, r6, pc}
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	da04      	bge.n	80054e4 <_puts_r+0x60>
 80054da:	69a2      	ldr	r2, [r4, #24]
 80054dc:	429a      	cmp	r2, r3
 80054de:	dc17      	bgt.n	8005510 <_puts_r+0x8c>
 80054e0:	290a      	cmp	r1, #10
 80054e2:	d015      	beq.n	8005510 <_puts_r+0x8c>
 80054e4:	6823      	ldr	r3, [r4, #0]
 80054e6:	1c5a      	adds	r2, r3, #1
 80054e8:	6022      	str	r2, [r4, #0]
 80054ea:	7019      	strb	r1, [r3, #0]
 80054ec:	68a3      	ldr	r3, [r4, #8]
 80054ee:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80054f2:	3b01      	subs	r3, #1
 80054f4:	60a3      	str	r3, [r4, #8]
 80054f6:	2900      	cmp	r1, #0
 80054f8:	d1ed      	bne.n	80054d6 <_puts_r+0x52>
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	da11      	bge.n	8005522 <_puts_r+0x9e>
 80054fe:	4622      	mov	r2, r4
 8005500:	210a      	movs	r1, #10
 8005502:	4628      	mov	r0, r5
 8005504:	f000 f87f 	bl	8005606 <__swbuf_r>
 8005508:	3001      	adds	r0, #1
 800550a:	d0d7      	beq.n	80054bc <_puts_r+0x38>
 800550c:	250a      	movs	r5, #10
 800550e:	e7d7      	b.n	80054c0 <_puts_r+0x3c>
 8005510:	4622      	mov	r2, r4
 8005512:	4628      	mov	r0, r5
 8005514:	f000 f877 	bl	8005606 <__swbuf_r>
 8005518:	3001      	adds	r0, #1
 800551a:	d1e7      	bne.n	80054ec <_puts_r+0x68>
 800551c:	e7ce      	b.n	80054bc <_puts_r+0x38>
 800551e:	3e01      	subs	r6, #1
 8005520:	e7e4      	b.n	80054ec <_puts_r+0x68>
 8005522:	6823      	ldr	r3, [r4, #0]
 8005524:	1c5a      	adds	r2, r3, #1
 8005526:	6022      	str	r2, [r4, #0]
 8005528:	220a      	movs	r2, #10
 800552a:	701a      	strb	r2, [r3, #0]
 800552c:	e7ee      	b.n	800550c <_puts_r+0x88>
	...

08005530 <puts>:
 8005530:	4b02      	ldr	r3, [pc, #8]	@ (800553c <puts+0xc>)
 8005532:	4601      	mov	r1, r0
 8005534:	6818      	ldr	r0, [r3, #0]
 8005536:	f7ff bfa5 	b.w	8005484 <_puts_r>
 800553a:	bf00      	nop
 800553c:	2000002c 	.word	0x2000002c

08005540 <siprintf>:
 8005540:	b40e      	push	{r1, r2, r3}
 8005542:	b500      	push	{lr}
 8005544:	b09c      	sub	sp, #112	@ 0x70
 8005546:	ab1d      	add	r3, sp, #116	@ 0x74
 8005548:	9002      	str	r0, [sp, #8]
 800554a:	9006      	str	r0, [sp, #24]
 800554c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005550:	4809      	ldr	r0, [pc, #36]	@ (8005578 <siprintf+0x38>)
 8005552:	9107      	str	r1, [sp, #28]
 8005554:	9104      	str	r1, [sp, #16]
 8005556:	4909      	ldr	r1, [pc, #36]	@ (800557c <siprintf+0x3c>)
 8005558:	f853 2b04 	ldr.w	r2, [r3], #4
 800555c:	9105      	str	r1, [sp, #20]
 800555e:	6800      	ldr	r0, [r0, #0]
 8005560:	9301      	str	r3, [sp, #4]
 8005562:	a902      	add	r1, sp, #8
 8005564:	f000 fa24 	bl	80059b0 <_svfiprintf_r>
 8005568:	9b02      	ldr	r3, [sp, #8]
 800556a:	2200      	movs	r2, #0
 800556c:	701a      	strb	r2, [r3, #0]
 800556e:	b01c      	add	sp, #112	@ 0x70
 8005570:	f85d eb04 	ldr.w	lr, [sp], #4
 8005574:	b003      	add	sp, #12
 8005576:	4770      	bx	lr
 8005578:	2000002c 	.word	0x2000002c
 800557c:	ffff0208 	.word	0xffff0208

08005580 <__sread>:
 8005580:	b510      	push	{r4, lr}
 8005582:	460c      	mov	r4, r1
 8005584:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005588:	f000 f8fc 	bl	8005784 <_read_r>
 800558c:	2800      	cmp	r0, #0
 800558e:	bfab      	itete	ge
 8005590:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005592:	89a3      	ldrhlt	r3, [r4, #12]
 8005594:	181b      	addge	r3, r3, r0
 8005596:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800559a:	bfac      	ite	ge
 800559c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800559e:	81a3      	strhlt	r3, [r4, #12]
 80055a0:	bd10      	pop	{r4, pc}

080055a2 <__swrite>:
 80055a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80055a6:	461f      	mov	r7, r3
 80055a8:	898b      	ldrh	r3, [r1, #12]
 80055aa:	05db      	lsls	r3, r3, #23
 80055ac:	4605      	mov	r5, r0
 80055ae:	460c      	mov	r4, r1
 80055b0:	4616      	mov	r6, r2
 80055b2:	d505      	bpl.n	80055c0 <__swrite+0x1e>
 80055b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80055b8:	2302      	movs	r3, #2
 80055ba:	2200      	movs	r2, #0
 80055bc:	f000 f8d0 	bl	8005760 <_lseek_r>
 80055c0:	89a3      	ldrh	r3, [r4, #12]
 80055c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80055c6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80055ca:	81a3      	strh	r3, [r4, #12]
 80055cc:	4632      	mov	r2, r6
 80055ce:	463b      	mov	r3, r7
 80055d0:	4628      	mov	r0, r5
 80055d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80055d6:	f000 b8f7 	b.w	80057c8 <_write_r>

080055da <__sseek>:
 80055da:	b510      	push	{r4, lr}
 80055dc:	460c      	mov	r4, r1
 80055de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80055e2:	f000 f8bd 	bl	8005760 <_lseek_r>
 80055e6:	1c43      	adds	r3, r0, #1
 80055e8:	89a3      	ldrh	r3, [r4, #12]
 80055ea:	bf15      	itete	ne
 80055ec:	6560      	strne	r0, [r4, #84]	@ 0x54
 80055ee:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80055f2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80055f6:	81a3      	strheq	r3, [r4, #12]
 80055f8:	bf18      	it	ne
 80055fa:	81a3      	strhne	r3, [r4, #12]
 80055fc:	bd10      	pop	{r4, pc}

080055fe <__sclose>:
 80055fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005602:	f000 b89d 	b.w	8005740 <_close_r>

08005606 <__swbuf_r>:
 8005606:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005608:	460e      	mov	r6, r1
 800560a:	4614      	mov	r4, r2
 800560c:	4605      	mov	r5, r0
 800560e:	b118      	cbz	r0, 8005618 <__swbuf_r+0x12>
 8005610:	6a03      	ldr	r3, [r0, #32]
 8005612:	b90b      	cbnz	r3, 8005618 <__swbuf_r+0x12>
 8005614:	f7ff feee 	bl	80053f4 <__sinit>
 8005618:	69a3      	ldr	r3, [r4, #24]
 800561a:	60a3      	str	r3, [r4, #8]
 800561c:	89a3      	ldrh	r3, [r4, #12]
 800561e:	071a      	lsls	r2, r3, #28
 8005620:	d501      	bpl.n	8005626 <__swbuf_r+0x20>
 8005622:	6923      	ldr	r3, [r4, #16]
 8005624:	b943      	cbnz	r3, 8005638 <__swbuf_r+0x32>
 8005626:	4621      	mov	r1, r4
 8005628:	4628      	mov	r0, r5
 800562a:	f000 f82b 	bl	8005684 <__swsetup_r>
 800562e:	b118      	cbz	r0, 8005638 <__swbuf_r+0x32>
 8005630:	f04f 37ff 	mov.w	r7, #4294967295
 8005634:	4638      	mov	r0, r7
 8005636:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005638:	6823      	ldr	r3, [r4, #0]
 800563a:	6922      	ldr	r2, [r4, #16]
 800563c:	1a98      	subs	r0, r3, r2
 800563e:	6963      	ldr	r3, [r4, #20]
 8005640:	b2f6      	uxtb	r6, r6
 8005642:	4283      	cmp	r3, r0
 8005644:	4637      	mov	r7, r6
 8005646:	dc05      	bgt.n	8005654 <__swbuf_r+0x4e>
 8005648:	4621      	mov	r1, r4
 800564a:	4628      	mov	r0, r5
 800564c:	f000 fe00 	bl	8006250 <_fflush_r>
 8005650:	2800      	cmp	r0, #0
 8005652:	d1ed      	bne.n	8005630 <__swbuf_r+0x2a>
 8005654:	68a3      	ldr	r3, [r4, #8]
 8005656:	3b01      	subs	r3, #1
 8005658:	60a3      	str	r3, [r4, #8]
 800565a:	6823      	ldr	r3, [r4, #0]
 800565c:	1c5a      	adds	r2, r3, #1
 800565e:	6022      	str	r2, [r4, #0]
 8005660:	701e      	strb	r6, [r3, #0]
 8005662:	6962      	ldr	r2, [r4, #20]
 8005664:	1c43      	adds	r3, r0, #1
 8005666:	429a      	cmp	r2, r3
 8005668:	d004      	beq.n	8005674 <__swbuf_r+0x6e>
 800566a:	89a3      	ldrh	r3, [r4, #12]
 800566c:	07db      	lsls	r3, r3, #31
 800566e:	d5e1      	bpl.n	8005634 <__swbuf_r+0x2e>
 8005670:	2e0a      	cmp	r6, #10
 8005672:	d1df      	bne.n	8005634 <__swbuf_r+0x2e>
 8005674:	4621      	mov	r1, r4
 8005676:	4628      	mov	r0, r5
 8005678:	f000 fdea 	bl	8006250 <_fflush_r>
 800567c:	2800      	cmp	r0, #0
 800567e:	d0d9      	beq.n	8005634 <__swbuf_r+0x2e>
 8005680:	e7d6      	b.n	8005630 <__swbuf_r+0x2a>
	...

08005684 <__swsetup_r>:
 8005684:	b538      	push	{r3, r4, r5, lr}
 8005686:	4b29      	ldr	r3, [pc, #164]	@ (800572c <__swsetup_r+0xa8>)
 8005688:	4605      	mov	r5, r0
 800568a:	6818      	ldr	r0, [r3, #0]
 800568c:	460c      	mov	r4, r1
 800568e:	b118      	cbz	r0, 8005698 <__swsetup_r+0x14>
 8005690:	6a03      	ldr	r3, [r0, #32]
 8005692:	b90b      	cbnz	r3, 8005698 <__swsetup_r+0x14>
 8005694:	f7ff feae 	bl	80053f4 <__sinit>
 8005698:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800569c:	0719      	lsls	r1, r3, #28
 800569e:	d422      	bmi.n	80056e6 <__swsetup_r+0x62>
 80056a0:	06da      	lsls	r2, r3, #27
 80056a2:	d407      	bmi.n	80056b4 <__swsetup_r+0x30>
 80056a4:	2209      	movs	r2, #9
 80056a6:	602a      	str	r2, [r5, #0]
 80056a8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80056ac:	81a3      	strh	r3, [r4, #12]
 80056ae:	f04f 30ff 	mov.w	r0, #4294967295
 80056b2:	e033      	b.n	800571c <__swsetup_r+0x98>
 80056b4:	0758      	lsls	r0, r3, #29
 80056b6:	d512      	bpl.n	80056de <__swsetup_r+0x5a>
 80056b8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80056ba:	b141      	cbz	r1, 80056ce <__swsetup_r+0x4a>
 80056bc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80056c0:	4299      	cmp	r1, r3
 80056c2:	d002      	beq.n	80056ca <__swsetup_r+0x46>
 80056c4:	4628      	mov	r0, r5
 80056c6:	f000 f8cd 	bl	8005864 <_free_r>
 80056ca:	2300      	movs	r3, #0
 80056cc:	6363      	str	r3, [r4, #52]	@ 0x34
 80056ce:	89a3      	ldrh	r3, [r4, #12]
 80056d0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80056d4:	81a3      	strh	r3, [r4, #12]
 80056d6:	2300      	movs	r3, #0
 80056d8:	6063      	str	r3, [r4, #4]
 80056da:	6923      	ldr	r3, [r4, #16]
 80056dc:	6023      	str	r3, [r4, #0]
 80056de:	89a3      	ldrh	r3, [r4, #12]
 80056e0:	f043 0308 	orr.w	r3, r3, #8
 80056e4:	81a3      	strh	r3, [r4, #12]
 80056e6:	6923      	ldr	r3, [r4, #16]
 80056e8:	b94b      	cbnz	r3, 80056fe <__swsetup_r+0x7a>
 80056ea:	89a3      	ldrh	r3, [r4, #12]
 80056ec:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80056f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80056f4:	d003      	beq.n	80056fe <__swsetup_r+0x7a>
 80056f6:	4621      	mov	r1, r4
 80056f8:	4628      	mov	r0, r5
 80056fa:	f000 fdf7 	bl	80062ec <__smakebuf_r>
 80056fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005702:	f013 0201 	ands.w	r2, r3, #1
 8005706:	d00a      	beq.n	800571e <__swsetup_r+0x9a>
 8005708:	2200      	movs	r2, #0
 800570a:	60a2      	str	r2, [r4, #8]
 800570c:	6962      	ldr	r2, [r4, #20]
 800570e:	4252      	negs	r2, r2
 8005710:	61a2      	str	r2, [r4, #24]
 8005712:	6922      	ldr	r2, [r4, #16]
 8005714:	b942      	cbnz	r2, 8005728 <__swsetup_r+0xa4>
 8005716:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800571a:	d1c5      	bne.n	80056a8 <__swsetup_r+0x24>
 800571c:	bd38      	pop	{r3, r4, r5, pc}
 800571e:	0799      	lsls	r1, r3, #30
 8005720:	bf58      	it	pl
 8005722:	6962      	ldrpl	r2, [r4, #20]
 8005724:	60a2      	str	r2, [r4, #8]
 8005726:	e7f4      	b.n	8005712 <__swsetup_r+0x8e>
 8005728:	2000      	movs	r0, #0
 800572a:	e7f7      	b.n	800571c <__swsetup_r+0x98>
 800572c:	2000002c 	.word	0x2000002c

08005730 <memset>:
 8005730:	4402      	add	r2, r0
 8005732:	4603      	mov	r3, r0
 8005734:	4293      	cmp	r3, r2
 8005736:	d100      	bne.n	800573a <memset+0xa>
 8005738:	4770      	bx	lr
 800573a:	f803 1b01 	strb.w	r1, [r3], #1
 800573e:	e7f9      	b.n	8005734 <memset+0x4>

08005740 <_close_r>:
 8005740:	b538      	push	{r3, r4, r5, lr}
 8005742:	4d06      	ldr	r5, [pc, #24]	@ (800575c <_close_r+0x1c>)
 8005744:	2300      	movs	r3, #0
 8005746:	4604      	mov	r4, r0
 8005748:	4608      	mov	r0, r1
 800574a:	602b      	str	r3, [r5, #0]
 800574c:	f7fb fb99 	bl	8000e82 <_close>
 8005750:	1c43      	adds	r3, r0, #1
 8005752:	d102      	bne.n	800575a <_close_r+0x1a>
 8005754:	682b      	ldr	r3, [r5, #0]
 8005756:	b103      	cbz	r3, 800575a <_close_r+0x1a>
 8005758:	6023      	str	r3, [r4, #0]
 800575a:	bd38      	pop	{r3, r4, r5, pc}
 800575c:	200003d8 	.word	0x200003d8

08005760 <_lseek_r>:
 8005760:	b538      	push	{r3, r4, r5, lr}
 8005762:	4d07      	ldr	r5, [pc, #28]	@ (8005780 <_lseek_r+0x20>)
 8005764:	4604      	mov	r4, r0
 8005766:	4608      	mov	r0, r1
 8005768:	4611      	mov	r1, r2
 800576a:	2200      	movs	r2, #0
 800576c:	602a      	str	r2, [r5, #0]
 800576e:	461a      	mov	r2, r3
 8005770:	f7fb fbae 	bl	8000ed0 <_lseek>
 8005774:	1c43      	adds	r3, r0, #1
 8005776:	d102      	bne.n	800577e <_lseek_r+0x1e>
 8005778:	682b      	ldr	r3, [r5, #0]
 800577a:	b103      	cbz	r3, 800577e <_lseek_r+0x1e>
 800577c:	6023      	str	r3, [r4, #0]
 800577e:	bd38      	pop	{r3, r4, r5, pc}
 8005780:	200003d8 	.word	0x200003d8

08005784 <_read_r>:
 8005784:	b538      	push	{r3, r4, r5, lr}
 8005786:	4d07      	ldr	r5, [pc, #28]	@ (80057a4 <_read_r+0x20>)
 8005788:	4604      	mov	r4, r0
 800578a:	4608      	mov	r0, r1
 800578c:	4611      	mov	r1, r2
 800578e:	2200      	movs	r2, #0
 8005790:	602a      	str	r2, [r5, #0]
 8005792:	461a      	mov	r2, r3
 8005794:	f7fb fb3c 	bl	8000e10 <_read>
 8005798:	1c43      	adds	r3, r0, #1
 800579a:	d102      	bne.n	80057a2 <_read_r+0x1e>
 800579c:	682b      	ldr	r3, [r5, #0]
 800579e:	b103      	cbz	r3, 80057a2 <_read_r+0x1e>
 80057a0:	6023      	str	r3, [r4, #0]
 80057a2:	bd38      	pop	{r3, r4, r5, pc}
 80057a4:	200003d8 	.word	0x200003d8

080057a8 <_sbrk_r>:
 80057a8:	b538      	push	{r3, r4, r5, lr}
 80057aa:	4d06      	ldr	r5, [pc, #24]	@ (80057c4 <_sbrk_r+0x1c>)
 80057ac:	2300      	movs	r3, #0
 80057ae:	4604      	mov	r4, r0
 80057b0:	4608      	mov	r0, r1
 80057b2:	602b      	str	r3, [r5, #0]
 80057b4:	f7fb fb9a 	bl	8000eec <_sbrk>
 80057b8:	1c43      	adds	r3, r0, #1
 80057ba:	d102      	bne.n	80057c2 <_sbrk_r+0x1a>
 80057bc:	682b      	ldr	r3, [r5, #0]
 80057be:	b103      	cbz	r3, 80057c2 <_sbrk_r+0x1a>
 80057c0:	6023      	str	r3, [r4, #0]
 80057c2:	bd38      	pop	{r3, r4, r5, pc}
 80057c4:	200003d8 	.word	0x200003d8

080057c8 <_write_r>:
 80057c8:	b538      	push	{r3, r4, r5, lr}
 80057ca:	4d07      	ldr	r5, [pc, #28]	@ (80057e8 <_write_r+0x20>)
 80057cc:	4604      	mov	r4, r0
 80057ce:	4608      	mov	r0, r1
 80057d0:	4611      	mov	r1, r2
 80057d2:	2200      	movs	r2, #0
 80057d4:	602a      	str	r2, [r5, #0]
 80057d6:	461a      	mov	r2, r3
 80057d8:	f7fb fb37 	bl	8000e4a <_write>
 80057dc:	1c43      	adds	r3, r0, #1
 80057de:	d102      	bne.n	80057e6 <_write_r+0x1e>
 80057e0:	682b      	ldr	r3, [r5, #0]
 80057e2:	b103      	cbz	r3, 80057e6 <_write_r+0x1e>
 80057e4:	6023      	str	r3, [r4, #0]
 80057e6:	bd38      	pop	{r3, r4, r5, pc}
 80057e8:	200003d8 	.word	0x200003d8

080057ec <__errno>:
 80057ec:	4b01      	ldr	r3, [pc, #4]	@ (80057f4 <__errno+0x8>)
 80057ee:	6818      	ldr	r0, [r3, #0]
 80057f0:	4770      	bx	lr
 80057f2:	bf00      	nop
 80057f4:	2000002c 	.word	0x2000002c

080057f8 <__libc_init_array>:
 80057f8:	b570      	push	{r4, r5, r6, lr}
 80057fa:	4d0d      	ldr	r5, [pc, #52]	@ (8005830 <__libc_init_array+0x38>)
 80057fc:	4c0d      	ldr	r4, [pc, #52]	@ (8005834 <__libc_init_array+0x3c>)
 80057fe:	1b64      	subs	r4, r4, r5
 8005800:	10a4      	asrs	r4, r4, #2
 8005802:	2600      	movs	r6, #0
 8005804:	42a6      	cmp	r6, r4
 8005806:	d109      	bne.n	800581c <__libc_init_array+0x24>
 8005808:	4d0b      	ldr	r5, [pc, #44]	@ (8005838 <__libc_init_array+0x40>)
 800580a:	4c0c      	ldr	r4, [pc, #48]	@ (800583c <__libc_init_array+0x44>)
 800580c:	f000 fe1c 	bl	8006448 <_init>
 8005810:	1b64      	subs	r4, r4, r5
 8005812:	10a4      	asrs	r4, r4, #2
 8005814:	2600      	movs	r6, #0
 8005816:	42a6      	cmp	r6, r4
 8005818:	d105      	bne.n	8005826 <__libc_init_array+0x2e>
 800581a:	bd70      	pop	{r4, r5, r6, pc}
 800581c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005820:	4798      	blx	r3
 8005822:	3601      	adds	r6, #1
 8005824:	e7ee      	b.n	8005804 <__libc_init_array+0xc>
 8005826:	f855 3b04 	ldr.w	r3, [r5], #4
 800582a:	4798      	blx	r3
 800582c:	3601      	adds	r6, #1
 800582e:	e7f2      	b.n	8005816 <__libc_init_array+0x1e>
 8005830:	08009210 	.word	0x08009210
 8005834:	08009210 	.word	0x08009210
 8005838:	08009210 	.word	0x08009210
 800583c:	08009214 	.word	0x08009214

08005840 <__retarget_lock_init_recursive>:
 8005840:	4770      	bx	lr

08005842 <__retarget_lock_acquire_recursive>:
 8005842:	4770      	bx	lr

08005844 <__retarget_lock_release_recursive>:
 8005844:	4770      	bx	lr

08005846 <memcpy>:
 8005846:	440a      	add	r2, r1
 8005848:	4291      	cmp	r1, r2
 800584a:	f100 33ff 	add.w	r3, r0, #4294967295
 800584e:	d100      	bne.n	8005852 <memcpy+0xc>
 8005850:	4770      	bx	lr
 8005852:	b510      	push	{r4, lr}
 8005854:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005858:	f803 4f01 	strb.w	r4, [r3, #1]!
 800585c:	4291      	cmp	r1, r2
 800585e:	d1f9      	bne.n	8005854 <memcpy+0xe>
 8005860:	bd10      	pop	{r4, pc}
	...

08005864 <_free_r>:
 8005864:	b538      	push	{r3, r4, r5, lr}
 8005866:	4605      	mov	r5, r0
 8005868:	2900      	cmp	r1, #0
 800586a:	d041      	beq.n	80058f0 <_free_r+0x8c>
 800586c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005870:	1f0c      	subs	r4, r1, #4
 8005872:	2b00      	cmp	r3, #0
 8005874:	bfb8      	it	lt
 8005876:	18e4      	addlt	r4, r4, r3
 8005878:	f7ff fd24 	bl	80052c4 <__malloc_lock>
 800587c:	4a1d      	ldr	r2, [pc, #116]	@ (80058f4 <_free_r+0x90>)
 800587e:	6813      	ldr	r3, [r2, #0]
 8005880:	b933      	cbnz	r3, 8005890 <_free_r+0x2c>
 8005882:	6063      	str	r3, [r4, #4]
 8005884:	6014      	str	r4, [r2, #0]
 8005886:	4628      	mov	r0, r5
 8005888:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800588c:	f7ff bd20 	b.w	80052d0 <__malloc_unlock>
 8005890:	42a3      	cmp	r3, r4
 8005892:	d908      	bls.n	80058a6 <_free_r+0x42>
 8005894:	6820      	ldr	r0, [r4, #0]
 8005896:	1821      	adds	r1, r4, r0
 8005898:	428b      	cmp	r3, r1
 800589a:	bf01      	itttt	eq
 800589c:	6819      	ldreq	r1, [r3, #0]
 800589e:	685b      	ldreq	r3, [r3, #4]
 80058a0:	1809      	addeq	r1, r1, r0
 80058a2:	6021      	streq	r1, [r4, #0]
 80058a4:	e7ed      	b.n	8005882 <_free_r+0x1e>
 80058a6:	461a      	mov	r2, r3
 80058a8:	685b      	ldr	r3, [r3, #4]
 80058aa:	b10b      	cbz	r3, 80058b0 <_free_r+0x4c>
 80058ac:	42a3      	cmp	r3, r4
 80058ae:	d9fa      	bls.n	80058a6 <_free_r+0x42>
 80058b0:	6811      	ldr	r1, [r2, #0]
 80058b2:	1850      	adds	r0, r2, r1
 80058b4:	42a0      	cmp	r0, r4
 80058b6:	d10b      	bne.n	80058d0 <_free_r+0x6c>
 80058b8:	6820      	ldr	r0, [r4, #0]
 80058ba:	4401      	add	r1, r0
 80058bc:	1850      	adds	r0, r2, r1
 80058be:	4283      	cmp	r3, r0
 80058c0:	6011      	str	r1, [r2, #0]
 80058c2:	d1e0      	bne.n	8005886 <_free_r+0x22>
 80058c4:	6818      	ldr	r0, [r3, #0]
 80058c6:	685b      	ldr	r3, [r3, #4]
 80058c8:	6053      	str	r3, [r2, #4]
 80058ca:	4408      	add	r0, r1
 80058cc:	6010      	str	r0, [r2, #0]
 80058ce:	e7da      	b.n	8005886 <_free_r+0x22>
 80058d0:	d902      	bls.n	80058d8 <_free_r+0x74>
 80058d2:	230c      	movs	r3, #12
 80058d4:	602b      	str	r3, [r5, #0]
 80058d6:	e7d6      	b.n	8005886 <_free_r+0x22>
 80058d8:	6820      	ldr	r0, [r4, #0]
 80058da:	1821      	adds	r1, r4, r0
 80058dc:	428b      	cmp	r3, r1
 80058de:	bf04      	itt	eq
 80058e0:	6819      	ldreq	r1, [r3, #0]
 80058e2:	685b      	ldreq	r3, [r3, #4]
 80058e4:	6063      	str	r3, [r4, #4]
 80058e6:	bf04      	itt	eq
 80058e8:	1809      	addeq	r1, r1, r0
 80058ea:	6021      	streq	r1, [r4, #0]
 80058ec:	6054      	str	r4, [r2, #4]
 80058ee:	e7ca      	b.n	8005886 <_free_r+0x22>
 80058f0:	bd38      	pop	{r3, r4, r5, pc}
 80058f2:	bf00      	nop
 80058f4:	20000298 	.word	0x20000298

080058f8 <__ssputs_r>:
 80058f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80058fc:	688e      	ldr	r6, [r1, #8]
 80058fe:	461f      	mov	r7, r3
 8005900:	42be      	cmp	r6, r7
 8005902:	680b      	ldr	r3, [r1, #0]
 8005904:	4682      	mov	sl, r0
 8005906:	460c      	mov	r4, r1
 8005908:	4690      	mov	r8, r2
 800590a:	d82d      	bhi.n	8005968 <__ssputs_r+0x70>
 800590c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005910:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005914:	d026      	beq.n	8005964 <__ssputs_r+0x6c>
 8005916:	6965      	ldr	r5, [r4, #20]
 8005918:	6909      	ldr	r1, [r1, #16]
 800591a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800591e:	eba3 0901 	sub.w	r9, r3, r1
 8005922:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005926:	1c7b      	adds	r3, r7, #1
 8005928:	444b      	add	r3, r9
 800592a:	106d      	asrs	r5, r5, #1
 800592c:	429d      	cmp	r5, r3
 800592e:	bf38      	it	cc
 8005930:	461d      	movcc	r5, r3
 8005932:	0553      	lsls	r3, r2, #21
 8005934:	d527      	bpl.n	8005986 <__ssputs_r+0x8e>
 8005936:	4629      	mov	r1, r5
 8005938:	f7ff fc44 	bl	80051c4 <_malloc_r>
 800593c:	4606      	mov	r6, r0
 800593e:	b360      	cbz	r0, 800599a <__ssputs_r+0xa2>
 8005940:	6921      	ldr	r1, [r4, #16]
 8005942:	464a      	mov	r2, r9
 8005944:	f7ff ff7f 	bl	8005846 <memcpy>
 8005948:	89a3      	ldrh	r3, [r4, #12]
 800594a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800594e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005952:	81a3      	strh	r3, [r4, #12]
 8005954:	6126      	str	r6, [r4, #16]
 8005956:	6165      	str	r5, [r4, #20]
 8005958:	444e      	add	r6, r9
 800595a:	eba5 0509 	sub.w	r5, r5, r9
 800595e:	6026      	str	r6, [r4, #0]
 8005960:	60a5      	str	r5, [r4, #8]
 8005962:	463e      	mov	r6, r7
 8005964:	42be      	cmp	r6, r7
 8005966:	d900      	bls.n	800596a <__ssputs_r+0x72>
 8005968:	463e      	mov	r6, r7
 800596a:	6820      	ldr	r0, [r4, #0]
 800596c:	4632      	mov	r2, r6
 800596e:	4641      	mov	r1, r8
 8005970:	f000 fcf8 	bl	8006364 <memmove>
 8005974:	68a3      	ldr	r3, [r4, #8]
 8005976:	1b9b      	subs	r3, r3, r6
 8005978:	60a3      	str	r3, [r4, #8]
 800597a:	6823      	ldr	r3, [r4, #0]
 800597c:	4433      	add	r3, r6
 800597e:	6023      	str	r3, [r4, #0]
 8005980:	2000      	movs	r0, #0
 8005982:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005986:	462a      	mov	r2, r5
 8005988:	f000 fd28 	bl	80063dc <_realloc_r>
 800598c:	4606      	mov	r6, r0
 800598e:	2800      	cmp	r0, #0
 8005990:	d1e0      	bne.n	8005954 <__ssputs_r+0x5c>
 8005992:	6921      	ldr	r1, [r4, #16]
 8005994:	4650      	mov	r0, sl
 8005996:	f7ff ff65 	bl	8005864 <_free_r>
 800599a:	230c      	movs	r3, #12
 800599c:	f8ca 3000 	str.w	r3, [sl]
 80059a0:	89a3      	ldrh	r3, [r4, #12]
 80059a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80059a6:	81a3      	strh	r3, [r4, #12]
 80059a8:	f04f 30ff 	mov.w	r0, #4294967295
 80059ac:	e7e9      	b.n	8005982 <__ssputs_r+0x8a>
	...

080059b0 <_svfiprintf_r>:
 80059b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059b4:	4698      	mov	r8, r3
 80059b6:	898b      	ldrh	r3, [r1, #12]
 80059b8:	061b      	lsls	r3, r3, #24
 80059ba:	b09d      	sub	sp, #116	@ 0x74
 80059bc:	4607      	mov	r7, r0
 80059be:	460d      	mov	r5, r1
 80059c0:	4614      	mov	r4, r2
 80059c2:	d510      	bpl.n	80059e6 <_svfiprintf_r+0x36>
 80059c4:	690b      	ldr	r3, [r1, #16]
 80059c6:	b973      	cbnz	r3, 80059e6 <_svfiprintf_r+0x36>
 80059c8:	2140      	movs	r1, #64	@ 0x40
 80059ca:	f7ff fbfb 	bl	80051c4 <_malloc_r>
 80059ce:	6028      	str	r0, [r5, #0]
 80059d0:	6128      	str	r0, [r5, #16]
 80059d2:	b930      	cbnz	r0, 80059e2 <_svfiprintf_r+0x32>
 80059d4:	230c      	movs	r3, #12
 80059d6:	603b      	str	r3, [r7, #0]
 80059d8:	f04f 30ff 	mov.w	r0, #4294967295
 80059dc:	b01d      	add	sp, #116	@ 0x74
 80059de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059e2:	2340      	movs	r3, #64	@ 0x40
 80059e4:	616b      	str	r3, [r5, #20]
 80059e6:	2300      	movs	r3, #0
 80059e8:	9309      	str	r3, [sp, #36]	@ 0x24
 80059ea:	2320      	movs	r3, #32
 80059ec:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80059f0:	f8cd 800c 	str.w	r8, [sp, #12]
 80059f4:	2330      	movs	r3, #48	@ 0x30
 80059f6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005b94 <_svfiprintf_r+0x1e4>
 80059fa:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80059fe:	f04f 0901 	mov.w	r9, #1
 8005a02:	4623      	mov	r3, r4
 8005a04:	469a      	mov	sl, r3
 8005a06:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005a0a:	b10a      	cbz	r2, 8005a10 <_svfiprintf_r+0x60>
 8005a0c:	2a25      	cmp	r2, #37	@ 0x25
 8005a0e:	d1f9      	bne.n	8005a04 <_svfiprintf_r+0x54>
 8005a10:	ebba 0b04 	subs.w	fp, sl, r4
 8005a14:	d00b      	beq.n	8005a2e <_svfiprintf_r+0x7e>
 8005a16:	465b      	mov	r3, fp
 8005a18:	4622      	mov	r2, r4
 8005a1a:	4629      	mov	r1, r5
 8005a1c:	4638      	mov	r0, r7
 8005a1e:	f7ff ff6b 	bl	80058f8 <__ssputs_r>
 8005a22:	3001      	adds	r0, #1
 8005a24:	f000 80a7 	beq.w	8005b76 <_svfiprintf_r+0x1c6>
 8005a28:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005a2a:	445a      	add	r2, fp
 8005a2c:	9209      	str	r2, [sp, #36]	@ 0x24
 8005a2e:	f89a 3000 	ldrb.w	r3, [sl]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	f000 809f 	beq.w	8005b76 <_svfiprintf_r+0x1c6>
 8005a38:	2300      	movs	r3, #0
 8005a3a:	f04f 32ff 	mov.w	r2, #4294967295
 8005a3e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005a42:	f10a 0a01 	add.w	sl, sl, #1
 8005a46:	9304      	str	r3, [sp, #16]
 8005a48:	9307      	str	r3, [sp, #28]
 8005a4a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005a4e:	931a      	str	r3, [sp, #104]	@ 0x68
 8005a50:	4654      	mov	r4, sl
 8005a52:	2205      	movs	r2, #5
 8005a54:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a58:	484e      	ldr	r0, [pc, #312]	@ (8005b94 <_svfiprintf_r+0x1e4>)
 8005a5a:	f7fa fbd9 	bl	8000210 <memchr>
 8005a5e:	9a04      	ldr	r2, [sp, #16]
 8005a60:	b9d8      	cbnz	r0, 8005a9a <_svfiprintf_r+0xea>
 8005a62:	06d0      	lsls	r0, r2, #27
 8005a64:	bf44      	itt	mi
 8005a66:	2320      	movmi	r3, #32
 8005a68:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005a6c:	0711      	lsls	r1, r2, #28
 8005a6e:	bf44      	itt	mi
 8005a70:	232b      	movmi	r3, #43	@ 0x2b
 8005a72:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005a76:	f89a 3000 	ldrb.w	r3, [sl]
 8005a7a:	2b2a      	cmp	r3, #42	@ 0x2a
 8005a7c:	d015      	beq.n	8005aaa <_svfiprintf_r+0xfa>
 8005a7e:	9a07      	ldr	r2, [sp, #28]
 8005a80:	4654      	mov	r4, sl
 8005a82:	2000      	movs	r0, #0
 8005a84:	f04f 0c0a 	mov.w	ip, #10
 8005a88:	4621      	mov	r1, r4
 8005a8a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005a8e:	3b30      	subs	r3, #48	@ 0x30
 8005a90:	2b09      	cmp	r3, #9
 8005a92:	d94b      	bls.n	8005b2c <_svfiprintf_r+0x17c>
 8005a94:	b1b0      	cbz	r0, 8005ac4 <_svfiprintf_r+0x114>
 8005a96:	9207      	str	r2, [sp, #28]
 8005a98:	e014      	b.n	8005ac4 <_svfiprintf_r+0x114>
 8005a9a:	eba0 0308 	sub.w	r3, r0, r8
 8005a9e:	fa09 f303 	lsl.w	r3, r9, r3
 8005aa2:	4313      	orrs	r3, r2
 8005aa4:	9304      	str	r3, [sp, #16]
 8005aa6:	46a2      	mov	sl, r4
 8005aa8:	e7d2      	b.n	8005a50 <_svfiprintf_r+0xa0>
 8005aaa:	9b03      	ldr	r3, [sp, #12]
 8005aac:	1d19      	adds	r1, r3, #4
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	9103      	str	r1, [sp, #12]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	bfbb      	ittet	lt
 8005ab6:	425b      	neglt	r3, r3
 8005ab8:	f042 0202 	orrlt.w	r2, r2, #2
 8005abc:	9307      	strge	r3, [sp, #28]
 8005abe:	9307      	strlt	r3, [sp, #28]
 8005ac0:	bfb8      	it	lt
 8005ac2:	9204      	strlt	r2, [sp, #16]
 8005ac4:	7823      	ldrb	r3, [r4, #0]
 8005ac6:	2b2e      	cmp	r3, #46	@ 0x2e
 8005ac8:	d10a      	bne.n	8005ae0 <_svfiprintf_r+0x130>
 8005aca:	7863      	ldrb	r3, [r4, #1]
 8005acc:	2b2a      	cmp	r3, #42	@ 0x2a
 8005ace:	d132      	bne.n	8005b36 <_svfiprintf_r+0x186>
 8005ad0:	9b03      	ldr	r3, [sp, #12]
 8005ad2:	1d1a      	adds	r2, r3, #4
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	9203      	str	r2, [sp, #12]
 8005ad8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005adc:	3402      	adds	r4, #2
 8005ade:	9305      	str	r3, [sp, #20]
 8005ae0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005ba4 <_svfiprintf_r+0x1f4>
 8005ae4:	7821      	ldrb	r1, [r4, #0]
 8005ae6:	2203      	movs	r2, #3
 8005ae8:	4650      	mov	r0, sl
 8005aea:	f7fa fb91 	bl	8000210 <memchr>
 8005aee:	b138      	cbz	r0, 8005b00 <_svfiprintf_r+0x150>
 8005af0:	9b04      	ldr	r3, [sp, #16]
 8005af2:	eba0 000a 	sub.w	r0, r0, sl
 8005af6:	2240      	movs	r2, #64	@ 0x40
 8005af8:	4082      	lsls	r2, r0
 8005afa:	4313      	orrs	r3, r2
 8005afc:	3401      	adds	r4, #1
 8005afe:	9304      	str	r3, [sp, #16]
 8005b00:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b04:	4824      	ldr	r0, [pc, #144]	@ (8005b98 <_svfiprintf_r+0x1e8>)
 8005b06:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005b0a:	2206      	movs	r2, #6
 8005b0c:	f7fa fb80 	bl	8000210 <memchr>
 8005b10:	2800      	cmp	r0, #0
 8005b12:	d036      	beq.n	8005b82 <_svfiprintf_r+0x1d2>
 8005b14:	4b21      	ldr	r3, [pc, #132]	@ (8005b9c <_svfiprintf_r+0x1ec>)
 8005b16:	bb1b      	cbnz	r3, 8005b60 <_svfiprintf_r+0x1b0>
 8005b18:	9b03      	ldr	r3, [sp, #12]
 8005b1a:	3307      	adds	r3, #7
 8005b1c:	f023 0307 	bic.w	r3, r3, #7
 8005b20:	3308      	adds	r3, #8
 8005b22:	9303      	str	r3, [sp, #12]
 8005b24:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005b26:	4433      	add	r3, r6
 8005b28:	9309      	str	r3, [sp, #36]	@ 0x24
 8005b2a:	e76a      	b.n	8005a02 <_svfiprintf_r+0x52>
 8005b2c:	fb0c 3202 	mla	r2, ip, r2, r3
 8005b30:	460c      	mov	r4, r1
 8005b32:	2001      	movs	r0, #1
 8005b34:	e7a8      	b.n	8005a88 <_svfiprintf_r+0xd8>
 8005b36:	2300      	movs	r3, #0
 8005b38:	3401      	adds	r4, #1
 8005b3a:	9305      	str	r3, [sp, #20]
 8005b3c:	4619      	mov	r1, r3
 8005b3e:	f04f 0c0a 	mov.w	ip, #10
 8005b42:	4620      	mov	r0, r4
 8005b44:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005b48:	3a30      	subs	r2, #48	@ 0x30
 8005b4a:	2a09      	cmp	r2, #9
 8005b4c:	d903      	bls.n	8005b56 <_svfiprintf_r+0x1a6>
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d0c6      	beq.n	8005ae0 <_svfiprintf_r+0x130>
 8005b52:	9105      	str	r1, [sp, #20]
 8005b54:	e7c4      	b.n	8005ae0 <_svfiprintf_r+0x130>
 8005b56:	fb0c 2101 	mla	r1, ip, r1, r2
 8005b5a:	4604      	mov	r4, r0
 8005b5c:	2301      	movs	r3, #1
 8005b5e:	e7f0      	b.n	8005b42 <_svfiprintf_r+0x192>
 8005b60:	ab03      	add	r3, sp, #12
 8005b62:	9300      	str	r3, [sp, #0]
 8005b64:	462a      	mov	r2, r5
 8005b66:	4b0e      	ldr	r3, [pc, #56]	@ (8005ba0 <_svfiprintf_r+0x1f0>)
 8005b68:	a904      	add	r1, sp, #16
 8005b6a:	4638      	mov	r0, r7
 8005b6c:	f3af 8000 	nop.w
 8005b70:	1c42      	adds	r2, r0, #1
 8005b72:	4606      	mov	r6, r0
 8005b74:	d1d6      	bne.n	8005b24 <_svfiprintf_r+0x174>
 8005b76:	89ab      	ldrh	r3, [r5, #12]
 8005b78:	065b      	lsls	r3, r3, #25
 8005b7a:	f53f af2d 	bmi.w	80059d8 <_svfiprintf_r+0x28>
 8005b7e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005b80:	e72c      	b.n	80059dc <_svfiprintf_r+0x2c>
 8005b82:	ab03      	add	r3, sp, #12
 8005b84:	9300      	str	r3, [sp, #0]
 8005b86:	462a      	mov	r2, r5
 8005b88:	4b05      	ldr	r3, [pc, #20]	@ (8005ba0 <_svfiprintf_r+0x1f0>)
 8005b8a:	a904      	add	r1, sp, #16
 8005b8c:	4638      	mov	r0, r7
 8005b8e:	f000 f9bb 	bl	8005f08 <_printf_i>
 8005b92:	e7ed      	b.n	8005b70 <_svfiprintf_r+0x1c0>
 8005b94:	080091d4 	.word	0x080091d4
 8005b98:	080091de 	.word	0x080091de
 8005b9c:	00000000 	.word	0x00000000
 8005ba0:	080058f9 	.word	0x080058f9
 8005ba4:	080091da 	.word	0x080091da

08005ba8 <__sfputc_r>:
 8005ba8:	6893      	ldr	r3, [r2, #8]
 8005baa:	3b01      	subs	r3, #1
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	b410      	push	{r4}
 8005bb0:	6093      	str	r3, [r2, #8]
 8005bb2:	da08      	bge.n	8005bc6 <__sfputc_r+0x1e>
 8005bb4:	6994      	ldr	r4, [r2, #24]
 8005bb6:	42a3      	cmp	r3, r4
 8005bb8:	db01      	blt.n	8005bbe <__sfputc_r+0x16>
 8005bba:	290a      	cmp	r1, #10
 8005bbc:	d103      	bne.n	8005bc6 <__sfputc_r+0x1e>
 8005bbe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005bc2:	f7ff bd20 	b.w	8005606 <__swbuf_r>
 8005bc6:	6813      	ldr	r3, [r2, #0]
 8005bc8:	1c58      	adds	r0, r3, #1
 8005bca:	6010      	str	r0, [r2, #0]
 8005bcc:	7019      	strb	r1, [r3, #0]
 8005bce:	4608      	mov	r0, r1
 8005bd0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005bd4:	4770      	bx	lr

08005bd6 <__sfputs_r>:
 8005bd6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bd8:	4606      	mov	r6, r0
 8005bda:	460f      	mov	r7, r1
 8005bdc:	4614      	mov	r4, r2
 8005bde:	18d5      	adds	r5, r2, r3
 8005be0:	42ac      	cmp	r4, r5
 8005be2:	d101      	bne.n	8005be8 <__sfputs_r+0x12>
 8005be4:	2000      	movs	r0, #0
 8005be6:	e007      	b.n	8005bf8 <__sfputs_r+0x22>
 8005be8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005bec:	463a      	mov	r2, r7
 8005bee:	4630      	mov	r0, r6
 8005bf0:	f7ff ffda 	bl	8005ba8 <__sfputc_r>
 8005bf4:	1c43      	adds	r3, r0, #1
 8005bf6:	d1f3      	bne.n	8005be0 <__sfputs_r+0xa>
 8005bf8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005bfc <_vfiprintf_r>:
 8005bfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c00:	460d      	mov	r5, r1
 8005c02:	b09d      	sub	sp, #116	@ 0x74
 8005c04:	4614      	mov	r4, r2
 8005c06:	4698      	mov	r8, r3
 8005c08:	4606      	mov	r6, r0
 8005c0a:	b118      	cbz	r0, 8005c14 <_vfiprintf_r+0x18>
 8005c0c:	6a03      	ldr	r3, [r0, #32]
 8005c0e:	b90b      	cbnz	r3, 8005c14 <_vfiprintf_r+0x18>
 8005c10:	f7ff fbf0 	bl	80053f4 <__sinit>
 8005c14:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005c16:	07d9      	lsls	r1, r3, #31
 8005c18:	d405      	bmi.n	8005c26 <_vfiprintf_r+0x2a>
 8005c1a:	89ab      	ldrh	r3, [r5, #12]
 8005c1c:	059a      	lsls	r2, r3, #22
 8005c1e:	d402      	bmi.n	8005c26 <_vfiprintf_r+0x2a>
 8005c20:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005c22:	f7ff fe0e 	bl	8005842 <__retarget_lock_acquire_recursive>
 8005c26:	89ab      	ldrh	r3, [r5, #12]
 8005c28:	071b      	lsls	r3, r3, #28
 8005c2a:	d501      	bpl.n	8005c30 <_vfiprintf_r+0x34>
 8005c2c:	692b      	ldr	r3, [r5, #16]
 8005c2e:	b99b      	cbnz	r3, 8005c58 <_vfiprintf_r+0x5c>
 8005c30:	4629      	mov	r1, r5
 8005c32:	4630      	mov	r0, r6
 8005c34:	f7ff fd26 	bl	8005684 <__swsetup_r>
 8005c38:	b170      	cbz	r0, 8005c58 <_vfiprintf_r+0x5c>
 8005c3a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005c3c:	07dc      	lsls	r4, r3, #31
 8005c3e:	d504      	bpl.n	8005c4a <_vfiprintf_r+0x4e>
 8005c40:	f04f 30ff 	mov.w	r0, #4294967295
 8005c44:	b01d      	add	sp, #116	@ 0x74
 8005c46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c4a:	89ab      	ldrh	r3, [r5, #12]
 8005c4c:	0598      	lsls	r0, r3, #22
 8005c4e:	d4f7      	bmi.n	8005c40 <_vfiprintf_r+0x44>
 8005c50:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005c52:	f7ff fdf7 	bl	8005844 <__retarget_lock_release_recursive>
 8005c56:	e7f3      	b.n	8005c40 <_vfiprintf_r+0x44>
 8005c58:	2300      	movs	r3, #0
 8005c5a:	9309      	str	r3, [sp, #36]	@ 0x24
 8005c5c:	2320      	movs	r3, #32
 8005c5e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005c62:	f8cd 800c 	str.w	r8, [sp, #12]
 8005c66:	2330      	movs	r3, #48	@ 0x30
 8005c68:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8005e18 <_vfiprintf_r+0x21c>
 8005c6c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005c70:	f04f 0901 	mov.w	r9, #1
 8005c74:	4623      	mov	r3, r4
 8005c76:	469a      	mov	sl, r3
 8005c78:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005c7c:	b10a      	cbz	r2, 8005c82 <_vfiprintf_r+0x86>
 8005c7e:	2a25      	cmp	r2, #37	@ 0x25
 8005c80:	d1f9      	bne.n	8005c76 <_vfiprintf_r+0x7a>
 8005c82:	ebba 0b04 	subs.w	fp, sl, r4
 8005c86:	d00b      	beq.n	8005ca0 <_vfiprintf_r+0xa4>
 8005c88:	465b      	mov	r3, fp
 8005c8a:	4622      	mov	r2, r4
 8005c8c:	4629      	mov	r1, r5
 8005c8e:	4630      	mov	r0, r6
 8005c90:	f7ff ffa1 	bl	8005bd6 <__sfputs_r>
 8005c94:	3001      	adds	r0, #1
 8005c96:	f000 80a7 	beq.w	8005de8 <_vfiprintf_r+0x1ec>
 8005c9a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005c9c:	445a      	add	r2, fp
 8005c9e:	9209      	str	r2, [sp, #36]	@ 0x24
 8005ca0:	f89a 3000 	ldrb.w	r3, [sl]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	f000 809f 	beq.w	8005de8 <_vfiprintf_r+0x1ec>
 8005caa:	2300      	movs	r3, #0
 8005cac:	f04f 32ff 	mov.w	r2, #4294967295
 8005cb0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005cb4:	f10a 0a01 	add.w	sl, sl, #1
 8005cb8:	9304      	str	r3, [sp, #16]
 8005cba:	9307      	str	r3, [sp, #28]
 8005cbc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005cc0:	931a      	str	r3, [sp, #104]	@ 0x68
 8005cc2:	4654      	mov	r4, sl
 8005cc4:	2205      	movs	r2, #5
 8005cc6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005cca:	4853      	ldr	r0, [pc, #332]	@ (8005e18 <_vfiprintf_r+0x21c>)
 8005ccc:	f7fa faa0 	bl	8000210 <memchr>
 8005cd0:	9a04      	ldr	r2, [sp, #16]
 8005cd2:	b9d8      	cbnz	r0, 8005d0c <_vfiprintf_r+0x110>
 8005cd4:	06d1      	lsls	r1, r2, #27
 8005cd6:	bf44      	itt	mi
 8005cd8:	2320      	movmi	r3, #32
 8005cda:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005cde:	0713      	lsls	r3, r2, #28
 8005ce0:	bf44      	itt	mi
 8005ce2:	232b      	movmi	r3, #43	@ 0x2b
 8005ce4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005ce8:	f89a 3000 	ldrb.w	r3, [sl]
 8005cec:	2b2a      	cmp	r3, #42	@ 0x2a
 8005cee:	d015      	beq.n	8005d1c <_vfiprintf_r+0x120>
 8005cf0:	9a07      	ldr	r2, [sp, #28]
 8005cf2:	4654      	mov	r4, sl
 8005cf4:	2000      	movs	r0, #0
 8005cf6:	f04f 0c0a 	mov.w	ip, #10
 8005cfa:	4621      	mov	r1, r4
 8005cfc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005d00:	3b30      	subs	r3, #48	@ 0x30
 8005d02:	2b09      	cmp	r3, #9
 8005d04:	d94b      	bls.n	8005d9e <_vfiprintf_r+0x1a2>
 8005d06:	b1b0      	cbz	r0, 8005d36 <_vfiprintf_r+0x13a>
 8005d08:	9207      	str	r2, [sp, #28]
 8005d0a:	e014      	b.n	8005d36 <_vfiprintf_r+0x13a>
 8005d0c:	eba0 0308 	sub.w	r3, r0, r8
 8005d10:	fa09 f303 	lsl.w	r3, r9, r3
 8005d14:	4313      	orrs	r3, r2
 8005d16:	9304      	str	r3, [sp, #16]
 8005d18:	46a2      	mov	sl, r4
 8005d1a:	e7d2      	b.n	8005cc2 <_vfiprintf_r+0xc6>
 8005d1c:	9b03      	ldr	r3, [sp, #12]
 8005d1e:	1d19      	adds	r1, r3, #4
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	9103      	str	r1, [sp, #12]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	bfbb      	ittet	lt
 8005d28:	425b      	neglt	r3, r3
 8005d2a:	f042 0202 	orrlt.w	r2, r2, #2
 8005d2e:	9307      	strge	r3, [sp, #28]
 8005d30:	9307      	strlt	r3, [sp, #28]
 8005d32:	bfb8      	it	lt
 8005d34:	9204      	strlt	r2, [sp, #16]
 8005d36:	7823      	ldrb	r3, [r4, #0]
 8005d38:	2b2e      	cmp	r3, #46	@ 0x2e
 8005d3a:	d10a      	bne.n	8005d52 <_vfiprintf_r+0x156>
 8005d3c:	7863      	ldrb	r3, [r4, #1]
 8005d3e:	2b2a      	cmp	r3, #42	@ 0x2a
 8005d40:	d132      	bne.n	8005da8 <_vfiprintf_r+0x1ac>
 8005d42:	9b03      	ldr	r3, [sp, #12]
 8005d44:	1d1a      	adds	r2, r3, #4
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	9203      	str	r2, [sp, #12]
 8005d4a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005d4e:	3402      	adds	r4, #2
 8005d50:	9305      	str	r3, [sp, #20]
 8005d52:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8005e28 <_vfiprintf_r+0x22c>
 8005d56:	7821      	ldrb	r1, [r4, #0]
 8005d58:	2203      	movs	r2, #3
 8005d5a:	4650      	mov	r0, sl
 8005d5c:	f7fa fa58 	bl	8000210 <memchr>
 8005d60:	b138      	cbz	r0, 8005d72 <_vfiprintf_r+0x176>
 8005d62:	9b04      	ldr	r3, [sp, #16]
 8005d64:	eba0 000a 	sub.w	r0, r0, sl
 8005d68:	2240      	movs	r2, #64	@ 0x40
 8005d6a:	4082      	lsls	r2, r0
 8005d6c:	4313      	orrs	r3, r2
 8005d6e:	3401      	adds	r4, #1
 8005d70:	9304      	str	r3, [sp, #16]
 8005d72:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d76:	4829      	ldr	r0, [pc, #164]	@ (8005e1c <_vfiprintf_r+0x220>)
 8005d78:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005d7c:	2206      	movs	r2, #6
 8005d7e:	f7fa fa47 	bl	8000210 <memchr>
 8005d82:	2800      	cmp	r0, #0
 8005d84:	d03f      	beq.n	8005e06 <_vfiprintf_r+0x20a>
 8005d86:	4b26      	ldr	r3, [pc, #152]	@ (8005e20 <_vfiprintf_r+0x224>)
 8005d88:	bb1b      	cbnz	r3, 8005dd2 <_vfiprintf_r+0x1d6>
 8005d8a:	9b03      	ldr	r3, [sp, #12]
 8005d8c:	3307      	adds	r3, #7
 8005d8e:	f023 0307 	bic.w	r3, r3, #7
 8005d92:	3308      	adds	r3, #8
 8005d94:	9303      	str	r3, [sp, #12]
 8005d96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005d98:	443b      	add	r3, r7
 8005d9a:	9309      	str	r3, [sp, #36]	@ 0x24
 8005d9c:	e76a      	b.n	8005c74 <_vfiprintf_r+0x78>
 8005d9e:	fb0c 3202 	mla	r2, ip, r2, r3
 8005da2:	460c      	mov	r4, r1
 8005da4:	2001      	movs	r0, #1
 8005da6:	e7a8      	b.n	8005cfa <_vfiprintf_r+0xfe>
 8005da8:	2300      	movs	r3, #0
 8005daa:	3401      	adds	r4, #1
 8005dac:	9305      	str	r3, [sp, #20]
 8005dae:	4619      	mov	r1, r3
 8005db0:	f04f 0c0a 	mov.w	ip, #10
 8005db4:	4620      	mov	r0, r4
 8005db6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005dba:	3a30      	subs	r2, #48	@ 0x30
 8005dbc:	2a09      	cmp	r2, #9
 8005dbe:	d903      	bls.n	8005dc8 <_vfiprintf_r+0x1cc>
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d0c6      	beq.n	8005d52 <_vfiprintf_r+0x156>
 8005dc4:	9105      	str	r1, [sp, #20]
 8005dc6:	e7c4      	b.n	8005d52 <_vfiprintf_r+0x156>
 8005dc8:	fb0c 2101 	mla	r1, ip, r1, r2
 8005dcc:	4604      	mov	r4, r0
 8005dce:	2301      	movs	r3, #1
 8005dd0:	e7f0      	b.n	8005db4 <_vfiprintf_r+0x1b8>
 8005dd2:	ab03      	add	r3, sp, #12
 8005dd4:	9300      	str	r3, [sp, #0]
 8005dd6:	462a      	mov	r2, r5
 8005dd8:	4b12      	ldr	r3, [pc, #72]	@ (8005e24 <_vfiprintf_r+0x228>)
 8005dda:	a904      	add	r1, sp, #16
 8005ddc:	4630      	mov	r0, r6
 8005dde:	f3af 8000 	nop.w
 8005de2:	4607      	mov	r7, r0
 8005de4:	1c78      	adds	r0, r7, #1
 8005de6:	d1d6      	bne.n	8005d96 <_vfiprintf_r+0x19a>
 8005de8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005dea:	07d9      	lsls	r1, r3, #31
 8005dec:	d405      	bmi.n	8005dfa <_vfiprintf_r+0x1fe>
 8005dee:	89ab      	ldrh	r3, [r5, #12]
 8005df0:	059a      	lsls	r2, r3, #22
 8005df2:	d402      	bmi.n	8005dfa <_vfiprintf_r+0x1fe>
 8005df4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005df6:	f7ff fd25 	bl	8005844 <__retarget_lock_release_recursive>
 8005dfa:	89ab      	ldrh	r3, [r5, #12]
 8005dfc:	065b      	lsls	r3, r3, #25
 8005dfe:	f53f af1f 	bmi.w	8005c40 <_vfiprintf_r+0x44>
 8005e02:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005e04:	e71e      	b.n	8005c44 <_vfiprintf_r+0x48>
 8005e06:	ab03      	add	r3, sp, #12
 8005e08:	9300      	str	r3, [sp, #0]
 8005e0a:	462a      	mov	r2, r5
 8005e0c:	4b05      	ldr	r3, [pc, #20]	@ (8005e24 <_vfiprintf_r+0x228>)
 8005e0e:	a904      	add	r1, sp, #16
 8005e10:	4630      	mov	r0, r6
 8005e12:	f000 f879 	bl	8005f08 <_printf_i>
 8005e16:	e7e4      	b.n	8005de2 <_vfiprintf_r+0x1e6>
 8005e18:	080091d4 	.word	0x080091d4
 8005e1c:	080091de 	.word	0x080091de
 8005e20:	00000000 	.word	0x00000000
 8005e24:	08005bd7 	.word	0x08005bd7
 8005e28:	080091da 	.word	0x080091da

08005e2c <_printf_common>:
 8005e2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e30:	4616      	mov	r6, r2
 8005e32:	4698      	mov	r8, r3
 8005e34:	688a      	ldr	r2, [r1, #8]
 8005e36:	690b      	ldr	r3, [r1, #16]
 8005e38:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005e3c:	4293      	cmp	r3, r2
 8005e3e:	bfb8      	it	lt
 8005e40:	4613      	movlt	r3, r2
 8005e42:	6033      	str	r3, [r6, #0]
 8005e44:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005e48:	4607      	mov	r7, r0
 8005e4a:	460c      	mov	r4, r1
 8005e4c:	b10a      	cbz	r2, 8005e52 <_printf_common+0x26>
 8005e4e:	3301      	adds	r3, #1
 8005e50:	6033      	str	r3, [r6, #0]
 8005e52:	6823      	ldr	r3, [r4, #0]
 8005e54:	0699      	lsls	r1, r3, #26
 8005e56:	bf42      	ittt	mi
 8005e58:	6833      	ldrmi	r3, [r6, #0]
 8005e5a:	3302      	addmi	r3, #2
 8005e5c:	6033      	strmi	r3, [r6, #0]
 8005e5e:	6825      	ldr	r5, [r4, #0]
 8005e60:	f015 0506 	ands.w	r5, r5, #6
 8005e64:	d106      	bne.n	8005e74 <_printf_common+0x48>
 8005e66:	f104 0a19 	add.w	sl, r4, #25
 8005e6a:	68e3      	ldr	r3, [r4, #12]
 8005e6c:	6832      	ldr	r2, [r6, #0]
 8005e6e:	1a9b      	subs	r3, r3, r2
 8005e70:	42ab      	cmp	r3, r5
 8005e72:	dc26      	bgt.n	8005ec2 <_printf_common+0x96>
 8005e74:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005e78:	6822      	ldr	r2, [r4, #0]
 8005e7a:	3b00      	subs	r3, #0
 8005e7c:	bf18      	it	ne
 8005e7e:	2301      	movne	r3, #1
 8005e80:	0692      	lsls	r2, r2, #26
 8005e82:	d42b      	bmi.n	8005edc <_printf_common+0xb0>
 8005e84:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005e88:	4641      	mov	r1, r8
 8005e8a:	4638      	mov	r0, r7
 8005e8c:	47c8      	blx	r9
 8005e8e:	3001      	adds	r0, #1
 8005e90:	d01e      	beq.n	8005ed0 <_printf_common+0xa4>
 8005e92:	6823      	ldr	r3, [r4, #0]
 8005e94:	6922      	ldr	r2, [r4, #16]
 8005e96:	f003 0306 	and.w	r3, r3, #6
 8005e9a:	2b04      	cmp	r3, #4
 8005e9c:	bf02      	ittt	eq
 8005e9e:	68e5      	ldreq	r5, [r4, #12]
 8005ea0:	6833      	ldreq	r3, [r6, #0]
 8005ea2:	1aed      	subeq	r5, r5, r3
 8005ea4:	68a3      	ldr	r3, [r4, #8]
 8005ea6:	bf0c      	ite	eq
 8005ea8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005eac:	2500      	movne	r5, #0
 8005eae:	4293      	cmp	r3, r2
 8005eb0:	bfc4      	itt	gt
 8005eb2:	1a9b      	subgt	r3, r3, r2
 8005eb4:	18ed      	addgt	r5, r5, r3
 8005eb6:	2600      	movs	r6, #0
 8005eb8:	341a      	adds	r4, #26
 8005eba:	42b5      	cmp	r5, r6
 8005ebc:	d11a      	bne.n	8005ef4 <_printf_common+0xc8>
 8005ebe:	2000      	movs	r0, #0
 8005ec0:	e008      	b.n	8005ed4 <_printf_common+0xa8>
 8005ec2:	2301      	movs	r3, #1
 8005ec4:	4652      	mov	r2, sl
 8005ec6:	4641      	mov	r1, r8
 8005ec8:	4638      	mov	r0, r7
 8005eca:	47c8      	blx	r9
 8005ecc:	3001      	adds	r0, #1
 8005ece:	d103      	bne.n	8005ed8 <_printf_common+0xac>
 8005ed0:	f04f 30ff 	mov.w	r0, #4294967295
 8005ed4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ed8:	3501      	adds	r5, #1
 8005eda:	e7c6      	b.n	8005e6a <_printf_common+0x3e>
 8005edc:	18e1      	adds	r1, r4, r3
 8005ede:	1c5a      	adds	r2, r3, #1
 8005ee0:	2030      	movs	r0, #48	@ 0x30
 8005ee2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005ee6:	4422      	add	r2, r4
 8005ee8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005eec:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005ef0:	3302      	adds	r3, #2
 8005ef2:	e7c7      	b.n	8005e84 <_printf_common+0x58>
 8005ef4:	2301      	movs	r3, #1
 8005ef6:	4622      	mov	r2, r4
 8005ef8:	4641      	mov	r1, r8
 8005efa:	4638      	mov	r0, r7
 8005efc:	47c8      	blx	r9
 8005efe:	3001      	adds	r0, #1
 8005f00:	d0e6      	beq.n	8005ed0 <_printf_common+0xa4>
 8005f02:	3601      	adds	r6, #1
 8005f04:	e7d9      	b.n	8005eba <_printf_common+0x8e>
	...

08005f08 <_printf_i>:
 8005f08:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005f0c:	7e0f      	ldrb	r7, [r1, #24]
 8005f0e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005f10:	2f78      	cmp	r7, #120	@ 0x78
 8005f12:	4691      	mov	r9, r2
 8005f14:	4680      	mov	r8, r0
 8005f16:	460c      	mov	r4, r1
 8005f18:	469a      	mov	sl, r3
 8005f1a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005f1e:	d807      	bhi.n	8005f30 <_printf_i+0x28>
 8005f20:	2f62      	cmp	r7, #98	@ 0x62
 8005f22:	d80a      	bhi.n	8005f3a <_printf_i+0x32>
 8005f24:	2f00      	cmp	r7, #0
 8005f26:	f000 80d2 	beq.w	80060ce <_printf_i+0x1c6>
 8005f2a:	2f58      	cmp	r7, #88	@ 0x58
 8005f2c:	f000 80b9 	beq.w	80060a2 <_printf_i+0x19a>
 8005f30:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005f34:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005f38:	e03a      	b.n	8005fb0 <_printf_i+0xa8>
 8005f3a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005f3e:	2b15      	cmp	r3, #21
 8005f40:	d8f6      	bhi.n	8005f30 <_printf_i+0x28>
 8005f42:	a101      	add	r1, pc, #4	@ (adr r1, 8005f48 <_printf_i+0x40>)
 8005f44:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005f48:	08005fa1 	.word	0x08005fa1
 8005f4c:	08005fb5 	.word	0x08005fb5
 8005f50:	08005f31 	.word	0x08005f31
 8005f54:	08005f31 	.word	0x08005f31
 8005f58:	08005f31 	.word	0x08005f31
 8005f5c:	08005f31 	.word	0x08005f31
 8005f60:	08005fb5 	.word	0x08005fb5
 8005f64:	08005f31 	.word	0x08005f31
 8005f68:	08005f31 	.word	0x08005f31
 8005f6c:	08005f31 	.word	0x08005f31
 8005f70:	08005f31 	.word	0x08005f31
 8005f74:	080060b5 	.word	0x080060b5
 8005f78:	08005fdf 	.word	0x08005fdf
 8005f7c:	0800606f 	.word	0x0800606f
 8005f80:	08005f31 	.word	0x08005f31
 8005f84:	08005f31 	.word	0x08005f31
 8005f88:	080060d7 	.word	0x080060d7
 8005f8c:	08005f31 	.word	0x08005f31
 8005f90:	08005fdf 	.word	0x08005fdf
 8005f94:	08005f31 	.word	0x08005f31
 8005f98:	08005f31 	.word	0x08005f31
 8005f9c:	08006077 	.word	0x08006077
 8005fa0:	6833      	ldr	r3, [r6, #0]
 8005fa2:	1d1a      	adds	r2, r3, #4
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	6032      	str	r2, [r6, #0]
 8005fa8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005fac:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005fb0:	2301      	movs	r3, #1
 8005fb2:	e09d      	b.n	80060f0 <_printf_i+0x1e8>
 8005fb4:	6833      	ldr	r3, [r6, #0]
 8005fb6:	6820      	ldr	r0, [r4, #0]
 8005fb8:	1d19      	adds	r1, r3, #4
 8005fba:	6031      	str	r1, [r6, #0]
 8005fbc:	0606      	lsls	r6, r0, #24
 8005fbe:	d501      	bpl.n	8005fc4 <_printf_i+0xbc>
 8005fc0:	681d      	ldr	r5, [r3, #0]
 8005fc2:	e003      	b.n	8005fcc <_printf_i+0xc4>
 8005fc4:	0645      	lsls	r5, r0, #25
 8005fc6:	d5fb      	bpl.n	8005fc0 <_printf_i+0xb8>
 8005fc8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005fcc:	2d00      	cmp	r5, #0
 8005fce:	da03      	bge.n	8005fd8 <_printf_i+0xd0>
 8005fd0:	232d      	movs	r3, #45	@ 0x2d
 8005fd2:	426d      	negs	r5, r5
 8005fd4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005fd8:	4859      	ldr	r0, [pc, #356]	@ (8006140 <_printf_i+0x238>)
 8005fda:	230a      	movs	r3, #10
 8005fdc:	e011      	b.n	8006002 <_printf_i+0xfa>
 8005fde:	6821      	ldr	r1, [r4, #0]
 8005fe0:	6833      	ldr	r3, [r6, #0]
 8005fe2:	0608      	lsls	r0, r1, #24
 8005fe4:	f853 5b04 	ldr.w	r5, [r3], #4
 8005fe8:	d402      	bmi.n	8005ff0 <_printf_i+0xe8>
 8005fea:	0649      	lsls	r1, r1, #25
 8005fec:	bf48      	it	mi
 8005fee:	b2ad      	uxthmi	r5, r5
 8005ff0:	2f6f      	cmp	r7, #111	@ 0x6f
 8005ff2:	4853      	ldr	r0, [pc, #332]	@ (8006140 <_printf_i+0x238>)
 8005ff4:	6033      	str	r3, [r6, #0]
 8005ff6:	bf14      	ite	ne
 8005ff8:	230a      	movne	r3, #10
 8005ffa:	2308      	moveq	r3, #8
 8005ffc:	2100      	movs	r1, #0
 8005ffe:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006002:	6866      	ldr	r6, [r4, #4]
 8006004:	60a6      	str	r6, [r4, #8]
 8006006:	2e00      	cmp	r6, #0
 8006008:	bfa2      	ittt	ge
 800600a:	6821      	ldrge	r1, [r4, #0]
 800600c:	f021 0104 	bicge.w	r1, r1, #4
 8006010:	6021      	strge	r1, [r4, #0]
 8006012:	b90d      	cbnz	r5, 8006018 <_printf_i+0x110>
 8006014:	2e00      	cmp	r6, #0
 8006016:	d04b      	beq.n	80060b0 <_printf_i+0x1a8>
 8006018:	4616      	mov	r6, r2
 800601a:	fbb5 f1f3 	udiv	r1, r5, r3
 800601e:	fb03 5711 	mls	r7, r3, r1, r5
 8006022:	5dc7      	ldrb	r7, [r0, r7]
 8006024:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006028:	462f      	mov	r7, r5
 800602a:	42bb      	cmp	r3, r7
 800602c:	460d      	mov	r5, r1
 800602e:	d9f4      	bls.n	800601a <_printf_i+0x112>
 8006030:	2b08      	cmp	r3, #8
 8006032:	d10b      	bne.n	800604c <_printf_i+0x144>
 8006034:	6823      	ldr	r3, [r4, #0]
 8006036:	07df      	lsls	r7, r3, #31
 8006038:	d508      	bpl.n	800604c <_printf_i+0x144>
 800603a:	6923      	ldr	r3, [r4, #16]
 800603c:	6861      	ldr	r1, [r4, #4]
 800603e:	4299      	cmp	r1, r3
 8006040:	bfde      	ittt	le
 8006042:	2330      	movle	r3, #48	@ 0x30
 8006044:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006048:	f106 36ff 	addle.w	r6, r6, #4294967295
 800604c:	1b92      	subs	r2, r2, r6
 800604e:	6122      	str	r2, [r4, #16]
 8006050:	f8cd a000 	str.w	sl, [sp]
 8006054:	464b      	mov	r3, r9
 8006056:	aa03      	add	r2, sp, #12
 8006058:	4621      	mov	r1, r4
 800605a:	4640      	mov	r0, r8
 800605c:	f7ff fee6 	bl	8005e2c <_printf_common>
 8006060:	3001      	adds	r0, #1
 8006062:	d14a      	bne.n	80060fa <_printf_i+0x1f2>
 8006064:	f04f 30ff 	mov.w	r0, #4294967295
 8006068:	b004      	add	sp, #16
 800606a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800606e:	6823      	ldr	r3, [r4, #0]
 8006070:	f043 0320 	orr.w	r3, r3, #32
 8006074:	6023      	str	r3, [r4, #0]
 8006076:	4833      	ldr	r0, [pc, #204]	@ (8006144 <_printf_i+0x23c>)
 8006078:	2778      	movs	r7, #120	@ 0x78
 800607a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800607e:	6823      	ldr	r3, [r4, #0]
 8006080:	6831      	ldr	r1, [r6, #0]
 8006082:	061f      	lsls	r7, r3, #24
 8006084:	f851 5b04 	ldr.w	r5, [r1], #4
 8006088:	d402      	bmi.n	8006090 <_printf_i+0x188>
 800608a:	065f      	lsls	r7, r3, #25
 800608c:	bf48      	it	mi
 800608e:	b2ad      	uxthmi	r5, r5
 8006090:	6031      	str	r1, [r6, #0]
 8006092:	07d9      	lsls	r1, r3, #31
 8006094:	bf44      	itt	mi
 8006096:	f043 0320 	orrmi.w	r3, r3, #32
 800609a:	6023      	strmi	r3, [r4, #0]
 800609c:	b11d      	cbz	r5, 80060a6 <_printf_i+0x19e>
 800609e:	2310      	movs	r3, #16
 80060a0:	e7ac      	b.n	8005ffc <_printf_i+0xf4>
 80060a2:	4827      	ldr	r0, [pc, #156]	@ (8006140 <_printf_i+0x238>)
 80060a4:	e7e9      	b.n	800607a <_printf_i+0x172>
 80060a6:	6823      	ldr	r3, [r4, #0]
 80060a8:	f023 0320 	bic.w	r3, r3, #32
 80060ac:	6023      	str	r3, [r4, #0]
 80060ae:	e7f6      	b.n	800609e <_printf_i+0x196>
 80060b0:	4616      	mov	r6, r2
 80060b2:	e7bd      	b.n	8006030 <_printf_i+0x128>
 80060b4:	6833      	ldr	r3, [r6, #0]
 80060b6:	6825      	ldr	r5, [r4, #0]
 80060b8:	6961      	ldr	r1, [r4, #20]
 80060ba:	1d18      	adds	r0, r3, #4
 80060bc:	6030      	str	r0, [r6, #0]
 80060be:	062e      	lsls	r6, r5, #24
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	d501      	bpl.n	80060c8 <_printf_i+0x1c0>
 80060c4:	6019      	str	r1, [r3, #0]
 80060c6:	e002      	b.n	80060ce <_printf_i+0x1c6>
 80060c8:	0668      	lsls	r0, r5, #25
 80060ca:	d5fb      	bpl.n	80060c4 <_printf_i+0x1bc>
 80060cc:	8019      	strh	r1, [r3, #0]
 80060ce:	2300      	movs	r3, #0
 80060d0:	6123      	str	r3, [r4, #16]
 80060d2:	4616      	mov	r6, r2
 80060d4:	e7bc      	b.n	8006050 <_printf_i+0x148>
 80060d6:	6833      	ldr	r3, [r6, #0]
 80060d8:	1d1a      	adds	r2, r3, #4
 80060da:	6032      	str	r2, [r6, #0]
 80060dc:	681e      	ldr	r6, [r3, #0]
 80060de:	6862      	ldr	r2, [r4, #4]
 80060e0:	2100      	movs	r1, #0
 80060e2:	4630      	mov	r0, r6
 80060e4:	f7fa f894 	bl	8000210 <memchr>
 80060e8:	b108      	cbz	r0, 80060ee <_printf_i+0x1e6>
 80060ea:	1b80      	subs	r0, r0, r6
 80060ec:	6060      	str	r0, [r4, #4]
 80060ee:	6863      	ldr	r3, [r4, #4]
 80060f0:	6123      	str	r3, [r4, #16]
 80060f2:	2300      	movs	r3, #0
 80060f4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80060f8:	e7aa      	b.n	8006050 <_printf_i+0x148>
 80060fa:	6923      	ldr	r3, [r4, #16]
 80060fc:	4632      	mov	r2, r6
 80060fe:	4649      	mov	r1, r9
 8006100:	4640      	mov	r0, r8
 8006102:	47d0      	blx	sl
 8006104:	3001      	adds	r0, #1
 8006106:	d0ad      	beq.n	8006064 <_printf_i+0x15c>
 8006108:	6823      	ldr	r3, [r4, #0]
 800610a:	079b      	lsls	r3, r3, #30
 800610c:	d413      	bmi.n	8006136 <_printf_i+0x22e>
 800610e:	68e0      	ldr	r0, [r4, #12]
 8006110:	9b03      	ldr	r3, [sp, #12]
 8006112:	4298      	cmp	r0, r3
 8006114:	bfb8      	it	lt
 8006116:	4618      	movlt	r0, r3
 8006118:	e7a6      	b.n	8006068 <_printf_i+0x160>
 800611a:	2301      	movs	r3, #1
 800611c:	4632      	mov	r2, r6
 800611e:	4649      	mov	r1, r9
 8006120:	4640      	mov	r0, r8
 8006122:	47d0      	blx	sl
 8006124:	3001      	adds	r0, #1
 8006126:	d09d      	beq.n	8006064 <_printf_i+0x15c>
 8006128:	3501      	adds	r5, #1
 800612a:	68e3      	ldr	r3, [r4, #12]
 800612c:	9903      	ldr	r1, [sp, #12]
 800612e:	1a5b      	subs	r3, r3, r1
 8006130:	42ab      	cmp	r3, r5
 8006132:	dcf2      	bgt.n	800611a <_printf_i+0x212>
 8006134:	e7eb      	b.n	800610e <_printf_i+0x206>
 8006136:	2500      	movs	r5, #0
 8006138:	f104 0619 	add.w	r6, r4, #25
 800613c:	e7f5      	b.n	800612a <_printf_i+0x222>
 800613e:	bf00      	nop
 8006140:	080091e5 	.word	0x080091e5
 8006144:	080091f6 	.word	0x080091f6

08006148 <__sflush_r>:
 8006148:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800614c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006150:	0716      	lsls	r6, r2, #28
 8006152:	4605      	mov	r5, r0
 8006154:	460c      	mov	r4, r1
 8006156:	d454      	bmi.n	8006202 <__sflush_r+0xba>
 8006158:	684b      	ldr	r3, [r1, #4]
 800615a:	2b00      	cmp	r3, #0
 800615c:	dc02      	bgt.n	8006164 <__sflush_r+0x1c>
 800615e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006160:	2b00      	cmp	r3, #0
 8006162:	dd48      	ble.n	80061f6 <__sflush_r+0xae>
 8006164:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006166:	2e00      	cmp	r6, #0
 8006168:	d045      	beq.n	80061f6 <__sflush_r+0xae>
 800616a:	2300      	movs	r3, #0
 800616c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006170:	682f      	ldr	r7, [r5, #0]
 8006172:	6a21      	ldr	r1, [r4, #32]
 8006174:	602b      	str	r3, [r5, #0]
 8006176:	d030      	beq.n	80061da <__sflush_r+0x92>
 8006178:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800617a:	89a3      	ldrh	r3, [r4, #12]
 800617c:	0759      	lsls	r1, r3, #29
 800617e:	d505      	bpl.n	800618c <__sflush_r+0x44>
 8006180:	6863      	ldr	r3, [r4, #4]
 8006182:	1ad2      	subs	r2, r2, r3
 8006184:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006186:	b10b      	cbz	r3, 800618c <__sflush_r+0x44>
 8006188:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800618a:	1ad2      	subs	r2, r2, r3
 800618c:	2300      	movs	r3, #0
 800618e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006190:	6a21      	ldr	r1, [r4, #32]
 8006192:	4628      	mov	r0, r5
 8006194:	47b0      	blx	r6
 8006196:	1c43      	adds	r3, r0, #1
 8006198:	89a3      	ldrh	r3, [r4, #12]
 800619a:	d106      	bne.n	80061aa <__sflush_r+0x62>
 800619c:	6829      	ldr	r1, [r5, #0]
 800619e:	291d      	cmp	r1, #29
 80061a0:	d82b      	bhi.n	80061fa <__sflush_r+0xb2>
 80061a2:	4a2a      	ldr	r2, [pc, #168]	@ (800624c <__sflush_r+0x104>)
 80061a4:	410a      	asrs	r2, r1
 80061a6:	07d6      	lsls	r6, r2, #31
 80061a8:	d427      	bmi.n	80061fa <__sflush_r+0xb2>
 80061aa:	2200      	movs	r2, #0
 80061ac:	6062      	str	r2, [r4, #4]
 80061ae:	04d9      	lsls	r1, r3, #19
 80061b0:	6922      	ldr	r2, [r4, #16]
 80061b2:	6022      	str	r2, [r4, #0]
 80061b4:	d504      	bpl.n	80061c0 <__sflush_r+0x78>
 80061b6:	1c42      	adds	r2, r0, #1
 80061b8:	d101      	bne.n	80061be <__sflush_r+0x76>
 80061ba:	682b      	ldr	r3, [r5, #0]
 80061bc:	b903      	cbnz	r3, 80061c0 <__sflush_r+0x78>
 80061be:	6560      	str	r0, [r4, #84]	@ 0x54
 80061c0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80061c2:	602f      	str	r7, [r5, #0]
 80061c4:	b1b9      	cbz	r1, 80061f6 <__sflush_r+0xae>
 80061c6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80061ca:	4299      	cmp	r1, r3
 80061cc:	d002      	beq.n	80061d4 <__sflush_r+0x8c>
 80061ce:	4628      	mov	r0, r5
 80061d0:	f7ff fb48 	bl	8005864 <_free_r>
 80061d4:	2300      	movs	r3, #0
 80061d6:	6363      	str	r3, [r4, #52]	@ 0x34
 80061d8:	e00d      	b.n	80061f6 <__sflush_r+0xae>
 80061da:	2301      	movs	r3, #1
 80061dc:	4628      	mov	r0, r5
 80061de:	47b0      	blx	r6
 80061e0:	4602      	mov	r2, r0
 80061e2:	1c50      	adds	r0, r2, #1
 80061e4:	d1c9      	bne.n	800617a <__sflush_r+0x32>
 80061e6:	682b      	ldr	r3, [r5, #0]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d0c6      	beq.n	800617a <__sflush_r+0x32>
 80061ec:	2b1d      	cmp	r3, #29
 80061ee:	d001      	beq.n	80061f4 <__sflush_r+0xac>
 80061f0:	2b16      	cmp	r3, #22
 80061f2:	d11e      	bne.n	8006232 <__sflush_r+0xea>
 80061f4:	602f      	str	r7, [r5, #0]
 80061f6:	2000      	movs	r0, #0
 80061f8:	e022      	b.n	8006240 <__sflush_r+0xf8>
 80061fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80061fe:	b21b      	sxth	r3, r3
 8006200:	e01b      	b.n	800623a <__sflush_r+0xf2>
 8006202:	690f      	ldr	r7, [r1, #16]
 8006204:	2f00      	cmp	r7, #0
 8006206:	d0f6      	beq.n	80061f6 <__sflush_r+0xae>
 8006208:	0793      	lsls	r3, r2, #30
 800620a:	680e      	ldr	r6, [r1, #0]
 800620c:	bf08      	it	eq
 800620e:	694b      	ldreq	r3, [r1, #20]
 8006210:	600f      	str	r7, [r1, #0]
 8006212:	bf18      	it	ne
 8006214:	2300      	movne	r3, #0
 8006216:	eba6 0807 	sub.w	r8, r6, r7
 800621a:	608b      	str	r3, [r1, #8]
 800621c:	f1b8 0f00 	cmp.w	r8, #0
 8006220:	dde9      	ble.n	80061f6 <__sflush_r+0xae>
 8006222:	6a21      	ldr	r1, [r4, #32]
 8006224:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006226:	4643      	mov	r3, r8
 8006228:	463a      	mov	r2, r7
 800622a:	4628      	mov	r0, r5
 800622c:	47b0      	blx	r6
 800622e:	2800      	cmp	r0, #0
 8006230:	dc08      	bgt.n	8006244 <__sflush_r+0xfc>
 8006232:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006236:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800623a:	81a3      	strh	r3, [r4, #12]
 800623c:	f04f 30ff 	mov.w	r0, #4294967295
 8006240:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006244:	4407      	add	r7, r0
 8006246:	eba8 0800 	sub.w	r8, r8, r0
 800624a:	e7e7      	b.n	800621c <__sflush_r+0xd4>
 800624c:	dfbffffe 	.word	0xdfbffffe

08006250 <_fflush_r>:
 8006250:	b538      	push	{r3, r4, r5, lr}
 8006252:	690b      	ldr	r3, [r1, #16]
 8006254:	4605      	mov	r5, r0
 8006256:	460c      	mov	r4, r1
 8006258:	b913      	cbnz	r3, 8006260 <_fflush_r+0x10>
 800625a:	2500      	movs	r5, #0
 800625c:	4628      	mov	r0, r5
 800625e:	bd38      	pop	{r3, r4, r5, pc}
 8006260:	b118      	cbz	r0, 800626a <_fflush_r+0x1a>
 8006262:	6a03      	ldr	r3, [r0, #32]
 8006264:	b90b      	cbnz	r3, 800626a <_fflush_r+0x1a>
 8006266:	f7ff f8c5 	bl	80053f4 <__sinit>
 800626a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800626e:	2b00      	cmp	r3, #0
 8006270:	d0f3      	beq.n	800625a <_fflush_r+0xa>
 8006272:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006274:	07d0      	lsls	r0, r2, #31
 8006276:	d404      	bmi.n	8006282 <_fflush_r+0x32>
 8006278:	0599      	lsls	r1, r3, #22
 800627a:	d402      	bmi.n	8006282 <_fflush_r+0x32>
 800627c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800627e:	f7ff fae0 	bl	8005842 <__retarget_lock_acquire_recursive>
 8006282:	4628      	mov	r0, r5
 8006284:	4621      	mov	r1, r4
 8006286:	f7ff ff5f 	bl	8006148 <__sflush_r>
 800628a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800628c:	07da      	lsls	r2, r3, #31
 800628e:	4605      	mov	r5, r0
 8006290:	d4e4      	bmi.n	800625c <_fflush_r+0xc>
 8006292:	89a3      	ldrh	r3, [r4, #12]
 8006294:	059b      	lsls	r3, r3, #22
 8006296:	d4e1      	bmi.n	800625c <_fflush_r+0xc>
 8006298:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800629a:	f7ff fad3 	bl	8005844 <__retarget_lock_release_recursive>
 800629e:	e7dd      	b.n	800625c <_fflush_r+0xc>

080062a0 <__swhatbuf_r>:
 80062a0:	b570      	push	{r4, r5, r6, lr}
 80062a2:	460c      	mov	r4, r1
 80062a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80062a8:	2900      	cmp	r1, #0
 80062aa:	b096      	sub	sp, #88	@ 0x58
 80062ac:	4615      	mov	r5, r2
 80062ae:	461e      	mov	r6, r3
 80062b0:	da0d      	bge.n	80062ce <__swhatbuf_r+0x2e>
 80062b2:	89a3      	ldrh	r3, [r4, #12]
 80062b4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80062b8:	f04f 0100 	mov.w	r1, #0
 80062bc:	bf14      	ite	ne
 80062be:	2340      	movne	r3, #64	@ 0x40
 80062c0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80062c4:	2000      	movs	r0, #0
 80062c6:	6031      	str	r1, [r6, #0]
 80062c8:	602b      	str	r3, [r5, #0]
 80062ca:	b016      	add	sp, #88	@ 0x58
 80062cc:	bd70      	pop	{r4, r5, r6, pc}
 80062ce:	466a      	mov	r2, sp
 80062d0:	f000 f862 	bl	8006398 <_fstat_r>
 80062d4:	2800      	cmp	r0, #0
 80062d6:	dbec      	blt.n	80062b2 <__swhatbuf_r+0x12>
 80062d8:	9901      	ldr	r1, [sp, #4]
 80062da:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80062de:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80062e2:	4259      	negs	r1, r3
 80062e4:	4159      	adcs	r1, r3
 80062e6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80062ea:	e7eb      	b.n	80062c4 <__swhatbuf_r+0x24>

080062ec <__smakebuf_r>:
 80062ec:	898b      	ldrh	r3, [r1, #12]
 80062ee:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80062f0:	079d      	lsls	r5, r3, #30
 80062f2:	4606      	mov	r6, r0
 80062f4:	460c      	mov	r4, r1
 80062f6:	d507      	bpl.n	8006308 <__smakebuf_r+0x1c>
 80062f8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80062fc:	6023      	str	r3, [r4, #0]
 80062fe:	6123      	str	r3, [r4, #16]
 8006300:	2301      	movs	r3, #1
 8006302:	6163      	str	r3, [r4, #20]
 8006304:	b003      	add	sp, #12
 8006306:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006308:	ab01      	add	r3, sp, #4
 800630a:	466a      	mov	r2, sp
 800630c:	f7ff ffc8 	bl	80062a0 <__swhatbuf_r>
 8006310:	9f00      	ldr	r7, [sp, #0]
 8006312:	4605      	mov	r5, r0
 8006314:	4639      	mov	r1, r7
 8006316:	4630      	mov	r0, r6
 8006318:	f7fe ff54 	bl	80051c4 <_malloc_r>
 800631c:	b948      	cbnz	r0, 8006332 <__smakebuf_r+0x46>
 800631e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006322:	059a      	lsls	r2, r3, #22
 8006324:	d4ee      	bmi.n	8006304 <__smakebuf_r+0x18>
 8006326:	f023 0303 	bic.w	r3, r3, #3
 800632a:	f043 0302 	orr.w	r3, r3, #2
 800632e:	81a3      	strh	r3, [r4, #12]
 8006330:	e7e2      	b.n	80062f8 <__smakebuf_r+0xc>
 8006332:	89a3      	ldrh	r3, [r4, #12]
 8006334:	6020      	str	r0, [r4, #0]
 8006336:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800633a:	81a3      	strh	r3, [r4, #12]
 800633c:	9b01      	ldr	r3, [sp, #4]
 800633e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006342:	b15b      	cbz	r3, 800635c <__smakebuf_r+0x70>
 8006344:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006348:	4630      	mov	r0, r6
 800634a:	f000 f837 	bl	80063bc <_isatty_r>
 800634e:	b128      	cbz	r0, 800635c <__smakebuf_r+0x70>
 8006350:	89a3      	ldrh	r3, [r4, #12]
 8006352:	f023 0303 	bic.w	r3, r3, #3
 8006356:	f043 0301 	orr.w	r3, r3, #1
 800635a:	81a3      	strh	r3, [r4, #12]
 800635c:	89a3      	ldrh	r3, [r4, #12]
 800635e:	431d      	orrs	r5, r3
 8006360:	81a5      	strh	r5, [r4, #12]
 8006362:	e7cf      	b.n	8006304 <__smakebuf_r+0x18>

08006364 <memmove>:
 8006364:	4288      	cmp	r0, r1
 8006366:	b510      	push	{r4, lr}
 8006368:	eb01 0402 	add.w	r4, r1, r2
 800636c:	d902      	bls.n	8006374 <memmove+0x10>
 800636e:	4284      	cmp	r4, r0
 8006370:	4623      	mov	r3, r4
 8006372:	d807      	bhi.n	8006384 <memmove+0x20>
 8006374:	1e43      	subs	r3, r0, #1
 8006376:	42a1      	cmp	r1, r4
 8006378:	d008      	beq.n	800638c <memmove+0x28>
 800637a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800637e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006382:	e7f8      	b.n	8006376 <memmove+0x12>
 8006384:	4402      	add	r2, r0
 8006386:	4601      	mov	r1, r0
 8006388:	428a      	cmp	r2, r1
 800638a:	d100      	bne.n	800638e <memmove+0x2a>
 800638c:	bd10      	pop	{r4, pc}
 800638e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006392:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006396:	e7f7      	b.n	8006388 <memmove+0x24>

08006398 <_fstat_r>:
 8006398:	b538      	push	{r3, r4, r5, lr}
 800639a:	4d07      	ldr	r5, [pc, #28]	@ (80063b8 <_fstat_r+0x20>)
 800639c:	2300      	movs	r3, #0
 800639e:	4604      	mov	r4, r0
 80063a0:	4608      	mov	r0, r1
 80063a2:	4611      	mov	r1, r2
 80063a4:	602b      	str	r3, [r5, #0]
 80063a6:	f7fa fd78 	bl	8000e9a <_fstat>
 80063aa:	1c43      	adds	r3, r0, #1
 80063ac:	d102      	bne.n	80063b4 <_fstat_r+0x1c>
 80063ae:	682b      	ldr	r3, [r5, #0]
 80063b0:	b103      	cbz	r3, 80063b4 <_fstat_r+0x1c>
 80063b2:	6023      	str	r3, [r4, #0]
 80063b4:	bd38      	pop	{r3, r4, r5, pc}
 80063b6:	bf00      	nop
 80063b8:	200003d8 	.word	0x200003d8

080063bc <_isatty_r>:
 80063bc:	b538      	push	{r3, r4, r5, lr}
 80063be:	4d06      	ldr	r5, [pc, #24]	@ (80063d8 <_isatty_r+0x1c>)
 80063c0:	2300      	movs	r3, #0
 80063c2:	4604      	mov	r4, r0
 80063c4:	4608      	mov	r0, r1
 80063c6:	602b      	str	r3, [r5, #0]
 80063c8:	f7fa fd77 	bl	8000eba <_isatty>
 80063cc:	1c43      	adds	r3, r0, #1
 80063ce:	d102      	bne.n	80063d6 <_isatty_r+0x1a>
 80063d0:	682b      	ldr	r3, [r5, #0]
 80063d2:	b103      	cbz	r3, 80063d6 <_isatty_r+0x1a>
 80063d4:	6023      	str	r3, [r4, #0]
 80063d6:	bd38      	pop	{r3, r4, r5, pc}
 80063d8:	200003d8 	.word	0x200003d8

080063dc <_realloc_r>:
 80063dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80063e0:	4680      	mov	r8, r0
 80063e2:	4615      	mov	r5, r2
 80063e4:	460c      	mov	r4, r1
 80063e6:	b921      	cbnz	r1, 80063f2 <_realloc_r+0x16>
 80063e8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80063ec:	4611      	mov	r1, r2
 80063ee:	f7fe bee9 	b.w	80051c4 <_malloc_r>
 80063f2:	b92a      	cbnz	r2, 8006400 <_realloc_r+0x24>
 80063f4:	f7ff fa36 	bl	8005864 <_free_r>
 80063f8:	2400      	movs	r4, #0
 80063fa:	4620      	mov	r0, r4
 80063fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006400:	f000 f81a 	bl	8006438 <_malloc_usable_size_r>
 8006404:	4285      	cmp	r5, r0
 8006406:	4606      	mov	r6, r0
 8006408:	d802      	bhi.n	8006410 <_realloc_r+0x34>
 800640a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800640e:	d8f4      	bhi.n	80063fa <_realloc_r+0x1e>
 8006410:	4629      	mov	r1, r5
 8006412:	4640      	mov	r0, r8
 8006414:	f7fe fed6 	bl	80051c4 <_malloc_r>
 8006418:	4607      	mov	r7, r0
 800641a:	2800      	cmp	r0, #0
 800641c:	d0ec      	beq.n	80063f8 <_realloc_r+0x1c>
 800641e:	42b5      	cmp	r5, r6
 8006420:	462a      	mov	r2, r5
 8006422:	4621      	mov	r1, r4
 8006424:	bf28      	it	cs
 8006426:	4632      	movcs	r2, r6
 8006428:	f7ff fa0d 	bl	8005846 <memcpy>
 800642c:	4621      	mov	r1, r4
 800642e:	4640      	mov	r0, r8
 8006430:	f7ff fa18 	bl	8005864 <_free_r>
 8006434:	463c      	mov	r4, r7
 8006436:	e7e0      	b.n	80063fa <_realloc_r+0x1e>

08006438 <_malloc_usable_size_r>:
 8006438:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800643c:	1f18      	subs	r0, r3, #4
 800643e:	2b00      	cmp	r3, #0
 8006440:	bfbc      	itt	lt
 8006442:	580b      	ldrlt	r3, [r1, r0]
 8006444:	18c0      	addlt	r0, r0, r3
 8006446:	4770      	bx	lr

08006448 <_init>:
 8006448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800644a:	bf00      	nop
 800644c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800644e:	bc08      	pop	{r3}
 8006450:	469e      	mov	lr, r3
 8006452:	4770      	bx	lr

08006454 <_fini>:
 8006454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006456:	bf00      	nop
 8006458:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800645a:	bc08      	pop	{r3}
 800645c:	469e      	mov	lr, r3
 800645e:	4770      	bx	lr
