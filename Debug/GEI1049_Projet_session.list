
GEI1049_Projet_session.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008994  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000039b8  08008b64  08008b64  00009b64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c51c  0800c51c  0000e09c  2**0
                  CONTENTS
  4 .ARM          00000008  0800c51c  0800c51c  0000d51c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c524  0800c524  0000e09c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c524  0800c524  0000d524  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c528  0800c528  0000d528  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000009c  20000000  0800c52c  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000041c  2000009c  0800c5c8  0000e09c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004b8  0800c5c8  0000e4b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e09c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017520  00000000  00000000  0000e0cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003b1a  00000000  00000000  000255ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014e8  00000000  00000000  00029108  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001019  00000000  00000000  0002a5f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026a3e  00000000  00000000  0002b609  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e8c7  00000000  00000000  00052047  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d8a23  00000000  00000000  0007090e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00149331  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006078  00000000  00000000  00149374  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  0014f3ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000009c 	.word	0x2000009c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08008b4c 	.word	0x08008b4c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000a0 	.word	0x200000a0
 800020c:	08008b4c 	.word	0x08008b4c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	@ 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__aeabi_d2iz>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a54:	d215      	bcs.n	8000a82 <__aeabi_d2iz+0x36>
 8000a56:	d511      	bpl.n	8000a7c <__aeabi_d2iz+0x30>
 8000a58:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d912      	bls.n	8000a88 <__aeabi_d2iz+0x3c>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a72:	fa23 f002 	lsr.w	r0, r3, r2
 8000a76:	bf18      	it	ne
 8000a78:	4240      	negne	r0, r0
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a86:	d105      	bne.n	8000a94 <__aeabi_d2iz+0x48>
 8000a88:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a8c:	bf08      	it	eq
 8000a8e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a92:	4770      	bx	lr
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop

08000a9c <__aeabi_d2uiz>:
 8000a9c:	004a      	lsls	r2, r1, #1
 8000a9e:	d211      	bcs.n	8000ac4 <__aeabi_d2uiz+0x28>
 8000aa0:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000aa4:	d211      	bcs.n	8000aca <__aeabi_d2uiz+0x2e>
 8000aa6:	d50d      	bpl.n	8000ac4 <__aeabi_d2uiz+0x28>
 8000aa8:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000aac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab0:	d40e      	bmi.n	8000ad0 <__aeabi_d2uiz+0x34>
 8000ab2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000abe:	fa23 f002 	lsr.w	r0, r3, r2
 8000ac2:	4770      	bx	lr
 8000ac4:	f04f 0000 	mov.w	r0, #0
 8000ac8:	4770      	bx	lr
 8000aca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ace:	d102      	bne.n	8000ad6 <__aeabi_d2uiz+0x3a>
 8000ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ad4:	4770      	bx	lr
 8000ad6:	f04f 0000 	mov.w	r0, #0
 8000ada:	4770      	bx	lr

08000adc <__aeabi_d2f>:
 8000adc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ae0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ae4:	bf24      	itt	cs
 8000ae6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000aea:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000aee:	d90d      	bls.n	8000b0c <__aeabi_d2f+0x30>
 8000af0:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000af4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000af8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000afc:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b00:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b04:	bf08      	it	eq
 8000b06:	f020 0001 	biceq.w	r0, r0, #1
 8000b0a:	4770      	bx	lr
 8000b0c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b10:	d121      	bne.n	8000b56 <__aeabi_d2f+0x7a>
 8000b12:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b16:	bfbc      	itt	lt
 8000b18:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b1c:	4770      	bxlt	lr
 8000b1e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b22:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b26:	f1c2 0218 	rsb	r2, r2, #24
 8000b2a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b2e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b32:	fa20 f002 	lsr.w	r0, r0, r2
 8000b36:	bf18      	it	ne
 8000b38:	f040 0001 	orrne.w	r0, r0, #1
 8000b3c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b40:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b44:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b48:	ea40 000c 	orr.w	r0, r0, ip
 8000b4c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b50:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b54:	e7cc      	b.n	8000af0 <__aeabi_d2f+0x14>
 8000b56:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b5a:	d107      	bne.n	8000b6c <__aeabi_d2f+0x90>
 8000b5c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b60:	bf1e      	ittt	ne
 8000b62:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b66:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b6a:	4770      	bxne	lr
 8000b6c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b70:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b74:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <__aeabi_uldivmod>:
 8000b7c:	b953      	cbnz	r3, 8000b94 <__aeabi_uldivmod+0x18>
 8000b7e:	b94a      	cbnz	r2, 8000b94 <__aeabi_uldivmod+0x18>
 8000b80:	2900      	cmp	r1, #0
 8000b82:	bf08      	it	eq
 8000b84:	2800      	cmpeq	r0, #0
 8000b86:	bf1c      	itt	ne
 8000b88:	f04f 31ff 	movne.w	r1, #4294967295
 8000b8c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b90:	f000 b96a 	b.w	8000e68 <__aeabi_idiv0>
 8000b94:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b98:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b9c:	f000 f806 	bl	8000bac <__udivmoddi4>
 8000ba0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ba4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ba8:	b004      	add	sp, #16
 8000baa:	4770      	bx	lr

08000bac <__udivmoddi4>:
 8000bac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bb0:	9d08      	ldr	r5, [sp, #32]
 8000bb2:	460c      	mov	r4, r1
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d14e      	bne.n	8000c56 <__udivmoddi4+0xaa>
 8000bb8:	4694      	mov	ip, r2
 8000bba:	458c      	cmp	ip, r1
 8000bbc:	4686      	mov	lr, r0
 8000bbe:	fab2 f282 	clz	r2, r2
 8000bc2:	d962      	bls.n	8000c8a <__udivmoddi4+0xde>
 8000bc4:	b14a      	cbz	r2, 8000bda <__udivmoddi4+0x2e>
 8000bc6:	f1c2 0320 	rsb	r3, r2, #32
 8000bca:	4091      	lsls	r1, r2
 8000bcc:	fa20 f303 	lsr.w	r3, r0, r3
 8000bd0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bd4:	4319      	orrs	r1, r3
 8000bd6:	fa00 fe02 	lsl.w	lr, r0, r2
 8000bda:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bde:	fa1f f68c 	uxth.w	r6, ip
 8000be2:	fbb1 f4f7 	udiv	r4, r1, r7
 8000be6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bea:	fb07 1114 	mls	r1, r7, r4, r1
 8000bee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bf2:	fb04 f106 	mul.w	r1, r4, r6
 8000bf6:	4299      	cmp	r1, r3
 8000bf8:	d90a      	bls.n	8000c10 <__udivmoddi4+0x64>
 8000bfa:	eb1c 0303 	adds.w	r3, ip, r3
 8000bfe:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c02:	f080 8112 	bcs.w	8000e2a <__udivmoddi4+0x27e>
 8000c06:	4299      	cmp	r1, r3
 8000c08:	f240 810f 	bls.w	8000e2a <__udivmoddi4+0x27e>
 8000c0c:	3c02      	subs	r4, #2
 8000c0e:	4463      	add	r3, ip
 8000c10:	1a59      	subs	r1, r3, r1
 8000c12:	fa1f f38e 	uxth.w	r3, lr
 8000c16:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c1a:	fb07 1110 	mls	r1, r7, r0, r1
 8000c1e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c22:	fb00 f606 	mul.w	r6, r0, r6
 8000c26:	429e      	cmp	r6, r3
 8000c28:	d90a      	bls.n	8000c40 <__udivmoddi4+0x94>
 8000c2a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c32:	f080 80fc 	bcs.w	8000e2e <__udivmoddi4+0x282>
 8000c36:	429e      	cmp	r6, r3
 8000c38:	f240 80f9 	bls.w	8000e2e <__udivmoddi4+0x282>
 8000c3c:	4463      	add	r3, ip
 8000c3e:	3802      	subs	r0, #2
 8000c40:	1b9b      	subs	r3, r3, r6
 8000c42:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c46:	2100      	movs	r1, #0
 8000c48:	b11d      	cbz	r5, 8000c52 <__udivmoddi4+0xa6>
 8000c4a:	40d3      	lsrs	r3, r2
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	e9c5 3200 	strd	r3, r2, [r5]
 8000c52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c56:	428b      	cmp	r3, r1
 8000c58:	d905      	bls.n	8000c66 <__udivmoddi4+0xba>
 8000c5a:	b10d      	cbz	r5, 8000c60 <__udivmoddi4+0xb4>
 8000c5c:	e9c5 0100 	strd	r0, r1, [r5]
 8000c60:	2100      	movs	r1, #0
 8000c62:	4608      	mov	r0, r1
 8000c64:	e7f5      	b.n	8000c52 <__udivmoddi4+0xa6>
 8000c66:	fab3 f183 	clz	r1, r3
 8000c6a:	2900      	cmp	r1, #0
 8000c6c:	d146      	bne.n	8000cfc <__udivmoddi4+0x150>
 8000c6e:	42a3      	cmp	r3, r4
 8000c70:	d302      	bcc.n	8000c78 <__udivmoddi4+0xcc>
 8000c72:	4290      	cmp	r0, r2
 8000c74:	f0c0 80f0 	bcc.w	8000e58 <__udivmoddi4+0x2ac>
 8000c78:	1a86      	subs	r6, r0, r2
 8000c7a:	eb64 0303 	sbc.w	r3, r4, r3
 8000c7e:	2001      	movs	r0, #1
 8000c80:	2d00      	cmp	r5, #0
 8000c82:	d0e6      	beq.n	8000c52 <__udivmoddi4+0xa6>
 8000c84:	e9c5 6300 	strd	r6, r3, [r5]
 8000c88:	e7e3      	b.n	8000c52 <__udivmoddi4+0xa6>
 8000c8a:	2a00      	cmp	r2, #0
 8000c8c:	f040 8090 	bne.w	8000db0 <__udivmoddi4+0x204>
 8000c90:	eba1 040c 	sub.w	r4, r1, ip
 8000c94:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c98:	fa1f f78c 	uxth.w	r7, ip
 8000c9c:	2101      	movs	r1, #1
 8000c9e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000ca2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ca6:	fb08 4416 	mls	r4, r8, r6, r4
 8000caa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cae:	fb07 f006 	mul.w	r0, r7, r6
 8000cb2:	4298      	cmp	r0, r3
 8000cb4:	d908      	bls.n	8000cc8 <__udivmoddi4+0x11c>
 8000cb6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cba:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cbe:	d202      	bcs.n	8000cc6 <__udivmoddi4+0x11a>
 8000cc0:	4298      	cmp	r0, r3
 8000cc2:	f200 80cd 	bhi.w	8000e60 <__udivmoddi4+0x2b4>
 8000cc6:	4626      	mov	r6, r4
 8000cc8:	1a1c      	subs	r4, r3, r0
 8000cca:	fa1f f38e 	uxth.w	r3, lr
 8000cce:	fbb4 f0f8 	udiv	r0, r4, r8
 8000cd2:	fb08 4410 	mls	r4, r8, r0, r4
 8000cd6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cda:	fb00 f707 	mul.w	r7, r0, r7
 8000cde:	429f      	cmp	r7, r3
 8000ce0:	d908      	bls.n	8000cf4 <__udivmoddi4+0x148>
 8000ce2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ce6:	f100 34ff 	add.w	r4, r0, #4294967295
 8000cea:	d202      	bcs.n	8000cf2 <__udivmoddi4+0x146>
 8000cec:	429f      	cmp	r7, r3
 8000cee:	f200 80b0 	bhi.w	8000e52 <__udivmoddi4+0x2a6>
 8000cf2:	4620      	mov	r0, r4
 8000cf4:	1bdb      	subs	r3, r3, r7
 8000cf6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cfa:	e7a5      	b.n	8000c48 <__udivmoddi4+0x9c>
 8000cfc:	f1c1 0620 	rsb	r6, r1, #32
 8000d00:	408b      	lsls	r3, r1
 8000d02:	fa22 f706 	lsr.w	r7, r2, r6
 8000d06:	431f      	orrs	r7, r3
 8000d08:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d0c:	fa04 f301 	lsl.w	r3, r4, r1
 8000d10:	ea43 030c 	orr.w	r3, r3, ip
 8000d14:	40f4      	lsrs	r4, r6
 8000d16:	fa00 f801 	lsl.w	r8, r0, r1
 8000d1a:	0c38      	lsrs	r0, r7, #16
 8000d1c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d20:	fbb4 fef0 	udiv	lr, r4, r0
 8000d24:	fa1f fc87 	uxth.w	ip, r7
 8000d28:	fb00 441e 	mls	r4, r0, lr, r4
 8000d2c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d30:	fb0e f90c 	mul.w	r9, lr, ip
 8000d34:	45a1      	cmp	r9, r4
 8000d36:	fa02 f201 	lsl.w	r2, r2, r1
 8000d3a:	d90a      	bls.n	8000d52 <__udivmoddi4+0x1a6>
 8000d3c:	193c      	adds	r4, r7, r4
 8000d3e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d42:	f080 8084 	bcs.w	8000e4e <__udivmoddi4+0x2a2>
 8000d46:	45a1      	cmp	r9, r4
 8000d48:	f240 8081 	bls.w	8000e4e <__udivmoddi4+0x2a2>
 8000d4c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d50:	443c      	add	r4, r7
 8000d52:	eba4 0409 	sub.w	r4, r4, r9
 8000d56:	fa1f f983 	uxth.w	r9, r3
 8000d5a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d5e:	fb00 4413 	mls	r4, r0, r3, r4
 8000d62:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d66:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d6a:	45a4      	cmp	ip, r4
 8000d6c:	d907      	bls.n	8000d7e <__udivmoddi4+0x1d2>
 8000d6e:	193c      	adds	r4, r7, r4
 8000d70:	f103 30ff 	add.w	r0, r3, #4294967295
 8000d74:	d267      	bcs.n	8000e46 <__udivmoddi4+0x29a>
 8000d76:	45a4      	cmp	ip, r4
 8000d78:	d965      	bls.n	8000e46 <__udivmoddi4+0x29a>
 8000d7a:	3b02      	subs	r3, #2
 8000d7c:	443c      	add	r4, r7
 8000d7e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000d82:	fba0 9302 	umull	r9, r3, r0, r2
 8000d86:	eba4 040c 	sub.w	r4, r4, ip
 8000d8a:	429c      	cmp	r4, r3
 8000d8c:	46ce      	mov	lr, r9
 8000d8e:	469c      	mov	ip, r3
 8000d90:	d351      	bcc.n	8000e36 <__udivmoddi4+0x28a>
 8000d92:	d04e      	beq.n	8000e32 <__udivmoddi4+0x286>
 8000d94:	b155      	cbz	r5, 8000dac <__udivmoddi4+0x200>
 8000d96:	ebb8 030e 	subs.w	r3, r8, lr
 8000d9a:	eb64 040c 	sbc.w	r4, r4, ip
 8000d9e:	fa04 f606 	lsl.w	r6, r4, r6
 8000da2:	40cb      	lsrs	r3, r1
 8000da4:	431e      	orrs	r6, r3
 8000da6:	40cc      	lsrs	r4, r1
 8000da8:	e9c5 6400 	strd	r6, r4, [r5]
 8000dac:	2100      	movs	r1, #0
 8000dae:	e750      	b.n	8000c52 <__udivmoddi4+0xa6>
 8000db0:	f1c2 0320 	rsb	r3, r2, #32
 8000db4:	fa20 f103 	lsr.w	r1, r0, r3
 8000db8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dbc:	fa24 f303 	lsr.w	r3, r4, r3
 8000dc0:	4094      	lsls	r4, r2
 8000dc2:	430c      	orrs	r4, r1
 8000dc4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000dc8:	fa00 fe02 	lsl.w	lr, r0, r2
 8000dcc:	fa1f f78c 	uxth.w	r7, ip
 8000dd0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dd4:	fb08 3110 	mls	r1, r8, r0, r3
 8000dd8:	0c23      	lsrs	r3, r4, #16
 8000dda:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dde:	fb00 f107 	mul.w	r1, r0, r7
 8000de2:	4299      	cmp	r1, r3
 8000de4:	d908      	bls.n	8000df8 <__udivmoddi4+0x24c>
 8000de6:	eb1c 0303 	adds.w	r3, ip, r3
 8000dea:	f100 36ff 	add.w	r6, r0, #4294967295
 8000dee:	d22c      	bcs.n	8000e4a <__udivmoddi4+0x29e>
 8000df0:	4299      	cmp	r1, r3
 8000df2:	d92a      	bls.n	8000e4a <__udivmoddi4+0x29e>
 8000df4:	3802      	subs	r0, #2
 8000df6:	4463      	add	r3, ip
 8000df8:	1a5b      	subs	r3, r3, r1
 8000dfa:	b2a4      	uxth	r4, r4
 8000dfc:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e00:	fb08 3311 	mls	r3, r8, r1, r3
 8000e04:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e08:	fb01 f307 	mul.w	r3, r1, r7
 8000e0c:	42a3      	cmp	r3, r4
 8000e0e:	d908      	bls.n	8000e22 <__udivmoddi4+0x276>
 8000e10:	eb1c 0404 	adds.w	r4, ip, r4
 8000e14:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e18:	d213      	bcs.n	8000e42 <__udivmoddi4+0x296>
 8000e1a:	42a3      	cmp	r3, r4
 8000e1c:	d911      	bls.n	8000e42 <__udivmoddi4+0x296>
 8000e1e:	3902      	subs	r1, #2
 8000e20:	4464      	add	r4, ip
 8000e22:	1ae4      	subs	r4, r4, r3
 8000e24:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e28:	e739      	b.n	8000c9e <__udivmoddi4+0xf2>
 8000e2a:	4604      	mov	r4, r0
 8000e2c:	e6f0      	b.n	8000c10 <__udivmoddi4+0x64>
 8000e2e:	4608      	mov	r0, r1
 8000e30:	e706      	b.n	8000c40 <__udivmoddi4+0x94>
 8000e32:	45c8      	cmp	r8, r9
 8000e34:	d2ae      	bcs.n	8000d94 <__udivmoddi4+0x1e8>
 8000e36:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e3a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e3e:	3801      	subs	r0, #1
 8000e40:	e7a8      	b.n	8000d94 <__udivmoddi4+0x1e8>
 8000e42:	4631      	mov	r1, r6
 8000e44:	e7ed      	b.n	8000e22 <__udivmoddi4+0x276>
 8000e46:	4603      	mov	r3, r0
 8000e48:	e799      	b.n	8000d7e <__udivmoddi4+0x1d2>
 8000e4a:	4630      	mov	r0, r6
 8000e4c:	e7d4      	b.n	8000df8 <__udivmoddi4+0x24c>
 8000e4e:	46d6      	mov	lr, sl
 8000e50:	e77f      	b.n	8000d52 <__udivmoddi4+0x1a6>
 8000e52:	4463      	add	r3, ip
 8000e54:	3802      	subs	r0, #2
 8000e56:	e74d      	b.n	8000cf4 <__udivmoddi4+0x148>
 8000e58:	4606      	mov	r6, r0
 8000e5a:	4623      	mov	r3, r4
 8000e5c:	4608      	mov	r0, r1
 8000e5e:	e70f      	b.n	8000c80 <__udivmoddi4+0xd4>
 8000e60:	3e02      	subs	r6, #2
 8000e62:	4463      	add	r3, ip
 8000e64:	e730      	b.n	8000cc8 <__udivmoddi4+0x11c>
 8000e66:	bf00      	nop

08000e68 <__aeabi_idiv0>:
 8000e68:	4770      	bx	lr
 8000e6a:	bf00      	nop

08000e6c <Get_Mode>:
volatile int timer_count = 0;
float turning_time = 0;
int save[4] = {0, 0, 0, 0};
float ratio = 0;

int Get_Mode(int MSB_state, int LSB_state) {
 8000e6c:	b480      	push	{r7}
 8000e6e:	b085      	sub	sp, #20
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
 8000e74:	6039      	str	r1, [r7, #0]
	static const int id_lookup[4] = {MANUAL_MODE, CIRCLE_MODE,  BACK_FORTH_MODE, SQUARE_MODE};
	int bin = ((MSB_state & 1) << 1) | (LSB_state & 1);
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	005b      	lsls	r3, r3, #1
 8000e7a:	f003 0202 	and.w	r2, r3, #2
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	f003 0301 	and.w	r3, r3, #1
 8000e84:	4313      	orrs	r3, r2
 8000e86:	60fb      	str	r3, [r7, #12]
	return id_lookup[bin];
 8000e88:	4a04      	ldr	r2, [pc, #16]	@ (8000e9c <Get_Mode+0x30>)
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8000e90:	4618      	mov	r0, r3
 8000e92:	3714      	adds	r7, #20
 8000e94:	46bd      	mov	sp, r7
 8000e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9a:	4770      	bx	lr
 8000e9c:	08008f50 	.word	0x08008f50

08000ea0 <Get_Mode_String>:

char* Get_Mode_String() {
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b082      	sub	sp, #8
 8000ea4:	af00      	add	r7, sp, #0
	const size_t buffer_size = 8;
 8000ea6:	2308      	movs	r3, #8
 8000ea8:	603b      	str	r3, [r7, #0]
	char* str = malloc(buffer_size);
 8000eaa:	6838      	ldr	r0, [r7, #0]
 8000eac:	f006 fcda 	bl	8007864 <malloc>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	607b      	str	r3, [r7, #4]
	switch(curr_mode) {
 8000eb4:	4b11      	ldr	r3, [pc, #68]	@ (8000efc <Get_Mode_String+0x5c>)
 8000eb6:	781b      	ldrb	r3, [r3, #0]
 8000eb8:	2b03      	cmp	r3, #3
 8000eba:	d817      	bhi.n	8000eec <Get_Mode_String+0x4c>
 8000ebc:	a201      	add	r2, pc, #4	@ (adr r2, 8000ec4 <Get_Mode_String+0x24>)
 8000ebe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ec2:	bf00      	nop
 8000ec4:	08000ed5 	.word	0x08000ed5
 8000ec8:	08000edb 	.word	0x08000edb
 8000ecc:	08000ee1 	.word	0x08000ee1
 8000ed0:	08000ee7 	.word	0x08000ee7
		case MANUAL_MODE:
			str = "MANUAL";
 8000ed4:	4b0a      	ldr	r3, [pc, #40]	@ (8000f00 <Get_Mode_String+0x60>)
 8000ed6:	607b      	str	r3, [r7, #4]
			break;
 8000ed8:	e00b      	b.n	8000ef2 <Get_Mode_String+0x52>
		case CIRCLE_MODE:
			str = "CIRCLE";
 8000eda:	4b0a      	ldr	r3, [pc, #40]	@ (8000f04 <Get_Mode_String+0x64>)
 8000edc:	607b      	str	r3, [r7, #4]
			break;
 8000ede:	e008      	b.n	8000ef2 <Get_Mode_String+0x52>
		case BACK_FORTH_MODE:
			str = "LINE";
 8000ee0:	4b09      	ldr	r3, [pc, #36]	@ (8000f08 <Get_Mode_String+0x68>)
 8000ee2:	607b      	str	r3, [r7, #4]
			break;
 8000ee4:	e005      	b.n	8000ef2 <Get_Mode_String+0x52>
		case SQUARE_MODE:
			str = "SQUARE";
 8000ee6:	4b09      	ldr	r3, [pc, #36]	@ (8000f0c <Get_Mode_String+0x6c>)
 8000ee8:	607b      	str	r3, [r7, #4]
			break;
 8000eea:	e002      	b.n	8000ef2 <Get_Mode_String+0x52>
		default:
			str = "ERROR";
 8000eec:	4b08      	ldr	r3, [pc, #32]	@ (8000f10 <Get_Mode_String+0x70>)
 8000eee:	607b      	str	r3, [r7, #4]
			break;
 8000ef0:	bf00      	nop
	}
	return str;
 8000ef2:	687b      	ldr	r3, [r7, #4]
}
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	3708      	adds	r7, #8
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	200000ba 	.word	0x200000ba
 8000f00:	08008b64 	.word	0x08008b64
 8000f04:	08008b6c 	.word	0x08008b6c
 8000f08:	08008b74 	.word	0x08008b74
 8000f0c:	08008b7c 	.word	0x08008b7c
 8000f10:	08008b84 	.word	0x08008b84
 8000f14:	00000000 	.word	0x00000000

08000f18 <Auto_Angle>:

void Auto_Angle(float value, TIM_HandleTypeDef* htim3) {
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b082      	sub	sp, #8
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	ed87 0a01 	vstr	s0, [r7, #4]
 8000f22:	6038      	str	r0, [r7, #0]
	// Initial setup
	if(timer_count == 0) {
 8000f24:	4b3a      	ldr	r3, [pc, #232]	@ (8001010 <Auto_Angle+0xf8>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d14b      	bne.n	8000fc4 <Auto_Angle+0xac>
		LCD_Manuel(0);
 8000f2c:	2000      	movs	r0, #0
 8000f2e:	f001 fe31 	bl	8002b94 <LCD_Manuel>
		LCD_Mode();
 8000f32:	f001 fe7d 	bl	8002c30 <LCD_Mode>

		// Calculate the duration for the turn
		turning_time = fabs(value) * TRACK_WIDTH;
 8000f36:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f3a:	eef0 7ae7 	vabs.f32	s15, s15
 8000f3e:	ed9f 7a35 	vldr	s14, [pc, #212]	@ 8001014 <Auto_Angle+0xfc>
 8000f42:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f46:	4b34      	ldr	r3, [pc, #208]	@ (8001018 <Auto_Angle+0x100>)
 8000f48:	edc3 7a00 	vstr	s15, [r3]

		// Determine direction of turn
		if (value > 0) {
 8000f4c:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f50:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000f54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f58:	dd18      	ble.n	8000f8c <Auto_Angle+0x74>
			turning_time /= (360.0 * CLOCKWISE_FACTOR);
 8000f5a:	4b2f      	ldr	r3, [pc, #188]	@ (8001018 <Auto_Angle+0x100>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f7ff fb0a 	bl	8000578 <__aeabi_f2d>
 8000f64:	a328      	add	r3, pc, #160	@ (adr r3, 8001008 <Auto_Angle+0xf0>)
 8000f66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f6a:	f7ff fc87 	bl	800087c <__aeabi_ddiv>
 8000f6e:	4602      	mov	r2, r0
 8000f70:	460b      	mov	r3, r1
 8000f72:	4610      	mov	r0, r2
 8000f74:	4619      	mov	r1, r3
 8000f76:	f7ff fdb1 	bl	8000adc <__aeabi_d2f>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	4a26      	ldr	r2, [pc, #152]	@ (8001018 <Auto_Angle+0x100>)
 8000f7e:	6013      	str	r3, [r2, #0]
			Droite(BASE_SPEED, htim3);
 8000f80:	6839      	ldr	r1, [r7, #0]
 8000f82:	f44f 70e1 	mov.w	r0, #450	@ 0x1c2
 8000f86:	f000 fb5f 	bl	8001648 <Droite>
 8000f8a:	e00e      	b.n	8000faa <Auto_Angle+0x92>
		}
		else {
			turning_time /= (360.0 * COUNTER_CLW_FACTOR);
 8000f8c:	4b22      	ldr	r3, [pc, #136]	@ (8001018 <Auto_Angle+0x100>)
 8000f8e:	ed93 7a00 	vldr	s14, [r3]
 8000f92:	eddf 6a22 	vldr	s13, [pc, #136]	@ 800101c <Auto_Angle+0x104>
 8000f96:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f9a:	4b1f      	ldr	r3, [pc, #124]	@ (8001018 <Auto_Angle+0x100>)
 8000f9c:	edc3 7a00 	vstr	s15, [r3]
			Gauche(BASE_SPEED, htim3);
 8000fa0:	6839      	ldr	r1, [r7, #0]
 8000fa2:	f44f 70e1 	mov.w	r0, #450	@ 0x1c2
 8000fa6:	f000 fbaf 	bl	8001708 <Gauche>
		}

		// Convert turning time in µs
		turning_time *= 1e6;
 8000faa:	4b1b      	ldr	r3, [pc, #108]	@ (8001018 <Auto_Angle+0x100>)
 8000fac:	edd3 7a00 	vldr	s15, [r3]
 8000fb0:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 8001020 <Auto_Angle+0x108>
 8000fb4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000fb8:	4b17      	ldr	r3, [pc, #92]	@ (8001018 <Auto_Angle+0x100>)
 8000fba:	edc3 7a00 	vstr	s15, [r3]

		// Start timer
	    HAL_TIM_Base_Start_IT(&htim7);
 8000fbe:	4819      	ldr	r0, [pc, #100]	@ (8001024 <Auto_Angle+0x10c>)
 8000fc0:	f004 fc30 	bl	8005824 <HAL_TIM_Base_Start_IT>
	}

    // Stop when finished
	if(timer_count > (int)turning_time) {
 8000fc4:	4b14      	ldr	r3, [pc, #80]	@ (8001018 <Auto_Angle+0x100>)
 8000fc6:	edd3 7a00 	vldr	s15, [r3]
 8000fca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000fce:	ee17 2a90 	vmov	r2, s15
 8000fd2:	4b0f      	ldr	r3, [pc, #60]	@ (8001010 <Auto_Angle+0xf8>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	429a      	cmp	r2, r3
 8000fd8:	da0f      	bge.n	8000ffa <Auto_Angle+0xe2>

		// Stop timer
		HAL_TIM_Base_Stop_IT(&htim7);
 8000fda:	4812      	ldr	r0, [pc, #72]	@ (8001024 <Auto_Angle+0x10c>)
 8000fdc:	f004 fc92 	bl	8005904 <HAL_TIM_Base_Stop_IT>

		// Stop the motors
		Stop(htim3);
 8000fe0:	6838      	ldr	r0, [r7, #0]
 8000fe2:	f000 fc51 	bl	8001888 <Stop>

		// Reset temporal counter
		timer_count = 0;
 8000fe6:	4b0a      	ldr	r3, [pc, #40]	@ (8001010 <Auto_Angle+0xf8>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	601a      	str	r2, [r3, #0]

		// Ready for next step
		curr_step++;
 8000fec:	4b0e      	ldr	r3, [pc, #56]	@ (8001028 <Auto_Angle+0x110>)
 8000fee:	781b      	ldrb	r3, [r3, #0]
 8000ff0:	3301      	adds	r3, #1
 8000ff2:	b2da      	uxtb	r2, r3
 8000ff4:	4b0c      	ldr	r3, [pc, #48]	@ (8001028 <Auto_Angle+0x110>)
 8000ff6:	701a      	strb	r2, [r3, #0]
	}

	return;
 8000ff8:	bf00      	nop
 8000ffa:	bf00      	nop
}
 8000ffc:	3708      	adds	r7, #8
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	f3af 8000 	nop.w
 8001008:	28f5c290 	.word	0x28f5c290
 800100c:	40d7831c 	.word	0x40d7831c
 8001010:	200000d0 	.word	0x200000d0
 8001014:	43880000 	.word	0x43880000
 8001018:	200000d4 	.word	0x200000d4
 800101c:	46ab9000 	.word	0x46ab9000
 8001020:	49742400 	.word	0x49742400
 8001024:	200002b8 	.word	0x200002b8
 8001028:	20000000 	.word	0x20000000
 800102c:	00000000 	.word	0x00000000

08001030 <Auto_Line>:

void Auto_Line(int dist, int min_speed, int max_speed, TIM_HandleTypeDef* htim3) {
 8001030:	b580      	push	{r7, lr}
 8001032:	b088      	sub	sp, #32
 8001034:	af00      	add	r7, sp, #0
 8001036:	60f8      	str	r0, [r7, #12]
 8001038:	60b9      	str	r1, [r7, #8]
 800103a:	607a      	str	r2, [r7, #4]
 800103c:	603b      	str	r3, [r7, #0]
    // Constants
    const float accel_fraction = 0.4; // 40% of total time for acceleration
 800103e:	4b70      	ldr	r3, [pc, #448]	@ (8001200 <Auto_Line+0x1d0>)
 8001040:	61fb      	str	r3, [r7, #28]
    const float decel_fraction = 0.4; // 40% of total time for deceleration
 8001042:	4b6f      	ldr	r3, [pc, #444]	@ (8001200 <Auto_Line+0x1d0>)
 8001044:	61bb      	str	r3, [r7, #24]

    // Initial setup
    if (timer_count == 0) {
 8001046:	4b6f      	ldr	r3, [pc, #444]	@ (8001204 <Auto_Line+0x1d4>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	2b00      	cmp	r3, #0
 800104c:	d16f      	bne.n	800112e <Auto_Line+0xfe>
    	LCD_Manuel(0);
 800104e:	2000      	movs	r0, #0
 8001050:	f001 fda0 	bl	8002b94 <LCD_Manuel>
    	LCD_Mode();
 8001054:	f001 fdec 	bl	8002c30 <LCD_Mode>

    	// Calculate total pulses required
    	float total_pulses = dist / TRACK_RESOLUTION;
 8001058:	68f8      	ldr	r0, [r7, #12]
 800105a:	f7ff fa7b 	bl	8000554 <__aeabi_i2d>
 800105e:	a364      	add	r3, pc, #400	@ (adr r3, 80011f0 <Auto_Line+0x1c0>)
 8001060:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001064:	f7ff fc0a 	bl	800087c <__aeabi_ddiv>
 8001068:	4602      	mov	r2, r0
 800106a:	460b      	mov	r3, r1
 800106c:	4610      	mov	r0, r2
 800106e:	4619      	mov	r1, r3
 8001070:	f7ff fd34 	bl	8000adc <__aeabi_d2f>
 8001074:	4603      	mov	r3, r0
 8001076:	617b      	str	r3, [r7, #20]

        // Calculate total time
        turning_time = (min_speed + max_speed) / 2.0;
 8001078:	68ba      	ldr	r2, [r7, #8]
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	4413      	add	r3, r2
 800107e:	4618      	mov	r0, r3
 8001080:	f7ff fa68 	bl	8000554 <__aeabi_i2d>
 8001084:	f04f 0200 	mov.w	r2, #0
 8001088:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800108c:	f7ff fbf6 	bl	800087c <__aeabi_ddiv>
 8001090:	4602      	mov	r2, r0
 8001092:	460b      	mov	r3, r1
 8001094:	4610      	mov	r0, r2
 8001096:	4619      	mov	r1, r3
 8001098:	f7ff fd20 	bl	8000adc <__aeabi_d2f>
 800109c:	4603      	mov	r3, r0
 800109e:	4a5a      	ldr	r2, [pc, #360]	@ (8001208 <Auto_Line+0x1d8>)
 80010a0:	6013      	str	r3, [r2, #0]
        total_time = (int)((total_pulses / turning_time) * 1e7);
 80010a2:	4b59      	ldr	r3, [pc, #356]	@ (8001208 <Auto_Line+0x1d8>)
 80010a4:	edd3 7a00 	vldr	s15, [r3]
 80010a8:	ed97 7a05 	vldr	s14, [r7, #20]
 80010ac:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80010b0:	ee16 0a90 	vmov	r0, s13
 80010b4:	f7ff fa60 	bl	8000578 <__aeabi_f2d>
 80010b8:	a34f      	add	r3, pc, #316	@ (adr r3, 80011f8 <Auto_Line+0x1c8>)
 80010ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010be:	f7ff fab3 	bl	8000628 <__aeabi_dmul>
 80010c2:	4602      	mov	r2, r0
 80010c4:	460b      	mov	r3, r1
 80010c6:	4610      	mov	r0, r2
 80010c8:	4619      	mov	r1, r3
 80010ca:	f7ff fcbf 	bl	8000a4c <__aeabi_d2iz>
 80010ce:	4603      	mov	r3, r0
 80010d0:	4a4e      	ldr	r2, [pc, #312]	@ (800120c <Auto_Line+0x1dc>)
 80010d2:	6013      	str	r3, [r2, #0]

        // Calculate time for each phase
        accel_time = (int)(total_time * accel_fraction);
 80010d4:	4b4d      	ldr	r3, [pc, #308]	@ (800120c <Auto_Line+0x1dc>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	ee07 3a90 	vmov	s15, r3
 80010dc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80010e0:	edd7 7a07 	vldr	s15, [r7, #28]
 80010e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010e8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80010ec:	ee17 2a90 	vmov	r2, s15
 80010f0:	4b47      	ldr	r3, [pc, #284]	@ (8001210 <Auto_Line+0x1e0>)
 80010f2:	601a      	str	r2, [r3, #0]
        decel_time = (int)(total_time * decel_fraction);
 80010f4:	4b45      	ldr	r3, [pc, #276]	@ (800120c <Auto_Line+0x1dc>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	ee07 3a90 	vmov	s15, r3
 80010fc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001100:	edd7 7a06 	vldr	s15, [r7, #24]
 8001104:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001108:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800110c:	ee17 2a90 	vmov	r2, s15
 8001110:	4b40      	ldr	r3, [pc, #256]	@ (8001214 <Auto_Line+0x1e4>)
 8001112:	601a      	str	r2, [r3, #0]
        mid_time = total_time - accel_time - decel_time;
 8001114:	4b3d      	ldr	r3, [pc, #244]	@ (800120c <Auto_Line+0x1dc>)
 8001116:	681a      	ldr	r2, [r3, #0]
 8001118:	4b3d      	ldr	r3, [pc, #244]	@ (8001210 <Auto_Line+0x1e0>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	1ad2      	subs	r2, r2, r3
 800111e:	4b3d      	ldr	r3, [pc, #244]	@ (8001214 <Auto_Line+0x1e4>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	1ad3      	subs	r3, r2, r3
 8001124:	4a3c      	ldr	r2, [pc, #240]	@ (8001218 <Auto_Line+0x1e8>)
 8001126:	6013      	str	r3, [r2, #0]

        // Start timer
        HAL_TIM_Base_Start_IT(&htim7);
 8001128:	483c      	ldr	r0, [pc, #240]	@ (800121c <Auto_Line+0x1ec>)
 800112a:	f004 fb7b 	bl	8005824 <HAL_TIM_Base_Start_IT>
    }

    // Acceleration phase
    if (timer_count < accel_time) {
 800112e:	4b35      	ldr	r3, [pc, #212]	@ (8001204 <Auto_Line+0x1d4>)
 8001130:	681a      	ldr	r2, [r3, #0]
 8001132:	4b37      	ldr	r3, [pc, #220]	@ (8001210 <Auto_Line+0x1e0>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	429a      	cmp	r2, r3
 8001138:	da0f      	bge.n	800115a <Auto_Line+0x12a>
        current_speed = min_speed + (max_speed - min_speed) * timer_count / accel_time;
 800113a:	687a      	ldr	r2, [r7, #4]
 800113c:	68bb      	ldr	r3, [r7, #8]
 800113e:	1ad3      	subs	r3, r2, r3
 8001140:	4a30      	ldr	r2, [pc, #192]	@ (8001204 <Auto_Line+0x1d4>)
 8001142:	6812      	ldr	r2, [r2, #0]
 8001144:	fb03 f202 	mul.w	r2, r3, r2
 8001148:	4b31      	ldr	r3, [pc, #196]	@ (8001210 <Auto_Line+0x1e0>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	fb92 f2f3 	sdiv	r2, r2, r3
 8001150:	68bb      	ldr	r3, [r7, #8]
 8001152:	4413      	add	r3, r2
 8001154:	4a32      	ldr	r2, [pc, #200]	@ (8001220 <Auto_Line+0x1f0>)
 8001156:	6013      	str	r3, [r2, #0]
 8001158:	e03a      	b.n	80011d0 <Auto_Line+0x1a0>
    }

    // Constant speed phase
    else if (timer_count < accel_time + mid_time) {
 800115a:	4b2d      	ldr	r3, [pc, #180]	@ (8001210 <Auto_Line+0x1e0>)
 800115c:	681a      	ldr	r2, [r3, #0]
 800115e:	4b2e      	ldr	r3, [pc, #184]	@ (8001218 <Auto_Line+0x1e8>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	441a      	add	r2, r3
 8001164:	4b27      	ldr	r3, [pc, #156]	@ (8001204 <Auto_Line+0x1d4>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	429a      	cmp	r2, r3
 800116a:	dd03      	ble.n	8001174 <Auto_Line+0x144>
        current_speed = max_speed;
 800116c:	4a2c      	ldr	r2, [pc, #176]	@ (8001220 <Auto_Line+0x1f0>)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	6013      	str	r3, [r2, #0]
 8001172:	e02d      	b.n	80011d0 <Auto_Line+0x1a0>
    }

    // Deceleration phase
    else if (timer_count < total_time) {
 8001174:	4b23      	ldr	r3, [pc, #140]	@ (8001204 <Auto_Line+0x1d4>)
 8001176:	681a      	ldr	r2, [r3, #0]
 8001178:	4b24      	ldr	r3, [pc, #144]	@ (800120c <Auto_Line+0x1dc>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	429a      	cmp	r2, r3
 800117e:	da17      	bge.n	80011b0 <Auto_Line+0x180>
        int decel_time_elapsed = timer_count - (accel_time + mid_time);
 8001180:	4b20      	ldr	r3, [pc, #128]	@ (8001204 <Auto_Line+0x1d4>)
 8001182:	681a      	ldr	r2, [r3, #0]
 8001184:	4b22      	ldr	r3, [pc, #136]	@ (8001210 <Auto_Line+0x1e0>)
 8001186:	6819      	ldr	r1, [r3, #0]
 8001188:	4b23      	ldr	r3, [pc, #140]	@ (8001218 <Auto_Line+0x1e8>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	440b      	add	r3, r1
 800118e:	1ad3      	subs	r3, r2, r3
 8001190:	613b      	str	r3, [r7, #16]
        current_speed = max_speed - (max_speed - min_speed) * decel_time_elapsed / decel_time;
 8001192:	687a      	ldr	r2, [r7, #4]
 8001194:	68bb      	ldr	r3, [r7, #8]
 8001196:	1ad3      	subs	r3, r2, r3
 8001198:	693a      	ldr	r2, [r7, #16]
 800119a:	fb03 f202 	mul.w	r2, r3, r2
 800119e:	4b1d      	ldr	r3, [pc, #116]	@ (8001214 <Auto_Line+0x1e4>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	fb92 f3f3 	sdiv	r3, r2, r3
 80011a6:	687a      	ldr	r2, [r7, #4]
 80011a8:	1ad3      	subs	r3, r2, r3
 80011aa:	4a1d      	ldr	r2, [pc, #116]	@ (8001220 <Auto_Line+0x1f0>)
 80011ac:	6013      	str	r3, [r2, #0]
 80011ae:	e00f      	b.n	80011d0 <Auto_Line+0x1a0>
    }

    // Stop when finished
    else {
        // Stop timer
        HAL_TIM_Base_Stop_IT(&htim7);
 80011b0:	481a      	ldr	r0, [pc, #104]	@ (800121c <Auto_Line+0x1ec>)
 80011b2:	f004 fba7 	bl	8005904 <HAL_TIM_Base_Stop_IT>

        // Stop the motors
        Stop(htim3);
 80011b6:	6838      	ldr	r0, [r7, #0]
 80011b8:	f000 fb66 	bl	8001888 <Stop>

        // Reset temporal counter
        timer_count = 0;
 80011bc:	4b11      	ldr	r3, [pc, #68]	@ (8001204 <Auto_Line+0x1d4>)
 80011be:	2200      	movs	r2, #0
 80011c0:	601a      	str	r2, [r3, #0]

        // Ready for next step
        curr_step++;
 80011c2:	4b18      	ldr	r3, [pc, #96]	@ (8001224 <Auto_Line+0x1f4>)
 80011c4:	781b      	ldrb	r3, [r3, #0]
 80011c6:	3301      	adds	r3, #1
 80011c8:	b2da      	uxtb	r2, r3
 80011ca:	4b16      	ldr	r3, [pc, #88]	@ (8001224 <Auto_Line+0x1f4>)
 80011cc:	701a      	strb	r2, [r3, #0]

        // Exit
        return;
 80011ce:	e00a      	b.n	80011e6 <Auto_Line+0x1b6>
    }

    // Adjust speed every iteration
    if(!pause)
 80011d0:	4b15      	ldr	r3, [pc, #84]	@ (8001228 <Auto_Line+0x1f8>)
 80011d2:	781b      	ldrb	r3, [r3, #0]
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d105      	bne.n	80011e4 <Auto_Line+0x1b4>
    	Avancer(current_speed, htim3);
 80011d8:	4b11      	ldr	r3, [pc, #68]	@ (8001220 <Auto_Line+0x1f0>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	6839      	ldr	r1, [r7, #0]
 80011de:	4618      	mov	r0, r3
 80011e0:	f000 f9d2 	bl	8001588 <Avancer>

    return;
 80011e4:	bf00      	nop
}
 80011e6:	3720      	adds	r7, #32
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	f3af 8000 	nop.w
 80011f0:	e353f7cf 	.word	0xe353f7cf
 80011f4:	40129ba5 	.word	0x40129ba5
 80011f8:	00000000 	.word	0x00000000
 80011fc:	416312d0 	.word	0x416312d0
 8001200:	3ecccccd 	.word	0x3ecccccd
 8001204:	200000d0 	.word	0x200000d0
 8001208:	200000d4 	.word	0x200000d4
 800120c:	200000bc 	.word	0x200000bc
 8001210:	200000c0 	.word	0x200000c0
 8001214:	200000c4 	.word	0x200000c4
 8001218:	200000c8 	.word	0x200000c8
 800121c:	200002b8 	.word	0x200002b8
 8001220:	200000cc 	.word	0x200000cc
 8001224:	20000000 	.word	0x20000000
 8001228:	200000b8 	.word	0x200000b8
 800122c:	00000000 	.word	0x00000000

08001230 <Auto_Circle>:


void Auto_Circle(TIM_HandleTypeDef* htim3) {
 8001230:	b580      	push	{r7, lr}
 8001232:	b084      	sub	sp, #16
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
	// Initial setup
	if(timer_count == 0) {
 8001238:	4b43      	ldr	r3, [pc, #268]	@ (8001348 <Auto_Circle+0x118>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	2b00      	cmp	r3, #0
 800123e:	d15c      	bne.n	80012fa <Auto_Circle+0xca>
		LCD_Manuel(0);
 8001240:	2000      	movs	r0, #0
 8001242:	f001 fca7 	bl	8002b94 <LCD_Manuel>
		LCD_Mode();
 8001246:	f001 fcf3 	bl	8002c30 <LCD_Mode>

		// Calculate total outer wheel distance
		float outer_circumference = (PI*DISTANCE) / TRACK_RESOLUTION;//785
 800124a:	4b40      	ldr	r3, [pc, #256]	@ (800134c <Auto_Circle+0x11c>)
 800124c:	60fb      	str	r3, [r7, #12]
		float inner_circumference = outer_circumference - TRACK_WIDTH;//513
 800124e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001252:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 8001350 <Auto_Circle+0x120>
 8001256:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800125a:	edc7 7a02 	vstr	s15, [r7, #8]

		// Calculate total time
		total_time = (int)((outer_circumference / BASE_SPEED) * 1e7);//17.4s
 800125e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001262:	ed9f 7a3c 	vldr	s14, [pc, #240]	@ 8001354 <Auto_Circle+0x124>
 8001266:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800126a:	ee16 0a90 	vmov	r0, s13
 800126e:	f7ff f983 	bl	8000578 <__aeabi_f2d>
 8001272:	a331      	add	r3, pc, #196	@ (adr r3, 8001338 <Auto_Circle+0x108>)
 8001274:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001278:	f7ff f9d6 	bl	8000628 <__aeabi_dmul>
 800127c:	4602      	mov	r2, r0
 800127e:	460b      	mov	r3, r1
 8001280:	4610      	mov	r0, r2
 8001282:	4619      	mov	r1, r3
 8001284:	f7ff fbe2 	bl	8000a4c <__aeabi_d2iz>
 8001288:	4603      	mov	r3, r0
 800128a:	4a33      	ldr	r2, [pc, #204]	@ (8001358 <Auto_Circle+0x128>)
 800128c:	6013      	str	r3, [r2, #0]

		// Calculate wheel inner wheel speed
		ratio = 0.9 * (inner_circumference / outer_circumference);//0.588
 800128e:	ed97 7a02 	vldr	s14, [r7, #8]
 8001292:	edd7 7a03 	vldr	s15, [r7, #12]
 8001296:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800129a:	ee16 0a90 	vmov	r0, s13
 800129e:	f7ff f96b 	bl	8000578 <__aeabi_f2d>
 80012a2:	a327      	add	r3, pc, #156	@ (adr r3, 8001340 <Auto_Circle+0x110>)
 80012a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012a8:	f7ff f9be 	bl	8000628 <__aeabi_dmul>
 80012ac:	4602      	mov	r2, r0
 80012ae:	460b      	mov	r3, r1
 80012b0:	4610      	mov	r0, r2
 80012b2:	4619      	mov	r1, r3
 80012b4:	f7ff fc12 	bl	8000adc <__aeabi_d2f>
 80012b8:	4603      	mov	r3, r0
 80012ba:	4a28      	ldr	r2, [pc, #160]	@ (800135c <Auto_Circle+0x12c>)
 80012bc:	6013      	str	r3, [r2, #0]

		// Constant speed
		htim3->Instance -> CCR2 = 0;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	2200      	movs	r2, #0
 80012c4:	639a      	str	r2, [r3, #56]	@ 0x38
		htim3->Instance -> CCR4 = 0;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	2200      	movs	r2, #0
 80012cc:	641a      	str	r2, [r3, #64]	@ 0x40
		htim3->Instance -> CCR1 = BASE_SPEED;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f44f 72e1 	mov.w	r2, #450	@ 0x1c2
 80012d6:	635a      	str	r2, [r3, #52]	@ 0x34
		htim3->Instance -> CCR3 = (ratio * BASE_SPEED);
 80012d8:	4b20      	ldr	r3, [pc, #128]	@ (800135c <Auto_Circle+0x12c>)
 80012da:	edd3 7a00 	vldr	s15, [r3]
 80012de:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8001354 <Auto_Circle+0x124>
 80012e2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80012ee:	ee17 2a90 	vmov	r2, s15
 80012f2:	63da      	str	r2, [r3, #60]	@ 0x3c
		HAL_TIM_Base_Start_IT(&htim7);
 80012f4:	481a      	ldr	r0, [pc, #104]	@ (8001360 <Auto_Circle+0x130>)
 80012f6:	f004 fa95 	bl	8005824 <HAL_TIM_Base_Start_IT>
	}

	// Stop when finished
	if(timer_count > (int)total_time) {
 80012fa:	4b13      	ldr	r3, [pc, #76]	@ (8001348 <Auto_Circle+0x118>)
 80012fc:	681a      	ldr	r2, [r3, #0]
 80012fe:	4b16      	ldr	r3, [pc, #88]	@ (8001358 <Auto_Circle+0x128>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	429a      	cmp	r2, r3
 8001304:	dd11      	ble.n	800132a <Auto_Circle+0xfa>

		// Stop timer
		HAL_TIM_Base_Stop_IT(&htim7);
 8001306:	4816      	ldr	r0, [pc, #88]	@ (8001360 <Auto_Circle+0x130>)
 8001308:	f004 fafc 	bl	8005904 <HAL_TIM_Base_Stop_IT>

		// Stop the motors
		Stop(htim3);
 800130c:	6878      	ldr	r0, [r7, #4]
 800130e:	f000 fabb 	bl	8001888 <Stop>

		// Reset temporal counter
		timer_count = 0;
 8001312:	4b0d      	ldr	r3, [pc, #52]	@ (8001348 <Auto_Circle+0x118>)
 8001314:	2200      	movs	r2, #0
 8001316:	601a      	str	r2, [r3, #0]

		// End of sequence : reset current step and set to manual mode after drawing shape
		curr_mode = MANUAL_MODE;
 8001318:	4b12      	ldr	r3, [pc, #72]	@ (8001364 <Auto_Circle+0x134>)
 800131a:	2200      	movs	r2, #0
 800131c:	701a      	strb	r2, [r3, #0]
		LCD_Mode();
 800131e:	f001 fc87 	bl	8002c30 <LCD_Mode>
		LCD_Manuel(3);
 8001322:	2003      	movs	r0, #3
 8001324:	f001 fc36 	bl	8002b94 <LCD_Manuel>
	}

	return;
 8001328:	bf00      	nop
 800132a:	bf00      	nop
}
 800132c:	3710      	adds	r7, #16
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	f3af 8000 	nop.w
 8001338:	00000000 	.word	0x00000000
 800133c:	416312d0 	.word	0x416312d0
 8001340:	cccccccd 	.word	0xcccccccd
 8001344:	3feccccc 	.word	0x3feccccc
 8001348:	200000d0 	.word	0x200000d0
 800134c:	4428d480 	.word	0x4428d480
 8001350:	43880000 	.word	0x43880000
 8001354:	43e10000 	.word	0x43e10000
 8001358:	200000bc 	.word	0x200000bc
 800135c:	200000e8 	.word	0x200000e8
 8001360:	200002b8 	.word	0x200002b8
 8001364:	200000ba 	.word	0x200000ba

08001368 <Auto_Back_Forth>:

void Auto_Back_Forth(TIM_HandleTypeDef* htim3) {
 8001368:	b580      	push	{r7, lr}
 800136a:	b082      	sub	sp, #8
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
	// Manage ongoing step
	switch(curr_step) {
 8001370:	4b1f      	ldr	r3, [pc, #124]	@ (80013f0 <Auto_Back_Forth+0x88>)
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	3b01      	subs	r3, #1
 8001376:	2b03      	cmp	r3, #3
 8001378:	d82a      	bhi.n	80013d0 <Auto_Back_Forth+0x68>
 800137a:	a201      	add	r2, pc, #4	@ (adr r2, 8001380 <Auto_Back_Forth+0x18>)
 800137c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001380:	08001391 	.word	0x08001391
 8001384:	080013a5 	.word	0x080013a5
 8001388:	080013b1 	.word	0x080013b1
 800138c:	080013c5 	.word	0x080013c5
	case 1:
		// Step 1: Move forward 1 meter
		Auto_Line(DISTANCE, BASE_SPEED, BASE_SPEED, htim3);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	f44f 72e1 	mov.w	r2, #450	@ 0x1c2
 8001396:	f44f 71e1 	mov.w	r1, #450	@ 0x1c2
 800139a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800139e:	f7ff fe47 	bl	8001030 <Auto_Line>
		break;
 80013a2:	e021      	b.n	80013e8 <Auto_Back_Forth+0x80>

	case 2:
		// Step 2: Turn 180 degrees
		Auto_Angle(180.0, htim3);
 80013a4:	6878      	ldr	r0, [r7, #4]
 80013a6:	ed9f 0a13 	vldr	s0, [pc, #76]	@ 80013f4 <Auto_Back_Forth+0x8c>
 80013aa:	f7ff fdb5 	bl	8000f18 <Auto_Angle>
		break;
 80013ae:	e01b      	b.n	80013e8 <Auto_Back_Forth+0x80>

	case 3:
		// Step 3: Move backward 1 meter
		Auto_Line(DISTANCE, BASE_SPEED, BASE_SPEED, htim3);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	f44f 72e1 	mov.w	r2, #450	@ 0x1c2
 80013b6:	f44f 71e1 	mov.w	r1, #450	@ 0x1c2
 80013ba:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80013be:	f7ff fe37 	bl	8001030 <Auto_Line>
		break;
 80013c2:	e011      	b.n	80013e8 <Auto_Back_Forth+0x80>

	case 4:
		// Step 4: Turn 180 degrees again to face the original direction
	    Auto_Angle(180.0, htim3);
 80013c4:	6878      	ldr	r0, [r7, #4]
 80013c6:	ed9f 0a0b 	vldr	s0, [pc, #44]	@ 80013f4 <Auto_Back_Forth+0x8c>
 80013ca:	f7ff fda5 	bl	8000f18 <Auto_Angle>
		break;
 80013ce:	e00b      	b.n	80013e8 <Auto_Back_Forth+0x80>

	default:
		// End of sequence : reset current step and set to manual mode after drawing shape
		curr_step = 1;
 80013d0:	4b07      	ldr	r3, [pc, #28]	@ (80013f0 <Auto_Back_Forth+0x88>)
 80013d2:	2201      	movs	r2, #1
 80013d4:	701a      	strb	r2, [r3, #0]
		curr_mode = MANUAL_MODE;
 80013d6:	4b08      	ldr	r3, [pc, #32]	@ (80013f8 <Auto_Back_Forth+0x90>)
 80013d8:	2200      	movs	r2, #0
 80013da:	701a      	strb	r2, [r3, #0]
		LCD_Mode();
 80013dc:	f001 fc28 	bl	8002c30 <LCD_Mode>
		LCD_Manuel(3);
 80013e0:	2003      	movs	r0, #3
 80013e2:	f001 fbd7 	bl	8002b94 <LCD_Manuel>
		break;
 80013e6:	bf00      	nop
	}
	return;
 80013e8:	bf00      	nop
}
 80013ea:	3708      	adds	r7, #8
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	20000000 	.word	0x20000000
 80013f4:	43340000 	.word	0x43340000
 80013f8:	200000ba 	.word	0x200000ba

080013fc <Auto_Square>:

void Auto_Square(TIM_HandleTypeDef* htim3) {
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b082      	sub	sp, #8
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
	// Manage ongoing step
	switch(curr_step) {
 8001404:	4b1e      	ldr	r3, [pc, #120]	@ (8001480 <Auto_Square+0x84>)
 8001406:	781b      	ldrb	r3, [r3, #0]
 8001408:	2b08      	cmp	r3, #8
 800140a:	bf8c      	ite	hi
 800140c:	2201      	movhi	r2, #1
 800140e:	2200      	movls	r2, #0
 8001410:	b2d2      	uxtb	r2, r2
 8001412:	2a00      	cmp	r2, #0
 8001414:	d123      	bne.n	800145e <Auto_Square+0x62>
 8001416:	2201      	movs	r2, #1
 8001418:	fa02 f303 	lsl.w	r3, r2, r3
 800141c:	f403 72aa 	and.w	r2, r3, #340	@ 0x154
 8001420:	2a00      	cmp	r2, #0
 8001422:	bf14      	ite	ne
 8001424:	2201      	movne	r2, #1
 8001426:	2200      	moveq	r2, #0
 8001428:	b2d2      	uxtb	r2, r2
 800142a:	2a00      	cmp	r2, #0
 800142c:	d111      	bne.n	8001452 <Auto_Square+0x56>
 800142e:	f003 03aa 	and.w	r3, r3, #170	@ 0xaa
 8001432:	2b00      	cmp	r3, #0
 8001434:	bf14      	ite	ne
 8001436:	2301      	movne	r3, #1
 8001438:	2300      	moveq	r3, #0
 800143a:	b2db      	uxtb	r3, r3
 800143c:	2b00      	cmp	r3, #0
 800143e:	d00e      	beq.n	800145e <Auto_Square+0x62>
	case 1:
	case 3:
	case 5:
	case 7:
		// Odd steps: Move forward
		Auto_Line(DISTANCE, (BASE_SPEED * 0.333), BASE_SPEED, htim3);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	f44f 72e1 	mov.w	r2, #450	@ 0x1c2
 8001446:	2195      	movs	r1, #149	@ 0x95
 8001448:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800144c:	f7ff fdf0 	bl	8001030 <Auto_Line>
		break;
 8001450:	e011      	b.n	8001476 <Auto_Square+0x7a>
	case 2:
	case 4:
	case 6:
	case 8:
		// Even steps: Turn 90 degrees
		Auto_Angle(90.0, htim3);
 8001452:	6878      	ldr	r0, [r7, #4]
 8001454:	ed9f 0a0b 	vldr	s0, [pc, #44]	@ 8001484 <Auto_Square+0x88>
 8001458:	f7ff fd5e 	bl	8000f18 <Auto_Angle>
		break;
 800145c:	e00b      	b.n	8001476 <Auto_Square+0x7a>

	default:
		// End of sequence : reset current step and set to manual mode after drawing shape
		curr_step = 1;
 800145e:	4b08      	ldr	r3, [pc, #32]	@ (8001480 <Auto_Square+0x84>)
 8001460:	2201      	movs	r2, #1
 8001462:	701a      	strb	r2, [r3, #0]
		curr_mode = MANUAL_MODE;
 8001464:	4b08      	ldr	r3, [pc, #32]	@ (8001488 <Auto_Square+0x8c>)
 8001466:	2200      	movs	r2, #0
 8001468:	701a      	strb	r2, [r3, #0]
		LCD_Mode();
 800146a:	f001 fbe1 	bl	8002c30 <LCD_Mode>
		LCD_Manuel(3);
 800146e:	2003      	movs	r0, #3
 8001470:	f001 fb90 	bl	8002b94 <LCD_Manuel>
		break;
 8001474:	bf00      	nop
	}
	return;
 8001476:	bf00      	nop
}
 8001478:	3708      	adds	r7, #8
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	20000000 	.word	0x20000000
 8001484:	42b40000 	.word	0x42b40000
 8001488:	200000ba 	.word	0x200000ba

0800148c <Pause>:

void Pause(TIM_HandleTypeDef* htim3) {
 800148c:	b580      	push	{r7, lr}
 800148e:	b082      	sub	sp, #8
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
	pause = pause ^ 1;
 8001494:	4b1a      	ldr	r3, [pc, #104]	@ (8001500 <Pause+0x74>)
 8001496:	781b      	ldrb	r3, [r3, #0]
 8001498:	f083 0301 	eor.w	r3, r3, #1
 800149c:	b2da      	uxtb	r2, r3
 800149e:	4b18      	ldr	r3, [pc, #96]	@ (8001500 <Pause+0x74>)
 80014a0:	701a      	strb	r2, [r3, #0]

	// Save currrent CCR values
	save[0] = htim3->Instance -> CCR1;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80014a8:	461a      	mov	r2, r3
 80014aa:	4b16      	ldr	r3, [pc, #88]	@ (8001504 <Pause+0x78>)
 80014ac:	601a      	str	r2, [r3, #0]
	save[1] = htim3->Instance -> CCR2;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80014b4:	461a      	mov	r2, r3
 80014b6:	4b13      	ldr	r3, [pc, #76]	@ (8001504 <Pause+0x78>)
 80014b8:	605a      	str	r2, [r3, #4]
	save[2] = htim3->Instance -> CCR3;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80014c0:	461a      	mov	r2, r3
 80014c2:	4b10      	ldr	r3, [pc, #64]	@ (8001504 <Pause+0x78>)
 80014c4:	609a      	str	r2, [r3, #8]
	save[3] = htim3->Instance -> CCR4;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014cc:	461a      	mov	r2, r3
 80014ce:	4b0d      	ldr	r3, [pc, #52]	@ (8001504 <Pause+0x78>)
 80014d0:	60da      	str	r2, [r3, #12]

	// Stop
	HAL_TIM_PWM_Stop(htim3, TIM_CHANNEL_1);
 80014d2:	2100      	movs	r1, #0
 80014d4:	6878      	ldr	r0, [r7, #4]
 80014d6:	f004 fb65 	bl	8005ba4 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(htim3, TIM_CHANNEL_2);
 80014da:	2104      	movs	r1, #4
 80014dc:	6878      	ldr	r0, [r7, #4]
 80014de:	f004 fb61 	bl	8005ba4 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(htim3, TIM_CHANNEL_3);
 80014e2:	2108      	movs	r1, #8
 80014e4:	6878      	ldr	r0, [r7, #4]
 80014e6:	f004 fb5d 	bl	8005ba4 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(htim3, TIM_CHANNEL_4);
 80014ea:	210c      	movs	r1, #12
 80014ec:	6878      	ldr	r0, [r7, #4]
 80014ee:	f004 fb59 	bl	8005ba4 <HAL_TIM_PWM_Stop>
	HAL_TIM_Base_Stop_IT(&htim7);
 80014f2:	4805      	ldr	r0, [pc, #20]	@ (8001508 <Pause+0x7c>)
 80014f4:	f004 fa06 	bl	8005904 <HAL_TIM_Base_Stop_IT>

	return;
 80014f8:	bf00      	nop
}
 80014fa:	3708      	adds	r7, #8
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	200000b8 	.word	0x200000b8
 8001504:	200000d8 	.word	0x200000d8
 8001508:	200002b8 	.word	0x200002b8

0800150c <Resume>:

void Resume(TIM_HandleTypeDef* htim3) {
 800150c:	b580      	push	{r7, lr}
 800150e:	b082      	sub	sp, #8
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
	pause = pause ^ 1;
 8001514:	4b18      	ldr	r3, [pc, #96]	@ (8001578 <Resume+0x6c>)
 8001516:	781b      	ldrb	r3, [r3, #0]
 8001518:	f083 0301 	eor.w	r3, r3, #1
 800151c:	b2da      	uxtb	r2, r3
 800151e:	4b16      	ldr	r3, [pc, #88]	@ (8001578 <Resume+0x6c>)
 8001520:	701a      	strb	r2, [r3, #0]

	// Restore saved CCR values
	HAL_TIM_PWM_Start(htim3, TIM_CHANNEL_1);
 8001522:	2100      	movs	r1, #0
 8001524:	6878      	ldr	r0, [r7, #4]
 8001526:	f004 fa75 	bl	8005a14 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(htim3, TIM_CHANNEL_2);
 800152a:	2104      	movs	r1, #4
 800152c:	6878      	ldr	r0, [r7, #4]
 800152e:	f004 fa71 	bl	8005a14 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(htim3, TIM_CHANNEL_3);
 8001532:	2108      	movs	r1, #8
 8001534:	6878      	ldr	r0, [r7, #4]
 8001536:	f004 fa6d 	bl	8005a14 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(htim3, TIM_CHANNEL_4);
 800153a:	210c      	movs	r1, #12
 800153c:	6878      	ldr	r0, [r7, #4]
 800153e:	f004 fa69 	bl	8005a14 <HAL_TIM_PWM_Start>
	htim3->Instance -> CCR1 = save[0];
 8001542:	4b0e      	ldr	r3, [pc, #56]	@ (800157c <Resume+0x70>)
 8001544:	681a      	ldr	r2, [r3, #0]
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	635a      	str	r2, [r3, #52]	@ 0x34
	htim3->Instance -> CCR2 = save[1];
 800154c:	4b0b      	ldr	r3, [pc, #44]	@ (800157c <Resume+0x70>)
 800154e:	685a      	ldr	r2, [r3, #4]
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	639a      	str	r2, [r3, #56]	@ 0x38
	htim3->Instance -> CCR3 = save[2];
 8001556:	4b09      	ldr	r3, [pc, #36]	@ (800157c <Resume+0x70>)
 8001558:	689a      	ldr	r2, [r3, #8]
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	63da      	str	r2, [r3, #60]	@ 0x3c
	htim3->Instance -> CCR4 = save[3];
 8001560:	4b06      	ldr	r3, [pc, #24]	@ (800157c <Resume+0x70>)
 8001562:	68da      	ldr	r2, [r3, #12]
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	641a      	str	r2, [r3, #64]	@ 0x40
	HAL_TIM_Base_Start_IT(&htim7);
 800156a:	4805      	ldr	r0, [pc, #20]	@ (8001580 <Resume+0x74>)
 800156c:	f004 f95a 	bl	8005824 <HAL_TIM_Base_Start_IT>

	return;
 8001570:	bf00      	nop
}
 8001572:	3708      	adds	r7, #8
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}
 8001578:	200000b8 	.word	0x200000b8
 800157c:	200000d8 	.word	0x200000d8
 8001580:	200002b8 	.word	0x200002b8
 8001584:	00000000 	.word	0x00000000

08001588 <Avancer>:
 */

#include "gestion_moteurs.h"
#include "vitesse_affichage.h"

void Avancer(int Pulse, TIM_HandleTypeDef* htim3){
 8001588:	b590      	push	{r4, r7, lr}
 800158a:	b083      	sub	sp, #12
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
 8001590:	6039      	str	r1, [r7, #0]

	htim3->Instance -> CCR2 = 0;
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	2200      	movs	r2, #0
 8001598:	639a      	str	r2, [r3, #56]	@ 0x38
	htim3->Instance -> CCR4 = 0;
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	2200      	movs	r2, #0
 80015a0:	641a      	str	r2, [r3, #64]	@ 0x40

	if(Pulse > 499){
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80015a8:	db02      	blt.n	80015b0 <Avancer+0x28>
		Pulse = 499;
 80015aa:	f240 13f3 	movw	r3, #499	@ 0x1f3
 80015ae:	607b      	str	r3, [r7, #4]
	}

	htim3->Instance -> CCR1 = Pulse;
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	687a      	ldr	r2, [r7, #4]
 80015b6:	635a      	str	r2, [r3, #52]	@ 0x34
	htim3->Instance -> CCR3 = htim3->Instance -> CCR1 * 0.9;
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80015be:	4618      	mov	r0, r3
 80015c0:	f7fe ffb8 	bl	8000534 <__aeabi_ui2d>
 80015c4:	a31c      	add	r3, pc, #112	@ (adr r3, 8001638 <Avancer+0xb0>)
 80015c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015ca:	f7ff f82d 	bl	8000628 <__aeabi_dmul>
 80015ce:	4602      	mov	r2, r0
 80015d0:	460b      	mov	r3, r1
 80015d2:	4610      	mov	r0, r2
 80015d4:	4619      	mov	r1, r3
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	681c      	ldr	r4, [r3, #0]
 80015da:	f7ff fa5f 	bl	8000a9c <__aeabi_d2uiz>
 80015de:	4603      	mov	r3, r0
 80015e0:	63e3      	str	r3, [r4, #60]	@ 0x3c


	LCD_Vitesse((uint16_t)(Pulse*0.2), (uint16_t)(Pulse*0.2), 0, 0);
 80015e2:	6878      	ldr	r0, [r7, #4]
 80015e4:	f7fe ffb6 	bl	8000554 <__aeabi_i2d>
 80015e8:	a315      	add	r3, pc, #84	@ (adr r3, 8001640 <Avancer+0xb8>)
 80015ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015ee:	f7ff f81b 	bl	8000628 <__aeabi_dmul>
 80015f2:	4602      	mov	r2, r0
 80015f4:	460b      	mov	r3, r1
 80015f6:	4610      	mov	r0, r2
 80015f8:	4619      	mov	r1, r3
 80015fa:	f7ff fa4f 	bl	8000a9c <__aeabi_d2uiz>
 80015fe:	4603      	mov	r3, r0
 8001600:	b29c      	uxth	r4, r3
 8001602:	6878      	ldr	r0, [r7, #4]
 8001604:	f7fe ffa6 	bl	8000554 <__aeabi_i2d>
 8001608:	a30d      	add	r3, pc, #52	@ (adr r3, 8001640 <Avancer+0xb8>)
 800160a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800160e:	f7ff f80b 	bl	8000628 <__aeabi_dmul>
 8001612:	4602      	mov	r2, r0
 8001614:	460b      	mov	r3, r1
 8001616:	4610      	mov	r0, r2
 8001618:	4619      	mov	r1, r3
 800161a:	f7ff fa3f 	bl	8000a9c <__aeabi_d2uiz>
 800161e:	4603      	mov	r3, r0
 8001620:	b299      	uxth	r1, r3
 8001622:	2300      	movs	r3, #0
 8001624:	2200      	movs	r2, #0
 8001626:	4620      	mov	r0, r4
 8001628:	f001 fb20 	bl	8002c6c <LCD_Vitesse>
	return;
 800162c:	bf00      	nop
}
 800162e:	370c      	adds	r7, #12
 8001630:	46bd      	mov	sp, r7
 8001632:	bd90      	pop	{r4, r7, pc}
 8001634:	f3af 8000 	nop.w
 8001638:	cccccccd 	.word	0xcccccccd
 800163c:	3feccccc 	.word	0x3feccccc
 8001640:	9999999a 	.word	0x9999999a
 8001644:	3fc99999 	.word	0x3fc99999

08001648 <Droite>:

void Droite(int Pulse, TIM_HandleTypeDef* htim3){
 8001648:	b590      	push	{r4, r7, lr}
 800164a:	b083      	sub	sp, #12
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
 8001650:	6039      	str	r1, [r7, #0]

	htim3->Instance -> CCR2 = 0;
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	2200      	movs	r2, #0
 8001658:	639a      	str	r2, [r3, #56]	@ 0x38
	htim3->Instance -> CCR3 = 0;
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	2200      	movs	r2, #0
 8001660:	63da      	str	r2, [r3, #60]	@ 0x3c

	if(Pulse > 499){
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001668:	db02      	blt.n	8001670 <Droite+0x28>
		Pulse = 499;
 800166a:	f240 13f3 	movw	r3, #499	@ 0x1f3
 800166e:	607b      	str	r3, [r7, #4]
	}
	htim3->Instance -> CCR1 = Pulse;
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	687a      	ldr	r2, [r7, #4]
 8001676:	635a      	str	r2, [r3, #52]	@ 0x34
	htim3->Instance -> CCR4 = htim3->Instance -> CCR1 * 0.9;
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800167e:	4618      	mov	r0, r3
 8001680:	f7fe ff58 	bl	8000534 <__aeabi_ui2d>
 8001684:	a31c      	add	r3, pc, #112	@ (adr r3, 80016f8 <Droite+0xb0>)
 8001686:	e9d3 2300 	ldrd	r2, r3, [r3]
 800168a:	f7fe ffcd 	bl	8000628 <__aeabi_dmul>
 800168e:	4602      	mov	r2, r0
 8001690:	460b      	mov	r3, r1
 8001692:	4610      	mov	r0, r2
 8001694:	4619      	mov	r1, r3
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	681c      	ldr	r4, [r3, #0]
 800169a:	f7ff f9ff 	bl	8000a9c <__aeabi_d2uiz>
 800169e:	4603      	mov	r3, r0
 80016a0:	6423      	str	r3, [r4, #64]	@ 0x40

	LCD_Vitesse((uint16_t)(Pulse*0.2), (uint16_t)(Pulse*0.2), 0, 1);
 80016a2:	6878      	ldr	r0, [r7, #4]
 80016a4:	f7fe ff56 	bl	8000554 <__aeabi_i2d>
 80016a8:	a315      	add	r3, pc, #84	@ (adr r3, 8001700 <Droite+0xb8>)
 80016aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016ae:	f7fe ffbb 	bl	8000628 <__aeabi_dmul>
 80016b2:	4602      	mov	r2, r0
 80016b4:	460b      	mov	r3, r1
 80016b6:	4610      	mov	r0, r2
 80016b8:	4619      	mov	r1, r3
 80016ba:	f7ff f9ef 	bl	8000a9c <__aeabi_d2uiz>
 80016be:	4603      	mov	r3, r0
 80016c0:	b29c      	uxth	r4, r3
 80016c2:	6878      	ldr	r0, [r7, #4]
 80016c4:	f7fe ff46 	bl	8000554 <__aeabi_i2d>
 80016c8:	a30d      	add	r3, pc, #52	@ (adr r3, 8001700 <Droite+0xb8>)
 80016ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016ce:	f7fe ffab 	bl	8000628 <__aeabi_dmul>
 80016d2:	4602      	mov	r2, r0
 80016d4:	460b      	mov	r3, r1
 80016d6:	4610      	mov	r0, r2
 80016d8:	4619      	mov	r1, r3
 80016da:	f7ff f9df 	bl	8000a9c <__aeabi_d2uiz>
 80016de:	4603      	mov	r3, r0
 80016e0:	b299      	uxth	r1, r3
 80016e2:	2301      	movs	r3, #1
 80016e4:	2200      	movs	r2, #0
 80016e6:	4620      	mov	r0, r4
 80016e8:	f001 fac0 	bl	8002c6c <LCD_Vitesse>
	return;
 80016ec:	bf00      	nop
}
 80016ee:	370c      	adds	r7, #12
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd90      	pop	{r4, r7, pc}
 80016f4:	f3af 8000 	nop.w
 80016f8:	cccccccd 	.word	0xcccccccd
 80016fc:	3feccccc 	.word	0x3feccccc
 8001700:	9999999a 	.word	0x9999999a
 8001704:	3fc99999 	.word	0x3fc99999

08001708 <Gauche>:

void Gauche(int Pulse, TIM_HandleTypeDef* htim3){
 8001708:	b590      	push	{r4, r7, lr}
 800170a:	b083      	sub	sp, #12
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
 8001710:	6039      	str	r1, [r7, #0]

	htim3->Instance -> CCR1 = 0;
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	2200      	movs	r2, #0
 8001718:	635a      	str	r2, [r3, #52]	@ 0x34
	htim3->Instance -> CCR4 = 0;
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	2200      	movs	r2, #0
 8001720:	641a      	str	r2, [r3, #64]	@ 0x40

	if(Pulse > 499){
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001728:	db02      	blt.n	8001730 <Gauche+0x28>
		Pulse = 499;
 800172a:	f240 13f3 	movw	r3, #499	@ 0x1f3
 800172e:	607b      	str	r3, [r7, #4]
	}
	htim3->Instance -> CCR2 = Pulse;
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	687a      	ldr	r2, [r7, #4]
 8001736:	639a      	str	r2, [r3, #56]	@ 0x38
	htim3->Instance -> CCR3 = htim3->Instance -> CCR2 * 0.9;
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800173e:	4618      	mov	r0, r3
 8001740:	f7fe fef8 	bl	8000534 <__aeabi_ui2d>
 8001744:	a31c      	add	r3, pc, #112	@ (adr r3, 80017b8 <Gauche+0xb0>)
 8001746:	e9d3 2300 	ldrd	r2, r3, [r3]
 800174a:	f7fe ff6d 	bl	8000628 <__aeabi_dmul>
 800174e:	4602      	mov	r2, r0
 8001750:	460b      	mov	r3, r1
 8001752:	4610      	mov	r0, r2
 8001754:	4619      	mov	r1, r3
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	681c      	ldr	r4, [r3, #0]
 800175a:	f7ff f99f 	bl	8000a9c <__aeabi_d2uiz>
 800175e:	4603      	mov	r3, r0
 8001760:	63e3      	str	r3, [r4, #60]	@ 0x3c

	LCD_Vitesse((uint16_t)(Pulse*0.2), (uint16_t)(Pulse*0.2), 1, 0);
 8001762:	6878      	ldr	r0, [r7, #4]
 8001764:	f7fe fef6 	bl	8000554 <__aeabi_i2d>
 8001768:	a315      	add	r3, pc, #84	@ (adr r3, 80017c0 <Gauche+0xb8>)
 800176a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800176e:	f7fe ff5b 	bl	8000628 <__aeabi_dmul>
 8001772:	4602      	mov	r2, r0
 8001774:	460b      	mov	r3, r1
 8001776:	4610      	mov	r0, r2
 8001778:	4619      	mov	r1, r3
 800177a:	f7ff f98f 	bl	8000a9c <__aeabi_d2uiz>
 800177e:	4603      	mov	r3, r0
 8001780:	b29c      	uxth	r4, r3
 8001782:	6878      	ldr	r0, [r7, #4]
 8001784:	f7fe fee6 	bl	8000554 <__aeabi_i2d>
 8001788:	a30d      	add	r3, pc, #52	@ (adr r3, 80017c0 <Gauche+0xb8>)
 800178a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800178e:	f7fe ff4b 	bl	8000628 <__aeabi_dmul>
 8001792:	4602      	mov	r2, r0
 8001794:	460b      	mov	r3, r1
 8001796:	4610      	mov	r0, r2
 8001798:	4619      	mov	r1, r3
 800179a:	f7ff f97f 	bl	8000a9c <__aeabi_d2uiz>
 800179e:	4603      	mov	r3, r0
 80017a0:	b299      	uxth	r1, r3
 80017a2:	2300      	movs	r3, #0
 80017a4:	2201      	movs	r2, #1
 80017a6:	4620      	mov	r0, r4
 80017a8:	f001 fa60 	bl	8002c6c <LCD_Vitesse>
}
 80017ac:	bf00      	nop
 80017ae:	370c      	adds	r7, #12
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd90      	pop	{r4, r7, pc}
 80017b4:	f3af 8000 	nop.w
 80017b8:	cccccccd 	.word	0xcccccccd
 80017bc:	3feccccc 	.word	0x3feccccc
 80017c0:	9999999a 	.word	0x9999999a
 80017c4:	3fc99999 	.word	0x3fc99999

080017c8 <Reculer>:

void Reculer(int Pulse,TIM_HandleTypeDef* htim3){
 80017c8:	b590      	push	{r4, r7, lr}
 80017ca:	b083      	sub	sp, #12
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
 80017d0:	6039      	str	r1, [r7, #0]

	htim3->Instance -> CCR1 = 0;
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	2200      	movs	r2, #0
 80017d8:	635a      	str	r2, [r3, #52]	@ 0x34
	htim3->Instance -> CCR3 = 0;
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	2200      	movs	r2, #0
 80017e0:	63da      	str	r2, [r3, #60]	@ 0x3c

	if(Pulse > 499){
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80017e8:	db02      	blt.n	80017f0 <Reculer+0x28>
		Pulse = 499;
 80017ea:	f240 13f3 	movw	r3, #499	@ 0x1f3
 80017ee:	607b      	str	r3, [r7, #4]
	}

	htim3->Instance -> CCR4 = Pulse;
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	687a      	ldr	r2, [r7, #4]
 80017f6:	641a      	str	r2, [r3, #64]	@ 0x40
	htim3->Instance -> CCR2 = htim3->Instance -> CCR4 * 0.95;
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017fe:	4618      	mov	r0, r3
 8001800:	f7fe fe98 	bl	8000534 <__aeabi_ui2d>
 8001804:	a31c      	add	r3, pc, #112	@ (adr r3, 8001878 <Reculer+0xb0>)
 8001806:	e9d3 2300 	ldrd	r2, r3, [r3]
 800180a:	f7fe ff0d 	bl	8000628 <__aeabi_dmul>
 800180e:	4602      	mov	r2, r0
 8001810:	460b      	mov	r3, r1
 8001812:	4610      	mov	r0, r2
 8001814:	4619      	mov	r1, r3
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	681c      	ldr	r4, [r3, #0]
 800181a:	f7ff f93f 	bl	8000a9c <__aeabi_d2uiz>
 800181e:	4603      	mov	r3, r0
 8001820:	63a3      	str	r3, [r4, #56]	@ 0x38
	LCD_Vitesse((uint16_t)(Pulse*0.2), (uint16_t)(Pulse*0.2), 1, 1);
 8001822:	6878      	ldr	r0, [r7, #4]
 8001824:	f7fe fe96 	bl	8000554 <__aeabi_i2d>
 8001828:	a315      	add	r3, pc, #84	@ (adr r3, 8001880 <Reculer+0xb8>)
 800182a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800182e:	f7fe fefb 	bl	8000628 <__aeabi_dmul>
 8001832:	4602      	mov	r2, r0
 8001834:	460b      	mov	r3, r1
 8001836:	4610      	mov	r0, r2
 8001838:	4619      	mov	r1, r3
 800183a:	f7ff f92f 	bl	8000a9c <__aeabi_d2uiz>
 800183e:	4603      	mov	r3, r0
 8001840:	b29c      	uxth	r4, r3
 8001842:	6878      	ldr	r0, [r7, #4]
 8001844:	f7fe fe86 	bl	8000554 <__aeabi_i2d>
 8001848:	a30d      	add	r3, pc, #52	@ (adr r3, 8001880 <Reculer+0xb8>)
 800184a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800184e:	f7fe feeb 	bl	8000628 <__aeabi_dmul>
 8001852:	4602      	mov	r2, r0
 8001854:	460b      	mov	r3, r1
 8001856:	4610      	mov	r0, r2
 8001858:	4619      	mov	r1, r3
 800185a:	f7ff f91f 	bl	8000a9c <__aeabi_d2uiz>
 800185e:	4603      	mov	r3, r0
 8001860:	b299      	uxth	r1, r3
 8001862:	2301      	movs	r3, #1
 8001864:	2201      	movs	r2, #1
 8001866:	4620      	mov	r0, r4
 8001868:	f001 fa00 	bl	8002c6c <LCD_Vitesse>
	return;
 800186c:	bf00      	nop
}
 800186e:	370c      	adds	r7, #12
 8001870:	46bd      	mov	sp, r7
 8001872:	bd90      	pop	{r4, r7, pc}
 8001874:	f3af 8000 	nop.w
 8001878:	66666666 	.word	0x66666666
 800187c:	3fee6666 	.word	0x3fee6666
 8001880:	9999999a 	.word	0x9999999a
 8001884:	3fc99999 	.word	0x3fc99999

08001888 <Stop>:
void Stop(TIM_HandleTypeDef* htim3){
 8001888:	b580      	push	{r7, lr}
 800188a:	b082      	sub	sp, #8
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
	htim3->Instance -> CCR1 = 0;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	2200      	movs	r2, #0
 8001896:	635a      	str	r2, [r3, #52]	@ 0x34
	htim3->Instance -> CCR2 = 0;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	2200      	movs	r2, #0
 800189e:	639a      	str	r2, [r3, #56]	@ 0x38
	htim3->Instance -> CCR3 = 0;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	2200      	movs	r2, #0
 80018a6:	63da      	str	r2, [r3, #60]	@ 0x3c
	htim3->Instance -> CCR4 = 0;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	2200      	movs	r2, #0
 80018ae:	641a      	str	r2, [r3, #64]	@ 0x40
	LCD_Vitesse(0, 0, 0, 0);
 80018b0:	2300      	movs	r3, #0
 80018b2:	2200      	movs	r2, #0
 80018b4:	2100      	movs	r1, #0
 80018b6:	2000      	movs	r0, #0
 80018b8:	f001 f9d8 	bl	8002c6c <LCD_Vitesse>
}
 80018bc:	bf00      	nop
 80018be:	3708      	adds	r7, #8
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}

080018c4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b08a      	sub	sp, #40	@ 0x28
 80018c8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018ca:	f107 0314 	add.w	r3, r7, #20
 80018ce:	2200      	movs	r2, #0
 80018d0:	601a      	str	r2, [r3, #0]
 80018d2:	605a      	str	r2, [r3, #4]
 80018d4:	609a      	str	r2, [r3, #8]
 80018d6:	60da      	str	r2, [r3, #12]
 80018d8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018da:	2300      	movs	r3, #0
 80018dc:	613b      	str	r3, [r7, #16]
 80018de:	4b59      	ldr	r3, [pc, #356]	@ (8001a44 <MX_GPIO_Init+0x180>)
 80018e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018e2:	4a58      	ldr	r2, [pc, #352]	@ (8001a44 <MX_GPIO_Init+0x180>)
 80018e4:	f043 0304 	orr.w	r3, r3, #4
 80018e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80018ea:	4b56      	ldr	r3, [pc, #344]	@ (8001a44 <MX_GPIO_Init+0x180>)
 80018ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ee:	f003 0304 	and.w	r3, r3, #4
 80018f2:	613b      	str	r3, [r7, #16]
 80018f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80018f6:	2300      	movs	r3, #0
 80018f8:	60fb      	str	r3, [r7, #12]
 80018fa:	4b52      	ldr	r3, [pc, #328]	@ (8001a44 <MX_GPIO_Init+0x180>)
 80018fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018fe:	4a51      	ldr	r2, [pc, #324]	@ (8001a44 <MX_GPIO_Init+0x180>)
 8001900:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001904:	6313      	str	r3, [r2, #48]	@ 0x30
 8001906:	4b4f      	ldr	r3, [pc, #316]	@ (8001a44 <MX_GPIO_Init+0x180>)
 8001908:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800190a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800190e:	60fb      	str	r3, [r7, #12]
 8001910:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001912:	2300      	movs	r3, #0
 8001914:	60bb      	str	r3, [r7, #8]
 8001916:	4b4b      	ldr	r3, [pc, #300]	@ (8001a44 <MX_GPIO_Init+0x180>)
 8001918:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800191a:	4a4a      	ldr	r2, [pc, #296]	@ (8001a44 <MX_GPIO_Init+0x180>)
 800191c:	f043 0301 	orr.w	r3, r3, #1
 8001920:	6313      	str	r3, [r2, #48]	@ 0x30
 8001922:	4b48      	ldr	r3, [pc, #288]	@ (8001a44 <MX_GPIO_Init+0x180>)
 8001924:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001926:	f003 0301 	and.w	r3, r3, #1
 800192a:	60bb      	str	r3, [r7, #8]
 800192c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800192e:	2300      	movs	r3, #0
 8001930:	607b      	str	r3, [r7, #4]
 8001932:	4b44      	ldr	r3, [pc, #272]	@ (8001a44 <MX_GPIO_Init+0x180>)
 8001934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001936:	4a43      	ldr	r2, [pc, #268]	@ (8001a44 <MX_GPIO_Init+0x180>)
 8001938:	f043 0302 	orr.w	r3, r3, #2
 800193c:	6313      	str	r3, [r2, #48]	@ 0x30
 800193e:	4b41      	ldr	r3, [pc, #260]	@ (8001a44 <MX_GPIO_Init+0x180>)
 8001940:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001942:	f003 0302 	and.w	r3, r3, #2
 8001946:	607b      	str	r3, [r7, #4]
 8001948:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800194a:	2200      	movs	r2, #0
 800194c:	2120      	movs	r1, #32
 800194e:	483e      	ldr	r0, [pc, #248]	@ (8001a48 <MX_GPIO_Init+0x184>)
 8001950:	f001 fe5a 	bl	8003608 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI_RST_Pin|SPI_CS_Pin|SPI_DC_Pin, GPIO_PIN_RESET);
 8001954:	2200      	movs	r2, #0
 8001956:	f44f 4160 	mov.w	r1, #57344	@ 0xe000
 800195a:	483c      	ldr	r0, [pc, #240]	@ (8001a4c <MX_GPIO_Init+0x188>)
 800195c:	f001 fe54 	bl	8003608 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Blue_Button_Pin;
 8001960:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001964:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001966:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800196a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800196c:	2300      	movs	r3, #0
 800196e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Blue_Button_GPIO_Port, &GPIO_InitStruct);
 8001970:	f107 0314 	add.w	r3, r7, #20
 8001974:	4619      	mov	r1, r3
 8001976:	4836      	ldr	r0, [pc, #216]	@ (8001a50 <MX_GPIO_Init+0x18c>)
 8001978:	f001 fc9a 	bl	80032b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = Dipswitch_MSB_Pin|Dipswitch_LSB_Pin;
 800197c:	230c      	movs	r3, #12
 800197e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001980:	2300      	movs	r3, #0
 8001982:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001984:	2302      	movs	r3, #2
 8001986:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001988:	f107 0314 	add.w	r3, r7, #20
 800198c:	4619      	mov	r1, r3
 800198e:	4830      	ldr	r0, [pc, #192]	@ (8001a50 <MX_GPIO_Init+0x18c>)
 8001990:	f001 fc8e 	bl	80032b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001994:	2320      	movs	r3, #32
 8001996:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001998:	2301      	movs	r3, #1
 800199a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800199c:	2300      	movs	r3, #0
 800199e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019a0:	2300      	movs	r3, #0
 80019a2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80019a4:	f107 0314 	add.w	r3, r7, #20
 80019a8:	4619      	mov	r1, r3
 80019aa:	4827      	ldr	r0, [pc, #156]	@ (8001a48 <MX_GPIO_Init+0x184>)
 80019ac:	f001 fc80 	bl	80032b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = SPI_RST_Pin|SPI_CS_Pin|SPI_DC_Pin;
 80019b0:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 80019b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019b6:	2301      	movs	r3, #1
 80019b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ba:	2300      	movs	r3, #0
 80019bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019be:	2300      	movs	r3, #0
 80019c0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019c2:	f107 0314 	add.w	r3, r7, #20
 80019c6:	4619      	mov	r1, r3
 80019c8:	4820      	ldr	r0, [pc, #128]	@ (8001a4c <MX_GPIO_Init+0x188>)
 80019ca:	f001 fc71 	bl	80032b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Encodeur_D_B_Pin;
 80019ce:	2380      	movs	r3, #128	@ 0x80
 80019d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019d2:	2300      	movs	r3, #0
 80019d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d6:	2300      	movs	r3, #0
 80019d8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Encodeur_D_B_GPIO_Port, &GPIO_InitStruct);
 80019da:	f107 0314 	add.w	r3, r7, #20
 80019de:	4619      	mov	r1, r3
 80019e0:	481b      	ldr	r0, [pc, #108]	@ (8001a50 <MX_GPIO_Init+0x18c>)
 80019e2:	f001 fc65 	bl	80032b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = Encodeur_G_A_Pin|Encodeur_D_A_Pin;
 80019e6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80019ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80019ec:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80019f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80019f2:	2302      	movs	r3, #2
 80019f4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019f6:	f107 0314 	add.w	r3, r7, #20
 80019fa:	4619      	mov	r1, r3
 80019fc:	4812      	ldr	r0, [pc, #72]	@ (8001a48 <MX_GPIO_Init+0x184>)
 80019fe:	f001 fc57 	bl	80032b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Encodeur_G_B_Pin;
 8001a02:	2340      	movs	r3, #64	@ 0x40
 8001a04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a06:	2300      	movs	r3, #0
 8001a08:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Encodeur_G_B_GPIO_Port, &GPIO_InitStruct);
 8001a0e:	f107 0314 	add.w	r3, r7, #20
 8001a12:	4619      	mov	r1, r3
 8001a14:	480d      	ldr	r0, [pc, #52]	@ (8001a4c <MX_GPIO_Init+0x188>)
 8001a16:	f001 fc4b 	bl	80032b0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	2100      	movs	r1, #0
 8001a1e:	2017      	movs	r0, #23
 8001a20:	f001 fc0f 	bl	8003242 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001a24:	2017      	movs	r0, #23
 8001a26:	f001 fc28 	bl	800327a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	2100      	movs	r1, #0
 8001a2e:	2028      	movs	r0, #40	@ 0x28
 8001a30:	f001 fc07 	bl	8003242 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001a34:	2028      	movs	r0, #40	@ 0x28
 8001a36:	f001 fc20 	bl	800327a <HAL_NVIC_EnableIRQ>

}
 8001a3a:	bf00      	nop
 8001a3c:	3728      	adds	r7, #40	@ 0x28
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	40023800 	.word	0x40023800
 8001a48:	40020000 	.word	0x40020000
 8001a4c:	40020400 	.word	0x40020400
 8001a50:	40020800 	.word	0x40020800

08001a54 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001a58:	4b12      	ldr	r3, [pc, #72]	@ (8001aa4 <MX_I2C1_Init+0x50>)
 8001a5a:	4a13      	ldr	r2, [pc, #76]	@ (8001aa8 <MX_I2C1_Init+0x54>)
 8001a5c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001a5e:	4b11      	ldr	r3, [pc, #68]	@ (8001aa4 <MX_I2C1_Init+0x50>)
 8001a60:	4a12      	ldr	r2, [pc, #72]	@ (8001aac <MX_I2C1_Init+0x58>)
 8001a62:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001a64:	4b0f      	ldr	r3, [pc, #60]	@ (8001aa4 <MX_I2C1_Init+0x50>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001a6a:	4b0e      	ldr	r3, [pc, #56]	@ (8001aa4 <MX_I2C1_Init+0x50>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a70:	4b0c      	ldr	r3, [pc, #48]	@ (8001aa4 <MX_I2C1_Init+0x50>)
 8001a72:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001a76:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a78:	4b0a      	ldr	r3, [pc, #40]	@ (8001aa4 <MX_I2C1_Init+0x50>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001a7e:	4b09      	ldr	r3, [pc, #36]	@ (8001aa4 <MX_I2C1_Init+0x50>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a84:	4b07      	ldr	r3, [pc, #28]	@ (8001aa4 <MX_I2C1_Init+0x50>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a8a:	4b06      	ldr	r3, [pc, #24]	@ (8001aa4 <MX_I2C1_Init+0x50>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001a90:	4804      	ldr	r0, [pc, #16]	@ (8001aa4 <MX_I2C1_Init+0x50>)
 8001a92:	f001 fdeb 	bl	800366c <HAL_I2C_Init>
 8001a96:	4603      	mov	r3, r0
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d001      	beq.n	8001aa0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001a9c:	f000 f98c 	bl	8001db8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001aa0:	bf00      	nop
 8001aa2:	bd80      	pop	{r7, pc}
 8001aa4:	200000ec 	.word	0x200000ec
 8001aa8:	40005400 	.word	0x40005400
 8001aac:	000186a0 	.word	0x000186a0

08001ab0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b08a      	sub	sp, #40	@ 0x28
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ab8:	f107 0314 	add.w	r3, r7, #20
 8001abc:	2200      	movs	r2, #0
 8001abe:	601a      	str	r2, [r3, #0]
 8001ac0:	605a      	str	r2, [r3, #4]
 8001ac2:	609a      	str	r2, [r3, #8]
 8001ac4:	60da      	str	r2, [r3, #12]
 8001ac6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a19      	ldr	r2, [pc, #100]	@ (8001b34 <HAL_I2C_MspInit+0x84>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d12c      	bne.n	8001b2c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	613b      	str	r3, [r7, #16]
 8001ad6:	4b18      	ldr	r3, [pc, #96]	@ (8001b38 <HAL_I2C_MspInit+0x88>)
 8001ad8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ada:	4a17      	ldr	r2, [pc, #92]	@ (8001b38 <HAL_I2C_MspInit+0x88>)
 8001adc:	f043 0302 	orr.w	r3, r3, #2
 8001ae0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ae2:	4b15      	ldr	r3, [pc, #84]	@ (8001b38 <HAL_I2C_MspInit+0x88>)
 8001ae4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ae6:	f003 0302 	and.w	r3, r3, #2
 8001aea:	613b      	str	r3, [r7, #16]
 8001aec:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001aee:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001af2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001af4:	2312      	movs	r3, #18
 8001af6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af8:	2300      	movs	r3, #0
 8001afa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001afc:	2303      	movs	r3, #3
 8001afe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001b00:	2304      	movs	r3, #4
 8001b02:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b04:	f107 0314 	add.w	r3, r7, #20
 8001b08:	4619      	mov	r1, r3
 8001b0a:	480c      	ldr	r0, [pc, #48]	@ (8001b3c <HAL_I2C_MspInit+0x8c>)
 8001b0c:	f001 fbd0 	bl	80032b0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001b10:	2300      	movs	r3, #0
 8001b12:	60fb      	str	r3, [r7, #12]
 8001b14:	4b08      	ldr	r3, [pc, #32]	@ (8001b38 <HAL_I2C_MspInit+0x88>)
 8001b16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b18:	4a07      	ldr	r2, [pc, #28]	@ (8001b38 <HAL_I2C_MspInit+0x88>)
 8001b1a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001b1e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b20:	4b05      	ldr	r3, [pc, #20]	@ (8001b38 <HAL_I2C_MspInit+0x88>)
 8001b22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b24:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b28:	60fb      	str	r3, [r7, #12]
 8001b2a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001b2c:	bf00      	nop
 8001b2e:	3728      	adds	r7, #40	@ 0x28
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}
 8001b34:	40005400 	.word	0x40005400
 8001b38:	40023800 	.word	0x40023800
 8001b3c:	40020400 	.word	0x40020400

08001b40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b44:	f001 fa0c 	bl	8002f60 <HAL_Init>

  /* USER CODE BEGIN Init */

  Initialisation_manette();
 8001b48:	f000 f990 	bl	8001e6c <Initialisation_manette>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b4c:	f000 f86c 	bl	8001c28 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b50:	f7ff feb8 	bl	80018c4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001b54:	f000 ffac 	bl	8002ab0 <MX_USART2_UART_Init>
  MX_TIM6_Init();
 8001b58:	f000 fe4e 	bl	80027f8 <MX_TIM6_Init>
  MX_TIM3_Init();
 8001b5c:	f000 fd3c 	bl	80025d8 <MX_TIM3_Init>
  MX_TIM7_Init();
 8001b60:	f000 fe80 	bl	8002864 <MX_TIM7_Init>
  MX_I2C1_Init();
 8001b64:	f7ff ff76 	bl	8001a54 <MX_I2C1_Init>
  MX_SPI2_Init();
 8001b68:	f000 fb60 	bl	800222c <MX_SPI2_Init>
  MX_TIM4_Init();
 8001b6c:	f000 fdcc 	bl	8002708 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim6);
 8001b70:	4828      	ldr	r0, [pc, #160]	@ (8001c14 <main+0xd4>)
 8001b72:	f003 fe57 	bl	8005824 <HAL_TIM_Base_Start_IT>

  if (HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1) != HAL_OK)
 8001b76:	2100      	movs	r1, #0
 8001b78:	4827      	ldr	r0, [pc, #156]	@ (8001c18 <main+0xd8>)
 8001b7a:	f003 ff4b 	bl	8005a14 <HAL_TIM_PWM_Start>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d001      	beq.n	8001b88 <main+0x48>
  {
      Error_Handler();
 8001b84:	f000 f918 	bl	8001db8 <Error_Handler>
  }

  if (HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2) != HAL_OK)
 8001b88:	2104      	movs	r1, #4
 8001b8a:	4823      	ldr	r0, [pc, #140]	@ (8001c18 <main+0xd8>)
 8001b8c:	f003 ff42 	bl	8005a14 <HAL_TIM_PWM_Start>
 8001b90:	4603      	mov	r3, r0
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d001      	beq.n	8001b9a <main+0x5a>
  {
      Error_Handler();
 8001b96:	f000 f90f 	bl	8001db8 <Error_Handler>
  }

  if (HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3) != HAL_OK)
 8001b9a:	2108      	movs	r1, #8
 8001b9c:	481e      	ldr	r0, [pc, #120]	@ (8001c18 <main+0xd8>)
 8001b9e:	f003 ff39 	bl	8005a14 <HAL_TIM_PWM_Start>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d001      	beq.n	8001bac <main+0x6c>
  {
      Error_Handler();
 8001ba8:	f000 f906 	bl	8001db8 <Error_Handler>
  }

  if (HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4) != HAL_OK)
 8001bac:	210c      	movs	r1, #12
 8001bae:	481a      	ldr	r0, [pc, #104]	@ (8001c18 <main+0xd8>)
 8001bb0:	f003 ff30 	bl	8005a14 <HAL_TIM_PWM_Start>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d001      	beq.n	8001bbe <main+0x7e>
  {
      Error_Handler();
 8001bba:	f000 f8fd 	bl	8001db8 <Error_Handler>
  }
  arrTimerVitesse = __HAL_TIM_GET_AUTORELOAD(&htim6);
 8001bbe:	4b15      	ldr	r3, [pc, #84]	@ (8001c14 <main+0xd4>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bc4:	b29a      	uxth	r2, r3
 8001bc6:	4b15      	ldr	r3, [pc, #84]	@ (8001c1c <main+0xdc>)
 8001bc8:	801a      	strh	r2, [r3, #0]
  curr_mode = MANUAL_MODE;
 8001bca:	4b15      	ldr	r3, [pc, #84]	@ (8001c20 <main+0xe0>)
 8001bcc:	2200      	movs	r2, #0
 8001bce:	701a      	strb	r2, [r3, #0]
  LCD_Init(&LCD_Init_OK);
 8001bd0:	4814      	ldr	r0, [pc, #80]	@ (8001c24 <main+0xe4>)
 8001bd2:	f001 f89d 	bl	8002d10 <LCD_Init>
  {

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	if(curr_mode != MANUAL_MODE) { 	// Toggle auto mode
 8001bd6:	4b12      	ldr	r3, [pc, #72]	@ (8001c20 <main+0xe0>)
 8001bd8:	781b      	ldrb	r3, [r3, #0]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d016      	beq.n	8001c0c <main+0xcc>
		switch(curr_mode) {
 8001bde:	4b10      	ldr	r3, [pc, #64]	@ (8001c20 <main+0xe0>)
 8001be0:	781b      	ldrb	r3, [r3, #0]
 8001be2:	2b03      	cmp	r3, #3
 8001be4:	d00e      	beq.n	8001c04 <main+0xc4>
 8001be6:	2b03      	cmp	r3, #3
 8001be8:	dcf5      	bgt.n	8001bd6 <main+0x96>
 8001bea:	2b01      	cmp	r3, #1
 8001bec:	d002      	beq.n	8001bf4 <main+0xb4>
 8001bee:	2b02      	cmp	r3, #2
 8001bf0:	d004      	beq.n	8001bfc <main+0xbc>
 8001bf2:	e00d      	b.n	8001c10 <main+0xd0>
			case CIRCLE_MODE:
				Auto_Circle(&htim3);
 8001bf4:	4808      	ldr	r0, [pc, #32]	@ (8001c18 <main+0xd8>)
 8001bf6:	f7ff fb1b 	bl	8001230 <Auto_Circle>
				break;
 8001bfa:	e009      	b.n	8001c10 <main+0xd0>
			case BACK_FORTH_MODE:
				Auto_Back_Forth(&htim3);
 8001bfc:	4806      	ldr	r0, [pc, #24]	@ (8001c18 <main+0xd8>)
 8001bfe:	f7ff fbb3 	bl	8001368 <Auto_Back_Forth>
				break;
 8001c02:	e005      	b.n	8001c10 <main+0xd0>
			case SQUARE_MODE:
				Auto_Square(&htim3);
 8001c04:	4804      	ldr	r0, [pc, #16]	@ (8001c18 <main+0xd8>)
 8001c06:	f7ff fbf9 	bl	80013fc <Auto_Square>
				break;
 8001c0a:	e001      	b.n	8001c10 <main+0xd0>
		}
	}

	else { 	// Manual mode

		Controller();
 8001c0c:	f000 f950 	bl	8001eb0 <Controller>
	if(curr_mode != MANUAL_MODE) { 	// Toggle auto mode
 8001c10:	e7e1      	b.n	8001bd6 <main+0x96>
 8001c12:	bf00      	nop
 8001c14:	20000270 	.word	0x20000270
 8001c18:	200001e0 	.word	0x200001e0
 8001c1c:	20000140 	.word	0x20000140
 8001c20:	200000ba 	.word	0x200000ba
 8001c24:	20000142 	.word	0x20000142

08001c28 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b094      	sub	sp, #80	@ 0x50
 8001c2c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c2e:	f107 031c 	add.w	r3, r7, #28
 8001c32:	2234      	movs	r2, #52	@ 0x34
 8001c34:	2100      	movs	r1, #0
 8001c36:	4618      	mov	r0, r3
 8001c38:	f006 f8f4 	bl	8007e24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c3c:	f107 0308 	add.w	r3, r7, #8
 8001c40:	2200      	movs	r2, #0
 8001c42:	601a      	str	r2, [r3, #0]
 8001c44:	605a      	str	r2, [r3, #4]
 8001c46:	609a      	str	r2, [r3, #8]
 8001c48:	60da      	str	r2, [r3, #12]
 8001c4a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	607b      	str	r3, [r7, #4]
 8001c50:	4b2a      	ldr	r3, [pc, #168]	@ (8001cfc <SystemClock_Config+0xd4>)
 8001c52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c54:	4a29      	ldr	r2, [pc, #164]	@ (8001cfc <SystemClock_Config+0xd4>)
 8001c56:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c5a:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c5c:	4b27      	ldr	r3, [pc, #156]	@ (8001cfc <SystemClock_Config+0xd4>)
 8001c5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c60:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c64:	607b      	str	r3, [r7, #4]
 8001c66:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001c68:	2300      	movs	r3, #0
 8001c6a:	603b      	str	r3, [r7, #0]
 8001c6c:	4b24      	ldr	r3, [pc, #144]	@ (8001d00 <SystemClock_Config+0xd8>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001c74:	4a22      	ldr	r2, [pc, #136]	@ (8001d00 <SystemClock_Config+0xd8>)
 8001c76:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c7a:	6013      	str	r3, [r2, #0]
 8001c7c:	4b20      	ldr	r3, [pc, #128]	@ (8001d00 <SystemClock_Config+0xd8>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001c84:	603b      	str	r3, [r7, #0]
 8001c86:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001c88:	2302      	movs	r3, #2
 8001c8a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001c90:	2310      	movs	r3, #16
 8001c92:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c94:	2302      	movs	r3, #2
 8001c96:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001c9c:	2310      	movs	r3, #16
 8001c9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001ca0:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001ca4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001ca6:	2304      	movs	r3, #4
 8001ca8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001caa:	2302      	movs	r3, #2
 8001cac:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001cae:	2302      	movs	r3, #2
 8001cb0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001cb2:	f107 031c 	add.w	r3, r7, #28
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f003 f81c 	bl	8004cf4 <HAL_RCC_OscConfig>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d001      	beq.n	8001cc6 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001cc2:	f000 f879 	bl	8001db8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001cc6:	230f      	movs	r3, #15
 8001cc8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001cca:	2302      	movs	r3, #2
 8001ccc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001cd2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001cd6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001cdc:	f107 0308 	add.w	r3, r7, #8
 8001ce0:	2102      	movs	r1, #2
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f002 fcbc 	bl	8004660 <HAL_RCC_ClockConfig>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d001      	beq.n	8001cf2 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8001cee:	f000 f863 	bl	8001db8 <Error_Handler>
  }
}
 8001cf2:	bf00      	nop
 8001cf4:	3750      	adds	r7, #80	@ 0x50
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	bf00      	nop
 8001cfc:	40023800 	.word	0x40023800
 8001d00:	40007000 	.word	0x40007000

08001d04 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001d04:	b590      	push	{r4, r7, lr}
 8001d06:	b083      	sub	sp, #12
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	80fb      	strh	r3, [r7, #6]
	{
		nbPulseG++ ; // compte les pulses de lencodeur droit
	}
	*/

	if(GPIO_Pin == Blue_Button_Pin) {
 8001d0e:	88fb      	ldrh	r3, [r7, #6]
 8001d10:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001d14:	d129      	bne.n	8001d6a <HAL_GPIO_EXTI_Callback+0x66>
		dip_state = Get_Mode(HAL_GPIO_ReadPin(Dipswitch_MSB_GPIO_Port, Dipswitch_MSB_Pin), HAL_GPIO_ReadPin(Dipswitch_LSB_GPIO_Port, Dipswitch_LSB_Pin));
 8001d16:	2104      	movs	r1, #4
 8001d18:	4816      	ldr	r0, [pc, #88]	@ (8001d74 <HAL_GPIO_EXTI_Callback+0x70>)
 8001d1a:	f001 fc5d 	bl	80035d8 <HAL_GPIO_ReadPin>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	461c      	mov	r4, r3
 8001d22:	2108      	movs	r1, #8
 8001d24:	4813      	ldr	r0, [pc, #76]	@ (8001d74 <HAL_GPIO_EXTI_Callback+0x70>)
 8001d26:	f001 fc57 	bl	80035d8 <HAL_GPIO_ReadPin>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	4619      	mov	r1, r3
 8001d2e:	4620      	mov	r0, r4
 8001d30:	f7ff f89c 	bl	8000e6c <Get_Mode>
 8001d34:	4603      	mov	r3, r0
 8001d36:	b2da      	uxtb	r2, r3
 8001d38:	4b0f      	ldr	r3, [pc, #60]	@ (8001d78 <HAL_GPIO_EXTI_Callback+0x74>)
 8001d3a:	701a      	strb	r2, [r3, #0]

		// Resume if paused
		if(pause)
 8001d3c:	4b0f      	ldr	r3, [pc, #60]	@ (8001d7c <HAL_GPIO_EXTI_Callback+0x78>)
 8001d3e:	781b      	ldrb	r3, [r3, #0]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d003      	beq.n	8001d4c <HAL_GPIO_EXTI_Callback+0x48>
			Resume(&htim3);
 8001d44:	480e      	ldr	r0, [pc, #56]	@ (8001d80 <HAL_GPIO_EXTI_Callback+0x7c>)
 8001d46:	f7ff fbe1 	bl	800150c <Resume>
 8001d4a:	e006      	b.n	8001d5a <HAL_GPIO_EXTI_Callback+0x56>

		// Pause if button pressed while auto mode on
		else if(curr_mode != MANUAL_MODE)
 8001d4c:	4b0d      	ldr	r3, [pc, #52]	@ (8001d84 <HAL_GPIO_EXTI_Callback+0x80>)
 8001d4e:	781b      	ldrb	r3, [r3, #0]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d002      	beq.n	8001d5a <HAL_GPIO_EXTI_Callback+0x56>
			Pause(&htim3);
 8001d54:	480a      	ldr	r0, [pc, #40]	@ (8001d80 <HAL_GPIO_EXTI_Callback+0x7c>)
 8001d56:	f7ff fb99 	bl	800148c <Pause>

		// Change current mode only on manual mode
		if(curr_mode == MANUAL_MODE)
 8001d5a:	4b0a      	ldr	r3, [pc, #40]	@ (8001d84 <HAL_GPIO_EXTI_Callback+0x80>)
 8001d5c:	781b      	ldrb	r3, [r3, #0]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d103      	bne.n	8001d6a <HAL_GPIO_EXTI_Callback+0x66>
			curr_mode = dip_state;
 8001d62:	4b05      	ldr	r3, [pc, #20]	@ (8001d78 <HAL_GPIO_EXTI_Callback+0x74>)
 8001d64:	781a      	ldrb	r2, [r3, #0]
 8001d66:	4b07      	ldr	r3, [pc, #28]	@ (8001d84 <HAL_GPIO_EXTI_Callback+0x80>)
 8001d68:	701a      	strb	r2, [r3, #0]
	}
}
 8001d6a:	bf00      	nop
 8001d6c:	370c      	adds	r7, #12
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd90      	pop	{r4, r7, pc}
 8001d72:	bf00      	nop
 8001d74:	40020800 	.word	0x40020800
 8001d78:	200000b9 	.word	0x200000b9
 8001d7c:	200000b8 	.word	0x200000b8
 8001d80:	200001e0 	.word	0x200001e0
 8001d84:	200000ba 	.word	0x200000ba

08001d88 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b083      	sub	sp, #12
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
    	}
    	*/

    }

    if(htim->Instance == TIM7) {	// Triggered every 10 µs
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a06      	ldr	r2, [pc, #24]	@ (8001db0 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d104      	bne.n	8001da4 <HAL_TIM_PeriodElapsedCallback+0x1c>
    	timer_count += 10;
 8001d9a:	4b06      	ldr	r3, [pc, #24]	@ (8001db4 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	330a      	adds	r3, #10
 8001da0:	4a04      	ldr	r2, [pc, #16]	@ (8001db4 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8001da2:	6013      	str	r3, [r2, #0]
    }
}
 8001da4:	bf00      	nop
 8001da6:	370c      	adds	r7, #12
 8001da8:	46bd      	mov	sp, r7
 8001daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dae:	4770      	bx	lr
 8001db0:	40001400 	.word	0x40001400
 8001db4:	200000d0 	.word	0x200000d0

08001db8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001db8:	b480      	push	{r7}
 8001dba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001dbc:	b672      	cpsid	i
}
 8001dbe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001dc0:	bf00      	nop
 8001dc2:	e7fd      	b.n	8001dc0 <Error_Handler+0x8>

08001dc4 <Format_Data>:
int maxInverse = 500;
int sendPulseMotor;

int toggle;

void Format_Data() {
 8001dc4:	b480      	push	{r7}
 8001dc6:	af00      	add	r7, sp, #0
	/*FROM LAB7*/
	formatted_data[0] = data[0];
 8001dc8:	4b20      	ldr	r3, [pc, #128]	@ (8001e4c <Format_Data+0x88>)
 8001dca:	781b      	ldrb	r3, [r3, #0]
 8001dcc:	461a      	mov	r2, r3
 8001dce:	4b20      	ldr	r3, [pc, #128]	@ (8001e50 <Format_Data+0x8c>)
 8001dd0:	601a      	str	r2, [r3, #0]
	formatted_data[1] = data[1];
 8001dd2:	4b1e      	ldr	r3, [pc, #120]	@ (8001e4c <Format_Data+0x88>)
 8001dd4:	785b      	ldrb	r3, [r3, #1]
 8001dd6:	461a      	mov	r2, r3
 8001dd8:	4b1d      	ldr	r3, [pc, #116]	@ (8001e50 <Format_Data+0x8c>)
 8001dda:	605a      	str	r2, [r3, #4]
	formatted_data[5] = (data[5] & 0x02);
 8001ddc:	4b1b      	ldr	r3, [pc, #108]	@ (8001e4c <Format_Data+0x88>)
 8001dde:	795b      	ldrb	r3, [r3, #5]
 8001de0:	f003 0302 	and.w	r3, r3, #2
 8001de4:	4a1a      	ldr	r2, [pc, #104]	@ (8001e50 <Format_Data+0x8c>)
 8001de6:	6153      	str	r3, [r2, #20]
	if(formatted_data[5] == 2)
 8001de8:	4b19      	ldr	r3, [pc, #100]	@ (8001e50 <Format_Data+0x8c>)
 8001dea:	695b      	ldr	r3, [r3, #20]
 8001dec:	2b02      	cmp	r3, #2
 8001dee:	d102      	bne.n	8001df6 <Format_Data+0x32>
		formatted_data[5] = 1;
 8001df0:	4b17      	ldr	r3, [pc, #92]	@ (8001e50 <Format_Data+0x8c>)
 8001df2:	2201      	movs	r2, #1
 8001df4:	615a      	str	r2, [r3, #20]
	formatted_data[6] = (data[5] & 0x01);
 8001df6:	4b15      	ldr	r3, [pc, #84]	@ (8001e4c <Format_Data+0x88>)
 8001df8:	795b      	ldrb	r3, [r3, #5]
 8001dfa:	f003 0301 	and.w	r3, r3, #1
 8001dfe:	4a14      	ldr	r2, [pc, #80]	@ (8001e50 <Format_Data+0x8c>)
 8001e00:	6193      	str	r3, [r2, #24]

	/*MY DATA*/
	Xdata = data[0];
 8001e02:	4b12      	ldr	r3, [pc, #72]	@ (8001e4c <Format_Data+0x88>)
 8001e04:	781b      	ldrb	r3, [r3, #0]
 8001e06:	461a      	mov	r2, r3
 8001e08:	4b12      	ldr	r3, [pc, #72]	@ (8001e54 <Format_Data+0x90>)
 8001e0a:	601a      	str	r2, [r3, #0]
	Ydata = data[1];
 8001e0c:	4b0f      	ldr	r3, [pc, #60]	@ (8001e4c <Format_Data+0x88>)
 8001e0e:	785b      	ldrb	r3, [r3, #1]
 8001e10:	461a      	mov	r2, r3
 8001e12:	4b11      	ldr	r3, [pc, #68]	@ (8001e58 <Format_Data+0x94>)
 8001e14:	601a      	str	r2, [r3, #0]
	Xpulse = data[0];
 8001e16:	4b0d      	ldr	r3, [pc, #52]	@ (8001e4c <Format_Data+0x88>)
 8001e18:	781b      	ldrb	r3, [r3, #0]
 8001e1a:	461a      	mov	r2, r3
 8001e1c:	4b0f      	ldr	r3, [pc, #60]	@ (8001e5c <Format_Data+0x98>)
 8001e1e:	601a      	str	r2, [r3, #0]
	Ypulse = data[1];
 8001e20:	4b0a      	ldr	r3, [pc, #40]	@ (8001e4c <Format_Data+0x88>)
 8001e22:	785b      	ldrb	r3, [r3, #1]
 8001e24:	461a      	mov	r2, r3
 8001e26:	4b0e      	ldr	r3, [pc, #56]	@ (8001e60 <Format_Data+0x9c>)
 8001e28:	601a      	str	r2, [r3, #0]
	Cbutton = (data[5] & 0x02);
 8001e2a:	4b08      	ldr	r3, [pc, #32]	@ (8001e4c <Format_Data+0x88>)
 8001e2c:	795b      	ldrb	r3, [r3, #5]
 8001e2e:	f003 0302 	and.w	r3, r3, #2
 8001e32:	4a0c      	ldr	r2, [pc, #48]	@ (8001e64 <Format_Data+0xa0>)
 8001e34:	6013      	str	r3, [r2, #0]
	Zbutton = (data[5] & 0x01);
 8001e36:	4b05      	ldr	r3, [pc, #20]	@ (8001e4c <Format_Data+0x88>)
 8001e38:	795b      	ldrb	r3, [r3, #5]
 8001e3a:	f003 0301 	and.w	r3, r3, #1
 8001e3e:	4a0a      	ldr	r2, [pc, #40]	@ (8001e68 <Format_Data+0xa4>)
 8001e40:	6013      	str	r3, [r2, #0]
	/* neutral x and y data: 128
	max x and y data: 1-254 */

}
 8001e42:	bf00      	nop
 8001e44:	46bd      	mov	sp, r7
 8001e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4a:	4770      	bx	lr
 8001e4c:	20000144 	.word	0x20000144
 8001e50:	2000014c 	.word	0x2000014c
 8001e54:	20000168 	.word	0x20000168
 8001e58:	2000016c 	.word	0x2000016c
 8001e5c:	20000170 	.word	0x20000170
 8001e60:	20000174 	.word	0x20000174
 8001e64:	20000178 	.word	0x20000178
 8001e68:	2000017c 	.word	0x2000017c

08001e6c <Initialisation_manette>:


void Initialisation_manette(){
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b082      	sub	sp, #8
 8001e70:	af02      	add	r7, sp, #8

	HAL_I2C_Master_Transmit(&hi2c1, NUNCHUK_ADDRESS, initcomm1, 2, HAL_MAX_DELAY);
 8001e72:	f04f 33ff 	mov.w	r3, #4294967295
 8001e76:	9300      	str	r3, [sp, #0]
 8001e78:	2302      	movs	r3, #2
 8001e7a:	4a0a      	ldr	r2, [pc, #40]	@ (8001ea4 <Initialisation_manette+0x38>)
 8001e7c:	21a4      	movs	r1, #164	@ 0xa4
 8001e7e:	480a      	ldr	r0, [pc, #40]	@ (8001ea8 <Initialisation_manette+0x3c>)
 8001e80:	f001 fd38 	bl	80038f4 <HAL_I2C_Master_Transmit>
	HAL_Delay(10);
 8001e84:	200a      	movs	r0, #10
 8001e86:	f001 f8dd 	bl	8003044 <HAL_Delay>
	HAL_I2C_Master_Transmit(&hi2c1, NUNCHUK_ADDRESS, initcomm2, 2, HAL_MAX_DELAY);
 8001e8a:	f04f 33ff 	mov.w	r3, #4294967295
 8001e8e:	9300      	str	r3, [sp, #0]
 8001e90:	2302      	movs	r3, #2
 8001e92:	4a06      	ldr	r2, [pc, #24]	@ (8001eac <Initialisation_manette+0x40>)
 8001e94:	21a4      	movs	r1, #164	@ 0xa4
 8001e96:	4804      	ldr	r0, [pc, #16]	@ (8001ea8 <Initialisation_manette+0x3c>)
 8001e98:	f001 fd2c 	bl	80038f4 <HAL_I2C_Master_Transmit>

}
 8001e9c:	bf00      	nop
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}
 8001ea2:	bf00      	nop
 8001ea4:	20000004 	.word	0x20000004
 8001ea8:	200000ec 	.word	0x200000ec
 8001eac:	20000008 	.word	0x20000008

08001eb0 <Controller>:


void Controller(){
 8001eb0:	b5b0      	push	{r4, r5, r7, lr}
 8001eb2:	b082      	sub	sp, #8
 8001eb4:	af02      	add	r7, sp, #8

	HAL_I2C_Master_Transmit(&hi2c1, NUNCHUK_ADDRESS, 0x00, 1, HAL_MAX_DELAY);
 8001eb6:	f04f 33ff 	mov.w	r3, #4294967295
 8001eba:	9300      	str	r3, [sp, #0]
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	21a4      	movs	r1, #164	@ 0xa4
 8001ec2:	48b5      	ldr	r0, [pc, #724]	@ (8002198 <Controller+0x2e8>)
 8001ec4:	f001 fd16 	bl	80038f4 <HAL_I2C_Master_Transmit>
	HAL_Delay(10);
 8001ec8:	200a      	movs	r0, #10
 8001eca:	f001 f8bb 	bl	8003044 <HAL_Delay>
	HAL_I2C_Master_Receive(&hi2c1, NUNCHUK_ADDRESS, data, 6, HAL_MAX_DELAY);
 8001ece:	f04f 33ff 	mov.w	r3, #4294967295
 8001ed2:	9300      	str	r3, [sp, #0]
 8001ed4:	2306      	movs	r3, #6
 8001ed6:	4ab1      	ldr	r2, [pc, #708]	@ (800219c <Controller+0x2ec>)
 8001ed8:	21a4      	movs	r1, #164	@ 0xa4
 8001eda:	48af      	ldr	r0, [pc, #700]	@ (8002198 <Controller+0x2e8>)
 8001edc:	f001 fe08 	bl	8003af0 <HAL_I2C_Master_Receive>
	Format_Data();
 8001ee0:	f7ff ff70 	bl	8001dc4 <Format_Data>



	if(Cbutton == 0){
 8001ee4:	4bae      	ldr	r3, [pc, #696]	@ (80021a0 <Controller+0x2f0>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d104      	bne.n	8001ef6 <Controller+0x46>
		HAL_Delay(10);
 8001eec:	200a      	movs	r0, #10
 8001eee:	f001 f8a9 	bl	8003044 <HAL_Delay>
		ToggleModeMan();
 8001ef2:	f000 f983 	bl	80021fc <ToggleModeMan>
	}
	if(Zbutton == 0){
 8001ef6:	4bab      	ldr	r3, [pc, #684]	@ (80021a4 <Controller+0x2f4>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d104      	bne.n	8001f08 <Controller+0x58>
		HAL_Delay(10);
 8001efe:	200a      	movs	r0, #10
 8001f00:	f001 f8a0 	bl	8003044 <HAL_Delay>
		ToggleModeVit();
 8001f04:	f000 f964 	bl	80021d0 <ToggleModeVit>
	}


	if(ToggleC == 1){
 8001f08:	4ba7      	ldr	r3, [pc, #668]	@ (80021a8 <Controller+0x2f8>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	2b01      	cmp	r3, #1
 8001f0e:	f040 8132 	bne.w	8002176 <Controller+0x2c6>


		if(Xdata == 128 && Ydata == 128){
 8001f12:	4ba6      	ldr	r3, [pc, #664]	@ (80021ac <Controller+0x2fc>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	2b80      	cmp	r3, #128	@ 0x80
 8001f18:	d107      	bne.n	8001f2a <Controller+0x7a>
 8001f1a:	4ba5      	ldr	r3, [pc, #660]	@ (80021b0 <Controller+0x300>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	2b80      	cmp	r3, #128	@ 0x80
 8001f20:	d103      	bne.n	8001f2a <Controller+0x7a>
				Stop(&htim3);
 8001f22:	48a4      	ldr	r0, [pc, #656]	@ (80021b4 <Controller+0x304>)
 8001f24:	f7ff fcb0 	bl	8001888 <Stop>
	}
	else{
		Stop(&htim3);
	}

}
 8001f28:	e128      	b.n	800217c <Controller+0x2cc>
		if(modeVitesse==1){
 8001f2a:	4ba3      	ldr	r3, [pc, #652]	@ (80021b8 <Controller+0x308>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	2b01      	cmp	r3, #1
 8001f30:	d159      	bne.n	8001fe6 <Controller+0x136>
			Xpulse = Xdata * 0.33 * pulseCoeff;
 8001f32:	4b9e      	ldr	r3, [pc, #632]	@ (80021ac <Controller+0x2fc>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4618      	mov	r0, r3
 8001f38:	f7fe fb0c 	bl	8000554 <__aeabi_i2d>
 8001f3c:	a392      	add	r3, pc, #584	@ (adr r3, 8002188 <Controller+0x2d8>)
 8001f3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f42:	f7fe fb71 	bl	8000628 <__aeabi_dmul>
 8001f46:	4602      	mov	r2, r0
 8001f48:	460b      	mov	r3, r1
 8001f4a:	4614      	mov	r4, r2
 8001f4c:	461d      	mov	r5, r3
 8001f4e:	4b9b      	ldr	r3, [pc, #620]	@ (80021bc <Controller+0x30c>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4618      	mov	r0, r3
 8001f54:	f7fe fb10 	bl	8000578 <__aeabi_f2d>
 8001f58:	4602      	mov	r2, r0
 8001f5a:	460b      	mov	r3, r1
 8001f5c:	4620      	mov	r0, r4
 8001f5e:	4629      	mov	r1, r5
 8001f60:	f7fe fb62 	bl	8000628 <__aeabi_dmul>
 8001f64:	4602      	mov	r2, r0
 8001f66:	460b      	mov	r3, r1
 8001f68:	4610      	mov	r0, r2
 8001f6a:	4619      	mov	r1, r3
 8001f6c:	f7fe fd6e 	bl	8000a4c <__aeabi_d2iz>
 8001f70:	4603      	mov	r3, r0
 8001f72:	4a93      	ldr	r2, [pc, #588]	@ (80021c0 <Controller+0x310>)
 8001f74:	6013      	str	r3, [r2, #0]
			Ypulse = Ydata * 0.33 * pulseCoeff;
 8001f76:	4b8e      	ldr	r3, [pc, #568]	@ (80021b0 <Controller+0x300>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	f7fe faea 	bl	8000554 <__aeabi_i2d>
 8001f80:	a381      	add	r3, pc, #516	@ (adr r3, 8002188 <Controller+0x2d8>)
 8001f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f86:	f7fe fb4f 	bl	8000628 <__aeabi_dmul>
 8001f8a:	4602      	mov	r2, r0
 8001f8c:	460b      	mov	r3, r1
 8001f8e:	4614      	mov	r4, r2
 8001f90:	461d      	mov	r5, r3
 8001f92:	4b8a      	ldr	r3, [pc, #552]	@ (80021bc <Controller+0x30c>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4618      	mov	r0, r3
 8001f98:	f7fe faee 	bl	8000578 <__aeabi_f2d>
 8001f9c:	4602      	mov	r2, r0
 8001f9e:	460b      	mov	r3, r1
 8001fa0:	4620      	mov	r0, r4
 8001fa2:	4629      	mov	r1, r5
 8001fa4:	f7fe fb40 	bl	8000628 <__aeabi_dmul>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	460b      	mov	r3, r1
 8001fac:	4610      	mov	r0, r2
 8001fae:	4619      	mov	r1, r3
 8001fb0:	f7fe fd4c 	bl	8000a4c <__aeabi_d2iz>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	4a83      	ldr	r2, [pc, #524]	@ (80021c4 <Controller+0x314>)
 8001fb8:	6013      	str	r3, [r2, #0]
			maxInverse = maxInverse * 0.33;
 8001fba:	4b83      	ldr	r3, [pc, #524]	@ (80021c8 <Controller+0x318>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f7fe fac8 	bl	8000554 <__aeabi_i2d>
 8001fc4:	a370      	add	r3, pc, #448	@ (adr r3, 8002188 <Controller+0x2d8>)
 8001fc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fca:	f7fe fb2d 	bl	8000628 <__aeabi_dmul>
 8001fce:	4602      	mov	r2, r0
 8001fd0:	460b      	mov	r3, r1
 8001fd2:	4610      	mov	r0, r2
 8001fd4:	4619      	mov	r1, r3
 8001fd6:	f7fe fd39 	bl	8000a4c <__aeabi_d2iz>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	4a7a      	ldr	r2, [pc, #488]	@ (80021c8 <Controller+0x318>)
 8001fde:	6013      	str	r3, [r2, #0]
			LCD_Manuel(1);
 8001fe0:	2001      	movs	r0, #1
 8001fe2:	f000 fdd7 	bl	8002b94 <LCD_Manuel>
		if(modeVitesse==2){
 8001fe6:	4b74      	ldr	r3, [pc, #464]	@ (80021b8 <Controller+0x308>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	2b02      	cmp	r3, #2
 8001fec:	d159      	bne.n	80020a2 <Controller+0x1f2>
			Xpulse = Xdata * 0.66 * pulseCoeff;
 8001fee:	4b6f      	ldr	r3, [pc, #444]	@ (80021ac <Controller+0x2fc>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f7fe faae 	bl	8000554 <__aeabi_i2d>
 8001ff8:	a365      	add	r3, pc, #404	@ (adr r3, 8002190 <Controller+0x2e0>)
 8001ffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ffe:	f7fe fb13 	bl	8000628 <__aeabi_dmul>
 8002002:	4602      	mov	r2, r0
 8002004:	460b      	mov	r3, r1
 8002006:	4614      	mov	r4, r2
 8002008:	461d      	mov	r5, r3
 800200a:	4b6c      	ldr	r3, [pc, #432]	@ (80021bc <Controller+0x30c>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4618      	mov	r0, r3
 8002010:	f7fe fab2 	bl	8000578 <__aeabi_f2d>
 8002014:	4602      	mov	r2, r0
 8002016:	460b      	mov	r3, r1
 8002018:	4620      	mov	r0, r4
 800201a:	4629      	mov	r1, r5
 800201c:	f7fe fb04 	bl	8000628 <__aeabi_dmul>
 8002020:	4602      	mov	r2, r0
 8002022:	460b      	mov	r3, r1
 8002024:	4610      	mov	r0, r2
 8002026:	4619      	mov	r1, r3
 8002028:	f7fe fd10 	bl	8000a4c <__aeabi_d2iz>
 800202c:	4603      	mov	r3, r0
 800202e:	4a64      	ldr	r2, [pc, #400]	@ (80021c0 <Controller+0x310>)
 8002030:	6013      	str	r3, [r2, #0]
			Ypulse = Ydata * 0.66 * pulseCoeff;
 8002032:	4b5f      	ldr	r3, [pc, #380]	@ (80021b0 <Controller+0x300>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4618      	mov	r0, r3
 8002038:	f7fe fa8c 	bl	8000554 <__aeabi_i2d>
 800203c:	a354      	add	r3, pc, #336	@ (adr r3, 8002190 <Controller+0x2e0>)
 800203e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002042:	f7fe faf1 	bl	8000628 <__aeabi_dmul>
 8002046:	4602      	mov	r2, r0
 8002048:	460b      	mov	r3, r1
 800204a:	4614      	mov	r4, r2
 800204c:	461d      	mov	r5, r3
 800204e:	4b5b      	ldr	r3, [pc, #364]	@ (80021bc <Controller+0x30c>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4618      	mov	r0, r3
 8002054:	f7fe fa90 	bl	8000578 <__aeabi_f2d>
 8002058:	4602      	mov	r2, r0
 800205a:	460b      	mov	r3, r1
 800205c:	4620      	mov	r0, r4
 800205e:	4629      	mov	r1, r5
 8002060:	f7fe fae2 	bl	8000628 <__aeabi_dmul>
 8002064:	4602      	mov	r2, r0
 8002066:	460b      	mov	r3, r1
 8002068:	4610      	mov	r0, r2
 800206a:	4619      	mov	r1, r3
 800206c:	f7fe fcee 	bl	8000a4c <__aeabi_d2iz>
 8002070:	4603      	mov	r3, r0
 8002072:	4a54      	ldr	r2, [pc, #336]	@ (80021c4 <Controller+0x314>)
 8002074:	6013      	str	r3, [r2, #0]
			maxInverse = maxInverse * 0.66;
 8002076:	4b54      	ldr	r3, [pc, #336]	@ (80021c8 <Controller+0x318>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4618      	mov	r0, r3
 800207c:	f7fe fa6a 	bl	8000554 <__aeabi_i2d>
 8002080:	a343      	add	r3, pc, #268	@ (adr r3, 8002190 <Controller+0x2e0>)
 8002082:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002086:	f7fe facf 	bl	8000628 <__aeabi_dmul>
 800208a:	4602      	mov	r2, r0
 800208c:	460b      	mov	r3, r1
 800208e:	4610      	mov	r0, r2
 8002090:	4619      	mov	r1, r3
 8002092:	f7fe fcdb 	bl	8000a4c <__aeabi_d2iz>
 8002096:	4603      	mov	r3, r0
 8002098:	4a4b      	ldr	r2, [pc, #300]	@ (80021c8 <Controller+0x318>)
 800209a:	6013      	str	r3, [r2, #0]
			LCD_Manuel(2);
 800209c:	2002      	movs	r0, #2
 800209e:	f000 fd79 	bl	8002b94 <LCD_Manuel>
		if(modeVitesse==3){
 80020a2:	4b45      	ldr	r3, [pc, #276]	@ (80021b8 <Controller+0x308>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	2b03      	cmp	r3, #3
 80020a8:	d124      	bne.n	80020f4 <Controller+0x244>
			Xpulse = Xdata * pulseCoeff;
 80020aa:	4b40      	ldr	r3, [pc, #256]	@ (80021ac <Controller+0x2fc>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	ee07 3a90 	vmov	s15, r3
 80020b2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80020b6:	4b41      	ldr	r3, [pc, #260]	@ (80021bc <Controller+0x30c>)
 80020b8:	edd3 7a00 	vldr	s15, [r3]
 80020bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020c0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80020c4:	ee17 2a90 	vmov	r2, s15
 80020c8:	4b3d      	ldr	r3, [pc, #244]	@ (80021c0 <Controller+0x310>)
 80020ca:	601a      	str	r2, [r3, #0]
			Ypulse = Ydata * pulseCoeff;
 80020cc:	4b38      	ldr	r3, [pc, #224]	@ (80021b0 <Controller+0x300>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	ee07 3a90 	vmov	s15, r3
 80020d4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80020d8:	4b38      	ldr	r3, [pc, #224]	@ (80021bc <Controller+0x30c>)
 80020da:	edd3 7a00 	vldr	s15, [r3]
 80020de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020e2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80020e6:	ee17 2a90 	vmov	r2, s15
 80020ea:	4b36      	ldr	r3, [pc, #216]	@ (80021c4 <Controller+0x314>)
 80020ec:	601a      	str	r2, [r3, #0]
			LCD_Manuel(3);
 80020ee:	2003      	movs	r0, #3
 80020f0:	f000 fd50 	bl	8002b94 <LCD_Manuel>
		if(Xdata>128){
 80020f4:	4b2d      	ldr	r3, [pc, #180]	@ (80021ac <Controller+0x2fc>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	2b80      	cmp	r3, #128	@ 0x80
 80020fa:	dd0a      	ble.n	8002112 <Controller+0x262>
			sendPulseMotor = Xpulse;
 80020fc:	4b30      	ldr	r3, [pc, #192]	@ (80021c0 <Controller+0x310>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4a32      	ldr	r2, [pc, #200]	@ (80021cc <Controller+0x31c>)
 8002102:	6013      	str	r3, [r2, #0]
			Droite(sendPulseMotor,&htim3);
 8002104:	4b31      	ldr	r3, [pc, #196]	@ (80021cc <Controller+0x31c>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	492a      	ldr	r1, [pc, #168]	@ (80021b4 <Controller+0x304>)
 800210a:	4618      	mov	r0, r3
 800210c:	f7ff fa9c 	bl	8001648 <Droite>
 8002110:	e010      	b.n	8002134 <Controller+0x284>
		else if(Xdata<128) {
 8002112:	4b26      	ldr	r3, [pc, #152]	@ (80021ac <Controller+0x2fc>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	2b7f      	cmp	r3, #127	@ 0x7f
 8002118:	dc0c      	bgt.n	8002134 <Controller+0x284>
				sendPulseMotor = maxInverse - Xpulse;
 800211a:	4b2b      	ldr	r3, [pc, #172]	@ (80021c8 <Controller+0x318>)
 800211c:	681a      	ldr	r2, [r3, #0]
 800211e:	4b28      	ldr	r3, [pc, #160]	@ (80021c0 <Controller+0x310>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	1ad3      	subs	r3, r2, r3
 8002124:	4a29      	ldr	r2, [pc, #164]	@ (80021cc <Controller+0x31c>)
 8002126:	6013      	str	r3, [r2, #0]
				Gauche(sendPulseMotor,&htim3);
 8002128:	4b28      	ldr	r3, [pc, #160]	@ (80021cc <Controller+0x31c>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4921      	ldr	r1, [pc, #132]	@ (80021b4 <Controller+0x304>)
 800212e:	4618      	mov	r0, r3
 8002130:	f7ff faea 	bl	8001708 <Gauche>
		if(Ydata>128){
 8002134:	4b1e      	ldr	r3, [pc, #120]	@ (80021b0 <Controller+0x300>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	2b80      	cmp	r3, #128	@ 0x80
 800213a:	dd0a      	ble.n	8002152 <Controller+0x2a2>
			sendPulseMotor = Ypulse;
 800213c:	4b21      	ldr	r3, [pc, #132]	@ (80021c4 <Controller+0x314>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a22      	ldr	r2, [pc, #136]	@ (80021cc <Controller+0x31c>)
 8002142:	6013      	str	r3, [r2, #0]
			Avancer(sendPulseMotor,&htim3);
 8002144:	4b21      	ldr	r3, [pc, #132]	@ (80021cc <Controller+0x31c>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	491a      	ldr	r1, [pc, #104]	@ (80021b4 <Controller+0x304>)
 800214a:	4618      	mov	r0, r3
 800214c:	f7ff fa1c 	bl	8001588 <Avancer>
}
 8002150:	e014      	b.n	800217c <Controller+0x2cc>
		else if(Ydata<128){
 8002152:	4b17      	ldr	r3, [pc, #92]	@ (80021b0 <Controller+0x300>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	2b7f      	cmp	r3, #127	@ 0x7f
 8002158:	dc10      	bgt.n	800217c <Controller+0x2cc>
				sendPulseMotor = maxInverse - Ypulse;
 800215a:	4b1b      	ldr	r3, [pc, #108]	@ (80021c8 <Controller+0x318>)
 800215c:	681a      	ldr	r2, [r3, #0]
 800215e:	4b19      	ldr	r3, [pc, #100]	@ (80021c4 <Controller+0x314>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	1ad3      	subs	r3, r2, r3
 8002164:	4a19      	ldr	r2, [pc, #100]	@ (80021cc <Controller+0x31c>)
 8002166:	6013      	str	r3, [r2, #0]
				Reculer(sendPulseMotor,&htim3);
 8002168:	4b18      	ldr	r3, [pc, #96]	@ (80021cc <Controller+0x31c>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4911      	ldr	r1, [pc, #68]	@ (80021b4 <Controller+0x304>)
 800216e:	4618      	mov	r0, r3
 8002170:	f7ff fb2a 	bl	80017c8 <Reculer>
}
 8002174:	e002      	b.n	800217c <Controller+0x2cc>
		Stop(&htim3);
 8002176:	480f      	ldr	r0, [pc, #60]	@ (80021b4 <Controller+0x304>)
 8002178:	f7ff fb86 	bl	8001888 <Stop>
}
 800217c:	bf00      	nop
 800217e:	46bd      	mov	sp, r7
 8002180:	bdb0      	pop	{r4, r5, r7, pc}
 8002182:	bf00      	nop
 8002184:	f3af 8000 	nop.w
 8002188:	51eb851f 	.word	0x51eb851f
 800218c:	3fd51eb8 	.word	0x3fd51eb8
 8002190:	51eb851f 	.word	0x51eb851f
 8002194:	3fe51eb8 	.word	0x3fe51eb8
 8002198:	200000ec 	.word	0x200000ec
 800219c:	20000144 	.word	0x20000144
 80021a0:	20000178 	.word	0x20000178
 80021a4:	2000017c 	.word	0x2000017c
 80021a8:	2000000c 	.word	0x2000000c
 80021ac:	20000168 	.word	0x20000168
 80021b0:	2000016c 	.word	0x2000016c
 80021b4:	200001e0 	.word	0x200001e0
 80021b8:	20000010 	.word	0x20000010
 80021bc:	20000014 	.word	0x20000014
 80021c0:	20000170 	.word	0x20000170
 80021c4:	20000174 	.word	0x20000174
 80021c8:	20000018 	.word	0x20000018
 80021cc:	20000180 	.word	0x20000180

080021d0 <ToggleModeVit>:


void ToggleModeVit() {
 80021d0:	b480      	push	{r7}
 80021d2:	af00      	add	r7, sp, #0
	if(modeVitesse == 3) {
 80021d4:	4b08      	ldr	r3, [pc, #32]	@ (80021f8 <ToggleModeVit+0x28>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	2b03      	cmp	r3, #3
 80021da:	d103      	bne.n	80021e4 <ToggleModeVit+0x14>
		modeVitesse = 1;
 80021dc:	4b06      	ldr	r3, [pc, #24]	@ (80021f8 <ToggleModeVit+0x28>)
 80021de:	2201      	movs	r2, #1
 80021e0:	601a      	str	r2, [r3, #0]
	}
	else {
		modeVitesse++;
	}
}
 80021e2:	e004      	b.n	80021ee <ToggleModeVit+0x1e>
		modeVitesse++;
 80021e4:	4b04      	ldr	r3, [pc, #16]	@ (80021f8 <ToggleModeVit+0x28>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	3301      	adds	r3, #1
 80021ea:	4a03      	ldr	r2, [pc, #12]	@ (80021f8 <ToggleModeVit+0x28>)
 80021ec:	6013      	str	r3, [r2, #0]
}
 80021ee:	bf00      	nop
 80021f0:	46bd      	mov	sp, r7
 80021f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f6:	4770      	bx	lr
 80021f8:	20000010 	.word	0x20000010

080021fc <ToggleModeMan>:

void ToggleModeMan() {
 80021fc:	b480      	push	{r7}
 80021fe:	af00      	add	r7, sp, #0

	if(ToggleC == 1){
 8002200:	4b09      	ldr	r3, [pc, #36]	@ (8002228 <ToggleModeMan+0x2c>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	2b01      	cmp	r3, #1
 8002206:	d103      	bne.n	8002210 <ToggleModeMan+0x14>
		ToggleC = 0;
 8002208:	4b07      	ldr	r3, [pc, #28]	@ (8002228 <ToggleModeMan+0x2c>)
 800220a:	2200      	movs	r2, #0
 800220c:	601a      	str	r2, [r3, #0]
	}
	else if(ToggleC == 0){
		ToggleC = 1;
	}

}
 800220e:	e006      	b.n	800221e <ToggleModeMan+0x22>
	else if(ToggleC == 0){
 8002210:	4b05      	ldr	r3, [pc, #20]	@ (8002228 <ToggleModeMan+0x2c>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d102      	bne.n	800221e <ToggleModeMan+0x22>
		ToggleC = 1;
 8002218:	4b03      	ldr	r3, [pc, #12]	@ (8002228 <ToggleModeMan+0x2c>)
 800221a:	2201      	movs	r2, #1
 800221c:	601a      	str	r2, [r3, #0]
}
 800221e:	bf00      	nop
 8002220:	46bd      	mov	sp, r7
 8002222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002226:	4770      	bx	lr
 8002228:	2000000c 	.word	0x2000000c

0800222c <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8002230:	4b18      	ldr	r3, [pc, #96]	@ (8002294 <MX_SPI2_Init+0x68>)
 8002232:	4a19      	ldr	r2, [pc, #100]	@ (8002298 <MX_SPI2_Init+0x6c>)
 8002234:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002236:	4b17      	ldr	r3, [pc, #92]	@ (8002294 <MX_SPI2_Init+0x68>)
 8002238:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800223c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_1LINE;
 800223e:	4b15      	ldr	r3, [pc, #84]	@ (8002294 <MX_SPI2_Init+0x68>)
 8002240:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002244:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002246:	4b13      	ldr	r3, [pc, #76]	@ (8002294 <MX_SPI2_Init+0x68>)
 8002248:	2200      	movs	r2, #0
 800224a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800224c:	4b11      	ldr	r3, [pc, #68]	@ (8002294 <MX_SPI2_Init+0x68>)
 800224e:	2200      	movs	r2, #0
 8002250:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002252:	4b10      	ldr	r3, [pc, #64]	@ (8002294 <MX_SPI2_Init+0x68>)
 8002254:	2200      	movs	r2, #0
 8002256:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002258:	4b0e      	ldr	r3, [pc, #56]	@ (8002294 <MX_SPI2_Init+0x68>)
 800225a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800225e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8002260:	4b0c      	ldr	r3, [pc, #48]	@ (8002294 <MX_SPI2_Init+0x68>)
 8002262:	2208      	movs	r2, #8
 8002264:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002266:	4b0b      	ldr	r3, [pc, #44]	@ (8002294 <MX_SPI2_Init+0x68>)
 8002268:	2200      	movs	r2, #0
 800226a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800226c:	4b09      	ldr	r3, [pc, #36]	@ (8002294 <MX_SPI2_Init+0x68>)
 800226e:	2200      	movs	r2, #0
 8002270:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002272:	4b08      	ldr	r3, [pc, #32]	@ (8002294 <MX_SPI2_Init+0x68>)
 8002274:	2200      	movs	r2, #0
 8002276:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8002278:	4b06      	ldr	r3, [pc, #24]	@ (8002294 <MX_SPI2_Init+0x68>)
 800227a:	220a      	movs	r2, #10
 800227c:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800227e:	4805      	ldr	r0, [pc, #20]	@ (8002294 <MX_SPI2_Init+0x68>)
 8002280:	f002 ffd6 	bl	8005230 <HAL_SPI_Init>
 8002284:	4603      	mov	r3, r0
 8002286:	2b00      	cmp	r3, #0
 8002288:	d001      	beq.n	800228e <MX_SPI2_Init+0x62>
  {
    Error_Handler();
 800228a:	f7ff fd95 	bl	8001db8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800228e:	bf00      	nop
 8002290:	bd80      	pop	{r7, pc}
 8002292:	bf00      	nop
 8002294:	20000184 	.word	0x20000184
 8002298:	40003800 	.word	0x40003800

0800229c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b08a      	sub	sp, #40	@ 0x28
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022a4:	f107 0314 	add.w	r3, r7, #20
 80022a8:	2200      	movs	r2, #0
 80022aa:	601a      	str	r2, [r3, #0]
 80022ac:	605a      	str	r2, [r3, #4]
 80022ae:	609a      	str	r2, [r3, #8]
 80022b0:	60da      	str	r2, [r3, #12]
 80022b2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a28      	ldr	r2, [pc, #160]	@ (800235c <HAL_SPI_MspInit+0xc0>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d14a      	bne.n	8002354 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80022be:	2300      	movs	r3, #0
 80022c0:	613b      	str	r3, [r7, #16]
 80022c2:	4b27      	ldr	r3, [pc, #156]	@ (8002360 <HAL_SPI_MspInit+0xc4>)
 80022c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022c6:	4a26      	ldr	r2, [pc, #152]	@ (8002360 <HAL_SPI_MspInit+0xc4>)
 80022c8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80022cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80022ce:	4b24      	ldr	r3, [pc, #144]	@ (8002360 <HAL_SPI_MspInit+0xc4>)
 80022d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80022d6:	613b      	str	r3, [r7, #16]
 80022d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80022da:	2300      	movs	r3, #0
 80022dc:	60fb      	str	r3, [r7, #12]
 80022de:	4b20      	ldr	r3, [pc, #128]	@ (8002360 <HAL_SPI_MspInit+0xc4>)
 80022e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022e2:	4a1f      	ldr	r2, [pc, #124]	@ (8002360 <HAL_SPI_MspInit+0xc4>)
 80022e4:	f043 0304 	orr.w	r3, r3, #4
 80022e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80022ea:	4b1d      	ldr	r3, [pc, #116]	@ (8002360 <HAL_SPI_MspInit+0xc4>)
 80022ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022ee:	f003 0304 	and.w	r3, r3, #4
 80022f2:	60fb      	str	r3, [r7, #12]
 80022f4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022f6:	2300      	movs	r3, #0
 80022f8:	60bb      	str	r3, [r7, #8]
 80022fa:	4b19      	ldr	r3, [pc, #100]	@ (8002360 <HAL_SPI_MspInit+0xc4>)
 80022fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022fe:	4a18      	ldr	r2, [pc, #96]	@ (8002360 <HAL_SPI_MspInit+0xc4>)
 8002300:	f043 0302 	orr.w	r3, r3, #2
 8002304:	6313      	str	r3, [r2, #48]	@ 0x30
 8002306:	4b16      	ldr	r3, [pc, #88]	@ (8002360 <HAL_SPI_MspInit+0xc4>)
 8002308:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800230a:	f003 0302 	and.w	r3, r3, #2
 800230e:	60bb      	str	r3, [r7, #8]
 8002310:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC1     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002312:	2302      	movs	r3, #2
 8002314:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002316:	2302      	movs	r3, #2
 8002318:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800231a:	2300      	movs	r3, #0
 800231c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800231e:	2303      	movs	r3, #3
 8002320:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 8002322:	2307      	movs	r3, #7
 8002324:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002326:	f107 0314 	add.w	r3, r7, #20
 800232a:	4619      	mov	r1, r3
 800232c:	480d      	ldr	r0, [pc, #52]	@ (8002364 <HAL_SPI_MspInit+0xc8>)
 800232e:	f000 ffbf 	bl	80032b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002332:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002336:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002338:	2302      	movs	r3, #2
 800233a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800233c:	2300      	movs	r3, #0
 800233e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002340:	2303      	movs	r3, #3
 8002342:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002344:	2305      	movs	r3, #5
 8002346:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002348:	f107 0314 	add.w	r3, r7, #20
 800234c:	4619      	mov	r1, r3
 800234e:	4806      	ldr	r0, [pc, #24]	@ (8002368 <HAL_SPI_MspInit+0xcc>)
 8002350:	f000 ffae 	bl	80032b0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8002354:	bf00      	nop
 8002356:	3728      	adds	r7, #40	@ 0x28
 8002358:	46bd      	mov	sp, r7
 800235a:	bd80      	pop	{r7, pc}
 800235c:	40003800 	.word	0x40003800
 8002360:	40023800 	.word	0x40023800
 8002364:	40020800 	.word	0x40020800
 8002368:	40020400 	.word	0x40020400

0800236c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b082      	sub	sp, #8
 8002370:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002372:	2300      	movs	r3, #0
 8002374:	607b      	str	r3, [r7, #4]
 8002376:	4b10      	ldr	r3, [pc, #64]	@ (80023b8 <HAL_MspInit+0x4c>)
 8002378:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800237a:	4a0f      	ldr	r2, [pc, #60]	@ (80023b8 <HAL_MspInit+0x4c>)
 800237c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002380:	6453      	str	r3, [r2, #68]	@ 0x44
 8002382:	4b0d      	ldr	r3, [pc, #52]	@ (80023b8 <HAL_MspInit+0x4c>)
 8002384:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002386:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800238a:	607b      	str	r3, [r7, #4]
 800238c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800238e:	2300      	movs	r3, #0
 8002390:	603b      	str	r3, [r7, #0]
 8002392:	4b09      	ldr	r3, [pc, #36]	@ (80023b8 <HAL_MspInit+0x4c>)
 8002394:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002396:	4a08      	ldr	r2, [pc, #32]	@ (80023b8 <HAL_MspInit+0x4c>)
 8002398:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800239c:	6413      	str	r3, [r2, #64]	@ 0x40
 800239e:	4b06      	ldr	r3, [pc, #24]	@ (80023b8 <HAL_MspInit+0x4c>)
 80023a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023a6:	603b      	str	r3, [r7, #0]
 80023a8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80023aa:	2007      	movs	r0, #7
 80023ac:	f000 ff3e 	bl	800322c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80023b0:	bf00      	nop
 80023b2:	3708      	adds	r7, #8
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bd80      	pop	{r7, pc}
 80023b8:	40023800 	.word	0x40023800

080023bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80023bc:	b480      	push	{r7}
 80023be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80023c0:	bf00      	nop
 80023c2:	e7fd      	b.n	80023c0 <NMI_Handler+0x4>

080023c4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023c4:	b480      	push	{r7}
 80023c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023c8:	bf00      	nop
 80023ca:	e7fd      	b.n	80023c8 <HardFault_Handler+0x4>

080023cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80023cc:	b480      	push	{r7}
 80023ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80023d0:	bf00      	nop
 80023d2:	e7fd      	b.n	80023d0 <MemManage_Handler+0x4>

080023d4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80023d4:	b480      	push	{r7}
 80023d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023d8:	bf00      	nop
 80023da:	e7fd      	b.n	80023d8 <BusFault_Handler+0x4>

080023dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80023dc:	b480      	push	{r7}
 80023de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80023e0:	bf00      	nop
 80023e2:	e7fd      	b.n	80023e0 <UsageFault_Handler+0x4>

080023e4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80023e4:	b480      	push	{r7}
 80023e6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80023e8:	bf00      	nop
 80023ea:	46bd      	mov	sp, r7
 80023ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f0:	4770      	bx	lr

080023f2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80023f2:	b480      	push	{r7}
 80023f4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80023f6:	bf00      	nop
 80023f8:	46bd      	mov	sp, r7
 80023fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fe:	4770      	bx	lr

08002400 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002400:	b480      	push	{r7}
 8002402:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002404:	bf00      	nop
 8002406:	46bd      	mov	sp, r7
 8002408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240c:	4770      	bx	lr

0800240e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800240e:	b580      	push	{r7, lr}
 8002410:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002412:	f000 fdf7 	bl	8003004 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002416:	bf00      	nop
 8002418:	bd80      	pop	{r7, pc}

0800241a <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800241a:	b580      	push	{r7, lr}
 800241c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Encodeur_G_A_Pin);
 800241e:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8002422:	f001 f90b 	bl	800363c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Encodeur_D_A_Pin);
 8002426:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800242a:	f001 f907 	bl	800363c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800242e:	bf00      	nop
 8002430:	bd80      	pop	{r7, pc}

08002432 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002432:	b580      	push	{r7, lr}
 8002434:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Blue_Button_Pin);
 8002436:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800243a:	f001 f8ff 	bl	800363c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800243e:	bf00      	nop
 8002440:	bd80      	pop	{r7, pc}
	...

08002444 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002448:	4802      	ldr	r0, [pc, #8]	@ (8002454 <TIM6_DAC_IRQHandler+0x10>)
 800244a:	f003 fc1b 	bl	8005c84 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800244e:	bf00      	nop
 8002450:	bd80      	pop	{r7, pc}
 8002452:	bf00      	nop
 8002454:	20000270 	.word	0x20000270

08002458 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800245c:	4802      	ldr	r0, [pc, #8]	@ (8002468 <TIM7_IRQHandler+0x10>)
 800245e:	f003 fc11 	bl	8005c84 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8002462:	bf00      	nop
 8002464:	bd80      	pop	{r7, pc}
 8002466:	bf00      	nop
 8002468:	200002b8 	.word	0x200002b8

0800246c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b086      	sub	sp, #24
 8002470:	af00      	add	r7, sp, #0
 8002472:	60f8      	str	r0, [r7, #12]
 8002474:	60b9      	str	r1, [r7, #8]
 8002476:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002478:	2300      	movs	r3, #0
 800247a:	617b      	str	r3, [r7, #20]
 800247c:	e00a      	b.n	8002494 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800247e:	f3af 8000 	nop.w
 8002482:	4601      	mov	r1, r0
 8002484:	68bb      	ldr	r3, [r7, #8]
 8002486:	1c5a      	adds	r2, r3, #1
 8002488:	60ba      	str	r2, [r7, #8]
 800248a:	b2ca      	uxtb	r2, r1
 800248c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800248e:	697b      	ldr	r3, [r7, #20]
 8002490:	3301      	adds	r3, #1
 8002492:	617b      	str	r3, [r7, #20]
 8002494:	697a      	ldr	r2, [r7, #20]
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	429a      	cmp	r2, r3
 800249a:	dbf0      	blt.n	800247e <_read+0x12>
  }

  return len;
 800249c:	687b      	ldr	r3, [r7, #4]
}
 800249e:	4618      	mov	r0, r3
 80024a0:	3718      	adds	r7, #24
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}

080024a6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80024a6:	b580      	push	{r7, lr}
 80024a8:	b086      	sub	sp, #24
 80024aa:	af00      	add	r7, sp, #0
 80024ac:	60f8      	str	r0, [r7, #12]
 80024ae:	60b9      	str	r1, [r7, #8]
 80024b0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024b2:	2300      	movs	r3, #0
 80024b4:	617b      	str	r3, [r7, #20]
 80024b6:	e009      	b.n	80024cc <_write+0x26>
  {
    __io_putchar(*ptr++);
 80024b8:	68bb      	ldr	r3, [r7, #8]
 80024ba:	1c5a      	adds	r2, r3, #1
 80024bc:	60ba      	str	r2, [r7, #8]
 80024be:	781b      	ldrb	r3, [r3, #0]
 80024c0:	4618      	mov	r0, r3
 80024c2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024c6:	697b      	ldr	r3, [r7, #20]
 80024c8:	3301      	adds	r3, #1
 80024ca:	617b      	str	r3, [r7, #20]
 80024cc:	697a      	ldr	r2, [r7, #20]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	429a      	cmp	r2, r3
 80024d2:	dbf1      	blt.n	80024b8 <_write+0x12>
  }
  return len;
 80024d4:	687b      	ldr	r3, [r7, #4]
}
 80024d6:	4618      	mov	r0, r3
 80024d8:	3718      	adds	r7, #24
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}

080024de <_close>:

int _close(int file)
{
 80024de:	b480      	push	{r7}
 80024e0:	b083      	sub	sp, #12
 80024e2:	af00      	add	r7, sp, #0
 80024e4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80024e6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80024ea:	4618      	mov	r0, r3
 80024ec:	370c      	adds	r7, #12
 80024ee:	46bd      	mov	sp, r7
 80024f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f4:	4770      	bx	lr

080024f6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80024f6:	b480      	push	{r7}
 80024f8:	b083      	sub	sp, #12
 80024fa:	af00      	add	r7, sp, #0
 80024fc:	6078      	str	r0, [r7, #4]
 80024fe:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002506:	605a      	str	r2, [r3, #4]
  return 0;
 8002508:	2300      	movs	r3, #0
}
 800250a:	4618      	mov	r0, r3
 800250c:	370c      	adds	r7, #12
 800250e:	46bd      	mov	sp, r7
 8002510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002514:	4770      	bx	lr

08002516 <_isatty>:

int _isatty(int file)
{
 8002516:	b480      	push	{r7}
 8002518:	b083      	sub	sp, #12
 800251a:	af00      	add	r7, sp, #0
 800251c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800251e:	2301      	movs	r3, #1
}
 8002520:	4618      	mov	r0, r3
 8002522:	370c      	adds	r7, #12
 8002524:	46bd      	mov	sp, r7
 8002526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252a:	4770      	bx	lr

0800252c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800252c:	b480      	push	{r7}
 800252e:	b085      	sub	sp, #20
 8002530:	af00      	add	r7, sp, #0
 8002532:	60f8      	str	r0, [r7, #12]
 8002534:	60b9      	str	r1, [r7, #8]
 8002536:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002538:	2300      	movs	r3, #0
}
 800253a:	4618      	mov	r0, r3
 800253c:	3714      	adds	r7, #20
 800253e:	46bd      	mov	sp, r7
 8002540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002544:	4770      	bx	lr
	...

08002548 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b086      	sub	sp, #24
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002550:	4a14      	ldr	r2, [pc, #80]	@ (80025a4 <_sbrk+0x5c>)
 8002552:	4b15      	ldr	r3, [pc, #84]	@ (80025a8 <_sbrk+0x60>)
 8002554:	1ad3      	subs	r3, r2, r3
 8002556:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002558:	697b      	ldr	r3, [r7, #20]
 800255a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800255c:	4b13      	ldr	r3, [pc, #76]	@ (80025ac <_sbrk+0x64>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d102      	bne.n	800256a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002564:	4b11      	ldr	r3, [pc, #68]	@ (80025ac <_sbrk+0x64>)
 8002566:	4a12      	ldr	r2, [pc, #72]	@ (80025b0 <_sbrk+0x68>)
 8002568:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800256a:	4b10      	ldr	r3, [pc, #64]	@ (80025ac <_sbrk+0x64>)
 800256c:	681a      	ldr	r2, [r3, #0]
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	4413      	add	r3, r2
 8002572:	693a      	ldr	r2, [r7, #16]
 8002574:	429a      	cmp	r2, r3
 8002576:	d207      	bcs.n	8002588 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002578:	f005 fcb2 	bl	8007ee0 <__errno>
 800257c:	4603      	mov	r3, r0
 800257e:	220c      	movs	r2, #12
 8002580:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002582:	f04f 33ff 	mov.w	r3, #4294967295
 8002586:	e009      	b.n	800259c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002588:	4b08      	ldr	r3, [pc, #32]	@ (80025ac <_sbrk+0x64>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800258e:	4b07      	ldr	r3, [pc, #28]	@ (80025ac <_sbrk+0x64>)
 8002590:	681a      	ldr	r2, [r3, #0]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	4413      	add	r3, r2
 8002596:	4a05      	ldr	r2, [pc, #20]	@ (80025ac <_sbrk+0x64>)
 8002598:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800259a:	68fb      	ldr	r3, [r7, #12]
}
 800259c:	4618      	mov	r0, r3
 800259e:	3718      	adds	r7, #24
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bd80      	pop	{r7, pc}
 80025a4:	20020000 	.word	0x20020000
 80025a8:	00000400 	.word	0x00000400
 80025ac:	200001dc 	.word	0x200001dc
 80025b0:	200004b8 	.word	0x200004b8

080025b4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80025b4:	b480      	push	{r7}
 80025b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80025b8:	4b06      	ldr	r3, [pc, #24]	@ (80025d4 <SystemInit+0x20>)
 80025ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025be:	4a05      	ldr	r2, [pc, #20]	@ (80025d4 <SystemInit+0x20>)
 80025c0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80025c4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80025c8:	bf00      	nop
 80025ca:	46bd      	mov	sp, r7
 80025cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d0:	4770      	bx	lr
 80025d2:	bf00      	nop
 80025d4:	e000ed00 	.word	0xe000ed00

080025d8 <MX_TIM3_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim7;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b08e      	sub	sp, #56	@ 0x38
 80025dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80025de:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80025e2:	2200      	movs	r2, #0
 80025e4:	601a      	str	r2, [r3, #0]
 80025e6:	605a      	str	r2, [r3, #4]
 80025e8:	609a      	str	r2, [r3, #8]
 80025ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025ec:	f107 0320 	add.w	r3, r7, #32
 80025f0:	2200      	movs	r2, #0
 80025f2:	601a      	str	r2, [r3, #0]
 80025f4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80025f6:	1d3b      	adds	r3, r7, #4
 80025f8:	2200      	movs	r2, #0
 80025fa:	601a      	str	r2, [r3, #0]
 80025fc:	605a      	str	r2, [r3, #4]
 80025fe:	609a      	str	r2, [r3, #8]
 8002600:	60da      	str	r2, [r3, #12]
 8002602:	611a      	str	r2, [r3, #16]
 8002604:	615a      	str	r2, [r3, #20]
 8002606:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002608:	4b3d      	ldr	r3, [pc, #244]	@ (8002700 <MX_TIM3_Init+0x128>)
 800260a:	4a3e      	ldr	r2, [pc, #248]	@ (8002704 <MX_TIM3_Init+0x12c>)
 800260c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84-1;
 800260e:	4b3c      	ldr	r3, [pc, #240]	@ (8002700 <MX_TIM3_Init+0x128>)
 8002610:	2253      	movs	r2, #83	@ 0x53
 8002612:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002614:	4b3a      	ldr	r3, [pc, #232]	@ (8002700 <MX_TIM3_Init+0x128>)
 8002616:	2200      	movs	r2, #0
 8002618:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 500-1;
 800261a:	4b39      	ldr	r3, [pc, #228]	@ (8002700 <MX_TIM3_Init+0x128>)
 800261c:	f240 12f3 	movw	r2, #499	@ 0x1f3
 8002620:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002622:	4b37      	ldr	r3, [pc, #220]	@ (8002700 <MX_TIM3_Init+0x128>)
 8002624:	2200      	movs	r2, #0
 8002626:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002628:	4b35      	ldr	r3, [pc, #212]	@ (8002700 <MX_TIM3_Init+0x128>)
 800262a:	2200      	movs	r2, #0
 800262c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800262e:	4834      	ldr	r0, [pc, #208]	@ (8002700 <MX_TIM3_Init+0x128>)
 8002630:	f003 f8a8 	bl	8005784 <HAL_TIM_Base_Init>
 8002634:	4603      	mov	r3, r0
 8002636:	2b00      	cmp	r3, #0
 8002638:	d001      	beq.n	800263e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800263a:	f7ff fbbd 	bl	8001db8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800263e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002642:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002644:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002648:	4619      	mov	r1, r3
 800264a:	482d      	ldr	r0, [pc, #180]	@ (8002700 <MX_TIM3_Init+0x128>)
 800264c:	f003 fccc 	bl	8005fe8 <HAL_TIM_ConfigClockSource>
 8002650:	4603      	mov	r3, r0
 8002652:	2b00      	cmp	r3, #0
 8002654:	d001      	beq.n	800265a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8002656:	f7ff fbaf 	bl	8001db8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800265a:	4829      	ldr	r0, [pc, #164]	@ (8002700 <MX_TIM3_Init+0x128>)
 800265c:	f003 f981 	bl	8005962 <HAL_TIM_PWM_Init>
 8002660:	4603      	mov	r3, r0
 8002662:	2b00      	cmp	r3, #0
 8002664:	d001      	beq.n	800266a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8002666:	f7ff fba7 	bl	8001db8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800266a:	2300      	movs	r3, #0
 800266c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800266e:	2300      	movs	r3, #0
 8002670:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002672:	f107 0320 	add.w	r3, r7, #32
 8002676:	4619      	mov	r1, r3
 8002678:	4821      	ldr	r0, [pc, #132]	@ (8002700 <MX_TIM3_Init+0x128>)
 800267a:	f004 f8c1 	bl	8006800 <HAL_TIMEx_MasterConfigSynchronization>
 800267e:	4603      	mov	r3, r0
 8002680:	2b00      	cmp	r3, #0
 8002682:	d001      	beq.n	8002688 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8002684:	f7ff fb98 	bl	8001db8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002688:	2360      	movs	r3, #96	@ 0x60
 800268a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800268c:	2300      	movs	r3, #0
 800268e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002690:	2300      	movs	r3, #0
 8002692:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002694:	2300      	movs	r3, #0
 8002696:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002698:	1d3b      	adds	r3, r7, #4
 800269a:	2200      	movs	r2, #0
 800269c:	4619      	mov	r1, r3
 800269e:	4818      	ldr	r0, [pc, #96]	@ (8002700 <MX_TIM3_Init+0x128>)
 80026a0:	f003 fbe0 	bl	8005e64 <HAL_TIM_PWM_ConfigChannel>
 80026a4:	4603      	mov	r3, r0
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d001      	beq.n	80026ae <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80026aa:	f7ff fb85 	bl	8001db8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80026ae:	1d3b      	adds	r3, r7, #4
 80026b0:	2204      	movs	r2, #4
 80026b2:	4619      	mov	r1, r3
 80026b4:	4812      	ldr	r0, [pc, #72]	@ (8002700 <MX_TIM3_Init+0x128>)
 80026b6:	f003 fbd5 	bl	8005e64 <HAL_TIM_PWM_ConfigChannel>
 80026ba:	4603      	mov	r3, r0
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d001      	beq.n	80026c4 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 80026c0:	f7ff fb7a 	bl	8001db8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80026c4:	1d3b      	adds	r3, r7, #4
 80026c6:	2208      	movs	r2, #8
 80026c8:	4619      	mov	r1, r3
 80026ca:	480d      	ldr	r0, [pc, #52]	@ (8002700 <MX_TIM3_Init+0x128>)
 80026cc:	f003 fbca 	bl	8005e64 <HAL_TIM_PWM_ConfigChannel>
 80026d0:	4603      	mov	r3, r0
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d001      	beq.n	80026da <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 80026d6:	f7ff fb6f 	bl	8001db8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80026da:	1d3b      	adds	r3, r7, #4
 80026dc:	220c      	movs	r2, #12
 80026de:	4619      	mov	r1, r3
 80026e0:	4807      	ldr	r0, [pc, #28]	@ (8002700 <MX_TIM3_Init+0x128>)
 80026e2:	f003 fbbf 	bl	8005e64 <HAL_TIM_PWM_ConfigChannel>
 80026e6:	4603      	mov	r3, r0
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d001      	beq.n	80026f0 <MX_TIM3_Init+0x118>
  {
    Error_Handler();
 80026ec:	f7ff fb64 	bl	8001db8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80026f0:	4803      	ldr	r0, [pc, #12]	@ (8002700 <MX_TIM3_Init+0x128>)
 80026f2:	f000 f95d 	bl	80029b0 <HAL_TIM_MspPostInit>

}
 80026f6:	bf00      	nop
 80026f8:	3738      	adds	r7, #56	@ 0x38
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}
 80026fe:	bf00      	nop
 8002700:	200001e0 	.word	0x200001e0
 8002704:	40000400 	.word	0x40000400

08002708 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b08e      	sub	sp, #56	@ 0x38
 800270c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800270e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002712:	2200      	movs	r2, #0
 8002714:	601a      	str	r2, [r3, #0]
 8002716:	605a      	str	r2, [r3, #4]
 8002718:	609a      	str	r2, [r3, #8]
 800271a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800271c:	f107 0320 	add.w	r3, r7, #32
 8002720:	2200      	movs	r2, #0
 8002722:	601a      	str	r2, [r3, #0]
 8002724:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002726:	1d3b      	adds	r3, r7, #4
 8002728:	2200      	movs	r2, #0
 800272a:	601a      	str	r2, [r3, #0]
 800272c:	605a      	str	r2, [r3, #4]
 800272e:	609a      	str	r2, [r3, #8]
 8002730:	60da      	str	r2, [r3, #12]
 8002732:	611a      	str	r2, [r3, #16]
 8002734:	615a      	str	r2, [r3, #20]
 8002736:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002738:	4b2d      	ldr	r3, [pc, #180]	@ (80027f0 <MX_TIM4_Init+0xe8>)
 800273a:	4a2e      	ldr	r2, [pc, #184]	@ (80027f4 <MX_TIM4_Init+0xec>)
 800273c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 300-1;
 800273e:	4b2c      	ldr	r3, [pc, #176]	@ (80027f0 <MX_TIM4_Init+0xe8>)
 8002740:	f240 122b 	movw	r2, #299	@ 0x12b
 8002744:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002746:	4b2a      	ldr	r3, [pc, #168]	@ (80027f0 <MX_TIM4_Init+0xe8>)
 8002748:	2200      	movs	r2, #0
 800274a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000-1;
 800274c:	4b28      	ldr	r3, [pc, #160]	@ (80027f0 <MX_TIM4_Init+0xe8>)
 800274e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002752:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002754:	4b26      	ldr	r3, [pc, #152]	@ (80027f0 <MX_TIM4_Init+0xe8>)
 8002756:	2200      	movs	r2, #0
 8002758:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800275a:	4b25      	ldr	r3, [pc, #148]	@ (80027f0 <MX_TIM4_Init+0xe8>)
 800275c:	2200      	movs	r2, #0
 800275e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002760:	4823      	ldr	r0, [pc, #140]	@ (80027f0 <MX_TIM4_Init+0xe8>)
 8002762:	f003 f80f 	bl	8005784 <HAL_TIM_Base_Init>
 8002766:	4603      	mov	r3, r0
 8002768:	2b00      	cmp	r3, #0
 800276a:	d001      	beq.n	8002770 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 800276c:	f7ff fb24 	bl	8001db8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002770:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002774:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002776:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800277a:	4619      	mov	r1, r3
 800277c:	481c      	ldr	r0, [pc, #112]	@ (80027f0 <MX_TIM4_Init+0xe8>)
 800277e:	f003 fc33 	bl	8005fe8 <HAL_TIM_ConfigClockSource>
 8002782:	4603      	mov	r3, r0
 8002784:	2b00      	cmp	r3, #0
 8002786:	d001      	beq.n	800278c <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8002788:	f7ff fb16 	bl	8001db8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800278c:	4818      	ldr	r0, [pc, #96]	@ (80027f0 <MX_TIM4_Init+0xe8>)
 800278e:	f003 f8e8 	bl	8005962 <HAL_TIM_PWM_Init>
 8002792:	4603      	mov	r3, r0
 8002794:	2b00      	cmp	r3, #0
 8002796:	d001      	beq.n	800279c <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8002798:	f7ff fb0e 	bl	8001db8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800279c:	2300      	movs	r3, #0
 800279e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80027a0:	2300      	movs	r3, #0
 80027a2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80027a4:	f107 0320 	add.w	r3, r7, #32
 80027a8:	4619      	mov	r1, r3
 80027aa:	4811      	ldr	r0, [pc, #68]	@ (80027f0 <MX_TIM4_Init+0xe8>)
 80027ac:	f004 f828 	bl	8006800 <HAL_TIMEx_MasterConfigSynchronization>
 80027b0:	4603      	mov	r3, r0
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d001      	beq.n	80027ba <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 80027b6:	f7ff faff 	bl	8001db8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80027ba:	2360      	movs	r3, #96	@ 0x60
 80027bc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 995;
 80027be:	f240 33e3 	movw	r3, #995	@ 0x3e3
 80027c2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80027c4:	2300      	movs	r3, #0
 80027c6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80027c8:	2300      	movs	r3, #0
 80027ca:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80027cc:	1d3b      	adds	r3, r7, #4
 80027ce:	2204      	movs	r2, #4
 80027d0:	4619      	mov	r1, r3
 80027d2:	4807      	ldr	r0, [pc, #28]	@ (80027f0 <MX_TIM4_Init+0xe8>)
 80027d4:	f003 fb46 	bl	8005e64 <HAL_TIM_PWM_ConfigChannel>
 80027d8:	4603      	mov	r3, r0
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d001      	beq.n	80027e2 <MX_TIM4_Init+0xda>
  {
    Error_Handler();
 80027de:	f7ff faeb 	bl	8001db8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80027e2:	4803      	ldr	r0, [pc, #12]	@ (80027f0 <MX_TIM4_Init+0xe8>)
 80027e4:	f000 f8e4 	bl	80029b0 <HAL_TIM_MspPostInit>

}
 80027e8:	bf00      	nop
 80027ea:	3738      	adds	r7, #56	@ 0x38
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bd80      	pop	{r7, pc}
 80027f0:	20000228 	.word	0x20000228
 80027f4:	40000800 	.word	0x40000800

080027f8 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b082      	sub	sp, #8
 80027fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027fe:	463b      	mov	r3, r7
 8002800:	2200      	movs	r2, #0
 8002802:	601a      	str	r2, [r3, #0]
 8002804:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002806:	4b15      	ldr	r3, [pc, #84]	@ (800285c <MX_TIM6_Init+0x64>)
 8002808:	4a15      	ldr	r2, [pc, #84]	@ (8002860 <MX_TIM6_Init+0x68>)
 800280a:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 42000-1;
 800280c:	4b13      	ldr	r3, [pc, #76]	@ (800285c <MX_TIM6_Init+0x64>)
 800280e:	f24a 420f 	movw	r2, #41999	@ 0xa40f
 8002812:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002814:	4b11      	ldr	r3, [pc, #68]	@ (800285c <MX_TIM6_Init+0x64>)
 8002816:	2200      	movs	r2, #0
 8002818:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 400-1;
 800281a:	4b10      	ldr	r3, [pc, #64]	@ (800285c <MX_TIM6_Init+0x64>)
 800281c:	f240 128f 	movw	r2, #399	@ 0x18f
 8002820:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002822:	4b0e      	ldr	r3, [pc, #56]	@ (800285c <MX_TIM6_Init+0x64>)
 8002824:	2200      	movs	r2, #0
 8002826:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002828:	480c      	ldr	r0, [pc, #48]	@ (800285c <MX_TIM6_Init+0x64>)
 800282a:	f002 ffab 	bl	8005784 <HAL_TIM_Base_Init>
 800282e:	4603      	mov	r3, r0
 8002830:	2b00      	cmp	r3, #0
 8002832:	d001      	beq.n	8002838 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8002834:	f7ff fac0 	bl	8001db8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002838:	2320      	movs	r3, #32
 800283a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800283c:	2300      	movs	r3, #0
 800283e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002840:	463b      	mov	r3, r7
 8002842:	4619      	mov	r1, r3
 8002844:	4805      	ldr	r0, [pc, #20]	@ (800285c <MX_TIM6_Init+0x64>)
 8002846:	f003 ffdb 	bl	8006800 <HAL_TIMEx_MasterConfigSynchronization>
 800284a:	4603      	mov	r3, r0
 800284c:	2b00      	cmp	r3, #0
 800284e:	d001      	beq.n	8002854 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8002850:	f7ff fab2 	bl	8001db8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002854:	bf00      	nop
 8002856:	3708      	adds	r7, #8
 8002858:	46bd      	mov	sp, r7
 800285a:	bd80      	pop	{r7, pc}
 800285c:	20000270 	.word	0x20000270
 8002860:	40001000 	.word	0x40001000

08002864 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b082      	sub	sp, #8
 8002868:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800286a:	463b      	mov	r3, r7
 800286c:	2200      	movs	r2, #0
 800286e:	601a      	str	r2, [r3, #0]
 8002870:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8002872:	4b14      	ldr	r3, [pc, #80]	@ (80028c4 <MX_TIM7_Init+0x60>)
 8002874:	4a14      	ldr	r2, [pc, #80]	@ (80028c8 <MX_TIM7_Init+0x64>)
 8002876:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 83;
 8002878:	4b12      	ldr	r3, [pc, #72]	@ (80028c4 <MX_TIM7_Init+0x60>)
 800287a:	2253      	movs	r2, #83	@ 0x53
 800287c:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800287e:	4b11      	ldr	r3, [pc, #68]	@ (80028c4 <MX_TIM7_Init+0x60>)
 8002880:	2200      	movs	r2, #0
 8002882:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 9;
 8002884:	4b0f      	ldr	r3, [pc, #60]	@ (80028c4 <MX_TIM7_Init+0x60>)
 8002886:	2209      	movs	r2, #9
 8002888:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800288a:	4b0e      	ldr	r3, [pc, #56]	@ (80028c4 <MX_TIM7_Init+0x60>)
 800288c:	2200      	movs	r2, #0
 800288e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8002890:	480c      	ldr	r0, [pc, #48]	@ (80028c4 <MX_TIM7_Init+0x60>)
 8002892:	f002 ff77 	bl	8005784 <HAL_TIM_Base_Init>
 8002896:	4603      	mov	r3, r0
 8002898:	2b00      	cmp	r3, #0
 800289a:	d001      	beq.n	80028a0 <MX_TIM7_Init+0x3c>
  {
    Error_Handler();
 800289c:	f7ff fa8c 	bl	8001db8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80028a0:	2300      	movs	r3, #0
 80028a2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80028a4:	2300      	movs	r3, #0
 80028a6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80028a8:	463b      	mov	r3, r7
 80028aa:	4619      	mov	r1, r3
 80028ac:	4805      	ldr	r0, [pc, #20]	@ (80028c4 <MX_TIM7_Init+0x60>)
 80028ae:	f003 ffa7 	bl	8006800 <HAL_TIMEx_MasterConfigSynchronization>
 80028b2:	4603      	mov	r3, r0
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d001      	beq.n	80028bc <MX_TIM7_Init+0x58>
  {
    Error_Handler();
 80028b8:	f7ff fa7e 	bl	8001db8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80028bc:	bf00      	nop
 80028be:	3708      	adds	r7, #8
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bd80      	pop	{r7, pc}
 80028c4:	200002b8 	.word	0x200002b8
 80028c8:	40001400 	.word	0x40001400

080028cc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b086      	sub	sp, #24
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a30      	ldr	r2, [pc, #192]	@ (800299c <HAL_TIM_Base_MspInit+0xd0>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d10e      	bne.n	80028fc <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80028de:	2300      	movs	r3, #0
 80028e0:	617b      	str	r3, [r7, #20]
 80028e2:	4b2f      	ldr	r3, [pc, #188]	@ (80029a0 <HAL_TIM_Base_MspInit+0xd4>)
 80028e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028e6:	4a2e      	ldr	r2, [pc, #184]	@ (80029a0 <HAL_TIM_Base_MspInit+0xd4>)
 80028e8:	f043 0302 	orr.w	r3, r3, #2
 80028ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80028ee:	4b2c      	ldr	r3, [pc, #176]	@ (80029a0 <HAL_TIM_Base_MspInit+0xd4>)
 80028f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028f2:	f003 0302 	and.w	r3, r3, #2
 80028f6:	617b      	str	r3, [r7, #20]
 80028f8:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 80028fa:	e04a      	b.n	8002992 <HAL_TIM_Base_MspInit+0xc6>
  else if(tim_baseHandle->Instance==TIM4)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a28      	ldr	r2, [pc, #160]	@ (80029a4 <HAL_TIM_Base_MspInit+0xd8>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d10e      	bne.n	8002924 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002906:	2300      	movs	r3, #0
 8002908:	613b      	str	r3, [r7, #16]
 800290a:	4b25      	ldr	r3, [pc, #148]	@ (80029a0 <HAL_TIM_Base_MspInit+0xd4>)
 800290c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800290e:	4a24      	ldr	r2, [pc, #144]	@ (80029a0 <HAL_TIM_Base_MspInit+0xd4>)
 8002910:	f043 0304 	orr.w	r3, r3, #4
 8002914:	6413      	str	r3, [r2, #64]	@ 0x40
 8002916:	4b22      	ldr	r3, [pc, #136]	@ (80029a0 <HAL_TIM_Base_MspInit+0xd4>)
 8002918:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800291a:	f003 0304 	and.w	r3, r3, #4
 800291e:	613b      	str	r3, [r7, #16]
 8002920:	693b      	ldr	r3, [r7, #16]
}
 8002922:	e036      	b.n	8002992 <HAL_TIM_Base_MspInit+0xc6>
  else if(tim_baseHandle->Instance==TIM6)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a1f      	ldr	r2, [pc, #124]	@ (80029a8 <HAL_TIM_Base_MspInit+0xdc>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d116      	bne.n	800295c <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800292e:	2300      	movs	r3, #0
 8002930:	60fb      	str	r3, [r7, #12]
 8002932:	4b1b      	ldr	r3, [pc, #108]	@ (80029a0 <HAL_TIM_Base_MspInit+0xd4>)
 8002934:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002936:	4a1a      	ldr	r2, [pc, #104]	@ (80029a0 <HAL_TIM_Base_MspInit+0xd4>)
 8002938:	f043 0310 	orr.w	r3, r3, #16
 800293c:	6413      	str	r3, [r2, #64]	@ 0x40
 800293e:	4b18      	ldr	r3, [pc, #96]	@ (80029a0 <HAL_TIM_Base_MspInit+0xd4>)
 8002940:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002942:	f003 0310 	and.w	r3, r3, #16
 8002946:	60fb      	str	r3, [r7, #12]
 8002948:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800294a:	2200      	movs	r2, #0
 800294c:	2100      	movs	r1, #0
 800294e:	2036      	movs	r0, #54	@ 0x36
 8002950:	f000 fc77 	bl	8003242 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002954:	2036      	movs	r0, #54	@ 0x36
 8002956:	f000 fc90 	bl	800327a <HAL_NVIC_EnableIRQ>
}
 800295a:	e01a      	b.n	8002992 <HAL_TIM_Base_MspInit+0xc6>
  else if(tim_baseHandle->Instance==TIM7)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a12      	ldr	r2, [pc, #72]	@ (80029ac <HAL_TIM_Base_MspInit+0xe0>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d115      	bne.n	8002992 <HAL_TIM_Base_MspInit+0xc6>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002966:	2300      	movs	r3, #0
 8002968:	60bb      	str	r3, [r7, #8]
 800296a:	4b0d      	ldr	r3, [pc, #52]	@ (80029a0 <HAL_TIM_Base_MspInit+0xd4>)
 800296c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800296e:	4a0c      	ldr	r2, [pc, #48]	@ (80029a0 <HAL_TIM_Base_MspInit+0xd4>)
 8002970:	f043 0320 	orr.w	r3, r3, #32
 8002974:	6413      	str	r3, [r2, #64]	@ 0x40
 8002976:	4b0a      	ldr	r3, [pc, #40]	@ (80029a0 <HAL_TIM_Base_MspInit+0xd4>)
 8002978:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800297a:	f003 0320 	and.w	r3, r3, #32
 800297e:	60bb      	str	r3, [r7, #8]
 8002980:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8002982:	2200      	movs	r2, #0
 8002984:	2100      	movs	r1, #0
 8002986:	2037      	movs	r0, #55	@ 0x37
 8002988:	f000 fc5b 	bl	8003242 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800298c:	2037      	movs	r0, #55	@ 0x37
 800298e:	f000 fc74 	bl	800327a <HAL_NVIC_EnableIRQ>
}
 8002992:	bf00      	nop
 8002994:	3718      	adds	r7, #24
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}
 800299a:	bf00      	nop
 800299c:	40000400 	.word	0x40000400
 80029a0:	40023800 	.word	0x40023800
 80029a4:	40000800 	.word	0x40000800
 80029a8:	40001000 	.word	0x40001000
 80029ac:	40001400 	.word	0x40001400

080029b0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b08a      	sub	sp, #40	@ 0x28
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029b8:	f107 0314 	add.w	r3, r7, #20
 80029bc:	2200      	movs	r2, #0
 80029be:	601a      	str	r2, [r3, #0]
 80029c0:	605a      	str	r2, [r3, #4]
 80029c2:	609a      	str	r2, [r3, #8]
 80029c4:	60da      	str	r2, [r3, #12]
 80029c6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a33      	ldr	r2, [pc, #204]	@ (8002a9c <HAL_TIM_MspPostInit+0xec>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d13c      	bne.n	8002a4c <HAL_TIM_MspPostInit+0x9c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029d2:	2300      	movs	r3, #0
 80029d4:	613b      	str	r3, [r7, #16]
 80029d6:	4b32      	ldr	r3, [pc, #200]	@ (8002aa0 <HAL_TIM_MspPostInit+0xf0>)
 80029d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029da:	4a31      	ldr	r2, [pc, #196]	@ (8002aa0 <HAL_TIM_MspPostInit+0xf0>)
 80029dc:	f043 0301 	orr.w	r3, r3, #1
 80029e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80029e2:	4b2f      	ldr	r3, [pc, #188]	@ (8002aa0 <HAL_TIM_MspPostInit+0xf0>)
 80029e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029e6:	f003 0301 	and.w	r3, r3, #1
 80029ea:	613b      	str	r3, [r7, #16]
 80029ec:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029ee:	2300      	movs	r3, #0
 80029f0:	60fb      	str	r3, [r7, #12]
 80029f2:	4b2b      	ldr	r3, [pc, #172]	@ (8002aa0 <HAL_TIM_MspPostInit+0xf0>)
 80029f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029f6:	4a2a      	ldr	r2, [pc, #168]	@ (8002aa0 <HAL_TIM_MspPostInit+0xf0>)
 80029f8:	f043 0302 	orr.w	r3, r3, #2
 80029fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80029fe:	4b28      	ldr	r3, [pc, #160]	@ (8002aa0 <HAL_TIM_MspPostInit+0xf0>)
 8002a00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a02:	f003 0302 	and.w	r3, r3, #2
 8002a06:	60fb      	str	r3, [r7, #12]
 8002a08:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = Gauche_av_Pin|Gauche_re_Pin;
 8002a0a:	23c0      	movs	r3, #192	@ 0xc0
 8002a0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a0e:	2302      	movs	r3, #2
 8002a10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a12:	2300      	movs	r3, #0
 8002a14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a16:	2300      	movs	r3, #0
 8002a18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002a1a:	2302      	movs	r3, #2
 8002a1c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a1e:	f107 0314 	add.w	r3, r7, #20
 8002a22:	4619      	mov	r1, r3
 8002a24:	481f      	ldr	r0, [pc, #124]	@ (8002aa4 <HAL_TIM_MspPostInit+0xf4>)
 8002a26:	f000 fc43 	bl	80032b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Droit_av_Pin|Droit_re_Pin;
 8002a2a:	2303      	movs	r3, #3
 8002a2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a2e:	2302      	movs	r3, #2
 8002a30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a32:	2300      	movs	r3, #0
 8002a34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a36:	2300      	movs	r3, #0
 8002a38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002a3a:	2302      	movs	r3, #2
 8002a3c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a3e:	f107 0314 	add.w	r3, r7, #20
 8002a42:	4619      	mov	r1, r3
 8002a44:	4818      	ldr	r0, [pc, #96]	@ (8002aa8 <HAL_TIM_MspPostInit+0xf8>)
 8002a46:	f000 fc33 	bl	80032b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002a4a:	e022      	b.n	8002a92 <HAL_TIM_MspPostInit+0xe2>
  else if(timHandle->Instance==TIM4)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a16      	ldr	r2, [pc, #88]	@ (8002aac <HAL_TIM_MspPostInit+0xfc>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d11d      	bne.n	8002a92 <HAL_TIM_MspPostInit+0xe2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a56:	2300      	movs	r3, #0
 8002a58:	60bb      	str	r3, [r7, #8]
 8002a5a:	4b11      	ldr	r3, [pc, #68]	@ (8002aa0 <HAL_TIM_MspPostInit+0xf0>)
 8002a5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a5e:	4a10      	ldr	r2, [pc, #64]	@ (8002aa0 <HAL_TIM_MspPostInit+0xf0>)
 8002a60:	f043 0302 	orr.w	r3, r3, #2
 8002a64:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a66:	4b0e      	ldr	r3, [pc, #56]	@ (8002aa0 <HAL_TIM_MspPostInit+0xf0>)
 8002a68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a6a:	f003 0302 	and.w	r3, r3, #2
 8002a6e:	60bb      	str	r3, [r7, #8]
 8002a70:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = LCD_BL_Pin;
 8002a72:	2380      	movs	r3, #128	@ 0x80
 8002a74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a76:	2302      	movs	r3, #2
 8002a78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a7e:	2300      	movs	r3, #0
 8002a80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002a82:	2302      	movs	r3, #2
 8002a84:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(LCD_BL_GPIO_Port, &GPIO_InitStruct);
 8002a86:	f107 0314 	add.w	r3, r7, #20
 8002a8a:	4619      	mov	r1, r3
 8002a8c:	4806      	ldr	r0, [pc, #24]	@ (8002aa8 <HAL_TIM_MspPostInit+0xf8>)
 8002a8e:	f000 fc0f 	bl	80032b0 <HAL_GPIO_Init>
}
 8002a92:	bf00      	nop
 8002a94:	3728      	adds	r7, #40	@ 0x28
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}
 8002a9a:	bf00      	nop
 8002a9c:	40000400 	.word	0x40000400
 8002aa0:	40023800 	.word	0x40023800
 8002aa4:	40020000 	.word	0x40020000
 8002aa8:	40020400 	.word	0x40020400
 8002aac:	40000800 	.word	0x40000800

08002ab0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002ab4:	4b11      	ldr	r3, [pc, #68]	@ (8002afc <MX_USART2_UART_Init+0x4c>)
 8002ab6:	4a12      	ldr	r2, [pc, #72]	@ (8002b00 <MX_USART2_UART_Init+0x50>)
 8002ab8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002aba:	4b10      	ldr	r3, [pc, #64]	@ (8002afc <MX_USART2_UART_Init+0x4c>)
 8002abc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002ac0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002ac2:	4b0e      	ldr	r3, [pc, #56]	@ (8002afc <MX_USART2_UART_Init+0x4c>)
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002ac8:	4b0c      	ldr	r3, [pc, #48]	@ (8002afc <MX_USART2_UART_Init+0x4c>)
 8002aca:	2200      	movs	r2, #0
 8002acc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002ace:	4b0b      	ldr	r3, [pc, #44]	@ (8002afc <MX_USART2_UART_Init+0x4c>)
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002ad4:	4b09      	ldr	r3, [pc, #36]	@ (8002afc <MX_USART2_UART_Init+0x4c>)
 8002ad6:	220c      	movs	r2, #12
 8002ad8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002ada:	4b08      	ldr	r3, [pc, #32]	@ (8002afc <MX_USART2_UART_Init+0x4c>)
 8002adc:	2200      	movs	r2, #0
 8002ade:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ae0:	4b06      	ldr	r3, [pc, #24]	@ (8002afc <MX_USART2_UART_Init+0x4c>)
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002ae6:	4805      	ldr	r0, [pc, #20]	@ (8002afc <MX_USART2_UART_Init+0x4c>)
 8002ae8:	f003 ff1a 	bl	8006920 <HAL_UART_Init>
 8002aec:	4603      	mov	r3, r0
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d001      	beq.n	8002af6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002af2:	f7ff f961 	bl	8001db8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002af6:	bf00      	nop
 8002af8:	bd80      	pop	{r7, pc}
 8002afa:	bf00      	nop
 8002afc:	20000300 	.word	0x20000300
 8002b00:	40004400 	.word	0x40004400

08002b04 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b08a      	sub	sp, #40	@ 0x28
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b0c:	f107 0314 	add.w	r3, r7, #20
 8002b10:	2200      	movs	r2, #0
 8002b12:	601a      	str	r2, [r3, #0]
 8002b14:	605a      	str	r2, [r3, #4]
 8002b16:	609a      	str	r2, [r3, #8]
 8002b18:	60da      	str	r2, [r3, #12]
 8002b1a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a19      	ldr	r2, [pc, #100]	@ (8002b88 <HAL_UART_MspInit+0x84>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d12b      	bne.n	8002b7e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002b26:	2300      	movs	r3, #0
 8002b28:	613b      	str	r3, [r7, #16]
 8002b2a:	4b18      	ldr	r3, [pc, #96]	@ (8002b8c <HAL_UART_MspInit+0x88>)
 8002b2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b2e:	4a17      	ldr	r2, [pc, #92]	@ (8002b8c <HAL_UART_MspInit+0x88>)
 8002b30:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b34:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b36:	4b15      	ldr	r3, [pc, #84]	@ (8002b8c <HAL_UART_MspInit+0x88>)
 8002b38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b3e:	613b      	str	r3, [r7, #16]
 8002b40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b42:	2300      	movs	r3, #0
 8002b44:	60fb      	str	r3, [r7, #12]
 8002b46:	4b11      	ldr	r3, [pc, #68]	@ (8002b8c <HAL_UART_MspInit+0x88>)
 8002b48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b4a:	4a10      	ldr	r2, [pc, #64]	@ (8002b8c <HAL_UART_MspInit+0x88>)
 8002b4c:	f043 0301 	orr.w	r3, r3, #1
 8002b50:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b52:	4b0e      	ldr	r3, [pc, #56]	@ (8002b8c <HAL_UART_MspInit+0x88>)
 8002b54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b56:	f003 0301 	and.w	r3, r3, #1
 8002b5a:	60fb      	str	r3, [r7, #12]
 8002b5c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002b5e:	230c      	movs	r3, #12
 8002b60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b62:	2302      	movs	r3, #2
 8002b64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b66:	2300      	movs	r3, #0
 8002b68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b6a:	2303      	movs	r3, #3
 8002b6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002b6e:	2307      	movs	r3, #7
 8002b70:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b72:	f107 0314 	add.w	r3, r7, #20
 8002b76:	4619      	mov	r1, r3
 8002b78:	4805      	ldr	r0, [pc, #20]	@ (8002b90 <HAL_UART_MspInit+0x8c>)
 8002b7a:	f000 fb99 	bl	80032b0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002b7e:	bf00      	nop
 8002b80:	3728      	adds	r7, #40	@ 0x28
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd80      	pop	{r7, pc}
 8002b86:	bf00      	nop
 8002b88:	40004400 	.word	0x40004400
 8002b8c:	40023800 	.word	0x40023800
 8002b90:	40020000 	.word	0x40020000

08002b94 <LCD_Manuel>:
#include <stdio.h>
#include <string.h>
#include "auto.h"

void LCD_Manuel(int a)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b084      	sub	sp, #16
 8002b98:	af02      	add	r7, sp, #8
 8002b9a:	6078      	str	r0, [r7, #4]
	if (a == 1){
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2b01      	cmp	r3, #1
 8002ba0:	d10c      	bne.n	8002bbc <LCD_Manuel+0x28>
	Paint_DrawString_EN (120, 75, "1",        &Font24,    MAGENTA,  WHITE);
 8002ba2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002ba6:	9301      	str	r3, [sp, #4]
 8002ba8:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 8002bac:	9300      	str	r3, [sp, #0]
 8002bae:	4b1b      	ldr	r3, [pc, #108]	@ (8002c1c <LCD_Manuel+0x88>)
 8002bb0:	4a1b      	ldr	r2, [pc, #108]	@ (8002c20 <LCD_Manuel+0x8c>)
 8002bb2:	214b      	movs	r1, #75	@ 0x4b
 8002bb4:	2078      	movs	r0, #120	@ 0x78
 8002bb6:	f004 fbab 	bl	8007310 <Paint_DrawString_EN>
	Paint_DrawString_EN (120, 75, "3",        &Font24,    MAGENTA,  WHITE);
	}
	else{
	Paint_DrawString_EN (120, 75, "      ",        &Font24,    MAGENTA,  WHITE);
	}
}
 8002bba:	e02b      	b.n	8002c14 <LCD_Manuel+0x80>
	else if (a == 2){
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2b02      	cmp	r3, #2
 8002bc0:	d10c      	bne.n	8002bdc <LCD_Manuel+0x48>
	Paint_DrawString_EN (120, 75, "2",        &Font24,    MAGENTA,  WHITE);
 8002bc2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002bc6:	9301      	str	r3, [sp, #4]
 8002bc8:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 8002bcc:	9300      	str	r3, [sp, #0]
 8002bce:	4b13      	ldr	r3, [pc, #76]	@ (8002c1c <LCD_Manuel+0x88>)
 8002bd0:	4a14      	ldr	r2, [pc, #80]	@ (8002c24 <LCD_Manuel+0x90>)
 8002bd2:	214b      	movs	r1, #75	@ 0x4b
 8002bd4:	2078      	movs	r0, #120	@ 0x78
 8002bd6:	f004 fb9b 	bl	8007310 <Paint_DrawString_EN>
}
 8002bda:	e01b      	b.n	8002c14 <LCD_Manuel+0x80>
	else if (a==3){
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2b03      	cmp	r3, #3
 8002be0:	d10c      	bne.n	8002bfc <LCD_Manuel+0x68>
	Paint_DrawString_EN (120, 75, "3",        &Font24,    MAGENTA,  WHITE);
 8002be2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002be6:	9301      	str	r3, [sp, #4]
 8002be8:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 8002bec:	9300      	str	r3, [sp, #0]
 8002bee:	4b0b      	ldr	r3, [pc, #44]	@ (8002c1c <LCD_Manuel+0x88>)
 8002bf0:	4a0d      	ldr	r2, [pc, #52]	@ (8002c28 <LCD_Manuel+0x94>)
 8002bf2:	214b      	movs	r1, #75	@ 0x4b
 8002bf4:	2078      	movs	r0, #120	@ 0x78
 8002bf6:	f004 fb8b 	bl	8007310 <Paint_DrawString_EN>
}
 8002bfa:	e00b      	b.n	8002c14 <LCD_Manuel+0x80>
	Paint_DrawString_EN (120, 75, "      ",        &Font24,    MAGENTA,  WHITE);
 8002bfc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002c00:	9301      	str	r3, [sp, #4]
 8002c02:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 8002c06:	9300      	str	r3, [sp, #0]
 8002c08:	4b04      	ldr	r3, [pc, #16]	@ (8002c1c <LCD_Manuel+0x88>)
 8002c0a:	4a08      	ldr	r2, [pc, #32]	@ (8002c2c <LCD_Manuel+0x98>)
 8002c0c:	214b      	movs	r1, #75	@ 0x4b
 8002c0e:	2078      	movs	r0, #120	@ 0x78
 8002c10:	f004 fb7e 	bl	8007310 <Paint_DrawString_EN>
}
 8002c14:	bf00      	nop
 8002c16:	3708      	adds	r7, #8
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	bd80      	pop	{r7, pc}
 8002c1c:	20000038 	.word	0x20000038
 8002c20:	08008b8c 	.word	0x08008b8c
 8002c24:	08008b90 	.word	0x08008b90
 8002c28:	08008b94 	.word	0x08008b94
 8002c2c:	08008b98 	.word	0x08008b98

08002c30 <LCD_Mode>:

void LCD_Mode()
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b086      	sub	sp, #24
 8002c34:	af02      	add	r7, sp, #8
	char charMode[12];
	strcpy(charMode, Get_Mode_String());
 8002c36:	f7fe f933 	bl	8000ea0 <Get_Mode_String>
 8002c3a:	4602      	mov	r2, r0
 8002c3c:	1d3b      	adds	r3, r7, #4
 8002c3e:	4611      	mov	r1, r2
 8002c40:	4618      	mov	r0, r3
 8002c42:	f005 f97a 	bl	8007f3a <strcpy>
	Paint_DrawString_EN (5, 75, charMode,        &Font24,    MAGENTA,  WHITE);
 8002c46:	1d3a      	adds	r2, r7, #4
 8002c48:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002c4c:	9301      	str	r3, [sp, #4]
 8002c4e:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 8002c52:	9300      	str	r3, [sp, #0]
 8002c54:	4b04      	ldr	r3, [pc, #16]	@ (8002c68 <LCD_Mode+0x38>)
 8002c56:	214b      	movs	r1, #75	@ 0x4b
 8002c58:	2005      	movs	r0, #5
 8002c5a:	f004 fb59 	bl	8007310 <Paint_DrawString_EN>
}
 8002c5e:	bf00      	nop
 8002c60:	3710      	adds	r7, #16
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bd80      	pop	{r7, pc}
 8002c66:	bf00      	nop
 8002c68:	20000038 	.word	0x20000038

08002c6c <LCD_Vitesse>:

void LCD_Vitesse(uint16_t vitesseG, uint16_t vitesseD, int encod_D, int encod_G)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b08e      	sub	sp, #56	@ 0x38
 8002c70:	af02      	add	r7, sp, #8
 8002c72:	60ba      	str	r2, [r7, #8]
 8002c74:	607b      	str	r3, [r7, #4]
 8002c76:	4603      	mov	r3, r0
 8002c78:	81fb      	strh	r3, [r7, #14]
 8002c7a:	460b      	mov	r3, r1
 8002c7c:	81bb      	strh	r3, [r7, #12]
	char buffVG[14];
	char buffVD[14];

	if(encod_G == 0)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d107      	bne.n	8002c94 <LCD_Vitesse+0x28>
	{
		sprintf(buffVG,
 8002c84:	89fa      	ldrh	r2, [r7, #14]
 8002c86:	f107 0320 	add.w	r3, r7, #32
 8002c8a:	491e      	ldr	r1, [pc, #120]	@ (8002d04 <LCD_Vitesse+0x98>)
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	f004 ffd1 	bl	8007c34 <siprintf>
 8002c92:	e006      	b.n	8002ca2 <LCD_Vitesse+0x36>
		  "+%2d",
		   vitesseG);
	}
	else
	{
		sprintf(buffVG,
 8002c94:	89fa      	ldrh	r2, [r7, #14]
 8002c96:	f107 0320 	add.w	r3, r7, #32
 8002c9a:	491b      	ldr	r1, [pc, #108]	@ (8002d08 <LCD_Vitesse+0x9c>)
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	f004 ffc9 	bl	8007c34 <siprintf>
			"-%2d",
			   vitesseG);
	}

	if(encod_D == 0)
 8002ca2:	68bb      	ldr	r3, [r7, #8]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d107      	bne.n	8002cb8 <LCD_Vitesse+0x4c>
	{
		sprintf(buffVD,
 8002ca8:	89ba      	ldrh	r2, [r7, #12]
 8002caa:	f107 0310 	add.w	r3, r7, #16
 8002cae:	4915      	ldr	r1, [pc, #84]	@ (8002d04 <LCD_Vitesse+0x98>)
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	f004 ffbf 	bl	8007c34 <siprintf>
 8002cb6:	e006      	b.n	8002cc6 <LCD_Vitesse+0x5a>
		  "+%2d",
		   vitesseD);
	}
	else
	{
		sprintf(buffVD,
 8002cb8:	89ba      	ldrh	r2, [r7, #12]
 8002cba:	f107 0310 	add.w	r3, r7, #16
 8002cbe:	4912      	ldr	r1, [pc, #72]	@ (8002d08 <LCD_Vitesse+0x9c>)
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	f004 ffb7 	bl	8007c34 <siprintf>
			"-%2d",
			   vitesseD);
	}

	Paint_DrawString_EN (190, 100, buffVD,        &Font16,    MAGENTA,  WHITE);
 8002cc6:	f107 0210 	add.w	r2, r7, #16
 8002cca:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002cce:	9301      	str	r3, [sp, #4]
 8002cd0:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 8002cd4:	9300      	str	r3, [sp, #0]
 8002cd6:	4b0d      	ldr	r3, [pc, #52]	@ (8002d0c <LCD_Vitesse+0xa0>)
 8002cd8:	2164      	movs	r1, #100	@ 0x64
 8002cda:	20be      	movs	r0, #190	@ 0xbe
 8002cdc:	f004 fb18 	bl	8007310 <Paint_DrawString_EN>
	Paint_DrawString_EN (190, 125, buffVG,        &Font16,    MAGENTA,  WHITE);
 8002ce0:	f107 0220 	add.w	r2, r7, #32
 8002ce4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002ce8:	9301      	str	r3, [sp, #4]
 8002cea:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 8002cee:	9300      	str	r3, [sp, #0]
 8002cf0:	4b06      	ldr	r3, [pc, #24]	@ (8002d0c <LCD_Vitesse+0xa0>)
 8002cf2:	217d      	movs	r1, #125	@ 0x7d
 8002cf4:	20be      	movs	r0, #190	@ 0xbe
 8002cf6:	f004 fb0b 	bl	8007310 <Paint_DrawString_EN>
}
 8002cfa:	bf00      	nop
 8002cfc:	3730      	adds	r7, #48	@ 0x30
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd80      	pop	{r7, pc}
 8002d02:	bf00      	nop
 8002d04:	08008ba0 	.word	0x08008ba0
 8002d08:	08008ba8 	.word	0x08008ba8
 8002d0c:	20000028 	.word	0x20000028

08002d10 <LCD_Init>:

void LCD_Init(uint8_t* a)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b084      	sub	sp, #16
 8002d14:	af02      	add	r7, sp, #8
 8002d16:	6078      	str	r0, [r7, #4]
	DEV_Module_Init();
 8002d18:	f004 f8d8 	bl	8006ecc <DEV_Module_Init>


	LCD_2IN_SetBackLight(1000);
 8002d1c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002d20:	f004 fd90 	bl	8007844 <LCD_2IN_SetBackLight>
	LCD_2IN_Init();
 8002d24:	f004 fbd6 	bl	80074d4 <LCD_2IN_Init>
	LCD_2IN_Clear(WHITE);
 8002d28:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8002d2c:	f004 fd42 	bl	80077b4 <LCD_2IN_Clear>


	Paint_NewImage(LCD_2IN_WIDTH,LCD_2IN_HEIGHT, ROTATE_90, WHITE);
 8002d30:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002d34:	225a      	movs	r2, #90	@ 0x5a
 8002d36:	f44f 71a0 	mov.w	r1, #320	@ 0x140
 8002d3a:	20f0      	movs	r0, #240	@ 0xf0
 8002d3c:	f004 f8e6 	bl	8006f0c <Paint_NewImage>


	Paint_SetClearFuntion(LCD_2IN_Clear);
 8002d40:	4862      	ldr	r0, [pc, #392]	@ (8002ecc <LCD_Init+0x1bc>)
 8002d42:	f004 f92f 	bl	8006fa4 <Paint_SetClearFuntion>
	Paint_SetDisplayFuntion(LCD_2IN_DrawPaint);
 8002d46:	4862      	ldr	r0, [pc, #392]	@ (8002ed0 <LCD_Init+0x1c0>)
 8002d48:	f004 f93c 	bl	8006fc4 <Paint_SetDisplayFuntion>

  printf("Paint_Clear\r\n");
 8002d4c:	4861      	ldr	r0, [pc, #388]	@ (8002ed4 <LCD_Init+0x1c4>)
 8002d4e:	f004 ff69 	bl	8007c24 <puts>
	Paint_Clear(MAGENTA);
 8002d52:	f64f 001f 	movw	r0, #63519	@ 0xf81f
 8002d56:	f004 fa1f 	bl	8007198 <Paint_Clear>
	DEV_Delay_ms(500);
 8002d5a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002d5e:	f000 f971 	bl	8003044 <HAL_Delay>


	Paint_SetRotate(ROTATE_270);
 8002d62:	f44f 7087 	mov.w	r0, #270	@ 0x10e
 8002d66:	f004 f93d 	bl	8006fe4 <Paint_SetRotate>
	Paint_DrawString_EN (50, 100, "DEMARRAGE DU",        &Font24,    MAGENTA,  WHITE);
 8002d6a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002d6e:	9301      	str	r3, [sp, #4]
 8002d70:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 8002d74:	9300      	str	r3, [sp, #0]
 8002d76:	4b58      	ldr	r3, [pc, #352]	@ (8002ed8 <LCD_Init+0x1c8>)
 8002d78:	4a58      	ldr	r2, [pc, #352]	@ (8002edc <LCD_Init+0x1cc>)
 8002d7a:	2164      	movs	r1, #100	@ 0x64
 8002d7c:	2032      	movs	r0, #50	@ 0x32
 8002d7e:	f004 fac7 	bl	8007310 <Paint_DrawString_EN>
	Paint_DrawString_EN (100, 125, "PROJET",        &Font24,    MAGENTA,  WHITE);
 8002d82:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002d86:	9301      	str	r3, [sp, #4]
 8002d88:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 8002d8c:	9300      	str	r3, [sp, #0]
 8002d8e:	4b52      	ldr	r3, [pc, #328]	@ (8002ed8 <LCD_Init+0x1c8>)
 8002d90:	4a53      	ldr	r2, [pc, #332]	@ (8002ee0 <LCD_Init+0x1d0>)
 8002d92:	217d      	movs	r1, #125	@ 0x7d
 8002d94:	2064      	movs	r0, #100	@ 0x64
 8002d96:	f004 fabb 	bl	8007310 <Paint_DrawString_EN>
	Paint_DrawString_EN (70, 150, "VROUM-VROUM",        &Font24,    MAGENTA,  WHITE);
 8002d9a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002d9e:	9301      	str	r3, [sp, #4]
 8002da0:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 8002da4:	9300      	str	r3, [sp, #0]
 8002da6:	4b4c      	ldr	r3, [pc, #304]	@ (8002ed8 <LCD_Init+0x1c8>)
 8002da8:	4a4e      	ldr	r2, [pc, #312]	@ (8002ee4 <LCD_Init+0x1d4>)
 8002daa:	2196      	movs	r1, #150	@ 0x96
 8002dac:	2046      	movs	r0, #70	@ 0x46
 8002dae:	f004 faaf 	bl	8007310 <Paint_DrawString_EN>
	DEV_Delay_ms(500);
 8002db2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002db6:	f000 f945 	bl	8003044 <HAL_Delay>
	Paint_Clear(MAGENTA);
 8002dba:	f64f 001f 	movw	r0, #63519	@ 0xf81f
 8002dbe:	f004 f9eb 	bl	8007198 <Paint_Clear>

	Paint_DrawString_EN (85, 100, "LE PROJET",        &Font24,    MAGENTA,  WHITE);
 8002dc2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002dc6:	9301      	str	r3, [sp, #4]
 8002dc8:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 8002dcc:	9300      	str	r3, [sp, #0]
 8002dce:	4b42      	ldr	r3, [pc, #264]	@ (8002ed8 <LCD_Init+0x1c8>)
 8002dd0:	4a45      	ldr	r2, [pc, #276]	@ (8002ee8 <LCD_Init+0x1d8>)
 8002dd2:	2164      	movs	r1, #100	@ 0x64
 8002dd4:	2055      	movs	r0, #85	@ 0x55
 8002dd6:	f004 fa9b 	bl	8007310 <Paint_DrawString_EN>
	Paint_DrawString_EN (70, 125, "VROUM-VROUM",        &Font24,    MAGENTA,  WHITE);
 8002dda:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002dde:	9301      	str	r3, [sp, #4]
 8002de0:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 8002de4:	9300      	str	r3, [sp, #0]
 8002de6:	4b3c      	ldr	r3, [pc, #240]	@ (8002ed8 <LCD_Init+0x1c8>)
 8002de8:	4a3e      	ldr	r2, [pc, #248]	@ (8002ee4 <LCD_Init+0x1d4>)
 8002dea:	217d      	movs	r1, #125	@ 0x7d
 8002dec:	2046      	movs	r0, #70	@ 0x46
 8002dee:	f004 fa8f 	bl	8007310 <Paint_DrawString_EN>
	Paint_DrawString_EN (85, 150, "VOUS SALUT",        &Font24,    MAGENTA,  WHITE);
 8002df2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002df6:	9301      	str	r3, [sp, #4]
 8002df8:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 8002dfc:	9300      	str	r3, [sp, #0]
 8002dfe:	4b36      	ldr	r3, [pc, #216]	@ (8002ed8 <LCD_Init+0x1c8>)
 8002e00:	4a3a      	ldr	r2, [pc, #232]	@ (8002eec <LCD_Init+0x1dc>)
 8002e02:	2196      	movs	r1, #150	@ 0x96
 8002e04:	2055      	movs	r0, #85	@ 0x55
 8002e06:	f004 fa83 	bl	8007310 <Paint_DrawString_EN>
	DEV_Delay_ms(500);
 8002e0a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002e0e:	f000 f919 	bl	8003044 <HAL_Delay>
	Paint_Clear(MAGENTA);
 8002e12:	f64f 001f 	movw	r0, #63519	@ 0xf81f
 8002e16:	f004 f9bf 	bl	8007198 <Paint_Clear>

	Paint_DrawString_EN (5, 1, "La date : ",        &Font24,    MAGENTA,  WHITE);
 8002e1a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002e1e:	9301      	str	r3, [sp, #4]
 8002e20:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 8002e24:	9300      	str	r3, [sp, #0]
 8002e26:	4b2c      	ldr	r3, [pc, #176]	@ (8002ed8 <LCD_Init+0x1c8>)
 8002e28:	4a31      	ldr	r2, [pc, #196]	@ (8002ef0 <LCD_Init+0x1e0>)
 8002e2a:	2101      	movs	r1, #1
 8002e2c:	2005      	movs	r0, #5
 8002e2e:	f004 fa6f 	bl	8007310 <Paint_DrawString_EN>
	Paint_DrawString_EN (5, 25, "L'heure : ",        &Font24,    MAGENTA,  WHITE);
 8002e32:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002e36:	9301      	str	r3, [sp, #4]
 8002e38:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 8002e3c:	9300      	str	r3, [sp, #0]
 8002e3e:	4b26      	ldr	r3, [pc, #152]	@ (8002ed8 <LCD_Init+0x1c8>)
 8002e40:	4a2c      	ldr	r2, [pc, #176]	@ (8002ef4 <LCD_Init+0x1e4>)
 8002e42:	2119      	movs	r1, #25
 8002e44:	2005      	movs	r0, #5
 8002e46:	f004 fa63 	bl	8007310 <Paint_DrawString_EN>
	Paint_DrawString_EN (5, 50, "Mode actuel : ",        &Font24,    MAGENTA,  WHITE);
 8002e4a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002e4e:	9301      	str	r3, [sp, #4]
 8002e50:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 8002e54:	9300      	str	r3, [sp, #0]
 8002e56:	4b20      	ldr	r3, [pc, #128]	@ (8002ed8 <LCD_Init+0x1c8>)
 8002e58:	4a27      	ldr	r2, [pc, #156]	@ (8002ef8 <LCD_Init+0x1e8>)
 8002e5a:	2132      	movs	r1, #50	@ 0x32
 8002e5c:	2005      	movs	r0, #5
 8002e5e:	f004 fa57 	bl	8007310 <Paint_DrawString_EN>


	LCD_Mode();
 8002e62:	f7ff fee5 	bl	8002c30 <LCD_Mode>
	LCD_Manuel(3);
 8002e66:	2003      	movs	r0, #3
 8002e68:	f7ff fe94 	bl	8002b94 <LCD_Manuel>

	Paint_DrawString_EN (5, 100, "Vitesse G :   %",        &Font24,    MAGENTA,  WHITE);
 8002e6c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002e70:	9301      	str	r3, [sp, #4]
 8002e72:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 8002e76:	9300      	str	r3, [sp, #0]
 8002e78:	4b17      	ldr	r3, [pc, #92]	@ (8002ed8 <LCD_Init+0x1c8>)
 8002e7a:	4a20      	ldr	r2, [pc, #128]	@ (8002efc <LCD_Init+0x1ec>)
 8002e7c:	2164      	movs	r1, #100	@ 0x64
 8002e7e:	2005      	movs	r0, #5
 8002e80:	f004 fa46 	bl	8007310 <Paint_DrawString_EN>
	Paint_DrawString_EN (5, 125, "Vitesse D :   %",        &Font24,    MAGENTA,  WHITE);
 8002e84:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002e88:	9301      	str	r3, [sp, #4]
 8002e8a:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 8002e8e:	9300      	str	r3, [sp, #0]
 8002e90:	4b11      	ldr	r3, [pc, #68]	@ (8002ed8 <LCD_Init+0x1c8>)
 8002e92:	4a1b      	ldr	r2, [pc, #108]	@ (8002f00 <LCD_Init+0x1f0>)
 8002e94:	217d      	movs	r1, #125	@ 0x7d
 8002e96:	2005      	movs	r0, #5
 8002e98:	f004 fa3a 	bl	8007310 <Paint_DrawString_EN>
	Paint_DrawString_EN (10, 220, "Attention aux enfants",        &Font20,    YELLOW,  RED);
 8002e9c:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8002ea0:	9301      	str	r3, [sp, #4]
 8002ea2:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8002ea6:	9300      	str	r3, [sp, #0]
 8002ea8:	4b16      	ldr	r3, [pc, #88]	@ (8002f04 <LCD_Init+0x1f4>)
 8002eaa:	4a17      	ldr	r2, [pc, #92]	@ (8002f08 <LCD_Init+0x1f8>)
 8002eac:	21dc      	movs	r1, #220	@ 0xdc
 8002eae:	200a      	movs	r0, #10
 8002eb0:	f004 fa2e 	bl	8007310 <Paint_DrawString_EN>

	DEV_Delay_ms(3000);
 8002eb4:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8002eb8:	f000 f8c4 	bl	8003044 <HAL_Delay>

	*a = 1;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2201      	movs	r2, #1
 8002ec0:	701a      	strb	r2, [r3, #0]
	//DEV_Module_Exit();

}
 8002ec2:	bf00      	nop
 8002ec4:	3708      	adds	r7, #8
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd80      	pop	{r7, pc}
 8002eca:	bf00      	nop
 8002ecc:	080077b5 	.word	0x080077b5
 8002ed0:	08007815 	.word	0x08007815
 8002ed4:	08008bb0 	.word	0x08008bb0
 8002ed8:	20000038 	.word	0x20000038
 8002edc:	08008bc0 	.word	0x08008bc0
 8002ee0:	08008bd0 	.word	0x08008bd0
 8002ee4:	08008bd8 	.word	0x08008bd8
 8002ee8:	08008be4 	.word	0x08008be4
 8002eec:	08008bf0 	.word	0x08008bf0
 8002ef0:	08008bfc 	.word	0x08008bfc
 8002ef4:	08008c08 	.word	0x08008c08
 8002ef8:	08008c14 	.word	0x08008c14
 8002efc:	08008c24 	.word	0x08008c24
 8002f00:	08008c34 	.word	0x08008c34
 8002f04:	20000030 	.word	0x20000030
 8002f08:	08008c44 	.word	0x08008c44

08002f0c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002f0c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002f44 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002f10:	f7ff fb50 	bl	80025b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002f14:	480c      	ldr	r0, [pc, #48]	@ (8002f48 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002f16:	490d      	ldr	r1, [pc, #52]	@ (8002f4c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002f18:	4a0d      	ldr	r2, [pc, #52]	@ (8002f50 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002f1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002f1c:	e002      	b.n	8002f24 <LoopCopyDataInit>

08002f1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002f1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002f20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002f22:	3304      	adds	r3, #4

08002f24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002f24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002f26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002f28:	d3f9      	bcc.n	8002f1e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002f2a:	4a0a      	ldr	r2, [pc, #40]	@ (8002f54 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002f2c:	4c0a      	ldr	r4, [pc, #40]	@ (8002f58 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002f2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002f30:	e001      	b.n	8002f36 <LoopFillZerobss>

08002f32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002f32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002f34:	3204      	adds	r2, #4

08002f36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002f36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002f38:	d3fb      	bcc.n	8002f32 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002f3a:	f004 ffd7 	bl	8007eec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002f3e:	f7fe fdff 	bl	8001b40 <main>
  bx  lr    
 8002f42:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002f44:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002f48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002f4c:	2000009c 	.word	0x2000009c
  ldr r2, =_sidata
 8002f50:	0800c52c 	.word	0x0800c52c
  ldr r2, =_sbss
 8002f54:	2000009c 	.word	0x2000009c
  ldr r4, =_ebss
 8002f58:	200004b8 	.word	0x200004b8

08002f5c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002f5c:	e7fe      	b.n	8002f5c <ADC_IRQHandler>
	...

08002f60 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002f64:	4b0e      	ldr	r3, [pc, #56]	@ (8002fa0 <HAL_Init+0x40>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a0d      	ldr	r2, [pc, #52]	@ (8002fa0 <HAL_Init+0x40>)
 8002f6a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002f6e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002f70:	4b0b      	ldr	r3, [pc, #44]	@ (8002fa0 <HAL_Init+0x40>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a0a      	ldr	r2, [pc, #40]	@ (8002fa0 <HAL_Init+0x40>)
 8002f76:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002f7a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002f7c:	4b08      	ldr	r3, [pc, #32]	@ (8002fa0 <HAL_Init+0x40>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a07      	ldr	r2, [pc, #28]	@ (8002fa0 <HAL_Init+0x40>)
 8002f82:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f86:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f88:	2003      	movs	r0, #3
 8002f8a:	f000 f94f 	bl	800322c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002f8e:	2000      	movs	r0, #0
 8002f90:	f000 f808 	bl	8002fa4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002f94:	f7ff f9ea 	bl	800236c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002f98:	2300      	movs	r3, #0
}
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	bd80      	pop	{r7, pc}
 8002f9e:	bf00      	nop
 8002fa0:	40023c00 	.word	0x40023c00

08002fa4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b082      	sub	sp, #8
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002fac:	4b12      	ldr	r3, [pc, #72]	@ (8002ff8 <HAL_InitTick+0x54>)
 8002fae:	681a      	ldr	r2, [r3, #0]
 8002fb0:	4b12      	ldr	r3, [pc, #72]	@ (8002ffc <HAL_InitTick+0x58>)
 8002fb2:	781b      	ldrb	r3, [r3, #0]
 8002fb4:	4619      	mov	r1, r3
 8002fb6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002fba:	fbb3 f3f1 	udiv	r3, r3, r1
 8002fbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	f000 f967 	bl	8003296 <HAL_SYSTICK_Config>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d001      	beq.n	8002fd2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	e00e      	b.n	8002ff0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2b0f      	cmp	r3, #15
 8002fd6:	d80a      	bhi.n	8002fee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002fd8:	2200      	movs	r2, #0
 8002fda:	6879      	ldr	r1, [r7, #4]
 8002fdc:	f04f 30ff 	mov.w	r0, #4294967295
 8002fe0:	f000 f92f 	bl	8003242 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002fe4:	4a06      	ldr	r2, [pc, #24]	@ (8003000 <HAL_InitTick+0x5c>)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002fea:	2300      	movs	r3, #0
 8002fec:	e000      	b.n	8002ff0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002fee:	2301      	movs	r3, #1
}
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	3708      	adds	r7, #8
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bd80      	pop	{r7, pc}
 8002ff8:	2000001c 	.word	0x2000001c
 8002ffc:	20000024 	.word	0x20000024
 8003000:	20000020 	.word	0x20000020

08003004 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003004:	b480      	push	{r7}
 8003006:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003008:	4b06      	ldr	r3, [pc, #24]	@ (8003024 <HAL_IncTick+0x20>)
 800300a:	781b      	ldrb	r3, [r3, #0]
 800300c:	461a      	mov	r2, r3
 800300e:	4b06      	ldr	r3, [pc, #24]	@ (8003028 <HAL_IncTick+0x24>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4413      	add	r3, r2
 8003014:	4a04      	ldr	r2, [pc, #16]	@ (8003028 <HAL_IncTick+0x24>)
 8003016:	6013      	str	r3, [r2, #0]
}
 8003018:	bf00      	nop
 800301a:	46bd      	mov	sp, r7
 800301c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003020:	4770      	bx	lr
 8003022:	bf00      	nop
 8003024:	20000024 	.word	0x20000024
 8003028:	20000348 	.word	0x20000348

0800302c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800302c:	b480      	push	{r7}
 800302e:	af00      	add	r7, sp, #0
  return uwTick;
 8003030:	4b03      	ldr	r3, [pc, #12]	@ (8003040 <HAL_GetTick+0x14>)
 8003032:	681b      	ldr	r3, [r3, #0]
}
 8003034:	4618      	mov	r0, r3
 8003036:	46bd      	mov	sp, r7
 8003038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303c:	4770      	bx	lr
 800303e:	bf00      	nop
 8003040:	20000348 	.word	0x20000348

08003044 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b084      	sub	sp, #16
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800304c:	f7ff ffee 	bl	800302c <HAL_GetTick>
 8003050:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	f1b3 3fff 	cmp.w	r3, #4294967295
 800305c:	d005      	beq.n	800306a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800305e:	4b0a      	ldr	r3, [pc, #40]	@ (8003088 <HAL_Delay+0x44>)
 8003060:	781b      	ldrb	r3, [r3, #0]
 8003062:	461a      	mov	r2, r3
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	4413      	add	r3, r2
 8003068:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800306a:	bf00      	nop
 800306c:	f7ff ffde 	bl	800302c <HAL_GetTick>
 8003070:	4602      	mov	r2, r0
 8003072:	68bb      	ldr	r3, [r7, #8]
 8003074:	1ad3      	subs	r3, r2, r3
 8003076:	68fa      	ldr	r2, [r7, #12]
 8003078:	429a      	cmp	r2, r3
 800307a:	d8f7      	bhi.n	800306c <HAL_Delay+0x28>
  {
  }
}
 800307c:	bf00      	nop
 800307e:	bf00      	nop
 8003080:	3710      	adds	r7, #16
 8003082:	46bd      	mov	sp, r7
 8003084:	bd80      	pop	{r7, pc}
 8003086:	bf00      	nop
 8003088:	20000024 	.word	0x20000024

0800308c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800308c:	b480      	push	{r7}
 800308e:	b085      	sub	sp, #20
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	f003 0307 	and.w	r3, r3, #7
 800309a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800309c:	4b0c      	ldr	r3, [pc, #48]	@ (80030d0 <__NVIC_SetPriorityGrouping+0x44>)
 800309e:	68db      	ldr	r3, [r3, #12]
 80030a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80030a2:	68ba      	ldr	r2, [r7, #8]
 80030a4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80030a8:	4013      	ands	r3, r2
 80030aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80030b0:	68bb      	ldr	r3, [r7, #8]
 80030b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80030b4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80030b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80030bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80030be:	4a04      	ldr	r2, [pc, #16]	@ (80030d0 <__NVIC_SetPriorityGrouping+0x44>)
 80030c0:	68bb      	ldr	r3, [r7, #8]
 80030c2:	60d3      	str	r3, [r2, #12]
}
 80030c4:	bf00      	nop
 80030c6:	3714      	adds	r7, #20
 80030c8:	46bd      	mov	sp, r7
 80030ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ce:	4770      	bx	lr
 80030d0:	e000ed00 	.word	0xe000ed00

080030d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80030d4:	b480      	push	{r7}
 80030d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80030d8:	4b04      	ldr	r3, [pc, #16]	@ (80030ec <__NVIC_GetPriorityGrouping+0x18>)
 80030da:	68db      	ldr	r3, [r3, #12]
 80030dc:	0a1b      	lsrs	r3, r3, #8
 80030de:	f003 0307 	and.w	r3, r3, #7
}
 80030e2:	4618      	mov	r0, r3
 80030e4:	46bd      	mov	sp, r7
 80030e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ea:	4770      	bx	lr
 80030ec:	e000ed00 	.word	0xe000ed00

080030f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030f0:	b480      	push	{r7}
 80030f2:	b083      	sub	sp, #12
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	4603      	mov	r3, r0
 80030f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	db0b      	blt.n	800311a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003102:	79fb      	ldrb	r3, [r7, #7]
 8003104:	f003 021f 	and.w	r2, r3, #31
 8003108:	4907      	ldr	r1, [pc, #28]	@ (8003128 <__NVIC_EnableIRQ+0x38>)
 800310a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800310e:	095b      	lsrs	r3, r3, #5
 8003110:	2001      	movs	r0, #1
 8003112:	fa00 f202 	lsl.w	r2, r0, r2
 8003116:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800311a:	bf00      	nop
 800311c:	370c      	adds	r7, #12
 800311e:	46bd      	mov	sp, r7
 8003120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003124:	4770      	bx	lr
 8003126:	bf00      	nop
 8003128:	e000e100 	.word	0xe000e100

0800312c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800312c:	b480      	push	{r7}
 800312e:	b083      	sub	sp, #12
 8003130:	af00      	add	r7, sp, #0
 8003132:	4603      	mov	r3, r0
 8003134:	6039      	str	r1, [r7, #0]
 8003136:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003138:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800313c:	2b00      	cmp	r3, #0
 800313e:	db0a      	blt.n	8003156 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	b2da      	uxtb	r2, r3
 8003144:	490c      	ldr	r1, [pc, #48]	@ (8003178 <__NVIC_SetPriority+0x4c>)
 8003146:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800314a:	0112      	lsls	r2, r2, #4
 800314c:	b2d2      	uxtb	r2, r2
 800314e:	440b      	add	r3, r1
 8003150:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003154:	e00a      	b.n	800316c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	b2da      	uxtb	r2, r3
 800315a:	4908      	ldr	r1, [pc, #32]	@ (800317c <__NVIC_SetPriority+0x50>)
 800315c:	79fb      	ldrb	r3, [r7, #7]
 800315e:	f003 030f 	and.w	r3, r3, #15
 8003162:	3b04      	subs	r3, #4
 8003164:	0112      	lsls	r2, r2, #4
 8003166:	b2d2      	uxtb	r2, r2
 8003168:	440b      	add	r3, r1
 800316a:	761a      	strb	r2, [r3, #24]
}
 800316c:	bf00      	nop
 800316e:	370c      	adds	r7, #12
 8003170:	46bd      	mov	sp, r7
 8003172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003176:	4770      	bx	lr
 8003178:	e000e100 	.word	0xe000e100
 800317c:	e000ed00 	.word	0xe000ed00

08003180 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003180:	b480      	push	{r7}
 8003182:	b089      	sub	sp, #36	@ 0x24
 8003184:	af00      	add	r7, sp, #0
 8003186:	60f8      	str	r0, [r7, #12]
 8003188:	60b9      	str	r1, [r7, #8]
 800318a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	f003 0307 	and.w	r3, r3, #7
 8003192:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003194:	69fb      	ldr	r3, [r7, #28]
 8003196:	f1c3 0307 	rsb	r3, r3, #7
 800319a:	2b04      	cmp	r3, #4
 800319c:	bf28      	it	cs
 800319e:	2304      	movcs	r3, #4
 80031a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80031a2:	69fb      	ldr	r3, [r7, #28]
 80031a4:	3304      	adds	r3, #4
 80031a6:	2b06      	cmp	r3, #6
 80031a8:	d902      	bls.n	80031b0 <NVIC_EncodePriority+0x30>
 80031aa:	69fb      	ldr	r3, [r7, #28]
 80031ac:	3b03      	subs	r3, #3
 80031ae:	e000      	b.n	80031b2 <NVIC_EncodePriority+0x32>
 80031b0:	2300      	movs	r3, #0
 80031b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031b4:	f04f 32ff 	mov.w	r2, #4294967295
 80031b8:	69bb      	ldr	r3, [r7, #24]
 80031ba:	fa02 f303 	lsl.w	r3, r2, r3
 80031be:	43da      	mvns	r2, r3
 80031c0:	68bb      	ldr	r3, [r7, #8]
 80031c2:	401a      	ands	r2, r3
 80031c4:	697b      	ldr	r3, [r7, #20]
 80031c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80031c8:	f04f 31ff 	mov.w	r1, #4294967295
 80031cc:	697b      	ldr	r3, [r7, #20]
 80031ce:	fa01 f303 	lsl.w	r3, r1, r3
 80031d2:	43d9      	mvns	r1, r3
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031d8:	4313      	orrs	r3, r2
         );
}
 80031da:	4618      	mov	r0, r3
 80031dc:	3724      	adds	r7, #36	@ 0x24
 80031de:	46bd      	mov	sp, r7
 80031e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e4:	4770      	bx	lr
	...

080031e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b082      	sub	sp, #8
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	3b01      	subs	r3, #1
 80031f4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80031f8:	d301      	bcc.n	80031fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80031fa:	2301      	movs	r3, #1
 80031fc:	e00f      	b.n	800321e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80031fe:	4a0a      	ldr	r2, [pc, #40]	@ (8003228 <SysTick_Config+0x40>)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	3b01      	subs	r3, #1
 8003204:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003206:	210f      	movs	r1, #15
 8003208:	f04f 30ff 	mov.w	r0, #4294967295
 800320c:	f7ff ff8e 	bl	800312c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003210:	4b05      	ldr	r3, [pc, #20]	@ (8003228 <SysTick_Config+0x40>)
 8003212:	2200      	movs	r2, #0
 8003214:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003216:	4b04      	ldr	r3, [pc, #16]	@ (8003228 <SysTick_Config+0x40>)
 8003218:	2207      	movs	r2, #7
 800321a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800321c:	2300      	movs	r3, #0
}
 800321e:	4618      	mov	r0, r3
 8003220:	3708      	adds	r7, #8
 8003222:	46bd      	mov	sp, r7
 8003224:	bd80      	pop	{r7, pc}
 8003226:	bf00      	nop
 8003228:	e000e010 	.word	0xe000e010

0800322c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b082      	sub	sp, #8
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003234:	6878      	ldr	r0, [r7, #4]
 8003236:	f7ff ff29 	bl	800308c <__NVIC_SetPriorityGrouping>
}
 800323a:	bf00      	nop
 800323c:	3708      	adds	r7, #8
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}

08003242 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003242:	b580      	push	{r7, lr}
 8003244:	b086      	sub	sp, #24
 8003246:	af00      	add	r7, sp, #0
 8003248:	4603      	mov	r3, r0
 800324a:	60b9      	str	r1, [r7, #8]
 800324c:	607a      	str	r2, [r7, #4]
 800324e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003250:	2300      	movs	r3, #0
 8003252:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003254:	f7ff ff3e 	bl	80030d4 <__NVIC_GetPriorityGrouping>
 8003258:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800325a:	687a      	ldr	r2, [r7, #4]
 800325c:	68b9      	ldr	r1, [r7, #8]
 800325e:	6978      	ldr	r0, [r7, #20]
 8003260:	f7ff ff8e 	bl	8003180 <NVIC_EncodePriority>
 8003264:	4602      	mov	r2, r0
 8003266:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800326a:	4611      	mov	r1, r2
 800326c:	4618      	mov	r0, r3
 800326e:	f7ff ff5d 	bl	800312c <__NVIC_SetPriority>
}
 8003272:	bf00      	nop
 8003274:	3718      	adds	r7, #24
 8003276:	46bd      	mov	sp, r7
 8003278:	bd80      	pop	{r7, pc}

0800327a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800327a:	b580      	push	{r7, lr}
 800327c:	b082      	sub	sp, #8
 800327e:	af00      	add	r7, sp, #0
 8003280:	4603      	mov	r3, r0
 8003282:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003284:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003288:	4618      	mov	r0, r3
 800328a:	f7ff ff31 	bl	80030f0 <__NVIC_EnableIRQ>
}
 800328e:	bf00      	nop
 8003290:	3708      	adds	r7, #8
 8003292:	46bd      	mov	sp, r7
 8003294:	bd80      	pop	{r7, pc}

08003296 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003296:	b580      	push	{r7, lr}
 8003298:	b082      	sub	sp, #8
 800329a:	af00      	add	r7, sp, #0
 800329c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800329e:	6878      	ldr	r0, [r7, #4]
 80032a0:	f7ff ffa2 	bl	80031e8 <SysTick_Config>
 80032a4:	4603      	mov	r3, r0
}
 80032a6:	4618      	mov	r0, r3
 80032a8:	3708      	adds	r7, #8
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bd80      	pop	{r7, pc}
	...

080032b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80032b0:	b480      	push	{r7}
 80032b2:	b089      	sub	sp, #36	@ 0x24
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
 80032b8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80032ba:	2300      	movs	r3, #0
 80032bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80032be:	2300      	movs	r3, #0
 80032c0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80032c2:	2300      	movs	r3, #0
 80032c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80032c6:	2300      	movs	r3, #0
 80032c8:	61fb      	str	r3, [r7, #28]
 80032ca:	e165      	b.n	8003598 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80032cc:	2201      	movs	r2, #1
 80032ce:	69fb      	ldr	r3, [r7, #28]
 80032d0:	fa02 f303 	lsl.w	r3, r2, r3
 80032d4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	697a      	ldr	r2, [r7, #20]
 80032dc:	4013      	ands	r3, r2
 80032de:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80032e0:	693a      	ldr	r2, [r7, #16]
 80032e2:	697b      	ldr	r3, [r7, #20]
 80032e4:	429a      	cmp	r2, r3
 80032e6:	f040 8154 	bne.w	8003592 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	f003 0303 	and.w	r3, r3, #3
 80032f2:	2b01      	cmp	r3, #1
 80032f4:	d005      	beq.n	8003302 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80032fe:	2b02      	cmp	r3, #2
 8003300:	d130      	bne.n	8003364 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	689b      	ldr	r3, [r3, #8]
 8003306:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003308:	69fb      	ldr	r3, [r7, #28]
 800330a:	005b      	lsls	r3, r3, #1
 800330c:	2203      	movs	r2, #3
 800330e:	fa02 f303 	lsl.w	r3, r2, r3
 8003312:	43db      	mvns	r3, r3
 8003314:	69ba      	ldr	r2, [r7, #24]
 8003316:	4013      	ands	r3, r2
 8003318:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	68da      	ldr	r2, [r3, #12]
 800331e:	69fb      	ldr	r3, [r7, #28]
 8003320:	005b      	lsls	r3, r3, #1
 8003322:	fa02 f303 	lsl.w	r3, r2, r3
 8003326:	69ba      	ldr	r2, [r7, #24]
 8003328:	4313      	orrs	r3, r2
 800332a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	69ba      	ldr	r2, [r7, #24]
 8003330:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003338:	2201      	movs	r2, #1
 800333a:	69fb      	ldr	r3, [r7, #28]
 800333c:	fa02 f303 	lsl.w	r3, r2, r3
 8003340:	43db      	mvns	r3, r3
 8003342:	69ba      	ldr	r2, [r7, #24]
 8003344:	4013      	ands	r3, r2
 8003346:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	091b      	lsrs	r3, r3, #4
 800334e:	f003 0201 	and.w	r2, r3, #1
 8003352:	69fb      	ldr	r3, [r7, #28]
 8003354:	fa02 f303 	lsl.w	r3, r2, r3
 8003358:	69ba      	ldr	r2, [r7, #24]
 800335a:	4313      	orrs	r3, r2
 800335c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	69ba      	ldr	r2, [r7, #24]
 8003362:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	f003 0303 	and.w	r3, r3, #3
 800336c:	2b03      	cmp	r3, #3
 800336e:	d017      	beq.n	80033a0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	68db      	ldr	r3, [r3, #12]
 8003374:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003376:	69fb      	ldr	r3, [r7, #28]
 8003378:	005b      	lsls	r3, r3, #1
 800337a:	2203      	movs	r2, #3
 800337c:	fa02 f303 	lsl.w	r3, r2, r3
 8003380:	43db      	mvns	r3, r3
 8003382:	69ba      	ldr	r2, [r7, #24]
 8003384:	4013      	ands	r3, r2
 8003386:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	689a      	ldr	r2, [r3, #8]
 800338c:	69fb      	ldr	r3, [r7, #28]
 800338e:	005b      	lsls	r3, r3, #1
 8003390:	fa02 f303 	lsl.w	r3, r2, r3
 8003394:	69ba      	ldr	r2, [r7, #24]
 8003396:	4313      	orrs	r3, r2
 8003398:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	69ba      	ldr	r2, [r7, #24]
 800339e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	f003 0303 	and.w	r3, r3, #3
 80033a8:	2b02      	cmp	r3, #2
 80033aa:	d123      	bne.n	80033f4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80033ac:	69fb      	ldr	r3, [r7, #28]
 80033ae:	08da      	lsrs	r2, r3, #3
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	3208      	adds	r2, #8
 80033b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80033b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80033ba:	69fb      	ldr	r3, [r7, #28]
 80033bc:	f003 0307 	and.w	r3, r3, #7
 80033c0:	009b      	lsls	r3, r3, #2
 80033c2:	220f      	movs	r2, #15
 80033c4:	fa02 f303 	lsl.w	r3, r2, r3
 80033c8:	43db      	mvns	r3, r3
 80033ca:	69ba      	ldr	r2, [r7, #24]
 80033cc:	4013      	ands	r3, r2
 80033ce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	691a      	ldr	r2, [r3, #16]
 80033d4:	69fb      	ldr	r3, [r7, #28]
 80033d6:	f003 0307 	and.w	r3, r3, #7
 80033da:	009b      	lsls	r3, r3, #2
 80033dc:	fa02 f303 	lsl.w	r3, r2, r3
 80033e0:	69ba      	ldr	r2, [r7, #24]
 80033e2:	4313      	orrs	r3, r2
 80033e4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80033e6:	69fb      	ldr	r3, [r7, #28]
 80033e8:	08da      	lsrs	r2, r3, #3
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	3208      	adds	r2, #8
 80033ee:	69b9      	ldr	r1, [r7, #24]
 80033f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80033fa:	69fb      	ldr	r3, [r7, #28]
 80033fc:	005b      	lsls	r3, r3, #1
 80033fe:	2203      	movs	r2, #3
 8003400:	fa02 f303 	lsl.w	r3, r2, r3
 8003404:	43db      	mvns	r3, r3
 8003406:	69ba      	ldr	r2, [r7, #24]
 8003408:	4013      	ands	r3, r2
 800340a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	f003 0203 	and.w	r2, r3, #3
 8003414:	69fb      	ldr	r3, [r7, #28]
 8003416:	005b      	lsls	r3, r3, #1
 8003418:	fa02 f303 	lsl.w	r3, r2, r3
 800341c:	69ba      	ldr	r2, [r7, #24]
 800341e:	4313      	orrs	r3, r2
 8003420:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	69ba      	ldr	r2, [r7, #24]
 8003426:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003430:	2b00      	cmp	r3, #0
 8003432:	f000 80ae 	beq.w	8003592 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003436:	2300      	movs	r3, #0
 8003438:	60fb      	str	r3, [r7, #12]
 800343a:	4b5d      	ldr	r3, [pc, #372]	@ (80035b0 <HAL_GPIO_Init+0x300>)
 800343c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800343e:	4a5c      	ldr	r2, [pc, #368]	@ (80035b0 <HAL_GPIO_Init+0x300>)
 8003440:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003444:	6453      	str	r3, [r2, #68]	@ 0x44
 8003446:	4b5a      	ldr	r3, [pc, #360]	@ (80035b0 <HAL_GPIO_Init+0x300>)
 8003448:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800344a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800344e:	60fb      	str	r3, [r7, #12]
 8003450:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003452:	4a58      	ldr	r2, [pc, #352]	@ (80035b4 <HAL_GPIO_Init+0x304>)
 8003454:	69fb      	ldr	r3, [r7, #28]
 8003456:	089b      	lsrs	r3, r3, #2
 8003458:	3302      	adds	r3, #2
 800345a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800345e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003460:	69fb      	ldr	r3, [r7, #28]
 8003462:	f003 0303 	and.w	r3, r3, #3
 8003466:	009b      	lsls	r3, r3, #2
 8003468:	220f      	movs	r2, #15
 800346a:	fa02 f303 	lsl.w	r3, r2, r3
 800346e:	43db      	mvns	r3, r3
 8003470:	69ba      	ldr	r2, [r7, #24]
 8003472:	4013      	ands	r3, r2
 8003474:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	4a4f      	ldr	r2, [pc, #316]	@ (80035b8 <HAL_GPIO_Init+0x308>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d025      	beq.n	80034ca <HAL_GPIO_Init+0x21a>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	4a4e      	ldr	r2, [pc, #312]	@ (80035bc <HAL_GPIO_Init+0x30c>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d01f      	beq.n	80034c6 <HAL_GPIO_Init+0x216>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	4a4d      	ldr	r2, [pc, #308]	@ (80035c0 <HAL_GPIO_Init+0x310>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d019      	beq.n	80034c2 <HAL_GPIO_Init+0x212>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	4a4c      	ldr	r2, [pc, #304]	@ (80035c4 <HAL_GPIO_Init+0x314>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d013      	beq.n	80034be <HAL_GPIO_Init+0x20e>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	4a4b      	ldr	r2, [pc, #300]	@ (80035c8 <HAL_GPIO_Init+0x318>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d00d      	beq.n	80034ba <HAL_GPIO_Init+0x20a>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	4a4a      	ldr	r2, [pc, #296]	@ (80035cc <HAL_GPIO_Init+0x31c>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d007      	beq.n	80034b6 <HAL_GPIO_Init+0x206>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	4a49      	ldr	r2, [pc, #292]	@ (80035d0 <HAL_GPIO_Init+0x320>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d101      	bne.n	80034b2 <HAL_GPIO_Init+0x202>
 80034ae:	2306      	movs	r3, #6
 80034b0:	e00c      	b.n	80034cc <HAL_GPIO_Init+0x21c>
 80034b2:	2307      	movs	r3, #7
 80034b4:	e00a      	b.n	80034cc <HAL_GPIO_Init+0x21c>
 80034b6:	2305      	movs	r3, #5
 80034b8:	e008      	b.n	80034cc <HAL_GPIO_Init+0x21c>
 80034ba:	2304      	movs	r3, #4
 80034bc:	e006      	b.n	80034cc <HAL_GPIO_Init+0x21c>
 80034be:	2303      	movs	r3, #3
 80034c0:	e004      	b.n	80034cc <HAL_GPIO_Init+0x21c>
 80034c2:	2302      	movs	r3, #2
 80034c4:	e002      	b.n	80034cc <HAL_GPIO_Init+0x21c>
 80034c6:	2301      	movs	r3, #1
 80034c8:	e000      	b.n	80034cc <HAL_GPIO_Init+0x21c>
 80034ca:	2300      	movs	r3, #0
 80034cc:	69fa      	ldr	r2, [r7, #28]
 80034ce:	f002 0203 	and.w	r2, r2, #3
 80034d2:	0092      	lsls	r2, r2, #2
 80034d4:	4093      	lsls	r3, r2
 80034d6:	69ba      	ldr	r2, [r7, #24]
 80034d8:	4313      	orrs	r3, r2
 80034da:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80034dc:	4935      	ldr	r1, [pc, #212]	@ (80035b4 <HAL_GPIO_Init+0x304>)
 80034de:	69fb      	ldr	r3, [r7, #28]
 80034e0:	089b      	lsrs	r3, r3, #2
 80034e2:	3302      	adds	r3, #2
 80034e4:	69ba      	ldr	r2, [r7, #24]
 80034e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80034ea:	4b3a      	ldr	r3, [pc, #232]	@ (80035d4 <HAL_GPIO_Init+0x324>)
 80034ec:	689b      	ldr	r3, [r3, #8]
 80034ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034f0:	693b      	ldr	r3, [r7, #16]
 80034f2:	43db      	mvns	r3, r3
 80034f4:	69ba      	ldr	r2, [r7, #24]
 80034f6:	4013      	ands	r3, r2
 80034f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003502:	2b00      	cmp	r3, #0
 8003504:	d003      	beq.n	800350e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003506:	69ba      	ldr	r2, [r7, #24]
 8003508:	693b      	ldr	r3, [r7, #16]
 800350a:	4313      	orrs	r3, r2
 800350c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800350e:	4a31      	ldr	r2, [pc, #196]	@ (80035d4 <HAL_GPIO_Init+0x324>)
 8003510:	69bb      	ldr	r3, [r7, #24]
 8003512:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003514:	4b2f      	ldr	r3, [pc, #188]	@ (80035d4 <HAL_GPIO_Init+0x324>)
 8003516:	68db      	ldr	r3, [r3, #12]
 8003518:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800351a:	693b      	ldr	r3, [r7, #16]
 800351c:	43db      	mvns	r3, r3
 800351e:	69ba      	ldr	r2, [r7, #24]
 8003520:	4013      	ands	r3, r2
 8003522:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800352c:	2b00      	cmp	r3, #0
 800352e:	d003      	beq.n	8003538 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003530:	69ba      	ldr	r2, [r7, #24]
 8003532:	693b      	ldr	r3, [r7, #16]
 8003534:	4313      	orrs	r3, r2
 8003536:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003538:	4a26      	ldr	r2, [pc, #152]	@ (80035d4 <HAL_GPIO_Init+0x324>)
 800353a:	69bb      	ldr	r3, [r7, #24]
 800353c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800353e:	4b25      	ldr	r3, [pc, #148]	@ (80035d4 <HAL_GPIO_Init+0x324>)
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003544:	693b      	ldr	r3, [r7, #16]
 8003546:	43db      	mvns	r3, r3
 8003548:	69ba      	ldr	r2, [r7, #24]
 800354a:	4013      	ands	r3, r2
 800354c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003556:	2b00      	cmp	r3, #0
 8003558:	d003      	beq.n	8003562 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800355a:	69ba      	ldr	r2, [r7, #24]
 800355c:	693b      	ldr	r3, [r7, #16]
 800355e:	4313      	orrs	r3, r2
 8003560:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003562:	4a1c      	ldr	r2, [pc, #112]	@ (80035d4 <HAL_GPIO_Init+0x324>)
 8003564:	69bb      	ldr	r3, [r7, #24]
 8003566:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003568:	4b1a      	ldr	r3, [pc, #104]	@ (80035d4 <HAL_GPIO_Init+0x324>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800356e:	693b      	ldr	r3, [r7, #16]
 8003570:	43db      	mvns	r3, r3
 8003572:	69ba      	ldr	r2, [r7, #24]
 8003574:	4013      	ands	r3, r2
 8003576:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003580:	2b00      	cmp	r3, #0
 8003582:	d003      	beq.n	800358c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003584:	69ba      	ldr	r2, [r7, #24]
 8003586:	693b      	ldr	r3, [r7, #16]
 8003588:	4313      	orrs	r3, r2
 800358a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800358c:	4a11      	ldr	r2, [pc, #68]	@ (80035d4 <HAL_GPIO_Init+0x324>)
 800358e:	69bb      	ldr	r3, [r7, #24]
 8003590:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003592:	69fb      	ldr	r3, [r7, #28]
 8003594:	3301      	adds	r3, #1
 8003596:	61fb      	str	r3, [r7, #28]
 8003598:	69fb      	ldr	r3, [r7, #28]
 800359a:	2b0f      	cmp	r3, #15
 800359c:	f67f ae96 	bls.w	80032cc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80035a0:	bf00      	nop
 80035a2:	bf00      	nop
 80035a4:	3724      	adds	r7, #36	@ 0x24
 80035a6:	46bd      	mov	sp, r7
 80035a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ac:	4770      	bx	lr
 80035ae:	bf00      	nop
 80035b0:	40023800 	.word	0x40023800
 80035b4:	40013800 	.word	0x40013800
 80035b8:	40020000 	.word	0x40020000
 80035bc:	40020400 	.word	0x40020400
 80035c0:	40020800 	.word	0x40020800
 80035c4:	40020c00 	.word	0x40020c00
 80035c8:	40021000 	.word	0x40021000
 80035cc:	40021400 	.word	0x40021400
 80035d0:	40021800 	.word	0x40021800
 80035d4:	40013c00 	.word	0x40013c00

080035d8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80035d8:	b480      	push	{r7}
 80035da:	b085      	sub	sp, #20
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
 80035e0:	460b      	mov	r3, r1
 80035e2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	691a      	ldr	r2, [r3, #16]
 80035e8:	887b      	ldrh	r3, [r7, #2]
 80035ea:	4013      	ands	r3, r2
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d002      	beq.n	80035f6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80035f0:	2301      	movs	r3, #1
 80035f2:	73fb      	strb	r3, [r7, #15]
 80035f4:	e001      	b.n	80035fa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80035f6:	2300      	movs	r3, #0
 80035f8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80035fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80035fc:	4618      	mov	r0, r3
 80035fe:	3714      	adds	r7, #20
 8003600:	46bd      	mov	sp, r7
 8003602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003606:	4770      	bx	lr

08003608 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003608:	b480      	push	{r7}
 800360a:	b083      	sub	sp, #12
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
 8003610:	460b      	mov	r3, r1
 8003612:	807b      	strh	r3, [r7, #2]
 8003614:	4613      	mov	r3, r2
 8003616:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003618:	787b      	ldrb	r3, [r7, #1]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d003      	beq.n	8003626 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800361e:	887a      	ldrh	r2, [r7, #2]
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003624:	e003      	b.n	800362e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003626:	887b      	ldrh	r3, [r7, #2]
 8003628:	041a      	lsls	r2, r3, #16
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	619a      	str	r2, [r3, #24]
}
 800362e:	bf00      	nop
 8003630:	370c      	adds	r7, #12
 8003632:	46bd      	mov	sp, r7
 8003634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003638:	4770      	bx	lr
	...

0800363c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b082      	sub	sp, #8
 8003640:	af00      	add	r7, sp, #0
 8003642:	4603      	mov	r3, r0
 8003644:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003646:	4b08      	ldr	r3, [pc, #32]	@ (8003668 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003648:	695a      	ldr	r2, [r3, #20]
 800364a:	88fb      	ldrh	r3, [r7, #6]
 800364c:	4013      	ands	r3, r2
 800364e:	2b00      	cmp	r3, #0
 8003650:	d006      	beq.n	8003660 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003652:	4a05      	ldr	r2, [pc, #20]	@ (8003668 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003654:	88fb      	ldrh	r3, [r7, #6]
 8003656:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003658:	88fb      	ldrh	r3, [r7, #6]
 800365a:	4618      	mov	r0, r3
 800365c:	f7fe fb52 	bl	8001d04 <HAL_GPIO_EXTI_Callback>
  }
}
 8003660:	bf00      	nop
 8003662:	3708      	adds	r7, #8
 8003664:	46bd      	mov	sp, r7
 8003666:	bd80      	pop	{r7, pc}
 8003668:	40013c00 	.word	0x40013c00

0800366c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b084      	sub	sp, #16
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d101      	bne.n	800367e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800367a:	2301      	movs	r3, #1
 800367c:	e12b      	b.n	80038d6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003684:	b2db      	uxtb	r3, r3
 8003686:	2b00      	cmp	r3, #0
 8003688:	d106      	bne.n	8003698 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2200      	movs	r2, #0
 800368e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003692:	6878      	ldr	r0, [r7, #4]
 8003694:	f7fe fa0c 	bl	8001ab0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2224      	movs	r2, #36	@ 0x24
 800369c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	681a      	ldr	r2, [r3, #0]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f022 0201 	bic.w	r2, r2, #1
 80036ae:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	681a      	ldr	r2, [r3, #0]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80036be:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	681a      	ldr	r2, [r3, #0]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80036ce:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80036d0:	f001 f8b8 	bl	8004844 <HAL_RCC_GetPCLK1Freq>
 80036d4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	4a81      	ldr	r2, [pc, #516]	@ (80038e0 <HAL_I2C_Init+0x274>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d807      	bhi.n	80036f0 <HAL_I2C_Init+0x84>
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	4a80      	ldr	r2, [pc, #512]	@ (80038e4 <HAL_I2C_Init+0x278>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	bf94      	ite	ls
 80036e8:	2301      	movls	r3, #1
 80036ea:	2300      	movhi	r3, #0
 80036ec:	b2db      	uxtb	r3, r3
 80036ee:	e006      	b.n	80036fe <HAL_I2C_Init+0x92>
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	4a7d      	ldr	r2, [pc, #500]	@ (80038e8 <HAL_I2C_Init+0x27c>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	bf94      	ite	ls
 80036f8:	2301      	movls	r3, #1
 80036fa:	2300      	movhi	r3, #0
 80036fc:	b2db      	uxtb	r3, r3
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d001      	beq.n	8003706 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003702:	2301      	movs	r3, #1
 8003704:	e0e7      	b.n	80038d6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	4a78      	ldr	r2, [pc, #480]	@ (80038ec <HAL_I2C_Init+0x280>)
 800370a:	fba2 2303 	umull	r2, r3, r2, r3
 800370e:	0c9b      	lsrs	r3, r3, #18
 8003710:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	68ba      	ldr	r2, [r7, #8]
 8003722:	430a      	orrs	r2, r1
 8003724:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	6a1b      	ldr	r3, [r3, #32]
 800372c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	4a6a      	ldr	r2, [pc, #424]	@ (80038e0 <HAL_I2C_Init+0x274>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d802      	bhi.n	8003740 <HAL_I2C_Init+0xd4>
 800373a:	68bb      	ldr	r3, [r7, #8]
 800373c:	3301      	adds	r3, #1
 800373e:	e009      	b.n	8003754 <HAL_I2C_Init+0xe8>
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003746:	fb02 f303 	mul.w	r3, r2, r3
 800374a:	4a69      	ldr	r2, [pc, #420]	@ (80038f0 <HAL_I2C_Init+0x284>)
 800374c:	fba2 2303 	umull	r2, r3, r2, r3
 8003750:	099b      	lsrs	r3, r3, #6
 8003752:	3301      	adds	r3, #1
 8003754:	687a      	ldr	r2, [r7, #4]
 8003756:	6812      	ldr	r2, [r2, #0]
 8003758:	430b      	orrs	r3, r1
 800375a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	69db      	ldr	r3, [r3, #28]
 8003762:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003766:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	685b      	ldr	r3, [r3, #4]
 800376e:	495c      	ldr	r1, [pc, #368]	@ (80038e0 <HAL_I2C_Init+0x274>)
 8003770:	428b      	cmp	r3, r1
 8003772:	d819      	bhi.n	80037a8 <HAL_I2C_Init+0x13c>
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	1e59      	subs	r1, r3, #1
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	005b      	lsls	r3, r3, #1
 800377e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003782:	1c59      	adds	r1, r3, #1
 8003784:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003788:	400b      	ands	r3, r1
 800378a:	2b00      	cmp	r3, #0
 800378c:	d00a      	beq.n	80037a4 <HAL_I2C_Init+0x138>
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	1e59      	subs	r1, r3, #1
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	005b      	lsls	r3, r3, #1
 8003798:	fbb1 f3f3 	udiv	r3, r1, r3
 800379c:	3301      	adds	r3, #1
 800379e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037a2:	e051      	b.n	8003848 <HAL_I2C_Init+0x1dc>
 80037a4:	2304      	movs	r3, #4
 80037a6:	e04f      	b.n	8003848 <HAL_I2C_Init+0x1dc>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	689b      	ldr	r3, [r3, #8]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d111      	bne.n	80037d4 <HAL_I2C_Init+0x168>
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	1e58      	subs	r0, r3, #1
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6859      	ldr	r1, [r3, #4]
 80037b8:	460b      	mov	r3, r1
 80037ba:	005b      	lsls	r3, r3, #1
 80037bc:	440b      	add	r3, r1
 80037be:	fbb0 f3f3 	udiv	r3, r0, r3
 80037c2:	3301      	adds	r3, #1
 80037c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	bf0c      	ite	eq
 80037cc:	2301      	moveq	r3, #1
 80037ce:	2300      	movne	r3, #0
 80037d0:	b2db      	uxtb	r3, r3
 80037d2:	e012      	b.n	80037fa <HAL_I2C_Init+0x18e>
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	1e58      	subs	r0, r3, #1
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6859      	ldr	r1, [r3, #4]
 80037dc:	460b      	mov	r3, r1
 80037de:	009b      	lsls	r3, r3, #2
 80037e0:	440b      	add	r3, r1
 80037e2:	0099      	lsls	r1, r3, #2
 80037e4:	440b      	add	r3, r1
 80037e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80037ea:	3301      	adds	r3, #1
 80037ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	bf0c      	ite	eq
 80037f4:	2301      	moveq	r3, #1
 80037f6:	2300      	movne	r3, #0
 80037f8:	b2db      	uxtb	r3, r3
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d001      	beq.n	8003802 <HAL_I2C_Init+0x196>
 80037fe:	2301      	movs	r3, #1
 8003800:	e022      	b.n	8003848 <HAL_I2C_Init+0x1dc>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	689b      	ldr	r3, [r3, #8]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d10e      	bne.n	8003828 <HAL_I2C_Init+0x1bc>
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	1e58      	subs	r0, r3, #1
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6859      	ldr	r1, [r3, #4]
 8003812:	460b      	mov	r3, r1
 8003814:	005b      	lsls	r3, r3, #1
 8003816:	440b      	add	r3, r1
 8003818:	fbb0 f3f3 	udiv	r3, r0, r3
 800381c:	3301      	adds	r3, #1
 800381e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003822:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003826:	e00f      	b.n	8003848 <HAL_I2C_Init+0x1dc>
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	1e58      	subs	r0, r3, #1
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6859      	ldr	r1, [r3, #4]
 8003830:	460b      	mov	r3, r1
 8003832:	009b      	lsls	r3, r3, #2
 8003834:	440b      	add	r3, r1
 8003836:	0099      	lsls	r1, r3, #2
 8003838:	440b      	add	r3, r1
 800383a:	fbb0 f3f3 	udiv	r3, r0, r3
 800383e:	3301      	adds	r3, #1
 8003840:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003844:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003848:	6879      	ldr	r1, [r7, #4]
 800384a:	6809      	ldr	r1, [r1, #0]
 800384c:	4313      	orrs	r3, r2
 800384e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	69da      	ldr	r2, [r3, #28]
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6a1b      	ldr	r3, [r3, #32]
 8003862:	431a      	orrs	r2, r3
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	430a      	orrs	r2, r1
 800386a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	689b      	ldr	r3, [r3, #8]
 8003872:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003876:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800387a:	687a      	ldr	r2, [r7, #4]
 800387c:	6911      	ldr	r1, [r2, #16]
 800387e:	687a      	ldr	r2, [r7, #4]
 8003880:	68d2      	ldr	r2, [r2, #12]
 8003882:	4311      	orrs	r1, r2
 8003884:	687a      	ldr	r2, [r7, #4]
 8003886:	6812      	ldr	r2, [r2, #0]
 8003888:	430b      	orrs	r3, r1
 800388a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	68db      	ldr	r3, [r3, #12]
 8003892:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	695a      	ldr	r2, [r3, #20]
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	699b      	ldr	r3, [r3, #24]
 800389e:	431a      	orrs	r2, r3
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	430a      	orrs	r2, r1
 80038a6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	681a      	ldr	r2, [r3, #0]
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f042 0201 	orr.w	r2, r2, #1
 80038b6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2200      	movs	r2, #0
 80038bc:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2220      	movs	r2, #32
 80038c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2200      	movs	r2, #0
 80038ca:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2200      	movs	r2, #0
 80038d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80038d4:	2300      	movs	r3, #0
}
 80038d6:	4618      	mov	r0, r3
 80038d8:	3710      	adds	r7, #16
 80038da:	46bd      	mov	sp, r7
 80038dc:	bd80      	pop	{r7, pc}
 80038de:	bf00      	nop
 80038e0:	000186a0 	.word	0x000186a0
 80038e4:	001e847f 	.word	0x001e847f
 80038e8:	003d08ff 	.word	0x003d08ff
 80038ec:	431bde83 	.word	0x431bde83
 80038f0:	10624dd3 	.word	0x10624dd3

080038f4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b088      	sub	sp, #32
 80038f8:	af02      	add	r7, sp, #8
 80038fa:	60f8      	str	r0, [r7, #12]
 80038fc:	607a      	str	r2, [r7, #4]
 80038fe:	461a      	mov	r2, r3
 8003900:	460b      	mov	r3, r1
 8003902:	817b      	strh	r3, [r7, #10]
 8003904:	4613      	mov	r3, r2
 8003906:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003908:	f7ff fb90 	bl	800302c <HAL_GetTick>
 800390c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003914:	b2db      	uxtb	r3, r3
 8003916:	2b20      	cmp	r3, #32
 8003918:	f040 80e0 	bne.w	8003adc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800391c:	697b      	ldr	r3, [r7, #20]
 800391e:	9300      	str	r3, [sp, #0]
 8003920:	2319      	movs	r3, #25
 8003922:	2201      	movs	r2, #1
 8003924:	4970      	ldr	r1, [pc, #448]	@ (8003ae8 <HAL_I2C_Master_Transmit+0x1f4>)
 8003926:	68f8      	ldr	r0, [r7, #12]
 8003928:	f000 fc64 	bl	80041f4 <I2C_WaitOnFlagUntilTimeout>
 800392c:	4603      	mov	r3, r0
 800392e:	2b00      	cmp	r3, #0
 8003930:	d001      	beq.n	8003936 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003932:	2302      	movs	r3, #2
 8003934:	e0d3      	b.n	8003ade <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800393c:	2b01      	cmp	r3, #1
 800393e:	d101      	bne.n	8003944 <HAL_I2C_Master_Transmit+0x50>
 8003940:	2302      	movs	r3, #2
 8003942:	e0cc      	b.n	8003ade <HAL_I2C_Master_Transmit+0x1ea>
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	2201      	movs	r2, #1
 8003948:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f003 0301 	and.w	r3, r3, #1
 8003956:	2b01      	cmp	r3, #1
 8003958:	d007      	beq.n	800396a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	681a      	ldr	r2, [r3, #0]
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f042 0201 	orr.w	r2, r2, #1
 8003968:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	681a      	ldr	r2, [r3, #0]
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003978:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	2221      	movs	r2, #33	@ 0x21
 800397e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	2210      	movs	r2, #16
 8003986:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	2200      	movs	r2, #0
 800398e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	687a      	ldr	r2, [r7, #4]
 8003994:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	893a      	ldrh	r2, [r7, #8]
 800399a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039a0:	b29a      	uxth	r2, r3
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	4a50      	ldr	r2, [pc, #320]	@ (8003aec <HAL_I2C_Master_Transmit+0x1f8>)
 80039aa:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80039ac:	8979      	ldrh	r1, [r7, #10]
 80039ae:	697b      	ldr	r3, [r7, #20]
 80039b0:	6a3a      	ldr	r2, [r7, #32]
 80039b2:	68f8      	ldr	r0, [r7, #12]
 80039b4:	f000 face 	bl	8003f54 <I2C_MasterRequestWrite>
 80039b8:	4603      	mov	r3, r0
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d001      	beq.n	80039c2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80039be:	2301      	movs	r3, #1
 80039c0:	e08d      	b.n	8003ade <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039c2:	2300      	movs	r3, #0
 80039c4:	613b      	str	r3, [r7, #16]
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	695b      	ldr	r3, [r3, #20]
 80039cc:	613b      	str	r3, [r7, #16]
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	699b      	ldr	r3, [r3, #24]
 80039d4:	613b      	str	r3, [r7, #16]
 80039d6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80039d8:	e066      	b.n	8003aa8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80039da:	697a      	ldr	r2, [r7, #20]
 80039dc:	6a39      	ldr	r1, [r7, #32]
 80039de:	68f8      	ldr	r0, [r7, #12]
 80039e0:	f000 fd22 	bl	8004428 <I2C_WaitOnTXEFlagUntilTimeout>
 80039e4:	4603      	mov	r3, r0
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d00d      	beq.n	8003a06 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039ee:	2b04      	cmp	r3, #4
 80039f0:	d107      	bne.n	8003a02 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	681a      	ldr	r2, [r3, #0]
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a00:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003a02:	2301      	movs	r3, #1
 8003a04:	e06b      	b.n	8003ade <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a0a:	781a      	ldrb	r2, [r3, #0]
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a16:	1c5a      	adds	r2, r3, #1
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a20:	b29b      	uxth	r3, r3
 8003a22:	3b01      	subs	r3, #1
 8003a24:	b29a      	uxth	r2, r3
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a2e:	3b01      	subs	r3, #1
 8003a30:	b29a      	uxth	r2, r3
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	695b      	ldr	r3, [r3, #20]
 8003a3c:	f003 0304 	and.w	r3, r3, #4
 8003a40:	2b04      	cmp	r3, #4
 8003a42:	d11b      	bne.n	8003a7c <HAL_I2C_Master_Transmit+0x188>
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d017      	beq.n	8003a7c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a50:	781a      	ldrb	r2, [r3, #0]
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a5c:	1c5a      	adds	r2, r3, #1
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a66:	b29b      	uxth	r3, r3
 8003a68:	3b01      	subs	r3, #1
 8003a6a:	b29a      	uxth	r2, r3
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a74:	3b01      	subs	r3, #1
 8003a76:	b29a      	uxth	r2, r3
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a7c:	697a      	ldr	r2, [r7, #20]
 8003a7e:	6a39      	ldr	r1, [r7, #32]
 8003a80:	68f8      	ldr	r0, [r7, #12]
 8003a82:	f000 fd19 	bl	80044b8 <I2C_WaitOnBTFFlagUntilTimeout>
 8003a86:	4603      	mov	r3, r0
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d00d      	beq.n	8003aa8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a90:	2b04      	cmp	r3, #4
 8003a92:	d107      	bne.n	8003aa4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	681a      	ldr	r2, [r3, #0]
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003aa2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	e01a      	b.n	8003ade <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d194      	bne.n	80039da <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	681a      	ldr	r2, [r3, #0]
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003abe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	2220      	movs	r2, #32
 8003ac4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	2200      	movs	r2, #0
 8003acc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003ad8:	2300      	movs	r3, #0
 8003ada:	e000      	b.n	8003ade <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003adc:	2302      	movs	r3, #2
  }
}
 8003ade:	4618      	mov	r0, r3
 8003ae0:	3718      	adds	r7, #24
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bd80      	pop	{r7, pc}
 8003ae6:	bf00      	nop
 8003ae8:	00100002 	.word	0x00100002
 8003aec:	ffff0000 	.word	0xffff0000

08003af0 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b08c      	sub	sp, #48	@ 0x30
 8003af4:	af02      	add	r7, sp, #8
 8003af6:	60f8      	str	r0, [r7, #12]
 8003af8:	607a      	str	r2, [r7, #4]
 8003afa:	461a      	mov	r2, r3
 8003afc:	460b      	mov	r3, r1
 8003afe:	817b      	strh	r3, [r7, #10]
 8003b00:	4613      	mov	r3, r2
 8003b02:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003b04:	f7ff fa92 	bl	800302c <HAL_GetTick>
 8003b08:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b10:	b2db      	uxtb	r3, r3
 8003b12:	2b20      	cmp	r3, #32
 8003b14:	f040 8217 	bne.w	8003f46 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003b18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b1a:	9300      	str	r3, [sp, #0]
 8003b1c:	2319      	movs	r3, #25
 8003b1e:	2201      	movs	r2, #1
 8003b20:	497c      	ldr	r1, [pc, #496]	@ (8003d14 <HAL_I2C_Master_Receive+0x224>)
 8003b22:	68f8      	ldr	r0, [r7, #12]
 8003b24:	f000 fb66 	bl	80041f4 <I2C_WaitOnFlagUntilTimeout>
 8003b28:	4603      	mov	r3, r0
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d001      	beq.n	8003b32 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8003b2e:	2302      	movs	r3, #2
 8003b30:	e20a      	b.n	8003f48 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003b38:	2b01      	cmp	r3, #1
 8003b3a:	d101      	bne.n	8003b40 <HAL_I2C_Master_Receive+0x50>
 8003b3c:	2302      	movs	r3, #2
 8003b3e:	e203      	b.n	8003f48 <HAL_I2C_Master_Receive+0x458>
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	2201      	movs	r2, #1
 8003b44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f003 0301 	and.w	r3, r3, #1
 8003b52:	2b01      	cmp	r3, #1
 8003b54:	d007      	beq.n	8003b66 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	681a      	ldr	r2, [r3, #0]
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f042 0201 	orr.w	r2, r2, #1
 8003b64:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	681a      	ldr	r2, [r3, #0]
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003b74:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	2222      	movs	r2, #34	@ 0x22
 8003b7a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	2210      	movs	r2, #16
 8003b82:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	687a      	ldr	r2, [r7, #4]
 8003b90:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	893a      	ldrh	r2, [r7, #8]
 8003b96:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b9c:	b29a      	uxth	r2, r3
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	4a5c      	ldr	r2, [pc, #368]	@ (8003d18 <HAL_I2C_Master_Receive+0x228>)
 8003ba6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003ba8:	8979      	ldrh	r1, [r7, #10]
 8003baa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003bae:	68f8      	ldr	r0, [r7, #12]
 8003bb0:	f000 fa52 	bl	8004058 <I2C_MasterRequestRead>
 8003bb4:	4603      	mov	r3, r0
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d001      	beq.n	8003bbe <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8003bba:	2301      	movs	r3, #1
 8003bbc:	e1c4      	b.n	8003f48 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d113      	bne.n	8003bee <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	623b      	str	r3, [r7, #32]
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	695b      	ldr	r3, [r3, #20]
 8003bd0:	623b      	str	r3, [r7, #32]
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	699b      	ldr	r3, [r3, #24]
 8003bd8:	623b      	str	r3, [r7, #32]
 8003bda:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	681a      	ldr	r2, [r3, #0]
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003bea:	601a      	str	r2, [r3, #0]
 8003bec:	e198      	b.n	8003f20 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003bf2:	2b01      	cmp	r3, #1
 8003bf4:	d11b      	bne.n	8003c2e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	681a      	ldr	r2, [r3, #0]
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003c04:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c06:	2300      	movs	r3, #0
 8003c08:	61fb      	str	r3, [r7, #28]
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	695b      	ldr	r3, [r3, #20]
 8003c10:	61fb      	str	r3, [r7, #28]
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	699b      	ldr	r3, [r3, #24]
 8003c18:	61fb      	str	r3, [r7, #28]
 8003c1a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	681a      	ldr	r2, [r3, #0]
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c2a:	601a      	str	r2, [r3, #0]
 8003c2c:	e178      	b.n	8003f20 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c32:	2b02      	cmp	r3, #2
 8003c34:	d11b      	bne.n	8003c6e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	681a      	ldr	r2, [r3, #0]
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003c44:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	681a      	ldr	r2, [r3, #0]
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003c54:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c56:	2300      	movs	r3, #0
 8003c58:	61bb      	str	r3, [r7, #24]
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	695b      	ldr	r3, [r3, #20]
 8003c60:	61bb      	str	r3, [r7, #24]
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	699b      	ldr	r3, [r3, #24]
 8003c68:	61bb      	str	r3, [r7, #24]
 8003c6a:	69bb      	ldr	r3, [r7, #24]
 8003c6c:	e158      	b.n	8003f20 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	681a      	ldr	r2, [r3, #0]
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003c7c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c7e:	2300      	movs	r3, #0
 8003c80:	617b      	str	r3, [r7, #20]
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	695b      	ldr	r3, [r3, #20]
 8003c88:	617b      	str	r3, [r7, #20]
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	699b      	ldr	r3, [r3, #24]
 8003c90:	617b      	str	r3, [r7, #20]
 8003c92:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003c94:	e144      	b.n	8003f20 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c9a:	2b03      	cmp	r3, #3
 8003c9c:	f200 80f1 	bhi.w	8003e82 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ca4:	2b01      	cmp	r3, #1
 8003ca6:	d123      	bne.n	8003cf0 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ca8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003caa:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003cac:	68f8      	ldr	r0, [r7, #12]
 8003cae:	f000 fc4b 	bl	8004548 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d001      	beq.n	8003cbc <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8003cb8:	2301      	movs	r3, #1
 8003cba:	e145      	b.n	8003f48 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	691a      	ldr	r2, [r3, #16]
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cc6:	b2d2      	uxtb	r2, r2
 8003cc8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cce:	1c5a      	adds	r2, r3, #1
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cd8:	3b01      	subs	r3, #1
 8003cda:	b29a      	uxth	r2, r3
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ce4:	b29b      	uxth	r3, r3
 8003ce6:	3b01      	subs	r3, #1
 8003ce8:	b29a      	uxth	r2, r3
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003cee:	e117      	b.n	8003f20 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cf4:	2b02      	cmp	r3, #2
 8003cf6:	d14e      	bne.n	8003d96 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003cf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cfa:	9300      	str	r3, [sp, #0]
 8003cfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cfe:	2200      	movs	r2, #0
 8003d00:	4906      	ldr	r1, [pc, #24]	@ (8003d1c <HAL_I2C_Master_Receive+0x22c>)
 8003d02:	68f8      	ldr	r0, [r7, #12]
 8003d04:	f000 fa76 	bl	80041f4 <I2C_WaitOnFlagUntilTimeout>
 8003d08:	4603      	mov	r3, r0
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d008      	beq.n	8003d20 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8003d0e:	2301      	movs	r3, #1
 8003d10:	e11a      	b.n	8003f48 <HAL_I2C_Master_Receive+0x458>
 8003d12:	bf00      	nop
 8003d14:	00100002 	.word	0x00100002
 8003d18:	ffff0000 	.word	0xffff0000
 8003d1c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	681a      	ldr	r2, [r3, #0]
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d2e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	691a      	ldr	r2, [r3, #16]
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d3a:	b2d2      	uxtb	r2, r2
 8003d3c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d42:	1c5a      	adds	r2, r3, #1
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d4c:	3b01      	subs	r3, #1
 8003d4e:	b29a      	uxth	r2, r3
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d58:	b29b      	uxth	r3, r3
 8003d5a:	3b01      	subs	r3, #1
 8003d5c:	b29a      	uxth	r2, r3
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	691a      	ldr	r2, [r3, #16]
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d6c:	b2d2      	uxtb	r2, r2
 8003d6e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d74:	1c5a      	adds	r2, r3, #1
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d7e:	3b01      	subs	r3, #1
 8003d80:	b29a      	uxth	r2, r3
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d8a:	b29b      	uxth	r3, r3
 8003d8c:	3b01      	subs	r3, #1
 8003d8e:	b29a      	uxth	r2, r3
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003d94:	e0c4      	b.n	8003f20 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003d96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d98:	9300      	str	r3, [sp, #0]
 8003d9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	496c      	ldr	r1, [pc, #432]	@ (8003f50 <HAL_I2C_Master_Receive+0x460>)
 8003da0:	68f8      	ldr	r0, [r7, #12]
 8003da2:	f000 fa27 	bl	80041f4 <I2C_WaitOnFlagUntilTimeout>
 8003da6:	4603      	mov	r3, r0
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d001      	beq.n	8003db0 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8003dac:	2301      	movs	r3, #1
 8003dae:	e0cb      	b.n	8003f48 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	681a      	ldr	r2, [r3, #0]
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003dbe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	691a      	ldr	r2, [r3, #16]
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dca:	b2d2      	uxtb	r2, r2
 8003dcc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dd2:	1c5a      	adds	r2, r3, #1
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ddc:	3b01      	subs	r3, #1
 8003dde:	b29a      	uxth	r2, r3
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003de8:	b29b      	uxth	r3, r3
 8003dea:	3b01      	subs	r3, #1
 8003dec:	b29a      	uxth	r2, r3
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003df2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003df4:	9300      	str	r3, [sp, #0]
 8003df6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003df8:	2200      	movs	r2, #0
 8003dfa:	4955      	ldr	r1, [pc, #340]	@ (8003f50 <HAL_I2C_Master_Receive+0x460>)
 8003dfc:	68f8      	ldr	r0, [r7, #12]
 8003dfe:	f000 f9f9 	bl	80041f4 <I2C_WaitOnFlagUntilTimeout>
 8003e02:	4603      	mov	r3, r0
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d001      	beq.n	8003e0c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8003e08:	2301      	movs	r3, #1
 8003e0a:	e09d      	b.n	8003f48 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	681a      	ldr	r2, [r3, #0]
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e1a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	691a      	ldr	r2, [r3, #16]
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e26:	b2d2      	uxtb	r2, r2
 8003e28:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e2e:	1c5a      	adds	r2, r3, #1
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e38:	3b01      	subs	r3, #1
 8003e3a:	b29a      	uxth	r2, r3
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e44:	b29b      	uxth	r3, r3
 8003e46:	3b01      	subs	r3, #1
 8003e48:	b29a      	uxth	r2, r3
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	691a      	ldr	r2, [r3, #16]
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e58:	b2d2      	uxtb	r2, r2
 8003e5a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e60:	1c5a      	adds	r2, r3, #1
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e6a:	3b01      	subs	r3, #1
 8003e6c:	b29a      	uxth	r2, r3
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e76:	b29b      	uxth	r3, r3
 8003e78:	3b01      	subs	r3, #1
 8003e7a:	b29a      	uxth	r2, r3
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003e80:	e04e      	b.n	8003f20 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e82:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e84:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003e86:	68f8      	ldr	r0, [r7, #12]
 8003e88:	f000 fb5e 	bl	8004548 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003e8c:	4603      	mov	r3, r0
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d001      	beq.n	8003e96 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8003e92:	2301      	movs	r3, #1
 8003e94:	e058      	b.n	8003f48 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	691a      	ldr	r2, [r3, #16]
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ea0:	b2d2      	uxtb	r2, r2
 8003ea2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ea8:	1c5a      	adds	r2, r3, #1
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003eb2:	3b01      	subs	r3, #1
 8003eb4:	b29a      	uxth	r2, r3
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ebe:	b29b      	uxth	r3, r3
 8003ec0:	3b01      	subs	r3, #1
 8003ec2:	b29a      	uxth	r2, r3
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	695b      	ldr	r3, [r3, #20]
 8003ece:	f003 0304 	and.w	r3, r3, #4
 8003ed2:	2b04      	cmp	r3, #4
 8003ed4:	d124      	bne.n	8003f20 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003eda:	2b03      	cmp	r3, #3
 8003edc:	d107      	bne.n	8003eee <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	681a      	ldr	r2, [r3, #0]
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003eec:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	691a      	ldr	r2, [r3, #16]
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ef8:	b2d2      	uxtb	r2, r2
 8003efa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f00:	1c5a      	adds	r2, r3, #1
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f0a:	3b01      	subs	r3, #1
 8003f0c:	b29a      	uxth	r2, r3
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f16:	b29b      	uxth	r3, r3
 8003f18:	3b01      	subs	r3, #1
 8003f1a:	b29a      	uxth	r2, r3
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	f47f aeb6 	bne.w	8003c96 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	2220      	movs	r2, #32
 8003f2e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	2200      	movs	r2, #0
 8003f36:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003f42:	2300      	movs	r3, #0
 8003f44:	e000      	b.n	8003f48 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8003f46:	2302      	movs	r3, #2
  }
}
 8003f48:	4618      	mov	r0, r3
 8003f4a:	3728      	adds	r7, #40	@ 0x28
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	bd80      	pop	{r7, pc}
 8003f50:	00010004 	.word	0x00010004

08003f54 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b088      	sub	sp, #32
 8003f58:	af02      	add	r7, sp, #8
 8003f5a:	60f8      	str	r0, [r7, #12]
 8003f5c:	607a      	str	r2, [r7, #4]
 8003f5e:	603b      	str	r3, [r7, #0]
 8003f60:	460b      	mov	r3, r1
 8003f62:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f68:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003f6a:	697b      	ldr	r3, [r7, #20]
 8003f6c:	2b08      	cmp	r3, #8
 8003f6e:	d006      	beq.n	8003f7e <I2C_MasterRequestWrite+0x2a>
 8003f70:	697b      	ldr	r3, [r7, #20]
 8003f72:	2b01      	cmp	r3, #1
 8003f74:	d003      	beq.n	8003f7e <I2C_MasterRequestWrite+0x2a>
 8003f76:	697b      	ldr	r3, [r7, #20]
 8003f78:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003f7c:	d108      	bne.n	8003f90 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	681a      	ldr	r2, [r3, #0]
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003f8c:	601a      	str	r2, [r3, #0]
 8003f8e:	e00b      	b.n	8003fa8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f94:	2b12      	cmp	r3, #18
 8003f96:	d107      	bne.n	8003fa8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	681a      	ldr	r2, [r3, #0]
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003fa6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	9300      	str	r3, [sp, #0]
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2200      	movs	r2, #0
 8003fb0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003fb4:	68f8      	ldr	r0, [r7, #12]
 8003fb6:	f000 f91d 	bl	80041f4 <I2C_WaitOnFlagUntilTimeout>
 8003fba:	4603      	mov	r3, r0
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d00d      	beq.n	8003fdc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003fce:	d103      	bne.n	8003fd8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003fd6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003fd8:	2303      	movs	r3, #3
 8003fda:	e035      	b.n	8004048 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	691b      	ldr	r3, [r3, #16]
 8003fe0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003fe4:	d108      	bne.n	8003ff8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003fe6:	897b      	ldrh	r3, [r7, #10]
 8003fe8:	b2db      	uxtb	r3, r3
 8003fea:	461a      	mov	r2, r3
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003ff4:	611a      	str	r2, [r3, #16]
 8003ff6:	e01b      	b.n	8004030 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003ff8:	897b      	ldrh	r3, [r7, #10]
 8003ffa:	11db      	asrs	r3, r3, #7
 8003ffc:	b2db      	uxtb	r3, r3
 8003ffe:	f003 0306 	and.w	r3, r3, #6
 8004002:	b2db      	uxtb	r3, r3
 8004004:	f063 030f 	orn	r3, r3, #15
 8004008:	b2da      	uxtb	r2, r3
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	687a      	ldr	r2, [r7, #4]
 8004014:	490e      	ldr	r1, [pc, #56]	@ (8004050 <I2C_MasterRequestWrite+0xfc>)
 8004016:	68f8      	ldr	r0, [r7, #12]
 8004018:	f000 f966 	bl	80042e8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800401c:	4603      	mov	r3, r0
 800401e:	2b00      	cmp	r3, #0
 8004020:	d001      	beq.n	8004026 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004022:	2301      	movs	r3, #1
 8004024:	e010      	b.n	8004048 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004026:	897b      	ldrh	r3, [r7, #10]
 8004028:	b2da      	uxtb	r2, r3
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	687a      	ldr	r2, [r7, #4]
 8004034:	4907      	ldr	r1, [pc, #28]	@ (8004054 <I2C_MasterRequestWrite+0x100>)
 8004036:	68f8      	ldr	r0, [r7, #12]
 8004038:	f000 f956 	bl	80042e8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800403c:	4603      	mov	r3, r0
 800403e:	2b00      	cmp	r3, #0
 8004040:	d001      	beq.n	8004046 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004042:	2301      	movs	r3, #1
 8004044:	e000      	b.n	8004048 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004046:	2300      	movs	r3, #0
}
 8004048:	4618      	mov	r0, r3
 800404a:	3718      	adds	r7, #24
 800404c:	46bd      	mov	sp, r7
 800404e:	bd80      	pop	{r7, pc}
 8004050:	00010008 	.word	0x00010008
 8004054:	00010002 	.word	0x00010002

08004058 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b088      	sub	sp, #32
 800405c:	af02      	add	r7, sp, #8
 800405e:	60f8      	str	r0, [r7, #12]
 8004060:	607a      	str	r2, [r7, #4]
 8004062:	603b      	str	r3, [r7, #0]
 8004064:	460b      	mov	r3, r1
 8004066:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800406c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	681a      	ldr	r2, [r3, #0]
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800407c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800407e:	697b      	ldr	r3, [r7, #20]
 8004080:	2b08      	cmp	r3, #8
 8004082:	d006      	beq.n	8004092 <I2C_MasterRequestRead+0x3a>
 8004084:	697b      	ldr	r3, [r7, #20]
 8004086:	2b01      	cmp	r3, #1
 8004088:	d003      	beq.n	8004092 <I2C_MasterRequestRead+0x3a>
 800408a:	697b      	ldr	r3, [r7, #20]
 800408c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004090:	d108      	bne.n	80040a4 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	681a      	ldr	r2, [r3, #0]
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80040a0:	601a      	str	r2, [r3, #0]
 80040a2:	e00b      	b.n	80040bc <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040a8:	2b11      	cmp	r3, #17
 80040aa:	d107      	bne.n	80040bc <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	681a      	ldr	r2, [r3, #0]
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80040ba:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	9300      	str	r3, [sp, #0]
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2200      	movs	r2, #0
 80040c4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80040c8:	68f8      	ldr	r0, [r7, #12]
 80040ca:	f000 f893 	bl	80041f4 <I2C_WaitOnFlagUntilTimeout>
 80040ce:	4603      	mov	r3, r0
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d00d      	beq.n	80040f0 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80040e2:	d103      	bne.n	80040ec <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80040ea:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80040ec:	2303      	movs	r3, #3
 80040ee:	e079      	b.n	80041e4 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	691b      	ldr	r3, [r3, #16]
 80040f4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80040f8:	d108      	bne.n	800410c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80040fa:	897b      	ldrh	r3, [r7, #10]
 80040fc:	b2db      	uxtb	r3, r3
 80040fe:	f043 0301 	orr.w	r3, r3, #1
 8004102:	b2da      	uxtb	r2, r3
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	611a      	str	r2, [r3, #16]
 800410a:	e05f      	b.n	80041cc <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800410c:	897b      	ldrh	r3, [r7, #10]
 800410e:	11db      	asrs	r3, r3, #7
 8004110:	b2db      	uxtb	r3, r3
 8004112:	f003 0306 	and.w	r3, r3, #6
 8004116:	b2db      	uxtb	r3, r3
 8004118:	f063 030f 	orn	r3, r3, #15
 800411c:	b2da      	uxtb	r2, r3
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	687a      	ldr	r2, [r7, #4]
 8004128:	4930      	ldr	r1, [pc, #192]	@ (80041ec <I2C_MasterRequestRead+0x194>)
 800412a:	68f8      	ldr	r0, [r7, #12]
 800412c:	f000 f8dc 	bl	80042e8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004130:	4603      	mov	r3, r0
 8004132:	2b00      	cmp	r3, #0
 8004134:	d001      	beq.n	800413a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8004136:	2301      	movs	r3, #1
 8004138:	e054      	b.n	80041e4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800413a:	897b      	ldrh	r3, [r7, #10]
 800413c:	b2da      	uxtb	r2, r3
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	687a      	ldr	r2, [r7, #4]
 8004148:	4929      	ldr	r1, [pc, #164]	@ (80041f0 <I2C_MasterRequestRead+0x198>)
 800414a:	68f8      	ldr	r0, [r7, #12]
 800414c:	f000 f8cc 	bl	80042e8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004150:	4603      	mov	r3, r0
 8004152:	2b00      	cmp	r3, #0
 8004154:	d001      	beq.n	800415a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8004156:	2301      	movs	r3, #1
 8004158:	e044      	b.n	80041e4 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800415a:	2300      	movs	r3, #0
 800415c:	613b      	str	r3, [r7, #16]
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	695b      	ldr	r3, [r3, #20]
 8004164:	613b      	str	r3, [r7, #16]
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	699b      	ldr	r3, [r3, #24]
 800416c:	613b      	str	r3, [r7, #16]
 800416e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	681a      	ldr	r2, [r3, #0]
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800417e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	9300      	str	r3, [sp, #0]
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2200      	movs	r2, #0
 8004188:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800418c:	68f8      	ldr	r0, [r7, #12]
 800418e:	f000 f831 	bl	80041f4 <I2C_WaitOnFlagUntilTimeout>
 8004192:	4603      	mov	r3, r0
 8004194:	2b00      	cmp	r3, #0
 8004196:	d00d      	beq.n	80041b4 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80041a6:	d103      	bne.n	80041b0 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80041ae:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 80041b0:	2303      	movs	r3, #3
 80041b2:	e017      	b.n	80041e4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80041b4:	897b      	ldrh	r3, [r7, #10]
 80041b6:	11db      	asrs	r3, r3, #7
 80041b8:	b2db      	uxtb	r3, r3
 80041ba:	f003 0306 	and.w	r3, r3, #6
 80041be:	b2db      	uxtb	r3, r3
 80041c0:	f063 030e 	orn	r3, r3, #14
 80041c4:	b2da      	uxtb	r2, r3
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	687a      	ldr	r2, [r7, #4]
 80041d0:	4907      	ldr	r1, [pc, #28]	@ (80041f0 <I2C_MasterRequestRead+0x198>)
 80041d2:	68f8      	ldr	r0, [r7, #12]
 80041d4:	f000 f888 	bl	80042e8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80041d8:	4603      	mov	r3, r0
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d001      	beq.n	80041e2 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80041de:	2301      	movs	r3, #1
 80041e0:	e000      	b.n	80041e4 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80041e2:	2300      	movs	r3, #0
}
 80041e4:	4618      	mov	r0, r3
 80041e6:	3718      	adds	r7, #24
 80041e8:	46bd      	mov	sp, r7
 80041ea:	bd80      	pop	{r7, pc}
 80041ec:	00010008 	.word	0x00010008
 80041f0:	00010002 	.word	0x00010002

080041f4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b084      	sub	sp, #16
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	60f8      	str	r0, [r7, #12]
 80041fc:	60b9      	str	r1, [r7, #8]
 80041fe:	603b      	str	r3, [r7, #0]
 8004200:	4613      	mov	r3, r2
 8004202:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004204:	e048      	b.n	8004298 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	f1b3 3fff 	cmp.w	r3, #4294967295
 800420c:	d044      	beq.n	8004298 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800420e:	f7fe ff0d 	bl	800302c <HAL_GetTick>
 8004212:	4602      	mov	r2, r0
 8004214:	69bb      	ldr	r3, [r7, #24]
 8004216:	1ad3      	subs	r3, r2, r3
 8004218:	683a      	ldr	r2, [r7, #0]
 800421a:	429a      	cmp	r2, r3
 800421c:	d302      	bcc.n	8004224 <I2C_WaitOnFlagUntilTimeout+0x30>
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d139      	bne.n	8004298 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004224:	68bb      	ldr	r3, [r7, #8]
 8004226:	0c1b      	lsrs	r3, r3, #16
 8004228:	b2db      	uxtb	r3, r3
 800422a:	2b01      	cmp	r3, #1
 800422c:	d10d      	bne.n	800424a <I2C_WaitOnFlagUntilTimeout+0x56>
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	695b      	ldr	r3, [r3, #20]
 8004234:	43da      	mvns	r2, r3
 8004236:	68bb      	ldr	r3, [r7, #8]
 8004238:	4013      	ands	r3, r2
 800423a:	b29b      	uxth	r3, r3
 800423c:	2b00      	cmp	r3, #0
 800423e:	bf0c      	ite	eq
 8004240:	2301      	moveq	r3, #1
 8004242:	2300      	movne	r3, #0
 8004244:	b2db      	uxtb	r3, r3
 8004246:	461a      	mov	r2, r3
 8004248:	e00c      	b.n	8004264 <I2C_WaitOnFlagUntilTimeout+0x70>
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	699b      	ldr	r3, [r3, #24]
 8004250:	43da      	mvns	r2, r3
 8004252:	68bb      	ldr	r3, [r7, #8]
 8004254:	4013      	ands	r3, r2
 8004256:	b29b      	uxth	r3, r3
 8004258:	2b00      	cmp	r3, #0
 800425a:	bf0c      	ite	eq
 800425c:	2301      	moveq	r3, #1
 800425e:	2300      	movne	r3, #0
 8004260:	b2db      	uxtb	r3, r3
 8004262:	461a      	mov	r2, r3
 8004264:	79fb      	ldrb	r3, [r7, #7]
 8004266:	429a      	cmp	r2, r3
 8004268:	d116      	bne.n	8004298 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	2200      	movs	r2, #0
 800426e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	2220      	movs	r2, #32
 8004274:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	2200      	movs	r2, #0
 800427c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004284:	f043 0220 	orr.w	r2, r3, #32
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	2200      	movs	r2, #0
 8004290:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004294:	2301      	movs	r3, #1
 8004296:	e023      	b.n	80042e0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	0c1b      	lsrs	r3, r3, #16
 800429c:	b2db      	uxtb	r3, r3
 800429e:	2b01      	cmp	r3, #1
 80042a0:	d10d      	bne.n	80042be <I2C_WaitOnFlagUntilTimeout+0xca>
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	695b      	ldr	r3, [r3, #20]
 80042a8:	43da      	mvns	r2, r3
 80042aa:	68bb      	ldr	r3, [r7, #8]
 80042ac:	4013      	ands	r3, r2
 80042ae:	b29b      	uxth	r3, r3
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	bf0c      	ite	eq
 80042b4:	2301      	moveq	r3, #1
 80042b6:	2300      	movne	r3, #0
 80042b8:	b2db      	uxtb	r3, r3
 80042ba:	461a      	mov	r2, r3
 80042bc:	e00c      	b.n	80042d8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	699b      	ldr	r3, [r3, #24]
 80042c4:	43da      	mvns	r2, r3
 80042c6:	68bb      	ldr	r3, [r7, #8]
 80042c8:	4013      	ands	r3, r2
 80042ca:	b29b      	uxth	r3, r3
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	bf0c      	ite	eq
 80042d0:	2301      	moveq	r3, #1
 80042d2:	2300      	movne	r3, #0
 80042d4:	b2db      	uxtb	r3, r3
 80042d6:	461a      	mov	r2, r3
 80042d8:	79fb      	ldrb	r3, [r7, #7]
 80042da:	429a      	cmp	r2, r3
 80042dc:	d093      	beq.n	8004206 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80042de:	2300      	movs	r3, #0
}
 80042e0:	4618      	mov	r0, r3
 80042e2:	3710      	adds	r7, #16
 80042e4:	46bd      	mov	sp, r7
 80042e6:	bd80      	pop	{r7, pc}

080042e8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b084      	sub	sp, #16
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	60f8      	str	r0, [r7, #12]
 80042f0:	60b9      	str	r1, [r7, #8]
 80042f2:	607a      	str	r2, [r7, #4]
 80042f4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80042f6:	e071      	b.n	80043dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	695b      	ldr	r3, [r3, #20]
 80042fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004302:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004306:	d123      	bne.n	8004350 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	681a      	ldr	r2, [r3, #0]
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004316:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004320:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	2200      	movs	r2, #0
 8004326:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	2220      	movs	r2, #32
 800432c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	2200      	movs	r2, #0
 8004334:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800433c:	f043 0204 	orr.w	r2, r3, #4
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	2200      	movs	r2, #0
 8004348:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800434c:	2301      	movs	r3, #1
 800434e:	e067      	b.n	8004420 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004356:	d041      	beq.n	80043dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004358:	f7fe fe68 	bl	800302c <HAL_GetTick>
 800435c:	4602      	mov	r2, r0
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	1ad3      	subs	r3, r2, r3
 8004362:	687a      	ldr	r2, [r7, #4]
 8004364:	429a      	cmp	r2, r3
 8004366:	d302      	bcc.n	800436e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d136      	bne.n	80043dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800436e:	68bb      	ldr	r3, [r7, #8]
 8004370:	0c1b      	lsrs	r3, r3, #16
 8004372:	b2db      	uxtb	r3, r3
 8004374:	2b01      	cmp	r3, #1
 8004376:	d10c      	bne.n	8004392 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	695b      	ldr	r3, [r3, #20]
 800437e:	43da      	mvns	r2, r3
 8004380:	68bb      	ldr	r3, [r7, #8]
 8004382:	4013      	ands	r3, r2
 8004384:	b29b      	uxth	r3, r3
 8004386:	2b00      	cmp	r3, #0
 8004388:	bf14      	ite	ne
 800438a:	2301      	movne	r3, #1
 800438c:	2300      	moveq	r3, #0
 800438e:	b2db      	uxtb	r3, r3
 8004390:	e00b      	b.n	80043aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	699b      	ldr	r3, [r3, #24]
 8004398:	43da      	mvns	r2, r3
 800439a:	68bb      	ldr	r3, [r7, #8]
 800439c:	4013      	ands	r3, r2
 800439e:	b29b      	uxth	r3, r3
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	bf14      	ite	ne
 80043a4:	2301      	movne	r3, #1
 80043a6:	2300      	moveq	r3, #0
 80043a8:	b2db      	uxtb	r3, r3
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d016      	beq.n	80043dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	2200      	movs	r2, #0
 80043b2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	2220      	movs	r2, #32
 80043b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	2200      	movs	r2, #0
 80043c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043c8:	f043 0220 	orr.w	r2, r3, #32
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	2200      	movs	r2, #0
 80043d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80043d8:	2301      	movs	r3, #1
 80043da:	e021      	b.n	8004420 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80043dc:	68bb      	ldr	r3, [r7, #8]
 80043de:	0c1b      	lsrs	r3, r3, #16
 80043e0:	b2db      	uxtb	r3, r3
 80043e2:	2b01      	cmp	r3, #1
 80043e4:	d10c      	bne.n	8004400 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	695b      	ldr	r3, [r3, #20]
 80043ec:	43da      	mvns	r2, r3
 80043ee:	68bb      	ldr	r3, [r7, #8]
 80043f0:	4013      	ands	r3, r2
 80043f2:	b29b      	uxth	r3, r3
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	bf14      	ite	ne
 80043f8:	2301      	movne	r3, #1
 80043fa:	2300      	moveq	r3, #0
 80043fc:	b2db      	uxtb	r3, r3
 80043fe:	e00b      	b.n	8004418 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	699b      	ldr	r3, [r3, #24]
 8004406:	43da      	mvns	r2, r3
 8004408:	68bb      	ldr	r3, [r7, #8]
 800440a:	4013      	ands	r3, r2
 800440c:	b29b      	uxth	r3, r3
 800440e:	2b00      	cmp	r3, #0
 8004410:	bf14      	ite	ne
 8004412:	2301      	movne	r3, #1
 8004414:	2300      	moveq	r3, #0
 8004416:	b2db      	uxtb	r3, r3
 8004418:	2b00      	cmp	r3, #0
 800441a:	f47f af6d 	bne.w	80042f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800441e:	2300      	movs	r3, #0
}
 8004420:	4618      	mov	r0, r3
 8004422:	3710      	adds	r7, #16
 8004424:	46bd      	mov	sp, r7
 8004426:	bd80      	pop	{r7, pc}

08004428 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b084      	sub	sp, #16
 800442c:	af00      	add	r7, sp, #0
 800442e:	60f8      	str	r0, [r7, #12]
 8004430:	60b9      	str	r1, [r7, #8]
 8004432:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004434:	e034      	b.n	80044a0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004436:	68f8      	ldr	r0, [r7, #12]
 8004438:	f000 f8e3 	bl	8004602 <I2C_IsAcknowledgeFailed>
 800443c:	4603      	mov	r3, r0
 800443e:	2b00      	cmp	r3, #0
 8004440:	d001      	beq.n	8004446 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004442:	2301      	movs	r3, #1
 8004444:	e034      	b.n	80044b0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004446:	68bb      	ldr	r3, [r7, #8]
 8004448:	f1b3 3fff 	cmp.w	r3, #4294967295
 800444c:	d028      	beq.n	80044a0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800444e:	f7fe fded 	bl	800302c <HAL_GetTick>
 8004452:	4602      	mov	r2, r0
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	1ad3      	subs	r3, r2, r3
 8004458:	68ba      	ldr	r2, [r7, #8]
 800445a:	429a      	cmp	r2, r3
 800445c:	d302      	bcc.n	8004464 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800445e:	68bb      	ldr	r3, [r7, #8]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d11d      	bne.n	80044a0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	695b      	ldr	r3, [r3, #20]
 800446a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800446e:	2b80      	cmp	r3, #128	@ 0x80
 8004470:	d016      	beq.n	80044a0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	2200      	movs	r2, #0
 8004476:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	2220      	movs	r2, #32
 800447c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	2200      	movs	r2, #0
 8004484:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800448c:	f043 0220 	orr.w	r2, r3, #32
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	2200      	movs	r2, #0
 8004498:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800449c:	2301      	movs	r3, #1
 800449e:	e007      	b.n	80044b0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	695b      	ldr	r3, [r3, #20]
 80044a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044aa:	2b80      	cmp	r3, #128	@ 0x80
 80044ac:	d1c3      	bne.n	8004436 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80044ae:	2300      	movs	r3, #0
}
 80044b0:	4618      	mov	r0, r3
 80044b2:	3710      	adds	r7, #16
 80044b4:	46bd      	mov	sp, r7
 80044b6:	bd80      	pop	{r7, pc}

080044b8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b084      	sub	sp, #16
 80044bc:	af00      	add	r7, sp, #0
 80044be:	60f8      	str	r0, [r7, #12]
 80044c0:	60b9      	str	r1, [r7, #8]
 80044c2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80044c4:	e034      	b.n	8004530 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80044c6:	68f8      	ldr	r0, [r7, #12]
 80044c8:	f000 f89b 	bl	8004602 <I2C_IsAcknowledgeFailed>
 80044cc:	4603      	mov	r3, r0
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d001      	beq.n	80044d6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80044d2:	2301      	movs	r3, #1
 80044d4:	e034      	b.n	8004540 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044d6:	68bb      	ldr	r3, [r7, #8]
 80044d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044dc:	d028      	beq.n	8004530 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044de:	f7fe fda5 	bl	800302c <HAL_GetTick>
 80044e2:	4602      	mov	r2, r0
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	1ad3      	subs	r3, r2, r3
 80044e8:	68ba      	ldr	r2, [r7, #8]
 80044ea:	429a      	cmp	r2, r3
 80044ec:	d302      	bcc.n	80044f4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80044ee:	68bb      	ldr	r3, [r7, #8]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d11d      	bne.n	8004530 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	695b      	ldr	r3, [r3, #20]
 80044fa:	f003 0304 	and.w	r3, r3, #4
 80044fe:	2b04      	cmp	r3, #4
 8004500:	d016      	beq.n	8004530 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	2200      	movs	r2, #0
 8004506:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	2220      	movs	r2, #32
 800450c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	2200      	movs	r2, #0
 8004514:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800451c:	f043 0220 	orr.w	r2, r3, #32
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	2200      	movs	r2, #0
 8004528:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800452c:	2301      	movs	r3, #1
 800452e:	e007      	b.n	8004540 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	695b      	ldr	r3, [r3, #20]
 8004536:	f003 0304 	and.w	r3, r3, #4
 800453a:	2b04      	cmp	r3, #4
 800453c:	d1c3      	bne.n	80044c6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800453e:	2300      	movs	r3, #0
}
 8004540:	4618      	mov	r0, r3
 8004542:	3710      	adds	r7, #16
 8004544:	46bd      	mov	sp, r7
 8004546:	bd80      	pop	{r7, pc}

08004548 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b084      	sub	sp, #16
 800454c:	af00      	add	r7, sp, #0
 800454e:	60f8      	str	r0, [r7, #12]
 8004550:	60b9      	str	r1, [r7, #8]
 8004552:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004554:	e049      	b.n	80045ea <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	695b      	ldr	r3, [r3, #20]
 800455c:	f003 0310 	and.w	r3, r3, #16
 8004560:	2b10      	cmp	r3, #16
 8004562:	d119      	bne.n	8004598 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f06f 0210 	mvn.w	r2, #16
 800456c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	2200      	movs	r2, #0
 8004572:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	2220      	movs	r2, #32
 8004578:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	2200      	movs	r2, #0
 8004580:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	2200      	movs	r2, #0
 8004590:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004594:	2301      	movs	r3, #1
 8004596:	e030      	b.n	80045fa <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004598:	f7fe fd48 	bl	800302c <HAL_GetTick>
 800459c:	4602      	mov	r2, r0
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	1ad3      	subs	r3, r2, r3
 80045a2:	68ba      	ldr	r2, [r7, #8]
 80045a4:	429a      	cmp	r2, r3
 80045a6:	d302      	bcc.n	80045ae <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80045a8:	68bb      	ldr	r3, [r7, #8]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d11d      	bne.n	80045ea <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	695b      	ldr	r3, [r3, #20]
 80045b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045b8:	2b40      	cmp	r3, #64	@ 0x40
 80045ba:	d016      	beq.n	80045ea <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	2200      	movs	r2, #0
 80045c0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	2220      	movs	r2, #32
 80045c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	2200      	movs	r2, #0
 80045ce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045d6:	f043 0220 	orr.w	r2, r3, #32
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	2200      	movs	r2, #0
 80045e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80045e6:	2301      	movs	r3, #1
 80045e8:	e007      	b.n	80045fa <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	695b      	ldr	r3, [r3, #20]
 80045f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045f4:	2b40      	cmp	r3, #64	@ 0x40
 80045f6:	d1ae      	bne.n	8004556 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80045f8:	2300      	movs	r3, #0
}
 80045fa:	4618      	mov	r0, r3
 80045fc:	3710      	adds	r7, #16
 80045fe:	46bd      	mov	sp, r7
 8004600:	bd80      	pop	{r7, pc}

08004602 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004602:	b480      	push	{r7}
 8004604:	b083      	sub	sp, #12
 8004606:	af00      	add	r7, sp, #0
 8004608:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	695b      	ldr	r3, [r3, #20]
 8004610:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004614:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004618:	d11b      	bne.n	8004652 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004622:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2200      	movs	r2, #0
 8004628:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2220      	movs	r2, #32
 800462e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2200      	movs	r2, #0
 8004636:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800463e:	f043 0204 	orr.w	r2, r3, #4
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2200      	movs	r2, #0
 800464a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800464e:	2301      	movs	r3, #1
 8004650:	e000      	b.n	8004654 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004652:	2300      	movs	r3, #0
}
 8004654:	4618      	mov	r0, r3
 8004656:	370c      	adds	r7, #12
 8004658:	46bd      	mov	sp, r7
 800465a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465e:	4770      	bx	lr

08004660 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b084      	sub	sp, #16
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
 8004668:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d101      	bne.n	8004674 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004670:	2301      	movs	r3, #1
 8004672:	e0cc      	b.n	800480e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004674:	4b68      	ldr	r3, [pc, #416]	@ (8004818 <HAL_RCC_ClockConfig+0x1b8>)
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f003 030f 	and.w	r3, r3, #15
 800467c:	683a      	ldr	r2, [r7, #0]
 800467e:	429a      	cmp	r2, r3
 8004680:	d90c      	bls.n	800469c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004682:	4b65      	ldr	r3, [pc, #404]	@ (8004818 <HAL_RCC_ClockConfig+0x1b8>)
 8004684:	683a      	ldr	r2, [r7, #0]
 8004686:	b2d2      	uxtb	r2, r2
 8004688:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800468a:	4b63      	ldr	r3, [pc, #396]	@ (8004818 <HAL_RCC_ClockConfig+0x1b8>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f003 030f 	and.w	r3, r3, #15
 8004692:	683a      	ldr	r2, [r7, #0]
 8004694:	429a      	cmp	r2, r3
 8004696:	d001      	beq.n	800469c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004698:	2301      	movs	r3, #1
 800469a:	e0b8      	b.n	800480e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f003 0302 	and.w	r3, r3, #2
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d020      	beq.n	80046ea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f003 0304 	and.w	r3, r3, #4
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d005      	beq.n	80046c0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80046b4:	4b59      	ldr	r3, [pc, #356]	@ (800481c <HAL_RCC_ClockConfig+0x1bc>)
 80046b6:	689b      	ldr	r3, [r3, #8]
 80046b8:	4a58      	ldr	r2, [pc, #352]	@ (800481c <HAL_RCC_ClockConfig+0x1bc>)
 80046ba:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80046be:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f003 0308 	and.w	r3, r3, #8
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d005      	beq.n	80046d8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80046cc:	4b53      	ldr	r3, [pc, #332]	@ (800481c <HAL_RCC_ClockConfig+0x1bc>)
 80046ce:	689b      	ldr	r3, [r3, #8]
 80046d0:	4a52      	ldr	r2, [pc, #328]	@ (800481c <HAL_RCC_ClockConfig+0x1bc>)
 80046d2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80046d6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80046d8:	4b50      	ldr	r3, [pc, #320]	@ (800481c <HAL_RCC_ClockConfig+0x1bc>)
 80046da:	689b      	ldr	r3, [r3, #8]
 80046dc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	689b      	ldr	r3, [r3, #8]
 80046e4:	494d      	ldr	r1, [pc, #308]	@ (800481c <HAL_RCC_ClockConfig+0x1bc>)
 80046e6:	4313      	orrs	r3, r2
 80046e8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f003 0301 	and.w	r3, r3, #1
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d044      	beq.n	8004780 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	685b      	ldr	r3, [r3, #4]
 80046fa:	2b01      	cmp	r3, #1
 80046fc:	d107      	bne.n	800470e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046fe:	4b47      	ldr	r3, [pc, #284]	@ (800481c <HAL_RCC_ClockConfig+0x1bc>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004706:	2b00      	cmp	r3, #0
 8004708:	d119      	bne.n	800473e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800470a:	2301      	movs	r3, #1
 800470c:	e07f      	b.n	800480e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	685b      	ldr	r3, [r3, #4]
 8004712:	2b02      	cmp	r3, #2
 8004714:	d003      	beq.n	800471e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800471a:	2b03      	cmp	r3, #3
 800471c:	d107      	bne.n	800472e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800471e:	4b3f      	ldr	r3, [pc, #252]	@ (800481c <HAL_RCC_ClockConfig+0x1bc>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004726:	2b00      	cmp	r3, #0
 8004728:	d109      	bne.n	800473e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800472a:	2301      	movs	r3, #1
 800472c:	e06f      	b.n	800480e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800472e:	4b3b      	ldr	r3, [pc, #236]	@ (800481c <HAL_RCC_ClockConfig+0x1bc>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f003 0302 	and.w	r3, r3, #2
 8004736:	2b00      	cmp	r3, #0
 8004738:	d101      	bne.n	800473e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800473a:	2301      	movs	r3, #1
 800473c:	e067      	b.n	800480e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800473e:	4b37      	ldr	r3, [pc, #220]	@ (800481c <HAL_RCC_ClockConfig+0x1bc>)
 8004740:	689b      	ldr	r3, [r3, #8]
 8004742:	f023 0203 	bic.w	r2, r3, #3
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	685b      	ldr	r3, [r3, #4]
 800474a:	4934      	ldr	r1, [pc, #208]	@ (800481c <HAL_RCC_ClockConfig+0x1bc>)
 800474c:	4313      	orrs	r3, r2
 800474e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004750:	f7fe fc6c 	bl	800302c <HAL_GetTick>
 8004754:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004756:	e00a      	b.n	800476e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004758:	f7fe fc68 	bl	800302c <HAL_GetTick>
 800475c:	4602      	mov	r2, r0
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	1ad3      	subs	r3, r2, r3
 8004762:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004766:	4293      	cmp	r3, r2
 8004768:	d901      	bls.n	800476e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800476a:	2303      	movs	r3, #3
 800476c:	e04f      	b.n	800480e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800476e:	4b2b      	ldr	r3, [pc, #172]	@ (800481c <HAL_RCC_ClockConfig+0x1bc>)
 8004770:	689b      	ldr	r3, [r3, #8]
 8004772:	f003 020c 	and.w	r2, r3, #12
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	685b      	ldr	r3, [r3, #4]
 800477a:	009b      	lsls	r3, r3, #2
 800477c:	429a      	cmp	r2, r3
 800477e:	d1eb      	bne.n	8004758 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004780:	4b25      	ldr	r3, [pc, #148]	@ (8004818 <HAL_RCC_ClockConfig+0x1b8>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f003 030f 	and.w	r3, r3, #15
 8004788:	683a      	ldr	r2, [r7, #0]
 800478a:	429a      	cmp	r2, r3
 800478c:	d20c      	bcs.n	80047a8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800478e:	4b22      	ldr	r3, [pc, #136]	@ (8004818 <HAL_RCC_ClockConfig+0x1b8>)
 8004790:	683a      	ldr	r2, [r7, #0]
 8004792:	b2d2      	uxtb	r2, r2
 8004794:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004796:	4b20      	ldr	r3, [pc, #128]	@ (8004818 <HAL_RCC_ClockConfig+0x1b8>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f003 030f 	and.w	r3, r3, #15
 800479e:	683a      	ldr	r2, [r7, #0]
 80047a0:	429a      	cmp	r2, r3
 80047a2:	d001      	beq.n	80047a8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80047a4:	2301      	movs	r3, #1
 80047a6:	e032      	b.n	800480e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f003 0304 	and.w	r3, r3, #4
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d008      	beq.n	80047c6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80047b4:	4b19      	ldr	r3, [pc, #100]	@ (800481c <HAL_RCC_ClockConfig+0x1bc>)
 80047b6:	689b      	ldr	r3, [r3, #8]
 80047b8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	68db      	ldr	r3, [r3, #12]
 80047c0:	4916      	ldr	r1, [pc, #88]	@ (800481c <HAL_RCC_ClockConfig+0x1bc>)
 80047c2:	4313      	orrs	r3, r2
 80047c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f003 0308 	and.w	r3, r3, #8
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d009      	beq.n	80047e6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80047d2:	4b12      	ldr	r3, [pc, #72]	@ (800481c <HAL_RCC_ClockConfig+0x1bc>)
 80047d4:	689b      	ldr	r3, [r3, #8]
 80047d6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	691b      	ldr	r3, [r3, #16]
 80047de:	00db      	lsls	r3, r3, #3
 80047e0:	490e      	ldr	r1, [pc, #56]	@ (800481c <HAL_RCC_ClockConfig+0x1bc>)
 80047e2:	4313      	orrs	r3, r2
 80047e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80047e6:	f000 f855 	bl	8004894 <HAL_RCC_GetSysClockFreq>
 80047ea:	4602      	mov	r2, r0
 80047ec:	4b0b      	ldr	r3, [pc, #44]	@ (800481c <HAL_RCC_ClockConfig+0x1bc>)
 80047ee:	689b      	ldr	r3, [r3, #8]
 80047f0:	091b      	lsrs	r3, r3, #4
 80047f2:	f003 030f 	and.w	r3, r3, #15
 80047f6:	490a      	ldr	r1, [pc, #40]	@ (8004820 <HAL_RCC_ClockConfig+0x1c0>)
 80047f8:	5ccb      	ldrb	r3, [r1, r3]
 80047fa:	fa22 f303 	lsr.w	r3, r2, r3
 80047fe:	4a09      	ldr	r2, [pc, #36]	@ (8004824 <HAL_RCC_ClockConfig+0x1c4>)
 8004800:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004802:	4b09      	ldr	r3, [pc, #36]	@ (8004828 <HAL_RCC_ClockConfig+0x1c8>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4618      	mov	r0, r3
 8004808:	f7fe fbcc 	bl	8002fa4 <HAL_InitTick>

  return HAL_OK;
 800480c:	2300      	movs	r3, #0
}
 800480e:	4618      	mov	r0, r3
 8004810:	3710      	adds	r7, #16
 8004812:	46bd      	mov	sp, r7
 8004814:	bd80      	pop	{r7, pc}
 8004816:	bf00      	nop
 8004818:	40023c00 	.word	0x40023c00
 800481c:	40023800 	.word	0x40023800
 8004820:	08008f60 	.word	0x08008f60
 8004824:	2000001c 	.word	0x2000001c
 8004828:	20000020 	.word	0x20000020

0800482c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800482c:	b480      	push	{r7}
 800482e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004830:	4b03      	ldr	r3, [pc, #12]	@ (8004840 <HAL_RCC_GetHCLKFreq+0x14>)
 8004832:	681b      	ldr	r3, [r3, #0]
}
 8004834:	4618      	mov	r0, r3
 8004836:	46bd      	mov	sp, r7
 8004838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483c:	4770      	bx	lr
 800483e:	bf00      	nop
 8004840:	2000001c 	.word	0x2000001c

08004844 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004844:	b580      	push	{r7, lr}
 8004846:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004848:	f7ff fff0 	bl	800482c <HAL_RCC_GetHCLKFreq>
 800484c:	4602      	mov	r2, r0
 800484e:	4b05      	ldr	r3, [pc, #20]	@ (8004864 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004850:	689b      	ldr	r3, [r3, #8]
 8004852:	0a9b      	lsrs	r3, r3, #10
 8004854:	f003 0307 	and.w	r3, r3, #7
 8004858:	4903      	ldr	r1, [pc, #12]	@ (8004868 <HAL_RCC_GetPCLK1Freq+0x24>)
 800485a:	5ccb      	ldrb	r3, [r1, r3]
 800485c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004860:	4618      	mov	r0, r3
 8004862:	bd80      	pop	{r7, pc}
 8004864:	40023800 	.word	0x40023800
 8004868:	08008f70 	.word	0x08008f70

0800486c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800486c:	b580      	push	{r7, lr}
 800486e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004870:	f7ff ffdc 	bl	800482c <HAL_RCC_GetHCLKFreq>
 8004874:	4602      	mov	r2, r0
 8004876:	4b05      	ldr	r3, [pc, #20]	@ (800488c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004878:	689b      	ldr	r3, [r3, #8]
 800487a:	0b5b      	lsrs	r3, r3, #13
 800487c:	f003 0307 	and.w	r3, r3, #7
 8004880:	4903      	ldr	r1, [pc, #12]	@ (8004890 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004882:	5ccb      	ldrb	r3, [r1, r3]
 8004884:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004888:	4618      	mov	r0, r3
 800488a:	bd80      	pop	{r7, pc}
 800488c:	40023800 	.word	0x40023800
 8004890:	08008f70 	.word	0x08008f70

08004894 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004894:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004898:	b0ae      	sub	sp, #184	@ 0xb8
 800489a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800489c:	2300      	movs	r3, #0
 800489e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 80048a2:	2300      	movs	r3, #0
 80048a4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80048a8:	2300      	movs	r3, #0
 80048aa:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 80048ae:	2300      	movs	r3, #0
 80048b0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 80048b4:	2300      	movs	r3, #0
 80048b6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80048ba:	4bcb      	ldr	r3, [pc, #812]	@ (8004be8 <HAL_RCC_GetSysClockFreq+0x354>)
 80048bc:	689b      	ldr	r3, [r3, #8]
 80048be:	f003 030c 	and.w	r3, r3, #12
 80048c2:	2b0c      	cmp	r3, #12
 80048c4:	f200 8206 	bhi.w	8004cd4 <HAL_RCC_GetSysClockFreq+0x440>
 80048c8:	a201      	add	r2, pc, #4	@ (adr r2, 80048d0 <HAL_RCC_GetSysClockFreq+0x3c>)
 80048ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048ce:	bf00      	nop
 80048d0:	08004905 	.word	0x08004905
 80048d4:	08004cd5 	.word	0x08004cd5
 80048d8:	08004cd5 	.word	0x08004cd5
 80048dc:	08004cd5 	.word	0x08004cd5
 80048e0:	0800490d 	.word	0x0800490d
 80048e4:	08004cd5 	.word	0x08004cd5
 80048e8:	08004cd5 	.word	0x08004cd5
 80048ec:	08004cd5 	.word	0x08004cd5
 80048f0:	08004915 	.word	0x08004915
 80048f4:	08004cd5 	.word	0x08004cd5
 80048f8:	08004cd5 	.word	0x08004cd5
 80048fc:	08004cd5 	.word	0x08004cd5
 8004900:	08004b05 	.word	0x08004b05
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004904:	4bb9      	ldr	r3, [pc, #740]	@ (8004bec <HAL_RCC_GetSysClockFreq+0x358>)
 8004906:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800490a:	e1e7      	b.n	8004cdc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800490c:	4bb8      	ldr	r3, [pc, #736]	@ (8004bf0 <HAL_RCC_GetSysClockFreq+0x35c>)
 800490e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004912:	e1e3      	b.n	8004cdc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004914:	4bb4      	ldr	r3, [pc, #720]	@ (8004be8 <HAL_RCC_GetSysClockFreq+0x354>)
 8004916:	685b      	ldr	r3, [r3, #4]
 8004918:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800491c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004920:	4bb1      	ldr	r3, [pc, #708]	@ (8004be8 <HAL_RCC_GetSysClockFreq+0x354>)
 8004922:	685b      	ldr	r3, [r3, #4]
 8004924:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004928:	2b00      	cmp	r3, #0
 800492a:	d071      	beq.n	8004a10 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800492c:	4bae      	ldr	r3, [pc, #696]	@ (8004be8 <HAL_RCC_GetSysClockFreq+0x354>)
 800492e:	685b      	ldr	r3, [r3, #4]
 8004930:	099b      	lsrs	r3, r3, #6
 8004932:	2200      	movs	r2, #0
 8004934:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004938:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 800493c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004940:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004944:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004948:	2300      	movs	r3, #0
 800494a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800494e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004952:	4622      	mov	r2, r4
 8004954:	462b      	mov	r3, r5
 8004956:	f04f 0000 	mov.w	r0, #0
 800495a:	f04f 0100 	mov.w	r1, #0
 800495e:	0159      	lsls	r1, r3, #5
 8004960:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004964:	0150      	lsls	r0, r2, #5
 8004966:	4602      	mov	r2, r0
 8004968:	460b      	mov	r3, r1
 800496a:	4621      	mov	r1, r4
 800496c:	1a51      	subs	r1, r2, r1
 800496e:	6439      	str	r1, [r7, #64]	@ 0x40
 8004970:	4629      	mov	r1, r5
 8004972:	eb63 0301 	sbc.w	r3, r3, r1
 8004976:	647b      	str	r3, [r7, #68]	@ 0x44
 8004978:	f04f 0200 	mov.w	r2, #0
 800497c:	f04f 0300 	mov.w	r3, #0
 8004980:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8004984:	4649      	mov	r1, r9
 8004986:	018b      	lsls	r3, r1, #6
 8004988:	4641      	mov	r1, r8
 800498a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800498e:	4641      	mov	r1, r8
 8004990:	018a      	lsls	r2, r1, #6
 8004992:	4641      	mov	r1, r8
 8004994:	1a51      	subs	r1, r2, r1
 8004996:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004998:	4649      	mov	r1, r9
 800499a:	eb63 0301 	sbc.w	r3, r3, r1
 800499e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80049a0:	f04f 0200 	mov.w	r2, #0
 80049a4:	f04f 0300 	mov.w	r3, #0
 80049a8:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 80049ac:	4649      	mov	r1, r9
 80049ae:	00cb      	lsls	r3, r1, #3
 80049b0:	4641      	mov	r1, r8
 80049b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80049b6:	4641      	mov	r1, r8
 80049b8:	00ca      	lsls	r2, r1, #3
 80049ba:	4610      	mov	r0, r2
 80049bc:	4619      	mov	r1, r3
 80049be:	4603      	mov	r3, r0
 80049c0:	4622      	mov	r2, r4
 80049c2:	189b      	adds	r3, r3, r2
 80049c4:	633b      	str	r3, [r7, #48]	@ 0x30
 80049c6:	462b      	mov	r3, r5
 80049c8:	460a      	mov	r2, r1
 80049ca:	eb42 0303 	adc.w	r3, r2, r3
 80049ce:	637b      	str	r3, [r7, #52]	@ 0x34
 80049d0:	f04f 0200 	mov.w	r2, #0
 80049d4:	f04f 0300 	mov.w	r3, #0
 80049d8:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80049dc:	4629      	mov	r1, r5
 80049de:	024b      	lsls	r3, r1, #9
 80049e0:	4621      	mov	r1, r4
 80049e2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80049e6:	4621      	mov	r1, r4
 80049e8:	024a      	lsls	r2, r1, #9
 80049ea:	4610      	mov	r0, r2
 80049ec:	4619      	mov	r1, r3
 80049ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80049f2:	2200      	movs	r2, #0
 80049f4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80049f8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80049fc:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8004a00:	f7fc f8bc 	bl	8000b7c <__aeabi_uldivmod>
 8004a04:	4602      	mov	r2, r0
 8004a06:	460b      	mov	r3, r1
 8004a08:	4613      	mov	r3, r2
 8004a0a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004a0e:	e067      	b.n	8004ae0 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a10:	4b75      	ldr	r3, [pc, #468]	@ (8004be8 <HAL_RCC_GetSysClockFreq+0x354>)
 8004a12:	685b      	ldr	r3, [r3, #4]
 8004a14:	099b      	lsrs	r3, r3, #6
 8004a16:	2200      	movs	r2, #0
 8004a18:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004a1c:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8004a20:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004a24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a28:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004a2e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8004a32:	4622      	mov	r2, r4
 8004a34:	462b      	mov	r3, r5
 8004a36:	f04f 0000 	mov.w	r0, #0
 8004a3a:	f04f 0100 	mov.w	r1, #0
 8004a3e:	0159      	lsls	r1, r3, #5
 8004a40:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004a44:	0150      	lsls	r0, r2, #5
 8004a46:	4602      	mov	r2, r0
 8004a48:	460b      	mov	r3, r1
 8004a4a:	4621      	mov	r1, r4
 8004a4c:	1a51      	subs	r1, r2, r1
 8004a4e:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004a50:	4629      	mov	r1, r5
 8004a52:	eb63 0301 	sbc.w	r3, r3, r1
 8004a56:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004a58:	f04f 0200 	mov.w	r2, #0
 8004a5c:	f04f 0300 	mov.w	r3, #0
 8004a60:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8004a64:	4649      	mov	r1, r9
 8004a66:	018b      	lsls	r3, r1, #6
 8004a68:	4641      	mov	r1, r8
 8004a6a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004a6e:	4641      	mov	r1, r8
 8004a70:	018a      	lsls	r2, r1, #6
 8004a72:	4641      	mov	r1, r8
 8004a74:	ebb2 0a01 	subs.w	sl, r2, r1
 8004a78:	4649      	mov	r1, r9
 8004a7a:	eb63 0b01 	sbc.w	fp, r3, r1
 8004a7e:	f04f 0200 	mov.w	r2, #0
 8004a82:	f04f 0300 	mov.w	r3, #0
 8004a86:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004a8a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004a8e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004a92:	4692      	mov	sl, r2
 8004a94:	469b      	mov	fp, r3
 8004a96:	4623      	mov	r3, r4
 8004a98:	eb1a 0303 	adds.w	r3, sl, r3
 8004a9c:	623b      	str	r3, [r7, #32]
 8004a9e:	462b      	mov	r3, r5
 8004aa0:	eb4b 0303 	adc.w	r3, fp, r3
 8004aa4:	627b      	str	r3, [r7, #36]	@ 0x24
 8004aa6:	f04f 0200 	mov.w	r2, #0
 8004aaa:	f04f 0300 	mov.w	r3, #0
 8004aae:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8004ab2:	4629      	mov	r1, r5
 8004ab4:	028b      	lsls	r3, r1, #10
 8004ab6:	4621      	mov	r1, r4
 8004ab8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004abc:	4621      	mov	r1, r4
 8004abe:	028a      	lsls	r2, r1, #10
 8004ac0:	4610      	mov	r0, r2
 8004ac2:	4619      	mov	r1, r3
 8004ac4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004ac8:	2200      	movs	r2, #0
 8004aca:	673b      	str	r3, [r7, #112]	@ 0x70
 8004acc:	677a      	str	r2, [r7, #116]	@ 0x74
 8004ace:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8004ad2:	f7fc f853 	bl	8000b7c <__aeabi_uldivmod>
 8004ad6:	4602      	mov	r2, r0
 8004ad8:	460b      	mov	r3, r1
 8004ada:	4613      	mov	r3, r2
 8004adc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004ae0:	4b41      	ldr	r3, [pc, #260]	@ (8004be8 <HAL_RCC_GetSysClockFreq+0x354>)
 8004ae2:	685b      	ldr	r3, [r3, #4]
 8004ae4:	0c1b      	lsrs	r3, r3, #16
 8004ae6:	f003 0303 	and.w	r3, r3, #3
 8004aea:	3301      	adds	r3, #1
 8004aec:	005b      	lsls	r3, r3, #1
 8004aee:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8004af2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004af6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004afa:	fbb2 f3f3 	udiv	r3, r2, r3
 8004afe:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004b02:	e0eb      	b.n	8004cdc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004b04:	4b38      	ldr	r3, [pc, #224]	@ (8004be8 <HAL_RCC_GetSysClockFreq+0x354>)
 8004b06:	685b      	ldr	r3, [r3, #4]
 8004b08:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004b0c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004b10:	4b35      	ldr	r3, [pc, #212]	@ (8004be8 <HAL_RCC_GetSysClockFreq+0x354>)
 8004b12:	685b      	ldr	r3, [r3, #4]
 8004b14:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d06b      	beq.n	8004bf4 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b1c:	4b32      	ldr	r3, [pc, #200]	@ (8004be8 <HAL_RCC_GetSysClockFreq+0x354>)
 8004b1e:	685b      	ldr	r3, [r3, #4]
 8004b20:	099b      	lsrs	r3, r3, #6
 8004b22:	2200      	movs	r2, #0
 8004b24:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004b26:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004b28:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004b2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b2e:	663b      	str	r3, [r7, #96]	@ 0x60
 8004b30:	2300      	movs	r3, #0
 8004b32:	667b      	str	r3, [r7, #100]	@ 0x64
 8004b34:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8004b38:	4622      	mov	r2, r4
 8004b3a:	462b      	mov	r3, r5
 8004b3c:	f04f 0000 	mov.w	r0, #0
 8004b40:	f04f 0100 	mov.w	r1, #0
 8004b44:	0159      	lsls	r1, r3, #5
 8004b46:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004b4a:	0150      	lsls	r0, r2, #5
 8004b4c:	4602      	mov	r2, r0
 8004b4e:	460b      	mov	r3, r1
 8004b50:	4621      	mov	r1, r4
 8004b52:	1a51      	subs	r1, r2, r1
 8004b54:	61b9      	str	r1, [r7, #24]
 8004b56:	4629      	mov	r1, r5
 8004b58:	eb63 0301 	sbc.w	r3, r3, r1
 8004b5c:	61fb      	str	r3, [r7, #28]
 8004b5e:	f04f 0200 	mov.w	r2, #0
 8004b62:	f04f 0300 	mov.w	r3, #0
 8004b66:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8004b6a:	4659      	mov	r1, fp
 8004b6c:	018b      	lsls	r3, r1, #6
 8004b6e:	4651      	mov	r1, sl
 8004b70:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004b74:	4651      	mov	r1, sl
 8004b76:	018a      	lsls	r2, r1, #6
 8004b78:	4651      	mov	r1, sl
 8004b7a:	ebb2 0801 	subs.w	r8, r2, r1
 8004b7e:	4659      	mov	r1, fp
 8004b80:	eb63 0901 	sbc.w	r9, r3, r1
 8004b84:	f04f 0200 	mov.w	r2, #0
 8004b88:	f04f 0300 	mov.w	r3, #0
 8004b8c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004b90:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004b94:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004b98:	4690      	mov	r8, r2
 8004b9a:	4699      	mov	r9, r3
 8004b9c:	4623      	mov	r3, r4
 8004b9e:	eb18 0303 	adds.w	r3, r8, r3
 8004ba2:	613b      	str	r3, [r7, #16]
 8004ba4:	462b      	mov	r3, r5
 8004ba6:	eb49 0303 	adc.w	r3, r9, r3
 8004baa:	617b      	str	r3, [r7, #20]
 8004bac:	f04f 0200 	mov.w	r2, #0
 8004bb0:	f04f 0300 	mov.w	r3, #0
 8004bb4:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8004bb8:	4629      	mov	r1, r5
 8004bba:	024b      	lsls	r3, r1, #9
 8004bbc:	4621      	mov	r1, r4
 8004bbe:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004bc2:	4621      	mov	r1, r4
 8004bc4:	024a      	lsls	r2, r1, #9
 8004bc6:	4610      	mov	r0, r2
 8004bc8:	4619      	mov	r1, r3
 8004bca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004bce:	2200      	movs	r2, #0
 8004bd0:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004bd2:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8004bd4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004bd8:	f7fb ffd0 	bl	8000b7c <__aeabi_uldivmod>
 8004bdc:	4602      	mov	r2, r0
 8004bde:	460b      	mov	r3, r1
 8004be0:	4613      	mov	r3, r2
 8004be2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004be6:	e065      	b.n	8004cb4 <HAL_RCC_GetSysClockFreq+0x420>
 8004be8:	40023800 	.word	0x40023800
 8004bec:	00f42400 	.word	0x00f42400
 8004bf0:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004bf4:	4b3d      	ldr	r3, [pc, #244]	@ (8004cec <HAL_RCC_GetSysClockFreq+0x458>)
 8004bf6:	685b      	ldr	r3, [r3, #4]
 8004bf8:	099b      	lsrs	r3, r3, #6
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	4611      	mov	r1, r2
 8004c00:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004c04:	653b      	str	r3, [r7, #80]	@ 0x50
 8004c06:	2300      	movs	r3, #0
 8004c08:	657b      	str	r3, [r7, #84]	@ 0x54
 8004c0a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8004c0e:	4642      	mov	r2, r8
 8004c10:	464b      	mov	r3, r9
 8004c12:	f04f 0000 	mov.w	r0, #0
 8004c16:	f04f 0100 	mov.w	r1, #0
 8004c1a:	0159      	lsls	r1, r3, #5
 8004c1c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004c20:	0150      	lsls	r0, r2, #5
 8004c22:	4602      	mov	r2, r0
 8004c24:	460b      	mov	r3, r1
 8004c26:	4641      	mov	r1, r8
 8004c28:	1a51      	subs	r1, r2, r1
 8004c2a:	60b9      	str	r1, [r7, #8]
 8004c2c:	4649      	mov	r1, r9
 8004c2e:	eb63 0301 	sbc.w	r3, r3, r1
 8004c32:	60fb      	str	r3, [r7, #12]
 8004c34:	f04f 0200 	mov.w	r2, #0
 8004c38:	f04f 0300 	mov.w	r3, #0
 8004c3c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8004c40:	4659      	mov	r1, fp
 8004c42:	018b      	lsls	r3, r1, #6
 8004c44:	4651      	mov	r1, sl
 8004c46:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004c4a:	4651      	mov	r1, sl
 8004c4c:	018a      	lsls	r2, r1, #6
 8004c4e:	4651      	mov	r1, sl
 8004c50:	1a54      	subs	r4, r2, r1
 8004c52:	4659      	mov	r1, fp
 8004c54:	eb63 0501 	sbc.w	r5, r3, r1
 8004c58:	f04f 0200 	mov.w	r2, #0
 8004c5c:	f04f 0300 	mov.w	r3, #0
 8004c60:	00eb      	lsls	r3, r5, #3
 8004c62:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004c66:	00e2      	lsls	r2, r4, #3
 8004c68:	4614      	mov	r4, r2
 8004c6a:	461d      	mov	r5, r3
 8004c6c:	4643      	mov	r3, r8
 8004c6e:	18e3      	adds	r3, r4, r3
 8004c70:	603b      	str	r3, [r7, #0]
 8004c72:	464b      	mov	r3, r9
 8004c74:	eb45 0303 	adc.w	r3, r5, r3
 8004c78:	607b      	str	r3, [r7, #4]
 8004c7a:	f04f 0200 	mov.w	r2, #0
 8004c7e:	f04f 0300 	mov.w	r3, #0
 8004c82:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004c86:	4629      	mov	r1, r5
 8004c88:	028b      	lsls	r3, r1, #10
 8004c8a:	4621      	mov	r1, r4
 8004c8c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004c90:	4621      	mov	r1, r4
 8004c92:	028a      	lsls	r2, r1, #10
 8004c94:	4610      	mov	r0, r2
 8004c96:	4619      	mov	r1, r3
 8004c98:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004ca0:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8004ca2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004ca6:	f7fb ff69 	bl	8000b7c <__aeabi_uldivmod>
 8004caa:	4602      	mov	r2, r0
 8004cac:	460b      	mov	r3, r1
 8004cae:	4613      	mov	r3, r2
 8004cb0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004cb4:	4b0d      	ldr	r3, [pc, #52]	@ (8004cec <HAL_RCC_GetSysClockFreq+0x458>)
 8004cb6:	685b      	ldr	r3, [r3, #4]
 8004cb8:	0f1b      	lsrs	r3, r3, #28
 8004cba:	f003 0307 	and.w	r3, r3, #7
 8004cbe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8004cc2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004cc6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004cca:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cce:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004cd2:	e003      	b.n	8004cdc <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004cd4:	4b06      	ldr	r3, [pc, #24]	@ (8004cf0 <HAL_RCC_GetSysClockFreq+0x45c>)
 8004cd6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004cda:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004cdc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	37b8      	adds	r7, #184	@ 0xb8
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004cea:	bf00      	nop
 8004cec:	40023800 	.word	0x40023800
 8004cf0:	00f42400 	.word	0x00f42400

08004cf4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b086      	sub	sp, #24
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d101      	bne.n	8004d06 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004d02:	2301      	movs	r3, #1
 8004d04:	e28d      	b.n	8005222 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f003 0301 	and.w	r3, r3, #1
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	f000 8083 	beq.w	8004e1a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004d14:	4b94      	ldr	r3, [pc, #592]	@ (8004f68 <HAL_RCC_OscConfig+0x274>)
 8004d16:	689b      	ldr	r3, [r3, #8]
 8004d18:	f003 030c 	and.w	r3, r3, #12
 8004d1c:	2b04      	cmp	r3, #4
 8004d1e:	d019      	beq.n	8004d54 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004d20:	4b91      	ldr	r3, [pc, #580]	@ (8004f68 <HAL_RCC_OscConfig+0x274>)
 8004d22:	689b      	ldr	r3, [r3, #8]
 8004d24:	f003 030c 	and.w	r3, r3, #12
        || \
 8004d28:	2b08      	cmp	r3, #8
 8004d2a:	d106      	bne.n	8004d3a <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004d2c:	4b8e      	ldr	r3, [pc, #568]	@ (8004f68 <HAL_RCC_OscConfig+0x274>)
 8004d2e:	685b      	ldr	r3, [r3, #4]
 8004d30:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004d34:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004d38:	d00c      	beq.n	8004d54 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004d3a:	4b8b      	ldr	r3, [pc, #556]	@ (8004f68 <HAL_RCC_OscConfig+0x274>)
 8004d3c:	689b      	ldr	r3, [r3, #8]
 8004d3e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004d42:	2b0c      	cmp	r3, #12
 8004d44:	d112      	bne.n	8004d6c <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004d46:	4b88      	ldr	r3, [pc, #544]	@ (8004f68 <HAL_RCC_OscConfig+0x274>)
 8004d48:	685b      	ldr	r3, [r3, #4]
 8004d4a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004d4e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004d52:	d10b      	bne.n	8004d6c <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d54:	4b84      	ldr	r3, [pc, #528]	@ (8004f68 <HAL_RCC_OscConfig+0x274>)
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d05b      	beq.n	8004e18 <HAL_RCC_OscConfig+0x124>
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	685b      	ldr	r3, [r3, #4]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d157      	bne.n	8004e18 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004d68:	2301      	movs	r3, #1
 8004d6a:	e25a      	b.n	8005222 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	685b      	ldr	r3, [r3, #4]
 8004d70:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d74:	d106      	bne.n	8004d84 <HAL_RCC_OscConfig+0x90>
 8004d76:	4b7c      	ldr	r3, [pc, #496]	@ (8004f68 <HAL_RCC_OscConfig+0x274>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	4a7b      	ldr	r2, [pc, #492]	@ (8004f68 <HAL_RCC_OscConfig+0x274>)
 8004d7c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d80:	6013      	str	r3, [r2, #0]
 8004d82:	e01d      	b.n	8004dc0 <HAL_RCC_OscConfig+0xcc>
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	685b      	ldr	r3, [r3, #4]
 8004d88:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004d8c:	d10c      	bne.n	8004da8 <HAL_RCC_OscConfig+0xb4>
 8004d8e:	4b76      	ldr	r3, [pc, #472]	@ (8004f68 <HAL_RCC_OscConfig+0x274>)
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	4a75      	ldr	r2, [pc, #468]	@ (8004f68 <HAL_RCC_OscConfig+0x274>)
 8004d94:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004d98:	6013      	str	r3, [r2, #0]
 8004d9a:	4b73      	ldr	r3, [pc, #460]	@ (8004f68 <HAL_RCC_OscConfig+0x274>)
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4a72      	ldr	r2, [pc, #456]	@ (8004f68 <HAL_RCC_OscConfig+0x274>)
 8004da0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004da4:	6013      	str	r3, [r2, #0]
 8004da6:	e00b      	b.n	8004dc0 <HAL_RCC_OscConfig+0xcc>
 8004da8:	4b6f      	ldr	r3, [pc, #444]	@ (8004f68 <HAL_RCC_OscConfig+0x274>)
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	4a6e      	ldr	r2, [pc, #440]	@ (8004f68 <HAL_RCC_OscConfig+0x274>)
 8004dae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004db2:	6013      	str	r3, [r2, #0]
 8004db4:	4b6c      	ldr	r3, [pc, #432]	@ (8004f68 <HAL_RCC_OscConfig+0x274>)
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	4a6b      	ldr	r2, [pc, #428]	@ (8004f68 <HAL_RCC_OscConfig+0x274>)
 8004dba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004dbe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	685b      	ldr	r3, [r3, #4]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d013      	beq.n	8004df0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dc8:	f7fe f930 	bl	800302c <HAL_GetTick>
 8004dcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004dce:	e008      	b.n	8004de2 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004dd0:	f7fe f92c 	bl	800302c <HAL_GetTick>
 8004dd4:	4602      	mov	r2, r0
 8004dd6:	693b      	ldr	r3, [r7, #16]
 8004dd8:	1ad3      	subs	r3, r2, r3
 8004dda:	2b64      	cmp	r3, #100	@ 0x64
 8004ddc:	d901      	bls.n	8004de2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004dde:	2303      	movs	r3, #3
 8004de0:	e21f      	b.n	8005222 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004de2:	4b61      	ldr	r3, [pc, #388]	@ (8004f68 <HAL_RCC_OscConfig+0x274>)
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d0f0      	beq.n	8004dd0 <HAL_RCC_OscConfig+0xdc>
 8004dee:	e014      	b.n	8004e1a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004df0:	f7fe f91c 	bl	800302c <HAL_GetTick>
 8004df4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004df6:	e008      	b.n	8004e0a <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004df8:	f7fe f918 	bl	800302c <HAL_GetTick>
 8004dfc:	4602      	mov	r2, r0
 8004dfe:	693b      	ldr	r3, [r7, #16]
 8004e00:	1ad3      	subs	r3, r2, r3
 8004e02:	2b64      	cmp	r3, #100	@ 0x64
 8004e04:	d901      	bls.n	8004e0a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004e06:	2303      	movs	r3, #3
 8004e08:	e20b      	b.n	8005222 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e0a:	4b57      	ldr	r3, [pc, #348]	@ (8004f68 <HAL_RCC_OscConfig+0x274>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d1f0      	bne.n	8004df8 <HAL_RCC_OscConfig+0x104>
 8004e16:	e000      	b.n	8004e1a <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f003 0302 	and.w	r3, r3, #2
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d06f      	beq.n	8004f06 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004e26:	4b50      	ldr	r3, [pc, #320]	@ (8004f68 <HAL_RCC_OscConfig+0x274>)
 8004e28:	689b      	ldr	r3, [r3, #8]
 8004e2a:	f003 030c 	and.w	r3, r3, #12
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d017      	beq.n	8004e62 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004e32:	4b4d      	ldr	r3, [pc, #308]	@ (8004f68 <HAL_RCC_OscConfig+0x274>)
 8004e34:	689b      	ldr	r3, [r3, #8]
 8004e36:	f003 030c 	and.w	r3, r3, #12
        || \
 8004e3a:	2b08      	cmp	r3, #8
 8004e3c:	d105      	bne.n	8004e4a <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004e3e:	4b4a      	ldr	r3, [pc, #296]	@ (8004f68 <HAL_RCC_OscConfig+0x274>)
 8004e40:	685b      	ldr	r3, [r3, #4]
 8004e42:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d00b      	beq.n	8004e62 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004e4a:	4b47      	ldr	r3, [pc, #284]	@ (8004f68 <HAL_RCC_OscConfig+0x274>)
 8004e4c:	689b      	ldr	r3, [r3, #8]
 8004e4e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004e52:	2b0c      	cmp	r3, #12
 8004e54:	d11c      	bne.n	8004e90 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004e56:	4b44      	ldr	r3, [pc, #272]	@ (8004f68 <HAL_RCC_OscConfig+0x274>)
 8004e58:	685b      	ldr	r3, [r3, #4]
 8004e5a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d116      	bne.n	8004e90 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e62:	4b41      	ldr	r3, [pc, #260]	@ (8004f68 <HAL_RCC_OscConfig+0x274>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f003 0302 	and.w	r3, r3, #2
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d005      	beq.n	8004e7a <HAL_RCC_OscConfig+0x186>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	68db      	ldr	r3, [r3, #12]
 8004e72:	2b01      	cmp	r3, #1
 8004e74:	d001      	beq.n	8004e7a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004e76:	2301      	movs	r3, #1
 8004e78:	e1d3      	b.n	8005222 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e7a:	4b3b      	ldr	r3, [pc, #236]	@ (8004f68 <HAL_RCC_OscConfig+0x274>)
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	691b      	ldr	r3, [r3, #16]
 8004e86:	00db      	lsls	r3, r3, #3
 8004e88:	4937      	ldr	r1, [pc, #220]	@ (8004f68 <HAL_RCC_OscConfig+0x274>)
 8004e8a:	4313      	orrs	r3, r2
 8004e8c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e8e:	e03a      	b.n	8004f06 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	68db      	ldr	r3, [r3, #12]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d020      	beq.n	8004eda <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004e98:	4b34      	ldr	r3, [pc, #208]	@ (8004f6c <HAL_RCC_OscConfig+0x278>)
 8004e9a:	2201      	movs	r2, #1
 8004e9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e9e:	f7fe f8c5 	bl	800302c <HAL_GetTick>
 8004ea2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ea4:	e008      	b.n	8004eb8 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ea6:	f7fe f8c1 	bl	800302c <HAL_GetTick>
 8004eaa:	4602      	mov	r2, r0
 8004eac:	693b      	ldr	r3, [r7, #16]
 8004eae:	1ad3      	subs	r3, r2, r3
 8004eb0:	2b02      	cmp	r3, #2
 8004eb2:	d901      	bls.n	8004eb8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004eb4:	2303      	movs	r3, #3
 8004eb6:	e1b4      	b.n	8005222 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004eb8:	4b2b      	ldr	r3, [pc, #172]	@ (8004f68 <HAL_RCC_OscConfig+0x274>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f003 0302 	and.w	r3, r3, #2
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d0f0      	beq.n	8004ea6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ec4:	4b28      	ldr	r3, [pc, #160]	@ (8004f68 <HAL_RCC_OscConfig+0x274>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	691b      	ldr	r3, [r3, #16]
 8004ed0:	00db      	lsls	r3, r3, #3
 8004ed2:	4925      	ldr	r1, [pc, #148]	@ (8004f68 <HAL_RCC_OscConfig+0x274>)
 8004ed4:	4313      	orrs	r3, r2
 8004ed6:	600b      	str	r3, [r1, #0]
 8004ed8:	e015      	b.n	8004f06 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004eda:	4b24      	ldr	r3, [pc, #144]	@ (8004f6c <HAL_RCC_OscConfig+0x278>)
 8004edc:	2200      	movs	r2, #0
 8004ede:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ee0:	f7fe f8a4 	bl	800302c <HAL_GetTick>
 8004ee4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ee6:	e008      	b.n	8004efa <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ee8:	f7fe f8a0 	bl	800302c <HAL_GetTick>
 8004eec:	4602      	mov	r2, r0
 8004eee:	693b      	ldr	r3, [r7, #16]
 8004ef0:	1ad3      	subs	r3, r2, r3
 8004ef2:	2b02      	cmp	r3, #2
 8004ef4:	d901      	bls.n	8004efa <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004ef6:	2303      	movs	r3, #3
 8004ef8:	e193      	b.n	8005222 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004efa:	4b1b      	ldr	r3, [pc, #108]	@ (8004f68 <HAL_RCC_OscConfig+0x274>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f003 0302 	and.w	r3, r3, #2
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d1f0      	bne.n	8004ee8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f003 0308 	and.w	r3, r3, #8
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d036      	beq.n	8004f80 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	695b      	ldr	r3, [r3, #20]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d016      	beq.n	8004f48 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004f1a:	4b15      	ldr	r3, [pc, #84]	@ (8004f70 <HAL_RCC_OscConfig+0x27c>)
 8004f1c:	2201      	movs	r2, #1
 8004f1e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f20:	f7fe f884 	bl	800302c <HAL_GetTick>
 8004f24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f26:	e008      	b.n	8004f3a <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f28:	f7fe f880 	bl	800302c <HAL_GetTick>
 8004f2c:	4602      	mov	r2, r0
 8004f2e:	693b      	ldr	r3, [r7, #16]
 8004f30:	1ad3      	subs	r3, r2, r3
 8004f32:	2b02      	cmp	r3, #2
 8004f34:	d901      	bls.n	8004f3a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004f36:	2303      	movs	r3, #3
 8004f38:	e173      	b.n	8005222 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f3a:	4b0b      	ldr	r3, [pc, #44]	@ (8004f68 <HAL_RCC_OscConfig+0x274>)
 8004f3c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f3e:	f003 0302 	and.w	r3, r3, #2
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d0f0      	beq.n	8004f28 <HAL_RCC_OscConfig+0x234>
 8004f46:	e01b      	b.n	8004f80 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004f48:	4b09      	ldr	r3, [pc, #36]	@ (8004f70 <HAL_RCC_OscConfig+0x27c>)
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f4e:	f7fe f86d 	bl	800302c <HAL_GetTick>
 8004f52:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f54:	e00e      	b.n	8004f74 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f56:	f7fe f869 	bl	800302c <HAL_GetTick>
 8004f5a:	4602      	mov	r2, r0
 8004f5c:	693b      	ldr	r3, [r7, #16]
 8004f5e:	1ad3      	subs	r3, r2, r3
 8004f60:	2b02      	cmp	r3, #2
 8004f62:	d907      	bls.n	8004f74 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004f64:	2303      	movs	r3, #3
 8004f66:	e15c      	b.n	8005222 <HAL_RCC_OscConfig+0x52e>
 8004f68:	40023800 	.word	0x40023800
 8004f6c:	42470000 	.word	0x42470000
 8004f70:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f74:	4b8a      	ldr	r3, [pc, #552]	@ (80051a0 <HAL_RCC_OscConfig+0x4ac>)
 8004f76:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f78:	f003 0302 	and.w	r3, r3, #2
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d1ea      	bne.n	8004f56 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f003 0304 	and.w	r3, r3, #4
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	f000 8097 	beq.w	80050bc <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004f8e:	2300      	movs	r3, #0
 8004f90:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004f92:	4b83      	ldr	r3, [pc, #524]	@ (80051a0 <HAL_RCC_OscConfig+0x4ac>)
 8004f94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d10f      	bne.n	8004fbe <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	60bb      	str	r3, [r7, #8]
 8004fa2:	4b7f      	ldr	r3, [pc, #508]	@ (80051a0 <HAL_RCC_OscConfig+0x4ac>)
 8004fa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fa6:	4a7e      	ldr	r2, [pc, #504]	@ (80051a0 <HAL_RCC_OscConfig+0x4ac>)
 8004fa8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004fac:	6413      	str	r3, [r2, #64]	@ 0x40
 8004fae:	4b7c      	ldr	r3, [pc, #496]	@ (80051a0 <HAL_RCC_OscConfig+0x4ac>)
 8004fb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fb2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004fb6:	60bb      	str	r3, [r7, #8]
 8004fb8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004fba:	2301      	movs	r3, #1
 8004fbc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004fbe:	4b79      	ldr	r3, [pc, #484]	@ (80051a4 <HAL_RCC_OscConfig+0x4b0>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d118      	bne.n	8004ffc <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004fca:	4b76      	ldr	r3, [pc, #472]	@ (80051a4 <HAL_RCC_OscConfig+0x4b0>)
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	4a75      	ldr	r2, [pc, #468]	@ (80051a4 <HAL_RCC_OscConfig+0x4b0>)
 8004fd0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004fd4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004fd6:	f7fe f829 	bl	800302c <HAL_GetTick>
 8004fda:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004fdc:	e008      	b.n	8004ff0 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004fde:	f7fe f825 	bl	800302c <HAL_GetTick>
 8004fe2:	4602      	mov	r2, r0
 8004fe4:	693b      	ldr	r3, [r7, #16]
 8004fe6:	1ad3      	subs	r3, r2, r3
 8004fe8:	2b02      	cmp	r3, #2
 8004fea:	d901      	bls.n	8004ff0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004fec:	2303      	movs	r3, #3
 8004fee:	e118      	b.n	8005222 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ff0:	4b6c      	ldr	r3, [pc, #432]	@ (80051a4 <HAL_RCC_OscConfig+0x4b0>)
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d0f0      	beq.n	8004fde <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	689b      	ldr	r3, [r3, #8]
 8005000:	2b01      	cmp	r3, #1
 8005002:	d106      	bne.n	8005012 <HAL_RCC_OscConfig+0x31e>
 8005004:	4b66      	ldr	r3, [pc, #408]	@ (80051a0 <HAL_RCC_OscConfig+0x4ac>)
 8005006:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005008:	4a65      	ldr	r2, [pc, #404]	@ (80051a0 <HAL_RCC_OscConfig+0x4ac>)
 800500a:	f043 0301 	orr.w	r3, r3, #1
 800500e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005010:	e01c      	b.n	800504c <HAL_RCC_OscConfig+0x358>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	689b      	ldr	r3, [r3, #8]
 8005016:	2b05      	cmp	r3, #5
 8005018:	d10c      	bne.n	8005034 <HAL_RCC_OscConfig+0x340>
 800501a:	4b61      	ldr	r3, [pc, #388]	@ (80051a0 <HAL_RCC_OscConfig+0x4ac>)
 800501c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800501e:	4a60      	ldr	r2, [pc, #384]	@ (80051a0 <HAL_RCC_OscConfig+0x4ac>)
 8005020:	f043 0304 	orr.w	r3, r3, #4
 8005024:	6713      	str	r3, [r2, #112]	@ 0x70
 8005026:	4b5e      	ldr	r3, [pc, #376]	@ (80051a0 <HAL_RCC_OscConfig+0x4ac>)
 8005028:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800502a:	4a5d      	ldr	r2, [pc, #372]	@ (80051a0 <HAL_RCC_OscConfig+0x4ac>)
 800502c:	f043 0301 	orr.w	r3, r3, #1
 8005030:	6713      	str	r3, [r2, #112]	@ 0x70
 8005032:	e00b      	b.n	800504c <HAL_RCC_OscConfig+0x358>
 8005034:	4b5a      	ldr	r3, [pc, #360]	@ (80051a0 <HAL_RCC_OscConfig+0x4ac>)
 8005036:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005038:	4a59      	ldr	r2, [pc, #356]	@ (80051a0 <HAL_RCC_OscConfig+0x4ac>)
 800503a:	f023 0301 	bic.w	r3, r3, #1
 800503e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005040:	4b57      	ldr	r3, [pc, #348]	@ (80051a0 <HAL_RCC_OscConfig+0x4ac>)
 8005042:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005044:	4a56      	ldr	r2, [pc, #344]	@ (80051a0 <HAL_RCC_OscConfig+0x4ac>)
 8005046:	f023 0304 	bic.w	r3, r3, #4
 800504a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	689b      	ldr	r3, [r3, #8]
 8005050:	2b00      	cmp	r3, #0
 8005052:	d015      	beq.n	8005080 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005054:	f7fd ffea 	bl	800302c <HAL_GetTick>
 8005058:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800505a:	e00a      	b.n	8005072 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800505c:	f7fd ffe6 	bl	800302c <HAL_GetTick>
 8005060:	4602      	mov	r2, r0
 8005062:	693b      	ldr	r3, [r7, #16]
 8005064:	1ad3      	subs	r3, r2, r3
 8005066:	f241 3288 	movw	r2, #5000	@ 0x1388
 800506a:	4293      	cmp	r3, r2
 800506c:	d901      	bls.n	8005072 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800506e:	2303      	movs	r3, #3
 8005070:	e0d7      	b.n	8005222 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005072:	4b4b      	ldr	r3, [pc, #300]	@ (80051a0 <HAL_RCC_OscConfig+0x4ac>)
 8005074:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005076:	f003 0302 	and.w	r3, r3, #2
 800507a:	2b00      	cmp	r3, #0
 800507c:	d0ee      	beq.n	800505c <HAL_RCC_OscConfig+0x368>
 800507e:	e014      	b.n	80050aa <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005080:	f7fd ffd4 	bl	800302c <HAL_GetTick>
 8005084:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005086:	e00a      	b.n	800509e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005088:	f7fd ffd0 	bl	800302c <HAL_GetTick>
 800508c:	4602      	mov	r2, r0
 800508e:	693b      	ldr	r3, [r7, #16]
 8005090:	1ad3      	subs	r3, r2, r3
 8005092:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005096:	4293      	cmp	r3, r2
 8005098:	d901      	bls.n	800509e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800509a:	2303      	movs	r3, #3
 800509c:	e0c1      	b.n	8005222 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800509e:	4b40      	ldr	r3, [pc, #256]	@ (80051a0 <HAL_RCC_OscConfig+0x4ac>)
 80050a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050a2:	f003 0302 	and.w	r3, r3, #2
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d1ee      	bne.n	8005088 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80050aa:	7dfb      	ldrb	r3, [r7, #23]
 80050ac:	2b01      	cmp	r3, #1
 80050ae:	d105      	bne.n	80050bc <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80050b0:	4b3b      	ldr	r3, [pc, #236]	@ (80051a0 <HAL_RCC_OscConfig+0x4ac>)
 80050b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050b4:	4a3a      	ldr	r2, [pc, #232]	@ (80051a0 <HAL_RCC_OscConfig+0x4ac>)
 80050b6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80050ba:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	699b      	ldr	r3, [r3, #24]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	f000 80ad 	beq.w	8005220 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80050c6:	4b36      	ldr	r3, [pc, #216]	@ (80051a0 <HAL_RCC_OscConfig+0x4ac>)
 80050c8:	689b      	ldr	r3, [r3, #8]
 80050ca:	f003 030c 	and.w	r3, r3, #12
 80050ce:	2b08      	cmp	r3, #8
 80050d0:	d060      	beq.n	8005194 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	699b      	ldr	r3, [r3, #24]
 80050d6:	2b02      	cmp	r3, #2
 80050d8:	d145      	bne.n	8005166 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050da:	4b33      	ldr	r3, [pc, #204]	@ (80051a8 <HAL_RCC_OscConfig+0x4b4>)
 80050dc:	2200      	movs	r2, #0
 80050de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050e0:	f7fd ffa4 	bl	800302c <HAL_GetTick>
 80050e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050e6:	e008      	b.n	80050fa <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050e8:	f7fd ffa0 	bl	800302c <HAL_GetTick>
 80050ec:	4602      	mov	r2, r0
 80050ee:	693b      	ldr	r3, [r7, #16]
 80050f0:	1ad3      	subs	r3, r2, r3
 80050f2:	2b02      	cmp	r3, #2
 80050f4:	d901      	bls.n	80050fa <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80050f6:	2303      	movs	r3, #3
 80050f8:	e093      	b.n	8005222 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050fa:	4b29      	ldr	r3, [pc, #164]	@ (80051a0 <HAL_RCC_OscConfig+0x4ac>)
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005102:	2b00      	cmp	r3, #0
 8005104:	d1f0      	bne.n	80050e8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	69da      	ldr	r2, [r3, #28]
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6a1b      	ldr	r3, [r3, #32]
 800510e:	431a      	orrs	r2, r3
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005114:	019b      	lsls	r3, r3, #6
 8005116:	431a      	orrs	r2, r3
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800511c:	085b      	lsrs	r3, r3, #1
 800511e:	3b01      	subs	r3, #1
 8005120:	041b      	lsls	r3, r3, #16
 8005122:	431a      	orrs	r2, r3
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005128:	061b      	lsls	r3, r3, #24
 800512a:	431a      	orrs	r2, r3
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005130:	071b      	lsls	r3, r3, #28
 8005132:	491b      	ldr	r1, [pc, #108]	@ (80051a0 <HAL_RCC_OscConfig+0x4ac>)
 8005134:	4313      	orrs	r3, r2
 8005136:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005138:	4b1b      	ldr	r3, [pc, #108]	@ (80051a8 <HAL_RCC_OscConfig+0x4b4>)
 800513a:	2201      	movs	r2, #1
 800513c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800513e:	f7fd ff75 	bl	800302c <HAL_GetTick>
 8005142:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005144:	e008      	b.n	8005158 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005146:	f7fd ff71 	bl	800302c <HAL_GetTick>
 800514a:	4602      	mov	r2, r0
 800514c:	693b      	ldr	r3, [r7, #16]
 800514e:	1ad3      	subs	r3, r2, r3
 8005150:	2b02      	cmp	r3, #2
 8005152:	d901      	bls.n	8005158 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8005154:	2303      	movs	r3, #3
 8005156:	e064      	b.n	8005222 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005158:	4b11      	ldr	r3, [pc, #68]	@ (80051a0 <HAL_RCC_OscConfig+0x4ac>)
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005160:	2b00      	cmp	r3, #0
 8005162:	d0f0      	beq.n	8005146 <HAL_RCC_OscConfig+0x452>
 8005164:	e05c      	b.n	8005220 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005166:	4b10      	ldr	r3, [pc, #64]	@ (80051a8 <HAL_RCC_OscConfig+0x4b4>)
 8005168:	2200      	movs	r2, #0
 800516a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800516c:	f7fd ff5e 	bl	800302c <HAL_GetTick>
 8005170:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005172:	e008      	b.n	8005186 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005174:	f7fd ff5a 	bl	800302c <HAL_GetTick>
 8005178:	4602      	mov	r2, r0
 800517a:	693b      	ldr	r3, [r7, #16]
 800517c:	1ad3      	subs	r3, r2, r3
 800517e:	2b02      	cmp	r3, #2
 8005180:	d901      	bls.n	8005186 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8005182:	2303      	movs	r3, #3
 8005184:	e04d      	b.n	8005222 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005186:	4b06      	ldr	r3, [pc, #24]	@ (80051a0 <HAL_RCC_OscConfig+0x4ac>)
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800518e:	2b00      	cmp	r3, #0
 8005190:	d1f0      	bne.n	8005174 <HAL_RCC_OscConfig+0x480>
 8005192:	e045      	b.n	8005220 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	699b      	ldr	r3, [r3, #24]
 8005198:	2b01      	cmp	r3, #1
 800519a:	d107      	bne.n	80051ac <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800519c:	2301      	movs	r3, #1
 800519e:	e040      	b.n	8005222 <HAL_RCC_OscConfig+0x52e>
 80051a0:	40023800 	.word	0x40023800
 80051a4:	40007000 	.word	0x40007000
 80051a8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80051ac:	4b1f      	ldr	r3, [pc, #124]	@ (800522c <HAL_RCC_OscConfig+0x538>)
 80051ae:	685b      	ldr	r3, [r3, #4]
 80051b0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	699b      	ldr	r3, [r3, #24]
 80051b6:	2b01      	cmp	r3, #1
 80051b8:	d030      	beq.n	800521c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80051c4:	429a      	cmp	r2, r3
 80051c6:	d129      	bne.n	800521c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80051d2:	429a      	cmp	r2, r3
 80051d4:	d122      	bne.n	800521c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80051d6:	68fa      	ldr	r2, [r7, #12]
 80051d8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80051dc:	4013      	ands	r3, r2
 80051de:	687a      	ldr	r2, [r7, #4]
 80051e0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80051e2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80051e4:	4293      	cmp	r3, r2
 80051e6:	d119      	bne.n	800521c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051f2:	085b      	lsrs	r3, r3, #1
 80051f4:	3b01      	subs	r3, #1
 80051f6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80051f8:	429a      	cmp	r2, r3
 80051fa:	d10f      	bne.n	800521c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005206:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005208:	429a      	cmp	r2, r3
 800520a:	d107      	bne.n	800521c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005216:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005218:	429a      	cmp	r2, r3
 800521a:	d001      	beq.n	8005220 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800521c:	2301      	movs	r3, #1
 800521e:	e000      	b.n	8005222 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8005220:	2300      	movs	r3, #0
}
 8005222:	4618      	mov	r0, r3
 8005224:	3718      	adds	r7, #24
 8005226:	46bd      	mov	sp, r7
 8005228:	bd80      	pop	{r7, pc}
 800522a:	bf00      	nop
 800522c:	40023800 	.word	0x40023800

08005230 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005230:	b580      	push	{r7, lr}
 8005232:	b082      	sub	sp, #8
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d101      	bne.n	8005242 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800523e:	2301      	movs	r3, #1
 8005240:	e07b      	b.n	800533a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005246:	2b00      	cmp	r3, #0
 8005248:	d108      	bne.n	800525c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	685b      	ldr	r3, [r3, #4]
 800524e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005252:	d009      	beq.n	8005268 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2200      	movs	r2, #0
 8005258:	61da      	str	r2, [r3, #28]
 800525a:	e005      	b.n	8005268 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2200      	movs	r2, #0
 8005260:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2200      	movs	r2, #0
 8005266:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2200      	movs	r2, #0
 800526c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005274:	b2db      	uxtb	r3, r3
 8005276:	2b00      	cmp	r3, #0
 8005278:	d106      	bne.n	8005288 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2200      	movs	r2, #0
 800527e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005282:	6878      	ldr	r0, [r7, #4]
 8005284:	f7fd f80a 	bl	800229c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2202      	movs	r2, #2
 800528c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	681a      	ldr	r2, [r3, #0]
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800529e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	685b      	ldr	r3, [r3, #4]
 80052a4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	689b      	ldr	r3, [r3, #8]
 80052ac:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80052b0:	431a      	orrs	r2, r3
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	68db      	ldr	r3, [r3, #12]
 80052b6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80052ba:	431a      	orrs	r2, r3
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	691b      	ldr	r3, [r3, #16]
 80052c0:	f003 0302 	and.w	r3, r3, #2
 80052c4:	431a      	orrs	r2, r3
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	695b      	ldr	r3, [r3, #20]
 80052ca:	f003 0301 	and.w	r3, r3, #1
 80052ce:	431a      	orrs	r2, r3
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	699b      	ldr	r3, [r3, #24]
 80052d4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80052d8:	431a      	orrs	r2, r3
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	69db      	ldr	r3, [r3, #28]
 80052de:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80052e2:	431a      	orrs	r2, r3
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	6a1b      	ldr	r3, [r3, #32]
 80052e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80052ec:	ea42 0103 	orr.w	r1, r2, r3
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052f4:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	430a      	orrs	r2, r1
 80052fe:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	699b      	ldr	r3, [r3, #24]
 8005304:	0c1b      	lsrs	r3, r3, #16
 8005306:	f003 0104 	and.w	r1, r3, #4
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800530e:	f003 0210 	and.w	r2, r3, #16
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	430a      	orrs	r2, r1
 8005318:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	69da      	ldr	r2, [r3, #28]
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005328:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2200      	movs	r2, #0
 800532e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2201      	movs	r2, #1
 8005334:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005338:	2300      	movs	r3, #0
}
 800533a:	4618      	mov	r0, r3
 800533c:	3708      	adds	r7, #8
 800533e:	46bd      	mov	sp, r7
 8005340:	bd80      	pop	{r7, pc}

08005342 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005342:	b580      	push	{r7, lr}
 8005344:	b088      	sub	sp, #32
 8005346:	af00      	add	r7, sp, #0
 8005348:	60f8      	str	r0, [r7, #12]
 800534a:	60b9      	str	r1, [r7, #8]
 800534c:	603b      	str	r3, [r7, #0]
 800534e:	4613      	mov	r3, r2
 8005350:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005352:	f7fd fe6b 	bl	800302c <HAL_GetTick>
 8005356:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8005358:	88fb      	ldrh	r3, [r7, #6]
 800535a:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005362:	b2db      	uxtb	r3, r3
 8005364:	2b01      	cmp	r3, #1
 8005366:	d001      	beq.n	800536c <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8005368:	2302      	movs	r3, #2
 800536a:	e12a      	b.n	80055c2 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 800536c:	68bb      	ldr	r3, [r7, #8]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d002      	beq.n	8005378 <HAL_SPI_Transmit+0x36>
 8005372:	88fb      	ldrh	r3, [r7, #6]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d101      	bne.n	800537c <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8005378:	2301      	movs	r3, #1
 800537a:	e122      	b.n	80055c2 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005382:	2b01      	cmp	r3, #1
 8005384:	d101      	bne.n	800538a <HAL_SPI_Transmit+0x48>
 8005386:	2302      	movs	r3, #2
 8005388:	e11b      	b.n	80055c2 <HAL_SPI_Transmit+0x280>
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	2201      	movs	r2, #1
 800538e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	2203      	movs	r2, #3
 8005396:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	2200      	movs	r2, #0
 800539e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	68ba      	ldr	r2, [r7, #8]
 80053a4:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	88fa      	ldrh	r2, [r7, #6]
 80053aa:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	88fa      	ldrh	r2, [r7, #6]
 80053b0:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	2200      	movs	r2, #0
 80053b6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	2200      	movs	r2, #0
 80053bc:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	2200      	movs	r2, #0
 80053c2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	2200      	movs	r2, #0
 80053c8:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	2200      	movs	r2, #0
 80053ce:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	689b      	ldr	r3, [r3, #8]
 80053d4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80053d8:	d10f      	bne.n	80053fa <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	681a      	ldr	r2, [r3, #0]
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80053e8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	681a      	ldr	r2, [r3, #0]
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80053f8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005404:	2b40      	cmp	r3, #64	@ 0x40
 8005406:	d007      	beq.n	8005418 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	681a      	ldr	r2, [r3, #0]
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005416:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	68db      	ldr	r3, [r3, #12]
 800541c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005420:	d152      	bne.n	80054c8 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	685b      	ldr	r3, [r3, #4]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d002      	beq.n	8005430 <HAL_SPI_Transmit+0xee>
 800542a:	8b7b      	ldrh	r3, [r7, #26]
 800542c:	2b01      	cmp	r3, #1
 800542e:	d145      	bne.n	80054bc <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005434:	881a      	ldrh	r2, [r3, #0]
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005440:	1c9a      	adds	r2, r3, #2
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800544a:	b29b      	uxth	r3, r3
 800544c:	3b01      	subs	r3, #1
 800544e:	b29a      	uxth	r2, r3
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005454:	e032      	b.n	80054bc <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	689b      	ldr	r3, [r3, #8]
 800545c:	f003 0302 	and.w	r3, r3, #2
 8005460:	2b02      	cmp	r3, #2
 8005462:	d112      	bne.n	800548a <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005468:	881a      	ldrh	r2, [r3, #0]
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005474:	1c9a      	adds	r2, r3, #2
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800547e:	b29b      	uxth	r3, r3
 8005480:	3b01      	subs	r3, #1
 8005482:	b29a      	uxth	r2, r3
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005488:	e018      	b.n	80054bc <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800548a:	f7fd fdcf 	bl	800302c <HAL_GetTick>
 800548e:	4602      	mov	r2, r0
 8005490:	69fb      	ldr	r3, [r7, #28]
 8005492:	1ad3      	subs	r3, r2, r3
 8005494:	683a      	ldr	r2, [r7, #0]
 8005496:	429a      	cmp	r2, r3
 8005498:	d803      	bhi.n	80054a2 <HAL_SPI_Transmit+0x160>
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054a0:	d102      	bne.n	80054a8 <HAL_SPI_Transmit+0x166>
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d109      	bne.n	80054bc <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	2201      	movs	r2, #1
 80054ac:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	2200      	movs	r2, #0
 80054b4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80054b8:	2303      	movs	r3, #3
 80054ba:	e082      	b.n	80055c2 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80054c0:	b29b      	uxth	r3, r3
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d1c7      	bne.n	8005456 <HAL_SPI_Transmit+0x114>
 80054c6:	e053      	b.n	8005570 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	685b      	ldr	r3, [r3, #4]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d002      	beq.n	80054d6 <HAL_SPI_Transmit+0x194>
 80054d0:	8b7b      	ldrh	r3, [r7, #26]
 80054d2:	2b01      	cmp	r3, #1
 80054d4:	d147      	bne.n	8005566 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	330c      	adds	r3, #12
 80054e0:	7812      	ldrb	r2, [r2, #0]
 80054e2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054e8:	1c5a      	adds	r2, r3, #1
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80054f2:	b29b      	uxth	r3, r3
 80054f4:	3b01      	subs	r3, #1
 80054f6:	b29a      	uxth	r2, r3
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80054fc:	e033      	b.n	8005566 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	689b      	ldr	r3, [r3, #8]
 8005504:	f003 0302 	and.w	r3, r3, #2
 8005508:	2b02      	cmp	r3, #2
 800550a:	d113      	bne.n	8005534 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	330c      	adds	r3, #12
 8005516:	7812      	ldrb	r2, [r2, #0]
 8005518:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800551e:	1c5a      	adds	r2, r3, #1
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005528:	b29b      	uxth	r3, r3
 800552a:	3b01      	subs	r3, #1
 800552c:	b29a      	uxth	r2, r3
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005532:	e018      	b.n	8005566 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005534:	f7fd fd7a 	bl	800302c <HAL_GetTick>
 8005538:	4602      	mov	r2, r0
 800553a:	69fb      	ldr	r3, [r7, #28]
 800553c:	1ad3      	subs	r3, r2, r3
 800553e:	683a      	ldr	r2, [r7, #0]
 8005540:	429a      	cmp	r2, r3
 8005542:	d803      	bhi.n	800554c <HAL_SPI_Transmit+0x20a>
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	f1b3 3fff 	cmp.w	r3, #4294967295
 800554a:	d102      	bne.n	8005552 <HAL_SPI_Transmit+0x210>
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d109      	bne.n	8005566 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	2201      	movs	r2, #1
 8005556:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	2200      	movs	r2, #0
 800555e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005562:	2303      	movs	r3, #3
 8005564:	e02d      	b.n	80055c2 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800556a:	b29b      	uxth	r3, r3
 800556c:	2b00      	cmp	r3, #0
 800556e:	d1c6      	bne.n	80054fe <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005570:	69fa      	ldr	r2, [r7, #28]
 8005572:	6839      	ldr	r1, [r7, #0]
 8005574:	68f8      	ldr	r0, [r7, #12]
 8005576:	f000 f8b1 	bl	80056dc <SPI_EndRxTxTransaction>
 800557a:	4603      	mov	r3, r0
 800557c:	2b00      	cmp	r3, #0
 800557e:	d002      	beq.n	8005586 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	2220      	movs	r2, #32
 8005584:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	689b      	ldr	r3, [r3, #8]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d10a      	bne.n	80055a4 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800558e:	2300      	movs	r3, #0
 8005590:	617b      	str	r3, [r7, #20]
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	68db      	ldr	r3, [r3, #12]
 8005598:	617b      	str	r3, [r7, #20]
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	689b      	ldr	r3, [r3, #8]
 80055a0:	617b      	str	r3, [r7, #20]
 80055a2:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	2201      	movs	r2, #1
 80055a8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	2200      	movs	r2, #0
 80055b0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d001      	beq.n	80055c0 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80055bc:	2301      	movs	r3, #1
 80055be:	e000      	b.n	80055c2 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80055c0:	2300      	movs	r3, #0
  }
}
 80055c2:	4618      	mov	r0, r3
 80055c4:	3720      	adds	r7, #32
 80055c6:	46bd      	mov	sp, r7
 80055c8:	bd80      	pop	{r7, pc}
	...

080055cc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b088      	sub	sp, #32
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	60f8      	str	r0, [r7, #12]
 80055d4:	60b9      	str	r1, [r7, #8]
 80055d6:	603b      	str	r3, [r7, #0]
 80055d8:	4613      	mov	r3, r2
 80055da:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80055dc:	f7fd fd26 	bl	800302c <HAL_GetTick>
 80055e0:	4602      	mov	r2, r0
 80055e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055e4:	1a9b      	subs	r3, r3, r2
 80055e6:	683a      	ldr	r2, [r7, #0]
 80055e8:	4413      	add	r3, r2
 80055ea:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80055ec:	f7fd fd1e 	bl	800302c <HAL_GetTick>
 80055f0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80055f2:	4b39      	ldr	r3, [pc, #228]	@ (80056d8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	015b      	lsls	r3, r3, #5
 80055f8:	0d1b      	lsrs	r3, r3, #20
 80055fa:	69fa      	ldr	r2, [r7, #28]
 80055fc:	fb02 f303 	mul.w	r3, r2, r3
 8005600:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005602:	e054      	b.n	80056ae <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	f1b3 3fff 	cmp.w	r3, #4294967295
 800560a:	d050      	beq.n	80056ae <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800560c:	f7fd fd0e 	bl	800302c <HAL_GetTick>
 8005610:	4602      	mov	r2, r0
 8005612:	69bb      	ldr	r3, [r7, #24]
 8005614:	1ad3      	subs	r3, r2, r3
 8005616:	69fa      	ldr	r2, [r7, #28]
 8005618:	429a      	cmp	r2, r3
 800561a:	d902      	bls.n	8005622 <SPI_WaitFlagStateUntilTimeout+0x56>
 800561c:	69fb      	ldr	r3, [r7, #28]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d13d      	bne.n	800569e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	685a      	ldr	r2, [r3, #4]
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005630:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	685b      	ldr	r3, [r3, #4]
 8005636:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800563a:	d111      	bne.n	8005660 <SPI_WaitFlagStateUntilTimeout+0x94>
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	689b      	ldr	r3, [r3, #8]
 8005640:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005644:	d004      	beq.n	8005650 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	689b      	ldr	r3, [r3, #8]
 800564a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800564e:	d107      	bne.n	8005660 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	681a      	ldr	r2, [r3, #0]
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800565e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005664:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005668:	d10f      	bne.n	800568a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	681a      	ldr	r2, [r3, #0]
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005678:	601a      	str	r2, [r3, #0]
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	681a      	ldr	r2, [r3, #0]
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005688:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	2201      	movs	r2, #1
 800568e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	2200      	movs	r2, #0
 8005696:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800569a:	2303      	movs	r3, #3
 800569c:	e017      	b.n	80056ce <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800569e:	697b      	ldr	r3, [r7, #20]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d101      	bne.n	80056a8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80056a4:	2300      	movs	r3, #0
 80056a6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80056a8:	697b      	ldr	r3, [r7, #20]
 80056aa:	3b01      	subs	r3, #1
 80056ac:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	689a      	ldr	r2, [r3, #8]
 80056b4:	68bb      	ldr	r3, [r7, #8]
 80056b6:	4013      	ands	r3, r2
 80056b8:	68ba      	ldr	r2, [r7, #8]
 80056ba:	429a      	cmp	r2, r3
 80056bc:	bf0c      	ite	eq
 80056be:	2301      	moveq	r3, #1
 80056c0:	2300      	movne	r3, #0
 80056c2:	b2db      	uxtb	r3, r3
 80056c4:	461a      	mov	r2, r3
 80056c6:	79fb      	ldrb	r3, [r7, #7]
 80056c8:	429a      	cmp	r2, r3
 80056ca:	d19b      	bne.n	8005604 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80056cc:	2300      	movs	r3, #0
}
 80056ce:	4618      	mov	r0, r3
 80056d0:	3720      	adds	r7, #32
 80056d2:	46bd      	mov	sp, r7
 80056d4:	bd80      	pop	{r7, pc}
 80056d6:	bf00      	nop
 80056d8:	2000001c 	.word	0x2000001c

080056dc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80056dc:	b580      	push	{r7, lr}
 80056de:	b088      	sub	sp, #32
 80056e0:	af02      	add	r7, sp, #8
 80056e2:	60f8      	str	r0, [r7, #12]
 80056e4:	60b9      	str	r1, [r7, #8]
 80056e6:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	9300      	str	r3, [sp, #0]
 80056ec:	68bb      	ldr	r3, [r7, #8]
 80056ee:	2201      	movs	r2, #1
 80056f0:	2102      	movs	r1, #2
 80056f2:	68f8      	ldr	r0, [r7, #12]
 80056f4:	f7ff ff6a 	bl	80055cc <SPI_WaitFlagStateUntilTimeout>
 80056f8:	4603      	mov	r3, r0
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d007      	beq.n	800570e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005702:	f043 0220 	orr.w	r2, r3, #32
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800570a:	2303      	movs	r3, #3
 800570c:	e032      	b.n	8005774 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800570e:	4b1b      	ldr	r3, [pc, #108]	@ (800577c <SPI_EndRxTxTransaction+0xa0>)
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	4a1b      	ldr	r2, [pc, #108]	@ (8005780 <SPI_EndRxTxTransaction+0xa4>)
 8005714:	fba2 2303 	umull	r2, r3, r2, r3
 8005718:	0d5b      	lsrs	r3, r3, #21
 800571a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800571e:	fb02 f303 	mul.w	r3, r2, r3
 8005722:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	685b      	ldr	r3, [r3, #4]
 8005728:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800572c:	d112      	bne.n	8005754 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	9300      	str	r3, [sp, #0]
 8005732:	68bb      	ldr	r3, [r7, #8]
 8005734:	2200      	movs	r2, #0
 8005736:	2180      	movs	r1, #128	@ 0x80
 8005738:	68f8      	ldr	r0, [r7, #12]
 800573a:	f7ff ff47 	bl	80055cc <SPI_WaitFlagStateUntilTimeout>
 800573e:	4603      	mov	r3, r0
 8005740:	2b00      	cmp	r3, #0
 8005742:	d016      	beq.n	8005772 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005748:	f043 0220 	orr.w	r2, r3, #32
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005750:	2303      	movs	r3, #3
 8005752:	e00f      	b.n	8005774 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005754:	697b      	ldr	r3, [r7, #20]
 8005756:	2b00      	cmp	r3, #0
 8005758:	d00a      	beq.n	8005770 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800575a:	697b      	ldr	r3, [r7, #20]
 800575c:	3b01      	subs	r3, #1
 800575e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	689b      	ldr	r3, [r3, #8]
 8005766:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800576a:	2b80      	cmp	r3, #128	@ 0x80
 800576c:	d0f2      	beq.n	8005754 <SPI_EndRxTxTransaction+0x78>
 800576e:	e000      	b.n	8005772 <SPI_EndRxTxTransaction+0x96>
        break;
 8005770:	bf00      	nop
  }

  return HAL_OK;
 8005772:	2300      	movs	r3, #0
}
 8005774:	4618      	mov	r0, r3
 8005776:	3718      	adds	r7, #24
 8005778:	46bd      	mov	sp, r7
 800577a:	bd80      	pop	{r7, pc}
 800577c:	2000001c 	.word	0x2000001c
 8005780:	165e9f81 	.word	0x165e9f81

08005784 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005784:	b580      	push	{r7, lr}
 8005786:	b082      	sub	sp, #8
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d101      	bne.n	8005796 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005792:	2301      	movs	r3, #1
 8005794:	e041      	b.n	800581a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800579c:	b2db      	uxtb	r3, r3
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d106      	bne.n	80057b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2200      	movs	r2, #0
 80057a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80057aa:	6878      	ldr	r0, [r7, #4]
 80057ac:	f7fd f88e 	bl	80028cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2202      	movs	r2, #2
 80057b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681a      	ldr	r2, [r3, #0]
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	3304      	adds	r3, #4
 80057c0:	4619      	mov	r1, r3
 80057c2:	4610      	mov	r0, r2
 80057c4:	f000 fd00 	bl	80061c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2201      	movs	r2, #1
 80057cc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2201      	movs	r2, #1
 80057d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2201      	movs	r2, #1
 80057dc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2201      	movs	r2, #1
 80057e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2201      	movs	r2, #1
 80057ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2201      	movs	r2, #1
 80057f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2201      	movs	r2, #1
 80057fc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2201      	movs	r2, #1
 8005804:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2201      	movs	r2, #1
 800580c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2201      	movs	r2, #1
 8005814:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005818:	2300      	movs	r3, #0
}
 800581a:	4618      	mov	r0, r3
 800581c:	3708      	adds	r7, #8
 800581e:	46bd      	mov	sp, r7
 8005820:	bd80      	pop	{r7, pc}
	...

08005824 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005824:	b480      	push	{r7}
 8005826:	b085      	sub	sp, #20
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005832:	b2db      	uxtb	r3, r3
 8005834:	2b01      	cmp	r3, #1
 8005836:	d001      	beq.n	800583c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005838:	2301      	movs	r3, #1
 800583a:	e04e      	b.n	80058da <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2202      	movs	r2, #2
 8005840:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	68da      	ldr	r2, [r3, #12]
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f042 0201 	orr.w	r2, r2, #1
 8005852:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	4a23      	ldr	r2, [pc, #140]	@ (80058e8 <HAL_TIM_Base_Start_IT+0xc4>)
 800585a:	4293      	cmp	r3, r2
 800585c:	d022      	beq.n	80058a4 <HAL_TIM_Base_Start_IT+0x80>
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005866:	d01d      	beq.n	80058a4 <HAL_TIM_Base_Start_IT+0x80>
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	4a1f      	ldr	r2, [pc, #124]	@ (80058ec <HAL_TIM_Base_Start_IT+0xc8>)
 800586e:	4293      	cmp	r3, r2
 8005870:	d018      	beq.n	80058a4 <HAL_TIM_Base_Start_IT+0x80>
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	4a1e      	ldr	r2, [pc, #120]	@ (80058f0 <HAL_TIM_Base_Start_IT+0xcc>)
 8005878:	4293      	cmp	r3, r2
 800587a:	d013      	beq.n	80058a4 <HAL_TIM_Base_Start_IT+0x80>
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	4a1c      	ldr	r2, [pc, #112]	@ (80058f4 <HAL_TIM_Base_Start_IT+0xd0>)
 8005882:	4293      	cmp	r3, r2
 8005884:	d00e      	beq.n	80058a4 <HAL_TIM_Base_Start_IT+0x80>
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	4a1b      	ldr	r2, [pc, #108]	@ (80058f8 <HAL_TIM_Base_Start_IT+0xd4>)
 800588c:	4293      	cmp	r3, r2
 800588e:	d009      	beq.n	80058a4 <HAL_TIM_Base_Start_IT+0x80>
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	4a19      	ldr	r2, [pc, #100]	@ (80058fc <HAL_TIM_Base_Start_IT+0xd8>)
 8005896:	4293      	cmp	r3, r2
 8005898:	d004      	beq.n	80058a4 <HAL_TIM_Base_Start_IT+0x80>
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	4a18      	ldr	r2, [pc, #96]	@ (8005900 <HAL_TIM_Base_Start_IT+0xdc>)
 80058a0:	4293      	cmp	r3, r2
 80058a2:	d111      	bne.n	80058c8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	689b      	ldr	r3, [r3, #8]
 80058aa:	f003 0307 	and.w	r3, r3, #7
 80058ae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	2b06      	cmp	r3, #6
 80058b4:	d010      	beq.n	80058d8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	681a      	ldr	r2, [r3, #0]
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f042 0201 	orr.w	r2, r2, #1
 80058c4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058c6:	e007      	b.n	80058d8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	681a      	ldr	r2, [r3, #0]
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f042 0201 	orr.w	r2, r2, #1
 80058d6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80058d8:	2300      	movs	r3, #0
}
 80058da:	4618      	mov	r0, r3
 80058dc:	3714      	adds	r7, #20
 80058de:	46bd      	mov	sp, r7
 80058e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e4:	4770      	bx	lr
 80058e6:	bf00      	nop
 80058e8:	40010000 	.word	0x40010000
 80058ec:	40000400 	.word	0x40000400
 80058f0:	40000800 	.word	0x40000800
 80058f4:	40000c00 	.word	0x40000c00
 80058f8:	40010400 	.word	0x40010400
 80058fc:	40014000 	.word	0x40014000
 8005900:	40001800 	.word	0x40001800

08005904 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8005904:	b480      	push	{r7}
 8005906:	b083      	sub	sp, #12
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	68da      	ldr	r2, [r3, #12]
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f022 0201 	bic.w	r2, r2, #1
 800591a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	6a1a      	ldr	r2, [r3, #32]
 8005922:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005926:	4013      	ands	r3, r2
 8005928:	2b00      	cmp	r3, #0
 800592a:	d10f      	bne.n	800594c <HAL_TIM_Base_Stop_IT+0x48>
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	6a1a      	ldr	r2, [r3, #32]
 8005932:	f240 4344 	movw	r3, #1092	@ 0x444
 8005936:	4013      	ands	r3, r2
 8005938:	2b00      	cmp	r3, #0
 800593a:	d107      	bne.n	800594c <HAL_TIM_Base_Stop_IT+0x48>
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	681a      	ldr	r2, [r3, #0]
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f022 0201 	bic.w	r2, r2, #1
 800594a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2201      	movs	r2, #1
 8005950:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8005954:	2300      	movs	r3, #0
}
 8005956:	4618      	mov	r0, r3
 8005958:	370c      	adds	r7, #12
 800595a:	46bd      	mov	sp, r7
 800595c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005960:	4770      	bx	lr

08005962 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005962:	b580      	push	{r7, lr}
 8005964:	b082      	sub	sp, #8
 8005966:	af00      	add	r7, sp, #0
 8005968:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d101      	bne.n	8005974 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005970:	2301      	movs	r3, #1
 8005972:	e041      	b.n	80059f8 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800597a:	b2db      	uxtb	r3, r3
 800597c:	2b00      	cmp	r3, #0
 800597e:	d106      	bne.n	800598e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2200      	movs	r2, #0
 8005984:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005988:	6878      	ldr	r0, [r7, #4]
 800598a:	f000 f839 	bl	8005a00 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	2202      	movs	r2, #2
 8005992:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681a      	ldr	r2, [r3, #0]
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	3304      	adds	r3, #4
 800599e:	4619      	mov	r1, r3
 80059a0:	4610      	mov	r0, r2
 80059a2:	f000 fc11 	bl	80061c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2201      	movs	r2, #1
 80059aa:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	2201      	movs	r2, #1
 80059b2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2201      	movs	r2, #1
 80059ba:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	2201      	movs	r2, #1
 80059c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2201      	movs	r2, #1
 80059ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	2201      	movs	r2, #1
 80059d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	2201      	movs	r2, #1
 80059da:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2201      	movs	r2, #1
 80059e2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	2201      	movs	r2, #1
 80059ea:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2201      	movs	r2, #1
 80059f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80059f6:	2300      	movs	r3, #0
}
 80059f8:	4618      	mov	r0, r3
 80059fa:	3708      	adds	r7, #8
 80059fc:	46bd      	mov	sp, r7
 80059fe:	bd80      	pop	{r7, pc}

08005a00 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005a00:	b480      	push	{r7}
 8005a02:	b083      	sub	sp, #12
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005a08:	bf00      	nop
 8005a0a:	370c      	adds	r7, #12
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a12:	4770      	bx	lr

08005a14 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005a14:	b580      	push	{r7, lr}
 8005a16:	b084      	sub	sp, #16
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
 8005a1c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d109      	bne.n	8005a38 <HAL_TIM_PWM_Start+0x24>
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005a2a:	b2db      	uxtb	r3, r3
 8005a2c:	2b01      	cmp	r3, #1
 8005a2e:	bf14      	ite	ne
 8005a30:	2301      	movne	r3, #1
 8005a32:	2300      	moveq	r3, #0
 8005a34:	b2db      	uxtb	r3, r3
 8005a36:	e022      	b.n	8005a7e <HAL_TIM_PWM_Start+0x6a>
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	2b04      	cmp	r3, #4
 8005a3c:	d109      	bne.n	8005a52 <HAL_TIM_PWM_Start+0x3e>
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005a44:	b2db      	uxtb	r3, r3
 8005a46:	2b01      	cmp	r3, #1
 8005a48:	bf14      	ite	ne
 8005a4a:	2301      	movne	r3, #1
 8005a4c:	2300      	moveq	r3, #0
 8005a4e:	b2db      	uxtb	r3, r3
 8005a50:	e015      	b.n	8005a7e <HAL_TIM_PWM_Start+0x6a>
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	2b08      	cmp	r3, #8
 8005a56:	d109      	bne.n	8005a6c <HAL_TIM_PWM_Start+0x58>
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005a5e:	b2db      	uxtb	r3, r3
 8005a60:	2b01      	cmp	r3, #1
 8005a62:	bf14      	ite	ne
 8005a64:	2301      	movne	r3, #1
 8005a66:	2300      	moveq	r3, #0
 8005a68:	b2db      	uxtb	r3, r3
 8005a6a:	e008      	b.n	8005a7e <HAL_TIM_PWM_Start+0x6a>
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005a72:	b2db      	uxtb	r3, r3
 8005a74:	2b01      	cmp	r3, #1
 8005a76:	bf14      	ite	ne
 8005a78:	2301      	movne	r3, #1
 8005a7a:	2300      	moveq	r3, #0
 8005a7c:	b2db      	uxtb	r3, r3
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d001      	beq.n	8005a86 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005a82:	2301      	movs	r3, #1
 8005a84:	e07c      	b.n	8005b80 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d104      	bne.n	8005a96 <HAL_TIM_PWM_Start+0x82>
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2202      	movs	r2, #2
 8005a90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005a94:	e013      	b.n	8005abe <HAL_TIM_PWM_Start+0xaa>
 8005a96:	683b      	ldr	r3, [r7, #0]
 8005a98:	2b04      	cmp	r3, #4
 8005a9a:	d104      	bne.n	8005aa6 <HAL_TIM_PWM_Start+0x92>
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2202      	movs	r2, #2
 8005aa0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005aa4:	e00b      	b.n	8005abe <HAL_TIM_PWM_Start+0xaa>
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	2b08      	cmp	r3, #8
 8005aaa:	d104      	bne.n	8005ab6 <HAL_TIM_PWM_Start+0xa2>
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2202      	movs	r2, #2
 8005ab0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005ab4:	e003      	b.n	8005abe <HAL_TIM_PWM_Start+0xaa>
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2202      	movs	r2, #2
 8005aba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	2201      	movs	r2, #1
 8005ac4:	6839      	ldr	r1, [r7, #0]
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	f000 fe74 	bl	80067b4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	4a2d      	ldr	r2, [pc, #180]	@ (8005b88 <HAL_TIM_PWM_Start+0x174>)
 8005ad2:	4293      	cmp	r3, r2
 8005ad4:	d004      	beq.n	8005ae0 <HAL_TIM_PWM_Start+0xcc>
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	4a2c      	ldr	r2, [pc, #176]	@ (8005b8c <HAL_TIM_PWM_Start+0x178>)
 8005adc:	4293      	cmp	r3, r2
 8005ade:	d101      	bne.n	8005ae4 <HAL_TIM_PWM_Start+0xd0>
 8005ae0:	2301      	movs	r3, #1
 8005ae2:	e000      	b.n	8005ae6 <HAL_TIM_PWM_Start+0xd2>
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d007      	beq.n	8005afa <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005af8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	4a22      	ldr	r2, [pc, #136]	@ (8005b88 <HAL_TIM_PWM_Start+0x174>)
 8005b00:	4293      	cmp	r3, r2
 8005b02:	d022      	beq.n	8005b4a <HAL_TIM_PWM_Start+0x136>
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b0c:	d01d      	beq.n	8005b4a <HAL_TIM_PWM_Start+0x136>
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	4a1f      	ldr	r2, [pc, #124]	@ (8005b90 <HAL_TIM_PWM_Start+0x17c>)
 8005b14:	4293      	cmp	r3, r2
 8005b16:	d018      	beq.n	8005b4a <HAL_TIM_PWM_Start+0x136>
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	4a1d      	ldr	r2, [pc, #116]	@ (8005b94 <HAL_TIM_PWM_Start+0x180>)
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	d013      	beq.n	8005b4a <HAL_TIM_PWM_Start+0x136>
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	4a1c      	ldr	r2, [pc, #112]	@ (8005b98 <HAL_TIM_PWM_Start+0x184>)
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	d00e      	beq.n	8005b4a <HAL_TIM_PWM_Start+0x136>
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	4a16      	ldr	r2, [pc, #88]	@ (8005b8c <HAL_TIM_PWM_Start+0x178>)
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d009      	beq.n	8005b4a <HAL_TIM_PWM_Start+0x136>
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	4a18      	ldr	r2, [pc, #96]	@ (8005b9c <HAL_TIM_PWM_Start+0x188>)
 8005b3c:	4293      	cmp	r3, r2
 8005b3e:	d004      	beq.n	8005b4a <HAL_TIM_PWM_Start+0x136>
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	4a16      	ldr	r2, [pc, #88]	@ (8005ba0 <HAL_TIM_PWM_Start+0x18c>)
 8005b46:	4293      	cmp	r3, r2
 8005b48:	d111      	bne.n	8005b6e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	689b      	ldr	r3, [r3, #8]
 8005b50:	f003 0307 	and.w	r3, r3, #7
 8005b54:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	2b06      	cmp	r3, #6
 8005b5a:	d010      	beq.n	8005b7e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	681a      	ldr	r2, [r3, #0]
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f042 0201 	orr.w	r2, r2, #1
 8005b6a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b6c:	e007      	b.n	8005b7e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	681a      	ldr	r2, [r3, #0]
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f042 0201 	orr.w	r2, r2, #1
 8005b7c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005b7e:	2300      	movs	r3, #0
}
 8005b80:	4618      	mov	r0, r3
 8005b82:	3710      	adds	r7, #16
 8005b84:	46bd      	mov	sp, r7
 8005b86:	bd80      	pop	{r7, pc}
 8005b88:	40010000 	.word	0x40010000
 8005b8c:	40010400 	.word	0x40010400
 8005b90:	40000400 	.word	0x40000400
 8005b94:	40000800 	.word	0x40000800
 8005b98:	40000c00 	.word	0x40000c00
 8005b9c:	40014000 	.word	0x40014000
 8005ba0:	40001800 	.word	0x40001800

08005ba4 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	b082      	sub	sp, #8
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
 8005bac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	6839      	ldr	r1, [r7, #0]
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	f000 fdfc 	bl	80067b4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	4a2e      	ldr	r2, [pc, #184]	@ (8005c7c <HAL_TIM_PWM_Stop+0xd8>)
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	d004      	beq.n	8005bd0 <HAL_TIM_PWM_Stop+0x2c>
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	4a2d      	ldr	r2, [pc, #180]	@ (8005c80 <HAL_TIM_PWM_Stop+0xdc>)
 8005bcc:	4293      	cmp	r3, r2
 8005bce:	d101      	bne.n	8005bd4 <HAL_TIM_PWM_Stop+0x30>
 8005bd0:	2301      	movs	r3, #1
 8005bd2:	e000      	b.n	8005bd6 <HAL_TIM_PWM_Stop+0x32>
 8005bd4:	2300      	movs	r3, #0
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d017      	beq.n	8005c0a <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	6a1a      	ldr	r2, [r3, #32]
 8005be0:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005be4:	4013      	ands	r3, r2
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d10f      	bne.n	8005c0a <HAL_TIM_PWM_Stop+0x66>
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	6a1a      	ldr	r2, [r3, #32]
 8005bf0:	f240 4344 	movw	r3, #1092	@ 0x444
 8005bf4:	4013      	ands	r3, r2
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d107      	bne.n	8005c0a <HAL_TIM_PWM_Stop+0x66>
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005c08:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	6a1a      	ldr	r2, [r3, #32]
 8005c10:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005c14:	4013      	ands	r3, r2
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d10f      	bne.n	8005c3a <HAL_TIM_PWM_Stop+0x96>
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	6a1a      	ldr	r2, [r3, #32]
 8005c20:	f240 4344 	movw	r3, #1092	@ 0x444
 8005c24:	4013      	ands	r3, r2
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d107      	bne.n	8005c3a <HAL_TIM_PWM_Stop+0x96>
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	681a      	ldr	r2, [r3, #0]
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f022 0201 	bic.w	r2, r2, #1
 8005c38:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005c3a:	683b      	ldr	r3, [r7, #0]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d104      	bne.n	8005c4a <HAL_TIM_PWM_Stop+0xa6>
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2201      	movs	r2, #1
 8005c44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005c48:	e013      	b.n	8005c72 <HAL_TIM_PWM_Stop+0xce>
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	2b04      	cmp	r3, #4
 8005c4e:	d104      	bne.n	8005c5a <HAL_TIM_PWM_Stop+0xb6>
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2201      	movs	r2, #1
 8005c54:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005c58:	e00b      	b.n	8005c72 <HAL_TIM_PWM_Stop+0xce>
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	2b08      	cmp	r3, #8
 8005c5e:	d104      	bne.n	8005c6a <HAL_TIM_PWM_Stop+0xc6>
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2201      	movs	r2, #1
 8005c64:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005c68:	e003      	b.n	8005c72 <HAL_TIM_PWM_Stop+0xce>
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	2201      	movs	r2, #1
 8005c6e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 8005c72:	2300      	movs	r3, #0
}
 8005c74:	4618      	mov	r0, r3
 8005c76:	3708      	adds	r7, #8
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	bd80      	pop	{r7, pc}
 8005c7c:	40010000 	.word	0x40010000
 8005c80:	40010400 	.word	0x40010400

08005c84 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005c84:	b580      	push	{r7, lr}
 8005c86:	b084      	sub	sp, #16
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	68db      	ldr	r3, [r3, #12]
 8005c92:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	691b      	ldr	r3, [r3, #16]
 8005c9a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005c9c:	68bb      	ldr	r3, [r7, #8]
 8005c9e:	f003 0302 	and.w	r3, r3, #2
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d020      	beq.n	8005ce8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	f003 0302 	and.w	r3, r3, #2
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d01b      	beq.n	8005ce8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f06f 0202 	mvn.w	r2, #2
 8005cb8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	2201      	movs	r2, #1
 8005cbe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	699b      	ldr	r3, [r3, #24]
 8005cc6:	f003 0303 	and.w	r3, r3, #3
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d003      	beq.n	8005cd6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005cce:	6878      	ldr	r0, [r7, #4]
 8005cd0:	f000 fa5b 	bl	800618a <HAL_TIM_IC_CaptureCallback>
 8005cd4:	e005      	b.n	8005ce2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005cd6:	6878      	ldr	r0, [r7, #4]
 8005cd8:	f000 fa4d 	bl	8006176 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005cdc:	6878      	ldr	r0, [r7, #4]
 8005cde:	f000 fa5e 	bl	800619e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005ce8:	68bb      	ldr	r3, [r7, #8]
 8005cea:	f003 0304 	and.w	r3, r3, #4
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d020      	beq.n	8005d34 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	f003 0304 	and.w	r3, r3, #4
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d01b      	beq.n	8005d34 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f06f 0204 	mvn.w	r2, #4
 8005d04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	2202      	movs	r2, #2
 8005d0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	699b      	ldr	r3, [r3, #24]
 8005d12:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d003      	beq.n	8005d22 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d1a:	6878      	ldr	r0, [r7, #4]
 8005d1c:	f000 fa35 	bl	800618a <HAL_TIM_IC_CaptureCallback>
 8005d20:	e005      	b.n	8005d2e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d22:	6878      	ldr	r0, [r7, #4]
 8005d24:	f000 fa27 	bl	8006176 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d28:	6878      	ldr	r0, [r7, #4]
 8005d2a:	f000 fa38 	bl	800619e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	2200      	movs	r2, #0
 8005d32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005d34:	68bb      	ldr	r3, [r7, #8]
 8005d36:	f003 0308 	and.w	r3, r3, #8
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d020      	beq.n	8005d80 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	f003 0308 	and.w	r3, r3, #8
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d01b      	beq.n	8005d80 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	f06f 0208 	mvn.w	r2, #8
 8005d50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	2204      	movs	r2, #4
 8005d56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	69db      	ldr	r3, [r3, #28]
 8005d5e:	f003 0303 	and.w	r3, r3, #3
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d003      	beq.n	8005d6e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d66:	6878      	ldr	r0, [r7, #4]
 8005d68:	f000 fa0f 	bl	800618a <HAL_TIM_IC_CaptureCallback>
 8005d6c:	e005      	b.n	8005d7a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d6e:	6878      	ldr	r0, [r7, #4]
 8005d70:	f000 fa01 	bl	8006176 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d74:	6878      	ldr	r0, [r7, #4]
 8005d76:	f000 fa12 	bl	800619e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005d80:	68bb      	ldr	r3, [r7, #8]
 8005d82:	f003 0310 	and.w	r3, r3, #16
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d020      	beq.n	8005dcc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	f003 0310 	and.w	r3, r3, #16
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d01b      	beq.n	8005dcc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f06f 0210 	mvn.w	r2, #16
 8005d9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	2208      	movs	r2, #8
 8005da2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	69db      	ldr	r3, [r3, #28]
 8005daa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d003      	beq.n	8005dba <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005db2:	6878      	ldr	r0, [r7, #4]
 8005db4:	f000 f9e9 	bl	800618a <HAL_TIM_IC_CaptureCallback>
 8005db8:	e005      	b.n	8005dc6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005dba:	6878      	ldr	r0, [r7, #4]
 8005dbc:	f000 f9db 	bl	8006176 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005dc0:	6878      	ldr	r0, [r7, #4]
 8005dc2:	f000 f9ec 	bl	800619e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	2200      	movs	r2, #0
 8005dca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005dcc:	68bb      	ldr	r3, [r7, #8]
 8005dce:	f003 0301 	and.w	r3, r3, #1
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d00c      	beq.n	8005df0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	f003 0301 	and.w	r3, r3, #1
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d007      	beq.n	8005df0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f06f 0201 	mvn.w	r2, #1
 8005de8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005dea:	6878      	ldr	r0, [r7, #4]
 8005dec:	f7fb ffcc 	bl	8001d88 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005df0:	68bb      	ldr	r3, [r7, #8]
 8005df2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d00c      	beq.n	8005e14 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d007      	beq.n	8005e14 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005e0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005e0e:	6878      	ldr	r0, [r7, #4]
 8005e10:	f000 fd7c 	bl	800690c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005e14:	68bb      	ldr	r3, [r7, #8]
 8005e16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d00c      	beq.n	8005e38 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d007      	beq.n	8005e38 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005e30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005e32:	6878      	ldr	r0, [r7, #4]
 8005e34:	f000 f9bd 	bl	80061b2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005e38:	68bb      	ldr	r3, [r7, #8]
 8005e3a:	f003 0320 	and.w	r3, r3, #32
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d00c      	beq.n	8005e5c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	f003 0320 	and.w	r3, r3, #32
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d007      	beq.n	8005e5c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f06f 0220 	mvn.w	r2, #32
 8005e54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005e56:	6878      	ldr	r0, [r7, #4]
 8005e58:	f000 fd4e 	bl	80068f8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005e5c:	bf00      	nop
 8005e5e:	3710      	adds	r7, #16
 8005e60:	46bd      	mov	sp, r7
 8005e62:	bd80      	pop	{r7, pc}

08005e64 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005e64:	b580      	push	{r7, lr}
 8005e66:	b086      	sub	sp, #24
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	60f8      	str	r0, [r7, #12]
 8005e6c:	60b9      	str	r1, [r7, #8]
 8005e6e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005e70:	2300      	movs	r3, #0
 8005e72:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005e7a:	2b01      	cmp	r3, #1
 8005e7c:	d101      	bne.n	8005e82 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005e7e:	2302      	movs	r3, #2
 8005e80:	e0ae      	b.n	8005fe0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	2201      	movs	r2, #1
 8005e86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	2b0c      	cmp	r3, #12
 8005e8e:	f200 809f 	bhi.w	8005fd0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005e92:	a201      	add	r2, pc, #4	@ (adr r2, 8005e98 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005e94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e98:	08005ecd 	.word	0x08005ecd
 8005e9c:	08005fd1 	.word	0x08005fd1
 8005ea0:	08005fd1 	.word	0x08005fd1
 8005ea4:	08005fd1 	.word	0x08005fd1
 8005ea8:	08005f0d 	.word	0x08005f0d
 8005eac:	08005fd1 	.word	0x08005fd1
 8005eb0:	08005fd1 	.word	0x08005fd1
 8005eb4:	08005fd1 	.word	0x08005fd1
 8005eb8:	08005f4f 	.word	0x08005f4f
 8005ebc:	08005fd1 	.word	0x08005fd1
 8005ec0:	08005fd1 	.word	0x08005fd1
 8005ec4:	08005fd1 	.word	0x08005fd1
 8005ec8:	08005f8f 	.word	0x08005f8f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	68b9      	ldr	r1, [r7, #8]
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	f000 fa24 	bl	8006320 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	699a      	ldr	r2, [r3, #24]
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f042 0208 	orr.w	r2, r2, #8
 8005ee6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	699a      	ldr	r2, [r3, #24]
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f022 0204 	bic.w	r2, r2, #4
 8005ef6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	6999      	ldr	r1, [r3, #24]
 8005efe:	68bb      	ldr	r3, [r7, #8]
 8005f00:	691a      	ldr	r2, [r3, #16]
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	430a      	orrs	r2, r1
 8005f08:	619a      	str	r2, [r3, #24]
      break;
 8005f0a:	e064      	b.n	8005fd6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	68b9      	ldr	r1, [r7, #8]
 8005f12:	4618      	mov	r0, r3
 8005f14:	f000 fa74 	bl	8006400 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	699a      	ldr	r2, [r3, #24]
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005f26:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	699a      	ldr	r2, [r3, #24]
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005f36:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	6999      	ldr	r1, [r3, #24]
 8005f3e:	68bb      	ldr	r3, [r7, #8]
 8005f40:	691b      	ldr	r3, [r3, #16]
 8005f42:	021a      	lsls	r2, r3, #8
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	430a      	orrs	r2, r1
 8005f4a:	619a      	str	r2, [r3, #24]
      break;
 8005f4c:	e043      	b.n	8005fd6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	68b9      	ldr	r1, [r7, #8]
 8005f54:	4618      	mov	r0, r3
 8005f56:	f000 fac9 	bl	80064ec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	69da      	ldr	r2, [r3, #28]
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f042 0208 	orr.w	r2, r2, #8
 8005f68:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	69da      	ldr	r2, [r3, #28]
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f022 0204 	bic.w	r2, r2, #4
 8005f78:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	69d9      	ldr	r1, [r3, #28]
 8005f80:	68bb      	ldr	r3, [r7, #8]
 8005f82:	691a      	ldr	r2, [r3, #16]
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	430a      	orrs	r2, r1
 8005f8a:	61da      	str	r2, [r3, #28]
      break;
 8005f8c:	e023      	b.n	8005fd6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	68b9      	ldr	r1, [r7, #8]
 8005f94:	4618      	mov	r0, r3
 8005f96:	f000 fb1d 	bl	80065d4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	69da      	ldr	r2, [r3, #28]
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005fa8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	69da      	ldr	r2, [r3, #28]
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005fb8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	69d9      	ldr	r1, [r3, #28]
 8005fc0:	68bb      	ldr	r3, [r7, #8]
 8005fc2:	691b      	ldr	r3, [r3, #16]
 8005fc4:	021a      	lsls	r2, r3, #8
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	430a      	orrs	r2, r1
 8005fcc:	61da      	str	r2, [r3, #28]
      break;
 8005fce:	e002      	b.n	8005fd6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005fd0:	2301      	movs	r3, #1
 8005fd2:	75fb      	strb	r3, [r7, #23]
      break;
 8005fd4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	2200      	movs	r2, #0
 8005fda:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005fde:	7dfb      	ldrb	r3, [r7, #23]
}
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	3718      	adds	r7, #24
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	bd80      	pop	{r7, pc}

08005fe8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b084      	sub	sp, #16
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
 8005ff0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005ffc:	2b01      	cmp	r3, #1
 8005ffe:	d101      	bne.n	8006004 <HAL_TIM_ConfigClockSource+0x1c>
 8006000:	2302      	movs	r3, #2
 8006002:	e0b4      	b.n	800616e <HAL_TIM_ConfigClockSource+0x186>
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2201      	movs	r2, #1
 8006008:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2202      	movs	r2, #2
 8006010:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	689b      	ldr	r3, [r3, #8]
 800601a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800601c:	68bb      	ldr	r3, [r7, #8]
 800601e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006022:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006024:	68bb      	ldr	r3, [r7, #8]
 8006026:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800602a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	68ba      	ldr	r2, [r7, #8]
 8006032:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006034:	683b      	ldr	r3, [r7, #0]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800603c:	d03e      	beq.n	80060bc <HAL_TIM_ConfigClockSource+0xd4>
 800603e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006042:	f200 8087 	bhi.w	8006154 <HAL_TIM_ConfigClockSource+0x16c>
 8006046:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800604a:	f000 8086 	beq.w	800615a <HAL_TIM_ConfigClockSource+0x172>
 800604e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006052:	d87f      	bhi.n	8006154 <HAL_TIM_ConfigClockSource+0x16c>
 8006054:	2b70      	cmp	r3, #112	@ 0x70
 8006056:	d01a      	beq.n	800608e <HAL_TIM_ConfigClockSource+0xa6>
 8006058:	2b70      	cmp	r3, #112	@ 0x70
 800605a:	d87b      	bhi.n	8006154 <HAL_TIM_ConfigClockSource+0x16c>
 800605c:	2b60      	cmp	r3, #96	@ 0x60
 800605e:	d050      	beq.n	8006102 <HAL_TIM_ConfigClockSource+0x11a>
 8006060:	2b60      	cmp	r3, #96	@ 0x60
 8006062:	d877      	bhi.n	8006154 <HAL_TIM_ConfigClockSource+0x16c>
 8006064:	2b50      	cmp	r3, #80	@ 0x50
 8006066:	d03c      	beq.n	80060e2 <HAL_TIM_ConfigClockSource+0xfa>
 8006068:	2b50      	cmp	r3, #80	@ 0x50
 800606a:	d873      	bhi.n	8006154 <HAL_TIM_ConfigClockSource+0x16c>
 800606c:	2b40      	cmp	r3, #64	@ 0x40
 800606e:	d058      	beq.n	8006122 <HAL_TIM_ConfigClockSource+0x13a>
 8006070:	2b40      	cmp	r3, #64	@ 0x40
 8006072:	d86f      	bhi.n	8006154 <HAL_TIM_ConfigClockSource+0x16c>
 8006074:	2b30      	cmp	r3, #48	@ 0x30
 8006076:	d064      	beq.n	8006142 <HAL_TIM_ConfigClockSource+0x15a>
 8006078:	2b30      	cmp	r3, #48	@ 0x30
 800607a:	d86b      	bhi.n	8006154 <HAL_TIM_ConfigClockSource+0x16c>
 800607c:	2b20      	cmp	r3, #32
 800607e:	d060      	beq.n	8006142 <HAL_TIM_ConfigClockSource+0x15a>
 8006080:	2b20      	cmp	r3, #32
 8006082:	d867      	bhi.n	8006154 <HAL_TIM_ConfigClockSource+0x16c>
 8006084:	2b00      	cmp	r3, #0
 8006086:	d05c      	beq.n	8006142 <HAL_TIM_ConfigClockSource+0x15a>
 8006088:	2b10      	cmp	r3, #16
 800608a:	d05a      	beq.n	8006142 <HAL_TIM_ConfigClockSource+0x15a>
 800608c:	e062      	b.n	8006154 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006092:	683b      	ldr	r3, [r7, #0]
 8006094:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006096:	683b      	ldr	r3, [r7, #0]
 8006098:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800609a:	683b      	ldr	r3, [r7, #0]
 800609c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800609e:	f000 fb69 	bl	8006774 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	689b      	ldr	r3, [r3, #8]
 80060a8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80060aa:	68bb      	ldr	r3, [r7, #8]
 80060ac:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80060b0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	68ba      	ldr	r2, [r7, #8]
 80060b8:	609a      	str	r2, [r3, #8]
      break;
 80060ba:	e04f      	b.n	800615c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80060c0:	683b      	ldr	r3, [r7, #0]
 80060c2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80060c4:	683b      	ldr	r3, [r7, #0]
 80060c6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80060cc:	f000 fb52 	bl	8006774 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	689a      	ldr	r2, [r3, #8]
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80060de:	609a      	str	r2, [r3, #8]
      break;
 80060e0:	e03c      	b.n	800615c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80060e6:	683b      	ldr	r3, [r7, #0]
 80060e8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80060ea:	683b      	ldr	r3, [r7, #0]
 80060ec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80060ee:	461a      	mov	r2, r3
 80060f0:	f000 fac6 	bl	8006680 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	2150      	movs	r1, #80	@ 0x50
 80060fa:	4618      	mov	r0, r3
 80060fc:	f000 fb1f 	bl	800673e <TIM_ITRx_SetConfig>
      break;
 8006100:	e02c      	b.n	800615c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006106:	683b      	ldr	r3, [r7, #0]
 8006108:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800610a:	683b      	ldr	r3, [r7, #0]
 800610c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800610e:	461a      	mov	r2, r3
 8006110:	f000 fae5 	bl	80066de <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	2160      	movs	r1, #96	@ 0x60
 800611a:	4618      	mov	r0, r3
 800611c:	f000 fb0f 	bl	800673e <TIM_ITRx_SetConfig>
      break;
 8006120:	e01c      	b.n	800615c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006126:	683b      	ldr	r3, [r7, #0]
 8006128:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800612a:	683b      	ldr	r3, [r7, #0]
 800612c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800612e:	461a      	mov	r2, r3
 8006130:	f000 faa6 	bl	8006680 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	2140      	movs	r1, #64	@ 0x40
 800613a:	4618      	mov	r0, r3
 800613c:	f000 faff 	bl	800673e <TIM_ITRx_SetConfig>
      break;
 8006140:	e00c      	b.n	800615c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681a      	ldr	r2, [r3, #0]
 8006146:	683b      	ldr	r3, [r7, #0]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	4619      	mov	r1, r3
 800614c:	4610      	mov	r0, r2
 800614e:	f000 faf6 	bl	800673e <TIM_ITRx_SetConfig>
      break;
 8006152:	e003      	b.n	800615c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006154:	2301      	movs	r3, #1
 8006156:	73fb      	strb	r3, [r7, #15]
      break;
 8006158:	e000      	b.n	800615c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800615a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2201      	movs	r2, #1
 8006160:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2200      	movs	r2, #0
 8006168:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800616c:	7bfb      	ldrb	r3, [r7, #15]
}
 800616e:	4618      	mov	r0, r3
 8006170:	3710      	adds	r7, #16
 8006172:	46bd      	mov	sp, r7
 8006174:	bd80      	pop	{r7, pc}

08006176 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006176:	b480      	push	{r7}
 8006178:	b083      	sub	sp, #12
 800617a:	af00      	add	r7, sp, #0
 800617c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800617e:	bf00      	nop
 8006180:	370c      	adds	r7, #12
 8006182:	46bd      	mov	sp, r7
 8006184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006188:	4770      	bx	lr

0800618a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800618a:	b480      	push	{r7}
 800618c:	b083      	sub	sp, #12
 800618e:	af00      	add	r7, sp, #0
 8006190:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006192:	bf00      	nop
 8006194:	370c      	adds	r7, #12
 8006196:	46bd      	mov	sp, r7
 8006198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619c:	4770      	bx	lr

0800619e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800619e:	b480      	push	{r7}
 80061a0:	b083      	sub	sp, #12
 80061a2:	af00      	add	r7, sp, #0
 80061a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80061a6:	bf00      	nop
 80061a8:	370c      	adds	r7, #12
 80061aa:	46bd      	mov	sp, r7
 80061ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b0:	4770      	bx	lr

080061b2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80061b2:	b480      	push	{r7}
 80061b4:	b083      	sub	sp, #12
 80061b6:	af00      	add	r7, sp, #0
 80061b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80061ba:	bf00      	nop
 80061bc:	370c      	adds	r7, #12
 80061be:	46bd      	mov	sp, r7
 80061c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c4:	4770      	bx	lr
	...

080061c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80061c8:	b480      	push	{r7}
 80061ca:	b085      	sub	sp, #20
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	6078      	str	r0, [r7, #4]
 80061d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	4a46      	ldr	r2, [pc, #280]	@ (80062f4 <TIM_Base_SetConfig+0x12c>)
 80061dc:	4293      	cmp	r3, r2
 80061de:	d013      	beq.n	8006208 <TIM_Base_SetConfig+0x40>
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80061e6:	d00f      	beq.n	8006208 <TIM_Base_SetConfig+0x40>
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	4a43      	ldr	r2, [pc, #268]	@ (80062f8 <TIM_Base_SetConfig+0x130>)
 80061ec:	4293      	cmp	r3, r2
 80061ee:	d00b      	beq.n	8006208 <TIM_Base_SetConfig+0x40>
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	4a42      	ldr	r2, [pc, #264]	@ (80062fc <TIM_Base_SetConfig+0x134>)
 80061f4:	4293      	cmp	r3, r2
 80061f6:	d007      	beq.n	8006208 <TIM_Base_SetConfig+0x40>
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	4a41      	ldr	r2, [pc, #260]	@ (8006300 <TIM_Base_SetConfig+0x138>)
 80061fc:	4293      	cmp	r3, r2
 80061fe:	d003      	beq.n	8006208 <TIM_Base_SetConfig+0x40>
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	4a40      	ldr	r2, [pc, #256]	@ (8006304 <TIM_Base_SetConfig+0x13c>)
 8006204:	4293      	cmp	r3, r2
 8006206:	d108      	bne.n	800621a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800620e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006210:	683b      	ldr	r3, [r7, #0]
 8006212:	685b      	ldr	r3, [r3, #4]
 8006214:	68fa      	ldr	r2, [r7, #12]
 8006216:	4313      	orrs	r3, r2
 8006218:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	4a35      	ldr	r2, [pc, #212]	@ (80062f4 <TIM_Base_SetConfig+0x12c>)
 800621e:	4293      	cmp	r3, r2
 8006220:	d02b      	beq.n	800627a <TIM_Base_SetConfig+0xb2>
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006228:	d027      	beq.n	800627a <TIM_Base_SetConfig+0xb2>
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	4a32      	ldr	r2, [pc, #200]	@ (80062f8 <TIM_Base_SetConfig+0x130>)
 800622e:	4293      	cmp	r3, r2
 8006230:	d023      	beq.n	800627a <TIM_Base_SetConfig+0xb2>
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	4a31      	ldr	r2, [pc, #196]	@ (80062fc <TIM_Base_SetConfig+0x134>)
 8006236:	4293      	cmp	r3, r2
 8006238:	d01f      	beq.n	800627a <TIM_Base_SetConfig+0xb2>
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	4a30      	ldr	r2, [pc, #192]	@ (8006300 <TIM_Base_SetConfig+0x138>)
 800623e:	4293      	cmp	r3, r2
 8006240:	d01b      	beq.n	800627a <TIM_Base_SetConfig+0xb2>
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	4a2f      	ldr	r2, [pc, #188]	@ (8006304 <TIM_Base_SetConfig+0x13c>)
 8006246:	4293      	cmp	r3, r2
 8006248:	d017      	beq.n	800627a <TIM_Base_SetConfig+0xb2>
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	4a2e      	ldr	r2, [pc, #184]	@ (8006308 <TIM_Base_SetConfig+0x140>)
 800624e:	4293      	cmp	r3, r2
 8006250:	d013      	beq.n	800627a <TIM_Base_SetConfig+0xb2>
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	4a2d      	ldr	r2, [pc, #180]	@ (800630c <TIM_Base_SetConfig+0x144>)
 8006256:	4293      	cmp	r3, r2
 8006258:	d00f      	beq.n	800627a <TIM_Base_SetConfig+0xb2>
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	4a2c      	ldr	r2, [pc, #176]	@ (8006310 <TIM_Base_SetConfig+0x148>)
 800625e:	4293      	cmp	r3, r2
 8006260:	d00b      	beq.n	800627a <TIM_Base_SetConfig+0xb2>
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	4a2b      	ldr	r2, [pc, #172]	@ (8006314 <TIM_Base_SetConfig+0x14c>)
 8006266:	4293      	cmp	r3, r2
 8006268:	d007      	beq.n	800627a <TIM_Base_SetConfig+0xb2>
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	4a2a      	ldr	r2, [pc, #168]	@ (8006318 <TIM_Base_SetConfig+0x150>)
 800626e:	4293      	cmp	r3, r2
 8006270:	d003      	beq.n	800627a <TIM_Base_SetConfig+0xb2>
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	4a29      	ldr	r2, [pc, #164]	@ (800631c <TIM_Base_SetConfig+0x154>)
 8006276:	4293      	cmp	r3, r2
 8006278:	d108      	bne.n	800628c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006280:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006282:	683b      	ldr	r3, [r7, #0]
 8006284:	68db      	ldr	r3, [r3, #12]
 8006286:	68fa      	ldr	r2, [r7, #12]
 8006288:	4313      	orrs	r3, r2
 800628a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	695b      	ldr	r3, [r3, #20]
 8006296:	4313      	orrs	r3, r2
 8006298:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	68fa      	ldr	r2, [r7, #12]
 800629e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	689a      	ldr	r2, [r3, #8]
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80062a8:	683b      	ldr	r3, [r7, #0]
 80062aa:	681a      	ldr	r2, [r3, #0]
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	4a10      	ldr	r2, [pc, #64]	@ (80062f4 <TIM_Base_SetConfig+0x12c>)
 80062b4:	4293      	cmp	r3, r2
 80062b6:	d003      	beq.n	80062c0 <TIM_Base_SetConfig+0xf8>
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	4a12      	ldr	r2, [pc, #72]	@ (8006304 <TIM_Base_SetConfig+0x13c>)
 80062bc:	4293      	cmp	r3, r2
 80062be:	d103      	bne.n	80062c8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	691a      	ldr	r2, [r3, #16]
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2201      	movs	r2, #1
 80062cc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	691b      	ldr	r3, [r3, #16]
 80062d2:	f003 0301 	and.w	r3, r3, #1
 80062d6:	2b01      	cmp	r3, #1
 80062d8:	d105      	bne.n	80062e6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	691b      	ldr	r3, [r3, #16]
 80062de:	f023 0201 	bic.w	r2, r3, #1
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	611a      	str	r2, [r3, #16]
  }
}
 80062e6:	bf00      	nop
 80062e8:	3714      	adds	r7, #20
 80062ea:	46bd      	mov	sp, r7
 80062ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f0:	4770      	bx	lr
 80062f2:	bf00      	nop
 80062f4:	40010000 	.word	0x40010000
 80062f8:	40000400 	.word	0x40000400
 80062fc:	40000800 	.word	0x40000800
 8006300:	40000c00 	.word	0x40000c00
 8006304:	40010400 	.word	0x40010400
 8006308:	40014000 	.word	0x40014000
 800630c:	40014400 	.word	0x40014400
 8006310:	40014800 	.word	0x40014800
 8006314:	40001800 	.word	0x40001800
 8006318:	40001c00 	.word	0x40001c00
 800631c:	40002000 	.word	0x40002000

08006320 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006320:	b480      	push	{r7}
 8006322:	b087      	sub	sp, #28
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
 8006328:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	6a1b      	ldr	r3, [r3, #32]
 800632e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	6a1b      	ldr	r3, [r3, #32]
 8006334:	f023 0201 	bic.w	r2, r3, #1
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	685b      	ldr	r3, [r3, #4]
 8006340:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	699b      	ldr	r3, [r3, #24]
 8006346:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800634e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	f023 0303 	bic.w	r3, r3, #3
 8006356:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	68fa      	ldr	r2, [r7, #12]
 800635e:	4313      	orrs	r3, r2
 8006360:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006362:	697b      	ldr	r3, [r7, #20]
 8006364:	f023 0302 	bic.w	r3, r3, #2
 8006368:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800636a:	683b      	ldr	r3, [r7, #0]
 800636c:	689b      	ldr	r3, [r3, #8]
 800636e:	697a      	ldr	r2, [r7, #20]
 8006370:	4313      	orrs	r3, r2
 8006372:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	4a20      	ldr	r2, [pc, #128]	@ (80063f8 <TIM_OC1_SetConfig+0xd8>)
 8006378:	4293      	cmp	r3, r2
 800637a:	d003      	beq.n	8006384 <TIM_OC1_SetConfig+0x64>
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	4a1f      	ldr	r2, [pc, #124]	@ (80063fc <TIM_OC1_SetConfig+0xdc>)
 8006380:	4293      	cmp	r3, r2
 8006382:	d10c      	bne.n	800639e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006384:	697b      	ldr	r3, [r7, #20]
 8006386:	f023 0308 	bic.w	r3, r3, #8
 800638a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	68db      	ldr	r3, [r3, #12]
 8006390:	697a      	ldr	r2, [r7, #20]
 8006392:	4313      	orrs	r3, r2
 8006394:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006396:	697b      	ldr	r3, [r7, #20]
 8006398:	f023 0304 	bic.w	r3, r3, #4
 800639c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	4a15      	ldr	r2, [pc, #84]	@ (80063f8 <TIM_OC1_SetConfig+0xd8>)
 80063a2:	4293      	cmp	r3, r2
 80063a4:	d003      	beq.n	80063ae <TIM_OC1_SetConfig+0x8e>
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	4a14      	ldr	r2, [pc, #80]	@ (80063fc <TIM_OC1_SetConfig+0xdc>)
 80063aa:	4293      	cmp	r3, r2
 80063ac:	d111      	bne.n	80063d2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80063ae:	693b      	ldr	r3, [r7, #16]
 80063b0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80063b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80063b6:	693b      	ldr	r3, [r7, #16]
 80063b8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80063bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80063be:	683b      	ldr	r3, [r7, #0]
 80063c0:	695b      	ldr	r3, [r3, #20]
 80063c2:	693a      	ldr	r2, [r7, #16]
 80063c4:	4313      	orrs	r3, r2
 80063c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80063c8:	683b      	ldr	r3, [r7, #0]
 80063ca:	699b      	ldr	r3, [r3, #24]
 80063cc:	693a      	ldr	r2, [r7, #16]
 80063ce:	4313      	orrs	r3, r2
 80063d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	693a      	ldr	r2, [r7, #16]
 80063d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	68fa      	ldr	r2, [r7, #12]
 80063dc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80063de:	683b      	ldr	r3, [r7, #0]
 80063e0:	685a      	ldr	r2, [r3, #4]
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	697a      	ldr	r2, [r7, #20]
 80063ea:	621a      	str	r2, [r3, #32]
}
 80063ec:	bf00      	nop
 80063ee:	371c      	adds	r7, #28
 80063f0:	46bd      	mov	sp, r7
 80063f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f6:	4770      	bx	lr
 80063f8:	40010000 	.word	0x40010000
 80063fc:	40010400 	.word	0x40010400

08006400 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006400:	b480      	push	{r7}
 8006402:	b087      	sub	sp, #28
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]
 8006408:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	6a1b      	ldr	r3, [r3, #32]
 800640e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	6a1b      	ldr	r3, [r3, #32]
 8006414:	f023 0210 	bic.w	r2, r3, #16
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	685b      	ldr	r3, [r3, #4]
 8006420:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	699b      	ldr	r3, [r3, #24]
 8006426:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800642e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006436:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006438:	683b      	ldr	r3, [r7, #0]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	021b      	lsls	r3, r3, #8
 800643e:	68fa      	ldr	r2, [r7, #12]
 8006440:	4313      	orrs	r3, r2
 8006442:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006444:	697b      	ldr	r3, [r7, #20]
 8006446:	f023 0320 	bic.w	r3, r3, #32
 800644a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	689b      	ldr	r3, [r3, #8]
 8006450:	011b      	lsls	r3, r3, #4
 8006452:	697a      	ldr	r2, [r7, #20]
 8006454:	4313      	orrs	r3, r2
 8006456:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	4a22      	ldr	r2, [pc, #136]	@ (80064e4 <TIM_OC2_SetConfig+0xe4>)
 800645c:	4293      	cmp	r3, r2
 800645e:	d003      	beq.n	8006468 <TIM_OC2_SetConfig+0x68>
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	4a21      	ldr	r2, [pc, #132]	@ (80064e8 <TIM_OC2_SetConfig+0xe8>)
 8006464:	4293      	cmp	r3, r2
 8006466:	d10d      	bne.n	8006484 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006468:	697b      	ldr	r3, [r7, #20]
 800646a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800646e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006470:	683b      	ldr	r3, [r7, #0]
 8006472:	68db      	ldr	r3, [r3, #12]
 8006474:	011b      	lsls	r3, r3, #4
 8006476:	697a      	ldr	r2, [r7, #20]
 8006478:	4313      	orrs	r3, r2
 800647a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800647c:	697b      	ldr	r3, [r7, #20]
 800647e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006482:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	4a17      	ldr	r2, [pc, #92]	@ (80064e4 <TIM_OC2_SetConfig+0xe4>)
 8006488:	4293      	cmp	r3, r2
 800648a:	d003      	beq.n	8006494 <TIM_OC2_SetConfig+0x94>
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	4a16      	ldr	r2, [pc, #88]	@ (80064e8 <TIM_OC2_SetConfig+0xe8>)
 8006490:	4293      	cmp	r3, r2
 8006492:	d113      	bne.n	80064bc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006494:	693b      	ldr	r3, [r7, #16]
 8006496:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800649a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800649c:	693b      	ldr	r3, [r7, #16]
 800649e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80064a2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80064a4:	683b      	ldr	r3, [r7, #0]
 80064a6:	695b      	ldr	r3, [r3, #20]
 80064a8:	009b      	lsls	r3, r3, #2
 80064aa:	693a      	ldr	r2, [r7, #16]
 80064ac:	4313      	orrs	r3, r2
 80064ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80064b0:	683b      	ldr	r3, [r7, #0]
 80064b2:	699b      	ldr	r3, [r3, #24]
 80064b4:	009b      	lsls	r3, r3, #2
 80064b6:	693a      	ldr	r2, [r7, #16]
 80064b8:	4313      	orrs	r3, r2
 80064ba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	693a      	ldr	r2, [r7, #16]
 80064c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	68fa      	ldr	r2, [r7, #12]
 80064c6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80064c8:	683b      	ldr	r3, [r7, #0]
 80064ca:	685a      	ldr	r2, [r3, #4]
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	697a      	ldr	r2, [r7, #20]
 80064d4:	621a      	str	r2, [r3, #32]
}
 80064d6:	bf00      	nop
 80064d8:	371c      	adds	r7, #28
 80064da:	46bd      	mov	sp, r7
 80064dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e0:	4770      	bx	lr
 80064e2:	bf00      	nop
 80064e4:	40010000 	.word	0x40010000
 80064e8:	40010400 	.word	0x40010400

080064ec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80064ec:	b480      	push	{r7}
 80064ee:	b087      	sub	sp, #28
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]
 80064f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	6a1b      	ldr	r3, [r3, #32]
 80064fa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	6a1b      	ldr	r3, [r3, #32]
 8006500:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	685b      	ldr	r3, [r3, #4]
 800650c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	69db      	ldr	r3, [r3, #28]
 8006512:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800651a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	f023 0303 	bic.w	r3, r3, #3
 8006522:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006524:	683b      	ldr	r3, [r7, #0]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	68fa      	ldr	r2, [r7, #12]
 800652a:	4313      	orrs	r3, r2
 800652c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800652e:	697b      	ldr	r3, [r7, #20]
 8006530:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006534:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006536:	683b      	ldr	r3, [r7, #0]
 8006538:	689b      	ldr	r3, [r3, #8]
 800653a:	021b      	lsls	r3, r3, #8
 800653c:	697a      	ldr	r2, [r7, #20]
 800653e:	4313      	orrs	r3, r2
 8006540:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	4a21      	ldr	r2, [pc, #132]	@ (80065cc <TIM_OC3_SetConfig+0xe0>)
 8006546:	4293      	cmp	r3, r2
 8006548:	d003      	beq.n	8006552 <TIM_OC3_SetConfig+0x66>
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	4a20      	ldr	r2, [pc, #128]	@ (80065d0 <TIM_OC3_SetConfig+0xe4>)
 800654e:	4293      	cmp	r3, r2
 8006550:	d10d      	bne.n	800656e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006552:	697b      	ldr	r3, [r7, #20]
 8006554:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006558:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800655a:	683b      	ldr	r3, [r7, #0]
 800655c:	68db      	ldr	r3, [r3, #12]
 800655e:	021b      	lsls	r3, r3, #8
 8006560:	697a      	ldr	r2, [r7, #20]
 8006562:	4313      	orrs	r3, r2
 8006564:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006566:	697b      	ldr	r3, [r7, #20]
 8006568:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800656c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	4a16      	ldr	r2, [pc, #88]	@ (80065cc <TIM_OC3_SetConfig+0xe0>)
 8006572:	4293      	cmp	r3, r2
 8006574:	d003      	beq.n	800657e <TIM_OC3_SetConfig+0x92>
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	4a15      	ldr	r2, [pc, #84]	@ (80065d0 <TIM_OC3_SetConfig+0xe4>)
 800657a:	4293      	cmp	r3, r2
 800657c:	d113      	bne.n	80065a6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800657e:	693b      	ldr	r3, [r7, #16]
 8006580:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006584:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006586:	693b      	ldr	r3, [r7, #16]
 8006588:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800658c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800658e:	683b      	ldr	r3, [r7, #0]
 8006590:	695b      	ldr	r3, [r3, #20]
 8006592:	011b      	lsls	r3, r3, #4
 8006594:	693a      	ldr	r2, [r7, #16]
 8006596:	4313      	orrs	r3, r2
 8006598:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800659a:	683b      	ldr	r3, [r7, #0]
 800659c:	699b      	ldr	r3, [r3, #24]
 800659e:	011b      	lsls	r3, r3, #4
 80065a0:	693a      	ldr	r2, [r7, #16]
 80065a2:	4313      	orrs	r3, r2
 80065a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	693a      	ldr	r2, [r7, #16]
 80065aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	68fa      	ldr	r2, [r7, #12]
 80065b0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80065b2:	683b      	ldr	r3, [r7, #0]
 80065b4:	685a      	ldr	r2, [r3, #4]
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	697a      	ldr	r2, [r7, #20]
 80065be:	621a      	str	r2, [r3, #32]
}
 80065c0:	bf00      	nop
 80065c2:	371c      	adds	r7, #28
 80065c4:	46bd      	mov	sp, r7
 80065c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ca:	4770      	bx	lr
 80065cc:	40010000 	.word	0x40010000
 80065d0:	40010400 	.word	0x40010400

080065d4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80065d4:	b480      	push	{r7}
 80065d6:	b087      	sub	sp, #28
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
 80065dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	6a1b      	ldr	r3, [r3, #32]
 80065e2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	6a1b      	ldr	r3, [r3, #32]
 80065e8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	685b      	ldr	r3, [r3, #4]
 80065f4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	69db      	ldr	r3, [r3, #28]
 80065fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006602:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800660a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800660c:	683b      	ldr	r3, [r7, #0]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	021b      	lsls	r3, r3, #8
 8006612:	68fa      	ldr	r2, [r7, #12]
 8006614:	4313      	orrs	r3, r2
 8006616:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006618:	693b      	ldr	r3, [r7, #16]
 800661a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800661e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006620:	683b      	ldr	r3, [r7, #0]
 8006622:	689b      	ldr	r3, [r3, #8]
 8006624:	031b      	lsls	r3, r3, #12
 8006626:	693a      	ldr	r2, [r7, #16]
 8006628:	4313      	orrs	r3, r2
 800662a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	4a12      	ldr	r2, [pc, #72]	@ (8006678 <TIM_OC4_SetConfig+0xa4>)
 8006630:	4293      	cmp	r3, r2
 8006632:	d003      	beq.n	800663c <TIM_OC4_SetConfig+0x68>
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	4a11      	ldr	r2, [pc, #68]	@ (800667c <TIM_OC4_SetConfig+0xa8>)
 8006638:	4293      	cmp	r3, r2
 800663a:	d109      	bne.n	8006650 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800663c:	697b      	ldr	r3, [r7, #20]
 800663e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006642:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	695b      	ldr	r3, [r3, #20]
 8006648:	019b      	lsls	r3, r3, #6
 800664a:	697a      	ldr	r2, [r7, #20]
 800664c:	4313      	orrs	r3, r2
 800664e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	697a      	ldr	r2, [r7, #20]
 8006654:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	68fa      	ldr	r2, [r7, #12]
 800665a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800665c:	683b      	ldr	r3, [r7, #0]
 800665e:	685a      	ldr	r2, [r3, #4]
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	693a      	ldr	r2, [r7, #16]
 8006668:	621a      	str	r2, [r3, #32]
}
 800666a:	bf00      	nop
 800666c:	371c      	adds	r7, #28
 800666e:	46bd      	mov	sp, r7
 8006670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006674:	4770      	bx	lr
 8006676:	bf00      	nop
 8006678:	40010000 	.word	0x40010000
 800667c:	40010400 	.word	0x40010400

08006680 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006680:	b480      	push	{r7}
 8006682:	b087      	sub	sp, #28
 8006684:	af00      	add	r7, sp, #0
 8006686:	60f8      	str	r0, [r7, #12]
 8006688:	60b9      	str	r1, [r7, #8]
 800668a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	6a1b      	ldr	r3, [r3, #32]
 8006690:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	6a1b      	ldr	r3, [r3, #32]
 8006696:	f023 0201 	bic.w	r2, r3, #1
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	699b      	ldr	r3, [r3, #24]
 80066a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80066a4:	693b      	ldr	r3, [r7, #16]
 80066a6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80066aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	011b      	lsls	r3, r3, #4
 80066b0:	693a      	ldr	r2, [r7, #16]
 80066b2:	4313      	orrs	r3, r2
 80066b4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80066b6:	697b      	ldr	r3, [r7, #20]
 80066b8:	f023 030a 	bic.w	r3, r3, #10
 80066bc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80066be:	697a      	ldr	r2, [r7, #20]
 80066c0:	68bb      	ldr	r3, [r7, #8]
 80066c2:	4313      	orrs	r3, r2
 80066c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	693a      	ldr	r2, [r7, #16]
 80066ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	697a      	ldr	r2, [r7, #20]
 80066d0:	621a      	str	r2, [r3, #32]
}
 80066d2:	bf00      	nop
 80066d4:	371c      	adds	r7, #28
 80066d6:	46bd      	mov	sp, r7
 80066d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066dc:	4770      	bx	lr

080066de <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80066de:	b480      	push	{r7}
 80066e0:	b087      	sub	sp, #28
 80066e2:	af00      	add	r7, sp, #0
 80066e4:	60f8      	str	r0, [r7, #12]
 80066e6:	60b9      	str	r1, [r7, #8]
 80066e8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	6a1b      	ldr	r3, [r3, #32]
 80066ee:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	6a1b      	ldr	r3, [r3, #32]
 80066f4:	f023 0210 	bic.w	r2, r3, #16
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	699b      	ldr	r3, [r3, #24]
 8006700:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006702:	693b      	ldr	r3, [r7, #16]
 8006704:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006708:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	031b      	lsls	r3, r3, #12
 800670e:	693a      	ldr	r2, [r7, #16]
 8006710:	4313      	orrs	r3, r2
 8006712:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006714:	697b      	ldr	r3, [r7, #20]
 8006716:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800671a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800671c:	68bb      	ldr	r3, [r7, #8]
 800671e:	011b      	lsls	r3, r3, #4
 8006720:	697a      	ldr	r2, [r7, #20]
 8006722:	4313      	orrs	r3, r2
 8006724:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	693a      	ldr	r2, [r7, #16]
 800672a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	697a      	ldr	r2, [r7, #20]
 8006730:	621a      	str	r2, [r3, #32]
}
 8006732:	bf00      	nop
 8006734:	371c      	adds	r7, #28
 8006736:	46bd      	mov	sp, r7
 8006738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673c:	4770      	bx	lr

0800673e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800673e:	b480      	push	{r7}
 8006740:	b085      	sub	sp, #20
 8006742:	af00      	add	r7, sp, #0
 8006744:	6078      	str	r0, [r7, #4]
 8006746:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	689b      	ldr	r3, [r3, #8]
 800674c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006754:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006756:	683a      	ldr	r2, [r7, #0]
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	4313      	orrs	r3, r2
 800675c:	f043 0307 	orr.w	r3, r3, #7
 8006760:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	68fa      	ldr	r2, [r7, #12]
 8006766:	609a      	str	r2, [r3, #8]
}
 8006768:	bf00      	nop
 800676a:	3714      	adds	r7, #20
 800676c:	46bd      	mov	sp, r7
 800676e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006772:	4770      	bx	lr

08006774 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006774:	b480      	push	{r7}
 8006776:	b087      	sub	sp, #28
 8006778:	af00      	add	r7, sp, #0
 800677a:	60f8      	str	r0, [r7, #12]
 800677c:	60b9      	str	r1, [r7, #8]
 800677e:	607a      	str	r2, [r7, #4]
 8006780:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	689b      	ldr	r3, [r3, #8]
 8006786:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006788:	697b      	ldr	r3, [r7, #20]
 800678a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800678e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006790:	683b      	ldr	r3, [r7, #0]
 8006792:	021a      	lsls	r2, r3, #8
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	431a      	orrs	r2, r3
 8006798:	68bb      	ldr	r3, [r7, #8]
 800679a:	4313      	orrs	r3, r2
 800679c:	697a      	ldr	r2, [r7, #20]
 800679e:	4313      	orrs	r3, r2
 80067a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	697a      	ldr	r2, [r7, #20]
 80067a6:	609a      	str	r2, [r3, #8]
}
 80067a8:	bf00      	nop
 80067aa:	371c      	adds	r7, #28
 80067ac:	46bd      	mov	sp, r7
 80067ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b2:	4770      	bx	lr

080067b4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80067b4:	b480      	push	{r7}
 80067b6:	b087      	sub	sp, #28
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	60f8      	str	r0, [r7, #12]
 80067bc:	60b9      	str	r1, [r7, #8]
 80067be:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80067c0:	68bb      	ldr	r3, [r7, #8]
 80067c2:	f003 031f 	and.w	r3, r3, #31
 80067c6:	2201      	movs	r2, #1
 80067c8:	fa02 f303 	lsl.w	r3, r2, r3
 80067cc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	6a1a      	ldr	r2, [r3, #32]
 80067d2:	697b      	ldr	r3, [r7, #20]
 80067d4:	43db      	mvns	r3, r3
 80067d6:	401a      	ands	r2, r3
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	6a1a      	ldr	r2, [r3, #32]
 80067e0:	68bb      	ldr	r3, [r7, #8]
 80067e2:	f003 031f 	and.w	r3, r3, #31
 80067e6:	6879      	ldr	r1, [r7, #4]
 80067e8:	fa01 f303 	lsl.w	r3, r1, r3
 80067ec:	431a      	orrs	r2, r3
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	621a      	str	r2, [r3, #32]
}
 80067f2:	bf00      	nop
 80067f4:	371c      	adds	r7, #28
 80067f6:	46bd      	mov	sp, r7
 80067f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fc:	4770      	bx	lr
	...

08006800 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006800:	b480      	push	{r7}
 8006802:	b085      	sub	sp, #20
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
 8006808:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006810:	2b01      	cmp	r3, #1
 8006812:	d101      	bne.n	8006818 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006814:	2302      	movs	r3, #2
 8006816:	e05a      	b.n	80068ce <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2201      	movs	r2, #1
 800681c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2202      	movs	r2, #2
 8006824:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	685b      	ldr	r3, [r3, #4]
 800682e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	689b      	ldr	r3, [r3, #8]
 8006836:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800683e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	68fa      	ldr	r2, [r7, #12]
 8006846:	4313      	orrs	r3, r2
 8006848:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	68fa      	ldr	r2, [r7, #12]
 8006850:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	4a21      	ldr	r2, [pc, #132]	@ (80068dc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006858:	4293      	cmp	r3, r2
 800685a:	d022      	beq.n	80068a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006864:	d01d      	beq.n	80068a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	4a1d      	ldr	r2, [pc, #116]	@ (80068e0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800686c:	4293      	cmp	r3, r2
 800686e:	d018      	beq.n	80068a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	4a1b      	ldr	r2, [pc, #108]	@ (80068e4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006876:	4293      	cmp	r3, r2
 8006878:	d013      	beq.n	80068a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	4a1a      	ldr	r2, [pc, #104]	@ (80068e8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006880:	4293      	cmp	r3, r2
 8006882:	d00e      	beq.n	80068a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	4a18      	ldr	r2, [pc, #96]	@ (80068ec <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800688a:	4293      	cmp	r3, r2
 800688c:	d009      	beq.n	80068a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	4a17      	ldr	r2, [pc, #92]	@ (80068f0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006894:	4293      	cmp	r3, r2
 8006896:	d004      	beq.n	80068a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	4a15      	ldr	r2, [pc, #84]	@ (80068f4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800689e:	4293      	cmp	r3, r2
 80068a0:	d10c      	bne.n	80068bc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80068a2:	68bb      	ldr	r3, [r7, #8]
 80068a4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80068a8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80068aa:	683b      	ldr	r3, [r7, #0]
 80068ac:	685b      	ldr	r3, [r3, #4]
 80068ae:	68ba      	ldr	r2, [r7, #8]
 80068b0:	4313      	orrs	r3, r2
 80068b2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	68ba      	ldr	r2, [r7, #8]
 80068ba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2201      	movs	r2, #1
 80068c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2200      	movs	r2, #0
 80068c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80068cc:	2300      	movs	r3, #0
}
 80068ce:	4618      	mov	r0, r3
 80068d0:	3714      	adds	r7, #20
 80068d2:	46bd      	mov	sp, r7
 80068d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d8:	4770      	bx	lr
 80068da:	bf00      	nop
 80068dc:	40010000 	.word	0x40010000
 80068e0:	40000400 	.word	0x40000400
 80068e4:	40000800 	.word	0x40000800
 80068e8:	40000c00 	.word	0x40000c00
 80068ec:	40010400 	.word	0x40010400
 80068f0:	40014000 	.word	0x40014000
 80068f4:	40001800 	.word	0x40001800

080068f8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80068f8:	b480      	push	{r7}
 80068fa:	b083      	sub	sp, #12
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006900:	bf00      	nop
 8006902:	370c      	adds	r7, #12
 8006904:	46bd      	mov	sp, r7
 8006906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690a:	4770      	bx	lr

0800690c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800690c:	b480      	push	{r7}
 800690e:	b083      	sub	sp, #12
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006914:	bf00      	nop
 8006916:	370c      	adds	r7, #12
 8006918:	46bd      	mov	sp, r7
 800691a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691e:	4770      	bx	lr

08006920 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006920:	b580      	push	{r7, lr}
 8006922:	b082      	sub	sp, #8
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2b00      	cmp	r3, #0
 800692c:	d101      	bne.n	8006932 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800692e:	2301      	movs	r3, #1
 8006930:	e042      	b.n	80069b8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006938:	b2db      	uxtb	r3, r3
 800693a:	2b00      	cmp	r3, #0
 800693c:	d106      	bne.n	800694c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	2200      	movs	r2, #0
 8006942:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006946:	6878      	ldr	r0, [r7, #4]
 8006948:	f7fc f8dc 	bl	8002b04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2224      	movs	r2, #36	@ 0x24
 8006950:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	68da      	ldr	r2, [r3, #12]
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006962:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006964:	6878      	ldr	r0, [r7, #4]
 8006966:	f000 f82b 	bl	80069c0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	691a      	ldr	r2, [r3, #16]
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006978:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	695a      	ldr	r2, [r3, #20]
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006988:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	68da      	ldr	r2, [r3, #12]
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006998:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	2200      	movs	r2, #0
 800699e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	2220      	movs	r2, #32
 80069a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	2220      	movs	r2, #32
 80069ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2200      	movs	r2, #0
 80069b4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80069b6:	2300      	movs	r3, #0
}
 80069b8:	4618      	mov	r0, r3
 80069ba:	3708      	adds	r7, #8
 80069bc:	46bd      	mov	sp, r7
 80069be:	bd80      	pop	{r7, pc}

080069c0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80069c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80069c4:	b0c0      	sub	sp, #256	@ 0x100
 80069c6:	af00      	add	r7, sp, #0
 80069c8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80069cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	691b      	ldr	r3, [r3, #16]
 80069d4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80069d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069dc:	68d9      	ldr	r1, [r3, #12]
 80069de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069e2:	681a      	ldr	r2, [r3, #0]
 80069e4:	ea40 0301 	orr.w	r3, r0, r1
 80069e8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80069ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069ee:	689a      	ldr	r2, [r3, #8]
 80069f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069f4:	691b      	ldr	r3, [r3, #16]
 80069f6:	431a      	orrs	r2, r3
 80069f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069fc:	695b      	ldr	r3, [r3, #20]
 80069fe:	431a      	orrs	r2, r3
 8006a00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a04:	69db      	ldr	r3, [r3, #28]
 8006a06:	4313      	orrs	r3, r2
 8006a08:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006a0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	68db      	ldr	r3, [r3, #12]
 8006a14:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006a18:	f021 010c 	bic.w	r1, r1, #12
 8006a1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a20:	681a      	ldr	r2, [r3, #0]
 8006a22:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006a26:	430b      	orrs	r3, r1
 8006a28:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006a2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	695b      	ldr	r3, [r3, #20]
 8006a32:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006a36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a3a:	6999      	ldr	r1, [r3, #24]
 8006a3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a40:	681a      	ldr	r2, [r3, #0]
 8006a42:	ea40 0301 	orr.w	r3, r0, r1
 8006a46:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006a48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a4c:	681a      	ldr	r2, [r3, #0]
 8006a4e:	4b8f      	ldr	r3, [pc, #572]	@ (8006c8c <UART_SetConfig+0x2cc>)
 8006a50:	429a      	cmp	r2, r3
 8006a52:	d005      	beq.n	8006a60 <UART_SetConfig+0xa0>
 8006a54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a58:	681a      	ldr	r2, [r3, #0]
 8006a5a:	4b8d      	ldr	r3, [pc, #564]	@ (8006c90 <UART_SetConfig+0x2d0>)
 8006a5c:	429a      	cmp	r2, r3
 8006a5e:	d104      	bne.n	8006a6a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006a60:	f7fd ff04 	bl	800486c <HAL_RCC_GetPCLK2Freq>
 8006a64:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006a68:	e003      	b.n	8006a72 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006a6a:	f7fd feeb 	bl	8004844 <HAL_RCC_GetPCLK1Freq>
 8006a6e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006a72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a76:	69db      	ldr	r3, [r3, #28]
 8006a78:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006a7c:	f040 810c 	bne.w	8006c98 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006a80:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006a84:	2200      	movs	r2, #0
 8006a86:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006a8a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006a8e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006a92:	4622      	mov	r2, r4
 8006a94:	462b      	mov	r3, r5
 8006a96:	1891      	adds	r1, r2, r2
 8006a98:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006a9a:	415b      	adcs	r3, r3
 8006a9c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006a9e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006aa2:	4621      	mov	r1, r4
 8006aa4:	eb12 0801 	adds.w	r8, r2, r1
 8006aa8:	4629      	mov	r1, r5
 8006aaa:	eb43 0901 	adc.w	r9, r3, r1
 8006aae:	f04f 0200 	mov.w	r2, #0
 8006ab2:	f04f 0300 	mov.w	r3, #0
 8006ab6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006aba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006abe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006ac2:	4690      	mov	r8, r2
 8006ac4:	4699      	mov	r9, r3
 8006ac6:	4623      	mov	r3, r4
 8006ac8:	eb18 0303 	adds.w	r3, r8, r3
 8006acc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006ad0:	462b      	mov	r3, r5
 8006ad2:	eb49 0303 	adc.w	r3, r9, r3
 8006ad6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006ada:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ade:	685b      	ldr	r3, [r3, #4]
 8006ae0:	2200      	movs	r2, #0
 8006ae2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006ae6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006aea:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006aee:	460b      	mov	r3, r1
 8006af0:	18db      	adds	r3, r3, r3
 8006af2:	653b      	str	r3, [r7, #80]	@ 0x50
 8006af4:	4613      	mov	r3, r2
 8006af6:	eb42 0303 	adc.w	r3, r2, r3
 8006afa:	657b      	str	r3, [r7, #84]	@ 0x54
 8006afc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006b00:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006b04:	f7fa f83a 	bl	8000b7c <__aeabi_uldivmod>
 8006b08:	4602      	mov	r2, r0
 8006b0a:	460b      	mov	r3, r1
 8006b0c:	4b61      	ldr	r3, [pc, #388]	@ (8006c94 <UART_SetConfig+0x2d4>)
 8006b0e:	fba3 2302 	umull	r2, r3, r3, r2
 8006b12:	095b      	lsrs	r3, r3, #5
 8006b14:	011c      	lsls	r4, r3, #4
 8006b16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006b20:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006b24:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006b28:	4642      	mov	r2, r8
 8006b2a:	464b      	mov	r3, r9
 8006b2c:	1891      	adds	r1, r2, r2
 8006b2e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006b30:	415b      	adcs	r3, r3
 8006b32:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006b34:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006b38:	4641      	mov	r1, r8
 8006b3a:	eb12 0a01 	adds.w	sl, r2, r1
 8006b3e:	4649      	mov	r1, r9
 8006b40:	eb43 0b01 	adc.w	fp, r3, r1
 8006b44:	f04f 0200 	mov.w	r2, #0
 8006b48:	f04f 0300 	mov.w	r3, #0
 8006b4c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006b50:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006b54:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006b58:	4692      	mov	sl, r2
 8006b5a:	469b      	mov	fp, r3
 8006b5c:	4643      	mov	r3, r8
 8006b5e:	eb1a 0303 	adds.w	r3, sl, r3
 8006b62:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006b66:	464b      	mov	r3, r9
 8006b68:	eb4b 0303 	adc.w	r3, fp, r3
 8006b6c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006b70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b74:	685b      	ldr	r3, [r3, #4]
 8006b76:	2200      	movs	r2, #0
 8006b78:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006b7c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006b80:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006b84:	460b      	mov	r3, r1
 8006b86:	18db      	adds	r3, r3, r3
 8006b88:	643b      	str	r3, [r7, #64]	@ 0x40
 8006b8a:	4613      	mov	r3, r2
 8006b8c:	eb42 0303 	adc.w	r3, r2, r3
 8006b90:	647b      	str	r3, [r7, #68]	@ 0x44
 8006b92:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006b96:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8006b9a:	f7f9 ffef 	bl	8000b7c <__aeabi_uldivmod>
 8006b9e:	4602      	mov	r2, r0
 8006ba0:	460b      	mov	r3, r1
 8006ba2:	4611      	mov	r1, r2
 8006ba4:	4b3b      	ldr	r3, [pc, #236]	@ (8006c94 <UART_SetConfig+0x2d4>)
 8006ba6:	fba3 2301 	umull	r2, r3, r3, r1
 8006baa:	095b      	lsrs	r3, r3, #5
 8006bac:	2264      	movs	r2, #100	@ 0x64
 8006bae:	fb02 f303 	mul.w	r3, r2, r3
 8006bb2:	1acb      	subs	r3, r1, r3
 8006bb4:	00db      	lsls	r3, r3, #3
 8006bb6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8006bba:	4b36      	ldr	r3, [pc, #216]	@ (8006c94 <UART_SetConfig+0x2d4>)
 8006bbc:	fba3 2302 	umull	r2, r3, r3, r2
 8006bc0:	095b      	lsrs	r3, r3, #5
 8006bc2:	005b      	lsls	r3, r3, #1
 8006bc4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006bc8:	441c      	add	r4, r3
 8006bca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006bce:	2200      	movs	r2, #0
 8006bd0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006bd4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006bd8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006bdc:	4642      	mov	r2, r8
 8006bde:	464b      	mov	r3, r9
 8006be0:	1891      	adds	r1, r2, r2
 8006be2:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006be4:	415b      	adcs	r3, r3
 8006be6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006be8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006bec:	4641      	mov	r1, r8
 8006bee:	1851      	adds	r1, r2, r1
 8006bf0:	6339      	str	r1, [r7, #48]	@ 0x30
 8006bf2:	4649      	mov	r1, r9
 8006bf4:	414b      	adcs	r3, r1
 8006bf6:	637b      	str	r3, [r7, #52]	@ 0x34
 8006bf8:	f04f 0200 	mov.w	r2, #0
 8006bfc:	f04f 0300 	mov.w	r3, #0
 8006c00:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006c04:	4659      	mov	r1, fp
 8006c06:	00cb      	lsls	r3, r1, #3
 8006c08:	4651      	mov	r1, sl
 8006c0a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006c0e:	4651      	mov	r1, sl
 8006c10:	00ca      	lsls	r2, r1, #3
 8006c12:	4610      	mov	r0, r2
 8006c14:	4619      	mov	r1, r3
 8006c16:	4603      	mov	r3, r0
 8006c18:	4642      	mov	r2, r8
 8006c1a:	189b      	adds	r3, r3, r2
 8006c1c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006c20:	464b      	mov	r3, r9
 8006c22:	460a      	mov	r2, r1
 8006c24:	eb42 0303 	adc.w	r3, r2, r3
 8006c28:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006c2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c30:	685b      	ldr	r3, [r3, #4]
 8006c32:	2200      	movs	r2, #0
 8006c34:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006c38:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006c3c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006c40:	460b      	mov	r3, r1
 8006c42:	18db      	adds	r3, r3, r3
 8006c44:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006c46:	4613      	mov	r3, r2
 8006c48:	eb42 0303 	adc.w	r3, r2, r3
 8006c4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006c4e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006c52:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006c56:	f7f9 ff91 	bl	8000b7c <__aeabi_uldivmod>
 8006c5a:	4602      	mov	r2, r0
 8006c5c:	460b      	mov	r3, r1
 8006c5e:	4b0d      	ldr	r3, [pc, #52]	@ (8006c94 <UART_SetConfig+0x2d4>)
 8006c60:	fba3 1302 	umull	r1, r3, r3, r2
 8006c64:	095b      	lsrs	r3, r3, #5
 8006c66:	2164      	movs	r1, #100	@ 0x64
 8006c68:	fb01 f303 	mul.w	r3, r1, r3
 8006c6c:	1ad3      	subs	r3, r2, r3
 8006c6e:	00db      	lsls	r3, r3, #3
 8006c70:	3332      	adds	r3, #50	@ 0x32
 8006c72:	4a08      	ldr	r2, [pc, #32]	@ (8006c94 <UART_SetConfig+0x2d4>)
 8006c74:	fba2 2303 	umull	r2, r3, r2, r3
 8006c78:	095b      	lsrs	r3, r3, #5
 8006c7a:	f003 0207 	and.w	r2, r3, #7
 8006c7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	4422      	add	r2, r4
 8006c86:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006c88:	e106      	b.n	8006e98 <UART_SetConfig+0x4d8>
 8006c8a:	bf00      	nop
 8006c8c:	40011000 	.word	0x40011000
 8006c90:	40011400 	.word	0x40011400
 8006c94:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006c98:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006c9c:	2200      	movs	r2, #0
 8006c9e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006ca2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006ca6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006caa:	4642      	mov	r2, r8
 8006cac:	464b      	mov	r3, r9
 8006cae:	1891      	adds	r1, r2, r2
 8006cb0:	6239      	str	r1, [r7, #32]
 8006cb2:	415b      	adcs	r3, r3
 8006cb4:	627b      	str	r3, [r7, #36]	@ 0x24
 8006cb6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006cba:	4641      	mov	r1, r8
 8006cbc:	1854      	adds	r4, r2, r1
 8006cbe:	4649      	mov	r1, r9
 8006cc0:	eb43 0501 	adc.w	r5, r3, r1
 8006cc4:	f04f 0200 	mov.w	r2, #0
 8006cc8:	f04f 0300 	mov.w	r3, #0
 8006ccc:	00eb      	lsls	r3, r5, #3
 8006cce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006cd2:	00e2      	lsls	r2, r4, #3
 8006cd4:	4614      	mov	r4, r2
 8006cd6:	461d      	mov	r5, r3
 8006cd8:	4643      	mov	r3, r8
 8006cda:	18e3      	adds	r3, r4, r3
 8006cdc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006ce0:	464b      	mov	r3, r9
 8006ce2:	eb45 0303 	adc.w	r3, r5, r3
 8006ce6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006cea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006cee:	685b      	ldr	r3, [r3, #4]
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006cf6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006cfa:	f04f 0200 	mov.w	r2, #0
 8006cfe:	f04f 0300 	mov.w	r3, #0
 8006d02:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006d06:	4629      	mov	r1, r5
 8006d08:	008b      	lsls	r3, r1, #2
 8006d0a:	4621      	mov	r1, r4
 8006d0c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006d10:	4621      	mov	r1, r4
 8006d12:	008a      	lsls	r2, r1, #2
 8006d14:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006d18:	f7f9 ff30 	bl	8000b7c <__aeabi_uldivmod>
 8006d1c:	4602      	mov	r2, r0
 8006d1e:	460b      	mov	r3, r1
 8006d20:	4b60      	ldr	r3, [pc, #384]	@ (8006ea4 <UART_SetConfig+0x4e4>)
 8006d22:	fba3 2302 	umull	r2, r3, r3, r2
 8006d26:	095b      	lsrs	r3, r3, #5
 8006d28:	011c      	lsls	r4, r3, #4
 8006d2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006d2e:	2200      	movs	r2, #0
 8006d30:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006d34:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006d38:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006d3c:	4642      	mov	r2, r8
 8006d3e:	464b      	mov	r3, r9
 8006d40:	1891      	adds	r1, r2, r2
 8006d42:	61b9      	str	r1, [r7, #24]
 8006d44:	415b      	adcs	r3, r3
 8006d46:	61fb      	str	r3, [r7, #28]
 8006d48:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006d4c:	4641      	mov	r1, r8
 8006d4e:	1851      	adds	r1, r2, r1
 8006d50:	6139      	str	r1, [r7, #16]
 8006d52:	4649      	mov	r1, r9
 8006d54:	414b      	adcs	r3, r1
 8006d56:	617b      	str	r3, [r7, #20]
 8006d58:	f04f 0200 	mov.w	r2, #0
 8006d5c:	f04f 0300 	mov.w	r3, #0
 8006d60:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006d64:	4659      	mov	r1, fp
 8006d66:	00cb      	lsls	r3, r1, #3
 8006d68:	4651      	mov	r1, sl
 8006d6a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006d6e:	4651      	mov	r1, sl
 8006d70:	00ca      	lsls	r2, r1, #3
 8006d72:	4610      	mov	r0, r2
 8006d74:	4619      	mov	r1, r3
 8006d76:	4603      	mov	r3, r0
 8006d78:	4642      	mov	r2, r8
 8006d7a:	189b      	adds	r3, r3, r2
 8006d7c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006d80:	464b      	mov	r3, r9
 8006d82:	460a      	mov	r2, r1
 8006d84:	eb42 0303 	adc.w	r3, r2, r3
 8006d88:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006d8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d90:	685b      	ldr	r3, [r3, #4]
 8006d92:	2200      	movs	r2, #0
 8006d94:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006d96:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006d98:	f04f 0200 	mov.w	r2, #0
 8006d9c:	f04f 0300 	mov.w	r3, #0
 8006da0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006da4:	4649      	mov	r1, r9
 8006da6:	008b      	lsls	r3, r1, #2
 8006da8:	4641      	mov	r1, r8
 8006daa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006dae:	4641      	mov	r1, r8
 8006db0:	008a      	lsls	r2, r1, #2
 8006db2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006db6:	f7f9 fee1 	bl	8000b7c <__aeabi_uldivmod>
 8006dba:	4602      	mov	r2, r0
 8006dbc:	460b      	mov	r3, r1
 8006dbe:	4611      	mov	r1, r2
 8006dc0:	4b38      	ldr	r3, [pc, #224]	@ (8006ea4 <UART_SetConfig+0x4e4>)
 8006dc2:	fba3 2301 	umull	r2, r3, r3, r1
 8006dc6:	095b      	lsrs	r3, r3, #5
 8006dc8:	2264      	movs	r2, #100	@ 0x64
 8006dca:	fb02 f303 	mul.w	r3, r2, r3
 8006dce:	1acb      	subs	r3, r1, r3
 8006dd0:	011b      	lsls	r3, r3, #4
 8006dd2:	3332      	adds	r3, #50	@ 0x32
 8006dd4:	4a33      	ldr	r2, [pc, #204]	@ (8006ea4 <UART_SetConfig+0x4e4>)
 8006dd6:	fba2 2303 	umull	r2, r3, r2, r3
 8006dda:	095b      	lsrs	r3, r3, #5
 8006ddc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006de0:	441c      	add	r4, r3
 8006de2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006de6:	2200      	movs	r2, #0
 8006de8:	673b      	str	r3, [r7, #112]	@ 0x70
 8006dea:	677a      	str	r2, [r7, #116]	@ 0x74
 8006dec:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006df0:	4642      	mov	r2, r8
 8006df2:	464b      	mov	r3, r9
 8006df4:	1891      	adds	r1, r2, r2
 8006df6:	60b9      	str	r1, [r7, #8]
 8006df8:	415b      	adcs	r3, r3
 8006dfa:	60fb      	str	r3, [r7, #12]
 8006dfc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006e00:	4641      	mov	r1, r8
 8006e02:	1851      	adds	r1, r2, r1
 8006e04:	6039      	str	r1, [r7, #0]
 8006e06:	4649      	mov	r1, r9
 8006e08:	414b      	adcs	r3, r1
 8006e0a:	607b      	str	r3, [r7, #4]
 8006e0c:	f04f 0200 	mov.w	r2, #0
 8006e10:	f04f 0300 	mov.w	r3, #0
 8006e14:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006e18:	4659      	mov	r1, fp
 8006e1a:	00cb      	lsls	r3, r1, #3
 8006e1c:	4651      	mov	r1, sl
 8006e1e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006e22:	4651      	mov	r1, sl
 8006e24:	00ca      	lsls	r2, r1, #3
 8006e26:	4610      	mov	r0, r2
 8006e28:	4619      	mov	r1, r3
 8006e2a:	4603      	mov	r3, r0
 8006e2c:	4642      	mov	r2, r8
 8006e2e:	189b      	adds	r3, r3, r2
 8006e30:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006e32:	464b      	mov	r3, r9
 8006e34:	460a      	mov	r2, r1
 8006e36:	eb42 0303 	adc.w	r3, r2, r3
 8006e3a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006e3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e40:	685b      	ldr	r3, [r3, #4]
 8006e42:	2200      	movs	r2, #0
 8006e44:	663b      	str	r3, [r7, #96]	@ 0x60
 8006e46:	667a      	str	r2, [r7, #100]	@ 0x64
 8006e48:	f04f 0200 	mov.w	r2, #0
 8006e4c:	f04f 0300 	mov.w	r3, #0
 8006e50:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006e54:	4649      	mov	r1, r9
 8006e56:	008b      	lsls	r3, r1, #2
 8006e58:	4641      	mov	r1, r8
 8006e5a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006e5e:	4641      	mov	r1, r8
 8006e60:	008a      	lsls	r2, r1, #2
 8006e62:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006e66:	f7f9 fe89 	bl	8000b7c <__aeabi_uldivmod>
 8006e6a:	4602      	mov	r2, r0
 8006e6c:	460b      	mov	r3, r1
 8006e6e:	4b0d      	ldr	r3, [pc, #52]	@ (8006ea4 <UART_SetConfig+0x4e4>)
 8006e70:	fba3 1302 	umull	r1, r3, r3, r2
 8006e74:	095b      	lsrs	r3, r3, #5
 8006e76:	2164      	movs	r1, #100	@ 0x64
 8006e78:	fb01 f303 	mul.w	r3, r1, r3
 8006e7c:	1ad3      	subs	r3, r2, r3
 8006e7e:	011b      	lsls	r3, r3, #4
 8006e80:	3332      	adds	r3, #50	@ 0x32
 8006e82:	4a08      	ldr	r2, [pc, #32]	@ (8006ea4 <UART_SetConfig+0x4e4>)
 8006e84:	fba2 2303 	umull	r2, r3, r2, r3
 8006e88:	095b      	lsrs	r3, r3, #5
 8006e8a:	f003 020f 	and.w	r2, r3, #15
 8006e8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	4422      	add	r2, r4
 8006e96:	609a      	str	r2, [r3, #8]
}
 8006e98:	bf00      	nop
 8006e9a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006ea4:	51eb851f 	.word	0x51eb851f

08006ea8 <DEV_SPI_WRite>:
	HAL_Delay(xms);
}


void DEV_SPI_WRite(UBYTE _dat)
{
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b082      	sub	sp, #8
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	4603      	mov	r3, r0
 8006eb0:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&hspi2, (uint8_t *)&_dat, 1, 500);
 8006eb2:	1df9      	adds	r1, r7, #7
 8006eb4:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8006eb8:	2201      	movs	r2, #1
 8006eba:	4803      	ldr	r0, [pc, #12]	@ (8006ec8 <DEV_SPI_WRite+0x20>)
 8006ebc:	f7fe fa41 	bl	8005342 <HAL_SPI_Transmit>
}
 8006ec0:	bf00      	nop
 8006ec2:	3708      	adds	r7, #8
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	bd80      	pop	{r7, pc}
 8006ec8:	20000184 	.word	0x20000184

08006ecc <DEV_Module_Init>:

int DEV_Module_Init(void)
{
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	af00      	add	r7, sp, #0
    DEV_Digital_Write(DEV_DC_PIN, 1);
 8006ed0:	2201      	movs	r2, #1
 8006ed2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006ed6:	480b      	ldr	r0, [pc, #44]	@ (8006f04 <DEV_Module_Init+0x38>)
 8006ed8:	f7fc fb96 	bl	8003608 <HAL_GPIO_WritePin>
    DEV_Digital_Write(DEV_CS_PIN, 1);
 8006edc:	2201      	movs	r2, #1
 8006ede:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8006ee2:	4808      	ldr	r0, [pc, #32]	@ (8006f04 <DEV_Module_Init+0x38>)
 8006ee4:	f7fc fb90 	bl	8003608 <HAL_GPIO_WritePin>
    DEV_Digital_Write(DEV_RST_PIN, 1);
 8006ee8:	2201      	movs	r2, #1
 8006eea:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8006eee:	4805      	ldr	r0, [pc, #20]	@ (8006f04 <DEV_Module_Init+0x38>)
 8006ef0:	f7fc fb8a 	bl	8003608 <HAL_GPIO_WritePin>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8006ef4:	2104      	movs	r1, #4
 8006ef6:	4804      	ldr	r0, [pc, #16]	@ (8006f08 <DEV_Module_Init+0x3c>)
 8006ef8:	f7fe fd8c 	bl	8005a14 <HAL_TIM_PWM_Start>
		return 0;
 8006efc:	2300      	movs	r3, #0
}
 8006efe:	4618      	mov	r0, r3
 8006f00:	bd80      	pop	{r7, pc}
 8006f02:	bf00      	nop
 8006f04:	40020400 	.word	0x40020400
 8006f08:	200001e0 	.word	0x200001e0

08006f0c <Paint_NewImage>:
    width   :   The width of the picture
    Height  :   The height of the picture
    Color   :   Whether the picture is inverted
******************************************************************************/
void Paint_NewImage(UWORD Width, UWORD Height, UWORD Rotate, UWORD Color)
{
 8006f0c:	b590      	push	{r4, r7, lr}
 8006f0e:	b083      	sub	sp, #12
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	4604      	mov	r4, r0
 8006f14:	4608      	mov	r0, r1
 8006f16:	4611      	mov	r1, r2
 8006f18:	461a      	mov	r2, r3
 8006f1a:	4623      	mov	r3, r4
 8006f1c:	80fb      	strh	r3, [r7, #6]
 8006f1e:	4603      	mov	r3, r0
 8006f20:	80bb      	strh	r3, [r7, #4]
 8006f22:	460b      	mov	r3, r1
 8006f24:	807b      	strh	r3, [r7, #2]
 8006f26:	4613      	mov	r3, r2
 8006f28:	803b      	strh	r3, [r7, #0]
    Paint.WidthMemory = Width;
 8006f2a:	4a1c      	ldr	r2, [pc, #112]	@ (8006f9c <Paint_NewImage+0x90>)
 8006f2c:	88fb      	ldrh	r3, [r7, #6]
 8006f2e:	8113      	strh	r3, [r2, #8]
    Paint.HeightMemory = Height;
 8006f30:	4a1a      	ldr	r2, [pc, #104]	@ (8006f9c <Paint_NewImage+0x90>)
 8006f32:	88bb      	ldrh	r3, [r7, #4]
 8006f34:	8153      	strh	r3, [r2, #10]
    Paint.Color = Color;    
 8006f36:	4a19      	ldr	r2, [pc, #100]	@ (8006f9c <Paint_NewImage+0x90>)
 8006f38:	883b      	ldrh	r3, [r7, #0]
 8006f3a:	8193      	strh	r3, [r2, #12]
    Paint.WidthByte = Width;
 8006f3c:	4a17      	ldr	r2, [pc, #92]	@ (8006f9c <Paint_NewImage+0x90>)
 8006f3e:	88fb      	ldrh	r3, [r7, #6]
 8006f40:	8253      	strh	r3, [r2, #18]
    Paint.HeightByte = Height;    
 8006f42:	4a16      	ldr	r2, [pc, #88]	@ (8006f9c <Paint_NewImage+0x90>)
 8006f44:	88bb      	ldrh	r3, [r7, #4]
 8006f46:	8293      	strh	r3, [r2, #20]
    printf("WidthByte = %d, HeightByte = %d\r\n", Paint.WidthByte, Paint.HeightByte);
 8006f48:	4b14      	ldr	r3, [pc, #80]	@ (8006f9c <Paint_NewImage+0x90>)
 8006f4a:	8a5b      	ldrh	r3, [r3, #18]
 8006f4c:	b29b      	uxth	r3, r3
 8006f4e:	4619      	mov	r1, r3
 8006f50:	4b12      	ldr	r3, [pc, #72]	@ (8006f9c <Paint_NewImage+0x90>)
 8006f52:	8a9b      	ldrh	r3, [r3, #20]
 8006f54:	b29b      	uxth	r3, r3
 8006f56:	461a      	mov	r2, r3
 8006f58:	4811      	ldr	r0, [pc, #68]	@ (8006fa0 <Paint_NewImage+0x94>)
 8006f5a:	f000 fdfb 	bl	8007b54 <iprintf>
   
    Paint.Rotate = Rotate;
 8006f5e:	4a0f      	ldr	r2, [pc, #60]	@ (8006f9c <Paint_NewImage+0x90>)
 8006f60:	887b      	ldrh	r3, [r7, #2]
 8006f62:	81d3      	strh	r3, [r2, #14]
    Paint.Mirror = MIRROR_NONE;
 8006f64:	4b0d      	ldr	r3, [pc, #52]	@ (8006f9c <Paint_NewImage+0x90>)
 8006f66:	2200      	movs	r2, #0
 8006f68:	821a      	strh	r2, [r3, #16]
    
    if(Rotate == ROTATE_0 || Rotate == ROTATE_180) {
 8006f6a:	887b      	ldrh	r3, [r7, #2]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d002      	beq.n	8006f76 <Paint_NewImage+0x6a>
 8006f70:	887b      	ldrh	r3, [r7, #2]
 8006f72:	2bb4      	cmp	r3, #180	@ 0xb4
 8006f74:	d106      	bne.n	8006f84 <Paint_NewImage+0x78>
        Paint.Width = Width;
 8006f76:	4a09      	ldr	r2, [pc, #36]	@ (8006f9c <Paint_NewImage+0x90>)
 8006f78:	88fb      	ldrh	r3, [r7, #6]
 8006f7a:	8093      	strh	r3, [r2, #4]
        Paint.Height = Height;
 8006f7c:	4a07      	ldr	r2, [pc, #28]	@ (8006f9c <Paint_NewImage+0x90>)
 8006f7e:	88bb      	ldrh	r3, [r7, #4]
 8006f80:	80d3      	strh	r3, [r2, #6]
 8006f82:	e006      	b.n	8006f92 <Paint_NewImage+0x86>
    } else {
        Paint.Width = Height;
 8006f84:	4a05      	ldr	r2, [pc, #20]	@ (8006f9c <Paint_NewImage+0x90>)
 8006f86:	88bb      	ldrh	r3, [r7, #4]
 8006f88:	8093      	strh	r3, [r2, #4]
        Paint.Height = Width;
 8006f8a:	4a04      	ldr	r2, [pc, #16]	@ (8006f9c <Paint_NewImage+0x90>)
 8006f8c:	88fb      	ldrh	r3, [r7, #6]
 8006f8e:	80d3      	strh	r3, [r2, #6]
    }
}
 8006f90:	bf00      	nop
 8006f92:	bf00      	nop
 8006f94:	370c      	adds	r7, #12
 8006f96:	46bd      	mov	sp, r7
 8006f98:	bd90      	pop	{r4, r7, pc}
 8006f9a:	bf00      	nop
 8006f9c:	2000034c 	.word	0x2000034c
 8006fa0:	08008c5c 	.word	0x08008c5c

08006fa4 <Paint_SetClearFuntion>:
function:	Select Clear Funtion
parameter:
      Clear :   Pointer to Clear funtion 
******************************************************************************/
void Paint_SetClearFuntion(void (*Clear)(UWORD))
{
 8006fa4:	b480      	push	{r7}
 8006fa6:	b083      	sub	sp, #12
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
  CLEAR=Clear;
 8006fac:	4a04      	ldr	r2, [pc, #16]	@ (8006fc0 <Paint_SetClearFuntion+0x1c>)
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	6013      	str	r3, [r2, #0]
}
 8006fb2:	bf00      	nop
 8006fb4:	370c      	adds	r7, #12
 8006fb6:	46bd      	mov	sp, r7
 8006fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fbc:	4770      	bx	lr
 8006fbe:	bf00      	nop
 8006fc0:	20000368 	.word	0x20000368

08006fc4 <Paint_SetDisplayFuntion>:
function:	Select DisplayF untion
parameter:
      Display :   Pointer to display funtion 
******************************************************************************/
void Paint_SetDisplayFuntion(void (*Display)(UWORD,UWORD,UWORD))
{
 8006fc4:	b480      	push	{r7}
 8006fc6:	b083      	sub	sp, #12
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	6078      	str	r0, [r7, #4]
  DISPLAY=Display;
 8006fcc:	4a04      	ldr	r2, [pc, #16]	@ (8006fe0 <Paint_SetDisplayFuntion+0x1c>)
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	6013      	str	r3, [r2, #0]
}
 8006fd2:	bf00      	nop
 8006fd4:	370c      	adds	r7, #12
 8006fd6:	46bd      	mov	sp, r7
 8006fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fdc:	4770      	bx	lr
 8006fde:	bf00      	nop
 8006fe0:	20000364 	.word	0x20000364

08006fe4 <Paint_SetRotate>:
function:	Select Image Rotate
parameter:
    Rotate   :   0,90,180,270
******************************************************************************/
void Paint_SetRotate(UWORD Rotate)
{
 8006fe4:	b580      	push	{r7, lr}
 8006fe6:	b082      	sub	sp, #8
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	4603      	mov	r3, r0
 8006fec:	80fb      	strh	r3, [r7, #6]
    if(Rotate == ROTATE_0 || Rotate == ROTATE_90 || Rotate == ROTATE_180 || Rotate == ROTATE_270) {
 8006fee:	88fb      	ldrh	r3, [r7, #6]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d009      	beq.n	8007008 <Paint_SetRotate+0x24>
 8006ff4:	88fb      	ldrh	r3, [r7, #6]
 8006ff6:	2b5a      	cmp	r3, #90	@ 0x5a
 8006ff8:	d006      	beq.n	8007008 <Paint_SetRotate+0x24>
 8006ffa:	88fb      	ldrh	r3, [r7, #6]
 8006ffc:	2bb4      	cmp	r3, #180	@ 0xb4
 8006ffe:	d003      	beq.n	8007008 <Paint_SetRotate+0x24>
 8007000:	88fb      	ldrh	r3, [r7, #6]
 8007002:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 8007006:	d108      	bne.n	800701a <Paint_SetRotate+0x36>
        Debug("Set image Rotate %d\r\n", Rotate);
 8007008:	88fb      	ldrh	r3, [r7, #6]
 800700a:	4619      	mov	r1, r3
 800700c:	4807      	ldr	r0, [pc, #28]	@ (800702c <Paint_SetRotate+0x48>)
 800700e:	f000 fda1 	bl	8007b54 <iprintf>
        Paint.Rotate = Rotate;
 8007012:	4a07      	ldr	r2, [pc, #28]	@ (8007030 <Paint_SetRotate+0x4c>)
 8007014:	88fb      	ldrh	r3, [r7, #6]
 8007016:	81d3      	strh	r3, [r2, #14]
 8007018:	e003      	b.n	8007022 <Paint_SetRotate+0x3e>
    } else {
        Debug("rotate = 0, 90, 180, 270\r\n");
 800701a:	4806      	ldr	r0, [pc, #24]	@ (8007034 <Paint_SetRotate+0x50>)
 800701c:	f000 fe02 	bl	8007c24 <puts>
      //  exit(0);
    }
}
 8007020:	bf00      	nop
 8007022:	bf00      	nop
 8007024:	3708      	adds	r7, #8
 8007026:	46bd      	mov	sp, r7
 8007028:	bd80      	pop	{r7, pc}
 800702a:	bf00      	nop
 800702c:	08008c80 	.word	0x08008c80
 8007030:	2000034c 	.word	0x2000034c
 8007034:	08008ca0 	.word	0x08008ca0

08007038 <Paint_SetPixel>:
    Xpoint  :   At point X
    Ypoint  :   At point Y
    Color   :   Painted colors
******************************************************************************/
void Paint_SetPixel(UWORD Xpoint, UWORD Ypoint, UWORD Color)
{
 8007038:	b580      	push	{r7, lr}
 800703a:	b084      	sub	sp, #16
 800703c:	af00      	add	r7, sp, #0
 800703e:	4603      	mov	r3, r0
 8007040:	80fb      	strh	r3, [r7, #6]
 8007042:	460b      	mov	r3, r1
 8007044:	80bb      	strh	r3, [r7, #4]
 8007046:	4613      	mov	r3, r2
 8007048:	807b      	strh	r3, [r7, #2]
    if(Xpoint > Paint.Width || Ypoint > Paint.Height){
 800704a:	4b50      	ldr	r3, [pc, #320]	@ (800718c <Paint_SetPixel+0x154>)
 800704c:	889b      	ldrh	r3, [r3, #4]
 800704e:	b29b      	uxth	r3, r3
 8007050:	88fa      	ldrh	r2, [r7, #6]
 8007052:	429a      	cmp	r2, r3
 8007054:	d805      	bhi.n	8007062 <Paint_SetPixel+0x2a>
 8007056:	4b4d      	ldr	r3, [pc, #308]	@ (800718c <Paint_SetPixel+0x154>)
 8007058:	88db      	ldrh	r3, [r3, #6]
 800705a:	b29b      	uxth	r3, r3
 800705c:	88ba      	ldrh	r2, [r7, #4]
 800705e:	429a      	cmp	r2, r3
 8007060:	d903      	bls.n	800706a <Paint_SetPixel+0x32>
        Debug("Exceeding display boundaries\r\n");
 8007062:	484b      	ldr	r0, [pc, #300]	@ (8007190 <Paint_SetPixel+0x158>)
 8007064:	f000 fdde 	bl	8007c24 <puts>
        return;
 8007068:	e08c      	b.n	8007184 <Paint_SetPixel+0x14c>
    }      
    UWORD X, Y;

    switch(Paint.Rotate) {
 800706a:	4b48      	ldr	r3, [pc, #288]	@ (800718c <Paint_SetPixel+0x154>)
 800706c:	89db      	ldrh	r3, [r3, #14]
 800706e:	b29b      	uxth	r3, r3
 8007070:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 8007074:	d02d      	beq.n	80070d2 <Paint_SetPixel+0x9a>
 8007076:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 800707a:	f300 8080 	bgt.w	800717e <Paint_SetPixel+0x146>
 800707e:	2bb4      	cmp	r3, #180	@ 0xb4
 8007080:	d016      	beq.n	80070b0 <Paint_SetPixel+0x78>
 8007082:	2bb4      	cmp	r3, #180	@ 0xb4
 8007084:	dc7b      	bgt.n	800717e <Paint_SetPixel+0x146>
 8007086:	2b00      	cmp	r3, #0
 8007088:	d002      	beq.n	8007090 <Paint_SetPixel+0x58>
 800708a:	2b5a      	cmp	r3, #90	@ 0x5a
 800708c:	d005      	beq.n	800709a <Paint_SetPixel+0x62>
        X = Ypoint;
        Y = Paint.HeightMemory - Xpoint - 1;
        break;

    default:
        return;
 800708e:	e076      	b.n	800717e <Paint_SetPixel+0x146>
        X = Xpoint;
 8007090:	88fb      	ldrh	r3, [r7, #6]
 8007092:	81fb      	strh	r3, [r7, #14]
        Y = Ypoint;  
 8007094:	88bb      	ldrh	r3, [r7, #4]
 8007096:	81bb      	strh	r3, [r7, #12]
        break;
 8007098:	e026      	b.n	80070e8 <Paint_SetPixel+0xb0>
        X = Paint.WidthMemory - Ypoint - 1;
 800709a:	4b3c      	ldr	r3, [pc, #240]	@ (800718c <Paint_SetPixel+0x154>)
 800709c:	891b      	ldrh	r3, [r3, #8]
 800709e:	b29a      	uxth	r2, r3
 80070a0:	88bb      	ldrh	r3, [r7, #4]
 80070a2:	1ad3      	subs	r3, r2, r3
 80070a4:	b29b      	uxth	r3, r3
 80070a6:	3b01      	subs	r3, #1
 80070a8:	81fb      	strh	r3, [r7, #14]
        Y = Xpoint;
 80070aa:	88fb      	ldrh	r3, [r7, #6]
 80070ac:	81bb      	strh	r3, [r7, #12]
        break;
 80070ae:	e01b      	b.n	80070e8 <Paint_SetPixel+0xb0>
        X = Paint.WidthMemory - Xpoint - 1;
 80070b0:	4b36      	ldr	r3, [pc, #216]	@ (800718c <Paint_SetPixel+0x154>)
 80070b2:	891b      	ldrh	r3, [r3, #8]
 80070b4:	b29a      	uxth	r2, r3
 80070b6:	88fb      	ldrh	r3, [r7, #6]
 80070b8:	1ad3      	subs	r3, r2, r3
 80070ba:	b29b      	uxth	r3, r3
 80070bc:	3b01      	subs	r3, #1
 80070be:	81fb      	strh	r3, [r7, #14]
        Y = Paint.HeightMemory - Ypoint - 1;
 80070c0:	4b32      	ldr	r3, [pc, #200]	@ (800718c <Paint_SetPixel+0x154>)
 80070c2:	895b      	ldrh	r3, [r3, #10]
 80070c4:	b29a      	uxth	r2, r3
 80070c6:	88bb      	ldrh	r3, [r7, #4]
 80070c8:	1ad3      	subs	r3, r2, r3
 80070ca:	b29b      	uxth	r3, r3
 80070cc:	3b01      	subs	r3, #1
 80070ce:	81bb      	strh	r3, [r7, #12]
        break;
 80070d0:	e00a      	b.n	80070e8 <Paint_SetPixel+0xb0>
        X = Ypoint;
 80070d2:	88bb      	ldrh	r3, [r7, #4]
 80070d4:	81fb      	strh	r3, [r7, #14]
        Y = Paint.HeightMemory - Xpoint - 1;
 80070d6:	4b2d      	ldr	r3, [pc, #180]	@ (800718c <Paint_SetPixel+0x154>)
 80070d8:	895b      	ldrh	r3, [r3, #10]
 80070da:	b29a      	uxth	r2, r3
 80070dc:	88fb      	ldrh	r3, [r7, #6]
 80070de:	1ad3      	subs	r3, r2, r3
 80070e0:	b29b      	uxth	r3, r3
 80070e2:	3b01      	subs	r3, #1
 80070e4:	81bb      	strh	r3, [r7, #12]
        break;
 80070e6:	bf00      	nop
    }
    
    switch(Paint.Mirror) {
 80070e8:	4b28      	ldr	r3, [pc, #160]	@ (800718c <Paint_SetPixel+0x154>)
 80070ea:	8a1b      	ldrh	r3, [r3, #16]
 80070ec:	b29b      	uxth	r3, r3
 80070ee:	2b03      	cmp	r3, #3
 80070f0:	d847      	bhi.n	8007182 <Paint_SetPixel+0x14a>
 80070f2:	a201      	add	r2, pc, #4	@ (adr r2, 80070f8 <Paint_SetPixel+0xc0>)
 80070f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070f8:	0800714f 	.word	0x0800714f
 80070fc:	08007109 	.word	0x08007109
 8007100:	0800711b 	.word	0x0800711b
 8007104:	0800712d 	.word	0x0800712d
    case MIRROR_NONE:
        break;
    case MIRROR_HORIZONTAL:
        X = Paint.WidthMemory - X - 1;
 8007108:	4b20      	ldr	r3, [pc, #128]	@ (800718c <Paint_SetPixel+0x154>)
 800710a:	891b      	ldrh	r3, [r3, #8]
 800710c:	b29a      	uxth	r2, r3
 800710e:	89fb      	ldrh	r3, [r7, #14]
 8007110:	1ad3      	subs	r3, r2, r3
 8007112:	b29b      	uxth	r3, r3
 8007114:	3b01      	subs	r3, #1
 8007116:	81fb      	strh	r3, [r7, #14]
        break;
 8007118:	e01a      	b.n	8007150 <Paint_SetPixel+0x118>
    case MIRROR_VERTICAL:
        Y = Paint.HeightMemory - Y - 1;
 800711a:	4b1c      	ldr	r3, [pc, #112]	@ (800718c <Paint_SetPixel+0x154>)
 800711c:	895b      	ldrh	r3, [r3, #10]
 800711e:	b29a      	uxth	r2, r3
 8007120:	89bb      	ldrh	r3, [r7, #12]
 8007122:	1ad3      	subs	r3, r2, r3
 8007124:	b29b      	uxth	r3, r3
 8007126:	3b01      	subs	r3, #1
 8007128:	81bb      	strh	r3, [r7, #12]
        break;
 800712a:	e011      	b.n	8007150 <Paint_SetPixel+0x118>
    case MIRROR_ORIGIN:
        X = Paint.WidthMemory - X - 1;
 800712c:	4b17      	ldr	r3, [pc, #92]	@ (800718c <Paint_SetPixel+0x154>)
 800712e:	891b      	ldrh	r3, [r3, #8]
 8007130:	b29a      	uxth	r2, r3
 8007132:	89fb      	ldrh	r3, [r7, #14]
 8007134:	1ad3      	subs	r3, r2, r3
 8007136:	b29b      	uxth	r3, r3
 8007138:	3b01      	subs	r3, #1
 800713a:	81fb      	strh	r3, [r7, #14]
        Y = Paint.HeightMemory - Y - 1;
 800713c:	4b13      	ldr	r3, [pc, #76]	@ (800718c <Paint_SetPixel+0x154>)
 800713e:	895b      	ldrh	r3, [r3, #10]
 8007140:	b29a      	uxth	r2, r3
 8007142:	89bb      	ldrh	r3, [r7, #12]
 8007144:	1ad3      	subs	r3, r2, r3
 8007146:	b29b      	uxth	r3, r3
 8007148:	3b01      	subs	r3, #1
 800714a:	81bb      	strh	r3, [r7, #12]
        break;
 800714c:	e000      	b.n	8007150 <Paint_SetPixel+0x118>
        break;
 800714e:	bf00      	nop
    default:
        return;
    }

    // printf("x = %d, y = %d\r\n", X, Y);
    if(X > Paint.WidthMemory || Y > Paint.HeightMemory){
 8007150:	4b0e      	ldr	r3, [pc, #56]	@ (800718c <Paint_SetPixel+0x154>)
 8007152:	891b      	ldrh	r3, [r3, #8]
 8007154:	b29b      	uxth	r3, r3
 8007156:	89fa      	ldrh	r2, [r7, #14]
 8007158:	429a      	cmp	r2, r3
 800715a:	d805      	bhi.n	8007168 <Paint_SetPixel+0x130>
 800715c:	4b0b      	ldr	r3, [pc, #44]	@ (800718c <Paint_SetPixel+0x154>)
 800715e:	895b      	ldrh	r3, [r3, #10]
 8007160:	b29b      	uxth	r3, r3
 8007162:	89ba      	ldrh	r2, [r7, #12]
 8007164:	429a      	cmp	r2, r3
 8007166:	d903      	bls.n	8007170 <Paint_SetPixel+0x138>
        Debug("Exceeding display boundaries\r\n");
 8007168:	4809      	ldr	r0, [pc, #36]	@ (8007190 <Paint_SetPixel+0x158>)
 800716a:	f000 fd5b 	bl	8007c24 <puts>
        return;
 800716e:	e009      	b.n	8007184 <Paint_SetPixel+0x14c>
    }
    
   // UDOUBLE Addr = X / 8 + Y * Paint.WidthByte;
		DISPLAY(X,Y, Color);
 8007170:	4b08      	ldr	r3, [pc, #32]	@ (8007194 <Paint_SetPixel+0x15c>)
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	887a      	ldrh	r2, [r7, #2]
 8007176:	89b9      	ldrh	r1, [r7, #12]
 8007178:	89f8      	ldrh	r0, [r7, #14]
 800717a:	4798      	blx	r3
 800717c:	e002      	b.n	8007184 <Paint_SetPixel+0x14c>
        return;
 800717e:	bf00      	nop
 8007180:	e000      	b.n	8007184 <Paint_SetPixel+0x14c>
        return;
 8007182:	bf00      	nop
}
 8007184:	3710      	adds	r7, #16
 8007186:	46bd      	mov	sp, r7
 8007188:	bd80      	pop	{r7, pc}
 800718a:	bf00      	nop
 800718c:	2000034c 	.word	0x2000034c
 8007190:	08008d5c 	.word	0x08008d5c
 8007194:	20000364 	.word	0x20000364

08007198 <Paint_Clear>:
function:	Clear the color of the picture
parameter:
    Color   :   Painted colors
******************************************************************************/
void Paint_Clear(UWORD Color)
{	
 8007198:	b580      	push	{r7, lr}
 800719a:	b082      	sub	sp, #8
 800719c:	af00      	add	r7, sp, #0
 800719e:	4603      	mov	r3, r0
 80071a0:	80fb      	strh	r3, [r7, #6]
	CLEAR(Color);
 80071a2:	4b04      	ldr	r3, [pc, #16]	@ (80071b4 <Paint_Clear+0x1c>)
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	88fa      	ldrh	r2, [r7, #6]
 80071a8:	4610      	mov	r0, r2
 80071aa:	4798      	blx	r3
}
 80071ac:	bf00      	nop
 80071ae:	3708      	adds	r7, #8
 80071b0:	46bd      	mov	sp, r7
 80071b2:	bd80      	pop	{r7, pc}
 80071b4:	20000368 	.word	0x20000368

080071b8 <Paint_DrawChar>:
    Color_Background : Select the background color of the English character
    Color_Foreground : Select the foreground color of the English character
******************************************************************************/
void Paint_DrawChar(UWORD Xpoint, UWORD Ypoint, const char Acsii_Char,
                    sFONT* Font, UWORD Color_Background, UWORD Color_Foreground)
{
 80071b8:	b580      	push	{r7, lr}
 80071ba:	b088      	sub	sp, #32
 80071bc:	af00      	add	r7, sp, #0
 80071be:	607b      	str	r3, [r7, #4]
 80071c0:	4603      	mov	r3, r0
 80071c2:	81fb      	strh	r3, [r7, #14]
 80071c4:	460b      	mov	r3, r1
 80071c6:	81bb      	strh	r3, [r7, #12]
 80071c8:	4613      	mov	r3, r2
 80071ca:	72fb      	strb	r3, [r7, #11]
    UWORD Page, Column;

    if (Xpoint > Paint.Width || Ypoint > Paint.Height) {
 80071cc:	4b4e      	ldr	r3, [pc, #312]	@ (8007308 <Paint_DrawChar+0x150>)
 80071ce:	889b      	ldrh	r3, [r3, #4]
 80071d0:	b29b      	uxth	r3, r3
 80071d2:	89fa      	ldrh	r2, [r7, #14]
 80071d4:	429a      	cmp	r2, r3
 80071d6:	d805      	bhi.n	80071e4 <Paint_DrawChar+0x2c>
 80071d8:	4b4b      	ldr	r3, [pc, #300]	@ (8007308 <Paint_DrawChar+0x150>)
 80071da:	88db      	ldrh	r3, [r3, #6]
 80071dc:	b29b      	uxth	r3, r3
 80071de:	89ba      	ldrh	r2, [r7, #12]
 80071e0:	429a      	cmp	r2, r3
 80071e2:	d903      	bls.n	80071ec <Paint_DrawChar+0x34>
        Debug("Paint_DrawChar Input exceeds the normal display range\r\n");
 80071e4:	4849      	ldr	r0, [pc, #292]	@ (800730c <Paint_DrawChar+0x154>)
 80071e6:	f000 fd1d 	bl	8007c24 <puts>
        return;
 80071ea:	e089      	b.n	8007300 <Paint_DrawChar+0x148>
    }

    uint32_t Char_Offset = (Acsii_Char - ' ') * Font->Height * (Font->Width / 8 + (Font->Width % 8 ? 1 : 0));
 80071ec:	7afb      	ldrb	r3, [r7, #11]
 80071ee:	3b20      	subs	r3, #32
 80071f0:	687a      	ldr	r2, [r7, #4]
 80071f2:	88d2      	ldrh	r2, [r2, #6]
 80071f4:	fb02 f303 	mul.w	r3, r2, r3
 80071f8:	687a      	ldr	r2, [r7, #4]
 80071fa:	8892      	ldrh	r2, [r2, #4]
 80071fc:	08d2      	lsrs	r2, r2, #3
 80071fe:	b292      	uxth	r2, r2
 8007200:	4611      	mov	r1, r2
 8007202:	687a      	ldr	r2, [r7, #4]
 8007204:	8892      	ldrh	r2, [r2, #4]
 8007206:	f002 0207 	and.w	r2, r2, #7
 800720a:	b292      	uxth	r2, r2
 800720c:	2a00      	cmp	r2, #0
 800720e:	bf14      	ite	ne
 8007210:	2201      	movne	r2, #1
 8007212:	2200      	moveq	r2, #0
 8007214:	b2d2      	uxtb	r2, r2
 8007216:	440a      	add	r2, r1
 8007218:	fb02 f303 	mul.w	r3, r2, r3
 800721c:	617b      	str	r3, [r7, #20]
    const unsigned char *ptr = &Font->table[Char_Offset];
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681a      	ldr	r2, [r3, #0]
 8007222:	697b      	ldr	r3, [r7, #20]
 8007224:	4413      	add	r3, r2
 8007226:	61bb      	str	r3, [r7, #24]

    for (Page = 0; Page < Font->Height; Page ++ ) {
 8007228:	2300      	movs	r3, #0
 800722a:	83fb      	strh	r3, [r7, #30]
 800722c:	e063      	b.n	80072f6 <Paint_DrawChar+0x13e>
        for (Column = 0; Column < Font->Width; Column ++ ) {
 800722e:	2300      	movs	r3, #0
 8007230:	83bb      	strh	r3, [r7, #28]
 8007232:	e04e      	b.n	80072d2 <Paint_DrawChar+0x11a>

            //To determine whether the font background color and screen background color is consistent
            if (FONT_BACKGROUND == Color_Background) { //this process is to speed up the scan
 8007234:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8007236:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800723a:	4293      	cmp	r3, r2
 800723c:	d118      	bne.n	8007270 <Paint_DrawChar+0xb8>
                if (*ptr & (0x80 >> (Column % 8)))
 800723e:	69bb      	ldr	r3, [r7, #24]
 8007240:	781b      	ldrb	r3, [r3, #0]
 8007242:	4619      	mov	r1, r3
 8007244:	8bbb      	ldrh	r3, [r7, #28]
 8007246:	f003 0307 	and.w	r3, r3, #7
 800724a:	2280      	movs	r2, #128	@ 0x80
 800724c:	fa42 f303 	asr.w	r3, r2, r3
 8007250:	400b      	ands	r3, r1
 8007252:	2b00      	cmp	r3, #0
 8007254:	d031      	beq.n	80072ba <Paint_DrawChar+0x102>
                    Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Foreground);
 8007256:	89fa      	ldrh	r2, [r7, #14]
 8007258:	8bbb      	ldrh	r3, [r7, #28]
 800725a:	4413      	add	r3, r2
 800725c:	b298      	uxth	r0, r3
 800725e:	89ba      	ldrh	r2, [r7, #12]
 8007260:	8bfb      	ldrh	r3, [r7, #30]
 8007262:	4413      	add	r3, r2
 8007264:	b29b      	uxth	r3, r3
 8007266:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8007268:	4619      	mov	r1, r3
 800726a:	f7ff fee5 	bl	8007038 <Paint_SetPixel>
 800726e:	e024      	b.n	80072ba <Paint_DrawChar+0x102>
                    // Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Foreground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
            } else {
                if (*ptr & (0x80 >> (Column % 8))) {
 8007270:	69bb      	ldr	r3, [r7, #24]
 8007272:	781b      	ldrb	r3, [r3, #0]
 8007274:	4619      	mov	r1, r3
 8007276:	8bbb      	ldrh	r3, [r7, #28]
 8007278:	f003 0307 	and.w	r3, r3, #7
 800727c:	2280      	movs	r2, #128	@ 0x80
 800727e:	fa42 f303 	asr.w	r3, r2, r3
 8007282:	400b      	ands	r3, r1
 8007284:	2b00      	cmp	r3, #0
 8007286:	d00c      	beq.n	80072a2 <Paint_DrawChar+0xea>
                    Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Foreground);
 8007288:	89fa      	ldrh	r2, [r7, #14]
 800728a:	8bbb      	ldrh	r3, [r7, #28]
 800728c:	4413      	add	r3, r2
 800728e:	b298      	uxth	r0, r3
 8007290:	89ba      	ldrh	r2, [r7, #12]
 8007292:	8bfb      	ldrh	r3, [r7, #30]
 8007294:	4413      	add	r3, r2
 8007296:	b29b      	uxth	r3, r3
 8007298:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 800729a:	4619      	mov	r1, r3
 800729c:	f7ff fecc 	bl	8007038 <Paint_SetPixel>
 80072a0:	e00b      	b.n	80072ba <Paint_DrawChar+0x102>
                    // Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Foreground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
                } else {
                    Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Background);
 80072a2:	89fa      	ldrh	r2, [r7, #14]
 80072a4:	8bbb      	ldrh	r3, [r7, #28]
 80072a6:	4413      	add	r3, r2
 80072a8:	b298      	uxth	r0, r3
 80072aa:	89ba      	ldrh	r2, [r7, #12]
 80072ac:	8bfb      	ldrh	r3, [r7, #30]
 80072ae:	4413      	add	r3, r2
 80072b0:	b29b      	uxth	r3, r3
 80072b2:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80072b4:	4619      	mov	r1, r3
 80072b6:	f7ff febf 	bl	8007038 <Paint_SetPixel>
                    // Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Background, DOT_PIXEL_DFT, DOT_STYLE_DFT);
                }
            }
            //One pixel is 8 bits
            if (Column % 8 == 7)
 80072ba:	8bbb      	ldrh	r3, [r7, #28]
 80072bc:	f003 0307 	and.w	r3, r3, #7
 80072c0:	b29b      	uxth	r3, r3
 80072c2:	2b07      	cmp	r3, #7
 80072c4:	d102      	bne.n	80072cc <Paint_DrawChar+0x114>
                ptr++;
 80072c6:	69bb      	ldr	r3, [r7, #24]
 80072c8:	3301      	adds	r3, #1
 80072ca:	61bb      	str	r3, [r7, #24]
        for (Column = 0; Column < Font->Width; Column ++ ) {
 80072cc:	8bbb      	ldrh	r3, [r7, #28]
 80072ce:	3301      	adds	r3, #1
 80072d0:	83bb      	strh	r3, [r7, #28]
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	889b      	ldrh	r3, [r3, #4]
 80072d6:	8bba      	ldrh	r2, [r7, #28]
 80072d8:	429a      	cmp	r2, r3
 80072da:	d3ab      	bcc.n	8007234 <Paint_DrawChar+0x7c>
        }// Write a line
        if (Font->Width % 8 != 0)
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	889b      	ldrh	r3, [r3, #4]
 80072e0:	f003 0307 	and.w	r3, r3, #7
 80072e4:	b29b      	uxth	r3, r3
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d002      	beq.n	80072f0 <Paint_DrawChar+0x138>
            ptr++;
 80072ea:	69bb      	ldr	r3, [r7, #24]
 80072ec:	3301      	adds	r3, #1
 80072ee:	61bb      	str	r3, [r7, #24]
    for (Page = 0; Page < Font->Height; Page ++ ) {
 80072f0:	8bfb      	ldrh	r3, [r7, #30]
 80072f2:	3301      	adds	r3, #1
 80072f4:	83fb      	strh	r3, [r7, #30]
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	88db      	ldrh	r3, [r3, #6]
 80072fa:	8bfa      	ldrh	r2, [r7, #30]
 80072fc:	429a      	cmp	r2, r3
 80072fe:	d396      	bcc.n	800722e <Paint_DrawChar+0x76>
    }// Write all
}
 8007300:	3720      	adds	r7, #32
 8007302:	46bd      	mov	sp, r7
 8007304:	bd80      	pop	{r7, pc}
 8007306:	bf00      	nop
 8007308:	2000034c 	.word	0x2000034c
 800730c:	08008e78 	.word	0x08008e78

08007310 <Paint_DrawString_EN>:
    Color_Background : Select the background color of the English character
    Color_Foreground : Select the foreground color of the English character
******************************************************************************/
void Paint_DrawString_EN(UWORD Xstart, UWORD Ystart, const char * pString,
                         sFONT* Font, UWORD Color_Background, UWORD Color_Foreground )
{
 8007310:	b580      	push	{r7, lr}
 8007312:	b088      	sub	sp, #32
 8007314:	af02      	add	r7, sp, #8
 8007316:	60ba      	str	r2, [r7, #8]
 8007318:	607b      	str	r3, [r7, #4]
 800731a:	4603      	mov	r3, r0
 800731c:	81fb      	strh	r3, [r7, #14]
 800731e:	460b      	mov	r3, r1
 8007320:	81bb      	strh	r3, [r7, #12]
    UWORD Xpoint = Xstart;
 8007322:	89fb      	ldrh	r3, [r7, #14]
 8007324:	82fb      	strh	r3, [r7, #22]
    UWORD Ypoint = Ystart;
 8007326:	89bb      	ldrh	r3, [r7, #12]
 8007328:	82bb      	strh	r3, [r7, #20]

    if (Xstart > Paint.Width || Ystart > Paint.Height) {
 800732a:	4b23      	ldr	r3, [pc, #140]	@ (80073b8 <Paint_DrawString_EN+0xa8>)
 800732c:	889b      	ldrh	r3, [r3, #4]
 800732e:	b29b      	uxth	r3, r3
 8007330:	89fa      	ldrh	r2, [r7, #14]
 8007332:	429a      	cmp	r2, r3
 8007334:	d805      	bhi.n	8007342 <Paint_DrawString_EN+0x32>
 8007336:	4b20      	ldr	r3, [pc, #128]	@ (80073b8 <Paint_DrawString_EN+0xa8>)
 8007338:	88db      	ldrh	r3, [r3, #6]
 800733a:	b29b      	uxth	r3, r3
 800733c:	89ba      	ldrh	r2, [r7, #12]
 800733e:	429a      	cmp	r2, r3
 8007340:	d933      	bls.n	80073aa <Paint_DrawString_EN+0x9a>
        Debug("Paint_DrawString_EN Input exceeds the normal display range\r\n");
 8007342:	481e      	ldr	r0, [pc, #120]	@ (80073bc <Paint_DrawString_EN+0xac>)
 8007344:	f000 fc6e 	bl	8007c24 <puts>
        return;
 8007348:	e033      	b.n	80073b2 <Paint_DrawString_EN+0xa2>
    }

    while (* pString != '\0') {
        //if X direction filled , reposition to(Xstart,Ypoint),Ypoint is Y direction plus the Height of the character
        if ((Xpoint + Font->Width ) > Paint.Width ) {
 800734a:	8afb      	ldrh	r3, [r7, #22]
 800734c:	687a      	ldr	r2, [r7, #4]
 800734e:	8892      	ldrh	r2, [r2, #4]
 8007350:	4413      	add	r3, r2
 8007352:	4a19      	ldr	r2, [pc, #100]	@ (80073b8 <Paint_DrawString_EN+0xa8>)
 8007354:	8892      	ldrh	r2, [r2, #4]
 8007356:	b292      	uxth	r2, r2
 8007358:	4293      	cmp	r3, r2
 800735a:	dd06      	ble.n	800736a <Paint_DrawString_EN+0x5a>
            Xpoint = Xstart;
 800735c:	89fb      	ldrh	r3, [r7, #14]
 800735e:	82fb      	strh	r3, [r7, #22]
            Ypoint += Font->Height;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	88da      	ldrh	r2, [r3, #6]
 8007364:	8abb      	ldrh	r3, [r7, #20]
 8007366:	4413      	add	r3, r2
 8007368:	82bb      	strh	r3, [r7, #20]
        }

        // If the Y direction is full, reposition to(Xstart, Ystart)
        if ((Ypoint  + Font->Height ) > Paint.Height ) {
 800736a:	8abb      	ldrh	r3, [r7, #20]
 800736c:	687a      	ldr	r2, [r7, #4]
 800736e:	88d2      	ldrh	r2, [r2, #6]
 8007370:	4413      	add	r3, r2
 8007372:	4a11      	ldr	r2, [pc, #68]	@ (80073b8 <Paint_DrawString_EN+0xa8>)
 8007374:	88d2      	ldrh	r2, [r2, #6]
 8007376:	b292      	uxth	r2, r2
 8007378:	4293      	cmp	r3, r2
 800737a:	dd03      	ble.n	8007384 <Paint_DrawString_EN+0x74>
            Xpoint = Xstart;
 800737c:	89fb      	ldrh	r3, [r7, #14]
 800737e:	82fb      	strh	r3, [r7, #22]
            Ypoint = Ystart;
 8007380:	89bb      	ldrh	r3, [r7, #12]
 8007382:	82bb      	strh	r3, [r7, #20]
        }
        Paint_DrawChar(Xpoint, Ypoint, * pString, Font, Color_Background, Color_Foreground);
 8007384:	68bb      	ldr	r3, [r7, #8]
 8007386:	781a      	ldrb	r2, [r3, #0]
 8007388:	8ab9      	ldrh	r1, [r7, #20]
 800738a:	8af8      	ldrh	r0, [r7, #22]
 800738c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800738e:	9301      	str	r3, [sp, #4]
 8007390:	8c3b      	ldrh	r3, [r7, #32]
 8007392:	9300      	str	r3, [sp, #0]
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	f7ff ff0f 	bl	80071b8 <Paint_DrawChar>

        //The next character of the address
        pString ++;
 800739a:	68bb      	ldr	r3, [r7, #8]
 800739c:	3301      	adds	r3, #1
 800739e:	60bb      	str	r3, [r7, #8]

        //The next word of the abscissa increases the font of the broadband
        Xpoint += Font->Width;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	889a      	ldrh	r2, [r3, #4]
 80073a4:	8afb      	ldrh	r3, [r7, #22]
 80073a6:	4413      	add	r3, r2
 80073a8:	82fb      	strh	r3, [r7, #22]
    while (* pString != '\0') {
 80073aa:	68bb      	ldr	r3, [r7, #8]
 80073ac:	781b      	ldrb	r3, [r3, #0]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d1cb      	bne.n	800734a <Paint_DrawString_EN+0x3a>
    }
}
 80073b2:	3718      	adds	r7, #24
 80073b4:	46bd      	mov	sp, r7
 80073b6:	bd80      	pop	{r7, pc}
 80073b8:	2000034c 	.word	0x2000034c
 80073bc:	08008eb8 	.word	0x08008eb8

080073c0 <LCD_2IN_Reset>:
/*******************************************************************************
function:
	Hardware reset
*******************************************************************************/
static void LCD_2IN_Reset(void)
{
 80073c0:	b580      	push	{r7, lr}
 80073c2:	af00      	add	r7, sp, #0
	LCD_2IN_RST_1;
 80073c4:	2201      	movs	r2, #1
 80073c6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80073ca:	480d      	ldr	r0, [pc, #52]	@ (8007400 <LCD_2IN_Reset+0x40>)
 80073cc:	f7fc f91c 	bl	8003608 <HAL_GPIO_WritePin>
	DEV_Delay_ms(100);
 80073d0:	2064      	movs	r0, #100	@ 0x64
 80073d2:	f7fb fe37 	bl	8003044 <HAL_Delay>
	LCD_2IN_RST_0;
 80073d6:	2200      	movs	r2, #0
 80073d8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80073dc:	4808      	ldr	r0, [pc, #32]	@ (8007400 <LCD_2IN_Reset+0x40>)
 80073de:	f7fc f913 	bl	8003608 <HAL_GPIO_WritePin>
	DEV_Delay_ms(100);
 80073e2:	2064      	movs	r0, #100	@ 0x64
 80073e4:	f7fb fe2e 	bl	8003044 <HAL_Delay>
	LCD_2IN_RST_1;
 80073e8:	2201      	movs	r2, #1
 80073ea:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80073ee:	4804      	ldr	r0, [pc, #16]	@ (8007400 <LCD_2IN_Reset+0x40>)
 80073f0:	f7fc f90a 	bl	8003608 <HAL_GPIO_WritePin>
	DEV_Delay_ms(100);
 80073f4:	2064      	movs	r0, #100	@ 0x64
 80073f6:	f7fb fe25 	bl	8003044 <HAL_Delay>
}
 80073fa:	bf00      	nop
 80073fc:	bd80      	pop	{r7, pc}
 80073fe:	bf00      	nop
 8007400:	40020400 	.word	0x40020400

08007404 <LCD_2IN_Write_Command>:
/*******************************************************************************
function:
		Write data and commands
*******************************************************************************/
static void LCD_2IN_Write_Command(UBYTE data)	 
{	
 8007404:	b580      	push	{r7, lr}
 8007406:	b082      	sub	sp, #8
 8007408:	af00      	add	r7, sp, #0
 800740a:	4603      	mov	r3, r0
 800740c:	71fb      	strb	r3, [r7, #7]
	LCD_2IN_CS_0;
 800740e:	2200      	movs	r2, #0
 8007410:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8007414:	4808      	ldr	r0, [pc, #32]	@ (8007438 <LCD_2IN_Write_Command+0x34>)
 8007416:	f7fc f8f7 	bl	8003608 <HAL_GPIO_WritePin>
	LCD_2IN_DC_0;
 800741a:	2200      	movs	r2, #0
 800741c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8007420:	4805      	ldr	r0, [pc, #20]	@ (8007438 <LCD_2IN_Write_Command+0x34>)
 8007422:	f7fc f8f1 	bl	8003608 <HAL_GPIO_WritePin>
	DEV_SPI_WRITE(data);
 8007426:	79fb      	ldrb	r3, [r7, #7]
 8007428:	4618      	mov	r0, r3
 800742a:	f7ff fd3d 	bl	8006ea8 <DEV_SPI_WRite>
}
 800742e:	bf00      	nop
 8007430:	3708      	adds	r7, #8
 8007432:	46bd      	mov	sp, r7
 8007434:	bd80      	pop	{r7, pc}
 8007436:	bf00      	nop
 8007438:	40020400 	.word	0x40020400

0800743c <LCD_2IN_WriteData_Byte>:

static void LCD_2IN_WriteData_Byte(UBYTE data) 
{	
 800743c:	b580      	push	{r7, lr}
 800743e:	b082      	sub	sp, #8
 8007440:	af00      	add	r7, sp, #0
 8007442:	4603      	mov	r3, r0
 8007444:	71fb      	strb	r3, [r7, #7]
	LCD_2IN_CS_0;
 8007446:	2200      	movs	r2, #0
 8007448:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800744c:	480b      	ldr	r0, [pc, #44]	@ (800747c <LCD_2IN_WriteData_Byte+0x40>)
 800744e:	f7fc f8db 	bl	8003608 <HAL_GPIO_WritePin>
	LCD_2IN_DC_1;
 8007452:	2201      	movs	r2, #1
 8007454:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8007458:	4808      	ldr	r0, [pc, #32]	@ (800747c <LCD_2IN_WriteData_Byte+0x40>)
 800745a:	f7fc f8d5 	bl	8003608 <HAL_GPIO_WritePin>
	DEV_SPI_WRITE(data);  
 800745e:	79fb      	ldrb	r3, [r7, #7]
 8007460:	4618      	mov	r0, r3
 8007462:	f7ff fd21 	bl	8006ea8 <DEV_SPI_WRite>
	LCD_2IN_CS_1;
 8007466:	2201      	movs	r2, #1
 8007468:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800746c:	4803      	ldr	r0, [pc, #12]	@ (800747c <LCD_2IN_WriteData_Byte+0x40>)
 800746e:	f7fc f8cb 	bl	8003608 <HAL_GPIO_WritePin>
}  
 8007472:	bf00      	nop
 8007474:	3708      	adds	r7, #8
 8007476:	46bd      	mov	sp, r7
 8007478:	bd80      	pop	{r7, pc}
 800747a:	bf00      	nop
 800747c:	40020400 	.word	0x40020400

08007480 <LCD_2IN_WriteData_Word>:

void LCD_2IN_WriteData_Word(UWORD data)
{
 8007480:	b580      	push	{r7, lr}
 8007482:	b082      	sub	sp, #8
 8007484:	af00      	add	r7, sp, #0
 8007486:	4603      	mov	r3, r0
 8007488:	80fb      	strh	r3, [r7, #6]
	LCD_2IN_CS_0;
 800748a:	2200      	movs	r2, #0
 800748c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8007490:	480f      	ldr	r0, [pc, #60]	@ (80074d0 <LCD_2IN_WriteData_Word+0x50>)
 8007492:	f7fc f8b9 	bl	8003608 <HAL_GPIO_WritePin>
	LCD_2IN_DC_1;
 8007496:	2201      	movs	r2, #1
 8007498:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800749c:	480c      	ldr	r0, [pc, #48]	@ (80074d0 <LCD_2IN_WriteData_Word+0x50>)
 800749e:	f7fc f8b3 	bl	8003608 <HAL_GPIO_WritePin>
	DEV_SPI_WRITE((data>>8) & 0xff);
 80074a2:	88fb      	ldrh	r3, [r7, #6]
 80074a4:	0a1b      	lsrs	r3, r3, #8
 80074a6:	b29b      	uxth	r3, r3
 80074a8:	b2db      	uxtb	r3, r3
 80074aa:	4618      	mov	r0, r3
 80074ac:	f7ff fcfc 	bl	8006ea8 <DEV_SPI_WRite>
	DEV_SPI_WRITE(data);
 80074b0:	88fb      	ldrh	r3, [r7, #6]
 80074b2:	b2db      	uxtb	r3, r3
 80074b4:	4618      	mov	r0, r3
 80074b6:	f7ff fcf7 	bl	8006ea8 <DEV_SPI_WRite>
	LCD_2IN_CS_1;
 80074ba:	2201      	movs	r2, #1
 80074bc:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80074c0:	4803      	ldr	r0, [pc, #12]	@ (80074d0 <LCD_2IN_WriteData_Word+0x50>)
 80074c2:	f7fc f8a1 	bl	8003608 <HAL_GPIO_WritePin>
}	  
 80074c6:	bf00      	nop
 80074c8:	3708      	adds	r7, #8
 80074ca:	46bd      	mov	sp, r7
 80074cc:	bd80      	pop	{r7, pc}
 80074ce:	bf00      	nop
 80074d0:	40020400 	.word	0x40020400

080074d4 <LCD_2IN_Init>:
/******************************************************************************
function:	
		Common register initialization
******************************************************************************/
void LCD_2IN_Init(void)
{
 80074d4:	b580      	push	{r7, lr}
 80074d6:	af00      	add	r7, sp, #0
	LCD_2IN_Reset();
 80074d8:	f7ff ff72 	bl	80073c0 <LCD_2IN_Reset>

	LCD_2IN_Write_Command(0x36);
 80074dc:	2036      	movs	r0, #54	@ 0x36
 80074de:	f7ff ff91 	bl	8007404 <LCD_2IN_Write_Command>
	LCD_2IN_WriteData_Byte(0x00); 
 80074e2:	2000      	movs	r0, #0
 80074e4:	f7ff ffaa 	bl	800743c <LCD_2IN_WriteData_Byte>

	LCD_2IN_Write_Command(0x3A); 
 80074e8:	203a      	movs	r0, #58	@ 0x3a
 80074ea:	f7ff ff8b 	bl	8007404 <LCD_2IN_Write_Command>
	LCD_2IN_WriteData_Byte(0x05);
 80074ee:	2005      	movs	r0, #5
 80074f0:	f7ff ffa4 	bl	800743c <LCD_2IN_WriteData_Byte>

	LCD_2IN_Write_Command(0x21); 
 80074f4:	2021      	movs	r0, #33	@ 0x21
 80074f6:	f7ff ff85 	bl	8007404 <LCD_2IN_Write_Command>

	LCD_2IN_Write_Command(0x2A);
 80074fa:	202a      	movs	r0, #42	@ 0x2a
 80074fc:	f7ff ff82 	bl	8007404 <LCD_2IN_Write_Command>
	LCD_2IN_WriteData_Byte(0x00);
 8007500:	2000      	movs	r0, #0
 8007502:	f7ff ff9b 	bl	800743c <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x00);
 8007506:	2000      	movs	r0, #0
 8007508:	f7ff ff98 	bl	800743c <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x01);
 800750c:	2001      	movs	r0, #1
 800750e:	f7ff ff95 	bl	800743c <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x3F);
 8007512:	203f      	movs	r0, #63	@ 0x3f
 8007514:	f7ff ff92 	bl	800743c <LCD_2IN_WriteData_Byte>

	LCD_2IN_Write_Command(0x2B);
 8007518:	202b      	movs	r0, #43	@ 0x2b
 800751a:	f7ff ff73 	bl	8007404 <LCD_2IN_Write_Command>
	LCD_2IN_WriteData_Byte(0x00);
 800751e:	2000      	movs	r0, #0
 8007520:	f7ff ff8c 	bl	800743c <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x00);
 8007524:	2000      	movs	r0, #0
 8007526:	f7ff ff89 	bl	800743c <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x00);
 800752a:	2000      	movs	r0, #0
 800752c:	f7ff ff86 	bl	800743c <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0xEF);
 8007530:	20ef      	movs	r0, #239	@ 0xef
 8007532:	f7ff ff83 	bl	800743c <LCD_2IN_WriteData_Byte>

	LCD_2IN_Write_Command(0xB2);
 8007536:	20b2      	movs	r0, #178	@ 0xb2
 8007538:	f7ff ff64 	bl	8007404 <LCD_2IN_Write_Command>
	LCD_2IN_WriteData_Byte(0x0C);
 800753c:	200c      	movs	r0, #12
 800753e:	f7ff ff7d 	bl	800743c <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x0C);
 8007542:	200c      	movs	r0, #12
 8007544:	f7ff ff7a 	bl	800743c <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x00);
 8007548:	2000      	movs	r0, #0
 800754a:	f7ff ff77 	bl	800743c <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x33);
 800754e:	2033      	movs	r0, #51	@ 0x33
 8007550:	f7ff ff74 	bl	800743c <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x33);
 8007554:	2033      	movs	r0, #51	@ 0x33
 8007556:	f7ff ff71 	bl	800743c <LCD_2IN_WriteData_Byte>

	LCD_2IN_Write_Command(0xB7);
 800755a:	20b7      	movs	r0, #183	@ 0xb7
 800755c:	f7ff ff52 	bl	8007404 <LCD_2IN_Write_Command>
	LCD_2IN_WriteData_Byte(0x35); 
 8007560:	2035      	movs	r0, #53	@ 0x35
 8007562:	f7ff ff6b 	bl	800743c <LCD_2IN_WriteData_Byte>

	LCD_2IN_Write_Command(0xBB);
 8007566:	20bb      	movs	r0, #187	@ 0xbb
 8007568:	f7ff ff4c 	bl	8007404 <LCD_2IN_Write_Command>
	LCD_2IN_WriteData_Byte(0x1F);
 800756c:	201f      	movs	r0, #31
 800756e:	f7ff ff65 	bl	800743c <LCD_2IN_WriteData_Byte>

	LCD_2IN_Write_Command(0xC0);
 8007572:	20c0      	movs	r0, #192	@ 0xc0
 8007574:	f7ff ff46 	bl	8007404 <LCD_2IN_Write_Command>
	LCD_2IN_WriteData_Byte(0x2C);
 8007578:	202c      	movs	r0, #44	@ 0x2c
 800757a:	f7ff ff5f 	bl	800743c <LCD_2IN_WriteData_Byte>

	LCD_2IN_Write_Command(0xC2);
 800757e:	20c2      	movs	r0, #194	@ 0xc2
 8007580:	f7ff ff40 	bl	8007404 <LCD_2IN_Write_Command>
	LCD_2IN_WriteData_Byte(0x01);
 8007584:	2001      	movs	r0, #1
 8007586:	f7ff ff59 	bl	800743c <LCD_2IN_WriteData_Byte>

	LCD_2IN_Write_Command(0xC3);
 800758a:	20c3      	movs	r0, #195	@ 0xc3
 800758c:	f7ff ff3a 	bl	8007404 <LCD_2IN_Write_Command>
	LCD_2IN_WriteData_Byte(0x12);   
 8007590:	2012      	movs	r0, #18
 8007592:	f7ff ff53 	bl	800743c <LCD_2IN_WriteData_Byte>

	LCD_2IN_Write_Command(0xC4);
 8007596:	20c4      	movs	r0, #196	@ 0xc4
 8007598:	f7ff ff34 	bl	8007404 <LCD_2IN_Write_Command>
	LCD_2IN_WriteData_Byte(0x20);
 800759c:	2020      	movs	r0, #32
 800759e:	f7ff ff4d 	bl	800743c <LCD_2IN_WriteData_Byte>

	LCD_2IN_Write_Command(0xC6);
 80075a2:	20c6      	movs	r0, #198	@ 0xc6
 80075a4:	f7ff ff2e 	bl	8007404 <LCD_2IN_Write_Command>
	LCD_2IN_WriteData_Byte(0x0F); 
 80075a8:	200f      	movs	r0, #15
 80075aa:	f7ff ff47 	bl	800743c <LCD_2IN_WriteData_Byte>

	LCD_2IN_Write_Command(0xD0);
 80075ae:	20d0      	movs	r0, #208	@ 0xd0
 80075b0:	f7ff ff28 	bl	8007404 <LCD_2IN_Write_Command>
	LCD_2IN_WriteData_Byte(0xA4);
 80075b4:	20a4      	movs	r0, #164	@ 0xa4
 80075b6:	f7ff ff41 	bl	800743c <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0xA1);
 80075ba:	20a1      	movs	r0, #161	@ 0xa1
 80075bc:	f7ff ff3e 	bl	800743c <LCD_2IN_WriteData_Byte>

	LCD_2IN_Write_Command(0xE0);
 80075c0:	20e0      	movs	r0, #224	@ 0xe0
 80075c2:	f7ff ff1f 	bl	8007404 <LCD_2IN_Write_Command>
	LCD_2IN_WriteData_Byte(0xD0);
 80075c6:	20d0      	movs	r0, #208	@ 0xd0
 80075c8:	f7ff ff38 	bl	800743c <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x08);
 80075cc:	2008      	movs	r0, #8
 80075ce:	f7ff ff35 	bl	800743c <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x11);
 80075d2:	2011      	movs	r0, #17
 80075d4:	f7ff ff32 	bl	800743c <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x08);
 80075d8:	2008      	movs	r0, #8
 80075da:	f7ff ff2f 	bl	800743c <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x0C);
 80075de:	200c      	movs	r0, #12
 80075e0:	f7ff ff2c 	bl	800743c <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x15);
 80075e4:	2015      	movs	r0, #21
 80075e6:	f7ff ff29 	bl	800743c <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x39);
 80075ea:	2039      	movs	r0, #57	@ 0x39
 80075ec:	f7ff ff26 	bl	800743c <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x33);
 80075f0:	2033      	movs	r0, #51	@ 0x33
 80075f2:	f7ff ff23 	bl	800743c <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x50);
 80075f6:	2050      	movs	r0, #80	@ 0x50
 80075f8:	f7ff ff20 	bl	800743c <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x36);
 80075fc:	2036      	movs	r0, #54	@ 0x36
 80075fe:	f7ff ff1d 	bl	800743c <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x13);
 8007602:	2013      	movs	r0, #19
 8007604:	f7ff ff1a 	bl	800743c <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x14);
 8007608:	2014      	movs	r0, #20
 800760a:	f7ff ff17 	bl	800743c <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x29);
 800760e:	2029      	movs	r0, #41	@ 0x29
 8007610:	f7ff ff14 	bl	800743c <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x2D);
 8007614:	202d      	movs	r0, #45	@ 0x2d
 8007616:	f7ff ff11 	bl	800743c <LCD_2IN_WriteData_Byte>

	LCD_2IN_Write_Command(0xE1);
 800761a:	20e1      	movs	r0, #225	@ 0xe1
 800761c:	f7ff fef2 	bl	8007404 <LCD_2IN_Write_Command>
	LCD_2IN_WriteData_Byte(0xD0);
 8007620:	20d0      	movs	r0, #208	@ 0xd0
 8007622:	f7ff ff0b 	bl	800743c <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x08);
 8007626:	2008      	movs	r0, #8
 8007628:	f7ff ff08 	bl	800743c <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x10);
 800762c:	2010      	movs	r0, #16
 800762e:	f7ff ff05 	bl	800743c <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x08);
 8007632:	2008      	movs	r0, #8
 8007634:	f7ff ff02 	bl	800743c <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x06);
 8007638:	2006      	movs	r0, #6
 800763a:	f7ff feff 	bl	800743c <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x06);
 800763e:	2006      	movs	r0, #6
 8007640:	f7ff fefc 	bl	800743c <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x39);
 8007644:	2039      	movs	r0, #57	@ 0x39
 8007646:	f7ff fef9 	bl	800743c <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x44);
 800764a:	2044      	movs	r0, #68	@ 0x44
 800764c:	f7ff fef6 	bl	800743c <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x51);
 8007650:	2051      	movs	r0, #81	@ 0x51
 8007652:	f7ff fef3 	bl	800743c <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x0B);
 8007656:	200b      	movs	r0, #11
 8007658:	f7ff fef0 	bl	800743c <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x16);
 800765c:	2016      	movs	r0, #22
 800765e:	f7ff feed 	bl	800743c <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x14);
 8007662:	2014      	movs	r0, #20
 8007664:	f7ff feea 	bl	800743c <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x2F);
 8007668:	202f      	movs	r0, #47	@ 0x2f
 800766a:	f7ff fee7 	bl	800743c <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x31);
 800766e:	2031      	movs	r0, #49	@ 0x31
 8007670:	f7ff fee4 	bl	800743c <LCD_2IN_WriteData_Byte>
	LCD_2IN_Write_Command(0x21);
 8007674:	2021      	movs	r0, #33	@ 0x21
 8007676:	f7ff fec5 	bl	8007404 <LCD_2IN_Write_Command>

	LCD_2IN_Write_Command(0x11);
 800767a:	2011      	movs	r0, #17
 800767c:	f7ff fec2 	bl	8007404 <LCD_2IN_Write_Command>

	LCD_2IN_Write_Command(0x29);
 8007680:	2029      	movs	r0, #41	@ 0x29
 8007682:	f7ff febf 	bl	8007404 <LCD_2IN_Write_Command>
}
 8007686:	bf00      	nop
 8007688:	bd80      	pop	{r7, pc}

0800768a <LCD_2IN_SetWindow>:
	  Ystart:	Start UWORD y coordinate
	  Xend  :	End UWORD coordinates
	  Yend  :	End UWORD coordinatesen
******************************************************************************/
void LCD_2IN_SetWindow(UWORD Xstart, UWORD Ystart, UWORD Xend, UWORD  Yend)
{ 
 800768a:	b590      	push	{r4, r7, lr}
 800768c:	b083      	sub	sp, #12
 800768e:	af00      	add	r7, sp, #0
 8007690:	4604      	mov	r4, r0
 8007692:	4608      	mov	r0, r1
 8007694:	4611      	mov	r1, r2
 8007696:	461a      	mov	r2, r3
 8007698:	4623      	mov	r3, r4
 800769a:	80fb      	strh	r3, [r7, #6]
 800769c:	4603      	mov	r3, r0
 800769e:	80bb      	strh	r3, [r7, #4]
 80076a0:	460b      	mov	r3, r1
 80076a2:	807b      	strh	r3, [r7, #2]
 80076a4:	4613      	mov	r3, r2
 80076a6:	803b      	strh	r3, [r7, #0]
	LCD_2IN_Write_Command(0x2a);
 80076a8:	202a      	movs	r0, #42	@ 0x2a
 80076aa:	f7ff feab 	bl	8007404 <LCD_2IN_Write_Command>
	LCD_2IN_WriteData_Byte(Xstart >>8);
 80076ae:	88fb      	ldrh	r3, [r7, #6]
 80076b0:	0a1b      	lsrs	r3, r3, #8
 80076b2:	b29b      	uxth	r3, r3
 80076b4:	b2db      	uxtb	r3, r3
 80076b6:	4618      	mov	r0, r3
 80076b8:	f7ff fec0 	bl	800743c <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(Xstart & 0xff);
 80076bc:	88fb      	ldrh	r3, [r7, #6]
 80076be:	b2db      	uxtb	r3, r3
 80076c0:	4618      	mov	r0, r3
 80076c2:	f7ff febb 	bl	800743c <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte((Xend - 1) >> 8);
 80076c6:	887b      	ldrh	r3, [r7, #2]
 80076c8:	3b01      	subs	r3, #1
 80076ca:	121b      	asrs	r3, r3, #8
 80076cc:	b2db      	uxtb	r3, r3
 80076ce:	4618      	mov	r0, r3
 80076d0:	f7ff feb4 	bl	800743c <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte((Xend - 1) & 0xff);
 80076d4:	887b      	ldrh	r3, [r7, #2]
 80076d6:	b2db      	uxtb	r3, r3
 80076d8:	3b01      	subs	r3, #1
 80076da:	b2db      	uxtb	r3, r3
 80076dc:	4618      	mov	r0, r3
 80076de:	f7ff fead 	bl	800743c <LCD_2IN_WriteData_Byte>

	LCD_2IN_Write_Command(0x2b);
 80076e2:	202b      	movs	r0, #43	@ 0x2b
 80076e4:	f7ff fe8e 	bl	8007404 <LCD_2IN_Write_Command>
	LCD_2IN_WriteData_Byte(Ystart >>8);
 80076e8:	88bb      	ldrh	r3, [r7, #4]
 80076ea:	0a1b      	lsrs	r3, r3, #8
 80076ec:	b29b      	uxth	r3, r3
 80076ee:	b2db      	uxtb	r3, r3
 80076f0:	4618      	mov	r0, r3
 80076f2:	f7ff fea3 	bl	800743c <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(Ystart & 0xff);
 80076f6:	88bb      	ldrh	r3, [r7, #4]
 80076f8:	b2db      	uxtb	r3, r3
 80076fa:	4618      	mov	r0, r3
 80076fc:	f7ff fe9e 	bl	800743c <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte((Yend - 1) >> 8);
 8007700:	883b      	ldrh	r3, [r7, #0]
 8007702:	3b01      	subs	r3, #1
 8007704:	121b      	asrs	r3, r3, #8
 8007706:	b2db      	uxtb	r3, r3
 8007708:	4618      	mov	r0, r3
 800770a:	f7ff fe97 	bl	800743c <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte((Yend - 1) & 0xff);
 800770e:	883b      	ldrh	r3, [r7, #0]
 8007710:	b2db      	uxtb	r3, r3
 8007712:	3b01      	subs	r3, #1
 8007714:	b2db      	uxtb	r3, r3
 8007716:	4618      	mov	r0, r3
 8007718:	f7ff fe90 	bl	800743c <LCD_2IN_WriteData_Byte>

	LCD_2IN_Write_Command(0x2C);
 800771c:	202c      	movs	r0, #44	@ 0x2c
 800771e:	f7ff fe71 	bl	8007404 <LCD_2IN_Write_Command>
}
 8007722:	bf00      	nop
 8007724:	370c      	adds	r7, #12
 8007726:	46bd      	mov	sp, r7
 8007728:	bd90      	pop	{r4, r7, pc}

0800772a <LCD_2IN_SetCursor>:
	  Xstart: 	Start UWORD x coordinate
	  Ystart:	Start UWORD y coordinate

******************************************************************************/
void LCD_2IN_SetCursor(UWORD X, UWORD Y)
{ 
 800772a:	b580      	push	{r7, lr}
 800772c:	b082      	sub	sp, #8
 800772e:	af00      	add	r7, sp, #0
 8007730:	4603      	mov	r3, r0
 8007732:	460a      	mov	r2, r1
 8007734:	80fb      	strh	r3, [r7, #6]
 8007736:	4613      	mov	r3, r2
 8007738:	80bb      	strh	r3, [r7, #4]
	LCD_2IN_Write_Command(0x2a);
 800773a:	202a      	movs	r0, #42	@ 0x2a
 800773c:	f7ff fe62 	bl	8007404 <LCD_2IN_Write_Command>
	LCD_2IN_WriteData_Byte(X >> 8);
 8007740:	88fb      	ldrh	r3, [r7, #6]
 8007742:	0a1b      	lsrs	r3, r3, #8
 8007744:	b29b      	uxth	r3, r3
 8007746:	b2db      	uxtb	r3, r3
 8007748:	4618      	mov	r0, r3
 800774a:	f7ff fe77 	bl	800743c <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(X);
 800774e:	88fb      	ldrh	r3, [r7, #6]
 8007750:	b2db      	uxtb	r3, r3
 8007752:	4618      	mov	r0, r3
 8007754:	f7ff fe72 	bl	800743c <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(X >> 8);
 8007758:	88fb      	ldrh	r3, [r7, #6]
 800775a:	0a1b      	lsrs	r3, r3, #8
 800775c:	b29b      	uxth	r3, r3
 800775e:	b2db      	uxtb	r3, r3
 8007760:	4618      	mov	r0, r3
 8007762:	f7ff fe6b 	bl	800743c <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(X);
 8007766:	88fb      	ldrh	r3, [r7, #6]
 8007768:	b2db      	uxtb	r3, r3
 800776a:	4618      	mov	r0, r3
 800776c:	f7ff fe66 	bl	800743c <LCD_2IN_WriteData_Byte>

	LCD_2IN_Write_Command(0x2b);
 8007770:	202b      	movs	r0, #43	@ 0x2b
 8007772:	f7ff fe47 	bl	8007404 <LCD_2IN_Write_Command>
	LCD_2IN_WriteData_Byte(Y >> 8);
 8007776:	88bb      	ldrh	r3, [r7, #4]
 8007778:	0a1b      	lsrs	r3, r3, #8
 800777a:	b29b      	uxth	r3, r3
 800777c:	b2db      	uxtb	r3, r3
 800777e:	4618      	mov	r0, r3
 8007780:	f7ff fe5c 	bl	800743c <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(Y);
 8007784:	88bb      	ldrh	r3, [r7, #4]
 8007786:	b2db      	uxtb	r3, r3
 8007788:	4618      	mov	r0, r3
 800778a:	f7ff fe57 	bl	800743c <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(Y >> 8);
 800778e:	88bb      	ldrh	r3, [r7, #4]
 8007790:	0a1b      	lsrs	r3, r3, #8
 8007792:	b29b      	uxth	r3, r3
 8007794:	b2db      	uxtb	r3, r3
 8007796:	4618      	mov	r0, r3
 8007798:	f7ff fe50 	bl	800743c <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(Y);
 800779c:	88bb      	ldrh	r3, [r7, #4]
 800779e:	b2db      	uxtb	r3, r3
 80077a0:	4618      	mov	r0, r3
 80077a2:	f7ff fe4b 	bl	800743c <LCD_2IN_WriteData_Byte>

	LCD_2IN_Write_Command(0x2C);
 80077a6:	202c      	movs	r0, #44	@ 0x2c
 80077a8:	f7ff fe2c 	bl	8007404 <LCD_2IN_Write_Command>
}
 80077ac:	bf00      	nop
 80077ae:	3708      	adds	r7, #8
 80077b0:	46bd      	mov	sp, r7
 80077b2:	bd80      	pop	{r7, pc}

080077b4 <LCD_2IN_Clear>:
function:	Clear screen function, refresh the screen to a certain color
parameter	:
	  Color :		The color you want to clear all the screen
******************************************************************************/
void LCD_2IN_Clear(UWORD Color)
{
 80077b4:	b580      	push	{r7, lr}
 80077b6:	b084      	sub	sp, #16
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	4603      	mov	r3, r0
 80077bc:	80fb      	strh	r3, [r7, #6]
    UWORD i,j;
    LCD_2IN_SetWindow(0, 0, LCD_2IN_WIDTH, LCD_2IN_HEIGHT);
 80077be:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 80077c2:	22f0      	movs	r2, #240	@ 0xf0
 80077c4:	2100      	movs	r1, #0
 80077c6:	2000      	movs	r0, #0
 80077c8:	f7ff ff5f 	bl	800768a <LCD_2IN_SetWindow>

	DEV_Digital_Write(DEV_DC_PIN, 1);
 80077cc:	2201      	movs	r2, #1
 80077ce:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80077d2:	480f      	ldr	r0, [pc, #60]	@ (8007810 <LCD_2IN_Clear+0x5c>)
 80077d4:	f7fb ff18 	bl	8003608 <HAL_GPIO_WritePin>
	for(i = 0; i < LCD_2IN_WIDTH; i++){
 80077d8:	2300      	movs	r3, #0
 80077da:	81fb      	strh	r3, [r7, #14]
 80077dc:	e010      	b.n	8007800 <LCD_2IN_Clear+0x4c>
		for(j = 0; j < LCD_2IN_HEIGHT; j++){
 80077de:	2300      	movs	r3, #0
 80077e0:	81bb      	strh	r3, [r7, #12]
 80077e2:	e006      	b.n	80077f2 <LCD_2IN_Clear+0x3e>
			LCD_2IN_WriteData_Word(Color);
 80077e4:	88fb      	ldrh	r3, [r7, #6]
 80077e6:	4618      	mov	r0, r3
 80077e8:	f7ff fe4a 	bl	8007480 <LCD_2IN_WriteData_Word>
		for(j = 0; j < LCD_2IN_HEIGHT; j++){
 80077ec:	89bb      	ldrh	r3, [r7, #12]
 80077ee:	3301      	adds	r3, #1
 80077f0:	81bb      	strh	r3, [r7, #12]
 80077f2:	89bb      	ldrh	r3, [r7, #12]
 80077f4:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80077f8:	d3f4      	bcc.n	80077e4 <LCD_2IN_Clear+0x30>
	for(i = 0; i < LCD_2IN_WIDTH; i++){
 80077fa:	89fb      	ldrh	r3, [r7, #14]
 80077fc:	3301      	adds	r3, #1
 80077fe:	81fb      	strh	r3, [r7, #14]
 8007800:	89fb      	ldrh	r3, [r7, #14]
 8007802:	2bef      	cmp	r3, #239	@ 0xef
 8007804:	d9eb      	bls.n	80077de <LCD_2IN_Clear+0x2a>
		}
	 }
}
 8007806:	bf00      	nop
 8007808:	bf00      	nop
 800780a:	3710      	adds	r7, #16
 800780c:	46bd      	mov	sp, r7
 800780e:	bd80      	pop	{r7, pc}
 8007810:	40020400 	.word	0x40020400

08007814 <LCD_2IN_DrawPaint>:
	    X	: 	Set the X coordinate
	    Y	:	Set the Y coordinate
	  Color :	Set the color
******************************************************************************/
void LCD_2IN_DrawPaint(UWORD x, UWORD y, UWORD Color)
{
 8007814:	b580      	push	{r7, lr}
 8007816:	b082      	sub	sp, #8
 8007818:	af00      	add	r7, sp, #0
 800781a:	4603      	mov	r3, r0
 800781c:	80fb      	strh	r3, [r7, #6]
 800781e:	460b      	mov	r3, r1
 8007820:	80bb      	strh	r3, [r7, #4]
 8007822:	4613      	mov	r3, r2
 8007824:	807b      	strh	r3, [r7, #2]
	LCD_2IN_SetCursor(x, y);
 8007826:	88ba      	ldrh	r2, [r7, #4]
 8007828:	88fb      	ldrh	r3, [r7, #6]
 800782a:	4611      	mov	r1, r2
 800782c:	4618      	mov	r0, r3
 800782e:	f7ff ff7c 	bl	800772a <LCD_2IN_SetCursor>
	LCD_2IN_WriteData_Word(Color); 	    
 8007832:	887b      	ldrh	r3, [r7, #2]
 8007834:	4618      	mov	r0, r3
 8007836:	f7ff fe23 	bl	8007480 <LCD_2IN_WriteData_Word>
}
 800783a:	bf00      	nop
 800783c:	3708      	adds	r7, #8
 800783e:	46bd      	mov	sp, r7
 8007840:	bd80      	pop	{r7, pc}
	...

08007844 <LCD_2IN_SetBackLight>:
	Setting backlight
parameter	:
	  value : Range 0~1000   Duty cycle is value/1000	
*******************************************************************************/
void LCD_2IN_SetBackLight(UWORD Value)
{
 8007844:	b480      	push	{r7}
 8007846:	b083      	sub	sp, #12
 8007848:	af00      	add	r7, sp, #0
 800784a:	4603      	mov	r3, r0
 800784c:	80fb      	strh	r3, [r7, #6]
	DEV_Set_PWM(Value);
 800784e:	4a04      	ldr	r2, [pc, #16]	@ (8007860 <LCD_2IN_SetBackLight+0x1c>)
 8007850:	88fb      	ldrh	r3, [r7, #6]
 8007852:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8007854:	bf00      	nop
 8007856:	370c      	adds	r7, #12
 8007858:	46bd      	mov	sp, r7
 800785a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785e:	4770      	bx	lr
 8007860:	40000800 	.word	0x40000800

08007864 <malloc>:
 8007864:	4b02      	ldr	r3, [pc, #8]	@ (8007870 <malloc+0xc>)
 8007866:	4601      	mov	r1, r0
 8007868:	6818      	ldr	r0, [r3, #0]
 800786a:	f000 b825 	b.w	80078b8 <_malloc_r>
 800786e:	bf00      	nop
 8007870:	2000004c 	.word	0x2000004c

08007874 <sbrk_aligned>:
 8007874:	b570      	push	{r4, r5, r6, lr}
 8007876:	4e0f      	ldr	r6, [pc, #60]	@ (80078b4 <sbrk_aligned+0x40>)
 8007878:	460c      	mov	r4, r1
 800787a:	6831      	ldr	r1, [r6, #0]
 800787c:	4605      	mov	r5, r0
 800787e:	b911      	cbnz	r1, 8007886 <sbrk_aligned+0x12>
 8007880:	f000 fb0c 	bl	8007e9c <_sbrk_r>
 8007884:	6030      	str	r0, [r6, #0]
 8007886:	4621      	mov	r1, r4
 8007888:	4628      	mov	r0, r5
 800788a:	f000 fb07 	bl	8007e9c <_sbrk_r>
 800788e:	1c43      	adds	r3, r0, #1
 8007890:	d103      	bne.n	800789a <sbrk_aligned+0x26>
 8007892:	f04f 34ff 	mov.w	r4, #4294967295
 8007896:	4620      	mov	r0, r4
 8007898:	bd70      	pop	{r4, r5, r6, pc}
 800789a:	1cc4      	adds	r4, r0, #3
 800789c:	f024 0403 	bic.w	r4, r4, #3
 80078a0:	42a0      	cmp	r0, r4
 80078a2:	d0f8      	beq.n	8007896 <sbrk_aligned+0x22>
 80078a4:	1a21      	subs	r1, r4, r0
 80078a6:	4628      	mov	r0, r5
 80078a8:	f000 faf8 	bl	8007e9c <_sbrk_r>
 80078ac:	3001      	adds	r0, #1
 80078ae:	d1f2      	bne.n	8007896 <sbrk_aligned+0x22>
 80078b0:	e7ef      	b.n	8007892 <sbrk_aligned+0x1e>
 80078b2:	bf00      	nop
 80078b4:	2000036c 	.word	0x2000036c

080078b8 <_malloc_r>:
 80078b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80078bc:	1ccd      	adds	r5, r1, #3
 80078be:	f025 0503 	bic.w	r5, r5, #3
 80078c2:	3508      	adds	r5, #8
 80078c4:	2d0c      	cmp	r5, #12
 80078c6:	bf38      	it	cc
 80078c8:	250c      	movcc	r5, #12
 80078ca:	2d00      	cmp	r5, #0
 80078cc:	4606      	mov	r6, r0
 80078ce:	db01      	blt.n	80078d4 <_malloc_r+0x1c>
 80078d0:	42a9      	cmp	r1, r5
 80078d2:	d904      	bls.n	80078de <_malloc_r+0x26>
 80078d4:	230c      	movs	r3, #12
 80078d6:	6033      	str	r3, [r6, #0]
 80078d8:	2000      	movs	r0, #0
 80078da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80078de:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80079b4 <_malloc_r+0xfc>
 80078e2:	f000 f869 	bl	80079b8 <__malloc_lock>
 80078e6:	f8d8 3000 	ldr.w	r3, [r8]
 80078ea:	461c      	mov	r4, r3
 80078ec:	bb44      	cbnz	r4, 8007940 <_malloc_r+0x88>
 80078ee:	4629      	mov	r1, r5
 80078f0:	4630      	mov	r0, r6
 80078f2:	f7ff ffbf 	bl	8007874 <sbrk_aligned>
 80078f6:	1c43      	adds	r3, r0, #1
 80078f8:	4604      	mov	r4, r0
 80078fa:	d158      	bne.n	80079ae <_malloc_r+0xf6>
 80078fc:	f8d8 4000 	ldr.w	r4, [r8]
 8007900:	4627      	mov	r7, r4
 8007902:	2f00      	cmp	r7, #0
 8007904:	d143      	bne.n	800798e <_malloc_r+0xd6>
 8007906:	2c00      	cmp	r4, #0
 8007908:	d04b      	beq.n	80079a2 <_malloc_r+0xea>
 800790a:	6823      	ldr	r3, [r4, #0]
 800790c:	4639      	mov	r1, r7
 800790e:	4630      	mov	r0, r6
 8007910:	eb04 0903 	add.w	r9, r4, r3
 8007914:	f000 fac2 	bl	8007e9c <_sbrk_r>
 8007918:	4581      	cmp	r9, r0
 800791a:	d142      	bne.n	80079a2 <_malloc_r+0xea>
 800791c:	6821      	ldr	r1, [r4, #0]
 800791e:	1a6d      	subs	r5, r5, r1
 8007920:	4629      	mov	r1, r5
 8007922:	4630      	mov	r0, r6
 8007924:	f7ff ffa6 	bl	8007874 <sbrk_aligned>
 8007928:	3001      	adds	r0, #1
 800792a:	d03a      	beq.n	80079a2 <_malloc_r+0xea>
 800792c:	6823      	ldr	r3, [r4, #0]
 800792e:	442b      	add	r3, r5
 8007930:	6023      	str	r3, [r4, #0]
 8007932:	f8d8 3000 	ldr.w	r3, [r8]
 8007936:	685a      	ldr	r2, [r3, #4]
 8007938:	bb62      	cbnz	r2, 8007994 <_malloc_r+0xdc>
 800793a:	f8c8 7000 	str.w	r7, [r8]
 800793e:	e00f      	b.n	8007960 <_malloc_r+0xa8>
 8007940:	6822      	ldr	r2, [r4, #0]
 8007942:	1b52      	subs	r2, r2, r5
 8007944:	d420      	bmi.n	8007988 <_malloc_r+0xd0>
 8007946:	2a0b      	cmp	r2, #11
 8007948:	d917      	bls.n	800797a <_malloc_r+0xc2>
 800794a:	1961      	adds	r1, r4, r5
 800794c:	42a3      	cmp	r3, r4
 800794e:	6025      	str	r5, [r4, #0]
 8007950:	bf18      	it	ne
 8007952:	6059      	strne	r1, [r3, #4]
 8007954:	6863      	ldr	r3, [r4, #4]
 8007956:	bf08      	it	eq
 8007958:	f8c8 1000 	streq.w	r1, [r8]
 800795c:	5162      	str	r2, [r4, r5]
 800795e:	604b      	str	r3, [r1, #4]
 8007960:	4630      	mov	r0, r6
 8007962:	f000 f82f 	bl	80079c4 <__malloc_unlock>
 8007966:	f104 000b 	add.w	r0, r4, #11
 800796a:	1d23      	adds	r3, r4, #4
 800796c:	f020 0007 	bic.w	r0, r0, #7
 8007970:	1ac2      	subs	r2, r0, r3
 8007972:	bf1c      	itt	ne
 8007974:	1a1b      	subne	r3, r3, r0
 8007976:	50a3      	strne	r3, [r4, r2]
 8007978:	e7af      	b.n	80078da <_malloc_r+0x22>
 800797a:	6862      	ldr	r2, [r4, #4]
 800797c:	42a3      	cmp	r3, r4
 800797e:	bf0c      	ite	eq
 8007980:	f8c8 2000 	streq.w	r2, [r8]
 8007984:	605a      	strne	r2, [r3, #4]
 8007986:	e7eb      	b.n	8007960 <_malloc_r+0xa8>
 8007988:	4623      	mov	r3, r4
 800798a:	6864      	ldr	r4, [r4, #4]
 800798c:	e7ae      	b.n	80078ec <_malloc_r+0x34>
 800798e:	463c      	mov	r4, r7
 8007990:	687f      	ldr	r7, [r7, #4]
 8007992:	e7b6      	b.n	8007902 <_malloc_r+0x4a>
 8007994:	461a      	mov	r2, r3
 8007996:	685b      	ldr	r3, [r3, #4]
 8007998:	42a3      	cmp	r3, r4
 800799a:	d1fb      	bne.n	8007994 <_malloc_r+0xdc>
 800799c:	2300      	movs	r3, #0
 800799e:	6053      	str	r3, [r2, #4]
 80079a0:	e7de      	b.n	8007960 <_malloc_r+0xa8>
 80079a2:	230c      	movs	r3, #12
 80079a4:	6033      	str	r3, [r6, #0]
 80079a6:	4630      	mov	r0, r6
 80079a8:	f000 f80c 	bl	80079c4 <__malloc_unlock>
 80079ac:	e794      	b.n	80078d8 <_malloc_r+0x20>
 80079ae:	6005      	str	r5, [r0, #0]
 80079b0:	e7d6      	b.n	8007960 <_malloc_r+0xa8>
 80079b2:	bf00      	nop
 80079b4:	20000370 	.word	0x20000370

080079b8 <__malloc_lock>:
 80079b8:	4801      	ldr	r0, [pc, #4]	@ (80079c0 <__malloc_lock+0x8>)
 80079ba:	f000 babc 	b.w	8007f36 <__retarget_lock_acquire_recursive>
 80079be:	bf00      	nop
 80079c0:	200004b4 	.word	0x200004b4

080079c4 <__malloc_unlock>:
 80079c4:	4801      	ldr	r0, [pc, #4]	@ (80079cc <__malloc_unlock+0x8>)
 80079c6:	f000 bab7 	b.w	8007f38 <__retarget_lock_release_recursive>
 80079ca:	bf00      	nop
 80079cc:	200004b4 	.word	0x200004b4

080079d0 <std>:
 80079d0:	2300      	movs	r3, #0
 80079d2:	b510      	push	{r4, lr}
 80079d4:	4604      	mov	r4, r0
 80079d6:	e9c0 3300 	strd	r3, r3, [r0]
 80079da:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80079de:	6083      	str	r3, [r0, #8]
 80079e0:	8181      	strh	r1, [r0, #12]
 80079e2:	6643      	str	r3, [r0, #100]	@ 0x64
 80079e4:	81c2      	strh	r2, [r0, #14]
 80079e6:	6183      	str	r3, [r0, #24]
 80079e8:	4619      	mov	r1, r3
 80079ea:	2208      	movs	r2, #8
 80079ec:	305c      	adds	r0, #92	@ 0x5c
 80079ee:	f000 fa19 	bl	8007e24 <memset>
 80079f2:	4b0d      	ldr	r3, [pc, #52]	@ (8007a28 <std+0x58>)
 80079f4:	6263      	str	r3, [r4, #36]	@ 0x24
 80079f6:	4b0d      	ldr	r3, [pc, #52]	@ (8007a2c <std+0x5c>)
 80079f8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80079fa:	4b0d      	ldr	r3, [pc, #52]	@ (8007a30 <std+0x60>)
 80079fc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80079fe:	4b0d      	ldr	r3, [pc, #52]	@ (8007a34 <std+0x64>)
 8007a00:	6323      	str	r3, [r4, #48]	@ 0x30
 8007a02:	4b0d      	ldr	r3, [pc, #52]	@ (8007a38 <std+0x68>)
 8007a04:	6224      	str	r4, [r4, #32]
 8007a06:	429c      	cmp	r4, r3
 8007a08:	d006      	beq.n	8007a18 <std+0x48>
 8007a0a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007a0e:	4294      	cmp	r4, r2
 8007a10:	d002      	beq.n	8007a18 <std+0x48>
 8007a12:	33d0      	adds	r3, #208	@ 0xd0
 8007a14:	429c      	cmp	r4, r3
 8007a16:	d105      	bne.n	8007a24 <std+0x54>
 8007a18:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007a1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007a20:	f000 ba88 	b.w	8007f34 <__retarget_lock_init_recursive>
 8007a24:	bd10      	pop	{r4, pc}
 8007a26:	bf00      	nop
 8007a28:	08007c75 	.word	0x08007c75
 8007a2c:	08007c97 	.word	0x08007c97
 8007a30:	08007ccf 	.word	0x08007ccf
 8007a34:	08007cf3 	.word	0x08007cf3
 8007a38:	20000374 	.word	0x20000374

08007a3c <stdio_exit_handler>:
 8007a3c:	4a02      	ldr	r2, [pc, #8]	@ (8007a48 <stdio_exit_handler+0xc>)
 8007a3e:	4903      	ldr	r1, [pc, #12]	@ (8007a4c <stdio_exit_handler+0x10>)
 8007a40:	4803      	ldr	r0, [pc, #12]	@ (8007a50 <stdio_exit_handler+0x14>)
 8007a42:	f000 b869 	b.w	8007b18 <_fwalk_sglue>
 8007a46:	bf00      	nop
 8007a48:	20000040 	.word	0x20000040
 8007a4c:	08008955 	.word	0x08008955
 8007a50:	20000050 	.word	0x20000050

08007a54 <cleanup_stdio>:
 8007a54:	6841      	ldr	r1, [r0, #4]
 8007a56:	4b0c      	ldr	r3, [pc, #48]	@ (8007a88 <cleanup_stdio+0x34>)
 8007a58:	4299      	cmp	r1, r3
 8007a5a:	b510      	push	{r4, lr}
 8007a5c:	4604      	mov	r4, r0
 8007a5e:	d001      	beq.n	8007a64 <cleanup_stdio+0x10>
 8007a60:	f000 ff78 	bl	8008954 <_fflush_r>
 8007a64:	68a1      	ldr	r1, [r4, #8]
 8007a66:	4b09      	ldr	r3, [pc, #36]	@ (8007a8c <cleanup_stdio+0x38>)
 8007a68:	4299      	cmp	r1, r3
 8007a6a:	d002      	beq.n	8007a72 <cleanup_stdio+0x1e>
 8007a6c:	4620      	mov	r0, r4
 8007a6e:	f000 ff71 	bl	8008954 <_fflush_r>
 8007a72:	68e1      	ldr	r1, [r4, #12]
 8007a74:	4b06      	ldr	r3, [pc, #24]	@ (8007a90 <cleanup_stdio+0x3c>)
 8007a76:	4299      	cmp	r1, r3
 8007a78:	d004      	beq.n	8007a84 <cleanup_stdio+0x30>
 8007a7a:	4620      	mov	r0, r4
 8007a7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007a80:	f000 bf68 	b.w	8008954 <_fflush_r>
 8007a84:	bd10      	pop	{r4, pc}
 8007a86:	bf00      	nop
 8007a88:	20000374 	.word	0x20000374
 8007a8c:	200003dc 	.word	0x200003dc
 8007a90:	20000444 	.word	0x20000444

08007a94 <global_stdio_init.part.0>:
 8007a94:	b510      	push	{r4, lr}
 8007a96:	4b0b      	ldr	r3, [pc, #44]	@ (8007ac4 <global_stdio_init.part.0+0x30>)
 8007a98:	4c0b      	ldr	r4, [pc, #44]	@ (8007ac8 <global_stdio_init.part.0+0x34>)
 8007a9a:	4a0c      	ldr	r2, [pc, #48]	@ (8007acc <global_stdio_init.part.0+0x38>)
 8007a9c:	601a      	str	r2, [r3, #0]
 8007a9e:	4620      	mov	r0, r4
 8007aa0:	2200      	movs	r2, #0
 8007aa2:	2104      	movs	r1, #4
 8007aa4:	f7ff ff94 	bl	80079d0 <std>
 8007aa8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007aac:	2201      	movs	r2, #1
 8007aae:	2109      	movs	r1, #9
 8007ab0:	f7ff ff8e 	bl	80079d0 <std>
 8007ab4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007ab8:	2202      	movs	r2, #2
 8007aba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007abe:	2112      	movs	r1, #18
 8007ac0:	f7ff bf86 	b.w	80079d0 <std>
 8007ac4:	200004ac 	.word	0x200004ac
 8007ac8:	20000374 	.word	0x20000374
 8007acc:	08007a3d 	.word	0x08007a3d

08007ad0 <__sfp_lock_acquire>:
 8007ad0:	4801      	ldr	r0, [pc, #4]	@ (8007ad8 <__sfp_lock_acquire+0x8>)
 8007ad2:	f000 ba30 	b.w	8007f36 <__retarget_lock_acquire_recursive>
 8007ad6:	bf00      	nop
 8007ad8:	200004b5 	.word	0x200004b5

08007adc <__sfp_lock_release>:
 8007adc:	4801      	ldr	r0, [pc, #4]	@ (8007ae4 <__sfp_lock_release+0x8>)
 8007ade:	f000 ba2b 	b.w	8007f38 <__retarget_lock_release_recursive>
 8007ae2:	bf00      	nop
 8007ae4:	200004b5 	.word	0x200004b5

08007ae8 <__sinit>:
 8007ae8:	b510      	push	{r4, lr}
 8007aea:	4604      	mov	r4, r0
 8007aec:	f7ff fff0 	bl	8007ad0 <__sfp_lock_acquire>
 8007af0:	6a23      	ldr	r3, [r4, #32]
 8007af2:	b11b      	cbz	r3, 8007afc <__sinit+0x14>
 8007af4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007af8:	f7ff bff0 	b.w	8007adc <__sfp_lock_release>
 8007afc:	4b04      	ldr	r3, [pc, #16]	@ (8007b10 <__sinit+0x28>)
 8007afe:	6223      	str	r3, [r4, #32]
 8007b00:	4b04      	ldr	r3, [pc, #16]	@ (8007b14 <__sinit+0x2c>)
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d1f5      	bne.n	8007af4 <__sinit+0xc>
 8007b08:	f7ff ffc4 	bl	8007a94 <global_stdio_init.part.0>
 8007b0c:	e7f2      	b.n	8007af4 <__sinit+0xc>
 8007b0e:	bf00      	nop
 8007b10:	08007a55 	.word	0x08007a55
 8007b14:	200004ac 	.word	0x200004ac

08007b18 <_fwalk_sglue>:
 8007b18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007b1c:	4607      	mov	r7, r0
 8007b1e:	4688      	mov	r8, r1
 8007b20:	4614      	mov	r4, r2
 8007b22:	2600      	movs	r6, #0
 8007b24:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007b28:	f1b9 0901 	subs.w	r9, r9, #1
 8007b2c:	d505      	bpl.n	8007b3a <_fwalk_sglue+0x22>
 8007b2e:	6824      	ldr	r4, [r4, #0]
 8007b30:	2c00      	cmp	r4, #0
 8007b32:	d1f7      	bne.n	8007b24 <_fwalk_sglue+0xc>
 8007b34:	4630      	mov	r0, r6
 8007b36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007b3a:	89ab      	ldrh	r3, [r5, #12]
 8007b3c:	2b01      	cmp	r3, #1
 8007b3e:	d907      	bls.n	8007b50 <_fwalk_sglue+0x38>
 8007b40:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007b44:	3301      	adds	r3, #1
 8007b46:	d003      	beq.n	8007b50 <_fwalk_sglue+0x38>
 8007b48:	4629      	mov	r1, r5
 8007b4a:	4638      	mov	r0, r7
 8007b4c:	47c0      	blx	r8
 8007b4e:	4306      	orrs	r6, r0
 8007b50:	3568      	adds	r5, #104	@ 0x68
 8007b52:	e7e9      	b.n	8007b28 <_fwalk_sglue+0x10>

08007b54 <iprintf>:
 8007b54:	b40f      	push	{r0, r1, r2, r3}
 8007b56:	b507      	push	{r0, r1, r2, lr}
 8007b58:	4906      	ldr	r1, [pc, #24]	@ (8007b74 <iprintf+0x20>)
 8007b5a:	ab04      	add	r3, sp, #16
 8007b5c:	6808      	ldr	r0, [r1, #0]
 8007b5e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007b62:	6881      	ldr	r1, [r0, #8]
 8007b64:	9301      	str	r3, [sp, #4]
 8007b66:	f000 fbcb 	bl	8008300 <_vfiprintf_r>
 8007b6a:	b003      	add	sp, #12
 8007b6c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007b70:	b004      	add	sp, #16
 8007b72:	4770      	bx	lr
 8007b74:	2000004c 	.word	0x2000004c

08007b78 <_puts_r>:
 8007b78:	6a03      	ldr	r3, [r0, #32]
 8007b7a:	b570      	push	{r4, r5, r6, lr}
 8007b7c:	6884      	ldr	r4, [r0, #8]
 8007b7e:	4605      	mov	r5, r0
 8007b80:	460e      	mov	r6, r1
 8007b82:	b90b      	cbnz	r3, 8007b88 <_puts_r+0x10>
 8007b84:	f7ff ffb0 	bl	8007ae8 <__sinit>
 8007b88:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007b8a:	07db      	lsls	r3, r3, #31
 8007b8c:	d405      	bmi.n	8007b9a <_puts_r+0x22>
 8007b8e:	89a3      	ldrh	r3, [r4, #12]
 8007b90:	0598      	lsls	r0, r3, #22
 8007b92:	d402      	bmi.n	8007b9a <_puts_r+0x22>
 8007b94:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007b96:	f000 f9ce 	bl	8007f36 <__retarget_lock_acquire_recursive>
 8007b9a:	89a3      	ldrh	r3, [r4, #12]
 8007b9c:	0719      	lsls	r1, r3, #28
 8007b9e:	d502      	bpl.n	8007ba6 <_puts_r+0x2e>
 8007ba0:	6923      	ldr	r3, [r4, #16]
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d135      	bne.n	8007c12 <_puts_r+0x9a>
 8007ba6:	4621      	mov	r1, r4
 8007ba8:	4628      	mov	r0, r5
 8007baa:	f000 f8e5 	bl	8007d78 <__swsetup_r>
 8007bae:	b380      	cbz	r0, 8007c12 <_puts_r+0x9a>
 8007bb0:	f04f 35ff 	mov.w	r5, #4294967295
 8007bb4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007bb6:	07da      	lsls	r2, r3, #31
 8007bb8:	d405      	bmi.n	8007bc6 <_puts_r+0x4e>
 8007bba:	89a3      	ldrh	r3, [r4, #12]
 8007bbc:	059b      	lsls	r3, r3, #22
 8007bbe:	d402      	bmi.n	8007bc6 <_puts_r+0x4e>
 8007bc0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007bc2:	f000 f9b9 	bl	8007f38 <__retarget_lock_release_recursive>
 8007bc6:	4628      	mov	r0, r5
 8007bc8:	bd70      	pop	{r4, r5, r6, pc}
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	da04      	bge.n	8007bd8 <_puts_r+0x60>
 8007bce:	69a2      	ldr	r2, [r4, #24]
 8007bd0:	429a      	cmp	r2, r3
 8007bd2:	dc17      	bgt.n	8007c04 <_puts_r+0x8c>
 8007bd4:	290a      	cmp	r1, #10
 8007bd6:	d015      	beq.n	8007c04 <_puts_r+0x8c>
 8007bd8:	6823      	ldr	r3, [r4, #0]
 8007bda:	1c5a      	adds	r2, r3, #1
 8007bdc:	6022      	str	r2, [r4, #0]
 8007bde:	7019      	strb	r1, [r3, #0]
 8007be0:	68a3      	ldr	r3, [r4, #8]
 8007be2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007be6:	3b01      	subs	r3, #1
 8007be8:	60a3      	str	r3, [r4, #8]
 8007bea:	2900      	cmp	r1, #0
 8007bec:	d1ed      	bne.n	8007bca <_puts_r+0x52>
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	da11      	bge.n	8007c16 <_puts_r+0x9e>
 8007bf2:	4622      	mov	r2, r4
 8007bf4:	210a      	movs	r1, #10
 8007bf6:	4628      	mov	r0, r5
 8007bf8:	f000 f87f 	bl	8007cfa <__swbuf_r>
 8007bfc:	3001      	adds	r0, #1
 8007bfe:	d0d7      	beq.n	8007bb0 <_puts_r+0x38>
 8007c00:	250a      	movs	r5, #10
 8007c02:	e7d7      	b.n	8007bb4 <_puts_r+0x3c>
 8007c04:	4622      	mov	r2, r4
 8007c06:	4628      	mov	r0, r5
 8007c08:	f000 f877 	bl	8007cfa <__swbuf_r>
 8007c0c:	3001      	adds	r0, #1
 8007c0e:	d1e7      	bne.n	8007be0 <_puts_r+0x68>
 8007c10:	e7ce      	b.n	8007bb0 <_puts_r+0x38>
 8007c12:	3e01      	subs	r6, #1
 8007c14:	e7e4      	b.n	8007be0 <_puts_r+0x68>
 8007c16:	6823      	ldr	r3, [r4, #0]
 8007c18:	1c5a      	adds	r2, r3, #1
 8007c1a:	6022      	str	r2, [r4, #0]
 8007c1c:	220a      	movs	r2, #10
 8007c1e:	701a      	strb	r2, [r3, #0]
 8007c20:	e7ee      	b.n	8007c00 <_puts_r+0x88>
	...

08007c24 <puts>:
 8007c24:	4b02      	ldr	r3, [pc, #8]	@ (8007c30 <puts+0xc>)
 8007c26:	4601      	mov	r1, r0
 8007c28:	6818      	ldr	r0, [r3, #0]
 8007c2a:	f7ff bfa5 	b.w	8007b78 <_puts_r>
 8007c2e:	bf00      	nop
 8007c30:	2000004c 	.word	0x2000004c

08007c34 <siprintf>:
 8007c34:	b40e      	push	{r1, r2, r3}
 8007c36:	b500      	push	{lr}
 8007c38:	b09c      	sub	sp, #112	@ 0x70
 8007c3a:	ab1d      	add	r3, sp, #116	@ 0x74
 8007c3c:	9002      	str	r0, [sp, #8]
 8007c3e:	9006      	str	r0, [sp, #24]
 8007c40:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007c44:	4809      	ldr	r0, [pc, #36]	@ (8007c6c <siprintf+0x38>)
 8007c46:	9107      	str	r1, [sp, #28]
 8007c48:	9104      	str	r1, [sp, #16]
 8007c4a:	4909      	ldr	r1, [pc, #36]	@ (8007c70 <siprintf+0x3c>)
 8007c4c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007c50:	9105      	str	r1, [sp, #20]
 8007c52:	6800      	ldr	r0, [r0, #0]
 8007c54:	9301      	str	r3, [sp, #4]
 8007c56:	a902      	add	r1, sp, #8
 8007c58:	f000 fa2c 	bl	80080b4 <_svfiprintf_r>
 8007c5c:	9b02      	ldr	r3, [sp, #8]
 8007c5e:	2200      	movs	r2, #0
 8007c60:	701a      	strb	r2, [r3, #0]
 8007c62:	b01c      	add	sp, #112	@ 0x70
 8007c64:	f85d eb04 	ldr.w	lr, [sp], #4
 8007c68:	b003      	add	sp, #12
 8007c6a:	4770      	bx	lr
 8007c6c:	2000004c 	.word	0x2000004c
 8007c70:	ffff0208 	.word	0xffff0208

08007c74 <__sread>:
 8007c74:	b510      	push	{r4, lr}
 8007c76:	460c      	mov	r4, r1
 8007c78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c7c:	f000 f8fc 	bl	8007e78 <_read_r>
 8007c80:	2800      	cmp	r0, #0
 8007c82:	bfab      	itete	ge
 8007c84:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007c86:	89a3      	ldrhlt	r3, [r4, #12]
 8007c88:	181b      	addge	r3, r3, r0
 8007c8a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007c8e:	bfac      	ite	ge
 8007c90:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007c92:	81a3      	strhlt	r3, [r4, #12]
 8007c94:	bd10      	pop	{r4, pc}

08007c96 <__swrite>:
 8007c96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c9a:	461f      	mov	r7, r3
 8007c9c:	898b      	ldrh	r3, [r1, #12]
 8007c9e:	05db      	lsls	r3, r3, #23
 8007ca0:	4605      	mov	r5, r0
 8007ca2:	460c      	mov	r4, r1
 8007ca4:	4616      	mov	r6, r2
 8007ca6:	d505      	bpl.n	8007cb4 <__swrite+0x1e>
 8007ca8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007cac:	2302      	movs	r3, #2
 8007cae:	2200      	movs	r2, #0
 8007cb0:	f000 f8d0 	bl	8007e54 <_lseek_r>
 8007cb4:	89a3      	ldrh	r3, [r4, #12]
 8007cb6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007cba:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007cbe:	81a3      	strh	r3, [r4, #12]
 8007cc0:	4632      	mov	r2, r6
 8007cc2:	463b      	mov	r3, r7
 8007cc4:	4628      	mov	r0, r5
 8007cc6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007cca:	f000 b8f7 	b.w	8007ebc <_write_r>

08007cce <__sseek>:
 8007cce:	b510      	push	{r4, lr}
 8007cd0:	460c      	mov	r4, r1
 8007cd2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007cd6:	f000 f8bd 	bl	8007e54 <_lseek_r>
 8007cda:	1c43      	adds	r3, r0, #1
 8007cdc:	89a3      	ldrh	r3, [r4, #12]
 8007cde:	bf15      	itete	ne
 8007ce0:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007ce2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007ce6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007cea:	81a3      	strheq	r3, [r4, #12]
 8007cec:	bf18      	it	ne
 8007cee:	81a3      	strhne	r3, [r4, #12]
 8007cf0:	bd10      	pop	{r4, pc}

08007cf2 <__sclose>:
 8007cf2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007cf6:	f000 b89d 	b.w	8007e34 <_close_r>

08007cfa <__swbuf_r>:
 8007cfa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cfc:	460e      	mov	r6, r1
 8007cfe:	4614      	mov	r4, r2
 8007d00:	4605      	mov	r5, r0
 8007d02:	b118      	cbz	r0, 8007d0c <__swbuf_r+0x12>
 8007d04:	6a03      	ldr	r3, [r0, #32]
 8007d06:	b90b      	cbnz	r3, 8007d0c <__swbuf_r+0x12>
 8007d08:	f7ff feee 	bl	8007ae8 <__sinit>
 8007d0c:	69a3      	ldr	r3, [r4, #24]
 8007d0e:	60a3      	str	r3, [r4, #8]
 8007d10:	89a3      	ldrh	r3, [r4, #12]
 8007d12:	071a      	lsls	r2, r3, #28
 8007d14:	d501      	bpl.n	8007d1a <__swbuf_r+0x20>
 8007d16:	6923      	ldr	r3, [r4, #16]
 8007d18:	b943      	cbnz	r3, 8007d2c <__swbuf_r+0x32>
 8007d1a:	4621      	mov	r1, r4
 8007d1c:	4628      	mov	r0, r5
 8007d1e:	f000 f82b 	bl	8007d78 <__swsetup_r>
 8007d22:	b118      	cbz	r0, 8007d2c <__swbuf_r+0x32>
 8007d24:	f04f 37ff 	mov.w	r7, #4294967295
 8007d28:	4638      	mov	r0, r7
 8007d2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007d2c:	6823      	ldr	r3, [r4, #0]
 8007d2e:	6922      	ldr	r2, [r4, #16]
 8007d30:	1a98      	subs	r0, r3, r2
 8007d32:	6963      	ldr	r3, [r4, #20]
 8007d34:	b2f6      	uxtb	r6, r6
 8007d36:	4283      	cmp	r3, r0
 8007d38:	4637      	mov	r7, r6
 8007d3a:	dc05      	bgt.n	8007d48 <__swbuf_r+0x4e>
 8007d3c:	4621      	mov	r1, r4
 8007d3e:	4628      	mov	r0, r5
 8007d40:	f000 fe08 	bl	8008954 <_fflush_r>
 8007d44:	2800      	cmp	r0, #0
 8007d46:	d1ed      	bne.n	8007d24 <__swbuf_r+0x2a>
 8007d48:	68a3      	ldr	r3, [r4, #8]
 8007d4a:	3b01      	subs	r3, #1
 8007d4c:	60a3      	str	r3, [r4, #8]
 8007d4e:	6823      	ldr	r3, [r4, #0]
 8007d50:	1c5a      	adds	r2, r3, #1
 8007d52:	6022      	str	r2, [r4, #0]
 8007d54:	701e      	strb	r6, [r3, #0]
 8007d56:	6962      	ldr	r2, [r4, #20]
 8007d58:	1c43      	adds	r3, r0, #1
 8007d5a:	429a      	cmp	r2, r3
 8007d5c:	d004      	beq.n	8007d68 <__swbuf_r+0x6e>
 8007d5e:	89a3      	ldrh	r3, [r4, #12]
 8007d60:	07db      	lsls	r3, r3, #31
 8007d62:	d5e1      	bpl.n	8007d28 <__swbuf_r+0x2e>
 8007d64:	2e0a      	cmp	r6, #10
 8007d66:	d1df      	bne.n	8007d28 <__swbuf_r+0x2e>
 8007d68:	4621      	mov	r1, r4
 8007d6a:	4628      	mov	r0, r5
 8007d6c:	f000 fdf2 	bl	8008954 <_fflush_r>
 8007d70:	2800      	cmp	r0, #0
 8007d72:	d0d9      	beq.n	8007d28 <__swbuf_r+0x2e>
 8007d74:	e7d6      	b.n	8007d24 <__swbuf_r+0x2a>
	...

08007d78 <__swsetup_r>:
 8007d78:	b538      	push	{r3, r4, r5, lr}
 8007d7a:	4b29      	ldr	r3, [pc, #164]	@ (8007e20 <__swsetup_r+0xa8>)
 8007d7c:	4605      	mov	r5, r0
 8007d7e:	6818      	ldr	r0, [r3, #0]
 8007d80:	460c      	mov	r4, r1
 8007d82:	b118      	cbz	r0, 8007d8c <__swsetup_r+0x14>
 8007d84:	6a03      	ldr	r3, [r0, #32]
 8007d86:	b90b      	cbnz	r3, 8007d8c <__swsetup_r+0x14>
 8007d88:	f7ff feae 	bl	8007ae8 <__sinit>
 8007d8c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d90:	0719      	lsls	r1, r3, #28
 8007d92:	d422      	bmi.n	8007dda <__swsetup_r+0x62>
 8007d94:	06da      	lsls	r2, r3, #27
 8007d96:	d407      	bmi.n	8007da8 <__swsetup_r+0x30>
 8007d98:	2209      	movs	r2, #9
 8007d9a:	602a      	str	r2, [r5, #0]
 8007d9c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007da0:	81a3      	strh	r3, [r4, #12]
 8007da2:	f04f 30ff 	mov.w	r0, #4294967295
 8007da6:	e033      	b.n	8007e10 <__swsetup_r+0x98>
 8007da8:	0758      	lsls	r0, r3, #29
 8007daa:	d512      	bpl.n	8007dd2 <__swsetup_r+0x5a>
 8007dac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007dae:	b141      	cbz	r1, 8007dc2 <__swsetup_r+0x4a>
 8007db0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007db4:	4299      	cmp	r1, r3
 8007db6:	d002      	beq.n	8007dbe <__swsetup_r+0x46>
 8007db8:	4628      	mov	r0, r5
 8007dba:	f000 f8d5 	bl	8007f68 <_free_r>
 8007dbe:	2300      	movs	r3, #0
 8007dc0:	6363      	str	r3, [r4, #52]	@ 0x34
 8007dc2:	89a3      	ldrh	r3, [r4, #12]
 8007dc4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007dc8:	81a3      	strh	r3, [r4, #12]
 8007dca:	2300      	movs	r3, #0
 8007dcc:	6063      	str	r3, [r4, #4]
 8007dce:	6923      	ldr	r3, [r4, #16]
 8007dd0:	6023      	str	r3, [r4, #0]
 8007dd2:	89a3      	ldrh	r3, [r4, #12]
 8007dd4:	f043 0308 	orr.w	r3, r3, #8
 8007dd8:	81a3      	strh	r3, [r4, #12]
 8007dda:	6923      	ldr	r3, [r4, #16]
 8007ddc:	b94b      	cbnz	r3, 8007df2 <__swsetup_r+0x7a>
 8007dde:	89a3      	ldrh	r3, [r4, #12]
 8007de0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007de4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007de8:	d003      	beq.n	8007df2 <__swsetup_r+0x7a>
 8007dea:	4621      	mov	r1, r4
 8007dec:	4628      	mov	r0, r5
 8007dee:	f000 fdff 	bl	80089f0 <__smakebuf_r>
 8007df2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007df6:	f013 0201 	ands.w	r2, r3, #1
 8007dfa:	d00a      	beq.n	8007e12 <__swsetup_r+0x9a>
 8007dfc:	2200      	movs	r2, #0
 8007dfe:	60a2      	str	r2, [r4, #8]
 8007e00:	6962      	ldr	r2, [r4, #20]
 8007e02:	4252      	negs	r2, r2
 8007e04:	61a2      	str	r2, [r4, #24]
 8007e06:	6922      	ldr	r2, [r4, #16]
 8007e08:	b942      	cbnz	r2, 8007e1c <__swsetup_r+0xa4>
 8007e0a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007e0e:	d1c5      	bne.n	8007d9c <__swsetup_r+0x24>
 8007e10:	bd38      	pop	{r3, r4, r5, pc}
 8007e12:	0799      	lsls	r1, r3, #30
 8007e14:	bf58      	it	pl
 8007e16:	6962      	ldrpl	r2, [r4, #20]
 8007e18:	60a2      	str	r2, [r4, #8]
 8007e1a:	e7f4      	b.n	8007e06 <__swsetup_r+0x8e>
 8007e1c:	2000      	movs	r0, #0
 8007e1e:	e7f7      	b.n	8007e10 <__swsetup_r+0x98>
 8007e20:	2000004c 	.word	0x2000004c

08007e24 <memset>:
 8007e24:	4402      	add	r2, r0
 8007e26:	4603      	mov	r3, r0
 8007e28:	4293      	cmp	r3, r2
 8007e2a:	d100      	bne.n	8007e2e <memset+0xa>
 8007e2c:	4770      	bx	lr
 8007e2e:	f803 1b01 	strb.w	r1, [r3], #1
 8007e32:	e7f9      	b.n	8007e28 <memset+0x4>

08007e34 <_close_r>:
 8007e34:	b538      	push	{r3, r4, r5, lr}
 8007e36:	4d06      	ldr	r5, [pc, #24]	@ (8007e50 <_close_r+0x1c>)
 8007e38:	2300      	movs	r3, #0
 8007e3a:	4604      	mov	r4, r0
 8007e3c:	4608      	mov	r0, r1
 8007e3e:	602b      	str	r3, [r5, #0]
 8007e40:	f7fa fb4d 	bl	80024de <_close>
 8007e44:	1c43      	adds	r3, r0, #1
 8007e46:	d102      	bne.n	8007e4e <_close_r+0x1a>
 8007e48:	682b      	ldr	r3, [r5, #0]
 8007e4a:	b103      	cbz	r3, 8007e4e <_close_r+0x1a>
 8007e4c:	6023      	str	r3, [r4, #0]
 8007e4e:	bd38      	pop	{r3, r4, r5, pc}
 8007e50:	200004b0 	.word	0x200004b0

08007e54 <_lseek_r>:
 8007e54:	b538      	push	{r3, r4, r5, lr}
 8007e56:	4d07      	ldr	r5, [pc, #28]	@ (8007e74 <_lseek_r+0x20>)
 8007e58:	4604      	mov	r4, r0
 8007e5a:	4608      	mov	r0, r1
 8007e5c:	4611      	mov	r1, r2
 8007e5e:	2200      	movs	r2, #0
 8007e60:	602a      	str	r2, [r5, #0]
 8007e62:	461a      	mov	r2, r3
 8007e64:	f7fa fb62 	bl	800252c <_lseek>
 8007e68:	1c43      	adds	r3, r0, #1
 8007e6a:	d102      	bne.n	8007e72 <_lseek_r+0x1e>
 8007e6c:	682b      	ldr	r3, [r5, #0]
 8007e6e:	b103      	cbz	r3, 8007e72 <_lseek_r+0x1e>
 8007e70:	6023      	str	r3, [r4, #0]
 8007e72:	bd38      	pop	{r3, r4, r5, pc}
 8007e74:	200004b0 	.word	0x200004b0

08007e78 <_read_r>:
 8007e78:	b538      	push	{r3, r4, r5, lr}
 8007e7a:	4d07      	ldr	r5, [pc, #28]	@ (8007e98 <_read_r+0x20>)
 8007e7c:	4604      	mov	r4, r0
 8007e7e:	4608      	mov	r0, r1
 8007e80:	4611      	mov	r1, r2
 8007e82:	2200      	movs	r2, #0
 8007e84:	602a      	str	r2, [r5, #0]
 8007e86:	461a      	mov	r2, r3
 8007e88:	f7fa faf0 	bl	800246c <_read>
 8007e8c:	1c43      	adds	r3, r0, #1
 8007e8e:	d102      	bne.n	8007e96 <_read_r+0x1e>
 8007e90:	682b      	ldr	r3, [r5, #0]
 8007e92:	b103      	cbz	r3, 8007e96 <_read_r+0x1e>
 8007e94:	6023      	str	r3, [r4, #0]
 8007e96:	bd38      	pop	{r3, r4, r5, pc}
 8007e98:	200004b0 	.word	0x200004b0

08007e9c <_sbrk_r>:
 8007e9c:	b538      	push	{r3, r4, r5, lr}
 8007e9e:	4d06      	ldr	r5, [pc, #24]	@ (8007eb8 <_sbrk_r+0x1c>)
 8007ea0:	2300      	movs	r3, #0
 8007ea2:	4604      	mov	r4, r0
 8007ea4:	4608      	mov	r0, r1
 8007ea6:	602b      	str	r3, [r5, #0]
 8007ea8:	f7fa fb4e 	bl	8002548 <_sbrk>
 8007eac:	1c43      	adds	r3, r0, #1
 8007eae:	d102      	bne.n	8007eb6 <_sbrk_r+0x1a>
 8007eb0:	682b      	ldr	r3, [r5, #0]
 8007eb2:	b103      	cbz	r3, 8007eb6 <_sbrk_r+0x1a>
 8007eb4:	6023      	str	r3, [r4, #0]
 8007eb6:	bd38      	pop	{r3, r4, r5, pc}
 8007eb8:	200004b0 	.word	0x200004b0

08007ebc <_write_r>:
 8007ebc:	b538      	push	{r3, r4, r5, lr}
 8007ebe:	4d07      	ldr	r5, [pc, #28]	@ (8007edc <_write_r+0x20>)
 8007ec0:	4604      	mov	r4, r0
 8007ec2:	4608      	mov	r0, r1
 8007ec4:	4611      	mov	r1, r2
 8007ec6:	2200      	movs	r2, #0
 8007ec8:	602a      	str	r2, [r5, #0]
 8007eca:	461a      	mov	r2, r3
 8007ecc:	f7fa faeb 	bl	80024a6 <_write>
 8007ed0:	1c43      	adds	r3, r0, #1
 8007ed2:	d102      	bne.n	8007eda <_write_r+0x1e>
 8007ed4:	682b      	ldr	r3, [r5, #0]
 8007ed6:	b103      	cbz	r3, 8007eda <_write_r+0x1e>
 8007ed8:	6023      	str	r3, [r4, #0]
 8007eda:	bd38      	pop	{r3, r4, r5, pc}
 8007edc:	200004b0 	.word	0x200004b0

08007ee0 <__errno>:
 8007ee0:	4b01      	ldr	r3, [pc, #4]	@ (8007ee8 <__errno+0x8>)
 8007ee2:	6818      	ldr	r0, [r3, #0]
 8007ee4:	4770      	bx	lr
 8007ee6:	bf00      	nop
 8007ee8:	2000004c 	.word	0x2000004c

08007eec <__libc_init_array>:
 8007eec:	b570      	push	{r4, r5, r6, lr}
 8007eee:	4d0d      	ldr	r5, [pc, #52]	@ (8007f24 <__libc_init_array+0x38>)
 8007ef0:	4c0d      	ldr	r4, [pc, #52]	@ (8007f28 <__libc_init_array+0x3c>)
 8007ef2:	1b64      	subs	r4, r4, r5
 8007ef4:	10a4      	asrs	r4, r4, #2
 8007ef6:	2600      	movs	r6, #0
 8007ef8:	42a6      	cmp	r6, r4
 8007efa:	d109      	bne.n	8007f10 <__libc_init_array+0x24>
 8007efc:	4d0b      	ldr	r5, [pc, #44]	@ (8007f2c <__libc_init_array+0x40>)
 8007efe:	4c0c      	ldr	r4, [pc, #48]	@ (8007f30 <__libc_init_array+0x44>)
 8007f00:	f000 fe24 	bl	8008b4c <_init>
 8007f04:	1b64      	subs	r4, r4, r5
 8007f06:	10a4      	asrs	r4, r4, #2
 8007f08:	2600      	movs	r6, #0
 8007f0a:	42a6      	cmp	r6, r4
 8007f0c:	d105      	bne.n	8007f1a <__libc_init_array+0x2e>
 8007f0e:	bd70      	pop	{r4, r5, r6, pc}
 8007f10:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f14:	4798      	blx	r3
 8007f16:	3601      	adds	r6, #1
 8007f18:	e7ee      	b.n	8007ef8 <__libc_init_array+0xc>
 8007f1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f1e:	4798      	blx	r3
 8007f20:	3601      	adds	r6, #1
 8007f22:	e7f2      	b.n	8007f0a <__libc_init_array+0x1e>
 8007f24:	0800c524 	.word	0x0800c524
 8007f28:	0800c524 	.word	0x0800c524
 8007f2c:	0800c524 	.word	0x0800c524
 8007f30:	0800c528 	.word	0x0800c528

08007f34 <__retarget_lock_init_recursive>:
 8007f34:	4770      	bx	lr

08007f36 <__retarget_lock_acquire_recursive>:
 8007f36:	4770      	bx	lr

08007f38 <__retarget_lock_release_recursive>:
 8007f38:	4770      	bx	lr

08007f3a <strcpy>:
 8007f3a:	4603      	mov	r3, r0
 8007f3c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007f40:	f803 2b01 	strb.w	r2, [r3], #1
 8007f44:	2a00      	cmp	r2, #0
 8007f46:	d1f9      	bne.n	8007f3c <strcpy+0x2>
 8007f48:	4770      	bx	lr

08007f4a <memcpy>:
 8007f4a:	440a      	add	r2, r1
 8007f4c:	4291      	cmp	r1, r2
 8007f4e:	f100 33ff 	add.w	r3, r0, #4294967295
 8007f52:	d100      	bne.n	8007f56 <memcpy+0xc>
 8007f54:	4770      	bx	lr
 8007f56:	b510      	push	{r4, lr}
 8007f58:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007f5c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007f60:	4291      	cmp	r1, r2
 8007f62:	d1f9      	bne.n	8007f58 <memcpy+0xe>
 8007f64:	bd10      	pop	{r4, pc}
	...

08007f68 <_free_r>:
 8007f68:	b538      	push	{r3, r4, r5, lr}
 8007f6a:	4605      	mov	r5, r0
 8007f6c:	2900      	cmp	r1, #0
 8007f6e:	d041      	beq.n	8007ff4 <_free_r+0x8c>
 8007f70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007f74:	1f0c      	subs	r4, r1, #4
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	bfb8      	it	lt
 8007f7a:	18e4      	addlt	r4, r4, r3
 8007f7c:	f7ff fd1c 	bl	80079b8 <__malloc_lock>
 8007f80:	4a1d      	ldr	r2, [pc, #116]	@ (8007ff8 <_free_r+0x90>)
 8007f82:	6813      	ldr	r3, [r2, #0]
 8007f84:	b933      	cbnz	r3, 8007f94 <_free_r+0x2c>
 8007f86:	6063      	str	r3, [r4, #4]
 8007f88:	6014      	str	r4, [r2, #0]
 8007f8a:	4628      	mov	r0, r5
 8007f8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007f90:	f7ff bd18 	b.w	80079c4 <__malloc_unlock>
 8007f94:	42a3      	cmp	r3, r4
 8007f96:	d908      	bls.n	8007faa <_free_r+0x42>
 8007f98:	6820      	ldr	r0, [r4, #0]
 8007f9a:	1821      	adds	r1, r4, r0
 8007f9c:	428b      	cmp	r3, r1
 8007f9e:	bf01      	itttt	eq
 8007fa0:	6819      	ldreq	r1, [r3, #0]
 8007fa2:	685b      	ldreq	r3, [r3, #4]
 8007fa4:	1809      	addeq	r1, r1, r0
 8007fa6:	6021      	streq	r1, [r4, #0]
 8007fa8:	e7ed      	b.n	8007f86 <_free_r+0x1e>
 8007faa:	461a      	mov	r2, r3
 8007fac:	685b      	ldr	r3, [r3, #4]
 8007fae:	b10b      	cbz	r3, 8007fb4 <_free_r+0x4c>
 8007fb0:	42a3      	cmp	r3, r4
 8007fb2:	d9fa      	bls.n	8007faa <_free_r+0x42>
 8007fb4:	6811      	ldr	r1, [r2, #0]
 8007fb6:	1850      	adds	r0, r2, r1
 8007fb8:	42a0      	cmp	r0, r4
 8007fba:	d10b      	bne.n	8007fd4 <_free_r+0x6c>
 8007fbc:	6820      	ldr	r0, [r4, #0]
 8007fbe:	4401      	add	r1, r0
 8007fc0:	1850      	adds	r0, r2, r1
 8007fc2:	4283      	cmp	r3, r0
 8007fc4:	6011      	str	r1, [r2, #0]
 8007fc6:	d1e0      	bne.n	8007f8a <_free_r+0x22>
 8007fc8:	6818      	ldr	r0, [r3, #0]
 8007fca:	685b      	ldr	r3, [r3, #4]
 8007fcc:	6053      	str	r3, [r2, #4]
 8007fce:	4408      	add	r0, r1
 8007fd0:	6010      	str	r0, [r2, #0]
 8007fd2:	e7da      	b.n	8007f8a <_free_r+0x22>
 8007fd4:	d902      	bls.n	8007fdc <_free_r+0x74>
 8007fd6:	230c      	movs	r3, #12
 8007fd8:	602b      	str	r3, [r5, #0]
 8007fda:	e7d6      	b.n	8007f8a <_free_r+0x22>
 8007fdc:	6820      	ldr	r0, [r4, #0]
 8007fde:	1821      	adds	r1, r4, r0
 8007fe0:	428b      	cmp	r3, r1
 8007fe2:	bf04      	itt	eq
 8007fe4:	6819      	ldreq	r1, [r3, #0]
 8007fe6:	685b      	ldreq	r3, [r3, #4]
 8007fe8:	6063      	str	r3, [r4, #4]
 8007fea:	bf04      	itt	eq
 8007fec:	1809      	addeq	r1, r1, r0
 8007fee:	6021      	streq	r1, [r4, #0]
 8007ff0:	6054      	str	r4, [r2, #4]
 8007ff2:	e7ca      	b.n	8007f8a <_free_r+0x22>
 8007ff4:	bd38      	pop	{r3, r4, r5, pc}
 8007ff6:	bf00      	nop
 8007ff8:	20000370 	.word	0x20000370

08007ffc <__ssputs_r>:
 8007ffc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008000:	688e      	ldr	r6, [r1, #8]
 8008002:	461f      	mov	r7, r3
 8008004:	42be      	cmp	r6, r7
 8008006:	680b      	ldr	r3, [r1, #0]
 8008008:	4682      	mov	sl, r0
 800800a:	460c      	mov	r4, r1
 800800c:	4690      	mov	r8, r2
 800800e:	d82d      	bhi.n	800806c <__ssputs_r+0x70>
 8008010:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008014:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008018:	d026      	beq.n	8008068 <__ssputs_r+0x6c>
 800801a:	6965      	ldr	r5, [r4, #20]
 800801c:	6909      	ldr	r1, [r1, #16]
 800801e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008022:	eba3 0901 	sub.w	r9, r3, r1
 8008026:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800802a:	1c7b      	adds	r3, r7, #1
 800802c:	444b      	add	r3, r9
 800802e:	106d      	asrs	r5, r5, #1
 8008030:	429d      	cmp	r5, r3
 8008032:	bf38      	it	cc
 8008034:	461d      	movcc	r5, r3
 8008036:	0553      	lsls	r3, r2, #21
 8008038:	d527      	bpl.n	800808a <__ssputs_r+0x8e>
 800803a:	4629      	mov	r1, r5
 800803c:	f7ff fc3c 	bl	80078b8 <_malloc_r>
 8008040:	4606      	mov	r6, r0
 8008042:	b360      	cbz	r0, 800809e <__ssputs_r+0xa2>
 8008044:	6921      	ldr	r1, [r4, #16]
 8008046:	464a      	mov	r2, r9
 8008048:	f7ff ff7f 	bl	8007f4a <memcpy>
 800804c:	89a3      	ldrh	r3, [r4, #12]
 800804e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008052:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008056:	81a3      	strh	r3, [r4, #12]
 8008058:	6126      	str	r6, [r4, #16]
 800805a:	6165      	str	r5, [r4, #20]
 800805c:	444e      	add	r6, r9
 800805e:	eba5 0509 	sub.w	r5, r5, r9
 8008062:	6026      	str	r6, [r4, #0]
 8008064:	60a5      	str	r5, [r4, #8]
 8008066:	463e      	mov	r6, r7
 8008068:	42be      	cmp	r6, r7
 800806a:	d900      	bls.n	800806e <__ssputs_r+0x72>
 800806c:	463e      	mov	r6, r7
 800806e:	6820      	ldr	r0, [r4, #0]
 8008070:	4632      	mov	r2, r6
 8008072:	4641      	mov	r1, r8
 8008074:	f000 fcf8 	bl	8008a68 <memmove>
 8008078:	68a3      	ldr	r3, [r4, #8]
 800807a:	1b9b      	subs	r3, r3, r6
 800807c:	60a3      	str	r3, [r4, #8]
 800807e:	6823      	ldr	r3, [r4, #0]
 8008080:	4433      	add	r3, r6
 8008082:	6023      	str	r3, [r4, #0]
 8008084:	2000      	movs	r0, #0
 8008086:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800808a:	462a      	mov	r2, r5
 800808c:	f000 fd28 	bl	8008ae0 <_realloc_r>
 8008090:	4606      	mov	r6, r0
 8008092:	2800      	cmp	r0, #0
 8008094:	d1e0      	bne.n	8008058 <__ssputs_r+0x5c>
 8008096:	6921      	ldr	r1, [r4, #16]
 8008098:	4650      	mov	r0, sl
 800809a:	f7ff ff65 	bl	8007f68 <_free_r>
 800809e:	230c      	movs	r3, #12
 80080a0:	f8ca 3000 	str.w	r3, [sl]
 80080a4:	89a3      	ldrh	r3, [r4, #12]
 80080a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80080aa:	81a3      	strh	r3, [r4, #12]
 80080ac:	f04f 30ff 	mov.w	r0, #4294967295
 80080b0:	e7e9      	b.n	8008086 <__ssputs_r+0x8a>
	...

080080b4 <_svfiprintf_r>:
 80080b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080b8:	4698      	mov	r8, r3
 80080ba:	898b      	ldrh	r3, [r1, #12]
 80080bc:	061b      	lsls	r3, r3, #24
 80080be:	b09d      	sub	sp, #116	@ 0x74
 80080c0:	4607      	mov	r7, r0
 80080c2:	460d      	mov	r5, r1
 80080c4:	4614      	mov	r4, r2
 80080c6:	d510      	bpl.n	80080ea <_svfiprintf_r+0x36>
 80080c8:	690b      	ldr	r3, [r1, #16]
 80080ca:	b973      	cbnz	r3, 80080ea <_svfiprintf_r+0x36>
 80080cc:	2140      	movs	r1, #64	@ 0x40
 80080ce:	f7ff fbf3 	bl	80078b8 <_malloc_r>
 80080d2:	6028      	str	r0, [r5, #0]
 80080d4:	6128      	str	r0, [r5, #16]
 80080d6:	b930      	cbnz	r0, 80080e6 <_svfiprintf_r+0x32>
 80080d8:	230c      	movs	r3, #12
 80080da:	603b      	str	r3, [r7, #0]
 80080dc:	f04f 30ff 	mov.w	r0, #4294967295
 80080e0:	b01d      	add	sp, #116	@ 0x74
 80080e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080e6:	2340      	movs	r3, #64	@ 0x40
 80080e8:	616b      	str	r3, [r5, #20]
 80080ea:	2300      	movs	r3, #0
 80080ec:	9309      	str	r3, [sp, #36]	@ 0x24
 80080ee:	2320      	movs	r3, #32
 80080f0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80080f4:	f8cd 800c 	str.w	r8, [sp, #12]
 80080f8:	2330      	movs	r3, #48	@ 0x30
 80080fa:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008298 <_svfiprintf_r+0x1e4>
 80080fe:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008102:	f04f 0901 	mov.w	r9, #1
 8008106:	4623      	mov	r3, r4
 8008108:	469a      	mov	sl, r3
 800810a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800810e:	b10a      	cbz	r2, 8008114 <_svfiprintf_r+0x60>
 8008110:	2a25      	cmp	r2, #37	@ 0x25
 8008112:	d1f9      	bne.n	8008108 <_svfiprintf_r+0x54>
 8008114:	ebba 0b04 	subs.w	fp, sl, r4
 8008118:	d00b      	beq.n	8008132 <_svfiprintf_r+0x7e>
 800811a:	465b      	mov	r3, fp
 800811c:	4622      	mov	r2, r4
 800811e:	4629      	mov	r1, r5
 8008120:	4638      	mov	r0, r7
 8008122:	f7ff ff6b 	bl	8007ffc <__ssputs_r>
 8008126:	3001      	adds	r0, #1
 8008128:	f000 80a7 	beq.w	800827a <_svfiprintf_r+0x1c6>
 800812c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800812e:	445a      	add	r2, fp
 8008130:	9209      	str	r2, [sp, #36]	@ 0x24
 8008132:	f89a 3000 	ldrb.w	r3, [sl]
 8008136:	2b00      	cmp	r3, #0
 8008138:	f000 809f 	beq.w	800827a <_svfiprintf_r+0x1c6>
 800813c:	2300      	movs	r3, #0
 800813e:	f04f 32ff 	mov.w	r2, #4294967295
 8008142:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008146:	f10a 0a01 	add.w	sl, sl, #1
 800814a:	9304      	str	r3, [sp, #16]
 800814c:	9307      	str	r3, [sp, #28]
 800814e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008152:	931a      	str	r3, [sp, #104]	@ 0x68
 8008154:	4654      	mov	r4, sl
 8008156:	2205      	movs	r2, #5
 8008158:	f814 1b01 	ldrb.w	r1, [r4], #1
 800815c:	484e      	ldr	r0, [pc, #312]	@ (8008298 <_svfiprintf_r+0x1e4>)
 800815e:	f7f8 f857 	bl	8000210 <memchr>
 8008162:	9a04      	ldr	r2, [sp, #16]
 8008164:	b9d8      	cbnz	r0, 800819e <_svfiprintf_r+0xea>
 8008166:	06d0      	lsls	r0, r2, #27
 8008168:	bf44      	itt	mi
 800816a:	2320      	movmi	r3, #32
 800816c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008170:	0711      	lsls	r1, r2, #28
 8008172:	bf44      	itt	mi
 8008174:	232b      	movmi	r3, #43	@ 0x2b
 8008176:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800817a:	f89a 3000 	ldrb.w	r3, [sl]
 800817e:	2b2a      	cmp	r3, #42	@ 0x2a
 8008180:	d015      	beq.n	80081ae <_svfiprintf_r+0xfa>
 8008182:	9a07      	ldr	r2, [sp, #28]
 8008184:	4654      	mov	r4, sl
 8008186:	2000      	movs	r0, #0
 8008188:	f04f 0c0a 	mov.w	ip, #10
 800818c:	4621      	mov	r1, r4
 800818e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008192:	3b30      	subs	r3, #48	@ 0x30
 8008194:	2b09      	cmp	r3, #9
 8008196:	d94b      	bls.n	8008230 <_svfiprintf_r+0x17c>
 8008198:	b1b0      	cbz	r0, 80081c8 <_svfiprintf_r+0x114>
 800819a:	9207      	str	r2, [sp, #28]
 800819c:	e014      	b.n	80081c8 <_svfiprintf_r+0x114>
 800819e:	eba0 0308 	sub.w	r3, r0, r8
 80081a2:	fa09 f303 	lsl.w	r3, r9, r3
 80081a6:	4313      	orrs	r3, r2
 80081a8:	9304      	str	r3, [sp, #16]
 80081aa:	46a2      	mov	sl, r4
 80081ac:	e7d2      	b.n	8008154 <_svfiprintf_r+0xa0>
 80081ae:	9b03      	ldr	r3, [sp, #12]
 80081b0:	1d19      	adds	r1, r3, #4
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	9103      	str	r1, [sp, #12]
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	bfbb      	ittet	lt
 80081ba:	425b      	neglt	r3, r3
 80081bc:	f042 0202 	orrlt.w	r2, r2, #2
 80081c0:	9307      	strge	r3, [sp, #28]
 80081c2:	9307      	strlt	r3, [sp, #28]
 80081c4:	bfb8      	it	lt
 80081c6:	9204      	strlt	r2, [sp, #16]
 80081c8:	7823      	ldrb	r3, [r4, #0]
 80081ca:	2b2e      	cmp	r3, #46	@ 0x2e
 80081cc:	d10a      	bne.n	80081e4 <_svfiprintf_r+0x130>
 80081ce:	7863      	ldrb	r3, [r4, #1]
 80081d0:	2b2a      	cmp	r3, #42	@ 0x2a
 80081d2:	d132      	bne.n	800823a <_svfiprintf_r+0x186>
 80081d4:	9b03      	ldr	r3, [sp, #12]
 80081d6:	1d1a      	adds	r2, r3, #4
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	9203      	str	r2, [sp, #12]
 80081dc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80081e0:	3402      	adds	r4, #2
 80081e2:	9305      	str	r3, [sp, #20]
 80081e4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80082a8 <_svfiprintf_r+0x1f4>
 80081e8:	7821      	ldrb	r1, [r4, #0]
 80081ea:	2203      	movs	r2, #3
 80081ec:	4650      	mov	r0, sl
 80081ee:	f7f8 f80f 	bl	8000210 <memchr>
 80081f2:	b138      	cbz	r0, 8008204 <_svfiprintf_r+0x150>
 80081f4:	9b04      	ldr	r3, [sp, #16]
 80081f6:	eba0 000a 	sub.w	r0, r0, sl
 80081fa:	2240      	movs	r2, #64	@ 0x40
 80081fc:	4082      	lsls	r2, r0
 80081fe:	4313      	orrs	r3, r2
 8008200:	3401      	adds	r4, #1
 8008202:	9304      	str	r3, [sp, #16]
 8008204:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008208:	4824      	ldr	r0, [pc, #144]	@ (800829c <_svfiprintf_r+0x1e8>)
 800820a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800820e:	2206      	movs	r2, #6
 8008210:	f7f7 fffe 	bl	8000210 <memchr>
 8008214:	2800      	cmp	r0, #0
 8008216:	d036      	beq.n	8008286 <_svfiprintf_r+0x1d2>
 8008218:	4b21      	ldr	r3, [pc, #132]	@ (80082a0 <_svfiprintf_r+0x1ec>)
 800821a:	bb1b      	cbnz	r3, 8008264 <_svfiprintf_r+0x1b0>
 800821c:	9b03      	ldr	r3, [sp, #12]
 800821e:	3307      	adds	r3, #7
 8008220:	f023 0307 	bic.w	r3, r3, #7
 8008224:	3308      	adds	r3, #8
 8008226:	9303      	str	r3, [sp, #12]
 8008228:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800822a:	4433      	add	r3, r6
 800822c:	9309      	str	r3, [sp, #36]	@ 0x24
 800822e:	e76a      	b.n	8008106 <_svfiprintf_r+0x52>
 8008230:	fb0c 3202 	mla	r2, ip, r2, r3
 8008234:	460c      	mov	r4, r1
 8008236:	2001      	movs	r0, #1
 8008238:	e7a8      	b.n	800818c <_svfiprintf_r+0xd8>
 800823a:	2300      	movs	r3, #0
 800823c:	3401      	adds	r4, #1
 800823e:	9305      	str	r3, [sp, #20]
 8008240:	4619      	mov	r1, r3
 8008242:	f04f 0c0a 	mov.w	ip, #10
 8008246:	4620      	mov	r0, r4
 8008248:	f810 2b01 	ldrb.w	r2, [r0], #1
 800824c:	3a30      	subs	r2, #48	@ 0x30
 800824e:	2a09      	cmp	r2, #9
 8008250:	d903      	bls.n	800825a <_svfiprintf_r+0x1a6>
 8008252:	2b00      	cmp	r3, #0
 8008254:	d0c6      	beq.n	80081e4 <_svfiprintf_r+0x130>
 8008256:	9105      	str	r1, [sp, #20]
 8008258:	e7c4      	b.n	80081e4 <_svfiprintf_r+0x130>
 800825a:	fb0c 2101 	mla	r1, ip, r1, r2
 800825e:	4604      	mov	r4, r0
 8008260:	2301      	movs	r3, #1
 8008262:	e7f0      	b.n	8008246 <_svfiprintf_r+0x192>
 8008264:	ab03      	add	r3, sp, #12
 8008266:	9300      	str	r3, [sp, #0]
 8008268:	462a      	mov	r2, r5
 800826a:	4b0e      	ldr	r3, [pc, #56]	@ (80082a4 <_svfiprintf_r+0x1f0>)
 800826c:	a904      	add	r1, sp, #16
 800826e:	4638      	mov	r0, r7
 8008270:	f3af 8000 	nop.w
 8008274:	1c42      	adds	r2, r0, #1
 8008276:	4606      	mov	r6, r0
 8008278:	d1d6      	bne.n	8008228 <_svfiprintf_r+0x174>
 800827a:	89ab      	ldrh	r3, [r5, #12]
 800827c:	065b      	lsls	r3, r3, #25
 800827e:	f53f af2d 	bmi.w	80080dc <_svfiprintf_r+0x28>
 8008282:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008284:	e72c      	b.n	80080e0 <_svfiprintf_r+0x2c>
 8008286:	ab03      	add	r3, sp, #12
 8008288:	9300      	str	r3, [sp, #0]
 800828a:	462a      	mov	r2, r5
 800828c:	4b05      	ldr	r3, [pc, #20]	@ (80082a4 <_svfiprintf_r+0x1f0>)
 800828e:	a904      	add	r1, sp, #16
 8008290:	4638      	mov	r0, r7
 8008292:	f000 f9bb 	bl	800860c <_printf_i>
 8008296:	e7ed      	b.n	8008274 <_svfiprintf_r+0x1c0>
 8008298:	0800c4e8 	.word	0x0800c4e8
 800829c:	0800c4f2 	.word	0x0800c4f2
 80082a0:	00000000 	.word	0x00000000
 80082a4:	08007ffd 	.word	0x08007ffd
 80082a8:	0800c4ee 	.word	0x0800c4ee

080082ac <__sfputc_r>:
 80082ac:	6893      	ldr	r3, [r2, #8]
 80082ae:	3b01      	subs	r3, #1
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	b410      	push	{r4}
 80082b4:	6093      	str	r3, [r2, #8]
 80082b6:	da08      	bge.n	80082ca <__sfputc_r+0x1e>
 80082b8:	6994      	ldr	r4, [r2, #24]
 80082ba:	42a3      	cmp	r3, r4
 80082bc:	db01      	blt.n	80082c2 <__sfputc_r+0x16>
 80082be:	290a      	cmp	r1, #10
 80082c0:	d103      	bne.n	80082ca <__sfputc_r+0x1e>
 80082c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80082c6:	f7ff bd18 	b.w	8007cfa <__swbuf_r>
 80082ca:	6813      	ldr	r3, [r2, #0]
 80082cc:	1c58      	adds	r0, r3, #1
 80082ce:	6010      	str	r0, [r2, #0]
 80082d0:	7019      	strb	r1, [r3, #0]
 80082d2:	4608      	mov	r0, r1
 80082d4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80082d8:	4770      	bx	lr

080082da <__sfputs_r>:
 80082da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082dc:	4606      	mov	r6, r0
 80082de:	460f      	mov	r7, r1
 80082e0:	4614      	mov	r4, r2
 80082e2:	18d5      	adds	r5, r2, r3
 80082e4:	42ac      	cmp	r4, r5
 80082e6:	d101      	bne.n	80082ec <__sfputs_r+0x12>
 80082e8:	2000      	movs	r0, #0
 80082ea:	e007      	b.n	80082fc <__sfputs_r+0x22>
 80082ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80082f0:	463a      	mov	r2, r7
 80082f2:	4630      	mov	r0, r6
 80082f4:	f7ff ffda 	bl	80082ac <__sfputc_r>
 80082f8:	1c43      	adds	r3, r0, #1
 80082fa:	d1f3      	bne.n	80082e4 <__sfputs_r+0xa>
 80082fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008300 <_vfiprintf_r>:
 8008300:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008304:	460d      	mov	r5, r1
 8008306:	b09d      	sub	sp, #116	@ 0x74
 8008308:	4614      	mov	r4, r2
 800830a:	4698      	mov	r8, r3
 800830c:	4606      	mov	r6, r0
 800830e:	b118      	cbz	r0, 8008318 <_vfiprintf_r+0x18>
 8008310:	6a03      	ldr	r3, [r0, #32]
 8008312:	b90b      	cbnz	r3, 8008318 <_vfiprintf_r+0x18>
 8008314:	f7ff fbe8 	bl	8007ae8 <__sinit>
 8008318:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800831a:	07d9      	lsls	r1, r3, #31
 800831c:	d405      	bmi.n	800832a <_vfiprintf_r+0x2a>
 800831e:	89ab      	ldrh	r3, [r5, #12]
 8008320:	059a      	lsls	r2, r3, #22
 8008322:	d402      	bmi.n	800832a <_vfiprintf_r+0x2a>
 8008324:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008326:	f7ff fe06 	bl	8007f36 <__retarget_lock_acquire_recursive>
 800832a:	89ab      	ldrh	r3, [r5, #12]
 800832c:	071b      	lsls	r3, r3, #28
 800832e:	d501      	bpl.n	8008334 <_vfiprintf_r+0x34>
 8008330:	692b      	ldr	r3, [r5, #16]
 8008332:	b99b      	cbnz	r3, 800835c <_vfiprintf_r+0x5c>
 8008334:	4629      	mov	r1, r5
 8008336:	4630      	mov	r0, r6
 8008338:	f7ff fd1e 	bl	8007d78 <__swsetup_r>
 800833c:	b170      	cbz	r0, 800835c <_vfiprintf_r+0x5c>
 800833e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008340:	07dc      	lsls	r4, r3, #31
 8008342:	d504      	bpl.n	800834e <_vfiprintf_r+0x4e>
 8008344:	f04f 30ff 	mov.w	r0, #4294967295
 8008348:	b01d      	add	sp, #116	@ 0x74
 800834a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800834e:	89ab      	ldrh	r3, [r5, #12]
 8008350:	0598      	lsls	r0, r3, #22
 8008352:	d4f7      	bmi.n	8008344 <_vfiprintf_r+0x44>
 8008354:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008356:	f7ff fdef 	bl	8007f38 <__retarget_lock_release_recursive>
 800835a:	e7f3      	b.n	8008344 <_vfiprintf_r+0x44>
 800835c:	2300      	movs	r3, #0
 800835e:	9309      	str	r3, [sp, #36]	@ 0x24
 8008360:	2320      	movs	r3, #32
 8008362:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008366:	f8cd 800c 	str.w	r8, [sp, #12]
 800836a:	2330      	movs	r3, #48	@ 0x30
 800836c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800851c <_vfiprintf_r+0x21c>
 8008370:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008374:	f04f 0901 	mov.w	r9, #1
 8008378:	4623      	mov	r3, r4
 800837a:	469a      	mov	sl, r3
 800837c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008380:	b10a      	cbz	r2, 8008386 <_vfiprintf_r+0x86>
 8008382:	2a25      	cmp	r2, #37	@ 0x25
 8008384:	d1f9      	bne.n	800837a <_vfiprintf_r+0x7a>
 8008386:	ebba 0b04 	subs.w	fp, sl, r4
 800838a:	d00b      	beq.n	80083a4 <_vfiprintf_r+0xa4>
 800838c:	465b      	mov	r3, fp
 800838e:	4622      	mov	r2, r4
 8008390:	4629      	mov	r1, r5
 8008392:	4630      	mov	r0, r6
 8008394:	f7ff ffa1 	bl	80082da <__sfputs_r>
 8008398:	3001      	adds	r0, #1
 800839a:	f000 80a7 	beq.w	80084ec <_vfiprintf_r+0x1ec>
 800839e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80083a0:	445a      	add	r2, fp
 80083a2:	9209      	str	r2, [sp, #36]	@ 0x24
 80083a4:	f89a 3000 	ldrb.w	r3, [sl]
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	f000 809f 	beq.w	80084ec <_vfiprintf_r+0x1ec>
 80083ae:	2300      	movs	r3, #0
 80083b0:	f04f 32ff 	mov.w	r2, #4294967295
 80083b4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80083b8:	f10a 0a01 	add.w	sl, sl, #1
 80083bc:	9304      	str	r3, [sp, #16]
 80083be:	9307      	str	r3, [sp, #28]
 80083c0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80083c4:	931a      	str	r3, [sp, #104]	@ 0x68
 80083c6:	4654      	mov	r4, sl
 80083c8:	2205      	movs	r2, #5
 80083ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80083ce:	4853      	ldr	r0, [pc, #332]	@ (800851c <_vfiprintf_r+0x21c>)
 80083d0:	f7f7 ff1e 	bl	8000210 <memchr>
 80083d4:	9a04      	ldr	r2, [sp, #16]
 80083d6:	b9d8      	cbnz	r0, 8008410 <_vfiprintf_r+0x110>
 80083d8:	06d1      	lsls	r1, r2, #27
 80083da:	bf44      	itt	mi
 80083dc:	2320      	movmi	r3, #32
 80083de:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80083e2:	0713      	lsls	r3, r2, #28
 80083e4:	bf44      	itt	mi
 80083e6:	232b      	movmi	r3, #43	@ 0x2b
 80083e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80083ec:	f89a 3000 	ldrb.w	r3, [sl]
 80083f0:	2b2a      	cmp	r3, #42	@ 0x2a
 80083f2:	d015      	beq.n	8008420 <_vfiprintf_r+0x120>
 80083f4:	9a07      	ldr	r2, [sp, #28]
 80083f6:	4654      	mov	r4, sl
 80083f8:	2000      	movs	r0, #0
 80083fa:	f04f 0c0a 	mov.w	ip, #10
 80083fe:	4621      	mov	r1, r4
 8008400:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008404:	3b30      	subs	r3, #48	@ 0x30
 8008406:	2b09      	cmp	r3, #9
 8008408:	d94b      	bls.n	80084a2 <_vfiprintf_r+0x1a2>
 800840a:	b1b0      	cbz	r0, 800843a <_vfiprintf_r+0x13a>
 800840c:	9207      	str	r2, [sp, #28]
 800840e:	e014      	b.n	800843a <_vfiprintf_r+0x13a>
 8008410:	eba0 0308 	sub.w	r3, r0, r8
 8008414:	fa09 f303 	lsl.w	r3, r9, r3
 8008418:	4313      	orrs	r3, r2
 800841a:	9304      	str	r3, [sp, #16]
 800841c:	46a2      	mov	sl, r4
 800841e:	e7d2      	b.n	80083c6 <_vfiprintf_r+0xc6>
 8008420:	9b03      	ldr	r3, [sp, #12]
 8008422:	1d19      	adds	r1, r3, #4
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	9103      	str	r1, [sp, #12]
 8008428:	2b00      	cmp	r3, #0
 800842a:	bfbb      	ittet	lt
 800842c:	425b      	neglt	r3, r3
 800842e:	f042 0202 	orrlt.w	r2, r2, #2
 8008432:	9307      	strge	r3, [sp, #28]
 8008434:	9307      	strlt	r3, [sp, #28]
 8008436:	bfb8      	it	lt
 8008438:	9204      	strlt	r2, [sp, #16]
 800843a:	7823      	ldrb	r3, [r4, #0]
 800843c:	2b2e      	cmp	r3, #46	@ 0x2e
 800843e:	d10a      	bne.n	8008456 <_vfiprintf_r+0x156>
 8008440:	7863      	ldrb	r3, [r4, #1]
 8008442:	2b2a      	cmp	r3, #42	@ 0x2a
 8008444:	d132      	bne.n	80084ac <_vfiprintf_r+0x1ac>
 8008446:	9b03      	ldr	r3, [sp, #12]
 8008448:	1d1a      	adds	r2, r3, #4
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	9203      	str	r2, [sp, #12]
 800844e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008452:	3402      	adds	r4, #2
 8008454:	9305      	str	r3, [sp, #20]
 8008456:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800852c <_vfiprintf_r+0x22c>
 800845a:	7821      	ldrb	r1, [r4, #0]
 800845c:	2203      	movs	r2, #3
 800845e:	4650      	mov	r0, sl
 8008460:	f7f7 fed6 	bl	8000210 <memchr>
 8008464:	b138      	cbz	r0, 8008476 <_vfiprintf_r+0x176>
 8008466:	9b04      	ldr	r3, [sp, #16]
 8008468:	eba0 000a 	sub.w	r0, r0, sl
 800846c:	2240      	movs	r2, #64	@ 0x40
 800846e:	4082      	lsls	r2, r0
 8008470:	4313      	orrs	r3, r2
 8008472:	3401      	adds	r4, #1
 8008474:	9304      	str	r3, [sp, #16]
 8008476:	f814 1b01 	ldrb.w	r1, [r4], #1
 800847a:	4829      	ldr	r0, [pc, #164]	@ (8008520 <_vfiprintf_r+0x220>)
 800847c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008480:	2206      	movs	r2, #6
 8008482:	f7f7 fec5 	bl	8000210 <memchr>
 8008486:	2800      	cmp	r0, #0
 8008488:	d03f      	beq.n	800850a <_vfiprintf_r+0x20a>
 800848a:	4b26      	ldr	r3, [pc, #152]	@ (8008524 <_vfiprintf_r+0x224>)
 800848c:	bb1b      	cbnz	r3, 80084d6 <_vfiprintf_r+0x1d6>
 800848e:	9b03      	ldr	r3, [sp, #12]
 8008490:	3307      	adds	r3, #7
 8008492:	f023 0307 	bic.w	r3, r3, #7
 8008496:	3308      	adds	r3, #8
 8008498:	9303      	str	r3, [sp, #12]
 800849a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800849c:	443b      	add	r3, r7
 800849e:	9309      	str	r3, [sp, #36]	@ 0x24
 80084a0:	e76a      	b.n	8008378 <_vfiprintf_r+0x78>
 80084a2:	fb0c 3202 	mla	r2, ip, r2, r3
 80084a6:	460c      	mov	r4, r1
 80084a8:	2001      	movs	r0, #1
 80084aa:	e7a8      	b.n	80083fe <_vfiprintf_r+0xfe>
 80084ac:	2300      	movs	r3, #0
 80084ae:	3401      	adds	r4, #1
 80084b0:	9305      	str	r3, [sp, #20]
 80084b2:	4619      	mov	r1, r3
 80084b4:	f04f 0c0a 	mov.w	ip, #10
 80084b8:	4620      	mov	r0, r4
 80084ba:	f810 2b01 	ldrb.w	r2, [r0], #1
 80084be:	3a30      	subs	r2, #48	@ 0x30
 80084c0:	2a09      	cmp	r2, #9
 80084c2:	d903      	bls.n	80084cc <_vfiprintf_r+0x1cc>
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d0c6      	beq.n	8008456 <_vfiprintf_r+0x156>
 80084c8:	9105      	str	r1, [sp, #20]
 80084ca:	e7c4      	b.n	8008456 <_vfiprintf_r+0x156>
 80084cc:	fb0c 2101 	mla	r1, ip, r1, r2
 80084d0:	4604      	mov	r4, r0
 80084d2:	2301      	movs	r3, #1
 80084d4:	e7f0      	b.n	80084b8 <_vfiprintf_r+0x1b8>
 80084d6:	ab03      	add	r3, sp, #12
 80084d8:	9300      	str	r3, [sp, #0]
 80084da:	462a      	mov	r2, r5
 80084dc:	4b12      	ldr	r3, [pc, #72]	@ (8008528 <_vfiprintf_r+0x228>)
 80084de:	a904      	add	r1, sp, #16
 80084e0:	4630      	mov	r0, r6
 80084e2:	f3af 8000 	nop.w
 80084e6:	4607      	mov	r7, r0
 80084e8:	1c78      	adds	r0, r7, #1
 80084ea:	d1d6      	bne.n	800849a <_vfiprintf_r+0x19a>
 80084ec:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80084ee:	07d9      	lsls	r1, r3, #31
 80084f0:	d405      	bmi.n	80084fe <_vfiprintf_r+0x1fe>
 80084f2:	89ab      	ldrh	r3, [r5, #12]
 80084f4:	059a      	lsls	r2, r3, #22
 80084f6:	d402      	bmi.n	80084fe <_vfiprintf_r+0x1fe>
 80084f8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80084fa:	f7ff fd1d 	bl	8007f38 <__retarget_lock_release_recursive>
 80084fe:	89ab      	ldrh	r3, [r5, #12]
 8008500:	065b      	lsls	r3, r3, #25
 8008502:	f53f af1f 	bmi.w	8008344 <_vfiprintf_r+0x44>
 8008506:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008508:	e71e      	b.n	8008348 <_vfiprintf_r+0x48>
 800850a:	ab03      	add	r3, sp, #12
 800850c:	9300      	str	r3, [sp, #0]
 800850e:	462a      	mov	r2, r5
 8008510:	4b05      	ldr	r3, [pc, #20]	@ (8008528 <_vfiprintf_r+0x228>)
 8008512:	a904      	add	r1, sp, #16
 8008514:	4630      	mov	r0, r6
 8008516:	f000 f879 	bl	800860c <_printf_i>
 800851a:	e7e4      	b.n	80084e6 <_vfiprintf_r+0x1e6>
 800851c:	0800c4e8 	.word	0x0800c4e8
 8008520:	0800c4f2 	.word	0x0800c4f2
 8008524:	00000000 	.word	0x00000000
 8008528:	080082db 	.word	0x080082db
 800852c:	0800c4ee 	.word	0x0800c4ee

08008530 <_printf_common>:
 8008530:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008534:	4616      	mov	r6, r2
 8008536:	4698      	mov	r8, r3
 8008538:	688a      	ldr	r2, [r1, #8]
 800853a:	690b      	ldr	r3, [r1, #16]
 800853c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008540:	4293      	cmp	r3, r2
 8008542:	bfb8      	it	lt
 8008544:	4613      	movlt	r3, r2
 8008546:	6033      	str	r3, [r6, #0]
 8008548:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800854c:	4607      	mov	r7, r0
 800854e:	460c      	mov	r4, r1
 8008550:	b10a      	cbz	r2, 8008556 <_printf_common+0x26>
 8008552:	3301      	adds	r3, #1
 8008554:	6033      	str	r3, [r6, #0]
 8008556:	6823      	ldr	r3, [r4, #0]
 8008558:	0699      	lsls	r1, r3, #26
 800855a:	bf42      	ittt	mi
 800855c:	6833      	ldrmi	r3, [r6, #0]
 800855e:	3302      	addmi	r3, #2
 8008560:	6033      	strmi	r3, [r6, #0]
 8008562:	6825      	ldr	r5, [r4, #0]
 8008564:	f015 0506 	ands.w	r5, r5, #6
 8008568:	d106      	bne.n	8008578 <_printf_common+0x48>
 800856a:	f104 0a19 	add.w	sl, r4, #25
 800856e:	68e3      	ldr	r3, [r4, #12]
 8008570:	6832      	ldr	r2, [r6, #0]
 8008572:	1a9b      	subs	r3, r3, r2
 8008574:	42ab      	cmp	r3, r5
 8008576:	dc26      	bgt.n	80085c6 <_printf_common+0x96>
 8008578:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800857c:	6822      	ldr	r2, [r4, #0]
 800857e:	3b00      	subs	r3, #0
 8008580:	bf18      	it	ne
 8008582:	2301      	movne	r3, #1
 8008584:	0692      	lsls	r2, r2, #26
 8008586:	d42b      	bmi.n	80085e0 <_printf_common+0xb0>
 8008588:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800858c:	4641      	mov	r1, r8
 800858e:	4638      	mov	r0, r7
 8008590:	47c8      	blx	r9
 8008592:	3001      	adds	r0, #1
 8008594:	d01e      	beq.n	80085d4 <_printf_common+0xa4>
 8008596:	6823      	ldr	r3, [r4, #0]
 8008598:	6922      	ldr	r2, [r4, #16]
 800859a:	f003 0306 	and.w	r3, r3, #6
 800859e:	2b04      	cmp	r3, #4
 80085a0:	bf02      	ittt	eq
 80085a2:	68e5      	ldreq	r5, [r4, #12]
 80085a4:	6833      	ldreq	r3, [r6, #0]
 80085a6:	1aed      	subeq	r5, r5, r3
 80085a8:	68a3      	ldr	r3, [r4, #8]
 80085aa:	bf0c      	ite	eq
 80085ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80085b0:	2500      	movne	r5, #0
 80085b2:	4293      	cmp	r3, r2
 80085b4:	bfc4      	itt	gt
 80085b6:	1a9b      	subgt	r3, r3, r2
 80085b8:	18ed      	addgt	r5, r5, r3
 80085ba:	2600      	movs	r6, #0
 80085bc:	341a      	adds	r4, #26
 80085be:	42b5      	cmp	r5, r6
 80085c0:	d11a      	bne.n	80085f8 <_printf_common+0xc8>
 80085c2:	2000      	movs	r0, #0
 80085c4:	e008      	b.n	80085d8 <_printf_common+0xa8>
 80085c6:	2301      	movs	r3, #1
 80085c8:	4652      	mov	r2, sl
 80085ca:	4641      	mov	r1, r8
 80085cc:	4638      	mov	r0, r7
 80085ce:	47c8      	blx	r9
 80085d0:	3001      	adds	r0, #1
 80085d2:	d103      	bne.n	80085dc <_printf_common+0xac>
 80085d4:	f04f 30ff 	mov.w	r0, #4294967295
 80085d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085dc:	3501      	adds	r5, #1
 80085de:	e7c6      	b.n	800856e <_printf_common+0x3e>
 80085e0:	18e1      	adds	r1, r4, r3
 80085e2:	1c5a      	adds	r2, r3, #1
 80085e4:	2030      	movs	r0, #48	@ 0x30
 80085e6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80085ea:	4422      	add	r2, r4
 80085ec:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80085f0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80085f4:	3302      	adds	r3, #2
 80085f6:	e7c7      	b.n	8008588 <_printf_common+0x58>
 80085f8:	2301      	movs	r3, #1
 80085fa:	4622      	mov	r2, r4
 80085fc:	4641      	mov	r1, r8
 80085fe:	4638      	mov	r0, r7
 8008600:	47c8      	blx	r9
 8008602:	3001      	adds	r0, #1
 8008604:	d0e6      	beq.n	80085d4 <_printf_common+0xa4>
 8008606:	3601      	adds	r6, #1
 8008608:	e7d9      	b.n	80085be <_printf_common+0x8e>
	...

0800860c <_printf_i>:
 800860c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008610:	7e0f      	ldrb	r7, [r1, #24]
 8008612:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008614:	2f78      	cmp	r7, #120	@ 0x78
 8008616:	4691      	mov	r9, r2
 8008618:	4680      	mov	r8, r0
 800861a:	460c      	mov	r4, r1
 800861c:	469a      	mov	sl, r3
 800861e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008622:	d807      	bhi.n	8008634 <_printf_i+0x28>
 8008624:	2f62      	cmp	r7, #98	@ 0x62
 8008626:	d80a      	bhi.n	800863e <_printf_i+0x32>
 8008628:	2f00      	cmp	r7, #0
 800862a:	f000 80d2 	beq.w	80087d2 <_printf_i+0x1c6>
 800862e:	2f58      	cmp	r7, #88	@ 0x58
 8008630:	f000 80b9 	beq.w	80087a6 <_printf_i+0x19a>
 8008634:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008638:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800863c:	e03a      	b.n	80086b4 <_printf_i+0xa8>
 800863e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008642:	2b15      	cmp	r3, #21
 8008644:	d8f6      	bhi.n	8008634 <_printf_i+0x28>
 8008646:	a101      	add	r1, pc, #4	@ (adr r1, 800864c <_printf_i+0x40>)
 8008648:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800864c:	080086a5 	.word	0x080086a5
 8008650:	080086b9 	.word	0x080086b9
 8008654:	08008635 	.word	0x08008635
 8008658:	08008635 	.word	0x08008635
 800865c:	08008635 	.word	0x08008635
 8008660:	08008635 	.word	0x08008635
 8008664:	080086b9 	.word	0x080086b9
 8008668:	08008635 	.word	0x08008635
 800866c:	08008635 	.word	0x08008635
 8008670:	08008635 	.word	0x08008635
 8008674:	08008635 	.word	0x08008635
 8008678:	080087b9 	.word	0x080087b9
 800867c:	080086e3 	.word	0x080086e3
 8008680:	08008773 	.word	0x08008773
 8008684:	08008635 	.word	0x08008635
 8008688:	08008635 	.word	0x08008635
 800868c:	080087db 	.word	0x080087db
 8008690:	08008635 	.word	0x08008635
 8008694:	080086e3 	.word	0x080086e3
 8008698:	08008635 	.word	0x08008635
 800869c:	08008635 	.word	0x08008635
 80086a0:	0800877b 	.word	0x0800877b
 80086a4:	6833      	ldr	r3, [r6, #0]
 80086a6:	1d1a      	adds	r2, r3, #4
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	6032      	str	r2, [r6, #0]
 80086ac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80086b0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80086b4:	2301      	movs	r3, #1
 80086b6:	e09d      	b.n	80087f4 <_printf_i+0x1e8>
 80086b8:	6833      	ldr	r3, [r6, #0]
 80086ba:	6820      	ldr	r0, [r4, #0]
 80086bc:	1d19      	adds	r1, r3, #4
 80086be:	6031      	str	r1, [r6, #0]
 80086c0:	0606      	lsls	r6, r0, #24
 80086c2:	d501      	bpl.n	80086c8 <_printf_i+0xbc>
 80086c4:	681d      	ldr	r5, [r3, #0]
 80086c6:	e003      	b.n	80086d0 <_printf_i+0xc4>
 80086c8:	0645      	lsls	r5, r0, #25
 80086ca:	d5fb      	bpl.n	80086c4 <_printf_i+0xb8>
 80086cc:	f9b3 5000 	ldrsh.w	r5, [r3]
 80086d0:	2d00      	cmp	r5, #0
 80086d2:	da03      	bge.n	80086dc <_printf_i+0xd0>
 80086d4:	232d      	movs	r3, #45	@ 0x2d
 80086d6:	426d      	negs	r5, r5
 80086d8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80086dc:	4859      	ldr	r0, [pc, #356]	@ (8008844 <_printf_i+0x238>)
 80086de:	230a      	movs	r3, #10
 80086e0:	e011      	b.n	8008706 <_printf_i+0xfa>
 80086e2:	6821      	ldr	r1, [r4, #0]
 80086e4:	6833      	ldr	r3, [r6, #0]
 80086e6:	0608      	lsls	r0, r1, #24
 80086e8:	f853 5b04 	ldr.w	r5, [r3], #4
 80086ec:	d402      	bmi.n	80086f4 <_printf_i+0xe8>
 80086ee:	0649      	lsls	r1, r1, #25
 80086f0:	bf48      	it	mi
 80086f2:	b2ad      	uxthmi	r5, r5
 80086f4:	2f6f      	cmp	r7, #111	@ 0x6f
 80086f6:	4853      	ldr	r0, [pc, #332]	@ (8008844 <_printf_i+0x238>)
 80086f8:	6033      	str	r3, [r6, #0]
 80086fa:	bf14      	ite	ne
 80086fc:	230a      	movne	r3, #10
 80086fe:	2308      	moveq	r3, #8
 8008700:	2100      	movs	r1, #0
 8008702:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008706:	6866      	ldr	r6, [r4, #4]
 8008708:	60a6      	str	r6, [r4, #8]
 800870a:	2e00      	cmp	r6, #0
 800870c:	bfa2      	ittt	ge
 800870e:	6821      	ldrge	r1, [r4, #0]
 8008710:	f021 0104 	bicge.w	r1, r1, #4
 8008714:	6021      	strge	r1, [r4, #0]
 8008716:	b90d      	cbnz	r5, 800871c <_printf_i+0x110>
 8008718:	2e00      	cmp	r6, #0
 800871a:	d04b      	beq.n	80087b4 <_printf_i+0x1a8>
 800871c:	4616      	mov	r6, r2
 800871e:	fbb5 f1f3 	udiv	r1, r5, r3
 8008722:	fb03 5711 	mls	r7, r3, r1, r5
 8008726:	5dc7      	ldrb	r7, [r0, r7]
 8008728:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800872c:	462f      	mov	r7, r5
 800872e:	42bb      	cmp	r3, r7
 8008730:	460d      	mov	r5, r1
 8008732:	d9f4      	bls.n	800871e <_printf_i+0x112>
 8008734:	2b08      	cmp	r3, #8
 8008736:	d10b      	bne.n	8008750 <_printf_i+0x144>
 8008738:	6823      	ldr	r3, [r4, #0]
 800873a:	07df      	lsls	r7, r3, #31
 800873c:	d508      	bpl.n	8008750 <_printf_i+0x144>
 800873e:	6923      	ldr	r3, [r4, #16]
 8008740:	6861      	ldr	r1, [r4, #4]
 8008742:	4299      	cmp	r1, r3
 8008744:	bfde      	ittt	le
 8008746:	2330      	movle	r3, #48	@ 0x30
 8008748:	f806 3c01 	strble.w	r3, [r6, #-1]
 800874c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008750:	1b92      	subs	r2, r2, r6
 8008752:	6122      	str	r2, [r4, #16]
 8008754:	f8cd a000 	str.w	sl, [sp]
 8008758:	464b      	mov	r3, r9
 800875a:	aa03      	add	r2, sp, #12
 800875c:	4621      	mov	r1, r4
 800875e:	4640      	mov	r0, r8
 8008760:	f7ff fee6 	bl	8008530 <_printf_common>
 8008764:	3001      	adds	r0, #1
 8008766:	d14a      	bne.n	80087fe <_printf_i+0x1f2>
 8008768:	f04f 30ff 	mov.w	r0, #4294967295
 800876c:	b004      	add	sp, #16
 800876e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008772:	6823      	ldr	r3, [r4, #0]
 8008774:	f043 0320 	orr.w	r3, r3, #32
 8008778:	6023      	str	r3, [r4, #0]
 800877a:	4833      	ldr	r0, [pc, #204]	@ (8008848 <_printf_i+0x23c>)
 800877c:	2778      	movs	r7, #120	@ 0x78
 800877e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008782:	6823      	ldr	r3, [r4, #0]
 8008784:	6831      	ldr	r1, [r6, #0]
 8008786:	061f      	lsls	r7, r3, #24
 8008788:	f851 5b04 	ldr.w	r5, [r1], #4
 800878c:	d402      	bmi.n	8008794 <_printf_i+0x188>
 800878e:	065f      	lsls	r7, r3, #25
 8008790:	bf48      	it	mi
 8008792:	b2ad      	uxthmi	r5, r5
 8008794:	6031      	str	r1, [r6, #0]
 8008796:	07d9      	lsls	r1, r3, #31
 8008798:	bf44      	itt	mi
 800879a:	f043 0320 	orrmi.w	r3, r3, #32
 800879e:	6023      	strmi	r3, [r4, #0]
 80087a0:	b11d      	cbz	r5, 80087aa <_printf_i+0x19e>
 80087a2:	2310      	movs	r3, #16
 80087a4:	e7ac      	b.n	8008700 <_printf_i+0xf4>
 80087a6:	4827      	ldr	r0, [pc, #156]	@ (8008844 <_printf_i+0x238>)
 80087a8:	e7e9      	b.n	800877e <_printf_i+0x172>
 80087aa:	6823      	ldr	r3, [r4, #0]
 80087ac:	f023 0320 	bic.w	r3, r3, #32
 80087b0:	6023      	str	r3, [r4, #0]
 80087b2:	e7f6      	b.n	80087a2 <_printf_i+0x196>
 80087b4:	4616      	mov	r6, r2
 80087b6:	e7bd      	b.n	8008734 <_printf_i+0x128>
 80087b8:	6833      	ldr	r3, [r6, #0]
 80087ba:	6825      	ldr	r5, [r4, #0]
 80087bc:	6961      	ldr	r1, [r4, #20]
 80087be:	1d18      	adds	r0, r3, #4
 80087c0:	6030      	str	r0, [r6, #0]
 80087c2:	062e      	lsls	r6, r5, #24
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	d501      	bpl.n	80087cc <_printf_i+0x1c0>
 80087c8:	6019      	str	r1, [r3, #0]
 80087ca:	e002      	b.n	80087d2 <_printf_i+0x1c6>
 80087cc:	0668      	lsls	r0, r5, #25
 80087ce:	d5fb      	bpl.n	80087c8 <_printf_i+0x1bc>
 80087d0:	8019      	strh	r1, [r3, #0]
 80087d2:	2300      	movs	r3, #0
 80087d4:	6123      	str	r3, [r4, #16]
 80087d6:	4616      	mov	r6, r2
 80087d8:	e7bc      	b.n	8008754 <_printf_i+0x148>
 80087da:	6833      	ldr	r3, [r6, #0]
 80087dc:	1d1a      	adds	r2, r3, #4
 80087de:	6032      	str	r2, [r6, #0]
 80087e0:	681e      	ldr	r6, [r3, #0]
 80087e2:	6862      	ldr	r2, [r4, #4]
 80087e4:	2100      	movs	r1, #0
 80087e6:	4630      	mov	r0, r6
 80087e8:	f7f7 fd12 	bl	8000210 <memchr>
 80087ec:	b108      	cbz	r0, 80087f2 <_printf_i+0x1e6>
 80087ee:	1b80      	subs	r0, r0, r6
 80087f0:	6060      	str	r0, [r4, #4]
 80087f2:	6863      	ldr	r3, [r4, #4]
 80087f4:	6123      	str	r3, [r4, #16]
 80087f6:	2300      	movs	r3, #0
 80087f8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80087fc:	e7aa      	b.n	8008754 <_printf_i+0x148>
 80087fe:	6923      	ldr	r3, [r4, #16]
 8008800:	4632      	mov	r2, r6
 8008802:	4649      	mov	r1, r9
 8008804:	4640      	mov	r0, r8
 8008806:	47d0      	blx	sl
 8008808:	3001      	adds	r0, #1
 800880a:	d0ad      	beq.n	8008768 <_printf_i+0x15c>
 800880c:	6823      	ldr	r3, [r4, #0]
 800880e:	079b      	lsls	r3, r3, #30
 8008810:	d413      	bmi.n	800883a <_printf_i+0x22e>
 8008812:	68e0      	ldr	r0, [r4, #12]
 8008814:	9b03      	ldr	r3, [sp, #12]
 8008816:	4298      	cmp	r0, r3
 8008818:	bfb8      	it	lt
 800881a:	4618      	movlt	r0, r3
 800881c:	e7a6      	b.n	800876c <_printf_i+0x160>
 800881e:	2301      	movs	r3, #1
 8008820:	4632      	mov	r2, r6
 8008822:	4649      	mov	r1, r9
 8008824:	4640      	mov	r0, r8
 8008826:	47d0      	blx	sl
 8008828:	3001      	adds	r0, #1
 800882a:	d09d      	beq.n	8008768 <_printf_i+0x15c>
 800882c:	3501      	adds	r5, #1
 800882e:	68e3      	ldr	r3, [r4, #12]
 8008830:	9903      	ldr	r1, [sp, #12]
 8008832:	1a5b      	subs	r3, r3, r1
 8008834:	42ab      	cmp	r3, r5
 8008836:	dcf2      	bgt.n	800881e <_printf_i+0x212>
 8008838:	e7eb      	b.n	8008812 <_printf_i+0x206>
 800883a:	2500      	movs	r5, #0
 800883c:	f104 0619 	add.w	r6, r4, #25
 8008840:	e7f5      	b.n	800882e <_printf_i+0x222>
 8008842:	bf00      	nop
 8008844:	0800c4f9 	.word	0x0800c4f9
 8008848:	0800c50a 	.word	0x0800c50a

0800884c <__sflush_r>:
 800884c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008850:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008854:	0716      	lsls	r6, r2, #28
 8008856:	4605      	mov	r5, r0
 8008858:	460c      	mov	r4, r1
 800885a:	d454      	bmi.n	8008906 <__sflush_r+0xba>
 800885c:	684b      	ldr	r3, [r1, #4]
 800885e:	2b00      	cmp	r3, #0
 8008860:	dc02      	bgt.n	8008868 <__sflush_r+0x1c>
 8008862:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008864:	2b00      	cmp	r3, #0
 8008866:	dd48      	ble.n	80088fa <__sflush_r+0xae>
 8008868:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800886a:	2e00      	cmp	r6, #0
 800886c:	d045      	beq.n	80088fa <__sflush_r+0xae>
 800886e:	2300      	movs	r3, #0
 8008870:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008874:	682f      	ldr	r7, [r5, #0]
 8008876:	6a21      	ldr	r1, [r4, #32]
 8008878:	602b      	str	r3, [r5, #0]
 800887a:	d030      	beq.n	80088de <__sflush_r+0x92>
 800887c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800887e:	89a3      	ldrh	r3, [r4, #12]
 8008880:	0759      	lsls	r1, r3, #29
 8008882:	d505      	bpl.n	8008890 <__sflush_r+0x44>
 8008884:	6863      	ldr	r3, [r4, #4]
 8008886:	1ad2      	subs	r2, r2, r3
 8008888:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800888a:	b10b      	cbz	r3, 8008890 <__sflush_r+0x44>
 800888c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800888e:	1ad2      	subs	r2, r2, r3
 8008890:	2300      	movs	r3, #0
 8008892:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008894:	6a21      	ldr	r1, [r4, #32]
 8008896:	4628      	mov	r0, r5
 8008898:	47b0      	blx	r6
 800889a:	1c43      	adds	r3, r0, #1
 800889c:	89a3      	ldrh	r3, [r4, #12]
 800889e:	d106      	bne.n	80088ae <__sflush_r+0x62>
 80088a0:	6829      	ldr	r1, [r5, #0]
 80088a2:	291d      	cmp	r1, #29
 80088a4:	d82b      	bhi.n	80088fe <__sflush_r+0xb2>
 80088a6:	4a2a      	ldr	r2, [pc, #168]	@ (8008950 <__sflush_r+0x104>)
 80088a8:	410a      	asrs	r2, r1
 80088aa:	07d6      	lsls	r6, r2, #31
 80088ac:	d427      	bmi.n	80088fe <__sflush_r+0xb2>
 80088ae:	2200      	movs	r2, #0
 80088b0:	6062      	str	r2, [r4, #4]
 80088b2:	04d9      	lsls	r1, r3, #19
 80088b4:	6922      	ldr	r2, [r4, #16]
 80088b6:	6022      	str	r2, [r4, #0]
 80088b8:	d504      	bpl.n	80088c4 <__sflush_r+0x78>
 80088ba:	1c42      	adds	r2, r0, #1
 80088bc:	d101      	bne.n	80088c2 <__sflush_r+0x76>
 80088be:	682b      	ldr	r3, [r5, #0]
 80088c0:	b903      	cbnz	r3, 80088c4 <__sflush_r+0x78>
 80088c2:	6560      	str	r0, [r4, #84]	@ 0x54
 80088c4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80088c6:	602f      	str	r7, [r5, #0]
 80088c8:	b1b9      	cbz	r1, 80088fa <__sflush_r+0xae>
 80088ca:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80088ce:	4299      	cmp	r1, r3
 80088d0:	d002      	beq.n	80088d8 <__sflush_r+0x8c>
 80088d2:	4628      	mov	r0, r5
 80088d4:	f7ff fb48 	bl	8007f68 <_free_r>
 80088d8:	2300      	movs	r3, #0
 80088da:	6363      	str	r3, [r4, #52]	@ 0x34
 80088dc:	e00d      	b.n	80088fa <__sflush_r+0xae>
 80088de:	2301      	movs	r3, #1
 80088e0:	4628      	mov	r0, r5
 80088e2:	47b0      	blx	r6
 80088e4:	4602      	mov	r2, r0
 80088e6:	1c50      	adds	r0, r2, #1
 80088e8:	d1c9      	bne.n	800887e <__sflush_r+0x32>
 80088ea:	682b      	ldr	r3, [r5, #0]
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d0c6      	beq.n	800887e <__sflush_r+0x32>
 80088f0:	2b1d      	cmp	r3, #29
 80088f2:	d001      	beq.n	80088f8 <__sflush_r+0xac>
 80088f4:	2b16      	cmp	r3, #22
 80088f6:	d11e      	bne.n	8008936 <__sflush_r+0xea>
 80088f8:	602f      	str	r7, [r5, #0]
 80088fa:	2000      	movs	r0, #0
 80088fc:	e022      	b.n	8008944 <__sflush_r+0xf8>
 80088fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008902:	b21b      	sxth	r3, r3
 8008904:	e01b      	b.n	800893e <__sflush_r+0xf2>
 8008906:	690f      	ldr	r7, [r1, #16]
 8008908:	2f00      	cmp	r7, #0
 800890a:	d0f6      	beq.n	80088fa <__sflush_r+0xae>
 800890c:	0793      	lsls	r3, r2, #30
 800890e:	680e      	ldr	r6, [r1, #0]
 8008910:	bf08      	it	eq
 8008912:	694b      	ldreq	r3, [r1, #20]
 8008914:	600f      	str	r7, [r1, #0]
 8008916:	bf18      	it	ne
 8008918:	2300      	movne	r3, #0
 800891a:	eba6 0807 	sub.w	r8, r6, r7
 800891e:	608b      	str	r3, [r1, #8]
 8008920:	f1b8 0f00 	cmp.w	r8, #0
 8008924:	dde9      	ble.n	80088fa <__sflush_r+0xae>
 8008926:	6a21      	ldr	r1, [r4, #32]
 8008928:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800892a:	4643      	mov	r3, r8
 800892c:	463a      	mov	r2, r7
 800892e:	4628      	mov	r0, r5
 8008930:	47b0      	blx	r6
 8008932:	2800      	cmp	r0, #0
 8008934:	dc08      	bgt.n	8008948 <__sflush_r+0xfc>
 8008936:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800893a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800893e:	81a3      	strh	r3, [r4, #12]
 8008940:	f04f 30ff 	mov.w	r0, #4294967295
 8008944:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008948:	4407      	add	r7, r0
 800894a:	eba8 0800 	sub.w	r8, r8, r0
 800894e:	e7e7      	b.n	8008920 <__sflush_r+0xd4>
 8008950:	dfbffffe 	.word	0xdfbffffe

08008954 <_fflush_r>:
 8008954:	b538      	push	{r3, r4, r5, lr}
 8008956:	690b      	ldr	r3, [r1, #16]
 8008958:	4605      	mov	r5, r0
 800895a:	460c      	mov	r4, r1
 800895c:	b913      	cbnz	r3, 8008964 <_fflush_r+0x10>
 800895e:	2500      	movs	r5, #0
 8008960:	4628      	mov	r0, r5
 8008962:	bd38      	pop	{r3, r4, r5, pc}
 8008964:	b118      	cbz	r0, 800896e <_fflush_r+0x1a>
 8008966:	6a03      	ldr	r3, [r0, #32]
 8008968:	b90b      	cbnz	r3, 800896e <_fflush_r+0x1a>
 800896a:	f7ff f8bd 	bl	8007ae8 <__sinit>
 800896e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008972:	2b00      	cmp	r3, #0
 8008974:	d0f3      	beq.n	800895e <_fflush_r+0xa>
 8008976:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008978:	07d0      	lsls	r0, r2, #31
 800897a:	d404      	bmi.n	8008986 <_fflush_r+0x32>
 800897c:	0599      	lsls	r1, r3, #22
 800897e:	d402      	bmi.n	8008986 <_fflush_r+0x32>
 8008980:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008982:	f7ff fad8 	bl	8007f36 <__retarget_lock_acquire_recursive>
 8008986:	4628      	mov	r0, r5
 8008988:	4621      	mov	r1, r4
 800898a:	f7ff ff5f 	bl	800884c <__sflush_r>
 800898e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008990:	07da      	lsls	r2, r3, #31
 8008992:	4605      	mov	r5, r0
 8008994:	d4e4      	bmi.n	8008960 <_fflush_r+0xc>
 8008996:	89a3      	ldrh	r3, [r4, #12]
 8008998:	059b      	lsls	r3, r3, #22
 800899a:	d4e1      	bmi.n	8008960 <_fflush_r+0xc>
 800899c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800899e:	f7ff facb 	bl	8007f38 <__retarget_lock_release_recursive>
 80089a2:	e7dd      	b.n	8008960 <_fflush_r+0xc>

080089a4 <__swhatbuf_r>:
 80089a4:	b570      	push	{r4, r5, r6, lr}
 80089a6:	460c      	mov	r4, r1
 80089a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089ac:	2900      	cmp	r1, #0
 80089ae:	b096      	sub	sp, #88	@ 0x58
 80089b0:	4615      	mov	r5, r2
 80089b2:	461e      	mov	r6, r3
 80089b4:	da0d      	bge.n	80089d2 <__swhatbuf_r+0x2e>
 80089b6:	89a3      	ldrh	r3, [r4, #12]
 80089b8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80089bc:	f04f 0100 	mov.w	r1, #0
 80089c0:	bf14      	ite	ne
 80089c2:	2340      	movne	r3, #64	@ 0x40
 80089c4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80089c8:	2000      	movs	r0, #0
 80089ca:	6031      	str	r1, [r6, #0]
 80089cc:	602b      	str	r3, [r5, #0]
 80089ce:	b016      	add	sp, #88	@ 0x58
 80089d0:	bd70      	pop	{r4, r5, r6, pc}
 80089d2:	466a      	mov	r2, sp
 80089d4:	f000 f862 	bl	8008a9c <_fstat_r>
 80089d8:	2800      	cmp	r0, #0
 80089da:	dbec      	blt.n	80089b6 <__swhatbuf_r+0x12>
 80089dc:	9901      	ldr	r1, [sp, #4]
 80089de:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80089e2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80089e6:	4259      	negs	r1, r3
 80089e8:	4159      	adcs	r1, r3
 80089ea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80089ee:	e7eb      	b.n	80089c8 <__swhatbuf_r+0x24>

080089f0 <__smakebuf_r>:
 80089f0:	898b      	ldrh	r3, [r1, #12]
 80089f2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80089f4:	079d      	lsls	r5, r3, #30
 80089f6:	4606      	mov	r6, r0
 80089f8:	460c      	mov	r4, r1
 80089fa:	d507      	bpl.n	8008a0c <__smakebuf_r+0x1c>
 80089fc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008a00:	6023      	str	r3, [r4, #0]
 8008a02:	6123      	str	r3, [r4, #16]
 8008a04:	2301      	movs	r3, #1
 8008a06:	6163      	str	r3, [r4, #20]
 8008a08:	b003      	add	sp, #12
 8008a0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008a0c:	ab01      	add	r3, sp, #4
 8008a0e:	466a      	mov	r2, sp
 8008a10:	f7ff ffc8 	bl	80089a4 <__swhatbuf_r>
 8008a14:	9f00      	ldr	r7, [sp, #0]
 8008a16:	4605      	mov	r5, r0
 8008a18:	4639      	mov	r1, r7
 8008a1a:	4630      	mov	r0, r6
 8008a1c:	f7fe ff4c 	bl	80078b8 <_malloc_r>
 8008a20:	b948      	cbnz	r0, 8008a36 <__smakebuf_r+0x46>
 8008a22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a26:	059a      	lsls	r2, r3, #22
 8008a28:	d4ee      	bmi.n	8008a08 <__smakebuf_r+0x18>
 8008a2a:	f023 0303 	bic.w	r3, r3, #3
 8008a2e:	f043 0302 	orr.w	r3, r3, #2
 8008a32:	81a3      	strh	r3, [r4, #12]
 8008a34:	e7e2      	b.n	80089fc <__smakebuf_r+0xc>
 8008a36:	89a3      	ldrh	r3, [r4, #12]
 8008a38:	6020      	str	r0, [r4, #0]
 8008a3a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008a3e:	81a3      	strh	r3, [r4, #12]
 8008a40:	9b01      	ldr	r3, [sp, #4]
 8008a42:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008a46:	b15b      	cbz	r3, 8008a60 <__smakebuf_r+0x70>
 8008a48:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008a4c:	4630      	mov	r0, r6
 8008a4e:	f000 f837 	bl	8008ac0 <_isatty_r>
 8008a52:	b128      	cbz	r0, 8008a60 <__smakebuf_r+0x70>
 8008a54:	89a3      	ldrh	r3, [r4, #12]
 8008a56:	f023 0303 	bic.w	r3, r3, #3
 8008a5a:	f043 0301 	orr.w	r3, r3, #1
 8008a5e:	81a3      	strh	r3, [r4, #12]
 8008a60:	89a3      	ldrh	r3, [r4, #12]
 8008a62:	431d      	orrs	r5, r3
 8008a64:	81a5      	strh	r5, [r4, #12]
 8008a66:	e7cf      	b.n	8008a08 <__smakebuf_r+0x18>

08008a68 <memmove>:
 8008a68:	4288      	cmp	r0, r1
 8008a6a:	b510      	push	{r4, lr}
 8008a6c:	eb01 0402 	add.w	r4, r1, r2
 8008a70:	d902      	bls.n	8008a78 <memmove+0x10>
 8008a72:	4284      	cmp	r4, r0
 8008a74:	4623      	mov	r3, r4
 8008a76:	d807      	bhi.n	8008a88 <memmove+0x20>
 8008a78:	1e43      	subs	r3, r0, #1
 8008a7a:	42a1      	cmp	r1, r4
 8008a7c:	d008      	beq.n	8008a90 <memmove+0x28>
 8008a7e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008a82:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008a86:	e7f8      	b.n	8008a7a <memmove+0x12>
 8008a88:	4402      	add	r2, r0
 8008a8a:	4601      	mov	r1, r0
 8008a8c:	428a      	cmp	r2, r1
 8008a8e:	d100      	bne.n	8008a92 <memmove+0x2a>
 8008a90:	bd10      	pop	{r4, pc}
 8008a92:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008a96:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008a9a:	e7f7      	b.n	8008a8c <memmove+0x24>

08008a9c <_fstat_r>:
 8008a9c:	b538      	push	{r3, r4, r5, lr}
 8008a9e:	4d07      	ldr	r5, [pc, #28]	@ (8008abc <_fstat_r+0x20>)
 8008aa0:	2300      	movs	r3, #0
 8008aa2:	4604      	mov	r4, r0
 8008aa4:	4608      	mov	r0, r1
 8008aa6:	4611      	mov	r1, r2
 8008aa8:	602b      	str	r3, [r5, #0]
 8008aaa:	f7f9 fd24 	bl	80024f6 <_fstat>
 8008aae:	1c43      	adds	r3, r0, #1
 8008ab0:	d102      	bne.n	8008ab8 <_fstat_r+0x1c>
 8008ab2:	682b      	ldr	r3, [r5, #0]
 8008ab4:	b103      	cbz	r3, 8008ab8 <_fstat_r+0x1c>
 8008ab6:	6023      	str	r3, [r4, #0]
 8008ab8:	bd38      	pop	{r3, r4, r5, pc}
 8008aba:	bf00      	nop
 8008abc:	200004b0 	.word	0x200004b0

08008ac0 <_isatty_r>:
 8008ac0:	b538      	push	{r3, r4, r5, lr}
 8008ac2:	4d06      	ldr	r5, [pc, #24]	@ (8008adc <_isatty_r+0x1c>)
 8008ac4:	2300      	movs	r3, #0
 8008ac6:	4604      	mov	r4, r0
 8008ac8:	4608      	mov	r0, r1
 8008aca:	602b      	str	r3, [r5, #0]
 8008acc:	f7f9 fd23 	bl	8002516 <_isatty>
 8008ad0:	1c43      	adds	r3, r0, #1
 8008ad2:	d102      	bne.n	8008ada <_isatty_r+0x1a>
 8008ad4:	682b      	ldr	r3, [r5, #0]
 8008ad6:	b103      	cbz	r3, 8008ada <_isatty_r+0x1a>
 8008ad8:	6023      	str	r3, [r4, #0]
 8008ada:	bd38      	pop	{r3, r4, r5, pc}
 8008adc:	200004b0 	.word	0x200004b0

08008ae0 <_realloc_r>:
 8008ae0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ae4:	4680      	mov	r8, r0
 8008ae6:	4615      	mov	r5, r2
 8008ae8:	460c      	mov	r4, r1
 8008aea:	b921      	cbnz	r1, 8008af6 <_realloc_r+0x16>
 8008aec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008af0:	4611      	mov	r1, r2
 8008af2:	f7fe bee1 	b.w	80078b8 <_malloc_r>
 8008af6:	b92a      	cbnz	r2, 8008b04 <_realloc_r+0x24>
 8008af8:	f7ff fa36 	bl	8007f68 <_free_r>
 8008afc:	2400      	movs	r4, #0
 8008afe:	4620      	mov	r0, r4
 8008b00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b04:	f000 f81a 	bl	8008b3c <_malloc_usable_size_r>
 8008b08:	4285      	cmp	r5, r0
 8008b0a:	4606      	mov	r6, r0
 8008b0c:	d802      	bhi.n	8008b14 <_realloc_r+0x34>
 8008b0e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008b12:	d8f4      	bhi.n	8008afe <_realloc_r+0x1e>
 8008b14:	4629      	mov	r1, r5
 8008b16:	4640      	mov	r0, r8
 8008b18:	f7fe fece 	bl	80078b8 <_malloc_r>
 8008b1c:	4607      	mov	r7, r0
 8008b1e:	2800      	cmp	r0, #0
 8008b20:	d0ec      	beq.n	8008afc <_realloc_r+0x1c>
 8008b22:	42b5      	cmp	r5, r6
 8008b24:	462a      	mov	r2, r5
 8008b26:	4621      	mov	r1, r4
 8008b28:	bf28      	it	cs
 8008b2a:	4632      	movcs	r2, r6
 8008b2c:	f7ff fa0d 	bl	8007f4a <memcpy>
 8008b30:	4621      	mov	r1, r4
 8008b32:	4640      	mov	r0, r8
 8008b34:	f7ff fa18 	bl	8007f68 <_free_r>
 8008b38:	463c      	mov	r4, r7
 8008b3a:	e7e0      	b.n	8008afe <_realloc_r+0x1e>

08008b3c <_malloc_usable_size_r>:
 8008b3c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008b40:	1f18      	subs	r0, r3, #4
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	bfbc      	itt	lt
 8008b46:	580b      	ldrlt	r3, [r1, r0]
 8008b48:	18c0      	addlt	r0, r0, r3
 8008b4a:	4770      	bx	lr

08008b4c <_init>:
 8008b4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b4e:	bf00      	nop
 8008b50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b52:	bc08      	pop	{r3}
 8008b54:	469e      	mov	lr, r3
 8008b56:	4770      	bx	lr

08008b58 <_fini>:
 8008b58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b5a:	bf00      	nop
 8008b5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b5e:	bc08      	pop	{r3}
 8008b60:	469e      	mov	lr, r3
 8008b62:	4770      	bx	lr
