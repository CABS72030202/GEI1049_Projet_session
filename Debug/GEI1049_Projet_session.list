
GEI1049_Projet_session.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004368  080001c8  080001c8  000011c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08004530  08004530  00005530  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004558  08004558  00006010  2**0
                  CONTENTS
  4 .ARM          00000008  08004558  08004558  00005558  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004560  08004560  00006010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004560  08004560  00005560  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004564  08004564  00005564  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08004568  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000154  20000010  08004578  00006010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000164  08004578  00006164  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e237  00000000  00000000  00006040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f9f  00000000  00000000  00014277  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cd0  00000000  00000000  00016218  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a08  00000000  00000000  00016ee8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002256c  00000000  00000000  000178f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fcb7  00000000  00000000  00039e5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d1656  00000000  00000000  00049b13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011b169  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000370c  00000000  00000000  0011b1ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  0011e8b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	@ (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	@ (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000010 	.word	0x20000010
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08004518 	.word	0x08004518

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	@ (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	@ (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	@ (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000014 	.word	0x20000014
 8000204:	08004518 	.word	0x08004518

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	@ 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	3c01      	subs	r4, #1
 8000344:	bf28      	it	cs
 8000346:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800034a:	d2e9      	bcs.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__aeabi_d2uiz>:
 80009a4:	004a      	lsls	r2, r1, #1
 80009a6:	d211      	bcs.n	80009cc <__aeabi_d2uiz+0x28>
 80009a8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80009ac:	d211      	bcs.n	80009d2 <__aeabi_d2uiz+0x2e>
 80009ae:	d50d      	bpl.n	80009cc <__aeabi_d2uiz+0x28>
 80009b0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80009b4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009b8:	d40e      	bmi.n	80009d8 <__aeabi_d2uiz+0x34>
 80009ba:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009be:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80009c2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009c6:	fa23 f002 	lsr.w	r0, r3, r2
 80009ca:	4770      	bx	lr
 80009cc:	f04f 0000 	mov.w	r0, #0
 80009d0:	4770      	bx	lr
 80009d2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009d6:	d102      	bne.n	80009de <__aeabi_d2uiz+0x3a>
 80009d8:	f04f 30ff 	mov.w	r0, #4294967295
 80009dc:	4770      	bx	lr
 80009de:	f04f 0000 	mov.w	r0, #0
 80009e2:	4770      	bx	lr

080009e4 <__aeabi_d2f>:
 80009e4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009e8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80009ec:	bf24      	itt	cs
 80009ee:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 80009f2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 80009f6:	d90d      	bls.n	8000a14 <__aeabi_d2f+0x30>
 80009f8:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80009fc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a00:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a04:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a08:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a0c:	bf08      	it	eq
 8000a0e:	f020 0001 	biceq.w	r0, r0, #1
 8000a12:	4770      	bx	lr
 8000a14:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a18:	d121      	bne.n	8000a5e <__aeabi_d2f+0x7a>
 8000a1a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a1e:	bfbc      	itt	lt
 8000a20:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a24:	4770      	bxlt	lr
 8000a26:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a2a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a2e:	f1c2 0218 	rsb	r2, r2, #24
 8000a32:	f1c2 0c20 	rsb	ip, r2, #32
 8000a36:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a3a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a3e:	bf18      	it	ne
 8000a40:	f040 0001 	orrne.w	r0, r0, #1
 8000a44:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a48:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a4c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a50:	ea40 000c 	orr.w	r0, r0, ip
 8000a54:	fa23 f302 	lsr.w	r3, r3, r2
 8000a58:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a5c:	e7cc      	b.n	80009f8 <__aeabi_d2f+0x14>
 8000a5e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a62:	d107      	bne.n	8000a74 <__aeabi_d2f+0x90>
 8000a64:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a68:	bf1e      	ittt	ne
 8000a6a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000a6e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000a72:	4770      	bxne	lr
 8000a74:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000a7c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a80:	4770      	bx	lr
 8000a82:	bf00      	nop

08000a84 <__aeabi_uldivmod>:
 8000a84:	b953      	cbnz	r3, 8000a9c <__aeabi_uldivmod+0x18>
 8000a86:	b94a      	cbnz	r2, 8000a9c <__aeabi_uldivmod+0x18>
 8000a88:	2900      	cmp	r1, #0
 8000a8a:	bf08      	it	eq
 8000a8c:	2800      	cmpeq	r0, #0
 8000a8e:	bf1c      	itt	ne
 8000a90:	f04f 31ff 	movne.w	r1, #4294967295
 8000a94:	f04f 30ff 	movne.w	r0, #4294967295
 8000a98:	f000 b96a 	b.w	8000d70 <__aeabi_idiv0>
 8000a9c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000aa0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000aa4:	f000 f806 	bl	8000ab4 <__udivmoddi4>
 8000aa8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000aac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ab0:	b004      	add	sp, #16
 8000ab2:	4770      	bx	lr

08000ab4 <__udivmoddi4>:
 8000ab4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ab8:	9d08      	ldr	r5, [sp, #32]
 8000aba:	460c      	mov	r4, r1
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d14e      	bne.n	8000b5e <__udivmoddi4+0xaa>
 8000ac0:	4694      	mov	ip, r2
 8000ac2:	458c      	cmp	ip, r1
 8000ac4:	4686      	mov	lr, r0
 8000ac6:	fab2 f282 	clz	r2, r2
 8000aca:	d962      	bls.n	8000b92 <__udivmoddi4+0xde>
 8000acc:	b14a      	cbz	r2, 8000ae2 <__udivmoddi4+0x2e>
 8000ace:	f1c2 0320 	rsb	r3, r2, #32
 8000ad2:	4091      	lsls	r1, r2
 8000ad4:	fa20 f303 	lsr.w	r3, r0, r3
 8000ad8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000adc:	4319      	orrs	r1, r3
 8000ade:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ae2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ae6:	fa1f f68c 	uxth.w	r6, ip
 8000aea:	fbb1 f4f7 	udiv	r4, r1, r7
 8000aee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000af2:	fb07 1114 	mls	r1, r7, r4, r1
 8000af6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000afa:	fb04 f106 	mul.w	r1, r4, r6
 8000afe:	4299      	cmp	r1, r3
 8000b00:	d90a      	bls.n	8000b18 <__udivmoddi4+0x64>
 8000b02:	eb1c 0303 	adds.w	r3, ip, r3
 8000b06:	f104 30ff 	add.w	r0, r4, #4294967295
 8000b0a:	f080 8112 	bcs.w	8000d32 <__udivmoddi4+0x27e>
 8000b0e:	4299      	cmp	r1, r3
 8000b10:	f240 810f 	bls.w	8000d32 <__udivmoddi4+0x27e>
 8000b14:	3c02      	subs	r4, #2
 8000b16:	4463      	add	r3, ip
 8000b18:	1a59      	subs	r1, r3, r1
 8000b1a:	fa1f f38e 	uxth.w	r3, lr
 8000b1e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b22:	fb07 1110 	mls	r1, r7, r0, r1
 8000b26:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b2a:	fb00 f606 	mul.w	r6, r0, r6
 8000b2e:	429e      	cmp	r6, r3
 8000b30:	d90a      	bls.n	8000b48 <__udivmoddi4+0x94>
 8000b32:	eb1c 0303 	adds.w	r3, ip, r3
 8000b36:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b3a:	f080 80fc 	bcs.w	8000d36 <__udivmoddi4+0x282>
 8000b3e:	429e      	cmp	r6, r3
 8000b40:	f240 80f9 	bls.w	8000d36 <__udivmoddi4+0x282>
 8000b44:	4463      	add	r3, ip
 8000b46:	3802      	subs	r0, #2
 8000b48:	1b9b      	subs	r3, r3, r6
 8000b4a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b4e:	2100      	movs	r1, #0
 8000b50:	b11d      	cbz	r5, 8000b5a <__udivmoddi4+0xa6>
 8000b52:	40d3      	lsrs	r3, r2
 8000b54:	2200      	movs	r2, #0
 8000b56:	e9c5 3200 	strd	r3, r2, [r5]
 8000b5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b5e:	428b      	cmp	r3, r1
 8000b60:	d905      	bls.n	8000b6e <__udivmoddi4+0xba>
 8000b62:	b10d      	cbz	r5, 8000b68 <__udivmoddi4+0xb4>
 8000b64:	e9c5 0100 	strd	r0, r1, [r5]
 8000b68:	2100      	movs	r1, #0
 8000b6a:	4608      	mov	r0, r1
 8000b6c:	e7f5      	b.n	8000b5a <__udivmoddi4+0xa6>
 8000b6e:	fab3 f183 	clz	r1, r3
 8000b72:	2900      	cmp	r1, #0
 8000b74:	d146      	bne.n	8000c04 <__udivmoddi4+0x150>
 8000b76:	42a3      	cmp	r3, r4
 8000b78:	d302      	bcc.n	8000b80 <__udivmoddi4+0xcc>
 8000b7a:	4290      	cmp	r0, r2
 8000b7c:	f0c0 80f0 	bcc.w	8000d60 <__udivmoddi4+0x2ac>
 8000b80:	1a86      	subs	r6, r0, r2
 8000b82:	eb64 0303 	sbc.w	r3, r4, r3
 8000b86:	2001      	movs	r0, #1
 8000b88:	2d00      	cmp	r5, #0
 8000b8a:	d0e6      	beq.n	8000b5a <__udivmoddi4+0xa6>
 8000b8c:	e9c5 6300 	strd	r6, r3, [r5]
 8000b90:	e7e3      	b.n	8000b5a <__udivmoddi4+0xa6>
 8000b92:	2a00      	cmp	r2, #0
 8000b94:	f040 8090 	bne.w	8000cb8 <__udivmoddi4+0x204>
 8000b98:	eba1 040c 	sub.w	r4, r1, ip
 8000b9c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ba0:	fa1f f78c 	uxth.w	r7, ip
 8000ba4:	2101      	movs	r1, #1
 8000ba6:	fbb4 f6f8 	udiv	r6, r4, r8
 8000baa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bae:	fb08 4416 	mls	r4, r8, r6, r4
 8000bb2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bb6:	fb07 f006 	mul.w	r0, r7, r6
 8000bba:	4298      	cmp	r0, r3
 8000bbc:	d908      	bls.n	8000bd0 <__udivmoddi4+0x11c>
 8000bbe:	eb1c 0303 	adds.w	r3, ip, r3
 8000bc2:	f106 34ff 	add.w	r4, r6, #4294967295
 8000bc6:	d202      	bcs.n	8000bce <__udivmoddi4+0x11a>
 8000bc8:	4298      	cmp	r0, r3
 8000bca:	f200 80cd 	bhi.w	8000d68 <__udivmoddi4+0x2b4>
 8000bce:	4626      	mov	r6, r4
 8000bd0:	1a1c      	subs	r4, r3, r0
 8000bd2:	fa1f f38e 	uxth.w	r3, lr
 8000bd6:	fbb4 f0f8 	udiv	r0, r4, r8
 8000bda:	fb08 4410 	mls	r4, r8, r0, r4
 8000bde:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000be2:	fb00 f707 	mul.w	r7, r0, r7
 8000be6:	429f      	cmp	r7, r3
 8000be8:	d908      	bls.n	8000bfc <__udivmoddi4+0x148>
 8000bea:	eb1c 0303 	adds.w	r3, ip, r3
 8000bee:	f100 34ff 	add.w	r4, r0, #4294967295
 8000bf2:	d202      	bcs.n	8000bfa <__udivmoddi4+0x146>
 8000bf4:	429f      	cmp	r7, r3
 8000bf6:	f200 80b0 	bhi.w	8000d5a <__udivmoddi4+0x2a6>
 8000bfa:	4620      	mov	r0, r4
 8000bfc:	1bdb      	subs	r3, r3, r7
 8000bfe:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c02:	e7a5      	b.n	8000b50 <__udivmoddi4+0x9c>
 8000c04:	f1c1 0620 	rsb	r6, r1, #32
 8000c08:	408b      	lsls	r3, r1
 8000c0a:	fa22 f706 	lsr.w	r7, r2, r6
 8000c0e:	431f      	orrs	r7, r3
 8000c10:	fa20 fc06 	lsr.w	ip, r0, r6
 8000c14:	fa04 f301 	lsl.w	r3, r4, r1
 8000c18:	ea43 030c 	orr.w	r3, r3, ip
 8000c1c:	40f4      	lsrs	r4, r6
 8000c1e:	fa00 f801 	lsl.w	r8, r0, r1
 8000c22:	0c38      	lsrs	r0, r7, #16
 8000c24:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c28:	fbb4 fef0 	udiv	lr, r4, r0
 8000c2c:	fa1f fc87 	uxth.w	ip, r7
 8000c30:	fb00 441e 	mls	r4, r0, lr, r4
 8000c34:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c38:	fb0e f90c 	mul.w	r9, lr, ip
 8000c3c:	45a1      	cmp	r9, r4
 8000c3e:	fa02 f201 	lsl.w	r2, r2, r1
 8000c42:	d90a      	bls.n	8000c5a <__udivmoddi4+0x1a6>
 8000c44:	193c      	adds	r4, r7, r4
 8000c46:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000c4a:	f080 8084 	bcs.w	8000d56 <__udivmoddi4+0x2a2>
 8000c4e:	45a1      	cmp	r9, r4
 8000c50:	f240 8081 	bls.w	8000d56 <__udivmoddi4+0x2a2>
 8000c54:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c58:	443c      	add	r4, r7
 8000c5a:	eba4 0409 	sub.w	r4, r4, r9
 8000c5e:	fa1f f983 	uxth.w	r9, r3
 8000c62:	fbb4 f3f0 	udiv	r3, r4, r0
 8000c66:	fb00 4413 	mls	r4, r0, r3, r4
 8000c6a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c6e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c72:	45a4      	cmp	ip, r4
 8000c74:	d907      	bls.n	8000c86 <__udivmoddi4+0x1d2>
 8000c76:	193c      	adds	r4, r7, r4
 8000c78:	f103 30ff 	add.w	r0, r3, #4294967295
 8000c7c:	d267      	bcs.n	8000d4e <__udivmoddi4+0x29a>
 8000c7e:	45a4      	cmp	ip, r4
 8000c80:	d965      	bls.n	8000d4e <__udivmoddi4+0x29a>
 8000c82:	3b02      	subs	r3, #2
 8000c84:	443c      	add	r4, r7
 8000c86:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000c8a:	fba0 9302 	umull	r9, r3, r0, r2
 8000c8e:	eba4 040c 	sub.w	r4, r4, ip
 8000c92:	429c      	cmp	r4, r3
 8000c94:	46ce      	mov	lr, r9
 8000c96:	469c      	mov	ip, r3
 8000c98:	d351      	bcc.n	8000d3e <__udivmoddi4+0x28a>
 8000c9a:	d04e      	beq.n	8000d3a <__udivmoddi4+0x286>
 8000c9c:	b155      	cbz	r5, 8000cb4 <__udivmoddi4+0x200>
 8000c9e:	ebb8 030e 	subs.w	r3, r8, lr
 8000ca2:	eb64 040c 	sbc.w	r4, r4, ip
 8000ca6:	fa04 f606 	lsl.w	r6, r4, r6
 8000caa:	40cb      	lsrs	r3, r1
 8000cac:	431e      	orrs	r6, r3
 8000cae:	40cc      	lsrs	r4, r1
 8000cb0:	e9c5 6400 	strd	r6, r4, [r5]
 8000cb4:	2100      	movs	r1, #0
 8000cb6:	e750      	b.n	8000b5a <__udivmoddi4+0xa6>
 8000cb8:	f1c2 0320 	rsb	r3, r2, #32
 8000cbc:	fa20 f103 	lsr.w	r1, r0, r3
 8000cc0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cc4:	fa24 f303 	lsr.w	r3, r4, r3
 8000cc8:	4094      	lsls	r4, r2
 8000cca:	430c      	orrs	r4, r1
 8000ccc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cd0:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cd4:	fa1f f78c 	uxth.w	r7, ip
 8000cd8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cdc:	fb08 3110 	mls	r1, r8, r0, r3
 8000ce0:	0c23      	lsrs	r3, r4, #16
 8000ce2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ce6:	fb00 f107 	mul.w	r1, r0, r7
 8000cea:	4299      	cmp	r1, r3
 8000cec:	d908      	bls.n	8000d00 <__udivmoddi4+0x24c>
 8000cee:	eb1c 0303 	adds.w	r3, ip, r3
 8000cf2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000cf6:	d22c      	bcs.n	8000d52 <__udivmoddi4+0x29e>
 8000cf8:	4299      	cmp	r1, r3
 8000cfa:	d92a      	bls.n	8000d52 <__udivmoddi4+0x29e>
 8000cfc:	3802      	subs	r0, #2
 8000cfe:	4463      	add	r3, ip
 8000d00:	1a5b      	subs	r3, r3, r1
 8000d02:	b2a4      	uxth	r4, r4
 8000d04:	fbb3 f1f8 	udiv	r1, r3, r8
 8000d08:	fb08 3311 	mls	r3, r8, r1, r3
 8000d0c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d10:	fb01 f307 	mul.w	r3, r1, r7
 8000d14:	42a3      	cmp	r3, r4
 8000d16:	d908      	bls.n	8000d2a <__udivmoddi4+0x276>
 8000d18:	eb1c 0404 	adds.w	r4, ip, r4
 8000d1c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000d20:	d213      	bcs.n	8000d4a <__udivmoddi4+0x296>
 8000d22:	42a3      	cmp	r3, r4
 8000d24:	d911      	bls.n	8000d4a <__udivmoddi4+0x296>
 8000d26:	3902      	subs	r1, #2
 8000d28:	4464      	add	r4, ip
 8000d2a:	1ae4      	subs	r4, r4, r3
 8000d2c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d30:	e739      	b.n	8000ba6 <__udivmoddi4+0xf2>
 8000d32:	4604      	mov	r4, r0
 8000d34:	e6f0      	b.n	8000b18 <__udivmoddi4+0x64>
 8000d36:	4608      	mov	r0, r1
 8000d38:	e706      	b.n	8000b48 <__udivmoddi4+0x94>
 8000d3a:	45c8      	cmp	r8, r9
 8000d3c:	d2ae      	bcs.n	8000c9c <__udivmoddi4+0x1e8>
 8000d3e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d42:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d46:	3801      	subs	r0, #1
 8000d48:	e7a8      	b.n	8000c9c <__udivmoddi4+0x1e8>
 8000d4a:	4631      	mov	r1, r6
 8000d4c:	e7ed      	b.n	8000d2a <__udivmoddi4+0x276>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	e799      	b.n	8000c86 <__udivmoddi4+0x1d2>
 8000d52:	4630      	mov	r0, r6
 8000d54:	e7d4      	b.n	8000d00 <__udivmoddi4+0x24c>
 8000d56:	46d6      	mov	lr, sl
 8000d58:	e77f      	b.n	8000c5a <__udivmoddi4+0x1a6>
 8000d5a:	4463      	add	r3, ip
 8000d5c:	3802      	subs	r0, #2
 8000d5e:	e74d      	b.n	8000bfc <__udivmoddi4+0x148>
 8000d60:	4606      	mov	r6, r0
 8000d62:	4623      	mov	r3, r4
 8000d64:	4608      	mov	r0, r1
 8000d66:	e70f      	b.n	8000b88 <__udivmoddi4+0xd4>
 8000d68:	3e02      	subs	r6, #2
 8000d6a:	4463      	add	r3, ip
 8000d6c:	e730      	b.n	8000bd0 <__udivmoddi4+0x11c>
 8000d6e:	bf00      	nop

08000d70 <__aeabi_idiv0>:
 8000d70:	4770      	bx	lr
 8000d72:	bf00      	nop

08000d74 <Get_Mode>:

uint8_t curr_mode = 0;
volatile int timer_count = 0;
float turning_time = 0;

int Get_Mode(int MSB_state, int LSB_state) {
 8000d74:	b480      	push	{r7}
 8000d76:	b085      	sub	sp, #20
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
 8000d7c:	6039      	str	r1, [r7, #0]
	static const int id_lookup[4] = {MANUAL_ID, CIRCLE_ID, SQUARE_ID, BACK_FORTH_ID};
	int bin = ((MSB_state & 1) << 1) | (LSB_state & 1);
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	005b      	lsls	r3, r3, #1
 8000d82:	f003 0202 	and.w	r2, r3, #2
 8000d86:	683b      	ldr	r3, [r7, #0]
 8000d88:	f003 0301 	and.w	r3, r3, #1
 8000d8c:	4313      	orrs	r3, r2
 8000d8e:	60fb      	str	r3, [r7, #12]
	return id_lookup[bin];
 8000d90:	4a04      	ldr	r2, [pc, #16]	@ (8000da4 <Get_Mode+0x30>)
 8000d92:	68fb      	ldr	r3, [r7, #12]
 8000d94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8000d98:	4618      	mov	r0, r3
 8000d9a:	3714      	adds	r7, #20
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da2:	4770      	bx	lr
 8000da4:	08004530 	.word	0x08004530

08000da8 <Auto_Angle>:
			break;
	}
	return str;
}

void Auto_Angle(float value, TIM_HandleTypeDef* htim3) {
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b082      	sub	sp, #8
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	ed87 0a01 	vstr	s0, [r7, #4]
 8000db2:	6038      	str	r0, [r7, #0]
    // Calculate the duration for the turn
    turning_time = fabs(value) * TRACK_WIDTH;
 8000db4:	edd7 7a01 	vldr	s15, [r7, #4]
 8000db8:	eef0 7ae7 	vabs.f32	s15, s15
 8000dbc:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 8000e98 <Auto_Angle+0xf0>
 8000dc0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000dc4:	4b35      	ldr	r3, [pc, #212]	@ (8000e9c <Auto_Angle+0xf4>)
 8000dc6:	edc3 7a00 	vstr	s15, [r3]

    // Determine direction of turn
    if (value > 0) {
 8000dca:	edd7 7a01 	vldr	s15, [r7, #4]
 8000dce:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000dd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000dd6:	dd18      	ble.n	8000e0a <Auto_Angle+0x62>
        // Clockwise turn (right): Left track forward, Right track backward
        /*htim3->Instance->CCR1 = 400;  // Set left track forward (CCR1, CCR3)
        htim3->Instance->CCR3 = 0;  // Reduce speed slightly for alignment
        htim3->Instance->CCR4 = 400;  // Set right track backward (CCR2, CCR4)
        htim3->Instance->CCR2 = 200;*/
    	turning_time /= (360.0 * CLOCKWISE_FACTOR);
 8000dd8:	4b30      	ldr	r3, [pc, #192]	@ (8000e9c <Auto_Angle+0xf4>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	4618      	mov	r0, r3
 8000dde:	f7ff fb77 	bl	80004d0 <__aeabi_f2d>
 8000de2:	a329      	add	r3, pc, #164	@ (adr r3, 8000e88 <Auto_Angle+0xe0>)
 8000de4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000de8:	f7ff fcf4 	bl	80007d4 <__aeabi_ddiv>
 8000dec:	4602      	mov	r2, r0
 8000dee:	460b      	mov	r3, r1
 8000df0:	4610      	mov	r0, r2
 8000df2:	4619      	mov	r1, r3
 8000df4:	f7ff fdf6 	bl	80009e4 <__aeabi_d2f>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	4a28      	ldr	r2, [pc, #160]	@ (8000e9c <Auto_Angle+0xf4>)
 8000dfc:	6013      	str	r3, [r2, #0]
        Droite(BASE_SPEED, htim3);
 8000dfe:	6839      	ldr	r1, [r7, #0]
 8000e00:	f44f 70e1 	mov.w	r0, #450	@ 0x1c2
 8000e04:	f000 f948 	bl	8001098 <Droite>
 8000e08:	e017      	b.n	8000e3a <Auto_Angle+0x92>
        // Counterclockwise turn (left): Left track backward, Right track forward
        /*htim3->Instance->CCR2 = 400;  // Set right track forward
        htim3->Instance->CCR4 = 0;  // Reduce speed slightly for alignment
        htim3->Instance->CCR1 = 400;  // Set left track backward
        htim3->Instance->CCR3 = 200;*/
    	turning_time /= (360.0 * COUNTER_CLW_FACTOR);
 8000e0a:	4b24      	ldr	r3, [pc, #144]	@ (8000e9c <Auto_Angle+0xf4>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f7ff fb5e 	bl	80004d0 <__aeabi_f2d>
 8000e14:	a31e      	add	r3, pc, #120	@ (adr r3, 8000e90 <Auto_Angle+0xe8>)
 8000e16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e1a:	f7ff fcdb 	bl	80007d4 <__aeabi_ddiv>
 8000e1e:	4602      	mov	r2, r0
 8000e20:	460b      	mov	r3, r1
 8000e22:	4610      	mov	r0, r2
 8000e24:	4619      	mov	r1, r3
 8000e26:	f7ff fddd 	bl	80009e4 <__aeabi_d2f>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	4a1b      	ldr	r2, [pc, #108]	@ (8000e9c <Auto_Angle+0xf4>)
 8000e2e:	6013      	str	r3, [r2, #0]
    	Gauche(BASE_SPEED, htim3);
 8000e30:	6839      	ldr	r1, [r7, #0]
 8000e32:	f44f 70e1 	mov.w	r0, #450	@ 0x1c2
 8000e36:	f000 f967 	bl	8001108 <Gauche>
    }

    // Convert turning time in µs
    //turning_time = 20;
    turning_time *= 1e6;
 8000e3a:	4b18      	ldr	r3, [pc, #96]	@ (8000e9c <Auto_Angle+0xf4>)
 8000e3c:	edd3 7a00 	vldr	s15, [r3]
 8000e40:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8000ea0 <Auto_Angle+0xf8>
 8000e44:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000e48:	4b14      	ldr	r3, [pc, #80]	@ (8000e9c <Auto_Angle+0xf4>)
 8000e4a:	edc3 7a00 	vstr	s15, [r3]

    // Delay for calculated turning time
    HAL_TIM_Base_Start_IT(&htim7);
 8000e4e:	4815      	ldr	r0, [pc, #84]	@ (8000ea4 <Auto_Angle+0xfc>)
 8000e50:	f002 f864 	bl	8002f1c <HAL_TIM_Base_Start_IT>
    while(timer_count < (int)turning_time) {
 8000e54:	bf00      	nop
 8000e56:	4b11      	ldr	r3, [pc, #68]	@ (8000e9c <Auto_Angle+0xf4>)
 8000e58:	edd3 7a00 	vldr	s15, [r3]
 8000e5c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000e60:	ee17 2a90 	vmov	r2, s15
 8000e64:	4b10      	ldr	r3, [pc, #64]	@ (8000ea8 <Auto_Angle+0x100>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	429a      	cmp	r2, r3
 8000e6a:	dcf4      	bgt.n	8000e56 <Auto_Angle+0xae>
    	// Wait
    }
    HAL_TIM_Base_Stop_IT(&htim7);
 8000e6c:	480d      	ldr	r0, [pc, #52]	@ (8000ea4 <Auto_Angle+0xfc>)
 8000e6e:	f002 f8c5 	bl	8002ffc <HAL_TIM_Base_Stop_IT>

    // Reset temporal counter
    timer_count = 0;
 8000e72:	4b0d      	ldr	r3, [pc, #52]	@ (8000ea8 <Auto_Angle+0x100>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	601a      	str	r2, [r3, #0]

    // Stop the motors
    Stop(htim3);
 8000e78:	6838      	ldr	r0, [r7, #0]
 8000e7a:	f000 f97d 	bl	8001178 <Stop>
}
 8000e7e:	bf00      	nop
 8000e80:	3708      	adds	r7, #8
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	b020c49b 	.word	0xb020c49b
 8000e8c:	40d2cab2 	.word	0x40d2cab2
 8000e90:	126e978d 	.word	0x126e978d
 8000e94:	402fc083 	.word	0x402fc083
 8000e98:	43880000 	.word	0x43880000
 8000e9c:	20000034 	.word	0x20000034
 8000ea0:	49742400 	.word	0x49742400
 8000ea4:	200000c8 	.word	0x200000c8
 8000ea8:	20000030 	.word	0x20000030

08000eac <Auto_Line>:

void Auto_Line(int dist, int min_speed, int max_speed, TIM_HandleTypeDef* htim3) {
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b08c      	sub	sp, #48	@ 0x30
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	60f8      	str	r0, [r7, #12]
 8000eb4:	60b9      	str	r1, [r7, #8]
 8000eb6:	607a      	str	r2, [r7, #4]
 8000eb8:	603b      	str	r3, [r7, #0]
    // Calculate total steps required
    int total_steps = (int)(dist / TRACK_RESOLUTION);
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	0fda      	lsrs	r2, r3, #31
 8000ebe:	4413      	add	r3, r2
 8000ec0:	105b      	asrs	r3, r3, #1
 8000ec2:	623b      	str	r3, [r7, #32]

    // Split into acceleration, constant speed, and deceleration
    int mid_steps = total_steps / 2;
 8000ec4:	6a3b      	ldr	r3, [r7, #32]
 8000ec6:	0fda      	lsrs	r2, r3, #31
 8000ec8:	4413      	add	r3, r2
 8000eca:	105b      	asrs	r3, r3, #1
 8000ecc:	61fb      	str	r3, [r7, #28]
    int accel_steps = mid_steps / 2;
 8000ece:	69fb      	ldr	r3, [r7, #28]
 8000ed0:	0fda      	lsrs	r2, r3, #31
 8000ed2:	4413      	add	r3, r2
 8000ed4:	105b      	asrs	r3, r3, #1
 8000ed6:	61bb      	str	r3, [r7, #24]
    int decel_steps = total_steps - accel_steps - mid_steps;
 8000ed8:	6a3a      	ldr	r2, [r7, #32]
 8000eda:	69bb      	ldr	r3, [r7, #24]
 8000edc:	1ad2      	subs	r2, r2, r3
 8000ede:	69fb      	ldr	r3, [r7, #28]
 8000ee0:	1ad3      	subs	r3, r2, r3
 8000ee2:	617b      	str	r3, [r7, #20]

    // Initialize speed
    int current_speed = min_speed;
 8000ee4:	68bb      	ldr	r3, [r7, #8]
 8000ee6:	613b      	str	r3, [r7, #16]

    // Acceleration phase
    for (int step = 0; step < accel_steps; step++) {
 8000ee8:	2300      	movs	r3, #0
 8000eea:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000eec:	e015      	b.n	8000f1a <Auto_Line+0x6e>
        current_speed = min_speed + (max_speed - min_speed) * step / accel_steps;
 8000eee:	687a      	ldr	r2, [r7, #4]
 8000ef0:	68bb      	ldr	r3, [r7, #8]
 8000ef2:	1ad3      	subs	r3, r2, r3
 8000ef4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000ef6:	fb03 f202 	mul.w	r2, r3, r2
 8000efa:	69bb      	ldr	r3, [r7, #24]
 8000efc:	fb92 f3f3 	sdiv	r3, r2, r3
 8000f00:	68ba      	ldr	r2, [r7, #8]
 8000f02:	4413      	add	r3, r2
 8000f04:	613b      	str	r3, [r7, #16]
        /*htim3->Instance->CCR1 = current_speed;  // Set speed for left track
        htim3->Instance->CCR3 = current_speed;  // Set speed for right track*/
        Avancer(current_speed, htim3);
 8000f06:	6839      	ldr	r1, [r7, #0]
 8000f08:	6938      	ldr	r0, [r7, #16]
 8000f0a:	f000 f88d 	bl	8001028 <Avancer>
        HAL_Delay(UPDATE_INTERVAL);            // Wait for update interval
 8000f0e:	2032      	movs	r0, #50	@ 0x32
 8000f10:	f000 feb8 	bl	8001c84 <HAL_Delay>
    for (int step = 0; step < accel_steps; step++) {
 8000f14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000f16:	3301      	adds	r3, #1
 8000f18:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000f1a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000f1c:	69bb      	ldr	r3, [r7, #24]
 8000f1e:	429a      	cmp	r2, r3
 8000f20:	dbe5      	blt.n	8000eee <Auto_Line+0x42>
    }

    // Constant speed phase
    for (int step = 0; step < mid_steps; step++) {
 8000f22:	2300      	movs	r3, #0
 8000f24:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000f26:	e009      	b.n	8000f3c <Auto_Line+0x90>
        /*htim3->Instance->CCR1 = max_speed;
        htim3->Instance->CCR3 = max_speed;*/
    	Avancer(max_speed, htim3);
 8000f28:	6839      	ldr	r1, [r7, #0]
 8000f2a:	6878      	ldr	r0, [r7, #4]
 8000f2c:	f000 f87c 	bl	8001028 <Avancer>
        HAL_Delay(UPDATE_INTERVAL);
 8000f30:	2032      	movs	r0, #50	@ 0x32
 8000f32:	f000 fea7 	bl	8001c84 <HAL_Delay>
    for (int step = 0; step < mid_steps; step++) {
 8000f36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f38:	3301      	adds	r3, #1
 8000f3a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000f3c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000f3e:	69fb      	ldr	r3, [r7, #28]
 8000f40:	429a      	cmp	r2, r3
 8000f42:	dbf1      	blt.n	8000f28 <Auto_Line+0x7c>
    }

    // Deceleration phase
    for (int step = 0; step < decel_steps; step++) {
 8000f44:	2300      	movs	r3, #0
 8000f46:	627b      	str	r3, [r7, #36]	@ 0x24
 8000f48:	e015      	b.n	8000f76 <Auto_Line+0xca>
        current_speed = max_speed - (max_speed - min_speed) * step / decel_steps;
 8000f4a:	687a      	ldr	r2, [r7, #4]
 8000f4c:	68bb      	ldr	r3, [r7, #8]
 8000f4e:	1ad3      	subs	r3, r2, r3
 8000f50:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000f52:	fb03 f202 	mul.w	r2, r3, r2
 8000f56:	697b      	ldr	r3, [r7, #20]
 8000f58:	fb92 f3f3 	sdiv	r3, r2, r3
 8000f5c:	687a      	ldr	r2, [r7, #4]
 8000f5e:	1ad3      	subs	r3, r2, r3
 8000f60:	613b      	str	r3, [r7, #16]
        /*htim3->Instance->CCR1 = current_speed;
        htim3->Instance->CCR3 = current_speed;*/
        Avancer(current_speed, htim3);
 8000f62:	6839      	ldr	r1, [r7, #0]
 8000f64:	6938      	ldr	r0, [r7, #16]
 8000f66:	f000 f85f 	bl	8001028 <Avancer>
        HAL_Delay(UPDATE_INTERVAL);
 8000f6a:	2032      	movs	r0, #50	@ 0x32
 8000f6c:	f000 fe8a 	bl	8001c84 <HAL_Delay>
    for (int step = 0; step < decel_steps; step++) {
 8000f70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f72:	3301      	adds	r3, #1
 8000f74:	627b      	str	r3, [r7, #36]	@ 0x24
 8000f76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000f78:	697b      	ldr	r3, [r7, #20]
 8000f7a:	429a      	cmp	r2, r3
 8000f7c:	dbe5      	blt.n	8000f4a <Auto_Line+0x9e>
    }

    // Stop the robot
    Stop(htim3);
 8000f7e:	6838      	ldr	r0, [r7, #0]
 8000f80:	f000 f8fa 	bl	8001178 <Stop>
}
 8000f84:	bf00      	nop
 8000f86:	3730      	adds	r7, #48	@ 0x30
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}

08000f8c <Auto_Circle>:

void Auto_Circle(TIM_HandleTypeDef* htim3) {
 8000f8c:	b480      	push	{r7}
 8000f8e:	b083      	sub	sp, #12
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]

}
 8000f94:	bf00      	nop
 8000f96:	370c      	adds	r7, #12
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9e:	4770      	bx	lr

08000fa0 <Auto_Back_Forth>:

void Auto_Back_Forth(TIM_HandleTypeDef* htim3) {
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
    // Move forward 1 meter
    Auto_Line(DISTANCE, BASE_SPEED, BASE_SPEED, htim3);
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	f44f 72e1 	mov.w	r2, #450	@ 0x1c2
 8000fae:	f44f 71e1 	mov.w	r1, #450	@ 0x1c2
 8000fb2:	20c8      	movs	r0, #200	@ 0xc8
 8000fb4:	f7ff ff7a 	bl	8000eac <Auto_Line>

    // Turn 180 degrees
    Auto_Angle(180.0, htim3);
 8000fb8:	6878      	ldr	r0, [r7, #4]
 8000fba:	ed9f 0a0a 	vldr	s0, [pc, #40]	@ 8000fe4 <Auto_Back_Forth+0x44>
 8000fbe:	f7ff fef3 	bl	8000da8 <Auto_Angle>

    // Move backward 1 meter
    Auto_Line(DISTANCE, BASE_SPEED, BASE_SPEED, htim3);
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	f44f 72e1 	mov.w	r2, #450	@ 0x1c2
 8000fc8:	f44f 71e1 	mov.w	r1, #450	@ 0x1c2
 8000fcc:	20c8      	movs	r0, #200	@ 0xc8
 8000fce:	f7ff ff6d 	bl	8000eac <Auto_Line>

    // Turn 180 degrees again to face the original direction
    Auto_Angle(180.0, htim3);
 8000fd2:	6878      	ldr	r0, [r7, #4]
 8000fd4:	ed9f 0a03 	vldr	s0, [pc, #12]	@ 8000fe4 <Auto_Back_Forth+0x44>
 8000fd8:	f7ff fee6 	bl	8000da8 <Auto_Angle>
}
 8000fdc:	bf00      	nop
 8000fde:	3708      	adds	r7, #8
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	43340000 	.word	0x43340000

08000fe8 <Auto_Square>:

void Auto_Square(TIM_HandleTypeDef* htim3) {
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b084      	sub	sp, #16
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
    // Move forward and turn 90 degrees four times
    for (int i = 0; i < 4; i++) {
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	60fb      	str	r3, [r7, #12]
 8000ff4:	e00e      	b.n	8001014 <Auto_Square+0x2c>
        Auto_Line(DISTANCE, (BASE_SPEED * 0.333), BASE_SPEED, htim3);
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	f44f 72e1 	mov.w	r2, #450	@ 0x1c2
 8000ffc:	2195      	movs	r1, #149	@ 0x95
 8000ffe:	20c8      	movs	r0, #200	@ 0xc8
 8001000:	f7ff ff54 	bl	8000eac <Auto_Line>
        Auto_Angle(90.0, htim3);
 8001004:	6878      	ldr	r0, [r7, #4]
 8001006:	ed9f 0a07 	vldr	s0, [pc, #28]	@ 8001024 <Auto_Square+0x3c>
 800100a:	f7ff fecd 	bl	8000da8 <Auto_Angle>
    for (int i = 0; i < 4; i++) {
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	3301      	adds	r3, #1
 8001012:	60fb      	str	r3, [r7, #12]
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	2b03      	cmp	r3, #3
 8001018:	dded      	ble.n	8000ff6 <Auto_Square+0xe>
    }
}
 800101a:	bf00      	nop
 800101c:	bf00      	nop
 800101e:	3710      	adds	r7, #16
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}
 8001024:	42b40000 	.word	0x42b40000

08001028 <Avancer>:
 *      Author: sebas
 */

#include "gestion_moteurs.h"

void Avancer(int Pulse, TIM_HandleTypeDef* htim3){
 8001028:	b590      	push	{r4, r7, lr}
 800102a:	b083      	sub	sp, #12
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
 8001030:	6039      	str	r1, [r7, #0]

	htim3->Instance -> CCR2 = 0;
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	2200      	movs	r2, #0
 8001038:	639a      	str	r2, [r3, #56]	@ 0x38
	htim3->Instance -> CCR4 = 0;
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	2200      	movs	r2, #0
 8001040:	641a      	str	r2, [r3, #64]	@ 0x40

	if(Pulse > 499){
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001048:	db02      	blt.n	8001050 <Avancer+0x28>
		Pulse = 499;
 800104a:	f240 13f3 	movw	r3, #499	@ 0x1f3
 800104e:	607b      	str	r3, [r7, #4]
	}

	htim3->Instance -> CCR1 = Pulse;
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	687a      	ldr	r2, [r7, #4]
 8001056:	635a      	str	r2, [r3, #52]	@ 0x34
	htim3->Instance -> CCR3 = htim3->Instance -> CCR1 * 0.9;
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800105e:	4618      	mov	r0, r3
 8001060:	f7ff fa14 	bl	800048c <__aeabi_ui2d>
 8001064:	a30a      	add	r3, pc, #40	@ (adr r3, 8001090 <Avancer+0x68>)
 8001066:	e9d3 2300 	ldrd	r2, r3, [r3]
 800106a:	f7ff fa89 	bl	8000580 <__aeabi_dmul>
 800106e:	4602      	mov	r2, r0
 8001070:	460b      	mov	r3, r1
 8001072:	4610      	mov	r0, r2
 8001074:	4619      	mov	r1, r3
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	681c      	ldr	r4, [r3, #0]
 800107a:	f7ff fc93 	bl	80009a4 <__aeabi_d2uiz>
 800107e:	4603      	mov	r3, r0
 8001080:	63e3      	str	r3, [r4, #60]	@ 0x3c

	return;
 8001082:	bf00      	nop
}
 8001084:	370c      	adds	r7, #12
 8001086:	46bd      	mov	sp, r7
 8001088:	bd90      	pop	{r4, r7, pc}
 800108a:	bf00      	nop
 800108c:	f3af 8000 	nop.w
 8001090:	cccccccd 	.word	0xcccccccd
 8001094:	3feccccc 	.word	0x3feccccc

08001098 <Droite>:

void Droite(int Pulse, TIM_HandleTypeDef* htim3){
 8001098:	b590      	push	{r4, r7, lr}
 800109a:	b083      	sub	sp, #12
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
 80010a0:	6039      	str	r1, [r7, #0]

	htim3->Instance -> CCR2 = 0;
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	2200      	movs	r2, #0
 80010a8:	639a      	str	r2, [r3, #56]	@ 0x38
	htim3->Instance -> CCR3 = 0;
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	2200      	movs	r2, #0
 80010b0:	63da      	str	r2, [r3, #60]	@ 0x3c

	if(Pulse > 499){
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80010b8:	db02      	blt.n	80010c0 <Droite+0x28>
		Pulse = 499;
 80010ba:	f240 13f3 	movw	r3, #499	@ 0x1f3
 80010be:	607b      	str	r3, [r7, #4]
	}
	htim3->Instance -> CCR1 = Pulse;
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	687a      	ldr	r2, [r7, #4]
 80010c6:	635a      	str	r2, [r3, #52]	@ 0x34
	htim3->Instance -> CCR4 = htim3->Instance -> CCR1 * 0.9;
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80010ce:	4618      	mov	r0, r3
 80010d0:	f7ff f9dc 	bl	800048c <__aeabi_ui2d>
 80010d4:	a30a      	add	r3, pc, #40	@ (adr r3, 8001100 <Droite+0x68>)
 80010d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010da:	f7ff fa51 	bl	8000580 <__aeabi_dmul>
 80010de:	4602      	mov	r2, r0
 80010e0:	460b      	mov	r3, r1
 80010e2:	4610      	mov	r0, r2
 80010e4:	4619      	mov	r1, r3
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	681c      	ldr	r4, [r3, #0]
 80010ea:	f7ff fc5b 	bl	80009a4 <__aeabi_d2uiz>
 80010ee:	4603      	mov	r3, r0
 80010f0:	6423      	str	r3, [r4, #64]	@ 0x40
}
 80010f2:	bf00      	nop
 80010f4:	370c      	adds	r7, #12
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd90      	pop	{r4, r7, pc}
 80010fa:	bf00      	nop
 80010fc:	f3af 8000 	nop.w
 8001100:	cccccccd 	.word	0xcccccccd
 8001104:	3feccccc 	.word	0x3feccccc

08001108 <Gauche>:

void Gauche(int Pulse, TIM_HandleTypeDef* htim3){
 8001108:	b590      	push	{r4, r7, lr}
 800110a:	b083      	sub	sp, #12
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
 8001110:	6039      	str	r1, [r7, #0]

	htim3->Instance -> CCR1 = 0;
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	2200      	movs	r2, #0
 8001118:	635a      	str	r2, [r3, #52]	@ 0x34
	htim3->Instance -> CCR4 = 0;
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	2200      	movs	r2, #0
 8001120:	641a      	str	r2, [r3, #64]	@ 0x40

	if(Pulse > 499){
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001128:	db02      	blt.n	8001130 <Gauche+0x28>
		Pulse = 499;
 800112a:	f240 13f3 	movw	r3, #499	@ 0x1f3
 800112e:	607b      	str	r3, [r7, #4]
	}
	htim3->Instance -> CCR2 = Pulse;
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	687a      	ldr	r2, [r7, #4]
 8001136:	639a      	str	r2, [r3, #56]	@ 0x38
	htim3->Instance -> CCR3 = htim3->Instance -> CCR2 * 0.9;
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800113e:	4618      	mov	r0, r3
 8001140:	f7ff f9a4 	bl	800048c <__aeabi_ui2d>
 8001144:	a30a      	add	r3, pc, #40	@ (adr r3, 8001170 <Gauche+0x68>)
 8001146:	e9d3 2300 	ldrd	r2, r3, [r3]
 800114a:	f7ff fa19 	bl	8000580 <__aeabi_dmul>
 800114e:	4602      	mov	r2, r0
 8001150:	460b      	mov	r3, r1
 8001152:	4610      	mov	r0, r2
 8001154:	4619      	mov	r1, r3
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	681c      	ldr	r4, [r3, #0]
 800115a:	f7ff fc23 	bl	80009a4 <__aeabi_d2uiz>
 800115e:	4603      	mov	r3, r0
 8001160:	63e3      	str	r3, [r4, #60]	@ 0x3c
}
 8001162:	bf00      	nop
 8001164:	370c      	adds	r7, #12
 8001166:	46bd      	mov	sp, r7
 8001168:	bd90      	pop	{r4, r7, pc}
 800116a:	bf00      	nop
 800116c:	f3af 8000 	nop.w
 8001170:	cccccccd 	.word	0xcccccccd
 8001174:	3feccccc 	.word	0x3feccccc

08001178 <Stop>:
	htim3->Instance -> CCR4 = Pulse;
	htim3->Instance -> CCR2 = htim3->Instance -> CCR4 * 0.95;

	return;
}
void Stop(TIM_HandleTypeDef* htim3){
 8001178:	b480      	push	{r7}
 800117a:	b083      	sub	sp, #12
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
	htim3->Instance -> CCR1 = 0;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	2200      	movs	r2, #0
 8001186:	635a      	str	r2, [r3, #52]	@ 0x34
	htim3->Instance -> CCR2 = 0;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	2200      	movs	r2, #0
 800118e:	639a      	str	r2, [r3, #56]	@ 0x38
	htim3->Instance -> CCR3 = 0;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	2200      	movs	r2, #0
 8001196:	63da      	str	r2, [r3, #60]	@ 0x3c
	htim3->Instance -> CCR4 = 0;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	2200      	movs	r2, #0
 800119e:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80011a0:	bf00      	nop
 80011a2:	370c      	adds	r7, #12
 80011a4:	46bd      	mov	sp, r7
 80011a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011aa:	4770      	bx	lr

080011ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011b0:	f000 fcf6 	bl	8001ba0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011b4:	f000 f856 	bl	8001264 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011b8:	f000 f9ee 	bl	8001598 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80011bc:	f000 f9c2 	bl	8001544 <MX_USART2_UART_Init>
  MX_TIM6_Init();
 80011c0:	f000 f956 	bl	8001470 <MX_TIM6_Init>
  MX_TIM3_Init();
 80011c4:	f000 f8bc 	bl	8001340 <MX_TIM3_Init>
  MX_TIM7_Init();
 80011c8:	f000 f988 	bl	80014dc <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim6);
 80011cc:	4822      	ldr	r0, [pc, #136]	@ (8001258 <main+0xac>)
 80011ce:	f001 fea5 	bl	8002f1c <HAL_TIM_Base_Start_IT>

  if (HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1) != HAL_OK)
 80011d2:	2100      	movs	r1, #0
 80011d4:	4821      	ldr	r0, [pc, #132]	@ (800125c <main+0xb0>)
 80011d6:	f001 ff99 	bl	800310c <HAL_TIM_PWM_Start>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d001      	beq.n	80011e4 <main+0x38>
  {
      Error_Handler();
 80011e0:	f000 fb1e 	bl	8001820 <Error_Handler>
  }

  if (HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2) != HAL_OK)
 80011e4:	2104      	movs	r1, #4
 80011e6:	481d      	ldr	r0, [pc, #116]	@ (800125c <main+0xb0>)
 80011e8:	f001 ff90 	bl	800310c <HAL_TIM_PWM_Start>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d001      	beq.n	80011f6 <main+0x4a>
  {
      Error_Handler();
 80011f2:	f000 fb15 	bl	8001820 <Error_Handler>
  }

  if (HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3) != HAL_OK)
 80011f6:	2108      	movs	r1, #8
 80011f8:	4818      	ldr	r0, [pc, #96]	@ (800125c <main+0xb0>)
 80011fa:	f001 ff87 	bl	800310c <HAL_TIM_PWM_Start>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d001      	beq.n	8001208 <main+0x5c>
  {
      Error_Handler();
 8001204:	f000 fb0c 	bl	8001820 <Error_Handler>
  }

  if (HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4) != HAL_OK)
 8001208:	210c      	movs	r1, #12
 800120a:	4814      	ldr	r0, [pc, #80]	@ (800125c <main+0xb0>)
 800120c:	f001 ff7e 	bl	800310c <HAL_TIM_PWM_Start>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d001      	beq.n	800121a <main+0x6e>
  {
      Error_Handler();
 8001216:	f000 fb03 	bl	8001820 <Error_Handler>
  {

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	if(curr_mode != 0) { 	// Toggle auto mode
 800121a:	4b11      	ldr	r3, [pc, #68]	@ (8001260 <main+0xb4>)
 800121c:	781b      	ldrb	r3, [r3, #0]
 800121e:	2b00      	cmp	r3, #0
 8001220:	d0fb      	beq.n	800121a <main+0x6e>
		switch(curr_mode) {
 8001222:	4b0f      	ldr	r3, [pc, #60]	@ (8001260 <main+0xb4>)
 8001224:	781b      	ldrb	r3, [r3, #0]
 8001226:	2b03      	cmp	r3, #3
 8001228:	d00e      	beq.n	8001248 <main+0x9c>
 800122a:	2b03      	cmp	r3, #3
 800122c:	dc10      	bgt.n	8001250 <main+0xa4>
 800122e:	2b01      	cmp	r3, #1
 8001230:	d002      	beq.n	8001238 <main+0x8c>
 8001232:	2b02      	cmp	r3, #2
 8001234:	d004      	beq.n	8001240 <main+0x94>
 8001236:	e00b      	b.n	8001250 <main+0xa4>
			case CIRCLE_ID:
				Auto_Circle(&htim3);
 8001238:	4808      	ldr	r0, [pc, #32]	@ (800125c <main+0xb0>)
 800123a:	f7ff fea7 	bl	8000f8c <Auto_Circle>
				break;
 800123e:	e007      	b.n	8001250 <main+0xa4>
			case BACK_FORTH_ID:
				Auto_Back_Forth(&htim3);
 8001240:	4806      	ldr	r0, [pc, #24]	@ (800125c <main+0xb0>)
 8001242:	f7ff fead 	bl	8000fa0 <Auto_Back_Forth>
				break;
 8001246:	e003      	b.n	8001250 <main+0xa4>
			case SQUARE_ID:
				Auto_Square(&htim3);
 8001248:	4804      	ldr	r0, [pc, #16]	@ (800125c <main+0xb0>)
 800124a:	f7ff fecd 	bl	8000fe8 <Auto_Square>
				break;
 800124e:	bf00      	nop
		}
		curr_mode = 0;	// Return to manual mode after drawing shape
 8001250:	4b03      	ldr	r3, [pc, #12]	@ (8001260 <main+0xb4>)
 8001252:	2200      	movs	r2, #0
 8001254:	701a      	strb	r2, [r3, #0]
	if(curr_mode != 0) { 	// Toggle auto mode
 8001256:	e7e0      	b.n	800121a <main+0x6e>
 8001258:	20000080 	.word	0x20000080
 800125c:	20000038 	.word	0x20000038
 8001260:	2000002c 	.word	0x2000002c

08001264 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b094      	sub	sp, #80	@ 0x50
 8001268:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800126a:	f107 031c 	add.w	r3, r7, #28
 800126e:	2234      	movs	r2, #52	@ 0x34
 8001270:	2100      	movs	r1, #0
 8001272:	4618      	mov	r0, r3
 8001274:	f003 f924 	bl	80044c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001278:	f107 0308 	add.w	r3, r7, #8
 800127c:	2200      	movs	r2, #0
 800127e:	601a      	str	r2, [r3, #0]
 8001280:	605a      	str	r2, [r3, #4]
 8001282:	609a      	str	r2, [r3, #8]
 8001284:	60da      	str	r2, [r3, #12]
 8001286:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001288:	2300      	movs	r3, #0
 800128a:	607b      	str	r3, [r7, #4]
 800128c:	4b2a      	ldr	r3, [pc, #168]	@ (8001338 <SystemClock_Config+0xd4>)
 800128e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001290:	4a29      	ldr	r2, [pc, #164]	@ (8001338 <SystemClock_Config+0xd4>)
 8001292:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001296:	6413      	str	r3, [r2, #64]	@ 0x40
 8001298:	4b27      	ldr	r3, [pc, #156]	@ (8001338 <SystemClock_Config+0xd4>)
 800129a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800129c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012a0:	607b      	str	r3, [r7, #4]
 80012a2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80012a4:	2300      	movs	r3, #0
 80012a6:	603b      	str	r3, [r7, #0]
 80012a8:	4b24      	ldr	r3, [pc, #144]	@ (800133c <SystemClock_Config+0xd8>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80012b0:	4a22      	ldr	r2, [pc, #136]	@ (800133c <SystemClock_Config+0xd8>)
 80012b2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80012b6:	6013      	str	r3, [r2, #0]
 80012b8:	4b20      	ldr	r3, [pc, #128]	@ (800133c <SystemClock_Config+0xd8>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80012c0:	603b      	str	r3, [r7, #0]
 80012c2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80012c4:	2302      	movs	r3, #2
 80012c6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012c8:	2301      	movs	r3, #1
 80012ca:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012cc:	2310      	movs	r3, #16
 80012ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012d0:	2302      	movs	r3, #2
 80012d2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80012d4:	2300      	movs	r3, #0
 80012d6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80012d8:	2310      	movs	r3, #16
 80012da:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80012dc:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80012e0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80012e2:	2304      	movs	r3, #4
 80012e4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80012e6:	2302      	movs	r3, #2
 80012e8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80012ea:	2302      	movs	r3, #2
 80012ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012ee:	f107 031c 	add.w	r3, r7, #28
 80012f2:	4618      	mov	r0, r3
 80012f4:	f001 fb24 	bl	8002940 <HAL_RCC_OscConfig>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d001      	beq.n	8001302 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80012fe:	f000 fa8f 	bl	8001820 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001302:	230f      	movs	r3, #15
 8001304:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001306:	2302      	movs	r3, #2
 8001308:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800130a:	2300      	movs	r3, #0
 800130c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800130e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001312:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001314:	2300      	movs	r3, #0
 8001316:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001318:	f107 0308 	add.w	r3, r7, #8
 800131c:	2102      	movs	r1, #2
 800131e:	4618      	mov	r0, r3
 8001320:	f000 ffc4 	bl	80022ac <HAL_RCC_ClockConfig>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	d001      	beq.n	800132e <SystemClock_Config+0xca>
  {
    Error_Handler();
 800132a:	f000 fa79 	bl	8001820 <Error_Handler>
  }
}
 800132e:	bf00      	nop
 8001330:	3750      	adds	r7, #80	@ 0x50
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	40023800 	.word	0x40023800
 800133c:	40007000 	.word	0x40007000

08001340 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b08e      	sub	sp, #56	@ 0x38
 8001344:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001346:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800134a:	2200      	movs	r2, #0
 800134c:	601a      	str	r2, [r3, #0]
 800134e:	605a      	str	r2, [r3, #4]
 8001350:	609a      	str	r2, [r3, #8]
 8001352:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001354:	f107 0320 	add.w	r3, r7, #32
 8001358:	2200      	movs	r2, #0
 800135a:	601a      	str	r2, [r3, #0]
 800135c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800135e:	1d3b      	adds	r3, r7, #4
 8001360:	2200      	movs	r2, #0
 8001362:	601a      	str	r2, [r3, #0]
 8001364:	605a      	str	r2, [r3, #4]
 8001366:	609a      	str	r2, [r3, #8]
 8001368:	60da      	str	r2, [r3, #12]
 800136a:	611a      	str	r2, [r3, #16]
 800136c:	615a      	str	r2, [r3, #20]
 800136e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001370:	4b3d      	ldr	r3, [pc, #244]	@ (8001468 <MX_TIM3_Init+0x128>)
 8001372:	4a3e      	ldr	r2, [pc, #248]	@ (800146c <MX_TIM3_Init+0x12c>)
 8001374:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84-1;
 8001376:	4b3c      	ldr	r3, [pc, #240]	@ (8001468 <MX_TIM3_Init+0x128>)
 8001378:	2253      	movs	r2, #83	@ 0x53
 800137a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800137c:	4b3a      	ldr	r3, [pc, #232]	@ (8001468 <MX_TIM3_Init+0x128>)
 800137e:	2200      	movs	r2, #0
 8001380:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 500-1;
 8001382:	4b39      	ldr	r3, [pc, #228]	@ (8001468 <MX_TIM3_Init+0x128>)
 8001384:	f240 12f3 	movw	r2, #499	@ 0x1f3
 8001388:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800138a:	4b37      	ldr	r3, [pc, #220]	@ (8001468 <MX_TIM3_Init+0x128>)
 800138c:	2200      	movs	r2, #0
 800138e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001390:	4b35      	ldr	r3, [pc, #212]	@ (8001468 <MX_TIM3_Init+0x128>)
 8001392:	2200      	movs	r2, #0
 8001394:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001396:	4834      	ldr	r0, [pc, #208]	@ (8001468 <MX_TIM3_Init+0x128>)
 8001398:	f001 fd70 	bl	8002e7c <HAL_TIM_Base_Init>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d001      	beq.n	80013a6 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80013a2:	f000 fa3d 	bl	8001820 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013a6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80013aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80013ac:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80013b0:	4619      	mov	r1, r3
 80013b2:	482d      	ldr	r0, [pc, #180]	@ (8001468 <MX_TIM3_Init+0x128>)
 80013b4:	f002 f924 	bl	8003600 <HAL_TIM_ConfigClockSource>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d001      	beq.n	80013c2 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80013be:	f000 fa2f 	bl	8001820 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80013c2:	4829      	ldr	r0, [pc, #164]	@ (8001468 <MX_TIM3_Init+0x128>)
 80013c4:	f001 fe49 	bl	800305a <HAL_TIM_PWM_Init>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d001      	beq.n	80013d2 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80013ce:	f000 fa27 	bl	8001820 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013d2:	2300      	movs	r3, #0
 80013d4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013d6:	2300      	movs	r3, #0
 80013d8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80013da:	f107 0320 	add.w	r3, r7, #32
 80013de:	4619      	mov	r1, r3
 80013e0:	4821      	ldr	r0, [pc, #132]	@ (8001468 <MX_TIM3_Init+0x128>)
 80013e2:	f002 fd19 	bl	8003e18 <HAL_TIMEx_MasterConfigSynchronization>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d001      	beq.n	80013f0 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80013ec:	f000 fa18 	bl	8001820 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013f0:	2360      	movs	r3, #96	@ 0x60
 80013f2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80013f4:	2300      	movs	r3, #0
 80013f6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013f8:	2300      	movs	r3, #0
 80013fa:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013fc:	2300      	movs	r3, #0
 80013fe:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001400:	1d3b      	adds	r3, r7, #4
 8001402:	2200      	movs	r2, #0
 8001404:	4619      	mov	r1, r3
 8001406:	4818      	ldr	r0, [pc, #96]	@ (8001468 <MX_TIM3_Init+0x128>)
 8001408:	f002 f838 	bl	800347c <HAL_TIM_PWM_ConfigChannel>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d001      	beq.n	8001416 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001412:	f000 fa05 	bl	8001820 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001416:	1d3b      	adds	r3, r7, #4
 8001418:	2204      	movs	r2, #4
 800141a:	4619      	mov	r1, r3
 800141c:	4812      	ldr	r0, [pc, #72]	@ (8001468 <MX_TIM3_Init+0x128>)
 800141e:	f002 f82d 	bl	800347c <HAL_TIM_PWM_ConfigChannel>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d001      	beq.n	800142c <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8001428:	f000 f9fa 	bl	8001820 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800142c:	1d3b      	adds	r3, r7, #4
 800142e:	2208      	movs	r2, #8
 8001430:	4619      	mov	r1, r3
 8001432:	480d      	ldr	r0, [pc, #52]	@ (8001468 <MX_TIM3_Init+0x128>)
 8001434:	f002 f822 	bl	800347c <HAL_TIM_PWM_ConfigChannel>
 8001438:	4603      	mov	r3, r0
 800143a:	2b00      	cmp	r3, #0
 800143c:	d001      	beq.n	8001442 <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 800143e:	f000 f9ef 	bl	8001820 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001442:	1d3b      	adds	r3, r7, #4
 8001444:	220c      	movs	r2, #12
 8001446:	4619      	mov	r1, r3
 8001448:	4807      	ldr	r0, [pc, #28]	@ (8001468 <MX_TIM3_Init+0x128>)
 800144a:	f002 f817 	bl	800347c <HAL_TIM_PWM_ConfigChannel>
 800144e:	4603      	mov	r3, r0
 8001450:	2b00      	cmp	r3, #0
 8001452:	d001      	beq.n	8001458 <MX_TIM3_Init+0x118>
  {
    Error_Handler();
 8001454:	f000 f9e4 	bl	8001820 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001458:	4803      	ldr	r0, [pc, #12]	@ (8001468 <MX_TIM3_Init+0x128>)
 800145a:	f000 fa6b 	bl	8001934 <HAL_TIM_MspPostInit>

}
 800145e:	bf00      	nop
 8001460:	3738      	adds	r7, #56	@ 0x38
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	20000038 	.word	0x20000038
 800146c:	40000400 	.word	0x40000400

08001470 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b082      	sub	sp, #8
 8001474:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001476:	463b      	mov	r3, r7
 8001478:	2200      	movs	r2, #0
 800147a:	601a      	str	r2, [r3, #0]
 800147c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800147e:	4b15      	ldr	r3, [pc, #84]	@ (80014d4 <MX_TIM6_Init+0x64>)
 8001480:	4a15      	ldr	r2, [pc, #84]	@ (80014d8 <MX_TIM6_Init+0x68>)
 8001482:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 42000-1;
 8001484:	4b13      	ldr	r3, [pc, #76]	@ (80014d4 <MX_TIM6_Init+0x64>)
 8001486:	f24a 420f 	movw	r2, #41999	@ 0xa40f
 800148a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800148c:	4b11      	ldr	r3, [pc, #68]	@ (80014d4 <MX_TIM6_Init+0x64>)
 800148e:	2200      	movs	r2, #0
 8001490:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 200-1;
 8001492:	4b10      	ldr	r3, [pc, #64]	@ (80014d4 <MX_TIM6_Init+0x64>)
 8001494:	22c7      	movs	r2, #199	@ 0xc7
 8001496:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001498:	4b0e      	ldr	r3, [pc, #56]	@ (80014d4 <MX_TIM6_Init+0x64>)
 800149a:	2200      	movs	r2, #0
 800149c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800149e:	480d      	ldr	r0, [pc, #52]	@ (80014d4 <MX_TIM6_Init+0x64>)
 80014a0:	f001 fcec 	bl	8002e7c <HAL_TIM_Base_Init>
 80014a4:	4603      	mov	r3, r0
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d001      	beq.n	80014ae <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 80014aa:	f000 f9b9 	bl	8001820 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80014ae:	2320      	movs	r3, #32
 80014b0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014b2:	2300      	movs	r3, #0
 80014b4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80014b6:	463b      	mov	r3, r7
 80014b8:	4619      	mov	r1, r3
 80014ba:	4806      	ldr	r0, [pc, #24]	@ (80014d4 <MX_TIM6_Init+0x64>)
 80014bc:	f002 fcac 	bl	8003e18 <HAL_TIMEx_MasterConfigSynchronization>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d001      	beq.n	80014ca <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 80014c6:	f000 f9ab 	bl	8001820 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80014ca:	bf00      	nop
 80014cc:	3708      	adds	r7, #8
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	20000080 	.word	0x20000080
 80014d8:	40001000 	.word	0x40001000

080014dc <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b082      	sub	sp, #8
 80014e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014e2:	463b      	mov	r3, r7
 80014e4:	2200      	movs	r2, #0
 80014e6:	601a      	str	r2, [r3, #0]
 80014e8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80014ea:	4b14      	ldr	r3, [pc, #80]	@ (800153c <MX_TIM7_Init+0x60>)
 80014ec:	4a14      	ldr	r2, [pc, #80]	@ (8001540 <MX_TIM7_Init+0x64>)
 80014ee:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 83;
 80014f0:	4b12      	ldr	r3, [pc, #72]	@ (800153c <MX_TIM7_Init+0x60>)
 80014f2:	2253      	movs	r2, #83	@ 0x53
 80014f4:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014f6:	4b11      	ldr	r3, [pc, #68]	@ (800153c <MX_TIM7_Init+0x60>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 9;
 80014fc:	4b0f      	ldr	r3, [pc, #60]	@ (800153c <MX_TIM7_Init+0x60>)
 80014fe:	2209      	movs	r2, #9
 8001500:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001502:	4b0e      	ldr	r3, [pc, #56]	@ (800153c <MX_TIM7_Init+0x60>)
 8001504:	2200      	movs	r2, #0
 8001506:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001508:	480c      	ldr	r0, [pc, #48]	@ (800153c <MX_TIM7_Init+0x60>)
 800150a:	f001 fcb7 	bl	8002e7c <HAL_TIM_Base_Init>
 800150e:	4603      	mov	r3, r0
 8001510:	2b00      	cmp	r3, #0
 8001512:	d001      	beq.n	8001518 <MX_TIM7_Init+0x3c>
  {
    Error_Handler();
 8001514:	f000 f984 	bl	8001820 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001518:	2300      	movs	r3, #0
 800151a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800151c:	2300      	movs	r3, #0
 800151e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001520:	463b      	mov	r3, r7
 8001522:	4619      	mov	r1, r3
 8001524:	4805      	ldr	r0, [pc, #20]	@ (800153c <MX_TIM7_Init+0x60>)
 8001526:	f002 fc77 	bl	8003e18 <HAL_TIMEx_MasterConfigSynchronization>
 800152a:	4603      	mov	r3, r0
 800152c:	2b00      	cmp	r3, #0
 800152e:	d001      	beq.n	8001534 <MX_TIM7_Init+0x58>
  {
    Error_Handler();
 8001530:	f000 f976 	bl	8001820 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001534:	bf00      	nop
 8001536:	3708      	adds	r7, #8
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}
 800153c:	200000c8 	.word	0x200000c8
 8001540:	40001400 	.word	0x40001400

08001544 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001548:	4b11      	ldr	r3, [pc, #68]	@ (8001590 <MX_USART2_UART_Init+0x4c>)
 800154a:	4a12      	ldr	r2, [pc, #72]	@ (8001594 <MX_USART2_UART_Init+0x50>)
 800154c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800154e:	4b10      	ldr	r3, [pc, #64]	@ (8001590 <MX_USART2_UART_Init+0x4c>)
 8001550:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001554:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001556:	4b0e      	ldr	r3, [pc, #56]	@ (8001590 <MX_USART2_UART_Init+0x4c>)
 8001558:	2200      	movs	r2, #0
 800155a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800155c:	4b0c      	ldr	r3, [pc, #48]	@ (8001590 <MX_USART2_UART_Init+0x4c>)
 800155e:	2200      	movs	r2, #0
 8001560:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001562:	4b0b      	ldr	r3, [pc, #44]	@ (8001590 <MX_USART2_UART_Init+0x4c>)
 8001564:	2200      	movs	r2, #0
 8001566:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001568:	4b09      	ldr	r3, [pc, #36]	@ (8001590 <MX_USART2_UART_Init+0x4c>)
 800156a:	220c      	movs	r2, #12
 800156c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800156e:	4b08      	ldr	r3, [pc, #32]	@ (8001590 <MX_USART2_UART_Init+0x4c>)
 8001570:	2200      	movs	r2, #0
 8001572:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001574:	4b06      	ldr	r3, [pc, #24]	@ (8001590 <MX_USART2_UART_Init+0x4c>)
 8001576:	2200      	movs	r2, #0
 8001578:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800157a:	4805      	ldr	r0, [pc, #20]	@ (8001590 <MX_USART2_UART_Init+0x4c>)
 800157c:	f002 fcdc 	bl	8003f38 <HAL_UART_Init>
 8001580:	4603      	mov	r3, r0
 8001582:	2b00      	cmp	r3, #0
 8001584:	d001      	beq.n	800158a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001586:	f000 f94b 	bl	8001820 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800158a:	bf00      	nop
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	20000110 	.word	0x20000110
 8001594:	40004400 	.word	0x40004400

08001598 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b08a      	sub	sp, #40	@ 0x28
 800159c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800159e:	f107 0314 	add.w	r3, r7, #20
 80015a2:	2200      	movs	r2, #0
 80015a4:	601a      	str	r2, [r3, #0]
 80015a6:	605a      	str	r2, [r3, #4]
 80015a8:	609a      	str	r2, [r3, #8]
 80015aa:	60da      	str	r2, [r3, #12]
 80015ac:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015ae:	2300      	movs	r3, #0
 80015b0:	613b      	str	r3, [r7, #16]
 80015b2:	4b42      	ldr	r3, [pc, #264]	@ (80016bc <MX_GPIO_Init+0x124>)
 80015b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015b6:	4a41      	ldr	r2, [pc, #260]	@ (80016bc <MX_GPIO_Init+0x124>)
 80015b8:	f043 0304 	orr.w	r3, r3, #4
 80015bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80015be:	4b3f      	ldr	r3, [pc, #252]	@ (80016bc <MX_GPIO_Init+0x124>)
 80015c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015c2:	f003 0304 	and.w	r3, r3, #4
 80015c6:	613b      	str	r3, [r7, #16]
 80015c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80015ca:	2300      	movs	r3, #0
 80015cc:	60fb      	str	r3, [r7, #12]
 80015ce:	4b3b      	ldr	r3, [pc, #236]	@ (80016bc <MX_GPIO_Init+0x124>)
 80015d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015d2:	4a3a      	ldr	r2, [pc, #232]	@ (80016bc <MX_GPIO_Init+0x124>)
 80015d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80015d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80015da:	4b38      	ldr	r3, [pc, #224]	@ (80016bc <MX_GPIO_Init+0x124>)
 80015dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80015e2:	60fb      	str	r3, [r7, #12]
 80015e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015e6:	2300      	movs	r3, #0
 80015e8:	60bb      	str	r3, [r7, #8]
 80015ea:	4b34      	ldr	r3, [pc, #208]	@ (80016bc <MX_GPIO_Init+0x124>)
 80015ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ee:	4a33      	ldr	r2, [pc, #204]	@ (80016bc <MX_GPIO_Init+0x124>)
 80015f0:	f043 0301 	orr.w	r3, r3, #1
 80015f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80015f6:	4b31      	ldr	r3, [pc, #196]	@ (80016bc <MX_GPIO_Init+0x124>)
 80015f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015fa:	f003 0301 	and.w	r3, r3, #1
 80015fe:	60bb      	str	r3, [r7, #8]
 8001600:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001602:	2300      	movs	r3, #0
 8001604:	607b      	str	r3, [r7, #4]
 8001606:	4b2d      	ldr	r3, [pc, #180]	@ (80016bc <MX_GPIO_Init+0x124>)
 8001608:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800160a:	4a2c      	ldr	r2, [pc, #176]	@ (80016bc <MX_GPIO_Init+0x124>)
 800160c:	f043 0302 	orr.w	r3, r3, #2
 8001610:	6313      	str	r3, [r2, #48]	@ 0x30
 8001612:	4b2a      	ldr	r3, [pc, #168]	@ (80016bc <MX_GPIO_Init+0x124>)
 8001614:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001616:	f003 0302 	and.w	r3, r3, #2
 800161a:	607b      	str	r3, [r7, #4]
 800161c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800161e:	2200      	movs	r2, #0
 8001620:	2120      	movs	r1, #32
 8001622:	4827      	ldr	r0, [pc, #156]	@ (80016c0 <MX_GPIO_Init+0x128>)
 8001624:	f000 fe10 	bl	8002248 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Blue_Button_Pin */
  GPIO_InitStruct.Pin = Blue_Button_Pin;
 8001628:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800162c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800162e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001632:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001634:	2300      	movs	r3, #0
 8001636:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Blue_Button_GPIO_Port, &GPIO_InitStruct);
 8001638:	f107 0314 	add.w	r3, r7, #20
 800163c:	4619      	mov	r1, r3
 800163e:	4821      	ldr	r0, [pc, #132]	@ (80016c4 <MX_GPIO_Init+0x12c>)
 8001640:	f000 fc56 	bl	8001ef0 <HAL_GPIO_Init>

  /*Configure GPIO pins : Dipswitch_MSB_Pin Dipswitch_LSB_Pin Encodeur_D_B_Pin */
  GPIO_InitStruct.Pin = Dipswitch_MSB_Pin|Dipswitch_LSB_Pin|Encodeur_D_B_Pin;
 8001644:	238c      	movs	r3, #140	@ 0x8c
 8001646:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001648:	2300      	movs	r3, #0
 800164a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800164c:	2302      	movs	r3, #2
 800164e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001650:	f107 0314 	add.w	r3, r7, #20
 8001654:	4619      	mov	r1, r3
 8001656:	481b      	ldr	r0, [pc, #108]	@ (80016c4 <MX_GPIO_Init+0x12c>)
 8001658:	f000 fc4a 	bl	8001ef0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800165c:	2320      	movs	r3, #32
 800165e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001660:	2301      	movs	r3, #1
 8001662:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001664:	2300      	movs	r3, #0
 8001666:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001668:	2300      	movs	r3, #0
 800166a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800166c:	f107 0314 	add.w	r3, r7, #20
 8001670:	4619      	mov	r1, r3
 8001672:	4813      	ldr	r0, [pc, #76]	@ (80016c0 <MX_GPIO_Init+0x128>)
 8001674:	f000 fc3c 	bl	8001ef0 <HAL_GPIO_Init>

  /*Configure GPIO pins : Encodeur_G_A_Pin Encodeur_D_A_Pin */
  GPIO_InitStruct.Pin = Encodeur_G_A_Pin|Encodeur_D_A_Pin;
 8001678:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800167c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800167e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001682:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001684:	2302      	movs	r3, #2
 8001686:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001688:	f107 0314 	add.w	r3, r7, #20
 800168c:	4619      	mov	r1, r3
 800168e:	480c      	ldr	r0, [pc, #48]	@ (80016c0 <MX_GPIO_Init+0x128>)
 8001690:	f000 fc2e 	bl	8001ef0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001694:	2200      	movs	r2, #0
 8001696:	2100      	movs	r1, #0
 8001698:	2017      	movs	r0, #23
 800169a:	f000 fbf2 	bl	8001e82 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800169e:	2017      	movs	r0, #23
 80016a0:	f000 fc0b 	bl	8001eba <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80016a4:	2200      	movs	r2, #0
 80016a6:	2100      	movs	r1, #0
 80016a8:	2028      	movs	r0, #40	@ 0x28
 80016aa:	f000 fbea 	bl	8001e82 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80016ae:	2028      	movs	r0, #40	@ 0x28
 80016b0:	f000 fc03 	bl	8001eba <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80016b4:	bf00      	nop
 80016b6:	3728      	adds	r7, #40	@ 0x28
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	40023800 	.word	0x40023800
 80016c0:	40020000 	.word	0x40020000
 80016c4:	40020800 	.word	0x40020800

080016c8 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80016c8:	b590      	push	{r4, r7, lr}
 80016ca:	b083      	sub	sp, #12
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	4603      	mov	r3, r0
 80016d0:	80fb      	strh	r3, [r7, #6]

	if(GPIO_Pin == GPIO_PIN_9)
 80016d2:	88fb      	ldrh	r3, [r7, #6]
 80016d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80016d8:	d106      	bne.n	80016e8 <HAL_GPIO_EXTI_Callback+0x20>
	{
		nbPulseD++ ; // compte les pulses de lencodeur droit
 80016da:	4b18      	ldr	r3, [pc, #96]	@ (800173c <HAL_GPIO_EXTI_Callback+0x74>)
 80016dc:	881b      	ldrh	r3, [r3, #0]
 80016de:	b29b      	uxth	r3, r3
 80016e0:	3301      	adds	r3, #1
 80016e2:	b29a      	uxth	r2, r3
 80016e4:	4b15      	ldr	r3, [pc, #84]	@ (800173c <HAL_GPIO_EXTI_Callback+0x74>)
 80016e6:	801a      	strh	r2, [r3, #0]
	}

	if(GPIO_Pin == GPIO_PIN_8)
 80016e8:	88fb      	ldrh	r3, [r7, #6]
 80016ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80016ee:	d106      	bne.n	80016fe <HAL_GPIO_EXTI_Callback+0x36>
	{
		nbPulseG++ ; // compte les pulses de lencodeur droit
 80016f0:	4b13      	ldr	r3, [pc, #76]	@ (8001740 <HAL_GPIO_EXTI_Callback+0x78>)
 80016f2:	881b      	ldrh	r3, [r3, #0]
 80016f4:	b29b      	uxth	r3, r3
 80016f6:	3301      	adds	r3, #1
 80016f8:	b29a      	uxth	r2, r3
 80016fa:	4b11      	ldr	r3, [pc, #68]	@ (8001740 <HAL_GPIO_EXTI_Callback+0x78>)
 80016fc:	801a      	strh	r2, [r3, #0]
	}

	if(GPIO_Pin == Blue_Button_Pin) {
 80016fe:	88fb      	ldrh	r3, [r7, #6]
 8001700:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001704:	d115      	bne.n	8001732 <HAL_GPIO_EXTI_Callback+0x6a>
		Stop(&htim3);
 8001706:	480f      	ldr	r0, [pc, #60]	@ (8001744 <HAL_GPIO_EXTI_Callback+0x7c>)
 8001708:	f7ff fd36 	bl	8001178 <Stop>
		curr_mode = Get_Mode(HAL_GPIO_ReadPin(Dipswitch_MSB_GPIO_Port, Dipswitch_MSB_Pin), HAL_GPIO_ReadPin(Dipswitch_LSB_GPIO_Port, Dipswitch_LSB_Pin));
 800170c:	2104      	movs	r1, #4
 800170e:	480e      	ldr	r0, [pc, #56]	@ (8001748 <HAL_GPIO_EXTI_Callback+0x80>)
 8001710:	f000 fd82 	bl	8002218 <HAL_GPIO_ReadPin>
 8001714:	4603      	mov	r3, r0
 8001716:	461c      	mov	r4, r3
 8001718:	2108      	movs	r1, #8
 800171a:	480b      	ldr	r0, [pc, #44]	@ (8001748 <HAL_GPIO_EXTI_Callback+0x80>)
 800171c:	f000 fd7c 	bl	8002218 <HAL_GPIO_ReadPin>
 8001720:	4603      	mov	r3, r0
 8001722:	4619      	mov	r1, r3
 8001724:	4620      	mov	r0, r4
 8001726:	f7ff fb25 	bl	8000d74 <Get_Mode>
 800172a:	4603      	mov	r3, r0
 800172c:	b2da      	uxtb	r2, r3
 800172e:	4b07      	ldr	r3, [pc, #28]	@ (800174c <HAL_GPIO_EXTI_Callback+0x84>)
 8001730:	701a      	strb	r2, [r3, #0]
	}

} //fonctionne
 8001732:	bf00      	nop
 8001734:	370c      	adds	r7, #12
 8001736:	46bd      	mov	sp, r7
 8001738:	bd90      	pop	{r4, r7, pc}
 800173a:	bf00      	nop
 800173c:	20000158 	.word	0x20000158
 8001740:	2000015a 	.word	0x2000015a
 8001744:	20000038 	.word	0x20000038
 8001748:	40020800 	.word	0x40020800
 800174c:	2000002c 	.word	0x2000002c

08001750 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001750:	b480      	push	{r7}
 8001752:	b083      	sub	sp, #12
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
    if(htim->Instance == TIM6)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a27      	ldr	r2, [pc, #156]	@ (80017fc <HAL_TIM_PeriodElapsedCallback+0xac>)
 800175e:	4293      	cmp	r3, r2
 8001760:	d13b      	bne.n	80017da <HAL_TIM_PeriodElapsedCallback+0x8a>
    {
    	vitesseD = CIRCONFERENCE * nbPulseD / PULSE_PAR_TOUR * 2000 / (arrTimerVitesse + 1) ; // calcule la vitesse de la chenille droite en m/s
 8001762:	4b27      	ldr	r3, [pc, #156]	@ (8001800 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8001764:	881b      	ldrh	r3, [r3, #0]
 8001766:	b29b      	uxth	r3, r3
 8001768:	461a      	mov	r2, r3
 800176a:	239d      	movs	r3, #157	@ 0x9d
 800176c:	fb02 f303 	mul.w	r3, r2, r3
 8001770:	4a24      	ldr	r2, [pc, #144]	@ (8001804 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8001772:	fb82 1203 	smull	r1, r2, r2, r3
 8001776:	441a      	add	r2, r3
 8001778:	1192      	asrs	r2, r2, #6
 800177a:	17db      	asrs	r3, r3, #31
 800177c:	1ad3      	subs	r3, r2, r3
 800177e:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8001782:	fb03 f202 	mul.w	r2, r3, r2
 8001786:	4b20      	ldr	r3, [pc, #128]	@ (8001808 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8001788:	881b      	ldrh	r3, [r3, #0]
 800178a:	b29b      	uxth	r3, r3
 800178c:	3301      	adds	r3, #1
 800178e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001792:	b29a      	uxth	r2, r3
 8001794:	4b1d      	ldr	r3, [pc, #116]	@ (800180c <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8001796:	801a      	strh	r2, [r3, #0]
    	vitesseG = CIRCONFERENCE * nbPulseG / PULSE_PAR_TOUR * 2000 / (arrTimerVitesse + 1) ;
 8001798:	4b1d      	ldr	r3, [pc, #116]	@ (8001810 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 800179a:	881b      	ldrh	r3, [r3, #0]
 800179c:	b29b      	uxth	r3, r3
 800179e:	461a      	mov	r2, r3
 80017a0:	239d      	movs	r3, #157	@ 0x9d
 80017a2:	fb02 f303 	mul.w	r3, r2, r3
 80017a6:	4a17      	ldr	r2, [pc, #92]	@ (8001804 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 80017a8:	fb82 1203 	smull	r1, r2, r2, r3
 80017ac:	441a      	add	r2, r3
 80017ae:	1192      	asrs	r2, r2, #6
 80017b0:	17db      	asrs	r3, r3, #31
 80017b2:	1ad3      	subs	r3, r2, r3
 80017b4:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80017b8:	fb03 f202 	mul.w	r2, r3, r2
 80017bc:	4b12      	ldr	r3, [pc, #72]	@ (8001808 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 80017be:	881b      	ldrh	r3, [r3, #0]
 80017c0:	b29b      	uxth	r3, r3
 80017c2:	3301      	adds	r3, #1
 80017c4:	fb92 f3f3 	sdiv	r3, r2, r3
 80017c8:	b29a      	uxth	r2, r3
 80017ca:	4b12      	ldr	r3, [pc, #72]	@ (8001814 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 80017cc:	801a      	strh	r2, [r3, #0]

    	nbPulseD = 0 ;
 80017ce:	4b0c      	ldr	r3, [pc, #48]	@ (8001800 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	801a      	strh	r2, [r3, #0]
    	nbPulseG = 0;
 80017d4:	4b0e      	ldr	r3, [pc, #56]	@ (8001810 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	801a      	strh	r2, [r3, #0]
    	//HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
    }

    if(htim->Instance == TIM7) {	// Triggered every 10 µs
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4a0e      	ldr	r2, [pc, #56]	@ (8001818 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 80017e0:	4293      	cmp	r3, r2
 80017e2:	d104      	bne.n	80017ee <HAL_TIM_PeriodElapsedCallback+0x9e>
    	timer_count += 10;
 80017e4:	4b0d      	ldr	r3, [pc, #52]	@ (800181c <HAL_TIM_PeriodElapsedCallback+0xcc>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	330a      	adds	r3, #10
 80017ea:	4a0c      	ldr	r2, [pc, #48]	@ (800181c <HAL_TIM_PeriodElapsedCallback+0xcc>)
 80017ec:	6013      	str	r3, [r2, #0]
    }
}
 80017ee:	bf00      	nop
 80017f0:	370c      	adds	r7, #12
 80017f2:	46bd      	mov	sp, r7
 80017f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f8:	4770      	bx	lr
 80017fa:	bf00      	nop
 80017fc:	40001000 	.word	0x40001000
 8001800:	20000158 	.word	0x20000158
 8001804:	dd67c8a7 	.word	0xdd67c8a7
 8001808:	20000000 	.word	0x20000000
 800180c:	2000015c 	.word	0x2000015c
 8001810:	2000015a 	.word	0x2000015a
 8001814:	2000015e 	.word	0x2000015e
 8001818:	40001400 	.word	0x40001400
 800181c:	20000030 	.word	0x20000030

08001820 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001820:	b480      	push	{r7}
 8001822:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001824:	b672      	cpsid	i
}
 8001826:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001828:	bf00      	nop
 800182a:	e7fd      	b.n	8001828 <Error_Handler+0x8>

0800182c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b082      	sub	sp, #8
 8001830:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001832:	2300      	movs	r3, #0
 8001834:	607b      	str	r3, [r7, #4]
 8001836:	4b10      	ldr	r3, [pc, #64]	@ (8001878 <HAL_MspInit+0x4c>)
 8001838:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800183a:	4a0f      	ldr	r2, [pc, #60]	@ (8001878 <HAL_MspInit+0x4c>)
 800183c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001840:	6453      	str	r3, [r2, #68]	@ 0x44
 8001842:	4b0d      	ldr	r3, [pc, #52]	@ (8001878 <HAL_MspInit+0x4c>)
 8001844:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001846:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800184a:	607b      	str	r3, [r7, #4]
 800184c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800184e:	2300      	movs	r3, #0
 8001850:	603b      	str	r3, [r7, #0]
 8001852:	4b09      	ldr	r3, [pc, #36]	@ (8001878 <HAL_MspInit+0x4c>)
 8001854:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001856:	4a08      	ldr	r2, [pc, #32]	@ (8001878 <HAL_MspInit+0x4c>)
 8001858:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800185c:	6413      	str	r3, [r2, #64]	@ 0x40
 800185e:	4b06      	ldr	r3, [pc, #24]	@ (8001878 <HAL_MspInit+0x4c>)
 8001860:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001862:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001866:	603b      	str	r3, [r7, #0]
 8001868:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800186a:	2007      	movs	r0, #7
 800186c:	f000 fafe 	bl	8001e6c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001870:	bf00      	nop
 8001872:	3708      	adds	r7, #8
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}
 8001878:	40023800 	.word	0x40023800

0800187c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b086      	sub	sp, #24
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4a26      	ldr	r2, [pc, #152]	@ (8001924 <HAL_TIM_Base_MspInit+0xa8>)
 800188a:	4293      	cmp	r3, r2
 800188c:	d10e      	bne.n	80018ac <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800188e:	2300      	movs	r3, #0
 8001890:	617b      	str	r3, [r7, #20]
 8001892:	4b25      	ldr	r3, [pc, #148]	@ (8001928 <HAL_TIM_Base_MspInit+0xac>)
 8001894:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001896:	4a24      	ldr	r2, [pc, #144]	@ (8001928 <HAL_TIM_Base_MspInit+0xac>)
 8001898:	f043 0302 	orr.w	r3, r3, #2
 800189c:	6413      	str	r3, [r2, #64]	@ 0x40
 800189e:	4b22      	ldr	r3, [pc, #136]	@ (8001928 <HAL_TIM_Base_MspInit+0xac>)
 80018a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018a2:	f003 0302 	and.w	r3, r3, #2
 80018a6:	617b      	str	r3, [r7, #20]
 80018a8:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 80018aa:	e036      	b.n	800191a <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM6)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4a1e      	ldr	r2, [pc, #120]	@ (800192c <HAL_TIM_Base_MspInit+0xb0>)
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d116      	bne.n	80018e4 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80018b6:	2300      	movs	r3, #0
 80018b8:	613b      	str	r3, [r7, #16]
 80018ba:	4b1b      	ldr	r3, [pc, #108]	@ (8001928 <HAL_TIM_Base_MspInit+0xac>)
 80018bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018be:	4a1a      	ldr	r2, [pc, #104]	@ (8001928 <HAL_TIM_Base_MspInit+0xac>)
 80018c0:	f043 0310 	orr.w	r3, r3, #16
 80018c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80018c6:	4b18      	ldr	r3, [pc, #96]	@ (8001928 <HAL_TIM_Base_MspInit+0xac>)
 80018c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018ca:	f003 0310 	and.w	r3, r3, #16
 80018ce:	613b      	str	r3, [r7, #16]
 80018d0:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80018d2:	2200      	movs	r2, #0
 80018d4:	2100      	movs	r1, #0
 80018d6:	2036      	movs	r0, #54	@ 0x36
 80018d8:	f000 fad3 	bl	8001e82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80018dc:	2036      	movs	r0, #54	@ 0x36
 80018de:	f000 faec 	bl	8001eba <HAL_NVIC_EnableIRQ>
}
 80018e2:	e01a      	b.n	800191a <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM7)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4a11      	ldr	r2, [pc, #68]	@ (8001930 <HAL_TIM_Base_MspInit+0xb4>)
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d115      	bne.n	800191a <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80018ee:	2300      	movs	r3, #0
 80018f0:	60fb      	str	r3, [r7, #12]
 80018f2:	4b0d      	ldr	r3, [pc, #52]	@ (8001928 <HAL_TIM_Base_MspInit+0xac>)
 80018f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018f6:	4a0c      	ldr	r2, [pc, #48]	@ (8001928 <HAL_TIM_Base_MspInit+0xac>)
 80018f8:	f043 0320 	orr.w	r3, r3, #32
 80018fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80018fe:	4b0a      	ldr	r3, [pc, #40]	@ (8001928 <HAL_TIM_Base_MspInit+0xac>)
 8001900:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001902:	f003 0320 	and.w	r3, r3, #32
 8001906:	60fb      	str	r3, [r7, #12]
 8001908:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 800190a:	2200      	movs	r2, #0
 800190c:	2100      	movs	r1, #0
 800190e:	2037      	movs	r0, #55	@ 0x37
 8001910:	f000 fab7 	bl	8001e82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001914:	2037      	movs	r0, #55	@ 0x37
 8001916:	f000 fad0 	bl	8001eba <HAL_NVIC_EnableIRQ>
}
 800191a:	bf00      	nop
 800191c:	3718      	adds	r7, #24
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	40000400 	.word	0x40000400
 8001928:	40023800 	.word	0x40023800
 800192c:	40001000 	.word	0x40001000
 8001930:	40001400 	.word	0x40001400

08001934 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b08a      	sub	sp, #40	@ 0x28
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800193c:	f107 0314 	add.w	r3, r7, #20
 8001940:	2200      	movs	r2, #0
 8001942:	601a      	str	r2, [r3, #0]
 8001944:	605a      	str	r2, [r3, #4]
 8001946:	609a      	str	r2, [r3, #8]
 8001948:	60da      	str	r2, [r3, #12]
 800194a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a21      	ldr	r2, [pc, #132]	@ (80019d8 <HAL_TIM_MspPostInit+0xa4>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d13b      	bne.n	80019ce <HAL_TIM_MspPostInit+0x9a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001956:	2300      	movs	r3, #0
 8001958:	613b      	str	r3, [r7, #16]
 800195a:	4b20      	ldr	r3, [pc, #128]	@ (80019dc <HAL_TIM_MspPostInit+0xa8>)
 800195c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800195e:	4a1f      	ldr	r2, [pc, #124]	@ (80019dc <HAL_TIM_MspPostInit+0xa8>)
 8001960:	f043 0301 	orr.w	r3, r3, #1
 8001964:	6313      	str	r3, [r2, #48]	@ 0x30
 8001966:	4b1d      	ldr	r3, [pc, #116]	@ (80019dc <HAL_TIM_MspPostInit+0xa8>)
 8001968:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800196a:	f003 0301 	and.w	r3, r3, #1
 800196e:	613b      	str	r3, [r7, #16]
 8001970:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001972:	2300      	movs	r3, #0
 8001974:	60fb      	str	r3, [r7, #12]
 8001976:	4b19      	ldr	r3, [pc, #100]	@ (80019dc <HAL_TIM_MspPostInit+0xa8>)
 8001978:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800197a:	4a18      	ldr	r2, [pc, #96]	@ (80019dc <HAL_TIM_MspPostInit+0xa8>)
 800197c:	f043 0302 	orr.w	r3, r3, #2
 8001980:	6313      	str	r3, [r2, #48]	@ 0x30
 8001982:	4b16      	ldr	r3, [pc, #88]	@ (80019dc <HAL_TIM_MspPostInit+0xa8>)
 8001984:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001986:	f003 0302 	and.w	r3, r3, #2
 800198a:	60fb      	str	r3, [r7, #12]
 800198c:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = Gauche_av_Pin|Gauche_re_Pin;
 800198e:	23c0      	movs	r3, #192	@ 0xc0
 8001990:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001992:	2302      	movs	r3, #2
 8001994:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001996:	2300      	movs	r3, #0
 8001998:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800199a:	2300      	movs	r3, #0
 800199c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800199e:	2302      	movs	r3, #2
 80019a0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019a2:	f107 0314 	add.w	r3, r7, #20
 80019a6:	4619      	mov	r1, r3
 80019a8:	480d      	ldr	r0, [pc, #52]	@ (80019e0 <HAL_TIM_MspPostInit+0xac>)
 80019aa:	f000 faa1 	bl	8001ef0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Droit_av_Pin|Droit_re_Pin;
 80019ae:	2303      	movs	r3, #3
 80019b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019b2:	2302      	movs	r3, #2
 80019b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b6:	2300      	movs	r3, #0
 80019b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019ba:	2300      	movs	r3, #0
 80019bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80019be:	2302      	movs	r3, #2
 80019c0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019c2:	f107 0314 	add.w	r3, r7, #20
 80019c6:	4619      	mov	r1, r3
 80019c8:	4806      	ldr	r0, [pc, #24]	@ (80019e4 <HAL_TIM_MspPostInit+0xb0>)
 80019ca:	f000 fa91 	bl	8001ef0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80019ce:	bf00      	nop
 80019d0:	3728      	adds	r7, #40	@ 0x28
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	40000400 	.word	0x40000400
 80019dc:	40023800 	.word	0x40023800
 80019e0:	40020000 	.word	0x40020000
 80019e4:	40020400 	.word	0x40020400

080019e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b08a      	sub	sp, #40	@ 0x28
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019f0:	f107 0314 	add.w	r3, r7, #20
 80019f4:	2200      	movs	r2, #0
 80019f6:	601a      	str	r2, [r3, #0]
 80019f8:	605a      	str	r2, [r3, #4]
 80019fa:	609a      	str	r2, [r3, #8]
 80019fc:	60da      	str	r2, [r3, #12]
 80019fe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a19      	ldr	r2, [pc, #100]	@ (8001a6c <HAL_UART_MspInit+0x84>)
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d12b      	bne.n	8001a62 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	613b      	str	r3, [r7, #16]
 8001a0e:	4b18      	ldr	r3, [pc, #96]	@ (8001a70 <HAL_UART_MspInit+0x88>)
 8001a10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a12:	4a17      	ldr	r2, [pc, #92]	@ (8001a70 <HAL_UART_MspInit+0x88>)
 8001a14:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a18:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a1a:	4b15      	ldr	r3, [pc, #84]	@ (8001a70 <HAL_UART_MspInit+0x88>)
 8001a1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a22:	613b      	str	r3, [r7, #16]
 8001a24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a26:	2300      	movs	r3, #0
 8001a28:	60fb      	str	r3, [r7, #12]
 8001a2a:	4b11      	ldr	r3, [pc, #68]	@ (8001a70 <HAL_UART_MspInit+0x88>)
 8001a2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a2e:	4a10      	ldr	r2, [pc, #64]	@ (8001a70 <HAL_UART_MspInit+0x88>)
 8001a30:	f043 0301 	orr.w	r3, r3, #1
 8001a34:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a36:	4b0e      	ldr	r3, [pc, #56]	@ (8001a70 <HAL_UART_MspInit+0x88>)
 8001a38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a3a:	f003 0301 	and.w	r3, r3, #1
 8001a3e:	60fb      	str	r3, [r7, #12]
 8001a40:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001a42:	230c      	movs	r3, #12
 8001a44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a46:	2302      	movs	r3, #2
 8001a48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a4e:	2303      	movs	r3, #3
 8001a50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001a52:	2307      	movs	r3, #7
 8001a54:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a56:	f107 0314 	add.w	r3, r7, #20
 8001a5a:	4619      	mov	r1, r3
 8001a5c:	4805      	ldr	r0, [pc, #20]	@ (8001a74 <HAL_UART_MspInit+0x8c>)
 8001a5e:	f000 fa47 	bl	8001ef0 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001a62:	bf00      	nop
 8001a64:	3728      	adds	r7, #40	@ 0x28
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	40004400 	.word	0x40004400
 8001a70:	40023800 	.word	0x40023800
 8001a74:	40020000 	.word	0x40020000

08001a78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a7c:	bf00      	nop
 8001a7e:	e7fd      	b.n	8001a7c <NMI_Handler+0x4>

08001a80 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a80:	b480      	push	{r7}
 8001a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a84:	bf00      	nop
 8001a86:	e7fd      	b.n	8001a84 <HardFault_Handler+0x4>

08001a88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a8c:	bf00      	nop
 8001a8e:	e7fd      	b.n	8001a8c <MemManage_Handler+0x4>

08001a90 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a90:	b480      	push	{r7}
 8001a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a94:	bf00      	nop
 8001a96:	e7fd      	b.n	8001a94 <BusFault_Handler+0x4>

08001a98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a9c:	bf00      	nop
 8001a9e:	e7fd      	b.n	8001a9c <UsageFault_Handler+0x4>

08001aa0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001aa4:	bf00      	nop
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr

08001aae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001aae:	b480      	push	{r7}
 8001ab0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ab2:	bf00      	nop
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aba:	4770      	bx	lr

08001abc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001abc:	b480      	push	{r7}
 8001abe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ac0:	bf00      	nop
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac8:	4770      	bx	lr

08001aca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001aca:	b580      	push	{r7, lr}
 8001acc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ace:	f000 f8b9 	bl	8001c44 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ad2:	bf00      	nop
 8001ad4:	bd80      	pop	{r7, pc}

08001ad6 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001ad6:	b580      	push	{r7, lr}
 8001ad8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Encodeur_G_A_Pin);
 8001ada:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8001ade:	f000 fbcd 	bl	800227c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Encodeur_D_A_Pin);
 8001ae2:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001ae6:	f000 fbc9 	bl	800227c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001aea:	bf00      	nop
 8001aec:	bd80      	pop	{r7, pc}

08001aee <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001aee:	b580      	push	{r7, lr}
 8001af0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Blue_Button_Pin);
 8001af2:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001af6:	f000 fbc1 	bl	800227c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001afa:	bf00      	nop
 8001afc:	bd80      	pop	{r7, pc}
	...

08001b00 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001b04:	4802      	ldr	r0, [pc, #8]	@ (8001b10 <TIM6_DAC_IRQHandler+0x10>)
 8001b06:	f001 fbc9 	bl	800329c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001b0a:	bf00      	nop
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	bf00      	nop
 8001b10:	20000080 	.word	0x20000080

08001b14 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001b18:	4802      	ldr	r0, [pc, #8]	@ (8001b24 <TIM7_IRQHandler+0x10>)
 8001b1a:	f001 fbbf 	bl	800329c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001b1e:	bf00      	nop
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	200000c8 	.word	0x200000c8

08001b28 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b2c:	4b06      	ldr	r3, [pc, #24]	@ (8001b48 <SystemInit+0x20>)
 8001b2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b32:	4a05      	ldr	r2, [pc, #20]	@ (8001b48 <SystemInit+0x20>)
 8001b34:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001b38:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b3c:	bf00      	nop
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b44:	4770      	bx	lr
 8001b46:	bf00      	nop
 8001b48:	e000ed00 	.word	0xe000ed00

08001b4c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001b4c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001b84 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001b50:	f7ff ffea 	bl	8001b28 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b54:	480c      	ldr	r0, [pc, #48]	@ (8001b88 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001b56:	490d      	ldr	r1, [pc, #52]	@ (8001b8c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001b58:	4a0d      	ldr	r2, [pc, #52]	@ (8001b90 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001b5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b5c:	e002      	b.n	8001b64 <LoopCopyDataInit>

08001b5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b62:	3304      	adds	r3, #4

08001b64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b68:	d3f9      	bcc.n	8001b5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b6a:	4a0a      	ldr	r2, [pc, #40]	@ (8001b94 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001b6c:	4c0a      	ldr	r4, [pc, #40]	@ (8001b98 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001b6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b70:	e001      	b.n	8001b76 <LoopFillZerobss>

08001b72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b74:	3204      	adds	r2, #4

08001b76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b78:	d3fb      	bcc.n	8001b72 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001b7a:	f002 fca9 	bl	80044d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b7e:	f7ff fb15 	bl	80011ac <main>
  bx  lr    
 8001b82:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001b84:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001b88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b8c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001b90:	08004568 	.word	0x08004568
  ldr r2, =_sbss
 8001b94:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001b98:	20000164 	.word	0x20000164

08001b9c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b9c:	e7fe      	b.n	8001b9c <ADC_IRQHandler>
	...

08001ba0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ba4:	4b0e      	ldr	r3, [pc, #56]	@ (8001be0 <HAL_Init+0x40>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4a0d      	ldr	r2, [pc, #52]	@ (8001be0 <HAL_Init+0x40>)
 8001baa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001bae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001bb0:	4b0b      	ldr	r3, [pc, #44]	@ (8001be0 <HAL_Init+0x40>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a0a      	ldr	r2, [pc, #40]	@ (8001be0 <HAL_Init+0x40>)
 8001bb6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001bba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bbc:	4b08      	ldr	r3, [pc, #32]	@ (8001be0 <HAL_Init+0x40>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a07      	ldr	r2, [pc, #28]	@ (8001be0 <HAL_Init+0x40>)
 8001bc2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001bc6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bc8:	2003      	movs	r0, #3
 8001bca:	f000 f94f 	bl	8001e6c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001bce:	2000      	movs	r0, #0
 8001bd0:	f000 f808 	bl	8001be4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001bd4:	f7ff fe2a 	bl	800182c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bd8:	2300      	movs	r3, #0
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	40023c00 	.word	0x40023c00

08001be4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b082      	sub	sp, #8
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001bec:	4b12      	ldr	r3, [pc, #72]	@ (8001c38 <HAL_InitTick+0x54>)
 8001bee:	681a      	ldr	r2, [r3, #0]
 8001bf0:	4b12      	ldr	r3, [pc, #72]	@ (8001c3c <HAL_InitTick+0x58>)
 8001bf2:	781b      	ldrb	r3, [r3, #0]
 8001bf4:	4619      	mov	r1, r3
 8001bf6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001bfa:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c02:	4618      	mov	r0, r3
 8001c04:	f000 f967 	bl	8001ed6 <HAL_SYSTICK_Config>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d001      	beq.n	8001c12 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	e00e      	b.n	8001c30 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2b0f      	cmp	r3, #15
 8001c16:	d80a      	bhi.n	8001c2e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c18:	2200      	movs	r2, #0
 8001c1a:	6879      	ldr	r1, [r7, #4]
 8001c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8001c20:	f000 f92f 	bl	8001e82 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c24:	4a06      	ldr	r2, [pc, #24]	@ (8001c40 <HAL_InitTick+0x5c>)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	e000      	b.n	8001c30 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c2e:	2301      	movs	r3, #1
}
 8001c30:	4618      	mov	r0, r3
 8001c32:	3708      	adds	r7, #8
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd80      	pop	{r7, pc}
 8001c38:	20000004 	.word	0x20000004
 8001c3c:	2000000c 	.word	0x2000000c
 8001c40:	20000008 	.word	0x20000008

08001c44 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c44:	b480      	push	{r7}
 8001c46:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c48:	4b06      	ldr	r3, [pc, #24]	@ (8001c64 <HAL_IncTick+0x20>)
 8001c4a:	781b      	ldrb	r3, [r3, #0]
 8001c4c:	461a      	mov	r2, r3
 8001c4e:	4b06      	ldr	r3, [pc, #24]	@ (8001c68 <HAL_IncTick+0x24>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4413      	add	r3, r2
 8001c54:	4a04      	ldr	r2, [pc, #16]	@ (8001c68 <HAL_IncTick+0x24>)
 8001c56:	6013      	str	r3, [r2, #0]
}
 8001c58:	bf00      	nop
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c60:	4770      	bx	lr
 8001c62:	bf00      	nop
 8001c64:	2000000c 	.word	0x2000000c
 8001c68:	20000160 	.word	0x20000160

08001c6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	af00      	add	r7, sp, #0
  return uwTick;
 8001c70:	4b03      	ldr	r3, [pc, #12]	@ (8001c80 <HAL_GetTick+0x14>)
 8001c72:	681b      	ldr	r3, [r3, #0]
}
 8001c74:	4618      	mov	r0, r3
 8001c76:	46bd      	mov	sp, r7
 8001c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7c:	4770      	bx	lr
 8001c7e:	bf00      	nop
 8001c80:	20000160 	.word	0x20000160

08001c84 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b084      	sub	sp, #16
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c8c:	f7ff ffee 	bl	8001c6c <HAL_GetTick>
 8001c90:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c9c:	d005      	beq.n	8001caa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c9e:	4b0a      	ldr	r3, [pc, #40]	@ (8001cc8 <HAL_Delay+0x44>)
 8001ca0:	781b      	ldrb	r3, [r3, #0]
 8001ca2:	461a      	mov	r2, r3
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	4413      	add	r3, r2
 8001ca8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001caa:	bf00      	nop
 8001cac:	f7ff ffde 	bl	8001c6c <HAL_GetTick>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	68bb      	ldr	r3, [r7, #8]
 8001cb4:	1ad3      	subs	r3, r2, r3
 8001cb6:	68fa      	ldr	r2, [r7, #12]
 8001cb8:	429a      	cmp	r2, r3
 8001cba:	d8f7      	bhi.n	8001cac <HAL_Delay+0x28>
  {
  }
}
 8001cbc:	bf00      	nop
 8001cbe:	bf00      	nop
 8001cc0:	3710      	adds	r7, #16
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	2000000c 	.word	0x2000000c

08001ccc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b085      	sub	sp, #20
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	f003 0307 	and.w	r3, r3, #7
 8001cda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cdc:	4b0c      	ldr	r3, [pc, #48]	@ (8001d10 <__NVIC_SetPriorityGrouping+0x44>)
 8001cde:	68db      	ldr	r3, [r3, #12]
 8001ce0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ce2:	68ba      	ldr	r2, [r7, #8]
 8001ce4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001ce8:	4013      	ands	r3, r2
 8001cea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cf0:	68bb      	ldr	r3, [r7, #8]
 8001cf2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001cf4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001cf8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001cfc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cfe:	4a04      	ldr	r2, [pc, #16]	@ (8001d10 <__NVIC_SetPriorityGrouping+0x44>)
 8001d00:	68bb      	ldr	r3, [r7, #8]
 8001d02:	60d3      	str	r3, [r2, #12]
}
 8001d04:	bf00      	nop
 8001d06:	3714      	adds	r7, #20
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0e:	4770      	bx	lr
 8001d10:	e000ed00 	.word	0xe000ed00

08001d14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d14:	b480      	push	{r7}
 8001d16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d18:	4b04      	ldr	r3, [pc, #16]	@ (8001d2c <__NVIC_GetPriorityGrouping+0x18>)
 8001d1a:	68db      	ldr	r3, [r3, #12]
 8001d1c:	0a1b      	lsrs	r3, r3, #8
 8001d1e:	f003 0307 	and.w	r3, r3, #7
}
 8001d22:	4618      	mov	r0, r3
 8001d24:	46bd      	mov	sp, r7
 8001d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2a:	4770      	bx	lr
 8001d2c:	e000ed00 	.word	0xe000ed00

08001d30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b083      	sub	sp, #12
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	4603      	mov	r3, r0
 8001d38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	db0b      	blt.n	8001d5a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d42:	79fb      	ldrb	r3, [r7, #7]
 8001d44:	f003 021f 	and.w	r2, r3, #31
 8001d48:	4907      	ldr	r1, [pc, #28]	@ (8001d68 <__NVIC_EnableIRQ+0x38>)
 8001d4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d4e:	095b      	lsrs	r3, r3, #5
 8001d50:	2001      	movs	r0, #1
 8001d52:	fa00 f202 	lsl.w	r2, r0, r2
 8001d56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001d5a:	bf00      	nop
 8001d5c:	370c      	adds	r7, #12
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d64:	4770      	bx	lr
 8001d66:	bf00      	nop
 8001d68:	e000e100 	.word	0xe000e100

08001d6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b083      	sub	sp, #12
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	4603      	mov	r3, r0
 8001d74:	6039      	str	r1, [r7, #0]
 8001d76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	db0a      	blt.n	8001d96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	b2da      	uxtb	r2, r3
 8001d84:	490c      	ldr	r1, [pc, #48]	@ (8001db8 <__NVIC_SetPriority+0x4c>)
 8001d86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d8a:	0112      	lsls	r2, r2, #4
 8001d8c:	b2d2      	uxtb	r2, r2
 8001d8e:	440b      	add	r3, r1
 8001d90:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d94:	e00a      	b.n	8001dac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	b2da      	uxtb	r2, r3
 8001d9a:	4908      	ldr	r1, [pc, #32]	@ (8001dbc <__NVIC_SetPriority+0x50>)
 8001d9c:	79fb      	ldrb	r3, [r7, #7]
 8001d9e:	f003 030f 	and.w	r3, r3, #15
 8001da2:	3b04      	subs	r3, #4
 8001da4:	0112      	lsls	r2, r2, #4
 8001da6:	b2d2      	uxtb	r2, r2
 8001da8:	440b      	add	r3, r1
 8001daa:	761a      	strb	r2, [r3, #24]
}
 8001dac:	bf00      	nop
 8001dae:	370c      	adds	r7, #12
 8001db0:	46bd      	mov	sp, r7
 8001db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db6:	4770      	bx	lr
 8001db8:	e000e100 	.word	0xe000e100
 8001dbc:	e000ed00 	.word	0xe000ed00

08001dc0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b089      	sub	sp, #36	@ 0x24
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	60f8      	str	r0, [r7, #12]
 8001dc8:	60b9      	str	r1, [r7, #8]
 8001dca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	f003 0307 	and.w	r3, r3, #7
 8001dd2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001dd4:	69fb      	ldr	r3, [r7, #28]
 8001dd6:	f1c3 0307 	rsb	r3, r3, #7
 8001dda:	2b04      	cmp	r3, #4
 8001ddc:	bf28      	it	cs
 8001dde:	2304      	movcs	r3, #4
 8001de0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001de2:	69fb      	ldr	r3, [r7, #28]
 8001de4:	3304      	adds	r3, #4
 8001de6:	2b06      	cmp	r3, #6
 8001de8:	d902      	bls.n	8001df0 <NVIC_EncodePriority+0x30>
 8001dea:	69fb      	ldr	r3, [r7, #28]
 8001dec:	3b03      	subs	r3, #3
 8001dee:	e000      	b.n	8001df2 <NVIC_EncodePriority+0x32>
 8001df0:	2300      	movs	r3, #0
 8001df2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001df4:	f04f 32ff 	mov.w	r2, #4294967295
 8001df8:	69bb      	ldr	r3, [r7, #24]
 8001dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfe:	43da      	mvns	r2, r3
 8001e00:	68bb      	ldr	r3, [r7, #8]
 8001e02:	401a      	ands	r2, r3
 8001e04:	697b      	ldr	r3, [r7, #20]
 8001e06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e08:	f04f 31ff 	mov.w	r1, #4294967295
 8001e0c:	697b      	ldr	r3, [r7, #20]
 8001e0e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e12:	43d9      	mvns	r1, r3
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e18:	4313      	orrs	r3, r2
         );
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	3724      	adds	r7, #36	@ 0x24
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e24:	4770      	bx	lr
	...

08001e28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b082      	sub	sp, #8
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	3b01      	subs	r3, #1
 8001e34:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001e38:	d301      	bcc.n	8001e3e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	e00f      	b.n	8001e5e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e3e:	4a0a      	ldr	r2, [pc, #40]	@ (8001e68 <SysTick_Config+0x40>)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	3b01      	subs	r3, #1
 8001e44:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e46:	210f      	movs	r1, #15
 8001e48:	f04f 30ff 	mov.w	r0, #4294967295
 8001e4c:	f7ff ff8e 	bl	8001d6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e50:	4b05      	ldr	r3, [pc, #20]	@ (8001e68 <SysTick_Config+0x40>)
 8001e52:	2200      	movs	r2, #0
 8001e54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e56:	4b04      	ldr	r3, [pc, #16]	@ (8001e68 <SysTick_Config+0x40>)
 8001e58:	2207      	movs	r2, #7
 8001e5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e5c:	2300      	movs	r3, #0
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	3708      	adds	r7, #8
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	e000e010 	.word	0xe000e010

08001e6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b082      	sub	sp, #8
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e74:	6878      	ldr	r0, [r7, #4]
 8001e76:	f7ff ff29 	bl	8001ccc <__NVIC_SetPriorityGrouping>
}
 8001e7a:	bf00      	nop
 8001e7c:	3708      	adds	r7, #8
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}

08001e82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e82:	b580      	push	{r7, lr}
 8001e84:	b086      	sub	sp, #24
 8001e86:	af00      	add	r7, sp, #0
 8001e88:	4603      	mov	r3, r0
 8001e8a:	60b9      	str	r1, [r7, #8]
 8001e8c:	607a      	str	r2, [r7, #4]
 8001e8e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e90:	2300      	movs	r3, #0
 8001e92:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e94:	f7ff ff3e 	bl	8001d14 <__NVIC_GetPriorityGrouping>
 8001e98:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e9a:	687a      	ldr	r2, [r7, #4]
 8001e9c:	68b9      	ldr	r1, [r7, #8]
 8001e9e:	6978      	ldr	r0, [r7, #20]
 8001ea0:	f7ff ff8e 	bl	8001dc0 <NVIC_EncodePriority>
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001eaa:	4611      	mov	r1, r2
 8001eac:	4618      	mov	r0, r3
 8001eae:	f7ff ff5d 	bl	8001d6c <__NVIC_SetPriority>
}
 8001eb2:	bf00      	nop
 8001eb4:	3718      	adds	r7, #24
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}

08001eba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001eba:	b580      	push	{r7, lr}
 8001ebc:	b082      	sub	sp, #8
 8001ebe:	af00      	add	r7, sp, #0
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ec4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f7ff ff31 	bl	8001d30 <__NVIC_EnableIRQ>
}
 8001ece:	bf00      	nop
 8001ed0:	3708      	adds	r7, #8
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}

08001ed6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ed6:	b580      	push	{r7, lr}
 8001ed8:	b082      	sub	sp, #8
 8001eda:	af00      	add	r7, sp, #0
 8001edc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ede:	6878      	ldr	r0, [r7, #4]
 8001ee0:	f7ff ffa2 	bl	8001e28 <SysTick_Config>
 8001ee4:	4603      	mov	r3, r0
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	3708      	adds	r7, #8
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}
	...

08001ef0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b089      	sub	sp, #36	@ 0x24
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
 8001ef8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001efa:	2300      	movs	r3, #0
 8001efc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001efe:	2300      	movs	r3, #0
 8001f00:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001f02:	2300      	movs	r3, #0
 8001f04:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f06:	2300      	movs	r3, #0
 8001f08:	61fb      	str	r3, [r7, #28]
 8001f0a:	e165      	b.n	80021d8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001f0c:	2201      	movs	r2, #1
 8001f0e:	69fb      	ldr	r3, [r7, #28]
 8001f10:	fa02 f303 	lsl.w	r3, r2, r3
 8001f14:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	697a      	ldr	r2, [r7, #20]
 8001f1c:	4013      	ands	r3, r2
 8001f1e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001f20:	693a      	ldr	r2, [r7, #16]
 8001f22:	697b      	ldr	r3, [r7, #20]
 8001f24:	429a      	cmp	r2, r3
 8001f26:	f040 8154 	bne.w	80021d2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	f003 0303 	and.w	r3, r3, #3
 8001f32:	2b01      	cmp	r3, #1
 8001f34:	d005      	beq.n	8001f42 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f3e:	2b02      	cmp	r3, #2
 8001f40:	d130      	bne.n	8001fa4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	689b      	ldr	r3, [r3, #8]
 8001f46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001f48:	69fb      	ldr	r3, [r7, #28]
 8001f4a:	005b      	lsls	r3, r3, #1
 8001f4c:	2203      	movs	r2, #3
 8001f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f52:	43db      	mvns	r3, r3
 8001f54:	69ba      	ldr	r2, [r7, #24]
 8001f56:	4013      	ands	r3, r2
 8001f58:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	68da      	ldr	r2, [r3, #12]
 8001f5e:	69fb      	ldr	r3, [r7, #28]
 8001f60:	005b      	lsls	r3, r3, #1
 8001f62:	fa02 f303 	lsl.w	r3, r2, r3
 8001f66:	69ba      	ldr	r2, [r7, #24]
 8001f68:	4313      	orrs	r3, r2
 8001f6a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	69ba      	ldr	r2, [r7, #24]
 8001f70:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f78:	2201      	movs	r2, #1
 8001f7a:	69fb      	ldr	r3, [r7, #28]
 8001f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f80:	43db      	mvns	r3, r3
 8001f82:	69ba      	ldr	r2, [r7, #24]
 8001f84:	4013      	ands	r3, r2
 8001f86:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	091b      	lsrs	r3, r3, #4
 8001f8e:	f003 0201 	and.w	r2, r3, #1
 8001f92:	69fb      	ldr	r3, [r7, #28]
 8001f94:	fa02 f303 	lsl.w	r3, r2, r3
 8001f98:	69ba      	ldr	r2, [r7, #24]
 8001f9a:	4313      	orrs	r3, r2
 8001f9c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	69ba      	ldr	r2, [r7, #24]
 8001fa2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	f003 0303 	and.w	r3, r3, #3
 8001fac:	2b03      	cmp	r3, #3
 8001fae:	d017      	beq.n	8001fe0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	68db      	ldr	r3, [r3, #12]
 8001fb4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001fb6:	69fb      	ldr	r3, [r7, #28]
 8001fb8:	005b      	lsls	r3, r3, #1
 8001fba:	2203      	movs	r2, #3
 8001fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc0:	43db      	mvns	r3, r3
 8001fc2:	69ba      	ldr	r2, [r7, #24]
 8001fc4:	4013      	ands	r3, r2
 8001fc6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	689a      	ldr	r2, [r3, #8]
 8001fcc:	69fb      	ldr	r3, [r7, #28]
 8001fce:	005b      	lsls	r3, r3, #1
 8001fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd4:	69ba      	ldr	r2, [r7, #24]
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	69ba      	ldr	r2, [r7, #24]
 8001fde:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	f003 0303 	and.w	r3, r3, #3
 8001fe8:	2b02      	cmp	r3, #2
 8001fea:	d123      	bne.n	8002034 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001fec:	69fb      	ldr	r3, [r7, #28]
 8001fee:	08da      	lsrs	r2, r3, #3
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	3208      	adds	r2, #8
 8001ff4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ff8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001ffa:	69fb      	ldr	r3, [r7, #28]
 8001ffc:	f003 0307 	and.w	r3, r3, #7
 8002000:	009b      	lsls	r3, r3, #2
 8002002:	220f      	movs	r2, #15
 8002004:	fa02 f303 	lsl.w	r3, r2, r3
 8002008:	43db      	mvns	r3, r3
 800200a:	69ba      	ldr	r2, [r7, #24]
 800200c:	4013      	ands	r3, r2
 800200e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	691a      	ldr	r2, [r3, #16]
 8002014:	69fb      	ldr	r3, [r7, #28]
 8002016:	f003 0307 	and.w	r3, r3, #7
 800201a:	009b      	lsls	r3, r3, #2
 800201c:	fa02 f303 	lsl.w	r3, r2, r3
 8002020:	69ba      	ldr	r2, [r7, #24]
 8002022:	4313      	orrs	r3, r2
 8002024:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002026:	69fb      	ldr	r3, [r7, #28]
 8002028:	08da      	lsrs	r2, r3, #3
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	3208      	adds	r2, #8
 800202e:	69b9      	ldr	r1, [r7, #24]
 8002030:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800203a:	69fb      	ldr	r3, [r7, #28]
 800203c:	005b      	lsls	r3, r3, #1
 800203e:	2203      	movs	r2, #3
 8002040:	fa02 f303 	lsl.w	r3, r2, r3
 8002044:	43db      	mvns	r3, r3
 8002046:	69ba      	ldr	r2, [r7, #24]
 8002048:	4013      	ands	r3, r2
 800204a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	f003 0203 	and.w	r2, r3, #3
 8002054:	69fb      	ldr	r3, [r7, #28]
 8002056:	005b      	lsls	r3, r3, #1
 8002058:	fa02 f303 	lsl.w	r3, r2, r3
 800205c:	69ba      	ldr	r2, [r7, #24]
 800205e:	4313      	orrs	r3, r2
 8002060:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	69ba      	ldr	r2, [r7, #24]
 8002066:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002070:	2b00      	cmp	r3, #0
 8002072:	f000 80ae 	beq.w	80021d2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002076:	2300      	movs	r3, #0
 8002078:	60fb      	str	r3, [r7, #12]
 800207a:	4b5d      	ldr	r3, [pc, #372]	@ (80021f0 <HAL_GPIO_Init+0x300>)
 800207c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800207e:	4a5c      	ldr	r2, [pc, #368]	@ (80021f0 <HAL_GPIO_Init+0x300>)
 8002080:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002084:	6453      	str	r3, [r2, #68]	@ 0x44
 8002086:	4b5a      	ldr	r3, [pc, #360]	@ (80021f0 <HAL_GPIO_Init+0x300>)
 8002088:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800208a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800208e:	60fb      	str	r3, [r7, #12]
 8002090:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002092:	4a58      	ldr	r2, [pc, #352]	@ (80021f4 <HAL_GPIO_Init+0x304>)
 8002094:	69fb      	ldr	r3, [r7, #28]
 8002096:	089b      	lsrs	r3, r3, #2
 8002098:	3302      	adds	r3, #2
 800209a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800209e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80020a0:	69fb      	ldr	r3, [r7, #28]
 80020a2:	f003 0303 	and.w	r3, r3, #3
 80020a6:	009b      	lsls	r3, r3, #2
 80020a8:	220f      	movs	r2, #15
 80020aa:	fa02 f303 	lsl.w	r3, r2, r3
 80020ae:	43db      	mvns	r3, r3
 80020b0:	69ba      	ldr	r2, [r7, #24]
 80020b2:	4013      	ands	r3, r2
 80020b4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	4a4f      	ldr	r2, [pc, #316]	@ (80021f8 <HAL_GPIO_Init+0x308>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d025      	beq.n	800210a <HAL_GPIO_Init+0x21a>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	4a4e      	ldr	r2, [pc, #312]	@ (80021fc <HAL_GPIO_Init+0x30c>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d01f      	beq.n	8002106 <HAL_GPIO_Init+0x216>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	4a4d      	ldr	r2, [pc, #308]	@ (8002200 <HAL_GPIO_Init+0x310>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d019      	beq.n	8002102 <HAL_GPIO_Init+0x212>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	4a4c      	ldr	r2, [pc, #304]	@ (8002204 <HAL_GPIO_Init+0x314>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d013      	beq.n	80020fe <HAL_GPIO_Init+0x20e>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	4a4b      	ldr	r2, [pc, #300]	@ (8002208 <HAL_GPIO_Init+0x318>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d00d      	beq.n	80020fa <HAL_GPIO_Init+0x20a>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	4a4a      	ldr	r2, [pc, #296]	@ (800220c <HAL_GPIO_Init+0x31c>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d007      	beq.n	80020f6 <HAL_GPIO_Init+0x206>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	4a49      	ldr	r2, [pc, #292]	@ (8002210 <HAL_GPIO_Init+0x320>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d101      	bne.n	80020f2 <HAL_GPIO_Init+0x202>
 80020ee:	2306      	movs	r3, #6
 80020f0:	e00c      	b.n	800210c <HAL_GPIO_Init+0x21c>
 80020f2:	2307      	movs	r3, #7
 80020f4:	e00a      	b.n	800210c <HAL_GPIO_Init+0x21c>
 80020f6:	2305      	movs	r3, #5
 80020f8:	e008      	b.n	800210c <HAL_GPIO_Init+0x21c>
 80020fa:	2304      	movs	r3, #4
 80020fc:	e006      	b.n	800210c <HAL_GPIO_Init+0x21c>
 80020fe:	2303      	movs	r3, #3
 8002100:	e004      	b.n	800210c <HAL_GPIO_Init+0x21c>
 8002102:	2302      	movs	r3, #2
 8002104:	e002      	b.n	800210c <HAL_GPIO_Init+0x21c>
 8002106:	2301      	movs	r3, #1
 8002108:	e000      	b.n	800210c <HAL_GPIO_Init+0x21c>
 800210a:	2300      	movs	r3, #0
 800210c:	69fa      	ldr	r2, [r7, #28]
 800210e:	f002 0203 	and.w	r2, r2, #3
 8002112:	0092      	lsls	r2, r2, #2
 8002114:	4093      	lsls	r3, r2
 8002116:	69ba      	ldr	r2, [r7, #24]
 8002118:	4313      	orrs	r3, r2
 800211a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800211c:	4935      	ldr	r1, [pc, #212]	@ (80021f4 <HAL_GPIO_Init+0x304>)
 800211e:	69fb      	ldr	r3, [r7, #28]
 8002120:	089b      	lsrs	r3, r3, #2
 8002122:	3302      	adds	r3, #2
 8002124:	69ba      	ldr	r2, [r7, #24]
 8002126:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800212a:	4b3a      	ldr	r3, [pc, #232]	@ (8002214 <HAL_GPIO_Init+0x324>)
 800212c:	689b      	ldr	r3, [r3, #8]
 800212e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002130:	693b      	ldr	r3, [r7, #16]
 8002132:	43db      	mvns	r3, r3
 8002134:	69ba      	ldr	r2, [r7, #24]
 8002136:	4013      	ands	r3, r2
 8002138:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002142:	2b00      	cmp	r3, #0
 8002144:	d003      	beq.n	800214e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002146:	69ba      	ldr	r2, [r7, #24]
 8002148:	693b      	ldr	r3, [r7, #16]
 800214a:	4313      	orrs	r3, r2
 800214c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800214e:	4a31      	ldr	r2, [pc, #196]	@ (8002214 <HAL_GPIO_Init+0x324>)
 8002150:	69bb      	ldr	r3, [r7, #24]
 8002152:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002154:	4b2f      	ldr	r3, [pc, #188]	@ (8002214 <HAL_GPIO_Init+0x324>)
 8002156:	68db      	ldr	r3, [r3, #12]
 8002158:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800215a:	693b      	ldr	r3, [r7, #16]
 800215c:	43db      	mvns	r3, r3
 800215e:	69ba      	ldr	r2, [r7, #24]
 8002160:	4013      	ands	r3, r2
 8002162:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800216c:	2b00      	cmp	r3, #0
 800216e:	d003      	beq.n	8002178 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002170:	69ba      	ldr	r2, [r7, #24]
 8002172:	693b      	ldr	r3, [r7, #16]
 8002174:	4313      	orrs	r3, r2
 8002176:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002178:	4a26      	ldr	r2, [pc, #152]	@ (8002214 <HAL_GPIO_Init+0x324>)
 800217a:	69bb      	ldr	r3, [r7, #24]
 800217c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800217e:	4b25      	ldr	r3, [pc, #148]	@ (8002214 <HAL_GPIO_Init+0x324>)
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002184:	693b      	ldr	r3, [r7, #16]
 8002186:	43db      	mvns	r3, r3
 8002188:	69ba      	ldr	r2, [r7, #24]
 800218a:	4013      	ands	r3, r2
 800218c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002196:	2b00      	cmp	r3, #0
 8002198:	d003      	beq.n	80021a2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800219a:	69ba      	ldr	r2, [r7, #24]
 800219c:	693b      	ldr	r3, [r7, #16]
 800219e:	4313      	orrs	r3, r2
 80021a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80021a2:	4a1c      	ldr	r2, [pc, #112]	@ (8002214 <HAL_GPIO_Init+0x324>)
 80021a4:	69bb      	ldr	r3, [r7, #24]
 80021a6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80021a8:	4b1a      	ldr	r3, [pc, #104]	@ (8002214 <HAL_GPIO_Init+0x324>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021ae:	693b      	ldr	r3, [r7, #16]
 80021b0:	43db      	mvns	r3, r3
 80021b2:	69ba      	ldr	r2, [r7, #24]
 80021b4:	4013      	ands	r3, r2
 80021b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d003      	beq.n	80021cc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80021c4:	69ba      	ldr	r2, [r7, #24]
 80021c6:	693b      	ldr	r3, [r7, #16]
 80021c8:	4313      	orrs	r3, r2
 80021ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80021cc:	4a11      	ldr	r2, [pc, #68]	@ (8002214 <HAL_GPIO_Init+0x324>)
 80021ce:	69bb      	ldr	r3, [r7, #24]
 80021d0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021d2:	69fb      	ldr	r3, [r7, #28]
 80021d4:	3301      	adds	r3, #1
 80021d6:	61fb      	str	r3, [r7, #28]
 80021d8:	69fb      	ldr	r3, [r7, #28]
 80021da:	2b0f      	cmp	r3, #15
 80021dc:	f67f ae96 	bls.w	8001f0c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80021e0:	bf00      	nop
 80021e2:	bf00      	nop
 80021e4:	3724      	adds	r7, #36	@ 0x24
 80021e6:	46bd      	mov	sp, r7
 80021e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ec:	4770      	bx	lr
 80021ee:	bf00      	nop
 80021f0:	40023800 	.word	0x40023800
 80021f4:	40013800 	.word	0x40013800
 80021f8:	40020000 	.word	0x40020000
 80021fc:	40020400 	.word	0x40020400
 8002200:	40020800 	.word	0x40020800
 8002204:	40020c00 	.word	0x40020c00
 8002208:	40021000 	.word	0x40021000
 800220c:	40021400 	.word	0x40021400
 8002210:	40021800 	.word	0x40021800
 8002214:	40013c00 	.word	0x40013c00

08002218 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002218:	b480      	push	{r7}
 800221a:	b085      	sub	sp, #20
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
 8002220:	460b      	mov	r3, r1
 8002222:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	691a      	ldr	r2, [r3, #16]
 8002228:	887b      	ldrh	r3, [r7, #2]
 800222a:	4013      	ands	r3, r2
 800222c:	2b00      	cmp	r3, #0
 800222e:	d002      	beq.n	8002236 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002230:	2301      	movs	r3, #1
 8002232:	73fb      	strb	r3, [r7, #15]
 8002234:	e001      	b.n	800223a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002236:	2300      	movs	r3, #0
 8002238:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800223a:	7bfb      	ldrb	r3, [r7, #15]
}
 800223c:	4618      	mov	r0, r3
 800223e:	3714      	adds	r7, #20
 8002240:	46bd      	mov	sp, r7
 8002242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002246:	4770      	bx	lr

08002248 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002248:	b480      	push	{r7}
 800224a:	b083      	sub	sp, #12
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
 8002250:	460b      	mov	r3, r1
 8002252:	807b      	strh	r3, [r7, #2]
 8002254:	4613      	mov	r3, r2
 8002256:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002258:	787b      	ldrb	r3, [r7, #1]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d003      	beq.n	8002266 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800225e:	887a      	ldrh	r2, [r7, #2]
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002264:	e003      	b.n	800226e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002266:	887b      	ldrh	r3, [r7, #2]
 8002268:	041a      	lsls	r2, r3, #16
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	619a      	str	r2, [r3, #24]
}
 800226e:	bf00      	nop
 8002270:	370c      	adds	r7, #12
 8002272:	46bd      	mov	sp, r7
 8002274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002278:	4770      	bx	lr
	...

0800227c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b082      	sub	sp, #8
 8002280:	af00      	add	r7, sp, #0
 8002282:	4603      	mov	r3, r0
 8002284:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002286:	4b08      	ldr	r3, [pc, #32]	@ (80022a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002288:	695a      	ldr	r2, [r3, #20]
 800228a:	88fb      	ldrh	r3, [r7, #6]
 800228c:	4013      	ands	r3, r2
 800228e:	2b00      	cmp	r3, #0
 8002290:	d006      	beq.n	80022a0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002292:	4a05      	ldr	r2, [pc, #20]	@ (80022a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002294:	88fb      	ldrh	r3, [r7, #6]
 8002296:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002298:	88fb      	ldrh	r3, [r7, #6]
 800229a:	4618      	mov	r0, r3
 800229c:	f7ff fa14 	bl	80016c8 <HAL_GPIO_EXTI_Callback>
  }
}
 80022a0:	bf00      	nop
 80022a2:	3708      	adds	r7, #8
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bd80      	pop	{r7, pc}
 80022a8:	40013c00 	.word	0x40013c00

080022ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b084      	sub	sp, #16
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
 80022b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d101      	bne.n	80022c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022bc:	2301      	movs	r3, #1
 80022be:	e0cc      	b.n	800245a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80022c0:	4b68      	ldr	r3, [pc, #416]	@ (8002464 <HAL_RCC_ClockConfig+0x1b8>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f003 030f 	and.w	r3, r3, #15
 80022c8:	683a      	ldr	r2, [r7, #0]
 80022ca:	429a      	cmp	r2, r3
 80022cc:	d90c      	bls.n	80022e8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022ce:	4b65      	ldr	r3, [pc, #404]	@ (8002464 <HAL_RCC_ClockConfig+0x1b8>)
 80022d0:	683a      	ldr	r2, [r7, #0]
 80022d2:	b2d2      	uxtb	r2, r2
 80022d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022d6:	4b63      	ldr	r3, [pc, #396]	@ (8002464 <HAL_RCC_ClockConfig+0x1b8>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f003 030f 	and.w	r3, r3, #15
 80022de:	683a      	ldr	r2, [r7, #0]
 80022e0:	429a      	cmp	r2, r3
 80022e2:	d001      	beq.n	80022e8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80022e4:	2301      	movs	r3, #1
 80022e6:	e0b8      	b.n	800245a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f003 0302 	and.w	r3, r3, #2
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d020      	beq.n	8002336 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f003 0304 	and.w	r3, r3, #4
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d005      	beq.n	800230c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002300:	4b59      	ldr	r3, [pc, #356]	@ (8002468 <HAL_RCC_ClockConfig+0x1bc>)
 8002302:	689b      	ldr	r3, [r3, #8]
 8002304:	4a58      	ldr	r2, [pc, #352]	@ (8002468 <HAL_RCC_ClockConfig+0x1bc>)
 8002306:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800230a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f003 0308 	and.w	r3, r3, #8
 8002314:	2b00      	cmp	r3, #0
 8002316:	d005      	beq.n	8002324 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002318:	4b53      	ldr	r3, [pc, #332]	@ (8002468 <HAL_RCC_ClockConfig+0x1bc>)
 800231a:	689b      	ldr	r3, [r3, #8]
 800231c:	4a52      	ldr	r2, [pc, #328]	@ (8002468 <HAL_RCC_ClockConfig+0x1bc>)
 800231e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002322:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002324:	4b50      	ldr	r3, [pc, #320]	@ (8002468 <HAL_RCC_ClockConfig+0x1bc>)
 8002326:	689b      	ldr	r3, [r3, #8]
 8002328:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	689b      	ldr	r3, [r3, #8]
 8002330:	494d      	ldr	r1, [pc, #308]	@ (8002468 <HAL_RCC_ClockConfig+0x1bc>)
 8002332:	4313      	orrs	r3, r2
 8002334:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f003 0301 	and.w	r3, r3, #1
 800233e:	2b00      	cmp	r3, #0
 8002340:	d044      	beq.n	80023cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	2b01      	cmp	r3, #1
 8002348:	d107      	bne.n	800235a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800234a:	4b47      	ldr	r3, [pc, #284]	@ (8002468 <HAL_RCC_ClockConfig+0x1bc>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002352:	2b00      	cmp	r3, #0
 8002354:	d119      	bne.n	800238a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002356:	2301      	movs	r3, #1
 8002358:	e07f      	b.n	800245a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	2b02      	cmp	r3, #2
 8002360:	d003      	beq.n	800236a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002366:	2b03      	cmp	r3, #3
 8002368:	d107      	bne.n	800237a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800236a:	4b3f      	ldr	r3, [pc, #252]	@ (8002468 <HAL_RCC_ClockConfig+0x1bc>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002372:	2b00      	cmp	r3, #0
 8002374:	d109      	bne.n	800238a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002376:	2301      	movs	r3, #1
 8002378:	e06f      	b.n	800245a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800237a:	4b3b      	ldr	r3, [pc, #236]	@ (8002468 <HAL_RCC_ClockConfig+0x1bc>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f003 0302 	and.w	r3, r3, #2
 8002382:	2b00      	cmp	r3, #0
 8002384:	d101      	bne.n	800238a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002386:	2301      	movs	r3, #1
 8002388:	e067      	b.n	800245a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800238a:	4b37      	ldr	r3, [pc, #220]	@ (8002468 <HAL_RCC_ClockConfig+0x1bc>)
 800238c:	689b      	ldr	r3, [r3, #8]
 800238e:	f023 0203 	bic.w	r2, r3, #3
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	4934      	ldr	r1, [pc, #208]	@ (8002468 <HAL_RCC_ClockConfig+0x1bc>)
 8002398:	4313      	orrs	r3, r2
 800239a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800239c:	f7ff fc66 	bl	8001c6c <HAL_GetTick>
 80023a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023a2:	e00a      	b.n	80023ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023a4:	f7ff fc62 	bl	8001c6c <HAL_GetTick>
 80023a8:	4602      	mov	r2, r0
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	1ad3      	subs	r3, r2, r3
 80023ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d901      	bls.n	80023ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80023b6:	2303      	movs	r3, #3
 80023b8:	e04f      	b.n	800245a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023ba:	4b2b      	ldr	r3, [pc, #172]	@ (8002468 <HAL_RCC_ClockConfig+0x1bc>)
 80023bc:	689b      	ldr	r3, [r3, #8]
 80023be:	f003 020c 	and.w	r2, r3, #12
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	009b      	lsls	r3, r3, #2
 80023c8:	429a      	cmp	r2, r3
 80023ca:	d1eb      	bne.n	80023a4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80023cc:	4b25      	ldr	r3, [pc, #148]	@ (8002464 <HAL_RCC_ClockConfig+0x1b8>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f003 030f 	and.w	r3, r3, #15
 80023d4:	683a      	ldr	r2, [r7, #0]
 80023d6:	429a      	cmp	r2, r3
 80023d8:	d20c      	bcs.n	80023f4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023da:	4b22      	ldr	r3, [pc, #136]	@ (8002464 <HAL_RCC_ClockConfig+0x1b8>)
 80023dc:	683a      	ldr	r2, [r7, #0]
 80023de:	b2d2      	uxtb	r2, r2
 80023e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023e2:	4b20      	ldr	r3, [pc, #128]	@ (8002464 <HAL_RCC_ClockConfig+0x1b8>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f003 030f 	and.w	r3, r3, #15
 80023ea:	683a      	ldr	r2, [r7, #0]
 80023ec:	429a      	cmp	r2, r3
 80023ee:	d001      	beq.n	80023f4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80023f0:	2301      	movs	r3, #1
 80023f2:	e032      	b.n	800245a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f003 0304 	and.w	r3, r3, #4
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d008      	beq.n	8002412 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002400:	4b19      	ldr	r3, [pc, #100]	@ (8002468 <HAL_RCC_ClockConfig+0x1bc>)
 8002402:	689b      	ldr	r3, [r3, #8]
 8002404:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	68db      	ldr	r3, [r3, #12]
 800240c:	4916      	ldr	r1, [pc, #88]	@ (8002468 <HAL_RCC_ClockConfig+0x1bc>)
 800240e:	4313      	orrs	r3, r2
 8002410:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f003 0308 	and.w	r3, r3, #8
 800241a:	2b00      	cmp	r3, #0
 800241c:	d009      	beq.n	8002432 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800241e:	4b12      	ldr	r3, [pc, #72]	@ (8002468 <HAL_RCC_ClockConfig+0x1bc>)
 8002420:	689b      	ldr	r3, [r3, #8]
 8002422:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	691b      	ldr	r3, [r3, #16]
 800242a:	00db      	lsls	r3, r3, #3
 800242c:	490e      	ldr	r1, [pc, #56]	@ (8002468 <HAL_RCC_ClockConfig+0x1bc>)
 800242e:	4313      	orrs	r3, r2
 8002430:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002432:	f000 f855 	bl	80024e0 <HAL_RCC_GetSysClockFreq>
 8002436:	4602      	mov	r2, r0
 8002438:	4b0b      	ldr	r3, [pc, #44]	@ (8002468 <HAL_RCC_ClockConfig+0x1bc>)
 800243a:	689b      	ldr	r3, [r3, #8]
 800243c:	091b      	lsrs	r3, r3, #4
 800243e:	f003 030f 	and.w	r3, r3, #15
 8002442:	490a      	ldr	r1, [pc, #40]	@ (800246c <HAL_RCC_ClockConfig+0x1c0>)
 8002444:	5ccb      	ldrb	r3, [r1, r3]
 8002446:	fa22 f303 	lsr.w	r3, r2, r3
 800244a:	4a09      	ldr	r2, [pc, #36]	@ (8002470 <HAL_RCC_ClockConfig+0x1c4>)
 800244c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800244e:	4b09      	ldr	r3, [pc, #36]	@ (8002474 <HAL_RCC_ClockConfig+0x1c8>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4618      	mov	r0, r3
 8002454:	f7ff fbc6 	bl	8001be4 <HAL_InitTick>

  return HAL_OK;
 8002458:	2300      	movs	r3, #0
}
 800245a:	4618      	mov	r0, r3
 800245c:	3710      	adds	r7, #16
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}
 8002462:	bf00      	nop
 8002464:	40023c00 	.word	0x40023c00
 8002468:	40023800 	.word	0x40023800
 800246c:	08004540 	.word	0x08004540
 8002470:	20000004 	.word	0x20000004
 8002474:	20000008 	.word	0x20000008

08002478 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002478:	b480      	push	{r7}
 800247a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800247c:	4b03      	ldr	r3, [pc, #12]	@ (800248c <HAL_RCC_GetHCLKFreq+0x14>)
 800247e:	681b      	ldr	r3, [r3, #0]
}
 8002480:	4618      	mov	r0, r3
 8002482:	46bd      	mov	sp, r7
 8002484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002488:	4770      	bx	lr
 800248a:	bf00      	nop
 800248c:	20000004 	.word	0x20000004

08002490 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002494:	f7ff fff0 	bl	8002478 <HAL_RCC_GetHCLKFreq>
 8002498:	4602      	mov	r2, r0
 800249a:	4b05      	ldr	r3, [pc, #20]	@ (80024b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800249c:	689b      	ldr	r3, [r3, #8]
 800249e:	0a9b      	lsrs	r3, r3, #10
 80024a0:	f003 0307 	and.w	r3, r3, #7
 80024a4:	4903      	ldr	r1, [pc, #12]	@ (80024b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80024a6:	5ccb      	ldrb	r3, [r1, r3]
 80024a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024ac:	4618      	mov	r0, r3
 80024ae:	bd80      	pop	{r7, pc}
 80024b0:	40023800 	.word	0x40023800
 80024b4:	08004550 	.word	0x08004550

080024b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80024bc:	f7ff ffdc 	bl	8002478 <HAL_RCC_GetHCLKFreq>
 80024c0:	4602      	mov	r2, r0
 80024c2:	4b05      	ldr	r3, [pc, #20]	@ (80024d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80024c4:	689b      	ldr	r3, [r3, #8]
 80024c6:	0b5b      	lsrs	r3, r3, #13
 80024c8:	f003 0307 	and.w	r3, r3, #7
 80024cc:	4903      	ldr	r1, [pc, #12]	@ (80024dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80024ce:	5ccb      	ldrb	r3, [r1, r3]
 80024d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024d4:	4618      	mov	r0, r3
 80024d6:	bd80      	pop	{r7, pc}
 80024d8:	40023800 	.word	0x40023800
 80024dc:	08004550 	.word	0x08004550

080024e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80024e4:	b0ae      	sub	sp, #184	@ 0xb8
 80024e6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80024e8:	2300      	movs	r3, #0
 80024ea:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 80024ee:	2300      	movs	r3, #0
 80024f0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80024f4:	2300      	movs	r3, #0
 80024f6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 80024fa:	2300      	movs	r3, #0
 80024fc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8002500:	2300      	movs	r3, #0
 8002502:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002506:	4bcb      	ldr	r3, [pc, #812]	@ (8002834 <HAL_RCC_GetSysClockFreq+0x354>)
 8002508:	689b      	ldr	r3, [r3, #8]
 800250a:	f003 030c 	and.w	r3, r3, #12
 800250e:	2b0c      	cmp	r3, #12
 8002510:	f200 8206 	bhi.w	8002920 <HAL_RCC_GetSysClockFreq+0x440>
 8002514:	a201      	add	r2, pc, #4	@ (adr r2, 800251c <HAL_RCC_GetSysClockFreq+0x3c>)
 8002516:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800251a:	bf00      	nop
 800251c:	08002551 	.word	0x08002551
 8002520:	08002921 	.word	0x08002921
 8002524:	08002921 	.word	0x08002921
 8002528:	08002921 	.word	0x08002921
 800252c:	08002559 	.word	0x08002559
 8002530:	08002921 	.word	0x08002921
 8002534:	08002921 	.word	0x08002921
 8002538:	08002921 	.word	0x08002921
 800253c:	08002561 	.word	0x08002561
 8002540:	08002921 	.word	0x08002921
 8002544:	08002921 	.word	0x08002921
 8002548:	08002921 	.word	0x08002921
 800254c:	08002751 	.word	0x08002751
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002550:	4bb9      	ldr	r3, [pc, #740]	@ (8002838 <HAL_RCC_GetSysClockFreq+0x358>)
 8002552:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002556:	e1e7      	b.n	8002928 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002558:	4bb8      	ldr	r3, [pc, #736]	@ (800283c <HAL_RCC_GetSysClockFreq+0x35c>)
 800255a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800255e:	e1e3      	b.n	8002928 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002560:	4bb4      	ldr	r3, [pc, #720]	@ (8002834 <HAL_RCC_GetSysClockFreq+0x354>)
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002568:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800256c:	4bb1      	ldr	r3, [pc, #708]	@ (8002834 <HAL_RCC_GetSysClockFreq+0x354>)
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002574:	2b00      	cmp	r3, #0
 8002576:	d071      	beq.n	800265c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002578:	4bae      	ldr	r3, [pc, #696]	@ (8002834 <HAL_RCC_GetSysClockFreq+0x354>)
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	099b      	lsrs	r3, r3, #6
 800257e:	2200      	movs	r2, #0
 8002580:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002584:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8002588:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800258c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002590:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002594:	2300      	movs	r3, #0
 8002596:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800259a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800259e:	4622      	mov	r2, r4
 80025a0:	462b      	mov	r3, r5
 80025a2:	f04f 0000 	mov.w	r0, #0
 80025a6:	f04f 0100 	mov.w	r1, #0
 80025aa:	0159      	lsls	r1, r3, #5
 80025ac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80025b0:	0150      	lsls	r0, r2, #5
 80025b2:	4602      	mov	r2, r0
 80025b4:	460b      	mov	r3, r1
 80025b6:	4621      	mov	r1, r4
 80025b8:	1a51      	subs	r1, r2, r1
 80025ba:	6439      	str	r1, [r7, #64]	@ 0x40
 80025bc:	4629      	mov	r1, r5
 80025be:	eb63 0301 	sbc.w	r3, r3, r1
 80025c2:	647b      	str	r3, [r7, #68]	@ 0x44
 80025c4:	f04f 0200 	mov.w	r2, #0
 80025c8:	f04f 0300 	mov.w	r3, #0
 80025cc:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 80025d0:	4649      	mov	r1, r9
 80025d2:	018b      	lsls	r3, r1, #6
 80025d4:	4641      	mov	r1, r8
 80025d6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80025da:	4641      	mov	r1, r8
 80025dc:	018a      	lsls	r2, r1, #6
 80025de:	4641      	mov	r1, r8
 80025e0:	1a51      	subs	r1, r2, r1
 80025e2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80025e4:	4649      	mov	r1, r9
 80025e6:	eb63 0301 	sbc.w	r3, r3, r1
 80025ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80025ec:	f04f 0200 	mov.w	r2, #0
 80025f0:	f04f 0300 	mov.w	r3, #0
 80025f4:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 80025f8:	4649      	mov	r1, r9
 80025fa:	00cb      	lsls	r3, r1, #3
 80025fc:	4641      	mov	r1, r8
 80025fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002602:	4641      	mov	r1, r8
 8002604:	00ca      	lsls	r2, r1, #3
 8002606:	4610      	mov	r0, r2
 8002608:	4619      	mov	r1, r3
 800260a:	4603      	mov	r3, r0
 800260c:	4622      	mov	r2, r4
 800260e:	189b      	adds	r3, r3, r2
 8002610:	633b      	str	r3, [r7, #48]	@ 0x30
 8002612:	462b      	mov	r3, r5
 8002614:	460a      	mov	r2, r1
 8002616:	eb42 0303 	adc.w	r3, r2, r3
 800261a:	637b      	str	r3, [r7, #52]	@ 0x34
 800261c:	f04f 0200 	mov.w	r2, #0
 8002620:	f04f 0300 	mov.w	r3, #0
 8002624:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002628:	4629      	mov	r1, r5
 800262a:	024b      	lsls	r3, r1, #9
 800262c:	4621      	mov	r1, r4
 800262e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002632:	4621      	mov	r1, r4
 8002634:	024a      	lsls	r2, r1, #9
 8002636:	4610      	mov	r0, r2
 8002638:	4619      	mov	r1, r3
 800263a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800263e:	2200      	movs	r2, #0
 8002640:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002644:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002648:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 800264c:	f7fe fa1a 	bl	8000a84 <__aeabi_uldivmod>
 8002650:	4602      	mov	r2, r0
 8002652:	460b      	mov	r3, r1
 8002654:	4613      	mov	r3, r2
 8002656:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800265a:	e067      	b.n	800272c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800265c:	4b75      	ldr	r3, [pc, #468]	@ (8002834 <HAL_RCC_GetSysClockFreq+0x354>)
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	099b      	lsrs	r3, r3, #6
 8002662:	2200      	movs	r2, #0
 8002664:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002668:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 800266c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002670:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002674:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002676:	2300      	movs	r3, #0
 8002678:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800267a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800267e:	4622      	mov	r2, r4
 8002680:	462b      	mov	r3, r5
 8002682:	f04f 0000 	mov.w	r0, #0
 8002686:	f04f 0100 	mov.w	r1, #0
 800268a:	0159      	lsls	r1, r3, #5
 800268c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002690:	0150      	lsls	r0, r2, #5
 8002692:	4602      	mov	r2, r0
 8002694:	460b      	mov	r3, r1
 8002696:	4621      	mov	r1, r4
 8002698:	1a51      	subs	r1, r2, r1
 800269a:	62b9      	str	r1, [r7, #40]	@ 0x28
 800269c:	4629      	mov	r1, r5
 800269e:	eb63 0301 	sbc.w	r3, r3, r1
 80026a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80026a4:	f04f 0200 	mov.w	r2, #0
 80026a8:	f04f 0300 	mov.w	r3, #0
 80026ac:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80026b0:	4649      	mov	r1, r9
 80026b2:	018b      	lsls	r3, r1, #6
 80026b4:	4641      	mov	r1, r8
 80026b6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80026ba:	4641      	mov	r1, r8
 80026bc:	018a      	lsls	r2, r1, #6
 80026be:	4641      	mov	r1, r8
 80026c0:	ebb2 0a01 	subs.w	sl, r2, r1
 80026c4:	4649      	mov	r1, r9
 80026c6:	eb63 0b01 	sbc.w	fp, r3, r1
 80026ca:	f04f 0200 	mov.w	r2, #0
 80026ce:	f04f 0300 	mov.w	r3, #0
 80026d2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80026d6:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80026da:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80026de:	4692      	mov	sl, r2
 80026e0:	469b      	mov	fp, r3
 80026e2:	4623      	mov	r3, r4
 80026e4:	eb1a 0303 	adds.w	r3, sl, r3
 80026e8:	623b      	str	r3, [r7, #32]
 80026ea:	462b      	mov	r3, r5
 80026ec:	eb4b 0303 	adc.w	r3, fp, r3
 80026f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80026f2:	f04f 0200 	mov.w	r2, #0
 80026f6:	f04f 0300 	mov.w	r3, #0
 80026fa:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80026fe:	4629      	mov	r1, r5
 8002700:	028b      	lsls	r3, r1, #10
 8002702:	4621      	mov	r1, r4
 8002704:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002708:	4621      	mov	r1, r4
 800270a:	028a      	lsls	r2, r1, #10
 800270c:	4610      	mov	r0, r2
 800270e:	4619      	mov	r1, r3
 8002710:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002714:	2200      	movs	r2, #0
 8002716:	673b      	str	r3, [r7, #112]	@ 0x70
 8002718:	677a      	str	r2, [r7, #116]	@ 0x74
 800271a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800271e:	f7fe f9b1 	bl	8000a84 <__aeabi_uldivmod>
 8002722:	4602      	mov	r2, r0
 8002724:	460b      	mov	r3, r1
 8002726:	4613      	mov	r3, r2
 8002728:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800272c:	4b41      	ldr	r3, [pc, #260]	@ (8002834 <HAL_RCC_GetSysClockFreq+0x354>)
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	0c1b      	lsrs	r3, r3, #16
 8002732:	f003 0303 	and.w	r3, r3, #3
 8002736:	3301      	adds	r3, #1
 8002738:	005b      	lsls	r3, r3, #1
 800273a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 800273e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002742:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002746:	fbb2 f3f3 	udiv	r3, r2, r3
 800274a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800274e:	e0eb      	b.n	8002928 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002750:	4b38      	ldr	r3, [pc, #224]	@ (8002834 <HAL_RCC_GetSysClockFreq+0x354>)
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002758:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800275c:	4b35      	ldr	r3, [pc, #212]	@ (8002834 <HAL_RCC_GetSysClockFreq+0x354>)
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002764:	2b00      	cmp	r3, #0
 8002766:	d06b      	beq.n	8002840 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002768:	4b32      	ldr	r3, [pc, #200]	@ (8002834 <HAL_RCC_GetSysClockFreq+0x354>)
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	099b      	lsrs	r3, r3, #6
 800276e:	2200      	movs	r2, #0
 8002770:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002772:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002774:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002776:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800277a:	663b      	str	r3, [r7, #96]	@ 0x60
 800277c:	2300      	movs	r3, #0
 800277e:	667b      	str	r3, [r7, #100]	@ 0x64
 8002780:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8002784:	4622      	mov	r2, r4
 8002786:	462b      	mov	r3, r5
 8002788:	f04f 0000 	mov.w	r0, #0
 800278c:	f04f 0100 	mov.w	r1, #0
 8002790:	0159      	lsls	r1, r3, #5
 8002792:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002796:	0150      	lsls	r0, r2, #5
 8002798:	4602      	mov	r2, r0
 800279a:	460b      	mov	r3, r1
 800279c:	4621      	mov	r1, r4
 800279e:	1a51      	subs	r1, r2, r1
 80027a0:	61b9      	str	r1, [r7, #24]
 80027a2:	4629      	mov	r1, r5
 80027a4:	eb63 0301 	sbc.w	r3, r3, r1
 80027a8:	61fb      	str	r3, [r7, #28]
 80027aa:	f04f 0200 	mov.w	r2, #0
 80027ae:	f04f 0300 	mov.w	r3, #0
 80027b2:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80027b6:	4659      	mov	r1, fp
 80027b8:	018b      	lsls	r3, r1, #6
 80027ba:	4651      	mov	r1, sl
 80027bc:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80027c0:	4651      	mov	r1, sl
 80027c2:	018a      	lsls	r2, r1, #6
 80027c4:	4651      	mov	r1, sl
 80027c6:	ebb2 0801 	subs.w	r8, r2, r1
 80027ca:	4659      	mov	r1, fp
 80027cc:	eb63 0901 	sbc.w	r9, r3, r1
 80027d0:	f04f 0200 	mov.w	r2, #0
 80027d4:	f04f 0300 	mov.w	r3, #0
 80027d8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80027dc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80027e0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80027e4:	4690      	mov	r8, r2
 80027e6:	4699      	mov	r9, r3
 80027e8:	4623      	mov	r3, r4
 80027ea:	eb18 0303 	adds.w	r3, r8, r3
 80027ee:	613b      	str	r3, [r7, #16]
 80027f0:	462b      	mov	r3, r5
 80027f2:	eb49 0303 	adc.w	r3, r9, r3
 80027f6:	617b      	str	r3, [r7, #20]
 80027f8:	f04f 0200 	mov.w	r2, #0
 80027fc:	f04f 0300 	mov.w	r3, #0
 8002800:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002804:	4629      	mov	r1, r5
 8002806:	024b      	lsls	r3, r1, #9
 8002808:	4621      	mov	r1, r4
 800280a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800280e:	4621      	mov	r1, r4
 8002810:	024a      	lsls	r2, r1, #9
 8002812:	4610      	mov	r0, r2
 8002814:	4619      	mov	r1, r3
 8002816:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800281a:	2200      	movs	r2, #0
 800281c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800281e:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002820:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002824:	f7fe f92e 	bl	8000a84 <__aeabi_uldivmod>
 8002828:	4602      	mov	r2, r0
 800282a:	460b      	mov	r3, r1
 800282c:	4613      	mov	r3, r2
 800282e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002832:	e065      	b.n	8002900 <HAL_RCC_GetSysClockFreq+0x420>
 8002834:	40023800 	.word	0x40023800
 8002838:	00f42400 	.word	0x00f42400
 800283c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002840:	4b3d      	ldr	r3, [pc, #244]	@ (8002938 <HAL_RCC_GetSysClockFreq+0x458>)
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	099b      	lsrs	r3, r3, #6
 8002846:	2200      	movs	r2, #0
 8002848:	4618      	mov	r0, r3
 800284a:	4611      	mov	r1, r2
 800284c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002850:	653b      	str	r3, [r7, #80]	@ 0x50
 8002852:	2300      	movs	r3, #0
 8002854:	657b      	str	r3, [r7, #84]	@ 0x54
 8002856:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800285a:	4642      	mov	r2, r8
 800285c:	464b      	mov	r3, r9
 800285e:	f04f 0000 	mov.w	r0, #0
 8002862:	f04f 0100 	mov.w	r1, #0
 8002866:	0159      	lsls	r1, r3, #5
 8002868:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800286c:	0150      	lsls	r0, r2, #5
 800286e:	4602      	mov	r2, r0
 8002870:	460b      	mov	r3, r1
 8002872:	4641      	mov	r1, r8
 8002874:	1a51      	subs	r1, r2, r1
 8002876:	60b9      	str	r1, [r7, #8]
 8002878:	4649      	mov	r1, r9
 800287a:	eb63 0301 	sbc.w	r3, r3, r1
 800287e:	60fb      	str	r3, [r7, #12]
 8002880:	f04f 0200 	mov.w	r2, #0
 8002884:	f04f 0300 	mov.w	r3, #0
 8002888:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800288c:	4659      	mov	r1, fp
 800288e:	018b      	lsls	r3, r1, #6
 8002890:	4651      	mov	r1, sl
 8002892:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002896:	4651      	mov	r1, sl
 8002898:	018a      	lsls	r2, r1, #6
 800289a:	4651      	mov	r1, sl
 800289c:	1a54      	subs	r4, r2, r1
 800289e:	4659      	mov	r1, fp
 80028a0:	eb63 0501 	sbc.w	r5, r3, r1
 80028a4:	f04f 0200 	mov.w	r2, #0
 80028a8:	f04f 0300 	mov.w	r3, #0
 80028ac:	00eb      	lsls	r3, r5, #3
 80028ae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80028b2:	00e2      	lsls	r2, r4, #3
 80028b4:	4614      	mov	r4, r2
 80028b6:	461d      	mov	r5, r3
 80028b8:	4643      	mov	r3, r8
 80028ba:	18e3      	adds	r3, r4, r3
 80028bc:	603b      	str	r3, [r7, #0]
 80028be:	464b      	mov	r3, r9
 80028c0:	eb45 0303 	adc.w	r3, r5, r3
 80028c4:	607b      	str	r3, [r7, #4]
 80028c6:	f04f 0200 	mov.w	r2, #0
 80028ca:	f04f 0300 	mov.w	r3, #0
 80028ce:	e9d7 4500 	ldrd	r4, r5, [r7]
 80028d2:	4629      	mov	r1, r5
 80028d4:	028b      	lsls	r3, r1, #10
 80028d6:	4621      	mov	r1, r4
 80028d8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80028dc:	4621      	mov	r1, r4
 80028de:	028a      	lsls	r2, r1, #10
 80028e0:	4610      	mov	r0, r2
 80028e2:	4619      	mov	r1, r3
 80028e4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80028e8:	2200      	movs	r2, #0
 80028ea:	64bb      	str	r3, [r7, #72]	@ 0x48
 80028ec:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80028ee:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80028f2:	f7fe f8c7 	bl	8000a84 <__aeabi_uldivmod>
 80028f6:	4602      	mov	r2, r0
 80028f8:	460b      	mov	r3, r1
 80028fa:	4613      	mov	r3, r2
 80028fc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002900:	4b0d      	ldr	r3, [pc, #52]	@ (8002938 <HAL_RCC_GetSysClockFreq+0x458>)
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	0f1b      	lsrs	r3, r3, #28
 8002906:	f003 0307 	and.w	r3, r3, #7
 800290a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 800290e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002912:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002916:	fbb2 f3f3 	udiv	r3, r2, r3
 800291a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800291e:	e003      	b.n	8002928 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002920:	4b06      	ldr	r3, [pc, #24]	@ (800293c <HAL_RCC_GetSysClockFreq+0x45c>)
 8002922:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002926:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002928:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 800292c:	4618      	mov	r0, r3
 800292e:	37b8      	adds	r7, #184	@ 0xb8
 8002930:	46bd      	mov	sp, r7
 8002932:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002936:	bf00      	nop
 8002938:	40023800 	.word	0x40023800
 800293c:	00f42400 	.word	0x00f42400

08002940 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b086      	sub	sp, #24
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d101      	bne.n	8002952 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800294e:	2301      	movs	r3, #1
 8002950:	e28d      	b.n	8002e6e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f003 0301 	and.w	r3, r3, #1
 800295a:	2b00      	cmp	r3, #0
 800295c:	f000 8083 	beq.w	8002a66 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002960:	4b94      	ldr	r3, [pc, #592]	@ (8002bb4 <HAL_RCC_OscConfig+0x274>)
 8002962:	689b      	ldr	r3, [r3, #8]
 8002964:	f003 030c 	and.w	r3, r3, #12
 8002968:	2b04      	cmp	r3, #4
 800296a:	d019      	beq.n	80029a0 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800296c:	4b91      	ldr	r3, [pc, #580]	@ (8002bb4 <HAL_RCC_OscConfig+0x274>)
 800296e:	689b      	ldr	r3, [r3, #8]
 8002970:	f003 030c 	and.w	r3, r3, #12
        || \
 8002974:	2b08      	cmp	r3, #8
 8002976:	d106      	bne.n	8002986 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002978:	4b8e      	ldr	r3, [pc, #568]	@ (8002bb4 <HAL_RCC_OscConfig+0x274>)
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002980:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002984:	d00c      	beq.n	80029a0 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002986:	4b8b      	ldr	r3, [pc, #556]	@ (8002bb4 <HAL_RCC_OscConfig+0x274>)
 8002988:	689b      	ldr	r3, [r3, #8]
 800298a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800298e:	2b0c      	cmp	r3, #12
 8002990:	d112      	bne.n	80029b8 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002992:	4b88      	ldr	r3, [pc, #544]	@ (8002bb4 <HAL_RCC_OscConfig+0x274>)
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800299a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800299e:	d10b      	bne.n	80029b8 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029a0:	4b84      	ldr	r3, [pc, #528]	@ (8002bb4 <HAL_RCC_OscConfig+0x274>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d05b      	beq.n	8002a64 <HAL_RCC_OscConfig+0x124>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d157      	bne.n	8002a64 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80029b4:	2301      	movs	r3, #1
 80029b6:	e25a      	b.n	8002e6e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80029c0:	d106      	bne.n	80029d0 <HAL_RCC_OscConfig+0x90>
 80029c2:	4b7c      	ldr	r3, [pc, #496]	@ (8002bb4 <HAL_RCC_OscConfig+0x274>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4a7b      	ldr	r2, [pc, #492]	@ (8002bb4 <HAL_RCC_OscConfig+0x274>)
 80029c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80029cc:	6013      	str	r3, [r2, #0]
 80029ce:	e01d      	b.n	8002a0c <HAL_RCC_OscConfig+0xcc>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80029d8:	d10c      	bne.n	80029f4 <HAL_RCC_OscConfig+0xb4>
 80029da:	4b76      	ldr	r3, [pc, #472]	@ (8002bb4 <HAL_RCC_OscConfig+0x274>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4a75      	ldr	r2, [pc, #468]	@ (8002bb4 <HAL_RCC_OscConfig+0x274>)
 80029e0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80029e4:	6013      	str	r3, [r2, #0]
 80029e6:	4b73      	ldr	r3, [pc, #460]	@ (8002bb4 <HAL_RCC_OscConfig+0x274>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4a72      	ldr	r2, [pc, #456]	@ (8002bb4 <HAL_RCC_OscConfig+0x274>)
 80029ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80029f0:	6013      	str	r3, [r2, #0]
 80029f2:	e00b      	b.n	8002a0c <HAL_RCC_OscConfig+0xcc>
 80029f4:	4b6f      	ldr	r3, [pc, #444]	@ (8002bb4 <HAL_RCC_OscConfig+0x274>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a6e      	ldr	r2, [pc, #440]	@ (8002bb4 <HAL_RCC_OscConfig+0x274>)
 80029fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80029fe:	6013      	str	r3, [r2, #0]
 8002a00:	4b6c      	ldr	r3, [pc, #432]	@ (8002bb4 <HAL_RCC_OscConfig+0x274>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a6b      	ldr	r2, [pc, #428]	@ (8002bb4 <HAL_RCC_OscConfig+0x274>)
 8002a06:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002a0a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d013      	beq.n	8002a3c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a14:	f7ff f92a 	bl	8001c6c <HAL_GetTick>
 8002a18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a1a:	e008      	b.n	8002a2e <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a1c:	f7ff f926 	bl	8001c6c <HAL_GetTick>
 8002a20:	4602      	mov	r2, r0
 8002a22:	693b      	ldr	r3, [r7, #16]
 8002a24:	1ad3      	subs	r3, r2, r3
 8002a26:	2b64      	cmp	r3, #100	@ 0x64
 8002a28:	d901      	bls.n	8002a2e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002a2a:	2303      	movs	r3, #3
 8002a2c:	e21f      	b.n	8002e6e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a2e:	4b61      	ldr	r3, [pc, #388]	@ (8002bb4 <HAL_RCC_OscConfig+0x274>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d0f0      	beq.n	8002a1c <HAL_RCC_OscConfig+0xdc>
 8002a3a:	e014      	b.n	8002a66 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a3c:	f7ff f916 	bl	8001c6c <HAL_GetTick>
 8002a40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a42:	e008      	b.n	8002a56 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a44:	f7ff f912 	bl	8001c6c <HAL_GetTick>
 8002a48:	4602      	mov	r2, r0
 8002a4a:	693b      	ldr	r3, [r7, #16]
 8002a4c:	1ad3      	subs	r3, r2, r3
 8002a4e:	2b64      	cmp	r3, #100	@ 0x64
 8002a50:	d901      	bls.n	8002a56 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002a52:	2303      	movs	r3, #3
 8002a54:	e20b      	b.n	8002e6e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a56:	4b57      	ldr	r3, [pc, #348]	@ (8002bb4 <HAL_RCC_OscConfig+0x274>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d1f0      	bne.n	8002a44 <HAL_RCC_OscConfig+0x104>
 8002a62:	e000      	b.n	8002a66 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f003 0302 	and.w	r3, r3, #2
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d06f      	beq.n	8002b52 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002a72:	4b50      	ldr	r3, [pc, #320]	@ (8002bb4 <HAL_RCC_OscConfig+0x274>)
 8002a74:	689b      	ldr	r3, [r3, #8]
 8002a76:	f003 030c 	and.w	r3, r3, #12
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d017      	beq.n	8002aae <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002a7e:	4b4d      	ldr	r3, [pc, #308]	@ (8002bb4 <HAL_RCC_OscConfig+0x274>)
 8002a80:	689b      	ldr	r3, [r3, #8]
 8002a82:	f003 030c 	and.w	r3, r3, #12
        || \
 8002a86:	2b08      	cmp	r3, #8
 8002a88:	d105      	bne.n	8002a96 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002a8a:	4b4a      	ldr	r3, [pc, #296]	@ (8002bb4 <HAL_RCC_OscConfig+0x274>)
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d00b      	beq.n	8002aae <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a96:	4b47      	ldr	r3, [pc, #284]	@ (8002bb4 <HAL_RCC_OscConfig+0x274>)
 8002a98:	689b      	ldr	r3, [r3, #8]
 8002a9a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002a9e:	2b0c      	cmp	r3, #12
 8002aa0:	d11c      	bne.n	8002adc <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002aa2:	4b44      	ldr	r3, [pc, #272]	@ (8002bb4 <HAL_RCC_OscConfig+0x274>)
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d116      	bne.n	8002adc <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002aae:	4b41      	ldr	r3, [pc, #260]	@ (8002bb4 <HAL_RCC_OscConfig+0x274>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f003 0302 	and.w	r3, r3, #2
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d005      	beq.n	8002ac6 <HAL_RCC_OscConfig+0x186>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	68db      	ldr	r3, [r3, #12]
 8002abe:	2b01      	cmp	r3, #1
 8002ac0:	d001      	beq.n	8002ac6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	e1d3      	b.n	8002e6e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ac6:	4b3b      	ldr	r3, [pc, #236]	@ (8002bb4 <HAL_RCC_OscConfig+0x274>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	691b      	ldr	r3, [r3, #16]
 8002ad2:	00db      	lsls	r3, r3, #3
 8002ad4:	4937      	ldr	r1, [pc, #220]	@ (8002bb4 <HAL_RCC_OscConfig+0x274>)
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ada:	e03a      	b.n	8002b52 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	68db      	ldr	r3, [r3, #12]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d020      	beq.n	8002b26 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ae4:	4b34      	ldr	r3, [pc, #208]	@ (8002bb8 <HAL_RCC_OscConfig+0x278>)
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aea:	f7ff f8bf 	bl	8001c6c <HAL_GetTick>
 8002aee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002af0:	e008      	b.n	8002b04 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002af2:	f7ff f8bb 	bl	8001c6c <HAL_GetTick>
 8002af6:	4602      	mov	r2, r0
 8002af8:	693b      	ldr	r3, [r7, #16]
 8002afa:	1ad3      	subs	r3, r2, r3
 8002afc:	2b02      	cmp	r3, #2
 8002afe:	d901      	bls.n	8002b04 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002b00:	2303      	movs	r3, #3
 8002b02:	e1b4      	b.n	8002e6e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b04:	4b2b      	ldr	r3, [pc, #172]	@ (8002bb4 <HAL_RCC_OscConfig+0x274>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f003 0302 	and.w	r3, r3, #2
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d0f0      	beq.n	8002af2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b10:	4b28      	ldr	r3, [pc, #160]	@ (8002bb4 <HAL_RCC_OscConfig+0x274>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	691b      	ldr	r3, [r3, #16]
 8002b1c:	00db      	lsls	r3, r3, #3
 8002b1e:	4925      	ldr	r1, [pc, #148]	@ (8002bb4 <HAL_RCC_OscConfig+0x274>)
 8002b20:	4313      	orrs	r3, r2
 8002b22:	600b      	str	r3, [r1, #0]
 8002b24:	e015      	b.n	8002b52 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b26:	4b24      	ldr	r3, [pc, #144]	@ (8002bb8 <HAL_RCC_OscConfig+0x278>)
 8002b28:	2200      	movs	r2, #0
 8002b2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b2c:	f7ff f89e 	bl	8001c6c <HAL_GetTick>
 8002b30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b32:	e008      	b.n	8002b46 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b34:	f7ff f89a 	bl	8001c6c <HAL_GetTick>
 8002b38:	4602      	mov	r2, r0
 8002b3a:	693b      	ldr	r3, [r7, #16]
 8002b3c:	1ad3      	subs	r3, r2, r3
 8002b3e:	2b02      	cmp	r3, #2
 8002b40:	d901      	bls.n	8002b46 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002b42:	2303      	movs	r3, #3
 8002b44:	e193      	b.n	8002e6e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b46:	4b1b      	ldr	r3, [pc, #108]	@ (8002bb4 <HAL_RCC_OscConfig+0x274>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f003 0302 	and.w	r3, r3, #2
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d1f0      	bne.n	8002b34 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f003 0308 	and.w	r3, r3, #8
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d036      	beq.n	8002bcc <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	695b      	ldr	r3, [r3, #20]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d016      	beq.n	8002b94 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b66:	4b15      	ldr	r3, [pc, #84]	@ (8002bbc <HAL_RCC_OscConfig+0x27c>)
 8002b68:	2201      	movs	r2, #1
 8002b6a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b6c:	f7ff f87e 	bl	8001c6c <HAL_GetTick>
 8002b70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b72:	e008      	b.n	8002b86 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b74:	f7ff f87a 	bl	8001c6c <HAL_GetTick>
 8002b78:	4602      	mov	r2, r0
 8002b7a:	693b      	ldr	r3, [r7, #16]
 8002b7c:	1ad3      	subs	r3, r2, r3
 8002b7e:	2b02      	cmp	r3, #2
 8002b80:	d901      	bls.n	8002b86 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002b82:	2303      	movs	r3, #3
 8002b84:	e173      	b.n	8002e6e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b86:	4b0b      	ldr	r3, [pc, #44]	@ (8002bb4 <HAL_RCC_OscConfig+0x274>)
 8002b88:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b8a:	f003 0302 	and.w	r3, r3, #2
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d0f0      	beq.n	8002b74 <HAL_RCC_OscConfig+0x234>
 8002b92:	e01b      	b.n	8002bcc <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b94:	4b09      	ldr	r3, [pc, #36]	@ (8002bbc <HAL_RCC_OscConfig+0x27c>)
 8002b96:	2200      	movs	r2, #0
 8002b98:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b9a:	f7ff f867 	bl	8001c6c <HAL_GetTick>
 8002b9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ba0:	e00e      	b.n	8002bc0 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ba2:	f7ff f863 	bl	8001c6c <HAL_GetTick>
 8002ba6:	4602      	mov	r2, r0
 8002ba8:	693b      	ldr	r3, [r7, #16]
 8002baa:	1ad3      	subs	r3, r2, r3
 8002bac:	2b02      	cmp	r3, #2
 8002bae:	d907      	bls.n	8002bc0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002bb0:	2303      	movs	r3, #3
 8002bb2:	e15c      	b.n	8002e6e <HAL_RCC_OscConfig+0x52e>
 8002bb4:	40023800 	.word	0x40023800
 8002bb8:	42470000 	.word	0x42470000
 8002bbc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bc0:	4b8a      	ldr	r3, [pc, #552]	@ (8002dec <HAL_RCC_OscConfig+0x4ac>)
 8002bc2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002bc4:	f003 0302 	and.w	r3, r3, #2
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d1ea      	bne.n	8002ba2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f003 0304 	and.w	r3, r3, #4
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	f000 8097 	beq.w	8002d08 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002bde:	4b83      	ldr	r3, [pc, #524]	@ (8002dec <HAL_RCC_OscConfig+0x4ac>)
 8002be0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002be2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d10f      	bne.n	8002c0a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bea:	2300      	movs	r3, #0
 8002bec:	60bb      	str	r3, [r7, #8]
 8002bee:	4b7f      	ldr	r3, [pc, #508]	@ (8002dec <HAL_RCC_OscConfig+0x4ac>)
 8002bf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bf2:	4a7e      	ldr	r2, [pc, #504]	@ (8002dec <HAL_RCC_OscConfig+0x4ac>)
 8002bf4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002bf8:	6413      	str	r3, [r2, #64]	@ 0x40
 8002bfa:	4b7c      	ldr	r3, [pc, #496]	@ (8002dec <HAL_RCC_OscConfig+0x4ac>)
 8002bfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bfe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c02:	60bb      	str	r3, [r7, #8]
 8002c04:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c06:	2301      	movs	r3, #1
 8002c08:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c0a:	4b79      	ldr	r3, [pc, #484]	@ (8002df0 <HAL_RCC_OscConfig+0x4b0>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d118      	bne.n	8002c48 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c16:	4b76      	ldr	r3, [pc, #472]	@ (8002df0 <HAL_RCC_OscConfig+0x4b0>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4a75      	ldr	r2, [pc, #468]	@ (8002df0 <HAL_RCC_OscConfig+0x4b0>)
 8002c1c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c20:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c22:	f7ff f823 	bl	8001c6c <HAL_GetTick>
 8002c26:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c28:	e008      	b.n	8002c3c <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c2a:	f7ff f81f 	bl	8001c6c <HAL_GetTick>
 8002c2e:	4602      	mov	r2, r0
 8002c30:	693b      	ldr	r3, [r7, #16]
 8002c32:	1ad3      	subs	r3, r2, r3
 8002c34:	2b02      	cmp	r3, #2
 8002c36:	d901      	bls.n	8002c3c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002c38:	2303      	movs	r3, #3
 8002c3a:	e118      	b.n	8002e6e <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c3c:	4b6c      	ldr	r3, [pc, #432]	@ (8002df0 <HAL_RCC_OscConfig+0x4b0>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d0f0      	beq.n	8002c2a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	689b      	ldr	r3, [r3, #8]
 8002c4c:	2b01      	cmp	r3, #1
 8002c4e:	d106      	bne.n	8002c5e <HAL_RCC_OscConfig+0x31e>
 8002c50:	4b66      	ldr	r3, [pc, #408]	@ (8002dec <HAL_RCC_OscConfig+0x4ac>)
 8002c52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c54:	4a65      	ldr	r2, [pc, #404]	@ (8002dec <HAL_RCC_OscConfig+0x4ac>)
 8002c56:	f043 0301 	orr.w	r3, r3, #1
 8002c5a:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c5c:	e01c      	b.n	8002c98 <HAL_RCC_OscConfig+0x358>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	689b      	ldr	r3, [r3, #8]
 8002c62:	2b05      	cmp	r3, #5
 8002c64:	d10c      	bne.n	8002c80 <HAL_RCC_OscConfig+0x340>
 8002c66:	4b61      	ldr	r3, [pc, #388]	@ (8002dec <HAL_RCC_OscConfig+0x4ac>)
 8002c68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c6a:	4a60      	ldr	r2, [pc, #384]	@ (8002dec <HAL_RCC_OscConfig+0x4ac>)
 8002c6c:	f043 0304 	orr.w	r3, r3, #4
 8002c70:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c72:	4b5e      	ldr	r3, [pc, #376]	@ (8002dec <HAL_RCC_OscConfig+0x4ac>)
 8002c74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c76:	4a5d      	ldr	r2, [pc, #372]	@ (8002dec <HAL_RCC_OscConfig+0x4ac>)
 8002c78:	f043 0301 	orr.w	r3, r3, #1
 8002c7c:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c7e:	e00b      	b.n	8002c98 <HAL_RCC_OscConfig+0x358>
 8002c80:	4b5a      	ldr	r3, [pc, #360]	@ (8002dec <HAL_RCC_OscConfig+0x4ac>)
 8002c82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c84:	4a59      	ldr	r2, [pc, #356]	@ (8002dec <HAL_RCC_OscConfig+0x4ac>)
 8002c86:	f023 0301 	bic.w	r3, r3, #1
 8002c8a:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c8c:	4b57      	ldr	r3, [pc, #348]	@ (8002dec <HAL_RCC_OscConfig+0x4ac>)
 8002c8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c90:	4a56      	ldr	r2, [pc, #344]	@ (8002dec <HAL_RCC_OscConfig+0x4ac>)
 8002c92:	f023 0304 	bic.w	r3, r3, #4
 8002c96:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	689b      	ldr	r3, [r3, #8]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d015      	beq.n	8002ccc <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ca0:	f7fe ffe4 	bl	8001c6c <HAL_GetTick>
 8002ca4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ca6:	e00a      	b.n	8002cbe <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ca8:	f7fe ffe0 	bl	8001c6c <HAL_GetTick>
 8002cac:	4602      	mov	r2, r0
 8002cae:	693b      	ldr	r3, [r7, #16]
 8002cb0:	1ad3      	subs	r3, r2, r3
 8002cb2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d901      	bls.n	8002cbe <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002cba:	2303      	movs	r3, #3
 8002cbc:	e0d7      	b.n	8002e6e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cbe:	4b4b      	ldr	r3, [pc, #300]	@ (8002dec <HAL_RCC_OscConfig+0x4ac>)
 8002cc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cc2:	f003 0302 	and.w	r3, r3, #2
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d0ee      	beq.n	8002ca8 <HAL_RCC_OscConfig+0x368>
 8002cca:	e014      	b.n	8002cf6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ccc:	f7fe ffce 	bl	8001c6c <HAL_GetTick>
 8002cd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cd2:	e00a      	b.n	8002cea <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cd4:	f7fe ffca 	bl	8001c6c <HAL_GetTick>
 8002cd8:	4602      	mov	r2, r0
 8002cda:	693b      	ldr	r3, [r7, #16]
 8002cdc:	1ad3      	subs	r3, r2, r3
 8002cde:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d901      	bls.n	8002cea <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002ce6:	2303      	movs	r3, #3
 8002ce8:	e0c1      	b.n	8002e6e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cea:	4b40      	ldr	r3, [pc, #256]	@ (8002dec <HAL_RCC_OscConfig+0x4ac>)
 8002cec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cee:	f003 0302 	and.w	r3, r3, #2
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d1ee      	bne.n	8002cd4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002cf6:	7dfb      	ldrb	r3, [r7, #23]
 8002cf8:	2b01      	cmp	r3, #1
 8002cfa:	d105      	bne.n	8002d08 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cfc:	4b3b      	ldr	r3, [pc, #236]	@ (8002dec <HAL_RCC_OscConfig+0x4ac>)
 8002cfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d00:	4a3a      	ldr	r2, [pc, #232]	@ (8002dec <HAL_RCC_OscConfig+0x4ac>)
 8002d02:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002d06:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	699b      	ldr	r3, [r3, #24]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	f000 80ad 	beq.w	8002e6c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002d12:	4b36      	ldr	r3, [pc, #216]	@ (8002dec <HAL_RCC_OscConfig+0x4ac>)
 8002d14:	689b      	ldr	r3, [r3, #8]
 8002d16:	f003 030c 	and.w	r3, r3, #12
 8002d1a:	2b08      	cmp	r3, #8
 8002d1c:	d060      	beq.n	8002de0 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	699b      	ldr	r3, [r3, #24]
 8002d22:	2b02      	cmp	r3, #2
 8002d24:	d145      	bne.n	8002db2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d26:	4b33      	ldr	r3, [pc, #204]	@ (8002df4 <HAL_RCC_OscConfig+0x4b4>)
 8002d28:	2200      	movs	r2, #0
 8002d2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d2c:	f7fe ff9e 	bl	8001c6c <HAL_GetTick>
 8002d30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d32:	e008      	b.n	8002d46 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d34:	f7fe ff9a 	bl	8001c6c <HAL_GetTick>
 8002d38:	4602      	mov	r2, r0
 8002d3a:	693b      	ldr	r3, [r7, #16]
 8002d3c:	1ad3      	subs	r3, r2, r3
 8002d3e:	2b02      	cmp	r3, #2
 8002d40:	d901      	bls.n	8002d46 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002d42:	2303      	movs	r3, #3
 8002d44:	e093      	b.n	8002e6e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d46:	4b29      	ldr	r3, [pc, #164]	@ (8002dec <HAL_RCC_OscConfig+0x4ac>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d1f0      	bne.n	8002d34 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	69da      	ldr	r2, [r3, #28]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6a1b      	ldr	r3, [r3, #32]
 8002d5a:	431a      	orrs	r2, r3
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d60:	019b      	lsls	r3, r3, #6
 8002d62:	431a      	orrs	r2, r3
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d68:	085b      	lsrs	r3, r3, #1
 8002d6a:	3b01      	subs	r3, #1
 8002d6c:	041b      	lsls	r3, r3, #16
 8002d6e:	431a      	orrs	r2, r3
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d74:	061b      	lsls	r3, r3, #24
 8002d76:	431a      	orrs	r2, r3
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d7c:	071b      	lsls	r3, r3, #28
 8002d7e:	491b      	ldr	r1, [pc, #108]	@ (8002dec <HAL_RCC_OscConfig+0x4ac>)
 8002d80:	4313      	orrs	r3, r2
 8002d82:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d84:	4b1b      	ldr	r3, [pc, #108]	@ (8002df4 <HAL_RCC_OscConfig+0x4b4>)
 8002d86:	2201      	movs	r2, #1
 8002d88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d8a:	f7fe ff6f 	bl	8001c6c <HAL_GetTick>
 8002d8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d90:	e008      	b.n	8002da4 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d92:	f7fe ff6b 	bl	8001c6c <HAL_GetTick>
 8002d96:	4602      	mov	r2, r0
 8002d98:	693b      	ldr	r3, [r7, #16]
 8002d9a:	1ad3      	subs	r3, r2, r3
 8002d9c:	2b02      	cmp	r3, #2
 8002d9e:	d901      	bls.n	8002da4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002da0:	2303      	movs	r3, #3
 8002da2:	e064      	b.n	8002e6e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002da4:	4b11      	ldr	r3, [pc, #68]	@ (8002dec <HAL_RCC_OscConfig+0x4ac>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d0f0      	beq.n	8002d92 <HAL_RCC_OscConfig+0x452>
 8002db0:	e05c      	b.n	8002e6c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002db2:	4b10      	ldr	r3, [pc, #64]	@ (8002df4 <HAL_RCC_OscConfig+0x4b4>)
 8002db4:	2200      	movs	r2, #0
 8002db6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002db8:	f7fe ff58 	bl	8001c6c <HAL_GetTick>
 8002dbc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dbe:	e008      	b.n	8002dd2 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dc0:	f7fe ff54 	bl	8001c6c <HAL_GetTick>
 8002dc4:	4602      	mov	r2, r0
 8002dc6:	693b      	ldr	r3, [r7, #16]
 8002dc8:	1ad3      	subs	r3, r2, r3
 8002dca:	2b02      	cmp	r3, #2
 8002dcc:	d901      	bls.n	8002dd2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002dce:	2303      	movs	r3, #3
 8002dd0:	e04d      	b.n	8002e6e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dd2:	4b06      	ldr	r3, [pc, #24]	@ (8002dec <HAL_RCC_OscConfig+0x4ac>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d1f0      	bne.n	8002dc0 <HAL_RCC_OscConfig+0x480>
 8002dde:	e045      	b.n	8002e6c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	699b      	ldr	r3, [r3, #24]
 8002de4:	2b01      	cmp	r3, #1
 8002de6:	d107      	bne.n	8002df8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002de8:	2301      	movs	r3, #1
 8002dea:	e040      	b.n	8002e6e <HAL_RCC_OscConfig+0x52e>
 8002dec:	40023800 	.word	0x40023800
 8002df0:	40007000 	.word	0x40007000
 8002df4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002df8:	4b1f      	ldr	r3, [pc, #124]	@ (8002e78 <HAL_RCC_OscConfig+0x538>)
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	699b      	ldr	r3, [r3, #24]
 8002e02:	2b01      	cmp	r3, #1
 8002e04:	d030      	beq.n	8002e68 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e10:	429a      	cmp	r2, r3
 8002e12:	d129      	bne.n	8002e68 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e1e:	429a      	cmp	r2, r3
 8002e20:	d122      	bne.n	8002e68 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e22:	68fa      	ldr	r2, [r7, #12]
 8002e24:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002e28:	4013      	ands	r3, r2
 8002e2a:	687a      	ldr	r2, [r7, #4]
 8002e2c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002e2e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d119      	bne.n	8002e68 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e3e:	085b      	lsrs	r3, r3, #1
 8002e40:	3b01      	subs	r3, #1
 8002e42:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e44:	429a      	cmp	r2, r3
 8002e46:	d10f      	bne.n	8002e68 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e52:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e54:	429a      	cmp	r2, r3
 8002e56:	d107      	bne.n	8002e68 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e62:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e64:	429a      	cmp	r2, r3
 8002e66:	d001      	beq.n	8002e6c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002e68:	2301      	movs	r3, #1
 8002e6a:	e000      	b.n	8002e6e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002e6c:	2300      	movs	r3, #0
}
 8002e6e:	4618      	mov	r0, r3
 8002e70:	3718      	adds	r7, #24
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd80      	pop	{r7, pc}
 8002e76:	bf00      	nop
 8002e78:	40023800 	.word	0x40023800

08002e7c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b082      	sub	sp, #8
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d101      	bne.n	8002e8e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	e041      	b.n	8002f12 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e94:	b2db      	uxtb	r3, r3
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d106      	bne.n	8002ea8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002ea2:	6878      	ldr	r0, [r7, #4]
 8002ea4:	f7fe fcea 	bl	800187c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2202      	movs	r2, #2
 8002eac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681a      	ldr	r2, [r3, #0]
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	3304      	adds	r3, #4
 8002eb8:	4619      	mov	r1, r3
 8002eba:	4610      	mov	r0, r2
 8002ebc:	f000 fc90 	bl	80037e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2201      	movs	r2, #1
 8002ecc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2201      	movs	r2, #1
 8002edc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2201      	movs	r2, #1
 8002ee4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2201      	movs	r2, #1
 8002eec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2201      	movs	r2, #1
 8002ef4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2201      	movs	r2, #1
 8002efc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2201      	movs	r2, #1
 8002f04:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2201      	movs	r2, #1
 8002f0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002f10:	2300      	movs	r3, #0
}
 8002f12:	4618      	mov	r0, r3
 8002f14:	3708      	adds	r7, #8
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd80      	pop	{r7, pc}
	...

08002f1c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b085      	sub	sp, #20
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f2a:	b2db      	uxtb	r3, r3
 8002f2c:	2b01      	cmp	r3, #1
 8002f2e:	d001      	beq.n	8002f34 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002f30:	2301      	movs	r3, #1
 8002f32:	e04e      	b.n	8002fd2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2202      	movs	r2, #2
 8002f38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	68da      	ldr	r2, [r3, #12]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f042 0201 	orr.w	r2, r2, #1
 8002f4a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a23      	ldr	r2, [pc, #140]	@ (8002fe0 <HAL_TIM_Base_Start_IT+0xc4>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d022      	beq.n	8002f9c <HAL_TIM_Base_Start_IT+0x80>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f5e:	d01d      	beq.n	8002f9c <HAL_TIM_Base_Start_IT+0x80>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a1f      	ldr	r2, [pc, #124]	@ (8002fe4 <HAL_TIM_Base_Start_IT+0xc8>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d018      	beq.n	8002f9c <HAL_TIM_Base_Start_IT+0x80>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a1e      	ldr	r2, [pc, #120]	@ (8002fe8 <HAL_TIM_Base_Start_IT+0xcc>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d013      	beq.n	8002f9c <HAL_TIM_Base_Start_IT+0x80>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a1c      	ldr	r2, [pc, #112]	@ (8002fec <HAL_TIM_Base_Start_IT+0xd0>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d00e      	beq.n	8002f9c <HAL_TIM_Base_Start_IT+0x80>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a1b      	ldr	r2, [pc, #108]	@ (8002ff0 <HAL_TIM_Base_Start_IT+0xd4>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d009      	beq.n	8002f9c <HAL_TIM_Base_Start_IT+0x80>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a19      	ldr	r2, [pc, #100]	@ (8002ff4 <HAL_TIM_Base_Start_IT+0xd8>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d004      	beq.n	8002f9c <HAL_TIM_Base_Start_IT+0x80>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a18      	ldr	r2, [pc, #96]	@ (8002ff8 <HAL_TIM_Base_Start_IT+0xdc>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d111      	bne.n	8002fc0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	689b      	ldr	r3, [r3, #8]
 8002fa2:	f003 0307 	and.w	r3, r3, #7
 8002fa6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	2b06      	cmp	r3, #6
 8002fac:	d010      	beq.n	8002fd0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	681a      	ldr	r2, [r3, #0]
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f042 0201 	orr.w	r2, r2, #1
 8002fbc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fbe:	e007      	b.n	8002fd0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	681a      	ldr	r2, [r3, #0]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f042 0201 	orr.w	r2, r2, #1
 8002fce:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002fd0:	2300      	movs	r3, #0
}
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	3714      	adds	r7, #20
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fdc:	4770      	bx	lr
 8002fde:	bf00      	nop
 8002fe0:	40010000 	.word	0x40010000
 8002fe4:	40000400 	.word	0x40000400
 8002fe8:	40000800 	.word	0x40000800
 8002fec:	40000c00 	.word	0x40000c00
 8002ff0:	40010400 	.word	0x40010400
 8002ff4:	40014000 	.word	0x40014000
 8002ff8:	40001800 	.word	0x40001800

08002ffc <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	b083      	sub	sp, #12
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	68da      	ldr	r2, [r3, #12]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f022 0201 	bic.w	r2, r2, #1
 8003012:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	6a1a      	ldr	r2, [r3, #32]
 800301a:	f241 1311 	movw	r3, #4369	@ 0x1111
 800301e:	4013      	ands	r3, r2
 8003020:	2b00      	cmp	r3, #0
 8003022:	d10f      	bne.n	8003044 <HAL_TIM_Base_Stop_IT+0x48>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	6a1a      	ldr	r2, [r3, #32]
 800302a:	f240 4344 	movw	r3, #1092	@ 0x444
 800302e:	4013      	ands	r3, r2
 8003030:	2b00      	cmp	r3, #0
 8003032:	d107      	bne.n	8003044 <HAL_TIM_Base_Stop_IT+0x48>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	681a      	ldr	r2, [r3, #0]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f022 0201 	bic.w	r2, r2, #1
 8003042:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2201      	movs	r2, #1
 8003048:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 800304c:	2300      	movs	r3, #0
}
 800304e:	4618      	mov	r0, r3
 8003050:	370c      	adds	r7, #12
 8003052:	46bd      	mov	sp, r7
 8003054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003058:	4770      	bx	lr

0800305a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800305a:	b580      	push	{r7, lr}
 800305c:	b082      	sub	sp, #8
 800305e:	af00      	add	r7, sp, #0
 8003060:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d101      	bne.n	800306c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003068:	2301      	movs	r3, #1
 800306a:	e041      	b.n	80030f0 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003072:	b2db      	uxtb	r3, r3
 8003074:	2b00      	cmp	r3, #0
 8003076:	d106      	bne.n	8003086 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2200      	movs	r2, #0
 800307c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003080:	6878      	ldr	r0, [r7, #4]
 8003082:	f000 f839 	bl	80030f8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2202      	movs	r2, #2
 800308a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681a      	ldr	r2, [r3, #0]
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	3304      	adds	r3, #4
 8003096:	4619      	mov	r1, r3
 8003098:	4610      	mov	r0, r2
 800309a:	f000 fba1 	bl	80037e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2201      	movs	r2, #1
 80030a2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2201      	movs	r2, #1
 80030aa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2201      	movs	r2, #1
 80030b2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2201      	movs	r2, #1
 80030ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2201      	movs	r2, #1
 80030c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2201      	movs	r2, #1
 80030ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2201      	movs	r2, #1
 80030d2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2201      	movs	r2, #1
 80030da:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2201      	movs	r2, #1
 80030e2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2201      	movs	r2, #1
 80030ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80030ee:	2300      	movs	r3, #0
}
 80030f0:	4618      	mov	r0, r3
 80030f2:	3708      	adds	r7, #8
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bd80      	pop	{r7, pc}

080030f8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80030f8:	b480      	push	{r7}
 80030fa:	b083      	sub	sp, #12
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003100:	bf00      	nop
 8003102:	370c      	adds	r7, #12
 8003104:	46bd      	mov	sp, r7
 8003106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310a:	4770      	bx	lr

0800310c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b084      	sub	sp, #16
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
 8003114:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d109      	bne.n	8003130 <HAL_TIM_PWM_Start+0x24>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003122:	b2db      	uxtb	r3, r3
 8003124:	2b01      	cmp	r3, #1
 8003126:	bf14      	ite	ne
 8003128:	2301      	movne	r3, #1
 800312a:	2300      	moveq	r3, #0
 800312c:	b2db      	uxtb	r3, r3
 800312e:	e022      	b.n	8003176 <HAL_TIM_PWM_Start+0x6a>
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	2b04      	cmp	r3, #4
 8003134:	d109      	bne.n	800314a <HAL_TIM_PWM_Start+0x3e>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800313c:	b2db      	uxtb	r3, r3
 800313e:	2b01      	cmp	r3, #1
 8003140:	bf14      	ite	ne
 8003142:	2301      	movne	r3, #1
 8003144:	2300      	moveq	r3, #0
 8003146:	b2db      	uxtb	r3, r3
 8003148:	e015      	b.n	8003176 <HAL_TIM_PWM_Start+0x6a>
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	2b08      	cmp	r3, #8
 800314e:	d109      	bne.n	8003164 <HAL_TIM_PWM_Start+0x58>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003156:	b2db      	uxtb	r3, r3
 8003158:	2b01      	cmp	r3, #1
 800315a:	bf14      	ite	ne
 800315c:	2301      	movne	r3, #1
 800315e:	2300      	moveq	r3, #0
 8003160:	b2db      	uxtb	r3, r3
 8003162:	e008      	b.n	8003176 <HAL_TIM_PWM_Start+0x6a>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800316a:	b2db      	uxtb	r3, r3
 800316c:	2b01      	cmp	r3, #1
 800316e:	bf14      	ite	ne
 8003170:	2301      	movne	r3, #1
 8003172:	2300      	moveq	r3, #0
 8003174:	b2db      	uxtb	r3, r3
 8003176:	2b00      	cmp	r3, #0
 8003178:	d001      	beq.n	800317e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800317a:	2301      	movs	r3, #1
 800317c:	e07c      	b.n	8003278 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d104      	bne.n	800318e <HAL_TIM_PWM_Start+0x82>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2202      	movs	r2, #2
 8003188:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800318c:	e013      	b.n	80031b6 <HAL_TIM_PWM_Start+0xaa>
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	2b04      	cmp	r3, #4
 8003192:	d104      	bne.n	800319e <HAL_TIM_PWM_Start+0x92>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2202      	movs	r2, #2
 8003198:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800319c:	e00b      	b.n	80031b6 <HAL_TIM_PWM_Start+0xaa>
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	2b08      	cmp	r3, #8
 80031a2:	d104      	bne.n	80031ae <HAL_TIM_PWM_Start+0xa2>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2202      	movs	r2, #2
 80031a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80031ac:	e003      	b.n	80031b6 <HAL_TIM_PWM_Start+0xaa>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2202      	movs	r2, #2
 80031b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	2201      	movs	r2, #1
 80031bc:	6839      	ldr	r1, [r7, #0]
 80031be:	4618      	mov	r0, r3
 80031c0:	f000 fe04 	bl	8003dcc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a2d      	ldr	r2, [pc, #180]	@ (8003280 <HAL_TIM_PWM_Start+0x174>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d004      	beq.n	80031d8 <HAL_TIM_PWM_Start+0xcc>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4a2c      	ldr	r2, [pc, #176]	@ (8003284 <HAL_TIM_PWM_Start+0x178>)
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d101      	bne.n	80031dc <HAL_TIM_PWM_Start+0xd0>
 80031d8:	2301      	movs	r3, #1
 80031da:	e000      	b.n	80031de <HAL_TIM_PWM_Start+0xd2>
 80031dc:	2300      	movs	r3, #0
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d007      	beq.n	80031f2 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80031f0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4a22      	ldr	r2, [pc, #136]	@ (8003280 <HAL_TIM_PWM_Start+0x174>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d022      	beq.n	8003242 <HAL_TIM_PWM_Start+0x136>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003204:	d01d      	beq.n	8003242 <HAL_TIM_PWM_Start+0x136>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4a1f      	ldr	r2, [pc, #124]	@ (8003288 <HAL_TIM_PWM_Start+0x17c>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d018      	beq.n	8003242 <HAL_TIM_PWM_Start+0x136>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a1d      	ldr	r2, [pc, #116]	@ (800328c <HAL_TIM_PWM_Start+0x180>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d013      	beq.n	8003242 <HAL_TIM_PWM_Start+0x136>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a1c      	ldr	r2, [pc, #112]	@ (8003290 <HAL_TIM_PWM_Start+0x184>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d00e      	beq.n	8003242 <HAL_TIM_PWM_Start+0x136>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a16      	ldr	r2, [pc, #88]	@ (8003284 <HAL_TIM_PWM_Start+0x178>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d009      	beq.n	8003242 <HAL_TIM_PWM_Start+0x136>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4a18      	ldr	r2, [pc, #96]	@ (8003294 <HAL_TIM_PWM_Start+0x188>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d004      	beq.n	8003242 <HAL_TIM_PWM_Start+0x136>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a16      	ldr	r2, [pc, #88]	@ (8003298 <HAL_TIM_PWM_Start+0x18c>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d111      	bne.n	8003266 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	689b      	ldr	r3, [r3, #8]
 8003248:	f003 0307 	and.w	r3, r3, #7
 800324c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	2b06      	cmp	r3, #6
 8003252:	d010      	beq.n	8003276 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	681a      	ldr	r2, [r3, #0]
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f042 0201 	orr.w	r2, r2, #1
 8003262:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003264:	e007      	b.n	8003276 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	681a      	ldr	r2, [r3, #0]
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f042 0201 	orr.w	r2, r2, #1
 8003274:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003276:	2300      	movs	r3, #0
}
 8003278:	4618      	mov	r0, r3
 800327a:	3710      	adds	r7, #16
 800327c:	46bd      	mov	sp, r7
 800327e:	bd80      	pop	{r7, pc}
 8003280:	40010000 	.word	0x40010000
 8003284:	40010400 	.word	0x40010400
 8003288:	40000400 	.word	0x40000400
 800328c:	40000800 	.word	0x40000800
 8003290:	40000c00 	.word	0x40000c00
 8003294:	40014000 	.word	0x40014000
 8003298:	40001800 	.word	0x40001800

0800329c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b084      	sub	sp, #16
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	68db      	ldr	r3, [r3, #12]
 80032aa:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	691b      	ldr	r3, [r3, #16]
 80032b2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80032b4:	68bb      	ldr	r3, [r7, #8]
 80032b6:	f003 0302 	and.w	r3, r3, #2
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d020      	beq.n	8003300 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	f003 0302 	and.w	r3, r3, #2
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d01b      	beq.n	8003300 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f06f 0202 	mvn.w	r2, #2
 80032d0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2201      	movs	r2, #1
 80032d6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	699b      	ldr	r3, [r3, #24]
 80032de:	f003 0303 	and.w	r3, r3, #3
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d003      	beq.n	80032ee <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80032e6:	6878      	ldr	r0, [r7, #4]
 80032e8:	f000 fa5b 	bl	80037a2 <HAL_TIM_IC_CaptureCallback>
 80032ec:	e005      	b.n	80032fa <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80032ee:	6878      	ldr	r0, [r7, #4]
 80032f0:	f000 fa4d 	bl	800378e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032f4:	6878      	ldr	r0, [r7, #4]
 80032f6:	f000 fa5e 	bl	80037b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2200      	movs	r2, #0
 80032fe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003300:	68bb      	ldr	r3, [r7, #8]
 8003302:	f003 0304 	and.w	r3, r3, #4
 8003306:	2b00      	cmp	r3, #0
 8003308:	d020      	beq.n	800334c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	f003 0304 	and.w	r3, r3, #4
 8003310:	2b00      	cmp	r3, #0
 8003312:	d01b      	beq.n	800334c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f06f 0204 	mvn.w	r2, #4
 800331c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2202      	movs	r2, #2
 8003322:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	699b      	ldr	r3, [r3, #24]
 800332a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800332e:	2b00      	cmp	r3, #0
 8003330:	d003      	beq.n	800333a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003332:	6878      	ldr	r0, [r7, #4]
 8003334:	f000 fa35 	bl	80037a2 <HAL_TIM_IC_CaptureCallback>
 8003338:	e005      	b.n	8003346 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800333a:	6878      	ldr	r0, [r7, #4]
 800333c:	f000 fa27 	bl	800378e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003340:	6878      	ldr	r0, [r7, #4]
 8003342:	f000 fa38 	bl	80037b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2200      	movs	r2, #0
 800334a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800334c:	68bb      	ldr	r3, [r7, #8]
 800334e:	f003 0308 	and.w	r3, r3, #8
 8003352:	2b00      	cmp	r3, #0
 8003354:	d020      	beq.n	8003398 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	f003 0308 	and.w	r3, r3, #8
 800335c:	2b00      	cmp	r3, #0
 800335e:	d01b      	beq.n	8003398 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f06f 0208 	mvn.w	r2, #8
 8003368:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2204      	movs	r2, #4
 800336e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	69db      	ldr	r3, [r3, #28]
 8003376:	f003 0303 	and.w	r3, r3, #3
 800337a:	2b00      	cmp	r3, #0
 800337c:	d003      	beq.n	8003386 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800337e:	6878      	ldr	r0, [r7, #4]
 8003380:	f000 fa0f 	bl	80037a2 <HAL_TIM_IC_CaptureCallback>
 8003384:	e005      	b.n	8003392 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003386:	6878      	ldr	r0, [r7, #4]
 8003388:	f000 fa01 	bl	800378e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800338c:	6878      	ldr	r0, [r7, #4]
 800338e:	f000 fa12 	bl	80037b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2200      	movs	r2, #0
 8003396:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003398:	68bb      	ldr	r3, [r7, #8]
 800339a:	f003 0310 	and.w	r3, r3, #16
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d020      	beq.n	80033e4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	f003 0310 	and.w	r3, r3, #16
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d01b      	beq.n	80033e4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f06f 0210 	mvn.w	r2, #16
 80033b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2208      	movs	r2, #8
 80033ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	69db      	ldr	r3, [r3, #28]
 80033c2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d003      	beq.n	80033d2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033ca:	6878      	ldr	r0, [r7, #4]
 80033cc:	f000 f9e9 	bl	80037a2 <HAL_TIM_IC_CaptureCallback>
 80033d0:	e005      	b.n	80033de <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033d2:	6878      	ldr	r0, [r7, #4]
 80033d4:	f000 f9db 	bl	800378e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033d8:	6878      	ldr	r0, [r7, #4]
 80033da:	f000 f9ec 	bl	80037b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2200      	movs	r2, #0
 80033e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80033e4:	68bb      	ldr	r3, [r7, #8]
 80033e6:	f003 0301 	and.w	r3, r3, #1
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d00c      	beq.n	8003408 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	f003 0301 	and.w	r3, r3, #1
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d007      	beq.n	8003408 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f06f 0201 	mvn.w	r2, #1
 8003400:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003402:	6878      	ldr	r0, [r7, #4]
 8003404:	f7fe f9a4 	bl	8001750 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003408:	68bb      	ldr	r3, [r7, #8]
 800340a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800340e:	2b00      	cmp	r3, #0
 8003410:	d00c      	beq.n	800342c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003418:	2b00      	cmp	r3, #0
 800341a:	d007      	beq.n	800342c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003424:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003426:	6878      	ldr	r0, [r7, #4]
 8003428:	f000 fd7c 	bl	8003f24 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800342c:	68bb      	ldr	r3, [r7, #8]
 800342e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003432:	2b00      	cmp	r3, #0
 8003434:	d00c      	beq.n	8003450 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800343c:	2b00      	cmp	r3, #0
 800343e:	d007      	beq.n	8003450 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003448:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800344a:	6878      	ldr	r0, [r7, #4]
 800344c:	f000 f9bd 	bl	80037ca <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003450:	68bb      	ldr	r3, [r7, #8]
 8003452:	f003 0320 	and.w	r3, r3, #32
 8003456:	2b00      	cmp	r3, #0
 8003458:	d00c      	beq.n	8003474 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	f003 0320 	and.w	r3, r3, #32
 8003460:	2b00      	cmp	r3, #0
 8003462:	d007      	beq.n	8003474 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f06f 0220 	mvn.w	r2, #32
 800346c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800346e:	6878      	ldr	r0, [r7, #4]
 8003470:	f000 fd4e 	bl	8003f10 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003474:	bf00      	nop
 8003476:	3710      	adds	r7, #16
 8003478:	46bd      	mov	sp, r7
 800347a:	bd80      	pop	{r7, pc}

0800347c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b086      	sub	sp, #24
 8003480:	af00      	add	r7, sp, #0
 8003482:	60f8      	str	r0, [r7, #12]
 8003484:	60b9      	str	r1, [r7, #8]
 8003486:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003488:	2300      	movs	r3, #0
 800348a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003492:	2b01      	cmp	r3, #1
 8003494:	d101      	bne.n	800349a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003496:	2302      	movs	r3, #2
 8003498:	e0ae      	b.n	80035f8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	2201      	movs	r2, #1
 800349e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2b0c      	cmp	r3, #12
 80034a6:	f200 809f 	bhi.w	80035e8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80034aa:	a201      	add	r2, pc, #4	@ (adr r2, 80034b0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80034ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034b0:	080034e5 	.word	0x080034e5
 80034b4:	080035e9 	.word	0x080035e9
 80034b8:	080035e9 	.word	0x080035e9
 80034bc:	080035e9 	.word	0x080035e9
 80034c0:	08003525 	.word	0x08003525
 80034c4:	080035e9 	.word	0x080035e9
 80034c8:	080035e9 	.word	0x080035e9
 80034cc:	080035e9 	.word	0x080035e9
 80034d0:	08003567 	.word	0x08003567
 80034d4:	080035e9 	.word	0x080035e9
 80034d8:	080035e9 	.word	0x080035e9
 80034dc:	080035e9 	.word	0x080035e9
 80034e0:	080035a7 	.word	0x080035a7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	68b9      	ldr	r1, [r7, #8]
 80034ea:	4618      	mov	r0, r3
 80034ec:	f000 fa24 	bl	8003938 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	699a      	ldr	r2, [r3, #24]
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f042 0208 	orr.w	r2, r2, #8
 80034fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	699a      	ldr	r2, [r3, #24]
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f022 0204 	bic.w	r2, r2, #4
 800350e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	6999      	ldr	r1, [r3, #24]
 8003516:	68bb      	ldr	r3, [r7, #8]
 8003518:	691a      	ldr	r2, [r3, #16]
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	430a      	orrs	r2, r1
 8003520:	619a      	str	r2, [r3, #24]
      break;
 8003522:	e064      	b.n	80035ee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	68b9      	ldr	r1, [r7, #8]
 800352a:	4618      	mov	r0, r3
 800352c:	f000 fa74 	bl	8003a18 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	699a      	ldr	r2, [r3, #24]
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800353e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	699a      	ldr	r2, [r3, #24]
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800354e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	6999      	ldr	r1, [r3, #24]
 8003556:	68bb      	ldr	r3, [r7, #8]
 8003558:	691b      	ldr	r3, [r3, #16]
 800355a:	021a      	lsls	r2, r3, #8
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	430a      	orrs	r2, r1
 8003562:	619a      	str	r2, [r3, #24]
      break;
 8003564:	e043      	b.n	80035ee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	68b9      	ldr	r1, [r7, #8]
 800356c:	4618      	mov	r0, r3
 800356e:	f000 fac9 	bl	8003b04 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	69da      	ldr	r2, [r3, #28]
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f042 0208 	orr.w	r2, r2, #8
 8003580:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	69da      	ldr	r2, [r3, #28]
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f022 0204 	bic.w	r2, r2, #4
 8003590:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	69d9      	ldr	r1, [r3, #28]
 8003598:	68bb      	ldr	r3, [r7, #8]
 800359a:	691a      	ldr	r2, [r3, #16]
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	430a      	orrs	r2, r1
 80035a2:	61da      	str	r2, [r3, #28]
      break;
 80035a4:	e023      	b.n	80035ee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	68b9      	ldr	r1, [r7, #8]
 80035ac:	4618      	mov	r0, r3
 80035ae:	f000 fb1d 	bl	8003bec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	69da      	ldr	r2, [r3, #28]
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80035c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	69da      	ldr	r2, [r3, #28]
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80035d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	69d9      	ldr	r1, [r3, #28]
 80035d8:	68bb      	ldr	r3, [r7, #8]
 80035da:	691b      	ldr	r3, [r3, #16]
 80035dc:	021a      	lsls	r2, r3, #8
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	430a      	orrs	r2, r1
 80035e4:	61da      	str	r2, [r3, #28]
      break;
 80035e6:	e002      	b.n	80035ee <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80035e8:	2301      	movs	r3, #1
 80035ea:	75fb      	strb	r3, [r7, #23]
      break;
 80035ec:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	2200      	movs	r2, #0
 80035f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80035f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80035f8:	4618      	mov	r0, r3
 80035fa:	3718      	adds	r7, #24
 80035fc:	46bd      	mov	sp, r7
 80035fe:	bd80      	pop	{r7, pc}

08003600 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b084      	sub	sp, #16
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
 8003608:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800360a:	2300      	movs	r3, #0
 800360c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003614:	2b01      	cmp	r3, #1
 8003616:	d101      	bne.n	800361c <HAL_TIM_ConfigClockSource+0x1c>
 8003618:	2302      	movs	r3, #2
 800361a:	e0b4      	b.n	8003786 <HAL_TIM_ConfigClockSource+0x186>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2201      	movs	r2, #1
 8003620:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2202      	movs	r2, #2
 8003628:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	689b      	ldr	r3, [r3, #8]
 8003632:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800363a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800363c:	68bb      	ldr	r3, [r7, #8]
 800363e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003642:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	68ba      	ldr	r2, [r7, #8]
 800364a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003654:	d03e      	beq.n	80036d4 <HAL_TIM_ConfigClockSource+0xd4>
 8003656:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800365a:	f200 8087 	bhi.w	800376c <HAL_TIM_ConfigClockSource+0x16c>
 800365e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003662:	f000 8086 	beq.w	8003772 <HAL_TIM_ConfigClockSource+0x172>
 8003666:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800366a:	d87f      	bhi.n	800376c <HAL_TIM_ConfigClockSource+0x16c>
 800366c:	2b70      	cmp	r3, #112	@ 0x70
 800366e:	d01a      	beq.n	80036a6 <HAL_TIM_ConfigClockSource+0xa6>
 8003670:	2b70      	cmp	r3, #112	@ 0x70
 8003672:	d87b      	bhi.n	800376c <HAL_TIM_ConfigClockSource+0x16c>
 8003674:	2b60      	cmp	r3, #96	@ 0x60
 8003676:	d050      	beq.n	800371a <HAL_TIM_ConfigClockSource+0x11a>
 8003678:	2b60      	cmp	r3, #96	@ 0x60
 800367a:	d877      	bhi.n	800376c <HAL_TIM_ConfigClockSource+0x16c>
 800367c:	2b50      	cmp	r3, #80	@ 0x50
 800367e:	d03c      	beq.n	80036fa <HAL_TIM_ConfigClockSource+0xfa>
 8003680:	2b50      	cmp	r3, #80	@ 0x50
 8003682:	d873      	bhi.n	800376c <HAL_TIM_ConfigClockSource+0x16c>
 8003684:	2b40      	cmp	r3, #64	@ 0x40
 8003686:	d058      	beq.n	800373a <HAL_TIM_ConfigClockSource+0x13a>
 8003688:	2b40      	cmp	r3, #64	@ 0x40
 800368a:	d86f      	bhi.n	800376c <HAL_TIM_ConfigClockSource+0x16c>
 800368c:	2b30      	cmp	r3, #48	@ 0x30
 800368e:	d064      	beq.n	800375a <HAL_TIM_ConfigClockSource+0x15a>
 8003690:	2b30      	cmp	r3, #48	@ 0x30
 8003692:	d86b      	bhi.n	800376c <HAL_TIM_ConfigClockSource+0x16c>
 8003694:	2b20      	cmp	r3, #32
 8003696:	d060      	beq.n	800375a <HAL_TIM_ConfigClockSource+0x15a>
 8003698:	2b20      	cmp	r3, #32
 800369a:	d867      	bhi.n	800376c <HAL_TIM_ConfigClockSource+0x16c>
 800369c:	2b00      	cmp	r3, #0
 800369e:	d05c      	beq.n	800375a <HAL_TIM_ConfigClockSource+0x15a>
 80036a0:	2b10      	cmp	r3, #16
 80036a2:	d05a      	beq.n	800375a <HAL_TIM_ConfigClockSource+0x15a>
 80036a4:	e062      	b.n	800376c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80036b6:	f000 fb69 	bl	8003d8c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	689b      	ldr	r3, [r3, #8]
 80036c0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80036c2:	68bb      	ldr	r3, [r7, #8]
 80036c4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80036c8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	68ba      	ldr	r2, [r7, #8]
 80036d0:	609a      	str	r2, [r3, #8]
      break;
 80036d2:	e04f      	b.n	8003774 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80036e4:	f000 fb52 	bl	8003d8c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	689a      	ldr	r2, [r3, #8]
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80036f6:	609a      	str	r2, [r3, #8]
      break;
 80036f8:	e03c      	b.n	8003774 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003706:	461a      	mov	r2, r3
 8003708:	f000 fac6 	bl	8003c98 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	2150      	movs	r1, #80	@ 0x50
 8003712:	4618      	mov	r0, r3
 8003714:	f000 fb1f 	bl	8003d56 <TIM_ITRx_SetConfig>
      break;
 8003718:	e02c      	b.n	8003774 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003726:	461a      	mov	r2, r3
 8003728:	f000 fae5 	bl	8003cf6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	2160      	movs	r1, #96	@ 0x60
 8003732:	4618      	mov	r0, r3
 8003734:	f000 fb0f 	bl	8003d56 <TIM_ITRx_SetConfig>
      break;
 8003738:	e01c      	b.n	8003774 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003746:	461a      	mov	r2, r3
 8003748:	f000 faa6 	bl	8003c98 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	2140      	movs	r1, #64	@ 0x40
 8003752:	4618      	mov	r0, r3
 8003754:	f000 faff 	bl	8003d56 <TIM_ITRx_SetConfig>
      break;
 8003758:	e00c      	b.n	8003774 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681a      	ldr	r2, [r3, #0]
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4619      	mov	r1, r3
 8003764:	4610      	mov	r0, r2
 8003766:	f000 faf6 	bl	8003d56 <TIM_ITRx_SetConfig>
      break;
 800376a:	e003      	b.n	8003774 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800376c:	2301      	movs	r3, #1
 800376e:	73fb      	strb	r3, [r7, #15]
      break;
 8003770:	e000      	b.n	8003774 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003772:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2201      	movs	r2, #1
 8003778:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2200      	movs	r2, #0
 8003780:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003784:	7bfb      	ldrb	r3, [r7, #15]
}
 8003786:	4618      	mov	r0, r3
 8003788:	3710      	adds	r7, #16
 800378a:	46bd      	mov	sp, r7
 800378c:	bd80      	pop	{r7, pc}

0800378e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800378e:	b480      	push	{r7}
 8003790:	b083      	sub	sp, #12
 8003792:	af00      	add	r7, sp, #0
 8003794:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003796:	bf00      	nop
 8003798:	370c      	adds	r7, #12
 800379a:	46bd      	mov	sp, r7
 800379c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a0:	4770      	bx	lr

080037a2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80037a2:	b480      	push	{r7}
 80037a4:	b083      	sub	sp, #12
 80037a6:	af00      	add	r7, sp, #0
 80037a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80037aa:	bf00      	nop
 80037ac:	370c      	adds	r7, #12
 80037ae:	46bd      	mov	sp, r7
 80037b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b4:	4770      	bx	lr

080037b6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80037b6:	b480      	push	{r7}
 80037b8:	b083      	sub	sp, #12
 80037ba:	af00      	add	r7, sp, #0
 80037bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80037be:	bf00      	nop
 80037c0:	370c      	adds	r7, #12
 80037c2:	46bd      	mov	sp, r7
 80037c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c8:	4770      	bx	lr

080037ca <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80037ca:	b480      	push	{r7}
 80037cc:	b083      	sub	sp, #12
 80037ce:	af00      	add	r7, sp, #0
 80037d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80037d2:	bf00      	nop
 80037d4:	370c      	adds	r7, #12
 80037d6:	46bd      	mov	sp, r7
 80037d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037dc:	4770      	bx	lr
	...

080037e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80037e0:	b480      	push	{r7}
 80037e2:	b085      	sub	sp, #20
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
 80037e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	4a46      	ldr	r2, [pc, #280]	@ (800390c <TIM_Base_SetConfig+0x12c>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d013      	beq.n	8003820 <TIM_Base_SetConfig+0x40>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80037fe:	d00f      	beq.n	8003820 <TIM_Base_SetConfig+0x40>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	4a43      	ldr	r2, [pc, #268]	@ (8003910 <TIM_Base_SetConfig+0x130>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d00b      	beq.n	8003820 <TIM_Base_SetConfig+0x40>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	4a42      	ldr	r2, [pc, #264]	@ (8003914 <TIM_Base_SetConfig+0x134>)
 800380c:	4293      	cmp	r3, r2
 800380e:	d007      	beq.n	8003820 <TIM_Base_SetConfig+0x40>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	4a41      	ldr	r2, [pc, #260]	@ (8003918 <TIM_Base_SetConfig+0x138>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d003      	beq.n	8003820 <TIM_Base_SetConfig+0x40>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	4a40      	ldr	r2, [pc, #256]	@ (800391c <TIM_Base_SetConfig+0x13c>)
 800381c:	4293      	cmp	r3, r2
 800381e:	d108      	bne.n	8003832 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003826:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	68fa      	ldr	r2, [r7, #12]
 800382e:	4313      	orrs	r3, r2
 8003830:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	4a35      	ldr	r2, [pc, #212]	@ (800390c <TIM_Base_SetConfig+0x12c>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d02b      	beq.n	8003892 <TIM_Base_SetConfig+0xb2>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003840:	d027      	beq.n	8003892 <TIM_Base_SetConfig+0xb2>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	4a32      	ldr	r2, [pc, #200]	@ (8003910 <TIM_Base_SetConfig+0x130>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d023      	beq.n	8003892 <TIM_Base_SetConfig+0xb2>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	4a31      	ldr	r2, [pc, #196]	@ (8003914 <TIM_Base_SetConfig+0x134>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d01f      	beq.n	8003892 <TIM_Base_SetConfig+0xb2>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	4a30      	ldr	r2, [pc, #192]	@ (8003918 <TIM_Base_SetConfig+0x138>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d01b      	beq.n	8003892 <TIM_Base_SetConfig+0xb2>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	4a2f      	ldr	r2, [pc, #188]	@ (800391c <TIM_Base_SetConfig+0x13c>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d017      	beq.n	8003892 <TIM_Base_SetConfig+0xb2>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	4a2e      	ldr	r2, [pc, #184]	@ (8003920 <TIM_Base_SetConfig+0x140>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d013      	beq.n	8003892 <TIM_Base_SetConfig+0xb2>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	4a2d      	ldr	r2, [pc, #180]	@ (8003924 <TIM_Base_SetConfig+0x144>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d00f      	beq.n	8003892 <TIM_Base_SetConfig+0xb2>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	4a2c      	ldr	r2, [pc, #176]	@ (8003928 <TIM_Base_SetConfig+0x148>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d00b      	beq.n	8003892 <TIM_Base_SetConfig+0xb2>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	4a2b      	ldr	r2, [pc, #172]	@ (800392c <TIM_Base_SetConfig+0x14c>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d007      	beq.n	8003892 <TIM_Base_SetConfig+0xb2>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	4a2a      	ldr	r2, [pc, #168]	@ (8003930 <TIM_Base_SetConfig+0x150>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d003      	beq.n	8003892 <TIM_Base_SetConfig+0xb2>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	4a29      	ldr	r2, [pc, #164]	@ (8003934 <TIM_Base_SetConfig+0x154>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d108      	bne.n	80038a4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003898:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	68db      	ldr	r3, [r3, #12]
 800389e:	68fa      	ldr	r2, [r7, #12]
 80038a0:	4313      	orrs	r3, r2
 80038a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	695b      	ldr	r3, [r3, #20]
 80038ae:	4313      	orrs	r3, r2
 80038b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	68fa      	ldr	r2, [r7, #12]
 80038b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	689a      	ldr	r2, [r3, #8]
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	681a      	ldr	r2, [r3, #0]
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	4a10      	ldr	r2, [pc, #64]	@ (800390c <TIM_Base_SetConfig+0x12c>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d003      	beq.n	80038d8 <TIM_Base_SetConfig+0xf8>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	4a12      	ldr	r2, [pc, #72]	@ (800391c <TIM_Base_SetConfig+0x13c>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d103      	bne.n	80038e0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	691a      	ldr	r2, [r3, #16]
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2201      	movs	r2, #1
 80038e4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	691b      	ldr	r3, [r3, #16]
 80038ea:	f003 0301 	and.w	r3, r3, #1
 80038ee:	2b01      	cmp	r3, #1
 80038f0:	d105      	bne.n	80038fe <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	691b      	ldr	r3, [r3, #16]
 80038f6:	f023 0201 	bic.w	r2, r3, #1
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	611a      	str	r2, [r3, #16]
  }
}
 80038fe:	bf00      	nop
 8003900:	3714      	adds	r7, #20
 8003902:	46bd      	mov	sp, r7
 8003904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003908:	4770      	bx	lr
 800390a:	bf00      	nop
 800390c:	40010000 	.word	0x40010000
 8003910:	40000400 	.word	0x40000400
 8003914:	40000800 	.word	0x40000800
 8003918:	40000c00 	.word	0x40000c00
 800391c:	40010400 	.word	0x40010400
 8003920:	40014000 	.word	0x40014000
 8003924:	40014400 	.word	0x40014400
 8003928:	40014800 	.word	0x40014800
 800392c:	40001800 	.word	0x40001800
 8003930:	40001c00 	.word	0x40001c00
 8003934:	40002000 	.word	0x40002000

08003938 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003938:	b480      	push	{r7}
 800393a:	b087      	sub	sp, #28
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
 8003940:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6a1b      	ldr	r3, [r3, #32]
 8003946:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6a1b      	ldr	r3, [r3, #32]
 800394c:	f023 0201 	bic.w	r2, r3, #1
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	699b      	ldr	r3, [r3, #24]
 800395e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003966:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	f023 0303 	bic.w	r3, r3, #3
 800396e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	68fa      	ldr	r2, [r7, #12]
 8003976:	4313      	orrs	r3, r2
 8003978:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800397a:	697b      	ldr	r3, [r7, #20]
 800397c:	f023 0302 	bic.w	r3, r3, #2
 8003980:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	689b      	ldr	r3, [r3, #8]
 8003986:	697a      	ldr	r2, [r7, #20]
 8003988:	4313      	orrs	r3, r2
 800398a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	4a20      	ldr	r2, [pc, #128]	@ (8003a10 <TIM_OC1_SetConfig+0xd8>)
 8003990:	4293      	cmp	r3, r2
 8003992:	d003      	beq.n	800399c <TIM_OC1_SetConfig+0x64>
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	4a1f      	ldr	r2, [pc, #124]	@ (8003a14 <TIM_OC1_SetConfig+0xdc>)
 8003998:	4293      	cmp	r3, r2
 800399a:	d10c      	bne.n	80039b6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800399c:	697b      	ldr	r3, [r7, #20]
 800399e:	f023 0308 	bic.w	r3, r3, #8
 80039a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	68db      	ldr	r3, [r3, #12]
 80039a8:	697a      	ldr	r2, [r7, #20]
 80039aa:	4313      	orrs	r3, r2
 80039ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80039ae:	697b      	ldr	r3, [r7, #20]
 80039b0:	f023 0304 	bic.w	r3, r3, #4
 80039b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	4a15      	ldr	r2, [pc, #84]	@ (8003a10 <TIM_OC1_SetConfig+0xd8>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d003      	beq.n	80039c6 <TIM_OC1_SetConfig+0x8e>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	4a14      	ldr	r2, [pc, #80]	@ (8003a14 <TIM_OC1_SetConfig+0xdc>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d111      	bne.n	80039ea <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80039c6:	693b      	ldr	r3, [r7, #16]
 80039c8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80039cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80039ce:	693b      	ldr	r3, [r7, #16]
 80039d0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80039d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	695b      	ldr	r3, [r3, #20]
 80039da:	693a      	ldr	r2, [r7, #16]
 80039dc:	4313      	orrs	r3, r2
 80039de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	699b      	ldr	r3, [r3, #24]
 80039e4:	693a      	ldr	r2, [r7, #16]
 80039e6:	4313      	orrs	r3, r2
 80039e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	693a      	ldr	r2, [r7, #16]
 80039ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	68fa      	ldr	r2, [r7, #12]
 80039f4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	685a      	ldr	r2, [r3, #4]
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	697a      	ldr	r2, [r7, #20]
 8003a02:	621a      	str	r2, [r3, #32]
}
 8003a04:	bf00      	nop
 8003a06:	371c      	adds	r7, #28
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0e:	4770      	bx	lr
 8003a10:	40010000 	.word	0x40010000
 8003a14:	40010400 	.word	0x40010400

08003a18 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	b087      	sub	sp, #28
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
 8003a20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6a1b      	ldr	r3, [r3, #32]
 8003a26:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6a1b      	ldr	r3, [r3, #32]
 8003a2c:	f023 0210 	bic.w	r2, r3, #16
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	699b      	ldr	r3, [r3, #24]
 8003a3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003a46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003a4e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	021b      	lsls	r3, r3, #8
 8003a56:	68fa      	ldr	r2, [r7, #12]
 8003a58:	4313      	orrs	r3, r2
 8003a5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003a5c:	697b      	ldr	r3, [r7, #20]
 8003a5e:	f023 0320 	bic.w	r3, r3, #32
 8003a62:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	689b      	ldr	r3, [r3, #8]
 8003a68:	011b      	lsls	r3, r3, #4
 8003a6a:	697a      	ldr	r2, [r7, #20]
 8003a6c:	4313      	orrs	r3, r2
 8003a6e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	4a22      	ldr	r2, [pc, #136]	@ (8003afc <TIM_OC2_SetConfig+0xe4>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d003      	beq.n	8003a80 <TIM_OC2_SetConfig+0x68>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	4a21      	ldr	r2, [pc, #132]	@ (8003b00 <TIM_OC2_SetConfig+0xe8>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d10d      	bne.n	8003a9c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003a80:	697b      	ldr	r3, [r7, #20]
 8003a82:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003a86:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	68db      	ldr	r3, [r3, #12]
 8003a8c:	011b      	lsls	r3, r3, #4
 8003a8e:	697a      	ldr	r2, [r7, #20]
 8003a90:	4313      	orrs	r3, r2
 8003a92:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003a94:	697b      	ldr	r3, [r7, #20]
 8003a96:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003a9a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	4a17      	ldr	r2, [pc, #92]	@ (8003afc <TIM_OC2_SetConfig+0xe4>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d003      	beq.n	8003aac <TIM_OC2_SetConfig+0x94>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	4a16      	ldr	r2, [pc, #88]	@ (8003b00 <TIM_OC2_SetConfig+0xe8>)
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d113      	bne.n	8003ad4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003aac:	693b      	ldr	r3, [r7, #16]
 8003aae:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003ab2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003ab4:	693b      	ldr	r3, [r7, #16]
 8003ab6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003aba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	695b      	ldr	r3, [r3, #20]
 8003ac0:	009b      	lsls	r3, r3, #2
 8003ac2:	693a      	ldr	r2, [r7, #16]
 8003ac4:	4313      	orrs	r3, r2
 8003ac6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	699b      	ldr	r3, [r3, #24]
 8003acc:	009b      	lsls	r3, r3, #2
 8003ace:	693a      	ldr	r2, [r7, #16]
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	693a      	ldr	r2, [r7, #16]
 8003ad8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	68fa      	ldr	r2, [r7, #12]
 8003ade:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	685a      	ldr	r2, [r3, #4]
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	697a      	ldr	r2, [r7, #20]
 8003aec:	621a      	str	r2, [r3, #32]
}
 8003aee:	bf00      	nop
 8003af0:	371c      	adds	r7, #28
 8003af2:	46bd      	mov	sp, r7
 8003af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af8:	4770      	bx	lr
 8003afa:	bf00      	nop
 8003afc:	40010000 	.word	0x40010000
 8003b00:	40010400 	.word	0x40010400

08003b04 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003b04:	b480      	push	{r7}
 8003b06:	b087      	sub	sp, #28
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
 8003b0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6a1b      	ldr	r3, [r3, #32]
 8003b12:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6a1b      	ldr	r3, [r3, #32]
 8003b18:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	69db      	ldr	r3, [r3, #28]
 8003b2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	f023 0303 	bic.w	r3, r3, #3
 8003b3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	68fa      	ldr	r2, [r7, #12]
 8003b42:	4313      	orrs	r3, r2
 8003b44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003b46:	697b      	ldr	r3, [r7, #20]
 8003b48:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003b4c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	689b      	ldr	r3, [r3, #8]
 8003b52:	021b      	lsls	r3, r3, #8
 8003b54:	697a      	ldr	r2, [r7, #20]
 8003b56:	4313      	orrs	r3, r2
 8003b58:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	4a21      	ldr	r2, [pc, #132]	@ (8003be4 <TIM_OC3_SetConfig+0xe0>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d003      	beq.n	8003b6a <TIM_OC3_SetConfig+0x66>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	4a20      	ldr	r2, [pc, #128]	@ (8003be8 <TIM_OC3_SetConfig+0xe4>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d10d      	bne.n	8003b86 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003b6a:	697b      	ldr	r3, [r7, #20]
 8003b6c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003b70:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	68db      	ldr	r3, [r3, #12]
 8003b76:	021b      	lsls	r3, r3, #8
 8003b78:	697a      	ldr	r2, [r7, #20]
 8003b7a:	4313      	orrs	r3, r2
 8003b7c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003b7e:	697b      	ldr	r3, [r7, #20]
 8003b80:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003b84:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	4a16      	ldr	r2, [pc, #88]	@ (8003be4 <TIM_OC3_SetConfig+0xe0>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d003      	beq.n	8003b96 <TIM_OC3_SetConfig+0x92>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	4a15      	ldr	r2, [pc, #84]	@ (8003be8 <TIM_OC3_SetConfig+0xe4>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d113      	bne.n	8003bbe <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003b96:	693b      	ldr	r3, [r7, #16]
 8003b98:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003b9c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003b9e:	693b      	ldr	r3, [r7, #16]
 8003ba0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003ba4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	695b      	ldr	r3, [r3, #20]
 8003baa:	011b      	lsls	r3, r3, #4
 8003bac:	693a      	ldr	r2, [r7, #16]
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	699b      	ldr	r3, [r3, #24]
 8003bb6:	011b      	lsls	r3, r3, #4
 8003bb8:	693a      	ldr	r2, [r7, #16]
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	693a      	ldr	r2, [r7, #16]
 8003bc2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	68fa      	ldr	r2, [r7, #12]
 8003bc8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	685a      	ldr	r2, [r3, #4]
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	697a      	ldr	r2, [r7, #20]
 8003bd6:	621a      	str	r2, [r3, #32]
}
 8003bd8:	bf00      	nop
 8003bda:	371c      	adds	r7, #28
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be2:	4770      	bx	lr
 8003be4:	40010000 	.word	0x40010000
 8003be8:	40010400 	.word	0x40010400

08003bec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003bec:	b480      	push	{r7}
 8003bee:	b087      	sub	sp, #28
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
 8003bf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6a1b      	ldr	r3, [r3, #32]
 8003bfa:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6a1b      	ldr	r3, [r3, #32]
 8003c00:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	69db      	ldr	r3, [r3, #28]
 8003c12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003c1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003c22:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	021b      	lsls	r3, r3, #8
 8003c2a:	68fa      	ldr	r2, [r7, #12]
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003c30:	693b      	ldr	r3, [r7, #16]
 8003c32:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003c36:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	689b      	ldr	r3, [r3, #8]
 8003c3c:	031b      	lsls	r3, r3, #12
 8003c3e:	693a      	ldr	r2, [r7, #16]
 8003c40:	4313      	orrs	r3, r2
 8003c42:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	4a12      	ldr	r2, [pc, #72]	@ (8003c90 <TIM_OC4_SetConfig+0xa4>)
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d003      	beq.n	8003c54 <TIM_OC4_SetConfig+0x68>
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	4a11      	ldr	r2, [pc, #68]	@ (8003c94 <TIM_OC4_SetConfig+0xa8>)
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d109      	bne.n	8003c68 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003c54:	697b      	ldr	r3, [r7, #20]
 8003c56:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003c5a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	695b      	ldr	r3, [r3, #20]
 8003c60:	019b      	lsls	r3, r3, #6
 8003c62:	697a      	ldr	r2, [r7, #20]
 8003c64:	4313      	orrs	r3, r2
 8003c66:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	697a      	ldr	r2, [r7, #20]
 8003c6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	68fa      	ldr	r2, [r7, #12]
 8003c72:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	685a      	ldr	r2, [r3, #4]
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	693a      	ldr	r2, [r7, #16]
 8003c80:	621a      	str	r2, [r3, #32]
}
 8003c82:	bf00      	nop
 8003c84:	371c      	adds	r7, #28
 8003c86:	46bd      	mov	sp, r7
 8003c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8c:	4770      	bx	lr
 8003c8e:	bf00      	nop
 8003c90:	40010000 	.word	0x40010000
 8003c94:	40010400 	.word	0x40010400

08003c98 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b087      	sub	sp, #28
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	60f8      	str	r0, [r7, #12]
 8003ca0:	60b9      	str	r1, [r7, #8]
 8003ca2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	6a1b      	ldr	r3, [r3, #32]
 8003ca8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	6a1b      	ldr	r3, [r3, #32]
 8003cae:	f023 0201 	bic.w	r2, r3, #1
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	699b      	ldr	r3, [r3, #24]
 8003cba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003cbc:	693b      	ldr	r3, [r7, #16]
 8003cbe:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003cc2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	011b      	lsls	r3, r3, #4
 8003cc8:	693a      	ldr	r2, [r7, #16]
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003cce:	697b      	ldr	r3, [r7, #20]
 8003cd0:	f023 030a 	bic.w	r3, r3, #10
 8003cd4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003cd6:	697a      	ldr	r2, [r7, #20]
 8003cd8:	68bb      	ldr	r3, [r7, #8]
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	693a      	ldr	r2, [r7, #16]
 8003ce2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	697a      	ldr	r2, [r7, #20]
 8003ce8:	621a      	str	r2, [r3, #32]
}
 8003cea:	bf00      	nop
 8003cec:	371c      	adds	r7, #28
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf4:	4770      	bx	lr

08003cf6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003cf6:	b480      	push	{r7}
 8003cf8:	b087      	sub	sp, #28
 8003cfa:	af00      	add	r7, sp, #0
 8003cfc:	60f8      	str	r0, [r7, #12]
 8003cfe:	60b9      	str	r1, [r7, #8]
 8003d00:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	6a1b      	ldr	r3, [r3, #32]
 8003d06:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	6a1b      	ldr	r3, [r3, #32]
 8003d0c:	f023 0210 	bic.w	r2, r3, #16
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	699b      	ldr	r3, [r3, #24]
 8003d18:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003d1a:	693b      	ldr	r3, [r7, #16]
 8003d1c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003d20:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	031b      	lsls	r3, r3, #12
 8003d26:	693a      	ldr	r2, [r7, #16]
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003d2c:	697b      	ldr	r3, [r7, #20]
 8003d2e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003d32:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003d34:	68bb      	ldr	r3, [r7, #8]
 8003d36:	011b      	lsls	r3, r3, #4
 8003d38:	697a      	ldr	r2, [r7, #20]
 8003d3a:	4313      	orrs	r3, r2
 8003d3c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	693a      	ldr	r2, [r7, #16]
 8003d42:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	697a      	ldr	r2, [r7, #20]
 8003d48:	621a      	str	r2, [r3, #32]
}
 8003d4a:	bf00      	nop
 8003d4c:	371c      	adds	r7, #28
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d54:	4770      	bx	lr

08003d56 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003d56:	b480      	push	{r7}
 8003d58:	b085      	sub	sp, #20
 8003d5a:	af00      	add	r7, sp, #0
 8003d5c:	6078      	str	r0, [r7, #4]
 8003d5e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	689b      	ldr	r3, [r3, #8]
 8003d64:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d6c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003d6e:	683a      	ldr	r2, [r7, #0]
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	4313      	orrs	r3, r2
 8003d74:	f043 0307 	orr.w	r3, r3, #7
 8003d78:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	68fa      	ldr	r2, [r7, #12]
 8003d7e:	609a      	str	r2, [r3, #8]
}
 8003d80:	bf00      	nop
 8003d82:	3714      	adds	r7, #20
 8003d84:	46bd      	mov	sp, r7
 8003d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8a:	4770      	bx	lr

08003d8c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	b087      	sub	sp, #28
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	60f8      	str	r0, [r7, #12]
 8003d94:	60b9      	str	r1, [r7, #8]
 8003d96:	607a      	str	r2, [r7, #4]
 8003d98:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	689b      	ldr	r3, [r3, #8]
 8003d9e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003da0:	697b      	ldr	r3, [r7, #20]
 8003da2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003da6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	021a      	lsls	r2, r3, #8
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	431a      	orrs	r2, r3
 8003db0:	68bb      	ldr	r3, [r7, #8]
 8003db2:	4313      	orrs	r3, r2
 8003db4:	697a      	ldr	r2, [r7, #20]
 8003db6:	4313      	orrs	r3, r2
 8003db8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	697a      	ldr	r2, [r7, #20]
 8003dbe:	609a      	str	r2, [r3, #8]
}
 8003dc0:	bf00      	nop
 8003dc2:	371c      	adds	r7, #28
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dca:	4770      	bx	lr

08003dcc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003dcc:	b480      	push	{r7}
 8003dce:	b087      	sub	sp, #28
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	60f8      	str	r0, [r7, #12]
 8003dd4:	60b9      	str	r1, [r7, #8]
 8003dd6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003dd8:	68bb      	ldr	r3, [r7, #8]
 8003dda:	f003 031f 	and.w	r3, r3, #31
 8003dde:	2201      	movs	r2, #1
 8003de0:	fa02 f303 	lsl.w	r3, r2, r3
 8003de4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	6a1a      	ldr	r2, [r3, #32]
 8003dea:	697b      	ldr	r3, [r7, #20]
 8003dec:	43db      	mvns	r3, r3
 8003dee:	401a      	ands	r2, r3
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	6a1a      	ldr	r2, [r3, #32]
 8003df8:	68bb      	ldr	r3, [r7, #8]
 8003dfa:	f003 031f 	and.w	r3, r3, #31
 8003dfe:	6879      	ldr	r1, [r7, #4]
 8003e00:	fa01 f303 	lsl.w	r3, r1, r3
 8003e04:	431a      	orrs	r2, r3
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	621a      	str	r2, [r3, #32]
}
 8003e0a:	bf00      	nop
 8003e0c:	371c      	adds	r7, #28
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e14:	4770      	bx	lr
	...

08003e18 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003e18:	b480      	push	{r7}
 8003e1a:	b085      	sub	sp, #20
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
 8003e20:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003e28:	2b01      	cmp	r3, #1
 8003e2a:	d101      	bne.n	8003e30 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003e2c:	2302      	movs	r3, #2
 8003e2e:	e05a      	b.n	8003ee6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2201      	movs	r2, #1
 8003e34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2202      	movs	r2, #2
 8003e3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	689b      	ldr	r3, [r3, #8]
 8003e4e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e56:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	68fa      	ldr	r2, [r7, #12]
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	68fa      	ldr	r2, [r7, #12]
 8003e68:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4a21      	ldr	r2, [pc, #132]	@ (8003ef4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d022      	beq.n	8003eba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e7c:	d01d      	beq.n	8003eba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4a1d      	ldr	r2, [pc, #116]	@ (8003ef8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d018      	beq.n	8003eba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4a1b      	ldr	r2, [pc, #108]	@ (8003efc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d013      	beq.n	8003eba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4a1a      	ldr	r2, [pc, #104]	@ (8003f00 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d00e      	beq.n	8003eba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4a18      	ldr	r2, [pc, #96]	@ (8003f04 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d009      	beq.n	8003eba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4a17      	ldr	r2, [pc, #92]	@ (8003f08 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d004      	beq.n	8003eba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4a15      	ldr	r2, [pc, #84]	@ (8003f0c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d10c      	bne.n	8003ed4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003eba:	68bb      	ldr	r3, [r7, #8]
 8003ebc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003ec0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	685b      	ldr	r3, [r3, #4]
 8003ec6:	68ba      	ldr	r2, [r7, #8]
 8003ec8:	4313      	orrs	r3, r2
 8003eca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	68ba      	ldr	r2, [r7, #8]
 8003ed2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2201      	movs	r2, #1
 8003ed8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2200      	movs	r2, #0
 8003ee0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003ee4:	2300      	movs	r3, #0
}
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	3714      	adds	r7, #20
 8003eea:	46bd      	mov	sp, r7
 8003eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef0:	4770      	bx	lr
 8003ef2:	bf00      	nop
 8003ef4:	40010000 	.word	0x40010000
 8003ef8:	40000400 	.word	0x40000400
 8003efc:	40000800 	.word	0x40000800
 8003f00:	40000c00 	.word	0x40000c00
 8003f04:	40010400 	.word	0x40010400
 8003f08:	40014000 	.word	0x40014000
 8003f0c:	40001800 	.word	0x40001800

08003f10 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003f10:	b480      	push	{r7}
 8003f12:	b083      	sub	sp, #12
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003f18:	bf00      	nop
 8003f1a:	370c      	adds	r7, #12
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f22:	4770      	bx	lr

08003f24 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003f24:	b480      	push	{r7}
 8003f26:	b083      	sub	sp, #12
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003f2c:	bf00      	nop
 8003f2e:	370c      	adds	r7, #12
 8003f30:	46bd      	mov	sp, r7
 8003f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f36:	4770      	bx	lr

08003f38 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b082      	sub	sp, #8
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d101      	bne.n	8003f4a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f46:	2301      	movs	r3, #1
 8003f48:	e042      	b.n	8003fd0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f50:	b2db      	uxtb	r3, r3
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d106      	bne.n	8003f64 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2200      	movs	r2, #0
 8003f5a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f5e:	6878      	ldr	r0, [r7, #4]
 8003f60:	f7fd fd42 	bl	80019e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2224      	movs	r2, #36	@ 0x24
 8003f68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	68da      	ldr	r2, [r3, #12]
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003f7a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003f7c:	6878      	ldr	r0, [r7, #4]
 8003f7e:	f000 f82b 	bl	8003fd8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	691a      	ldr	r2, [r3, #16]
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003f90:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	695a      	ldr	r2, [r3, #20]
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003fa0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	68da      	ldr	r2, [r3, #12]
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003fb0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2220      	movs	r2, #32
 8003fbc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2220      	movs	r2, #32
 8003fc4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2200      	movs	r2, #0
 8003fcc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003fce:	2300      	movs	r3, #0
}
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	3708      	adds	r7, #8
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	bd80      	pop	{r7, pc}

08003fd8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003fd8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003fdc:	b0c0      	sub	sp, #256	@ 0x100
 8003fde:	af00      	add	r7, sp, #0
 8003fe0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003fe4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	691b      	ldr	r3, [r3, #16]
 8003fec:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003ff0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ff4:	68d9      	ldr	r1, [r3, #12]
 8003ff6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ffa:	681a      	ldr	r2, [r3, #0]
 8003ffc:	ea40 0301 	orr.w	r3, r0, r1
 8004000:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004002:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004006:	689a      	ldr	r2, [r3, #8]
 8004008:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800400c:	691b      	ldr	r3, [r3, #16]
 800400e:	431a      	orrs	r2, r3
 8004010:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004014:	695b      	ldr	r3, [r3, #20]
 8004016:	431a      	orrs	r2, r3
 8004018:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800401c:	69db      	ldr	r3, [r3, #28]
 800401e:	4313      	orrs	r3, r2
 8004020:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004024:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	68db      	ldr	r3, [r3, #12]
 800402c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004030:	f021 010c 	bic.w	r1, r1, #12
 8004034:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004038:	681a      	ldr	r2, [r3, #0]
 800403a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800403e:	430b      	orrs	r3, r1
 8004040:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004042:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	695b      	ldr	r3, [r3, #20]
 800404a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800404e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004052:	6999      	ldr	r1, [r3, #24]
 8004054:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004058:	681a      	ldr	r2, [r3, #0]
 800405a:	ea40 0301 	orr.w	r3, r0, r1
 800405e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004060:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004064:	681a      	ldr	r2, [r3, #0]
 8004066:	4b8f      	ldr	r3, [pc, #572]	@ (80042a4 <UART_SetConfig+0x2cc>)
 8004068:	429a      	cmp	r2, r3
 800406a:	d005      	beq.n	8004078 <UART_SetConfig+0xa0>
 800406c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004070:	681a      	ldr	r2, [r3, #0]
 8004072:	4b8d      	ldr	r3, [pc, #564]	@ (80042a8 <UART_SetConfig+0x2d0>)
 8004074:	429a      	cmp	r2, r3
 8004076:	d104      	bne.n	8004082 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004078:	f7fe fa1e 	bl	80024b8 <HAL_RCC_GetPCLK2Freq>
 800407c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004080:	e003      	b.n	800408a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004082:	f7fe fa05 	bl	8002490 <HAL_RCC_GetPCLK1Freq>
 8004086:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800408a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800408e:	69db      	ldr	r3, [r3, #28]
 8004090:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004094:	f040 810c 	bne.w	80042b0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004098:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800409c:	2200      	movs	r2, #0
 800409e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80040a2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80040a6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80040aa:	4622      	mov	r2, r4
 80040ac:	462b      	mov	r3, r5
 80040ae:	1891      	adds	r1, r2, r2
 80040b0:	65b9      	str	r1, [r7, #88]	@ 0x58
 80040b2:	415b      	adcs	r3, r3
 80040b4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80040b6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80040ba:	4621      	mov	r1, r4
 80040bc:	eb12 0801 	adds.w	r8, r2, r1
 80040c0:	4629      	mov	r1, r5
 80040c2:	eb43 0901 	adc.w	r9, r3, r1
 80040c6:	f04f 0200 	mov.w	r2, #0
 80040ca:	f04f 0300 	mov.w	r3, #0
 80040ce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80040d2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80040d6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80040da:	4690      	mov	r8, r2
 80040dc:	4699      	mov	r9, r3
 80040de:	4623      	mov	r3, r4
 80040e0:	eb18 0303 	adds.w	r3, r8, r3
 80040e4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80040e8:	462b      	mov	r3, r5
 80040ea:	eb49 0303 	adc.w	r3, r9, r3
 80040ee:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80040f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	2200      	movs	r2, #0
 80040fa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80040fe:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004102:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004106:	460b      	mov	r3, r1
 8004108:	18db      	adds	r3, r3, r3
 800410a:	653b      	str	r3, [r7, #80]	@ 0x50
 800410c:	4613      	mov	r3, r2
 800410e:	eb42 0303 	adc.w	r3, r2, r3
 8004112:	657b      	str	r3, [r7, #84]	@ 0x54
 8004114:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004118:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800411c:	f7fc fcb2 	bl	8000a84 <__aeabi_uldivmod>
 8004120:	4602      	mov	r2, r0
 8004122:	460b      	mov	r3, r1
 8004124:	4b61      	ldr	r3, [pc, #388]	@ (80042ac <UART_SetConfig+0x2d4>)
 8004126:	fba3 2302 	umull	r2, r3, r3, r2
 800412a:	095b      	lsrs	r3, r3, #5
 800412c:	011c      	lsls	r4, r3, #4
 800412e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004132:	2200      	movs	r2, #0
 8004134:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004138:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800413c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004140:	4642      	mov	r2, r8
 8004142:	464b      	mov	r3, r9
 8004144:	1891      	adds	r1, r2, r2
 8004146:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004148:	415b      	adcs	r3, r3
 800414a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800414c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004150:	4641      	mov	r1, r8
 8004152:	eb12 0a01 	adds.w	sl, r2, r1
 8004156:	4649      	mov	r1, r9
 8004158:	eb43 0b01 	adc.w	fp, r3, r1
 800415c:	f04f 0200 	mov.w	r2, #0
 8004160:	f04f 0300 	mov.w	r3, #0
 8004164:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004168:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800416c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004170:	4692      	mov	sl, r2
 8004172:	469b      	mov	fp, r3
 8004174:	4643      	mov	r3, r8
 8004176:	eb1a 0303 	adds.w	r3, sl, r3
 800417a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800417e:	464b      	mov	r3, r9
 8004180:	eb4b 0303 	adc.w	r3, fp, r3
 8004184:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004188:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800418c:	685b      	ldr	r3, [r3, #4]
 800418e:	2200      	movs	r2, #0
 8004190:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004194:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004198:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800419c:	460b      	mov	r3, r1
 800419e:	18db      	adds	r3, r3, r3
 80041a0:	643b      	str	r3, [r7, #64]	@ 0x40
 80041a2:	4613      	mov	r3, r2
 80041a4:	eb42 0303 	adc.w	r3, r2, r3
 80041a8:	647b      	str	r3, [r7, #68]	@ 0x44
 80041aa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80041ae:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80041b2:	f7fc fc67 	bl	8000a84 <__aeabi_uldivmod>
 80041b6:	4602      	mov	r2, r0
 80041b8:	460b      	mov	r3, r1
 80041ba:	4611      	mov	r1, r2
 80041bc:	4b3b      	ldr	r3, [pc, #236]	@ (80042ac <UART_SetConfig+0x2d4>)
 80041be:	fba3 2301 	umull	r2, r3, r3, r1
 80041c2:	095b      	lsrs	r3, r3, #5
 80041c4:	2264      	movs	r2, #100	@ 0x64
 80041c6:	fb02 f303 	mul.w	r3, r2, r3
 80041ca:	1acb      	subs	r3, r1, r3
 80041cc:	00db      	lsls	r3, r3, #3
 80041ce:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80041d2:	4b36      	ldr	r3, [pc, #216]	@ (80042ac <UART_SetConfig+0x2d4>)
 80041d4:	fba3 2302 	umull	r2, r3, r3, r2
 80041d8:	095b      	lsrs	r3, r3, #5
 80041da:	005b      	lsls	r3, r3, #1
 80041dc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80041e0:	441c      	add	r4, r3
 80041e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80041e6:	2200      	movs	r2, #0
 80041e8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80041ec:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80041f0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80041f4:	4642      	mov	r2, r8
 80041f6:	464b      	mov	r3, r9
 80041f8:	1891      	adds	r1, r2, r2
 80041fa:	63b9      	str	r1, [r7, #56]	@ 0x38
 80041fc:	415b      	adcs	r3, r3
 80041fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004200:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004204:	4641      	mov	r1, r8
 8004206:	1851      	adds	r1, r2, r1
 8004208:	6339      	str	r1, [r7, #48]	@ 0x30
 800420a:	4649      	mov	r1, r9
 800420c:	414b      	adcs	r3, r1
 800420e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004210:	f04f 0200 	mov.w	r2, #0
 8004214:	f04f 0300 	mov.w	r3, #0
 8004218:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800421c:	4659      	mov	r1, fp
 800421e:	00cb      	lsls	r3, r1, #3
 8004220:	4651      	mov	r1, sl
 8004222:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004226:	4651      	mov	r1, sl
 8004228:	00ca      	lsls	r2, r1, #3
 800422a:	4610      	mov	r0, r2
 800422c:	4619      	mov	r1, r3
 800422e:	4603      	mov	r3, r0
 8004230:	4642      	mov	r2, r8
 8004232:	189b      	adds	r3, r3, r2
 8004234:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004238:	464b      	mov	r3, r9
 800423a:	460a      	mov	r2, r1
 800423c:	eb42 0303 	adc.w	r3, r2, r3
 8004240:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004244:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	2200      	movs	r2, #0
 800424c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004250:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004254:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004258:	460b      	mov	r3, r1
 800425a:	18db      	adds	r3, r3, r3
 800425c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800425e:	4613      	mov	r3, r2
 8004260:	eb42 0303 	adc.w	r3, r2, r3
 8004264:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004266:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800426a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800426e:	f7fc fc09 	bl	8000a84 <__aeabi_uldivmod>
 8004272:	4602      	mov	r2, r0
 8004274:	460b      	mov	r3, r1
 8004276:	4b0d      	ldr	r3, [pc, #52]	@ (80042ac <UART_SetConfig+0x2d4>)
 8004278:	fba3 1302 	umull	r1, r3, r3, r2
 800427c:	095b      	lsrs	r3, r3, #5
 800427e:	2164      	movs	r1, #100	@ 0x64
 8004280:	fb01 f303 	mul.w	r3, r1, r3
 8004284:	1ad3      	subs	r3, r2, r3
 8004286:	00db      	lsls	r3, r3, #3
 8004288:	3332      	adds	r3, #50	@ 0x32
 800428a:	4a08      	ldr	r2, [pc, #32]	@ (80042ac <UART_SetConfig+0x2d4>)
 800428c:	fba2 2303 	umull	r2, r3, r2, r3
 8004290:	095b      	lsrs	r3, r3, #5
 8004292:	f003 0207 	and.w	r2, r3, #7
 8004296:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4422      	add	r2, r4
 800429e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80042a0:	e106      	b.n	80044b0 <UART_SetConfig+0x4d8>
 80042a2:	bf00      	nop
 80042a4:	40011000 	.word	0x40011000
 80042a8:	40011400 	.word	0x40011400
 80042ac:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80042b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80042b4:	2200      	movs	r2, #0
 80042b6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80042ba:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80042be:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80042c2:	4642      	mov	r2, r8
 80042c4:	464b      	mov	r3, r9
 80042c6:	1891      	adds	r1, r2, r2
 80042c8:	6239      	str	r1, [r7, #32]
 80042ca:	415b      	adcs	r3, r3
 80042cc:	627b      	str	r3, [r7, #36]	@ 0x24
 80042ce:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80042d2:	4641      	mov	r1, r8
 80042d4:	1854      	adds	r4, r2, r1
 80042d6:	4649      	mov	r1, r9
 80042d8:	eb43 0501 	adc.w	r5, r3, r1
 80042dc:	f04f 0200 	mov.w	r2, #0
 80042e0:	f04f 0300 	mov.w	r3, #0
 80042e4:	00eb      	lsls	r3, r5, #3
 80042e6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80042ea:	00e2      	lsls	r2, r4, #3
 80042ec:	4614      	mov	r4, r2
 80042ee:	461d      	mov	r5, r3
 80042f0:	4643      	mov	r3, r8
 80042f2:	18e3      	adds	r3, r4, r3
 80042f4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80042f8:	464b      	mov	r3, r9
 80042fa:	eb45 0303 	adc.w	r3, r5, r3
 80042fe:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004302:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	2200      	movs	r2, #0
 800430a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800430e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004312:	f04f 0200 	mov.w	r2, #0
 8004316:	f04f 0300 	mov.w	r3, #0
 800431a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800431e:	4629      	mov	r1, r5
 8004320:	008b      	lsls	r3, r1, #2
 8004322:	4621      	mov	r1, r4
 8004324:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004328:	4621      	mov	r1, r4
 800432a:	008a      	lsls	r2, r1, #2
 800432c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004330:	f7fc fba8 	bl	8000a84 <__aeabi_uldivmod>
 8004334:	4602      	mov	r2, r0
 8004336:	460b      	mov	r3, r1
 8004338:	4b60      	ldr	r3, [pc, #384]	@ (80044bc <UART_SetConfig+0x4e4>)
 800433a:	fba3 2302 	umull	r2, r3, r3, r2
 800433e:	095b      	lsrs	r3, r3, #5
 8004340:	011c      	lsls	r4, r3, #4
 8004342:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004346:	2200      	movs	r2, #0
 8004348:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800434c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004350:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004354:	4642      	mov	r2, r8
 8004356:	464b      	mov	r3, r9
 8004358:	1891      	adds	r1, r2, r2
 800435a:	61b9      	str	r1, [r7, #24]
 800435c:	415b      	adcs	r3, r3
 800435e:	61fb      	str	r3, [r7, #28]
 8004360:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004364:	4641      	mov	r1, r8
 8004366:	1851      	adds	r1, r2, r1
 8004368:	6139      	str	r1, [r7, #16]
 800436a:	4649      	mov	r1, r9
 800436c:	414b      	adcs	r3, r1
 800436e:	617b      	str	r3, [r7, #20]
 8004370:	f04f 0200 	mov.w	r2, #0
 8004374:	f04f 0300 	mov.w	r3, #0
 8004378:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800437c:	4659      	mov	r1, fp
 800437e:	00cb      	lsls	r3, r1, #3
 8004380:	4651      	mov	r1, sl
 8004382:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004386:	4651      	mov	r1, sl
 8004388:	00ca      	lsls	r2, r1, #3
 800438a:	4610      	mov	r0, r2
 800438c:	4619      	mov	r1, r3
 800438e:	4603      	mov	r3, r0
 8004390:	4642      	mov	r2, r8
 8004392:	189b      	adds	r3, r3, r2
 8004394:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004398:	464b      	mov	r3, r9
 800439a:	460a      	mov	r2, r1
 800439c:	eb42 0303 	adc.w	r3, r2, r3
 80043a0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80043a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	2200      	movs	r2, #0
 80043ac:	67bb      	str	r3, [r7, #120]	@ 0x78
 80043ae:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80043b0:	f04f 0200 	mov.w	r2, #0
 80043b4:	f04f 0300 	mov.w	r3, #0
 80043b8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80043bc:	4649      	mov	r1, r9
 80043be:	008b      	lsls	r3, r1, #2
 80043c0:	4641      	mov	r1, r8
 80043c2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80043c6:	4641      	mov	r1, r8
 80043c8:	008a      	lsls	r2, r1, #2
 80043ca:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80043ce:	f7fc fb59 	bl	8000a84 <__aeabi_uldivmod>
 80043d2:	4602      	mov	r2, r0
 80043d4:	460b      	mov	r3, r1
 80043d6:	4611      	mov	r1, r2
 80043d8:	4b38      	ldr	r3, [pc, #224]	@ (80044bc <UART_SetConfig+0x4e4>)
 80043da:	fba3 2301 	umull	r2, r3, r3, r1
 80043de:	095b      	lsrs	r3, r3, #5
 80043e0:	2264      	movs	r2, #100	@ 0x64
 80043e2:	fb02 f303 	mul.w	r3, r2, r3
 80043e6:	1acb      	subs	r3, r1, r3
 80043e8:	011b      	lsls	r3, r3, #4
 80043ea:	3332      	adds	r3, #50	@ 0x32
 80043ec:	4a33      	ldr	r2, [pc, #204]	@ (80044bc <UART_SetConfig+0x4e4>)
 80043ee:	fba2 2303 	umull	r2, r3, r2, r3
 80043f2:	095b      	lsrs	r3, r3, #5
 80043f4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80043f8:	441c      	add	r4, r3
 80043fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80043fe:	2200      	movs	r2, #0
 8004400:	673b      	str	r3, [r7, #112]	@ 0x70
 8004402:	677a      	str	r2, [r7, #116]	@ 0x74
 8004404:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004408:	4642      	mov	r2, r8
 800440a:	464b      	mov	r3, r9
 800440c:	1891      	adds	r1, r2, r2
 800440e:	60b9      	str	r1, [r7, #8]
 8004410:	415b      	adcs	r3, r3
 8004412:	60fb      	str	r3, [r7, #12]
 8004414:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004418:	4641      	mov	r1, r8
 800441a:	1851      	adds	r1, r2, r1
 800441c:	6039      	str	r1, [r7, #0]
 800441e:	4649      	mov	r1, r9
 8004420:	414b      	adcs	r3, r1
 8004422:	607b      	str	r3, [r7, #4]
 8004424:	f04f 0200 	mov.w	r2, #0
 8004428:	f04f 0300 	mov.w	r3, #0
 800442c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004430:	4659      	mov	r1, fp
 8004432:	00cb      	lsls	r3, r1, #3
 8004434:	4651      	mov	r1, sl
 8004436:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800443a:	4651      	mov	r1, sl
 800443c:	00ca      	lsls	r2, r1, #3
 800443e:	4610      	mov	r0, r2
 8004440:	4619      	mov	r1, r3
 8004442:	4603      	mov	r3, r0
 8004444:	4642      	mov	r2, r8
 8004446:	189b      	adds	r3, r3, r2
 8004448:	66bb      	str	r3, [r7, #104]	@ 0x68
 800444a:	464b      	mov	r3, r9
 800444c:	460a      	mov	r2, r1
 800444e:	eb42 0303 	adc.w	r3, r2, r3
 8004452:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004454:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004458:	685b      	ldr	r3, [r3, #4]
 800445a:	2200      	movs	r2, #0
 800445c:	663b      	str	r3, [r7, #96]	@ 0x60
 800445e:	667a      	str	r2, [r7, #100]	@ 0x64
 8004460:	f04f 0200 	mov.w	r2, #0
 8004464:	f04f 0300 	mov.w	r3, #0
 8004468:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800446c:	4649      	mov	r1, r9
 800446e:	008b      	lsls	r3, r1, #2
 8004470:	4641      	mov	r1, r8
 8004472:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004476:	4641      	mov	r1, r8
 8004478:	008a      	lsls	r2, r1, #2
 800447a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800447e:	f7fc fb01 	bl	8000a84 <__aeabi_uldivmod>
 8004482:	4602      	mov	r2, r0
 8004484:	460b      	mov	r3, r1
 8004486:	4b0d      	ldr	r3, [pc, #52]	@ (80044bc <UART_SetConfig+0x4e4>)
 8004488:	fba3 1302 	umull	r1, r3, r3, r2
 800448c:	095b      	lsrs	r3, r3, #5
 800448e:	2164      	movs	r1, #100	@ 0x64
 8004490:	fb01 f303 	mul.w	r3, r1, r3
 8004494:	1ad3      	subs	r3, r2, r3
 8004496:	011b      	lsls	r3, r3, #4
 8004498:	3332      	adds	r3, #50	@ 0x32
 800449a:	4a08      	ldr	r2, [pc, #32]	@ (80044bc <UART_SetConfig+0x4e4>)
 800449c:	fba2 2303 	umull	r2, r3, r2, r3
 80044a0:	095b      	lsrs	r3, r3, #5
 80044a2:	f003 020f 	and.w	r2, r3, #15
 80044a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4422      	add	r2, r4
 80044ae:	609a      	str	r2, [r3, #8]
}
 80044b0:	bf00      	nop
 80044b2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80044b6:	46bd      	mov	sp, r7
 80044b8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80044bc:	51eb851f 	.word	0x51eb851f

080044c0 <memset>:
 80044c0:	4402      	add	r2, r0
 80044c2:	4603      	mov	r3, r0
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d100      	bne.n	80044ca <memset+0xa>
 80044c8:	4770      	bx	lr
 80044ca:	f803 1b01 	strb.w	r1, [r3], #1
 80044ce:	e7f9      	b.n	80044c4 <memset+0x4>

080044d0 <__libc_init_array>:
 80044d0:	b570      	push	{r4, r5, r6, lr}
 80044d2:	4d0d      	ldr	r5, [pc, #52]	@ (8004508 <__libc_init_array+0x38>)
 80044d4:	4c0d      	ldr	r4, [pc, #52]	@ (800450c <__libc_init_array+0x3c>)
 80044d6:	1b64      	subs	r4, r4, r5
 80044d8:	10a4      	asrs	r4, r4, #2
 80044da:	2600      	movs	r6, #0
 80044dc:	42a6      	cmp	r6, r4
 80044de:	d109      	bne.n	80044f4 <__libc_init_array+0x24>
 80044e0:	4d0b      	ldr	r5, [pc, #44]	@ (8004510 <__libc_init_array+0x40>)
 80044e2:	4c0c      	ldr	r4, [pc, #48]	@ (8004514 <__libc_init_array+0x44>)
 80044e4:	f000 f818 	bl	8004518 <_init>
 80044e8:	1b64      	subs	r4, r4, r5
 80044ea:	10a4      	asrs	r4, r4, #2
 80044ec:	2600      	movs	r6, #0
 80044ee:	42a6      	cmp	r6, r4
 80044f0:	d105      	bne.n	80044fe <__libc_init_array+0x2e>
 80044f2:	bd70      	pop	{r4, r5, r6, pc}
 80044f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80044f8:	4798      	blx	r3
 80044fa:	3601      	adds	r6, #1
 80044fc:	e7ee      	b.n	80044dc <__libc_init_array+0xc>
 80044fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8004502:	4798      	blx	r3
 8004504:	3601      	adds	r6, #1
 8004506:	e7f2      	b.n	80044ee <__libc_init_array+0x1e>
 8004508:	08004560 	.word	0x08004560
 800450c:	08004560 	.word	0x08004560
 8004510:	08004560 	.word	0x08004560
 8004514:	08004564 	.word	0x08004564

08004518 <_init>:
 8004518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800451a:	bf00      	nop
 800451c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800451e:	bc08      	pop	{r3}
 8004520:	469e      	mov	lr, r3
 8004522:	4770      	bx	lr

08004524 <_fini>:
 8004524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004526:	bf00      	nop
 8004528:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800452a:	bc08      	pop	{r3}
 800452c:	469e      	mov	lr, r3
 800452e:	4770      	bx	lr
