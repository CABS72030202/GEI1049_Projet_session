
GEI1049_Projet_session.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008954  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000039b8  08008b24  08008b24  00009b24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c4dc  0800c4dc  0000e09c  2**0
                  CONTENTS
  4 .ARM          00000008  0800c4dc  0800c4dc  0000d4dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c4e4  0800c4e4  0000e09c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c4e4  0800c4e4  0000d4e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c4e8  0800c4e8  0000d4e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000009c  20000000  0800c4ec  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000041c  2000009c  0800c588  0000e09c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004b8  0800c588  0000e4b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e09c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000174a4  00000000  00000000  0000e0cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003b34  00000000  00000000  00025570  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014e8  00000000  00000000  000290a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001017  00000000  00000000  0002a590  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026a3e  00000000  00000000  0002b5a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e8c7  00000000  00000000  00051fe5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d8a23  00000000  00000000  000708ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001492cf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006058  00000000  00000000  00149314  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  0014f36c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000009c 	.word	0x2000009c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08008b0c 	.word	0x08008b0c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000a0 	.word	0x200000a0
 800020c:	08008b0c 	.word	0x08008b0c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	@ 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__aeabi_d2iz>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a54:	d215      	bcs.n	8000a82 <__aeabi_d2iz+0x36>
 8000a56:	d511      	bpl.n	8000a7c <__aeabi_d2iz+0x30>
 8000a58:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d912      	bls.n	8000a88 <__aeabi_d2iz+0x3c>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a72:	fa23 f002 	lsr.w	r0, r3, r2
 8000a76:	bf18      	it	ne
 8000a78:	4240      	negne	r0, r0
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a86:	d105      	bne.n	8000a94 <__aeabi_d2iz+0x48>
 8000a88:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a8c:	bf08      	it	eq
 8000a8e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a92:	4770      	bx	lr
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop

08000a9c <__aeabi_d2uiz>:
 8000a9c:	004a      	lsls	r2, r1, #1
 8000a9e:	d211      	bcs.n	8000ac4 <__aeabi_d2uiz+0x28>
 8000aa0:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000aa4:	d211      	bcs.n	8000aca <__aeabi_d2uiz+0x2e>
 8000aa6:	d50d      	bpl.n	8000ac4 <__aeabi_d2uiz+0x28>
 8000aa8:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000aac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab0:	d40e      	bmi.n	8000ad0 <__aeabi_d2uiz+0x34>
 8000ab2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000abe:	fa23 f002 	lsr.w	r0, r3, r2
 8000ac2:	4770      	bx	lr
 8000ac4:	f04f 0000 	mov.w	r0, #0
 8000ac8:	4770      	bx	lr
 8000aca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ace:	d102      	bne.n	8000ad6 <__aeabi_d2uiz+0x3a>
 8000ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ad4:	4770      	bx	lr
 8000ad6:	f04f 0000 	mov.w	r0, #0
 8000ada:	4770      	bx	lr

08000adc <__aeabi_d2f>:
 8000adc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ae0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ae4:	bf24      	itt	cs
 8000ae6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000aea:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000aee:	d90d      	bls.n	8000b0c <__aeabi_d2f+0x30>
 8000af0:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000af4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000af8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000afc:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b00:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b04:	bf08      	it	eq
 8000b06:	f020 0001 	biceq.w	r0, r0, #1
 8000b0a:	4770      	bx	lr
 8000b0c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b10:	d121      	bne.n	8000b56 <__aeabi_d2f+0x7a>
 8000b12:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b16:	bfbc      	itt	lt
 8000b18:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b1c:	4770      	bxlt	lr
 8000b1e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b22:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b26:	f1c2 0218 	rsb	r2, r2, #24
 8000b2a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b2e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b32:	fa20 f002 	lsr.w	r0, r0, r2
 8000b36:	bf18      	it	ne
 8000b38:	f040 0001 	orrne.w	r0, r0, #1
 8000b3c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b40:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b44:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b48:	ea40 000c 	orr.w	r0, r0, ip
 8000b4c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b50:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b54:	e7cc      	b.n	8000af0 <__aeabi_d2f+0x14>
 8000b56:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b5a:	d107      	bne.n	8000b6c <__aeabi_d2f+0x90>
 8000b5c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b60:	bf1e      	ittt	ne
 8000b62:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b66:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b6a:	4770      	bxne	lr
 8000b6c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b70:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b74:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <__aeabi_uldivmod>:
 8000b7c:	b953      	cbnz	r3, 8000b94 <__aeabi_uldivmod+0x18>
 8000b7e:	b94a      	cbnz	r2, 8000b94 <__aeabi_uldivmod+0x18>
 8000b80:	2900      	cmp	r1, #0
 8000b82:	bf08      	it	eq
 8000b84:	2800      	cmpeq	r0, #0
 8000b86:	bf1c      	itt	ne
 8000b88:	f04f 31ff 	movne.w	r1, #4294967295
 8000b8c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b90:	f000 b96a 	b.w	8000e68 <__aeabi_idiv0>
 8000b94:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b98:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b9c:	f000 f806 	bl	8000bac <__udivmoddi4>
 8000ba0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ba4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ba8:	b004      	add	sp, #16
 8000baa:	4770      	bx	lr

08000bac <__udivmoddi4>:
 8000bac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bb0:	9d08      	ldr	r5, [sp, #32]
 8000bb2:	460c      	mov	r4, r1
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d14e      	bne.n	8000c56 <__udivmoddi4+0xaa>
 8000bb8:	4694      	mov	ip, r2
 8000bba:	458c      	cmp	ip, r1
 8000bbc:	4686      	mov	lr, r0
 8000bbe:	fab2 f282 	clz	r2, r2
 8000bc2:	d962      	bls.n	8000c8a <__udivmoddi4+0xde>
 8000bc4:	b14a      	cbz	r2, 8000bda <__udivmoddi4+0x2e>
 8000bc6:	f1c2 0320 	rsb	r3, r2, #32
 8000bca:	4091      	lsls	r1, r2
 8000bcc:	fa20 f303 	lsr.w	r3, r0, r3
 8000bd0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bd4:	4319      	orrs	r1, r3
 8000bd6:	fa00 fe02 	lsl.w	lr, r0, r2
 8000bda:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bde:	fa1f f68c 	uxth.w	r6, ip
 8000be2:	fbb1 f4f7 	udiv	r4, r1, r7
 8000be6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bea:	fb07 1114 	mls	r1, r7, r4, r1
 8000bee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bf2:	fb04 f106 	mul.w	r1, r4, r6
 8000bf6:	4299      	cmp	r1, r3
 8000bf8:	d90a      	bls.n	8000c10 <__udivmoddi4+0x64>
 8000bfa:	eb1c 0303 	adds.w	r3, ip, r3
 8000bfe:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c02:	f080 8112 	bcs.w	8000e2a <__udivmoddi4+0x27e>
 8000c06:	4299      	cmp	r1, r3
 8000c08:	f240 810f 	bls.w	8000e2a <__udivmoddi4+0x27e>
 8000c0c:	3c02      	subs	r4, #2
 8000c0e:	4463      	add	r3, ip
 8000c10:	1a59      	subs	r1, r3, r1
 8000c12:	fa1f f38e 	uxth.w	r3, lr
 8000c16:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c1a:	fb07 1110 	mls	r1, r7, r0, r1
 8000c1e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c22:	fb00 f606 	mul.w	r6, r0, r6
 8000c26:	429e      	cmp	r6, r3
 8000c28:	d90a      	bls.n	8000c40 <__udivmoddi4+0x94>
 8000c2a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c32:	f080 80fc 	bcs.w	8000e2e <__udivmoddi4+0x282>
 8000c36:	429e      	cmp	r6, r3
 8000c38:	f240 80f9 	bls.w	8000e2e <__udivmoddi4+0x282>
 8000c3c:	4463      	add	r3, ip
 8000c3e:	3802      	subs	r0, #2
 8000c40:	1b9b      	subs	r3, r3, r6
 8000c42:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c46:	2100      	movs	r1, #0
 8000c48:	b11d      	cbz	r5, 8000c52 <__udivmoddi4+0xa6>
 8000c4a:	40d3      	lsrs	r3, r2
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	e9c5 3200 	strd	r3, r2, [r5]
 8000c52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c56:	428b      	cmp	r3, r1
 8000c58:	d905      	bls.n	8000c66 <__udivmoddi4+0xba>
 8000c5a:	b10d      	cbz	r5, 8000c60 <__udivmoddi4+0xb4>
 8000c5c:	e9c5 0100 	strd	r0, r1, [r5]
 8000c60:	2100      	movs	r1, #0
 8000c62:	4608      	mov	r0, r1
 8000c64:	e7f5      	b.n	8000c52 <__udivmoddi4+0xa6>
 8000c66:	fab3 f183 	clz	r1, r3
 8000c6a:	2900      	cmp	r1, #0
 8000c6c:	d146      	bne.n	8000cfc <__udivmoddi4+0x150>
 8000c6e:	42a3      	cmp	r3, r4
 8000c70:	d302      	bcc.n	8000c78 <__udivmoddi4+0xcc>
 8000c72:	4290      	cmp	r0, r2
 8000c74:	f0c0 80f0 	bcc.w	8000e58 <__udivmoddi4+0x2ac>
 8000c78:	1a86      	subs	r6, r0, r2
 8000c7a:	eb64 0303 	sbc.w	r3, r4, r3
 8000c7e:	2001      	movs	r0, #1
 8000c80:	2d00      	cmp	r5, #0
 8000c82:	d0e6      	beq.n	8000c52 <__udivmoddi4+0xa6>
 8000c84:	e9c5 6300 	strd	r6, r3, [r5]
 8000c88:	e7e3      	b.n	8000c52 <__udivmoddi4+0xa6>
 8000c8a:	2a00      	cmp	r2, #0
 8000c8c:	f040 8090 	bne.w	8000db0 <__udivmoddi4+0x204>
 8000c90:	eba1 040c 	sub.w	r4, r1, ip
 8000c94:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c98:	fa1f f78c 	uxth.w	r7, ip
 8000c9c:	2101      	movs	r1, #1
 8000c9e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000ca2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ca6:	fb08 4416 	mls	r4, r8, r6, r4
 8000caa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cae:	fb07 f006 	mul.w	r0, r7, r6
 8000cb2:	4298      	cmp	r0, r3
 8000cb4:	d908      	bls.n	8000cc8 <__udivmoddi4+0x11c>
 8000cb6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cba:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cbe:	d202      	bcs.n	8000cc6 <__udivmoddi4+0x11a>
 8000cc0:	4298      	cmp	r0, r3
 8000cc2:	f200 80cd 	bhi.w	8000e60 <__udivmoddi4+0x2b4>
 8000cc6:	4626      	mov	r6, r4
 8000cc8:	1a1c      	subs	r4, r3, r0
 8000cca:	fa1f f38e 	uxth.w	r3, lr
 8000cce:	fbb4 f0f8 	udiv	r0, r4, r8
 8000cd2:	fb08 4410 	mls	r4, r8, r0, r4
 8000cd6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cda:	fb00 f707 	mul.w	r7, r0, r7
 8000cde:	429f      	cmp	r7, r3
 8000ce0:	d908      	bls.n	8000cf4 <__udivmoddi4+0x148>
 8000ce2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ce6:	f100 34ff 	add.w	r4, r0, #4294967295
 8000cea:	d202      	bcs.n	8000cf2 <__udivmoddi4+0x146>
 8000cec:	429f      	cmp	r7, r3
 8000cee:	f200 80b0 	bhi.w	8000e52 <__udivmoddi4+0x2a6>
 8000cf2:	4620      	mov	r0, r4
 8000cf4:	1bdb      	subs	r3, r3, r7
 8000cf6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cfa:	e7a5      	b.n	8000c48 <__udivmoddi4+0x9c>
 8000cfc:	f1c1 0620 	rsb	r6, r1, #32
 8000d00:	408b      	lsls	r3, r1
 8000d02:	fa22 f706 	lsr.w	r7, r2, r6
 8000d06:	431f      	orrs	r7, r3
 8000d08:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d0c:	fa04 f301 	lsl.w	r3, r4, r1
 8000d10:	ea43 030c 	orr.w	r3, r3, ip
 8000d14:	40f4      	lsrs	r4, r6
 8000d16:	fa00 f801 	lsl.w	r8, r0, r1
 8000d1a:	0c38      	lsrs	r0, r7, #16
 8000d1c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d20:	fbb4 fef0 	udiv	lr, r4, r0
 8000d24:	fa1f fc87 	uxth.w	ip, r7
 8000d28:	fb00 441e 	mls	r4, r0, lr, r4
 8000d2c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d30:	fb0e f90c 	mul.w	r9, lr, ip
 8000d34:	45a1      	cmp	r9, r4
 8000d36:	fa02 f201 	lsl.w	r2, r2, r1
 8000d3a:	d90a      	bls.n	8000d52 <__udivmoddi4+0x1a6>
 8000d3c:	193c      	adds	r4, r7, r4
 8000d3e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d42:	f080 8084 	bcs.w	8000e4e <__udivmoddi4+0x2a2>
 8000d46:	45a1      	cmp	r9, r4
 8000d48:	f240 8081 	bls.w	8000e4e <__udivmoddi4+0x2a2>
 8000d4c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d50:	443c      	add	r4, r7
 8000d52:	eba4 0409 	sub.w	r4, r4, r9
 8000d56:	fa1f f983 	uxth.w	r9, r3
 8000d5a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d5e:	fb00 4413 	mls	r4, r0, r3, r4
 8000d62:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d66:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d6a:	45a4      	cmp	ip, r4
 8000d6c:	d907      	bls.n	8000d7e <__udivmoddi4+0x1d2>
 8000d6e:	193c      	adds	r4, r7, r4
 8000d70:	f103 30ff 	add.w	r0, r3, #4294967295
 8000d74:	d267      	bcs.n	8000e46 <__udivmoddi4+0x29a>
 8000d76:	45a4      	cmp	ip, r4
 8000d78:	d965      	bls.n	8000e46 <__udivmoddi4+0x29a>
 8000d7a:	3b02      	subs	r3, #2
 8000d7c:	443c      	add	r4, r7
 8000d7e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000d82:	fba0 9302 	umull	r9, r3, r0, r2
 8000d86:	eba4 040c 	sub.w	r4, r4, ip
 8000d8a:	429c      	cmp	r4, r3
 8000d8c:	46ce      	mov	lr, r9
 8000d8e:	469c      	mov	ip, r3
 8000d90:	d351      	bcc.n	8000e36 <__udivmoddi4+0x28a>
 8000d92:	d04e      	beq.n	8000e32 <__udivmoddi4+0x286>
 8000d94:	b155      	cbz	r5, 8000dac <__udivmoddi4+0x200>
 8000d96:	ebb8 030e 	subs.w	r3, r8, lr
 8000d9a:	eb64 040c 	sbc.w	r4, r4, ip
 8000d9e:	fa04 f606 	lsl.w	r6, r4, r6
 8000da2:	40cb      	lsrs	r3, r1
 8000da4:	431e      	orrs	r6, r3
 8000da6:	40cc      	lsrs	r4, r1
 8000da8:	e9c5 6400 	strd	r6, r4, [r5]
 8000dac:	2100      	movs	r1, #0
 8000dae:	e750      	b.n	8000c52 <__udivmoddi4+0xa6>
 8000db0:	f1c2 0320 	rsb	r3, r2, #32
 8000db4:	fa20 f103 	lsr.w	r1, r0, r3
 8000db8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dbc:	fa24 f303 	lsr.w	r3, r4, r3
 8000dc0:	4094      	lsls	r4, r2
 8000dc2:	430c      	orrs	r4, r1
 8000dc4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000dc8:	fa00 fe02 	lsl.w	lr, r0, r2
 8000dcc:	fa1f f78c 	uxth.w	r7, ip
 8000dd0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dd4:	fb08 3110 	mls	r1, r8, r0, r3
 8000dd8:	0c23      	lsrs	r3, r4, #16
 8000dda:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dde:	fb00 f107 	mul.w	r1, r0, r7
 8000de2:	4299      	cmp	r1, r3
 8000de4:	d908      	bls.n	8000df8 <__udivmoddi4+0x24c>
 8000de6:	eb1c 0303 	adds.w	r3, ip, r3
 8000dea:	f100 36ff 	add.w	r6, r0, #4294967295
 8000dee:	d22c      	bcs.n	8000e4a <__udivmoddi4+0x29e>
 8000df0:	4299      	cmp	r1, r3
 8000df2:	d92a      	bls.n	8000e4a <__udivmoddi4+0x29e>
 8000df4:	3802      	subs	r0, #2
 8000df6:	4463      	add	r3, ip
 8000df8:	1a5b      	subs	r3, r3, r1
 8000dfa:	b2a4      	uxth	r4, r4
 8000dfc:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e00:	fb08 3311 	mls	r3, r8, r1, r3
 8000e04:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e08:	fb01 f307 	mul.w	r3, r1, r7
 8000e0c:	42a3      	cmp	r3, r4
 8000e0e:	d908      	bls.n	8000e22 <__udivmoddi4+0x276>
 8000e10:	eb1c 0404 	adds.w	r4, ip, r4
 8000e14:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e18:	d213      	bcs.n	8000e42 <__udivmoddi4+0x296>
 8000e1a:	42a3      	cmp	r3, r4
 8000e1c:	d911      	bls.n	8000e42 <__udivmoddi4+0x296>
 8000e1e:	3902      	subs	r1, #2
 8000e20:	4464      	add	r4, ip
 8000e22:	1ae4      	subs	r4, r4, r3
 8000e24:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e28:	e739      	b.n	8000c9e <__udivmoddi4+0xf2>
 8000e2a:	4604      	mov	r4, r0
 8000e2c:	e6f0      	b.n	8000c10 <__udivmoddi4+0x64>
 8000e2e:	4608      	mov	r0, r1
 8000e30:	e706      	b.n	8000c40 <__udivmoddi4+0x94>
 8000e32:	45c8      	cmp	r8, r9
 8000e34:	d2ae      	bcs.n	8000d94 <__udivmoddi4+0x1e8>
 8000e36:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e3a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e3e:	3801      	subs	r0, #1
 8000e40:	e7a8      	b.n	8000d94 <__udivmoddi4+0x1e8>
 8000e42:	4631      	mov	r1, r6
 8000e44:	e7ed      	b.n	8000e22 <__udivmoddi4+0x276>
 8000e46:	4603      	mov	r3, r0
 8000e48:	e799      	b.n	8000d7e <__udivmoddi4+0x1d2>
 8000e4a:	4630      	mov	r0, r6
 8000e4c:	e7d4      	b.n	8000df8 <__udivmoddi4+0x24c>
 8000e4e:	46d6      	mov	lr, sl
 8000e50:	e77f      	b.n	8000d52 <__udivmoddi4+0x1a6>
 8000e52:	4463      	add	r3, ip
 8000e54:	3802      	subs	r0, #2
 8000e56:	e74d      	b.n	8000cf4 <__udivmoddi4+0x148>
 8000e58:	4606      	mov	r6, r0
 8000e5a:	4623      	mov	r3, r4
 8000e5c:	4608      	mov	r0, r1
 8000e5e:	e70f      	b.n	8000c80 <__udivmoddi4+0xd4>
 8000e60:	3e02      	subs	r6, #2
 8000e62:	4463      	add	r3, ip
 8000e64:	e730      	b.n	8000cc8 <__udivmoddi4+0x11c>
 8000e66:	bf00      	nop

08000e68 <__aeabi_idiv0>:
 8000e68:	4770      	bx	lr
 8000e6a:	bf00      	nop

08000e6c <Get_Mode>:
volatile int timer_count = 0;
float turning_time = 0;
int save[4] = {0, 0, 0, 0};
float ratio = 0;

int Get_Mode(int MSB_state, int LSB_state) {
 8000e6c:	b480      	push	{r7}
 8000e6e:	b085      	sub	sp, #20
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
 8000e74:	6039      	str	r1, [r7, #0]
	static const int id_lookup[4] = {MANUAL_MODE, CIRCLE_MODE,  BACK_FORTH_MODE, SQUARE_MODE};
	int bin = ((MSB_state & 1) << 1) | (LSB_state & 1);
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	005b      	lsls	r3, r3, #1
 8000e7a:	f003 0202 	and.w	r2, r3, #2
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	f003 0301 	and.w	r3, r3, #1
 8000e84:	4313      	orrs	r3, r2
 8000e86:	60fb      	str	r3, [r7, #12]
	return id_lookup[bin];
 8000e88:	4a04      	ldr	r2, [pc, #16]	@ (8000e9c <Get_Mode+0x30>)
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8000e90:	4618      	mov	r0, r3
 8000e92:	3714      	adds	r7, #20
 8000e94:	46bd      	mov	sp, r7
 8000e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9a:	4770      	bx	lr
 8000e9c:	08008f10 	.word	0x08008f10

08000ea0 <Get_Mode_String>:

char* Get_Mode_String() {
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b082      	sub	sp, #8
 8000ea4:	af00      	add	r7, sp, #0
	const size_t buffer_size = 8;
 8000ea6:	2308      	movs	r3, #8
 8000ea8:	603b      	str	r3, [r7, #0]
	char* str = malloc(buffer_size);
 8000eaa:	6838      	ldr	r0, [r7, #0]
 8000eac:	f006 fcba 	bl	8007824 <malloc>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	607b      	str	r3, [r7, #4]
	switch(curr_mode) {
 8000eb4:	4b11      	ldr	r3, [pc, #68]	@ (8000efc <Get_Mode_String+0x5c>)
 8000eb6:	781b      	ldrb	r3, [r3, #0]
 8000eb8:	2b03      	cmp	r3, #3
 8000eba:	d817      	bhi.n	8000eec <Get_Mode_String+0x4c>
 8000ebc:	a201      	add	r2, pc, #4	@ (adr r2, 8000ec4 <Get_Mode_String+0x24>)
 8000ebe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ec2:	bf00      	nop
 8000ec4:	08000ed5 	.word	0x08000ed5
 8000ec8:	08000edb 	.word	0x08000edb
 8000ecc:	08000ee1 	.word	0x08000ee1
 8000ed0:	08000ee7 	.word	0x08000ee7
		case MANUAL_MODE:
			str = "MANUAL";
 8000ed4:	4b0a      	ldr	r3, [pc, #40]	@ (8000f00 <Get_Mode_String+0x60>)
 8000ed6:	607b      	str	r3, [r7, #4]
			break;
 8000ed8:	e00b      	b.n	8000ef2 <Get_Mode_String+0x52>
		case CIRCLE_MODE:
			str = "CIRCLE";
 8000eda:	4b0a      	ldr	r3, [pc, #40]	@ (8000f04 <Get_Mode_String+0x64>)
 8000edc:	607b      	str	r3, [r7, #4]
			break;
 8000ede:	e008      	b.n	8000ef2 <Get_Mode_String+0x52>
		case BACK_FORTH_MODE:
			str = "LINE";
 8000ee0:	4b09      	ldr	r3, [pc, #36]	@ (8000f08 <Get_Mode_String+0x68>)
 8000ee2:	607b      	str	r3, [r7, #4]
			break;
 8000ee4:	e005      	b.n	8000ef2 <Get_Mode_String+0x52>
		case SQUARE_MODE:
			str = "SQUARE";
 8000ee6:	4b09      	ldr	r3, [pc, #36]	@ (8000f0c <Get_Mode_String+0x6c>)
 8000ee8:	607b      	str	r3, [r7, #4]
			break;
 8000eea:	e002      	b.n	8000ef2 <Get_Mode_String+0x52>
		default:
			str = "ERROR";
 8000eec:	4b08      	ldr	r3, [pc, #32]	@ (8000f10 <Get_Mode_String+0x70>)
 8000eee:	607b      	str	r3, [r7, #4]
			break;
 8000ef0:	bf00      	nop
	}
	return str;
 8000ef2:	687b      	ldr	r3, [r7, #4]
}
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	3708      	adds	r7, #8
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	200000ba 	.word	0x200000ba
 8000f00:	08008b24 	.word	0x08008b24
 8000f04:	08008b2c 	.word	0x08008b2c
 8000f08:	08008b34 	.word	0x08008b34
 8000f0c:	08008b3c 	.word	0x08008b3c
 8000f10:	08008b44 	.word	0x08008b44
 8000f14:	00000000 	.word	0x00000000

08000f18 <Auto_Angle>:

void Auto_Angle(float value) {
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b082      	sub	sp, #8
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	ed87 0a01 	vstr	s0, [r7, #4]
	// Initial setup
	if(timer_count == 0) {
 8000f22:	4b39      	ldr	r3, [pc, #228]	@ (8001008 <Auto_Angle+0xf0>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d14b      	bne.n	8000fc2 <Auto_Angle+0xaa>
		LCD_Manuel(0);
 8000f2a:	2000      	movs	r0, #0
 8000f2c:	f001 fe12 	bl	8002b54 <LCD_Manuel>
		LCD_Mode();
 8000f30:	f001 fe5e 	bl	8002bf0 <LCD_Mode>

		// Calculate the duration for the turn
		turning_time = fabs(value) * TRACK_WIDTH;
 8000f34:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f38:	eef0 7ae7 	vabs.f32	s15, s15
 8000f3c:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 800100c <Auto_Angle+0xf4>
 8000f40:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f44:	4b32      	ldr	r3, [pc, #200]	@ (8001010 <Auto_Angle+0xf8>)
 8000f46:	edc3 7a00 	vstr	s15, [r3]

		// Determine direction of turn
		if (value > 0) {
 8000f4a:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f4e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000f52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f56:	dd18      	ble.n	8000f8a <Auto_Angle+0x72>
			turning_time /= (360.0 * CLOCKWISE_FACTOR);
 8000f58:	4b2d      	ldr	r3, [pc, #180]	@ (8001010 <Auto_Angle+0xf8>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f7ff fb0b 	bl	8000578 <__aeabi_f2d>
 8000f62:	a327      	add	r3, pc, #156	@ (adr r3, 8001000 <Auto_Angle+0xe8>)
 8000f64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f68:	f7ff fc88 	bl	800087c <__aeabi_ddiv>
 8000f6c:	4602      	mov	r2, r0
 8000f6e:	460b      	mov	r3, r1
 8000f70:	4610      	mov	r0, r2
 8000f72:	4619      	mov	r1, r3
 8000f74:	f7ff fdb2 	bl	8000adc <__aeabi_d2f>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	4a25      	ldr	r2, [pc, #148]	@ (8001010 <Auto_Angle+0xf8>)
 8000f7c:	6013      	str	r3, [r2, #0]
			Droite(BASE_SPEED, &htim3);
 8000f7e:	4925      	ldr	r1, [pc, #148]	@ (8001014 <Auto_Angle+0xfc>)
 8000f80:	f44f 70e1 	mov.w	r0, #450	@ 0x1c2
 8000f84:	f000 fb48 	bl	8001618 <Droite>
 8000f88:	e00e      	b.n	8000fa8 <Auto_Angle+0x90>
		}
		else {
			turning_time /= (360.0 * COUNTER_CLW_FACTOR);
 8000f8a:	4b21      	ldr	r3, [pc, #132]	@ (8001010 <Auto_Angle+0xf8>)
 8000f8c:	ed93 7a00 	vldr	s14, [r3]
 8000f90:	eddf 6a21 	vldr	s13, [pc, #132]	@ 8001018 <Auto_Angle+0x100>
 8000f94:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f98:	4b1d      	ldr	r3, [pc, #116]	@ (8001010 <Auto_Angle+0xf8>)
 8000f9a:	edc3 7a00 	vstr	s15, [r3]
			Gauche(BASE_SPEED, &htim3);
 8000f9e:	491d      	ldr	r1, [pc, #116]	@ (8001014 <Auto_Angle+0xfc>)
 8000fa0:	f44f 70e1 	mov.w	r0, #450	@ 0x1c2
 8000fa4:	f000 fb98 	bl	80016d8 <Gauche>
		}

		// Convert turning time in µs
		turning_time *= 1e6;
 8000fa8:	4b19      	ldr	r3, [pc, #100]	@ (8001010 <Auto_Angle+0xf8>)
 8000faa:	edd3 7a00 	vldr	s15, [r3]
 8000fae:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 800101c <Auto_Angle+0x104>
 8000fb2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000fb6:	4b16      	ldr	r3, [pc, #88]	@ (8001010 <Auto_Angle+0xf8>)
 8000fb8:	edc3 7a00 	vstr	s15, [r3]

		// Start timer
	    HAL_TIM_Base_Start_IT(&htim7);
 8000fbc:	4818      	ldr	r0, [pc, #96]	@ (8001020 <Auto_Angle+0x108>)
 8000fbe:	f004 fc11 	bl	80057e4 <HAL_TIM_Base_Start_IT>
	}

    // Stop when finished
	if(timer_count > (int)turning_time) {
 8000fc2:	4b13      	ldr	r3, [pc, #76]	@ (8001010 <Auto_Angle+0xf8>)
 8000fc4:	edd3 7a00 	vldr	s15, [r3]
 8000fc8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000fcc:	ee17 2a90 	vmov	r2, s15
 8000fd0:	4b0d      	ldr	r3, [pc, #52]	@ (8001008 <Auto_Angle+0xf0>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	429a      	cmp	r2, r3
 8000fd6:	da0f      	bge.n	8000ff8 <Auto_Angle+0xe0>

		// Stop timer
		HAL_TIM_Base_Stop_IT(&htim7);
 8000fd8:	4811      	ldr	r0, [pc, #68]	@ (8001020 <Auto_Angle+0x108>)
 8000fda:	f004 fc73 	bl	80058c4 <HAL_TIM_Base_Stop_IT>

		// Stop the motors
		Stop(&htim3);
 8000fde:	480d      	ldr	r0, [pc, #52]	@ (8001014 <Auto_Angle+0xfc>)
 8000fe0:	f000 fc3a 	bl	8001858 <Stop>

		// Reset temporal counter
		timer_count = 0;
 8000fe4:	4b08      	ldr	r3, [pc, #32]	@ (8001008 <Auto_Angle+0xf0>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	601a      	str	r2, [r3, #0]

		// Ready for next step
		curr_step++;
 8000fea:	4b0e      	ldr	r3, [pc, #56]	@ (8001024 <Auto_Angle+0x10c>)
 8000fec:	781b      	ldrb	r3, [r3, #0]
 8000fee:	3301      	adds	r3, #1
 8000ff0:	b2da      	uxtb	r2, r3
 8000ff2:	4b0c      	ldr	r3, [pc, #48]	@ (8001024 <Auto_Angle+0x10c>)
 8000ff4:	701a      	strb	r2, [r3, #0]
	}

	return;
 8000ff6:	bf00      	nop
 8000ff8:	bf00      	nop
}
 8000ffa:	3708      	adds	r7, #8
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	28f5c290 	.word	0x28f5c290
 8001004:	40d7831c 	.word	0x40d7831c
 8001008:	200000d0 	.word	0x200000d0
 800100c:	43880000 	.word	0x43880000
 8001010:	200000d4 	.word	0x200000d4
 8001014:	200001e0 	.word	0x200001e0
 8001018:	46ab9000 	.word	0x46ab9000
 800101c:	49742400 	.word	0x49742400
 8001020:	200002b8 	.word	0x200002b8
 8001024:	20000000 	.word	0x20000000

08001028 <Auto_Line>:

void Auto_Line(int dist, int min_speed, int max_speed) {
 8001028:	b580      	push	{r7, lr}
 800102a:	b088      	sub	sp, #32
 800102c:	af00      	add	r7, sp, #0
 800102e:	60f8      	str	r0, [r7, #12]
 8001030:	60b9      	str	r1, [r7, #8]
 8001032:	607a      	str	r2, [r7, #4]
    // Constants
    const float accel_fraction = 0.4; // 40% of total time for acceleration
 8001034:	4b70      	ldr	r3, [pc, #448]	@ (80011f8 <Auto_Line+0x1d0>)
 8001036:	61fb      	str	r3, [r7, #28]
    const float decel_fraction = 0.4; // 40% of total time for deceleration
 8001038:	4b6f      	ldr	r3, [pc, #444]	@ (80011f8 <Auto_Line+0x1d0>)
 800103a:	61bb      	str	r3, [r7, #24]

    // Initial setup
    if (timer_count == 0) {
 800103c:	4b6f      	ldr	r3, [pc, #444]	@ (80011fc <Auto_Line+0x1d4>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	2b00      	cmp	r3, #0
 8001042:	d16f      	bne.n	8001124 <Auto_Line+0xfc>
    	LCD_Manuel(0);
 8001044:	2000      	movs	r0, #0
 8001046:	f001 fd85 	bl	8002b54 <LCD_Manuel>
    	LCD_Mode();
 800104a:	f001 fdd1 	bl	8002bf0 <LCD_Mode>

    	// Calculate total pulses required
    	float total_pulses = dist / TRACK_RESOLUTION;
 800104e:	68f8      	ldr	r0, [r7, #12]
 8001050:	f7ff fa80 	bl	8000554 <__aeabi_i2d>
 8001054:	a364      	add	r3, pc, #400	@ (adr r3, 80011e8 <Auto_Line+0x1c0>)
 8001056:	e9d3 2300 	ldrd	r2, r3, [r3]
 800105a:	f7ff fc0f 	bl	800087c <__aeabi_ddiv>
 800105e:	4602      	mov	r2, r0
 8001060:	460b      	mov	r3, r1
 8001062:	4610      	mov	r0, r2
 8001064:	4619      	mov	r1, r3
 8001066:	f7ff fd39 	bl	8000adc <__aeabi_d2f>
 800106a:	4603      	mov	r3, r0
 800106c:	617b      	str	r3, [r7, #20]

        // Calculate total time
        turning_time = (min_speed + max_speed) / 2.0;
 800106e:	68ba      	ldr	r2, [r7, #8]
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	4413      	add	r3, r2
 8001074:	4618      	mov	r0, r3
 8001076:	f7ff fa6d 	bl	8000554 <__aeabi_i2d>
 800107a:	f04f 0200 	mov.w	r2, #0
 800107e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001082:	f7ff fbfb 	bl	800087c <__aeabi_ddiv>
 8001086:	4602      	mov	r2, r0
 8001088:	460b      	mov	r3, r1
 800108a:	4610      	mov	r0, r2
 800108c:	4619      	mov	r1, r3
 800108e:	f7ff fd25 	bl	8000adc <__aeabi_d2f>
 8001092:	4603      	mov	r3, r0
 8001094:	4a5a      	ldr	r2, [pc, #360]	@ (8001200 <Auto_Line+0x1d8>)
 8001096:	6013      	str	r3, [r2, #0]
        total_time = (int)((total_pulses / turning_time) * 1e7);
 8001098:	4b59      	ldr	r3, [pc, #356]	@ (8001200 <Auto_Line+0x1d8>)
 800109a:	edd3 7a00 	vldr	s15, [r3]
 800109e:	ed97 7a05 	vldr	s14, [r7, #20]
 80010a2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80010a6:	ee16 0a90 	vmov	r0, s13
 80010aa:	f7ff fa65 	bl	8000578 <__aeabi_f2d>
 80010ae:	a350      	add	r3, pc, #320	@ (adr r3, 80011f0 <Auto_Line+0x1c8>)
 80010b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010b4:	f7ff fab8 	bl	8000628 <__aeabi_dmul>
 80010b8:	4602      	mov	r2, r0
 80010ba:	460b      	mov	r3, r1
 80010bc:	4610      	mov	r0, r2
 80010be:	4619      	mov	r1, r3
 80010c0:	f7ff fcc4 	bl	8000a4c <__aeabi_d2iz>
 80010c4:	4603      	mov	r3, r0
 80010c6:	4a4f      	ldr	r2, [pc, #316]	@ (8001204 <Auto_Line+0x1dc>)
 80010c8:	6013      	str	r3, [r2, #0]

        // Calculate time for each phase
        accel_time = (int)(total_time * accel_fraction);
 80010ca:	4b4e      	ldr	r3, [pc, #312]	@ (8001204 <Auto_Line+0x1dc>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	ee07 3a90 	vmov	s15, r3
 80010d2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80010d6:	edd7 7a07 	vldr	s15, [r7, #28]
 80010da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010de:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80010e2:	ee17 2a90 	vmov	r2, s15
 80010e6:	4b48      	ldr	r3, [pc, #288]	@ (8001208 <Auto_Line+0x1e0>)
 80010e8:	601a      	str	r2, [r3, #0]
        decel_time = (int)(total_time * decel_fraction);
 80010ea:	4b46      	ldr	r3, [pc, #280]	@ (8001204 <Auto_Line+0x1dc>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	ee07 3a90 	vmov	s15, r3
 80010f2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80010f6:	edd7 7a06 	vldr	s15, [r7, #24]
 80010fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001102:	ee17 2a90 	vmov	r2, s15
 8001106:	4b41      	ldr	r3, [pc, #260]	@ (800120c <Auto_Line+0x1e4>)
 8001108:	601a      	str	r2, [r3, #0]
        mid_time = total_time - accel_time - decel_time;
 800110a:	4b3e      	ldr	r3, [pc, #248]	@ (8001204 <Auto_Line+0x1dc>)
 800110c:	681a      	ldr	r2, [r3, #0]
 800110e:	4b3e      	ldr	r3, [pc, #248]	@ (8001208 <Auto_Line+0x1e0>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	1ad2      	subs	r2, r2, r3
 8001114:	4b3d      	ldr	r3, [pc, #244]	@ (800120c <Auto_Line+0x1e4>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	1ad3      	subs	r3, r2, r3
 800111a:	4a3d      	ldr	r2, [pc, #244]	@ (8001210 <Auto_Line+0x1e8>)
 800111c:	6013      	str	r3, [r2, #0]

        // Start timer
        HAL_TIM_Base_Start_IT(&htim7);
 800111e:	483d      	ldr	r0, [pc, #244]	@ (8001214 <Auto_Line+0x1ec>)
 8001120:	f004 fb60 	bl	80057e4 <HAL_TIM_Base_Start_IT>
    }

    // Acceleration phase
    if (timer_count < accel_time) {
 8001124:	4b35      	ldr	r3, [pc, #212]	@ (80011fc <Auto_Line+0x1d4>)
 8001126:	681a      	ldr	r2, [r3, #0]
 8001128:	4b37      	ldr	r3, [pc, #220]	@ (8001208 <Auto_Line+0x1e0>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	429a      	cmp	r2, r3
 800112e:	da0f      	bge.n	8001150 <Auto_Line+0x128>
        current_speed = min_speed + (max_speed - min_speed) * timer_count / accel_time;
 8001130:	687a      	ldr	r2, [r7, #4]
 8001132:	68bb      	ldr	r3, [r7, #8]
 8001134:	1ad3      	subs	r3, r2, r3
 8001136:	4a31      	ldr	r2, [pc, #196]	@ (80011fc <Auto_Line+0x1d4>)
 8001138:	6812      	ldr	r2, [r2, #0]
 800113a:	fb03 f202 	mul.w	r2, r3, r2
 800113e:	4b32      	ldr	r3, [pc, #200]	@ (8001208 <Auto_Line+0x1e0>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	fb92 f2f3 	sdiv	r2, r2, r3
 8001146:	68bb      	ldr	r3, [r7, #8]
 8001148:	4413      	add	r3, r2
 800114a:	4a33      	ldr	r2, [pc, #204]	@ (8001218 <Auto_Line+0x1f0>)
 800114c:	6013      	str	r3, [r2, #0]
 800114e:	e03a      	b.n	80011c6 <Auto_Line+0x19e>
    }

    // Constant speed phase
    else if (timer_count < accel_time + mid_time) {
 8001150:	4b2d      	ldr	r3, [pc, #180]	@ (8001208 <Auto_Line+0x1e0>)
 8001152:	681a      	ldr	r2, [r3, #0]
 8001154:	4b2e      	ldr	r3, [pc, #184]	@ (8001210 <Auto_Line+0x1e8>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	441a      	add	r2, r3
 800115a:	4b28      	ldr	r3, [pc, #160]	@ (80011fc <Auto_Line+0x1d4>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	429a      	cmp	r2, r3
 8001160:	dd03      	ble.n	800116a <Auto_Line+0x142>
        current_speed = max_speed;
 8001162:	4a2d      	ldr	r2, [pc, #180]	@ (8001218 <Auto_Line+0x1f0>)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	6013      	str	r3, [r2, #0]
 8001168:	e02d      	b.n	80011c6 <Auto_Line+0x19e>
    }

    // Deceleration phase
    else if (timer_count < total_time) {
 800116a:	4b24      	ldr	r3, [pc, #144]	@ (80011fc <Auto_Line+0x1d4>)
 800116c:	681a      	ldr	r2, [r3, #0]
 800116e:	4b25      	ldr	r3, [pc, #148]	@ (8001204 <Auto_Line+0x1dc>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	429a      	cmp	r2, r3
 8001174:	da17      	bge.n	80011a6 <Auto_Line+0x17e>
        int decel_time_elapsed = timer_count - (accel_time + mid_time);
 8001176:	4b21      	ldr	r3, [pc, #132]	@ (80011fc <Auto_Line+0x1d4>)
 8001178:	681a      	ldr	r2, [r3, #0]
 800117a:	4b23      	ldr	r3, [pc, #140]	@ (8001208 <Auto_Line+0x1e0>)
 800117c:	6819      	ldr	r1, [r3, #0]
 800117e:	4b24      	ldr	r3, [pc, #144]	@ (8001210 <Auto_Line+0x1e8>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	440b      	add	r3, r1
 8001184:	1ad3      	subs	r3, r2, r3
 8001186:	613b      	str	r3, [r7, #16]
        current_speed = max_speed - (max_speed - min_speed) * decel_time_elapsed / decel_time;
 8001188:	687a      	ldr	r2, [r7, #4]
 800118a:	68bb      	ldr	r3, [r7, #8]
 800118c:	1ad3      	subs	r3, r2, r3
 800118e:	693a      	ldr	r2, [r7, #16]
 8001190:	fb03 f202 	mul.w	r2, r3, r2
 8001194:	4b1d      	ldr	r3, [pc, #116]	@ (800120c <Auto_Line+0x1e4>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	fb92 f3f3 	sdiv	r3, r2, r3
 800119c:	687a      	ldr	r2, [r7, #4]
 800119e:	1ad3      	subs	r3, r2, r3
 80011a0:	4a1d      	ldr	r2, [pc, #116]	@ (8001218 <Auto_Line+0x1f0>)
 80011a2:	6013      	str	r3, [r2, #0]
 80011a4:	e00f      	b.n	80011c6 <Auto_Line+0x19e>
    }

    // Stop when finished
    else {
        // Stop timer
        HAL_TIM_Base_Stop_IT(&htim7);
 80011a6:	481b      	ldr	r0, [pc, #108]	@ (8001214 <Auto_Line+0x1ec>)
 80011a8:	f004 fb8c 	bl	80058c4 <HAL_TIM_Base_Stop_IT>

        // Stop the motors
        Stop(&htim3);
 80011ac:	481b      	ldr	r0, [pc, #108]	@ (800121c <Auto_Line+0x1f4>)
 80011ae:	f000 fb53 	bl	8001858 <Stop>

        // Reset temporal counter
        timer_count = 0;
 80011b2:	4b12      	ldr	r3, [pc, #72]	@ (80011fc <Auto_Line+0x1d4>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	601a      	str	r2, [r3, #0]

        // Ready for next step
        curr_step++;
 80011b8:	4b19      	ldr	r3, [pc, #100]	@ (8001220 <Auto_Line+0x1f8>)
 80011ba:	781b      	ldrb	r3, [r3, #0]
 80011bc:	3301      	adds	r3, #1
 80011be:	b2da      	uxtb	r2, r3
 80011c0:	4b17      	ldr	r3, [pc, #92]	@ (8001220 <Auto_Line+0x1f8>)
 80011c2:	701a      	strb	r2, [r3, #0]

        // Exit
        return;
 80011c4:	e00a      	b.n	80011dc <Auto_Line+0x1b4>
    }

    // Adjust speed every iteration
    if(!pause)
 80011c6:	4b17      	ldr	r3, [pc, #92]	@ (8001224 <Auto_Line+0x1fc>)
 80011c8:	781b      	ldrb	r3, [r3, #0]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d105      	bne.n	80011da <Auto_Line+0x1b2>
    	Avancer(current_speed, &htim3);
 80011ce:	4b12      	ldr	r3, [pc, #72]	@ (8001218 <Auto_Line+0x1f0>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	4912      	ldr	r1, [pc, #72]	@ (800121c <Auto_Line+0x1f4>)
 80011d4:	4618      	mov	r0, r3
 80011d6:	f000 f9bf 	bl	8001558 <Avancer>

    return;
 80011da:	bf00      	nop
}
 80011dc:	3720      	adds	r7, #32
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	f3af 8000 	nop.w
 80011e8:	e353f7cf 	.word	0xe353f7cf
 80011ec:	40129ba5 	.word	0x40129ba5
 80011f0:	00000000 	.word	0x00000000
 80011f4:	416312d0 	.word	0x416312d0
 80011f8:	3ecccccd 	.word	0x3ecccccd
 80011fc:	200000d0 	.word	0x200000d0
 8001200:	200000d4 	.word	0x200000d4
 8001204:	200000bc 	.word	0x200000bc
 8001208:	200000c0 	.word	0x200000c0
 800120c:	200000c4 	.word	0x200000c4
 8001210:	200000c8 	.word	0x200000c8
 8001214:	200002b8 	.word	0x200002b8
 8001218:	200000cc 	.word	0x200000cc
 800121c:	200001e0 	.word	0x200001e0
 8001220:	20000000 	.word	0x20000000
 8001224:	200000b8 	.word	0x200000b8

08001228 <Auto_Circle>:


void Auto_Circle() {
 8001228:	b580      	push	{r7, lr}
 800122a:	b082      	sub	sp, #8
 800122c:	af00      	add	r7, sp, #0
	// Initial setup
	if(timer_count == 0) {
 800122e:	4b42      	ldr	r3, [pc, #264]	@ (8001338 <Auto_Circle+0x110>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d15c      	bne.n	80012f0 <Auto_Circle+0xc8>
		LCD_Manuel(0);
 8001236:	2000      	movs	r0, #0
 8001238:	f001 fc8c 	bl	8002b54 <LCD_Manuel>
		LCD_Mode();
 800123c:	f001 fcd8 	bl	8002bf0 <LCD_Mode>

		// Calculate total outer wheel distance
		float outer_circumference = (PI*DISTANCE) / TRACK_RESOLUTION;//785
 8001240:	4b3e      	ldr	r3, [pc, #248]	@ (800133c <Auto_Circle+0x114>)
 8001242:	607b      	str	r3, [r7, #4]
		float inner_circumference = outer_circumference - TRACK_WIDTH;//513
 8001244:	edd7 7a01 	vldr	s15, [r7, #4]
 8001248:	ed9f 7a3d 	vldr	s14, [pc, #244]	@ 8001340 <Auto_Circle+0x118>
 800124c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001250:	edc7 7a00 	vstr	s15, [r7]

		// Calculate total time
		total_time = (int)((outer_circumference / BASE_SPEED) * 1e7);//17.4s
 8001254:	edd7 7a01 	vldr	s15, [r7, #4]
 8001258:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 8001344 <Auto_Circle+0x11c>
 800125c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001260:	ee16 0a90 	vmov	r0, s13
 8001264:	f7ff f988 	bl	8000578 <__aeabi_f2d>
 8001268:	a32f      	add	r3, pc, #188	@ (adr r3, 8001328 <Auto_Circle+0x100>)
 800126a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800126e:	f7ff f9db 	bl	8000628 <__aeabi_dmul>
 8001272:	4602      	mov	r2, r0
 8001274:	460b      	mov	r3, r1
 8001276:	4610      	mov	r0, r2
 8001278:	4619      	mov	r1, r3
 800127a:	f7ff fbe7 	bl	8000a4c <__aeabi_d2iz>
 800127e:	4603      	mov	r3, r0
 8001280:	4a31      	ldr	r2, [pc, #196]	@ (8001348 <Auto_Circle+0x120>)
 8001282:	6013      	str	r3, [r2, #0]

		// Calculate wheel inner wheel speed
		ratio = 0.9 * (inner_circumference / outer_circumference);//0.588
 8001284:	ed97 7a00 	vldr	s14, [r7]
 8001288:	edd7 7a01 	vldr	s15, [r7, #4]
 800128c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001290:	ee16 0a90 	vmov	r0, s13
 8001294:	f7ff f970 	bl	8000578 <__aeabi_f2d>
 8001298:	a325      	add	r3, pc, #148	@ (adr r3, 8001330 <Auto_Circle+0x108>)
 800129a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800129e:	f7ff f9c3 	bl	8000628 <__aeabi_dmul>
 80012a2:	4602      	mov	r2, r0
 80012a4:	460b      	mov	r3, r1
 80012a6:	4610      	mov	r0, r2
 80012a8:	4619      	mov	r1, r3
 80012aa:	f7ff fc17 	bl	8000adc <__aeabi_d2f>
 80012ae:	4603      	mov	r3, r0
 80012b0:	4a26      	ldr	r2, [pc, #152]	@ (800134c <Auto_Circle+0x124>)
 80012b2:	6013      	str	r3, [r2, #0]

		// Constant speed
		htim3.Instance -> CCR2 = 0;
 80012b4:	4b26      	ldr	r3, [pc, #152]	@ (8001350 <Auto_Circle+0x128>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	2200      	movs	r2, #0
 80012ba:	639a      	str	r2, [r3, #56]	@ 0x38
		htim3.Instance -> CCR4 = 0;
 80012bc:	4b24      	ldr	r3, [pc, #144]	@ (8001350 <Auto_Circle+0x128>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	2200      	movs	r2, #0
 80012c2:	641a      	str	r2, [r3, #64]	@ 0x40
		htim3.Instance -> CCR1 = BASE_SPEED;
 80012c4:	4b22      	ldr	r3, [pc, #136]	@ (8001350 <Auto_Circle+0x128>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f44f 72e1 	mov.w	r2, #450	@ 0x1c2
 80012cc:	635a      	str	r2, [r3, #52]	@ 0x34
		htim3.Instance -> CCR3 = (ratio * BASE_SPEED);
 80012ce:	4b1f      	ldr	r3, [pc, #124]	@ (800134c <Auto_Circle+0x124>)
 80012d0:	edd3 7a00 	vldr	s15, [r3]
 80012d4:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 8001344 <Auto_Circle+0x11c>
 80012d8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012dc:	4b1c      	ldr	r3, [pc, #112]	@ (8001350 <Auto_Circle+0x128>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80012e4:	ee17 2a90 	vmov	r2, s15
 80012e8:	63da      	str	r2, [r3, #60]	@ 0x3c
		HAL_TIM_Base_Start_IT(&htim7);
 80012ea:	481a      	ldr	r0, [pc, #104]	@ (8001354 <Auto_Circle+0x12c>)
 80012ec:	f004 fa7a 	bl	80057e4 <HAL_TIM_Base_Start_IT>
	}

	// Stop when finished
	if(timer_count > (int)total_time) {
 80012f0:	4b11      	ldr	r3, [pc, #68]	@ (8001338 <Auto_Circle+0x110>)
 80012f2:	681a      	ldr	r2, [r3, #0]
 80012f4:	4b14      	ldr	r3, [pc, #80]	@ (8001348 <Auto_Circle+0x120>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	429a      	cmp	r2, r3
 80012fa:	dd11      	ble.n	8001320 <Auto_Circle+0xf8>

		// Stop timer
		HAL_TIM_Base_Stop_IT(&htim7);
 80012fc:	4815      	ldr	r0, [pc, #84]	@ (8001354 <Auto_Circle+0x12c>)
 80012fe:	f004 fae1 	bl	80058c4 <HAL_TIM_Base_Stop_IT>

		// Stop the motors
		Stop(&htim3);
 8001302:	4813      	ldr	r0, [pc, #76]	@ (8001350 <Auto_Circle+0x128>)
 8001304:	f000 faa8 	bl	8001858 <Stop>

		// Reset temporal counter
		timer_count = 0;
 8001308:	4b0b      	ldr	r3, [pc, #44]	@ (8001338 <Auto_Circle+0x110>)
 800130a:	2200      	movs	r2, #0
 800130c:	601a      	str	r2, [r3, #0]

		// End of sequence : reset current step and set to manual mode after drawing shape
		curr_mode = MANUAL_MODE;
 800130e:	4b12      	ldr	r3, [pc, #72]	@ (8001358 <Auto_Circle+0x130>)
 8001310:	2200      	movs	r2, #0
 8001312:	701a      	strb	r2, [r3, #0]
		LCD_Mode();
 8001314:	f001 fc6c 	bl	8002bf0 <LCD_Mode>
		LCD_Manuel(3);
 8001318:	2003      	movs	r0, #3
 800131a:	f001 fc1b 	bl	8002b54 <LCD_Manuel>
	}

	return;
 800131e:	bf00      	nop
 8001320:	bf00      	nop
}
 8001322:	3708      	adds	r7, #8
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}
 8001328:	00000000 	.word	0x00000000
 800132c:	416312d0 	.word	0x416312d0
 8001330:	cccccccd 	.word	0xcccccccd
 8001334:	3feccccc 	.word	0x3feccccc
 8001338:	200000d0 	.word	0x200000d0
 800133c:	4428d480 	.word	0x4428d480
 8001340:	43880000 	.word	0x43880000
 8001344:	43e10000 	.word	0x43e10000
 8001348:	200000bc 	.word	0x200000bc
 800134c:	200000e8 	.word	0x200000e8
 8001350:	200001e0 	.word	0x200001e0
 8001354:	200002b8 	.word	0x200002b8
 8001358:	200000ba 	.word	0x200000ba

0800135c <Auto_Back_Forth>:

void Auto_Back_Forth() {
 800135c:	b580      	push	{r7, lr}
 800135e:	af00      	add	r7, sp, #0
	// Manage ongoing step
	switch(curr_step) {
 8001360:	4b1c      	ldr	r3, [pc, #112]	@ (80013d4 <Auto_Back_Forth+0x78>)
 8001362:	781b      	ldrb	r3, [r3, #0]
 8001364:	3b01      	subs	r3, #1
 8001366:	2b03      	cmp	r3, #3
 8001368:	d826      	bhi.n	80013b8 <Auto_Back_Forth+0x5c>
 800136a:	a201      	add	r2, pc, #4	@ (adr r2, 8001370 <Auto_Back_Forth+0x14>)
 800136c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001370:	08001381 	.word	0x08001381
 8001374:	08001393 	.word	0x08001393
 8001378:	0800139d 	.word	0x0800139d
 800137c:	080013af 	.word	0x080013af
	case 1:
		// Step 1: Move forward 1 meter
		Auto_Line(DISTANCE, BASE_SPEED, BASE_SPEED);
 8001380:	f44f 72e1 	mov.w	r2, #450	@ 0x1c2
 8001384:	f44f 71e1 	mov.w	r1, #450	@ 0x1c2
 8001388:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800138c:	f7ff fe4c 	bl	8001028 <Auto_Line>
		break;
 8001390:	e01e      	b.n	80013d0 <Auto_Back_Forth+0x74>

	case 2:
		// Step 2: Turn 180 degrees
		Auto_Angle(180.0);
 8001392:	ed9f 0a11 	vldr	s0, [pc, #68]	@ 80013d8 <Auto_Back_Forth+0x7c>
 8001396:	f7ff fdbf 	bl	8000f18 <Auto_Angle>
		break;
 800139a:	e019      	b.n	80013d0 <Auto_Back_Forth+0x74>

	case 3:
		// Step 3: Move backward 1 meter
		Auto_Line(DISTANCE, BASE_SPEED, BASE_SPEED);
 800139c:	f44f 72e1 	mov.w	r2, #450	@ 0x1c2
 80013a0:	f44f 71e1 	mov.w	r1, #450	@ 0x1c2
 80013a4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80013a8:	f7ff fe3e 	bl	8001028 <Auto_Line>
		break;
 80013ac:	e010      	b.n	80013d0 <Auto_Back_Forth+0x74>

	case 4:
		// Step 4: Turn 180 degrees again to face the original direction
	    Auto_Angle(180.0);
 80013ae:	ed9f 0a0a 	vldr	s0, [pc, #40]	@ 80013d8 <Auto_Back_Forth+0x7c>
 80013b2:	f7ff fdb1 	bl	8000f18 <Auto_Angle>
		break;
 80013b6:	e00b      	b.n	80013d0 <Auto_Back_Forth+0x74>

	default:
		// End of sequence : reset current step and set to manual mode after drawing shape
		curr_step = 1;
 80013b8:	4b06      	ldr	r3, [pc, #24]	@ (80013d4 <Auto_Back_Forth+0x78>)
 80013ba:	2201      	movs	r2, #1
 80013bc:	701a      	strb	r2, [r3, #0]
		curr_mode = MANUAL_MODE;
 80013be:	4b07      	ldr	r3, [pc, #28]	@ (80013dc <Auto_Back_Forth+0x80>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	701a      	strb	r2, [r3, #0]
		LCD_Mode();
 80013c4:	f001 fc14 	bl	8002bf0 <LCD_Mode>
		LCD_Manuel(3);
 80013c8:	2003      	movs	r0, #3
 80013ca:	f001 fbc3 	bl	8002b54 <LCD_Manuel>
		break;
 80013ce:	bf00      	nop
	}
	return;
 80013d0:	bf00      	nop
}
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	20000000 	.word	0x20000000
 80013d8:	43340000 	.word	0x43340000
 80013dc:	200000ba 	.word	0x200000ba

080013e0 <Auto_Square>:

void Auto_Square() {
 80013e0:	b580      	push	{r7, lr}
 80013e2:	af00      	add	r7, sp, #0
	// Manage ongoing step
	switch(curr_step) {
 80013e4:	4b1c      	ldr	r3, [pc, #112]	@ (8001458 <Auto_Square+0x78>)
 80013e6:	781b      	ldrb	r3, [r3, #0]
 80013e8:	2b08      	cmp	r3, #8
 80013ea:	bf8c      	ite	hi
 80013ec:	2201      	movhi	r2, #1
 80013ee:	2200      	movls	r2, #0
 80013f0:	b2d2      	uxtb	r2, r2
 80013f2:	2a00      	cmp	r2, #0
 80013f4:	d121      	bne.n	800143a <Auto_Square+0x5a>
 80013f6:	2201      	movs	r2, #1
 80013f8:	fa02 f303 	lsl.w	r3, r2, r3
 80013fc:	f403 72aa 	and.w	r2, r3, #340	@ 0x154
 8001400:	2a00      	cmp	r2, #0
 8001402:	bf14      	ite	ne
 8001404:	2201      	movne	r2, #1
 8001406:	2200      	moveq	r2, #0
 8001408:	b2d2      	uxtb	r2, r2
 800140a:	2a00      	cmp	r2, #0
 800140c:	d110      	bne.n	8001430 <Auto_Square+0x50>
 800140e:	f003 03aa 	and.w	r3, r3, #170	@ 0xaa
 8001412:	2b00      	cmp	r3, #0
 8001414:	bf14      	ite	ne
 8001416:	2301      	movne	r3, #1
 8001418:	2300      	moveq	r3, #0
 800141a:	b2db      	uxtb	r3, r3
 800141c:	2b00      	cmp	r3, #0
 800141e:	d00c      	beq.n	800143a <Auto_Square+0x5a>
	case 1:
	case 3:
	case 5:
	case 7:
		// Odd steps: Move forward
		Auto_Line(DISTANCE, (BASE_SPEED * 0.333), BASE_SPEED);
 8001420:	f44f 72e1 	mov.w	r2, #450	@ 0x1c2
 8001424:	2195      	movs	r1, #149	@ 0x95
 8001426:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800142a:	f7ff fdfd 	bl	8001028 <Auto_Line>
		break;
 800142e:	e010      	b.n	8001452 <Auto_Square+0x72>
	case 2:
	case 4:
	case 6:
	case 8:
		// Even steps: Turn 90 degrees
		Auto_Angle(90.0);
 8001430:	ed9f 0a0a 	vldr	s0, [pc, #40]	@ 800145c <Auto_Square+0x7c>
 8001434:	f7ff fd70 	bl	8000f18 <Auto_Angle>
		break;
 8001438:	e00b      	b.n	8001452 <Auto_Square+0x72>

	default:
		// End of sequence : reset current step and set to manual mode after drawing shape
		curr_step = 1;
 800143a:	4b07      	ldr	r3, [pc, #28]	@ (8001458 <Auto_Square+0x78>)
 800143c:	2201      	movs	r2, #1
 800143e:	701a      	strb	r2, [r3, #0]
		curr_mode = MANUAL_MODE;
 8001440:	4b07      	ldr	r3, [pc, #28]	@ (8001460 <Auto_Square+0x80>)
 8001442:	2200      	movs	r2, #0
 8001444:	701a      	strb	r2, [r3, #0]
		LCD_Mode();
 8001446:	f001 fbd3 	bl	8002bf0 <LCD_Mode>
		LCD_Manuel(3);
 800144a:	2003      	movs	r0, #3
 800144c:	f001 fb82 	bl	8002b54 <LCD_Manuel>
		break;
 8001450:	bf00      	nop
	}
	return;
 8001452:	bf00      	nop
}
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	20000000 	.word	0x20000000
 800145c:	42b40000 	.word	0x42b40000
 8001460:	200000ba 	.word	0x200000ba

08001464 <Pause>:

void Pause() {
 8001464:	b580      	push	{r7, lr}
 8001466:	af00      	add	r7, sp, #0
	pause = pause ^ 1;
 8001468:	4b19      	ldr	r3, [pc, #100]	@ (80014d0 <Pause+0x6c>)
 800146a:	781b      	ldrb	r3, [r3, #0]
 800146c:	f083 0301 	eor.w	r3, r3, #1
 8001470:	b2da      	uxtb	r2, r3
 8001472:	4b17      	ldr	r3, [pc, #92]	@ (80014d0 <Pause+0x6c>)
 8001474:	701a      	strb	r2, [r3, #0]

	// Save currrent CCR values
	save[0] = htim3.Instance -> CCR1;
 8001476:	4b17      	ldr	r3, [pc, #92]	@ (80014d4 <Pause+0x70>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800147c:	461a      	mov	r2, r3
 800147e:	4b16      	ldr	r3, [pc, #88]	@ (80014d8 <Pause+0x74>)
 8001480:	601a      	str	r2, [r3, #0]
	save[1] = htim3.Instance -> CCR2;
 8001482:	4b14      	ldr	r3, [pc, #80]	@ (80014d4 <Pause+0x70>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001488:	461a      	mov	r2, r3
 800148a:	4b13      	ldr	r3, [pc, #76]	@ (80014d8 <Pause+0x74>)
 800148c:	605a      	str	r2, [r3, #4]
	save[2] = htim3.Instance -> CCR3;
 800148e:	4b11      	ldr	r3, [pc, #68]	@ (80014d4 <Pause+0x70>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001494:	461a      	mov	r2, r3
 8001496:	4b10      	ldr	r3, [pc, #64]	@ (80014d8 <Pause+0x74>)
 8001498:	609a      	str	r2, [r3, #8]
	save[3] = htim3.Instance -> CCR4;
 800149a:	4b0e      	ldr	r3, [pc, #56]	@ (80014d4 <Pause+0x70>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014a0:	461a      	mov	r2, r3
 80014a2:	4b0d      	ldr	r3, [pc, #52]	@ (80014d8 <Pause+0x74>)
 80014a4:	60da      	str	r2, [r3, #12]

	// Stop
	HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 80014a6:	2100      	movs	r1, #0
 80014a8:	480a      	ldr	r0, [pc, #40]	@ (80014d4 <Pause+0x70>)
 80014aa:	f004 fb5b 	bl	8005b64 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_2);
 80014ae:	2104      	movs	r1, #4
 80014b0:	4808      	ldr	r0, [pc, #32]	@ (80014d4 <Pause+0x70>)
 80014b2:	f004 fb57 	bl	8005b64 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_3);
 80014b6:	2108      	movs	r1, #8
 80014b8:	4806      	ldr	r0, [pc, #24]	@ (80014d4 <Pause+0x70>)
 80014ba:	f004 fb53 	bl	8005b64 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_4);
 80014be:	210c      	movs	r1, #12
 80014c0:	4804      	ldr	r0, [pc, #16]	@ (80014d4 <Pause+0x70>)
 80014c2:	f004 fb4f 	bl	8005b64 <HAL_TIM_PWM_Stop>
	HAL_TIM_Base_Stop_IT(&htim7);
 80014c6:	4805      	ldr	r0, [pc, #20]	@ (80014dc <Pause+0x78>)
 80014c8:	f004 f9fc 	bl	80058c4 <HAL_TIM_Base_Stop_IT>

	return;
 80014cc:	bf00      	nop
}
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	200000b8 	.word	0x200000b8
 80014d4:	200001e0 	.word	0x200001e0
 80014d8:	200000d8 	.word	0x200000d8
 80014dc:	200002b8 	.word	0x200002b8

080014e0 <Resume>:

void Resume() {
 80014e0:	b580      	push	{r7, lr}
 80014e2:	af00      	add	r7, sp, #0
	pause = pause ^ 1;
 80014e4:	4b17      	ldr	r3, [pc, #92]	@ (8001544 <Resume+0x64>)
 80014e6:	781b      	ldrb	r3, [r3, #0]
 80014e8:	f083 0301 	eor.w	r3, r3, #1
 80014ec:	b2da      	uxtb	r2, r3
 80014ee:	4b15      	ldr	r3, [pc, #84]	@ (8001544 <Resume+0x64>)
 80014f0:	701a      	strb	r2, [r3, #0]

	// Restore saved CCR values
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80014f2:	2100      	movs	r1, #0
 80014f4:	4814      	ldr	r0, [pc, #80]	@ (8001548 <Resume+0x68>)
 80014f6:	f004 fa6d 	bl	80059d4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80014fa:	2104      	movs	r1, #4
 80014fc:	4812      	ldr	r0, [pc, #72]	@ (8001548 <Resume+0x68>)
 80014fe:	f004 fa69 	bl	80059d4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8001502:	2108      	movs	r1, #8
 8001504:	4810      	ldr	r0, [pc, #64]	@ (8001548 <Resume+0x68>)
 8001506:	f004 fa65 	bl	80059d4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 800150a:	210c      	movs	r1, #12
 800150c:	480e      	ldr	r0, [pc, #56]	@ (8001548 <Resume+0x68>)
 800150e:	f004 fa61 	bl	80059d4 <HAL_TIM_PWM_Start>
	htim3.Instance -> CCR1 = save[0];
 8001512:	4b0e      	ldr	r3, [pc, #56]	@ (800154c <Resume+0x6c>)
 8001514:	681a      	ldr	r2, [r3, #0]
 8001516:	4b0c      	ldr	r3, [pc, #48]	@ (8001548 <Resume+0x68>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	635a      	str	r2, [r3, #52]	@ 0x34
	htim3.Instance -> CCR2 = save[1];
 800151c:	4b0b      	ldr	r3, [pc, #44]	@ (800154c <Resume+0x6c>)
 800151e:	685a      	ldr	r2, [r3, #4]
 8001520:	4b09      	ldr	r3, [pc, #36]	@ (8001548 <Resume+0x68>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	639a      	str	r2, [r3, #56]	@ 0x38
	htim3.Instance -> CCR3 = save[2];
 8001526:	4b09      	ldr	r3, [pc, #36]	@ (800154c <Resume+0x6c>)
 8001528:	689a      	ldr	r2, [r3, #8]
 800152a:	4b07      	ldr	r3, [pc, #28]	@ (8001548 <Resume+0x68>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	63da      	str	r2, [r3, #60]	@ 0x3c
	htim3.Instance -> CCR4 = save[3];
 8001530:	4b06      	ldr	r3, [pc, #24]	@ (800154c <Resume+0x6c>)
 8001532:	68da      	ldr	r2, [r3, #12]
 8001534:	4b04      	ldr	r3, [pc, #16]	@ (8001548 <Resume+0x68>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	641a      	str	r2, [r3, #64]	@ 0x40
	HAL_TIM_Base_Start_IT(&htim7);
 800153a:	4805      	ldr	r0, [pc, #20]	@ (8001550 <Resume+0x70>)
 800153c:	f004 f952 	bl	80057e4 <HAL_TIM_Base_Start_IT>

	return;
 8001540:	bf00      	nop
}
 8001542:	bd80      	pop	{r7, pc}
 8001544:	200000b8 	.word	0x200000b8
 8001548:	200001e0 	.word	0x200001e0
 800154c:	200000d8 	.word	0x200000d8
 8001550:	200002b8 	.word	0x200002b8
 8001554:	00000000 	.word	0x00000000

08001558 <Avancer>:
 */

#include "gestion_moteurs.h"
#include "vitesse_affichage.h"

void Avancer(int Pulse, TIM_HandleTypeDef* htim3){
 8001558:	b590      	push	{r4, r7, lr}
 800155a:	b083      	sub	sp, #12
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
 8001560:	6039      	str	r1, [r7, #0]

	htim3->Instance -> CCR2 = 0;
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	2200      	movs	r2, #0
 8001568:	639a      	str	r2, [r3, #56]	@ 0x38
	htim3->Instance -> CCR4 = 0;
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	2200      	movs	r2, #0
 8001570:	641a      	str	r2, [r3, #64]	@ 0x40

	if(Pulse > 499){
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001578:	db02      	blt.n	8001580 <Avancer+0x28>
		Pulse = 499;
 800157a:	f240 13f3 	movw	r3, #499	@ 0x1f3
 800157e:	607b      	str	r3, [r7, #4]
	}

	htim3->Instance -> CCR1 = Pulse;
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	687a      	ldr	r2, [r7, #4]
 8001586:	635a      	str	r2, [r3, #52]	@ 0x34
	htim3->Instance -> CCR3 = htim3->Instance -> CCR1 * 0.9;
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800158e:	4618      	mov	r0, r3
 8001590:	f7fe ffd0 	bl	8000534 <__aeabi_ui2d>
 8001594:	a31c      	add	r3, pc, #112	@ (adr r3, 8001608 <Avancer+0xb0>)
 8001596:	e9d3 2300 	ldrd	r2, r3, [r3]
 800159a:	f7ff f845 	bl	8000628 <__aeabi_dmul>
 800159e:	4602      	mov	r2, r0
 80015a0:	460b      	mov	r3, r1
 80015a2:	4610      	mov	r0, r2
 80015a4:	4619      	mov	r1, r3
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	681c      	ldr	r4, [r3, #0]
 80015aa:	f7ff fa77 	bl	8000a9c <__aeabi_d2uiz>
 80015ae:	4603      	mov	r3, r0
 80015b0:	63e3      	str	r3, [r4, #60]	@ 0x3c


	LCD_Vitesse((uint16_t)(Pulse*0.2), (uint16_t)(Pulse*0.2), 0, 0);
 80015b2:	6878      	ldr	r0, [r7, #4]
 80015b4:	f7fe ffce 	bl	8000554 <__aeabi_i2d>
 80015b8:	a315      	add	r3, pc, #84	@ (adr r3, 8001610 <Avancer+0xb8>)
 80015ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015be:	f7ff f833 	bl	8000628 <__aeabi_dmul>
 80015c2:	4602      	mov	r2, r0
 80015c4:	460b      	mov	r3, r1
 80015c6:	4610      	mov	r0, r2
 80015c8:	4619      	mov	r1, r3
 80015ca:	f7ff fa67 	bl	8000a9c <__aeabi_d2uiz>
 80015ce:	4603      	mov	r3, r0
 80015d0:	b29c      	uxth	r4, r3
 80015d2:	6878      	ldr	r0, [r7, #4]
 80015d4:	f7fe ffbe 	bl	8000554 <__aeabi_i2d>
 80015d8:	a30d      	add	r3, pc, #52	@ (adr r3, 8001610 <Avancer+0xb8>)
 80015da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015de:	f7ff f823 	bl	8000628 <__aeabi_dmul>
 80015e2:	4602      	mov	r2, r0
 80015e4:	460b      	mov	r3, r1
 80015e6:	4610      	mov	r0, r2
 80015e8:	4619      	mov	r1, r3
 80015ea:	f7ff fa57 	bl	8000a9c <__aeabi_d2uiz>
 80015ee:	4603      	mov	r3, r0
 80015f0:	b299      	uxth	r1, r3
 80015f2:	2300      	movs	r3, #0
 80015f4:	2200      	movs	r2, #0
 80015f6:	4620      	mov	r0, r4
 80015f8:	f001 fb18 	bl	8002c2c <LCD_Vitesse>
	return;
 80015fc:	bf00      	nop
}
 80015fe:	370c      	adds	r7, #12
 8001600:	46bd      	mov	sp, r7
 8001602:	bd90      	pop	{r4, r7, pc}
 8001604:	f3af 8000 	nop.w
 8001608:	cccccccd 	.word	0xcccccccd
 800160c:	3feccccc 	.word	0x3feccccc
 8001610:	9999999a 	.word	0x9999999a
 8001614:	3fc99999 	.word	0x3fc99999

08001618 <Droite>:

void Droite(int Pulse, TIM_HandleTypeDef* htim3){
 8001618:	b590      	push	{r4, r7, lr}
 800161a:	b083      	sub	sp, #12
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
 8001620:	6039      	str	r1, [r7, #0]

	htim3->Instance -> CCR2 = 0;
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	2200      	movs	r2, #0
 8001628:	639a      	str	r2, [r3, #56]	@ 0x38
	htim3->Instance -> CCR3 = 0;
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	2200      	movs	r2, #0
 8001630:	63da      	str	r2, [r3, #60]	@ 0x3c

	if(Pulse > 499){
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001638:	db02      	blt.n	8001640 <Droite+0x28>
		Pulse = 499;
 800163a:	f240 13f3 	movw	r3, #499	@ 0x1f3
 800163e:	607b      	str	r3, [r7, #4]
	}
	htim3->Instance -> CCR1 = Pulse;
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	687a      	ldr	r2, [r7, #4]
 8001646:	635a      	str	r2, [r3, #52]	@ 0x34
	htim3->Instance -> CCR4 = htim3->Instance -> CCR1 * 0.9;
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800164e:	4618      	mov	r0, r3
 8001650:	f7fe ff70 	bl	8000534 <__aeabi_ui2d>
 8001654:	a31c      	add	r3, pc, #112	@ (adr r3, 80016c8 <Droite+0xb0>)
 8001656:	e9d3 2300 	ldrd	r2, r3, [r3]
 800165a:	f7fe ffe5 	bl	8000628 <__aeabi_dmul>
 800165e:	4602      	mov	r2, r0
 8001660:	460b      	mov	r3, r1
 8001662:	4610      	mov	r0, r2
 8001664:	4619      	mov	r1, r3
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	681c      	ldr	r4, [r3, #0]
 800166a:	f7ff fa17 	bl	8000a9c <__aeabi_d2uiz>
 800166e:	4603      	mov	r3, r0
 8001670:	6423      	str	r3, [r4, #64]	@ 0x40

	LCD_Vitesse((uint16_t)(Pulse*0.2), (uint16_t)(Pulse*0.2), 0, 1);
 8001672:	6878      	ldr	r0, [r7, #4]
 8001674:	f7fe ff6e 	bl	8000554 <__aeabi_i2d>
 8001678:	a315      	add	r3, pc, #84	@ (adr r3, 80016d0 <Droite+0xb8>)
 800167a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800167e:	f7fe ffd3 	bl	8000628 <__aeabi_dmul>
 8001682:	4602      	mov	r2, r0
 8001684:	460b      	mov	r3, r1
 8001686:	4610      	mov	r0, r2
 8001688:	4619      	mov	r1, r3
 800168a:	f7ff fa07 	bl	8000a9c <__aeabi_d2uiz>
 800168e:	4603      	mov	r3, r0
 8001690:	b29c      	uxth	r4, r3
 8001692:	6878      	ldr	r0, [r7, #4]
 8001694:	f7fe ff5e 	bl	8000554 <__aeabi_i2d>
 8001698:	a30d      	add	r3, pc, #52	@ (adr r3, 80016d0 <Droite+0xb8>)
 800169a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800169e:	f7fe ffc3 	bl	8000628 <__aeabi_dmul>
 80016a2:	4602      	mov	r2, r0
 80016a4:	460b      	mov	r3, r1
 80016a6:	4610      	mov	r0, r2
 80016a8:	4619      	mov	r1, r3
 80016aa:	f7ff f9f7 	bl	8000a9c <__aeabi_d2uiz>
 80016ae:	4603      	mov	r3, r0
 80016b0:	b299      	uxth	r1, r3
 80016b2:	2301      	movs	r3, #1
 80016b4:	2200      	movs	r2, #0
 80016b6:	4620      	mov	r0, r4
 80016b8:	f001 fab8 	bl	8002c2c <LCD_Vitesse>
	return;
 80016bc:	bf00      	nop
}
 80016be:	370c      	adds	r7, #12
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd90      	pop	{r4, r7, pc}
 80016c4:	f3af 8000 	nop.w
 80016c8:	cccccccd 	.word	0xcccccccd
 80016cc:	3feccccc 	.word	0x3feccccc
 80016d0:	9999999a 	.word	0x9999999a
 80016d4:	3fc99999 	.word	0x3fc99999

080016d8 <Gauche>:

void Gauche(int Pulse, TIM_HandleTypeDef* htim3){
 80016d8:	b590      	push	{r4, r7, lr}
 80016da:	b083      	sub	sp, #12
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
 80016e0:	6039      	str	r1, [r7, #0]

	htim3->Instance -> CCR1 = 0;
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	2200      	movs	r2, #0
 80016e8:	635a      	str	r2, [r3, #52]	@ 0x34
	htim3->Instance -> CCR4 = 0;
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	2200      	movs	r2, #0
 80016f0:	641a      	str	r2, [r3, #64]	@ 0x40

	if(Pulse > 499){
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80016f8:	db02      	blt.n	8001700 <Gauche+0x28>
		Pulse = 499;
 80016fa:	f240 13f3 	movw	r3, #499	@ 0x1f3
 80016fe:	607b      	str	r3, [r7, #4]
	}
	htim3->Instance -> CCR2 = Pulse;
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	687a      	ldr	r2, [r7, #4]
 8001706:	639a      	str	r2, [r3, #56]	@ 0x38
	htim3->Instance -> CCR3 = htim3->Instance -> CCR2 * 0.9;
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800170e:	4618      	mov	r0, r3
 8001710:	f7fe ff10 	bl	8000534 <__aeabi_ui2d>
 8001714:	a31c      	add	r3, pc, #112	@ (adr r3, 8001788 <Gauche+0xb0>)
 8001716:	e9d3 2300 	ldrd	r2, r3, [r3]
 800171a:	f7fe ff85 	bl	8000628 <__aeabi_dmul>
 800171e:	4602      	mov	r2, r0
 8001720:	460b      	mov	r3, r1
 8001722:	4610      	mov	r0, r2
 8001724:	4619      	mov	r1, r3
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	681c      	ldr	r4, [r3, #0]
 800172a:	f7ff f9b7 	bl	8000a9c <__aeabi_d2uiz>
 800172e:	4603      	mov	r3, r0
 8001730:	63e3      	str	r3, [r4, #60]	@ 0x3c

	LCD_Vitesse((uint16_t)(Pulse*0.2), (uint16_t)(Pulse*0.2), 1, 0);
 8001732:	6878      	ldr	r0, [r7, #4]
 8001734:	f7fe ff0e 	bl	8000554 <__aeabi_i2d>
 8001738:	a315      	add	r3, pc, #84	@ (adr r3, 8001790 <Gauche+0xb8>)
 800173a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800173e:	f7fe ff73 	bl	8000628 <__aeabi_dmul>
 8001742:	4602      	mov	r2, r0
 8001744:	460b      	mov	r3, r1
 8001746:	4610      	mov	r0, r2
 8001748:	4619      	mov	r1, r3
 800174a:	f7ff f9a7 	bl	8000a9c <__aeabi_d2uiz>
 800174e:	4603      	mov	r3, r0
 8001750:	b29c      	uxth	r4, r3
 8001752:	6878      	ldr	r0, [r7, #4]
 8001754:	f7fe fefe 	bl	8000554 <__aeabi_i2d>
 8001758:	a30d      	add	r3, pc, #52	@ (adr r3, 8001790 <Gauche+0xb8>)
 800175a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800175e:	f7fe ff63 	bl	8000628 <__aeabi_dmul>
 8001762:	4602      	mov	r2, r0
 8001764:	460b      	mov	r3, r1
 8001766:	4610      	mov	r0, r2
 8001768:	4619      	mov	r1, r3
 800176a:	f7ff f997 	bl	8000a9c <__aeabi_d2uiz>
 800176e:	4603      	mov	r3, r0
 8001770:	b299      	uxth	r1, r3
 8001772:	2300      	movs	r3, #0
 8001774:	2201      	movs	r2, #1
 8001776:	4620      	mov	r0, r4
 8001778:	f001 fa58 	bl	8002c2c <LCD_Vitesse>
}
 800177c:	bf00      	nop
 800177e:	370c      	adds	r7, #12
 8001780:	46bd      	mov	sp, r7
 8001782:	bd90      	pop	{r4, r7, pc}
 8001784:	f3af 8000 	nop.w
 8001788:	cccccccd 	.word	0xcccccccd
 800178c:	3feccccc 	.word	0x3feccccc
 8001790:	9999999a 	.word	0x9999999a
 8001794:	3fc99999 	.word	0x3fc99999

08001798 <Reculer>:

void Reculer(int Pulse,TIM_HandleTypeDef* htim3){
 8001798:	b590      	push	{r4, r7, lr}
 800179a:	b083      	sub	sp, #12
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
 80017a0:	6039      	str	r1, [r7, #0]

	htim3->Instance -> CCR1 = 0;
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	2200      	movs	r2, #0
 80017a8:	635a      	str	r2, [r3, #52]	@ 0x34
	htim3->Instance -> CCR3 = 0;
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	2200      	movs	r2, #0
 80017b0:	63da      	str	r2, [r3, #60]	@ 0x3c

	if(Pulse > 499){
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80017b8:	db02      	blt.n	80017c0 <Reculer+0x28>
		Pulse = 499;
 80017ba:	f240 13f3 	movw	r3, #499	@ 0x1f3
 80017be:	607b      	str	r3, [r7, #4]
	}

	htim3->Instance -> CCR4 = Pulse;
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	687a      	ldr	r2, [r7, #4]
 80017c6:	641a      	str	r2, [r3, #64]	@ 0x40
	htim3->Instance -> CCR2 = htim3->Instance -> CCR4 * 0.95;
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017ce:	4618      	mov	r0, r3
 80017d0:	f7fe feb0 	bl	8000534 <__aeabi_ui2d>
 80017d4:	a31c      	add	r3, pc, #112	@ (adr r3, 8001848 <Reculer+0xb0>)
 80017d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017da:	f7fe ff25 	bl	8000628 <__aeabi_dmul>
 80017de:	4602      	mov	r2, r0
 80017e0:	460b      	mov	r3, r1
 80017e2:	4610      	mov	r0, r2
 80017e4:	4619      	mov	r1, r3
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	681c      	ldr	r4, [r3, #0]
 80017ea:	f7ff f957 	bl	8000a9c <__aeabi_d2uiz>
 80017ee:	4603      	mov	r3, r0
 80017f0:	63a3      	str	r3, [r4, #56]	@ 0x38
	LCD_Vitesse((uint16_t)(Pulse*0.2), (uint16_t)(Pulse*0.2), 1, 1);
 80017f2:	6878      	ldr	r0, [r7, #4]
 80017f4:	f7fe feae 	bl	8000554 <__aeabi_i2d>
 80017f8:	a315      	add	r3, pc, #84	@ (adr r3, 8001850 <Reculer+0xb8>)
 80017fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017fe:	f7fe ff13 	bl	8000628 <__aeabi_dmul>
 8001802:	4602      	mov	r2, r0
 8001804:	460b      	mov	r3, r1
 8001806:	4610      	mov	r0, r2
 8001808:	4619      	mov	r1, r3
 800180a:	f7ff f947 	bl	8000a9c <__aeabi_d2uiz>
 800180e:	4603      	mov	r3, r0
 8001810:	b29c      	uxth	r4, r3
 8001812:	6878      	ldr	r0, [r7, #4]
 8001814:	f7fe fe9e 	bl	8000554 <__aeabi_i2d>
 8001818:	a30d      	add	r3, pc, #52	@ (adr r3, 8001850 <Reculer+0xb8>)
 800181a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800181e:	f7fe ff03 	bl	8000628 <__aeabi_dmul>
 8001822:	4602      	mov	r2, r0
 8001824:	460b      	mov	r3, r1
 8001826:	4610      	mov	r0, r2
 8001828:	4619      	mov	r1, r3
 800182a:	f7ff f937 	bl	8000a9c <__aeabi_d2uiz>
 800182e:	4603      	mov	r3, r0
 8001830:	b299      	uxth	r1, r3
 8001832:	2301      	movs	r3, #1
 8001834:	2201      	movs	r2, #1
 8001836:	4620      	mov	r0, r4
 8001838:	f001 f9f8 	bl	8002c2c <LCD_Vitesse>
	return;
 800183c:	bf00      	nop
}
 800183e:	370c      	adds	r7, #12
 8001840:	46bd      	mov	sp, r7
 8001842:	bd90      	pop	{r4, r7, pc}
 8001844:	f3af 8000 	nop.w
 8001848:	66666666 	.word	0x66666666
 800184c:	3fee6666 	.word	0x3fee6666
 8001850:	9999999a 	.word	0x9999999a
 8001854:	3fc99999 	.word	0x3fc99999

08001858 <Stop>:
void Stop(TIM_HandleTypeDef* htim3){
 8001858:	b580      	push	{r7, lr}
 800185a:	b082      	sub	sp, #8
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
	htim3->Instance -> CCR1 = 0;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	2200      	movs	r2, #0
 8001866:	635a      	str	r2, [r3, #52]	@ 0x34
	htim3->Instance -> CCR2 = 0;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	2200      	movs	r2, #0
 800186e:	639a      	str	r2, [r3, #56]	@ 0x38
	htim3->Instance -> CCR3 = 0;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	2200      	movs	r2, #0
 8001876:	63da      	str	r2, [r3, #60]	@ 0x3c
	htim3->Instance -> CCR4 = 0;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	2200      	movs	r2, #0
 800187e:	641a      	str	r2, [r3, #64]	@ 0x40
	LCD_Vitesse(0, 0, 0, 0);
 8001880:	2300      	movs	r3, #0
 8001882:	2200      	movs	r2, #0
 8001884:	2100      	movs	r1, #0
 8001886:	2000      	movs	r0, #0
 8001888:	f001 f9d0 	bl	8002c2c <LCD_Vitesse>
}
 800188c:	bf00      	nop
 800188e:	3708      	adds	r7, #8
 8001890:	46bd      	mov	sp, r7
 8001892:	bd80      	pop	{r7, pc}

08001894 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b08a      	sub	sp, #40	@ 0x28
 8001898:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800189a:	f107 0314 	add.w	r3, r7, #20
 800189e:	2200      	movs	r2, #0
 80018a0:	601a      	str	r2, [r3, #0]
 80018a2:	605a      	str	r2, [r3, #4]
 80018a4:	609a      	str	r2, [r3, #8]
 80018a6:	60da      	str	r2, [r3, #12]
 80018a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018aa:	2300      	movs	r3, #0
 80018ac:	613b      	str	r3, [r7, #16]
 80018ae:	4b59      	ldr	r3, [pc, #356]	@ (8001a14 <MX_GPIO_Init+0x180>)
 80018b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018b2:	4a58      	ldr	r2, [pc, #352]	@ (8001a14 <MX_GPIO_Init+0x180>)
 80018b4:	f043 0304 	orr.w	r3, r3, #4
 80018b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80018ba:	4b56      	ldr	r3, [pc, #344]	@ (8001a14 <MX_GPIO_Init+0x180>)
 80018bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018be:	f003 0304 	and.w	r3, r3, #4
 80018c2:	613b      	str	r3, [r7, #16]
 80018c4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80018c6:	2300      	movs	r3, #0
 80018c8:	60fb      	str	r3, [r7, #12]
 80018ca:	4b52      	ldr	r3, [pc, #328]	@ (8001a14 <MX_GPIO_Init+0x180>)
 80018cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ce:	4a51      	ldr	r2, [pc, #324]	@ (8001a14 <MX_GPIO_Init+0x180>)
 80018d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80018d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80018d6:	4b4f      	ldr	r3, [pc, #316]	@ (8001a14 <MX_GPIO_Init+0x180>)
 80018d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80018de:	60fb      	str	r3, [r7, #12]
 80018e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018e2:	2300      	movs	r3, #0
 80018e4:	60bb      	str	r3, [r7, #8]
 80018e6:	4b4b      	ldr	r3, [pc, #300]	@ (8001a14 <MX_GPIO_Init+0x180>)
 80018e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ea:	4a4a      	ldr	r2, [pc, #296]	@ (8001a14 <MX_GPIO_Init+0x180>)
 80018ec:	f043 0301 	orr.w	r3, r3, #1
 80018f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80018f2:	4b48      	ldr	r3, [pc, #288]	@ (8001a14 <MX_GPIO_Init+0x180>)
 80018f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018f6:	f003 0301 	and.w	r3, r3, #1
 80018fa:	60bb      	str	r3, [r7, #8]
 80018fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018fe:	2300      	movs	r3, #0
 8001900:	607b      	str	r3, [r7, #4]
 8001902:	4b44      	ldr	r3, [pc, #272]	@ (8001a14 <MX_GPIO_Init+0x180>)
 8001904:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001906:	4a43      	ldr	r2, [pc, #268]	@ (8001a14 <MX_GPIO_Init+0x180>)
 8001908:	f043 0302 	orr.w	r3, r3, #2
 800190c:	6313      	str	r3, [r2, #48]	@ 0x30
 800190e:	4b41      	ldr	r3, [pc, #260]	@ (8001a14 <MX_GPIO_Init+0x180>)
 8001910:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001912:	f003 0302 	and.w	r3, r3, #2
 8001916:	607b      	str	r3, [r7, #4]
 8001918:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800191a:	2200      	movs	r2, #0
 800191c:	2120      	movs	r1, #32
 800191e:	483e      	ldr	r0, [pc, #248]	@ (8001a18 <MX_GPIO_Init+0x184>)
 8001920:	f001 fe52 	bl	80035c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI_RST_Pin|SPI_CS_Pin|SPI_DC_Pin, GPIO_PIN_RESET);
 8001924:	2200      	movs	r2, #0
 8001926:	f44f 4160 	mov.w	r1, #57344	@ 0xe000
 800192a:	483c      	ldr	r0, [pc, #240]	@ (8001a1c <MX_GPIO_Init+0x188>)
 800192c:	f001 fe4c 	bl	80035c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Blue_Button_Pin;
 8001930:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001934:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001936:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800193a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800193c:	2300      	movs	r3, #0
 800193e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Blue_Button_GPIO_Port, &GPIO_InitStruct);
 8001940:	f107 0314 	add.w	r3, r7, #20
 8001944:	4619      	mov	r1, r3
 8001946:	4836      	ldr	r0, [pc, #216]	@ (8001a20 <MX_GPIO_Init+0x18c>)
 8001948:	f001 fc92 	bl	8003270 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = Dipswitch_MSB_Pin|Dipswitch_LSB_Pin;
 800194c:	230c      	movs	r3, #12
 800194e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001950:	2300      	movs	r3, #0
 8001952:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001954:	2302      	movs	r3, #2
 8001956:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001958:	f107 0314 	add.w	r3, r7, #20
 800195c:	4619      	mov	r1, r3
 800195e:	4830      	ldr	r0, [pc, #192]	@ (8001a20 <MX_GPIO_Init+0x18c>)
 8001960:	f001 fc86 	bl	8003270 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001964:	2320      	movs	r3, #32
 8001966:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001968:	2301      	movs	r3, #1
 800196a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800196c:	2300      	movs	r3, #0
 800196e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001970:	2300      	movs	r3, #0
 8001972:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001974:	f107 0314 	add.w	r3, r7, #20
 8001978:	4619      	mov	r1, r3
 800197a:	4827      	ldr	r0, [pc, #156]	@ (8001a18 <MX_GPIO_Init+0x184>)
 800197c:	f001 fc78 	bl	8003270 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = SPI_RST_Pin|SPI_CS_Pin|SPI_DC_Pin;
 8001980:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8001984:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001986:	2301      	movs	r3, #1
 8001988:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800198a:	2300      	movs	r3, #0
 800198c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800198e:	2300      	movs	r3, #0
 8001990:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001992:	f107 0314 	add.w	r3, r7, #20
 8001996:	4619      	mov	r1, r3
 8001998:	4820      	ldr	r0, [pc, #128]	@ (8001a1c <MX_GPIO_Init+0x188>)
 800199a:	f001 fc69 	bl	8003270 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Encodeur_D_B_Pin;
 800199e:	2380      	movs	r3, #128	@ 0x80
 80019a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019a2:	2300      	movs	r3, #0
 80019a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a6:	2300      	movs	r3, #0
 80019a8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Encodeur_D_B_GPIO_Port, &GPIO_InitStruct);
 80019aa:	f107 0314 	add.w	r3, r7, #20
 80019ae:	4619      	mov	r1, r3
 80019b0:	481b      	ldr	r0, [pc, #108]	@ (8001a20 <MX_GPIO_Init+0x18c>)
 80019b2:	f001 fc5d 	bl	8003270 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = Encodeur_G_A_Pin|Encodeur_D_A_Pin;
 80019b6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80019ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80019bc:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80019c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80019c2:	2302      	movs	r3, #2
 80019c4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019c6:	f107 0314 	add.w	r3, r7, #20
 80019ca:	4619      	mov	r1, r3
 80019cc:	4812      	ldr	r0, [pc, #72]	@ (8001a18 <MX_GPIO_Init+0x184>)
 80019ce:	f001 fc4f 	bl	8003270 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Encodeur_G_B_Pin;
 80019d2:	2340      	movs	r3, #64	@ 0x40
 80019d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019d6:	2300      	movs	r3, #0
 80019d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019da:	2300      	movs	r3, #0
 80019dc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Encodeur_G_B_GPIO_Port, &GPIO_InitStruct);
 80019de:	f107 0314 	add.w	r3, r7, #20
 80019e2:	4619      	mov	r1, r3
 80019e4:	480d      	ldr	r0, [pc, #52]	@ (8001a1c <MX_GPIO_Init+0x188>)
 80019e6:	f001 fc43 	bl	8003270 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80019ea:	2200      	movs	r2, #0
 80019ec:	2100      	movs	r1, #0
 80019ee:	2017      	movs	r0, #23
 80019f0:	f001 fc07 	bl	8003202 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80019f4:	2017      	movs	r0, #23
 80019f6:	f001 fc20 	bl	800323a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80019fa:	2200      	movs	r2, #0
 80019fc:	2100      	movs	r1, #0
 80019fe:	2028      	movs	r0, #40	@ 0x28
 8001a00:	f001 fbff 	bl	8003202 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001a04:	2028      	movs	r0, #40	@ 0x28
 8001a06:	f001 fc18 	bl	800323a <HAL_NVIC_EnableIRQ>

}
 8001a0a:	bf00      	nop
 8001a0c:	3728      	adds	r7, #40	@ 0x28
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop
 8001a14:	40023800 	.word	0x40023800
 8001a18:	40020000 	.word	0x40020000
 8001a1c:	40020400 	.word	0x40020400
 8001a20:	40020800 	.word	0x40020800

08001a24 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001a28:	4b12      	ldr	r3, [pc, #72]	@ (8001a74 <MX_I2C1_Init+0x50>)
 8001a2a:	4a13      	ldr	r2, [pc, #76]	@ (8001a78 <MX_I2C1_Init+0x54>)
 8001a2c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001a2e:	4b11      	ldr	r3, [pc, #68]	@ (8001a74 <MX_I2C1_Init+0x50>)
 8001a30:	4a12      	ldr	r2, [pc, #72]	@ (8001a7c <MX_I2C1_Init+0x58>)
 8001a32:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001a34:	4b0f      	ldr	r3, [pc, #60]	@ (8001a74 <MX_I2C1_Init+0x50>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001a3a:	4b0e      	ldr	r3, [pc, #56]	@ (8001a74 <MX_I2C1_Init+0x50>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a40:	4b0c      	ldr	r3, [pc, #48]	@ (8001a74 <MX_I2C1_Init+0x50>)
 8001a42:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001a46:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a48:	4b0a      	ldr	r3, [pc, #40]	@ (8001a74 <MX_I2C1_Init+0x50>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001a4e:	4b09      	ldr	r3, [pc, #36]	@ (8001a74 <MX_I2C1_Init+0x50>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a54:	4b07      	ldr	r3, [pc, #28]	@ (8001a74 <MX_I2C1_Init+0x50>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a5a:	4b06      	ldr	r3, [pc, #24]	@ (8001a74 <MX_I2C1_Init+0x50>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001a60:	4804      	ldr	r0, [pc, #16]	@ (8001a74 <MX_I2C1_Init+0x50>)
 8001a62:	f001 fde3 	bl	800362c <HAL_I2C_Init>
 8001a66:	4603      	mov	r3, r0
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d001      	beq.n	8001a70 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001a6c:	f000 f984 	bl	8001d78 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001a70:	bf00      	nop
 8001a72:	bd80      	pop	{r7, pc}
 8001a74:	200000ec 	.word	0x200000ec
 8001a78:	40005400 	.word	0x40005400
 8001a7c:	000186a0 	.word	0x000186a0

08001a80 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b08a      	sub	sp, #40	@ 0x28
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a88:	f107 0314 	add.w	r3, r7, #20
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	601a      	str	r2, [r3, #0]
 8001a90:	605a      	str	r2, [r3, #4]
 8001a92:	609a      	str	r2, [r3, #8]
 8001a94:	60da      	str	r2, [r3, #12]
 8001a96:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4a19      	ldr	r2, [pc, #100]	@ (8001b04 <HAL_I2C_MspInit+0x84>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d12c      	bne.n	8001afc <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	613b      	str	r3, [r7, #16]
 8001aa6:	4b18      	ldr	r3, [pc, #96]	@ (8001b08 <HAL_I2C_MspInit+0x88>)
 8001aa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aaa:	4a17      	ldr	r2, [pc, #92]	@ (8001b08 <HAL_I2C_MspInit+0x88>)
 8001aac:	f043 0302 	orr.w	r3, r3, #2
 8001ab0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ab2:	4b15      	ldr	r3, [pc, #84]	@ (8001b08 <HAL_I2C_MspInit+0x88>)
 8001ab4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ab6:	f003 0302 	and.w	r3, r3, #2
 8001aba:	613b      	str	r3, [r7, #16]
 8001abc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001abe:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001ac2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ac4:	2312      	movs	r3, #18
 8001ac6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001acc:	2303      	movs	r3, #3
 8001ace:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001ad0:	2304      	movs	r3, #4
 8001ad2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ad4:	f107 0314 	add.w	r3, r7, #20
 8001ad8:	4619      	mov	r1, r3
 8001ada:	480c      	ldr	r0, [pc, #48]	@ (8001b0c <HAL_I2C_MspInit+0x8c>)
 8001adc:	f001 fbc8 	bl	8003270 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	60fb      	str	r3, [r7, #12]
 8001ae4:	4b08      	ldr	r3, [pc, #32]	@ (8001b08 <HAL_I2C_MspInit+0x88>)
 8001ae6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ae8:	4a07      	ldr	r2, [pc, #28]	@ (8001b08 <HAL_I2C_MspInit+0x88>)
 8001aea:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001aee:	6413      	str	r3, [r2, #64]	@ 0x40
 8001af0:	4b05      	ldr	r3, [pc, #20]	@ (8001b08 <HAL_I2C_MspInit+0x88>)
 8001af2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001af4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001af8:	60fb      	str	r3, [r7, #12]
 8001afa:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001afc:	bf00      	nop
 8001afe:	3728      	adds	r7, #40	@ 0x28
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}
 8001b04:	40005400 	.word	0x40005400
 8001b08:	40023800 	.word	0x40023800
 8001b0c:	40020400 	.word	0x40020400

08001b10 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b14:	f001 fa04 	bl	8002f20 <HAL_Init>

  /* USER CODE BEGIN Init */

  Initialisation_manette();
 8001b18:	f000 f988 	bl	8001e2c <Initialisation_manette>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b1c:	f000 f868 	bl	8001bf0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b20:	f7ff feb8 	bl	8001894 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001b24:	f000 ffa4 	bl	8002a70 <MX_USART2_UART_Init>
  MX_TIM6_Init();
 8001b28:	f000 fe46 	bl	80027b8 <MX_TIM6_Init>
  MX_TIM3_Init();
 8001b2c:	f000 fd34 	bl	8002598 <MX_TIM3_Init>
  MX_TIM7_Init();
 8001b30:	f000 fe78 	bl	8002824 <MX_TIM7_Init>
  MX_I2C1_Init();
 8001b34:	f7ff ff76 	bl	8001a24 <MX_I2C1_Init>
  MX_SPI2_Init();
 8001b38:	f000 fb58 	bl	80021ec <MX_SPI2_Init>
  MX_TIM4_Init();
 8001b3c:	f000 fdc4 	bl	80026c8 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim6);
 8001b40:	4826      	ldr	r0, [pc, #152]	@ (8001bdc <main+0xcc>)
 8001b42:	f003 fe4f 	bl	80057e4 <HAL_TIM_Base_Start_IT>

  if (HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1) != HAL_OK)
 8001b46:	2100      	movs	r1, #0
 8001b48:	4825      	ldr	r0, [pc, #148]	@ (8001be0 <main+0xd0>)
 8001b4a:	f003 ff43 	bl	80059d4 <HAL_TIM_PWM_Start>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d001      	beq.n	8001b58 <main+0x48>
  {
      Error_Handler();
 8001b54:	f000 f910 	bl	8001d78 <Error_Handler>
  }

  if (HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2) != HAL_OK)
 8001b58:	2104      	movs	r1, #4
 8001b5a:	4821      	ldr	r0, [pc, #132]	@ (8001be0 <main+0xd0>)
 8001b5c:	f003 ff3a 	bl	80059d4 <HAL_TIM_PWM_Start>
 8001b60:	4603      	mov	r3, r0
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d001      	beq.n	8001b6a <main+0x5a>
  {
      Error_Handler();
 8001b66:	f000 f907 	bl	8001d78 <Error_Handler>
  }

  if (HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3) != HAL_OK)
 8001b6a:	2108      	movs	r1, #8
 8001b6c:	481c      	ldr	r0, [pc, #112]	@ (8001be0 <main+0xd0>)
 8001b6e:	f003 ff31 	bl	80059d4 <HAL_TIM_PWM_Start>
 8001b72:	4603      	mov	r3, r0
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d001      	beq.n	8001b7c <main+0x6c>
  {
      Error_Handler();
 8001b78:	f000 f8fe 	bl	8001d78 <Error_Handler>
  }

  if (HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4) != HAL_OK)
 8001b7c:	210c      	movs	r1, #12
 8001b7e:	4818      	ldr	r0, [pc, #96]	@ (8001be0 <main+0xd0>)
 8001b80:	f003 ff28 	bl	80059d4 <HAL_TIM_PWM_Start>
 8001b84:	4603      	mov	r3, r0
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d001      	beq.n	8001b8e <main+0x7e>
  {
      Error_Handler();
 8001b8a:	f000 f8f5 	bl	8001d78 <Error_Handler>
  }
  arrTimerVitesse = __HAL_TIM_GET_AUTORELOAD(&htim6);
 8001b8e:	4b13      	ldr	r3, [pc, #76]	@ (8001bdc <main+0xcc>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b94:	b29a      	uxth	r2, r3
 8001b96:	4b13      	ldr	r3, [pc, #76]	@ (8001be4 <main+0xd4>)
 8001b98:	801a      	strh	r2, [r3, #0]
  curr_mode = MANUAL_MODE;
 8001b9a:	4b13      	ldr	r3, [pc, #76]	@ (8001be8 <main+0xd8>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	701a      	strb	r2, [r3, #0]
  LCD_Init(&LCD_Init_OK);
 8001ba0:	4812      	ldr	r0, [pc, #72]	@ (8001bec <main+0xdc>)
 8001ba2:	f001 f895 	bl	8002cd0 <LCD_Init>
  {

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	if(curr_mode != MANUAL_MODE) { 	// Toggle auto mode
 8001ba6:	4b10      	ldr	r3, [pc, #64]	@ (8001be8 <main+0xd8>)
 8001ba8:	781b      	ldrb	r3, [r3, #0]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d013      	beq.n	8001bd6 <main+0xc6>
		switch(curr_mode) {
 8001bae:	4b0e      	ldr	r3, [pc, #56]	@ (8001be8 <main+0xd8>)
 8001bb0:	781b      	ldrb	r3, [r3, #0]
 8001bb2:	2b03      	cmp	r3, #3
 8001bb4:	d00c      	beq.n	8001bd0 <main+0xc0>
 8001bb6:	2b03      	cmp	r3, #3
 8001bb8:	dcf5      	bgt.n	8001ba6 <main+0x96>
 8001bba:	2b01      	cmp	r3, #1
 8001bbc:	d002      	beq.n	8001bc4 <main+0xb4>
 8001bbe:	2b02      	cmp	r3, #2
 8001bc0:	d003      	beq.n	8001bca <main+0xba>
 8001bc2:	e00a      	b.n	8001bda <main+0xca>
			case CIRCLE_MODE:
				Auto_Circle();
 8001bc4:	f7ff fb30 	bl	8001228 <Auto_Circle>
				break;
 8001bc8:	e007      	b.n	8001bda <main+0xca>
			case BACK_FORTH_MODE:
				Auto_Back_Forth();
 8001bca:	f7ff fbc7 	bl	800135c <Auto_Back_Forth>
				break;
 8001bce:	e004      	b.n	8001bda <main+0xca>
			case SQUARE_MODE:
				Auto_Square();
 8001bd0:	f7ff fc06 	bl	80013e0 <Auto_Square>
				break;
 8001bd4:	e001      	b.n	8001bda <main+0xca>
		}
	}

	else { 	// Manual mode

		Controller();
 8001bd6:	f000 f94b 	bl	8001e70 <Controller>
	if(curr_mode != MANUAL_MODE) { 	// Toggle auto mode
 8001bda:	e7e4      	b.n	8001ba6 <main+0x96>
 8001bdc:	20000270 	.word	0x20000270
 8001be0:	200001e0 	.word	0x200001e0
 8001be4:	20000140 	.word	0x20000140
 8001be8:	200000ba 	.word	0x200000ba
 8001bec:	20000142 	.word	0x20000142

08001bf0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b094      	sub	sp, #80	@ 0x50
 8001bf4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001bf6:	f107 031c 	add.w	r3, r7, #28
 8001bfa:	2234      	movs	r2, #52	@ 0x34
 8001bfc:	2100      	movs	r1, #0
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f006 f8f0 	bl	8007de4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c04:	f107 0308 	add.w	r3, r7, #8
 8001c08:	2200      	movs	r2, #0
 8001c0a:	601a      	str	r2, [r3, #0]
 8001c0c:	605a      	str	r2, [r3, #4]
 8001c0e:	609a      	str	r2, [r3, #8]
 8001c10:	60da      	str	r2, [r3, #12]
 8001c12:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c14:	2300      	movs	r3, #0
 8001c16:	607b      	str	r3, [r7, #4]
 8001c18:	4b2a      	ldr	r3, [pc, #168]	@ (8001cc4 <SystemClock_Config+0xd4>)
 8001c1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c1c:	4a29      	ldr	r2, [pc, #164]	@ (8001cc4 <SystemClock_Config+0xd4>)
 8001c1e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c22:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c24:	4b27      	ldr	r3, [pc, #156]	@ (8001cc4 <SystemClock_Config+0xd4>)
 8001c26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c28:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c2c:	607b      	str	r3, [r7, #4]
 8001c2e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001c30:	2300      	movs	r3, #0
 8001c32:	603b      	str	r3, [r7, #0]
 8001c34:	4b24      	ldr	r3, [pc, #144]	@ (8001cc8 <SystemClock_Config+0xd8>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001c3c:	4a22      	ldr	r2, [pc, #136]	@ (8001cc8 <SystemClock_Config+0xd8>)
 8001c3e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c42:	6013      	str	r3, [r2, #0]
 8001c44:	4b20      	ldr	r3, [pc, #128]	@ (8001cc8 <SystemClock_Config+0xd8>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001c4c:	603b      	str	r3, [r7, #0]
 8001c4e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001c50:	2302      	movs	r3, #2
 8001c52:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001c54:	2301      	movs	r3, #1
 8001c56:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001c58:	2310      	movs	r3, #16
 8001c5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c5c:	2302      	movs	r3, #2
 8001c5e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001c60:	2300      	movs	r3, #0
 8001c62:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001c64:	2310      	movs	r3, #16
 8001c66:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001c68:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001c6c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001c6e:	2304      	movs	r3, #4
 8001c70:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001c72:	2302      	movs	r3, #2
 8001c74:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001c76:	2302      	movs	r3, #2
 8001c78:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c7a:	f107 031c 	add.w	r3, r7, #28
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f003 f818 	bl	8004cb4 <HAL_RCC_OscConfig>
 8001c84:	4603      	mov	r3, r0
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d001      	beq.n	8001c8e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001c8a:	f000 f875 	bl	8001d78 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c8e:	230f      	movs	r3, #15
 8001c90:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c92:	2302      	movs	r3, #2
 8001c94:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c96:	2300      	movs	r3, #0
 8001c98:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001c9a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c9e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001ca4:	f107 0308 	add.w	r3, r7, #8
 8001ca8:	2102      	movs	r1, #2
 8001caa:	4618      	mov	r0, r3
 8001cac:	f002 fcb8 	bl	8004620 <HAL_RCC_ClockConfig>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d001      	beq.n	8001cba <SystemClock_Config+0xca>
  {
    Error_Handler();
 8001cb6:	f000 f85f 	bl	8001d78 <Error_Handler>
  }
}
 8001cba:	bf00      	nop
 8001cbc:	3750      	adds	r7, #80	@ 0x50
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	40023800 	.word	0x40023800
 8001cc8:	40007000 	.word	0x40007000

08001ccc <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001ccc:	b590      	push	{r4, r7, lr}
 8001cce:	b083      	sub	sp, #12
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	80fb      	strh	r3, [r7, #6]
	{
		nbPulseG++ ; // compte les pulses de lencodeur droit
	}
	*/

	if(GPIO_Pin == Blue_Button_Pin) {
 8001cd6:	88fb      	ldrh	r3, [r7, #6]
 8001cd8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001cdc:	d127      	bne.n	8001d2e <HAL_GPIO_EXTI_Callback+0x62>
		dip_state = Get_Mode(HAL_GPIO_ReadPin(Dipswitch_MSB_GPIO_Port, Dipswitch_MSB_Pin), HAL_GPIO_ReadPin(Dipswitch_LSB_GPIO_Port, Dipswitch_LSB_Pin));
 8001cde:	2104      	movs	r1, #4
 8001ce0:	4815      	ldr	r0, [pc, #84]	@ (8001d38 <HAL_GPIO_EXTI_Callback+0x6c>)
 8001ce2:	f001 fc59 	bl	8003598 <HAL_GPIO_ReadPin>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	461c      	mov	r4, r3
 8001cea:	2108      	movs	r1, #8
 8001cec:	4812      	ldr	r0, [pc, #72]	@ (8001d38 <HAL_GPIO_EXTI_Callback+0x6c>)
 8001cee:	f001 fc53 	bl	8003598 <HAL_GPIO_ReadPin>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	4619      	mov	r1, r3
 8001cf6:	4620      	mov	r0, r4
 8001cf8:	f7ff f8b8 	bl	8000e6c <Get_Mode>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	b2da      	uxtb	r2, r3
 8001d00:	4b0e      	ldr	r3, [pc, #56]	@ (8001d3c <HAL_GPIO_EXTI_Callback+0x70>)
 8001d02:	701a      	strb	r2, [r3, #0]

		// Resume if paused
		if(pause)
 8001d04:	4b0e      	ldr	r3, [pc, #56]	@ (8001d40 <HAL_GPIO_EXTI_Callback+0x74>)
 8001d06:	781b      	ldrb	r3, [r3, #0]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d002      	beq.n	8001d12 <HAL_GPIO_EXTI_Callback+0x46>
			Resume();
 8001d0c:	f7ff fbe8 	bl	80014e0 <Resume>
 8001d10:	e005      	b.n	8001d1e <HAL_GPIO_EXTI_Callback+0x52>

		// Pause if button pressed while auto mode on
		else if(curr_mode != MANUAL_MODE)
 8001d12:	4b0c      	ldr	r3, [pc, #48]	@ (8001d44 <HAL_GPIO_EXTI_Callback+0x78>)
 8001d14:	781b      	ldrb	r3, [r3, #0]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d001      	beq.n	8001d1e <HAL_GPIO_EXTI_Callback+0x52>
			Pause();
 8001d1a:	f7ff fba3 	bl	8001464 <Pause>

		// Change current mode only on manual mode
		if(curr_mode == MANUAL_MODE)
 8001d1e:	4b09      	ldr	r3, [pc, #36]	@ (8001d44 <HAL_GPIO_EXTI_Callback+0x78>)
 8001d20:	781b      	ldrb	r3, [r3, #0]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d103      	bne.n	8001d2e <HAL_GPIO_EXTI_Callback+0x62>
			curr_mode = dip_state;
 8001d26:	4b05      	ldr	r3, [pc, #20]	@ (8001d3c <HAL_GPIO_EXTI_Callback+0x70>)
 8001d28:	781a      	ldrb	r2, [r3, #0]
 8001d2a:	4b06      	ldr	r3, [pc, #24]	@ (8001d44 <HAL_GPIO_EXTI_Callback+0x78>)
 8001d2c:	701a      	strb	r2, [r3, #0]
	}
}
 8001d2e:	bf00      	nop
 8001d30:	370c      	adds	r7, #12
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd90      	pop	{r4, r7, pc}
 8001d36:	bf00      	nop
 8001d38:	40020800 	.word	0x40020800
 8001d3c:	200000b9 	.word	0x200000b9
 8001d40:	200000b8 	.word	0x200000b8
 8001d44:	200000ba 	.word	0x200000ba

08001d48 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b083      	sub	sp, #12
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
    	}
    	*/

    }

    if(htim->Instance == TIM7) {	// Triggered every 10 µs
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4a06      	ldr	r2, [pc, #24]	@ (8001d70 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d104      	bne.n	8001d64 <HAL_TIM_PeriodElapsedCallback+0x1c>
    	timer_count += 10;
 8001d5a:	4b06      	ldr	r3, [pc, #24]	@ (8001d74 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	330a      	adds	r3, #10
 8001d60:	4a04      	ldr	r2, [pc, #16]	@ (8001d74 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8001d62:	6013      	str	r3, [r2, #0]
    }
}
 8001d64:	bf00      	nop
 8001d66:	370c      	adds	r7, #12
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6e:	4770      	bx	lr
 8001d70:	40001400 	.word	0x40001400
 8001d74:	200000d0 	.word	0x200000d0

08001d78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d7c:	b672      	cpsid	i
}
 8001d7e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d80:	bf00      	nop
 8001d82:	e7fd      	b.n	8001d80 <Error_Handler+0x8>

08001d84 <Format_Data>:
int maxInverse = 500;
int sendPulseMotor;

int toggle;

void Format_Data() {
 8001d84:	b480      	push	{r7}
 8001d86:	af00      	add	r7, sp, #0
	/*FROM LAB7*/
	formatted_data[0] = data[0];
 8001d88:	4b20      	ldr	r3, [pc, #128]	@ (8001e0c <Format_Data+0x88>)
 8001d8a:	781b      	ldrb	r3, [r3, #0]
 8001d8c:	461a      	mov	r2, r3
 8001d8e:	4b20      	ldr	r3, [pc, #128]	@ (8001e10 <Format_Data+0x8c>)
 8001d90:	601a      	str	r2, [r3, #0]
	formatted_data[1] = data[1];
 8001d92:	4b1e      	ldr	r3, [pc, #120]	@ (8001e0c <Format_Data+0x88>)
 8001d94:	785b      	ldrb	r3, [r3, #1]
 8001d96:	461a      	mov	r2, r3
 8001d98:	4b1d      	ldr	r3, [pc, #116]	@ (8001e10 <Format_Data+0x8c>)
 8001d9a:	605a      	str	r2, [r3, #4]
	formatted_data[5] = (data[5] & 0x02);
 8001d9c:	4b1b      	ldr	r3, [pc, #108]	@ (8001e0c <Format_Data+0x88>)
 8001d9e:	795b      	ldrb	r3, [r3, #5]
 8001da0:	f003 0302 	and.w	r3, r3, #2
 8001da4:	4a1a      	ldr	r2, [pc, #104]	@ (8001e10 <Format_Data+0x8c>)
 8001da6:	6153      	str	r3, [r2, #20]
	if(formatted_data[5] == 2)
 8001da8:	4b19      	ldr	r3, [pc, #100]	@ (8001e10 <Format_Data+0x8c>)
 8001daa:	695b      	ldr	r3, [r3, #20]
 8001dac:	2b02      	cmp	r3, #2
 8001dae:	d102      	bne.n	8001db6 <Format_Data+0x32>
		formatted_data[5] = 1;
 8001db0:	4b17      	ldr	r3, [pc, #92]	@ (8001e10 <Format_Data+0x8c>)
 8001db2:	2201      	movs	r2, #1
 8001db4:	615a      	str	r2, [r3, #20]
	formatted_data[6] = (data[5] & 0x01);
 8001db6:	4b15      	ldr	r3, [pc, #84]	@ (8001e0c <Format_Data+0x88>)
 8001db8:	795b      	ldrb	r3, [r3, #5]
 8001dba:	f003 0301 	and.w	r3, r3, #1
 8001dbe:	4a14      	ldr	r2, [pc, #80]	@ (8001e10 <Format_Data+0x8c>)
 8001dc0:	6193      	str	r3, [r2, #24]

	/*MY DATA*/
	Xdata = data[0];
 8001dc2:	4b12      	ldr	r3, [pc, #72]	@ (8001e0c <Format_Data+0x88>)
 8001dc4:	781b      	ldrb	r3, [r3, #0]
 8001dc6:	461a      	mov	r2, r3
 8001dc8:	4b12      	ldr	r3, [pc, #72]	@ (8001e14 <Format_Data+0x90>)
 8001dca:	601a      	str	r2, [r3, #0]
	Ydata = data[1];
 8001dcc:	4b0f      	ldr	r3, [pc, #60]	@ (8001e0c <Format_Data+0x88>)
 8001dce:	785b      	ldrb	r3, [r3, #1]
 8001dd0:	461a      	mov	r2, r3
 8001dd2:	4b11      	ldr	r3, [pc, #68]	@ (8001e18 <Format_Data+0x94>)
 8001dd4:	601a      	str	r2, [r3, #0]
	Xpulse = data[0];
 8001dd6:	4b0d      	ldr	r3, [pc, #52]	@ (8001e0c <Format_Data+0x88>)
 8001dd8:	781b      	ldrb	r3, [r3, #0]
 8001dda:	461a      	mov	r2, r3
 8001ddc:	4b0f      	ldr	r3, [pc, #60]	@ (8001e1c <Format_Data+0x98>)
 8001dde:	601a      	str	r2, [r3, #0]
	Ypulse = data[1];
 8001de0:	4b0a      	ldr	r3, [pc, #40]	@ (8001e0c <Format_Data+0x88>)
 8001de2:	785b      	ldrb	r3, [r3, #1]
 8001de4:	461a      	mov	r2, r3
 8001de6:	4b0e      	ldr	r3, [pc, #56]	@ (8001e20 <Format_Data+0x9c>)
 8001de8:	601a      	str	r2, [r3, #0]
	Cbutton = (data[5] & 0x02);
 8001dea:	4b08      	ldr	r3, [pc, #32]	@ (8001e0c <Format_Data+0x88>)
 8001dec:	795b      	ldrb	r3, [r3, #5]
 8001dee:	f003 0302 	and.w	r3, r3, #2
 8001df2:	4a0c      	ldr	r2, [pc, #48]	@ (8001e24 <Format_Data+0xa0>)
 8001df4:	6013      	str	r3, [r2, #0]
	Zbutton = (data[5] & 0x01);
 8001df6:	4b05      	ldr	r3, [pc, #20]	@ (8001e0c <Format_Data+0x88>)
 8001df8:	795b      	ldrb	r3, [r3, #5]
 8001dfa:	f003 0301 	and.w	r3, r3, #1
 8001dfe:	4a0a      	ldr	r2, [pc, #40]	@ (8001e28 <Format_Data+0xa4>)
 8001e00:	6013      	str	r3, [r2, #0]
	/* neutral x and y data: 128
	max x and y data: 1-254 */

}
 8001e02:	bf00      	nop
 8001e04:	46bd      	mov	sp, r7
 8001e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0a:	4770      	bx	lr
 8001e0c:	20000144 	.word	0x20000144
 8001e10:	2000014c 	.word	0x2000014c
 8001e14:	20000168 	.word	0x20000168
 8001e18:	2000016c 	.word	0x2000016c
 8001e1c:	20000170 	.word	0x20000170
 8001e20:	20000174 	.word	0x20000174
 8001e24:	20000178 	.word	0x20000178
 8001e28:	2000017c 	.word	0x2000017c

08001e2c <Initialisation_manette>:


void Initialisation_manette(){
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b082      	sub	sp, #8
 8001e30:	af02      	add	r7, sp, #8

	HAL_I2C_Master_Transmit(&hi2c1, NUNCHUK_ADDRESS, initcomm1, 2, HAL_MAX_DELAY);
 8001e32:	f04f 33ff 	mov.w	r3, #4294967295
 8001e36:	9300      	str	r3, [sp, #0]
 8001e38:	2302      	movs	r3, #2
 8001e3a:	4a0a      	ldr	r2, [pc, #40]	@ (8001e64 <Initialisation_manette+0x38>)
 8001e3c:	21a4      	movs	r1, #164	@ 0xa4
 8001e3e:	480a      	ldr	r0, [pc, #40]	@ (8001e68 <Initialisation_manette+0x3c>)
 8001e40:	f001 fd38 	bl	80038b4 <HAL_I2C_Master_Transmit>
	HAL_Delay(10);
 8001e44:	200a      	movs	r0, #10
 8001e46:	f001 f8dd 	bl	8003004 <HAL_Delay>
	HAL_I2C_Master_Transmit(&hi2c1, NUNCHUK_ADDRESS, initcomm2, 2, HAL_MAX_DELAY);
 8001e4a:	f04f 33ff 	mov.w	r3, #4294967295
 8001e4e:	9300      	str	r3, [sp, #0]
 8001e50:	2302      	movs	r3, #2
 8001e52:	4a06      	ldr	r2, [pc, #24]	@ (8001e6c <Initialisation_manette+0x40>)
 8001e54:	21a4      	movs	r1, #164	@ 0xa4
 8001e56:	4804      	ldr	r0, [pc, #16]	@ (8001e68 <Initialisation_manette+0x3c>)
 8001e58:	f001 fd2c 	bl	80038b4 <HAL_I2C_Master_Transmit>

}
 8001e5c:	bf00      	nop
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	bf00      	nop
 8001e64:	20000004 	.word	0x20000004
 8001e68:	200000ec 	.word	0x200000ec
 8001e6c:	20000008 	.word	0x20000008

08001e70 <Controller>:


void Controller(){
 8001e70:	b5b0      	push	{r4, r5, r7, lr}
 8001e72:	b082      	sub	sp, #8
 8001e74:	af02      	add	r7, sp, #8

	HAL_I2C_Master_Transmit(&hi2c1, NUNCHUK_ADDRESS, 0x00, 1, HAL_MAX_DELAY);
 8001e76:	f04f 33ff 	mov.w	r3, #4294967295
 8001e7a:	9300      	str	r3, [sp, #0]
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	2200      	movs	r2, #0
 8001e80:	21a4      	movs	r1, #164	@ 0xa4
 8001e82:	48b5      	ldr	r0, [pc, #724]	@ (8002158 <Controller+0x2e8>)
 8001e84:	f001 fd16 	bl	80038b4 <HAL_I2C_Master_Transmit>
	HAL_Delay(10);
 8001e88:	200a      	movs	r0, #10
 8001e8a:	f001 f8bb 	bl	8003004 <HAL_Delay>
	HAL_I2C_Master_Receive(&hi2c1, NUNCHUK_ADDRESS, data, 6, HAL_MAX_DELAY);
 8001e8e:	f04f 33ff 	mov.w	r3, #4294967295
 8001e92:	9300      	str	r3, [sp, #0]
 8001e94:	2306      	movs	r3, #6
 8001e96:	4ab1      	ldr	r2, [pc, #708]	@ (800215c <Controller+0x2ec>)
 8001e98:	21a4      	movs	r1, #164	@ 0xa4
 8001e9a:	48af      	ldr	r0, [pc, #700]	@ (8002158 <Controller+0x2e8>)
 8001e9c:	f001 fe08 	bl	8003ab0 <HAL_I2C_Master_Receive>
	Format_Data();
 8001ea0:	f7ff ff70 	bl	8001d84 <Format_Data>



	if(Cbutton == 0){
 8001ea4:	4bae      	ldr	r3, [pc, #696]	@ (8002160 <Controller+0x2f0>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d104      	bne.n	8001eb6 <Controller+0x46>
		HAL_Delay(10);
 8001eac:	200a      	movs	r0, #10
 8001eae:	f001 f8a9 	bl	8003004 <HAL_Delay>
		ToggleModeMan();
 8001eb2:	f000 f983 	bl	80021bc <ToggleModeMan>
	}
	if(Zbutton == 0){
 8001eb6:	4bab      	ldr	r3, [pc, #684]	@ (8002164 <Controller+0x2f4>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d104      	bne.n	8001ec8 <Controller+0x58>
		HAL_Delay(10);
 8001ebe:	200a      	movs	r0, #10
 8001ec0:	f001 f8a0 	bl	8003004 <HAL_Delay>
		ToggleModeVit();
 8001ec4:	f000 f964 	bl	8002190 <ToggleModeVit>
	}


	if(ToggleC == 1){
 8001ec8:	4ba7      	ldr	r3, [pc, #668]	@ (8002168 <Controller+0x2f8>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	2b01      	cmp	r3, #1
 8001ece:	f040 8132 	bne.w	8002136 <Controller+0x2c6>


		if(Xdata == 128 && Ydata == 128){
 8001ed2:	4ba6      	ldr	r3, [pc, #664]	@ (800216c <Controller+0x2fc>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	2b80      	cmp	r3, #128	@ 0x80
 8001ed8:	d107      	bne.n	8001eea <Controller+0x7a>
 8001eda:	4ba5      	ldr	r3, [pc, #660]	@ (8002170 <Controller+0x300>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	2b80      	cmp	r3, #128	@ 0x80
 8001ee0:	d103      	bne.n	8001eea <Controller+0x7a>
				Stop(&htim3);
 8001ee2:	48a4      	ldr	r0, [pc, #656]	@ (8002174 <Controller+0x304>)
 8001ee4:	f7ff fcb8 	bl	8001858 <Stop>
	}
	else{
		Stop(&htim3);
	}

}
 8001ee8:	e128      	b.n	800213c <Controller+0x2cc>
		if(modeVitesse==1){
 8001eea:	4ba3      	ldr	r3, [pc, #652]	@ (8002178 <Controller+0x308>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	2b01      	cmp	r3, #1
 8001ef0:	d159      	bne.n	8001fa6 <Controller+0x136>
			Xpulse = Xdata * 0.33 * pulseCoeff;
 8001ef2:	4b9e      	ldr	r3, [pc, #632]	@ (800216c <Controller+0x2fc>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f7fe fb2c 	bl	8000554 <__aeabi_i2d>
 8001efc:	a392      	add	r3, pc, #584	@ (adr r3, 8002148 <Controller+0x2d8>)
 8001efe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f02:	f7fe fb91 	bl	8000628 <__aeabi_dmul>
 8001f06:	4602      	mov	r2, r0
 8001f08:	460b      	mov	r3, r1
 8001f0a:	4614      	mov	r4, r2
 8001f0c:	461d      	mov	r5, r3
 8001f0e:	4b9b      	ldr	r3, [pc, #620]	@ (800217c <Controller+0x30c>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4618      	mov	r0, r3
 8001f14:	f7fe fb30 	bl	8000578 <__aeabi_f2d>
 8001f18:	4602      	mov	r2, r0
 8001f1a:	460b      	mov	r3, r1
 8001f1c:	4620      	mov	r0, r4
 8001f1e:	4629      	mov	r1, r5
 8001f20:	f7fe fb82 	bl	8000628 <__aeabi_dmul>
 8001f24:	4602      	mov	r2, r0
 8001f26:	460b      	mov	r3, r1
 8001f28:	4610      	mov	r0, r2
 8001f2a:	4619      	mov	r1, r3
 8001f2c:	f7fe fd8e 	bl	8000a4c <__aeabi_d2iz>
 8001f30:	4603      	mov	r3, r0
 8001f32:	4a93      	ldr	r2, [pc, #588]	@ (8002180 <Controller+0x310>)
 8001f34:	6013      	str	r3, [r2, #0]
			Ypulse = Ydata * 0.33 * pulseCoeff;
 8001f36:	4b8e      	ldr	r3, [pc, #568]	@ (8002170 <Controller+0x300>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f7fe fb0a 	bl	8000554 <__aeabi_i2d>
 8001f40:	a381      	add	r3, pc, #516	@ (adr r3, 8002148 <Controller+0x2d8>)
 8001f42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f46:	f7fe fb6f 	bl	8000628 <__aeabi_dmul>
 8001f4a:	4602      	mov	r2, r0
 8001f4c:	460b      	mov	r3, r1
 8001f4e:	4614      	mov	r4, r2
 8001f50:	461d      	mov	r5, r3
 8001f52:	4b8a      	ldr	r3, [pc, #552]	@ (800217c <Controller+0x30c>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4618      	mov	r0, r3
 8001f58:	f7fe fb0e 	bl	8000578 <__aeabi_f2d>
 8001f5c:	4602      	mov	r2, r0
 8001f5e:	460b      	mov	r3, r1
 8001f60:	4620      	mov	r0, r4
 8001f62:	4629      	mov	r1, r5
 8001f64:	f7fe fb60 	bl	8000628 <__aeabi_dmul>
 8001f68:	4602      	mov	r2, r0
 8001f6a:	460b      	mov	r3, r1
 8001f6c:	4610      	mov	r0, r2
 8001f6e:	4619      	mov	r1, r3
 8001f70:	f7fe fd6c 	bl	8000a4c <__aeabi_d2iz>
 8001f74:	4603      	mov	r3, r0
 8001f76:	4a83      	ldr	r2, [pc, #524]	@ (8002184 <Controller+0x314>)
 8001f78:	6013      	str	r3, [r2, #0]
			maxInverse = maxInverse * 0.33;
 8001f7a:	4b83      	ldr	r3, [pc, #524]	@ (8002188 <Controller+0x318>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f7fe fae8 	bl	8000554 <__aeabi_i2d>
 8001f84:	a370      	add	r3, pc, #448	@ (adr r3, 8002148 <Controller+0x2d8>)
 8001f86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f8a:	f7fe fb4d 	bl	8000628 <__aeabi_dmul>
 8001f8e:	4602      	mov	r2, r0
 8001f90:	460b      	mov	r3, r1
 8001f92:	4610      	mov	r0, r2
 8001f94:	4619      	mov	r1, r3
 8001f96:	f7fe fd59 	bl	8000a4c <__aeabi_d2iz>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	4a7a      	ldr	r2, [pc, #488]	@ (8002188 <Controller+0x318>)
 8001f9e:	6013      	str	r3, [r2, #0]
			LCD_Manuel(1);
 8001fa0:	2001      	movs	r0, #1
 8001fa2:	f000 fdd7 	bl	8002b54 <LCD_Manuel>
		if(modeVitesse==2){
 8001fa6:	4b74      	ldr	r3, [pc, #464]	@ (8002178 <Controller+0x308>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	2b02      	cmp	r3, #2
 8001fac:	d159      	bne.n	8002062 <Controller+0x1f2>
			Xpulse = Xdata * 0.66 * pulseCoeff;
 8001fae:	4b6f      	ldr	r3, [pc, #444]	@ (800216c <Controller+0x2fc>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f7fe face 	bl	8000554 <__aeabi_i2d>
 8001fb8:	a365      	add	r3, pc, #404	@ (adr r3, 8002150 <Controller+0x2e0>)
 8001fba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fbe:	f7fe fb33 	bl	8000628 <__aeabi_dmul>
 8001fc2:	4602      	mov	r2, r0
 8001fc4:	460b      	mov	r3, r1
 8001fc6:	4614      	mov	r4, r2
 8001fc8:	461d      	mov	r5, r3
 8001fca:	4b6c      	ldr	r3, [pc, #432]	@ (800217c <Controller+0x30c>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f7fe fad2 	bl	8000578 <__aeabi_f2d>
 8001fd4:	4602      	mov	r2, r0
 8001fd6:	460b      	mov	r3, r1
 8001fd8:	4620      	mov	r0, r4
 8001fda:	4629      	mov	r1, r5
 8001fdc:	f7fe fb24 	bl	8000628 <__aeabi_dmul>
 8001fe0:	4602      	mov	r2, r0
 8001fe2:	460b      	mov	r3, r1
 8001fe4:	4610      	mov	r0, r2
 8001fe6:	4619      	mov	r1, r3
 8001fe8:	f7fe fd30 	bl	8000a4c <__aeabi_d2iz>
 8001fec:	4603      	mov	r3, r0
 8001fee:	4a64      	ldr	r2, [pc, #400]	@ (8002180 <Controller+0x310>)
 8001ff0:	6013      	str	r3, [r2, #0]
			Ypulse = Ydata * 0.66 * pulseCoeff;
 8001ff2:	4b5f      	ldr	r3, [pc, #380]	@ (8002170 <Controller+0x300>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f7fe faac 	bl	8000554 <__aeabi_i2d>
 8001ffc:	a354      	add	r3, pc, #336	@ (adr r3, 8002150 <Controller+0x2e0>)
 8001ffe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002002:	f7fe fb11 	bl	8000628 <__aeabi_dmul>
 8002006:	4602      	mov	r2, r0
 8002008:	460b      	mov	r3, r1
 800200a:	4614      	mov	r4, r2
 800200c:	461d      	mov	r5, r3
 800200e:	4b5b      	ldr	r3, [pc, #364]	@ (800217c <Controller+0x30c>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4618      	mov	r0, r3
 8002014:	f7fe fab0 	bl	8000578 <__aeabi_f2d>
 8002018:	4602      	mov	r2, r0
 800201a:	460b      	mov	r3, r1
 800201c:	4620      	mov	r0, r4
 800201e:	4629      	mov	r1, r5
 8002020:	f7fe fb02 	bl	8000628 <__aeabi_dmul>
 8002024:	4602      	mov	r2, r0
 8002026:	460b      	mov	r3, r1
 8002028:	4610      	mov	r0, r2
 800202a:	4619      	mov	r1, r3
 800202c:	f7fe fd0e 	bl	8000a4c <__aeabi_d2iz>
 8002030:	4603      	mov	r3, r0
 8002032:	4a54      	ldr	r2, [pc, #336]	@ (8002184 <Controller+0x314>)
 8002034:	6013      	str	r3, [r2, #0]
			maxInverse = maxInverse * 0.66;
 8002036:	4b54      	ldr	r3, [pc, #336]	@ (8002188 <Controller+0x318>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4618      	mov	r0, r3
 800203c:	f7fe fa8a 	bl	8000554 <__aeabi_i2d>
 8002040:	a343      	add	r3, pc, #268	@ (adr r3, 8002150 <Controller+0x2e0>)
 8002042:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002046:	f7fe faef 	bl	8000628 <__aeabi_dmul>
 800204a:	4602      	mov	r2, r0
 800204c:	460b      	mov	r3, r1
 800204e:	4610      	mov	r0, r2
 8002050:	4619      	mov	r1, r3
 8002052:	f7fe fcfb 	bl	8000a4c <__aeabi_d2iz>
 8002056:	4603      	mov	r3, r0
 8002058:	4a4b      	ldr	r2, [pc, #300]	@ (8002188 <Controller+0x318>)
 800205a:	6013      	str	r3, [r2, #0]
			LCD_Manuel(2);
 800205c:	2002      	movs	r0, #2
 800205e:	f000 fd79 	bl	8002b54 <LCD_Manuel>
		if(modeVitesse==3){
 8002062:	4b45      	ldr	r3, [pc, #276]	@ (8002178 <Controller+0x308>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	2b03      	cmp	r3, #3
 8002068:	d124      	bne.n	80020b4 <Controller+0x244>
			Xpulse = Xdata * pulseCoeff;
 800206a:	4b40      	ldr	r3, [pc, #256]	@ (800216c <Controller+0x2fc>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	ee07 3a90 	vmov	s15, r3
 8002072:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002076:	4b41      	ldr	r3, [pc, #260]	@ (800217c <Controller+0x30c>)
 8002078:	edd3 7a00 	vldr	s15, [r3]
 800207c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002080:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002084:	ee17 2a90 	vmov	r2, s15
 8002088:	4b3d      	ldr	r3, [pc, #244]	@ (8002180 <Controller+0x310>)
 800208a:	601a      	str	r2, [r3, #0]
			Ypulse = Ydata * pulseCoeff;
 800208c:	4b38      	ldr	r3, [pc, #224]	@ (8002170 <Controller+0x300>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	ee07 3a90 	vmov	s15, r3
 8002094:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002098:	4b38      	ldr	r3, [pc, #224]	@ (800217c <Controller+0x30c>)
 800209a:	edd3 7a00 	vldr	s15, [r3]
 800209e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020a2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80020a6:	ee17 2a90 	vmov	r2, s15
 80020aa:	4b36      	ldr	r3, [pc, #216]	@ (8002184 <Controller+0x314>)
 80020ac:	601a      	str	r2, [r3, #0]
			LCD_Manuel(3);
 80020ae:	2003      	movs	r0, #3
 80020b0:	f000 fd50 	bl	8002b54 <LCD_Manuel>
		if(Xdata>128){
 80020b4:	4b2d      	ldr	r3, [pc, #180]	@ (800216c <Controller+0x2fc>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	2b80      	cmp	r3, #128	@ 0x80
 80020ba:	dd0a      	ble.n	80020d2 <Controller+0x262>
			sendPulseMotor = Xpulse;
 80020bc:	4b30      	ldr	r3, [pc, #192]	@ (8002180 <Controller+0x310>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a32      	ldr	r2, [pc, #200]	@ (800218c <Controller+0x31c>)
 80020c2:	6013      	str	r3, [r2, #0]
			Droite(sendPulseMotor,&htim3);
 80020c4:	4b31      	ldr	r3, [pc, #196]	@ (800218c <Controller+0x31c>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	492a      	ldr	r1, [pc, #168]	@ (8002174 <Controller+0x304>)
 80020ca:	4618      	mov	r0, r3
 80020cc:	f7ff faa4 	bl	8001618 <Droite>
 80020d0:	e010      	b.n	80020f4 <Controller+0x284>
		else if(Xdata<128) {
 80020d2:	4b26      	ldr	r3, [pc, #152]	@ (800216c <Controller+0x2fc>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	2b7f      	cmp	r3, #127	@ 0x7f
 80020d8:	dc0c      	bgt.n	80020f4 <Controller+0x284>
				sendPulseMotor = maxInverse - Xpulse;
 80020da:	4b2b      	ldr	r3, [pc, #172]	@ (8002188 <Controller+0x318>)
 80020dc:	681a      	ldr	r2, [r3, #0]
 80020de:	4b28      	ldr	r3, [pc, #160]	@ (8002180 <Controller+0x310>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	1ad3      	subs	r3, r2, r3
 80020e4:	4a29      	ldr	r2, [pc, #164]	@ (800218c <Controller+0x31c>)
 80020e6:	6013      	str	r3, [r2, #0]
				Gauche(sendPulseMotor,&htim3);
 80020e8:	4b28      	ldr	r3, [pc, #160]	@ (800218c <Controller+0x31c>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4921      	ldr	r1, [pc, #132]	@ (8002174 <Controller+0x304>)
 80020ee:	4618      	mov	r0, r3
 80020f0:	f7ff faf2 	bl	80016d8 <Gauche>
		if(Ydata>128){
 80020f4:	4b1e      	ldr	r3, [pc, #120]	@ (8002170 <Controller+0x300>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	2b80      	cmp	r3, #128	@ 0x80
 80020fa:	dd0a      	ble.n	8002112 <Controller+0x2a2>
			sendPulseMotor = Ypulse;
 80020fc:	4b21      	ldr	r3, [pc, #132]	@ (8002184 <Controller+0x314>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4a22      	ldr	r2, [pc, #136]	@ (800218c <Controller+0x31c>)
 8002102:	6013      	str	r3, [r2, #0]
			Avancer(sendPulseMotor,&htim3);
 8002104:	4b21      	ldr	r3, [pc, #132]	@ (800218c <Controller+0x31c>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	491a      	ldr	r1, [pc, #104]	@ (8002174 <Controller+0x304>)
 800210a:	4618      	mov	r0, r3
 800210c:	f7ff fa24 	bl	8001558 <Avancer>
}
 8002110:	e014      	b.n	800213c <Controller+0x2cc>
		else if(Ydata<128){
 8002112:	4b17      	ldr	r3, [pc, #92]	@ (8002170 <Controller+0x300>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	2b7f      	cmp	r3, #127	@ 0x7f
 8002118:	dc10      	bgt.n	800213c <Controller+0x2cc>
				sendPulseMotor = maxInverse - Ypulse;
 800211a:	4b1b      	ldr	r3, [pc, #108]	@ (8002188 <Controller+0x318>)
 800211c:	681a      	ldr	r2, [r3, #0]
 800211e:	4b19      	ldr	r3, [pc, #100]	@ (8002184 <Controller+0x314>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	1ad3      	subs	r3, r2, r3
 8002124:	4a19      	ldr	r2, [pc, #100]	@ (800218c <Controller+0x31c>)
 8002126:	6013      	str	r3, [r2, #0]
				Reculer(sendPulseMotor,&htim3);
 8002128:	4b18      	ldr	r3, [pc, #96]	@ (800218c <Controller+0x31c>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4911      	ldr	r1, [pc, #68]	@ (8002174 <Controller+0x304>)
 800212e:	4618      	mov	r0, r3
 8002130:	f7ff fb32 	bl	8001798 <Reculer>
}
 8002134:	e002      	b.n	800213c <Controller+0x2cc>
		Stop(&htim3);
 8002136:	480f      	ldr	r0, [pc, #60]	@ (8002174 <Controller+0x304>)
 8002138:	f7ff fb8e 	bl	8001858 <Stop>
}
 800213c:	bf00      	nop
 800213e:	46bd      	mov	sp, r7
 8002140:	bdb0      	pop	{r4, r5, r7, pc}
 8002142:	bf00      	nop
 8002144:	f3af 8000 	nop.w
 8002148:	51eb851f 	.word	0x51eb851f
 800214c:	3fd51eb8 	.word	0x3fd51eb8
 8002150:	51eb851f 	.word	0x51eb851f
 8002154:	3fe51eb8 	.word	0x3fe51eb8
 8002158:	200000ec 	.word	0x200000ec
 800215c:	20000144 	.word	0x20000144
 8002160:	20000178 	.word	0x20000178
 8002164:	2000017c 	.word	0x2000017c
 8002168:	2000000c 	.word	0x2000000c
 800216c:	20000168 	.word	0x20000168
 8002170:	2000016c 	.word	0x2000016c
 8002174:	200001e0 	.word	0x200001e0
 8002178:	20000010 	.word	0x20000010
 800217c:	20000014 	.word	0x20000014
 8002180:	20000170 	.word	0x20000170
 8002184:	20000174 	.word	0x20000174
 8002188:	20000018 	.word	0x20000018
 800218c:	20000180 	.word	0x20000180

08002190 <ToggleModeVit>:


void ToggleModeVit() {
 8002190:	b480      	push	{r7}
 8002192:	af00      	add	r7, sp, #0
	if(modeVitesse == 3) {
 8002194:	4b08      	ldr	r3, [pc, #32]	@ (80021b8 <ToggleModeVit+0x28>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	2b03      	cmp	r3, #3
 800219a:	d103      	bne.n	80021a4 <ToggleModeVit+0x14>
		modeVitesse = 1;
 800219c:	4b06      	ldr	r3, [pc, #24]	@ (80021b8 <ToggleModeVit+0x28>)
 800219e:	2201      	movs	r2, #1
 80021a0:	601a      	str	r2, [r3, #0]
	}
	else {
		modeVitesse++;
	}
}
 80021a2:	e004      	b.n	80021ae <ToggleModeVit+0x1e>
		modeVitesse++;
 80021a4:	4b04      	ldr	r3, [pc, #16]	@ (80021b8 <ToggleModeVit+0x28>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	3301      	adds	r3, #1
 80021aa:	4a03      	ldr	r2, [pc, #12]	@ (80021b8 <ToggleModeVit+0x28>)
 80021ac:	6013      	str	r3, [r2, #0]
}
 80021ae:	bf00      	nop
 80021b0:	46bd      	mov	sp, r7
 80021b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b6:	4770      	bx	lr
 80021b8:	20000010 	.word	0x20000010

080021bc <ToggleModeMan>:

void ToggleModeMan() {
 80021bc:	b480      	push	{r7}
 80021be:	af00      	add	r7, sp, #0

	if(ToggleC == 1){
 80021c0:	4b09      	ldr	r3, [pc, #36]	@ (80021e8 <ToggleModeMan+0x2c>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	2b01      	cmp	r3, #1
 80021c6:	d103      	bne.n	80021d0 <ToggleModeMan+0x14>
		ToggleC = 0;
 80021c8:	4b07      	ldr	r3, [pc, #28]	@ (80021e8 <ToggleModeMan+0x2c>)
 80021ca:	2200      	movs	r2, #0
 80021cc:	601a      	str	r2, [r3, #0]
	}
	else if(ToggleC == 0){
		ToggleC = 1;
	}

}
 80021ce:	e006      	b.n	80021de <ToggleModeMan+0x22>
	else if(ToggleC == 0){
 80021d0:	4b05      	ldr	r3, [pc, #20]	@ (80021e8 <ToggleModeMan+0x2c>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d102      	bne.n	80021de <ToggleModeMan+0x22>
		ToggleC = 1;
 80021d8:	4b03      	ldr	r3, [pc, #12]	@ (80021e8 <ToggleModeMan+0x2c>)
 80021da:	2201      	movs	r2, #1
 80021dc:	601a      	str	r2, [r3, #0]
}
 80021de:	bf00      	nop
 80021e0:	46bd      	mov	sp, r7
 80021e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e6:	4770      	bx	lr
 80021e8:	2000000c 	.word	0x2000000c

080021ec <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80021f0:	4b18      	ldr	r3, [pc, #96]	@ (8002254 <MX_SPI2_Init+0x68>)
 80021f2:	4a19      	ldr	r2, [pc, #100]	@ (8002258 <MX_SPI2_Init+0x6c>)
 80021f4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80021f6:	4b17      	ldr	r3, [pc, #92]	@ (8002254 <MX_SPI2_Init+0x68>)
 80021f8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80021fc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_1LINE;
 80021fe:	4b15      	ldr	r3, [pc, #84]	@ (8002254 <MX_SPI2_Init+0x68>)
 8002200:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002204:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002206:	4b13      	ldr	r3, [pc, #76]	@ (8002254 <MX_SPI2_Init+0x68>)
 8002208:	2200      	movs	r2, #0
 800220a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800220c:	4b11      	ldr	r3, [pc, #68]	@ (8002254 <MX_SPI2_Init+0x68>)
 800220e:	2200      	movs	r2, #0
 8002210:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002212:	4b10      	ldr	r3, [pc, #64]	@ (8002254 <MX_SPI2_Init+0x68>)
 8002214:	2200      	movs	r2, #0
 8002216:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002218:	4b0e      	ldr	r3, [pc, #56]	@ (8002254 <MX_SPI2_Init+0x68>)
 800221a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800221e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8002220:	4b0c      	ldr	r3, [pc, #48]	@ (8002254 <MX_SPI2_Init+0x68>)
 8002222:	2208      	movs	r2, #8
 8002224:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002226:	4b0b      	ldr	r3, [pc, #44]	@ (8002254 <MX_SPI2_Init+0x68>)
 8002228:	2200      	movs	r2, #0
 800222a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800222c:	4b09      	ldr	r3, [pc, #36]	@ (8002254 <MX_SPI2_Init+0x68>)
 800222e:	2200      	movs	r2, #0
 8002230:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002232:	4b08      	ldr	r3, [pc, #32]	@ (8002254 <MX_SPI2_Init+0x68>)
 8002234:	2200      	movs	r2, #0
 8002236:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8002238:	4b06      	ldr	r3, [pc, #24]	@ (8002254 <MX_SPI2_Init+0x68>)
 800223a:	220a      	movs	r2, #10
 800223c:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800223e:	4805      	ldr	r0, [pc, #20]	@ (8002254 <MX_SPI2_Init+0x68>)
 8002240:	f002 ffd6 	bl	80051f0 <HAL_SPI_Init>
 8002244:	4603      	mov	r3, r0
 8002246:	2b00      	cmp	r3, #0
 8002248:	d001      	beq.n	800224e <MX_SPI2_Init+0x62>
  {
    Error_Handler();
 800224a:	f7ff fd95 	bl	8001d78 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800224e:	bf00      	nop
 8002250:	bd80      	pop	{r7, pc}
 8002252:	bf00      	nop
 8002254:	20000184 	.word	0x20000184
 8002258:	40003800 	.word	0x40003800

0800225c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b08a      	sub	sp, #40	@ 0x28
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002264:	f107 0314 	add.w	r3, r7, #20
 8002268:	2200      	movs	r2, #0
 800226a:	601a      	str	r2, [r3, #0]
 800226c:	605a      	str	r2, [r3, #4]
 800226e:	609a      	str	r2, [r3, #8]
 8002270:	60da      	str	r2, [r3, #12]
 8002272:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a28      	ldr	r2, [pc, #160]	@ (800231c <HAL_SPI_MspInit+0xc0>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d14a      	bne.n	8002314 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800227e:	2300      	movs	r3, #0
 8002280:	613b      	str	r3, [r7, #16]
 8002282:	4b27      	ldr	r3, [pc, #156]	@ (8002320 <HAL_SPI_MspInit+0xc4>)
 8002284:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002286:	4a26      	ldr	r2, [pc, #152]	@ (8002320 <HAL_SPI_MspInit+0xc4>)
 8002288:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800228c:	6413      	str	r3, [r2, #64]	@ 0x40
 800228e:	4b24      	ldr	r3, [pc, #144]	@ (8002320 <HAL_SPI_MspInit+0xc4>)
 8002290:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002292:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002296:	613b      	str	r3, [r7, #16]
 8002298:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800229a:	2300      	movs	r3, #0
 800229c:	60fb      	str	r3, [r7, #12]
 800229e:	4b20      	ldr	r3, [pc, #128]	@ (8002320 <HAL_SPI_MspInit+0xc4>)
 80022a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022a2:	4a1f      	ldr	r2, [pc, #124]	@ (8002320 <HAL_SPI_MspInit+0xc4>)
 80022a4:	f043 0304 	orr.w	r3, r3, #4
 80022a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80022aa:	4b1d      	ldr	r3, [pc, #116]	@ (8002320 <HAL_SPI_MspInit+0xc4>)
 80022ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022ae:	f003 0304 	and.w	r3, r3, #4
 80022b2:	60fb      	str	r3, [r7, #12]
 80022b4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022b6:	2300      	movs	r3, #0
 80022b8:	60bb      	str	r3, [r7, #8]
 80022ba:	4b19      	ldr	r3, [pc, #100]	@ (8002320 <HAL_SPI_MspInit+0xc4>)
 80022bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022be:	4a18      	ldr	r2, [pc, #96]	@ (8002320 <HAL_SPI_MspInit+0xc4>)
 80022c0:	f043 0302 	orr.w	r3, r3, #2
 80022c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80022c6:	4b16      	ldr	r3, [pc, #88]	@ (8002320 <HAL_SPI_MspInit+0xc4>)
 80022c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022ca:	f003 0302 	and.w	r3, r3, #2
 80022ce:	60bb      	str	r3, [r7, #8]
 80022d0:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC1     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80022d2:	2302      	movs	r3, #2
 80022d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022d6:	2302      	movs	r3, #2
 80022d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022da:	2300      	movs	r3, #0
 80022dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022de:	2303      	movs	r3, #3
 80022e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 80022e2:	2307      	movs	r3, #7
 80022e4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022e6:	f107 0314 	add.w	r3, r7, #20
 80022ea:	4619      	mov	r1, r3
 80022ec:	480d      	ldr	r0, [pc, #52]	@ (8002324 <HAL_SPI_MspInit+0xc8>)
 80022ee:	f000 ffbf 	bl	8003270 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80022f2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80022f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022f8:	2302      	movs	r3, #2
 80022fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022fc:	2300      	movs	r3, #0
 80022fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002300:	2303      	movs	r3, #3
 8002302:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002304:	2305      	movs	r3, #5
 8002306:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002308:	f107 0314 	add.w	r3, r7, #20
 800230c:	4619      	mov	r1, r3
 800230e:	4806      	ldr	r0, [pc, #24]	@ (8002328 <HAL_SPI_MspInit+0xcc>)
 8002310:	f000 ffae 	bl	8003270 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8002314:	bf00      	nop
 8002316:	3728      	adds	r7, #40	@ 0x28
 8002318:	46bd      	mov	sp, r7
 800231a:	bd80      	pop	{r7, pc}
 800231c:	40003800 	.word	0x40003800
 8002320:	40023800 	.word	0x40023800
 8002324:	40020800 	.word	0x40020800
 8002328:	40020400 	.word	0x40020400

0800232c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b082      	sub	sp, #8
 8002330:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002332:	2300      	movs	r3, #0
 8002334:	607b      	str	r3, [r7, #4]
 8002336:	4b10      	ldr	r3, [pc, #64]	@ (8002378 <HAL_MspInit+0x4c>)
 8002338:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800233a:	4a0f      	ldr	r2, [pc, #60]	@ (8002378 <HAL_MspInit+0x4c>)
 800233c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002340:	6453      	str	r3, [r2, #68]	@ 0x44
 8002342:	4b0d      	ldr	r3, [pc, #52]	@ (8002378 <HAL_MspInit+0x4c>)
 8002344:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002346:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800234a:	607b      	str	r3, [r7, #4]
 800234c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800234e:	2300      	movs	r3, #0
 8002350:	603b      	str	r3, [r7, #0]
 8002352:	4b09      	ldr	r3, [pc, #36]	@ (8002378 <HAL_MspInit+0x4c>)
 8002354:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002356:	4a08      	ldr	r2, [pc, #32]	@ (8002378 <HAL_MspInit+0x4c>)
 8002358:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800235c:	6413      	str	r3, [r2, #64]	@ 0x40
 800235e:	4b06      	ldr	r3, [pc, #24]	@ (8002378 <HAL_MspInit+0x4c>)
 8002360:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002362:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002366:	603b      	str	r3, [r7, #0]
 8002368:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800236a:	2007      	movs	r0, #7
 800236c:	f000 ff3e 	bl	80031ec <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002370:	bf00      	nop
 8002372:	3708      	adds	r7, #8
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}
 8002378:	40023800 	.word	0x40023800

0800237c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800237c:	b480      	push	{r7}
 800237e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002380:	bf00      	nop
 8002382:	e7fd      	b.n	8002380 <NMI_Handler+0x4>

08002384 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002384:	b480      	push	{r7}
 8002386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002388:	bf00      	nop
 800238a:	e7fd      	b.n	8002388 <HardFault_Handler+0x4>

0800238c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800238c:	b480      	push	{r7}
 800238e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002390:	bf00      	nop
 8002392:	e7fd      	b.n	8002390 <MemManage_Handler+0x4>

08002394 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002394:	b480      	push	{r7}
 8002396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002398:	bf00      	nop
 800239a:	e7fd      	b.n	8002398 <BusFault_Handler+0x4>

0800239c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800239c:	b480      	push	{r7}
 800239e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80023a0:	bf00      	nop
 80023a2:	e7fd      	b.n	80023a0 <UsageFault_Handler+0x4>

080023a4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80023a4:	b480      	push	{r7}
 80023a6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80023a8:	bf00      	nop
 80023aa:	46bd      	mov	sp, r7
 80023ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b0:	4770      	bx	lr

080023b2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80023b2:	b480      	push	{r7}
 80023b4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80023b6:	bf00      	nop
 80023b8:	46bd      	mov	sp, r7
 80023ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023be:	4770      	bx	lr

080023c0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80023c0:	b480      	push	{r7}
 80023c2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80023c4:	bf00      	nop
 80023c6:	46bd      	mov	sp, r7
 80023c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023cc:	4770      	bx	lr

080023ce <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80023ce:	b580      	push	{r7, lr}
 80023d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80023d2:	f000 fdf7 	bl	8002fc4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80023d6:	bf00      	nop
 80023d8:	bd80      	pop	{r7, pc}

080023da <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80023da:	b580      	push	{r7, lr}
 80023dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Encodeur_G_A_Pin);
 80023de:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80023e2:	f001 f90b 	bl	80035fc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Encodeur_D_A_Pin);
 80023e6:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80023ea:	f001 f907 	bl	80035fc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80023ee:	bf00      	nop
 80023f0:	bd80      	pop	{r7, pc}

080023f2 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80023f2:	b580      	push	{r7, lr}
 80023f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Blue_Button_Pin);
 80023f6:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80023fa:	f001 f8ff 	bl	80035fc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80023fe:	bf00      	nop
 8002400:	bd80      	pop	{r7, pc}
	...

08002404 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002408:	4802      	ldr	r0, [pc, #8]	@ (8002414 <TIM6_DAC_IRQHandler+0x10>)
 800240a:	f003 fc1b 	bl	8005c44 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800240e:	bf00      	nop
 8002410:	bd80      	pop	{r7, pc}
 8002412:	bf00      	nop
 8002414:	20000270 	.word	0x20000270

08002418 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800241c:	4802      	ldr	r0, [pc, #8]	@ (8002428 <TIM7_IRQHandler+0x10>)
 800241e:	f003 fc11 	bl	8005c44 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8002422:	bf00      	nop
 8002424:	bd80      	pop	{r7, pc}
 8002426:	bf00      	nop
 8002428:	200002b8 	.word	0x200002b8

0800242c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b086      	sub	sp, #24
 8002430:	af00      	add	r7, sp, #0
 8002432:	60f8      	str	r0, [r7, #12]
 8002434:	60b9      	str	r1, [r7, #8]
 8002436:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002438:	2300      	movs	r3, #0
 800243a:	617b      	str	r3, [r7, #20]
 800243c:	e00a      	b.n	8002454 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800243e:	f3af 8000 	nop.w
 8002442:	4601      	mov	r1, r0
 8002444:	68bb      	ldr	r3, [r7, #8]
 8002446:	1c5a      	adds	r2, r3, #1
 8002448:	60ba      	str	r2, [r7, #8]
 800244a:	b2ca      	uxtb	r2, r1
 800244c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800244e:	697b      	ldr	r3, [r7, #20]
 8002450:	3301      	adds	r3, #1
 8002452:	617b      	str	r3, [r7, #20]
 8002454:	697a      	ldr	r2, [r7, #20]
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	429a      	cmp	r2, r3
 800245a:	dbf0      	blt.n	800243e <_read+0x12>
  }

  return len;
 800245c:	687b      	ldr	r3, [r7, #4]
}
 800245e:	4618      	mov	r0, r3
 8002460:	3718      	adds	r7, #24
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}

08002466 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002466:	b580      	push	{r7, lr}
 8002468:	b086      	sub	sp, #24
 800246a:	af00      	add	r7, sp, #0
 800246c:	60f8      	str	r0, [r7, #12]
 800246e:	60b9      	str	r1, [r7, #8]
 8002470:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002472:	2300      	movs	r3, #0
 8002474:	617b      	str	r3, [r7, #20]
 8002476:	e009      	b.n	800248c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002478:	68bb      	ldr	r3, [r7, #8]
 800247a:	1c5a      	adds	r2, r3, #1
 800247c:	60ba      	str	r2, [r7, #8]
 800247e:	781b      	ldrb	r3, [r3, #0]
 8002480:	4618      	mov	r0, r3
 8002482:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002486:	697b      	ldr	r3, [r7, #20]
 8002488:	3301      	adds	r3, #1
 800248a:	617b      	str	r3, [r7, #20]
 800248c:	697a      	ldr	r2, [r7, #20]
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	429a      	cmp	r2, r3
 8002492:	dbf1      	blt.n	8002478 <_write+0x12>
  }
  return len;
 8002494:	687b      	ldr	r3, [r7, #4]
}
 8002496:	4618      	mov	r0, r3
 8002498:	3718      	adds	r7, #24
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}

0800249e <_close>:

int _close(int file)
{
 800249e:	b480      	push	{r7}
 80024a0:	b083      	sub	sp, #12
 80024a2:	af00      	add	r7, sp, #0
 80024a4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80024a6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	370c      	adds	r7, #12
 80024ae:	46bd      	mov	sp, r7
 80024b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b4:	4770      	bx	lr

080024b6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80024b6:	b480      	push	{r7}
 80024b8:	b083      	sub	sp, #12
 80024ba:	af00      	add	r7, sp, #0
 80024bc:	6078      	str	r0, [r7, #4]
 80024be:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80024c6:	605a      	str	r2, [r3, #4]
  return 0;
 80024c8:	2300      	movs	r3, #0
}
 80024ca:	4618      	mov	r0, r3
 80024cc:	370c      	adds	r7, #12
 80024ce:	46bd      	mov	sp, r7
 80024d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d4:	4770      	bx	lr

080024d6 <_isatty>:

int _isatty(int file)
{
 80024d6:	b480      	push	{r7}
 80024d8:	b083      	sub	sp, #12
 80024da:	af00      	add	r7, sp, #0
 80024dc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80024de:	2301      	movs	r3, #1
}
 80024e0:	4618      	mov	r0, r3
 80024e2:	370c      	adds	r7, #12
 80024e4:	46bd      	mov	sp, r7
 80024e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ea:	4770      	bx	lr

080024ec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80024ec:	b480      	push	{r7}
 80024ee:	b085      	sub	sp, #20
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	60f8      	str	r0, [r7, #12]
 80024f4:	60b9      	str	r1, [r7, #8]
 80024f6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80024f8:	2300      	movs	r3, #0
}
 80024fa:	4618      	mov	r0, r3
 80024fc:	3714      	adds	r7, #20
 80024fe:	46bd      	mov	sp, r7
 8002500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002504:	4770      	bx	lr
	...

08002508 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b086      	sub	sp, #24
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002510:	4a14      	ldr	r2, [pc, #80]	@ (8002564 <_sbrk+0x5c>)
 8002512:	4b15      	ldr	r3, [pc, #84]	@ (8002568 <_sbrk+0x60>)
 8002514:	1ad3      	subs	r3, r2, r3
 8002516:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002518:	697b      	ldr	r3, [r7, #20]
 800251a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800251c:	4b13      	ldr	r3, [pc, #76]	@ (800256c <_sbrk+0x64>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d102      	bne.n	800252a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002524:	4b11      	ldr	r3, [pc, #68]	@ (800256c <_sbrk+0x64>)
 8002526:	4a12      	ldr	r2, [pc, #72]	@ (8002570 <_sbrk+0x68>)
 8002528:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800252a:	4b10      	ldr	r3, [pc, #64]	@ (800256c <_sbrk+0x64>)
 800252c:	681a      	ldr	r2, [r3, #0]
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	4413      	add	r3, r2
 8002532:	693a      	ldr	r2, [r7, #16]
 8002534:	429a      	cmp	r2, r3
 8002536:	d207      	bcs.n	8002548 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002538:	f005 fcb2 	bl	8007ea0 <__errno>
 800253c:	4603      	mov	r3, r0
 800253e:	220c      	movs	r2, #12
 8002540:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002542:	f04f 33ff 	mov.w	r3, #4294967295
 8002546:	e009      	b.n	800255c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002548:	4b08      	ldr	r3, [pc, #32]	@ (800256c <_sbrk+0x64>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800254e:	4b07      	ldr	r3, [pc, #28]	@ (800256c <_sbrk+0x64>)
 8002550:	681a      	ldr	r2, [r3, #0]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	4413      	add	r3, r2
 8002556:	4a05      	ldr	r2, [pc, #20]	@ (800256c <_sbrk+0x64>)
 8002558:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800255a:	68fb      	ldr	r3, [r7, #12]
}
 800255c:	4618      	mov	r0, r3
 800255e:	3718      	adds	r7, #24
 8002560:	46bd      	mov	sp, r7
 8002562:	bd80      	pop	{r7, pc}
 8002564:	20020000 	.word	0x20020000
 8002568:	00000400 	.word	0x00000400
 800256c:	200001dc 	.word	0x200001dc
 8002570:	200004b8 	.word	0x200004b8

08002574 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002574:	b480      	push	{r7}
 8002576:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002578:	4b06      	ldr	r3, [pc, #24]	@ (8002594 <SystemInit+0x20>)
 800257a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800257e:	4a05      	ldr	r2, [pc, #20]	@ (8002594 <SystemInit+0x20>)
 8002580:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002584:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002588:	bf00      	nop
 800258a:	46bd      	mov	sp, r7
 800258c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002590:	4770      	bx	lr
 8002592:	bf00      	nop
 8002594:	e000ed00 	.word	0xe000ed00

08002598 <MX_TIM3_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim7;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b08e      	sub	sp, #56	@ 0x38
 800259c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800259e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80025a2:	2200      	movs	r2, #0
 80025a4:	601a      	str	r2, [r3, #0]
 80025a6:	605a      	str	r2, [r3, #4]
 80025a8:	609a      	str	r2, [r3, #8]
 80025aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025ac:	f107 0320 	add.w	r3, r7, #32
 80025b0:	2200      	movs	r2, #0
 80025b2:	601a      	str	r2, [r3, #0]
 80025b4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80025b6:	1d3b      	adds	r3, r7, #4
 80025b8:	2200      	movs	r2, #0
 80025ba:	601a      	str	r2, [r3, #0]
 80025bc:	605a      	str	r2, [r3, #4]
 80025be:	609a      	str	r2, [r3, #8]
 80025c0:	60da      	str	r2, [r3, #12]
 80025c2:	611a      	str	r2, [r3, #16]
 80025c4:	615a      	str	r2, [r3, #20]
 80025c6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80025c8:	4b3d      	ldr	r3, [pc, #244]	@ (80026c0 <MX_TIM3_Init+0x128>)
 80025ca:	4a3e      	ldr	r2, [pc, #248]	@ (80026c4 <MX_TIM3_Init+0x12c>)
 80025cc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84-1;
 80025ce:	4b3c      	ldr	r3, [pc, #240]	@ (80026c0 <MX_TIM3_Init+0x128>)
 80025d0:	2253      	movs	r2, #83	@ 0x53
 80025d2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025d4:	4b3a      	ldr	r3, [pc, #232]	@ (80026c0 <MX_TIM3_Init+0x128>)
 80025d6:	2200      	movs	r2, #0
 80025d8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 500-1;
 80025da:	4b39      	ldr	r3, [pc, #228]	@ (80026c0 <MX_TIM3_Init+0x128>)
 80025dc:	f240 12f3 	movw	r2, #499	@ 0x1f3
 80025e0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025e2:	4b37      	ldr	r3, [pc, #220]	@ (80026c0 <MX_TIM3_Init+0x128>)
 80025e4:	2200      	movs	r2, #0
 80025e6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025e8:	4b35      	ldr	r3, [pc, #212]	@ (80026c0 <MX_TIM3_Init+0x128>)
 80025ea:	2200      	movs	r2, #0
 80025ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80025ee:	4834      	ldr	r0, [pc, #208]	@ (80026c0 <MX_TIM3_Init+0x128>)
 80025f0:	f003 f8a8 	bl	8005744 <HAL_TIM_Base_Init>
 80025f4:	4603      	mov	r3, r0
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d001      	beq.n	80025fe <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80025fa:	f7ff fbbd 	bl	8001d78 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80025fe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002602:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002604:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002608:	4619      	mov	r1, r3
 800260a:	482d      	ldr	r0, [pc, #180]	@ (80026c0 <MX_TIM3_Init+0x128>)
 800260c:	f003 fccc 	bl	8005fa8 <HAL_TIM_ConfigClockSource>
 8002610:	4603      	mov	r3, r0
 8002612:	2b00      	cmp	r3, #0
 8002614:	d001      	beq.n	800261a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8002616:	f7ff fbaf 	bl	8001d78 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800261a:	4829      	ldr	r0, [pc, #164]	@ (80026c0 <MX_TIM3_Init+0x128>)
 800261c:	f003 f981 	bl	8005922 <HAL_TIM_PWM_Init>
 8002620:	4603      	mov	r3, r0
 8002622:	2b00      	cmp	r3, #0
 8002624:	d001      	beq.n	800262a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8002626:	f7ff fba7 	bl	8001d78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800262a:	2300      	movs	r3, #0
 800262c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800262e:	2300      	movs	r3, #0
 8002630:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002632:	f107 0320 	add.w	r3, r7, #32
 8002636:	4619      	mov	r1, r3
 8002638:	4821      	ldr	r0, [pc, #132]	@ (80026c0 <MX_TIM3_Init+0x128>)
 800263a:	f004 f8c1 	bl	80067c0 <HAL_TIMEx_MasterConfigSynchronization>
 800263e:	4603      	mov	r3, r0
 8002640:	2b00      	cmp	r3, #0
 8002642:	d001      	beq.n	8002648 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8002644:	f7ff fb98 	bl	8001d78 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002648:	2360      	movs	r3, #96	@ 0x60
 800264a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800264c:	2300      	movs	r3, #0
 800264e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002650:	2300      	movs	r3, #0
 8002652:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002654:	2300      	movs	r3, #0
 8002656:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002658:	1d3b      	adds	r3, r7, #4
 800265a:	2200      	movs	r2, #0
 800265c:	4619      	mov	r1, r3
 800265e:	4818      	ldr	r0, [pc, #96]	@ (80026c0 <MX_TIM3_Init+0x128>)
 8002660:	f003 fbe0 	bl	8005e24 <HAL_TIM_PWM_ConfigChannel>
 8002664:	4603      	mov	r3, r0
 8002666:	2b00      	cmp	r3, #0
 8002668:	d001      	beq.n	800266e <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800266a:	f7ff fb85 	bl	8001d78 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800266e:	1d3b      	adds	r3, r7, #4
 8002670:	2204      	movs	r2, #4
 8002672:	4619      	mov	r1, r3
 8002674:	4812      	ldr	r0, [pc, #72]	@ (80026c0 <MX_TIM3_Init+0x128>)
 8002676:	f003 fbd5 	bl	8005e24 <HAL_TIM_PWM_ConfigChannel>
 800267a:	4603      	mov	r3, r0
 800267c:	2b00      	cmp	r3, #0
 800267e:	d001      	beq.n	8002684 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8002680:	f7ff fb7a 	bl	8001d78 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002684:	1d3b      	adds	r3, r7, #4
 8002686:	2208      	movs	r2, #8
 8002688:	4619      	mov	r1, r3
 800268a:	480d      	ldr	r0, [pc, #52]	@ (80026c0 <MX_TIM3_Init+0x128>)
 800268c:	f003 fbca 	bl	8005e24 <HAL_TIM_PWM_ConfigChannel>
 8002690:	4603      	mov	r3, r0
 8002692:	2b00      	cmp	r3, #0
 8002694:	d001      	beq.n	800269a <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 8002696:	f7ff fb6f 	bl	8001d78 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800269a:	1d3b      	adds	r3, r7, #4
 800269c:	220c      	movs	r2, #12
 800269e:	4619      	mov	r1, r3
 80026a0:	4807      	ldr	r0, [pc, #28]	@ (80026c0 <MX_TIM3_Init+0x128>)
 80026a2:	f003 fbbf 	bl	8005e24 <HAL_TIM_PWM_ConfigChannel>
 80026a6:	4603      	mov	r3, r0
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d001      	beq.n	80026b0 <MX_TIM3_Init+0x118>
  {
    Error_Handler();
 80026ac:	f7ff fb64 	bl	8001d78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80026b0:	4803      	ldr	r0, [pc, #12]	@ (80026c0 <MX_TIM3_Init+0x128>)
 80026b2:	f000 f95d 	bl	8002970 <HAL_TIM_MspPostInit>

}
 80026b6:	bf00      	nop
 80026b8:	3738      	adds	r7, #56	@ 0x38
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}
 80026be:	bf00      	nop
 80026c0:	200001e0 	.word	0x200001e0
 80026c4:	40000400 	.word	0x40000400

080026c8 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b08e      	sub	sp, #56	@ 0x38
 80026cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80026ce:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80026d2:	2200      	movs	r2, #0
 80026d4:	601a      	str	r2, [r3, #0]
 80026d6:	605a      	str	r2, [r3, #4]
 80026d8:	609a      	str	r2, [r3, #8]
 80026da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80026dc:	f107 0320 	add.w	r3, r7, #32
 80026e0:	2200      	movs	r2, #0
 80026e2:	601a      	str	r2, [r3, #0]
 80026e4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80026e6:	1d3b      	adds	r3, r7, #4
 80026e8:	2200      	movs	r2, #0
 80026ea:	601a      	str	r2, [r3, #0]
 80026ec:	605a      	str	r2, [r3, #4]
 80026ee:	609a      	str	r2, [r3, #8]
 80026f0:	60da      	str	r2, [r3, #12]
 80026f2:	611a      	str	r2, [r3, #16]
 80026f4:	615a      	str	r2, [r3, #20]
 80026f6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80026f8:	4b2d      	ldr	r3, [pc, #180]	@ (80027b0 <MX_TIM4_Init+0xe8>)
 80026fa:	4a2e      	ldr	r2, [pc, #184]	@ (80027b4 <MX_TIM4_Init+0xec>)
 80026fc:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 300-1;
 80026fe:	4b2c      	ldr	r3, [pc, #176]	@ (80027b0 <MX_TIM4_Init+0xe8>)
 8002700:	f240 122b 	movw	r2, #299	@ 0x12b
 8002704:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002706:	4b2a      	ldr	r3, [pc, #168]	@ (80027b0 <MX_TIM4_Init+0xe8>)
 8002708:	2200      	movs	r2, #0
 800270a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000-1;
 800270c:	4b28      	ldr	r3, [pc, #160]	@ (80027b0 <MX_TIM4_Init+0xe8>)
 800270e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002712:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002714:	4b26      	ldr	r3, [pc, #152]	@ (80027b0 <MX_TIM4_Init+0xe8>)
 8002716:	2200      	movs	r2, #0
 8002718:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800271a:	4b25      	ldr	r3, [pc, #148]	@ (80027b0 <MX_TIM4_Init+0xe8>)
 800271c:	2200      	movs	r2, #0
 800271e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002720:	4823      	ldr	r0, [pc, #140]	@ (80027b0 <MX_TIM4_Init+0xe8>)
 8002722:	f003 f80f 	bl	8005744 <HAL_TIM_Base_Init>
 8002726:	4603      	mov	r3, r0
 8002728:	2b00      	cmp	r3, #0
 800272a:	d001      	beq.n	8002730 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 800272c:	f7ff fb24 	bl	8001d78 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002730:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002734:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002736:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800273a:	4619      	mov	r1, r3
 800273c:	481c      	ldr	r0, [pc, #112]	@ (80027b0 <MX_TIM4_Init+0xe8>)
 800273e:	f003 fc33 	bl	8005fa8 <HAL_TIM_ConfigClockSource>
 8002742:	4603      	mov	r3, r0
 8002744:	2b00      	cmp	r3, #0
 8002746:	d001      	beq.n	800274c <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8002748:	f7ff fb16 	bl	8001d78 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800274c:	4818      	ldr	r0, [pc, #96]	@ (80027b0 <MX_TIM4_Init+0xe8>)
 800274e:	f003 f8e8 	bl	8005922 <HAL_TIM_PWM_Init>
 8002752:	4603      	mov	r3, r0
 8002754:	2b00      	cmp	r3, #0
 8002756:	d001      	beq.n	800275c <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8002758:	f7ff fb0e 	bl	8001d78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800275c:	2300      	movs	r3, #0
 800275e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002760:	2300      	movs	r3, #0
 8002762:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002764:	f107 0320 	add.w	r3, r7, #32
 8002768:	4619      	mov	r1, r3
 800276a:	4811      	ldr	r0, [pc, #68]	@ (80027b0 <MX_TIM4_Init+0xe8>)
 800276c:	f004 f828 	bl	80067c0 <HAL_TIMEx_MasterConfigSynchronization>
 8002770:	4603      	mov	r3, r0
 8002772:	2b00      	cmp	r3, #0
 8002774:	d001      	beq.n	800277a <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8002776:	f7ff faff 	bl	8001d78 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800277a:	2360      	movs	r3, #96	@ 0x60
 800277c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 995;
 800277e:	f240 33e3 	movw	r3, #995	@ 0x3e3
 8002782:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002784:	2300      	movs	r3, #0
 8002786:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002788:	2300      	movs	r3, #0
 800278a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800278c:	1d3b      	adds	r3, r7, #4
 800278e:	2204      	movs	r2, #4
 8002790:	4619      	mov	r1, r3
 8002792:	4807      	ldr	r0, [pc, #28]	@ (80027b0 <MX_TIM4_Init+0xe8>)
 8002794:	f003 fb46 	bl	8005e24 <HAL_TIM_PWM_ConfigChannel>
 8002798:	4603      	mov	r3, r0
 800279a:	2b00      	cmp	r3, #0
 800279c:	d001      	beq.n	80027a2 <MX_TIM4_Init+0xda>
  {
    Error_Handler();
 800279e:	f7ff faeb 	bl	8001d78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80027a2:	4803      	ldr	r0, [pc, #12]	@ (80027b0 <MX_TIM4_Init+0xe8>)
 80027a4:	f000 f8e4 	bl	8002970 <HAL_TIM_MspPostInit>

}
 80027a8:	bf00      	nop
 80027aa:	3738      	adds	r7, #56	@ 0x38
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bd80      	pop	{r7, pc}
 80027b0:	20000228 	.word	0x20000228
 80027b4:	40000800 	.word	0x40000800

080027b8 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b082      	sub	sp, #8
 80027bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027be:	463b      	mov	r3, r7
 80027c0:	2200      	movs	r2, #0
 80027c2:	601a      	str	r2, [r3, #0]
 80027c4:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80027c6:	4b15      	ldr	r3, [pc, #84]	@ (800281c <MX_TIM6_Init+0x64>)
 80027c8:	4a15      	ldr	r2, [pc, #84]	@ (8002820 <MX_TIM6_Init+0x68>)
 80027ca:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 42000-1;
 80027cc:	4b13      	ldr	r3, [pc, #76]	@ (800281c <MX_TIM6_Init+0x64>)
 80027ce:	f24a 420f 	movw	r2, #41999	@ 0xa40f
 80027d2:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027d4:	4b11      	ldr	r3, [pc, #68]	@ (800281c <MX_TIM6_Init+0x64>)
 80027d6:	2200      	movs	r2, #0
 80027d8:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 400-1;
 80027da:	4b10      	ldr	r3, [pc, #64]	@ (800281c <MX_TIM6_Init+0x64>)
 80027dc:	f240 128f 	movw	r2, #399	@ 0x18f
 80027e0:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027e2:	4b0e      	ldr	r3, [pc, #56]	@ (800281c <MX_TIM6_Init+0x64>)
 80027e4:	2200      	movs	r2, #0
 80027e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80027e8:	480c      	ldr	r0, [pc, #48]	@ (800281c <MX_TIM6_Init+0x64>)
 80027ea:	f002 ffab 	bl	8005744 <HAL_TIM_Base_Init>
 80027ee:	4603      	mov	r3, r0
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d001      	beq.n	80027f8 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80027f4:	f7ff fac0 	bl	8001d78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80027f8:	2320      	movs	r3, #32
 80027fa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80027fc:	2300      	movs	r3, #0
 80027fe:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002800:	463b      	mov	r3, r7
 8002802:	4619      	mov	r1, r3
 8002804:	4805      	ldr	r0, [pc, #20]	@ (800281c <MX_TIM6_Init+0x64>)
 8002806:	f003 ffdb 	bl	80067c0 <HAL_TIMEx_MasterConfigSynchronization>
 800280a:	4603      	mov	r3, r0
 800280c:	2b00      	cmp	r3, #0
 800280e:	d001      	beq.n	8002814 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8002810:	f7ff fab2 	bl	8001d78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002814:	bf00      	nop
 8002816:	3708      	adds	r7, #8
 8002818:	46bd      	mov	sp, r7
 800281a:	bd80      	pop	{r7, pc}
 800281c:	20000270 	.word	0x20000270
 8002820:	40001000 	.word	0x40001000

08002824 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b082      	sub	sp, #8
 8002828:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800282a:	463b      	mov	r3, r7
 800282c:	2200      	movs	r2, #0
 800282e:	601a      	str	r2, [r3, #0]
 8002830:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8002832:	4b14      	ldr	r3, [pc, #80]	@ (8002884 <MX_TIM7_Init+0x60>)
 8002834:	4a14      	ldr	r2, [pc, #80]	@ (8002888 <MX_TIM7_Init+0x64>)
 8002836:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 83;
 8002838:	4b12      	ldr	r3, [pc, #72]	@ (8002884 <MX_TIM7_Init+0x60>)
 800283a:	2253      	movs	r2, #83	@ 0x53
 800283c:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800283e:	4b11      	ldr	r3, [pc, #68]	@ (8002884 <MX_TIM7_Init+0x60>)
 8002840:	2200      	movs	r2, #0
 8002842:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 9;
 8002844:	4b0f      	ldr	r3, [pc, #60]	@ (8002884 <MX_TIM7_Init+0x60>)
 8002846:	2209      	movs	r2, #9
 8002848:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800284a:	4b0e      	ldr	r3, [pc, #56]	@ (8002884 <MX_TIM7_Init+0x60>)
 800284c:	2200      	movs	r2, #0
 800284e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8002850:	480c      	ldr	r0, [pc, #48]	@ (8002884 <MX_TIM7_Init+0x60>)
 8002852:	f002 ff77 	bl	8005744 <HAL_TIM_Base_Init>
 8002856:	4603      	mov	r3, r0
 8002858:	2b00      	cmp	r3, #0
 800285a:	d001      	beq.n	8002860 <MX_TIM7_Init+0x3c>
  {
    Error_Handler();
 800285c:	f7ff fa8c 	bl	8001d78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002860:	2300      	movs	r3, #0
 8002862:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002864:	2300      	movs	r3, #0
 8002866:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8002868:	463b      	mov	r3, r7
 800286a:	4619      	mov	r1, r3
 800286c:	4805      	ldr	r0, [pc, #20]	@ (8002884 <MX_TIM7_Init+0x60>)
 800286e:	f003 ffa7 	bl	80067c0 <HAL_TIMEx_MasterConfigSynchronization>
 8002872:	4603      	mov	r3, r0
 8002874:	2b00      	cmp	r3, #0
 8002876:	d001      	beq.n	800287c <MX_TIM7_Init+0x58>
  {
    Error_Handler();
 8002878:	f7ff fa7e 	bl	8001d78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800287c:	bf00      	nop
 800287e:	3708      	adds	r7, #8
 8002880:	46bd      	mov	sp, r7
 8002882:	bd80      	pop	{r7, pc}
 8002884:	200002b8 	.word	0x200002b8
 8002888:	40001400 	.word	0x40001400

0800288c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b086      	sub	sp, #24
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a30      	ldr	r2, [pc, #192]	@ (800295c <HAL_TIM_Base_MspInit+0xd0>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d10e      	bne.n	80028bc <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800289e:	2300      	movs	r3, #0
 80028a0:	617b      	str	r3, [r7, #20]
 80028a2:	4b2f      	ldr	r3, [pc, #188]	@ (8002960 <HAL_TIM_Base_MspInit+0xd4>)
 80028a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028a6:	4a2e      	ldr	r2, [pc, #184]	@ (8002960 <HAL_TIM_Base_MspInit+0xd4>)
 80028a8:	f043 0302 	orr.w	r3, r3, #2
 80028ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80028ae:	4b2c      	ldr	r3, [pc, #176]	@ (8002960 <HAL_TIM_Base_MspInit+0xd4>)
 80028b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028b2:	f003 0302 	and.w	r3, r3, #2
 80028b6:	617b      	str	r3, [r7, #20]
 80028b8:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 80028ba:	e04a      	b.n	8002952 <HAL_TIM_Base_MspInit+0xc6>
  else if(tim_baseHandle->Instance==TIM4)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a28      	ldr	r2, [pc, #160]	@ (8002964 <HAL_TIM_Base_MspInit+0xd8>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d10e      	bne.n	80028e4 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80028c6:	2300      	movs	r3, #0
 80028c8:	613b      	str	r3, [r7, #16]
 80028ca:	4b25      	ldr	r3, [pc, #148]	@ (8002960 <HAL_TIM_Base_MspInit+0xd4>)
 80028cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028ce:	4a24      	ldr	r2, [pc, #144]	@ (8002960 <HAL_TIM_Base_MspInit+0xd4>)
 80028d0:	f043 0304 	orr.w	r3, r3, #4
 80028d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80028d6:	4b22      	ldr	r3, [pc, #136]	@ (8002960 <HAL_TIM_Base_MspInit+0xd4>)
 80028d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028da:	f003 0304 	and.w	r3, r3, #4
 80028de:	613b      	str	r3, [r7, #16]
 80028e0:	693b      	ldr	r3, [r7, #16]
}
 80028e2:	e036      	b.n	8002952 <HAL_TIM_Base_MspInit+0xc6>
  else if(tim_baseHandle->Instance==TIM6)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a1f      	ldr	r2, [pc, #124]	@ (8002968 <HAL_TIM_Base_MspInit+0xdc>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d116      	bne.n	800291c <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80028ee:	2300      	movs	r3, #0
 80028f0:	60fb      	str	r3, [r7, #12]
 80028f2:	4b1b      	ldr	r3, [pc, #108]	@ (8002960 <HAL_TIM_Base_MspInit+0xd4>)
 80028f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028f6:	4a1a      	ldr	r2, [pc, #104]	@ (8002960 <HAL_TIM_Base_MspInit+0xd4>)
 80028f8:	f043 0310 	orr.w	r3, r3, #16
 80028fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80028fe:	4b18      	ldr	r3, [pc, #96]	@ (8002960 <HAL_TIM_Base_MspInit+0xd4>)
 8002900:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002902:	f003 0310 	and.w	r3, r3, #16
 8002906:	60fb      	str	r3, [r7, #12]
 8002908:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800290a:	2200      	movs	r2, #0
 800290c:	2100      	movs	r1, #0
 800290e:	2036      	movs	r0, #54	@ 0x36
 8002910:	f000 fc77 	bl	8003202 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002914:	2036      	movs	r0, #54	@ 0x36
 8002916:	f000 fc90 	bl	800323a <HAL_NVIC_EnableIRQ>
}
 800291a:	e01a      	b.n	8002952 <HAL_TIM_Base_MspInit+0xc6>
  else if(tim_baseHandle->Instance==TIM7)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a12      	ldr	r2, [pc, #72]	@ (800296c <HAL_TIM_Base_MspInit+0xe0>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d115      	bne.n	8002952 <HAL_TIM_Base_MspInit+0xc6>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002926:	2300      	movs	r3, #0
 8002928:	60bb      	str	r3, [r7, #8]
 800292a:	4b0d      	ldr	r3, [pc, #52]	@ (8002960 <HAL_TIM_Base_MspInit+0xd4>)
 800292c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800292e:	4a0c      	ldr	r2, [pc, #48]	@ (8002960 <HAL_TIM_Base_MspInit+0xd4>)
 8002930:	f043 0320 	orr.w	r3, r3, #32
 8002934:	6413      	str	r3, [r2, #64]	@ 0x40
 8002936:	4b0a      	ldr	r3, [pc, #40]	@ (8002960 <HAL_TIM_Base_MspInit+0xd4>)
 8002938:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800293a:	f003 0320 	and.w	r3, r3, #32
 800293e:	60bb      	str	r3, [r7, #8]
 8002940:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8002942:	2200      	movs	r2, #0
 8002944:	2100      	movs	r1, #0
 8002946:	2037      	movs	r0, #55	@ 0x37
 8002948:	f000 fc5b 	bl	8003202 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800294c:	2037      	movs	r0, #55	@ 0x37
 800294e:	f000 fc74 	bl	800323a <HAL_NVIC_EnableIRQ>
}
 8002952:	bf00      	nop
 8002954:	3718      	adds	r7, #24
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}
 800295a:	bf00      	nop
 800295c:	40000400 	.word	0x40000400
 8002960:	40023800 	.word	0x40023800
 8002964:	40000800 	.word	0x40000800
 8002968:	40001000 	.word	0x40001000
 800296c:	40001400 	.word	0x40001400

08002970 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b08a      	sub	sp, #40	@ 0x28
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002978:	f107 0314 	add.w	r3, r7, #20
 800297c:	2200      	movs	r2, #0
 800297e:	601a      	str	r2, [r3, #0]
 8002980:	605a      	str	r2, [r3, #4]
 8002982:	609a      	str	r2, [r3, #8]
 8002984:	60da      	str	r2, [r3, #12]
 8002986:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4a33      	ldr	r2, [pc, #204]	@ (8002a5c <HAL_TIM_MspPostInit+0xec>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d13c      	bne.n	8002a0c <HAL_TIM_MspPostInit+0x9c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002992:	2300      	movs	r3, #0
 8002994:	613b      	str	r3, [r7, #16]
 8002996:	4b32      	ldr	r3, [pc, #200]	@ (8002a60 <HAL_TIM_MspPostInit+0xf0>)
 8002998:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800299a:	4a31      	ldr	r2, [pc, #196]	@ (8002a60 <HAL_TIM_MspPostInit+0xf0>)
 800299c:	f043 0301 	orr.w	r3, r3, #1
 80029a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80029a2:	4b2f      	ldr	r3, [pc, #188]	@ (8002a60 <HAL_TIM_MspPostInit+0xf0>)
 80029a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029a6:	f003 0301 	and.w	r3, r3, #1
 80029aa:	613b      	str	r3, [r7, #16]
 80029ac:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029ae:	2300      	movs	r3, #0
 80029b0:	60fb      	str	r3, [r7, #12]
 80029b2:	4b2b      	ldr	r3, [pc, #172]	@ (8002a60 <HAL_TIM_MspPostInit+0xf0>)
 80029b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029b6:	4a2a      	ldr	r2, [pc, #168]	@ (8002a60 <HAL_TIM_MspPostInit+0xf0>)
 80029b8:	f043 0302 	orr.w	r3, r3, #2
 80029bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80029be:	4b28      	ldr	r3, [pc, #160]	@ (8002a60 <HAL_TIM_MspPostInit+0xf0>)
 80029c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029c2:	f003 0302 	and.w	r3, r3, #2
 80029c6:	60fb      	str	r3, [r7, #12]
 80029c8:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = Gauche_av_Pin|Gauche_re_Pin;
 80029ca:	23c0      	movs	r3, #192	@ 0xc0
 80029cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029ce:	2302      	movs	r3, #2
 80029d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029d2:	2300      	movs	r3, #0
 80029d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029d6:	2300      	movs	r3, #0
 80029d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80029da:	2302      	movs	r3, #2
 80029dc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029de:	f107 0314 	add.w	r3, r7, #20
 80029e2:	4619      	mov	r1, r3
 80029e4:	481f      	ldr	r0, [pc, #124]	@ (8002a64 <HAL_TIM_MspPostInit+0xf4>)
 80029e6:	f000 fc43 	bl	8003270 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Droit_av_Pin|Droit_re_Pin;
 80029ea:	2303      	movs	r3, #3
 80029ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029ee:	2302      	movs	r3, #2
 80029f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029f2:	2300      	movs	r3, #0
 80029f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029f6:	2300      	movs	r3, #0
 80029f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80029fa:	2302      	movs	r3, #2
 80029fc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029fe:	f107 0314 	add.w	r3, r7, #20
 8002a02:	4619      	mov	r1, r3
 8002a04:	4818      	ldr	r0, [pc, #96]	@ (8002a68 <HAL_TIM_MspPostInit+0xf8>)
 8002a06:	f000 fc33 	bl	8003270 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002a0a:	e022      	b.n	8002a52 <HAL_TIM_MspPostInit+0xe2>
  else if(timHandle->Instance==TIM4)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a16      	ldr	r2, [pc, #88]	@ (8002a6c <HAL_TIM_MspPostInit+0xfc>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d11d      	bne.n	8002a52 <HAL_TIM_MspPostInit+0xe2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a16:	2300      	movs	r3, #0
 8002a18:	60bb      	str	r3, [r7, #8]
 8002a1a:	4b11      	ldr	r3, [pc, #68]	@ (8002a60 <HAL_TIM_MspPostInit+0xf0>)
 8002a1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a1e:	4a10      	ldr	r2, [pc, #64]	@ (8002a60 <HAL_TIM_MspPostInit+0xf0>)
 8002a20:	f043 0302 	orr.w	r3, r3, #2
 8002a24:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a26:	4b0e      	ldr	r3, [pc, #56]	@ (8002a60 <HAL_TIM_MspPostInit+0xf0>)
 8002a28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a2a:	f003 0302 	and.w	r3, r3, #2
 8002a2e:	60bb      	str	r3, [r7, #8]
 8002a30:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = LCD_BL_Pin;
 8002a32:	2380      	movs	r3, #128	@ 0x80
 8002a34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a36:	2302      	movs	r3, #2
 8002a38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002a42:	2302      	movs	r3, #2
 8002a44:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(LCD_BL_GPIO_Port, &GPIO_InitStruct);
 8002a46:	f107 0314 	add.w	r3, r7, #20
 8002a4a:	4619      	mov	r1, r3
 8002a4c:	4806      	ldr	r0, [pc, #24]	@ (8002a68 <HAL_TIM_MspPostInit+0xf8>)
 8002a4e:	f000 fc0f 	bl	8003270 <HAL_GPIO_Init>
}
 8002a52:	bf00      	nop
 8002a54:	3728      	adds	r7, #40	@ 0x28
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}
 8002a5a:	bf00      	nop
 8002a5c:	40000400 	.word	0x40000400
 8002a60:	40023800 	.word	0x40023800
 8002a64:	40020000 	.word	0x40020000
 8002a68:	40020400 	.word	0x40020400
 8002a6c:	40000800 	.word	0x40000800

08002a70 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002a74:	4b11      	ldr	r3, [pc, #68]	@ (8002abc <MX_USART2_UART_Init+0x4c>)
 8002a76:	4a12      	ldr	r2, [pc, #72]	@ (8002ac0 <MX_USART2_UART_Init+0x50>)
 8002a78:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002a7a:	4b10      	ldr	r3, [pc, #64]	@ (8002abc <MX_USART2_UART_Init+0x4c>)
 8002a7c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002a80:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002a82:	4b0e      	ldr	r3, [pc, #56]	@ (8002abc <MX_USART2_UART_Init+0x4c>)
 8002a84:	2200      	movs	r2, #0
 8002a86:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002a88:	4b0c      	ldr	r3, [pc, #48]	@ (8002abc <MX_USART2_UART_Init+0x4c>)
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002a8e:	4b0b      	ldr	r3, [pc, #44]	@ (8002abc <MX_USART2_UART_Init+0x4c>)
 8002a90:	2200      	movs	r2, #0
 8002a92:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002a94:	4b09      	ldr	r3, [pc, #36]	@ (8002abc <MX_USART2_UART_Init+0x4c>)
 8002a96:	220c      	movs	r2, #12
 8002a98:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a9a:	4b08      	ldr	r3, [pc, #32]	@ (8002abc <MX_USART2_UART_Init+0x4c>)
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002aa0:	4b06      	ldr	r3, [pc, #24]	@ (8002abc <MX_USART2_UART_Init+0x4c>)
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002aa6:	4805      	ldr	r0, [pc, #20]	@ (8002abc <MX_USART2_UART_Init+0x4c>)
 8002aa8:	f003 ff1a 	bl	80068e0 <HAL_UART_Init>
 8002aac:	4603      	mov	r3, r0
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d001      	beq.n	8002ab6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002ab2:	f7ff f961 	bl	8001d78 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002ab6:	bf00      	nop
 8002ab8:	bd80      	pop	{r7, pc}
 8002aba:	bf00      	nop
 8002abc:	20000300 	.word	0x20000300
 8002ac0:	40004400 	.word	0x40004400

08002ac4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b08a      	sub	sp, #40	@ 0x28
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002acc:	f107 0314 	add.w	r3, r7, #20
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	601a      	str	r2, [r3, #0]
 8002ad4:	605a      	str	r2, [r3, #4]
 8002ad6:	609a      	str	r2, [r3, #8]
 8002ad8:	60da      	str	r2, [r3, #12]
 8002ada:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a19      	ldr	r2, [pc, #100]	@ (8002b48 <HAL_UART_MspInit+0x84>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d12b      	bne.n	8002b3e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	613b      	str	r3, [r7, #16]
 8002aea:	4b18      	ldr	r3, [pc, #96]	@ (8002b4c <HAL_UART_MspInit+0x88>)
 8002aec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aee:	4a17      	ldr	r2, [pc, #92]	@ (8002b4c <HAL_UART_MspInit+0x88>)
 8002af0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002af4:	6413      	str	r3, [r2, #64]	@ 0x40
 8002af6:	4b15      	ldr	r3, [pc, #84]	@ (8002b4c <HAL_UART_MspInit+0x88>)
 8002af8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002afa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002afe:	613b      	str	r3, [r7, #16]
 8002b00:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b02:	2300      	movs	r3, #0
 8002b04:	60fb      	str	r3, [r7, #12]
 8002b06:	4b11      	ldr	r3, [pc, #68]	@ (8002b4c <HAL_UART_MspInit+0x88>)
 8002b08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b0a:	4a10      	ldr	r2, [pc, #64]	@ (8002b4c <HAL_UART_MspInit+0x88>)
 8002b0c:	f043 0301 	orr.w	r3, r3, #1
 8002b10:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b12:	4b0e      	ldr	r3, [pc, #56]	@ (8002b4c <HAL_UART_MspInit+0x88>)
 8002b14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b16:	f003 0301 	and.w	r3, r3, #1
 8002b1a:	60fb      	str	r3, [r7, #12]
 8002b1c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002b1e:	230c      	movs	r3, #12
 8002b20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b22:	2302      	movs	r3, #2
 8002b24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b26:	2300      	movs	r3, #0
 8002b28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b2a:	2303      	movs	r3, #3
 8002b2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002b2e:	2307      	movs	r3, #7
 8002b30:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b32:	f107 0314 	add.w	r3, r7, #20
 8002b36:	4619      	mov	r1, r3
 8002b38:	4805      	ldr	r0, [pc, #20]	@ (8002b50 <HAL_UART_MspInit+0x8c>)
 8002b3a:	f000 fb99 	bl	8003270 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002b3e:	bf00      	nop
 8002b40:	3728      	adds	r7, #40	@ 0x28
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bd80      	pop	{r7, pc}
 8002b46:	bf00      	nop
 8002b48:	40004400 	.word	0x40004400
 8002b4c:	40023800 	.word	0x40023800
 8002b50:	40020000 	.word	0x40020000

08002b54 <LCD_Manuel>:
#include <stdio.h>
#include <string.h>
#include "auto.h"

void LCD_Manuel(int a)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b084      	sub	sp, #16
 8002b58:	af02      	add	r7, sp, #8
 8002b5a:	6078      	str	r0, [r7, #4]
	if (a == 1){
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2b01      	cmp	r3, #1
 8002b60:	d10c      	bne.n	8002b7c <LCD_Manuel+0x28>
	Paint_DrawString_EN (120, 75, "1",        &Font24,    MAGENTA,  WHITE);
 8002b62:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002b66:	9301      	str	r3, [sp, #4]
 8002b68:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 8002b6c:	9300      	str	r3, [sp, #0]
 8002b6e:	4b1b      	ldr	r3, [pc, #108]	@ (8002bdc <LCD_Manuel+0x88>)
 8002b70:	4a1b      	ldr	r2, [pc, #108]	@ (8002be0 <LCD_Manuel+0x8c>)
 8002b72:	214b      	movs	r1, #75	@ 0x4b
 8002b74:	2078      	movs	r0, #120	@ 0x78
 8002b76:	f004 fbab 	bl	80072d0 <Paint_DrawString_EN>
	Paint_DrawString_EN (120, 75, "3",        &Font24,    MAGENTA,  WHITE);
	}
	else{
	Paint_DrawString_EN (120, 75, "      ",        &Font24,    MAGENTA,  WHITE);
	}
}
 8002b7a:	e02b      	b.n	8002bd4 <LCD_Manuel+0x80>
	else if (a == 2){
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2b02      	cmp	r3, #2
 8002b80:	d10c      	bne.n	8002b9c <LCD_Manuel+0x48>
	Paint_DrawString_EN (120, 75, "2",        &Font24,    MAGENTA,  WHITE);
 8002b82:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002b86:	9301      	str	r3, [sp, #4]
 8002b88:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 8002b8c:	9300      	str	r3, [sp, #0]
 8002b8e:	4b13      	ldr	r3, [pc, #76]	@ (8002bdc <LCD_Manuel+0x88>)
 8002b90:	4a14      	ldr	r2, [pc, #80]	@ (8002be4 <LCD_Manuel+0x90>)
 8002b92:	214b      	movs	r1, #75	@ 0x4b
 8002b94:	2078      	movs	r0, #120	@ 0x78
 8002b96:	f004 fb9b 	bl	80072d0 <Paint_DrawString_EN>
}
 8002b9a:	e01b      	b.n	8002bd4 <LCD_Manuel+0x80>
	else if (a==3){
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2b03      	cmp	r3, #3
 8002ba0:	d10c      	bne.n	8002bbc <LCD_Manuel+0x68>
	Paint_DrawString_EN (120, 75, "3",        &Font24,    MAGENTA,  WHITE);
 8002ba2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002ba6:	9301      	str	r3, [sp, #4]
 8002ba8:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 8002bac:	9300      	str	r3, [sp, #0]
 8002bae:	4b0b      	ldr	r3, [pc, #44]	@ (8002bdc <LCD_Manuel+0x88>)
 8002bb0:	4a0d      	ldr	r2, [pc, #52]	@ (8002be8 <LCD_Manuel+0x94>)
 8002bb2:	214b      	movs	r1, #75	@ 0x4b
 8002bb4:	2078      	movs	r0, #120	@ 0x78
 8002bb6:	f004 fb8b 	bl	80072d0 <Paint_DrawString_EN>
}
 8002bba:	e00b      	b.n	8002bd4 <LCD_Manuel+0x80>
	Paint_DrawString_EN (120, 75, "      ",        &Font24,    MAGENTA,  WHITE);
 8002bbc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002bc0:	9301      	str	r3, [sp, #4]
 8002bc2:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 8002bc6:	9300      	str	r3, [sp, #0]
 8002bc8:	4b04      	ldr	r3, [pc, #16]	@ (8002bdc <LCD_Manuel+0x88>)
 8002bca:	4a08      	ldr	r2, [pc, #32]	@ (8002bec <LCD_Manuel+0x98>)
 8002bcc:	214b      	movs	r1, #75	@ 0x4b
 8002bce:	2078      	movs	r0, #120	@ 0x78
 8002bd0:	f004 fb7e 	bl	80072d0 <Paint_DrawString_EN>
}
 8002bd4:	bf00      	nop
 8002bd6:	3708      	adds	r7, #8
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	bd80      	pop	{r7, pc}
 8002bdc:	20000038 	.word	0x20000038
 8002be0:	08008b4c 	.word	0x08008b4c
 8002be4:	08008b50 	.word	0x08008b50
 8002be8:	08008b54 	.word	0x08008b54
 8002bec:	08008b58 	.word	0x08008b58

08002bf0 <LCD_Mode>:

void LCD_Mode()
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b086      	sub	sp, #24
 8002bf4:	af02      	add	r7, sp, #8
	char charMode[12];
	strcpy(charMode, Get_Mode_String());
 8002bf6:	f7fe f953 	bl	8000ea0 <Get_Mode_String>
 8002bfa:	4602      	mov	r2, r0
 8002bfc:	1d3b      	adds	r3, r7, #4
 8002bfe:	4611      	mov	r1, r2
 8002c00:	4618      	mov	r0, r3
 8002c02:	f005 f97a 	bl	8007efa <strcpy>
	Paint_DrawString_EN (5, 75, charMode,        &Font24,    MAGENTA,  WHITE);
 8002c06:	1d3a      	adds	r2, r7, #4
 8002c08:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002c0c:	9301      	str	r3, [sp, #4]
 8002c0e:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 8002c12:	9300      	str	r3, [sp, #0]
 8002c14:	4b04      	ldr	r3, [pc, #16]	@ (8002c28 <LCD_Mode+0x38>)
 8002c16:	214b      	movs	r1, #75	@ 0x4b
 8002c18:	2005      	movs	r0, #5
 8002c1a:	f004 fb59 	bl	80072d0 <Paint_DrawString_EN>
}
 8002c1e:	bf00      	nop
 8002c20:	3710      	adds	r7, #16
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}
 8002c26:	bf00      	nop
 8002c28:	20000038 	.word	0x20000038

08002c2c <LCD_Vitesse>:

void LCD_Vitesse(uint16_t vitesseG, uint16_t vitesseD, int encod_D, int encod_G)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b08e      	sub	sp, #56	@ 0x38
 8002c30:	af02      	add	r7, sp, #8
 8002c32:	60ba      	str	r2, [r7, #8]
 8002c34:	607b      	str	r3, [r7, #4]
 8002c36:	4603      	mov	r3, r0
 8002c38:	81fb      	strh	r3, [r7, #14]
 8002c3a:	460b      	mov	r3, r1
 8002c3c:	81bb      	strh	r3, [r7, #12]
	char buffVG[14];
	char buffVD[14];

	if(encod_G == 0)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d107      	bne.n	8002c54 <LCD_Vitesse+0x28>
	{
		sprintf(buffVG,
 8002c44:	89fa      	ldrh	r2, [r7, #14]
 8002c46:	f107 0320 	add.w	r3, r7, #32
 8002c4a:	491e      	ldr	r1, [pc, #120]	@ (8002cc4 <LCD_Vitesse+0x98>)
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	f004 ffd1 	bl	8007bf4 <siprintf>
 8002c52:	e006      	b.n	8002c62 <LCD_Vitesse+0x36>
		  "+%2d",
		   vitesseG);
	}
	else
	{
		sprintf(buffVG,
 8002c54:	89fa      	ldrh	r2, [r7, #14]
 8002c56:	f107 0320 	add.w	r3, r7, #32
 8002c5a:	491b      	ldr	r1, [pc, #108]	@ (8002cc8 <LCD_Vitesse+0x9c>)
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	f004 ffc9 	bl	8007bf4 <siprintf>
			"-%2d",
			   vitesseG);
	}

	if(encod_D == 0)
 8002c62:	68bb      	ldr	r3, [r7, #8]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d107      	bne.n	8002c78 <LCD_Vitesse+0x4c>
	{
		sprintf(buffVD,
 8002c68:	89ba      	ldrh	r2, [r7, #12]
 8002c6a:	f107 0310 	add.w	r3, r7, #16
 8002c6e:	4915      	ldr	r1, [pc, #84]	@ (8002cc4 <LCD_Vitesse+0x98>)
 8002c70:	4618      	mov	r0, r3
 8002c72:	f004 ffbf 	bl	8007bf4 <siprintf>
 8002c76:	e006      	b.n	8002c86 <LCD_Vitesse+0x5a>
		  "+%2d",
		   vitesseD);
	}
	else
	{
		sprintf(buffVD,
 8002c78:	89ba      	ldrh	r2, [r7, #12]
 8002c7a:	f107 0310 	add.w	r3, r7, #16
 8002c7e:	4912      	ldr	r1, [pc, #72]	@ (8002cc8 <LCD_Vitesse+0x9c>)
 8002c80:	4618      	mov	r0, r3
 8002c82:	f004 ffb7 	bl	8007bf4 <siprintf>
			"-%2d",
			   vitesseD);
	}

	Paint_DrawString_EN (190, 100, buffVD,        &Font16,    MAGENTA,  WHITE);
 8002c86:	f107 0210 	add.w	r2, r7, #16
 8002c8a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002c8e:	9301      	str	r3, [sp, #4]
 8002c90:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 8002c94:	9300      	str	r3, [sp, #0]
 8002c96:	4b0d      	ldr	r3, [pc, #52]	@ (8002ccc <LCD_Vitesse+0xa0>)
 8002c98:	2164      	movs	r1, #100	@ 0x64
 8002c9a:	20be      	movs	r0, #190	@ 0xbe
 8002c9c:	f004 fb18 	bl	80072d0 <Paint_DrawString_EN>
	Paint_DrawString_EN (190, 125, buffVG,        &Font16,    MAGENTA,  WHITE);
 8002ca0:	f107 0220 	add.w	r2, r7, #32
 8002ca4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002ca8:	9301      	str	r3, [sp, #4]
 8002caa:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 8002cae:	9300      	str	r3, [sp, #0]
 8002cb0:	4b06      	ldr	r3, [pc, #24]	@ (8002ccc <LCD_Vitesse+0xa0>)
 8002cb2:	217d      	movs	r1, #125	@ 0x7d
 8002cb4:	20be      	movs	r0, #190	@ 0xbe
 8002cb6:	f004 fb0b 	bl	80072d0 <Paint_DrawString_EN>
}
 8002cba:	bf00      	nop
 8002cbc:	3730      	adds	r7, #48	@ 0x30
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}
 8002cc2:	bf00      	nop
 8002cc4:	08008b60 	.word	0x08008b60
 8002cc8:	08008b68 	.word	0x08008b68
 8002ccc:	20000028 	.word	0x20000028

08002cd0 <LCD_Init>:

void LCD_Init(uint8_t* a)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b084      	sub	sp, #16
 8002cd4:	af02      	add	r7, sp, #8
 8002cd6:	6078      	str	r0, [r7, #4]
	DEV_Module_Init();
 8002cd8:	f004 f8d8 	bl	8006e8c <DEV_Module_Init>


	LCD_2IN_SetBackLight(1000);
 8002cdc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002ce0:	f004 fd90 	bl	8007804 <LCD_2IN_SetBackLight>
	LCD_2IN_Init();
 8002ce4:	f004 fbd6 	bl	8007494 <LCD_2IN_Init>
	LCD_2IN_Clear(WHITE);
 8002ce8:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8002cec:	f004 fd42 	bl	8007774 <LCD_2IN_Clear>


	Paint_NewImage(LCD_2IN_WIDTH,LCD_2IN_HEIGHT, ROTATE_90, WHITE);
 8002cf0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002cf4:	225a      	movs	r2, #90	@ 0x5a
 8002cf6:	f44f 71a0 	mov.w	r1, #320	@ 0x140
 8002cfa:	20f0      	movs	r0, #240	@ 0xf0
 8002cfc:	f004 f8e6 	bl	8006ecc <Paint_NewImage>


	Paint_SetClearFuntion(LCD_2IN_Clear);
 8002d00:	4862      	ldr	r0, [pc, #392]	@ (8002e8c <LCD_Init+0x1bc>)
 8002d02:	f004 f92f 	bl	8006f64 <Paint_SetClearFuntion>
	Paint_SetDisplayFuntion(LCD_2IN_DrawPaint);
 8002d06:	4862      	ldr	r0, [pc, #392]	@ (8002e90 <LCD_Init+0x1c0>)
 8002d08:	f004 f93c 	bl	8006f84 <Paint_SetDisplayFuntion>

  printf("Paint_Clear\r\n");
 8002d0c:	4861      	ldr	r0, [pc, #388]	@ (8002e94 <LCD_Init+0x1c4>)
 8002d0e:	f004 ff69 	bl	8007be4 <puts>
	Paint_Clear(MAGENTA);
 8002d12:	f64f 001f 	movw	r0, #63519	@ 0xf81f
 8002d16:	f004 fa1f 	bl	8007158 <Paint_Clear>
	DEV_Delay_ms(500);
 8002d1a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002d1e:	f000 f971 	bl	8003004 <HAL_Delay>


	Paint_SetRotate(ROTATE_270);
 8002d22:	f44f 7087 	mov.w	r0, #270	@ 0x10e
 8002d26:	f004 f93d 	bl	8006fa4 <Paint_SetRotate>
	Paint_DrawString_EN (50, 100, "DEMARRAGE DU",        &Font24,    MAGENTA,  WHITE);
 8002d2a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002d2e:	9301      	str	r3, [sp, #4]
 8002d30:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 8002d34:	9300      	str	r3, [sp, #0]
 8002d36:	4b58      	ldr	r3, [pc, #352]	@ (8002e98 <LCD_Init+0x1c8>)
 8002d38:	4a58      	ldr	r2, [pc, #352]	@ (8002e9c <LCD_Init+0x1cc>)
 8002d3a:	2164      	movs	r1, #100	@ 0x64
 8002d3c:	2032      	movs	r0, #50	@ 0x32
 8002d3e:	f004 fac7 	bl	80072d0 <Paint_DrawString_EN>
	Paint_DrawString_EN (100, 125, "PROJET",        &Font24,    MAGENTA,  WHITE);
 8002d42:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002d46:	9301      	str	r3, [sp, #4]
 8002d48:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 8002d4c:	9300      	str	r3, [sp, #0]
 8002d4e:	4b52      	ldr	r3, [pc, #328]	@ (8002e98 <LCD_Init+0x1c8>)
 8002d50:	4a53      	ldr	r2, [pc, #332]	@ (8002ea0 <LCD_Init+0x1d0>)
 8002d52:	217d      	movs	r1, #125	@ 0x7d
 8002d54:	2064      	movs	r0, #100	@ 0x64
 8002d56:	f004 fabb 	bl	80072d0 <Paint_DrawString_EN>
	Paint_DrawString_EN (70, 150, "VROUM-VROUM",        &Font24,    MAGENTA,  WHITE);
 8002d5a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002d5e:	9301      	str	r3, [sp, #4]
 8002d60:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 8002d64:	9300      	str	r3, [sp, #0]
 8002d66:	4b4c      	ldr	r3, [pc, #304]	@ (8002e98 <LCD_Init+0x1c8>)
 8002d68:	4a4e      	ldr	r2, [pc, #312]	@ (8002ea4 <LCD_Init+0x1d4>)
 8002d6a:	2196      	movs	r1, #150	@ 0x96
 8002d6c:	2046      	movs	r0, #70	@ 0x46
 8002d6e:	f004 faaf 	bl	80072d0 <Paint_DrawString_EN>
	DEV_Delay_ms(500);
 8002d72:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002d76:	f000 f945 	bl	8003004 <HAL_Delay>
	Paint_Clear(MAGENTA);
 8002d7a:	f64f 001f 	movw	r0, #63519	@ 0xf81f
 8002d7e:	f004 f9eb 	bl	8007158 <Paint_Clear>

	Paint_DrawString_EN (85, 100, "LE PROJET",        &Font24,    MAGENTA,  WHITE);
 8002d82:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002d86:	9301      	str	r3, [sp, #4]
 8002d88:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 8002d8c:	9300      	str	r3, [sp, #0]
 8002d8e:	4b42      	ldr	r3, [pc, #264]	@ (8002e98 <LCD_Init+0x1c8>)
 8002d90:	4a45      	ldr	r2, [pc, #276]	@ (8002ea8 <LCD_Init+0x1d8>)
 8002d92:	2164      	movs	r1, #100	@ 0x64
 8002d94:	2055      	movs	r0, #85	@ 0x55
 8002d96:	f004 fa9b 	bl	80072d0 <Paint_DrawString_EN>
	Paint_DrawString_EN (70, 125, "VROUM-VROUM",        &Font24,    MAGENTA,  WHITE);
 8002d9a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002d9e:	9301      	str	r3, [sp, #4]
 8002da0:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 8002da4:	9300      	str	r3, [sp, #0]
 8002da6:	4b3c      	ldr	r3, [pc, #240]	@ (8002e98 <LCD_Init+0x1c8>)
 8002da8:	4a3e      	ldr	r2, [pc, #248]	@ (8002ea4 <LCD_Init+0x1d4>)
 8002daa:	217d      	movs	r1, #125	@ 0x7d
 8002dac:	2046      	movs	r0, #70	@ 0x46
 8002dae:	f004 fa8f 	bl	80072d0 <Paint_DrawString_EN>
	Paint_DrawString_EN (85, 150, "VOUS SALUT",        &Font24,    MAGENTA,  WHITE);
 8002db2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002db6:	9301      	str	r3, [sp, #4]
 8002db8:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 8002dbc:	9300      	str	r3, [sp, #0]
 8002dbe:	4b36      	ldr	r3, [pc, #216]	@ (8002e98 <LCD_Init+0x1c8>)
 8002dc0:	4a3a      	ldr	r2, [pc, #232]	@ (8002eac <LCD_Init+0x1dc>)
 8002dc2:	2196      	movs	r1, #150	@ 0x96
 8002dc4:	2055      	movs	r0, #85	@ 0x55
 8002dc6:	f004 fa83 	bl	80072d0 <Paint_DrawString_EN>
	DEV_Delay_ms(500);
 8002dca:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002dce:	f000 f919 	bl	8003004 <HAL_Delay>
	Paint_Clear(MAGENTA);
 8002dd2:	f64f 001f 	movw	r0, #63519	@ 0xf81f
 8002dd6:	f004 f9bf 	bl	8007158 <Paint_Clear>

	Paint_DrawString_EN (5, 1, "La date : ",        &Font24,    MAGENTA,  WHITE);
 8002dda:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002dde:	9301      	str	r3, [sp, #4]
 8002de0:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 8002de4:	9300      	str	r3, [sp, #0]
 8002de6:	4b2c      	ldr	r3, [pc, #176]	@ (8002e98 <LCD_Init+0x1c8>)
 8002de8:	4a31      	ldr	r2, [pc, #196]	@ (8002eb0 <LCD_Init+0x1e0>)
 8002dea:	2101      	movs	r1, #1
 8002dec:	2005      	movs	r0, #5
 8002dee:	f004 fa6f 	bl	80072d0 <Paint_DrawString_EN>
	Paint_DrawString_EN (5, 25, "L'heure : ",        &Font24,    MAGENTA,  WHITE);
 8002df2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002df6:	9301      	str	r3, [sp, #4]
 8002df8:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 8002dfc:	9300      	str	r3, [sp, #0]
 8002dfe:	4b26      	ldr	r3, [pc, #152]	@ (8002e98 <LCD_Init+0x1c8>)
 8002e00:	4a2c      	ldr	r2, [pc, #176]	@ (8002eb4 <LCD_Init+0x1e4>)
 8002e02:	2119      	movs	r1, #25
 8002e04:	2005      	movs	r0, #5
 8002e06:	f004 fa63 	bl	80072d0 <Paint_DrawString_EN>
	Paint_DrawString_EN (5, 50, "Mode actuel : ",        &Font24,    MAGENTA,  WHITE);
 8002e0a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002e0e:	9301      	str	r3, [sp, #4]
 8002e10:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 8002e14:	9300      	str	r3, [sp, #0]
 8002e16:	4b20      	ldr	r3, [pc, #128]	@ (8002e98 <LCD_Init+0x1c8>)
 8002e18:	4a27      	ldr	r2, [pc, #156]	@ (8002eb8 <LCD_Init+0x1e8>)
 8002e1a:	2132      	movs	r1, #50	@ 0x32
 8002e1c:	2005      	movs	r0, #5
 8002e1e:	f004 fa57 	bl	80072d0 <Paint_DrawString_EN>


	LCD_Mode();
 8002e22:	f7ff fee5 	bl	8002bf0 <LCD_Mode>
	LCD_Manuel(3);
 8002e26:	2003      	movs	r0, #3
 8002e28:	f7ff fe94 	bl	8002b54 <LCD_Manuel>

	Paint_DrawString_EN (5, 100, "Vitesse G :   %",        &Font24,    MAGENTA,  WHITE);
 8002e2c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002e30:	9301      	str	r3, [sp, #4]
 8002e32:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 8002e36:	9300      	str	r3, [sp, #0]
 8002e38:	4b17      	ldr	r3, [pc, #92]	@ (8002e98 <LCD_Init+0x1c8>)
 8002e3a:	4a20      	ldr	r2, [pc, #128]	@ (8002ebc <LCD_Init+0x1ec>)
 8002e3c:	2164      	movs	r1, #100	@ 0x64
 8002e3e:	2005      	movs	r0, #5
 8002e40:	f004 fa46 	bl	80072d0 <Paint_DrawString_EN>
	Paint_DrawString_EN (5, 125, "Vitesse D :   %",        &Font24,    MAGENTA,  WHITE);
 8002e44:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002e48:	9301      	str	r3, [sp, #4]
 8002e4a:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 8002e4e:	9300      	str	r3, [sp, #0]
 8002e50:	4b11      	ldr	r3, [pc, #68]	@ (8002e98 <LCD_Init+0x1c8>)
 8002e52:	4a1b      	ldr	r2, [pc, #108]	@ (8002ec0 <LCD_Init+0x1f0>)
 8002e54:	217d      	movs	r1, #125	@ 0x7d
 8002e56:	2005      	movs	r0, #5
 8002e58:	f004 fa3a 	bl	80072d0 <Paint_DrawString_EN>
	Paint_DrawString_EN (10, 220, "Attention aux enfants",        &Font20,    YELLOW,  RED);
 8002e5c:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8002e60:	9301      	str	r3, [sp, #4]
 8002e62:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8002e66:	9300      	str	r3, [sp, #0]
 8002e68:	4b16      	ldr	r3, [pc, #88]	@ (8002ec4 <LCD_Init+0x1f4>)
 8002e6a:	4a17      	ldr	r2, [pc, #92]	@ (8002ec8 <LCD_Init+0x1f8>)
 8002e6c:	21dc      	movs	r1, #220	@ 0xdc
 8002e6e:	200a      	movs	r0, #10
 8002e70:	f004 fa2e 	bl	80072d0 <Paint_DrawString_EN>

	DEV_Delay_ms(3000);
 8002e74:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8002e78:	f000 f8c4 	bl	8003004 <HAL_Delay>

	*a = 1;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2201      	movs	r2, #1
 8002e80:	701a      	strb	r2, [r3, #0]
	//DEV_Module_Exit();

}
 8002e82:	bf00      	nop
 8002e84:	3708      	adds	r7, #8
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd80      	pop	{r7, pc}
 8002e8a:	bf00      	nop
 8002e8c:	08007775 	.word	0x08007775
 8002e90:	080077d5 	.word	0x080077d5
 8002e94:	08008b70 	.word	0x08008b70
 8002e98:	20000038 	.word	0x20000038
 8002e9c:	08008b80 	.word	0x08008b80
 8002ea0:	08008b90 	.word	0x08008b90
 8002ea4:	08008b98 	.word	0x08008b98
 8002ea8:	08008ba4 	.word	0x08008ba4
 8002eac:	08008bb0 	.word	0x08008bb0
 8002eb0:	08008bbc 	.word	0x08008bbc
 8002eb4:	08008bc8 	.word	0x08008bc8
 8002eb8:	08008bd4 	.word	0x08008bd4
 8002ebc:	08008be4 	.word	0x08008be4
 8002ec0:	08008bf4 	.word	0x08008bf4
 8002ec4:	20000030 	.word	0x20000030
 8002ec8:	08008c04 	.word	0x08008c04

08002ecc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002ecc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002f04 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002ed0:	f7ff fb50 	bl	8002574 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002ed4:	480c      	ldr	r0, [pc, #48]	@ (8002f08 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002ed6:	490d      	ldr	r1, [pc, #52]	@ (8002f0c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002ed8:	4a0d      	ldr	r2, [pc, #52]	@ (8002f10 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002eda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002edc:	e002      	b.n	8002ee4 <LoopCopyDataInit>

08002ede <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002ede:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ee0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002ee2:	3304      	adds	r3, #4

08002ee4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ee4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002ee6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ee8:	d3f9      	bcc.n	8002ede <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002eea:	4a0a      	ldr	r2, [pc, #40]	@ (8002f14 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002eec:	4c0a      	ldr	r4, [pc, #40]	@ (8002f18 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002eee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ef0:	e001      	b.n	8002ef6 <LoopFillZerobss>

08002ef2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002ef2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ef4:	3204      	adds	r2, #4

08002ef6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002ef6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ef8:	d3fb      	bcc.n	8002ef2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002efa:	f004 ffd7 	bl	8007eac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002efe:	f7fe fe07 	bl	8001b10 <main>
  bx  lr    
 8002f02:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002f04:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002f08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002f0c:	2000009c 	.word	0x2000009c
  ldr r2, =_sidata
 8002f10:	0800c4ec 	.word	0x0800c4ec
  ldr r2, =_sbss
 8002f14:	2000009c 	.word	0x2000009c
  ldr r4, =_ebss
 8002f18:	200004b8 	.word	0x200004b8

08002f1c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002f1c:	e7fe      	b.n	8002f1c <ADC_IRQHandler>
	...

08002f20 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002f24:	4b0e      	ldr	r3, [pc, #56]	@ (8002f60 <HAL_Init+0x40>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a0d      	ldr	r2, [pc, #52]	@ (8002f60 <HAL_Init+0x40>)
 8002f2a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002f2e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002f30:	4b0b      	ldr	r3, [pc, #44]	@ (8002f60 <HAL_Init+0x40>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a0a      	ldr	r2, [pc, #40]	@ (8002f60 <HAL_Init+0x40>)
 8002f36:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002f3a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002f3c:	4b08      	ldr	r3, [pc, #32]	@ (8002f60 <HAL_Init+0x40>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a07      	ldr	r2, [pc, #28]	@ (8002f60 <HAL_Init+0x40>)
 8002f42:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f46:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f48:	2003      	movs	r0, #3
 8002f4a:	f000 f94f 	bl	80031ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002f4e:	2000      	movs	r0, #0
 8002f50:	f000 f808 	bl	8002f64 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002f54:	f7ff f9ea 	bl	800232c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002f58:	2300      	movs	r3, #0
}
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	bd80      	pop	{r7, pc}
 8002f5e:	bf00      	nop
 8002f60:	40023c00 	.word	0x40023c00

08002f64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b082      	sub	sp, #8
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002f6c:	4b12      	ldr	r3, [pc, #72]	@ (8002fb8 <HAL_InitTick+0x54>)
 8002f6e:	681a      	ldr	r2, [r3, #0]
 8002f70:	4b12      	ldr	r3, [pc, #72]	@ (8002fbc <HAL_InitTick+0x58>)
 8002f72:	781b      	ldrb	r3, [r3, #0]
 8002f74:	4619      	mov	r1, r3
 8002f76:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002f7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002f7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f82:	4618      	mov	r0, r3
 8002f84:	f000 f967 	bl	8003256 <HAL_SYSTICK_Config>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d001      	beq.n	8002f92 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	e00e      	b.n	8002fb0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2b0f      	cmp	r3, #15
 8002f96:	d80a      	bhi.n	8002fae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002f98:	2200      	movs	r2, #0
 8002f9a:	6879      	ldr	r1, [r7, #4]
 8002f9c:	f04f 30ff 	mov.w	r0, #4294967295
 8002fa0:	f000 f92f 	bl	8003202 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002fa4:	4a06      	ldr	r2, [pc, #24]	@ (8002fc0 <HAL_InitTick+0x5c>)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002faa:	2300      	movs	r3, #0
 8002fac:	e000      	b.n	8002fb0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002fae:	2301      	movs	r3, #1
}
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	3708      	adds	r7, #8
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bd80      	pop	{r7, pc}
 8002fb8:	2000001c 	.word	0x2000001c
 8002fbc:	20000024 	.word	0x20000024
 8002fc0:	20000020 	.word	0x20000020

08002fc4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002fc8:	4b06      	ldr	r3, [pc, #24]	@ (8002fe4 <HAL_IncTick+0x20>)
 8002fca:	781b      	ldrb	r3, [r3, #0]
 8002fcc:	461a      	mov	r2, r3
 8002fce:	4b06      	ldr	r3, [pc, #24]	@ (8002fe8 <HAL_IncTick+0x24>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4413      	add	r3, r2
 8002fd4:	4a04      	ldr	r2, [pc, #16]	@ (8002fe8 <HAL_IncTick+0x24>)
 8002fd6:	6013      	str	r3, [r2, #0]
}
 8002fd8:	bf00      	nop
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe0:	4770      	bx	lr
 8002fe2:	bf00      	nop
 8002fe4:	20000024 	.word	0x20000024
 8002fe8:	20000348 	.word	0x20000348

08002fec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002fec:	b480      	push	{r7}
 8002fee:	af00      	add	r7, sp, #0
  return uwTick;
 8002ff0:	4b03      	ldr	r3, [pc, #12]	@ (8003000 <HAL_GetTick+0x14>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
}
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffc:	4770      	bx	lr
 8002ffe:	bf00      	nop
 8003000:	20000348 	.word	0x20000348

08003004 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b084      	sub	sp, #16
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800300c:	f7ff ffee 	bl	8002fec <HAL_GetTick>
 8003010:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	f1b3 3fff 	cmp.w	r3, #4294967295
 800301c:	d005      	beq.n	800302a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800301e:	4b0a      	ldr	r3, [pc, #40]	@ (8003048 <HAL_Delay+0x44>)
 8003020:	781b      	ldrb	r3, [r3, #0]
 8003022:	461a      	mov	r2, r3
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	4413      	add	r3, r2
 8003028:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800302a:	bf00      	nop
 800302c:	f7ff ffde 	bl	8002fec <HAL_GetTick>
 8003030:	4602      	mov	r2, r0
 8003032:	68bb      	ldr	r3, [r7, #8]
 8003034:	1ad3      	subs	r3, r2, r3
 8003036:	68fa      	ldr	r2, [r7, #12]
 8003038:	429a      	cmp	r2, r3
 800303a:	d8f7      	bhi.n	800302c <HAL_Delay+0x28>
  {
  }
}
 800303c:	bf00      	nop
 800303e:	bf00      	nop
 8003040:	3710      	adds	r7, #16
 8003042:	46bd      	mov	sp, r7
 8003044:	bd80      	pop	{r7, pc}
 8003046:	bf00      	nop
 8003048:	20000024 	.word	0x20000024

0800304c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800304c:	b480      	push	{r7}
 800304e:	b085      	sub	sp, #20
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	f003 0307 	and.w	r3, r3, #7
 800305a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800305c:	4b0c      	ldr	r3, [pc, #48]	@ (8003090 <__NVIC_SetPriorityGrouping+0x44>)
 800305e:	68db      	ldr	r3, [r3, #12]
 8003060:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003062:	68ba      	ldr	r2, [r7, #8]
 8003064:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003068:	4013      	ands	r3, r2
 800306a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003070:	68bb      	ldr	r3, [r7, #8]
 8003072:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003074:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003078:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800307c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800307e:	4a04      	ldr	r2, [pc, #16]	@ (8003090 <__NVIC_SetPriorityGrouping+0x44>)
 8003080:	68bb      	ldr	r3, [r7, #8]
 8003082:	60d3      	str	r3, [r2, #12]
}
 8003084:	bf00      	nop
 8003086:	3714      	adds	r7, #20
 8003088:	46bd      	mov	sp, r7
 800308a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308e:	4770      	bx	lr
 8003090:	e000ed00 	.word	0xe000ed00

08003094 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003094:	b480      	push	{r7}
 8003096:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003098:	4b04      	ldr	r3, [pc, #16]	@ (80030ac <__NVIC_GetPriorityGrouping+0x18>)
 800309a:	68db      	ldr	r3, [r3, #12]
 800309c:	0a1b      	lsrs	r3, r3, #8
 800309e:	f003 0307 	and.w	r3, r3, #7
}
 80030a2:	4618      	mov	r0, r3
 80030a4:	46bd      	mov	sp, r7
 80030a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030aa:	4770      	bx	lr
 80030ac:	e000ed00 	.word	0xe000ed00

080030b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030b0:	b480      	push	{r7}
 80030b2:	b083      	sub	sp, #12
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	4603      	mov	r3, r0
 80030b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	db0b      	blt.n	80030da <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80030c2:	79fb      	ldrb	r3, [r7, #7]
 80030c4:	f003 021f 	and.w	r2, r3, #31
 80030c8:	4907      	ldr	r1, [pc, #28]	@ (80030e8 <__NVIC_EnableIRQ+0x38>)
 80030ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030ce:	095b      	lsrs	r3, r3, #5
 80030d0:	2001      	movs	r0, #1
 80030d2:	fa00 f202 	lsl.w	r2, r0, r2
 80030d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80030da:	bf00      	nop
 80030dc:	370c      	adds	r7, #12
 80030de:	46bd      	mov	sp, r7
 80030e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e4:	4770      	bx	lr
 80030e6:	bf00      	nop
 80030e8:	e000e100 	.word	0xe000e100

080030ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80030ec:	b480      	push	{r7}
 80030ee:	b083      	sub	sp, #12
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	4603      	mov	r3, r0
 80030f4:	6039      	str	r1, [r7, #0]
 80030f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	db0a      	blt.n	8003116 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	b2da      	uxtb	r2, r3
 8003104:	490c      	ldr	r1, [pc, #48]	@ (8003138 <__NVIC_SetPriority+0x4c>)
 8003106:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800310a:	0112      	lsls	r2, r2, #4
 800310c:	b2d2      	uxtb	r2, r2
 800310e:	440b      	add	r3, r1
 8003110:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003114:	e00a      	b.n	800312c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	b2da      	uxtb	r2, r3
 800311a:	4908      	ldr	r1, [pc, #32]	@ (800313c <__NVIC_SetPriority+0x50>)
 800311c:	79fb      	ldrb	r3, [r7, #7]
 800311e:	f003 030f 	and.w	r3, r3, #15
 8003122:	3b04      	subs	r3, #4
 8003124:	0112      	lsls	r2, r2, #4
 8003126:	b2d2      	uxtb	r2, r2
 8003128:	440b      	add	r3, r1
 800312a:	761a      	strb	r2, [r3, #24]
}
 800312c:	bf00      	nop
 800312e:	370c      	adds	r7, #12
 8003130:	46bd      	mov	sp, r7
 8003132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003136:	4770      	bx	lr
 8003138:	e000e100 	.word	0xe000e100
 800313c:	e000ed00 	.word	0xe000ed00

08003140 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003140:	b480      	push	{r7}
 8003142:	b089      	sub	sp, #36	@ 0x24
 8003144:	af00      	add	r7, sp, #0
 8003146:	60f8      	str	r0, [r7, #12]
 8003148:	60b9      	str	r1, [r7, #8]
 800314a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	f003 0307 	and.w	r3, r3, #7
 8003152:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003154:	69fb      	ldr	r3, [r7, #28]
 8003156:	f1c3 0307 	rsb	r3, r3, #7
 800315a:	2b04      	cmp	r3, #4
 800315c:	bf28      	it	cs
 800315e:	2304      	movcs	r3, #4
 8003160:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003162:	69fb      	ldr	r3, [r7, #28]
 8003164:	3304      	adds	r3, #4
 8003166:	2b06      	cmp	r3, #6
 8003168:	d902      	bls.n	8003170 <NVIC_EncodePriority+0x30>
 800316a:	69fb      	ldr	r3, [r7, #28]
 800316c:	3b03      	subs	r3, #3
 800316e:	e000      	b.n	8003172 <NVIC_EncodePriority+0x32>
 8003170:	2300      	movs	r3, #0
 8003172:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003174:	f04f 32ff 	mov.w	r2, #4294967295
 8003178:	69bb      	ldr	r3, [r7, #24]
 800317a:	fa02 f303 	lsl.w	r3, r2, r3
 800317e:	43da      	mvns	r2, r3
 8003180:	68bb      	ldr	r3, [r7, #8]
 8003182:	401a      	ands	r2, r3
 8003184:	697b      	ldr	r3, [r7, #20]
 8003186:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003188:	f04f 31ff 	mov.w	r1, #4294967295
 800318c:	697b      	ldr	r3, [r7, #20]
 800318e:	fa01 f303 	lsl.w	r3, r1, r3
 8003192:	43d9      	mvns	r1, r3
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003198:	4313      	orrs	r3, r2
         );
}
 800319a:	4618      	mov	r0, r3
 800319c:	3724      	adds	r7, #36	@ 0x24
 800319e:	46bd      	mov	sp, r7
 80031a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a4:	4770      	bx	lr
	...

080031a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b082      	sub	sp, #8
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	3b01      	subs	r3, #1
 80031b4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80031b8:	d301      	bcc.n	80031be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80031ba:	2301      	movs	r3, #1
 80031bc:	e00f      	b.n	80031de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80031be:	4a0a      	ldr	r2, [pc, #40]	@ (80031e8 <SysTick_Config+0x40>)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	3b01      	subs	r3, #1
 80031c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80031c6:	210f      	movs	r1, #15
 80031c8:	f04f 30ff 	mov.w	r0, #4294967295
 80031cc:	f7ff ff8e 	bl	80030ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80031d0:	4b05      	ldr	r3, [pc, #20]	@ (80031e8 <SysTick_Config+0x40>)
 80031d2:	2200      	movs	r2, #0
 80031d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80031d6:	4b04      	ldr	r3, [pc, #16]	@ (80031e8 <SysTick_Config+0x40>)
 80031d8:	2207      	movs	r2, #7
 80031da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80031dc:	2300      	movs	r3, #0
}
 80031de:	4618      	mov	r0, r3
 80031e0:	3708      	adds	r7, #8
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bd80      	pop	{r7, pc}
 80031e6:	bf00      	nop
 80031e8:	e000e010 	.word	0xe000e010

080031ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b082      	sub	sp, #8
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80031f4:	6878      	ldr	r0, [r7, #4]
 80031f6:	f7ff ff29 	bl	800304c <__NVIC_SetPriorityGrouping>
}
 80031fa:	bf00      	nop
 80031fc:	3708      	adds	r7, #8
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}

08003202 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003202:	b580      	push	{r7, lr}
 8003204:	b086      	sub	sp, #24
 8003206:	af00      	add	r7, sp, #0
 8003208:	4603      	mov	r3, r0
 800320a:	60b9      	str	r1, [r7, #8]
 800320c:	607a      	str	r2, [r7, #4]
 800320e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003210:	2300      	movs	r3, #0
 8003212:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003214:	f7ff ff3e 	bl	8003094 <__NVIC_GetPriorityGrouping>
 8003218:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800321a:	687a      	ldr	r2, [r7, #4]
 800321c:	68b9      	ldr	r1, [r7, #8]
 800321e:	6978      	ldr	r0, [r7, #20]
 8003220:	f7ff ff8e 	bl	8003140 <NVIC_EncodePriority>
 8003224:	4602      	mov	r2, r0
 8003226:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800322a:	4611      	mov	r1, r2
 800322c:	4618      	mov	r0, r3
 800322e:	f7ff ff5d 	bl	80030ec <__NVIC_SetPriority>
}
 8003232:	bf00      	nop
 8003234:	3718      	adds	r7, #24
 8003236:	46bd      	mov	sp, r7
 8003238:	bd80      	pop	{r7, pc}

0800323a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800323a:	b580      	push	{r7, lr}
 800323c:	b082      	sub	sp, #8
 800323e:	af00      	add	r7, sp, #0
 8003240:	4603      	mov	r3, r0
 8003242:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003244:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003248:	4618      	mov	r0, r3
 800324a:	f7ff ff31 	bl	80030b0 <__NVIC_EnableIRQ>
}
 800324e:	bf00      	nop
 8003250:	3708      	adds	r7, #8
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}

08003256 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003256:	b580      	push	{r7, lr}
 8003258:	b082      	sub	sp, #8
 800325a:	af00      	add	r7, sp, #0
 800325c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800325e:	6878      	ldr	r0, [r7, #4]
 8003260:	f7ff ffa2 	bl	80031a8 <SysTick_Config>
 8003264:	4603      	mov	r3, r0
}
 8003266:	4618      	mov	r0, r3
 8003268:	3708      	adds	r7, #8
 800326a:	46bd      	mov	sp, r7
 800326c:	bd80      	pop	{r7, pc}
	...

08003270 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003270:	b480      	push	{r7}
 8003272:	b089      	sub	sp, #36	@ 0x24
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
 8003278:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800327a:	2300      	movs	r3, #0
 800327c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800327e:	2300      	movs	r3, #0
 8003280:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003282:	2300      	movs	r3, #0
 8003284:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003286:	2300      	movs	r3, #0
 8003288:	61fb      	str	r3, [r7, #28]
 800328a:	e165      	b.n	8003558 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800328c:	2201      	movs	r2, #1
 800328e:	69fb      	ldr	r3, [r7, #28]
 8003290:	fa02 f303 	lsl.w	r3, r2, r3
 8003294:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	697a      	ldr	r2, [r7, #20]
 800329c:	4013      	ands	r3, r2
 800329e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80032a0:	693a      	ldr	r2, [r7, #16]
 80032a2:	697b      	ldr	r3, [r7, #20]
 80032a4:	429a      	cmp	r2, r3
 80032a6:	f040 8154 	bne.w	8003552 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	f003 0303 	and.w	r3, r3, #3
 80032b2:	2b01      	cmp	r3, #1
 80032b4:	d005      	beq.n	80032c2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80032be:	2b02      	cmp	r3, #2
 80032c0:	d130      	bne.n	8003324 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	689b      	ldr	r3, [r3, #8]
 80032c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80032c8:	69fb      	ldr	r3, [r7, #28]
 80032ca:	005b      	lsls	r3, r3, #1
 80032cc:	2203      	movs	r2, #3
 80032ce:	fa02 f303 	lsl.w	r3, r2, r3
 80032d2:	43db      	mvns	r3, r3
 80032d4:	69ba      	ldr	r2, [r7, #24]
 80032d6:	4013      	ands	r3, r2
 80032d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	68da      	ldr	r2, [r3, #12]
 80032de:	69fb      	ldr	r3, [r7, #28]
 80032e0:	005b      	lsls	r3, r3, #1
 80032e2:	fa02 f303 	lsl.w	r3, r2, r3
 80032e6:	69ba      	ldr	r2, [r7, #24]
 80032e8:	4313      	orrs	r3, r2
 80032ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	69ba      	ldr	r2, [r7, #24]
 80032f0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80032f8:	2201      	movs	r2, #1
 80032fa:	69fb      	ldr	r3, [r7, #28]
 80032fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003300:	43db      	mvns	r3, r3
 8003302:	69ba      	ldr	r2, [r7, #24]
 8003304:	4013      	ands	r3, r2
 8003306:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	091b      	lsrs	r3, r3, #4
 800330e:	f003 0201 	and.w	r2, r3, #1
 8003312:	69fb      	ldr	r3, [r7, #28]
 8003314:	fa02 f303 	lsl.w	r3, r2, r3
 8003318:	69ba      	ldr	r2, [r7, #24]
 800331a:	4313      	orrs	r3, r2
 800331c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	69ba      	ldr	r2, [r7, #24]
 8003322:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	f003 0303 	and.w	r3, r3, #3
 800332c:	2b03      	cmp	r3, #3
 800332e:	d017      	beq.n	8003360 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	68db      	ldr	r3, [r3, #12]
 8003334:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003336:	69fb      	ldr	r3, [r7, #28]
 8003338:	005b      	lsls	r3, r3, #1
 800333a:	2203      	movs	r2, #3
 800333c:	fa02 f303 	lsl.w	r3, r2, r3
 8003340:	43db      	mvns	r3, r3
 8003342:	69ba      	ldr	r2, [r7, #24]
 8003344:	4013      	ands	r3, r2
 8003346:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	689a      	ldr	r2, [r3, #8]
 800334c:	69fb      	ldr	r3, [r7, #28]
 800334e:	005b      	lsls	r3, r3, #1
 8003350:	fa02 f303 	lsl.w	r3, r2, r3
 8003354:	69ba      	ldr	r2, [r7, #24]
 8003356:	4313      	orrs	r3, r2
 8003358:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	69ba      	ldr	r2, [r7, #24]
 800335e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	f003 0303 	and.w	r3, r3, #3
 8003368:	2b02      	cmp	r3, #2
 800336a:	d123      	bne.n	80033b4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800336c:	69fb      	ldr	r3, [r7, #28]
 800336e:	08da      	lsrs	r2, r3, #3
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	3208      	adds	r2, #8
 8003374:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003378:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800337a:	69fb      	ldr	r3, [r7, #28]
 800337c:	f003 0307 	and.w	r3, r3, #7
 8003380:	009b      	lsls	r3, r3, #2
 8003382:	220f      	movs	r2, #15
 8003384:	fa02 f303 	lsl.w	r3, r2, r3
 8003388:	43db      	mvns	r3, r3
 800338a:	69ba      	ldr	r2, [r7, #24]
 800338c:	4013      	ands	r3, r2
 800338e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	691a      	ldr	r2, [r3, #16]
 8003394:	69fb      	ldr	r3, [r7, #28]
 8003396:	f003 0307 	and.w	r3, r3, #7
 800339a:	009b      	lsls	r3, r3, #2
 800339c:	fa02 f303 	lsl.w	r3, r2, r3
 80033a0:	69ba      	ldr	r2, [r7, #24]
 80033a2:	4313      	orrs	r3, r2
 80033a4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80033a6:	69fb      	ldr	r3, [r7, #28]
 80033a8:	08da      	lsrs	r2, r3, #3
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	3208      	adds	r2, #8
 80033ae:	69b9      	ldr	r1, [r7, #24]
 80033b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80033ba:	69fb      	ldr	r3, [r7, #28]
 80033bc:	005b      	lsls	r3, r3, #1
 80033be:	2203      	movs	r2, #3
 80033c0:	fa02 f303 	lsl.w	r3, r2, r3
 80033c4:	43db      	mvns	r3, r3
 80033c6:	69ba      	ldr	r2, [r7, #24]
 80033c8:	4013      	ands	r3, r2
 80033ca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	f003 0203 	and.w	r2, r3, #3
 80033d4:	69fb      	ldr	r3, [r7, #28]
 80033d6:	005b      	lsls	r3, r3, #1
 80033d8:	fa02 f303 	lsl.w	r3, r2, r3
 80033dc:	69ba      	ldr	r2, [r7, #24]
 80033de:	4313      	orrs	r3, r2
 80033e0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	69ba      	ldr	r2, [r7, #24]
 80033e6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	f000 80ae 	beq.w	8003552 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033f6:	2300      	movs	r3, #0
 80033f8:	60fb      	str	r3, [r7, #12]
 80033fa:	4b5d      	ldr	r3, [pc, #372]	@ (8003570 <HAL_GPIO_Init+0x300>)
 80033fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033fe:	4a5c      	ldr	r2, [pc, #368]	@ (8003570 <HAL_GPIO_Init+0x300>)
 8003400:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003404:	6453      	str	r3, [r2, #68]	@ 0x44
 8003406:	4b5a      	ldr	r3, [pc, #360]	@ (8003570 <HAL_GPIO_Init+0x300>)
 8003408:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800340a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800340e:	60fb      	str	r3, [r7, #12]
 8003410:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003412:	4a58      	ldr	r2, [pc, #352]	@ (8003574 <HAL_GPIO_Init+0x304>)
 8003414:	69fb      	ldr	r3, [r7, #28]
 8003416:	089b      	lsrs	r3, r3, #2
 8003418:	3302      	adds	r3, #2
 800341a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800341e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003420:	69fb      	ldr	r3, [r7, #28]
 8003422:	f003 0303 	and.w	r3, r3, #3
 8003426:	009b      	lsls	r3, r3, #2
 8003428:	220f      	movs	r2, #15
 800342a:	fa02 f303 	lsl.w	r3, r2, r3
 800342e:	43db      	mvns	r3, r3
 8003430:	69ba      	ldr	r2, [r7, #24]
 8003432:	4013      	ands	r3, r2
 8003434:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	4a4f      	ldr	r2, [pc, #316]	@ (8003578 <HAL_GPIO_Init+0x308>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d025      	beq.n	800348a <HAL_GPIO_Init+0x21a>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	4a4e      	ldr	r2, [pc, #312]	@ (800357c <HAL_GPIO_Init+0x30c>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d01f      	beq.n	8003486 <HAL_GPIO_Init+0x216>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	4a4d      	ldr	r2, [pc, #308]	@ (8003580 <HAL_GPIO_Init+0x310>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d019      	beq.n	8003482 <HAL_GPIO_Init+0x212>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	4a4c      	ldr	r2, [pc, #304]	@ (8003584 <HAL_GPIO_Init+0x314>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d013      	beq.n	800347e <HAL_GPIO_Init+0x20e>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	4a4b      	ldr	r2, [pc, #300]	@ (8003588 <HAL_GPIO_Init+0x318>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d00d      	beq.n	800347a <HAL_GPIO_Init+0x20a>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	4a4a      	ldr	r2, [pc, #296]	@ (800358c <HAL_GPIO_Init+0x31c>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d007      	beq.n	8003476 <HAL_GPIO_Init+0x206>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	4a49      	ldr	r2, [pc, #292]	@ (8003590 <HAL_GPIO_Init+0x320>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d101      	bne.n	8003472 <HAL_GPIO_Init+0x202>
 800346e:	2306      	movs	r3, #6
 8003470:	e00c      	b.n	800348c <HAL_GPIO_Init+0x21c>
 8003472:	2307      	movs	r3, #7
 8003474:	e00a      	b.n	800348c <HAL_GPIO_Init+0x21c>
 8003476:	2305      	movs	r3, #5
 8003478:	e008      	b.n	800348c <HAL_GPIO_Init+0x21c>
 800347a:	2304      	movs	r3, #4
 800347c:	e006      	b.n	800348c <HAL_GPIO_Init+0x21c>
 800347e:	2303      	movs	r3, #3
 8003480:	e004      	b.n	800348c <HAL_GPIO_Init+0x21c>
 8003482:	2302      	movs	r3, #2
 8003484:	e002      	b.n	800348c <HAL_GPIO_Init+0x21c>
 8003486:	2301      	movs	r3, #1
 8003488:	e000      	b.n	800348c <HAL_GPIO_Init+0x21c>
 800348a:	2300      	movs	r3, #0
 800348c:	69fa      	ldr	r2, [r7, #28]
 800348e:	f002 0203 	and.w	r2, r2, #3
 8003492:	0092      	lsls	r2, r2, #2
 8003494:	4093      	lsls	r3, r2
 8003496:	69ba      	ldr	r2, [r7, #24]
 8003498:	4313      	orrs	r3, r2
 800349a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800349c:	4935      	ldr	r1, [pc, #212]	@ (8003574 <HAL_GPIO_Init+0x304>)
 800349e:	69fb      	ldr	r3, [r7, #28]
 80034a0:	089b      	lsrs	r3, r3, #2
 80034a2:	3302      	adds	r3, #2
 80034a4:	69ba      	ldr	r2, [r7, #24]
 80034a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80034aa:	4b3a      	ldr	r3, [pc, #232]	@ (8003594 <HAL_GPIO_Init+0x324>)
 80034ac:	689b      	ldr	r3, [r3, #8]
 80034ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034b0:	693b      	ldr	r3, [r7, #16]
 80034b2:	43db      	mvns	r3, r3
 80034b4:	69ba      	ldr	r2, [r7, #24]
 80034b6:	4013      	ands	r3, r2
 80034b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d003      	beq.n	80034ce <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80034c6:	69ba      	ldr	r2, [r7, #24]
 80034c8:	693b      	ldr	r3, [r7, #16]
 80034ca:	4313      	orrs	r3, r2
 80034cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80034ce:	4a31      	ldr	r2, [pc, #196]	@ (8003594 <HAL_GPIO_Init+0x324>)
 80034d0:	69bb      	ldr	r3, [r7, #24]
 80034d2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80034d4:	4b2f      	ldr	r3, [pc, #188]	@ (8003594 <HAL_GPIO_Init+0x324>)
 80034d6:	68db      	ldr	r3, [r3, #12]
 80034d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034da:	693b      	ldr	r3, [r7, #16]
 80034dc:	43db      	mvns	r3, r3
 80034de:	69ba      	ldr	r2, [r7, #24]
 80034e0:	4013      	ands	r3, r2
 80034e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d003      	beq.n	80034f8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80034f0:	69ba      	ldr	r2, [r7, #24]
 80034f2:	693b      	ldr	r3, [r7, #16]
 80034f4:	4313      	orrs	r3, r2
 80034f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80034f8:	4a26      	ldr	r2, [pc, #152]	@ (8003594 <HAL_GPIO_Init+0x324>)
 80034fa:	69bb      	ldr	r3, [r7, #24]
 80034fc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80034fe:	4b25      	ldr	r3, [pc, #148]	@ (8003594 <HAL_GPIO_Init+0x324>)
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003504:	693b      	ldr	r3, [r7, #16]
 8003506:	43db      	mvns	r3, r3
 8003508:	69ba      	ldr	r2, [r7, #24]
 800350a:	4013      	ands	r3, r2
 800350c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003516:	2b00      	cmp	r3, #0
 8003518:	d003      	beq.n	8003522 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800351a:	69ba      	ldr	r2, [r7, #24]
 800351c:	693b      	ldr	r3, [r7, #16]
 800351e:	4313      	orrs	r3, r2
 8003520:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003522:	4a1c      	ldr	r2, [pc, #112]	@ (8003594 <HAL_GPIO_Init+0x324>)
 8003524:	69bb      	ldr	r3, [r7, #24]
 8003526:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003528:	4b1a      	ldr	r3, [pc, #104]	@ (8003594 <HAL_GPIO_Init+0x324>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800352e:	693b      	ldr	r3, [r7, #16]
 8003530:	43db      	mvns	r3, r3
 8003532:	69ba      	ldr	r2, [r7, #24]
 8003534:	4013      	ands	r3, r2
 8003536:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003540:	2b00      	cmp	r3, #0
 8003542:	d003      	beq.n	800354c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003544:	69ba      	ldr	r2, [r7, #24]
 8003546:	693b      	ldr	r3, [r7, #16]
 8003548:	4313      	orrs	r3, r2
 800354a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800354c:	4a11      	ldr	r2, [pc, #68]	@ (8003594 <HAL_GPIO_Init+0x324>)
 800354e:	69bb      	ldr	r3, [r7, #24]
 8003550:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003552:	69fb      	ldr	r3, [r7, #28]
 8003554:	3301      	adds	r3, #1
 8003556:	61fb      	str	r3, [r7, #28]
 8003558:	69fb      	ldr	r3, [r7, #28]
 800355a:	2b0f      	cmp	r3, #15
 800355c:	f67f ae96 	bls.w	800328c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003560:	bf00      	nop
 8003562:	bf00      	nop
 8003564:	3724      	adds	r7, #36	@ 0x24
 8003566:	46bd      	mov	sp, r7
 8003568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356c:	4770      	bx	lr
 800356e:	bf00      	nop
 8003570:	40023800 	.word	0x40023800
 8003574:	40013800 	.word	0x40013800
 8003578:	40020000 	.word	0x40020000
 800357c:	40020400 	.word	0x40020400
 8003580:	40020800 	.word	0x40020800
 8003584:	40020c00 	.word	0x40020c00
 8003588:	40021000 	.word	0x40021000
 800358c:	40021400 	.word	0x40021400
 8003590:	40021800 	.word	0x40021800
 8003594:	40013c00 	.word	0x40013c00

08003598 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003598:	b480      	push	{r7}
 800359a:	b085      	sub	sp, #20
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
 80035a0:	460b      	mov	r3, r1
 80035a2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	691a      	ldr	r2, [r3, #16]
 80035a8:	887b      	ldrh	r3, [r7, #2]
 80035aa:	4013      	ands	r3, r2
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d002      	beq.n	80035b6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80035b0:	2301      	movs	r3, #1
 80035b2:	73fb      	strb	r3, [r7, #15]
 80035b4:	e001      	b.n	80035ba <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80035b6:	2300      	movs	r3, #0
 80035b8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80035ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80035bc:	4618      	mov	r0, r3
 80035be:	3714      	adds	r7, #20
 80035c0:	46bd      	mov	sp, r7
 80035c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c6:	4770      	bx	lr

080035c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80035c8:	b480      	push	{r7}
 80035ca:	b083      	sub	sp, #12
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
 80035d0:	460b      	mov	r3, r1
 80035d2:	807b      	strh	r3, [r7, #2]
 80035d4:	4613      	mov	r3, r2
 80035d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80035d8:	787b      	ldrb	r3, [r7, #1]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d003      	beq.n	80035e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80035de:	887a      	ldrh	r2, [r7, #2]
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80035e4:	e003      	b.n	80035ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80035e6:	887b      	ldrh	r3, [r7, #2]
 80035e8:	041a      	lsls	r2, r3, #16
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	619a      	str	r2, [r3, #24]
}
 80035ee:	bf00      	nop
 80035f0:	370c      	adds	r7, #12
 80035f2:	46bd      	mov	sp, r7
 80035f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f8:	4770      	bx	lr
	...

080035fc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b082      	sub	sp, #8
 8003600:	af00      	add	r7, sp, #0
 8003602:	4603      	mov	r3, r0
 8003604:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003606:	4b08      	ldr	r3, [pc, #32]	@ (8003628 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003608:	695a      	ldr	r2, [r3, #20]
 800360a:	88fb      	ldrh	r3, [r7, #6]
 800360c:	4013      	ands	r3, r2
 800360e:	2b00      	cmp	r3, #0
 8003610:	d006      	beq.n	8003620 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003612:	4a05      	ldr	r2, [pc, #20]	@ (8003628 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003614:	88fb      	ldrh	r3, [r7, #6]
 8003616:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003618:	88fb      	ldrh	r3, [r7, #6]
 800361a:	4618      	mov	r0, r3
 800361c:	f7fe fb56 	bl	8001ccc <HAL_GPIO_EXTI_Callback>
  }
}
 8003620:	bf00      	nop
 8003622:	3708      	adds	r7, #8
 8003624:	46bd      	mov	sp, r7
 8003626:	bd80      	pop	{r7, pc}
 8003628:	40013c00 	.word	0x40013c00

0800362c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b084      	sub	sp, #16
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d101      	bne.n	800363e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800363a:	2301      	movs	r3, #1
 800363c:	e12b      	b.n	8003896 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003644:	b2db      	uxtb	r3, r3
 8003646:	2b00      	cmp	r3, #0
 8003648:	d106      	bne.n	8003658 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2200      	movs	r2, #0
 800364e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003652:	6878      	ldr	r0, [r7, #4]
 8003654:	f7fe fa14 	bl	8001a80 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2224      	movs	r2, #36	@ 0x24
 800365c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	681a      	ldr	r2, [r3, #0]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f022 0201 	bic.w	r2, r2, #1
 800366e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	681a      	ldr	r2, [r3, #0]
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800367e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	681a      	ldr	r2, [r3, #0]
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800368e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003690:	f001 f8b8 	bl	8004804 <HAL_RCC_GetPCLK1Freq>
 8003694:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	4a81      	ldr	r2, [pc, #516]	@ (80038a0 <HAL_I2C_Init+0x274>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d807      	bhi.n	80036b0 <HAL_I2C_Init+0x84>
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	4a80      	ldr	r2, [pc, #512]	@ (80038a4 <HAL_I2C_Init+0x278>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	bf94      	ite	ls
 80036a8:	2301      	movls	r3, #1
 80036aa:	2300      	movhi	r3, #0
 80036ac:	b2db      	uxtb	r3, r3
 80036ae:	e006      	b.n	80036be <HAL_I2C_Init+0x92>
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	4a7d      	ldr	r2, [pc, #500]	@ (80038a8 <HAL_I2C_Init+0x27c>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	bf94      	ite	ls
 80036b8:	2301      	movls	r3, #1
 80036ba:	2300      	movhi	r3, #0
 80036bc:	b2db      	uxtb	r3, r3
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d001      	beq.n	80036c6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80036c2:	2301      	movs	r3, #1
 80036c4:	e0e7      	b.n	8003896 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	4a78      	ldr	r2, [pc, #480]	@ (80038ac <HAL_I2C_Init+0x280>)
 80036ca:	fba2 2303 	umull	r2, r3, r2, r3
 80036ce:	0c9b      	lsrs	r3, r3, #18
 80036d0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	68ba      	ldr	r2, [r7, #8]
 80036e2:	430a      	orrs	r2, r1
 80036e4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	6a1b      	ldr	r3, [r3, #32]
 80036ec:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	4a6a      	ldr	r2, [pc, #424]	@ (80038a0 <HAL_I2C_Init+0x274>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d802      	bhi.n	8003700 <HAL_I2C_Init+0xd4>
 80036fa:	68bb      	ldr	r3, [r7, #8]
 80036fc:	3301      	adds	r3, #1
 80036fe:	e009      	b.n	8003714 <HAL_I2C_Init+0xe8>
 8003700:	68bb      	ldr	r3, [r7, #8]
 8003702:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003706:	fb02 f303 	mul.w	r3, r2, r3
 800370a:	4a69      	ldr	r2, [pc, #420]	@ (80038b0 <HAL_I2C_Init+0x284>)
 800370c:	fba2 2303 	umull	r2, r3, r2, r3
 8003710:	099b      	lsrs	r3, r3, #6
 8003712:	3301      	adds	r3, #1
 8003714:	687a      	ldr	r2, [r7, #4]
 8003716:	6812      	ldr	r2, [r2, #0]
 8003718:	430b      	orrs	r3, r1
 800371a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	69db      	ldr	r3, [r3, #28]
 8003722:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003726:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	495c      	ldr	r1, [pc, #368]	@ (80038a0 <HAL_I2C_Init+0x274>)
 8003730:	428b      	cmp	r3, r1
 8003732:	d819      	bhi.n	8003768 <HAL_I2C_Init+0x13c>
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	1e59      	subs	r1, r3, #1
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	005b      	lsls	r3, r3, #1
 800373e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003742:	1c59      	adds	r1, r3, #1
 8003744:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003748:	400b      	ands	r3, r1
 800374a:	2b00      	cmp	r3, #0
 800374c:	d00a      	beq.n	8003764 <HAL_I2C_Init+0x138>
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	1e59      	subs	r1, r3, #1
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	005b      	lsls	r3, r3, #1
 8003758:	fbb1 f3f3 	udiv	r3, r1, r3
 800375c:	3301      	adds	r3, #1
 800375e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003762:	e051      	b.n	8003808 <HAL_I2C_Init+0x1dc>
 8003764:	2304      	movs	r3, #4
 8003766:	e04f      	b.n	8003808 <HAL_I2C_Init+0x1dc>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	689b      	ldr	r3, [r3, #8]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d111      	bne.n	8003794 <HAL_I2C_Init+0x168>
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	1e58      	subs	r0, r3, #1
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6859      	ldr	r1, [r3, #4]
 8003778:	460b      	mov	r3, r1
 800377a:	005b      	lsls	r3, r3, #1
 800377c:	440b      	add	r3, r1
 800377e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003782:	3301      	adds	r3, #1
 8003784:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003788:	2b00      	cmp	r3, #0
 800378a:	bf0c      	ite	eq
 800378c:	2301      	moveq	r3, #1
 800378e:	2300      	movne	r3, #0
 8003790:	b2db      	uxtb	r3, r3
 8003792:	e012      	b.n	80037ba <HAL_I2C_Init+0x18e>
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	1e58      	subs	r0, r3, #1
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6859      	ldr	r1, [r3, #4]
 800379c:	460b      	mov	r3, r1
 800379e:	009b      	lsls	r3, r3, #2
 80037a0:	440b      	add	r3, r1
 80037a2:	0099      	lsls	r1, r3, #2
 80037a4:	440b      	add	r3, r1
 80037a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80037aa:	3301      	adds	r3, #1
 80037ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	bf0c      	ite	eq
 80037b4:	2301      	moveq	r3, #1
 80037b6:	2300      	movne	r3, #0
 80037b8:	b2db      	uxtb	r3, r3
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d001      	beq.n	80037c2 <HAL_I2C_Init+0x196>
 80037be:	2301      	movs	r3, #1
 80037c0:	e022      	b.n	8003808 <HAL_I2C_Init+0x1dc>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	689b      	ldr	r3, [r3, #8]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d10e      	bne.n	80037e8 <HAL_I2C_Init+0x1bc>
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	1e58      	subs	r0, r3, #1
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6859      	ldr	r1, [r3, #4]
 80037d2:	460b      	mov	r3, r1
 80037d4:	005b      	lsls	r3, r3, #1
 80037d6:	440b      	add	r3, r1
 80037d8:	fbb0 f3f3 	udiv	r3, r0, r3
 80037dc:	3301      	adds	r3, #1
 80037de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037e2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80037e6:	e00f      	b.n	8003808 <HAL_I2C_Init+0x1dc>
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	1e58      	subs	r0, r3, #1
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6859      	ldr	r1, [r3, #4]
 80037f0:	460b      	mov	r3, r1
 80037f2:	009b      	lsls	r3, r3, #2
 80037f4:	440b      	add	r3, r1
 80037f6:	0099      	lsls	r1, r3, #2
 80037f8:	440b      	add	r3, r1
 80037fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80037fe:	3301      	adds	r3, #1
 8003800:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003804:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003808:	6879      	ldr	r1, [r7, #4]
 800380a:	6809      	ldr	r1, [r1, #0]
 800380c:	4313      	orrs	r3, r2
 800380e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	69da      	ldr	r2, [r3, #28]
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6a1b      	ldr	r3, [r3, #32]
 8003822:	431a      	orrs	r2, r3
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	430a      	orrs	r2, r1
 800382a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	689b      	ldr	r3, [r3, #8]
 8003832:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003836:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800383a:	687a      	ldr	r2, [r7, #4]
 800383c:	6911      	ldr	r1, [r2, #16]
 800383e:	687a      	ldr	r2, [r7, #4]
 8003840:	68d2      	ldr	r2, [r2, #12]
 8003842:	4311      	orrs	r1, r2
 8003844:	687a      	ldr	r2, [r7, #4]
 8003846:	6812      	ldr	r2, [r2, #0]
 8003848:	430b      	orrs	r3, r1
 800384a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	68db      	ldr	r3, [r3, #12]
 8003852:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	695a      	ldr	r2, [r3, #20]
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	699b      	ldr	r3, [r3, #24]
 800385e:	431a      	orrs	r2, r3
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	430a      	orrs	r2, r1
 8003866:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	681a      	ldr	r2, [r3, #0]
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f042 0201 	orr.w	r2, r2, #1
 8003876:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2200      	movs	r2, #0
 800387c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2220      	movs	r2, #32
 8003882:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2200      	movs	r2, #0
 800388a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2200      	movs	r2, #0
 8003890:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003894:	2300      	movs	r3, #0
}
 8003896:	4618      	mov	r0, r3
 8003898:	3710      	adds	r7, #16
 800389a:	46bd      	mov	sp, r7
 800389c:	bd80      	pop	{r7, pc}
 800389e:	bf00      	nop
 80038a0:	000186a0 	.word	0x000186a0
 80038a4:	001e847f 	.word	0x001e847f
 80038a8:	003d08ff 	.word	0x003d08ff
 80038ac:	431bde83 	.word	0x431bde83
 80038b0:	10624dd3 	.word	0x10624dd3

080038b4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b088      	sub	sp, #32
 80038b8:	af02      	add	r7, sp, #8
 80038ba:	60f8      	str	r0, [r7, #12]
 80038bc:	607a      	str	r2, [r7, #4]
 80038be:	461a      	mov	r2, r3
 80038c0:	460b      	mov	r3, r1
 80038c2:	817b      	strh	r3, [r7, #10]
 80038c4:	4613      	mov	r3, r2
 80038c6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80038c8:	f7ff fb90 	bl	8002fec <HAL_GetTick>
 80038cc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80038d4:	b2db      	uxtb	r3, r3
 80038d6:	2b20      	cmp	r3, #32
 80038d8:	f040 80e0 	bne.w	8003a9c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80038dc:	697b      	ldr	r3, [r7, #20]
 80038de:	9300      	str	r3, [sp, #0]
 80038e0:	2319      	movs	r3, #25
 80038e2:	2201      	movs	r2, #1
 80038e4:	4970      	ldr	r1, [pc, #448]	@ (8003aa8 <HAL_I2C_Master_Transmit+0x1f4>)
 80038e6:	68f8      	ldr	r0, [r7, #12]
 80038e8:	f000 fc64 	bl	80041b4 <I2C_WaitOnFlagUntilTimeout>
 80038ec:	4603      	mov	r3, r0
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d001      	beq.n	80038f6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80038f2:	2302      	movs	r3, #2
 80038f4:	e0d3      	b.n	8003a9e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80038fc:	2b01      	cmp	r3, #1
 80038fe:	d101      	bne.n	8003904 <HAL_I2C_Master_Transmit+0x50>
 8003900:	2302      	movs	r3, #2
 8003902:	e0cc      	b.n	8003a9e <HAL_I2C_Master_Transmit+0x1ea>
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	2201      	movs	r2, #1
 8003908:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f003 0301 	and.w	r3, r3, #1
 8003916:	2b01      	cmp	r3, #1
 8003918:	d007      	beq.n	800392a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	681a      	ldr	r2, [r3, #0]
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f042 0201 	orr.w	r2, r2, #1
 8003928:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	681a      	ldr	r2, [r3, #0]
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003938:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	2221      	movs	r2, #33	@ 0x21
 800393e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	2210      	movs	r2, #16
 8003946:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	2200      	movs	r2, #0
 800394e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	687a      	ldr	r2, [r7, #4]
 8003954:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	893a      	ldrh	r2, [r7, #8]
 800395a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003960:	b29a      	uxth	r2, r3
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	4a50      	ldr	r2, [pc, #320]	@ (8003aac <HAL_I2C_Master_Transmit+0x1f8>)
 800396a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800396c:	8979      	ldrh	r1, [r7, #10]
 800396e:	697b      	ldr	r3, [r7, #20]
 8003970:	6a3a      	ldr	r2, [r7, #32]
 8003972:	68f8      	ldr	r0, [r7, #12]
 8003974:	f000 face 	bl	8003f14 <I2C_MasterRequestWrite>
 8003978:	4603      	mov	r3, r0
 800397a:	2b00      	cmp	r3, #0
 800397c:	d001      	beq.n	8003982 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800397e:	2301      	movs	r3, #1
 8003980:	e08d      	b.n	8003a9e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003982:	2300      	movs	r3, #0
 8003984:	613b      	str	r3, [r7, #16]
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	695b      	ldr	r3, [r3, #20]
 800398c:	613b      	str	r3, [r7, #16]
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	699b      	ldr	r3, [r3, #24]
 8003994:	613b      	str	r3, [r7, #16]
 8003996:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003998:	e066      	b.n	8003a68 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800399a:	697a      	ldr	r2, [r7, #20]
 800399c:	6a39      	ldr	r1, [r7, #32]
 800399e:	68f8      	ldr	r0, [r7, #12]
 80039a0:	f000 fd22 	bl	80043e8 <I2C_WaitOnTXEFlagUntilTimeout>
 80039a4:	4603      	mov	r3, r0
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d00d      	beq.n	80039c6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039ae:	2b04      	cmp	r3, #4
 80039b0:	d107      	bne.n	80039c2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	681a      	ldr	r2, [r3, #0]
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80039c0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80039c2:	2301      	movs	r3, #1
 80039c4:	e06b      	b.n	8003a9e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039ca:	781a      	ldrb	r2, [r3, #0]
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039d6:	1c5a      	adds	r2, r3, #1
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039e0:	b29b      	uxth	r3, r3
 80039e2:	3b01      	subs	r3, #1
 80039e4:	b29a      	uxth	r2, r3
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039ee:	3b01      	subs	r3, #1
 80039f0:	b29a      	uxth	r2, r3
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	695b      	ldr	r3, [r3, #20]
 80039fc:	f003 0304 	and.w	r3, r3, #4
 8003a00:	2b04      	cmp	r3, #4
 8003a02:	d11b      	bne.n	8003a3c <HAL_I2C_Master_Transmit+0x188>
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d017      	beq.n	8003a3c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a10:	781a      	ldrb	r2, [r3, #0]
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a1c:	1c5a      	adds	r2, r3, #1
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a26:	b29b      	uxth	r3, r3
 8003a28:	3b01      	subs	r3, #1
 8003a2a:	b29a      	uxth	r2, r3
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a34:	3b01      	subs	r3, #1
 8003a36:	b29a      	uxth	r2, r3
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a3c:	697a      	ldr	r2, [r7, #20]
 8003a3e:	6a39      	ldr	r1, [r7, #32]
 8003a40:	68f8      	ldr	r0, [r7, #12]
 8003a42:	f000 fd19 	bl	8004478 <I2C_WaitOnBTFFlagUntilTimeout>
 8003a46:	4603      	mov	r3, r0
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d00d      	beq.n	8003a68 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a50:	2b04      	cmp	r3, #4
 8003a52:	d107      	bne.n	8003a64 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	681a      	ldr	r2, [r3, #0]
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a62:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003a64:	2301      	movs	r3, #1
 8003a66:	e01a      	b.n	8003a9e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d194      	bne.n	800399a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	681a      	ldr	r2, [r3, #0]
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a7e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	2220      	movs	r2, #32
 8003a84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	2200      	movs	r2, #0
 8003a94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003a98:	2300      	movs	r3, #0
 8003a9a:	e000      	b.n	8003a9e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003a9c:	2302      	movs	r3, #2
  }
}
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	3718      	adds	r7, #24
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bd80      	pop	{r7, pc}
 8003aa6:	bf00      	nop
 8003aa8:	00100002 	.word	0x00100002
 8003aac:	ffff0000 	.word	0xffff0000

08003ab0 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b08c      	sub	sp, #48	@ 0x30
 8003ab4:	af02      	add	r7, sp, #8
 8003ab6:	60f8      	str	r0, [r7, #12]
 8003ab8:	607a      	str	r2, [r7, #4]
 8003aba:	461a      	mov	r2, r3
 8003abc:	460b      	mov	r3, r1
 8003abe:	817b      	strh	r3, [r7, #10]
 8003ac0:	4613      	mov	r3, r2
 8003ac2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003ac4:	f7ff fa92 	bl	8002fec <HAL_GetTick>
 8003ac8:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ad0:	b2db      	uxtb	r3, r3
 8003ad2:	2b20      	cmp	r3, #32
 8003ad4:	f040 8217 	bne.w	8003f06 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003ad8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ada:	9300      	str	r3, [sp, #0]
 8003adc:	2319      	movs	r3, #25
 8003ade:	2201      	movs	r2, #1
 8003ae0:	497c      	ldr	r1, [pc, #496]	@ (8003cd4 <HAL_I2C_Master_Receive+0x224>)
 8003ae2:	68f8      	ldr	r0, [r7, #12]
 8003ae4:	f000 fb66 	bl	80041b4 <I2C_WaitOnFlagUntilTimeout>
 8003ae8:	4603      	mov	r3, r0
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d001      	beq.n	8003af2 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8003aee:	2302      	movs	r3, #2
 8003af0:	e20a      	b.n	8003f08 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003af8:	2b01      	cmp	r3, #1
 8003afa:	d101      	bne.n	8003b00 <HAL_I2C_Master_Receive+0x50>
 8003afc:	2302      	movs	r3, #2
 8003afe:	e203      	b.n	8003f08 <HAL_I2C_Master_Receive+0x458>
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	2201      	movs	r2, #1
 8003b04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f003 0301 	and.w	r3, r3, #1
 8003b12:	2b01      	cmp	r3, #1
 8003b14:	d007      	beq.n	8003b26 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	681a      	ldr	r2, [r3, #0]
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f042 0201 	orr.w	r2, r2, #1
 8003b24:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	681a      	ldr	r2, [r3, #0]
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003b34:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	2222      	movs	r2, #34	@ 0x22
 8003b3a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	2210      	movs	r2, #16
 8003b42:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	687a      	ldr	r2, [r7, #4]
 8003b50:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	893a      	ldrh	r2, [r7, #8]
 8003b56:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b5c:	b29a      	uxth	r2, r3
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	4a5c      	ldr	r2, [pc, #368]	@ (8003cd8 <HAL_I2C_Master_Receive+0x228>)
 8003b66:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003b68:	8979      	ldrh	r1, [r7, #10]
 8003b6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b6c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003b6e:	68f8      	ldr	r0, [r7, #12]
 8003b70:	f000 fa52 	bl	8004018 <I2C_MasterRequestRead>
 8003b74:	4603      	mov	r3, r0
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d001      	beq.n	8003b7e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	e1c4      	b.n	8003f08 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d113      	bne.n	8003bae <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b86:	2300      	movs	r3, #0
 8003b88:	623b      	str	r3, [r7, #32]
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	695b      	ldr	r3, [r3, #20]
 8003b90:	623b      	str	r3, [r7, #32]
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	699b      	ldr	r3, [r3, #24]
 8003b98:	623b      	str	r3, [r7, #32]
 8003b9a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	681a      	ldr	r2, [r3, #0]
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003baa:	601a      	str	r2, [r3, #0]
 8003bac:	e198      	b.n	8003ee0 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003bb2:	2b01      	cmp	r3, #1
 8003bb4:	d11b      	bne.n	8003bee <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	681a      	ldr	r2, [r3, #0]
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003bc4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	61fb      	str	r3, [r7, #28]
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	695b      	ldr	r3, [r3, #20]
 8003bd0:	61fb      	str	r3, [r7, #28]
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	699b      	ldr	r3, [r3, #24]
 8003bd8:	61fb      	str	r3, [r7, #28]
 8003bda:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	681a      	ldr	r2, [r3, #0]
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003bea:	601a      	str	r2, [r3, #0]
 8003bec:	e178      	b.n	8003ee0 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003bf2:	2b02      	cmp	r3, #2
 8003bf4:	d11b      	bne.n	8003c2e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	681a      	ldr	r2, [r3, #0]
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003c04:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	681a      	ldr	r2, [r3, #0]
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003c14:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c16:	2300      	movs	r3, #0
 8003c18:	61bb      	str	r3, [r7, #24]
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	695b      	ldr	r3, [r3, #20]
 8003c20:	61bb      	str	r3, [r7, #24]
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	699b      	ldr	r3, [r3, #24]
 8003c28:	61bb      	str	r3, [r7, #24]
 8003c2a:	69bb      	ldr	r3, [r7, #24]
 8003c2c:	e158      	b.n	8003ee0 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	681a      	ldr	r2, [r3, #0]
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003c3c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c3e:	2300      	movs	r3, #0
 8003c40:	617b      	str	r3, [r7, #20]
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	695b      	ldr	r3, [r3, #20]
 8003c48:	617b      	str	r3, [r7, #20]
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	699b      	ldr	r3, [r3, #24]
 8003c50:	617b      	str	r3, [r7, #20]
 8003c52:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003c54:	e144      	b.n	8003ee0 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c5a:	2b03      	cmp	r3, #3
 8003c5c:	f200 80f1 	bhi.w	8003e42 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c64:	2b01      	cmp	r3, #1
 8003c66:	d123      	bne.n	8003cb0 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c68:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c6a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003c6c:	68f8      	ldr	r0, [r7, #12]
 8003c6e:	f000 fc4b 	bl	8004508 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003c72:	4603      	mov	r3, r0
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d001      	beq.n	8003c7c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8003c78:	2301      	movs	r3, #1
 8003c7a:	e145      	b.n	8003f08 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	691a      	ldr	r2, [r3, #16]
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c86:	b2d2      	uxtb	r2, r2
 8003c88:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c8e:	1c5a      	adds	r2, r3, #1
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c98:	3b01      	subs	r3, #1
 8003c9a:	b29a      	uxth	r2, r3
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ca4:	b29b      	uxth	r3, r3
 8003ca6:	3b01      	subs	r3, #1
 8003ca8:	b29a      	uxth	r2, r3
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003cae:	e117      	b.n	8003ee0 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cb4:	2b02      	cmp	r3, #2
 8003cb6:	d14e      	bne.n	8003d56 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003cb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cba:	9300      	str	r3, [sp, #0]
 8003cbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	4906      	ldr	r1, [pc, #24]	@ (8003cdc <HAL_I2C_Master_Receive+0x22c>)
 8003cc2:	68f8      	ldr	r0, [r7, #12]
 8003cc4:	f000 fa76 	bl	80041b4 <I2C_WaitOnFlagUntilTimeout>
 8003cc8:	4603      	mov	r3, r0
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d008      	beq.n	8003ce0 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8003cce:	2301      	movs	r3, #1
 8003cd0:	e11a      	b.n	8003f08 <HAL_I2C_Master_Receive+0x458>
 8003cd2:	bf00      	nop
 8003cd4:	00100002 	.word	0x00100002
 8003cd8:	ffff0000 	.word	0xffff0000
 8003cdc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	681a      	ldr	r2, [r3, #0]
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003cee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	691a      	ldr	r2, [r3, #16]
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cfa:	b2d2      	uxtb	r2, r2
 8003cfc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d02:	1c5a      	adds	r2, r3, #1
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d0c:	3b01      	subs	r3, #1
 8003d0e:	b29a      	uxth	r2, r3
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d18:	b29b      	uxth	r3, r3
 8003d1a:	3b01      	subs	r3, #1
 8003d1c:	b29a      	uxth	r2, r3
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	691a      	ldr	r2, [r3, #16]
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d2c:	b2d2      	uxtb	r2, r2
 8003d2e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d34:	1c5a      	adds	r2, r3, #1
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d3e:	3b01      	subs	r3, #1
 8003d40:	b29a      	uxth	r2, r3
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d4a:	b29b      	uxth	r3, r3
 8003d4c:	3b01      	subs	r3, #1
 8003d4e:	b29a      	uxth	r2, r3
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003d54:	e0c4      	b.n	8003ee0 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003d56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d58:	9300      	str	r3, [sp, #0]
 8003d5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	496c      	ldr	r1, [pc, #432]	@ (8003f10 <HAL_I2C_Master_Receive+0x460>)
 8003d60:	68f8      	ldr	r0, [r7, #12]
 8003d62:	f000 fa27 	bl	80041b4 <I2C_WaitOnFlagUntilTimeout>
 8003d66:	4603      	mov	r3, r0
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d001      	beq.n	8003d70 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	e0cb      	b.n	8003f08 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	681a      	ldr	r2, [r3, #0]
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003d7e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	691a      	ldr	r2, [r3, #16]
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d8a:	b2d2      	uxtb	r2, r2
 8003d8c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d92:	1c5a      	adds	r2, r3, #1
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d9c:	3b01      	subs	r3, #1
 8003d9e:	b29a      	uxth	r2, r3
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003da8:	b29b      	uxth	r3, r3
 8003daa:	3b01      	subs	r3, #1
 8003dac:	b29a      	uxth	r2, r3
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003db2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003db4:	9300      	str	r3, [sp, #0]
 8003db6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003db8:	2200      	movs	r2, #0
 8003dba:	4955      	ldr	r1, [pc, #340]	@ (8003f10 <HAL_I2C_Master_Receive+0x460>)
 8003dbc:	68f8      	ldr	r0, [r7, #12]
 8003dbe:	f000 f9f9 	bl	80041b4 <I2C_WaitOnFlagUntilTimeout>
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d001      	beq.n	8003dcc <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8003dc8:	2301      	movs	r3, #1
 8003dca:	e09d      	b.n	8003f08 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	681a      	ldr	r2, [r3, #0]
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003dda:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	691a      	ldr	r2, [r3, #16]
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003de6:	b2d2      	uxtb	r2, r2
 8003de8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dee:	1c5a      	adds	r2, r3, #1
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003df8:	3b01      	subs	r3, #1
 8003dfa:	b29a      	uxth	r2, r3
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e04:	b29b      	uxth	r3, r3
 8003e06:	3b01      	subs	r3, #1
 8003e08:	b29a      	uxth	r2, r3
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	691a      	ldr	r2, [r3, #16]
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e18:	b2d2      	uxtb	r2, r2
 8003e1a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e20:	1c5a      	adds	r2, r3, #1
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e2a:	3b01      	subs	r3, #1
 8003e2c:	b29a      	uxth	r2, r3
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e36:	b29b      	uxth	r3, r3
 8003e38:	3b01      	subs	r3, #1
 8003e3a:	b29a      	uxth	r2, r3
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003e40:	e04e      	b.n	8003ee0 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e42:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e44:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003e46:	68f8      	ldr	r0, [r7, #12]
 8003e48:	f000 fb5e 	bl	8004508 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003e4c:	4603      	mov	r3, r0
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d001      	beq.n	8003e56 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8003e52:	2301      	movs	r3, #1
 8003e54:	e058      	b.n	8003f08 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	691a      	ldr	r2, [r3, #16]
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e60:	b2d2      	uxtb	r2, r2
 8003e62:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e68:	1c5a      	adds	r2, r3, #1
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e72:	3b01      	subs	r3, #1
 8003e74:	b29a      	uxth	r2, r3
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e7e:	b29b      	uxth	r3, r3
 8003e80:	3b01      	subs	r3, #1
 8003e82:	b29a      	uxth	r2, r3
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	695b      	ldr	r3, [r3, #20]
 8003e8e:	f003 0304 	and.w	r3, r3, #4
 8003e92:	2b04      	cmp	r3, #4
 8003e94:	d124      	bne.n	8003ee0 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e9a:	2b03      	cmp	r3, #3
 8003e9c:	d107      	bne.n	8003eae <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	681a      	ldr	r2, [r3, #0]
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003eac:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	691a      	ldr	r2, [r3, #16]
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eb8:	b2d2      	uxtb	r2, r2
 8003eba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ec0:	1c5a      	adds	r2, r3, #1
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003eca:	3b01      	subs	r3, #1
 8003ecc:	b29a      	uxth	r2, r3
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ed6:	b29b      	uxth	r3, r3
 8003ed8:	3b01      	subs	r3, #1
 8003eda:	b29a      	uxth	r2, r3
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	f47f aeb6 	bne.w	8003c56 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	2220      	movs	r2, #32
 8003eee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	2200      	movs	r2, #0
 8003efe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003f02:	2300      	movs	r3, #0
 8003f04:	e000      	b.n	8003f08 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8003f06:	2302      	movs	r3, #2
  }
}
 8003f08:	4618      	mov	r0, r3
 8003f0a:	3728      	adds	r7, #40	@ 0x28
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	bd80      	pop	{r7, pc}
 8003f10:	00010004 	.word	0x00010004

08003f14 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b088      	sub	sp, #32
 8003f18:	af02      	add	r7, sp, #8
 8003f1a:	60f8      	str	r0, [r7, #12]
 8003f1c:	607a      	str	r2, [r7, #4]
 8003f1e:	603b      	str	r3, [r7, #0]
 8003f20:	460b      	mov	r3, r1
 8003f22:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f28:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003f2a:	697b      	ldr	r3, [r7, #20]
 8003f2c:	2b08      	cmp	r3, #8
 8003f2e:	d006      	beq.n	8003f3e <I2C_MasterRequestWrite+0x2a>
 8003f30:	697b      	ldr	r3, [r7, #20]
 8003f32:	2b01      	cmp	r3, #1
 8003f34:	d003      	beq.n	8003f3e <I2C_MasterRequestWrite+0x2a>
 8003f36:	697b      	ldr	r3, [r7, #20]
 8003f38:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003f3c:	d108      	bne.n	8003f50 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	681a      	ldr	r2, [r3, #0]
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003f4c:	601a      	str	r2, [r3, #0]
 8003f4e:	e00b      	b.n	8003f68 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f54:	2b12      	cmp	r3, #18
 8003f56:	d107      	bne.n	8003f68 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	681a      	ldr	r2, [r3, #0]
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003f66:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	9300      	str	r3, [sp, #0]
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2200      	movs	r2, #0
 8003f70:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003f74:	68f8      	ldr	r0, [r7, #12]
 8003f76:	f000 f91d 	bl	80041b4 <I2C_WaitOnFlagUntilTimeout>
 8003f7a:	4603      	mov	r3, r0
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d00d      	beq.n	8003f9c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f8a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003f8e:	d103      	bne.n	8003f98 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003f96:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003f98:	2303      	movs	r3, #3
 8003f9a:	e035      	b.n	8004008 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	691b      	ldr	r3, [r3, #16]
 8003fa0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003fa4:	d108      	bne.n	8003fb8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003fa6:	897b      	ldrh	r3, [r7, #10]
 8003fa8:	b2db      	uxtb	r3, r3
 8003faa:	461a      	mov	r2, r3
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003fb4:	611a      	str	r2, [r3, #16]
 8003fb6:	e01b      	b.n	8003ff0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003fb8:	897b      	ldrh	r3, [r7, #10]
 8003fba:	11db      	asrs	r3, r3, #7
 8003fbc:	b2db      	uxtb	r3, r3
 8003fbe:	f003 0306 	and.w	r3, r3, #6
 8003fc2:	b2db      	uxtb	r3, r3
 8003fc4:	f063 030f 	orn	r3, r3, #15
 8003fc8:	b2da      	uxtb	r2, r3
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	687a      	ldr	r2, [r7, #4]
 8003fd4:	490e      	ldr	r1, [pc, #56]	@ (8004010 <I2C_MasterRequestWrite+0xfc>)
 8003fd6:	68f8      	ldr	r0, [r7, #12]
 8003fd8:	f000 f966 	bl	80042a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003fdc:	4603      	mov	r3, r0
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d001      	beq.n	8003fe6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	e010      	b.n	8004008 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003fe6:	897b      	ldrh	r3, [r7, #10]
 8003fe8:	b2da      	uxtb	r2, r3
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	687a      	ldr	r2, [r7, #4]
 8003ff4:	4907      	ldr	r1, [pc, #28]	@ (8004014 <I2C_MasterRequestWrite+0x100>)
 8003ff6:	68f8      	ldr	r0, [r7, #12]
 8003ff8:	f000 f956 	bl	80042a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d001      	beq.n	8004006 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004002:	2301      	movs	r3, #1
 8004004:	e000      	b.n	8004008 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004006:	2300      	movs	r3, #0
}
 8004008:	4618      	mov	r0, r3
 800400a:	3718      	adds	r7, #24
 800400c:	46bd      	mov	sp, r7
 800400e:	bd80      	pop	{r7, pc}
 8004010:	00010008 	.word	0x00010008
 8004014:	00010002 	.word	0x00010002

08004018 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b088      	sub	sp, #32
 800401c:	af02      	add	r7, sp, #8
 800401e:	60f8      	str	r0, [r7, #12]
 8004020:	607a      	str	r2, [r7, #4]
 8004022:	603b      	str	r3, [r7, #0]
 8004024:	460b      	mov	r3, r1
 8004026:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800402c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	681a      	ldr	r2, [r3, #0]
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800403c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800403e:	697b      	ldr	r3, [r7, #20]
 8004040:	2b08      	cmp	r3, #8
 8004042:	d006      	beq.n	8004052 <I2C_MasterRequestRead+0x3a>
 8004044:	697b      	ldr	r3, [r7, #20]
 8004046:	2b01      	cmp	r3, #1
 8004048:	d003      	beq.n	8004052 <I2C_MasterRequestRead+0x3a>
 800404a:	697b      	ldr	r3, [r7, #20]
 800404c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004050:	d108      	bne.n	8004064 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	681a      	ldr	r2, [r3, #0]
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004060:	601a      	str	r2, [r3, #0]
 8004062:	e00b      	b.n	800407c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004068:	2b11      	cmp	r3, #17
 800406a:	d107      	bne.n	800407c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	681a      	ldr	r2, [r3, #0]
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800407a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	9300      	str	r3, [sp, #0]
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2200      	movs	r2, #0
 8004084:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004088:	68f8      	ldr	r0, [r7, #12]
 800408a:	f000 f893 	bl	80041b4 <I2C_WaitOnFlagUntilTimeout>
 800408e:	4603      	mov	r3, r0
 8004090:	2b00      	cmp	r3, #0
 8004092:	d00d      	beq.n	80040b0 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800409e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80040a2:	d103      	bne.n	80040ac <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80040aa:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80040ac:	2303      	movs	r3, #3
 80040ae:	e079      	b.n	80041a4 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	691b      	ldr	r3, [r3, #16]
 80040b4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80040b8:	d108      	bne.n	80040cc <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80040ba:	897b      	ldrh	r3, [r7, #10]
 80040bc:	b2db      	uxtb	r3, r3
 80040be:	f043 0301 	orr.w	r3, r3, #1
 80040c2:	b2da      	uxtb	r2, r3
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	611a      	str	r2, [r3, #16]
 80040ca:	e05f      	b.n	800418c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80040cc:	897b      	ldrh	r3, [r7, #10]
 80040ce:	11db      	asrs	r3, r3, #7
 80040d0:	b2db      	uxtb	r3, r3
 80040d2:	f003 0306 	and.w	r3, r3, #6
 80040d6:	b2db      	uxtb	r3, r3
 80040d8:	f063 030f 	orn	r3, r3, #15
 80040dc:	b2da      	uxtb	r2, r3
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	687a      	ldr	r2, [r7, #4]
 80040e8:	4930      	ldr	r1, [pc, #192]	@ (80041ac <I2C_MasterRequestRead+0x194>)
 80040ea:	68f8      	ldr	r0, [r7, #12]
 80040ec:	f000 f8dc 	bl	80042a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80040f0:	4603      	mov	r3, r0
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d001      	beq.n	80040fa <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80040f6:	2301      	movs	r3, #1
 80040f8:	e054      	b.n	80041a4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80040fa:	897b      	ldrh	r3, [r7, #10]
 80040fc:	b2da      	uxtb	r2, r3
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	687a      	ldr	r2, [r7, #4]
 8004108:	4929      	ldr	r1, [pc, #164]	@ (80041b0 <I2C_MasterRequestRead+0x198>)
 800410a:	68f8      	ldr	r0, [r7, #12]
 800410c:	f000 f8cc 	bl	80042a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004110:	4603      	mov	r3, r0
 8004112:	2b00      	cmp	r3, #0
 8004114:	d001      	beq.n	800411a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8004116:	2301      	movs	r3, #1
 8004118:	e044      	b.n	80041a4 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800411a:	2300      	movs	r3, #0
 800411c:	613b      	str	r3, [r7, #16]
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	695b      	ldr	r3, [r3, #20]
 8004124:	613b      	str	r3, [r7, #16]
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	699b      	ldr	r3, [r3, #24]
 800412c:	613b      	str	r3, [r7, #16]
 800412e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	681a      	ldr	r2, [r3, #0]
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800413e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	9300      	str	r3, [sp, #0]
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2200      	movs	r2, #0
 8004148:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800414c:	68f8      	ldr	r0, [r7, #12]
 800414e:	f000 f831 	bl	80041b4 <I2C_WaitOnFlagUntilTimeout>
 8004152:	4603      	mov	r3, r0
 8004154:	2b00      	cmp	r3, #0
 8004156:	d00d      	beq.n	8004174 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004162:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004166:	d103      	bne.n	8004170 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800416e:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8004170:	2303      	movs	r3, #3
 8004172:	e017      	b.n	80041a4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004174:	897b      	ldrh	r3, [r7, #10]
 8004176:	11db      	asrs	r3, r3, #7
 8004178:	b2db      	uxtb	r3, r3
 800417a:	f003 0306 	and.w	r3, r3, #6
 800417e:	b2db      	uxtb	r3, r3
 8004180:	f063 030e 	orn	r3, r3, #14
 8004184:	b2da      	uxtb	r2, r3
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	687a      	ldr	r2, [r7, #4]
 8004190:	4907      	ldr	r1, [pc, #28]	@ (80041b0 <I2C_MasterRequestRead+0x198>)
 8004192:	68f8      	ldr	r0, [r7, #12]
 8004194:	f000 f888 	bl	80042a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004198:	4603      	mov	r3, r0
 800419a:	2b00      	cmp	r3, #0
 800419c:	d001      	beq.n	80041a2 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800419e:	2301      	movs	r3, #1
 80041a0:	e000      	b.n	80041a4 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80041a2:	2300      	movs	r3, #0
}
 80041a4:	4618      	mov	r0, r3
 80041a6:	3718      	adds	r7, #24
 80041a8:	46bd      	mov	sp, r7
 80041aa:	bd80      	pop	{r7, pc}
 80041ac:	00010008 	.word	0x00010008
 80041b0:	00010002 	.word	0x00010002

080041b4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b084      	sub	sp, #16
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	60f8      	str	r0, [r7, #12]
 80041bc:	60b9      	str	r1, [r7, #8]
 80041be:	603b      	str	r3, [r7, #0]
 80041c0:	4613      	mov	r3, r2
 80041c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80041c4:	e048      	b.n	8004258 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041cc:	d044      	beq.n	8004258 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041ce:	f7fe ff0d 	bl	8002fec <HAL_GetTick>
 80041d2:	4602      	mov	r2, r0
 80041d4:	69bb      	ldr	r3, [r7, #24]
 80041d6:	1ad3      	subs	r3, r2, r3
 80041d8:	683a      	ldr	r2, [r7, #0]
 80041da:	429a      	cmp	r2, r3
 80041dc:	d302      	bcc.n	80041e4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d139      	bne.n	8004258 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80041e4:	68bb      	ldr	r3, [r7, #8]
 80041e6:	0c1b      	lsrs	r3, r3, #16
 80041e8:	b2db      	uxtb	r3, r3
 80041ea:	2b01      	cmp	r3, #1
 80041ec:	d10d      	bne.n	800420a <I2C_WaitOnFlagUntilTimeout+0x56>
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	695b      	ldr	r3, [r3, #20]
 80041f4:	43da      	mvns	r2, r3
 80041f6:	68bb      	ldr	r3, [r7, #8]
 80041f8:	4013      	ands	r3, r2
 80041fa:	b29b      	uxth	r3, r3
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	bf0c      	ite	eq
 8004200:	2301      	moveq	r3, #1
 8004202:	2300      	movne	r3, #0
 8004204:	b2db      	uxtb	r3, r3
 8004206:	461a      	mov	r2, r3
 8004208:	e00c      	b.n	8004224 <I2C_WaitOnFlagUntilTimeout+0x70>
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	699b      	ldr	r3, [r3, #24]
 8004210:	43da      	mvns	r2, r3
 8004212:	68bb      	ldr	r3, [r7, #8]
 8004214:	4013      	ands	r3, r2
 8004216:	b29b      	uxth	r3, r3
 8004218:	2b00      	cmp	r3, #0
 800421a:	bf0c      	ite	eq
 800421c:	2301      	moveq	r3, #1
 800421e:	2300      	movne	r3, #0
 8004220:	b2db      	uxtb	r3, r3
 8004222:	461a      	mov	r2, r3
 8004224:	79fb      	ldrb	r3, [r7, #7]
 8004226:	429a      	cmp	r2, r3
 8004228:	d116      	bne.n	8004258 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	2200      	movs	r2, #0
 800422e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	2220      	movs	r2, #32
 8004234:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	2200      	movs	r2, #0
 800423c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004244:	f043 0220 	orr.w	r2, r3, #32
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	2200      	movs	r2, #0
 8004250:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004254:	2301      	movs	r3, #1
 8004256:	e023      	b.n	80042a0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004258:	68bb      	ldr	r3, [r7, #8]
 800425a:	0c1b      	lsrs	r3, r3, #16
 800425c:	b2db      	uxtb	r3, r3
 800425e:	2b01      	cmp	r3, #1
 8004260:	d10d      	bne.n	800427e <I2C_WaitOnFlagUntilTimeout+0xca>
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	695b      	ldr	r3, [r3, #20]
 8004268:	43da      	mvns	r2, r3
 800426a:	68bb      	ldr	r3, [r7, #8]
 800426c:	4013      	ands	r3, r2
 800426e:	b29b      	uxth	r3, r3
 8004270:	2b00      	cmp	r3, #0
 8004272:	bf0c      	ite	eq
 8004274:	2301      	moveq	r3, #1
 8004276:	2300      	movne	r3, #0
 8004278:	b2db      	uxtb	r3, r3
 800427a:	461a      	mov	r2, r3
 800427c:	e00c      	b.n	8004298 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	699b      	ldr	r3, [r3, #24]
 8004284:	43da      	mvns	r2, r3
 8004286:	68bb      	ldr	r3, [r7, #8]
 8004288:	4013      	ands	r3, r2
 800428a:	b29b      	uxth	r3, r3
 800428c:	2b00      	cmp	r3, #0
 800428e:	bf0c      	ite	eq
 8004290:	2301      	moveq	r3, #1
 8004292:	2300      	movne	r3, #0
 8004294:	b2db      	uxtb	r3, r3
 8004296:	461a      	mov	r2, r3
 8004298:	79fb      	ldrb	r3, [r7, #7]
 800429a:	429a      	cmp	r2, r3
 800429c:	d093      	beq.n	80041c6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800429e:	2300      	movs	r3, #0
}
 80042a0:	4618      	mov	r0, r3
 80042a2:	3710      	adds	r7, #16
 80042a4:	46bd      	mov	sp, r7
 80042a6:	bd80      	pop	{r7, pc}

080042a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b084      	sub	sp, #16
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	60f8      	str	r0, [r7, #12]
 80042b0:	60b9      	str	r1, [r7, #8]
 80042b2:	607a      	str	r2, [r7, #4]
 80042b4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80042b6:	e071      	b.n	800439c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	695b      	ldr	r3, [r3, #20]
 80042be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80042c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80042c6:	d123      	bne.n	8004310 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	681a      	ldr	r2, [r3, #0]
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80042d6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80042e0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	2200      	movs	r2, #0
 80042e6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	2220      	movs	r2, #32
 80042ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	2200      	movs	r2, #0
 80042f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042fc:	f043 0204 	orr.w	r2, r3, #4
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	2200      	movs	r2, #0
 8004308:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800430c:	2301      	movs	r3, #1
 800430e:	e067      	b.n	80043e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004316:	d041      	beq.n	800439c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004318:	f7fe fe68 	bl	8002fec <HAL_GetTick>
 800431c:	4602      	mov	r2, r0
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	1ad3      	subs	r3, r2, r3
 8004322:	687a      	ldr	r2, [r7, #4]
 8004324:	429a      	cmp	r2, r3
 8004326:	d302      	bcc.n	800432e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d136      	bne.n	800439c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800432e:	68bb      	ldr	r3, [r7, #8]
 8004330:	0c1b      	lsrs	r3, r3, #16
 8004332:	b2db      	uxtb	r3, r3
 8004334:	2b01      	cmp	r3, #1
 8004336:	d10c      	bne.n	8004352 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	695b      	ldr	r3, [r3, #20]
 800433e:	43da      	mvns	r2, r3
 8004340:	68bb      	ldr	r3, [r7, #8]
 8004342:	4013      	ands	r3, r2
 8004344:	b29b      	uxth	r3, r3
 8004346:	2b00      	cmp	r3, #0
 8004348:	bf14      	ite	ne
 800434a:	2301      	movne	r3, #1
 800434c:	2300      	moveq	r3, #0
 800434e:	b2db      	uxtb	r3, r3
 8004350:	e00b      	b.n	800436a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	699b      	ldr	r3, [r3, #24]
 8004358:	43da      	mvns	r2, r3
 800435a:	68bb      	ldr	r3, [r7, #8]
 800435c:	4013      	ands	r3, r2
 800435e:	b29b      	uxth	r3, r3
 8004360:	2b00      	cmp	r3, #0
 8004362:	bf14      	ite	ne
 8004364:	2301      	movne	r3, #1
 8004366:	2300      	moveq	r3, #0
 8004368:	b2db      	uxtb	r3, r3
 800436a:	2b00      	cmp	r3, #0
 800436c:	d016      	beq.n	800439c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	2200      	movs	r2, #0
 8004372:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	2220      	movs	r2, #32
 8004378:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	2200      	movs	r2, #0
 8004380:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004388:	f043 0220 	orr.w	r2, r3, #32
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	2200      	movs	r2, #0
 8004394:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004398:	2301      	movs	r3, #1
 800439a:	e021      	b.n	80043e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800439c:	68bb      	ldr	r3, [r7, #8]
 800439e:	0c1b      	lsrs	r3, r3, #16
 80043a0:	b2db      	uxtb	r3, r3
 80043a2:	2b01      	cmp	r3, #1
 80043a4:	d10c      	bne.n	80043c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	695b      	ldr	r3, [r3, #20]
 80043ac:	43da      	mvns	r2, r3
 80043ae:	68bb      	ldr	r3, [r7, #8]
 80043b0:	4013      	ands	r3, r2
 80043b2:	b29b      	uxth	r3, r3
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	bf14      	ite	ne
 80043b8:	2301      	movne	r3, #1
 80043ba:	2300      	moveq	r3, #0
 80043bc:	b2db      	uxtb	r3, r3
 80043be:	e00b      	b.n	80043d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	699b      	ldr	r3, [r3, #24]
 80043c6:	43da      	mvns	r2, r3
 80043c8:	68bb      	ldr	r3, [r7, #8]
 80043ca:	4013      	ands	r3, r2
 80043cc:	b29b      	uxth	r3, r3
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	bf14      	ite	ne
 80043d2:	2301      	movne	r3, #1
 80043d4:	2300      	moveq	r3, #0
 80043d6:	b2db      	uxtb	r3, r3
 80043d8:	2b00      	cmp	r3, #0
 80043da:	f47f af6d 	bne.w	80042b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80043de:	2300      	movs	r3, #0
}
 80043e0:	4618      	mov	r0, r3
 80043e2:	3710      	adds	r7, #16
 80043e4:	46bd      	mov	sp, r7
 80043e6:	bd80      	pop	{r7, pc}

080043e8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b084      	sub	sp, #16
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	60f8      	str	r0, [r7, #12]
 80043f0:	60b9      	str	r1, [r7, #8]
 80043f2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80043f4:	e034      	b.n	8004460 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80043f6:	68f8      	ldr	r0, [r7, #12]
 80043f8:	f000 f8e3 	bl	80045c2 <I2C_IsAcknowledgeFailed>
 80043fc:	4603      	mov	r3, r0
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d001      	beq.n	8004406 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004402:	2301      	movs	r3, #1
 8004404:	e034      	b.n	8004470 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004406:	68bb      	ldr	r3, [r7, #8]
 8004408:	f1b3 3fff 	cmp.w	r3, #4294967295
 800440c:	d028      	beq.n	8004460 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800440e:	f7fe fded 	bl	8002fec <HAL_GetTick>
 8004412:	4602      	mov	r2, r0
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	1ad3      	subs	r3, r2, r3
 8004418:	68ba      	ldr	r2, [r7, #8]
 800441a:	429a      	cmp	r2, r3
 800441c:	d302      	bcc.n	8004424 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800441e:	68bb      	ldr	r3, [r7, #8]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d11d      	bne.n	8004460 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	695b      	ldr	r3, [r3, #20]
 800442a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800442e:	2b80      	cmp	r3, #128	@ 0x80
 8004430:	d016      	beq.n	8004460 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	2200      	movs	r2, #0
 8004436:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	2220      	movs	r2, #32
 800443c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	2200      	movs	r2, #0
 8004444:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800444c:	f043 0220 	orr.w	r2, r3, #32
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	2200      	movs	r2, #0
 8004458:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800445c:	2301      	movs	r3, #1
 800445e:	e007      	b.n	8004470 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	695b      	ldr	r3, [r3, #20]
 8004466:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800446a:	2b80      	cmp	r3, #128	@ 0x80
 800446c:	d1c3      	bne.n	80043f6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800446e:	2300      	movs	r3, #0
}
 8004470:	4618      	mov	r0, r3
 8004472:	3710      	adds	r7, #16
 8004474:	46bd      	mov	sp, r7
 8004476:	bd80      	pop	{r7, pc}

08004478 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004478:	b580      	push	{r7, lr}
 800447a:	b084      	sub	sp, #16
 800447c:	af00      	add	r7, sp, #0
 800447e:	60f8      	str	r0, [r7, #12]
 8004480:	60b9      	str	r1, [r7, #8]
 8004482:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004484:	e034      	b.n	80044f0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004486:	68f8      	ldr	r0, [r7, #12]
 8004488:	f000 f89b 	bl	80045c2 <I2C_IsAcknowledgeFailed>
 800448c:	4603      	mov	r3, r0
 800448e:	2b00      	cmp	r3, #0
 8004490:	d001      	beq.n	8004496 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004492:	2301      	movs	r3, #1
 8004494:	e034      	b.n	8004500 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004496:	68bb      	ldr	r3, [r7, #8]
 8004498:	f1b3 3fff 	cmp.w	r3, #4294967295
 800449c:	d028      	beq.n	80044f0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800449e:	f7fe fda5 	bl	8002fec <HAL_GetTick>
 80044a2:	4602      	mov	r2, r0
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	1ad3      	subs	r3, r2, r3
 80044a8:	68ba      	ldr	r2, [r7, #8]
 80044aa:	429a      	cmp	r2, r3
 80044ac:	d302      	bcc.n	80044b4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80044ae:	68bb      	ldr	r3, [r7, #8]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d11d      	bne.n	80044f0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	695b      	ldr	r3, [r3, #20]
 80044ba:	f003 0304 	and.w	r3, r3, #4
 80044be:	2b04      	cmp	r3, #4
 80044c0:	d016      	beq.n	80044f0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	2200      	movs	r2, #0
 80044c6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	2220      	movs	r2, #32
 80044cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	2200      	movs	r2, #0
 80044d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044dc:	f043 0220 	orr.w	r2, r3, #32
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	2200      	movs	r2, #0
 80044e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80044ec:	2301      	movs	r3, #1
 80044ee:	e007      	b.n	8004500 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	695b      	ldr	r3, [r3, #20]
 80044f6:	f003 0304 	and.w	r3, r3, #4
 80044fa:	2b04      	cmp	r3, #4
 80044fc:	d1c3      	bne.n	8004486 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80044fe:	2300      	movs	r3, #0
}
 8004500:	4618      	mov	r0, r3
 8004502:	3710      	adds	r7, #16
 8004504:	46bd      	mov	sp, r7
 8004506:	bd80      	pop	{r7, pc}

08004508 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b084      	sub	sp, #16
 800450c:	af00      	add	r7, sp, #0
 800450e:	60f8      	str	r0, [r7, #12]
 8004510:	60b9      	str	r1, [r7, #8]
 8004512:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004514:	e049      	b.n	80045aa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	695b      	ldr	r3, [r3, #20]
 800451c:	f003 0310 	and.w	r3, r3, #16
 8004520:	2b10      	cmp	r3, #16
 8004522:	d119      	bne.n	8004558 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f06f 0210 	mvn.w	r2, #16
 800452c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	2200      	movs	r2, #0
 8004532:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	2220      	movs	r2, #32
 8004538:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	2200      	movs	r2, #0
 8004540:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	2200      	movs	r2, #0
 8004550:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004554:	2301      	movs	r3, #1
 8004556:	e030      	b.n	80045ba <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004558:	f7fe fd48 	bl	8002fec <HAL_GetTick>
 800455c:	4602      	mov	r2, r0
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	1ad3      	subs	r3, r2, r3
 8004562:	68ba      	ldr	r2, [r7, #8]
 8004564:	429a      	cmp	r2, r3
 8004566:	d302      	bcc.n	800456e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004568:	68bb      	ldr	r3, [r7, #8]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d11d      	bne.n	80045aa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	695b      	ldr	r3, [r3, #20]
 8004574:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004578:	2b40      	cmp	r3, #64	@ 0x40
 800457a:	d016      	beq.n	80045aa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	2200      	movs	r2, #0
 8004580:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	2220      	movs	r2, #32
 8004586:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	2200      	movs	r2, #0
 800458e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004596:	f043 0220 	orr.w	r2, r3, #32
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	2200      	movs	r2, #0
 80045a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80045a6:	2301      	movs	r3, #1
 80045a8:	e007      	b.n	80045ba <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	695b      	ldr	r3, [r3, #20]
 80045b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045b4:	2b40      	cmp	r3, #64	@ 0x40
 80045b6:	d1ae      	bne.n	8004516 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80045b8:	2300      	movs	r3, #0
}
 80045ba:	4618      	mov	r0, r3
 80045bc:	3710      	adds	r7, #16
 80045be:	46bd      	mov	sp, r7
 80045c0:	bd80      	pop	{r7, pc}

080045c2 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80045c2:	b480      	push	{r7}
 80045c4:	b083      	sub	sp, #12
 80045c6:	af00      	add	r7, sp, #0
 80045c8:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	695b      	ldr	r3, [r3, #20]
 80045d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80045d4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80045d8:	d11b      	bne.n	8004612 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80045e2:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2200      	movs	r2, #0
 80045e8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2220      	movs	r2, #32
 80045ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2200      	movs	r2, #0
 80045f6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045fe:	f043 0204 	orr.w	r2, r3, #4
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2200      	movs	r2, #0
 800460a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800460e:	2301      	movs	r3, #1
 8004610:	e000      	b.n	8004614 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004612:	2300      	movs	r3, #0
}
 8004614:	4618      	mov	r0, r3
 8004616:	370c      	adds	r7, #12
 8004618:	46bd      	mov	sp, r7
 800461a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461e:	4770      	bx	lr

08004620 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b084      	sub	sp, #16
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
 8004628:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d101      	bne.n	8004634 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004630:	2301      	movs	r3, #1
 8004632:	e0cc      	b.n	80047ce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004634:	4b68      	ldr	r3, [pc, #416]	@ (80047d8 <HAL_RCC_ClockConfig+0x1b8>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f003 030f 	and.w	r3, r3, #15
 800463c:	683a      	ldr	r2, [r7, #0]
 800463e:	429a      	cmp	r2, r3
 8004640:	d90c      	bls.n	800465c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004642:	4b65      	ldr	r3, [pc, #404]	@ (80047d8 <HAL_RCC_ClockConfig+0x1b8>)
 8004644:	683a      	ldr	r2, [r7, #0]
 8004646:	b2d2      	uxtb	r2, r2
 8004648:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800464a:	4b63      	ldr	r3, [pc, #396]	@ (80047d8 <HAL_RCC_ClockConfig+0x1b8>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f003 030f 	and.w	r3, r3, #15
 8004652:	683a      	ldr	r2, [r7, #0]
 8004654:	429a      	cmp	r2, r3
 8004656:	d001      	beq.n	800465c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004658:	2301      	movs	r3, #1
 800465a:	e0b8      	b.n	80047ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f003 0302 	and.w	r3, r3, #2
 8004664:	2b00      	cmp	r3, #0
 8004666:	d020      	beq.n	80046aa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f003 0304 	and.w	r3, r3, #4
 8004670:	2b00      	cmp	r3, #0
 8004672:	d005      	beq.n	8004680 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004674:	4b59      	ldr	r3, [pc, #356]	@ (80047dc <HAL_RCC_ClockConfig+0x1bc>)
 8004676:	689b      	ldr	r3, [r3, #8]
 8004678:	4a58      	ldr	r2, [pc, #352]	@ (80047dc <HAL_RCC_ClockConfig+0x1bc>)
 800467a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800467e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f003 0308 	and.w	r3, r3, #8
 8004688:	2b00      	cmp	r3, #0
 800468a:	d005      	beq.n	8004698 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800468c:	4b53      	ldr	r3, [pc, #332]	@ (80047dc <HAL_RCC_ClockConfig+0x1bc>)
 800468e:	689b      	ldr	r3, [r3, #8]
 8004690:	4a52      	ldr	r2, [pc, #328]	@ (80047dc <HAL_RCC_ClockConfig+0x1bc>)
 8004692:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004696:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004698:	4b50      	ldr	r3, [pc, #320]	@ (80047dc <HAL_RCC_ClockConfig+0x1bc>)
 800469a:	689b      	ldr	r3, [r3, #8]
 800469c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	689b      	ldr	r3, [r3, #8]
 80046a4:	494d      	ldr	r1, [pc, #308]	@ (80047dc <HAL_RCC_ClockConfig+0x1bc>)
 80046a6:	4313      	orrs	r3, r2
 80046a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f003 0301 	and.w	r3, r3, #1
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d044      	beq.n	8004740 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	685b      	ldr	r3, [r3, #4]
 80046ba:	2b01      	cmp	r3, #1
 80046bc:	d107      	bne.n	80046ce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046be:	4b47      	ldr	r3, [pc, #284]	@ (80047dc <HAL_RCC_ClockConfig+0x1bc>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d119      	bne.n	80046fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80046ca:	2301      	movs	r3, #1
 80046cc:	e07f      	b.n	80047ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	685b      	ldr	r3, [r3, #4]
 80046d2:	2b02      	cmp	r3, #2
 80046d4:	d003      	beq.n	80046de <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80046da:	2b03      	cmp	r3, #3
 80046dc:	d107      	bne.n	80046ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046de:	4b3f      	ldr	r3, [pc, #252]	@ (80047dc <HAL_RCC_ClockConfig+0x1bc>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d109      	bne.n	80046fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80046ea:	2301      	movs	r3, #1
 80046ec:	e06f      	b.n	80047ce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046ee:	4b3b      	ldr	r3, [pc, #236]	@ (80047dc <HAL_RCC_ClockConfig+0x1bc>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f003 0302 	and.w	r3, r3, #2
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d101      	bne.n	80046fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80046fa:	2301      	movs	r3, #1
 80046fc:	e067      	b.n	80047ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80046fe:	4b37      	ldr	r3, [pc, #220]	@ (80047dc <HAL_RCC_ClockConfig+0x1bc>)
 8004700:	689b      	ldr	r3, [r3, #8]
 8004702:	f023 0203 	bic.w	r2, r3, #3
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	685b      	ldr	r3, [r3, #4]
 800470a:	4934      	ldr	r1, [pc, #208]	@ (80047dc <HAL_RCC_ClockConfig+0x1bc>)
 800470c:	4313      	orrs	r3, r2
 800470e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004710:	f7fe fc6c 	bl	8002fec <HAL_GetTick>
 8004714:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004716:	e00a      	b.n	800472e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004718:	f7fe fc68 	bl	8002fec <HAL_GetTick>
 800471c:	4602      	mov	r2, r0
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	1ad3      	subs	r3, r2, r3
 8004722:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004726:	4293      	cmp	r3, r2
 8004728:	d901      	bls.n	800472e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800472a:	2303      	movs	r3, #3
 800472c:	e04f      	b.n	80047ce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800472e:	4b2b      	ldr	r3, [pc, #172]	@ (80047dc <HAL_RCC_ClockConfig+0x1bc>)
 8004730:	689b      	ldr	r3, [r3, #8]
 8004732:	f003 020c 	and.w	r2, r3, #12
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	685b      	ldr	r3, [r3, #4]
 800473a:	009b      	lsls	r3, r3, #2
 800473c:	429a      	cmp	r2, r3
 800473e:	d1eb      	bne.n	8004718 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004740:	4b25      	ldr	r3, [pc, #148]	@ (80047d8 <HAL_RCC_ClockConfig+0x1b8>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f003 030f 	and.w	r3, r3, #15
 8004748:	683a      	ldr	r2, [r7, #0]
 800474a:	429a      	cmp	r2, r3
 800474c:	d20c      	bcs.n	8004768 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800474e:	4b22      	ldr	r3, [pc, #136]	@ (80047d8 <HAL_RCC_ClockConfig+0x1b8>)
 8004750:	683a      	ldr	r2, [r7, #0]
 8004752:	b2d2      	uxtb	r2, r2
 8004754:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004756:	4b20      	ldr	r3, [pc, #128]	@ (80047d8 <HAL_RCC_ClockConfig+0x1b8>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f003 030f 	and.w	r3, r3, #15
 800475e:	683a      	ldr	r2, [r7, #0]
 8004760:	429a      	cmp	r2, r3
 8004762:	d001      	beq.n	8004768 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004764:	2301      	movs	r3, #1
 8004766:	e032      	b.n	80047ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f003 0304 	and.w	r3, r3, #4
 8004770:	2b00      	cmp	r3, #0
 8004772:	d008      	beq.n	8004786 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004774:	4b19      	ldr	r3, [pc, #100]	@ (80047dc <HAL_RCC_ClockConfig+0x1bc>)
 8004776:	689b      	ldr	r3, [r3, #8]
 8004778:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	68db      	ldr	r3, [r3, #12]
 8004780:	4916      	ldr	r1, [pc, #88]	@ (80047dc <HAL_RCC_ClockConfig+0x1bc>)
 8004782:	4313      	orrs	r3, r2
 8004784:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f003 0308 	and.w	r3, r3, #8
 800478e:	2b00      	cmp	r3, #0
 8004790:	d009      	beq.n	80047a6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004792:	4b12      	ldr	r3, [pc, #72]	@ (80047dc <HAL_RCC_ClockConfig+0x1bc>)
 8004794:	689b      	ldr	r3, [r3, #8]
 8004796:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	691b      	ldr	r3, [r3, #16]
 800479e:	00db      	lsls	r3, r3, #3
 80047a0:	490e      	ldr	r1, [pc, #56]	@ (80047dc <HAL_RCC_ClockConfig+0x1bc>)
 80047a2:	4313      	orrs	r3, r2
 80047a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80047a6:	f000 f855 	bl	8004854 <HAL_RCC_GetSysClockFreq>
 80047aa:	4602      	mov	r2, r0
 80047ac:	4b0b      	ldr	r3, [pc, #44]	@ (80047dc <HAL_RCC_ClockConfig+0x1bc>)
 80047ae:	689b      	ldr	r3, [r3, #8]
 80047b0:	091b      	lsrs	r3, r3, #4
 80047b2:	f003 030f 	and.w	r3, r3, #15
 80047b6:	490a      	ldr	r1, [pc, #40]	@ (80047e0 <HAL_RCC_ClockConfig+0x1c0>)
 80047b8:	5ccb      	ldrb	r3, [r1, r3]
 80047ba:	fa22 f303 	lsr.w	r3, r2, r3
 80047be:	4a09      	ldr	r2, [pc, #36]	@ (80047e4 <HAL_RCC_ClockConfig+0x1c4>)
 80047c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80047c2:	4b09      	ldr	r3, [pc, #36]	@ (80047e8 <HAL_RCC_ClockConfig+0x1c8>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	4618      	mov	r0, r3
 80047c8:	f7fe fbcc 	bl	8002f64 <HAL_InitTick>

  return HAL_OK;
 80047cc:	2300      	movs	r3, #0
}
 80047ce:	4618      	mov	r0, r3
 80047d0:	3710      	adds	r7, #16
 80047d2:	46bd      	mov	sp, r7
 80047d4:	bd80      	pop	{r7, pc}
 80047d6:	bf00      	nop
 80047d8:	40023c00 	.word	0x40023c00
 80047dc:	40023800 	.word	0x40023800
 80047e0:	08008f20 	.word	0x08008f20
 80047e4:	2000001c 	.word	0x2000001c
 80047e8:	20000020 	.word	0x20000020

080047ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80047ec:	b480      	push	{r7}
 80047ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80047f0:	4b03      	ldr	r3, [pc, #12]	@ (8004800 <HAL_RCC_GetHCLKFreq+0x14>)
 80047f2:	681b      	ldr	r3, [r3, #0]
}
 80047f4:	4618      	mov	r0, r3
 80047f6:	46bd      	mov	sp, r7
 80047f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fc:	4770      	bx	lr
 80047fe:	bf00      	nop
 8004800:	2000001c 	.word	0x2000001c

08004804 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004808:	f7ff fff0 	bl	80047ec <HAL_RCC_GetHCLKFreq>
 800480c:	4602      	mov	r2, r0
 800480e:	4b05      	ldr	r3, [pc, #20]	@ (8004824 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004810:	689b      	ldr	r3, [r3, #8]
 8004812:	0a9b      	lsrs	r3, r3, #10
 8004814:	f003 0307 	and.w	r3, r3, #7
 8004818:	4903      	ldr	r1, [pc, #12]	@ (8004828 <HAL_RCC_GetPCLK1Freq+0x24>)
 800481a:	5ccb      	ldrb	r3, [r1, r3]
 800481c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004820:	4618      	mov	r0, r3
 8004822:	bd80      	pop	{r7, pc}
 8004824:	40023800 	.word	0x40023800
 8004828:	08008f30 	.word	0x08008f30

0800482c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800482c:	b580      	push	{r7, lr}
 800482e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004830:	f7ff ffdc 	bl	80047ec <HAL_RCC_GetHCLKFreq>
 8004834:	4602      	mov	r2, r0
 8004836:	4b05      	ldr	r3, [pc, #20]	@ (800484c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004838:	689b      	ldr	r3, [r3, #8]
 800483a:	0b5b      	lsrs	r3, r3, #13
 800483c:	f003 0307 	and.w	r3, r3, #7
 8004840:	4903      	ldr	r1, [pc, #12]	@ (8004850 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004842:	5ccb      	ldrb	r3, [r1, r3]
 8004844:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004848:	4618      	mov	r0, r3
 800484a:	bd80      	pop	{r7, pc}
 800484c:	40023800 	.word	0x40023800
 8004850:	08008f30 	.word	0x08008f30

08004854 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004854:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004858:	b0ae      	sub	sp, #184	@ 0xb8
 800485a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800485c:	2300      	movs	r3, #0
 800485e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8004862:	2300      	movs	r3, #0
 8004864:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8004868:	2300      	movs	r3, #0
 800486a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 800486e:	2300      	movs	r3, #0
 8004870:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8004874:	2300      	movs	r3, #0
 8004876:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800487a:	4bcb      	ldr	r3, [pc, #812]	@ (8004ba8 <HAL_RCC_GetSysClockFreq+0x354>)
 800487c:	689b      	ldr	r3, [r3, #8]
 800487e:	f003 030c 	and.w	r3, r3, #12
 8004882:	2b0c      	cmp	r3, #12
 8004884:	f200 8206 	bhi.w	8004c94 <HAL_RCC_GetSysClockFreq+0x440>
 8004888:	a201      	add	r2, pc, #4	@ (adr r2, 8004890 <HAL_RCC_GetSysClockFreq+0x3c>)
 800488a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800488e:	bf00      	nop
 8004890:	080048c5 	.word	0x080048c5
 8004894:	08004c95 	.word	0x08004c95
 8004898:	08004c95 	.word	0x08004c95
 800489c:	08004c95 	.word	0x08004c95
 80048a0:	080048cd 	.word	0x080048cd
 80048a4:	08004c95 	.word	0x08004c95
 80048a8:	08004c95 	.word	0x08004c95
 80048ac:	08004c95 	.word	0x08004c95
 80048b0:	080048d5 	.word	0x080048d5
 80048b4:	08004c95 	.word	0x08004c95
 80048b8:	08004c95 	.word	0x08004c95
 80048bc:	08004c95 	.word	0x08004c95
 80048c0:	08004ac5 	.word	0x08004ac5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80048c4:	4bb9      	ldr	r3, [pc, #740]	@ (8004bac <HAL_RCC_GetSysClockFreq+0x358>)
 80048c6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80048ca:	e1e7      	b.n	8004c9c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80048cc:	4bb8      	ldr	r3, [pc, #736]	@ (8004bb0 <HAL_RCC_GetSysClockFreq+0x35c>)
 80048ce:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80048d2:	e1e3      	b.n	8004c9c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80048d4:	4bb4      	ldr	r3, [pc, #720]	@ (8004ba8 <HAL_RCC_GetSysClockFreq+0x354>)
 80048d6:	685b      	ldr	r3, [r3, #4]
 80048d8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80048dc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80048e0:	4bb1      	ldr	r3, [pc, #708]	@ (8004ba8 <HAL_RCC_GetSysClockFreq+0x354>)
 80048e2:	685b      	ldr	r3, [r3, #4]
 80048e4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d071      	beq.n	80049d0 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80048ec:	4bae      	ldr	r3, [pc, #696]	@ (8004ba8 <HAL_RCC_GetSysClockFreq+0x354>)
 80048ee:	685b      	ldr	r3, [r3, #4]
 80048f0:	099b      	lsrs	r3, r3, #6
 80048f2:	2200      	movs	r2, #0
 80048f4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80048f8:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80048fc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004900:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004904:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004908:	2300      	movs	r3, #0
 800490a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800490e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004912:	4622      	mov	r2, r4
 8004914:	462b      	mov	r3, r5
 8004916:	f04f 0000 	mov.w	r0, #0
 800491a:	f04f 0100 	mov.w	r1, #0
 800491e:	0159      	lsls	r1, r3, #5
 8004920:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004924:	0150      	lsls	r0, r2, #5
 8004926:	4602      	mov	r2, r0
 8004928:	460b      	mov	r3, r1
 800492a:	4621      	mov	r1, r4
 800492c:	1a51      	subs	r1, r2, r1
 800492e:	6439      	str	r1, [r7, #64]	@ 0x40
 8004930:	4629      	mov	r1, r5
 8004932:	eb63 0301 	sbc.w	r3, r3, r1
 8004936:	647b      	str	r3, [r7, #68]	@ 0x44
 8004938:	f04f 0200 	mov.w	r2, #0
 800493c:	f04f 0300 	mov.w	r3, #0
 8004940:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8004944:	4649      	mov	r1, r9
 8004946:	018b      	lsls	r3, r1, #6
 8004948:	4641      	mov	r1, r8
 800494a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800494e:	4641      	mov	r1, r8
 8004950:	018a      	lsls	r2, r1, #6
 8004952:	4641      	mov	r1, r8
 8004954:	1a51      	subs	r1, r2, r1
 8004956:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004958:	4649      	mov	r1, r9
 800495a:	eb63 0301 	sbc.w	r3, r3, r1
 800495e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004960:	f04f 0200 	mov.w	r2, #0
 8004964:	f04f 0300 	mov.w	r3, #0
 8004968:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 800496c:	4649      	mov	r1, r9
 800496e:	00cb      	lsls	r3, r1, #3
 8004970:	4641      	mov	r1, r8
 8004972:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004976:	4641      	mov	r1, r8
 8004978:	00ca      	lsls	r2, r1, #3
 800497a:	4610      	mov	r0, r2
 800497c:	4619      	mov	r1, r3
 800497e:	4603      	mov	r3, r0
 8004980:	4622      	mov	r2, r4
 8004982:	189b      	adds	r3, r3, r2
 8004984:	633b      	str	r3, [r7, #48]	@ 0x30
 8004986:	462b      	mov	r3, r5
 8004988:	460a      	mov	r2, r1
 800498a:	eb42 0303 	adc.w	r3, r2, r3
 800498e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004990:	f04f 0200 	mov.w	r2, #0
 8004994:	f04f 0300 	mov.w	r3, #0
 8004998:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800499c:	4629      	mov	r1, r5
 800499e:	024b      	lsls	r3, r1, #9
 80049a0:	4621      	mov	r1, r4
 80049a2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80049a6:	4621      	mov	r1, r4
 80049a8:	024a      	lsls	r2, r1, #9
 80049aa:	4610      	mov	r0, r2
 80049ac:	4619      	mov	r1, r3
 80049ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80049b2:	2200      	movs	r2, #0
 80049b4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80049b8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80049bc:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80049c0:	f7fc f8dc 	bl	8000b7c <__aeabi_uldivmod>
 80049c4:	4602      	mov	r2, r0
 80049c6:	460b      	mov	r3, r1
 80049c8:	4613      	mov	r3, r2
 80049ca:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80049ce:	e067      	b.n	8004aa0 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80049d0:	4b75      	ldr	r3, [pc, #468]	@ (8004ba8 <HAL_RCC_GetSysClockFreq+0x354>)
 80049d2:	685b      	ldr	r3, [r3, #4]
 80049d4:	099b      	lsrs	r3, r3, #6
 80049d6:	2200      	movs	r2, #0
 80049d8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80049dc:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80049e0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80049e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049e8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80049ea:	2300      	movs	r3, #0
 80049ec:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80049ee:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80049f2:	4622      	mov	r2, r4
 80049f4:	462b      	mov	r3, r5
 80049f6:	f04f 0000 	mov.w	r0, #0
 80049fa:	f04f 0100 	mov.w	r1, #0
 80049fe:	0159      	lsls	r1, r3, #5
 8004a00:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004a04:	0150      	lsls	r0, r2, #5
 8004a06:	4602      	mov	r2, r0
 8004a08:	460b      	mov	r3, r1
 8004a0a:	4621      	mov	r1, r4
 8004a0c:	1a51      	subs	r1, r2, r1
 8004a0e:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004a10:	4629      	mov	r1, r5
 8004a12:	eb63 0301 	sbc.w	r3, r3, r1
 8004a16:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004a18:	f04f 0200 	mov.w	r2, #0
 8004a1c:	f04f 0300 	mov.w	r3, #0
 8004a20:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8004a24:	4649      	mov	r1, r9
 8004a26:	018b      	lsls	r3, r1, #6
 8004a28:	4641      	mov	r1, r8
 8004a2a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004a2e:	4641      	mov	r1, r8
 8004a30:	018a      	lsls	r2, r1, #6
 8004a32:	4641      	mov	r1, r8
 8004a34:	ebb2 0a01 	subs.w	sl, r2, r1
 8004a38:	4649      	mov	r1, r9
 8004a3a:	eb63 0b01 	sbc.w	fp, r3, r1
 8004a3e:	f04f 0200 	mov.w	r2, #0
 8004a42:	f04f 0300 	mov.w	r3, #0
 8004a46:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004a4a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004a4e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004a52:	4692      	mov	sl, r2
 8004a54:	469b      	mov	fp, r3
 8004a56:	4623      	mov	r3, r4
 8004a58:	eb1a 0303 	adds.w	r3, sl, r3
 8004a5c:	623b      	str	r3, [r7, #32]
 8004a5e:	462b      	mov	r3, r5
 8004a60:	eb4b 0303 	adc.w	r3, fp, r3
 8004a64:	627b      	str	r3, [r7, #36]	@ 0x24
 8004a66:	f04f 0200 	mov.w	r2, #0
 8004a6a:	f04f 0300 	mov.w	r3, #0
 8004a6e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8004a72:	4629      	mov	r1, r5
 8004a74:	028b      	lsls	r3, r1, #10
 8004a76:	4621      	mov	r1, r4
 8004a78:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004a7c:	4621      	mov	r1, r4
 8004a7e:	028a      	lsls	r2, r1, #10
 8004a80:	4610      	mov	r0, r2
 8004a82:	4619      	mov	r1, r3
 8004a84:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004a88:	2200      	movs	r2, #0
 8004a8a:	673b      	str	r3, [r7, #112]	@ 0x70
 8004a8c:	677a      	str	r2, [r7, #116]	@ 0x74
 8004a8e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8004a92:	f7fc f873 	bl	8000b7c <__aeabi_uldivmod>
 8004a96:	4602      	mov	r2, r0
 8004a98:	460b      	mov	r3, r1
 8004a9a:	4613      	mov	r3, r2
 8004a9c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004aa0:	4b41      	ldr	r3, [pc, #260]	@ (8004ba8 <HAL_RCC_GetSysClockFreq+0x354>)
 8004aa2:	685b      	ldr	r3, [r3, #4]
 8004aa4:	0c1b      	lsrs	r3, r3, #16
 8004aa6:	f003 0303 	and.w	r3, r3, #3
 8004aaa:	3301      	adds	r3, #1
 8004aac:	005b      	lsls	r3, r3, #1
 8004aae:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8004ab2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004ab6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004aba:	fbb2 f3f3 	udiv	r3, r2, r3
 8004abe:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004ac2:	e0eb      	b.n	8004c9c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004ac4:	4b38      	ldr	r3, [pc, #224]	@ (8004ba8 <HAL_RCC_GetSysClockFreq+0x354>)
 8004ac6:	685b      	ldr	r3, [r3, #4]
 8004ac8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004acc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004ad0:	4b35      	ldr	r3, [pc, #212]	@ (8004ba8 <HAL_RCC_GetSysClockFreq+0x354>)
 8004ad2:	685b      	ldr	r3, [r3, #4]
 8004ad4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d06b      	beq.n	8004bb4 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004adc:	4b32      	ldr	r3, [pc, #200]	@ (8004ba8 <HAL_RCC_GetSysClockFreq+0x354>)
 8004ade:	685b      	ldr	r3, [r3, #4]
 8004ae0:	099b      	lsrs	r3, r3, #6
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004ae6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004ae8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004aea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004aee:	663b      	str	r3, [r7, #96]	@ 0x60
 8004af0:	2300      	movs	r3, #0
 8004af2:	667b      	str	r3, [r7, #100]	@ 0x64
 8004af4:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8004af8:	4622      	mov	r2, r4
 8004afa:	462b      	mov	r3, r5
 8004afc:	f04f 0000 	mov.w	r0, #0
 8004b00:	f04f 0100 	mov.w	r1, #0
 8004b04:	0159      	lsls	r1, r3, #5
 8004b06:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004b0a:	0150      	lsls	r0, r2, #5
 8004b0c:	4602      	mov	r2, r0
 8004b0e:	460b      	mov	r3, r1
 8004b10:	4621      	mov	r1, r4
 8004b12:	1a51      	subs	r1, r2, r1
 8004b14:	61b9      	str	r1, [r7, #24]
 8004b16:	4629      	mov	r1, r5
 8004b18:	eb63 0301 	sbc.w	r3, r3, r1
 8004b1c:	61fb      	str	r3, [r7, #28]
 8004b1e:	f04f 0200 	mov.w	r2, #0
 8004b22:	f04f 0300 	mov.w	r3, #0
 8004b26:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8004b2a:	4659      	mov	r1, fp
 8004b2c:	018b      	lsls	r3, r1, #6
 8004b2e:	4651      	mov	r1, sl
 8004b30:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004b34:	4651      	mov	r1, sl
 8004b36:	018a      	lsls	r2, r1, #6
 8004b38:	4651      	mov	r1, sl
 8004b3a:	ebb2 0801 	subs.w	r8, r2, r1
 8004b3e:	4659      	mov	r1, fp
 8004b40:	eb63 0901 	sbc.w	r9, r3, r1
 8004b44:	f04f 0200 	mov.w	r2, #0
 8004b48:	f04f 0300 	mov.w	r3, #0
 8004b4c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004b50:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004b54:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004b58:	4690      	mov	r8, r2
 8004b5a:	4699      	mov	r9, r3
 8004b5c:	4623      	mov	r3, r4
 8004b5e:	eb18 0303 	adds.w	r3, r8, r3
 8004b62:	613b      	str	r3, [r7, #16]
 8004b64:	462b      	mov	r3, r5
 8004b66:	eb49 0303 	adc.w	r3, r9, r3
 8004b6a:	617b      	str	r3, [r7, #20]
 8004b6c:	f04f 0200 	mov.w	r2, #0
 8004b70:	f04f 0300 	mov.w	r3, #0
 8004b74:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8004b78:	4629      	mov	r1, r5
 8004b7a:	024b      	lsls	r3, r1, #9
 8004b7c:	4621      	mov	r1, r4
 8004b7e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004b82:	4621      	mov	r1, r4
 8004b84:	024a      	lsls	r2, r1, #9
 8004b86:	4610      	mov	r0, r2
 8004b88:	4619      	mov	r1, r3
 8004b8a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004b8e:	2200      	movs	r2, #0
 8004b90:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004b92:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8004b94:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004b98:	f7fb fff0 	bl	8000b7c <__aeabi_uldivmod>
 8004b9c:	4602      	mov	r2, r0
 8004b9e:	460b      	mov	r3, r1
 8004ba0:	4613      	mov	r3, r2
 8004ba2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004ba6:	e065      	b.n	8004c74 <HAL_RCC_GetSysClockFreq+0x420>
 8004ba8:	40023800 	.word	0x40023800
 8004bac:	00f42400 	.word	0x00f42400
 8004bb0:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004bb4:	4b3d      	ldr	r3, [pc, #244]	@ (8004cac <HAL_RCC_GetSysClockFreq+0x458>)
 8004bb6:	685b      	ldr	r3, [r3, #4]
 8004bb8:	099b      	lsrs	r3, r3, #6
 8004bba:	2200      	movs	r2, #0
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	4611      	mov	r1, r2
 8004bc0:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004bc4:	653b      	str	r3, [r7, #80]	@ 0x50
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	657b      	str	r3, [r7, #84]	@ 0x54
 8004bca:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8004bce:	4642      	mov	r2, r8
 8004bd0:	464b      	mov	r3, r9
 8004bd2:	f04f 0000 	mov.w	r0, #0
 8004bd6:	f04f 0100 	mov.w	r1, #0
 8004bda:	0159      	lsls	r1, r3, #5
 8004bdc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004be0:	0150      	lsls	r0, r2, #5
 8004be2:	4602      	mov	r2, r0
 8004be4:	460b      	mov	r3, r1
 8004be6:	4641      	mov	r1, r8
 8004be8:	1a51      	subs	r1, r2, r1
 8004bea:	60b9      	str	r1, [r7, #8]
 8004bec:	4649      	mov	r1, r9
 8004bee:	eb63 0301 	sbc.w	r3, r3, r1
 8004bf2:	60fb      	str	r3, [r7, #12]
 8004bf4:	f04f 0200 	mov.w	r2, #0
 8004bf8:	f04f 0300 	mov.w	r3, #0
 8004bfc:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8004c00:	4659      	mov	r1, fp
 8004c02:	018b      	lsls	r3, r1, #6
 8004c04:	4651      	mov	r1, sl
 8004c06:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004c0a:	4651      	mov	r1, sl
 8004c0c:	018a      	lsls	r2, r1, #6
 8004c0e:	4651      	mov	r1, sl
 8004c10:	1a54      	subs	r4, r2, r1
 8004c12:	4659      	mov	r1, fp
 8004c14:	eb63 0501 	sbc.w	r5, r3, r1
 8004c18:	f04f 0200 	mov.w	r2, #0
 8004c1c:	f04f 0300 	mov.w	r3, #0
 8004c20:	00eb      	lsls	r3, r5, #3
 8004c22:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004c26:	00e2      	lsls	r2, r4, #3
 8004c28:	4614      	mov	r4, r2
 8004c2a:	461d      	mov	r5, r3
 8004c2c:	4643      	mov	r3, r8
 8004c2e:	18e3      	adds	r3, r4, r3
 8004c30:	603b      	str	r3, [r7, #0]
 8004c32:	464b      	mov	r3, r9
 8004c34:	eb45 0303 	adc.w	r3, r5, r3
 8004c38:	607b      	str	r3, [r7, #4]
 8004c3a:	f04f 0200 	mov.w	r2, #0
 8004c3e:	f04f 0300 	mov.w	r3, #0
 8004c42:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004c46:	4629      	mov	r1, r5
 8004c48:	028b      	lsls	r3, r1, #10
 8004c4a:	4621      	mov	r1, r4
 8004c4c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004c50:	4621      	mov	r1, r4
 8004c52:	028a      	lsls	r2, r1, #10
 8004c54:	4610      	mov	r0, r2
 8004c56:	4619      	mov	r1, r3
 8004c58:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004c60:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8004c62:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004c66:	f7fb ff89 	bl	8000b7c <__aeabi_uldivmod>
 8004c6a:	4602      	mov	r2, r0
 8004c6c:	460b      	mov	r3, r1
 8004c6e:	4613      	mov	r3, r2
 8004c70:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004c74:	4b0d      	ldr	r3, [pc, #52]	@ (8004cac <HAL_RCC_GetSysClockFreq+0x458>)
 8004c76:	685b      	ldr	r3, [r3, #4]
 8004c78:	0f1b      	lsrs	r3, r3, #28
 8004c7a:	f003 0307 	and.w	r3, r3, #7
 8004c7e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8004c82:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004c86:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004c8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c8e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004c92:	e003      	b.n	8004c9c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004c94:	4b06      	ldr	r3, [pc, #24]	@ (8004cb0 <HAL_RCC_GetSysClockFreq+0x45c>)
 8004c96:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004c9a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004c9c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	37b8      	adds	r7, #184	@ 0xb8
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004caa:	bf00      	nop
 8004cac:	40023800 	.word	0x40023800
 8004cb0:	00f42400 	.word	0x00f42400

08004cb4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b086      	sub	sp, #24
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d101      	bne.n	8004cc6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	e28d      	b.n	80051e2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f003 0301 	and.w	r3, r3, #1
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	f000 8083 	beq.w	8004dda <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004cd4:	4b94      	ldr	r3, [pc, #592]	@ (8004f28 <HAL_RCC_OscConfig+0x274>)
 8004cd6:	689b      	ldr	r3, [r3, #8]
 8004cd8:	f003 030c 	and.w	r3, r3, #12
 8004cdc:	2b04      	cmp	r3, #4
 8004cde:	d019      	beq.n	8004d14 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004ce0:	4b91      	ldr	r3, [pc, #580]	@ (8004f28 <HAL_RCC_OscConfig+0x274>)
 8004ce2:	689b      	ldr	r3, [r3, #8]
 8004ce4:	f003 030c 	and.w	r3, r3, #12
        || \
 8004ce8:	2b08      	cmp	r3, #8
 8004cea:	d106      	bne.n	8004cfa <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004cec:	4b8e      	ldr	r3, [pc, #568]	@ (8004f28 <HAL_RCC_OscConfig+0x274>)
 8004cee:	685b      	ldr	r3, [r3, #4]
 8004cf0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004cf4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004cf8:	d00c      	beq.n	8004d14 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004cfa:	4b8b      	ldr	r3, [pc, #556]	@ (8004f28 <HAL_RCC_OscConfig+0x274>)
 8004cfc:	689b      	ldr	r3, [r3, #8]
 8004cfe:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004d02:	2b0c      	cmp	r3, #12
 8004d04:	d112      	bne.n	8004d2c <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004d06:	4b88      	ldr	r3, [pc, #544]	@ (8004f28 <HAL_RCC_OscConfig+0x274>)
 8004d08:	685b      	ldr	r3, [r3, #4]
 8004d0a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004d0e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004d12:	d10b      	bne.n	8004d2c <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d14:	4b84      	ldr	r3, [pc, #528]	@ (8004f28 <HAL_RCC_OscConfig+0x274>)
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d05b      	beq.n	8004dd8 <HAL_RCC_OscConfig+0x124>
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	685b      	ldr	r3, [r3, #4]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d157      	bne.n	8004dd8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004d28:	2301      	movs	r3, #1
 8004d2a:	e25a      	b.n	80051e2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	685b      	ldr	r3, [r3, #4]
 8004d30:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d34:	d106      	bne.n	8004d44 <HAL_RCC_OscConfig+0x90>
 8004d36:	4b7c      	ldr	r3, [pc, #496]	@ (8004f28 <HAL_RCC_OscConfig+0x274>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	4a7b      	ldr	r2, [pc, #492]	@ (8004f28 <HAL_RCC_OscConfig+0x274>)
 8004d3c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d40:	6013      	str	r3, [r2, #0]
 8004d42:	e01d      	b.n	8004d80 <HAL_RCC_OscConfig+0xcc>
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	685b      	ldr	r3, [r3, #4]
 8004d48:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004d4c:	d10c      	bne.n	8004d68 <HAL_RCC_OscConfig+0xb4>
 8004d4e:	4b76      	ldr	r3, [pc, #472]	@ (8004f28 <HAL_RCC_OscConfig+0x274>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	4a75      	ldr	r2, [pc, #468]	@ (8004f28 <HAL_RCC_OscConfig+0x274>)
 8004d54:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004d58:	6013      	str	r3, [r2, #0]
 8004d5a:	4b73      	ldr	r3, [pc, #460]	@ (8004f28 <HAL_RCC_OscConfig+0x274>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	4a72      	ldr	r2, [pc, #456]	@ (8004f28 <HAL_RCC_OscConfig+0x274>)
 8004d60:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d64:	6013      	str	r3, [r2, #0]
 8004d66:	e00b      	b.n	8004d80 <HAL_RCC_OscConfig+0xcc>
 8004d68:	4b6f      	ldr	r3, [pc, #444]	@ (8004f28 <HAL_RCC_OscConfig+0x274>)
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	4a6e      	ldr	r2, [pc, #440]	@ (8004f28 <HAL_RCC_OscConfig+0x274>)
 8004d6e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004d72:	6013      	str	r3, [r2, #0]
 8004d74:	4b6c      	ldr	r3, [pc, #432]	@ (8004f28 <HAL_RCC_OscConfig+0x274>)
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	4a6b      	ldr	r2, [pc, #428]	@ (8004f28 <HAL_RCC_OscConfig+0x274>)
 8004d7a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004d7e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	685b      	ldr	r3, [r3, #4]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d013      	beq.n	8004db0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d88:	f7fe f930 	bl	8002fec <HAL_GetTick>
 8004d8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d8e:	e008      	b.n	8004da2 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d90:	f7fe f92c 	bl	8002fec <HAL_GetTick>
 8004d94:	4602      	mov	r2, r0
 8004d96:	693b      	ldr	r3, [r7, #16]
 8004d98:	1ad3      	subs	r3, r2, r3
 8004d9a:	2b64      	cmp	r3, #100	@ 0x64
 8004d9c:	d901      	bls.n	8004da2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004d9e:	2303      	movs	r3, #3
 8004da0:	e21f      	b.n	80051e2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004da2:	4b61      	ldr	r3, [pc, #388]	@ (8004f28 <HAL_RCC_OscConfig+0x274>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d0f0      	beq.n	8004d90 <HAL_RCC_OscConfig+0xdc>
 8004dae:	e014      	b.n	8004dda <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004db0:	f7fe f91c 	bl	8002fec <HAL_GetTick>
 8004db4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004db6:	e008      	b.n	8004dca <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004db8:	f7fe f918 	bl	8002fec <HAL_GetTick>
 8004dbc:	4602      	mov	r2, r0
 8004dbe:	693b      	ldr	r3, [r7, #16]
 8004dc0:	1ad3      	subs	r3, r2, r3
 8004dc2:	2b64      	cmp	r3, #100	@ 0x64
 8004dc4:	d901      	bls.n	8004dca <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004dc6:	2303      	movs	r3, #3
 8004dc8:	e20b      	b.n	80051e2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004dca:	4b57      	ldr	r3, [pc, #348]	@ (8004f28 <HAL_RCC_OscConfig+0x274>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d1f0      	bne.n	8004db8 <HAL_RCC_OscConfig+0x104>
 8004dd6:	e000      	b.n	8004dda <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004dd8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f003 0302 	and.w	r3, r3, #2
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d06f      	beq.n	8004ec6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004de6:	4b50      	ldr	r3, [pc, #320]	@ (8004f28 <HAL_RCC_OscConfig+0x274>)
 8004de8:	689b      	ldr	r3, [r3, #8]
 8004dea:	f003 030c 	and.w	r3, r3, #12
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d017      	beq.n	8004e22 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004df2:	4b4d      	ldr	r3, [pc, #308]	@ (8004f28 <HAL_RCC_OscConfig+0x274>)
 8004df4:	689b      	ldr	r3, [r3, #8]
 8004df6:	f003 030c 	and.w	r3, r3, #12
        || \
 8004dfa:	2b08      	cmp	r3, #8
 8004dfc:	d105      	bne.n	8004e0a <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004dfe:	4b4a      	ldr	r3, [pc, #296]	@ (8004f28 <HAL_RCC_OscConfig+0x274>)
 8004e00:	685b      	ldr	r3, [r3, #4]
 8004e02:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d00b      	beq.n	8004e22 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004e0a:	4b47      	ldr	r3, [pc, #284]	@ (8004f28 <HAL_RCC_OscConfig+0x274>)
 8004e0c:	689b      	ldr	r3, [r3, #8]
 8004e0e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004e12:	2b0c      	cmp	r3, #12
 8004e14:	d11c      	bne.n	8004e50 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004e16:	4b44      	ldr	r3, [pc, #272]	@ (8004f28 <HAL_RCC_OscConfig+0x274>)
 8004e18:	685b      	ldr	r3, [r3, #4]
 8004e1a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d116      	bne.n	8004e50 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e22:	4b41      	ldr	r3, [pc, #260]	@ (8004f28 <HAL_RCC_OscConfig+0x274>)
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f003 0302 	and.w	r3, r3, #2
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d005      	beq.n	8004e3a <HAL_RCC_OscConfig+0x186>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	68db      	ldr	r3, [r3, #12]
 8004e32:	2b01      	cmp	r3, #1
 8004e34:	d001      	beq.n	8004e3a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004e36:	2301      	movs	r3, #1
 8004e38:	e1d3      	b.n	80051e2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e3a:	4b3b      	ldr	r3, [pc, #236]	@ (8004f28 <HAL_RCC_OscConfig+0x274>)
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	691b      	ldr	r3, [r3, #16]
 8004e46:	00db      	lsls	r3, r3, #3
 8004e48:	4937      	ldr	r1, [pc, #220]	@ (8004f28 <HAL_RCC_OscConfig+0x274>)
 8004e4a:	4313      	orrs	r3, r2
 8004e4c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e4e:	e03a      	b.n	8004ec6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	68db      	ldr	r3, [r3, #12]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d020      	beq.n	8004e9a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004e58:	4b34      	ldr	r3, [pc, #208]	@ (8004f2c <HAL_RCC_OscConfig+0x278>)
 8004e5a:	2201      	movs	r2, #1
 8004e5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e5e:	f7fe f8c5 	bl	8002fec <HAL_GetTick>
 8004e62:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e64:	e008      	b.n	8004e78 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e66:	f7fe f8c1 	bl	8002fec <HAL_GetTick>
 8004e6a:	4602      	mov	r2, r0
 8004e6c:	693b      	ldr	r3, [r7, #16]
 8004e6e:	1ad3      	subs	r3, r2, r3
 8004e70:	2b02      	cmp	r3, #2
 8004e72:	d901      	bls.n	8004e78 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004e74:	2303      	movs	r3, #3
 8004e76:	e1b4      	b.n	80051e2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e78:	4b2b      	ldr	r3, [pc, #172]	@ (8004f28 <HAL_RCC_OscConfig+0x274>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f003 0302 	and.w	r3, r3, #2
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d0f0      	beq.n	8004e66 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e84:	4b28      	ldr	r3, [pc, #160]	@ (8004f28 <HAL_RCC_OscConfig+0x274>)
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	691b      	ldr	r3, [r3, #16]
 8004e90:	00db      	lsls	r3, r3, #3
 8004e92:	4925      	ldr	r1, [pc, #148]	@ (8004f28 <HAL_RCC_OscConfig+0x274>)
 8004e94:	4313      	orrs	r3, r2
 8004e96:	600b      	str	r3, [r1, #0]
 8004e98:	e015      	b.n	8004ec6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004e9a:	4b24      	ldr	r3, [pc, #144]	@ (8004f2c <HAL_RCC_OscConfig+0x278>)
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ea0:	f7fe f8a4 	bl	8002fec <HAL_GetTick>
 8004ea4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ea6:	e008      	b.n	8004eba <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ea8:	f7fe f8a0 	bl	8002fec <HAL_GetTick>
 8004eac:	4602      	mov	r2, r0
 8004eae:	693b      	ldr	r3, [r7, #16]
 8004eb0:	1ad3      	subs	r3, r2, r3
 8004eb2:	2b02      	cmp	r3, #2
 8004eb4:	d901      	bls.n	8004eba <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004eb6:	2303      	movs	r3, #3
 8004eb8:	e193      	b.n	80051e2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004eba:	4b1b      	ldr	r3, [pc, #108]	@ (8004f28 <HAL_RCC_OscConfig+0x274>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f003 0302 	and.w	r3, r3, #2
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d1f0      	bne.n	8004ea8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f003 0308 	and.w	r3, r3, #8
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d036      	beq.n	8004f40 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	695b      	ldr	r3, [r3, #20]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d016      	beq.n	8004f08 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004eda:	4b15      	ldr	r3, [pc, #84]	@ (8004f30 <HAL_RCC_OscConfig+0x27c>)
 8004edc:	2201      	movs	r2, #1
 8004ede:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ee0:	f7fe f884 	bl	8002fec <HAL_GetTick>
 8004ee4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ee6:	e008      	b.n	8004efa <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ee8:	f7fe f880 	bl	8002fec <HAL_GetTick>
 8004eec:	4602      	mov	r2, r0
 8004eee:	693b      	ldr	r3, [r7, #16]
 8004ef0:	1ad3      	subs	r3, r2, r3
 8004ef2:	2b02      	cmp	r3, #2
 8004ef4:	d901      	bls.n	8004efa <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004ef6:	2303      	movs	r3, #3
 8004ef8:	e173      	b.n	80051e2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004efa:	4b0b      	ldr	r3, [pc, #44]	@ (8004f28 <HAL_RCC_OscConfig+0x274>)
 8004efc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004efe:	f003 0302 	and.w	r3, r3, #2
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d0f0      	beq.n	8004ee8 <HAL_RCC_OscConfig+0x234>
 8004f06:	e01b      	b.n	8004f40 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004f08:	4b09      	ldr	r3, [pc, #36]	@ (8004f30 <HAL_RCC_OscConfig+0x27c>)
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f0e:	f7fe f86d 	bl	8002fec <HAL_GetTick>
 8004f12:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f14:	e00e      	b.n	8004f34 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f16:	f7fe f869 	bl	8002fec <HAL_GetTick>
 8004f1a:	4602      	mov	r2, r0
 8004f1c:	693b      	ldr	r3, [r7, #16]
 8004f1e:	1ad3      	subs	r3, r2, r3
 8004f20:	2b02      	cmp	r3, #2
 8004f22:	d907      	bls.n	8004f34 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004f24:	2303      	movs	r3, #3
 8004f26:	e15c      	b.n	80051e2 <HAL_RCC_OscConfig+0x52e>
 8004f28:	40023800 	.word	0x40023800
 8004f2c:	42470000 	.word	0x42470000
 8004f30:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f34:	4b8a      	ldr	r3, [pc, #552]	@ (8005160 <HAL_RCC_OscConfig+0x4ac>)
 8004f36:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f38:	f003 0302 	and.w	r3, r3, #2
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d1ea      	bne.n	8004f16 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f003 0304 	and.w	r3, r3, #4
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	f000 8097 	beq.w	800507c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004f4e:	2300      	movs	r3, #0
 8004f50:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004f52:	4b83      	ldr	r3, [pc, #524]	@ (8005160 <HAL_RCC_OscConfig+0x4ac>)
 8004f54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d10f      	bne.n	8004f7e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f5e:	2300      	movs	r3, #0
 8004f60:	60bb      	str	r3, [r7, #8]
 8004f62:	4b7f      	ldr	r3, [pc, #508]	@ (8005160 <HAL_RCC_OscConfig+0x4ac>)
 8004f64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f66:	4a7e      	ldr	r2, [pc, #504]	@ (8005160 <HAL_RCC_OscConfig+0x4ac>)
 8004f68:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004f6c:	6413      	str	r3, [r2, #64]	@ 0x40
 8004f6e:	4b7c      	ldr	r3, [pc, #496]	@ (8005160 <HAL_RCC_OscConfig+0x4ac>)
 8004f70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f76:	60bb      	str	r3, [r7, #8]
 8004f78:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f7e:	4b79      	ldr	r3, [pc, #484]	@ (8005164 <HAL_RCC_OscConfig+0x4b0>)
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d118      	bne.n	8004fbc <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004f8a:	4b76      	ldr	r3, [pc, #472]	@ (8005164 <HAL_RCC_OscConfig+0x4b0>)
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	4a75      	ldr	r2, [pc, #468]	@ (8005164 <HAL_RCC_OscConfig+0x4b0>)
 8004f90:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004f94:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f96:	f7fe f829 	bl	8002fec <HAL_GetTick>
 8004f9a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f9c:	e008      	b.n	8004fb0 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f9e:	f7fe f825 	bl	8002fec <HAL_GetTick>
 8004fa2:	4602      	mov	r2, r0
 8004fa4:	693b      	ldr	r3, [r7, #16]
 8004fa6:	1ad3      	subs	r3, r2, r3
 8004fa8:	2b02      	cmp	r3, #2
 8004faa:	d901      	bls.n	8004fb0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004fac:	2303      	movs	r3, #3
 8004fae:	e118      	b.n	80051e2 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004fb0:	4b6c      	ldr	r3, [pc, #432]	@ (8005164 <HAL_RCC_OscConfig+0x4b0>)
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d0f0      	beq.n	8004f9e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	689b      	ldr	r3, [r3, #8]
 8004fc0:	2b01      	cmp	r3, #1
 8004fc2:	d106      	bne.n	8004fd2 <HAL_RCC_OscConfig+0x31e>
 8004fc4:	4b66      	ldr	r3, [pc, #408]	@ (8005160 <HAL_RCC_OscConfig+0x4ac>)
 8004fc6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fc8:	4a65      	ldr	r2, [pc, #404]	@ (8005160 <HAL_RCC_OscConfig+0x4ac>)
 8004fca:	f043 0301 	orr.w	r3, r3, #1
 8004fce:	6713      	str	r3, [r2, #112]	@ 0x70
 8004fd0:	e01c      	b.n	800500c <HAL_RCC_OscConfig+0x358>
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	689b      	ldr	r3, [r3, #8]
 8004fd6:	2b05      	cmp	r3, #5
 8004fd8:	d10c      	bne.n	8004ff4 <HAL_RCC_OscConfig+0x340>
 8004fda:	4b61      	ldr	r3, [pc, #388]	@ (8005160 <HAL_RCC_OscConfig+0x4ac>)
 8004fdc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fde:	4a60      	ldr	r2, [pc, #384]	@ (8005160 <HAL_RCC_OscConfig+0x4ac>)
 8004fe0:	f043 0304 	orr.w	r3, r3, #4
 8004fe4:	6713      	str	r3, [r2, #112]	@ 0x70
 8004fe6:	4b5e      	ldr	r3, [pc, #376]	@ (8005160 <HAL_RCC_OscConfig+0x4ac>)
 8004fe8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fea:	4a5d      	ldr	r2, [pc, #372]	@ (8005160 <HAL_RCC_OscConfig+0x4ac>)
 8004fec:	f043 0301 	orr.w	r3, r3, #1
 8004ff0:	6713      	str	r3, [r2, #112]	@ 0x70
 8004ff2:	e00b      	b.n	800500c <HAL_RCC_OscConfig+0x358>
 8004ff4:	4b5a      	ldr	r3, [pc, #360]	@ (8005160 <HAL_RCC_OscConfig+0x4ac>)
 8004ff6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ff8:	4a59      	ldr	r2, [pc, #356]	@ (8005160 <HAL_RCC_OscConfig+0x4ac>)
 8004ffa:	f023 0301 	bic.w	r3, r3, #1
 8004ffe:	6713      	str	r3, [r2, #112]	@ 0x70
 8005000:	4b57      	ldr	r3, [pc, #348]	@ (8005160 <HAL_RCC_OscConfig+0x4ac>)
 8005002:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005004:	4a56      	ldr	r2, [pc, #344]	@ (8005160 <HAL_RCC_OscConfig+0x4ac>)
 8005006:	f023 0304 	bic.w	r3, r3, #4
 800500a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	689b      	ldr	r3, [r3, #8]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d015      	beq.n	8005040 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005014:	f7fd ffea 	bl	8002fec <HAL_GetTick>
 8005018:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800501a:	e00a      	b.n	8005032 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800501c:	f7fd ffe6 	bl	8002fec <HAL_GetTick>
 8005020:	4602      	mov	r2, r0
 8005022:	693b      	ldr	r3, [r7, #16]
 8005024:	1ad3      	subs	r3, r2, r3
 8005026:	f241 3288 	movw	r2, #5000	@ 0x1388
 800502a:	4293      	cmp	r3, r2
 800502c:	d901      	bls.n	8005032 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800502e:	2303      	movs	r3, #3
 8005030:	e0d7      	b.n	80051e2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005032:	4b4b      	ldr	r3, [pc, #300]	@ (8005160 <HAL_RCC_OscConfig+0x4ac>)
 8005034:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005036:	f003 0302 	and.w	r3, r3, #2
 800503a:	2b00      	cmp	r3, #0
 800503c:	d0ee      	beq.n	800501c <HAL_RCC_OscConfig+0x368>
 800503e:	e014      	b.n	800506a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005040:	f7fd ffd4 	bl	8002fec <HAL_GetTick>
 8005044:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005046:	e00a      	b.n	800505e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005048:	f7fd ffd0 	bl	8002fec <HAL_GetTick>
 800504c:	4602      	mov	r2, r0
 800504e:	693b      	ldr	r3, [r7, #16]
 8005050:	1ad3      	subs	r3, r2, r3
 8005052:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005056:	4293      	cmp	r3, r2
 8005058:	d901      	bls.n	800505e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800505a:	2303      	movs	r3, #3
 800505c:	e0c1      	b.n	80051e2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800505e:	4b40      	ldr	r3, [pc, #256]	@ (8005160 <HAL_RCC_OscConfig+0x4ac>)
 8005060:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005062:	f003 0302 	and.w	r3, r3, #2
 8005066:	2b00      	cmp	r3, #0
 8005068:	d1ee      	bne.n	8005048 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800506a:	7dfb      	ldrb	r3, [r7, #23]
 800506c:	2b01      	cmp	r3, #1
 800506e:	d105      	bne.n	800507c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005070:	4b3b      	ldr	r3, [pc, #236]	@ (8005160 <HAL_RCC_OscConfig+0x4ac>)
 8005072:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005074:	4a3a      	ldr	r2, [pc, #232]	@ (8005160 <HAL_RCC_OscConfig+0x4ac>)
 8005076:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800507a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	699b      	ldr	r3, [r3, #24]
 8005080:	2b00      	cmp	r3, #0
 8005082:	f000 80ad 	beq.w	80051e0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005086:	4b36      	ldr	r3, [pc, #216]	@ (8005160 <HAL_RCC_OscConfig+0x4ac>)
 8005088:	689b      	ldr	r3, [r3, #8]
 800508a:	f003 030c 	and.w	r3, r3, #12
 800508e:	2b08      	cmp	r3, #8
 8005090:	d060      	beq.n	8005154 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	699b      	ldr	r3, [r3, #24]
 8005096:	2b02      	cmp	r3, #2
 8005098:	d145      	bne.n	8005126 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800509a:	4b33      	ldr	r3, [pc, #204]	@ (8005168 <HAL_RCC_OscConfig+0x4b4>)
 800509c:	2200      	movs	r2, #0
 800509e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050a0:	f7fd ffa4 	bl	8002fec <HAL_GetTick>
 80050a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050a6:	e008      	b.n	80050ba <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050a8:	f7fd ffa0 	bl	8002fec <HAL_GetTick>
 80050ac:	4602      	mov	r2, r0
 80050ae:	693b      	ldr	r3, [r7, #16]
 80050b0:	1ad3      	subs	r3, r2, r3
 80050b2:	2b02      	cmp	r3, #2
 80050b4:	d901      	bls.n	80050ba <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80050b6:	2303      	movs	r3, #3
 80050b8:	e093      	b.n	80051e2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050ba:	4b29      	ldr	r3, [pc, #164]	@ (8005160 <HAL_RCC_OscConfig+0x4ac>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d1f0      	bne.n	80050a8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	69da      	ldr	r2, [r3, #28]
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6a1b      	ldr	r3, [r3, #32]
 80050ce:	431a      	orrs	r2, r3
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050d4:	019b      	lsls	r3, r3, #6
 80050d6:	431a      	orrs	r2, r3
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050dc:	085b      	lsrs	r3, r3, #1
 80050de:	3b01      	subs	r3, #1
 80050e0:	041b      	lsls	r3, r3, #16
 80050e2:	431a      	orrs	r2, r3
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050e8:	061b      	lsls	r3, r3, #24
 80050ea:	431a      	orrs	r2, r3
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050f0:	071b      	lsls	r3, r3, #28
 80050f2:	491b      	ldr	r1, [pc, #108]	@ (8005160 <HAL_RCC_OscConfig+0x4ac>)
 80050f4:	4313      	orrs	r3, r2
 80050f6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80050f8:	4b1b      	ldr	r3, [pc, #108]	@ (8005168 <HAL_RCC_OscConfig+0x4b4>)
 80050fa:	2201      	movs	r2, #1
 80050fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050fe:	f7fd ff75 	bl	8002fec <HAL_GetTick>
 8005102:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005104:	e008      	b.n	8005118 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005106:	f7fd ff71 	bl	8002fec <HAL_GetTick>
 800510a:	4602      	mov	r2, r0
 800510c:	693b      	ldr	r3, [r7, #16]
 800510e:	1ad3      	subs	r3, r2, r3
 8005110:	2b02      	cmp	r3, #2
 8005112:	d901      	bls.n	8005118 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8005114:	2303      	movs	r3, #3
 8005116:	e064      	b.n	80051e2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005118:	4b11      	ldr	r3, [pc, #68]	@ (8005160 <HAL_RCC_OscConfig+0x4ac>)
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005120:	2b00      	cmp	r3, #0
 8005122:	d0f0      	beq.n	8005106 <HAL_RCC_OscConfig+0x452>
 8005124:	e05c      	b.n	80051e0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005126:	4b10      	ldr	r3, [pc, #64]	@ (8005168 <HAL_RCC_OscConfig+0x4b4>)
 8005128:	2200      	movs	r2, #0
 800512a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800512c:	f7fd ff5e 	bl	8002fec <HAL_GetTick>
 8005130:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005132:	e008      	b.n	8005146 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005134:	f7fd ff5a 	bl	8002fec <HAL_GetTick>
 8005138:	4602      	mov	r2, r0
 800513a:	693b      	ldr	r3, [r7, #16]
 800513c:	1ad3      	subs	r3, r2, r3
 800513e:	2b02      	cmp	r3, #2
 8005140:	d901      	bls.n	8005146 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8005142:	2303      	movs	r3, #3
 8005144:	e04d      	b.n	80051e2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005146:	4b06      	ldr	r3, [pc, #24]	@ (8005160 <HAL_RCC_OscConfig+0x4ac>)
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800514e:	2b00      	cmp	r3, #0
 8005150:	d1f0      	bne.n	8005134 <HAL_RCC_OscConfig+0x480>
 8005152:	e045      	b.n	80051e0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	699b      	ldr	r3, [r3, #24]
 8005158:	2b01      	cmp	r3, #1
 800515a:	d107      	bne.n	800516c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800515c:	2301      	movs	r3, #1
 800515e:	e040      	b.n	80051e2 <HAL_RCC_OscConfig+0x52e>
 8005160:	40023800 	.word	0x40023800
 8005164:	40007000 	.word	0x40007000
 8005168:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800516c:	4b1f      	ldr	r3, [pc, #124]	@ (80051ec <HAL_RCC_OscConfig+0x538>)
 800516e:	685b      	ldr	r3, [r3, #4]
 8005170:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	699b      	ldr	r3, [r3, #24]
 8005176:	2b01      	cmp	r3, #1
 8005178:	d030      	beq.n	80051dc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005184:	429a      	cmp	r2, r3
 8005186:	d129      	bne.n	80051dc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005192:	429a      	cmp	r2, r3
 8005194:	d122      	bne.n	80051dc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005196:	68fa      	ldr	r2, [r7, #12]
 8005198:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800519c:	4013      	ands	r3, r2
 800519e:	687a      	ldr	r2, [r7, #4]
 80051a0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80051a2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80051a4:	4293      	cmp	r3, r2
 80051a6:	d119      	bne.n	80051dc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051b2:	085b      	lsrs	r3, r3, #1
 80051b4:	3b01      	subs	r3, #1
 80051b6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80051b8:	429a      	cmp	r2, r3
 80051ba:	d10f      	bne.n	80051dc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051c6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80051c8:	429a      	cmp	r2, r3
 80051ca:	d107      	bne.n	80051dc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051d6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80051d8:	429a      	cmp	r2, r3
 80051da:	d001      	beq.n	80051e0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80051dc:	2301      	movs	r3, #1
 80051de:	e000      	b.n	80051e2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80051e0:	2300      	movs	r3, #0
}
 80051e2:	4618      	mov	r0, r3
 80051e4:	3718      	adds	r7, #24
 80051e6:	46bd      	mov	sp, r7
 80051e8:	bd80      	pop	{r7, pc}
 80051ea:	bf00      	nop
 80051ec:	40023800 	.word	0x40023800

080051f0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b082      	sub	sp, #8
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d101      	bne.n	8005202 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80051fe:	2301      	movs	r3, #1
 8005200:	e07b      	b.n	80052fa <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005206:	2b00      	cmp	r3, #0
 8005208:	d108      	bne.n	800521c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	685b      	ldr	r3, [r3, #4]
 800520e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005212:	d009      	beq.n	8005228 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2200      	movs	r2, #0
 8005218:	61da      	str	r2, [r3, #28]
 800521a:	e005      	b.n	8005228 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2200      	movs	r2, #0
 8005220:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2200      	movs	r2, #0
 8005226:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2200      	movs	r2, #0
 800522c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005234:	b2db      	uxtb	r3, r3
 8005236:	2b00      	cmp	r3, #0
 8005238:	d106      	bne.n	8005248 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2200      	movs	r2, #0
 800523e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005242:	6878      	ldr	r0, [r7, #4]
 8005244:	f7fd f80a 	bl	800225c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2202      	movs	r2, #2
 800524c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	681a      	ldr	r2, [r3, #0]
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800525e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	685b      	ldr	r3, [r3, #4]
 8005264:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	689b      	ldr	r3, [r3, #8]
 800526c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005270:	431a      	orrs	r2, r3
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	68db      	ldr	r3, [r3, #12]
 8005276:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800527a:	431a      	orrs	r2, r3
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	691b      	ldr	r3, [r3, #16]
 8005280:	f003 0302 	and.w	r3, r3, #2
 8005284:	431a      	orrs	r2, r3
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	695b      	ldr	r3, [r3, #20]
 800528a:	f003 0301 	and.w	r3, r3, #1
 800528e:	431a      	orrs	r2, r3
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	699b      	ldr	r3, [r3, #24]
 8005294:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005298:	431a      	orrs	r2, r3
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	69db      	ldr	r3, [r3, #28]
 800529e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80052a2:	431a      	orrs	r2, r3
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6a1b      	ldr	r3, [r3, #32]
 80052a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80052ac:	ea42 0103 	orr.w	r1, r2, r3
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052b4:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	430a      	orrs	r2, r1
 80052be:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	699b      	ldr	r3, [r3, #24]
 80052c4:	0c1b      	lsrs	r3, r3, #16
 80052c6:	f003 0104 	and.w	r1, r3, #4
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052ce:	f003 0210 	and.w	r2, r3, #16
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	430a      	orrs	r2, r1
 80052d8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	69da      	ldr	r2, [r3, #28]
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80052e8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2200      	movs	r2, #0
 80052ee:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2201      	movs	r2, #1
 80052f4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80052f8:	2300      	movs	r3, #0
}
 80052fa:	4618      	mov	r0, r3
 80052fc:	3708      	adds	r7, #8
 80052fe:	46bd      	mov	sp, r7
 8005300:	bd80      	pop	{r7, pc}

08005302 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005302:	b580      	push	{r7, lr}
 8005304:	b088      	sub	sp, #32
 8005306:	af00      	add	r7, sp, #0
 8005308:	60f8      	str	r0, [r7, #12]
 800530a:	60b9      	str	r1, [r7, #8]
 800530c:	603b      	str	r3, [r7, #0]
 800530e:	4613      	mov	r3, r2
 8005310:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005312:	f7fd fe6b 	bl	8002fec <HAL_GetTick>
 8005316:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8005318:	88fb      	ldrh	r3, [r7, #6]
 800531a:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005322:	b2db      	uxtb	r3, r3
 8005324:	2b01      	cmp	r3, #1
 8005326:	d001      	beq.n	800532c <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8005328:	2302      	movs	r3, #2
 800532a:	e12a      	b.n	8005582 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 800532c:	68bb      	ldr	r3, [r7, #8]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d002      	beq.n	8005338 <HAL_SPI_Transmit+0x36>
 8005332:	88fb      	ldrh	r3, [r7, #6]
 8005334:	2b00      	cmp	r3, #0
 8005336:	d101      	bne.n	800533c <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8005338:	2301      	movs	r3, #1
 800533a:	e122      	b.n	8005582 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005342:	2b01      	cmp	r3, #1
 8005344:	d101      	bne.n	800534a <HAL_SPI_Transmit+0x48>
 8005346:	2302      	movs	r3, #2
 8005348:	e11b      	b.n	8005582 <HAL_SPI_Transmit+0x280>
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	2201      	movs	r2, #1
 800534e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	2203      	movs	r2, #3
 8005356:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	2200      	movs	r2, #0
 800535e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	68ba      	ldr	r2, [r7, #8]
 8005364:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	88fa      	ldrh	r2, [r7, #6]
 800536a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	88fa      	ldrh	r2, [r7, #6]
 8005370:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	2200      	movs	r2, #0
 8005376:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	2200      	movs	r2, #0
 800537c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	2200      	movs	r2, #0
 8005382:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	2200      	movs	r2, #0
 8005388:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	2200      	movs	r2, #0
 800538e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	689b      	ldr	r3, [r3, #8]
 8005394:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005398:	d10f      	bne.n	80053ba <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	681a      	ldr	r2, [r3, #0]
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80053a8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	681a      	ldr	r2, [r3, #0]
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80053b8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053c4:	2b40      	cmp	r3, #64	@ 0x40
 80053c6:	d007      	beq.n	80053d8 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	681a      	ldr	r2, [r3, #0]
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80053d6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	68db      	ldr	r3, [r3, #12]
 80053dc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80053e0:	d152      	bne.n	8005488 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	685b      	ldr	r3, [r3, #4]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d002      	beq.n	80053f0 <HAL_SPI_Transmit+0xee>
 80053ea:	8b7b      	ldrh	r3, [r7, #26]
 80053ec:	2b01      	cmp	r3, #1
 80053ee:	d145      	bne.n	800547c <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053f4:	881a      	ldrh	r2, [r3, #0]
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005400:	1c9a      	adds	r2, r3, #2
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800540a:	b29b      	uxth	r3, r3
 800540c:	3b01      	subs	r3, #1
 800540e:	b29a      	uxth	r2, r3
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005414:	e032      	b.n	800547c <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	689b      	ldr	r3, [r3, #8]
 800541c:	f003 0302 	and.w	r3, r3, #2
 8005420:	2b02      	cmp	r3, #2
 8005422:	d112      	bne.n	800544a <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005428:	881a      	ldrh	r2, [r3, #0]
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005434:	1c9a      	adds	r2, r3, #2
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800543e:	b29b      	uxth	r3, r3
 8005440:	3b01      	subs	r3, #1
 8005442:	b29a      	uxth	r2, r3
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005448:	e018      	b.n	800547c <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800544a:	f7fd fdcf 	bl	8002fec <HAL_GetTick>
 800544e:	4602      	mov	r2, r0
 8005450:	69fb      	ldr	r3, [r7, #28]
 8005452:	1ad3      	subs	r3, r2, r3
 8005454:	683a      	ldr	r2, [r7, #0]
 8005456:	429a      	cmp	r2, r3
 8005458:	d803      	bhi.n	8005462 <HAL_SPI_Transmit+0x160>
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005460:	d102      	bne.n	8005468 <HAL_SPI_Transmit+0x166>
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d109      	bne.n	800547c <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	2201      	movs	r2, #1
 800546c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	2200      	movs	r2, #0
 8005474:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005478:	2303      	movs	r3, #3
 800547a:	e082      	b.n	8005582 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005480:	b29b      	uxth	r3, r3
 8005482:	2b00      	cmp	r3, #0
 8005484:	d1c7      	bne.n	8005416 <HAL_SPI_Transmit+0x114>
 8005486:	e053      	b.n	8005530 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	685b      	ldr	r3, [r3, #4]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d002      	beq.n	8005496 <HAL_SPI_Transmit+0x194>
 8005490:	8b7b      	ldrh	r3, [r7, #26]
 8005492:	2b01      	cmp	r3, #1
 8005494:	d147      	bne.n	8005526 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	330c      	adds	r3, #12
 80054a0:	7812      	ldrb	r2, [r2, #0]
 80054a2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054a8:	1c5a      	adds	r2, r3, #1
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80054b2:	b29b      	uxth	r3, r3
 80054b4:	3b01      	subs	r3, #1
 80054b6:	b29a      	uxth	r2, r3
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80054bc:	e033      	b.n	8005526 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	689b      	ldr	r3, [r3, #8]
 80054c4:	f003 0302 	and.w	r3, r3, #2
 80054c8:	2b02      	cmp	r3, #2
 80054ca:	d113      	bne.n	80054f4 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	330c      	adds	r3, #12
 80054d6:	7812      	ldrb	r2, [r2, #0]
 80054d8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054de:	1c5a      	adds	r2, r3, #1
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80054e8:	b29b      	uxth	r3, r3
 80054ea:	3b01      	subs	r3, #1
 80054ec:	b29a      	uxth	r2, r3
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	86da      	strh	r2, [r3, #54]	@ 0x36
 80054f2:	e018      	b.n	8005526 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80054f4:	f7fd fd7a 	bl	8002fec <HAL_GetTick>
 80054f8:	4602      	mov	r2, r0
 80054fa:	69fb      	ldr	r3, [r7, #28]
 80054fc:	1ad3      	subs	r3, r2, r3
 80054fe:	683a      	ldr	r2, [r7, #0]
 8005500:	429a      	cmp	r2, r3
 8005502:	d803      	bhi.n	800550c <HAL_SPI_Transmit+0x20a>
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	f1b3 3fff 	cmp.w	r3, #4294967295
 800550a:	d102      	bne.n	8005512 <HAL_SPI_Transmit+0x210>
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d109      	bne.n	8005526 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	2201      	movs	r2, #1
 8005516:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	2200      	movs	r2, #0
 800551e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005522:	2303      	movs	r3, #3
 8005524:	e02d      	b.n	8005582 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800552a:	b29b      	uxth	r3, r3
 800552c:	2b00      	cmp	r3, #0
 800552e:	d1c6      	bne.n	80054be <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005530:	69fa      	ldr	r2, [r7, #28]
 8005532:	6839      	ldr	r1, [r7, #0]
 8005534:	68f8      	ldr	r0, [r7, #12]
 8005536:	f000 f8b1 	bl	800569c <SPI_EndRxTxTransaction>
 800553a:	4603      	mov	r3, r0
 800553c:	2b00      	cmp	r3, #0
 800553e:	d002      	beq.n	8005546 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	2220      	movs	r2, #32
 8005544:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	689b      	ldr	r3, [r3, #8]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d10a      	bne.n	8005564 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800554e:	2300      	movs	r3, #0
 8005550:	617b      	str	r3, [r7, #20]
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	68db      	ldr	r3, [r3, #12]
 8005558:	617b      	str	r3, [r7, #20]
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	689b      	ldr	r3, [r3, #8]
 8005560:	617b      	str	r3, [r7, #20]
 8005562:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	2201      	movs	r2, #1
 8005568:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	2200      	movs	r2, #0
 8005570:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005578:	2b00      	cmp	r3, #0
 800557a:	d001      	beq.n	8005580 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 800557c:	2301      	movs	r3, #1
 800557e:	e000      	b.n	8005582 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8005580:	2300      	movs	r3, #0
  }
}
 8005582:	4618      	mov	r0, r3
 8005584:	3720      	adds	r7, #32
 8005586:	46bd      	mov	sp, r7
 8005588:	bd80      	pop	{r7, pc}
	...

0800558c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800558c:	b580      	push	{r7, lr}
 800558e:	b088      	sub	sp, #32
 8005590:	af00      	add	r7, sp, #0
 8005592:	60f8      	str	r0, [r7, #12]
 8005594:	60b9      	str	r1, [r7, #8]
 8005596:	603b      	str	r3, [r7, #0]
 8005598:	4613      	mov	r3, r2
 800559a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800559c:	f7fd fd26 	bl	8002fec <HAL_GetTick>
 80055a0:	4602      	mov	r2, r0
 80055a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055a4:	1a9b      	subs	r3, r3, r2
 80055a6:	683a      	ldr	r2, [r7, #0]
 80055a8:	4413      	add	r3, r2
 80055aa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80055ac:	f7fd fd1e 	bl	8002fec <HAL_GetTick>
 80055b0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80055b2:	4b39      	ldr	r3, [pc, #228]	@ (8005698 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	015b      	lsls	r3, r3, #5
 80055b8:	0d1b      	lsrs	r3, r3, #20
 80055ba:	69fa      	ldr	r2, [r7, #28]
 80055bc:	fb02 f303 	mul.w	r3, r2, r3
 80055c0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80055c2:	e054      	b.n	800566e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055ca:	d050      	beq.n	800566e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80055cc:	f7fd fd0e 	bl	8002fec <HAL_GetTick>
 80055d0:	4602      	mov	r2, r0
 80055d2:	69bb      	ldr	r3, [r7, #24]
 80055d4:	1ad3      	subs	r3, r2, r3
 80055d6:	69fa      	ldr	r2, [r7, #28]
 80055d8:	429a      	cmp	r2, r3
 80055da:	d902      	bls.n	80055e2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80055dc:	69fb      	ldr	r3, [r7, #28]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d13d      	bne.n	800565e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	685a      	ldr	r2, [r3, #4]
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80055f0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	685b      	ldr	r3, [r3, #4]
 80055f6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80055fa:	d111      	bne.n	8005620 <SPI_WaitFlagStateUntilTimeout+0x94>
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	689b      	ldr	r3, [r3, #8]
 8005600:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005604:	d004      	beq.n	8005610 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	689b      	ldr	r3, [r3, #8]
 800560a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800560e:	d107      	bne.n	8005620 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	681a      	ldr	r2, [r3, #0]
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800561e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005624:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005628:	d10f      	bne.n	800564a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	681a      	ldr	r2, [r3, #0]
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005638:	601a      	str	r2, [r3, #0]
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	681a      	ldr	r2, [r3, #0]
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005648:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	2201      	movs	r2, #1
 800564e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	2200      	movs	r2, #0
 8005656:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800565a:	2303      	movs	r3, #3
 800565c:	e017      	b.n	800568e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800565e:	697b      	ldr	r3, [r7, #20]
 8005660:	2b00      	cmp	r3, #0
 8005662:	d101      	bne.n	8005668 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005664:	2300      	movs	r3, #0
 8005666:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005668:	697b      	ldr	r3, [r7, #20]
 800566a:	3b01      	subs	r3, #1
 800566c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	689a      	ldr	r2, [r3, #8]
 8005674:	68bb      	ldr	r3, [r7, #8]
 8005676:	4013      	ands	r3, r2
 8005678:	68ba      	ldr	r2, [r7, #8]
 800567a:	429a      	cmp	r2, r3
 800567c:	bf0c      	ite	eq
 800567e:	2301      	moveq	r3, #1
 8005680:	2300      	movne	r3, #0
 8005682:	b2db      	uxtb	r3, r3
 8005684:	461a      	mov	r2, r3
 8005686:	79fb      	ldrb	r3, [r7, #7]
 8005688:	429a      	cmp	r2, r3
 800568a:	d19b      	bne.n	80055c4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800568c:	2300      	movs	r3, #0
}
 800568e:	4618      	mov	r0, r3
 8005690:	3720      	adds	r7, #32
 8005692:	46bd      	mov	sp, r7
 8005694:	bd80      	pop	{r7, pc}
 8005696:	bf00      	nop
 8005698:	2000001c 	.word	0x2000001c

0800569c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800569c:	b580      	push	{r7, lr}
 800569e:	b088      	sub	sp, #32
 80056a0:	af02      	add	r7, sp, #8
 80056a2:	60f8      	str	r0, [r7, #12]
 80056a4:	60b9      	str	r1, [r7, #8]
 80056a6:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	9300      	str	r3, [sp, #0]
 80056ac:	68bb      	ldr	r3, [r7, #8]
 80056ae:	2201      	movs	r2, #1
 80056b0:	2102      	movs	r1, #2
 80056b2:	68f8      	ldr	r0, [r7, #12]
 80056b4:	f7ff ff6a 	bl	800558c <SPI_WaitFlagStateUntilTimeout>
 80056b8:	4603      	mov	r3, r0
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d007      	beq.n	80056ce <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056c2:	f043 0220 	orr.w	r2, r3, #32
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80056ca:	2303      	movs	r3, #3
 80056cc:	e032      	b.n	8005734 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80056ce:	4b1b      	ldr	r3, [pc, #108]	@ (800573c <SPI_EndRxTxTransaction+0xa0>)
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	4a1b      	ldr	r2, [pc, #108]	@ (8005740 <SPI_EndRxTxTransaction+0xa4>)
 80056d4:	fba2 2303 	umull	r2, r3, r2, r3
 80056d8:	0d5b      	lsrs	r3, r3, #21
 80056da:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80056de:	fb02 f303 	mul.w	r3, r2, r3
 80056e2:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	685b      	ldr	r3, [r3, #4]
 80056e8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80056ec:	d112      	bne.n	8005714 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	9300      	str	r3, [sp, #0]
 80056f2:	68bb      	ldr	r3, [r7, #8]
 80056f4:	2200      	movs	r2, #0
 80056f6:	2180      	movs	r1, #128	@ 0x80
 80056f8:	68f8      	ldr	r0, [r7, #12]
 80056fa:	f7ff ff47 	bl	800558c <SPI_WaitFlagStateUntilTimeout>
 80056fe:	4603      	mov	r3, r0
 8005700:	2b00      	cmp	r3, #0
 8005702:	d016      	beq.n	8005732 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005708:	f043 0220 	orr.w	r2, r3, #32
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005710:	2303      	movs	r3, #3
 8005712:	e00f      	b.n	8005734 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005714:	697b      	ldr	r3, [r7, #20]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d00a      	beq.n	8005730 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800571a:	697b      	ldr	r3, [r7, #20]
 800571c:	3b01      	subs	r3, #1
 800571e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	689b      	ldr	r3, [r3, #8]
 8005726:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800572a:	2b80      	cmp	r3, #128	@ 0x80
 800572c:	d0f2      	beq.n	8005714 <SPI_EndRxTxTransaction+0x78>
 800572e:	e000      	b.n	8005732 <SPI_EndRxTxTransaction+0x96>
        break;
 8005730:	bf00      	nop
  }

  return HAL_OK;
 8005732:	2300      	movs	r3, #0
}
 8005734:	4618      	mov	r0, r3
 8005736:	3718      	adds	r7, #24
 8005738:	46bd      	mov	sp, r7
 800573a:	bd80      	pop	{r7, pc}
 800573c:	2000001c 	.word	0x2000001c
 8005740:	165e9f81 	.word	0x165e9f81

08005744 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005744:	b580      	push	{r7, lr}
 8005746:	b082      	sub	sp, #8
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d101      	bne.n	8005756 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005752:	2301      	movs	r3, #1
 8005754:	e041      	b.n	80057da <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800575c:	b2db      	uxtb	r3, r3
 800575e:	2b00      	cmp	r3, #0
 8005760:	d106      	bne.n	8005770 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	2200      	movs	r2, #0
 8005766:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800576a:	6878      	ldr	r0, [r7, #4]
 800576c:	f7fd f88e 	bl	800288c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2202      	movs	r2, #2
 8005774:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681a      	ldr	r2, [r3, #0]
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	3304      	adds	r3, #4
 8005780:	4619      	mov	r1, r3
 8005782:	4610      	mov	r0, r2
 8005784:	f000 fd00 	bl	8006188 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2201      	movs	r2, #1
 800578c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2201      	movs	r2, #1
 8005794:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2201      	movs	r2, #1
 800579c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2201      	movs	r2, #1
 80057a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2201      	movs	r2, #1
 80057ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2201      	movs	r2, #1
 80057b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2201      	movs	r2, #1
 80057bc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2201      	movs	r2, #1
 80057c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2201      	movs	r2, #1
 80057cc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2201      	movs	r2, #1
 80057d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80057d8:	2300      	movs	r3, #0
}
 80057da:	4618      	mov	r0, r3
 80057dc:	3708      	adds	r7, #8
 80057de:	46bd      	mov	sp, r7
 80057e0:	bd80      	pop	{r7, pc}
	...

080057e4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80057e4:	b480      	push	{r7}
 80057e6:	b085      	sub	sp, #20
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80057f2:	b2db      	uxtb	r3, r3
 80057f4:	2b01      	cmp	r3, #1
 80057f6:	d001      	beq.n	80057fc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80057f8:	2301      	movs	r3, #1
 80057fa:	e04e      	b.n	800589a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2202      	movs	r2, #2
 8005800:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	68da      	ldr	r2, [r3, #12]
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f042 0201 	orr.w	r2, r2, #1
 8005812:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	4a23      	ldr	r2, [pc, #140]	@ (80058a8 <HAL_TIM_Base_Start_IT+0xc4>)
 800581a:	4293      	cmp	r3, r2
 800581c:	d022      	beq.n	8005864 <HAL_TIM_Base_Start_IT+0x80>
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005826:	d01d      	beq.n	8005864 <HAL_TIM_Base_Start_IT+0x80>
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	4a1f      	ldr	r2, [pc, #124]	@ (80058ac <HAL_TIM_Base_Start_IT+0xc8>)
 800582e:	4293      	cmp	r3, r2
 8005830:	d018      	beq.n	8005864 <HAL_TIM_Base_Start_IT+0x80>
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	4a1e      	ldr	r2, [pc, #120]	@ (80058b0 <HAL_TIM_Base_Start_IT+0xcc>)
 8005838:	4293      	cmp	r3, r2
 800583a:	d013      	beq.n	8005864 <HAL_TIM_Base_Start_IT+0x80>
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	4a1c      	ldr	r2, [pc, #112]	@ (80058b4 <HAL_TIM_Base_Start_IT+0xd0>)
 8005842:	4293      	cmp	r3, r2
 8005844:	d00e      	beq.n	8005864 <HAL_TIM_Base_Start_IT+0x80>
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	4a1b      	ldr	r2, [pc, #108]	@ (80058b8 <HAL_TIM_Base_Start_IT+0xd4>)
 800584c:	4293      	cmp	r3, r2
 800584e:	d009      	beq.n	8005864 <HAL_TIM_Base_Start_IT+0x80>
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	4a19      	ldr	r2, [pc, #100]	@ (80058bc <HAL_TIM_Base_Start_IT+0xd8>)
 8005856:	4293      	cmp	r3, r2
 8005858:	d004      	beq.n	8005864 <HAL_TIM_Base_Start_IT+0x80>
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	4a18      	ldr	r2, [pc, #96]	@ (80058c0 <HAL_TIM_Base_Start_IT+0xdc>)
 8005860:	4293      	cmp	r3, r2
 8005862:	d111      	bne.n	8005888 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	689b      	ldr	r3, [r3, #8]
 800586a:	f003 0307 	and.w	r3, r3, #7
 800586e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	2b06      	cmp	r3, #6
 8005874:	d010      	beq.n	8005898 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	681a      	ldr	r2, [r3, #0]
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f042 0201 	orr.w	r2, r2, #1
 8005884:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005886:	e007      	b.n	8005898 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	681a      	ldr	r2, [r3, #0]
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f042 0201 	orr.w	r2, r2, #1
 8005896:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005898:	2300      	movs	r3, #0
}
 800589a:	4618      	mov	r0, r3
 800589c:	3714      	adds	r7, #20
 800589e:	46bd      	mov	sp, r7
 80058a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a4:	4770      	bx	lr
 80058a6:	bf00      	nop
 80058a8:	40010000 	.word	0x40010000
 80058ac:	40000400 	.word	0x40000400
 80058b0:	40000800 	.word	0x40000800
 80058b4:	40000c00 	.word	0x40000c00
 80058b8:	40010400 	.word	0x40010400
 80058bc:	40014000 	.word	0x40014000
 80058c0:	40001800 	.word	0x40001800

080058c4 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80058c4:	b480      	push	{r7}
 80058c6:	b083      	sub	sp, #12
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	68da      	ldr	r2, [r3, #12]
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f022 0201 	bic.w	r2, r2, #1
 80058da:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	6a1a      	ldr	r2, [r3, #32]
 80058e2:	f241 1311 	movw	r3, #4369	@ 0x1111
 80058e6:	4013      	ands	r3, r2
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d10f      	bne.n	800590c <HAL_TIM_Base_Stop_IT+0x48>
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	6a1a      	ldr	r2, [r3, #32]
 80058f2:	f240 4344 	movw	r3, #1092	@ 0x444
 80058f6:	4013      	ands	r3, r2
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d107      	bne.n	800590c <HAL_TIM_Base_Stop_IT+0x48>
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	681a      	ldr	r2, [r3, #0]
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f022 0201 	bic.w	r2, r2, #1
 800590a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2201      	movs	r2, #1
 8005910:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8005914:	2300      	movs	r3, #0
}
 8005916:	4618      	mov	r0, r3
 8005918:	370c      	adds	r7, #12
 800591a:	46bd      	mov	sp, r7
 800591c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005920:	4770      	bx	lr

08005922 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005922:	b580      	push	{r7, lr}
 8005924:	b082      	sub	sp, #8
 8005926:	af00      	add	r7, sp, #0
 8005928:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	2b00      	cmp	r3, #0
 800592e:	d101      	bne.n	8005934 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005930:	2301      	movs	r3, #1
 8005932:	e041      	b.n	80059b8 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800593a:	b2db      	uxtb	r3, r3
 800593c:	2b00      	cmp	r3, #0
 800593e:	d106      	bne.n	800594e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2200      	movs	r2, #0
 8005944:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005948:	6878      	ldr	r0, [r7, #4]
 800594a:	f000 f839 	bl	80059c0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	2202      	movs	r2, #2
 8005952:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681a      	ldr	r2, [r3, #0]
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	3304      	adds	r3, #4
 800595e:	4619      	mov	r1, r3
 8005960:	4610      	mov	r0, r2
 8005962:	f000 fc11 	bl	8006188 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2201      	movs	r2, #1
 800596a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	2201      	movs	r2, #1
 8005972:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2201      	movs	r2, #1
 800597a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	2201      	movs	r2, #1
 8005982:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2201      	movs	r2, #1
 800598a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	2201      	movs	r2, #1
 8005992:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	2201      	movs	r2, #1
 800599a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2201      	movs	r2, #1
 80059a2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2201      	movs	r2, #1
 80059aa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	2201      	movs	r2, #1
 80059b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80059b6:	2300      	movs	r3, #0
}
 80059b8:	4618      	mov	r0, r3
 80059ba:	3708      	adds	r7, #8
 80059bc:	46bd      	mov	sp, r7
 80059be:	bd80      	pop	{r7, pc}

080059c0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80059c0:	b480      	push	{r7}
 80059c2:	b083      	sub	sp, #12
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80059c8:	bf00      	nop
 80059ca:	370c      	adds	r7, #12
 80059cc:	46bd      	mov	sp, r7
 80059ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d2:	4770      	bx	lr

080059d4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b084      	sub	sp, #16
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
 80059dc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d109      	bne.n	80059f8 <HAL_TIM_PWM_Start+0x24>
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80059ea:	b2db      	uxtb	r3, r3
 80059ec:	2b01      	cmp	r3, #1
 80059ee:	bf14      	ite	ne
 80059f0:	2301      	movne	r3, #1
 80059f2:	2300      	moveq	r3, #0
 80059f4:	b2db      	uxtb	r3, r3
 80059f6:	e022      	b.n	8005a3e <HAL_TIM_PWM_Start+0x6a>
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	2b04      	cmp	r3, #4
 80059fc:	d109      	bne.n	8005a12 <HAL_TIM_PWM_Start+0x3e>
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005a04:	b2db      	uxtb	r3, r3
 8005a06:	2b01      	cmp	r3, #1
 8005a08:	bf14      	ite	ne
 8005a0a:	2301      	movne	r3, #1
 8005a0c:	2300      	moveq	r3, #0
 8005a0e:	b2db      	uxtb	r3, r3
 8005a10:	e015      	b.n	8005a3e <HAL_TIM_PWM_Start+0x6a>
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	2b08      	cmp	r3, #8
 8005a16:	d109      	bne.n	8005a2c <HAL_TIM_PWM_Start+0x58>
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005a1e:	b2db      	uxtb	r3, r3
 8005a20:	2b01      	cmp	r3, #1
 8005a22:	bf14      	ite	ne
 8005a24:	2301      	movne	r3, #1
 8005a26:	2300      	moveq	r3, #0
 8005a28:	b2db      	uxtb	r3, r3
 8005a2a:	e008      	b.n	8005a3e <HAL_TIM_PWM_Start+0x6a>
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005a32:	b2db      	uxtb	r3, r3
 8005a34:	2b01      	cmp	r3, #1
 8005a36:	bf14      	ite	ne
 8005a38:	2301      	movne	r3, #1
 8005a3a:	2300      	moveq	r3, #0
 8005a3c:	b2db      	uxtb	r3, r3
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d001      	beq.n	8005a46 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005a42:	2301      	movs	r3, #1
 8005a44:	e07c      	b.n	8005b40 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d104      	bne.n	8005a56 <HAL_TIM_PWM_Start+0x82>
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2202      	movs	r2, #2
 8005a50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005a54:	e013      	b.n	8005a7e <HAL_TIM_PWM_Start+0xaa>
 8005a56:	683b      	ldr	r3, [r7, #0]
 8005a58:	2b04      	cmp	r3, #4
 8005a5a:	d104      	bne.n	8005a66 <HAL_TIM_PWM_Start+0x92>
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2202      	movs	r2, #2
 8005a60:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005a64:	e00b      	b.n	8005a7e <HAL_TIM_PWM_Start+0xaa>
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	2b08      	cmp	r3, #8
 8005a6a:	d104      	bne.n	8005a76 <HAL_TIM_PWM_Start+0xa2>
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2202      	movs	r2, #2
 8005a70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005a74:	e003      	b.n	8005a7e <HAL_TIM_PWM_Start+0xaa>
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	2202      	movs	r2, #2
 8005a7a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	2201      	movs	r2, #1
 8005a84:	6839      	ldr	r1, [r7, #0]
 8005a86:	4618      	mov	r0, r3
 8005a88:	f000 fe74 	bl	8006774 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	4a2d      	ldr	r2, [pc, #180]	@ (8005b48 <HAL_TIM_PWM_Start+0x174>)
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d004      	beq.n	8005aa0 <HAL_TIM_PWM_Start+0xcc>
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	4a2c      	ldr	r2, [pc, #176]	@ (8005b4c <HAL_TIM_PWM_Start+0x178>)
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	d101      	bne.n	8005aa4 <HAL_TIM_PWM_Start+0xd0>
 8005aa0:	2301      	movs	r3, #1
 8005aa2:	e000      	b.n	8005aa6 <HAL_TIM_PWM_Start+0xd2>
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d007      	beq.n	8005aba <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005ab8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	4a22      	ldr	r2, [pc, #136]	@ (8005b48 <HAL_TIM_PWM_Start+0x174>)
 8005ac0:	4293      	cmp	r3, r2
 8005ac2:	d022      	beq.n	8005b0a <HAL_TIM_PWM_Start+0x136>
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005acc:	d01d      	beq.n	8005b0a <HAL_TIM_PWM_Start+0x136>
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	4a1f      	ldr	r2, [pc, #124]	@ (8005b50 <HAL_TIM_PWM_Start+0x17c>)
 8005ad4:	4293      	cmp	r3, r2
 8005ad6:	d018      	beq.n	8005b0a <HAL_TIM_PWM_Start+0x136>
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	4a1d      	ldr	r2, [pc, #116]	@ (8005b54 <HAL_TIM_PWM_Start+0x180>)
 8005ade:	4293      	cmp	r3, r2
 8005ae0:	d013      	beq.n	8005b0a <HAL_TIM_PWM_Start+0x136>
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	4a1c      	ldr	r2, [pc, #112]	@ (8005b58 <HAL_TIM_PWM_Start+0x184>)
 8005ae8:	4293      	cmp	r3, r2
 8005aea:	d00e      	beq.n	8005b0a <HAL_TIM_PWM_Start+0x136>
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	4a16      	ldr	r2, [pc, #88]	@ (8005b4c <HAL_TIM_PWM_Start+0x178>)
 8005af2:	4293      	cmp	r3, r2
 8005af4:	d009      	beq.n	8005b0a <HAL_TIM_PWM_Start+0x136>
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	4a18      	ldr	r2, [pc, #96]	@ (8005b5c <HAL_TIM_PWM_Start+0x188>)
 8005afc:	4293      	cmp	r3, r2
 8005afe:	d004      	beq.n	8005b0a <HAL_TIM_PWM_Start+0x136>
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	4a16      	ldr	r2, [pc, #88]	@ (8005b60 <HAL_TIM_PWM_Start+0x18c>)
 8005b06:	4293      	cmp	r3, r2
 8005b08:	d111      	bne.n	8005b2e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	689b      	ldr	r3, [r3, #8]
 8005b10:	f003 0307 	and.w	r3, r3, #7
 8005b14:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	2b06      	cmp	r3, #6
 8005b1a:	d010      	beq.n	8005b3e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	681a      	ldr	r2, [r3, #0]
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f042 0201 	orr.w	r2, r2, #1
 8005b2a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b2c:	e007      	b.n	8005b3e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	681a      	ldr	r2, [r3, #0]
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f042 0201 	orr.w	r2, r2, #1
 8005b3c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005b3e:	2300      	movs	r3, #0
}
 8005b40:	4618      	mov	r0, r3
 8005b42:	3710      	adds	r7, #16
 8005b44:	46bd      	mov	sp, r7
 8005b46:	bd80      	pop	{r7, pc}
 8005b48:	40010000 	.word	0x40010000
 8005b4c:	40010400 	.word	0x40010400
 8005b50:	40000400 	.word	0x40000400
 8005b54:	40000800 	.word	0x40000800
 8005b58:	40000c00 	.word	0x40000c00
 8005b5c:	40014000 	.word	0x40014000
 8005b60:	40001800 	.word	0x40001800

08005b64 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005b64:	b580      	push	{r7, lr}
 8005b66:	b082      	sub	sp, #8
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
 8005b6c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	2200      	movs	r2, #0
 8005b74:	6839      	ldr	r1, [r7, #0]
 8005b76:	4618      	mov	r0, r3
 8005b78:	f000 fdfc 	bl	8006774 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	4a2e      	ldr	r2, [pc, #184]	@ (8005c3c <HAL_TIM_PWM_Stop+0xd8>)
 8005b82:	4293      	cmp	r3, r2
 8005b84:	d004      	beq.n	8005b90 <HAL_TIM_PWM_Stop+0x2c>
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	4a2d      	ldr	r2, [pc, #180]	@ (8005c40 <HAL_TIM_PWM_Stop+0xdc>)
 8005b8c:	4293      	cmp	r3, r2
 8005b8e:	d101      	bne.n	8005b94 <HAL_TIM_PWM_Stop+0x30>
 8005b90:	2301      	movs	r3, #1
 8005b92:	e000      	b.n	8005b96 <HAL_TIM_PWM_Stop+0x32>
 8005b94:	2300      	movs	r3, #0
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d017      	beq.n	8005bca <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	6a1a      	ldr	r2, [r3, #32]
 8005ba0:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005ba4:	4013      	ands	r3, r2
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d10f      	bne.n	8005bca <HAL_TIM_PWM_Stop+0x66>
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	6a1a      	ldr	r2, [r3, #32]
 8005bb0:	f240 4344 	movw	r3, #1092	@ 0x444
 8005bb4:	4013      	ands	r3, r2
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d107      	bne.n	8005bca <HAL_TIM_PWM_Stop+0x66>
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005bc8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	6a1a      	ldr	r2, [r3, #32]
 8005bd0:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005bd4:	4013      	ands	r3, r2
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d10f      	bne.n	8005bfa <HAL_TIM_PWM_Stop+0x96>
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	6a1a      	ldr	r2, [r3, #32]
 8005be0:	f240 4344 	movw	r3, #1092	@ 0x444
 8005be4:	4013      	ands	r3, r2
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d107      	bne.n	8005bfa <HAL_TIM_PWM_Stop+0x96>
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	681a      	ldr	r2, [r3, #0]
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f022 0201 	bic.w	r2, r2, #1
 8005bf8:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d104      	bne.n	8005c0a <HAL_TIM_PWM_Stop+0xa6>
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2201      	movs	r2, #1
 8005c04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005c08:	e013      	b.n	8005c32 <HAL_TIM_PWM_Stop+0xce>
 8005c0a:	683b      	ldr	r3, [r7, #0]
 8005c0c:	2b04      	cmp	r3, #4
 8005c0e:	d104      	bne.n	8005c1a <HAL_TIM_PWM_Stop+0xb6>
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2201      	movs	r2, #1
 8005c14:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005c18:	e00b      	b.n	8005c32 <HAL_TIM_PWM_Stop+0xce>
 8005c1a:	683b      	ldr	r3, [r7, #0]
 8005c1c:	2b08      	cmp	r3, #8
 8005c1e:	d104      	bne.n	8005c2a <HAL_TIM_PWM_Stop+0xc6>
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2201      	movs	r2, #1
 8005c24:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005c28:	e003      	b.n	8005c32 <HAL_TIM_PWM_Stop+0xce>
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	2201      	movs	r2, #1
 8005c2e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 8005c32:	2300      	movs	r3, #0
}
 8005c34:	4618      	mov	r0, r3
 8005c36:	3708      	adds	r7, #8
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	bd80      	pop	{r7, pc}
 8005c3c:	40010000 	.word	0x40010000
 8005c40:	40010400 	.word	0x40010400

08005c44 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005c44:	b580      	push	{r7, lr}
 8005c46:	b084      	sub	sp, #16
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	68db      	ldr	r3, [r3, #12]
 8005c52:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	691b      	ldr	r3, [r3, #16]
 8005c5a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005c5c:	68bb      	ldr	r3, [r7, #8]
 8005c5e:	f003 0302 	and.w	r3, r3, #2
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d020      	beq.n	8005ca8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	f003 0302 	and.w	r3, r3, #2
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d01b      	beq.n	8005ca8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f06f 0202 	mvn.w	r2, #2
 8005c78:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	2201      	movs	r2, #1
 8005c7e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	699b      	ldr	r3, [r3, #24]
 8005c86:	f003 0303 	and.w	r3, r3, #3
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d003      	beq.n	8005c96 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005c8e:	6878      	ldr	r0, [r7, #4]
 8005c90:	f000 fa5b 	bl	800614a <HAL_TIM_IC_CaptureCallback>
 8005c94:	e005      	b.n	8005ca2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c96:	6878      	ldr	r0, [r7, #4]
 8005c98:	f000 fa4d 	bl	8006136 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c9c:	6878      	ldr	r0, [r7, #4]
 8005c9e:	f000 fa5e 	bl	800615e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005ca8:	68bb      	ldr	r3, [r7, #8]
 8005caa:	f003 0304 	and.w	r3, r3, #4
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d020      	beq.n	8005cf4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	f003 0304 	and.w	r3, r3, #4
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d01b      	beq.n	8005cf4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f06f 0204 	mvn.w	r2, #4
 8005cc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	2202      	movs	r2, #2
 8005cca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	699b      	ldr	r3, [r3, #24]
 8005cd2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d003      	beq.n	8005ce2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005cda:	6878      	ldr	r0, [r7, #4]
 8005cdc:	f000 fa35 	bl	800614a <HAL_TIM_IC_CaptureCallback>
 8005ce0:	e005      	b.n	8005cee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ce2:	6878      	ldr	r0, [r7, #4]
 8005ce4:	f000 fa27 	bl	8006136 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ce8:	6878      	ldr	r0, [r7, #4]
 8005cea:	f000 fa38 	bl	800615e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005cf4:	68bb      	ldr	r3, [r7, #8]
 8005cf6:	f003 0308 	and.w	r3, r3, #8
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d020      	beq.n	8005d40 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	f003 0308 	and.w	r3, r3, #8
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d01b      	beq.n	8005d40 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f06f 0208 	mvn.w	r2, #8
 8005d10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	2204      	movs	r2, #4
 8005d16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	69db      	ldr	r3, [r3, #28]
 8005d1e:	f003 0303 	and.w	r3, r3, #3
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d003      	beq.n	8005d2e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d26:	6878      	ldr	r0, [r7, #4]
 8005d28:	f000 fa0f 	bl	800614a <HAL_TIM_IC_CaptureCallback>
 8005d2c:	e005      	b.n	8005d3a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d2e:	6878      	ldr	r0, [r7, #4]
 8005d30:	f000 fa01 	bl	8006136 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d34:	6878      	ldr	r0, [r7, #4]
 8005d36:	f000 fa12 	bl	800615e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005d40:	68bb      	ldr	r3, [r7, #8]
 8005d42:	f003 0310 	and.w	r3, r3, #16
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d020      	beq.n	8005d8c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	f003 0310 	and.w	r3, r3, #16
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d01b      	beq.n	8005d8c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f06f 0210 	mvn.w	r2, #16
 8005d5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	2208      	movs	r2, #8
 8005d62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	69db      	ldr	r3, [r3, #28]
 8005d6a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d003      	beq.n	8005d7a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d72:	6878      	ldr	r0, [r7, #4]
 8005d74:	f000 f9e9 	bl	800614a <HAL_TIM_IC_CaptureCallback>
 8005d78:	e005      	b.n	8005d86 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d7a:	6878      	ldr	r0, [r7, #4]
 8005d7c:	f000 f9db 	bl	8006136 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d80:	6878      	ldr	r0, [r7, #4]
 8005d82:	f000 f9ec 	bl	800615e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	2200      	movs	r2, #0
 8005d8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005d8c:	68bb      	ldr	r3, [r7, #8]
 8005d8e:	f003 0301 	and.w	r3, r3, #1
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d00c      	beq.n	8005db0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	f003 0301 	and.w	r3, r3, #1
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d007      	beq.n	8005db0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f06f 0201 	mvn.w	r2, #1
 8005da8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005daa:	6878      	ldr	r0, [r7, #4]
 8005dac:	f7fb ffcc 	bl	8001d48 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005db0:	68bb      	ldr	r3, [r7, #8]
 8005db2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d00c      	beq.n	8005dd4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d007      	beq.n	8005dd4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005dcc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005dce:	6878      	ldr	r0, [r7, #4]
 8005dd0:	f000 fd7c 	bl	80068cc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005dd4:	68bb      	ldr	r3, [r7, #8]
 8005dd6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d00c      	beq.n	8005df8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d007      	beq.n	8005df8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005df0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005df2:	6878      	ldr	r0, [r7, #4]
 8005df4:	f000 f9bd 	bl	8006172 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005df8:	68bb      	ldr	r3, [r7, #8]
 8005dfa:	f003 0320 	and.w	r3, r3, #32
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d00c      	beq.n	8005e1c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	f003 0320 	and.w	r3, r3, #32
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d007      	beq.n	8005e1c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f06f 0220 	mvn.w	r2, #32
 8005e14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005e16:	6878      	ldr	r0, [r7, #4]
 8005e18:	f000 fd4e 	bl	80068b8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005e1c:	bf00      	nop
 8005e1e:	3710      	adds	r7, #16
 8005e20:	46bd      	mov	sp, r7
 8005e22:	bd80      	pop	{r7, pc}

08005e24 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005e24:	b580      	push	{r7, lr}
 8005e26:	b086      	sub	sp, #24
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	60f8      	str	r0, [r7, #12]
 8005e2c:	60b9      	str	r1, [r7, #8]
 8005e2e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005e30:	2300      	movs	r3, #0
 8005e32:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005e3a:	2b01      	cmp	r3, #1
 8005e3c:	d101      	bne.n	8005e42 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005e3e:	2302      	movs	r3, #2
 8005e40:	e0ae      	b.n	8005fa0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	2201      	movs	r2, #1
 8005e46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	2b0c      	cmp	r3, #12
 8005e4e:	f200 809f 	bhi.w	8005f90 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005e52:	a201      	add	r2, pc, #4	@ (adr r2, 8005e58 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005e54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e58:	08005e8d 	.word	0x08005e8d
 8005e5c:	08005f91 	.word	0x08005f91
 8005e60:	08005f91 	.word	0x08005f91
 8005e64:	08005f91 	.word	0x08005f91
 8005e68:	08005ecd 	.word	0x08005ecd
 8005e6c:	08005f91 	.word	0x08005f91
 8005e70:	08005f91 	.word	0x08005f91
 8005e74:	08005f91 	.word	0x08005f91
 8005e78:	08005f0f 	.word	0x08005f0f
 8005e7c:	08005f91 	.word	0x08005f91
 8005e80:	08005f91 	.word	0x08005f91
 8005e84:	08005f91 	.word	0x08005f91
 8005e88:	08005f4f 	.word	0x08005f4f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	68b9      	ldr	r1, [r7, #8]
 8005e92:	4618      	mov	r0, r3
 8005e94:	f000 fa24 	bl	80062e0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	699a      	ldr	r2, [r3, #24]
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f042 0208 	orr.w	r2, r2, #8
 8005ea6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	699a      	ldr	r2, [r3, #24]
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f022 0204 	bic.w	r2, r2, #4
 8005eb6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	6999      	ldr	r1, [r3, #24]
 8005ebe:	68bb      	ldr	r3, [r7, #8]
 8005ec0:	691a      	ldr	r2, [r3, #16]
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	430a      	orrs	r2, r1
 8005ec8:	619a      	str	r2, [r3, #24]
      break;
 8005eca:	e064      	b.n	8005f96 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	68b9      	ldr	r1, [r7, #8]
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	f000 fa74 	bl	80063c0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	699a      	ldr	r2, [r3, #24]
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005ee6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	699a      	ldr	r2, [r3, #24]
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005ef6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	6999      	ldr	r1, [r3, #24]
 8005efe:	68bb      	ldr	r3, [r7, #8]
 8005f00:	691b      	ldr	r3, [r3, #16]
 8005f02:	021a      	lsls	r2, r3, #8
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	430a      	orrs	r2, r1
 8005f0a:	619a      	str	r2, [r3, #24]
      break;
 8005f0c:	e043      	b.n	8005f96 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	68b9      	ldr	r1, [r7, #8]
 8005f14:	4618      	mov	r0, r3
 8005f16:	f000 fac9 	bl	80064ac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	69da      	ldr	r2, [r3, #28]
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f042 0208 	orr.w	r2, r2, #8
 8005f28:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	69da      	ldr	r2, [r3, #28]
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f022 0204 	bic.w	r2, r2, #4
 8005f38:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	69d9      	ldr	r1, [r3, #28]
 8005f40:	68bb      	ldr	r3, [r7, #8]
 8005f42:	691a      	ldr	r2, [r3, #16]
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	430a      	orrs	r2, r1
 8005f4a:	61da      	str	r2, [r3, #28]
      break;
 8005f4c:	e023      	b.n	8005f96 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	68b9      	ldr	r1, [r7, #8]
 8005f54:	4618      	mov	r0, r3
 8005f56:	f000 fb1d 	bl	8006594 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	69da      	ldr	r2, [r3, #28]
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005f68:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	69da      	ldr	r2, [r3, #28]
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005f78:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	69d9      	ldr	r1, [r3, #28]
 8005f80:	68bb      	ldr	r3, [r7, #8]
 8005f82:	691b      	ldr	r3, [r3, #16]
 8005f84:	021a      	lsls	r2, r3, #8
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	430a      	orrs	r2, r1
 8005f8c:	61da      	str	r2, [r3, #28]
      break;
 8005f8e:	e002      	b.n	8005f96 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005f90:	2301      	movs	r3, #1
 8005f92:	75fb      	strb	r3, [r7, #23]
      break;
 8005f94:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	2200      	movs	r2, #0
 8005f9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005f9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	3718      	adds	r7, #24
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	bd80      	pop	{r7, pc}

08005fa8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	b084      	sub	sp, #16
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
 8005fb0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005fbc:	2b01      	cmp	r3, #1
 8005fbe:	d101      	bne.n	8005fc4 <HAL_TIM_ConfigClockSource+0x1c>
 8005fc0:	2302      	movs	r3, #2
 8005fc2:	e0b4      	b.n	800612e <HAL_TIM_ConfigClockSource+0x186>
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2201      	movs	r2, #1
 8005fc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2202      	movs	r2, #2
 8005fd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	689b      	ldr	r3, [r3, #8]
 8005fda:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005fdc:	68bb      	ldr	r3, [r7, #8]
 8005fde:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005fe2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005fe4:	68bb      	ldr	r3, [r7, #8]
 8005fe6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005fea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	68ba      	ldr	r2, [r7, #8]
 8005ff2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005ffc:	d03e      	beq.n	800607c <HAL_TIM_ConfigClockSource+0xd4>
 8005ffe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006002:	f200 8087 	bhi.w	8006114 <HAL_TIM_ConfigClockSource+0x16c>
 8006006:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800600a:	f000 8086 	beq.w	800611a <HAL_TIM_ConfigClockSource+0x172>
 800600e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006012:	d87f      	bhi.n	8006114 <HAL_TIM_ConfigClockSource+0x16c>
 8006014:	2b70      	cmp	r3, #112	@ 0x70
 8006016:	d01a      	beq.n	800604e <HAL_TIM_ConfigClockSource+0xa6>
 8006018:	2b70      	cmp	r3, #112	@ 0x70
 800601a:	d87b      	bhi.n	8006114 <HAL_TIM_ConfigClockSource+0x16c>
 800601c:	2b60      	cmp	r3, #96	@ 0x60
 800601e:	d050      	beq.n	80060c2 <HAL_TIM_ConfigClockSource+0x11a>
 8006020:	2b60      	cmp	r3, #96	@ 0x60
 8006022:	d877      	bhi.n	8006114 <HAL_TIM_ConfigClockSource+0x16c>
 8006024:	2b50      	cmp	r3, #80	@ 0x50
 8006026:	d03c      	beq.n	80060a2 <HAL_TIM_ConfigClockSource+0xfa>
 8006028:	2b50      	cmp	r3, #80	@ 0x50
 800602a:	d873      	bhi.n	8006114 <HAL_TIM_ConfigClockSource+0x16c>
 800602c:	2b40      	cmp	r3, #64	@ 0x40
 800602e:	d058      	beq.n	80060e2 <HAL_TIM_ConfigClockSource+0x13a>
 8006030:	2b40      	cmp	r3, #64	@ 0x40
 8006032:	d86f      	bhi.n	8006114 <HAL_TIM_ConfigClockSource+0x16c>
 8006034:	2b30      	cmp	r3, #48	@ 0x30
 8006036:	d064      	beq.n	8006102 <HAL_TIM_ConfigClockSource+0x15a>
 8006038:	2b30      	cmp	r3, #48	@ 0x30
 800603a:	d86b      	bhi.n	8006114 <HAL_TIM_ConfigClockSource+0x16c>
 800603c:	2b20      	cmp	r3, #32
 800603e:	d060      	beq.n	8006102 <HAL_TIM_ConfigClockSource+0x15a>
 8006040:	2b20      	cmp	r3, #32
 8006042:	d867      	bhi.n	8006114 <HAL_TIM_ConfigClockSource+0x16c>
 8006044:	2b00      	cmp	r3, #0
 8006046:	d05c      	beq.n	8006102 <HAL_TIM_ConfigClockSource+0x15a>
 8006048:	2b10      	cmp	r3, #16
 800604a:	d05a      	beq.n	8006102 <HAL_TIM_ConfigClockSource+0x15a>
 800604c:	e062      	b.n	8006114 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006052:	683b      	ldr	r3, [r7, #0]
 8006054:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800605e:	f000 fb69 	bl	8006734 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	689b      	ldr	r3, [r3, #8]
 8006068:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800606a:	68bb      	ldr	r3, [r7, #8]
 800606c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006070:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	68ba      	ldr	r2, [r7, #8]
 8006078:	609a      	str	r2, [r3, #8]
      break;
 800607a:	e04f      	b.n	800611c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006080:	683b      	ldr	r3, [r7, #0]
 8006082:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006084:	683b      	ldr	r3, [r7, #0]
 8006086:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800608c:	f000 fb52 	bl	8006734 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	689a      	ldr	r2, [r3, #8]
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800609e:	609a      	str	r2, [r3, #8]
      break;
 80060a0:	e03c      	b.n	800611c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80060a6:	683b      	ldr	r3, [r7, #0]
 80060a8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80060aa:	683b      	ldr	r3, [r7, #0]
 80060ac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80060ae:	461a      	mov	r2, r3
 80060b0:	f000 fac6 	bl	8006640 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	2150      	movs	r1, #80	@ 0x50
 80060ba:	4618      	mov	r0, r3
 80060bc:	f000 fb1f 	bl	80066fe <TIM_ITRx_SetConfig>
      break;
 80060c0:	e02c      	b.n	800611c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80060c6:	683b      	ldr	r3, [r7, #0]
 80060c8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80060ce:	461a      	mov	r2, r3
 80060d0:	f000 fae5 	bl	800669e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	2160      	movs	r1, #96	@ 0x60
 80060da:	4618      	mov	r0, r3
 80060dc:	f000 fb0f 	bl	80066fe <TIM_ITRx_SetConfig>
      break;
 80060e0:	e01c      	b.n	800611c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80060e6:	683b      	ldr	r3, [r7, #0]
 80060e8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80060ea:	683b      	ldr	r3, [r7, #0]
 80060ec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80060ee:	461a      	mov	r2, r3
 80060f0:	f000 faa6 	bl	8006640 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	2140      	movs	r1, #64	@ 0x40
 80060fa:	4618      	mov	r0, r3
 80060fc:	f000 faff 	bl	80066fe <TIM_ITRx_SetConfig>
      break;
 8006100:	e00c      	b.n	800611c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681a      	ldr	r2, [r3, #0]
 8006106:	683b      	ldr	r3, [r7, #0]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	4619      	mov	r1, r3
 800610c:	4610      	mov	r0, r2
 800610e:	f000 faf6 	bl	80066fe <TIM_ITRx_SetConfig>
      break;
 8006112:	e003      	b.n	800611c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006114:	2301      	movs	r3, #1
 8006116:	73fb      	strb	r3, [r7, #15]
      break;
 8006118:	e000      	b.n	800611c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800611a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2201      	movs	r2, #1
 8006120:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2200      	movs	r2, #0
 8006128:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800612c:	7bfb      	ldrb	r3, [r7, #15]
}
 800612e:	4618      	mov	r0, r3
 8006130:	3710      	adds	r7, #16
 8006132:	46bd      	mov	sp, r7
 8006134:	bd80      	pop	{r7, pc}

08006136 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006136:	b480      	push	{r7}
 8006138:	b083      	sub	sp, #12
 800613a:	af00      	add	r7, sp, #0
 800613c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800613e:	bf00      	nop
 8006140:	370c      	adds	r7, #12
 8006142:	46bd      	mov	sp, r7
 8006144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006148:	4770      	bx	lr

0800614a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800614a:	b480      	push	{r7}
 800614c:	b083      	sub	sp, #12
 800614e:	af00      	add	r7, sp, #0
 8006150:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006152:	bf00      	nop
 8006154:	370c      	adds	r7, #12
 8006156:	46bd      	mov	sp, r7
 8006158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615c:	4770      	bx	lr

0800615e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800615e:	b480      	push	{r7}
 8006160:	b083      	sub	sp, #12
 8006162:	af00      	add	r7, sp, #0
 8006164:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006166:	bf00      	nop
 8006168:	370c      	adds	r7, #12
 800616a:	46bd      	mov	sp, r7
 800616c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006170:	4770      	bx	lr

08006172 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006172:	b480      	push	{r7}
 8006174:	b083      	sub	sp, #12
 8006176:	af00      	add	r7, sp, #0
 8006178:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800617a:	bf00      	nop
 800617c:	370c      	adds	r7, #12
 800617e:	46bd      	mov	sp, r7
 8006180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006184:	4770      	bx	lr
	...

08006188 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006188:	b480      	push	{r7}
 800618a:	b085      	sub	sp, #20
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
 8006190:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	4a46      	ldr	r2, [pc, #280]	@ (80062b4 <TIM_Base_SetConfig+0x12c>)
 800619c:	4293      	cmp	r3, r2
 800619e:	d013      	beq.n	80061c8 <TIM_Base_SetConfig+0x40>
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80061a6:	d00f      	beq.n	80061c8 <TIM_Base_SetConfig+0x40>
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	4a43      	ldr	r2, [pc, #268]	@ (80062b8 <TIM_Base_SetConfig+0x130>)
 80061ac:	4293      	cmp	r3, r2
 80061ae:	d00b      	beq.n	80061c8 <TIM_Base_SetConfig+0x40>
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	4a42      	ldr	r2, [pc, #264]	@ (80062bc <TIM_Base_SetConfig+0x134>)
 80061b4:	4293      	cmp	r3, r2
 80061b6:	d007      	beq.n	80061c8 <TIM_Base_SetConfig+0x40>
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	4a41      	ldr	r2, [pc, #260]	@ (80062c0 <TIM_Base_SetConfig+0x138>)
 80061bc:	4293      	cmp	r3, r2
 80061be:	d003      	beq.n	80061c8 <TIM_Base_SetConfig+0x40>
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	4a40      	ldr	r2, [pc, #256]	@ (80062c4 <TIM_Base_SetConfig+0x13c>)
 80061c4:	4293      	cmp	r3, r2
 80061c6:	d108      	bne.n	80061da <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80061ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80061d0:	683b      	ldr	r3, [r7, #0]
 80061d2:	685b      	ldr	r3, [r3, #4]
 80061d4:	68fa      	ldr	r2, [r7, #12]
 80061d6:	4313      	orrs	r3, r2
 80061d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	4a35      	ldr	r2, [pc, #212]	@ (80062b4 <TIM_Base_SetConfig+0x12c>)
 80061de:	4293      	cmp	r3, r2
 80061e0:	d02b      	beq.n	800623a <TIM_Base_SetConfig+0xb2>
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80061e8:	d027      	beq.n	800623a <TIM_Base_SetConfig+0xb2>
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	4a32      	ldr	r2, [pc, #200]	@ (80062b8 <TIM_Base_SetConfig+0x130>)
 80061ee:	4293      	cmp	r3, r2
 80061f0:	d023      	beq.n	800623a <TIM_Base_SetConfig+0xb2>
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	4a31      	ldr	r2, [pc, #196]	@ (80062bc <TIM_Base_SetConfig+0x134>)
 80061f6:	4293      	cmp	r3, r2
 80061f8:	d01f      	beq.n	800623a <TIM_Base_SetConfig+0xb2>
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	4a30      	ldr	r2, [pc, #192]	@ (80062c0 <TIM_Base_SetConfig+0x138>)
 80061fe:	4293      	cmp	r3, r2
 8006200:	d01b      	beq.n	800623a <TIM_Base_SetConfig+0xb2>
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	4a2f      	ldr	r2, [pc, #188]	@ (80062c4 <TIM_Base_SetConfig+0x13c>)
 8006206:	4293      	cmp	r3, r2
 8006208:	d017      	beq.n	800623a <TIM_Base_SetConfig+0xb2>
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	4a2e      	ldr	r2, [pc, #184]	@ (80062c8 <TIM_Base_SetConfig+0x140>)
 800620e:	4293      	cmp	r3, r2
 8006210:	d013      	beq.n	800623a <TIM_Base_SetConfig+0xb2>
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	4a2d      	ldr	r2, [pc, #180]	@ (80062cc <TIM_Base_SetConfig+0x144>)
 8006216:	4293      	cmp	r3, r2
 8006218:	d00f      	beq.n	800623a <TIM_Base_SetConfig+0xb2>
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	4a2c      	ldr	r2, [pc, #176]	@ (80062d0 <TIM_Base_SetConfig+0x148>)
 800621e:	4293      	cmp	r3, r2
 8006220:	d00b      	beq.n	800623a <TIM_Base_SetConfig+0xb2>
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	4a2b      	ldr	r2, [pc, #172]	@ (80062d4 <TIM_Base_SetConfig+0x14c>)
 8006226:	4293      	cmp	r3, r2
 8006228:	d007      	beq.n	800623a <TIM_Base_SetConfig+0xb2>
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	4a2a      	ldr	r2, [pc, #168]	@ (80062d8 <TIM_Base_SetConfig+0x150>)
 800622e:	4293      	cmp	r3, r2
 8006230:	d003      	beq.n	800623a <TIM_Base_SetConfig+0xb2>
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	4a29      	ldr	r2, [pc, #164]	@ (80062dc <TIM_Base_SetConfig+0x154>)
 8006236:	4293      	cmp	r3, r2
 8006238:	d108      	bne.n	800624c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006240:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006242:	683b      	ldr	r3, [r7, #0]
 8006244:	68db      	ldr	r3, [r3, #12]
 8006246:	68fa      	ldr	r2, [r7, #12]
 8006248:	4313      	orrs	r3, r2
 800624a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006252:	683b      	ldr	r3, [r7, #0]
 8006254:	695b      	ldr	r3, [r3, #20]
 8006256:	4313      	orrs	r3, r2
 8006258:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	68fa      	ldr	r2, [r7, #12]
 800625e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006260:	683b      	ldr	r3, [r7, #0]
 8006262:	689a      	ldr	r2, [r3, #8]
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	681a      	ldr	r2, [r3, #0]
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	4a10      	ldr	r2, [pc, #64]	@ (80062b4 <TIM_Base_SetConfig+0x12c>)
 8006274:	4293      	cmp	r3, r2
 8006276:	d003      	beq.n	8006280 <TIM_Base_SetConfig+0xf8>
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	4a12      	ldr	r2, [pc, #72]	@ (80062c4 <TIM_Base_SetConfig+0x13c>)
 800627c:	4293      	cmp	r3, r2
 800627e:	d103      	bne.n	8006288 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006280:	683b      	ldr	r3, [r7, #0]
 8006282:	691a      	ldr	r2, [r3, #16]
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2201      	movs	r2, #1
 800628c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	691b      	ldr	r3, [r3, #16]
 8006292:	f003 0301 	and.w	r3, r3, #1
 8006296:	2b01      	cmp	r3, #1
 8006298:	d105      	bne.n	80062a6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	691b      	ldr	r3, [r3, #16]
 800629e:	f023 0201 	bic.w	r2, r3, #1
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	611a      	str	r2, [r3, #16]
  }
}
 80062a6:	bf00      	nop
 80062a8:	3714      	adds	r7, #20
 80062aa:	46bd      	mov	sp, r7
 80062ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b0:	4770      	bx	lr
 80062b2:	bf00      	nop
 80062b4:	40010000 	.word	0x40010000
 80062b8:	40000400 	.word	0x40000400
 80062bc:	40000800 	.word	0x40000800
 80062c0:	40000c00 	.word	0x40000c00
 80062c4:	40010400 	.word	0x40010400
 80062c8:	40014000 	.word	0x40014000
 80062cc:	40014400 	.word	0x40014400
 80062d0:	40014800 	.word	0x40014800
 80062d4:	40001800 	.word	0x40001800
 80062d8:	40001c00 	.word	0x40001c00
 80062dc:	40002000 	.word	0x40002000

080062e0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80062e0:	b480      	push	{r7}
 80062e2:	b087      	sub	sp, #28
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
 80062e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	6a1b      	ldr	r3, [r3, #32]
 80062ee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	6a1b      	ldr	r3, [r3, #32]
 80062f4:	f023 0201 	bic.w	r2, r3, #1
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	685b      	ldr	r3, [r3, #4]
 8006300:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	699b      	ldr	r3, [r3, #24]
 8006306:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800630e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	f023 0303 	bic.w	r3, r3, #3
 8006316:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006318:	683b      	ldr	r3, [r7, #0]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	68fa      	ldr	r2, [r7, #12]
 800631e:	4313      	orrs	r3, r2
 8006320:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006322:	697b      	ldr	r3, [r7, #20]
 8006324:	f023 0302 	bic.w	r3, r3, #2
 8006328:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800632a:	683b      	ldr	r3, [r7, #0]
 800632c:	689b      	ldr	r3, [r3, #8]
 800632e:	697a      	ldr	r2, [r7, #20]
 8006330:	4313      	orrs	r3, r2
 8006332:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	4a20      	ldr	r2, [pc, #128]	@ (80063b8 <TIM_OC1_SetConfig+0xd8>)
 8006338:	4293      	cmp	r3, r2
 800633a:	d003      	beq.n	8006344 <TIM_OC1_SetConfig+0x64>
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	4a1f      	ldr	r2, [pc, #124]	@ (80063bc <TIM_OC1_SetConfig+0xdc>)
 8006340:	4293      	cmp	r3, r2
 8006342:	d10c      	bne.n	800635e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006344:	697b      	ldr	r3, [r7, #20]
 8006346:	f023 0308 	bic.w	r3, r3, #8
 800634a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800634c:	683b      	ldr	r3, [r7, #0]
 800634e:	68db      	ldr	r3, [r3, #12]
 8006350:	697a      	ldr	r2, [r7, #20]
 8006352:	4313      	orrs	r3, r2
 8006354:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006356:	697b      	ldr	r3, [r7, #20]
 8006358:	f023 0304 	bic.w	r3, r3, #4
 800635c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	4a15      	ldr	r2, [pc, #84]	@ (80063b8 <TIM_OC1_SetConfig+0xd8>)
 8006362:	4293      	cmp	r3, r2
 8006364:	d003      	beq.n	800636e <TIM_OC1_SetConfig+0x8e>
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	4a14      	ldr	r2, [pc, #80]	@ (80063bc <TIM_OC1_SetConfig+0xdc>)
 800636a:	4293      	cmp	r3, r2
 800636c:	d111      	bne.n	8006392 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800636e:	693b      	ldr	r3, [r7, #16]
 8006370:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006374:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006376:	693b      	ldr	r3, [r7, #16]
 8006378:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800637c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800637e:	683b      	ldr	r3, [r7, #0]
 8006380:	695b      	ldr	r3, [r3, #20]
 8006382:	693a      	ldr	r2, [r7, #16]
 8006384:	4313      	orrs	r3, r2
 8006386:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006388:	683b      	ldr	r3, [r7, #0]
 800638a:	699b      	ldr	r3, [r3, #24]
 800638c:	693a      	ldr	r2, [r7, #16]
 800638e:	4313      	orrs	r3, r2
 8006390:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	693a      	ldr	r2, [r7, #16]
 8006396:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	68fa      	ldr	r2, [r7, #12]
 800639c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800639e:	683b      	ldr	r3, [r7, #0]
 80063a0:	685a      	ldr	r2, [r3, #4]
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	697a      	ldr	r2, [r7, #20]
 80063aa:	621a      	str	r2, [r3, #32]
}
 80063ac:	bf00      	nop
 80063ae:	371c      	adds	r7, #28
 80063b0:	46bd      	mov	sp, r7
 80063b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b6:	4770      	bx	lr
 80063b8:	40010000 	.word	0x40010000
 80063bc:	40010400 	.word	0x40010400

080063c0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80063c0:	b480      	push	{r7}
 80063c2:	b087      	sub	sp, #28
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	6078      	str	r0, [r7, #4]
 80063c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	6a1b      	ldr	r3, [r3, #32]
 80063ce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	6a1b      	ldr	r3, [r3, #32]
 80063d4:	f023 0210 	bic.w	r2, r3, #16
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	685b      	ldr	r3, [r3, #4]
 80063e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	699b      	ldr	r3, [r3, #24]
 80063e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80063ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80063f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	021b      	lsls	r3, r3, #8
 80063fe:	68fa      	ldr	r2, [r7, #12]
 8006400:	4313      	orrs	r3, r2
 8006402:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006404:	697b      	ldr	r3, [r7, #20]
 8006406:	f023 0320 	bic.w	r3, r3, #32
 800640a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800640c:	683b      	ldr	r3, [r7, #0]
 800640e:	689b      	ldr	r3, [r3, #8]
 8006410:	011b      	lsls	r3, r3, #4
 8006412:	697a      	ldr	r2, [r7, #20]
 8006414:	4313      	orrs	r3, r2
 8006416:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	4a22      	ldr	r2, [pc, #136]	@ (80064a4 <TIM_OC2_SetConfig+0xe4>)
 800641c:	4293      	cmp	r3, r2
 800641e:	d003      	beq.n	8006428 <TIM_OC2_SetConfig+0x68>
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	4a21      	ldr	r2, [pc, #132]	@ (80064a8 <TIM_OC2_SetConfig+0xe8>)
 8006424:	4293      	cmp	r3, r2
 8006426:	d10d      	bne.n	8006444 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006428:	697b      	ldr	r3, [r7, #20]
 800642a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800642e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006430:	683b      	ldr	r3, [r7, #0]
 8006432:	68db      	ldr	r3, [r3, #12]
 8006434:	011b      	lsls	r3, r3, #4
 8006436:	697a      	ldr	r2, [r7, #20]
 8006438:	4313      	orrs	r3, r2
 800643a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800643c:	697b      	ldr	r3, [r7, #20]
 800643e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006442:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	4a17      	ldr	r2, [pc, #92]	@ (80064a4 <TIM_OC2_SetConfig+0xe4>)
 8006448:	4293      	cmp	r3, r2
 800644a:	d003      	beq.n	8006454 <TIM_OC2_SetConfig+0x94>
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	4a16      	ldr	r2, [pc, #88]	@ (80064a8 <TIM_OC2_SetConfig+0xe8>)
 8006450:	4293      	cmp	r3, r2
 8006452:	d113      	bne.n	800647c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006454:	693b      	ldr	r3, [r7, #16]
 8006456:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800645a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800645c:	693b      	ldr	r3, [r7, #16]
 800645e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006462:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	695b      	ldr	r3, [r3, #20]
 8006468:	009b      	lsls	r3, r3, #2
 800646a:	693a      	ldr	r2, [r7, #16]
 800646c:	4313      	orrs	r3, r2
 800646e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006470:	683b      	ldr	r3, [r7, #0]
 8006472:	699b      	ldr	r3, [r3, #24]
 8006474:	009b      	lsls	r3, r3, #2
 8006476:	693a      	ldr	r2, [r7, #16]
 8006478:	4313      	orrs	r3, r2
 800647a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	693a      	ldr	r2, [r7, #16]
 8006480:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	68fa      	ldr	r2, [r7, #12]
 8006486:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006488:	683b      	ldr	r3, [r7, #0]
 800648a:	685a      	ldr	r2, [r3, #4]
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	697a      	ldr	r2, [r7, #20]
 8006494:	621a      	str	r2, [r3, #32]
}
 8006496:	bf00      	nop
 8006498:	371c      	adds	r7, #28
 800649a:	46bd      	mov	sp, r7
 800649c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a0:	4770      	bx	lr
 80064a2:	bf00      	nop
 80064a4:	40010000 	.word	0x40010000
 80064a8:	40010400 	.word	0x40010400

080064ac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80064ac:	b480      	push	{r7}
 80064ae:	b087      	sub	sp, #28
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	6078      	str	r0, [r7, #4]
 80064b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	6a1b      	ldr	r3, [r3, #32]
 80064ba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	6a1b      	ldr	r3, [r3, #32]
 80064c0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	685b      	ldr	r3, [r3, #4]
 80064cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	69db      	ldr	r3, [r3, #28]
 80064d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80064da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	f023 0303 	bic.w	r3, r3, #3
 80064e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80064e4:	683b      	ldr	r3, [r7, #0]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	68fa      	ldr	r2, [r7, #12]
 80064ea:	4313      	orrs	r3, r2
 80064ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80064ee:	697b      	ldr	r3, [r7, #20]
 80064f0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80064f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80064f6:	683b      	ldr	r3, [r7, #0]
 80064f8:	689b      	ldr	r3, [r3, #8]
 80064fa:	021b      	lsls	r3, r3, #8
 80064fc:	697a      	ldr	r2, [r7, #20]
 80064fe:	4313      	orrs	r3, r2
 8006500:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	4a21      	ldr	r2, [pc, #132]	@ (800658c <TIM_OC3_SetConfig+0xe0>)
 8006506:	4293      	cmp	r3, r2
 8006508:	d003      	beq.n	8006512 <TIM_OC3_SetConfig+0x66>
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	4a20      	ldr	r2, [pc, #128]	@ (8006590 <TIM_OC3_SetConfig+0xe4>)
 800650e:	4293      	cmp	r3, r2
 8006510:	d10d      	bne.n	800652e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006512:	697b      	ldr	r3, [r7, #20]
 8006514:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006518:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800651a:	683b      	ldr	r3, [r7, #0]
 800651c:	68db      	ldr	r3, [r3, #12]
 800651e:	021b      	lsls	r3, r3, #8
 8006520:	697a      	ldr	r2, [r7, #20]
 8006522:	4313      	orrs	r3, r2
 8006524:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006526:	697b      	ldr	r3, [r7, #20]
 8006528:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800652c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	4a16      	ldr	r2, [pc, #88]	@ (800658c <TIM_OC3_SetConfig+0xe0>)
 8006532:	4293      	cmp	r3, r2
 8006534:	d003      	beq.n	800653e <TIM_OC3_SetConfig+0x92>
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	4a15      	ldr	r2, [pc, #84]	@ (8006590 <TIM_OC3_SetConfig+0xe4>)
 800653a:	4293      	cmp	r3, r2
 800653c:	d113      	bne.n	8006566 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800653e:	693b      	ldr	r3, [r7, #16]
 8006540:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006544:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006546:	693b      	ldr	r3, [r7, #16]
 8006548:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800654c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800654e:	683b      	ldr	r3, [r7, #0]
 8006550:	695b      	ldr	r3, [r3, #20]
 8006552:	011b      	lsls	r3, r3, #4
 8006554:	693a      	ldr	r2, [r7, #16]
 8006556:	4313      	orrs	r3, r2
 8006558:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800655a:	683b      	ldr	r3, [r7, #0]
 800655c:	699b      	ldr	r3, [r3, #24]
 800655e:	011b      	lsls	r3, r3, #4
 8006560:	693a      	ldr	r2, [r7, #16]
 8006562:	4313      	orrs	r3, r2
 8006564:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	693a      	ldr	r2, [r7, #16]
 800656a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	68fa      	ldr	r2, [r7, #12]
 8006570:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006572:	683b      	ldr	r3, [r7, #0]
 8006574:	685a      	ldr	r2, [r3, #4]
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	697a      	ldr	r2, [r7, #20]
 800657e:	621a      	str	r2, [r3, #32]
}
 8006580:	bf00      	nop
 8006582:	371c      	adds	r7, #28
 8006584:	46bd      	mov	sp, r7
 8006586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658a:	4770      	bx	lr
 800658c:	40010000 	.word	0x40010000
 8006590:	40010400 	.word	0x40010400

08006594 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006594:	b480      	push	{r7}
 8006596:	b087      	sub	sp, #28
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
 800659c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	6a1b      	ldr	r3, [r3, #32]
 80065a2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	6a1b      	ldr	r3, [r3, #32]
 80065a8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	685b      	ldr	r3, [r3, #4]
 80065b4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	69db      	ldr	r3, [r3, #28]
 80065ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80065c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80065ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80065cc:	683b      	ldr	r3, [r7, #0]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	021b      	lsls	r3, r3, #8
 80065d2:	68fa      	ldr	r2, [r7, #12]
 80065d4:	4313      	orrs	r3, r2
 80065d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80065d8:	693b      	ldr	r3, [r7, #16]
 80065da:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80065de:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80065e0:	683b      	ldr	r3, [r7, #0]
 80065e2:	689b      	ldr	r3, [r3, #8]
 80065e4:	031b      	lsls	r3, r3, #12
 80065e6:	693a      	ldr	r2, [r7, #16]
 80065e8:	4313      	orrs	r3, r2
 80065ea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	4a12      	ldr	r2, [pc, #72]	@ (8006638 <TIM_OC4_SetConfig+0xa4>)
 80065f0:	4293      	cmp	r3, r2
 80065f2:	d003      	beq.n	80065fc <TIM_OC4_SetConfig+0x68>
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	4a11      	ldr	r2, [pc, #68]	@ (800663c <TIM_OC4_SetConfig+0xa8>)
 80065f8:	4293      	cmp	r3, r2
 80065fa:	d109      	bne.n	8006610 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80065fc:	697b      	ldr	r3, [r7, #20]
 80065fe:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006602:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006604:	683b      	ldr	r3, [r7, #0]
 8006606:	695b      	ldr	r3, [r3, #20]
 8006608:	019b      	lsls	r3, r3, #6
 800660a:	697a      	ldr	r2, [r7, #20]
 800660c:	4313      	orrs	r3, r2
 800660e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	697a      	ldr	r2, [r7, #20]
 8006614:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	68fa      	ldr	r2, [r7, #12]
 800661a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800661c:	683b      	ldr	r3, [r7, #0]
 800661e:	685a      	ldr	r2, [r3, #4]
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	693a      	ldr	r2, [r7, #16]
 8006628:	621a      	str	r2, [r3, #32]
}
 800662a:	bf00      	nop
 800662c:	371c      	adds	r7, #28
 800662e:	46bd      	mov	sp, r7
 8006630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006634:	4770      	bx	lr
 8006636:	bf00      	nop
 8006638:	40010000 	.word	0x40010000
 800663c:	40010400 	.word	0x40010400

08006640 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006640:	b480      	push	{r7}
 8006642:	b087      	sub	sp, #28
 8006644:	af00      	add	r7, sp, #0
 8006646:	60f8      	str	r0, [r7, #12]
 8006648:	60b9      	str	r1, [r7, #8]
 800664a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	6a1b      	ldr	r3, [r3, #32]
 8006650:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	6a1b      	ldr	r3, [r3, #32]
 8006656:	f023 0201 	bic.w	r2, r3, #1
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	699b      	ldr	r3, [r3, #24]
 8006662:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006664:	693b      	ldr	r3, [r7, #16]
 8006666:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800666a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	011b      	lsls	r3, r3, #4
 8006670:	693a      	ldr	r2, [r7, #16]
 8006672:	4313      	orrs	r3, r2
 8006674:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006676:	697b      	ldr	r3, [r7, #20]
 8006678:	f023 030a 	bic.w	r3, r3, #10
 800667c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800667e:	697a      	ldr	r2, [r7, #20]
 8006680:	68bb      	ldr	r3, [r7, #8]
 8006682:	4313      	orrs	r3, r2
 8006684:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	693a      	ldr	r2, [r7, #16]
 800668a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	697a      	ldr	r2, [r7, #20]
 8006690:	621a      	str	r2, [r3, #32]
}
 8006692:	bf00      	nop
 8006694:	371c      	adds	r7, #28
 8006696:	46bd      	mov	sp, r7
 8006698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669c:	4770      	bx	lr

0800669e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800669e:	b480      	push	{r7}
 80066a0:	b087      	sub	sp, #28
 80066a2:	af00      	add	r7, sp, #0
 80066a4:	60f8      	str	r0, [r7, #12]
 80066a6:	60b9      	str	r1, [r7, #8]
 80066a8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	6a1b      	ldr	r3, [r3, #32]
 80066ae:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	6a1b      	ldr	r3, [r3, #32]
 80066b4:	f023 0210 	bic.w	r2, r3, #16
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	699b      	ldr	r3, [r3, #24]
 80066c0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80066c2:	693b      	ldr	r3, [r7, #16]
 80066c4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80066c8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	031b      	lsls	r3, r3, #12
 80066ce:	693a      	ldr	r2, [r7, #16]
 80066d0:	4313      	orrs	r3, r2
 80066d2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80066d4:	697b      	ldr	r3, [r7, #20]
 80066d6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80066da:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80066dc:	68bb      	ldr	r3, [r7, #8]
 80066de:	011b      	lsls	r3, r3, #4
 80066e0:	697a      	ldr	r2, [r7, #20]
 80066e2:	4313      	orrs	r3, r2
 80066e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	693a      	ldr	r2, [r7, #16]
 80066ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	697a      	ldr	r2, [r7, #20]
 80066f0:	621a      	str	r2, [r3, #32]
}
 80066f2:	bf00      	nop
 80066f4:	371c      	adds	r7, #28
 80066f6:	46bd      	mov	sp, r7
 80066f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fc:	4770      	bx	lr

080066fe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80066fe:	b480      	push	{r7}
 8006700:	b085      	sub	sp, #20
 8006702:	af00      	add	r7, sp, #0
 8006704:	6078      	str	r0, [r7, #4]
 8006706:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	689b      	ldr	r3, [r3, #8]
 800670c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006714:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006716:	683a      	ldr	r2, [r7, #0]
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	4313      	orrs	r3, r2
 800671c:	f043 0307 	orr.w	r3, r3, #7
 8006720:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	68fa      	ldr	r2, [r7, #12]
 8006726:	609a      	str	r2, [r3, #8]
}
 8006728:	bf00      	nop
 800672a:	3714      	adds	r7, #20
 800672c:	46bd      	mov	sp, r7
 800672e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006732:	4770      	bx	lr

08006734 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006734:	b480      	push	{r7}
 8006736:	b087      	sub	sp, #28
 8006738:	af00      	add	r7, sp, #0
 800673a:	60f8      	str	r0, [r7, #12]
 800673c:	60b9      	str	r1, [r7, #8]
 800673e:	607a      	str	r2, [r7, #4]
 8006740:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	689b      	ldr	r3, [r3, #8]
 8006746:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006748:	697b      	ldr	r3, [r7, #20]
 800674a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800674e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006750:	683b      	ldr	r3, [r7, #0]
 8006752:	021a      	lsls	r2, r3, #8
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	431a      	orrs	r2, r3
 8006758:	68bb      	ldr	r3, [r7, #8]
 800675a:	4313      	orrs	r3, r2
 800675c:	697a      	ldr	r2, [r7, #20]
 800675e:	4313      	orrs	r3, r2
 8006760:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	697a      	ldr	r2, [r7, #20]
 8006766:	609a      	str	r2, [r3, #8]
}
 8006768:	bf00      	nop
 800676a:	371c      	adds	r7, #28
 800676c:	46bd      	mov	sp, r7
 800676e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006772:	4770      	bx	lr

08006774 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006774:	b480      	push	{r7}
 8006776:	b087      	sub	sp, #28
 8006778:	af00      	add	r7, sp, #0
 800677a:	60f8      	str	r0, [r7, #12]
 800677c:	60b9      	str	r1, [r7, #8]
 800677e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006780:	68bb      	ldr	r3, [r7, #8]
 8006782:	f003 031f 	and.w	r3, r3, #31
 8006786:	2201      	movs	r2, #1
 8006788:	fa02 f303 	lsl.w	r3, r2, r3
 800678c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	6a1a      	ldr	r2, [r3, #32]
 8006792:	697b      	ldr	r3, [r7, #20]
 8006794:	43db      	mvns	r3, r3
 8006796:	401a      	ands	r2, r3
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	6a1a      	ldr	r2, [r3, #32]
 80067a0:	68bb      	ldr	r3, [r7, #8]
 80067a2:	f003 031f 	and.w	r3, r3, #31
 80067a6:	6879      	ldr	r1, [r7, #4]
 80067a8:	fa01 f303 	lsl.w	r3, r1, r3
 80067ac:	431a      	orrs	r2, r3
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	621a      	str	r2, [r3, #32]
}
 80067b2:	bf00      	nop
 80067b4:	371c      	adds	r7, #28
 80067b6:	46bd      	mov	sp, r7
 80067b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067bc:	4770      	bx	lr
	...

080067c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80067c0:	b480      	push	{r7}
 80067c2:	b085      	sub	sp, #20
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
 80067c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80067d0:	2b01      	cmp	r3, #1
 80067d2:	d101      	bne.n	80067d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80067d4:	2302      	movs	r3, #2
 80067d6:	e05a      	b.n	800688e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2201      	movs	r2, #1
 80067dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2202      	movs	r2, #2
 80067e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	685b      	ldr	r3, [r3, #4]
 80067ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	689b      	ldr	r3, [r3, #8]
 80067f6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80067fe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006800:	683b      	ldr	r3, [r7, #0]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	68fa      	ldr	r2, [r7, #12]
 8006806:	4313      	orrs	r3, r2
 8006808:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	68fa      	ldr	r2, [r7, #12]
 8006810:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	4a21      	ldr	r2, [pc, #132]	@ (800689c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006818:	4293      	cmp	r3, r2
 800681a:	d022      	beq.n	8006862 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006824:	d01d      	beq.n	8006862 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	4a1d      	ldr	r2, [pc, #116]	@ (80068a0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800682c:	4293      	cmp	r3, r2
 800682e:	d018      	beq.n	8006862 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	4a1b      	ldr	r2, [pc, #108]	@ (80068a4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006836:	4293      	cmp	r3, r2
 8006838:	d013      	beq.n	8006862 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	4a1a      	ldr	r2, [pc, #104]	@ (80068a8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006840:	4293      	cmp	r3, r2
 8006842:	d00e      	beq.n	8006862 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	4a18      	ldr	r2, [pc, #96]	@ (80068ac <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800684a:	4293      	cmp	r3, r2
 800684c:	d009      	beq.n	8006862 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	4a17      	ldr	r2, [pc, #92]	@ (80068b0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006854:	4293      	cmp	r3, r2
 8006856:	d004      	beq.n	8006862 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	4a15      	ldr	r2, [pc, #84]	@ (80068b4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800685e:	4293      	cmp	r3, r2
 8006860:	d10c      	bne.n	800687c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006862:	68bb      	ldr	r3, [r7, #8]
 8006864:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006868:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800686a:	683b      	ldr	r3, [r7, #0]
 800686c:	685b      	ldr	r3, [r3, #4]
 800686e:	68ba      	ldr	r2, [r7, #8]
 8006870:	4313      	orrs	r3, r2
 8006872:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	68ba      	ldr	r2, [r7, #8]
 800687a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	2201      	movs	r2, #1
 8006880:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2200      	movs	r2, #0
 8006888:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800688c:	2300      	movs	r3, #0
}
 800688e:	4618      	mov	r0, r3
 8006890:	3714      	adds	r7, #20
 8006892:	46bd      	mov	sp, r7
 8006894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006898:	4770      	bx	lr
 800689a:	bf00      	nop
 800689c:	40010000 	.word	0x40010000
 80068a0:	40000400 	.word	0x40000400
 80068a4:	40000800 	.word	0x40000800
 80068a8:	40000c00 	.word	0x40000c00
 80068ac:	40010400 	.word	0x40010400
 80068b0:	40014000 	.word	0x40014000
 80068b4:	40001800 	.word	0x40001800

080068b8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80068b8:	b480      	push	{r7}
 80068ba:	b083      	sub	sp, #12
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80068c0:	bf00      	nop
 80068c2:	370c      	adds	r7, #12
 80068c4:	46bd      	mov	sp, r7
 80068c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ca:	4770      	bx	lr

080068cc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80068cc:	b480      	push	{r7}
 80068ce:	b083      	sub	sp, #12
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80068d4:	bf00      	nop
 80068d6:	370c      	adds	r7, #12
 80068d8:	46bd      	mov	sp, r7
 80068da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068de:	4770      	bx	lr

080068e0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80068e0:	b580      	push	{r7, lr}
 80068e2:	b082      	sub	sp, #8
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d101      	bne.n	80068f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80068ee:	2301      	movs	r3, #1
 80068f0:	e042      	b.n	8006978 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80068f8:	b2db      	uxtb	r3, r3
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d106      	bne.n	800690c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	2200      	movs	r2, #0
 8006902:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006906:	6878      	ldr	r0, [r7, #4]
 8006908:	f7fc f8dc 	bl	8002ac4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2224      	movs	r2, #36	@ 0x24
 8006910:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	68da      	ldr	r2, [r3, #12]
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006922:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006924:	6878      	ldr	r0, [r7, #4]
 8006926:	f000 f82b 	bl	8006980 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	691a      	ldr	r2, [r3, #16]
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006938:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	695a      	ldr	r2, [r3, #20]
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006948:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	68da      	ldr	r2, [r3, #12]
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006958:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	2200      	movs	r2, #0
 800695e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	2220      	movs	r2, #32
 8006964:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	2220      	movs	r2, #32
 800696c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	2200      	movs	r2, #0
 8006974:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006976:	2300      	movs	r3, #0
}
 8006978:	4618      	mov	r0, r3
 800697a:	3708      	adds	r7, #8
 800697c:	46bd      	mov	sp, r7
 800697e:	bd80      	pop	{r7, pc}

08006980 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006980:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006984:	b0c0      	sub	sp, #256	@ 0x100
 8006986:	af00      	add	r7, sp, #0
 8006988:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800698c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	691b      	ldr	r3, [r3, #16]
 8006994:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006998:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800699c:	68d9      	ldr	r1, [r3, #12]
 800699e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069a2:	681a      	ldr	r2, [r3, #0]
 80069a4:	ea40 0301 	orr.w	r3, r0, r1
 80069a8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80069aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069ae:	689a      	ldr	r2, [r3, #8]
 80069b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069b4:	691b      	ldr	r3, [r3, #16]
 80069b6:	431a      	orrs	r2, r3
 80069b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069bc:	695b      	ldr	r3, [r3, #20]
 80069be:	431a      	orrs	r2, r3
 80069c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069c4:	69db      	ldr	r3, [r3, #28]
 80069c6:	4313      	orrs	r3, r2
 80069c8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80069cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	68db      	ldr	r3, [r3, #12]
 80069d4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80069d8:	f021 010c 	bic.w	r1, r1, #12
 80069dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069e0:	681a      	ldr	r2, [r3, #0]
 80069e2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80069e6:	430b      	orrs	r3, r1
 80069e8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80069ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	695b      	ldr	r3, [r3, #20]
 80069f2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80069f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069fa:	6999      	ldr	r1, [r3, #24]
 80069fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a00:	681a      	ldr	r2, [r3, #0]
 8006a02:	ea40 0301 	orr.w	r3, r0, r1
 8006a06:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006a08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a0c:	681a      	ldr	r2, [r3, #0]
 8006a0e:	4b8f      	ldr	r3, [pc, #572]	@ (8006c4c <UART_SetConfig+0x2cc>)
 8006a10:	429a      	cmp	r2, r3
 8006a12:	d005      	beq.n	8006a20 <UART_SetConfig+0xa0>
 8006a14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a18:	681a      	ldr	r2, [r3, #0]
 8006a1a:	4b8d      	ldr	r3, [pc, #564]	@ (8006c50 <UART_SetConfig+0x2d0>)
 8006a1c:	429a      	cmp	r2, r3
 8006a1e:	d104      	bne.n	8006a2a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006a20:	f7fd ff04 	bl	800482c <HAL_RCC_GetPCLK2Freq>
 8006a24:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006a28:	e003      	b.n	8006a32 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006a2a:	f7fd feeb 	bl	8004804 <HAL_RCC_GetPCLK1Freq>
 8006a2e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006a32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a36:	69db      	ldr	r3, [r3, #28]
 8006a38:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006a3c:	f040 810c 	bne.w	8006c58 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006a40:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006a44:	2200      	movs	r2, #0
 8006a46:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006a4a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006a4e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006a52:	4622      	mov	r2, r4
 8006a54:	462b      	mov	r3, r5
 8006a56:	1891      	adds	r1, r2, r2
 8006a58:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006a5a:	415b      	adcs	r3, r3
 8006a5c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006a5e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006a62:	4621      	mov	r1, r4
 8006a64:	eb12 0801 	adds.w	r8, r2, r1
 8006a68:	4629      	mov	r1, r5
 8006a6a:	eb43 0901 	adc.w	r9, r3, r1
 8006a6e:	f04f 0200 	mov.w	r2, #0
 8006a72:	f04f 0300 	mov.w	r3, #0
 8006a76:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006a7a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006a7e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006a82:	4690      	mov	r8, r2
 8006a84:	4699      	mov	r9, r3
 8006a86:	4623      	mov	r3, r4
 8006a88:	eb18 0303 	adds.w	r3, r8, r3
 8006a8c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006a90:	462b      	mov	r3, r5
 8006a92:	eb49 0303 	adc.w	r3, r9, r3
 8006a96:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006a9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a9e:	685b      	ldr	r3, [r3, #4]
 8006aa0:	2200      	movs	r2, #0
 8006aa2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006aa6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006aaa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006aae:	460b      	mov	r3, r1
 8006ab0:	18db      	adds	r3, r3, r3
 8006ab2:	653b      	str	r3, [r7, #80]	@ 0x50
 8006ab4:	4613      	mov	r3, r2
 8006ab6:	eb42 0303 	adc.w	r3, r2, r3
 8006aba:	657b      	str	r3, [r7, #84]	@ 0x54
 8006abc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006ac0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006ac4:	f7fa f85a 	bl	8000b7c <__aeabi_uldivmod>
 8006ac8:	4602      	mov	r2, r0
 8006aca:	460b      	mov	r3, r1
 8006acc:	4b61      	ldr	r3, [pc, #388]	@ (8006c54 <UART_SetConfig+0x2d4>)
 8006ace:	fba3 2302 	umull	r2, r3, r3, r2
 8006ad2:	095b      	lsrs	r3, r3, #5
 8006ad4:	011c      	lsls	r4, r3, #4
 8006ad6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006ada:	2200      	movs	r2, #0
 8006adc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006ae0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006ae4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006ae8:	4642      	mov	r2, r8
 8006aea:	464b      	mov	r3, r9
 8006aec:	1891      	adds	r1, r2, r2
 8006aee:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006af0:	415b      	adcs	r3, r3
 8006af2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006af4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006af8:	4641      	mov	r1, r8
 8006afa:	eb12 0a01 	adds.w	sl, r2, r1
 8006afe:	4649      	mov	r1, r9
 8006b00:	eb43 0b01 	adc.w	fp, r3, r1
 8006b04:	f04f 0200 	mov.w	r2, #0
 8006b08:	f04f 0300 	mov.w	r3, #0
 8006b0c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006b10:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006b14:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006b18:	4692      	mov	sl, r2
 8006b1a:	469b      	mov	fp, r3
 8006b1c:	4643      	mov	r3, r8
 8006b1e:	eb1a 0303 	adds.w	r3, sl, r3
 8006b22:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006b26:	464b      	mov	r3, r9
 8006b28:	eb4b 0303 	adc.w	r3, fp, r3
 8006b2c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006b30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b34:	685b      	ldr	r3, [r3, #4]
 8006b36:	2200      	movs	r2, #0
 8006b38:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006b3c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006b40:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006b44:	460b      	mov	r3, r1
 8006b46:	18db      	adds	r3, r3, r3
 8006b48:	643b      	str	r3, [r7, #64]	@ 0x40
 8006b4a:	4613      	mov	r3, r2
 8006b4c:	eb42 0303 	adc.w	r3, r2, r3
 8006b50:	647b      	str	r3, [r7, #68]	@ 0x44
 8006b52:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006b56:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8006b5a:	f7fa f80f 	bl	8000b7c <__aeabi_uldivmod>
 8006b5e:	4602      	mov	r2, r0
 8006b60:	460b      	mov	r3, r1
 8006b62:	4611      	mov	r1, r2
 8006b64:	4b3b      	ldr	r3, [pc, #236]	@ (8006c54 <UART_SetConfig+0x2d4>)
 8006b66:	fba3 2301 	umull	r2, r3, r3, r1
 8006b6a:	095b      	lsrs	r3, r3, #5
 8006b6c:	2264      	movs	r2, #100	@ 0x64
 8006b6e:	fb02 f303 	mul.w	r3, r2, r3
 8006b72:	1acb      	subs	r3, r1, r3
 8006b74:	00db      	lsls	r3, r3, #3
 8006b76:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8006b7a:	4b36      	ldr	r3, [pc, #216]	@ (8006c54 <UART_SetConfig+0x2d4>)
 8006b7c:	fba3 2302 	umull	r2, r3, r3, r2
 8006b80:	095b      	lsrs	r3, r3, #5
 8006b82:	005b      	lsls	r3, r3, #1
 8006b84:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006b88:	441c      	add	r4, r3
 8006b8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006b8e:	2200      	movs	r2, #0
 8006b90:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006b94:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006b98:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006b9c:	4642      	mov	r2, r8
 8006b9e:	464b      	mov	r3, r9
 8006ba0:	1891      	adds	r1, r2, r2
 8006ba2:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006ba4:	415b      	adcs	r3, r3
 8006ba6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006ba8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006bac:	4641      	mov	r1, r8
 8006bae:	1851      	adds	r1, r2, r1
 8006bb0:	6339      	str	r1, [r7, #48]	@ 0x30
 8006bb2:	4649      	mov	r1, r9
 8006bb4:	414b      	adcs	r3, r1
 8006bb6:	637b      	str	r3, [r7, #52]	@ 0x34
 8006bb8:	f04f 0200 	mov.w	r2, #0
 8006bbc:	f04f 0300 	mov.w	r3, #0
 8006bc0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006bc4:	4659      	mov	r1, fp
 8006bc6:	00cb      	lsls	r3, r1, #3
 8006bc8:	4651      	mov	r1, sl
 8006bca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006bce:	4651      	mov	r1, sl
 8006bd0:	00ca      	lsls	r2, r1, #3
 8006bd2:	4610      	mov	r0, r2
 8006bd4:	4619      	mov	r1, r3
 8006bd6:	4603      	mov	r3, r0
 8006bd8:	4642      	mov	r2, r8
 8006bda:	189b      	adds	r3, r3, r2
 8006bdc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006be0:	464b      	mov	r3, r9
 8006be2:	460a      	mov	r2, r1
 8006be4:	eb42 0303 	adc.w	r3, r2, r3
 8006be8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006bec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006bf0:	685b      	ldr	r3, [r3, #4]
 8006bf2:	2200      	movs	r2, #0
 8006bf4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006bf8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006bfc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006c00:	460b      	mov	r3, r1
 8006c02:	18db      	adds	r3, r3, r3
 8006c04:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006c06:	4613      	mov	r3, r2
 8006c08:	eb42 0303 	adc.w	r3, r2, r3
 8006c0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006c0e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006c12:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006c16:	f7f9 ffb1 	bl	8000b7c <__aeabi_uldivmod>
 8006c1a:	4602      	mov	r2, r0
 8006c1c:	460b      	mov	r3, r1
 8006c1e:	4b0d      	ldr	r3, [pc, #52]	@ (8006c54 <UART_SetConfig+0x2d4>)
 8006c20:	fba3 1302 	umull	r1, r3, r3, r2
 8006c24:	095b      	lsrs	r3, r3, #5
 8006c26:	2164      	movs	r1, #100	@ 0x64
 8006c28:	fb01 f303 	mul.w	r3, r1, r3
 8006c2c:	1ad3      	subs	r3, r2, r3
 8006c2e:	00db      	lsls	r3, r3, #3
 8006c30:	3332      	adds	r3, #50	@ 0x32
 8006c32:	4a08      	ldr	r2, [pc, #32]	@ (8006c54 <UART_SetConfig+0x2d4>)
 8006c34:	fba2 2303 	umull	r2, r3, r2, r3
 8006c38:	095b      	lsrs	r3, r3, #5
 8006c3a:	f003 0207 	and.w	r2, r3, #7
 8006c3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	4422      	add	r2, r4
 8006c46:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006c48:	e106      	b.n	8006e58 <UART_SetConfig+0x4d8>
 8006c4a:	bf00      	nop
 8006c4c:	40011000 	.word	0x40011000
 8006c50:	40011400 	.word	0x40011400
 8006c54:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006c58:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006c62:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006c66:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006c6a:	4642      	mov	r2, r8
 8006c6c:	464b      	mov	r3, r9
 8006c6e:	1891      	adds	r1, r2, r2
 8006c70:	6239      	str	r1, [r7, #32]
 8006c72:	415b      	adcs	r3, r3
 8006c74:	627b      	str	r3, [r7, #36]	@ 0x24
 8006c76:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006c7a:	4641      	mov	r1, r8
 8006c7c:	1854      	adds	r4, r2, r1
 8006c7e:	4649      	mov	r1, r9
 8006c80:	eb43 0501 	adc.w	r5, r3, r1
 8006c84:	f04f 0200 	mov.w	r2, #0
 8006c88:	f04f 0300 	mov.w	r3, #0
 8006c8c:	00eb      	lsls	r3, r5, #3
 8006c8e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006c92:	00e2      	lsls	r2, r4, #3
 8006c94:	4614      	mov	r4, r2
 8006c96:	461d      	mov	r5, r3
 8006c98:	4643      	mov	r3, r8
 8006c9a:	18e3      	adds	r3, r4, r3
 8006c9c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006ca0:	464b      	mov	r3, r9
 8006ca2:	eb45 0303 	adc.w	r3, r5, r3
 8006ca6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006caa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006cae:	685b      	ldr	r3, [r3, #4]
 8006cb0:	2200      	movs	r2, #0
 8006cb2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006cb6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006cba:	f04f 0200 	mov.w	r2, #0
 8006cbe:	f04f 0300 	mov.w	r3, #0
 8006cc2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006cc6:	4629      	mov	r1, r5
 8006cc8:	008b      	lsls	r3, r1, #2
 8006cca:	4621      	mov	r1, r4
 8006ccc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006cd0:	4621      	mov	r1, r4
 8006cd2:	008a      	lsls	r2, r1, #2
 8006cd4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006cd8:	f7f9 ff50 	bl	8000b7c <__aeabi_uldivmod>
 8006cdc:	4602      	mov	r2, r0
 8006cde:	460b      	mov	r3, r1
 8006ce0:	4b60      	ldr	r3, [pc, #384]	@ (8006e64 <UART_SetConfig+0x4e4>)
 8006ce2:	fba3 2302 	umull	r2, r3, r3, r2
 8006ce6:	095b      	lsrs	r3, r3, #5
 8006ce8:	011c      	lsls	r4, r3, #4
 8006cea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006cee:	2200      	movs	r2, #0
 8006cf0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006cf4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006cf8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006cfc:	4642      	mov	r2, r8
 8006cfe:	464b      	mov	r3, r9
 8006d00:	1891      	adds	r1, r2, r2
 8006d02:	61b9      	str	r1, [r7, #24]
 8006d04:	415b      	adcs	r3, r3
 8006d06:	61fb      	str	r3, [r7, #28]
 8006d08:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006d0c:	4641      	mov	r1, r8
 8006d0e:	1851      	adds	r1, r2, r1
 8006d10:	6139      	str	r1, [r7, #16]
 8006d12:	4649      	mov	r1, r9
 8006d14:	414b      	adcs	r3, r1
 8006d16:	617b      	str	r3, [r7, #20]
 8006d18:	f04f 0200 	mov.w	r2, #0
 8006d1c:	f04f 0300 	mov.w	r3, #0
 8006d20:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006d24:	4659      	mov	r1, fp
 8006d26:	00cb      	lsls	r3, r1, #3
 8006d28:	4651      	mov	r1, sl
 8006d2a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006d2e:	4651      	mov	r1, sl
 8006d30:	00ca      	lsls	r2, r1, #3
 8006d32:	4610      	mov	r0, r2
 8006d34:	4619      	mov	r1, r3
 8006d36:	4603      	mov	r3, r0
 8006d38:	4642      	mov	r2, r8
 8006d3a:	189b      	adds	r3, r3, r2
 8006d3c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006d40:	464b      	mov	r3, r9
 8006d42:	460a      	mov	r2, r1
 8006d44:	eb42 0303 	adc.w	r3, r2, r3
 8006d48:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006d4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d50:	685b      	ldr	r3, [r3, #4]
 8006d52:	2200      	movs	r2, #0
 8006d54:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006d56:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006d58:	f04f 0200 	mov.w	r2, #0
 8006d5c:	f04f 0300 	mov.w	r3, #0
 8006d60:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006d64:	4649      	mov	r1, r9
 8006d66:	008b      	lsls	r3, r1, #2
 8006d68:	4641      	mov	r1, r8
 8006d6a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006d6e:	4641      	mov	r1, r8
 8006d70:	008a      	lsls	r2, r1, #2
 8006d72:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006d76:	f7f9 ff01 	bl	8000b7c <__aeabi_uldivmod>
 8006d7a:	4602      	mov	r2, r0
 8006d7c:	460b      	mov	r3, r1
 8006d7e:	4611      	mov	r1, r2
 8006d80:	4b38      	ldr	r3, [pc, #224]	@ (8006e64 <UART_SetConfig+0x4e4>)
 8006d82:	fba3 2301 	umull	r2, r3, r3, r1
 8006d86:	095b      	lsrs	r3, r3, #5
 8006d88:	2264      	movs	r2, #100	@ 0x64
 8006d8a:	fb02 f303 	mul.w	r3, r2, r3
 8006d8e:	1acb      	subs	r3, r1, r3
 8006d90:	011b      	lsls	r3, r3, #4
 8006d92:	3332      	adds	r3, #50	@ 0x32
 8006d94:	4a33      	ldr	r2, [pc, #204]	@ (8006e64 <UART_SetConfig+0x4e4>)
 8006d96:	fba2 2303 	umull	r2, r3, r2, r3
 8006d9a:	095b      	lsrs	r3, r3, #5
 8006d9c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006da0:	441c      	add	r4, r3
 8006da2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006da6:	2200      	movs	r2, #0
 8006da8:	673b      	str	r3, [r7, #112]	@ 0x70
 8006daa:	677a      	str	r2, [r7, #116]	@ 0x74
 8006dac:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006db0:	4642      	mov	r2, r8
 8006db2:	464b      	mov	r3, r9
 8006db4:	1891      	adds	r1, r2, r2
 8006db6:	60b9      	str	r1, [r7, #8]
 8006db8:	415b      	adcs	r3, r3
 8006dba:	60fb      	str	r3, [r7, #12]
 8006dbc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006dc0:	4641      	mov	r1, r8
 8006dc2:	1851      	adds	r1, r2, r1
 8006dc4:	6039      	str	r1, [r7, #0]
 8006dc6:	4649      	mov	r1, r9
 8006dc8:	414b      	adcs	r3, r1
 8006dca:	607b      	str	r3, [r7, #4]
 8006dcc:	f04f 0200 	mov.w	r2, #0
 8006dd0:	f04f 0300 	mov.w	r3, #0
 8006dd4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006dd8:	4659      	mov	r1, fp
 8006dda:	00cb      	lsls	r3, r1, #3
 8006ddc:	4651      	mov	r1, sl
 8006dde:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006de2:	4651      	mov	r1, sl
 8006de4:	00ca      	lsls	r2, r1, #3
 8006de6:	4610      	mov	r0, r2
 8006de8:	4619      	mov	r1, r3
 8006dea:	4603      	mov	r3, r0
 8006dec:	4642      	mov	r2, r8
 8006dee:	189b      	adds	r3, r3, r2
 8006df0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006df2:	464b      	mov	r3, r9
 8006df4:	460a      	mov	r2, r1
 8006df6:	eb42 0303 	adc.w	r3, r2, r3
 8006dfa:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006dfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e00:	685b      	ldr	r3, [r3, #4]
 8006e02:	2200      	movs	r2, #0
 8006e04:	663b      	str	r3, [r7, #96]	@ 0x60
 8006e06:	667a      	str	r2, [r7, #100]	@ 0x64
 8006e08:	f04f 0200 	mov.w	r2, #0
 8006e0c:	f04f 0300 	mov.w	r3, #0
 8006e10:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006e14:	4649      	mov	r1, r9
 8006e16:	008b      	lsls	r3, r1, #2
 8006e18:	4641      	mov	r1, r8
 8006e1a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006e1e:	4641      	mov	r1, r8
 8006e20:	008a      	lsls	r2, r1, #2
 8006e22:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006e26:	f7f9 fea9 	bl	8000b7c <__aeabi_uldivmod>
 8006e2a:	4602      	mov	r2, r0
 8006e2c:	460b      	mov	r3, r1
 8006e2e:	4b0d      	ldr	r3, [pc, #52]	@ (8006e64 <UART_SetConfig+0x4e4>)
 8006e30:	fba3 1302 	umull	r1, r3, r3, r2
 8006e34:	095b      	lsrs	r3, r3, #5
 8006e36:	2164      	movs	r1, #100	@ 0x64
 8006e38:	fb01 f303 	mul.w	r3, r1, r3
 8006e3c:	1ad3      	subs	r3, r2, r3
 8006e3e:	011b      	lsls	r3, r3, #4
 8006e40:	3332      	adds	r3, #50	@ 0x32
 8006e42:	4a08      	ldr	r2, [pc, #32]	@ (8006e64 <UART_SetConfig+0x4e4>)
 8006e44:	fba2 2303 	umull	r2, r3, r2, r3
 8006e48:	095b      	lsrs	r3, r3, #5
 8006e4a:	f003 020f 	and.w	r2, r3, #15
 8006e4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	4422      	add	r2, r4
 8006e56:	609a      	str	r2, [r3, #8]
}
 8006e58:	bf00      	nop
 8006e5a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006e5e:	46bd      	mov	sp, r7
 8006e60:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006e64:	51eb851f 	.word	0x51eb851f

08006e68 <DEV_SPI_WRite>:
	HAL_Delay(xms);
}


void DEV_SPI_WRite(UBYTE _dat)
{
 8006e68:	b580      	push	{r7, lr}
 8006e6a:	b082      	sub	sp, #8
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	4603      	mov	r3, r0
 8006e70:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&hspi2, (uint8_t *)&_dat, 1, 500);
 8006e72:	1df9      	adds	r1, r7, #7
 8006e74:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8006e78:	2201      	movs	r2, #1
 8006e7a:	4803      	ldr	r0, [pc, #12]	@ (8006e88 <DEV_SPI_WRite+0x20>)
 8006e7c:	f7fe fa41 	bl	8005302 <HAL_SPI_Transmit>
}
 8006e80:	bf00      	nop
 8006e82:	3708      	adds	r7, #8
 8006e84:	46bd      	mov	sp, r7
 8006e86:	bd80      	pop	{r7, pc}
 8006e88:	20000184 	.word	0x20000184

08006e8c <DEV_Module_Init>:

int DEV_Module_Init(void)
{
 8006e8c:	b580      	push	{r7, lr}
 8006e8e:	af00      	add	r7, sp, #0
    DEV_Digital_Write(DEV_DC_PIN, 1);
 8006e90:	2201      	movs	r2, #1
 8006e92:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006e96:	480b      	ldr	r0, [pc, #44]	@ (8006ec4 <DEV_Module_Init+0x38>)
 8006e98:	f7fc fb96 	bl	80035c8 <HAL_GPIO_WritePin>
    DEV_Digital_Write(DEV_CS_PIN, 1);
 8006e9c:	2201      	movs	r2, #1
 8006e9e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8006ea2:	4808      	ldr	r0, [pc, #32]	@ (8006ec4 <DEV_Module_Init+0x38>)
 8006ea4:	f7fc fb90 	bl	80035c8 <HAL_GPIO_WritePin>
    DEV_Digital_Write(DEV_RST_PIN, 1);
 8006ea8:	2201      	movs	r2, #1
 8006eaa:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8006eae:	4805      	ldr	r0, [pc, #20]	@ (8006ec4 <DEV_Module_Init+0x38>)
 8006eb0:	f7fc fb8a 	bl	80035c8 <HAL_GPIO_WritePin>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8006eb4:	2104      	movs	r1, #4
 8006eb6:	4804      	ldr	r0, [pc, #16]	@ (8006ec8 <DEV_Module_Init+0x3c>)
 8006eb8:	f7fe fd8c 	bl	80059d4 <HAL_TIM_PWM_Start>
		return 0;
 8006ebc:	2300      	movs	r3, #0
}
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	bd80      	pop	{r7, pc}
 8006ec2:	bf00      	nop
 8006ec4:	40020400 	.word	0x40020400
 8006ec8:	200001e0 	.word	0x200001e0

08006ecc <Paint_NewImage>:
    width   :   The width of the picture
    Height  :   The height of the picture
    Color   :   Whether the picture is inverted
******************************************************************************/
void Paint_NewImage(UWORD Width, UWORD Height, UWORD Rotate, UWORD Color)
{
 8006ecc:	b590      	push	{r4, r7, lr}
 8006ece:	b083      	sub	sp, #12
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	4604      	mov	r4, r0
 8006ed4:	4608      	mov	r0, r1
 8006ed6:	4611      	mov	r1, r2
 8006ed8:	461a      	mov	r2, r3
 8006eda:	4623      	mov	r3, r4
 8006edc:	80fb      	strh	r3, [r7, #6]
 8006ede:	4603      	mov	r3, r0
 8006ee0:	80bb      	strh	r3, [r7, #4]
 8006ee2:	460b      	mov	r3, r1
 8006ee4:	807b      	strh	r3, [r7, #2]
 8006ee6:	4613      	mov	r3, r2
 8006ee8:	803b      	strh	r3, [r7, #0]
    Paint.WidthMemory = Width;
 8006eea:	4a1c      	ldr	r2, [pc, #112]	@ (8006f5c <Paint_NewImage+0x90>)
 8006eec:	88fb      	ldrh	r3, [r7, #6]
 8006eee:	8113      	strh	r3, [r2, #8]
    Paint.HeightMemory = Height;
 8006ef0:	4a1a      	ldr	r2, [pc, #104]	@ (8006f5c <Paint_NewImage+0x90>)
 8006ef2:	88bb      	ldrh	r3, [r7, #4]
 8006ef4:	8153      	strh	r3, [r2, #10]
    Paint.Color = Color;    
 8006ef6:	4a19      	ldr	r2, [pc, #100]	@ (8006f5c <Paint_NewImage+0x90>)
 8006ef8:	883b      	ldrh	r3, [r7, #0]
 8006efa:	8193      	strh	r3, [r2, #12]
    Paint.WidthByte = Width;
 8006efc:	4a17      	ldr	r2, [pc, #92]	@ (8006f5c <Paint_NewImage+0x90>)
 8006efe:	88fb      	ldrh	r3, [r7, #6]
 8006f00:	8253      	strh	r3, [r2, #18]
    Paint.HeightByte = Height;    
 8006f02:	4a16      	ldr	r2, [pc, #88]	@ (8006f5c <Paint_NewImage+0x90>)
 8006f04:	88bb      	ldrh	r3, [r7, #4]
 8006f06:	8293      	strh	r3, [r2, #20]
    printf("WidthByte = %d, HeightByte = %d\r\n", Paint.WidthByte, Paint.HeightByte);
 8006f08:	4b14      	ldr	r3, [pc, #80]	@ (8006f5c <Paint_NewImage+0x90>)
 8006f0a:	8a5b      	ldrh	r3, [r3, #18]
 8006f0c:	b29b      	uxth	r3, r3
 8006f0e:	4619      	mov	r1, r3
 8006f10:	4b12      	ldr	r3, [pc, #72]	@ (8006f5c <Paint_NewImage+0x90>)
 8006f12:	8a9b      	ldrh	r3, [r3, #20]
 8006f14:	b29b      	uxth	r3, r3
 8006f16:	461a      	mov	r2, r3
 8006f18:	4811      	ldr	r0, [pc, #68]	@ (8006f60 <Paint_NewImage+0x94>)
 8006f1a:	f000 fdfb 	bl	8007b14 <iprintf>
   
    Paint.Rotate = Rotate;
 8006f1e:	4a0f      	ldr	r2, [pc, #60]	@ (8006f5c <Paint_NewImage+0x90>)
 8006f20:	887b      	ldrh	r3, [r7, #2]
 8006f22:	81d3      	strh	r3, [r2, #14]
    Paint.Mirror = MIRROR_NONE;
 8006f24:	4b0d      	ldr	r3, [pc, #52]	@ (8006f5c <Paint_NewImage+0x90>)
 8006f26:	2200      	movs	r2, #0
 8006f28:	821a      	strh	r2, [r3, #16]
    
    if(Rotate == ROTATE_0 || Rotate == ROTATE_180) {
 8006f2a:	887b      	ldrh	r3, [r7, #2]
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d002      	beq.n	8006f36 <Paint_NewImage+0x6a>
 8006f30:	887b      	ldrh	r3, [r7, #2]
 8006f32:	2bb4      	cmp	r3, #180	@ 0xb4
 8006f34:	d106      	bne.n	8006f44 <Paint_NewImage+0x78>
        Paint.Width = Width;
 8006f36:	4a09      	ldr	r2, [pc, #36]	@ (8006f5c <Paint_NewImage+0x90>)
 8006f38:	88fb      	ldrh	r3, [r7, #6]
 8006f3a:	8093      	strh	r3, [r2, #4]
        Paint.Height = Height;
 8006f3c:	4a07      	ldr	r2, [pc, #28]	@ (8006f5c <Paint_NewImage+0x90>)
 8006f3e:	88bb      	ldrh	r3, [r7, #4]
 8006f40:	80d3      	strh	r3, [r2, #6]
 8006f42:	e006      	b.n	8006f52 <Paint_NewImage+0x86>
    } else {
        Paint.Width = Height;
 8006f44:	4a05      	ldr	r2, [pc, #20]	@ (8006f5c <Paint_NewImage+0x90>)
 8006f46:	88bb      	ldrh	r3, [r7, #4]
 8006f48:	8093      	strh	r3, [r2, #4]
        Paint.Height = Width;
 8006f4a:	4a04      	ldr	r2, [pc, #16]	@ (8006f5c <Paint_NewImage+0x90>)
 8006f4c:	88fb      	ldrh	r3, [r7, #6]
 8006f4e:	80d3      	strh	r3, [r2, #6]
    }
}
 8006f50:	bf00      	nop
 8006f52:	bf00      	nop
 8006f54:	370c      	adds	r7, #12
 8006f56:	46bd      	mov	sp, r7
 8006f58:	bd90      	pop	{r4, r7, pc}
 8006f5a:	bf00      	nop
 8006f5c:	2000034c 	.word	0x2000034c
 8006f60:	08008c1c 	.word	0x08008c1c

08006f64 <Paint_SetClearFuntion>:
function:	Select Clear Funtion
parameter:
      Clear :   Pointer to Clear funtion 
******************************************************************************/
void Paint_SetClearFuntion(void (*Clear)(UWORD))
{
 8006f64:	b480      	push	{r7}
 8006f66:	b083      	sub	sp, #12
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	6078      	str	r0, [r7, #4]
  CLEAR=Clear;
 8006f6c:	4a04      	ldr	r2, [pc, #16]	@ (8006f80 <Paint_SetClearFuntion+0x1c>)
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	6013      	str	r3, [r2, #0]
}
 8006f72:	bf00      	nop
 8006f74:	370c      	adds	r7, #12
 8006f76:	46bd      	mov	sp, r7
 8006f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7c:	4770      	bx	lr
 8006f7e:	bf00      	nop
 8006f80:	20000368 	.word	0x20000368

08006f84 <Paint_SetDisplayFuntion>:
function:	Select DisplayF untion
parameter:
      Display :   Pointer to display funtion 
******************************************************************************/
void Paint_SetDisplayFuntion(void (*Display)(UWORD,UWORD,UWORD))
{
 8006f84:	b480      	push	{r7}
 8006f86:	b083      	sub	sp, #12
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]
  DISPLAY=Display;
 8006f8c:	4a04      	ldr	r2, [pc, #16]	@ (8006fa0 <Paint_SetDisplayFuntion+0x1c>)
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	6013      	str	r3, [r2, #0]
}
 8006f92:	bf00      	nop
 8006f94:	370c      	adds	r7, #12
 8006f96:	46bd      	mov	sp, r7
 8006f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9c:	4770      	bx	lr
 8006f9e:	bf00      	nop
 8006fa0:	20000364 	.word	0x20000364

08006fa4 <Paint_SetRotate>:
function:	Select Image Rotate
parameter:
    Rotate   :   0,90,180,270
******************************************************************************/
void Paint_SetRotate(UWORD Rotate)
{
 8006fa4:	b580      	push	{r7, lr}
 8006fa6:	b082      	sub	sp, #8
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	4603      	mov	r3, r0
 8006fac:	80fb      	strh	r3, [r7, #6]
    if(Rotate == ROTATE_0 || Rotate == ROTATE_90 || Rotate == ROTATE_180 || Rotate == ROTATE_270) {
 8006fae:	88fb      	ldrh	r3, [r7, #6]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d009      	beq.n	8006fc8 <Paint_SetRotate+0x24>
 8006fb4:	88fb      	ldrh	r3, [r7, #6]
 8006fb6:	2b5a      	cmp	r3, #90	@ 0x5a
 8006fb8:	d006      	beq.n	8006fc8 <Paint_SetRotate+0x24>
 8006fba:	88fb      	ldrh	r3, [r7, #6]
 8006fbc:	2bb4      	cmp	r3, #180	@ 0xb4
 8006fbe:	d003      	beq.n	8006fc8 <Paint_SetRotate+0x24>
 8006fc0:	88fb      	ldrh	r3, [r7, #6]
 8006fc2:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 8006fc6:	d108      	bne.n	8006fda <Paint_SetRotate+0x36>
        Debug("Set image Rotate %d\r\n", Rotate);
 8006fc8:	88fb      	ldrh	r3, [r7, #6]
 8006fca:	4619      	mov	r1, r3
 8006fcc:	4807      	ldr	r0, [pc, #28]	@ (8006fec <Paint_SetRotate+0x48>)
 8006fce:	f000 fda1 	bl	8007b14 <iprintf>
        Paint.Rotate = Rotate;
 8006fd2:	4a07      	ldr	r2, [pc, #28]	@ (8006ff0 <Paint_SetRotate+0x4c>)
 8006fd4:	88fb      	ldrh	r3, [r7, #6]
 8006fd6:	81d3      	strh	r3, [r2, #14]
 8006fd8:	e003      	b.n	8006fe2 <Paint_SetRotate+0x3e>
    } else {
        Debug("rotate = 0, 90, 180, 270\r\n");
 8006fda:	4806      	ldr	r0, [pc, #24]	@ (8006ff4 <Paint_SetRotate+0x50>)
 8006fdc:	f000 fe02 	bl	8007be4 <puts>
      //  exit(0);
    }
}
 8006fe0:	bf00      	nop
 8006fe2:	bf00      	nop
 8006fe4:	3708      	adds	r7, #8
 8006fe6:	46bd      	mov	sp, r7
 8006fe8:	bd80      	pop	{r7, pc}
 8006fea:	bf00      	nop
 8006fec:	08008c40 	.word	0x08008c40
 8006ff0:	2000034c 	.word	0x2000034c
 8006ff4:	08008c60 	.word	0x08008c60

08006ff8 <Paint_SetPixel>:
    Xpoint  :   At point X
    Ypoint  :   At point Y
    Color   :   Painted colors
******************************************************************************/
void Paint_SetPixel(UWORD Xpoint, UWORD Ypoint, UWORD Color)
{
 8006ff8:	b580      	push	{r7, lr}
 8006ffa:	b084      	sub	sp, #16
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	4603      	mov	r3, r0
 8007000:	80fb      	strh	r3, [r7, #6]
 8007002:	460b      	mov	r3, r1
 8007004:	80bb      	strh	r3, [r7, #4]
 8007006:	4613      	mov	r3, r2
 8007008:	807b      	strh	r3, [r7, #2]
    if(Xpoint > Paint.Width || Ypoint > Paint.Height){
 800700a:	4b50      	ldr	r3, [pc, #320]	@ (800714c <Paint_SetPixel+0x154>)
 800700c:	889b      	ldrh	r3, [r3, #4]
 800700e:	b29b      	uxth	r3, r3
 8007010:	88fa      	ldrh	r2, [r7, #6]
 8007012:	429a      	cmp	r2, r3
 8007014:	d805      	bhi.n	8007022 <Paint_SetPixel+0x2a>
 8007016:	4b4d      	ldr	r3, [pc, #308]	@ (800714c <Paint_SetPixel+0x154>)
 8007018:	88db      	ldrh	r3, [r3, #6]
 800701a:	b29b      	uxth	r3, r3
 800701c:	88ba      	ldrh	r2, [r7, #4]
 800701e:	429a      	cmp	r2, r3
 8007020:	d903      	bls.n	800702a <Paint_SetPixel+0x32>
        Debug("Exceeding display boundaries\r\n");
 8007022:	484b      	ldr	r0, [pc, #300]	@ (8007150 <Paint_SetPixel+0x158>)
 8007024:	f000 fdde 	bl	8007be4 <puts>
        return;
 8007028:	e08c      	b.n	8007144 <Paint_SetPixel+0x14c>
    }      
    UWORD X, Y;

    switch(Paint.Rotate) {
 800702a:	4b48      	ldr	r3, [pc, #288]	@ (800714c <Paint_SetPixel+0x154>)
 800702c:	89db      	ldrh	r3, [r3, #14]
 800702e:	b29b      	uxth	r3, r3
 8007030:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 8007034:	d02d      	beq.n	8007092 <Paint_SetPixel+0x9a>
 8007036:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 800703a:	f300 8080 	bgt.w	800713e <Paint_SetPixel+0x146>
 800703e:	2bb4      	cmp	r3, #180	@ 0xb4
 8007040:	d016      	beq.n	8007070 <Paint_SetPixel+0x78>
 8007042:	2bb4      	cmp	r3, #180	@ 0xb4
 8007044:	dc7b      	bgt.n	800713e <Paint_SetPixel+0x146>
 8007046:	2b00      	cmp	r3, #0
 8007048:	d002      	beq.n	8007050 <Paint_SetPixel+0x58>
 800704a:	2b5a      	cmp	r3, #90	@ 0x5a
 800704c:	d005      	beq.n	800705a <Paint_SetPixel+0x62>
        X = Ypoint;
        Y = Paint.HeightMemory - Xpoint - 1;
        break;

    default:
        return;
 800704e:	e076      	b.n	800713e <Paint_SetPixel+0x146>
        X = Xpoint;
 8007050:	88fb      	ldrh	r3, [r7, #6]
 8007052:	81fb      	strh	r3, [r7, #14]
        Y = Ypoint;  
 8007054:	88bb      	ldrh	r3, [r7, #4]
 8007056:	81bb      	strh	r3, [r7, #12]
        break;
 8007058:	e026      	b.n	80070a8 <Paint_SetPixel+0xb0>
        X = Paint.WidthMemory - Ypoint - 1;
 800705a:	4b3c      	ldr	r3, [pc, #240]	@ (800714c <Paint_SetPixel+0x154>)
 800705c:	891b      	ldrh	r3, [r3, #8]
 800705e:	b29a      	uxth	r2, r3
 8007060:	88bb      	ldrh	r3, [r7, #4]
 8007062:	1ad3      	subs	r3, r2, r3
 8007064:	b29b      	uxth	r3, r3
 8007066:	3b01      	subs	r3, #1
 8007068:	81fb      	strh	r3, [r7, #14]
        Y = Xpoint;
 800706a:	88fb      	ldrh	r3, [r7, #6]
 800706c:	81bb      	strh	r3, [r7, #12]
        break;
 800706e:	e01b      	b.n	80070a8 <Paint_SetPixel+0xb0>
        X = Paint.WidthMemory - Xpoint - 1;
 8007070:	4b36      	ldr	r3, [pc, #216]	@ (800714c <Paint_SetPixel+0x154>)
 8007072:	891b      	ldrh	r3, [r3, #8]
 8007074:	b29a      	uxth	r2, r3
 8007076:	88fb      	ldrh	r3, [r7, #6]
 8007078:	1ad3      	subs	r3, r2, r3
 800707a:	b29b      	uxth	r3, r3
 800707c:	3b01      	subs	r3, #1
 800707e:	81fb      	strh	r3, [r7, #14]
        Y = Paint.HeightMemory - Ypoint - 1;
 8007080:	4b32      	ldr	r3, [pc, #200]	@ (800714c <Paint_SetPixel+0x154>)
 8007082:	895b      	ldrh	r3, [r3, #10]
 8007084:	b29a      	uxth	r2, r3
 8007086:	88bb      	ldrh	r3, [r7, #4]
 8007088:	1ad3      	subs	r3, r2, r3
 800708a:	b29b      	uxth	r3, r3
 800708c:	3b01      	subs	r3, #1
 800708e:	81bb      	strh	r3, [r7, #12]
        break;
 8007090:	e00a      	b.n	80070a8 <Paint_SetPixel+0xb0>
        X = Ypoint;
 8007092:	88bb      	ldrh	r3, [r7, #4]
 8007094:	81fb      	strh	r3, [r7, #14]
        Y = Paint.HeightMemory - Xpoint - 1;
 8007096:	4b2d      	ldr	r3, [pc, #180]	@ (800714c <Paint_SetPixel+0x154>)
 8007098:	895b      	ldrh	r3, [r3, #10]
 800709a:	b29a      	uxth	r2, r3
 800709c:	88fb      	ldrh	r3, [r7, #6]
 800709e:	1ad3      	subs	r3, r2, r3
 80070a0:	b29b      	uxth	r3, r3
 80070a2:	3b01      	subs	r3, #1
 80070a4:	81bb      	strh	r3, [r7, #12]
        break;
 80070a6:	bf00      	nop
    }
    
    switch(Paint.Mirror) {
 80070a8:	4b28      	ldr	r3, [pc, #160]	@ (800714c <Paint_SetPixel+0x154>)
 80070aa:	8a1b      	ldrh	r3, [r3, #16]
 80070ac:	b29b      	uxth	r3, r3
 80070ae:	2b03      	cmp	r3, #3
 80070b0:	d847      	bhi.n	8007142 <Paint_SetPixel+0x14a>
 80070b2:	a201      	add	r2, pc, #4	@ (adr r2, 80070b8 <Paint_SetPixel+0xc0>)
 80070b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070b8:	0800710f 	.word	0x0800710f
 80070bc:	080070c9 	.word	0x080070c9
 80070c0:	080070db 	.word	0x080070db
 80070c4:	080070ed 	.word	0x080070ed
    case MIRROR_NONE:
        break;
    case MIRROR_HORIZONTAL:
        X = Paint.WidthMemory - X - 1;
 80070c8:	4b20      	ldr	r3, [pc, #128]	@ (800714c <Paint_SetPixel+0x154>)
 80070ca:	891b      	ldrh	r3, [r3, #8]
 80070cc:	b29a      	uxth	r2, r3
 80070ce:	89fb      	ldrh	r3, [r7, #14]
 80070d0:	1ad3      	subs	r3, r2, r3
 80070d2:	b29b      	uxth	r3, r3
 80070d4:	3b01      	subs	r3, #1
 80070d6:	81fb      	strh	r3, [r7, #14]
        break;
 80070d8:	e01a      	b.n	8007110 <Paint_SetPixel+0x118>
    case MIRROR_VERTICAL:
        Y = Paint.HeightMemory - Y - 1;
 80070da:	4b1c      	ldr	r3, [pc, #112]	@ (800714c <Paint_SetPixel+0x154>)
 80070dc:	895b      	ldrh	r3, [r3, #10]
 80070de:	b29a      	uxth	r2, r3
 80070e0:	89bb      	ldrh	r3, [r7, #12]
 80070e2:	1ad3      	subs	r3, r2, r3
 80070e4:	b29b      	uxth	r3, r3
 80070e6:	3b01      	subs	r3, #1
 80070e8:	81bb      	strh	r3, [r7, #12]
        break;
 80070ea:	e011      	b.n	8007110 <Paint_SetPixel+0x118>
    case MIRROR_ORIGIN:
        X = Paint.WidthMemory - X - 1;
 80070ec:	4b17      	ldr	r3, [pc, #92]	@ (800714c <Paint_SetPixel+0x154>)
 80070ee:	891b      	ldrh	r3, [r3, #8]
 80070f0:	b29a      	uxth	r2, r3
 80070f2:	89fb      	ldrh	r3, [r7, #14]
 80070f4:	1ad3      	subs	r3, r2, r3
 80070f6:	b29b      	uxth	r3, r3
 80070f8:	3b01      	subs	r3, #1
 80070fa:	81fb      	strh	r3, [r7, #14]
        Y = Paint.HeightMemory - Y - 1;
 80070fc:	4b13      	ldr	r3, [pc, #76]	@ (800714c <Paint_SetPixel+0x154>)
 80070fe:	895b      	ldrh	r3, [r3, #10]
 8007100:	b29a      	uxth	r2, r3
 8007102:	89bb      	ldrh	r3, [r7, #12]
 8007104:	1ad3      	subs	r3, r2, r3
 8007106:	b29b      	uxth	r3, r3
 8007108:	3b01      	subs	r3, #1
 800710a:	81bb      	strh	r3, [r7, #12]
        break;
 800710c:	e000      	b.n	8007110 <Paint_SetPixel+0x118>
        break;
 800710e:	bf00      	nop
    default:
        return;
    }

    // printf("x = %d, y = %d\r\n", X, Y);
    if(X > Paint.WidthMemory || Y > Paint.HeightMemory){
 8007110:	4b0e      	ldr	r3, [pc, #56]	@ (800714c <Paint_SetPixel+0x154>)
 8007112:	891b      	ldrh	r3, [r3, #8]
 8007114:	b29b      	uxth	r3, r3
 8007116:	89fa      	ldrh	r2, [r7, #14]
 8007118:	429a      	cmp	r2, r3
 800711a:	d805      	bhi.n	8007128 <Paint_SetPixel+0x130>
 800711c:	4b0b      	ldr	r3, [pc, #44]	@ (800714c <Paint_SetPixel+0x154>)
 800711e:	895b      	ldrh	r3, [r3, #10]
 8007120:	b29b      	uxth	r3, r3
 8007122:	89ba      	ldrh	r2, [r7, #12]
 8007124:	429a      	cmp	r2, r3
 8007126:	d903      	bls.n	8007130 <Paint_SetPixel+0x138>
        Debug("Exceeding display boundaries\r\n");
 8007128:	4809      	ldr	r0, [pc, #36]	@ (8007150 <Paint_SetPixel+0x158>)
 800712a:	f000 fd5b 	bl	8007be4 <puts>
        return;
 800712e:	e009      	b.n	8007144 <Paint_SetPixel+0x14c>
    }
    
   // UDOUBLE Addr = X / 8 + Y * Paint.WidthByte;
		DISPLAY(X,Y, Color);
 8007130:	4b08      	ldr	r3, [pc, #32]	@ (8007154 <Paint_SetPixel+0x15c>)
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	887a      	ldrh	r2, [r7, #2]
 8007136:	89b9      	ldrh	r1, [r7, #12]
 8007138:	89f8      	ldrh	r0, [r7, #14]
 800713a:	4798      	blx	r3
 800713c:	e002      	b.n	8007144 <Paint_SetPixel+0x14c>
        return;
 800713e:	bf00      	nop
 8007140:	e000      	b.n	8007144 <Paint_SetPixel+0x14c>
        return;
 8007142:	bf00      	nop
}
 8007144:	3710      	adds	r7, #16
 8007146:	46bd      	mov	sp, r7
 8007148:	bd80      	pop	{r7, pc}
 800714a:	bf00      	nop
 800714c:	2000034c 	.word	0x2000034c
 8007150:	08008d1c 	.word	0x08008d1c
 8007154:	20000364 	.word	0x20000364

08007158 <Paint_Clear>:
function:	Clear the color of the picture
parameter:
    Color   :   Painted colors
******************************************************************************/
void Paint_Clear(UWORD Color)
{	
 8007158:	b580      	push	{r7, lr}
 800715a:	b082      	sub	sp, #8
 800715c:	af00      	add	r7, sp, #0
 800715e:	4603      	mov	r3, r0
 8007160:	80fb      	strh	r3, [r7, #6]
	CLEAR(Color);
 8007162:	4b04      	ldr	r3, [pc, #16]	@ (8007174 <Paint_Clear+0x1c>)
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	88fa      	ldrh	r2, [r7, #6]
 8007168:	4610      	mov	r0, r2
 800716a:	4798      	blx	r3
}
 800716c:	bf00      	nop
 800716e:	3708      	adds	r7, #8
 8007170:	46bd      	mov	sp, r7
 8007172:	bd80      	pop	{r7, pc}
 8007174:	20000368 	.word	0x20000368

08007178 <Paint_DrawChar>:
    Color_Background : Select the background color of the English character
    Color_Foreground : Select the foreground color of the English character
******************************************************************************/
void Paint_DrawChar(UWORD Xpoint, UWORD Ypoint, const char Acsii_Char,
                    sFONT* Font, UWORD Color_Background, UWORD Color_Foreground)
{
 8007178:	b580      	push	{r7, lr}
 800717a:	b088      	sub	sp, #32
 800717c:	af00      	add	r7, sp, #0
 800717e:	607b      	str	r3, [r7, #4]
 8007180:	4603      	mov	r3, r0
 8007182:	81fb      	strh	r3, [r7, #14]
 8007184:	460b      	mov	r3, r1
 8007186:	81bb      	strh	r3, [r7, #12]
 8007188:	4613      	mov	r3, r2
 800718a:	72fb      	strb	r3, [r7, #11]
    UWORD Page, Column;

    if (Xpoint > Paint.Width || Ypoint > Paint.Height) {
 800718c:	4b4e      	ldr	r3, [pc, #312]	@ (80072c8 <Paint_DrawChar+0x150>)
 800718e:	889b      	ldrh	r3, [r3, #4]
 8007190:	b29b      	uxth	r3, r3
 8007192:	89fa      	ldrh	r2, [r7, #14]
 8007194:	429a      	cmp	r2, r3
 8007196:	d805      	bhi.n	80071a4 <Paint_DrawChar+0x2c>
 8007198:	4b4b      	ldr	r3, [pc, #300]	@ (80072c8 <Paint_DrawChar+0x150>)
 800719a:	88db      	ldrh	r3, [r3, #6]
 800719c:	b29b      	uxth	r3, r3
 800719e:	89ba      	ldrh	r2, [r7, #12]
 80071a0:	429a      	cmp	r2, r3
 80071a2:	d903      	bls.n	80071ac <Paint_DrawChar+0x34>
        Debug("Paint_DrawChar Input exceeds the normal display range\r\n");
 80071a4:	4849      	ldr	r0, [pc, #292]	@ (80072cc <Paint_DrawChar+0x154>)
 80071a6:	f000 fd1d 	bl	8007be4 <puts>
        return;
 80071aa:	e089      	b.n	80072c0 <Paint_DrawChar+0x148>
    }

    uint32_t Char_Offset = (Acsii_Char - ' ') * Font->Height * (Font->Width / 8 + (Font->Width % 8 ? 1 : 0));
 80071ac:	7afb      	ldrb	r3, [r7, #11]
 80071ae:	3b20      	subs	r3, #32
 80071b0:	687a      	ldr	r2, [r7, #4]
 80071b2:	88d2      	ldrh	r2, [r2, #6]
 80071b4:	fb02 f303 	mul.w	r3, r2, r3
 80071b8:	687a      	ldr	r2, [r7, #4]
 80071ba:	8892      	ldrh	r2, [r2, #4]
 80071bc:	08d2      	lsrs	r2, r2, #3
 80071be:	b292      	uxth	r2, r2
 80071c0:	4611      	mov	r1, r2
 80071c2:	687a      	ldr	r2, [r7, #4]
 80071c4:	8892      	ldrh	r2, [r2, #4]
 80071c6:	f002 0207 	and.w	r2, r2, #7
 80071ca:	b292      	uxth	r2, r2
 80071cc:	2a00      	cmp	r2, #0
 80071ce:	bf14      	ite	ne
 80071d0:	2201      	movne	r2, #1
 80071d2:	2200      	moveq	r2, #0
 80071d4:	b2d2      	uxtb	r2, r2
 80071d6:	440a      	add	r2, r1
 80071d8:	fb02 f303 	mul.w	r3, r2, r3
 80071dc:	617b      	str	r3, [r7, #20]
    const unsigned char *ptr = &Font->table[Char_Offset];
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681a      	ldr	r2, [r3, #0]
 80071e2:	697b      	ldr	r3, [r7, #20]
 80071e4:	4413      	add	r3, r2
 80071e6:	61bb      	str	r3, [r7, #24]

    for (Page = 0; Page < Font->Height; Page ++ ) {
 80071e8:	2300      	movs	r3, #0
 80071ea:	83fb      	strh	r3, [r7, #30]
 80071ec:	e063      	b.n	80072b6 <Paint_DrawChar+0x13e>
        for (Column = 0; Column < Font->Width; Column ++ ) {
 80071ee:	2300      	movs	r3, #0
 80071f0:	83bb      	strh	r3, [r7, #28]
 80071f2:	e04e      	b.n	8007292 <Paint_DrawChar+0x11a>

            //To determine whether the font background color and screen background color is consistent
            if (FONT_BACKGROUND == Color_Background) { //this process is to speed up the scan
 80071f4:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80071f6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80071fa:	4293      	cmp	r3, r2
 80071fc:	d118      	bne.n	8007230 <Paint_DrawChar+0xb8>
                if (*ptr & (0x80 >> (Column % 8)))
 80071fe:	69bb      	ldr	r3, [r7, #24]
 8007200:	781b      	ldrb	r3, [r3, #0]
 8007202:	4619      	mov	r1, r3
 8007204:	8bbb      	ldrh	r3, [r7, #28]
 8007206:	f003 0307 	and.w	r3, r3, #7
 800720a:	2280      	movs	r2, #128	@ 0x80
 800720c:	fa42 f303 	asr.w	r3, r2, r3
 8007210:	400b      	ands	r3, r1
 8007212:	2b00      	cmp	r3, #0
 8007214:	d031      	beq.n	800727a <Paint_DrawChar+0x102>
                    Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Foreground);
 8007216:	89fa      	ldrh	r2, [r7, #14]
 8007218:	8bbb      	ldrh	r3, [r7, #28]
 800721a:	4413      	add	r3, r2
 800721c:	b298      	uxth	r0, r3
 800721e:	89ba      	ldrh	r2, [r7, #12]
 8007220:	8bfb      	ldrh	r3, [r7, #30]
 8007222:	4413      	add	r3, r2
 8007224:	b29b      	uxth	r3, r3
 8007226:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8007228:	4619      	mov	r1, r3
 800722a:	f7ff fee5 	bl	8006ff8 <Paint_SetPixel>
 800722e:	e024      	b.n	800727a <Paint_DrawChar+0x102>
                    // Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Foreground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
            } else {
                if (*ptr & (0x80 >> (Column % 8))) {
 8007230:	69bb      	ldr	r3, [r7, #24]
 8007232:	781b      	ldrb	r3, [r3, #0]
 8007234:	4619      	mov	r1, r3
 8007236:	8bbb      	ldrh	r3, [r7, #28]
 8007238:	f003 0307 	and.w	r3, r3, #7
 800723c:	2280      	movs	r2, #128	@ 0x80
 800723e:	fa42 f303 	asr.w	r3, r2, r3
 8007242:	400b      	ands	r3, r1
 8007244:	2b00      	cmp	r3, #0
 8007246:	d00c      	beq.n	8007262 <Paint_DrawChar+0xea>
                    Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Foreground);
 8007248:	89fa      	ldrh	r2, [r7, #14]
 800724a:	8bbb      	ldrh	r3, [r7, #28]
 800724c:	4413      	add	r3, r2
 800724e:	b298      	uxth	r0, r3
 8007250:	89ba      	ldrh	r2, [r7, #12]
 8007252:	8bfb      	ldrh	r3, [r7, #30]
 8007254:	4413      	add	r3, r2
 8007256:	b29b      	uxth	r3, r3
 8007258:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 800725a:	4619      	mov	r1, r3
 800725c:	f7ff fecc 	bl	8006ff8 <Paint_SetPixel>
 8007260:	e00b      	b.n	800727a <Paint_DrawChar+0x102>
                    // Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Foreground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
                } else {
                    Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Background);
 8007262:	89fa      	ldrh	r2, [r7, #14]
 8007264:	8bbb      	ldrh	r3, [r7, #28]
 8007266:	4413      	add	r3, r2
 8007268:	b298      	uxth	r0, r3
 800726a:	89ba      	ldrh	r2, [r7, #12]
 800726c:	8bfb      	ldrh	r3, [r7, #30]
 800726e:	4413      	add	r3, r2
 8007270:	b29b      	uxth	r3, r3
 8007272:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8007274:	4619      	mov	r1, r3
 8007276:	f7ff febf 	bl	8006ff8 <Paint_SetPixel>
                    // Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Background, DOT_PIXEL_DFT, DOT_STYLE_DFT);
                }
            }
            //One pixel is 8 bits
            if (Column % 8 == 7)
 800727a:	8bbb      	ldrh	r3, [r7, #28]
 800727c:	f003 0307 	and.w	r3, r3, #7
 8007280:	b29b      	uxth	r3, r3
 8007282:	2b07      	cmp	r3, #7
 8007284:	d102      	bne.n	800728c <Paint_DrawChar+0x114>
                ptr++;
 8007286:	69bb      	ldr	r3, [r7, #24]
 8007288:	3301      	adds	r3, #1
 800728a:	61bb      	str	r3, [r7, #24]
        for (Column = 0; Column < Font->Width; Column ++ ) {
 800728c:	8bbb      	ldrh	r3, [r7, #28]
 800728e:	3301      	adds	r3, #1
 8007290:	83bb      	strh	r3, [r7, #28]
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	889b      	ldrh	r3, [r3, #4]
 8007296:	8bba      	ldrh	r2, [r7, #28]
 8007298:	429a      	cmp	r2, r3
 800729a:	d3ab      	bcc.n	80071f4 <Paint_DrawChar+0x7c>
        }// Write a line
        if (Font->Width % 8 != 0)
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	889b      	ldrh	r3, [r3, #4]
 80072a0:	f003 0307 	and.w	r3, r3, #7
 80072a4:	b29b      	uxth	r3, r3
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d002      	beq.n	80072b0 <Paint_DrawChar+0x138>
            ptr++;
 80072aa:	69bb      	ldr	r3, [r7, #24]
 80072ac:	3301      	adds	r3, #1
 80072ae:	61bb      	str	r3, [r7, #24]
    for (Page = 0; Page < Font->Height; Page ++ ) {
 80072b0:	8bfb      	ldrh	r3, [r7, #30]
 80072b2:	3301      	adds	r3, #1
 80072b4:	83fb      	strh	r3, [r7, #30]
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	88db      	ldrh	r3, [r3, #6]
 80072ba:	8bfa      	ldrh	r2, [r7, #30]
 80072bc:	429a      	cmp	r2, r3
 80072be:	d396      	bcc.n	80071ee <Paint_DrawChar+0x76>
    }// Write all
}
 80072c0:	3720      	adds	r7, #32
 80072c2:	46bd      	mov	sp, r7
 80072c4:	bd80      	pop	{r7, pc}
 80072c6:	bf00      	nop
 80072c8:	2000034c 	.word	0x2000034c
 80072cc:	08008e38 	.word	0x08008e38

080072d0 <Paint_DrawString_EN>:
    Color_Background : Select the background color of the English character
    Color_Foreground : Select the foreground color of the English character
******************************************************************************/
void Paint_DrawString_EN(UWORD Xstart, UWORD Ystart, const char * pString,
                         sFONT* Font, UWORD Color_Background, UWORD Color_Foreground )
{
 80072d0:	b580      	push	{r7, lr}
 80072d2:	b088      	sub	sp, #32
 80072d4:	af02      	add	r7, sp, #8
 80072d6:	60ba      	str	r2, [r7, #8]
 80072d8:	607b      	str	r3, [r7, #4]
 80072da:	4603      	mov	r3, r0
 80072dc:	81fb      	strh	r3, [r7, #14]
 80072de:	460b      	mov	r3, r1
 80072e0:	81bb      	strh	r3, [r7, #12]
    UWORD Xpoint = Xstart;
 80072e2:	89fb      	ldrh	r3, [r7, #14]
 80072e4:	82fb      	strh	r3, [r7, #22]
    UWORD Ypoint = Ystart;
 80072e6:	89bb      	ldrh	r3, [r7, #12]
 80072e8:	82bb      	strh	r3, [r7, #20]

    if (Xstart > Paint.Width || Ystart > Paint.Height) {
 80072ea:	4b23      	ldr	r3, [pc, #140]	@ (8007378 <Paint_DrawString_EN+0xa8>)
 80072ec:	889b      	ldrh	r3, [r3, #4]
 80072ee:	b29b      	uxth	r3, r3
 80072f0:	89fa      	ldrh	r2, [r7, #14]
 80072f2:	429a      	cmp	r2, r3
 80072f4:	d805      	bhi.n	8007302 <Paint_DrawString_EN+0x32>
 80072f6:	4b20      	ldr	r3, [pc, #128]	@ (8007378 <Paint_DrawString_EN+0xa8>)
 80072f8:	88db      	ldrh	r3, [r3, #6]
 80072fa:	b29b      	uxth	r3, r3
 80072fc:	89ba      	ldrh	r2, [r7, #12]
 80072fe:	429a      	cmp	r2, r3
 8007300:	d933      	bls.n	800736a <Paint_DrawString_EN+0x9a>
        Debug("Paint_DrawString_EN Input exceeds the normal display range\r\n");
 8007302:	481e      	ldr	r0, [pc, #120]	@ (800737c <Paint_DrawString_EN+0xac>)
 8007304:	f000 fc6e 	bl	8007be4 <puts>
        return;
 8007308:	e033      	b.n	8007372 <Paint_DrawString_EN+0xa2>
    }

    while (* pString != '\0') {
        //if X direction filled , reposition to(Xstart,Ypoint),Ypoint is Y direction plus the Height of the character
        if ((Xpoint + Font->Width ) > Paint.Width ) {
 800730a:	8afb      	ldrh	r3, [r7, #22]
 800730c:	687a      	ldr	r2, [r7, #4]
 800730e:	8892      	ldrh	r2, [r2, #4]
 8007310:	4413      	add	r3, r2
 8007312:	4a19      	ldr	r2, [pc, #100]	@ (8007378 <Paint_DrawString_EN+0xa8>)
 8007314:	8892      	ldrh	r2, [r2, #4]
 8007316:	b292      	uxth	r2, r2
 8007318:	4293      	cmp	r3, r2
 800731a:	dd06      	ble.n	800732a <Paint_DrawString_EN+0x5a>
            Xpoint = Xstart;
 800731c:	89fb      	ldrh	r3, [r7, #14]
 800731e:	82fb      	strh	r3, [r7, #22]
            Ypoint += Font->Height;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	88da      	ldrh	r2, [r3, #6]
 8007324:	8abb      	ldrh	r3, [r7, #20]
 8007326:	4413      	add	r3, r2
 8007328:	82bb      	strh	r3, [r7, #20]
        }

        // If the Y direction is full, reposition to(Xstart, Ystart)
        if ((Ypoint  + Font->Height ) > Paint.Height ) {
 800732a:	8abb      	ldrh	r3, [r7, #20]
 800732c:	687a      	ldr	r2, [r7, #4]
 800732e:	88d2      	ldrh	r2, [r2, #6]
 8007330:	4413      	add	r3, r2
 8007332:	4a11      	ldr	r2, [pc, #68]	@ (8007378 <Paint_DrawString_EN+0xa8>)
 8007334:	88d2      	ldrh	r2, [r2, #6]
 8007336:	b292      	uxth	r2, r2
 8007338:	4293      	cmp	r3, r2
 800733a:	dd03      	ble.n	8007344 <Paint_DrawString_EN+0x74>
            Xpoint = Xstart;
 800733c:	89fb      	ldrh	r3, [r7, #14]
 800733e:	82fb      	strh	r3, [r7, #22]
            Ypoint = Ystart;
 8007340:	89bb      	ldrh	r3, [r7, #12]
 8007342:	82bb      	strh	r3, [r7, #20]
        }
        Paint_DrawChar(Xpoint, Ypoint, * pString, Font, Color_Background, Color_Foreground);
 8007344:	68bb      	ldr	r3, [r7, #8]
 8007346:	781a      	ldrb	r2, [r3, #0]
 8007348:	8ab9      	ldrh	r1, [r7, #20]
 800734a:	8af8      	ldrh	r0, [r7, #22]
 800734c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800734e:	9301      	str	r3, [sp, #4]
 8007350:	8c3b      	ldrh	r3, [r7, #32]
 8007352:	9300      	str	r3, [sp, #0]
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	f7ff ff0f 	bl	8007178 <Paint_DrawChar>

        //The next character of the address
        pString ++;
 800735a:	68bb      	ldr	r3, [r7, #8]
 800735c:	3301      	adds	r3, #1
 800735e:	60bb      	str	r3, [r7, #8]

        //The next word of the abscissa increases the font of the broadband
        Xpoint += Font->Width;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	889a      	ldrh	r2, [r3, #4]
 8007364:	8afb      	ldrh	r3, [r7, #22]
 8007366:	4413      	add	r3, r2
 8007368:	82fb      	strh	r3, [r7, #22]
    while (* pString != '\0') {
 800736a:	68bb      	ldr	r3, [r7, #8]
 800736c:	781b      	ldrb	r3, [r3, #0]
 800736e:	2b00      	cmp	r3, #0
 8007370:	d1cb      	bne.n	800730a <Paint_DrawString_EN+0x3a>
    }
}
 8007372:	3718      	adds	r7, #24
 8007374:	46bd      	mov	sp, r7
 8007376:	bd80      	pop	{r7, pc}
 8007378:	2000034c 	.word	0x2000034c
 800737c:	08008e78 	.word	0x08008e78

08007380 <LCD_2IN_Reset>:
/*******************************************************************************
function:
	Hardware reset
*******************************************************************************/
static void LCD_2IN_Reset(void)
{
 8007380:	b580      	push	{r7, lr}
 8007382:	af00      	add	r7, sp, #0
	LCD_2IN_RST_1;
 8007384:	2201      	movs	r2, #1
 8007386:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800738a:	480d      	ldr	r0, [pc, #52]	@ (80073c0 <LCD_2IN_Reset+0x40>)
 800738c:	f7fc f91c 	bl	80035c8 <HAL_GPIO_WritePin>
	DEV_Delay_ms(100);
 8007390:	2064      	movs	r0, #100	@ 0x64
 8007392:	f7fb fe37 	bl	8003004 <HAL_Delay>
	LCD_2IN_RST_0;
 8007396:	2200      	movs	r2, #0
 8007398:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800739c:	4808      	ldr	r0, [pc, #32]	@ (80073c0 <LCD_2IN_Reset+0x40>)
 800739e:	f7fc f913 	bl	80035c8 <HAL_GPIO_WritePin>
	DEV_Delay_ms(100);
 80073a2:	2064      	movs	r0, #100	@ 0x64
 80073a4:	f7fb fe2e 	bl	8003004 <HAL_Delay>
	LCD_2IN_RST_1;
 80073a8:	2201      	movs	r2, #1
 80073aa:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80073ae:	4804      	ldr	r0, [pc, #16]	@ (80073c0 <LCD_2IN_Reset+0x40>)
 80073b0:	f7fc f90a 	bl	80035c8 <HAL_GPIO_WritePin>
	DEV_Delay_ms(100);
 80073b4:	2064      	movs	r0, #100	@ 0x64
 80073b6:	f7fb fe25 	bl	8003004 <HAL_Delay>
}
 80073ba:	bf00      	nop
 80073bc:	bd80      	pop	{r7, pc}
 80073be:	bf00      	nop
 80073c0:	40020400 	.word	0x40020400

080073c4 <LCD_2IN_Write_Command>:
/*******************************************************************************
function:
		Write data and commands
*******************************************************************************/
static void LCD_2IN_Write_Command(UBYTE data)	 
{	
 80073c4:	b580      	push	{r7, lr}
 80073c6:	b082      	sub	sp, #8
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	4603      	mov	r3, r0
 80073cc:	71fb      	strb	r3, [r7, #7]
	LCD_2IN_CS_0;
 80073ce:	2200      	movs	r2, #0
 80073d0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80073d4:	4808      	ldr	r0, [pc, #32]	@ (80073f8 <LCD_2IN_Write_Command+0x34>)
 80073d6:	f7fc f8f7 	bl	80035c8 <HAL_GPIO_WritePin>
	LCD_2IN_DC_0;
 80073da:	2200      	movs	r2, #0
 80073dc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80073e0:	4805      	ldr	r0, [pc, #20]	@ (80073f8 <LCD_2IN_Write_Command+0x34>)
 80073e2:	f7fc f8f1 	bl	80035c8 <HAL_GPIO_WritePin>
	DEV_SPI_WRITE(data);
 80073e6:	79fb      	ldrb	r3, [r7, #7]
 80073e8:	4618      	mov	r0, r3
 80073ea:	f7ff fd3d 	bl	8006e68 <DEV_SPI_WRite>
}
 80073ee:	bf00      	nop
 80073f0:	3708      	adds	r7, #8
 80073f2:	46bd      	mov	sp, r7
 80073f4:	bd80      	pop	{r7, pc}
 80073f6:	bf00      	nop
 80073f8:	40020400 	.word	0x40020400

080073fc <LCD_2IN_WriteData_Byte>:

static void LCD_2IN_WriteData_Byte(UBYTE data) 
{	
 80073fc:	b580      	push	{r7, lr}
 80073fe:	b082      	sub	sp, #8
 8007400:	af00      	add	r7, sp, #0
 8007402:	4603      	mov	r3, r0
 8007404:	71fb      	strb	r3, [r7, #7]
	LCD_2IN_CS_0;
 8007406:	2200      	movs	r2, #0
 8007408:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800740c:	480b      	ldr	r0, [pc, #44]	@ (800743c <LCD_2IN_WriteData_Byte+0x40>)
 800740e:	f7fc f8db 	bl	80035c8 <HAL_GPIO_WritePin>
	LCD_2IN_DC_1;
 8007412:	2201      	movs	r2, #1
 8007414:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8007418:	4808      	ldr	r0, [pc, #32]	@ (800743c <LCD_2IN_WriteData_Byte+0x40>)
 800741a:	f7fc f8d5 	bl	80035c8 <HAL_GPIO_WritePin>
	DEV_SPI_WRITE(data);  
 800741e:	79fb      	ldrb	r3, [r7, #7]
 8007420:	4618      	mov	r0, r3
 8007422:	f7ff fd21 	bl	8006e68 <DEV_SPI_WRite>
	LCD_2IN_CS_1;
 8007426:	2201      	movs	r2, #1
 8007428:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800742c:	4803      	ldr	r0, [pc, #12]	@ (800743c <LCD_2IN_WriteData_Byte+0x40>)
 800742e:	f7fc f8cb 	bl	80035c8 <HAL_GPIO_WritePin>
}  
 8007432:	bf00      	nop
 8007434:	3708      	adds	r7, #8
 8007436:	46bd      	mov	sp, r7
 8007438:	bd80      	pop	{r7, pc}
 800743a:	bf00      	nop
 800743c:	40020400 	.word	0x40020400

08007440 <LCD_2IN_WriteData_Word>:

void LCD_2IN_WriteData_Word(UWORD data)
{
 8007440:	b580      	push	{r7, lr}
 8007442:	b082      	sub	sp, #8
 8007444:	af00      	add	r7, sp, #0
 8007446:	4603      	mov	r3, r0
 8007448:	80fb      	strh	r3, [r7, #6]
	LCD_2IN_CS_0;
 800744a:	2200      	movs	r2, #0
 800744c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8007450:	480f      	ldr	r0, [pc, #60]	@ (8007490 <LCD_2IN_WriteData_Word+0x50>)
 8007452:	f7fc f8b9 	bl	80035c8 <HAL_GPIO_WritePin>
	LCD_2IN_DC_1;
 8007456:	2201      	movs	r2, #1
 8007458:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800745c:	480c      	ldr	r0, [pc, #48]	@ (8007490 <LCD_2IN_WriteData_Word+0x50>)
 800745e:	f7fc f8b3 	bl	80035c8 <HAL_GPIO_WritePin>
	DEV_SPI_WRITE((data>>8) & 0xff);
 8007462:	88fb      	ldrh	r3, [r7, #6]
 8007464:	0a1b      	lsrs	r3, r3, #8
 8007466:	b29b      	uxth	r3, r3
 8007468:	b2db      	uxtb	r3, r3
 800746a:	4618      	mov	r0, r3
 800746c:	f7ff fcfc 	bl	8006e68 <DEV_SPI_WRite>
	DEV_SPI_WRITE(data);
 8007470:	88fb      	ldrh	r3, [r7, #6]
 8007472:	b2db      	uxtb	r3, r3
 8007474:	4618      	mov	r0, r3
 8007476:	f7ff fcf7 	bl	8006e68 <DEV_SPI_WRite>
	LCD_2IN_CS_1;
 800747a:	2201      	movs	r2, #1
 800747c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8007480:	4803      	ldr	r0, [pc, #12]	@ (8007490 <LCD_2IN_WriteData_Word+0x50>)
 8007482:	f7fc f8a1 	bl	80035c8 <HAL_GPIO_WritePin>
}	  
 8007486:	bf00      	nop
 8007488:	3708      	adds	r7, #8
 800748a:	46bd      	mov	sp, r7
 800748c:	bd80      	pop	{r7, pc}
 800748e:	bf00      	nop
 8007490:	40020400 	.word	0x40020400

08007494 <LCD_2IN_Init>:
/******************************************************************************
function:	
		Common register initialization
******************************************************************************/
void LCD_2IN_Init(void)
{
 8007494:	b580      	push	{r7, lr}
 8007496:	af00      	add	r7, sp, #0
	LCD_2IN_Reset();
 8007498:	f7ff ff72 	bl	8007380 <LCD_2IN_Reset>

	LCD_2IN_Write_Command(0x36);
 800749c:	2036      	movs	r0, #54	@ 0x36
 800749e:	f7ff ff91 	bl	80073c4 <LCD_2IN_Write_Command>
	LCD_2IN_WriteData_Byte(0x00); 
 80074a2:	2000      	movs	r0, #0
 80074a4:	f7ff ffaa 	bl	80073fc <LCD_2IN_WriteData_Byte>

	LCD_2IN_Write_Command(0x3A); 
 80074a8:	203a      	movs	r0, #58	@ 0x3a
 80074aa:	f7ff ff8b 	bl	80073c4 <LCD_2IN_Write_Command>
	LCD_2IN_WriteData_Byte(0x05);
 80074ae:	2005      	movs	r0, #5
 80074b0:	f7ff ffa4 	bl	80073fc <LCD_2IN_WriteData_Byte>

	LCD_2IN_Write_Command(0x21); 
 80074b4:	2021      	movs	r0, #33	@ 0x21
 80074b6:	f7ff ff85 	bl	80073c4 <LCD_2IN_Write_Command>

	LCD_2IN_Write_Command(0x2A);
 80074ba:	202a      	movs	r0, #42	@ 0x2a
 80074bc:	f7ff ff82 	bl	80073c4 <LCD_2IN_Write_Command>
	LCD_2IN_WriteData_Byte(0x00);
 80074c0:	2000      	movs	r0, #0
 80074c2:	f7ff ff9b 	bl	80073fc <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x00);
 80074c6:	2000      	movs	r0, #0
 80074c8:	f7ff ff98 	bl	80073fc <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x01);
 80074cc:	2001      	movs	r0, #1
 80074ce:	f7ff ff95 	bl	80073fc <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x3F);
 80074d2:	203f      	movs	r0, #63	@ 0x3f
 80074d4:	f7ff ff92 	bl	80073fc <LCD_2IN_WriteData_Byte>

	LCD_2IN_Write_Command(0x2B);
 80074d8:	202b      	movs	r0, #43	@ 0x2b
 80074da:	f7ff ff73 	bl	80073c4 <LCD_2IN_Write_Command>
	LCD_2IN_WriteData_Byte(0x00);
 80074de:	2000      	movs	r0, #0
 80074e0:	f7ff ff8c 	bl	80073fc <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x00);
 80074e4:	2000      	movs	r0, #0
 80074e6:	f7ff ff89 	bl	80073fc <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x00);
 80074ea:	2000      	movs	r0, #0
 80074ec:	f7ff ff86 	bl	80073fc <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0xEF);
 80074f0:	20ef      	movs	r0, #239	@ 0xef
 80074f2:	f7ff ff83 	bl	80073fc <LCD_2IN_WriteData_Byte>

	LCD_2IN_Write_Command(0xB2);
 80074f6:	20b2      	movs	r0, #178	@ 0xb2
 80074f8:	f7ff ff64 	bl	80073c4 <LCD_2IN_Write_Command>
	LCD_2IN_WriteData_Byte(0x0C);
 80074fc:	200c      	movs	r0, #12
 80074fe:	f7ff ff7d 	bl	80073fc <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x0C);
 8007502:	200c      	movs	r0, #12
 8007504:	f7ff ff7a 	bl	80073fc <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x00);
 8007508:	2000      	movs	r0, #0
 800750a:	f7ff ff77 	bl	80073fc <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x33);
 800750e:	2033      	movs	r0, #51	@ 0x33
 8007510:	f7ff ff74 	bl	80073fc <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x33);
 8007514:	2033      	movs	r0, #51	@ 0x33
 8007516:	f7ff ff71 	bl	80073fc <LCD_2IN_WriteData_Byte>

	LCD_2IN_Write_Command(0xB7);
 800751a:	20b7      	movs	r0, #183	@ 0xb7
 800751c:	f7ff ff52 	bl	80073c4 <LCD_2IN_Write_Command>
	LCD_2IN_WriteData_Byte(0x35); 
 8007520:	2035      	movs	r0, #53	@ 0x35
 8007522:	f7ff ff6b 	bl	80073fc <LCD_2IN_WriteData_Byte>

	LCD_2IN_Write_Command(0xBB);
 8007526:	20bb      	movs	r0, #187	@ 0xbb
 8007528:	f7ff ff4c 	bl	80073c4 <LCD_2IN_Write_Command>
	LCD_2IN_WriteData_Byte(0x1F);
 800752c:	201f      	movs	r0, #31
 800752e:	f7ff ff65 	bl	80073fc <LCD_2IN_WriteData_Byte>

	LCD_2IN_Write_Command(0xC0);
 8007532:	20c0      	movs	r0, #192	@ 0xc0
 8007534:	f7ff ff46 	bl	80073c4 <LCD_2IN_Write_Command>
	LCD_2IN_WriteData_Byte(0x2C);
 8007538:	202c      	movs	r0, #44	@ 0x2c
 800753a:	f7ff ff5f 	bl	80073fc <LCD_2IN_WriteData_Byte>

	LCD_2IN_Write_Command(0xC2);
 800753e:	20c2      	movs	r0, #194	@ 0xc2
 8007540:	f7ff ff40 	bl	80073c4 <LCD_2IN_Write_Command>
	LCD_2IN_WriteData_Byte(0x01);
 8007544:	2001      	movs	r0, #1
 8007546:	f7ff ff59 	bl	80073fc <LCD_2IN_WriteData_Byte>

	LCD_2IN_Write_Command(0xC3);
 800754a:	20c3      	movs	r0, #195	@ 0xc3
 800754c:	f7ff ff3a 	bl	80073c4 <LCD_2IN_Write_Command>
	LCD_2IN_WriteData_Byte(0x12);   
 8007550:	2012      	movs	r0, #18
 8007552:	f7ff ff53 	bl	80073fc <LCD_2IN_WriteData_Byte>

	LCD_2IN_Write_Command(0xC4);
 8007556:	20c4      	movs	r0, #196	@ 0xc4
 8007558:	f7ff ff34 	bl	80073c4 <LCD_2IN_Write_Command>
	LCD_2IN_WriteData_Byte(0x20);
 800755c:	2020      	movs	r0, #32
 800755e:	f7ff ff4d 	bl	80073fc <LCD_2IN_WriteData_Byte>

	LCD_2IN_Write_Command(0xC6);
 8007562:	20c6      	movs	r0, #198	@ 0xc6
 8007564:	f7ff ff2e 	bl	80073c4 <LCD_2IN_Write_Command>
	LCD_2IN_WriteData_Byte(0x0F); 
 8007568:	200f      	movs	r0, #15
 800756a:	f7ff ff47 	bl	80073fc <LCD_2IN_WriteData_Byte>

	LCD_2IN_Write_Command(0xD0);
 800756e:	20d0      	movs	r0, #208	@ 0xd0
 8007570:	f7ff ff28 	bl	80073c4 <LCD_2IN_Write_Command>
	LCD_2IN_WriteData_Byte(0xA4);
 8007574:	20a4      	movs	r0, #164	@ 0xa4
 8007576:	f7ff ff41 	bl	80073fc <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0xA1);
 800757a:	20a1      	movs	r0, #161	@ 0xa1
 800757c:	f7ff ff3e 	bl	80073fc <LCD_2IN_WriteData_Byte>

	LCD_2IN_Write_Command(0xE0);
 8007580:	20e0      	movs	r0, #224	@ 0xe0
 8007582:	f7ff ff1f 	bl	80073c4 <LCD_2IN_Write_Command>
	LCD_2IN_WriteData_Byte(0xD0);
 8007586:	20d0      	movs	r0, #208	@ 0xd0
 8007588:	f7ff ff38 	bl	80073fc <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x08);
 800758c:	2008      	movs	r0, #8
 800758e:	f7ff ff35 	bl	80073fc <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x11);
 8007592:	2011      	movs	r0, #17
 8007594:	f7ff ff32 	bl	80073fc <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x08);
 8007598:	2008      	movs	r0, #8
 800759a:	f7ff ff2f 	bl	80073fc <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x0C);
 800759e:	200c      	movs	r0, #12
 80075a0:	f7ff ff2c 	bl	80073fc <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x15);
 80075a4:	2015      	movs	r0, #21
 80075a6:	f7ff ff29 	bl	80073fc <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x39);
 80075aa:	2039      	movs	r0, #57	@ 0x39
 80075ac:	f7ff ff26 	bl	80073fc <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x33);
 80075b0:	2033      	movs	r0, #51	@ 0x33
 80075b2:	f7ff ff23 	bl	80073fc <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x50);
 80075b6:	2050      	movs	r0, #80	@ 0x50
 80075b8:	f7ff ff20 	bl	80073fc <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x36);
 80075bc:	2036      	movs	r0, #54	@ 0x36
 80075be:	f7ff ff1d 	bl	80073fc <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x13);
 80075c2:	2013      	movs	r0, #19
 80075c4:	f7ff ff1a 	bl	80073fc <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x14);
 80075c8:	2014      	movs	r0, #20
 80075ca:	f7ff ff17 	bl	80073fc <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x29);
 80075ce:	2029      	movs	r0, #41	@ 0x29
 80075d0:	f7ff ff14 	bl	80073fc <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x2D);
 80075d4:	202d      	movs	r0, #45	@ 0x2d
 80075d6:	f7ff ff11 	bl	80073fc <LCD_2IN_WriteData_Byte>

	LCD_2IN_Write_Command(0xE1);
 80075da:	20e1      	movs	r0, #225	@ 0xe1
 80075dc:	f7ff fef2 	bl	80073c4 <LCD_2IN_Write_Command>
	LCD_2IN_WriteData_Byte(0xD0);
 80075e0:	20d0      	movs	r0, #208	@ 0xd0
 80075e2:	f7ff ff0b 	bl	80073fc <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x08);
 80075e6:	2008      	movs	r0, #8
 80075e8:	f7ff ff08 	bl	80073fc <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x10);
 80075ec:	2010      	movs	r0, #16
 80075ee:	f7ff ff05 	bl	80073fc <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x08);
 80075f2:	2008      	movs	r0, #8
 80075f4:	f7ff ff02 	bl	80073fc <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x06);
 80075f8:	2006      	movs	r0, #6
 80075fa:	f7ff feff 	bl	80073fc <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x06);
 80075fe:	2006      	movs	r0, #6
 8007600:	f7ff fefc 	bl	80073fc <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x39);
 8007604:	2039      	movs	r0, #57	@ 0x39
 8007606:	f7ff fef9 	bl	80073fc <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x44);
 800760a:	2044      	movs	r0, #68	@ 0x44
 800760c:	f7ff fef6 	bl	80073fc <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x51);
 8007610:	2051      	movs	r0, #81	@ 0x51
 8007612:	f7ff fef3 	bl	80073fc <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x0B);
 8007616:	200b      	movs	r0, #11
 8007618:	f7ff fef0 	bl	80073fc <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x16);
 800761c:	2016      	movs	r0, #22
 800761e:	f7ff feed 	bl	80073fc <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x14);
 8007622:	2014      	movs	r0, #20
 8007624:	f7ff feea 	bl	80073fc <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x2F);
 8007628:	202f      	movs	r0, #47	@ 0x2f
 800762a:	f7ff fee7 	bl	80073fc <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x31);
 800762e:	2031      	movs	r0, #49	@ 0x31
 8007630:	f7ff fee4 	bl	80073fc <LCD_2IN_WriteData_Byte>
	LCD_2IN_Write_Command(0x21);
 8007634:	2021      	movs	r0, #33	@ 0x21
 8007636:	f7ff fec5 	bl	80073c4 <LCD_2IN_Write_Command>

	LCD_2IN_Write_Command(0x11);
 800763a:	2011      	movs	r0, #17
 800763c:	f7ff fec2 	bl	80073c4 <LCD_2IN_Write_Command>

	LCD_2IN_Write_Command(0x29);
 8007640:	2029      	movs	r0, #41	@ 0x29
 8007642:	f7ff febf 	bl	80073c4 <LCD_2IN_Write_Command>
}
 8007646:	bf00      	nop
 8007648:	bd80      	pop	{r7, pc}

0800764a <LCD_2IN_SetWindow>:
	  Ystart:	Start UWORD y coordinate
	  Xend  :	End UWORD coordinates
	  Yend  :	End UWORD coordinatesen
******************************************************************************/
void LCD_2IN_SetWindow(UWORD Xstart, UWORD Ystart, UWORD Xend, UWORD  Yend)
{ 
 800764a:	b590      	push	{r4, r7, lr}
 800764c:	b083      	sub	sp, #12
 800764e:	af00      	add	r7, sp, #0
 8007650:	4604      	mov	r4, r0
 8007652:	4608      	mov	r0, r1
 8007654:	4611      	mov	r1, r2
 8007656:	461a      	mov	r2, r3
 8007658:	4623      	mov	r3, r4
 800765a:	80fb      	strh	r3, [r7, #6]
 800765c:	4603      	mov	r3, r0
 800765e:	80bb      	strh	r3, [r7, #4]
 8007660:	460b      	mov	r3, r1
 8007662:	807b      	strh	r3, [r7, #2]
 8007664:	4613      	mov	r3, r2
 8007666:	803b      	strh	r3, [r7, #0]
	LCD_2IN_Write_Command(0x2a);
 8007668:	202a      	movs	r0, #42	@ 0x2a
 800766a:	f7ff feab 	bl	80073c4 <LCD_2IN_Write_Command>
	LCD_2IN_WriteData_Byte(Xstart >>8);
 800766e:	88fb      	ldrh	r3, [r7, #6]
 8007670:	0a1b      	lsrs	r3, r3, #8
 8007672:	b29b      	uxth	r3, r3
 8007674:	b2db      	uxtb	r3, r3
 8007676:	4618      	mov	r0, r3
 8007678:	f7ff fec0 	bl	80073fc <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(Xstart & 0xff);
 800767c:	88fb      	ldrh	r3, [r7, #6]
 800767e:	b2db      	uxtb	r3, r3
 8007680:	4618      	mov	r0, r3
 8007682:	f7ff febb 	bl	80073fc <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte((Xend - 1) >> 8);
 8007686:	887b      	ldrh	r3, [r7, #2]
 8007688:	3b01      	subs	r3, #1
 800768a:	121b      	asrs	r3, r3, #8
 800768c:	b2db      	uxtb	r3, r3
 800768e:	4618      	mov	r0, r3
 8007690:	f7ff feb4 	bl	80073fc <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte((Xend - 1) & 0xff);
 8007694:	887b      	ldrh	r3, [r7, #2]
 8007696:	b2db      	uxtb	r3, r3
 8007698:	3b01      	subs	r3, #1
 800769a:	b2db      	uxtb	r3, r3
 800769c:	4618      	mov	r0, r3
 800769e:	f7ff fead 	bl	80073fc <LCD_2IN_WriteData_Byte>

	LCD_2IN_Write_Command(0x2b);
 80076a2:	202b      	movs	r0, #43	@ 0x2b
 80076a4:	f7ff fe8e 	bl	80073c4 <LCD_2IN_Write_Command>
	LCD_2IN_WriteData_Byte(Ystart >>8);
 80076a8:	88bb      	ldrh	r3, [r7, #4]
 80076aa:	0a1b      	lsrs	r3, r3, #8
 80076ac:	b29b      	uxth	r3, r3
 80076ae:	b2db      	uxtb	r3, r3
 80076b0:	4618      	mov	r0, r3
 80076b2:	f7ff fea3 	bl	80073fc <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(Ystart & 0xff);
 80076b6:	88bb      	ldrh	r3, [r7, #4]
 80076b8:	b2db      	uxtb	r3, r3
 80076ba:	4618      	mov	r0, r3
 80076bc:	f7ff fe9e 	bl	80073fc <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte((Yend - 1) >> 8);
 80076c0:	883b      	ldrh	r3, [r7, #0]
 80076c2:	3b01      	subs	r3, #1
 80076c4:	121b      	asrs	r3, r3, #8
 80076c6:	b2db      	uxtb	r3, r3
 80076c8:	4618      	mov	r0, r3
 80076ca:	f7ff fe97 	bl	80073fc <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte((Yend - 1) & 0xff);
 80076ce:	883b      	ldrh	r3, [r7, #0]
 80076d0:	b2db      	uxtb	r3, r3
 80076d2:	3b01      	subs	r3, #1
 80076d4:	b2db      	uxtb	r3, r3
 80076d6:	4618      	mov	r0, r3
 80076d8:	f7ff fe90 	bl	80073fc <LCD_2IN_WriteData_Byte>

	LCD_2IN_Write_Command(0x2C);
 80076dc:	202c      	movs	r0, #44	@ 0x2c
 80076de:	f7ff fe71 	bl	80073c4 <LCD_2IN_Write_Command>
}
 80076e2:	bf00      	nop
 80076e4:	370c      	adds	r7, #12
 80076e6:	46bd      	mov	sp, r7
 80076e8:	bd90      	pop	{r4, r7, pc}

080076ea <LCD_2IN_SetCursor>:
	  Xstart: 	Start UWORD x coordinate
	  Ystart:	Start UWORD y coordinate

******************************************************************************/
void LCD_2IN_SetCursor(UWORD X, UWORD Y)
{ 
 80076ea:	b580      	push	{r7, lr}
 80076ec:	b082      	sub	sp, #8
 80076ee:	af00      	add	r7, sp, #0
 80076f0:	4603      	mov	r3, r0
 80076f2:	460a      	mov	r2, r1
 80076f4:	80fb      	strh	r3, [r7, #6]
 80076f6:	4613      	mov	r3, r2
 80076f8:	80bb      	strh	r3, [r7, #4]
	LCD_2IN_Write_Command(0x2a);
 80076fa:	202a      	movs	r0, #42	@ 0x2a
 80076fc:	f7ff fe62 	bl	80073c4 <LCD_2IN_Write_Command>
	LCD_2IN_WriteData_Byte(X >> 8);
 8007700:	88fb      	ldrh	r3, [r7, #6]
 8007702:	0a1b      	lsrs	r3, r3, #8
 8007704:	b29b      	uxth	r3, r3
 8007706:	b2db      	uxtb	r3, r3
 8007708:	4618      	mov	r0, r3
 800770a:	f7ff fe77 	bl	80073fc <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(X);
 800770e:	88fb      	ldrh	r3, [r7, #6]
 8007710:	b2db      	uxtb	r3, r3
 8007712:	4618      	mov	r0, r3
 8007714:	f7ff fe72 	bl	80073fc <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(X >> 8);
 8007718:	88fb      	ldrh	r3, [r7, #6]
 800771a:	0a1b      	lsrs	r3, r3, #8
 800771c:	b29b      	uxth	r3, r3
 800771e:	b2db      	uxtb	r3, r3
 8007720:	4618      	mov	r0, r3
 8007722:	f7ff fe6b 	bl	80073fc <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(X);
 8007726:	88fb      	ldrh	r3, [r7, #6]
 8007728:	b2db      	uxtb	r3, r3
 800772a:	4618      	mov	r0, r3
 800772c:	f7ff fe66 	bl	80073fc <LCD_2IN_WriteData_Byte>

	LCD_2IN_Write_Command(0x2b);
 8007730:	202b      	movs	r0, #43	@ 0x2b
 8007732:	f7ff fe47 	bl	80073c4 <LCD_2IN_Write_Command>
	LCD_2IN_WriteData_Byte(Y >> 8);
 8007736:	88bb      	ldrh	r3, [r7, #4]
 8007738:	0a1b      	lsrs	r3, r3, #8
 800773a:	b29b      	uxth	r3, r3
 800773c:	b2db      	uxtb	r3, r3
 800773e:	4618      	mov	r0, r3
 8007740:	f7ff fe5c 	bl	80073fc <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(Y);
 8007744:	88bb      	ldrh	r3, [r7, #4]
 8007746:	b2db      	uxtb	r3, r3
 8007748:	4618      	mov	r0, r3
 800774a:	f7ff fe57 	bl	80073fc <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(Y >> 8);
 800774e:	88bb      	ldrh	r3, [r7, #4]
 8007750:	0a1b      	lsrs	r3, r3, #8
 8007752:	b29b      	uxth	r3, r3
 8007754:	b2db      	uxtb	r3, r3
 8007756:	4618      	mov	r0, r3
 8007758:	f7ff fe50 	bl	80073fc <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(Y);
 800775c:	88bb      	ldrh	r3, [r7, #4]
 800775e:	b2db      	uxtb	r3, r3
 8007760:	4618      	mov	r0, r3
 8007762:	f7ff fe4b 	bl	80073fc <LCD_2IN_WriteData_Byte>

	LCD_2IN_Write_Command(0x2C);
 8007766:	202c      	movs	r0, #44	@ 0x2c
 8007768:	f7ff fe2c 	bl	80073c4 <LCD_2IN_Write_Command>
}
 800776c:	bf00      	nop
 800776e:	3708      	adds	r7, #8
 8007770:	46bd      	mov	sp, r7
 8007772:	bd80      	pop	{r7, pc}

08007774 <LCD_2IN_Clear>:
function:	Clear screen function, refresh the screen to a certain color
parameter	:
	  Color :		The color you want to clear all the screen
******************************************************************************/
void LCD_2IN_Clear(UWORD Color)
{
 8007774:	b580      	push	{r7, lr}
 8007776:	b084      	sub	sp, #16
 8007778:	af00      	add	r7, sp, #0
 800777a:	4603      	mov	r3, r0
 800777c:	80fb      	strh	r3, [r7, #6]
    UWORD i,j;
    LCD_2IN_SetWindow(0, 0, LCD_2IN_WIDTH, LCD_2IN_HEIGHT);
 800777e:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8007782:	22f0      	movs	r2, #240	@ 0xf0
 8007784:	2100      	movs	r1, #0
 8007786:	2000      	movs	r0, #0
 8007788:	f7ff ff5f 	bl	800764a <LCD_2IN_SetWindow>

	DEV_Digital_Write(DEV_DC_PIN, 1);
 800778c:	2201      	movs	r2, #1
 800778e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8007792:	480f      	ldr	r0, [pc, #60]	@ (80077d0 <LCD_2IN_Clear+0x5c>)
 8007794:	f7fb ff18 	bl	80035c8 <HAL_GPIO_WritePin>
	for(i = 0; i < LCD_2IN_WIDTH; i++){
 8007798:	2300      	movs	r3, #0
 800779a:	81fb      	strh	r3, [r7, #14]
 800779c:	e010      	b.n	80077c0 <LCD_2IN_Clear+0x4c>
		for(j = 0; j < LCD_2IN_HEIGHT; j++){
 800779e:	2300      	movs	r3, #0
 80077a0:	81bb      	strh	r3, [r7, #12]
 80077a2:	e006      	b.n	80077b2 <LCD_2IN_Clear+0x3e>
			LCD_2IN_WriteData_Word(Color);
 80077a4:	88fb      	ldrh	r3, [r7, #6]
 80077a6:	4618      	mov	r0, r3
 80077a8:	f7ff fe4a 	bl	8007440 <LCD_2IN_WriteData_Word>
		for(j = 0; j < LCD_2IN_HEIGHT; j++){
 80077ac:	89bb      	ldrh	r3, [r7, #12]
 80077ae:	3301      	adds	r3, #1
 80077b0:	81bb      	strh	r3, [r7, #12]
 80077b2:	89bb      	ldrh	r3, [r7, #12]
 80077b4:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80077b8:	d3f4      	bcc.n	80077a4 <LCD_2IN_Clear+0x30>
	for(i = 0; i < LCD_2IN_WIDTH; i++){
 80077ba:	89fb      	ldrh	r3, [r7, #14]
 80077bc:	3301      	adds	r3, #1
 80077be:	81fb      	strh	r3, [r7, #14]
 80077c0:	89fb      	ldrh	r3, [r7, #14]
 80077c2:	2bef      	cmp	r3, #239	@ 0xef
 80077c4:	d9eb      	bls.n	800779e <LCD_2IN_Clear+0x2a>
		}
	 }
}
 80077c6:	bf00      	nop
 80077c8:	bf00      	nop
 80077ca:	3710      	adds	r7, #16
 80077cc:	46bd      	mov	sp, r7
 80077ce:	bd80      	pop	{r7, pc}
 80077d0:	40020400 	.word	0x40020400

080077d4 <LCD_2IN_DrawPaint>:
	    X	: 	Set the X coordinate
	    Y	:	Set the Y coordinate
	  Color :	Set the color
******************************************************************************/
void LCD_2IN_DrawPaint(UWORD x, UWORD y, UWORD Color)
{
 80077d4:	b580      	push	{r7, lr}
 80077d6:	b082      	sub	sp, #8
 80077d8:	af00      	add	r7, sp, #0
 80077da:	4603      	mov	r3, r0
 80077dc:	80fb      	strh	r3, [r7, #6]
 80077de:	460b      	mov	r3, r1
 80077e0:	80bb      	strh	r3, [r7, #4]
 80077e2:	4613      	mov	r3, r2
 80077e4:	807b      	strh	r3, [r7, #2]
	LCD_2IN_SetCursor(x, y);
 80077e6:	88ba      	ldrh	r2, [r7, #4]
 80077e8:	88fb      	ldrh	r3, [r7, #6]
 80077ea:	4611      	mov	r1, r2
 80077ec:	4618      	mov	r0, r3
 80077ee:	f7ff ff7c 	bl	80076ea <LCD_2IN_SetCursor>
	LCD_2IN_WriteData_Word(Color); 	    
 80077f2:	887b      	ldrh	r3, [r7, #2]
 80077f4:	4618      	mov	r0, r3
 80077f6:	f7ff fe23 	bl	8007440 <LCD_2IN_WriteData_Word>
}
 80077fa:	bf00      	nop
 80077fc:	3708      	adds	r7, #8
 80077fe:	46bd      	mov	sp, r7
 8007800:	bd80      	pop	{r7, pc}
	...

08007804 <LCD_2IN_SetBackLight>:
	Setting backlight
parameter	:
	  value : Range 0~1000   Duty cycle is value/1000	
*******************************************************************************/
void LCD_2IN_SetBackLight(UWORD Value)
{
 8007804:	b480      	push	{r7}
 8007806:	b083      	sub	sp, #12
 8007808:	af00      	add	r7, sp, #0
 800780a:	4603      	mov	r3, r0
 800780c:	80fb      	strh	r3, [r7, #6]
	DEV_Set_PWM(Value);
 800780e:	4a04      	ldr	r2, [pc, #16]	@ (8007820 <LCD_2IN_SetBackLight+0x1c>)
 8007810:	88fb      	ldrh	r3, [r7, #6]
 8007812:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8007814:	bf00      	nop
 8007816:	370c      	adds	r7, #12
 8007818:	46bd      	mov	sp, r7
 800781a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781e:	4770      	bx	lr
 8007820:	40000800 	.word	0x40000800

08007824 <malloc>:
 8007824:	4b02      	ldr	r3, [pc, #8]	@ (8007830 <malloc+0xc>)
 8007826:	4601      	mov	r1, r0
 8007828:	6818      	ldr	r0, [r3, #0]
 800782a:	f000 b825 	b.w	8007878 <_malloc_r>
 800782e:	bf00      	nop
 8007830:	2000004c 	.word	0x2000004c

08007834 <sbrk_aligned>:
 8007834:	b570      	push	{r4, r5, r6, lr}
 8007836:	4e0f      	ldr	r6, [pc, #60]	@ (8007874 <sbrk_aligned+0x40>)
 8007838:	460c      	mov	r4, r1
 800783a:	6831      	ldr	r1, [r6, #0]
 800783c:	4605      	mov	r5, r0
 800783e:	b911      	cbnz	r1, 8007846 <sbrk_aligned+0x12>
 8007840:	f000 fb0c 	bl	8007e5c <_sbrk_r>
 8007844:	6030      	str	r0, [r6, #0]
 8007846:	4621      	mov	r1, r4
 8007848:	4628      	mov	r0, r5
 800784a:	f000 fb07 	bl	8007e5c <_sbrk_r>
 800784e:	1c43      	adds	r3, r0, #1
 8007850:	d103      	bne.n	800785a <sbrk_aligned+0x26>
 8007852:	f04f 34ff 	mov.w	r4, #4294967295
 8007856:	4620      	mov	r0, r4
 8007858:	bd70      	pop	{r4, r5, r6, pc}
 800785a:	1cc4      	adds	r4, r0, #3
 800785c:	f024 0403 	bic.w	r4, r4, #3
 8007860:	42a0      	cmp	r0, r4
 8007862:	d0f8      	beq.n	8007856 <sbrk_aligned+0x22>
 8007864:	1a21      	subs	r1, r4, r0
 8007866:	4628      	mov	r0, r5
 8007868:	f000 faf8 	bl	8007e5c <_sbrk_r>
 800786c:	3001      	adds	r0, #1
 800786e:	d1f2      	bne.n	8007856 <sbrk_aligned+0x22>
 8007870:	e7ef      	b.n	8007852 <sbrk_aligned+0x1e>
 8007872:	bf00      	nop
 8007874:	2000036c 	.word	0x2000036c

08007878 <_malloc_r>:
 8007878:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800787c:	1ccd      	adds	r5, r1, #3
 800787e:	f025 0503 	bic.w	r5, r5, #3
 8007882:	3508      	adds	r5, #8
 8007884:	2d0c      	cmp	r5, #12
 8007886:	bf38      	it	cc
 8007888:	250c      	movcc	r5, #12
 800788a:	2d00      	cmp	r5, #0
 800788c:	4606      	mov	r6, r0
 800788e:	db01      	blt.n	8007894 <_malloc_r+0x1c>
 8007890:	42a9      	cmp	r1, r5
 8007892:	d904      	bls.n	800789e <_malloc_r+0x26>
 8007894:	230c      	movs	r3, #12
 8007896:	6033      	str	r3, [r6, #0]
 8007898:	2000      	movs	r0, #0
 800789a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800789e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007974 <_malloc_r+0xfc>
 80078a2:	f000 f869 	bl	8007978 <__malloc_lock>
 80078a6:	f8d8 3000 	ldr.w	r3, [r8]
 80078aa:	461c      	mov	r4, r3
 80078ac:	bb44      	cbnz	r4, 8007900 <_malloc_r+0x88>
 80078ae:	4629      	mov	r1, r5
 80078b0:	4630      	mov	r0, r6
 80078b2:	f7ff ffbf 	bl	8007834 <sbrk_aligned>
 80078b6:	1c43      	adds	r3, r0, #1
 80078b8:	4604      	mov	r4, r0
 80078ba:	d158      	bne.n	800796e <_malloc_r+0xf6>
 80078bc:	f8d8 4000 	ldr.w	r4, [r8]
 80078c0:	4627      	mov	r7, r4
 80078c2:	2f00      	cmp	r7, #0
 80078c4:	d143      	bne.n	800794e <_malloc_r+0xd6>
 80078c6:	2c00      	cmp	r4, #0
 80078c8:	d04b      	beq.n	8007962 <_malloc_r+0xea>
 80078ca:	6823      	ldr	r3, [r4, #0]
 80078cc:	4639      	mov	r1, r7
 80078ce:	4630      	mov	r0, r6
 80078d0:	eb04 0903 	add.w	r9, r4, r3
 80078d4:	f000 fac2 	bl	8007e5c <_sbrk_r>
 80078d8:	4581      	cmp	r9, r0
 80078da:	d142      	bne.n	8007962 <_malloc_r+0xea>
 80078dc:	6821      	ldr	r1, [r4, #0]
 80078de:	1a6d      	subs	r5, r5, r1
 80078e0:	4629      	mov	r1, r5
 80078e2:	4630      	mov	r0, r6
 80078e4:	f7ff ffa6 	bl	8007834 <sbrk_aligned>
 80078e8:	3001      	adds	r0, #1
 80078ea:	d03a      	beq.n	8007962 <_malloc_r+0xea>
 80078ec:	6823      	ldr	r3, [r4, #0]
 80078ee:	442b      	add	r3, r5
 80078f0:	6023      	str	r3, [r4, #0]
 80078f2:	f8d8 3000 	ldr.w	r3, [r8]
 80078f6:	685a      	ldr	r2, [r3, #4]
 80078f8:	bb62      	cbnz	r2, 8007954 <_malloc_r+0xdc>
 80078fa:	f8c8 7000 	str.w	r7, [r8]
 80078fe:	e00f      	b.n	8007920 <_malloc_r+0xa8>
 8007900:	6822      	ldr	r2, [r4, #0]
 8007902:	1b52      	subs	r2, r2, r5
 8007904:	d420      	bmi.n	8007948 <_malloc_r+0xd0>
 8007906:	2a0b      	cmp	r2, #11
 8007908:	d917      	bls.n	800793a <_malloc_r+0xc2>
 800790a:	1961      	adds	r1, r4, r5
 800790c:	42a3      	cmp	r3, r4
 800790e:	6025      	str	r5, [r4, #0]
 8007910:	bf18      	it	ne
 8007912:	6059      	strne	r1, [r3, #4]
 8007914:	6863      	ldr	r3, [r4, #4]
 8007916:	bf08      	it	eq
 8007918:	f8c8 1000 	streq.w	r1, [r8]
 800791c:	5162      	str	r2, [r4, r5]
 800791e:	604b      	str	r3, [r1, #4]
 8007920:	4630      	mov	r0, r6
 8007922:	f000 f82f 	bl	8007984 <__malloc_unlock>
 8007926:	f104 000b 	add.w	r0, r4, #11
 800792a:	1d23      	adds	r3, r4, #4
 800792c:	f020 0007 	bic.w	r0, r0, #7
 8007930:	1ac2      	subs	r2, r0, r3
 8007932:	bf1c      	itt	ne
 8007934:	1a1b      	subne	r3, r3, r0
 8007936:	50a3      	strne	r3, [r4, r2]
 8007938:	e7af      	b.n	800789a <_malloc_r+0x22>
 800793a:	6862      	ldr	r2, [r4, #4]
 800793c:	42a3      	cmp	r3, r4
 800793e:	bf0c      	ite	eq
 8007940:	f8c8 2000 	streq.w	r2, [r8]
 8007944:	605a      	strne	r2, [r3, #4]
 8007946:	e7eb      	b.n	8007920 <_malloc_r+0xa8>
 8007948:	4623      	mov	r3, r4
 800794a:	6864      	ldr	r4, [r4, #4]
 800794c:	e7ae      	b.n	80078ac <_malloc_r+0x34>
 800794e:	463c      	mov	r4, r7
 8007950:	687f      	ldr	r7, [r7, #4]
 8007952:	e7b6      	b.n	80078c2 <_malloc_r+0x4a>
 8007954:	461a      	mov	r2, r3
 8007956:	685b      	ldr	r3, [r3, #4]
 8007958:	42a3      	cmp	r3, r4
 800795a:	d1fb      	bne.n	8007954 <_malloc_r+0xdc>
 800795c:	2300      	movs	r3, #0
 800795e:	6053      	str	r3, [r2, #4]
 8007960:	e7de      	b.n	8007920 <_malloc_r+0xa8>
 8007962:	230c      	movs	r3, #12
 8007964:	6033      	str	r3, [r6, #0]
 8007966:	4630      	mov	r0, r6
 8007968:	f000 f80c 	bl	8007984 <__malloc_unlock>
 800796c:	e794      	b.n	8007898 <_malloc_r+0x20>
 800796e:	6005      	str	r5, [r0, #0]
 8007970:	e7d6      	b.n	8007920 <_malloc_r+0xa8>
 8007972:	bf00      	nop
 8007974:	20000370 	.word	0x20000370

08007978 <__malloc_lock>:
 8007978:	4801      	ldr	r0, [pc, #4]	@ (8007980 <__malloc_lock+0x8>)
 800797a:	f000 babc 	b.w	8007ef6 <__retarget_lock_acquire_recursive>
 800797e:	bf00      	nop
 8007980:	200004b4 	.word	0x200004b4

08007984 <__malloc_unlock>:
 8007984:	4801      	ldr	r0, [pc, #4]	@ (800798c <__malloc_unlock+0x8>)
 8007986:	f000 bab7 	b.w	8007ef8 <__retarget_lock_release_recursive>
 800798a:	bf00      	nop
 800798c:	200004b4 	.word	0x200004b4

08007990 <std>:
 8007990:	2300      	movs	r3, #0
 8007992:	b510      	push	{r4, lr}
 8007994:	4604      	mov	r4, r0
 8007996:	e9c0 3300 	strd	r3, r3, [r0]
 800799a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800799e:	6083      	str	r3, [r0, #8]
 80079a0:	8181      	strh	r1, [r0, #12]
 80079a2:	6643      	str	r3, [r0, #100]	@ 0x64
 80079a4:	81c2      	strh	r2, [r0, #14]
 80079a6:	6183      	str	r3, [r0, #24]
 80079a8:	4619      	mov	r1, r3
 80079aa:	2208      	movs	r2, #8
 80079ac:	305c      	adds	r0, #92	@ 0x5c
 80079ae:	f000 fa19 	bl	8007de4 <memset>
 80079b2:	4b0d      	ldr	r3, [pc, #52]	@ (80079e8 <std+0x58>)
 80079b4:	6263      	str	r3, [r4, #36]	@ 0x24
 80079b6:	4b0d      	ldr	r3, [pc, #52]	@ (80079ec <std+0x5c>)
 80079b8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80079ba:	4b0d      	ldr	r3, [pc, #52]	@ (80079f0 <std+0x60>)
 80079bc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80079be:	4b0d      	ldr	r3, [pc, #52]	@ (80079f4 <std+0x64>)
 80079c0:	6323      	str	r3, [r4, #48]	@ 0x30
 80079c2:	4b0d      	ldr	r3, [pc, #52]	@ (80079f8 <std+0x68>)
 80079c4:	6224      	str	r4, [r4, #32]
 80079c6:	429c      	cmp	r4, r3
 80079c8:	d006      	beq.n	80079d8 <std+0x48>
 80079ca:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80079ce:	4294      	cmp	r4, r2
 80079d0:	d002      	beq.n	80079d8 <std+0x48>
 80079d2:	33d0      	adds	r3, #208	@ 0xd0
 80079d4:	429c      	cmp	r4, r3
 80079d6:	d105      	bne.n	80079e4 <std+0x54>
 80079d8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80079dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80079e0:	f000 ba88 	b.w	8007ef4 <__retarget_lock_init_recursive>
 80079e4:	bd10      	pop	{r4, pc}
 80079e6:	bf00      	nop
 80079e8:	08007c35 	.word	0x08007c35
 80079ec:	08007c57 	.word	0x08007c57
 80079f0:	08007c8f 	.word	0x08007c8f
 80079f4:	08007cb3 	.word	0x08007cb3
 80079f8:	20000374 	.word	0x20000374

080079fc <stdio_exit_handler>:
 80079fc:	4a02      	ldr	r2, [pc, #8]	@ (8007a08 <stdio_exit_handler+0xc>)
 80079fe:	4903      	ldr	r1, [pc, #12]	@ (8007a0c <stdio_exit_handler+0x10>)
 8007a00:	4803      	ldr	r0, [pc, #12]	@ (8007a10 <stdio_exit_handler+0x14>)
 8007a02:	f000 b869 	b.w	8007ad8 <_fwalk_sglue>
 8007a06:	bf00      	nop
 8007a08:	20000040 	.word	0x20000040
 8007a0c:	08008915 	.word	0x08008915
 8007a10:	20000050 	.word	0x20000050

08007a14 <cleanup_stdio>:
 8007a14:	6841      	ldr	r1, [r0, #4]
 8007a16:	4b0c      	ldr	r3, [pc, #48]	@ (8007a48 <cleanup_stdio+0x34>)
 8007a18:	4299      	cmp	r1, r3
 8007a1a:	b510      	push	{r4, lr}
 8007a1c:	4604      	mov	r4, r0
 8007a1e:	d001      	beq.n	8007a24 <cleanup_stdio+0x10>
 8007a20:	f000 ff78 	bl	8008914 <_fflush_r>
 8007a24:	68a1      	ldr	r1, [r4, #8]
 8007a26:	4b09      	ldr	r3, [pc, #36]	@ (8007a4c <cleanup_stdio+0x38>)
 8007a28:	4299      	cmp	r1, r3
 8007a2a:	d002      	beq.n	8007a32 <cleanup_stdio+0x1e>
 8007a2c:	4620      	mov	r0, r4
 8007a2e:	f000 ff71 	bl	8008914 <_fflush_r>
 8007a32:	68e1      	ldr	r1, [r4, #12]
 8007a34:	4b06      	ldr	r3, [pc, #24]	@ (8007a50 <cleanup_stdio+0x3c>)
 8007a36:	4299      	cmp	r1, r3
 8007a38:	d004      	beq.n	8007a44 <cleanup_stdio+0x30>
 8007a3a:	4620      	mov	r0, r4
 8007a3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007a40:	f000 bf68 	b.w	8008914 <_fflush_r>
 8007a44:	bd10      	pop	{r4, pc}
 8007a46:	bf00      	nop
 8007a48:	20000374 	.word	0x20000374
 8007a4c:	200003dc 	.word	0x200003dc
 8007a50:	20000444 	.word	0x20000444

08007a54 <global_stdio_init.part.0>:
 8007a54:	b510      	push	{r4, lr}
 8007a56:	4b0b      	ldr	r3, [pc, #44]	@ (8007a84 <global_stdio_init.part.0+0x30>)
 8007a58:	4c0b      	ldr	r4, [pc, #44]	@ (8007a88 <global_stdio_init.part.0+0x34>)
 8007a5a:	4a0c      	ldr	r2, [pc, #48]	@ (8007a8c <global_stdio_init.part.0+0x38>)
 8007a5c:	601a      	str	r2, [r3, #0]
 8007a5e:	4620      	mov	r0, r4
 8007a60:	2200      	movs	r2, #0
 8007a62:	2104      	movs	r1, #4
 8007a64:	f7ff ff94 	bl	8007990 <std>
 8007a68:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007a6c:	2201      	movs	r2, #1
 8007a6e:	2109      	movs	r1, #9
 8007a70:	f7ff ff8e 	bl	8007990 <std>
 8007a74:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007a78:	2202      	movs	r2, #2
 8007a7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007a7e:	2112      	movs	r1, #18
 8007a80:	f7ff bf86 	b.w	8007990 <std>
 8007a84:	200004ac 	.word	0x200004ac
 8007a88:	20000374 	.word	0x20000374
 8007a8c:	080079fd 	.word	0x080079fd

08007a90 <__sfp_lock_acquire>:
 8007a90:	4801      	ldr	r0, [pc, #4]	@ (8007a98 <__sfp_lock_acquire+0x8>)
 8007a92:	f000 ba30 	b.w	8007ef6 <__retarget_lock_acquire_recursive>
 8007a96:	bf00      	nop
 8007a98:	200004b5 	.word	0x200004b5

08007a9c <__sfp_lock_release>:
 8007a9c:	4801      	ldr	r0, [pc, #4]	@ (8007aa4 <__sfp_lock_release+0x8>)
 8007a9e:	f000 ba2b 	b.w	8007ef8 <__retarget_lock_release_recursive>
 8007aa2:	bf00      	nop
 8007aa4:	200004b5 	.word	0x200004b5

08007aa8 <__sinit>:
 8007aa8:	b510      	push	{r4, lr}
 8007aaa:	4604      	mov	r4, r0
 8007aac:	f7ff fff0 	bl	8007a90 <__sfp_lock_acquire>
 8007ab0:	6a23      	ldr	r3, [r4, #32]
 8007ab2:	b11b      	cbz	r3, 8007abc <__sinit+0x14>
 8007ab4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007ab8:	f7ff bff0 	b.w	8007a9c <__sfp_lock_release>
 8007abc:	4b04      	ldr	r3, [pc, #16]	@ (8007ad0 <__sinit+0x28>)
 8007abe:	6223      	str	r3, [r4, #32]
 8007ac0:	4b04      	ldr	r3, [pc, #16]	@ (8007ad4 <__sinit+0x2c>)
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d1f5      	bne.n	8007ab4 <__sinit+0xc>
 8007ac8:	f7ff ffc4 	bl	8007a54 <global_stdio_init.part.0>
 8007acc:	e7f2      	b.n	8007ab4 <__sinit+0xc>
 8007ace:	bf00      	nop
 8007ad0:	08007a15 	.word	0x08007a15
 8007ad4:	200004ac 	.word	0x200004ac

08007ad8 <_fwalk_sglue>:
 8007ad8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007adc:	4607      	mov	r7, r0
 8007ade:	4688      	mov	r8, r1
 8007ae0:	4614      	mov	r4, r2
 8007ae2:	2600      	movs	r6, #0
 8007ae4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007ae8:	f1b9 0901 	subs.w	r9, r9, #1
 8007aec:	d505      	bpl.n	8007afa <_fwalk_sglue+0x22>
 8007aee:	6824      	ldr	r4, [r4, #0]
 8007af0:	2c00      	cmp	r4, #0
 8007af2:	d1f7      	bne.n	8007ae4 <_fwalk_sglue+0xc>
 8007af4:	4630      	mov	r0, r6
 8007af6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007afa:	89ab      	ldrh	r3, [r5, #12]
 8007afc:	2b01      	cmp	r3, #1
 8007afe:	d907      	bls.n	8007b10 <_fwalk_sglue+0x38>
 8007b00:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007b04:	3301      	adds	r3, #1
 8007b06:	d003      	beq.n	8007b10 <_fwalk_sglue+0x38>
 8007b08:	4629      	mov	r1, r5
 8007b0a:	4638      	mov	r0, r7
 8007b0c:	47c0      	blx	r8
 8007b0e:	4306      	orrs	r6, r0
 8007b10:	3568      	adds	r5, #104	@ 0x68
 8007b12:	e7e9      	b.n	8007ae8 <_fwalk_sglue+0x10>

08007b14 <iprintf>:
 8007b14:	b40f      	push	{r0, r1, r2, r3}
 8007b16:	b507      	push	{r0, r1, r2, lr}
 8007b18:	4906      	ldr	r1, [pc, #24]	@ (8007b34 <iprintf+0x20>)
 8007b1a:	ab04      	add	r3, sp, #16
 8007b1c:	6808      	ldr	r0, [r1, #0]
 8007b1e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007b22:	6881      	ldr	r1, [r0, #8]
 8007b24:	9301      	str	r3, [sp, #4]
 8007b26:	f000 fbcb 	bl	80082c0 <_vfiprintf_r>
 8007b2a:	b003      	add	sp, #12
 8007b2c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007b30:	b004      	add	sp, #16
 8007b32:	4770      	bx	lr
 8007b34:	2000004c 	.word	0x2000004c

08007b38 <_puts_r>:
 8007b38:	6a03      	ldr	r3, [r0, #32]
 8007b3a:	b570      	push	{r4, r5, r6, lr}
 8007b3c:	6884      	ldr	r4, [r0, #8]
 8007b3e:	4605      	mov	r5, r0
 8007b40:	460e      	mov	r6, r1
 8007b42:	b90b      	cbnz	r3, 8007b48 <_puts_r+0x10>
 8007b44:	f7ff ffb0 	bl	8007aa8 <__sinit>
 8007b48:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007b4a:	07db      	lsls	r3, r3, #31
 8007b4c:	d405      	bmi.n	8007b5a <_puts_r+0x22>
 8007b4e:	89a3      	ldrh	r3, [r4, #12]
 8007b50:	0598      	lsls	r0, r3, #22
 8007b52:	d402      	bmi.n	8007b5a <_puts_r+0x22>
 8007b54:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007b56:	f000 f9ce 	bl	8007ef6 <__retarget_lock_acquire_recursive>
 8007b5a:	89a3      	ldrh	r3, [r4, #12]
 8007b5c:	0719      	lsls	r1, r3, #28
 8007b5e:	d502      	bpl.n	8007b66 <_puts_r+0x2e>
 8007b60:	6923      	ldr	r3, [r4, #16]
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d135      	bne.n	8007bd2 <_puts_r+0x9a>
 8007b66:	4621      	mov	r1, r4
 8007b68:	4628      	mov	r0, r5
 8007b6a:	f000 f8e5 	bl	8007d38 <__swsetup_r>
 8007b6e:	b380      	cbz	r0, 8007bd2 <_puts_r+0x9a>
 8007b70:	f04f 35ff 	mov.w	r5, #4294967295
 8007b74:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007b76:	07da      	lsls	r2, r3, #31
 8007b78:	d405      	bmi.n	8007b86 <_puts_r+0x4e>
 8007b7a:	89a3      	ldrh	r3, [r4, #12]
 8007b7c:	059b      	lsls	r3, r3, #22
 8007b7e:	d402      	bmi.n	8007b86 <_puts_r+0x4e>
 8007b80:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007b82:	f000 f9b9 	bl	8007ef8 <__retarget_lock_release_recursive>
 8007b86:	4628      	mov	r0, r5
 8007b88:	bd70      	pop	{r4, r5, r6, pc}
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	da04      	bge.n	8007b98 <_puts_r+0x60>
 8007b8e:	69a2      	ldr	r2, [r4, #24]
 8007b90:	429a      	cmp	r2, r3
 8007b92:	dc17      	bgt.n	8007bc4 <_puts_r+0x8c>
 8007b94:	290a      	cmp	r1, #10
 8007b96:	d015      	beq.n	8007bc4 <_puts_r+0x8c>
 8007b98:	6823      	ldr	r3, [r4, #0]
 8007b9a:	1c5a      	adds	r2, r3, #1
 8007b9c:	6022      	str	r2, [r4, #0]
 8007b9e:	7019      	strb	r1, [r3, #0]
 8007ba0:	68a3      	ldr	r3, [r4, #8]
 8007ba2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007ba6:	3b01      	subs	r3, #1
 8007ba8:	60a3      	str	r3, [r4, #8]
 8007baa:	2900      	cmp	r1, #0
 8007bac:	d1ed      	bne.n	8007b8a <_puts_r+0x52>
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	da11      	bge.n	8007bd6 <_puts_r+0x9e>
 8007bb2:	4622      	mov	r2, r4
 8007bb4:	210a      	movs	r1, #10
 8007bb6:	4628      	mov	r0, r5
 8007bb8:	f000 f87f 	bl	8007cba <__swbuf_r>
 8007bbc:	3001      	adds	r0, #1
 8007bbe:	d0d7      	beq.n	8007b70 <_puts_r+0x38>
 8007bc0:	250a      	movs	r5, #10
 8007bc2:	e7d7      	b.n	8007b74 <_puts_r+0x3c>
 8007bc4:	4622      	mov	r2, r4
 8007bc6:	4628      	mov	r0, r5
 8007bc8:	f000 f877 	bl	8007cba <__swbuf_r>
 8007bcc:	3001      	adds	r0, #1
 8007bce:	d1e7      	bne.n	8007ba0 <_puts_r+0x68>
 8007bd0:	e7ce      	b.n	8007b70 <_puts_r+0x38>
 8007bd2:	3e01      	subs	r6, #1
 8007bd4:	e7e4      	b.n	8007ba0 <_puts_r+0x68>
 8007bd6:	6823      	ldr	r3, [r4, #0]
 8007bd8:	1c5a      	adds	r2, r3, #1
 8007bda:	6022      	str	r2, [r4, #0]
 8007bdc:	220a      	movs	r2, #10
 8007bde:	701a      	strb	r2, [r3, #0]
 8007be0:	e7ee      	b.n	8007bc0 <_puts_r+0x88>
	...

08007be4 <puts>:
 8007be4:	4b02      	ldr	r3, [pc, #8]	@ (8007bf0 <puts+0xc>)
 8007be6:	4601      	mov	r1, r0
 8007be8:	6818      	ldr	r0, [r3, #0]
 8007bea:	f7ff bfa5 	b.w	8007b38 <_puts_r>
 8007bee:	bf00      	nop
 8007bf0:	2000004c 	.word	0x2000004c

08007bf4 <siprintf>:
 8007bf4:	b40e      	push	{r1, r2, r3}
 8007bf6:	b500      	push	{lr}
 8007bf8:	b09c      	sub	sp, #112	@ 0x70
 8007bfa:	ab1d      	add	r3, sp, #116	@ 0x74
 8007bfc:	9002      	str	r0, [sp, #8]
 8007bfe:	9006      	str	r0, [sp, #24]
 8007c00:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007c04:	4809      	ldr	r0, [pc, #36]	@ (8007c2c <siprintf+0x38>)
 8007c06:	9107      	str	r1, [sp, #28]
 8007c08:	9104      	str	r1, [sp, #16]
 8007c0a:	4909      	ldr	r1, [pc, #36]	@ (8007c30 <siprintf+0x3c>)
 8007c0c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007c10:	9105      	str	r1, [sp, #20]
 8007c12:	6800      	ldr	r0, [r0, #0]
 8007c14:	9301      	str	r3, [sp, #4]
 8007c16:	a902      	add	r1, sp, #8
 8007c18:	f000 fa2c 	bl	8008074 <_svfiprintf_r>
 8007c1c:	9b02      	ldr	r3, [sp, #8]
 8007c1e:	2200      	movs	r2, #0
 8007c20:	701a      	strb	r2, [r3, #0]
 8007c22:	b01c      	add	sp, #112	@ 0x70
 8007c24:	f85d eb04 	ldr.w	lr, [sp], #4
 8007c28:	b003      	add	sp, #12
 8007c2a:	4770      	bx	lr
 8007c2c:	2000004c 	.word	0x2000004c
 8007c30:	ffff0208 	.word	0xffff0208

08007c34 <__sread>:
 8007c34:	b510      	push	{r4, lr}
 8007c36:	460c      	mov	r4, r1
 8007c38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c3c:	f000 f8fc 	bl	8007e38 <_read_r>
 8007c40:	2800      	cmp	r0, #0
 8007c42:	bfab      	itete	ge
 8007c44:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007c46:	89a3      	ldrhlt	r3, [r4, #12]
 8007c48:	181b      	addge	r3, r3, r0
 8007c4a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007c4e:	bfac      	ite	ge
 8007c50:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007c52:	81a3      	strhlt	r3, [r4, #12]
 8007c54:	bd10      	pop	{r4, pc}

08007c56 <__swrite>:
 8007c56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c5a:	461f      	mov	r7, r3
 8007c5c:	898b      	ldrh	r3, [r1, #12]
 8007c5e:	05db      	lsls	r3, r3, #23
 8007c60:	4605      	mov	r5, r0
 8007c62:	460c      	mov	r4, r1
 8007c64:	4616      	mov	r6, r2
 8007c66:	d505      	bpl.n	8007c74 <__swrite+0x1e>
 8007c68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c6c:	2302      	movs	r3, #2
 8007c6e:	2200      	movs	r2, #0
 8007c70:	f000 f8d0 	bl	8007e14 <_lseek_r>
 8007c74:	89a3      	ldrh	r3, [r4, #12]
 8007c76:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007c7a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007c7e:	81a3      	strh	r3, [r4, #12]
 8007c80:	4632      	mov	r2, r6
 8007c82:	463b      	mov	r3, r7
 8007c84:	4628      	mov	r0, r5
 8007c86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007c8a:	f000 b8f7 	b.w	8007e7c <_write_r>

08007c8e <__sseek>:
 8007c8e:	b510      	push	{r4, lr}
 8007c90:	460c      	mov	r4, r1
 8007c92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c96:	f000 f8bd 	bl	8007e14 <_lseek_r>
 8007c9a:	1c43      	adds	r3, r0, #1
 8007c9c:	89a3      	ldrh	r3, [r4, #12]
 8007c9e:	bf15      	itete	ne
 8007ca0:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007ca2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007ca6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007caa:	81a3      	strheq	r3, [r4, #12]
 8007cac:	bf18      	it	ne
 8007cae:	81a3      	strhne	r3, [r4, #12]
 8007cb0:	bd10      	pop	{r4, pc}

08007cb2 <__sclose>:
 8007cb2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007cb6:	f000 b89d 	b.w	8007df4 <_close_r>

08007cba <__swbuf_r>:
 8007cba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cbc:	460e      	mov	r6, r1
 8007cbe:	4614      	mov	r4, r2
 8007cc0:	4605      	mov	r5, r0
 8007cc2:	b118      	cbz	r0, 8007ccc <__swbuf_r+0x12>
 8007cc4:	6a03      	ldr	r3, [r0, #32]
 8007cc6:	b90b      	cbnz	r3, 8007ccc <__swbuf_r+0x12>
 8007cc8:	f7ff feee 	bl	8007aa8 <__sinit>
 8007ccc:	69a3      	ldr	r3, [r4, #24]
 8007cce:	60a3      	str	r3, [r4, #8]
 8007cd0:	89a3      	ldrh	r3, [r4, #12]
 8007cd2:	071a      	lsls	r2, r3, #28
 8007cd4:	d501      	bpl.n	8007cda <__swbuf_r+0x20>
 8007cd6:	6923      	ldr	r3, [r4, #16]
 8007cd8:	b943      	cbnz	r3, 8007cec <__swbuf_r+0x32>
 8007cda:	4621      	mov	r1, r4
 8007cdc:	4628      	mov	r0, r5
 8007cde:	f000 f82b 	bl	8007d38 <__swsetup_r>
 8007ce2:	b118      	cbz	r0, 8007cec <__swbuf_r+0x32>
 8007ce4:	f04f 37ff 	mov.w	r7, #4294967295
 8007ce8:	4638      	mov	r0, r7
 8007cea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007cec:	6823      	ldr	r3, [r4, #0]
 8007cee:	6922      	ldr	r2, [r4, #16]
 8007cf0:	1a98      	subs	r0, r3, r2
 8007cf2:	6963      	ldr	r3, [r4, #20]
 8007cf4:	b2f6      	uxtb	r6, r6
 8007cf6:	4283      	cmp	r3, r0
 8007cf8:	4637      	mov	r7, r6
 8007cfa:	dc05      	bgt.n	8007d08 <__swbuf_r+0x4e>
 8007cfc:	4621      	mov	r1, r4
 8007cfe:	4628      	mov	r0, r5
 8007d00:	f000 fe08 	bl	8008914 <_fflush_r>
 8007d04:	2800      	cmp	r0, #0
 8007d06:	d1ed      	bne.n	8007ce4 <__swbuf_r+0x2a>
 8007d08:	68a3      	ldr	r3, [r4, #8]
 8007d0a:	3b01      	subs	r3, #1
 8007d0c:	60a3      	str	r3, [r4, #8]
 8007d0e:	6823      	ldr	r3, [r4, #0]
 8007d10:	1c5a      	adds	r2, r3, #1
 8007d12:	6022      	str	r2, [r4, #0]
 8007d14:	701e      	strb	r6, [r3, #0]
 8007d16:	6962      	ldr	r2, [r4, #20]
 8007d18:	1c43      	adds	r3, r0, #1
 8007d1a:	429a      	cmp	r2, r3
 8007d1c:	d004      	beq.n	8007d28 <__swbuf_r+0x6e>
 8007d1e:	89a3      	ldrh	r3, [r4, #12]
 8007d20:	07db      	lsls	r3, r3, #31
 8007d22:	d5e1      	bpl.n	8007ce8 <__swbuf_r+0x2e>
 8007d24:	2e0a      	cmp	r6, #10
 8007d26:	d1df      	bne.n	8007ce8 <__swbuf_r+0x2e>
 8007d28:	4621      	mov	r1, r4
 8007d2a:	4628      	mov	r0, r5
 8007d2c:	f000 fdf2 	bl	8008914 <_fflush_r>
 8007d30:	2800      	cmp	r0, #0
 8007d32:	d0d9      	beq.n	8007ce8 <__swbuf_r+0x2e>
 8007d34:	e7d6      	b.n	8007ce4 <__swbuf_r+0x2a>
	...

08007d38 <__swsetup_r>:
 8007d38:	b538      	push	{r3, r4, r5, lr}
 8007d3a:	4b29      	ldr	r3, [pc, #164]	@ (8007de0 <__swsetup_r+0xa8>)
 8007d3c:	4605      	mov	r5, r0
 8007d3e:	6818      	ldr	r0, [r3, #0]
 8007d40:	460c      	mov	r4, r1
 8007d42:	b118      	cbz	r0, 8007d4c <__swsetup_r+0x14>
 8007d44:	6a03      	ldr	r3, [r0, #32]
 8007d46:	b90b      	cbnz	r3, 8007d4c <__swsetup_r+0x14>
 8007d48:	f7ff feae 	bl	8007aa8 <__sinit>
 8007d4c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d50:	0719      	lsls	r1, r3, #28
 8007d52:	d422      	bmi.n	8007d9a <__swsetup_r+0x62>
 8007d54:	06da      	lsls	r2, r3, #27
 8007d56:	d407      	bmi.n	8007d68 <__swsetup_r+0x30>
 8007d58:	2209      	movs	r2, #9
 8007d5a:	602a      	str	r2, [r5, #0]
 8007d5c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007d60:	81a3      	strh	r3, [r4, #12]
 8007d62:	f04f 30ff 	mov.w	r0, #4294967295
 8007d66:	e033      	b.n	8007dd0 <__swsetup_r+0x98>
 8007d68:	0758      	lsls	r0, r3, #29
 8007d6a:	d512      	bpl.n	8007d92 <__swsetup_r+0x5a>
 8007d6c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007d6e:	b141      	cbz	r1, 8007d82 <__swsetup_r+0x4a>
 8007d70:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007d74:	4299      	cmp	r1, r3
 8007d76:	d002      	beq.n	8007d7e <__swsetup_r+0x46>
 8007d78:	4628      	mov	r0, r5
 8007d7a:	f000 f8d5 	bl	8007f28 <_free_r>
 8007d7e:	2300      	movs	r3, #0
 8007d80:	6363      	str	r3, [r4, #52]	@ 0x34
 8007d82:	89a3      	ldrh	r3, [r4, #12]
 8007d84:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007d88:	81a3      	strh	r3, [r4, #12]
 8007d8a:	2300      	movs	r3, #0
 8007d8c:	6063      	str	r3, [r4, #4]
 8007d8e:	6923      	ldr	r3, [r4, #16]
 8007d90:	6023      	str	r3, [r4, #0]
 8007d92:	89a3      	ldrh	r3, [r4, #12]
 8007d94:	f043 0308 	orr.w	r3, r3, #8
 8007d98:	81a3      	strh	r3, [r4, #12]
 8007d9a:	6923      	ldr	r3, [r4, #16]
 8007d9c:	b94b      	cbnz	r3, 8007db2 <__swsetup_r+0x7a>
 8007d9e:	89a3      	ldrh	r3, [r4, #12]
 8007da0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007da4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007da8:	d003      	beq.n	8007db2 <__swsetup_r+0x7a>
 8007daa:	4621      	mov	r1, r4
 8007dac:	4628      	mov	r0, r5
 8007dae:	f000 fdff 	bl	80089b0 <__smakebuf_r>
 8007db2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007db6:	f013 0201 	ands.w	r2, r3, #1
 8007dba:	d00a      	beq.n	8007dd2 <__swsetup_r+0x9a>
 8007dbc:	2200      	movs	r2, #0
 8007dbe:	60a2      	str	r2, [r4, #8]
 8007dc0:	6962      	ldr	r2, [r4, #20]
 8007dc2:	4252      	negs	r2, r2
 8007dc4:	61a2      	str	r2, [r4, #24]
 8007dc6:	6922      	ldr	r2, [r4, #16]
 8007dc8:	b942      	cbnz	r2, 8007ddc <__swsetup_r+0xa4>
 8007dca:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007dce:	d1c5      	bne.n	8007d5c <__swsetup_r+0x24>
 8007dd0:	bd38      	pop	{r3, r4, r5, pc}
 8007dd2:	0799      	lsls	r1, r3, #30
 8007dd4:	bf58      	it	pl
 8007dd6:	6962      	ldrpl	r2, [r4, #20]
 8007dd8:	60a2      	str	r2, [r4, #8]
 8007dda:	e7f4      	b.n	8007dc6 <__swsetup_r+0x8e>
 8007ddc:	2000      	movs	r0, #0
 8007dde:	e7f7      	b.n	8007dd0 <__swsetup_r+0x98>
 8007de0:	2000004c 	.word	0x2000004c

08007de4 <memset>:
 8007de4:	4402      	add	r2, r0
 8007de6:	4603      	mov	r3, r0
 8007de8:	4293      	cmp	r3, r2
 8007dea:	d100      	bne.n	8007dee <memset+0xa>
 8007dec:	4770      	bx	lr
 8007dee:	f803 1b01 	strb.w	r1, [r3], #1
 8007df2:	e7f9      	b.n	8007de8 <memset+0x4>

08007df4 <_close_r>:
 8007df4:	b538      	push	{r3, r4, r5, lr}
 8007df6:	4d06      	ldr	r5, [pc, #24]	@ (8007e10 <_close_r+0x1c>)
 8007df8:	2300      	movs	r3, #0
 8007dfa:	4604      	mov	r4, r0
 8007dfc:	4608      	mov	r0, r1
 8007dfe:	602b      	str	r3, [r5, #0]
 8007e00:	f7fa fb4d 	bl	800249e <_close>
 8007e04:	1c43      	adds	r3, r0, #1
 8007e06:	d102      	bne.n	8007e0e <_close_r+0x1a>
 8007e08:	682b      	ldr	r3, [r5, #0]
 8007e0a:	b103      	cbz	r3, 8007e0e <_close_r+0x1a>
 8007e0c:	6023      	str	r3, [r4, #0]
 8007e0e:	bd38      	pop	{r3, r4, r5, pc}
 8007e10:	200004b0 	.word	0x200004b0

08007e14 <_lseek_r>:
 8007e14:	b538      	push	{r3, r4, r5, lr}
 8007e16:	4d07      	ldr	r5, [pc, #28]	@ (8007e34 <_lseek_r+0x20>)
 8007e18:	4604      	mov	r4, r0
 8007e1a:	4608      	mov	r0, r1
 8007e1c:	4611      	mov	r1, r2
 8007e1e:	2200      	movs	r2, #0
 8007e20:	602a      	str	r2, [r5, #0]
 8007e22:	461a      	mov	r2, r3
 8007e24:	f7fa fb62 	bl	80024ec <_lseek>
 8007e28:	1c43      	adds	r3, r0, #1
 8007e2a:	d102      	bne.n	8007e32 <_lseek_r+0x1e>
 8007e2c:	682b      	ldr	r3, [r5, #0]
 8007e2e:	b103      	cbz	r3, 8007e32 <_lseek_r+0x1e>
 8007e30:	6023      	str	r3, [r4, #0]
 8007e32:	bd38      	pop	{r3, r4, r5, pc}
 8007e34:	200004b0 	.word	0x200004b0

08007e38 <_read_r>:
 8007e38:	b538      	push	{r3, r4, r5, lr}
 8007e3a:	4d07      	ldr	r5, [pc, #28]	@ (8007e58 <_read_r+0x20>)
 8007e3c:	4604      	mov	r4, r0
 8007e3e:	4608      	mov	r0, r1
 8007e40:	4611      	mov	r1, r2
 8007e42:	2200      	movs	r2, #0
 8007e44:	602a      	str	r2, [r5, #0]
 8007e46:	461a      	mov	r2, r3
 8007e48:	f7fa faf0 	bl	800242c <_read>
 8007e4c:	1c43      	adds	r3, r0, #1
 8007e4e:	d102      	bne.n	8007e56 <_read_r+0x1e>
 8007e50:	682b      	ldr	r3, [r5, #0]
 8007e52:	b103      	cbz	r3, 8007e56 <_read_r+0x1e>
 8007e54:	6023      	str	r3, [r4, #0]
 8007e56:	bd38      	pop	{r3, r4, r5, pc}
 8007e58:	200004b0 	.word	0x200004b0

08007e5c <_sbrk_r>:
 8007e5c:	b538      	push	{r3, r4, r5, lr}
 8007e5e:	4d06      	ldr	r5, [pc, #24]	@ (8007e78 <_sbrk_r+0x1c>)
 8007e60:	2300      	movs	r3, #0
 8007e62:	4604      	mov	r4, r0
 8007e64:	4608      	mov	r0, r1
 8007e66:	602b      	str	r3, [r5, #0]
 8007e68:	f7fa fb4e 	bl	8002508 <_sbrk>
 8007e6c:	1c43      	adds	r3, r0, #1
 8007e6e:	d102      	bne.n	8007e76 <_sbrk_r+0x1a>
 8007e70:	682b      	ldr	r3, [r5, #0]
 8007e72:	b103      	cbz	r3, 8007e76 <_sbrk_r+0x1a>
 8007e74:	6023      	str	r3, [r4, #0]
 8007e76:	bd38      	pop	{r3, r4, r5, pc}
 8007e78:	200004b0 	.word	0x200004b0

08007e7c <_write_r>:
 8007e7c:	b538      	push	{r3, r4, r5, lr}
 8007e7e:	4d07      	ldr	r5, [pc, #28]	@ (8007e9c <_write_r+0x20>)
 8007e80:	4604      	mov	r4, r0
 8007e82:	4608      	mov	r0, r1
 8007e84:	4611      	mov	r1, r2
 8007e86:	2200      	movs	r2, #0
 8007e88:	602a      	str	r2, [r5, #0]
 8007e8a:	461a      	mov	r2, r3
 8007e8c:	f7fa faeb 	bl	8002466 <_write>
 8007e90:	1c43      	adds	r3, r0, #1
 8007e92:	d102      	bne.n	8007e9a <_write_r+0x1e>
 8007e94:	682b      	ldr	r3, [r5, #0]
 8007e96:	b103      	cbz	r3, 8007e9a <_write_r+0x1e>
 8007e98:	6023      	str	r3, [r4, #0]
 8007e9a:	bd38      	pop	{r3, r4, r5, pc}
 8007e9c:	200004b0 	.word	0x200004b0

08007ea0 <__errno>:
 8007ea0:	4b01      	ldr	r3, [pc, #4]	@ (8007ea8 <__errno+0x8>)
 8007ea2:	6818      	ldr	r0, [r3, #0]
 8007ea4:	4770      	bx	lr
 8007ea6:	bf00      	nop
 8007ea8:	2000004c 	.word	0x2000004c

08007eac <__libc_init_array>:
 8007eac:	b570      	push	{r4, r5, r6, lr}
 8007eae:	4d0d      	ldr	r5, [pc, #52]	@ (8007ee4 <__libc_init_array+0x38>)
 8007eb0:	4c0d      	ldr	r4, [pc, #52]	@ (8007ee8 <__libc_init_array+0x3c>)
 8007eb2:	1b64      	subs	r4, r4, r5
 8007eb4:	10a4      	asrs	r4, r4, #2
 8007eb6:	2600      	movs	r6, #0
 8007eb8:	42a6      	cmp	r6, r4
 8007eba:	d109      	bne.n	8007ed0 <__libc_init_array+0x24>
 8007ebc:	4d0b      	ldr	r5, [pc, #44]	@ (8007eec <__libc_init_array+0x40>)
 8007ebe:	4c0c      	ldr	r4, [pc, #48]	@ (8007ef0 <__libc_init_array+0x44>)
 8007ec0:	f000 fe24 	bl	8008b0c <_init>
 8007ec4:	1b64      	subs	r4, r4, r5
 8007ec6:	10a4      	asrs	r4, r4, #2
 8007ec8:	2600      	movs	r6, #0
 8007eca:	42a6      	cmp	r6, r4
 8007ecc:	d105      	bne.n	8007eda <__libc_init_array+0x2e>
 8007ece:	bd70      	pop	{r4, r5, r6, pc}
 8007ed0:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ed4:	4798      	blx	r3
 8007ed6:	3601      	adds	r6, #1
 8007ed8:	e7ee      	b.n	8007eb8 <__libc_init_array+0xc>
 8007eda:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ede:	4798      	blx	r3
 8007ee0:	3601      	adds	r6, #1
 8007ee2:	e7f2      	b.n	8007eca <__libc_init_array+0x1e>
 8007ee4:	0800c4e4 	.word	0x0800c4e4
 8007ee8:	0800c4e4 	.word	0x0800c4e4
 8007eec:	0800c4e4 	.word	0x0800c4e4
 8007ef0:	0800c4e8 	.word	0x0800c4e8

08007ef4 <__retarget_lock_init_recursive>:
 8007ef4:	4770      	bx	lr

08007ef6 <__retarget_lock_acquire_recursive>:
 8007ef6:	4770      	bx	lr

08007ef8 <__retarget_lock_release_recursive>:
 8007ef8:	4770      	bx	lr

08007efa <strcpy>:
 8007efa:	4603      	mov	r3, r0
 8007efc:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007f00:	f803 2b01 	strb.w	r2, [r3], #1
 8007f04:	2a00      	cmp	r2, #0
 8007f06:	d1f9      	bne.n	8007efc <strcpy+0x2>
 8007f08:	4770      	bx	lr

08007f0a <memcpy>:
 8007f0a:	440a      	add	r2, r1
 8007f0c:	4291      	cmp	r1, r2
 8007f0e:	f100 33ff 	add.w	r3, r0, #4294967295
 8007f12:	d100      	bne.n	8007f16 <memcpy+0xc>
 8007f14:	4770      	bx	lr
 8007f16:	b510      	push	{r4, lr}
 8007f18:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007f1c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007f20:	4291      	cmp	r1, r2
 8007f22:	d1f9      	bne.n	8007f18 <memcpy+0xe>
 8007f24:	bd10      	pop	{r4, pc}
	...

08007f28 <_free_r>:
 8007f28:	b538      	push	{r3, r4, r5, lr}
 8007f2a:	4605      	mov	r5, r0
 8007f2c:	2900      	cmp	r1, #0
 8007f2e:	d041      	beq.n	8007fb4 <_free_r+0x8c>
 8007f30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007f34:	1f0c      	subs	r4, r1, #4
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	bfb8      	it	lt
 8007f3a:	18e4      	addlt	r4, r4, r3
 8007f3c:	f7ff fd1c 	bl	8007978 <__malloc_lock>
 8007f40:	4a1d      	ldr	r2, [pc, #116]	@ (8007fb8 <_free_r+0x90>)
 8007f42:	6813      	ldr	r3, [r2, #0]
 8007f44:	b933      	cbnz	r3, 8007f54 <_free_r+0x2c>
 8007f46:	6063      	str	r3, [r4, #4]
 8007f48:	6014      	str	r4, [r2, #0]
 8007f4a:	4628      	mov	r0, r5
 8007f4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007f50:	f7ff bd18 	b.w	8007984 <__malloc_unlock>
 8007f54:	42a3      	cmp	r3, r4
 8007f56:	d908      	bls.n	8007f6a <_free_r+0x42>
 8007f58:	6820      	ldr	r0, [r4, #0]
 8007f5a:	1821      	adds	r1, r4, r0
 8007f5c:	428b      	cmp	r3, r1
 8007f5e:	bf01      	itttt	eq
 8007f60:	6819      	ldreq	r1, [r3, #0]
 8007f62:	685b      	ldreq	r3, [r3, #4]
 8007f64:	1809      	addeq	r1, r1, r0
 8007f66:	6021      	streq	r1, [r4, #0]
 8007f68:	e7ed      	b.n	8007f46 <_free_r+0x1e>
 8007f6a:	461a      	mov	r2, r3
 8007f6c:	685b      	ldr	r3, [r3, #4]
 8007f6e:	b10b      	cbz	r3, 8007f74 <_free_r+0x4c>
 8007f70:	42a3      	cmp	r3, r4
 8007f72:	d9fa      	bls.n	8007f6a <_free_r+0x42>
 8007f74:	6811      	ldr	r1, [r2, #0]
 8007f76:	1850      	adds	r0, r2, r1
 8007f78:	42a0      	cmp	r0, r4
 8007f7a:	d10b      	bne.n	8007f94 <_free_r+0x6c>
 8007f7c:	6820      	ldr	r0, [r4, #0]
 8007f7e:	4401      	add	r1, r0
 8007f80:	1850      	adds	r0, r2, r1
 8007f82:	4283      	cmp	r3, r0
 8007f84:	6011      	str	r1, [r2, #0]
 8007f86:	d1e0      	bne.n	8007f4a <_free_r+0x22>
 8007f88:	6818      	ldr	r0, [r3, #0]
 8007f8a:	685b      	ldr	r3, [r3, #4]
 8007f8c:	6053      	str	r3, [r2, #4]
 8007f8e:	4408      	add	r0, r1
 8007f90:	6010      	str	r0, [r2, #0]
 8007f92:	e7da      	b.n	8007f4a <_free_r+0x22>
 8007f94:	d902      	bls.n	8007f9c <_free_r+0x74>
 8007f96:	230c      	movs	r3, #12
 8007f98:	602b      	str	r3, [r5, #0]
 8007f9a:	e7d6      	b.n	8007f4a <_free_r+0x22>
 8007f9c:	6820      	ldr	r0, [r4, #0]
 8007f9e:	1821      	adds	r1, r4, r0
 8007fa0:	428b      	cmp	r3, r1
 8007fa2:	bf04      	itt	eq
 8007fa4:	6819      	ldreq	r1, [r3, #0]
 8007fa6:	685b      	ldreq	r3, [r3, #4]
 8007fa8:	6063      	str	r3, [r4, #4]
 8007faa:	bf04      	itt	eq
 8007fac:	1809      	addeq	r1, r1, r0
 8007fae:	6021      	streq	r1, [r4, #0]
 8007fb0:	6054      	str	r4, [r2, #4]
 8007fb2:	e7ca      	b.n	8007f4a <_free_r+0x22>
 8007fb4:	bd38      	pop	{r3, r4, r5, pc}
 8007fb6:	bf00      	nop
 8007fb8:	20000370 	.word	0x20000370

08007fbc <__ssputs_r>:
 8007fbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007fc0:	688e      	ldr	r6, [r1, #8]
 8007fc2:	461f      	mov	r7, r3
 8007fc4:	42be      	cmp	r6, r7
 8007fc6:	680b      	ldr	r3, [r1, #0]
 8007fc8:	4682      	mov	sl, r0
 8007fca:	460c      	mov	r4, r1
 8007fcc:	4690      	mov	r8, r2
 8007fce:	d82d      	bhi.n	800802c <__ssputs_r+0x70>
 8007fd0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007fd4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007fd8:	d026      	beq.n	8008028 <__ssputs_r+0x6c>
 8007fda:	6965      	ldr	r5, [r4, #20]
 8007fdc:	6909      	ldr	r1, [r1, #16]
 8007fde:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007fe2:	eba3 0901 	sub.w	r9, r3, r1
 8007fe6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007fea:	1c7b      	adds	r3, r7, #1
 8007fec:	444b      	add	r3, r9
 8007fee:	106d      	asrs	r5, r5, #1
 8007ff0:	429d      	cmp	r5, r3
 8007ff2:	bf38      	it	cc
 8007ff4:	461d      	movcc	r5, r3
 8007ff6:	0553      	lsls	r3, r2, #21
 8007ff8:	d527      	bpl.n	800804a <__ssputs_r+0x8e>
 8007ffa:	4629      	mov	r1, r5
 8007ffc:	f7ff fc3c 	bl	8007878 <_malloc_r>
 8008000:	4606      	mov	r6, r0
 8008002:	b360      	cbz	r0, 800805e <__ssputs_r+0xa2>
 8008004:	6921      	ldr	r1, [r4, #16]
 8008006:	464a      	mov	r2, r9
 8008008:	f7ff ff7f 	bl	8007f0a <memcpy>
 800800c:	89a3      	ldrh	r3, [r4, #12]
 800800e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008012:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008016:	81a3      	strh	r3, [r4, #12]
 8008018:	6126      	str	r6, [r4, #16]
 800801a:	6165      	str	r5, [r4, #20]
 800801c:	444e      	add	r6, r9
 800801e:	eba5 0509 	sub.w	r5, r5, r9
 8008022:	6026      	str	r6, [r4, #0]
 8008024:	60a5      	str	r5, [r4, #8]
 8008026:	463e      	mov	r6, r7
 8008028:	42be      	cmp	r6, r7
 800802a:	d900      	bls.n	800802e <__ssputs_r+0x72>
 800802c:	463e      	mov	r6, r7
 800802e:	6820      	ldr	r0, [r4, #0]
 8008030:	4632      	mov	r2, r6
 8008032:	4641      	mov	r1, r8
 8008034:	f000 fcf8 	bl	8008a28 <memmove>
 8008038:	68a3      	ldr	r3, [r4, #8]
 800803a:	1b9b      	subs	r3, r3, r6
 800803c:	60a3      	str	r3, [r4, #8]
 800803e:	6823      	ldr	r3, [r4, #0]
 8008040:	4433      	add	r3, r6
 8008042:	6023      	str	r3, [r4, #0]
 8008044:	2000      	movs	r0, #0
 8008046:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800804a:	462a      	mov	r2, r5
 800804c:	f000 fd28 	bl	8008aa0 <_realloc_r>
 8008050:	4606      	mov	r6, r0
 8008052:	2800      	cmp	r0, #0
 8008054:	d1e0      	bne.n	8008018 <__ssputs_r+0x5c>
 8008056:	6921      	ldr	r1, [r4, #16]
 8008058:	4650      	mov	r0, sl
 800805a:	f7ff ff65 	bl	8007f28 <_free_r>
 800805e:	230c      	movs	r3, #12
 8008060:	f8ca 3000 	str.w	r3, [sl]
 8008064:	89a3      	ldrh	r3, [r4, #12]
 8008066:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800806a:	81a3      	strh	r3, [r4, #12]
 800806c:	f04f 30ff 	mov.w	r0, #4294967295
 8008070:	e7e9      	b.n	8008046 <__ssputs_r+0x8a>
	...

08008074 <_svfiprintf_r>:
 8008074:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008078:	4698      	mov	r8, r3
 800807a:	898b      	ldrh	r3, [r1, #12]
 800807c:	061b      	lsls	r3, r3, #24
 800807e:	b09d      	sub	sp, #116	@ 0x74
 8008080:	4607      	mov	r7, r0
 8008082:	460d      	mov	r5, r1
 8008084:	4614      	mov	r4, r2
 8008086:	d510      	bpl.n	80080aa <_svfiprintf_r+0x36>
 8008088:	690b      	ldr	r3, [r1, #16]
 800808a:	b973      	cbnz	r3, 80080aa <_svfiprintf_r+0x36>
 800808c:	2140      	movs	r1, #64	@ 0x40
 800808e:	f7ff fbf3 	bl	8007878 <_malloc_r>
 8008092:	6028      	str	r0, [r5, #0]
 8008094:	6128      	str	r0, [r5, #16]
 8008096:	b930      	cbnz	r0, 80080a6 <_svfiprintf_r+0x32>
 8008098:	230c      	movs	r3, #12
 800809a:	603b      	str	r3, [r7, #0]
 800809c:	f04f 30ff 	mov.w	r0, #4294967295
 80080a0:	b01d      	add	sp, #116	@ 0x74
 80080a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080a6:	2340      	movs	r3, #64	@ 0x40
 80080a8:	616b      	str	r3, [r5, #20]
 80080aa:	2300      	movs	r3, #0
 80080ac:	9309      	str	r3, [sp, #36]	@ 0x24
 80080ae:	2320      	movs	r3, #32
 80080b0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80080b4:	f8cd 800c 	str.w	r8, [sp, #12]
 80080b8:	2330      	movs	r3, #48	@ 0x30
 80080ba:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008258 <_svfiprintf_r+0x1e4>
 80080be:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80080c2:	f04f 0901 	mov.w	r9, #1
 80080c6:	4623      	mov	r3, r4
 80080c8:	469a      	mov	sl, r3
 80080ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80080ce:	b10a      	cbz	r2, 80080d4 <_svfiprintf_r+0x60>
 80080d0:	2a25      	cmp	r2, #37	@ 0x25
 80080d2:	d1f9      	bne.n	80080c8 <_svfiprintf_r+0x54>
 80080d4:	ebba 0b04 	subs.w	fp, sl, r4
 80080d8:	d00b      	beq.n	80080f2 <_svfiprintf_r+0x7e>
 80080da:	465b      	mov	r3, fp
 80080dc:	4622      	mov	r2, r4
 80080de:	4629      	mov	r1, r5
 80080e0:	4638      	mov	r0, r7
 80080e2:	f7ff ff6b 	bl	8007fbc <__ssputs_r>
 80080e6:	3001      	adds	r0, #1
 80080e8:	f000 80a7 	beq.w	800823a <_svfiprintf_r+0x1c6>
 80080ec:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80080ee:	445a      	add	r2, fp
 80080f0:	9209      	str	r2, [sp, #36]	@ 0x24
 80080f2:	f89a 3000 	ldrb.w	r3, [sl]
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	f000 809f 	beq.w	800823a <_svfiprintf_r+0x1c6>
 80080fc:	2300      	movs	r3, #0
 80080fe:	f04f 32ff 	mov.w	r2, #4294967295
 8008102:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008106:	f10a 0a01 	add.w	sl, sl, #1
 800810a:	9304      	str	r3, [sp, #16]
 800810c:	9307      	str	r3, [sp, #28]
 800810e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008112:	931a      	str	r3, [sp, #104]	@ 0x68
 8008114:	4654      	mov	r4, sl
 8008116:	2205      	movs	r2, #5
 8008118:	f814 1b01 	ldrb.w	r1, [r4], #1
 800811c:	484e      	ldr	r0, [pc, #312]	@ (8008258 <_svfiprintf_r+0x1e4>)
 800811e:	f7f8 f877 	bl	8000210 <memchr>
 8008122:	9a04      	ldr	r2, [sp, #16]
 8008124:	b9d8      	cbnz	r0, 800815e <_svfiprintf_r+0xea>
 8008126:	06d0      	lsls	r0, r2, #27
 8008128:	bf44      	itt	mi
 800812a:	2320      	movmi	r3, #32
 800812c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008130:	0711      	lsls	r1, r2, #28
 8008132:	bf44      	itt	mi
 8008134:	232b      	movmi	r3, #43	@ 0x2b
 8008136:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800813a:	f89a 3000 	ldrb.w	r3, [sl]
 800813e:	2b2a      	cmp	r3, #42	@ 0x2a
 8008140:	d015      	beq.n	800816e <_svfiprintf_r+0xfa>
 8008142:	9a07      	ldr	r2, [sp, #28]
 8008144:	4654      	mov	r4, sl
 8008146:	2000      	movs	r0, #0
 8008148:	f04f 0c0a 	mov.w	ip, #10
 800814c:	4621      	mov	r1, r4
 800814e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008152:	3b30      	subs	r3, #48	@ 0x30
 8008154:	2b09      	cmp	r3, #9
 8008156:	d94b      	bls.n	80081f0 <_svfiprintf_r+0x17c>
 8008158:	b1b0      	cbz	r0, 8008188 <_svfiprintf_r+0x114>
 800815a:	9207      	str	r2, [sp, #28]
 800815c:	e014      	b.n	8008188 <_svfiprintf_r+0x114>
 800815e:	eba0 0308 	sub.w	r3, r0, r8
 8008162:	fa09 f303 	lsl.w	r3, r9, r3
 8008166:	4313      	orrs	r3, r2
 8008168:	9304      	str	r3, [sp, #16]
 800816a:	46a2      	mov	sl, r4
 800816c:	e7d2      	b.n	8008114 <_svfiprintf_r+0xa0>
 800816e:	9b03      	ldr	r3, [sp, #12]
 8008170:	1d19      	adds	r1, r3, #4
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	9103      	str	r1, [sp, #12]
 8008176:	2b00      	cmp	r3, #0
 8008178:	bfbb      	ittet	lt
 800817a:	425b      	neglt	r3, r3
 800817c:	f042 0202 	orrlt.w	r2, r2, #2
 8008180:	9307      	strge	r3, [sp, #28]
 8008182:	9307      	strlt	r3, [sp, #28]
 8008184:	bfb8      	it	lt
 8008186:	9204      	strlt	r2, [sp, #16]
 8008188:	7823      	ldrb	r3, [r4, #0]
 800818a:	2b2e      	cmp	r3, #46	@ 0x2e
 800818c:	d10a      	bne.n	80081a4 <_svfiprintf_r+0x130>
 800818e:	7863      	ldrb	r3, [r4, #1]
 8008190:	2b2a      	cmp	r3, #42	@ 0x2a
 8008192:	d132      	bne.n	80081fa <_svfiprintf_r+0x186>
 8008194:	9b03      	ldr	r3, [sp, #12]
 8008196:	1d1a      	adds	r2, r3, #4
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	9203      	str	r2, [sp, #12]
 800819c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80081a0:	3402      	adds	r4, #2
 80081a2:	9305      	str	r3, [sp, #20]
 80081a4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008268 <_svfiprintf_r+0x1f4>
 80081a8:	7821      	ldrb	r1, [r4, #0]
 80081aa:	2203      	movs	r2, #3
 80081ac:	4650      	mov	r0, sl
 80081ae:	f7f8 f82f 	bl	8000210 <memchr>
 80081b2:	b138      	cbz	r0, 80081c4 <_svfiprintf_r+0x150>
 80081b4:	9b04      	ldr	r3, [sp, #16]
 80081b6:	eba0 000a 	sub.w	r0, r0, sl
 80081ba:	2240      	movs	r2, #64	@ 0x40
 80081bc:	4082      	lsls	r2, r0
 80081be:	4313      	orrs	r3, r2
 80081c0:	3401      	adds	r4, #1
 80081c2:	9304      	str	r3, [sp, #16]
 80081c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80081c8:	4824      	ldr	r0, [pc, #144]	@ (800825c <_svfiprintf_r+0x1e8>)
 80081ca:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80081ce:	2206      	movs	r2, #6
 80081d0:	f7f8 f81e 	bl	8000210 <memchr>
 80081d4:	2800      	cmp	r0, #0
 80081d6:	d036      	beq.n	8008246 <_svfiprintf_r+0x1d2>
 80081d8:	4b21      	ldr	r3, [pc, #132]	@ (8008260 <_svfiprintf_r+0x1ec>)
 80081da:	bb1b      	cbnz	r3, 8008224 <_svfiprintf_r+0x1b0>
 80081dc:	9b03      	ldr	r3, [sp, #12]
 80081de:	3307      	adds	r3, #7
 80081e0:	f023 0307 	bic.w	r3, r3, #7
 80081e4:	3308      	adds	r3, #8
 80081e6:	9303      	str	r3, [sp, #12]
 80081e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80081ea:	4433      	add	r3, r6
 80081ec:	9309      	str	r3, [sp, #36]	@ 0x24
 80081ee:	e76a      	b.n	80080c6 <_svfiprintf_r+0x52>
 80081f0:	fb0c 3202 	mla	r2, ip, r2, r3
 80081f4:	460c      	mov	r4, r1
 80081f6:	2001      	movs	r0, #1
 80081f8:	e7a8      	b.n	800814c <_svfiprintf_r+0xd8>
 80081fa:	2300      	movs	r3, #0
 80081fc:	3401      	adds	r4, #1
 80081fe:	9305      	str	r3, [sp, #20]
 8008200:	4619      	mov	r1, r3
 8008202:	f04f 0c0a 	mov.w	ip, #10
 8008206:	4620      	mov	r0, r4
 8008208:	f810 2b01 	ldrb.w	r2, [r0], #1
 800820c:	3a30      	subs	r2, #48	@ 0x30
 800820e:	2a09      	cmp	r2, #9
 8008210:	d903      	bls.n	800821a <_svfiprintf_r+0x1a6>
 8008212:	2b00      	cmp	r3, #0
 8008214:	d0c6      	beq.n	80081a4 <_svfiprintf_r+0x130>
 8008216:	9105      	str	r1, [sp, #20]
 8008218:	e7c4      	b.n	80081a4 <_svfiprintf_r+0x130>
 800821a:	fb0c 2101 	mla	r1, ip, r1, r2
 800821e:	4604      	mov	r4, r0
 8008220:	2301      	movs	r3, #1
 8008222:	e7f0      	b.n	8008206 <_svfiprintf_r+0x192>
 8008224:	ab03      	add	r3, sp, #12
 8008226:	9300      	str	r3, [sp, #0]
 8008228:	462a      	mov	r2, r5
 800822a:	4b0e      	ldr	r3, [pc, #56]	@ (8008264 <_svfiprintf_r+0x1f0>)
 800822c:	a904      	add	r1, sp, #16
 800822e:	4638      	mov	r0, r7
 8008230:	f3af 8000 	nop.w
 8008234:	1c42      	adds	r2, r0, #1
 8008236:	4606      	mov	r6, r0
 8008238:	d1d6      	bne.n	80081e8 <_svfiprintf_r+0x174>
 800823a:	89ab      	ldrh	r3, [r5, #12]
 800823c:	065b      	lsls	r3, r3, #25
 800823e:	f53f af2d 	bmi.w	800809c <_svfiprintf_r+0x28>
 8008242:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008244:	e72c      	b.n	80080a0 <_svfiprintf_r+0x2c>
 8008246:	ab03      	add	r3, sp, #12
 8008248:	9300      	str	r3, [sp, #0]
 800824a:	462a      	mov	r2, r5
 800824c:	4b05      	ldr	r3, [pc, #20]	@ (8008264 <_svfiprintf_r+0x1f0>)
 800824e:	a904      	add	r1, sp, #16
 8008250:	4638      	mov	r0, r7
 8008252:	f000 f9bb 	bl	80085cc <_printf_i>
 8008256:	e7ed      	b.n	8008234 <_svfiprintf_r+0x1c0>
 8008258:	0800c4a8 	.word	0x0800c4a8
 800825c:	0800c4b2 	.word	0x0800c4b2
 8008260:	00000000 	.word	0x00000000
 8008264:	08007fbd 	.word	0x08007fbd
 8008268:	0800c4ae 	.word	0x0800c4ae

0800826c <__sfputc_r>:
 800826c:	6893      	ldr	r3, [r2, #8]
 800826e:	3b01      	subs	r3, #1
 8008270:	2b00      	cmp	r3, #0
 8008272:	b410      	push	{r4}
 8008274:	6093      	str	r3, [r2, #8]
 8008276:	da08      	bge.n	800828a <__sfputc_r+0x1e>
 8008278:	6994      	ldr	r4, [r2, #24]
 800827a:	42a3      	cmp	r3, r4
 800827c:	db01      	blt.n	8008282 <__sfputc_r+0x16>
 800827e:	290a      	cmp	r1, #10
 8008280:	d103      	bne.n	800828a <__sfputc_r+0x1e>
 8008282:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008286:	f7ff bd18 	b.w	8007cba <__swbuf_r>
 800828a:	6813      	ldr	r3, [r2, #0]
 800828c:	1c58      	adds	r0, r3, #1
 800828e:	6010      	str	r0, [r2, #0]
 8008290:	7019      	strb	r1, [r3, #0]
 8008292:	4608      	mov	r0, r1
 8008294:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008298:	4770      	bx	lr

0800829a <__sfputs_r>:
 800829a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800829c:	4606      	mov	r6, r0
 800829e:	460f      	mov	r7, r1
 80082a0:	4614      	mov	r4, r2
 80082a2:	18d5      	adds	r5, r2, r3
 80082a4:	42ac      	cmp	r4, r5
 80082a6:	d101      	bne.n	80082ac <__sfputs_r+0x12>
 80082a8:	2000      	movs	r0, #0
 80082aa:	e007      	b.n	80082bc <__sfputs_r+0x22>
 80082ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80082b0:	463a      	mov	r2, r7
 80082b2:	4630      	mov	r0, r6
 80082b4:	f7ff ffda 	bl	800826c <__sfputc_r>
 80082b8:	1c43      	adds	r3, r0, #1
 80082ba:	d1f3      	bne.n	80082a4 <__sfputs_r+0xa>
 80082bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080082c0 <_vfiprintf_r>:
 80082c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082c4:	460d      	mov	r5, r1
 80082c6:	b09d      	sub	sp, #116	@ 0x74
 80082c8:	4614      	mov	r4, r2
 80082ca:	4698      	mov	r8, r3
 80082cc:	4606      	mov	r6, r0
 80082ce:	b118      	cbz	r0, 80082d8 <_vfiprintf_r+0x18>
 80082d0:	6a03      	ldr	r3, [r0, #32]
 80082d2:	b90b      	cbnz	r3, 80082d8 <_vfiprintf_r+0x18>
 80082d4:	f7ff fbe8 	bl	8007aa8 <__sinit>
 80082d8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80082da:	07d9      	lsls	r1, r3, #31
 80082dc:	d405      	bmi.n	80082ea <_vfiprintf_r+0x2a>
 80082de:	89ab      	ldrh	r3, [r5, #12]
 80082e0:	059a      	lsls	r2, r3, #22
 80082e2:	d402      	bmi.n	80082ea <_vfiprintf_r+0x2a>
 80082e4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80082e6:	f7ff fe06 	bl	8007ef6 <__retarget_lock_acquire_recursive>
 80082ea:	89ab      	ldrh	r3, [r5, #12]
 80082ec:	071b      	lsls	r3, r3, #28
 80082ee:	d501      	bpl.n	80082f4 <_vfiprintf_r+0x34>
 80082f0:	692b      	ldr	r3, [r5, #16]
 80082f2:	b99b      	cbnz	r3, 800831c <_vfiprintf_r+0x5c>
 80082f4:	4629      	mov	r1, r5
 80082f6:	4630      	mov	r0, r6
 80082f8:	f7ff fd1e 	bl	8007d38 <__swsetup_r>
 80082fc:	b170      	cbz	r0, 800831c <_vfiprintf_r+0x5c>
 80082fe:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008300:	07dc      	lsls	r4, r3, #31
 8008302:	d504      	bpl.n	800830e <_vfiprintf_r+0x4e>
 8008304:	f04f 30ff 	mov.w	r0, #4294967295
 8008308:	b01d      	add	sp, #116	@ 0x74
 800830a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800830e:	89ab      	ldrh	r3, [r5, #12]
 8008310:	0598      	lsls	r0, r3, #22
 8008312:	d4f7      	bmi.n	8008304 <_vfiprintf_r+0x44>
 8008314:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008316:	f7ff fdef 	bl	8007ef8 <__retarget_lock_release_recursive>
 800831a:	e7f3      	b.n	8008304 <_vfiprintf_r+0x44>
 800831c:	2300      	movs	r3, #0
 800831e:	9309      	str	r3, [sp, #36]	@ 0x24
 8008320:	2320      	movs	r3, #32
 8008322:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008326:	f8cd 800c 	str.w	r8, [sp, #12]
 800832a:	2330      	movs	r3, #48	@ 0x30
 800832c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80084dc <_vfiprintf_r+0x21c>
 8008330:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008334:	f04f 0901 	mov.w	r9, #1
 8008338:	4623      	mov	r3, r4
 800833a:	469a      	mov	sl, r3
 800833c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008340:	b10a      	cbz	r2, 8008346 <_vfiprintf_r+0x86>
 8008342:	2a25      	cmp	r2, #37	@ 0x25
 8008344:	d1f9      	bne.n	800833a <_vfiprintf_r+0x7a>
 8008346:	ebba 0b04 	subs.w	fp, sl, r4
 800834a:	d00b      	beq.n	8008364 <_vfiprintf_r+0xa4>
 800834c:	465b      	mov	r3, fp
 800834e:	4622      	mov	r2, r4
 8008350:	4629      	mov	r1, r5
 8008352:	4630      	mov	r0, r6
 8008354:	f7ff ffa1 	bl	800829a <__sfputs_r>
 8008358:	3001      	adds	r0, #1
 800835a:	f000 80a7 	beq.w	80084ac <_vfiprintf_r+0x1ec>
 800835e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008360:	445a      	add	r2, fp
 8008362:	9209      	str	r2, [sp, #36]	@ 0x24
 8008364:	f89a 3000 	ldrb.w	r3, [sl]
 8008368:	2b00      	cmp	r3, #0
 800836a:	f000 809f 	beq.w	80084ac <_vfiprintf_r+0x1ec>
 800836e:	2300      	movs	r3, #0
 8008370:	f04f 32ff 	mov.w	r2, #4294967295
 8008374:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008378:	f10a 0a01 	add.w	sl, sl, #1
 800837c:	9304      	str	r3, [sp, #16]
 800837e:	9307      	str	r3, [sp, #28]
 8008380:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008384:	931a      	str	r3, [sp, #104]	@ 0x68
 8008386:	4654      	mov	r4, sl
 8008388:	2205      	movs	r2, #5
 800838a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800838e:	4853      	ldr	r0, [pc, #332]	@ (80084dc <_vfiprintf_r+0x21c>)
 8008390:	f7f7 ff3e 	bl	8000210 <memchr>
 8008394:	9a04      	ldr	r2, [sp, #16]
 8008396:	b9d8      	cbnz	r0, 80083d0 <_vfiprintf_r+0x110>
 8008398:	06d1      	lsls	r1, r2, #27
 800839a:	bf44      	itt	mi
 800839c:	2320      	movmi	r3, #32
 800839e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80083a2:	0713      	lsls	r3, r2, #28
 80083a4:	bf44      	itt	mi
 80083a6:	232b      	movmi	r3, #43	@ 0x2b
 80083a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80083ac:	f89a 3000 	ldrb.w	r3, [sl]
 80083b0:	2b2a      	cmp	r3, #42	@ 0x2a
 80083b2:	d015      	beq.n	80083e0 <_vfiprintf_r+0x120>
 80083b4:	9a07      	ldr	r2, [sp, #28]
 80083b6:	4654      	mov	r4, sl
 80083b8:	2000      	movs	r0, #0
 80083ba:	f04f 0c0a 	mov.w	ip, #10
 80083be:	4621      	mov	r1, r4
 80083c0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80083c4:	3b30      	subs	r3, #48	@ 0x30
 80083c6:	2b09      	cmp	r3, #9
 80083c8:	d94b      	bls.n	8008462 <_vfiprintf_r+0x1a2>
 80083ca:	b1b0      	cbz	r0, 80083fa <_vfiprintf_r+0x13a>
 80083cc:	9207      	str	r2, [sp, #28]
 80083ce:	e014      	b.n	80083fa <_vfiprintf_r+0x13a>
 80083d0:	eba0 0308 	sub.w	r3, r0, r8
 80083d4:	fa09 f303 	lsl.w	r3, r9, r3
 80083d8:	4313      	orrs	r3, r2
 80083da:	9304      	str	r3, [sp, #16]
 80083dc:	46a2      	mov	sl, r4
 80083de:	e7d2      	b.n	8008386 <_vfiprintf_r+0xc6>
 80083e0:	9b03      	ldr	r3, [sp, #12]
 80083e2:	1d19      	adds	r1, r3, #4
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	9103      	str	r1, [sp, #12]
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	bfbb      	ittet	lt
 80083ec:	425b      	neglt	r3, r3
 80083ee:	f042 0202 	orrlt.w	r2, r2, #2
 80083f2:	9307      	strge	r3, [sp, #28]
 80083f4:	9307      	strlt	r3, [sp, #28]
 80083f6:	bfb8      	it	lt
 80083f8:	9204      	strlt	r2, [sp, #16]
 80083fa:	7823      	ldrb	r3, [r4, #0]
 80083fc:	2b2e      	cmp	r3, #46	@ 0x2e
 80083fe:	d10a      	bne.n	8008416 <_vfiprintf_r+0x156>
 8008400:	7863      	ldrb	r3, [r4, #1]
 8008402:	2b2a      	cmp	r3, #42	@ 0x2a
 8008404:	d132      	bne.n	800846c <_vfiprintf_r+0x1ac>
 8008406:	9b03      	ldr	r3, [sp, #12]
 8008408:	1d1a      	adds	r2, r3, #4
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	9203      	str	r2, [sp, #12]
 800840e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008412:	3402      	adds	r4, #2
 8008414:	9305      	str	r3, [sp, #20]
 8008416:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80084ec <_vfiprintf_r+0x22c>
 800841a:	7821      	ldrb	r1, [r4, #0]
 800841c:	2203      	movs	r2, #3
 800841e:	4650      	mov	r0, sl
 8008420:	f7f7 fef6 	bl	8000210 <memchr>
 8008424:	b138      	cbz	r0, 8008436 <_vfiprintf_r+0x176>
 8008426:	9b04      	ldr	r3, [sp, #16]
 8008428:	eba0 000a 	sub.w	r0, r0, sl
 800842c:	2240      	movs	r2, #64	@ 0x40
 800842e:	4082      	lsls	r2, r0
 8008430:	4313      	orrs	r3, r2
 8008432:	3401      	adds	r4, #1
 8008434:	9304      	str	r3, [sp, #16]
 8008436:	f814 1b01 	ldrb.w	r1, [r4], #1
 800843a:	4829      	ldr	r0, [pc, #164]	@ (80084e0 <_vfiprintf_r+0x220>)
 800843c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008440:	2206      	movs	r2, #6
 8008442:	f7f7 fee5 	bl	8000210 <memchr>
 8008446:	2800      	cmp	r0, #0
 8008448:	d03f      	beq.n	80084ca <_vfiprintf_r+0x20a>
 800844a:	4b26      	ldr	r3, [pc, #152]	@ (80084e4 <_vfiprintf_r+0x224>)
 800844c:	bb1b      	cbnz	r3, 8008496 <_vfiprintf_r+0x1d6>
 800844e:	9b03      	ldr	r3, [sp, #12]
 8008450:	3307      	adds	r3, #7
 8008452:	f023 0307 	bic.w	r3, r3, #7
 8008456:	3308      	adds	r3, #8
 8008458:	9303      	str	r3, [sp, #12]
 800845a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800845c:	443b      	add	r3, r7
 800845e:	9309      	str	r3, [sp, #36]	@ 0x24
 8008460:	e76a      	b.n	8008338 <_vfiprintf_r+0x78>
 8008462:	fb0c 3202 	mla	r2, ip, r2, r3
 8008466:	460c      	mov	r4, r1
 8008468:	2001      	movs	r0, #1
 800846a:	e7a8      	b.n	80083be <_vfiprintf_r+0xfe>
 800846c:	2300      	movs	r3, #0
 800846e:	3401      	adds	r4, #1
 8008470:	9305      	str	r3, [sp, #20]
 8008472:	4619      	mov	r1, r3
 8008474:	f04f 0c0a 	mov.w	ip, #10
 8008478:	4620      	mov	r0, r4
 800847a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800847e:	3a30      	subs	r2, #48	@ 0x30
 8008480:	2a09      	cmp	r2, #9
 8008482:	d903      	bls.n	800848c <_vfiprintf_r+0x1cc>
 8008484:	2b00      	cmp	r3, #0
 8008486:	d0c6      	beq.n	8008416 <_vfiprintf_r+0x156>
 8008488:	9105      	str	r1, [sp, #20]
 800848a:	e7c4      	b.n	8008416 <_vfiprintf_r+0x156>
 800848c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008490:	4604      	mov	r4, r0
 8008492:	2301      	movs	r3, #1
 8008494:	e7f0      	b.n	8008478 <_vfiprintf_r+0x1b8>
 8008496:	ab03      	add	r3, sp, #12
 8008498:	9300      	str	r3, [sp, #0]
 800849a:	462a      	mov	r2, r5
 800849c:	4b12      	ldr	r3, [pc, #72]	@ (80084e8 <_vfiprintf_r+0x228>)
 800849e:	a904      	add	r1, sp, #16
 80084a0:	4630      	mov	r0, r6
 80084a2:	f3af 8000 	nop.w
 80084a6:	4607      	mov	r7, r0
 80084a8:	1c78      	adds	r0, r7, #1
 80084aa:	d1d6      	bne.n	800845a <_vfiprintf_r+0x19a>
 80084ac:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80084ae:	07d9      	lsls	r1, r3, #31
 80084b0:	d405      	bmi.n	80084be <_vfiprintf_r+0x1fe>
 80084b2:	89ab      	ldrh	r3, [r5, #12]
 80084b4:	059a      	lsls	r2, r3, #22
 80084b6:	d402      	bmi.n	80084be <_vfiprintf_r+0x1fe>
 80084b8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80084ba:	f7ff fd1d 	bl	8007ef8 <__retarget_lock_release_recursive>
 80084be:	89ab      	ldrh	r3, [r5, #12]
 80084c0:	065b      	lsls	r3, r3, #25
 80084c2:	f53f af1f 	bmi.w	8008304 <_vfiprintf_r+0x44>
 80084c6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80084c8:	e71e      	b.n	8008308 <_vfiprintf_r+0x48>
 80084ca:	ab03      	add	r3, sp, #12
 80084cc:	9300      	str	r3, [sp, #0]
 80084ce:	462a      	mov	r2, r5
 80084d0:	4b05      	ldr	r3, [pc, #20]	@ (80084e8 <_vfiprintf_r+0x228>)
 80084d2:	a904      	add	r1, sp, #16
 80084d4:	4630      	mov	r0, r6
 80084d6:	f000 f879 	bl	80085cc <_printf_i>
 80084da:	e7e4      	b.n	80084a6 <_vfiprintf_r+0x1e6>
 80084dc:	0800c4a8 	.word	0x0800c4a8
 80084e0:	0800c4b2 	.word	0x0800c4b2
 80084e4:	00000000 	.word	0x00000000
 80084e8:	0800829b 	.word	0x0800829b
 80084ec:	0800c4ae 	.word	0x0800c4ae

080084f0 <_printf_common>:
 80084f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80084f4:	4616      	mov	r6, r2
 80084f6:	4698      	mov	r8, r3
 80084f8:	688a      	ldr	r2, [r1, #8]
 80084fa:	690b      	ldr	r3, [r1, #16]
 80084fc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008500:	4293      	cmp	r3, r2
 8008502:	bfb8      	it	lt
 8008504:	4613      	movlt	r3, r2
 8008506:	6033      	str	r3, [r6, #0]
 8008508:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800850c:	4607      	mov	r7, r0
 800850e:	460c      	mov	r4, r1
 8008510:	b10a      	cbz	r2, 8008516 <_printf_common+0x26>
 8008512:	3301      	adds	r3, #1
 8008514:	6033      	str	r3, [r6, #0]
 8008516:	6823      	ldr	r3, [r4, #0]
 8008518:	0699      	lsls	r1, r3, #26
 800851a:	bf42      	ittt	mi
 800851c:	6833      	ldrmi	r3, [r6, #0]
 800851e:	3302      	addmi	r3, #2
 8008520:	6033      	strmi	r3, [r6, #0]
 8008522:	6825      	ldr	r5, [r4, #0]
 8008524:	f015 0506 	ands.w	r5, r5, #6
 8008528:	d106      	bne.n	8008538 <_printf_common+0x48>
 800852a:	f104 0a19 	add.w	sl, r4, #25
 800852e:	68e3      	ldr	r3, [r4, #12]
 8008530:	6832      	ldr	r2, [r6, #0]
 8008532:	1a9b      	subs	r3, r3, r2
 8008534:	42ab      	cmp	r3, r5
 8008536:	dc26      	bgt.n	8008586 <_printf_common+0x96>
 8008538:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800853c:	6822      	ldr	r2, [r4, #0]
 800853e:	3b00      	subs	r3, #0
 8008540:	bf18      	it	ne
 8008542:	2301      	movne	r3, #1
 8008544:	0692      	lsls	r2, r2, #26
 8008546:	d42b      	bmi.n	80085a0 <_printf_common+0xb0>
 8008548:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800854c:	4641      	mov	r1, r8
 800854e:	4638      	mov	r0, r7
 8008550:	47c8      	blx	r9
 8008552:	3001      	adds	r0, #1
 8008554:	d01e      	beq.n	8008594 <_printf_common+0xa4>
 8008556:	6823      	ldr	r3, [r4, #0]
 8008558:	6922      	ldr	r2, [r4, #16]
 800855a:	f003 0306 	and.w	r3, r3, #6
 800855e:	2b04      	cmp	r3, #4
 8008560:	bf02      	ittt	eq
 8008562:	68e5      	ldreq	r5, [r4, #12]
 8008564:	6833      	ldreq	r3, [r6, #0]
 8008566:	1aed      	subeq	r5, r5, r3
 8008568:	68a3      	ldr	r3, [r4, #8]
 800856a:	bf0c      	ite	eq
 800856c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008570:	2500      	movne	r5, #0
 8008572:	4293      	cmp	r3, r2
 8008574:	bfc4      	itt	gt
 8008576:	1a9b      	subgt	r3, r3, r2
 8008578:	18ed      	addgt	r5, r5, r3
 800857a:	2600      	movs	r6, #0
 800857c:	341a      	adds	r4, #26
 800857e:	42b5      	cmp	r5, r6
 8008580:	d11a      	bne.n	80085b8 <_printf_common+0xc8>
 8008582:	2000      	movs	r0, #0
 8008584:	e008      	b.n	8008598 <_printf_common+0xa8>
 8008586:	2301      	movs	r3, #1
 8008588:	4652      	mov	r2, sl
 800858a:	4641      	mov	r1, r8
 800858c:	4638      	mov	r0, r7
 800858e:	47c8      	blx	r9
 8008590:	3001      	adds	r0, #1
 8008592:	d103      	bne.n	800859c <_printf_common+0xac>
 8008594:	f04f 30ff 	mov.w	r0, #4294967295
 8008598:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800859c:	3501      	adds	r5, #1
 800859e:	e7c6      	b.n	800852e <_printf_common+0x3e>
 80085a0:	18e1      	adds	r1, r4, r3
 80085a2:	1c5a      	adds	r2, r3, #1
 80085a4:	2030      	movs	r0, #48	@ 0x30
 80085a6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80085aa:	4422      	add	r2, r4
 80085ac:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80085b0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80085b4:	3302      	adds	r3, #2
 80085b6:	e7c7      	b.n	8008548 <_printf_common+0x58>
 80085b8:	2301      	movs	r3, #1
 80085ba:	4622      	mov	r2, r4
 80085bc:	4641      	mov	r1, r8
 80085be:	4638      	mov	r0, r7
 80085c0:	47c8      	blx	r9
 80085c2:	3001      	adds	r0, #1
 80085c4:	d0e6      	beq.n	8008594 <_printf_common+0xa4>
 80085c6:	3601      	adds	r6, #1
 80085c8:	e7d9      	b.n	800857e <_printf_common+0x8e>
	...

080085cc <_printf_i>:
 80085cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80085d0:	7e0f      	ldrb	r7, [r1, #24]
 80085d2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80085d4:	2f78      	cmp	r7, #120	@ 0x78
 80085d6:	4691      	mov	r9, r2
 80085d8:	4680      	mov	r8, r0
 80085da:	460c      	mov	r4, r1
 80085dc:	469a      	mov	sl, r3
 80085de:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80085e2:	d807      	bhi.n	80085f4 <_printf_i+0x28>
 80085e4:	2f62      	cmp	r7, #98	@ 0x62
 80085e6:	d80a      	bhi.n	80085fe <_printf_i+0x32>
 80085e8:	2f00      	cmp	r7, #0
 80085ea:	f000 80d2 	beq.w	8008792 <_printf_i+0x1c6>
 80085ee:	2f58      	cmp	r7, #88	@ 0x58
 80085f0:	f000 80b9 	beq.w	8008766 <_printf_i+0x19a>
 80085f4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80085f8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80085fc:	e03a      	b.n	8008674 <_printf_i+0xa8>
 80085fe:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008602:	2b15      	cmp	r3, #21
 8008604:	d8f6      	bhi.n	80085f4 <_printf_i+0x28>
 8008606:	a101      	add	r1, pc, #4	@ (adr r1, 800860c <_printf_i+0x40>)
 8008608:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800860c:	08008665 	.word	0x08008665
 8008610:	08008679 	.word	0x08008679
 8008614:	080085f5 	.word	0x080085f5
 8008618:	080085f5 	.word	0x080085f5
 800861c:	080085f5 	.word	0x080085f5
 8008620:	080085f5 	.word	0x080085f5
 8008624:	08008679 	.word	0x08008679
 8008628:	080085f5 	.word	0x080085f5
 800862c:	080085f5 	.word	0x080085f5
 8008630:	080085f5 	.word	0x080085f5
 8008634:	080085f5 	.word	0x080085f5
 8008638:	08008779 	.word	0x08008779
 800863c:	080086a3 	.word	0x080086a3
 8008640:	08008733 	.word	0x08008733
 8008644:	080085f5 	.word	0x080085f5
 8008648:	080085f5 	.word	0x080085f5
 800864c:	0800879b 	.word	0x0800879b
 8008650:	080085f5 	.word	0x080085f5
 8008654:	080086a3 	.word	0x080086a3
 8008658:	080085f5 	.word	0x080085f5
 800865c:	080085f5 	.word	0x080085f5
 8008660:	0800873b 	.word	0x0800873b
 8008664:	6833      	ldr	r3, [r6, #0]
 8008666:	1d1a      	adds	r2, r3, #4
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	6032      	str	r2, [r6, #0]
 800866c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008670:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008674:	2301      	movs	r3, #1
 8008676:	e09d      	b.n	80087b4 <_printf_i+0x1e8>
 8008678:	6833      	ldr	r3, [r6, #0]
 800867a:	6820      	ldr	r0, [r4, #0]
 800867c:	1d19      	adds	r1, r3, #4
 800867e:	6031      	str	r1, [r6, #0]
 8008680:	0606      	lsls	r6, r0, #24
 8008682:	d501      	bpl.n	8008688 <_printf_i+0xbc>
 8008684:	681d      	ldr	r5, [r3, #0]
 8008686:	e003      	b.n	8008690 <_printf_i+0xc4>
 8008688:	0645      	lsls	r5, r0, #25
 800868a:	d5fb      	bpl.n	8008684 <_printf_i+0xb8>
 800868c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008690:	2d00      	cmp	r5, #0
 8008692:	da03      	bge.n	800869c <_printf_i+0xd0>
 8008694:	232d      	movs	r3, #45	@ 0x2d
 8008696:	426d      	negs	r5, r5
 8008698:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800869c:	4859      	ldr	r0, [pc, #356]	@ (8008804 <_printf_i+0x238>)
 800869e:	230a      	movs	r3, #10
 80086a0:	e011      	b.n	80086c6 <_printf_i+0xfa>
 80086a2:	6821      	ldr	r1, [r4, #0]
 80086a4:	6833      	ldr	r3, [r6, #0]
 80086a6:	0608      	lsls	r0, r1, #24
 80086a8:	f853 5b04 	ldr.w	r5, [r3], #4
 80086ac:	d402      	bmi.n	80086b4 <_printf_i+0xe8>
 80086ae:	0649      	lsls	r1, r1, #25
 80086b0:	bf48      	it	mi
 80086b2:	b2ad      	uxthmi	r5, r5
 80086b4:	2f6f      	cmp	r7, #111	@ 0x6f
 80086b6:	4853      	ldr	r0, [pc, #332]	@ (8008804 <_printf_i+0x238>)
 80086b8:	6033      	str	r3, [r6, #0]
 80086ba:	bf14      	ite	ne
 80086bc:	230a      	movne	r3, #10
 80086be:	2308      	moveq	r3, #8
 80086c0:	2100      	movs	r1, #0
 80086c2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80086c6:	6866      	ldr	r6, [r4, #4]
 80086c8:	60a6      	str	r6, [r4, #8]
 80086ca:	2e00      	cmp	r6, #0
 80086cc:	bfa2      	ittt	ge
 80086ce:	6821      	ldrge	r1, [r4, #0]
 80086d0:	f021 0104 	bicge.w	r1, r1, #4
 80086d4:	6021      	strge	r1, [r4, #0]
 80086d6:	b90d      	cbnz	r5, 80086dc <_printf_i+0x110>
 80086d8:	2e00      	cmp	r6, #0
 80086da:	d04b      	beq.n	8008774 <_printf_i+0x1a8>
 80086dc:	4616      	mov	r6, r2
 80086de:	fbb5 f1f3 	udiv	r1, r5, r3
 80086e2:	fb03 5711 	mls	r7, r3, r1, r5
 80086e6:	5dc7      	ldrb	r7, [r0, r7]
 80086e8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80086ec:	462f      	mov	r7, r5
 80086ee:	42bb      	cmp	r3, r7
 80086f0:	460d      	mov	r5, r1
 80086f2:	d9f4      	bls.n	80086de <_printf_i+0x112>
 80086f4:	2b08      	cmp	r3, #8
 80086f6:	d10b      	bne.n	8008710 <_printf_i+0x144>
 80086f8:	6823      	ldr	r3, [r4, #0]
 80086fa:	07df      	lsls	r7, r3, #31
 80086fc:	d508      	bpl.n	8008710 <_printf_i+0x144>
 80086fe:	6923      	ldr	r3, [r4, #16]
 8008700:	6861      	ldr	r1, [r4, #4]
 8008702:	4299      	cmp	r1, r3
 8008704:	bfde      	ittt	le
 8008706:	2330      	movle	r3, #48	@ 0x30
 8008708:	f806 3c01 	strble.w	r3, [r6, #-1]
 800870c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008710:	1b92      	subs	r2, r2, r6
 8008712:	6122      	str	r2, [r4, #16]
 8008714:	f8cd a000 	str.w	sl, [sp]
 8008718:	464b      	mov	r3, r9
 800871a:	aa03      	add	r2, sp, #12
 800871c:	4621      	mov	r1, r4
 800871e:	4640      	mov	r0, r8
 8008720:	f7ff fee6 	bl	80084f0 <_printf_common>
 8008724:	3001      	adds	r0, #1
 8008726:	d14a      	bne.n	80087be <_printf_i+0x1f2>
 8008728:	f04f 30ff 	mov.w	r0, #4294967295
 800872c:	b004      	add	sp, #16
 800872e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008732:	6823      	ldr	r3, [r4, #0]
 8008734:	f043 0320 	orr.w	r3, r3, #32
 8008738:	6023      	str	r3, [r4, #0]
 800873a:	4833      	ldr	r0, [pc, #204]	@ (8008808 <_printf_i+0x23c>)
 800873c:	2778      	movs	r7, #120	@ 0x78
 800873e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008742:	6823      	ldr	r3, [r4, #0]
 8008744:	6831      	ldr	r1, [r6, #0]
 8008746:	061f      	lsls	r7, r3, #24
 8008748:	f851 5b04 	ldr.w	r5, [r1], #4
 800874c:	d402      	bmi.n	8008754 <_printf_i+0x188>
 800874e:	065f      	lsls	r7, r3, #25
 8008750:	bf48      	it	mi
 8008752:	b2ad      	uxthmi	r5, r5
 8008754:	6031      	str	r1, [r6, #0]
 8008756:	07d9      	lsls	r1, r3, #31
 8008758:	bf44      	itt	mi
 800875a:	f043 0320 	orrmi.w	r3, r3, #32
 800875e:	6023      	strmi	r3, [r4, #0]
 8008760:	b11d      	cbz	r5, 800876a <_printf_i+0x19e>
 8008762:	2310      	movs	r3, #16
 8008764:	e7ac      	b.n	80086c0 <_printf_i+0xf4>
 8008766:	4827      	ldr	r0, [pc, #156]	@ (8008804 <_printf_i+0x238>)
 8008768:	e7e9      	b.n	800873e <_printf_i+0x172>
 800876a:	6823      	ldr	r3, [r4, #0]
 800876c:	f023 0320 	bic.w	r3, r3, #32
 8008770:	6023      	str	r3, [r4, #0]
 8008772:	e7f6      	b.n	8008762 <_printf_i+0x196>
 8008774:	4616      	mov	r6, r2
 8008776:	e7bd      	b.n	80086f4 <_printf_i+0x128>
 8008778:	6833      	ldr	r3, [r6, #0]
 800877a:	6825      	ldr	r5, [r4, #0]
 800877c:	6961      	ldr	r1, [r4, #20]
 800877e:	1d18      	adds	r0, r3, #4
 8008780:	6030      	str	r0, [r6, #0]
 8008782:	062e      	lsls	r6, r5, #24
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	d501      	bpl.n	800878c <_printf_i+0x1c0>
 8008788:	6019      	str	r1, [r3, #0]
 800878a:	e002      	b.n	8008792 <_printf_i+0x1c6>
 800878c:	0668      	lsls	r0, r5, #25
 800878e:	d5fb      	bpl.n	8008788 <_printf_i+0x1bc>
 8008790:	8019      	strh	r1, [r3, #0]
 8008792:	2300      	movs	r3, #0
 8008794:	6123      	str	r3, [r4, #16]
 8008796:	4616      	mov	r6, r2
 8008798:	e7bc      	b.n	8008714 <_printf_i+0x148>
 800879a:	6833      	ldr	r3, [r6, #0]
 800879c:	1d1a      	adds	r2, r3, #4
 800879e:	6032      	str	r2, [r6, #0]
 80087a0:	681e      	ldr	r6, [r3, #0]
 80087a2:	6862      	ldr	r2, [r4, #4]
 80087a4:	2100      	movs	r1, #0
 80087a6:	4630      	mov	r0, r6
 80087a8:	f7f7 fd32 	bl	8000210 <memchr>
 80087ac:	b108      	cbz	r0, 80087b2 <_printf_i+0x1e6>
 80087ae:	1b80      	subs	r0, r0, r6
 80087b0:	6060      	str	r0, [r4, #4]
 80087b2:	6863      	ldr	r3, [r4, #4]
 80087b4:	6123      	str	r3, [r4, #16]
 80087b6:	2300      	movs	r3, #0
 80087b8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80087bc:	e7aa      	b.n	8008714 <_printf_i+0x148>
 80087be:	6923      	ldr	r3, [r4, #16]
 80087c0:	4632      	mov	r2, r6
 80087c2:	4649      	mov	r1, r9
 80087c4:	4640      	mov	r0, r8
 80087c6:	47d0      	blx	sl
 80087c8:	3001      	adds	r0, #1
 80087ca:	d0ad      	beq.n	8008728 <_printf_i+0x15c>
 80087cc:	6823      	ldr	r3, [r4, #0]
 80087ce:	079b      	lsls	r3, r3, #30
 80087d0:	d413      	bmi.n	80087fa <_printf_i+0x22e>
 80087d2:	68e0      	ldr	r0, [r4, #12]
 80087d4:	9b03      	ldr	r3, [sp, #12]
 80087d6:	4298      	cmp	r0, r3
 80087d8:	bfb8      	it	lt
 80087da:	4618      	movlt	r0, r3
 80087dc:	e7a6      	b.n	800872c <_printf_i+0x160>
 80087de:	2301      	movs	r3, #1
 80087e0:	4632      	mov	r2, r6
 80087e2:	4649      	mov	r1, r9
 80087e4:	4640      	mov	r0, r8
 80087e6:	47d0      	blx	sl
 80087e8:	3001      	adds	r0, #1
 80087ea:	d09d      	beq.n	8008728 <_printf_i+0x15c>
 80087ec:	3501      	adds	r5, #1
 80087ee:	68e3      	ldr	r3, [r4, #12]
 80087f0:	9903      	ldr	r1, [sp, #12]
 80087f2:	1a5b      	subs	r3, r3, r1
 80087f4:	42ab      	cmp	r3, r5
 80087f6:	dcf2      	bgt.n	80087de <_printf_i+0x212>
 80087f8:	e7eb      	b.n	80087d2 <_printf_i+0x206>
 80087fa:	2500      	movs	r5, #0
 80087fc:	f104 0619 	add.w	r6, r4, #25
 8008800:	e7f5      	b.n	80087ee <_printf_i+0x222>
 8008802:	bf00      	nop
 8008804:	0800c4b9 	.word	0x0800c4b9
 8008808:	0800c4ca 	.word	0x0800c4ca

0800880c <__sflush_r>:
 800880c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008810:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008814:	0716      	lsls	r6, r2, #28
 8008816:	4605      	mov	r5, r0
 8008818:	460c      	mov	r4, r1
 800881a:	d454      	bmi.n	80088c6 <__sflush_r+0xba>
 800881c:	684b      	ldr	r3, [r1, #4]
 800881e:	2b00      	cmp	r3, #0
 8008820:	dc02      	bgt.n	8008828 <__sflush_r+0x1c>
 8008822:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008824:	2b00      	cmp	r3, #0
 8008826:	dd48      	ble.n	80088ba <__sflush_r+0xae>
 8008828:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800882a:	2e00      	cmp	r6, #0
 800882c:	d045      	beq.n	80088ba <__sflush_r+0xae>
 800882e:	2300      	movs	r3, #0
 8008830:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008834:	682f      	ldr	r7, [r5, #0]
 8008836:	6a21      	ldr	r1, [r4, #32]
 8008838:	602b      	str	r3, [r5, #0]
 800883a:	d030      	beq.n	800889e <__sflush_r+0x92>
 800883c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800883e:	89a3      	ldrh	r3, [r4, #12]
 8008840:	0759      	lsls	r1, r3, #29
 8008842:	d505      	bpl.n	8008850 <__sflush_r+0x44>
 8008844:	6863      	ldr	r3, [r4, #4]
 8008846:	1ad2      	subs	r2, r2, r3
 8008848:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800884a:	b10b      	cbz	r3, 8008850 <__sflush_r+0x44>
 800884c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800884e:	1ad2      	subs	r2, r2, r3
 8008850:	2300      	movs	r3, #0
 8008852:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008854:	6a21      	ldr	r1, [r4, #32]
 8008856:	4628      	mov	r0, r5
 8008858:	47b0      	blx	r6
 800885a:	1c43      	adds	r3, r0, #1
 800885c:	89a3      	ldrh	r3, [r4, #12]
 800885e:	d106      	bne.n	800886e <__sflush_r+0x62>
 8008860:	6829      	ldr	r1, [r5, #0]
 8008862:	291d      	cmp	r1, #29
 8008864:	d82b      	bhi.n	80088be <__sflush_r+0xb2>
 8008866:	4a2a      	ldr	r2, [pc, #168]	@ (8008910 <__sflush_r+0x104>)
 8008868:	410a      	asrs	r2, r1
 800886a:	07d6      	lsls	r6, r2, #31
 800886c:	d427      	bmi.n	80088be <__sflush_r+0xb2>
 800886e:	2200      	movs	r2, #0
 8008870:	6062      	str	r2, [r4, #4]
 8008872:	04d9      	lsls	r1, r3, #19
 8008874:	6922      	ldr	r2, [r4, #16]
 8008876:	6022      	str	r2, [r4, #0]
 8008878:	d504      	bpl.n	8008884 <__sflush_r+0x78>
 800887a:	1c42      	adds	r2, r0, #1
 800887c:	d101      	bne.n	8008882 <__sflush_r+0x76>
 800887e:	682b      	ldr	r3, [r5, #0]
 8008880:	b903      	cbnz	r3, 8008884 <__sflush_r+0x78>
 8008882:	6560      	str	r0, [r4, #84]	@ 0x54
 8008884:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008886:	602f      	str	r7, [r5, #0]
 8008888:	b1b9      	cbz	r1, 80088ba <__sflush_r+0xae>
 800888a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800888e:	4299      	cmp	r1, r3
 8008890:	d002      	beq.n	8008898 <__sflush_r+0x8c>
 8008892:	4628      	mov	r0, r5
 8008894:	f7ff fb48 	bl	8007f28 <_free_r>
 8008898:	2300      	movs	r3, #0
 800889a:	6363      	str	r3, [r4, #52]	@ 0x34
 800889c:	e00d      	b.n	80088ba <__sflush_r+0xae>
 800889e:	2301      	movs	r3, #1
 80088a0:	4628      	mov	r0, r5
 80088a2:	47b0      	blx	r6
 80088a4:	4602      	mov	r2, r0
 80088a6:	1c50      	adds	r0, r2, #1
 80088a8:	d1c9      	bne.n	800883e <__sflush_r+0x32>
 80088aa:	682b      	ldr	r3, [r5, #0]
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d0c6      	beq.n	800883e <__sflush_r+0x32>
 80088b0:	2b1d      	cmp	r3, #29
 80088b2:	d001      	beq.n	80088b8 <__sflush_r+0xac>
 80088b4:	2b16      	cmp	r3, #22
 80088b6:	d11e      	bne.n	80088f6 <__sflush_r+0xea>
 80088b8:	602f      	str	r7, [r5, #0]
 80088ba:	2000      	movs	r0, #0
 80088bc:	e022      	b.n	8008904 <__sflush_r+0xf8>
 80088be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80088c2:	b21b      	sxth	r3, r3
 80088c4:	e01b      	b.n	80088fe <__sflush_r+0xf2>
 80088c6:	690f      	ldr	r7, [r1, #16]
 80088c8:	2f00      	cmp	r7, #0
 80088ca:	d0f6      	beq.n	80088ba <__sflush_r+0xae>
 80088cc:	0793      	lsls	r3, r2, #30
 80088ce:	680e      	ldr	r6, [r1, #0]
 80088d0:	bf08      	it	eq
 80088d2:	694b      	ldreq	r3, [r1, #20]
 80088d4:	600f      	str	r7, [r1, #0]
 80088d6:	bf18      	it	ne
 80088d8:	2300      	movne	r3, #0
 80088da:	eba6 0807 	sub.w	r8, r6, r7
 80088de:	608b      	str	r3, [r1, #8]
 80088e0:	f1b8 0f00 	cmp.w	r8, #0
 80088e4:	dde9      	ble.n	80088ba <__sflush_r+0xae>
 80088e6:	6a21      	ldr	r1, [r4, #32]
 80088e8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80088ea:	4643      	mov	r3, r8
 80088ec:	463a      	mov	r2, r7
 80088ee:	4628      	mov	r0, r5
 80088f0:	47b0      	blx	r6
 80088f2:	2800      	cmp	r0, #0
 80088f4:	dc08      	bgt.n	8008908 <__sflush_r+0xfc>
 80088f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80088fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80088fe:	81a3      	strh	r3, [r4, #12]
 8008900:	f04f 30ff 	mov.w	r0, #4294967295
 8008904:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008908:	4407      	add	r7, r0
 800890a:	eba8 0800 	sub.w	r8, r8, r0
 800890e:	e7e7      	b.n	80088e0 <__sflush_r+0xd4>
 8008910:	dfbffffe 	.word	0xdfbffffe

08008914 <_fflush_r>:
 8008914:	b538      	push	{r3, r4, r5, lr}
 8008916:	690b      	ldr	r3, [r1, #16]
 8008918:	4605      	mov	r5, r0
 800891a:	460c      	mov	r4, r1
 800891c:	b913      	cbnz	r3, 8008924 <_fflush_r+0x10>
 800891e:	2500      	movs	r5, #0
 8008920:	4628      	mov	r0, r5
 8008922:	bd38      	pop	{r3, r4, r5, pc}
 8008924:	b118      	cbz	r0, 800892e <_fflush_r+0x1a>
 8008926:	6a03      	ldr	r3, [r0, #32]
 8008928:	b90b      	cbnz	r3, 800892e <_fflush_r+0x1a>
 800892a:	f7ff f8bd 	bl	8007aa8 <__sinit>
 800892e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008932:	2b00      	cmp	r3, #0
 8008934:	d0f3      	beq.n	800891e <_fflush_r+0xa>
 8008936:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008938:	07d0      	lsls	r0, r2, #31
 800893a:	d404      	bmi.n	8008946 <_fflush_r+0x32>
 800893c:	0599      	lsls	r1, r3, #22
 800893e:	d402      	bmi.n	8008946 <_fflush_r+0x32>
 8008940:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008942:	f7ff fad8 	bl	8007ef6 <__retarget_lock_acquire_recursive>
 8008946:	4628      	mov	r0, r5
 8008948:	4621      	mov	r1, r4
 800894a:	f7ff ff5f 	bl	800880c <__sflush_r>
 800894e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008950:	07da      	lsls	r2, r3, #31
 8008952:	4605      	mov	r5, r0
 8008954:	d4e4      	bmi.n	8008920 <_fflush_r+0xc>
 8008956:	89a3      	ldrh	r3, [r4, #12]
 8008958:	059b      	lsls	r3, r3, #22
 800895a:	d4e1      	bmi.n	8008920 <_fflush_r+0xc>
 800895c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800895e:	f7ff facb 	bl	8007ef8 <__retarget_lock_release_recursive>
 8008962:	e7dd      	b.n	8008920 <_fflush_r+0xc>

08008964 <__swhatbuf_r>:
 8008964:	b570      	push	{r4, r5, r6, lr}
 8008966:	460c      	mov	r4, r1
 8008968:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800896c:	2900      	cmp	r1, #0
 800896e:	b096      	sub	sp, #88	@ 0x58
 8008970:	4615      	mov	r5, r2
 8008972:	461e      	mov	r6, r3
 8008974:	da0d      	bge.n	8008992 <__swhatbuf_r+0x2e>
 8008976:	89a3      	ldrh	r3, [r4, #12]
 8008978:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800897c:	f04f 0100 	mov.w	r1, #0
 8008980:	bf14      	ite	ne
 8008982:	2340      	movne	r3, #64	@ 0x40
 8008984:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008988:	2000      	movs	r0, #0
 800898a:	6031      	str	r1, [r6, #0]
 800898c:	602b      	str	r3, [r5, #0]
 800898e:	b016      	add	sp, #88	@ 0x58
 8008990:	bd70      	pop	{r4, r5, r6, pc}
 8008992:	466a      	mov	r2, sp
 8008994:	f000 f862 	bl	8008a5c <_fstat_r>
 8008998:	2800      	cmp	r0, #0
 800899a:	dbec      	blt.n	8008976 <__swhatbuf_r+0x12>
 800899c:	9901      	ldr	r1, [sp, #4]
 800899e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80089a2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80089a6:	4259      	negs	r1, r3
 80089a8:	4159      	adcs	r1, r3
 80089aa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80089ae:	e7eb      	b.n	8008988 <__swhatbuf_r+0x24>

080089b0 <__smakebuf_r>:
 80089b0:	898b      	ldrh	r3, [r1, #12]
 80089b2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80089b4:	079d      	lsls	r5, r3, #30
 80089b6:	4606      	mov	r6, r0
 80089b8:	460c      	mov	r4, r1
 80089ba:	d507      	bpl.n	80089cc <__smakebuf_r+0x1c>
 80089bc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80089c0:	6023      	str	r3, [r4, #0]
 80089c2:	6123      	str	r3, [r4, #16]
 80089c4:	2301      	movs	r3, #1
 80089c6:	6163      	str	r3, [r4, #20]
 80089c8:	b003      	add	sp, #12
 80089ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80089cc:	ab01      	add	r3, sp, #4
 80089ce:	466a      	mov	r2, sp
 80089d0:	f7ff ffc8 	bl	8008964 <__swhatbuf_r>
 80089d4:	9f00      	ldr	r7, [sp, #0]
 80089d6:	4605      	mov	r5, r0
 80089d8:	4639      	mov	r1, r7
 80089da:	4630      	mov	r0, r6
 80089dc:	f7fe ff4c 	bl	8007878 <_malloc_r>
 80089e0:	b948      	cbnz	r0, 80089f6 <__smakebuf_r+0x46>
 80089e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80089e6:	059a      	lsls	r2, r3, #22
 80089e8:	d4ee      	bmi.n	80089c8 <__smakebuf_r+0x18>
 80089ea:	f023 0303 	bic.w	r3, r3, #3
 80089ee:	f043 0302 	orr.w	r3, r3, #2
 80089f2:	81a3      	strh	r3, [r4, #12]
 80089f4:	e7e2      	b.n	80089bc <__smakebuf_r+0xc>
 80089f6:	89a3      	ldrh	r3, [r4, #12]
 80089f8:	6020      	str	r0, [r4, #0]
 80089fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80089fe:	81a3      	strh	r3, [r4, #12]
 8008a00:	9b01      	ldr	r3, [sp, #4]
 8008a02:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008a06:	b15b      	cbz	r3, 8008a20 <__smakebuf_r+0x70>
 8008a08:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008a0c:	4630      	mov	r0, r6
 8008a0e:	f000 f837 	bl	8008a80 <_isatty_r>
 8008a12:	b128      	cbz	r0, 8008a20 <__smakebuf_r+0x70>
 8008a14:	89a3      	ldrh	r3, [r4, #12]
 8008a16:	f023 0303 	bic.w	r3, r3, #3
 8008a1a:	f043 0301 	orr.w	r3, r3, #1
 8008a1e:	81a3      	strh	r3, [r4, #12]
 8008a20:	89a3      	ldrh	r3, [r4, #12]
 8008a22:	431d      	orrs	r5, r3
 8008a24:	81a5      	strh	r5, [r4, #12]
 8008a26:	e7cf      	b.n	80089c8 <__smakebuf_r+0x18>

08008a28 <memmove>:
 8008a28:	4288      	cmp	r0, r1
 8008a2a:	b510      	push	{r4, lr}
 8008a2c:	eb01 0402 	add.w	r4, r1, r2
 8008a30:	d902      	bls.n	8008a38 <memmove+0x10>
 8008a32:	4284      	cmp	r4, r0
 8008a34:	4623      	mov	r3, r4
 8008a36:	d807      	bhi.n	8008a48 <memmove+0x20>
 8008a38:	1e43      	subs	r3, r0, #1
 8008a3a:	42a1      	cmp	r1, r4
 8008a3c:	d008      	beq.n	8008a50 <memmove+0x28>
 8008a3e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008a42:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008a46:	e7f8      	b.n	8008a3a <memmove+0x12>
 8008a48:	4402      	add	r2, r0
 8008a4a:	4601      	mov	r1, r0
 8008a4c:	428a      	cmp	r2, r1
 8008a4e:	d100      	bne.n	8008a52 <memmove+0x2a>
 8008a50:	bd10      	pop	{r4, pc}
 8008a52:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008a56:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008a5a:	e7f7      	b.n	8008a4c <memmove+0x24>

08008a5c <_fstat_r>:
 8008a5c:	b538      	push	{r3, r4, r5, lr}
 8008a5e:	4d07      	ldr	r5, [pc, #28]	@ (8008a7c <_fstat_r+0x20>)
 8008a60:	2300      	movs	r3, #0
 8008a62:	4604      	mov	r4, r0
 8008a64:	4608      	mov	r0, r1
 8008a66:	4611      	mov	r1, r2
 8008a68:	602b      	str	r3, [r5, #0]
 8008a6a:	f7f9 fd24 	bl	80024b6 <_fstat>
 8008a6e:	1c43      	adds	r3, r0, #1
 8008a70:	d102      	bne.n	8008a78 <_fstat_r+0x1c>
 8008a72:	682b      	ldr	r3, [r5, #0]
 8008a74:	b103      	cbz	r3, 8008a78 <_fstat_r+0x1c>
 8008a76:	6023      	str	r3, [r4, #0]
 8008a78:	bd38      	pop	{r3, r4, r5, pc}
 8008a7a:	bf00      	nop
 8008a7c:	200004b0 	.word	0x200004b0

08008a80 <_isatty_r>:
 8008a80:	b538      	push	{r3, r4, r5, lr}
 8008a82:	4d06      	ldr	r5, [pc, #24]	@ (8008a9c <_isatty_r+0x1c>)
 8008a84:	2300      	movs	r3, #0
 8008a86:	4604      	mov	r4, r0
 8008a88:	4608      	mov	r0, r1
 8008a8a:	602b      	str	r3, [r5, #0]
 8008a8c:	f7f9 fd23 	bl	80024d6 <_isatty>
 8008a90:	1c43      	adds	r3, r0, #1
 8008a92:	d102      	bne.n	8008a9a <_isatty_r+0x1a>
 8008a94:	682b      	ldr	r3, [r5, #0]
 8008a96:	b103      	cbz	r3, 8008a9a <_isatty_r+0x1a>
 8008a98:	6023      	str	r3, [r4, #0]
 8008a9a:	bd38      	pop	{r3, r4, r5, pc}
 8008a9c:	200004b0 	.word	0x200004b0

08008aa0 <_realloc_r>:
 8008aa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008aa4:	4680      	mov	r8, r0
 8008aa6:	4615      	mov	r5, r2
 8008aa8:	460c      	mov	r4, r1
 8008aaa:	b921      	cbnz	r1, 8008ab6 <_realloc_r+0x16>
 8008aac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008ab0:	4611      	mov	r1, r2
 8008ab2:	f7fe bee1 	b.w	8007878 <_malloc_r>
 8008ab6:	b92a      	cbnz	r2, 8008ac4 <_realloc_r+0x24>
 8008ab8:	f7ff fa36 	bl	8007f28 <_free_r>
 8008abc:	2400      	movs	r4, #0
 8008abe:	4620      	mov	r0, r4
 8008ac0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ac4:	f000 f81a 	bl	8008afc <_malloc_usable_size_r>
 8008ac8:	4285      	cmp	r5, r0
 8008aca:	4606      	mov	r6, r0
 8008acc:	d802      	bhi.n	8008ad4 <_realloc_r+0x34>
 8008ace:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008ad2:	d8f4      	bhi.n	8008abe <_realloc_r+0x1e>
 8008ad4:	4629      	mov	r1, r5
 8008ad6:	4640      	mov	r0, r8
 8008ad8:	f7fe fece 	bl	8007878 <_malloc_r>
 8008adc:	4607      	mov	r7, r0
 8008ade:	2800      	cmp	r0, #0
 8008ae0:	d0ec      	beq.n	8008abc <_realloc_r+0x1c>
 8008ae2:	42b5      	cmp	r5, r6
 8008ae4:	462a      	mov	r2, r5
 8008ae6:	4621      	mov	r1, r4
 8008ae8:	bf28      	it	cs
 8008aea:	4632      	movcs	r2, r6
 8008aec:	f7ff fa0d 	bl	8007f0a <memcpy>
 8008af0:	4621      	mov	r1, r4
 8008af2:	4640      	mov	r0, r8
 8008af4:	f7ff fa18 	bl	8007f28 <_free_r>
 8008af8:	463c      	mov	r4, r7
 8008afa:	e7e0      	b.n	8008abe <_realloc_r+0x1e>

08008afc <_malloc_usable_size_r>:
 8008afc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008b00:	1f18      	subs	r0, r3, #4
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	bfbc      	itt	lt
 8008b06:	580b      	ldrlt	r3, [r1, r0]
 8008b08:	18c0      	addlt	r0, r0, r3
 8008b0a:	4770      	bx	lr

08008b0c <_init>:
 8008b0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b0e:	bf00      	nop
 8008b10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b12:	bc08      	pop	{r3}
 8008b14:	469e      	mov	lr, r3
 8008b16:	4770      	bx	lr

08008b18 <_fini>:
 8008b18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b1a:	bf00      	nop
 8008b1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b1e:	bc08      	pop	{r3}
 8008b20:	469e      	mov	lr, r3
 8008b22:	4770      	bx	lr
