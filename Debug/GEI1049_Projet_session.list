
GEI1049_Projet_session.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008310  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002dd4  080084e0  080084e0  000094e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b2b4  0800b2b4  0000d090  2**0
                  CONTENTS
  4 .ARM          00000008  0800b2b4  0800b2b4  0000c2b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b2bc  0800b2bc  0000d090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b2bc  0800b2bc  0000c2bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b2c0  0800b2c0  0000c2c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000090  20000000  0800b2c4  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000420  20000090  0800b354  0000d090  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004b0  0800b354  0000d4b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d090  2**0
                  CONTENTS, READONLY
 12 .debug_info   000172ee  00000000  00000000  0000d0c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003a8d  00000000  00000000  000243ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014c0  00000000  00000000  00027e40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001009  00000000  00000000  00029300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002678a  00000000  00000000  0002a309  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e0c1  00000000  00000000  00050a93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d897d  00000000  00000000  0006eb54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001474d1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005e90  00000000  00000000  00147514  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  0014d3a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000090 	.word	0x20000090
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080084c8 	.word	0x080084c8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000094 	.word	0x20000094
 800020c:	080084c8 	.word	0x080084c8

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	@ 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__aeabi_d2iz>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a54:	d215      	bcs.n	8000a82 <__aeabi_d2iz+0x36>
 8000a56:	d511      	bpl.n	8000a7c <__aeabi_d2iz+0x30>
 8000a58:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d912      	bls.n	8000a88 <__aeabi_d2iz+0x3c>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a72:	fa23 f002 	lsr.w	r0, r3, r2
 8000a76:	bf18      	it	ne
 8000a78:	4240      	negne	r0, r0
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a86:	d105      	bne.n	8000a94 <__aeabi_d2iz+0x48>
 8000a88:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a8c:	bf08      	it	eq
 8000a8e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a92:	4770      	bx	lr
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop

08000a9c <__aeabi_d2uiz>:
 8000a9c:	004a      	lsls	r2, r1, #1
 8000a9e:	d211      	bcs.n	8000ac4 <__aeabi_d2uiz+0x28>
 8000aa0:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000aa4:	d211      	bcs.n	8000aca <__aeabi_d2uiz+0x2e>
 8000aa6:	d50d      	bpl.n	8000ac4 <__aeabi_d2uiz+0x28>
 8000aa8:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000aac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab0:	d40e      	bmi.n	8000ad0 <__aeabi_d2uiz+0x34>
 8000ab2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000abe:	fa23 f002 	lsr.w	r0, r3, r2
 8000ac2:	4770      	bx	lr
 8000ac4:	f04f 0000 	mov.w	r0, #0
 8000ac8:	4770      	bx	lr
 8000aca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ace:	d102      	bne.n	8000ad6 <__aeabi_d2uiz+0x3a>
 8000ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ad4:	4770      	bx	lr
 8000ad6:	f04f 0000 	mov.w	r0, #0
 8000ada:	4770      	bx	lr

08000adc <__aeabi_d2f>:
 8000adc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ae0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ae4:	bf24      	itt	cs
 8000ae6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000aea:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000aee:	d90d      	bls.n	8000b0c <__aeabi_d2f+0x30>
 8000af0:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000af4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000af8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000afc:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b00:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b04:	bf08      	it	eq
 8000b06:	f020 0001 	biceq.w	r0, r0, #1
 8000b0a:	4770      	bx	lr
 8000b0c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b10:	d121      	bne.n	8000b56 <__aeabi_d2f+0x7a>
 8000b12:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b16:	bfbc      	itt	lt
 8000b18:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b1c:	4770      	bxlt	lr
 8000b1e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b22:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b26:	f1c2 0218 	rsb	r2, r2, #24
 8000b2a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b2e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b32:	fa20 f002 	lsr.w	r0, r0, r2
 8000b36:	bf18      	it	ne
 8000b38:	f040 0001 	orrne.w	r0, r0, #1
 8000b3c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b40:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b44:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b48:	ea40 000c 	orr.w	r0, r0, ip
 8000b4c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b50:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b54:	e7cc      	b.n	8000af0 <__aeabi_d2f+0x14>
 8000b56:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b5a:	d107      	bne.n	8000b6c <__aeabi_d2f+0x90>
 8000b5c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b60:	bf1e      	ittt	ne
 8000b62:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b66:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b6a:	4770      	bxne	lr
 8000b6c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b70:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b74:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <__aeabi_uldivmod>:
 8000b7c:	b953      	cbnz	r3, 8000b94 <__aeabi_uldivmod+0x18>
 8000b7e:	b94a      	cbnz	r2, 8000b94 <__aeabi_uldivmod+0x18>
 8000b80:	2900      	cmp	r1, #0
 8000b82:	bf08      	it	eq
 8000b84:	2800      	cmpeq	r0, #0
 8000b86:	bf1c      	itt	ne
 8000b88:	f04f 31ff 	movne.w	r1, #4294967295
 8000b8c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b90:	f000 b96a 	b.w	8000e68 <__aeabi_idiv0>
 8000b94:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b98:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b9c:	f000 f806 	bl	8000bac <__udivmoddi4>
 8000ba0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ba4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ba8:	b004      	add	sp, #16
 8000baa:	4770      	bx	lr

08000bac <__udivmoddi4>:
 8000bac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bb0:	9d08      	ldr	r5, [sp, #32]
 8000bb2:	460c      	mov	r4, r1
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d14e      	bne.n	8000c56 <__udivmoddi4+0xaa>
 8000bb8:	4694      	mov	ip, r2
 8000bba:	458c      	cmp	ip, r1
 8000bbc:	4686      	mov	lr, r0
 8000bbe:	fab2 f282 	clz	r2, r2
 8000bc2:	d962      	bls.n	8000c8a <__udivmoddi4+0xde>
 8000bc4:	b14a      	cbz	r2, 8000bda <__udivmoddi4+0x2e>
 8000bc6:	f1c2 0320 	rsb	r3, r2, #32
 8000bca:	4091      	lsls	r1, r2
 8000bcc:	fa20 f303 	lsr.w	r3, r0, r3
 8000bd0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bd4:	4319      	orrs	r1, r3
 8000bd6:	fa00 fe02 	lsl.w	lr, r0, r2
 8000bda:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bde:	fa1f f68c 	uxth.w	r6, ip
 8000be2:	fbb1 f4f7 	udiv	r4, r1, r7
 8000be6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bea:	fb07 1114 	mls	r1, r7, r4, r1
 8000bee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bf2:	fb04 f106 	mul.w	r1, r4, r6
 8000bf6:	4299      	cmp	r1, r3
 8000bf8:	d90a      	bls.n	8000c10 <__udivmoddi4+0x64>
 8000bfa:	eb1c 0303 	adds.w	r3, ip, r3
 8000bfe:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c02:	f080 8112 	bcs.w	8000e2a <__udivmoddi4+0x27e>
 8000c06:	4299      	cmp	r1, r3
 8000c08:	f240 810f 	bls.w	8000e2a <__udivmoddi4+0x27e>
 8000c0c:	3c02      	subs	r4, #2
 8000c0e:	4463      	add	r3, ip
 8000c10:	1a59      	subs	r1, r3, r1
 8000c12:	fa1f f38e 	uxth.w	r3, lr
 8000c16:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c1a:	fb07 1110 	mls	r1, r7, r0, r1
 8000c1e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c22:	fb00 f606 	mul.w	r6, r0, r6
 8000c26:	429e      	cmp	r6, r3
 8000c28:	d90a      	bls.n	8000c40 <__udivmoddi4+0x94>
 8000c2a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c32:	f080 80fc 	bcs.w	8000e2e <__udivmoddi4+0x282>
 8000c36:	429e      	cmp	r6, r3
 8000c38:	f240 80f9 	bls.w	8000e2e <__udivmoddi4+0x282>
 8000c3c:	4463      	add	r3, ip
 8000c3e:	3802      	subs	r0, #2
 8000c40:	1b9b      	subs	r3, r3, r6
 8000c42:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c46:	2100      	movs	r1, #0
 8000c48:	b11d      	cbz	r5, 8000c52 <__udivmoddi4+0xa6>
 8000c4a:	40d3      	lsrs	r3, r2
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	e9c5 3200 	strd	r3, r2, [r5]
 8000c52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c56:	428b      	cmp	r3, r1
 8000c58:	d905      	bls.n	8000c66 <__udivmoddi4+0xba>
 8000c5a:	b10d      	cbz	r5, 8000c60 <__udivmoddi4+0xb4>
 8000c5c:	e9c5 0100 	strd	r0, r1, [r5]
 8000c60:	2100      	movs	r1, #0
 8000c62:	4608      	mov	r0, r1
 8000c64:	e7f5      	b.n	8000c52 <__udivmoddi4+0xa6>
 8000c66:	fab3 f183 	clz	r1, r3
 8000c6a:	2900      	cmp	r1, #0
 8000c6c:	d146      	bne.n	8000cfc <__udivmoddi4+0x150>
 8000c6e:	42a3      	cmp	r3, r4
 8000c70:	d302      	bcc.n	8000c78 <__udivmoddi4+0xcc>
 8000c72:	4290      	cmp	r0, r2
 8000c74:	f0c0 80f0 	bcc.w	8000e58 <__udivmoddi4+0x2ac>
 8000c78:	1a86      	subs	r6, r0, r2
 8000c7a:	eb64 0303 	sbc.w	r3, r4, r3
 8000c7e:	2001      	movs	r0, #1
 8000c80:	2d00      	cmp	r5, #0
 8000c82:	d0e6      	beq.n	8000c52 <__udivmoddi4+0xa6>
 8000c84:	e9c5 6300 	strd	r6, r3, [r5]
 8000c88:	e7e3      	b.n	8000c52 <__udivmoddi4+0xa6>
 8000c8a:	2a00      	cmp	r2, #0
 8000c8c:	f040 8090 	bne.w	8000db0 <__udivmoddi4+0x204>
 8000c90:	eba1 040c 	sub.w	r4, r1, ip
 8000c94:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c98:	fa1f f78c 	uxth.w	r7, ip
 8000c9c:	2101      	movs	r1, #1
 8000c9e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000ca2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ca6:	fb08 4416 	mls	r4, r8, r6, r4
 8000caa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cae:	fb07 f006 	mul.w	r0, r7, r6
 8000cb2:	4298      	cmp	r0, r3
 8000cb4:	d908      	bls.n	8000cc8 <__udivmoddi4+0x11c>
 8000cb6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cba:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cbe:	d202      	bcs.n	8000cc6 <__udivmoddi4+0x11a>
 8000cc0:	4298      	cmp	r0, r3
 8000cc2:	f200 80cd 	bhi.w	8000e60 <__udivmoddi4+0x2b4>
 8000cc6:	4626      	mov	r6, r4
 8000cc8:	1a1c      	subs	r4, r3, r0
 8000cca:	fa1f f38e 	uxth.w	r3, lr
 8000cce:	fbb4 f0f8 	udiv	r0, r4, r8
 8000cd2:	fb08 4410 	mls	r4, r8, r0, r4
 8000cd6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cda:	fb00 f707 	mul.w	r7, r0, r7
 8000cde:	429f      	cmp	r7, r3
 8000ce0:	d908      	bls.n	8000cf4 <__udivmoddi4+0x148>
 8000ce2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ce6:	f100 34ff 	add.w	r4, r0, #4294967295
 8000cea:	d202      	bcs.n	8000cf2 <__udivmoddi4+0x146>
 8000cec:	429f      	cmp	r7, r3
 8000cee:	f200 80b0 	bhi.w	8000e52 <__udivmoddi4+0x2a6>
 8000cf2:	4620      	mov	r0, r4
 8000cf4:	1bdb      	subs	r3, r3, r7
 8000cf6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cfa:	e7a5      	b.n	8000c48 <__udivmoddi4+0x9c>
 8000cfc:	f1c1 0620 	rsb	r6, r1, #32
 8000d00:	408b      	lsls	r3, r1
 8000d02:	fa22 f706 	lsr.w	r7, r2, r6
 8000d06:	431f      	orrs	r7, r3
 8000d08:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d0c:	fa04 f301 	lsl.w	r3, r4, r1
 8000d10:	ea43 030c 	orr.w	r3, r3, ip
 8000d14:	40f4      	lsrs	r4, r6
 8000d16:	fa00 f801 	lsl.w	r8, r0, r1
 8000d1a:	0c38      	lsrs	r0, r7, #16
 8000d1c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d20:	fbb4 fef0 	udiv	lr, r4, r0
 8000d24:	fa1f fc87 	uxth.w	ip, r7
 8000d28:	fb00 441e 	mls	r4, r0, lr, r4
 8000d2c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d30:	fb0e f90c 	mul.w	r9, lr, ip
 8000d34:	45a1      	cmp	r9, r4
 8000d36:	fa02 f201 	lsl.w	r2, r2, r1
 8000d3a:	d90a      	bls.n	8000d52 <__udivmoddi4+0x1a6>
 8000d3c:	193c      	adds	r4, r7, r4
 8000d3e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d42:	f080 8084 	bcs.w	8000e4e <__udivmoddi4+0x2a2>
 8000d46:	45a1      	cmp	r9, r4
 8000d48:	f240 8081 	bls.w	8000e4e <__udivmoddi4+0x2a2>
 8000d4c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d50:	443c      	add	r4, r7
 8000d52:	eba4 0409 	sub.w	r4, r4, r9
 8000d56:	fa1f f983 	uxth.w	r9, r3
 8000d5a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d5e:	fb00 4413 	mls	r4, r0, r3, r4
 8000d62:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d66:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d6a:	45a4      	cmp	ip, r4
 8000d6c:	d907      	bls.n	8000d7e <__udivmoddi4+0x1d2>
 8000d6e:	193c      	adds	r4, r7, r4
 8000d70:	f103 30ff 	add.w	r0, r3, #4294967295
 8000d74:	d267      	bcs.n	8000e46 <__udivmoddi4+0x29a>
 8000d76:	45a4      	cmp	ip, r4
 8000d78:	d965      	bls.n	8000e46 <__udivmoddi4+0x29a>
 8000d7a:	3b02      	subs	r3, #2
 8000d7c:	443c      	add	r4, r7
 8000d7e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000d82:	fba0 9302 	umull	r9, r3, r0, r2
 8000d86:	eba4 040c 	sub.w	r4, r4, ip
 8000d8a:	429c      	cmp	r4, r3
 8000d8c:	46ce      	mov	lr, r9
 8000d8e:	469c      	mov	ip, r3
 8000d90:	d351      	bcc.n	8000e36 <__udivmoddi4+0x28a>
 8000d92:	d04e      	beq.n	8000e32 <__udivmoddi4+0x286>
 8000d94:	b155      	cbz	r5, 8000dac <__udivmoddi4+0x200>
 8000d96:	ebb8 030e 	subs.w	r3, r8, lr
 8000d9a:	eb64 040c 	sbc.w	r4, r4, ip
 8000d9e:	fa04 f606 	lsl.w	r6, r4, r6
 8000da2:	40cb      	lsrs	r3, r1
 8000da4:	431e      	orrs	r6, r3
 8000da6:	40cc      	lsrs	r4, r1
 8000da8:	e9c5 6400 	strd	r6, r4, [r5]
 8000dac:	2100      	movs	r1, #0
 8000dae:	e750      	b.n	8000c52 <__udivmoddi4+0xa6>
 8000db0:	f1c2 0320 	rsb	r3, r2, #32
 8000db4:	fa20 f103 	lsr.w	r1, r0, r3
 8000db8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dbc:	fa24 f303 	lsr.w	r3, r4, r3
 8000dc0:	4094      	lsls	r4, r2
 8000dc2:	430c      	orrs	r4, r1
 8000dc4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000dc8:	fa00 fe02 	lsl.w	lr, r0, r2
 8000dcc:	fa1f f78c 	uxth.w	r7, ip
 8000dd0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dd4:	fb08 3110 	mls	r1, r8, r0, r3
 8000dd8:	0c23      	lsrs	r3, r4, #16
 8000dda:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dde:	fb00 f107 	mul.w	r1, r0, r7
 8000de2:	4299      	cmp	r1, r3
 8000de4:	d908      	bls.n	8000df8 <__udivmoddi4+0x24c>
 8000de6:	eb1c 0303 	adds.w	r3, ip, r3
 8000dea:	f100 36ff 	add.w	r6, r0, #4294967295
 8000dee:	d22c      	bcs.n	8000e4a <__udivmoddi4+0x29e>
 8000df0:	4299      	cmp	r1, r3
 8000df2:	d92a      	bls.n	8000e4a <__udivmoddi4+0x29e>
 8000df4:	3802      	subs	r0, #2
 8000df6:	4463      	add	r3, ip
 8000df8:	1a5b      	subs	r3, r3, r1
 8000dfa:	b2a4      	uxth	r4, r4
 8000dfc:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e00:	fb08 3311 	mls	r3, r8, r1, r3
 8000e04:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e08:	fb01 f307 	mul.w	r3, r1, r7
 8000e0c:	42a3      	cmp	r3, r4
 8000e0e:	d908      	bls.n	8000e22 <__udivmoddi4+0x276>
 8000e10:	eb1c 0404 	adds.w	r4, ip, r4
 8000e14:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e18:	d213      	bcs.n	8000e42 <__udivmoddi4+0x296>
 8000e1a:	42a3      	cmp	r3, r4
 8000e1c:	d911      	bls.n	8000e42 <__udivmoddi4+0x296>
 8000e1e:	3902      	subs	r1, #2
 8000e20:	4464      	add	r4, ip
 8000e22:	1ae4      	subs	r4, r4, r3
 8000e24:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e28:	e739      	b.n	8000c9e <__udivmoddi4+0xf2>
 8000e2a:	4604      	mov	r4, r0
 8000e2c:	e6f0      	b.n	8000c10 <__udivmoddi4+0x64>
 8000e2e:	4608      	mov	r0, r1
 8000e30:	e706      	b.n	8000c40 <__udivmoddi4+0x94>
 8000e32:	45c8      	cmp	r8, r9
 8000e34:	d2ae      	bcs.n	8000d94 <__udivmoddi4+0x1e8>
 8000e36:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e3a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e3e:	3801      	subs	r0, #1
 8000e40:	e7a8      	b.n	8000d94 <__udivmoddi4+0x1e8>
 8000e42:	4631      	mov	r1, r6
 8000e44:	e7ed      	b.n	8000e22 <__udivmoddi4+0x276>
 8000e46:	4603      	mov	r3, r0
 8000e48:	e799      	b.n	8000d7e <__udivmoddi4+0x1d2>
 8000e4a:	4630      	mov	r0, r6
 8000e4c:	e7d4      	b.n	8000df8 <__udivmoddi4+0x24c>
 8000e4e:	46d6      	mov	lr, sl
 8000e50:	e77f      	b.n	8000d52 <__udivmoddi4+0x1a6>
 8000e52:	4463      	add	r3, ip
 8000e54:	3802      	subs	r0, #2
 8000e56:	e74d      	b.n	8000cf4 <__udivmoddi4+0x148>
 8000e58:	4606      	mov	r6, r0
 8000e5a:	4623      	mov	r3, r4
 8000e5c:	4608      	mov	r0, r1
 8000e5e:	e70f      	b.n	8000c80 <__udivmoddi4+0xd4>
 8000e60:	3e02      	subs	r6, #2
 8000e62:	4463      	add	r3, ip
 8000e64:	e730      	b.n	8000cc8 <__udivmoddi4+0x11c>
 8000e66:	bf00      	nop

08000e68 <__aeabi_idiv0>:
 8000e68:	4770      	bx	lr
 8000e6a:	bf00      	nop

08000e6c <Get_Mode>:
int current_speed = 0;
volatile int timer_count = 0;
float turning_time = 0;
int save[4] = {0, 0, 0, 0};

int Get_Mode(int MSB_state, int LSB_state) {
 8000e6c:	b480      	push	{r7}
 8000e6e:	b085      	sub	sp, #20
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
 8000e74:	6039      	str	r1, [r7, #0]
	static const int id_lookup[4] = {MANUAL_MODE, CIRCLE_MODE,  BACK_FORTH_MODE, SQUARE_MODE};
	int bin = ((MSB_state & 1) << 1) | (LSB_state & 1);
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	005b      	lsls	r3, r3, #1
 8000e7a:	f003 0202 	and.w	r2, r3, #2
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	f003 0301 	and.w	r3, r3, #1
 8000e84:	4313      	orrs	r3, r2
 8000e86:	60fb      	str	r3, [r7, #12]
	return id_lookup[bin];
 8000e88:	4a04      	ldr	r2, [pc, #16]	@ (8000e9c <Get_Mode+0x30>)
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8000e90:	4618      	mov	r0, r3
 8000e92:	3714      	adds	r7, #20
 8000e94:	46bd      	mov	sp, r7
 8000e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9a:	4770      	bx	lr
 8000e9c:	080088c8 	.word	0x080088c8

08000ea0 <Get_Mode_String>:

char* Get_Mode_String() {
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b082      	sub	sp, #8
 8000ea4:	af00      	add	r7, sp, #0
	const size_t buffer_size = 8;
 8000ea6:	2308      	movs	r3, #8
 8000ea8:	603b      	str	r3, [r7, #0]
	char* str = malloc(buffer_size);
 8000eaa:	6838      	ldr	r0, [r7, #0]
 8000eac:	f006 fb6e 	bl	800758c <malloc>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	607b      	str	r3, [r7, #4]
	switch(curr_mode) {
 8000eb4:	4b11      	ldr	r3, [pc, #68]	@ (8000efc <Get_Mode_String+0x5c>)
 8000eb6:	781b      	ldrb	r3, [r3, #0]
 8000eb8:	2b03      	cmp	r3, #3
 8000eba:	d817      	bhi.n	8000eec <Get_Mode_String+0x4c>
 8000ebc:	a201      	add	r2, pc, #4	@ (adr r2, 8000ec4 <Get_Mode_String+0x24>)
 8000ebe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ec2:	bf00      	nop
 8000ec4:	08000ed5 	.word	0x08000ed5
 8000ec8:	08000edb 	.word	0x08000edb
 8000ecc:	08000ee1 	.word	0x08000ee1
 8000ed0:	08000ee7 	.word	0x08000ee7
		case MANUAL_MODE:
			str = "MANUAL";
 8000ed4:	4b0a      	ldr	r3, [pc, #40]	@ (8000f00 <Get_Mode_String+0x60>)
 8000ed6:	607b      	str	r3, [r7, #4]
			break;
 8000ed8:	e00b      	b.n	8000ef2 <Get_Mode_String+0x52>
		case CIRCLE_MODE:
			str = "CIRCLE";
 8000eda:	4b0a      	ldr	r3, [pc, #40]	@ (8000f04 <Get_Mode_String+0x64>)
 8000edc:	607b      	str	r3, [r7, #4]
			break;
 8000ede:	e008      	b.n	8000ef2 <Get_Mode_String+0x52>
		case BACK_FORTH_MODE:
			str = "LINE";
 8000ee0:	4b09      	ldr	r3, [pc, #36]	@ (8000f08 <Get_Mode_String+0x68>)
 8000ee2:	607b      	str	r3, [r7, #4]
			break;
 8000ee4:	e005      	b.n	8000ef2 <Get_Mode_String+0x52>
		case SQUARE_MODE:
			str = "SQUARE";
 8000ee6:	4b09      	ldr	r3, [pc, #36]	@ (8000f0c <Get_Mode_String+0x6c>)
 8000ee8:	607b      	str	r3, [r7, #4]
			break;
 8000eea:	e002      	b.n	8000ef2 <Get_Mode_String+0x52>
		default:
			str = "ERROR";
 8000eec:	4b08      	ldr	r3, [pc, #32]	@ (8000f10 <Get_Mode_String+0x70>)
 8000eee:	607b      	str	r3, [r7, #4]
			break;
 8000ef0:	bf00      	nop
	}
	return str;
 8000ef2:	687b      	ldr	r3, [r7, #4]
}
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	3708      	adds	r7, #8
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	200000ae 	.word	0x200000ae
 8000f00:	080084e0 	.word	0x080084e0
 8000f04:	080084e8 	.word	0x080084e8
 8000f08:	080084f0 	.word	0x080084f0
 8000f0c:	080084f8 	.word	0x080084f8
 8000f10:	08008500 	.word	0x08008500
 8000f14:	00000000 	.word	0x00000000

08000f18 <Auto_Angle>:

void Auto_Angle(float value, TIM_HandleTypeDef* htim3) {
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b082      	sub	sp, #8
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	ed87 0a01 	vstr	s0, [r7, #4]
 8000f22:	6038      	str	r0, [r7, #0]
	// Initial setup
	if(timer_count == 0) {
 8000f24:	4b36      	ldr	r3, [pc, #216]	@ (8001000 <Auto_Angle+0xe8>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d146      	bne.n	8000fba <Auto_Angle+0xa2>
		// Calculate the duration for the turn
		turning_time = fabs(value) * TRACK_WIDTH;
 8000f2c:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f30:	eef0 7ae7 	vabs.f32	s15, s15
 8000f34:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 8001004 <Auto_Angle+0xec>
 8000f38:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f3c:	4b32      	ldr	r3, [pc, #200]	@ (8001008 <Auto_Angle+0xf0>)
 8000f3e:	edc3 7a00 	vstr	s15, [r3]

		// Determine direction of turn
		if (value > 0) {
 8000f42:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f46:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000f4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f4e:	dd18      	ble.n	8000f82 <Auto_Angle+0x6a>
			turning_time /= (360.0 * CLOCKWISE_FACTOR);
 8000f50:	4b2d      	ldr	r3, [pc, #180]	@ (8001008 <Auto_Angle+0xf0>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	4618      	mov	r0, r3
 8000f56:	f7ff fb0f 	bl	8000578 <__aeabi_f2d>
 8000f5a:	a327      	add	r3, pc, #156	@ (adr r3, 8000ff8 <Auto_Angle+0xe0>)
 8000f5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f60:	f7ff fc8c 	bl	800087c <__aeabi_ddiv>
 8000f64:	4602      	mov	r2, r0
 8000f66:	460b      	mov	r3, r1
 8000f68:	4610      	mov	r0, r2
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	f7ff fdb6 	bl	8000adc <__aeabi_d2f>
 8000f70:	4603      	mov	r3, r0
 8000f72:	4a25      	ldr	r2, [pc, #148]	@ (8001008 <Auto_Angle+0xf0>)
 8000f74:	6013      	str	r3, [r2, #0]
			Droite(BASE_SPEED, htim3);
 8000f76:	6839      	ldr	r1, [r7, #0]
 8000f78:	f44f 70e1 	mov.w	r0, #450	@ 0x1c2
 8000f7c:	f000 fb00 	bl	8001580 <Droite>
 8000f80:	e00e      	b.n	8000fa0 <Auto_Angle+0x88>
		}
		else {
			turning_time /= (360.0 * COUNTER_CLW_FACTOR);
 8000f82:	4b21      	ldr	r3, [pc, #132]	@ (8001008 <Auto_Angle+0xf0>)
 8000f84:	ed93 7a00 	vldr	s14, [r3]
 8000f88:	eddf 6a20 	vldr	s13, [pc, #128]	@ 800100c <Auto_Angle+0xf4>
 8000f8c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f90:	4b1d      	ldr	r3, [pc, #116]	@ (8001008 <Auto_Angle+0xf0>)
 8000f92:	edc3 7a00 	vstr	s15, [r3]
			Gauche(BASE_SPEED, htim3);
 8000f96:	6839      	ldr	r1, [r7, #0]
 8000f98:	f44f 70e1 	mov.w	r0, #450	@ 0x1c2
 8000f9c:	f000 fb28 	bl	80015f0 <Gauche>
		}

		// Convert turning time in µs
		turning_time *= 1e6;
 8000fa0:	4b19      	ldr	r3, [pc, #100]	@ (8001008 <Auto_Angle+0xf0>)
 8000fa2:	edd3 7a00 	vldr	s15, [r3]
 8000fa6:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 8001010 <Auto_Angle+0xf8>
 8000faa:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000fae:	4b16      	ldr	r3, [pc, #88]	@ (8001008 <Auto_Angle+0xf0>)
 8000fb0:	edc3 7a00 	vstr	s15, [r3]

		// Start timer
	    HAL_TIM_Base_Start_IT(&htim7);
 8000fb4:	4817      	ldr	r0, [pc, #92]	@ (8001014 <Auto_Angle+0xfc>)
 8000fb6:	f004 fac9 	bl	800554c <HAL_TIM_Base_Start_IT>
	}

    // Stop when finished
	if(timer_count > (int)turning_time) {
 8000fba:	4b13      	ldr	r3, [pc, #76]	@ (8001008 <Auto_Angle+0xf0>)
 8000fbc:	edd3 7a00 	vldr	s15, [r3]
 8000fc0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000fc4:	ee17 2a90 	vmov	r2, s15
 8000fc8:	4b0d      	ldr	r3, [pc, #52]	@ (8001000 <Auto_Angle+0xe8>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	429a      	cmp	r2, r3
 8000fce:	da0f      	bge.n	8000ff0 <Auto_Angle+0xd8>

		// Stop timer
		HAL_TIM_Base_Stop_IT(&htim7);
 8000fd0:	4810      	ldr	r0, [pc, #64]	@ (8001014 <Auto_Angle+0xfc>)
 8000fd2:	f004 fb2b 	bl	800562c <HAL_TIM_Base_Stop_IT>

		// Stop the motors
		Stop(htim3);
 8000fd6:	6838      	ldr	r0, [r7, #0]
 8000fd8:	f000 fb7a 	bl	80016d0 <Stop>

		// Reset temporal counter
		timer_count = 0;
 8000fdc:	4b08      	ldr	r3, [pc, #32]	@ (8001000 <Auto_Angle+0xe8>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	601a      	str	r2, [r3, #0]

		// Ready for next step
		curr_step++;
 8000fe2:	4b0d      	ldr	r3, [pc, #52]	@ (8001018 <Auto_Angle+0x100>)
 8000fe4:	781b      	ldrb	r3, [r3, #0]
 8000fe6:	3301      	adds	r3, #1
 8000fe8:	b2da      	uxtb	r2, r3
 8000fea:	4b0b      	ldr	r3, [pc, #44]	@ (8001018 <Auto_Angle+0x100>)
 8000fec:	701a      	strb	r2, [r3, #0]
	}

	return;
 8000fee:	bf00      	nop
 8000ff0:	bf00      	nop
}
 8000ff2:	3708      	adds	r7, #8
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	b020c49b 	.word	0xb020c49b
 8000ffc:	40d2cab2 	.word	0x40d2cab2
 8001000:	200000c4 	.word	0x200000c4
 8001004:	43880000 	.word	0x43880000
 8001008:	200000c8 	.word	0x200000c8
 800100c:	468ca000 	.word	0x468ca000
 8001010:	49742400 	.word	0x49742400
 8001014:	200002b0 	.word	0x200002b0
 8001018:	20000000 	.word	0x20000000
 800101c:	00000000 	.word	0x00000000

08001020 <Auto_Line>:

void Auto_Line(int dist, int min_speed, int max_speed, TIM_HandleTypeDef* htim3) {
 8001020:	b580      	push	{r7, lr}
 8001022:	b088      	sub	sp, #32
 8001024:	af00      	add	r7, sp, #0
 8001026:	60f8      	str	r0, [r7, #12]
 8001028:	60b9      	str	r1, [r7, #8]
 800102a:	607a      	str	r2, [r7, #4]
 800102c:	603b      	str	r3, [r7, #0]
    // Constants
    const float accel_fraction = 0.4; // 40% of total time for acceleration
 800102e:	4b68      	ldr	r3, [pc, #416]	@ (80011d0 <Auto_Line+0x1b0>)
 8001030:	61fb      	str	r3, [r7, #28]
    const float decel_fraction = 0.4; // 40% of total time for deceleration
 8001032:	4b67      	ldr	r3, [pc, #412]	@ (80011d0 <Auto_Line+0x1b0>)
 8001034:	61bb      	str	r3, [r7, #24]

    // Initial setup
    if (timer_count == 0) {
 8001036:	4b67      	ldr	r3, [pc, #412]	@ (80011d4 <Auto_Line+0x1b4>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	2b00      	cmp	r3, #0
 800103c:	d163      	bne.n	8001106 <Auto_Line+0xe6>
    	// Calculate total pulses required
    	int total_pulses = (int)(dist / TRACK_RESOLUTION);
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	2b00      	cmp	r3, #0
 8001042:	da00      	bge.n	8001046 <Auto_Line+0x26>
 8001044:	3303      	adds	r3, #3
 8001046:	109b      	asrs	r3, r3, #2
 8001048:	617b      	str	r3, [r7, #20]

        // Calculate total time
        turning_time = (min_speed + max_speed) / 2.0;
 800104a:	68ba      	ldr	r2, [r7, #8]
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	4413      	add	r3, r2
 8001050:	4618      	mov	r0, r3
 8001052:	f7ff fa7f 	bl	8000554 <__aeabi_i2d>
 8001056:	f04f 0200 	mov.w	r2, #0
 800105a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800105e:	f7ff fc0d 	bl	800087c <__aeabi_ddiv>
 8001062:	4602      	mov	r2, r0
 8001064:	460b      	mov	r3, r1
 8001066:	4610      	mov	r0, r2
 8001068:	4619      	mov	r1, r3
 800106a:	f7ff fd37 	bl	8000adc <__aeabi_d2f>
 800106e:	4603      	mov	r3, r0
 8001070:	4a59      	ldr	r2, [pc, #356]	@ (80011d8 <Auto_Line+0x1b8>)
 8001072:	6013      	str	r3, [r2, #0]
        total_time = (int)((total_pulses / turning_time) * 1e7);
 8001074:	697b      	ldr	r3, [r7, #20]
 8001076:	ee07 3a90 	vmov	s15, r3
 800107a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800107e:	4b56      	ldr	r3, [pc, #344]	@ (80011d8 <Auto_Line+0x1b8>)
 8001080:	edd3 7a00 	vldr	s15, [r3]
 8001084:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001088:	ee16 0a90 	vmov	r0, s13
 800108c:	f7ff fa74 	bl	8000578 <__aeabi_f2d>
 8001090:	a34d      	add	r3, pc, #308	@ (adr r3, 80011c8 <Auto_Line+0x1a8>)
 8001092:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001096:	f7ff fac7 	bl	8000628 <__aeabi_dmul>
 800109a:	4602      	mov	r2, r0
 800109c:	460b      	mov	r3, r1
 800109e:	4610      	mov	r0, r2
 80010a0:	4619      	mov	r1, r3
 80010a2:	f7ff fcd3 	bl	8000a4c <__aeabi_d2iz>
 80010a6:	4603      	mov	r3, r0
 80010a8:	4a4c      	ldr	r2, [pc, #304]	@ (80011dc <Auto_Line+0x1bc>)
 80010aa:	6013      	str	r3, [r2, #0]

        // Calculate time for each phase
        accel_time = (int)(total_time * accel_fraction);
 80010ac:	4b4b      	ldr	r3, [pc, #300]	@ (80011dc <Auto_Line+0x1bc>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	ee07 3a90 	vmov	s15, r3
 80010b4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80010b8:	edd7 7a07 	vldr	s15, [r7, #28]
 80010bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010c0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80010c4:	ee17 2a90 	vmov	r2, s15
 80010c8:	4b45      	ldr	r3, [pc, #276]	@ (80011e0 <Auto_Line+0x1c0>)
 80010ca:	601a      	str	r2, [r3, #0]
        decel_time = (int)(total_time * decel_fraction);
 80010cc:	4b43      	ldr	r3, [pc, #268]	@ (80011dc <Auto_Line+0x1bc>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	ee07 3a90 	vmov	s15, r3
 80010d4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80010d8:	edd7 7a06 	vldr	s15, [r7, #24]
 80010dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010e0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80010e4:	ee17 2a90 	vmov	r2, s15
 80010e8:	4b3e      	ldr	r3, [pc, #248]	@ (80011e4 <Auto_Line+0x1c4>)
 80010ea:	601a      	str	r2, [r3, #0]
        mid_time = total_time - accel_time - decel_time;
 80010ec:	4b3b      	ldr	r3, [pc, #236]	@ (80011dc <Auto_Line+0x1bc>)
 80010ee:	681a      	ldr	r2, [r3, #0]
 80010f0:	4b3b      	ldr	r3, [pc, #236]	@ (80011e0 <Auto_Line+0x1c0>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	1ad2      	subs	r2, r2, r3
 80010f6:	4b3b      	ldr	r3, [pc, #236]	@ (80011e4 <Auto_Line+0x1c4>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	1ad3      	subs	r3, r2, r3
 80010fc:	4a3a      	ldr	r2, [pc, #232]	@ (80011e8 <Auto_Line+0x1c8>)
 80010fe:	6013      	str	r3, [r2, #0]

        // Start timer
        HAL_TIM_Base_Start_IT(&htim7);
 8001100:	483a      	ldr	r0, [pc, #232]	@ (80011ec <Auto_Line+0x1cc>)
 8001102:	f004 fa23 	bl	800554c <HAL_TIM_Base_Start_IT>
    }

    // Acceleration phase
    if (timer_count < accel_time) {
 8001106:	4b33      	ldr	r3, [pc, #204]	@ (80011d4 <Auto_Line+0x1b4>)
 8001108:	681a      	ldr	r2, [r3, #0]
 800110a:	4b35      	ldr	r3, [pc, #212]	@ (80011e0 <Auto_Line+0x1c0>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	429a      	cmp	r2, r3
 8001110:	da0f      	bge.n	8001132 <Auto_Line+0x112>
        current_speed = min_speed + (max_speed - min_speed) * timer_count / accel_time;
 8001112:	687a      	ldr	r2, [r7, #4]
 8001114:	68bb      	ldr	r3, [r7, #8]
 8001116:	1ad3      	subs	r3, r2, r3
 8001118:	4a2e      	ldr	r2, [pc, #184]	@ (80011d4 <Auto_Line+0x1b4>)
 800111a:	6812      	ldr	r2, [r2, #0]
 800111c:	fb03 f202 	mul.w	r2, r3, r2
 8001120:	4b2f      	ldr	r3, [pc, #188]	@ (80011e0 <Auto_Line+0x1c0>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	fb92 f2f3 	sdiv	r2, r2, r3
 8001128:	68bb      	ldr	r3, [r7, #8]
 800112a:	4413      	add	r3, r2
 800112c:	4a30      	ldr	r2, [pc, #192]	@ (80011f0 <Auto_Line+0x1d0>)
 800112e:	6013      	str	r3, [r2, #0]
 8001130:	e03a      	b.n	80011a8 <Auto_Line+0x188>
    }

    // Constant speed phase
    else if (timer_count < accel_time + mid_time) {
 8001132:	4b2b      	ldr	r3, [pc, #172]	@ (80011e0 <Auto_Line+0x1c0>)
 8001134:	681a      	ldr	r2, [r3, #0]
 8001136:	4b2c      	ldr	r3, [pc, #176]	@ (80011e8 <Auto_Line+0x1c8>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	441a      	add	r2, r3
 800113c:	4b25      	ldr	r3, [pc, #148]	@ (80011d4 <Auto_Line+0x1b4>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	429a      	cmp	r2, r3
 8001142:	dd03      	ble.n	800114c <Auto_Line+0x12c>
        current_speed = max_speed;
 8001144:	4a2a      	ldr	r2, [pc, #168]	@ (80011f0 <Auto_Line+0x1d0>)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	6013      	str	r3, [r2, #0]
 800114a:	e02d      	b.n	80011a8 <Auto_Line+0x188>
    }

    // Deceleration phase
    else if (timer_count < total_time) {
 800114c:	4b21      	ldr	r3, [pc, #132]	@ (80011d4 <Auto_Line+0x1b4>)
 800114e:	681a      	ldr	r2, [r3, #0]
 8001150:	4b22      	ldr	r3, [pc, #136]	@ (80011dc <Auto_Line+0x1bc>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	429a      	cmp	r2, r3
 8001156:	da17      	bge.n	8001188 <Auto_Line+0x168>
        int decel_time_elapsed = timer_count - (accel_time + mid_time);
 8001158:	4b1e      	ldr	r3, [pc, #120]	@ (80011d4 <Auto_Line+0x1b4>)
 800115a:	681a      	ldr	r2, [r3, #0]
 800115c:	4b20      	ldr	r3, [pc, #128]	@ (80011e0 <Auto_Line+0x1c0>)
 800115e:	6819      	ldr	r1, [r3, #0]
 8001160:	4b21      	ldr	r3, [pc, #132]	@ (80011e8 <Auto_Line+0x1c8>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	440b      	add	r3, r1
 8001166:	1ad3      	subs	r3, r2, r3
 8001168:	613b      	str	r3, [r7, #16]
        current_speed = max_speed - (max_speed - min_speed) * decel_time_elapsed / decel_time;
 800116a:	687a      	ldr	r2, [r7, #4]
 800116c:	68bb      	ldr	r3, [r7, #8]
 800116e:	1ad3      	subs	r3, r2, r3
 8001170:	693a      	ldr	r2, [r7, #16]
 8001172:	fb03 f202 	mul.w	r2, r3, r2
 8001176:	4b1b      	ldr	r3, [pc, #108]	@ (80011e4 <Auto_Line+0x1c4>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	fb92 f3f3 	sdiv	r3, r2, r3
 800117e:	687a      	ldr	r2, [r7, #4]
 8001180:	1ad3      	subs	r3, r2, r3
 8001182:	4a1b      	ldr	r2, [pc, #108]	@ (80011f0 <Auto_Line+0x1d0>)
 8001184:	6013      	str	r3, [r2, #0]
 8001186:	e00f      	b.n	80011a8 <Auto_Line+0x188>
    }

    // Stop when finished
    else {
        // Stop timer
        HAL_TIM_Base_Stop_IT(&htim7);
 8001188:	4818      	ldr	r0, [pc, #96]	@ (80011ec <Auto_Line+0x1cc>)
 800118a:	f004 fa4f 	bl	800562c <HAL_TIM_Base_Stop_IT>

        // Stop the motors
        Stop(htim3);
 800118e:	6838      	ldr	r0, [r7, #0]
 8001190:	f000 fa9e 	bl	80016d0 <Stop>

        // Reset temporal counter
        timer_count = 0;
 8001194:	4b0f      	ldr	r3, [pc, #60]	@ (80011d4 <Auto_Line+0x1b4>)
 8001196:	2200      	movs	r2, #0
 8001198:	601a      	str	r2, [r3, #0]

        // Ready for next step
        curr_step++;
 800119a:	4b16      	ldr	r3, [pc, #88]	@ (80011f4 <Auto_Line+0x1d4>)
 800119c:	781b      	ldrb	r3, [r3, #0]
 800119e:	3301      	adds	r3, #1
 80011a0:	b2da      	uxtb	r2, r3
 80011a2:	4b14      	ldr	r3, [pc, #80]	@ (80011f4 <Auto_Line+0x1d4>)
 80011a4:	701a      	strb	r2, [r3, #0]

        // Exit
        return;
 80011a6:	e00a      	b.n	80011be <Auto_Line+0x19e>
    }

    // Adjust speed every iteration
    if(!pause)
 80011a8:	4b13      	ldr	r3, [pc, #76]	@ (80011f8 <Auto_Line+0x1d8>)
 80011aa:	781b      	ldrb	r3, [r3, #0]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d105      	bne.n	80011bc <Auto_Line+0x19c>
    	Avancer(current_speed, htim3);
 80011b0:	4b0f      	ldr	r3, [pc, #60]	@ (80011f0 <Auto_Line+0x1d0>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	6839      	ldr	r1, [r7, #0]
 80011b6:	4618      	mov	r0, r3
 80011b8:	f000 f9aa 	bl	8001510 <Avancer>

    return;
 80011bc:	bf00      	nop
}
 80011be:	3720      	adds	r7, #32
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	f3af 8000 	nop.w
 80011c8:	00000000 	.word	0x00000000
 80011cc:	416312d0 	.word	0x416312d0
 80011d0:	3ecccccd 	.word	0x3ecccccd
 80011d4:	200000c4 	.word	0x200000c4
 80011d8:	200000c8 	.word	0x200000c8
 80011dc:	200000b0 	.word	0x200000b0
 80011e0:	200000b4 	.word	0x200000b4
 80011e4:	200000b8 	.word	0x200000b8
 80011e8:	200000bc 	.word	0x200000bc
 80011ec:	200002b0 	.word	0x200002b0
 80011f0:	200000c0 	.word	0x200000c0
 80011f4:	20000000 	.word	0x20000000
 80011f8:	200000ac 	.word	0x200000ac
 80011fc:	00000000 	.word	0x00000000

08001200 <Auto_Circle>:


void Auto_Circle(TIM_HandleTypeDef* htim3) {
 8001200:	b580      	push	{r7, lr}
 8001202:	b084      	sub	sp, #16
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
	// Initial setup
	if(timer_count == 0) {
 8001208:	4b3b      	ldr	r3, [pc, #236]	@ (80012f8 <Auto_Circle+0xf8>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	2b00      	cmp	r3, #0
 800120e:	d14f      	bne.n	80012b0 <Auto_Circle+0xb0>

		// Calculate total steps required
		int total_steps = (int)((PI * DISTANCE) / TRACK_RESOLUTION);
 8001210:	f240 3311 	movw	r3, #785	@ 0x311
 8001214:	60fb      	str	r3, [r7, #12]

		// Calculate required time
		turning_time = (BASE_SPEED / total_steps) * 1e6;
 8001216:	f44f 72e1 	mov.w	r2, #450	@ 0x1c2
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	fb92 f3f3 	sdiv	r3, r2, r3
 8001220:	4618      	mov	r0, r3
 8001222:	f7ff f997 	bl	8000554 <__aeabi_i2d>
 8001226:	a330      	add	r3, pc, #192	@ (adr r3, 80012e8 <Auto_Circle+0xe8>)
 8001228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800122c:	f7ff f9fc 	bl	8000628 <__aeabi_dmul>
 8001230:	4602      	mov	r2, r0
 8001232:	460b      	mov	r3, r1
 8001234:	4610      	mov	r0, r2
 8001236:	4619      	mov	r1, r3
 8001238:	f7ff fc50 	bl	8000adc <__aeabi_d2f>
 800123c:	4603      	mov	r3, r0
 800123e:	4a2f      	ldr	r2, [pc, #188]	@ (80012fc <Auto_Circle+0xfc>)
 8001240:	6013      	str	r3, [r2, #0]

		// Calculate wheel inner wheel ratio
		float ratio = 0.9 * ((int)((2 * PI * ((DISTANCE * 0.5) - TRACK_WIDTH)) / TRACK_RESOLUTION) / total_steps);
 8001242:	f44f 72b3 	mov.w	r2, #358	@ 0x166
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	fb92 f3f3 	sdiv	r3, r2, r3
 800124c:	4618      	mov	r0, r3
 800124e:	f7ff f981 	bl	8000554 <__aeabi_i2d>
 8001252:	a327      	add	r3, pc, #156	@ (adr r3, 80012f0 <Auto_Circle+0xf0>)
 8001254:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001258:	f7ff f9e6 	bl	8000628 <__aeabi_dmul>
 800125c:	4602      	mov	r2, r0
 800125e:	460b      	mov	r3, r1
 8001260:	4610      	mov	r0, r2
 8001262:	4619      	mov	r1, r3
 8001264:	f7ff fc3a 	bl	8000adc <__aeabi_d2f>
 8001268:	4603      	mov	r3, r0
 800126a:	60bb      	str	r3, [r7, #8]

		// Constant speed
		htim3->Instance -> CCR2 = 0;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	2200      	movs	r2, #0
 8001272:	639a      	str	r2, [r3, #56]	@ 0x38
		htim3->Instance -> CCR4 = 0;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	2200      	movs	r2, #0
 800127a:	641a      	str	r2, [r3, #64]	@ 0x40
		htim3->Instance -> CCR1 = BASE_SPEED;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f44f 72e1 	mov.w	r2, #450	@ 0x1c2
 8001284:	635a      	str	r2, [r3, #52]	@ 0x34
		htim3->Instance -> CCR3 = htim3->Instance -> CCR1 * ratio;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800128c:	ee07 3a90 	vmov	s15, r3
 8001290:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001294:	edd7 7a02 	vldr	s15, [r7, #8]
 8001298:	ee67 7a27 	vmul.f32	s15, s14, s15
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80012a4:	ee17 2a90 	vmov	r2, s15
 80012a8:	63da      	str	r2, [r3, #60]	@ 0x3c
		HAL_TIM_Base_Start_IT(&htim7);
 80012aa:	4815      	ldr	r0, [pc, #84]	@ (8001300 <Auto_Circle+0x100>)
 80012ac:	f004 f94e 	bl	800554c <HAL_TIM_Base_Start_IT>
	}

	// Stop when finished
	if(timer_count > (int)turning_time) {
 80012b0:	4b12      	ldr	r3, [pc, #72]	@ (80012fc <Auto_Circle+0xfc>)
 80012b2:	edd3 7a00 	vldr	s15, [r3]
 80012b6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012ba:	ee17 2a90 	vmov	r2, s15
 80012be:	4b0e      	ldr	r3, [pc, #56]	@ (80012f8 <Auto_Circle+0xf8>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	429a      	cmp	r2, r3
 80012c4:	da09      	bge.n	80012da <Auto_Circle+0xda>

		// Stop timer
		HAL_TIM_Base_Stop_IT(&htim7);
 80012c6:	480e      	ldr	r0, [pc, #56]	@ (8001300 <Auto_Circle+0x100>)
 80012c8:	f004 f9b0 	bl	800562c <HAL_TIM_Base_Stop_IT>

		// Stop the motors
		Stop(htim3);
 80012cc:	6878      	ldr	r0, [r7, #4]
 80012ce:	f000 f9ff 	bl	80016d0 <Stop>

		// Reset temporal counter
		timer_count = 0;
 80012d2:	4b09      	ldr	r3, [pc, #36]	@ (80012f8 <Auto_Circle+0xf8>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	601a      	str	r2, [r3, #0]
	}

	return;
 80012d8:	bf00      	nop
 80012da:	bf00      	nop
}
 80012dc:	3710      	adds	r7, #16
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	f3af 8000 	nop.w
 80012e8:	00000000 	.word	0x00000000
 80012ec:	412e8480 	.word	0x412e8480
 80012f0:	cccccccd 	.word	0xcccccccd
 80012f4:	3feccccc 	.word	0x3feccccc
 80012f8:	200000c4 	.word	0x200000c4
 80012fc:	200000c8 	.word	0x200000c8
 8001300:	200002b0 	.word	0x200002b0

08001304 <Auto_Back_Forth>:

void Auto_Back_Forth(TIM_HandleTypeDef* htim3) {
 8001304:	b580      	push	{r7, lr}
 8001306:	b082      	sub	sp, #8
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
	// Manage ongoing step
	switch(curr_step) {
 800130c:	4b1d      	ldr	r3, [pc, #116]	@ (8001384 <Auto_Back_Forth+0x80>)
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	3b01      	subs	r3, #1
 8001312:	2b03      	cmp	r3, #3
 8001314:	d82a      	bhi.n	800136c <Auto_Back_Forth+0x68>
 8001316:	a201      	add	r2, pc, #4	@ (adr r2, 800131c <Auto_Back_Forth+0x18>)
 8001318:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800131c:	0800132d 	.word	0x0800132d
 8001320:	08001341 	.word	0x08001341
 8001324:	0800134d 	.word	0x0800134d
 8001328:	08001361 	.word	0x08001361
	case 1:
		// Step 1: Move forward 1 meter
		Auto_Line(DISTANCE, BASE_SPEED, BASE_SPEED, htim3);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	f44f 72e1 	mov.w	r2, #450	@ 0x1c2
 8001332:	f44f 71e1 	mov.w	r1, #450	@ 0x1c2
 8001336:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800133a:	f7ff fe71 	bl	8001020 <Auto_Line>
		break;
 800133e:	e01c      	b.n	800137a <Auto_Back_Forth+0x76>

	case 2:
		// Step 2: Turn 180 degrees
		Auto_Angle(180.0, htim3);
 8001340:	6878      	ldr	r0, [r7, #4]
 8001342:	ed9f 0a11 	vldr	s0, [pc, #68]	@ 8001388 <Auto_Back_Forth+0x84>
 8001346:	f7ff fde7 	bl	8000f18 <Auto_Angle>
		break;
 800134a:	e016      	b.n	800137a <Auto_Back_Forth+0x76>

	case 3:
		// Step 3: Move backward 1 meter
		Auto_Line(DISTANCE, BASE_SPEED, BASE_SPEED, htim3);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	f44f 72e1 	mov.w	r2, #450	@ 0x1c2
 8001352:	f44f 71e1 	mov.w	r1, #450	@ 0x1c2
 8001356:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800135a:	f7ff fe61 	bl	8001020 <Auto_Line>
		break;
 800135e:	e00c      	b.n	800137a <Auto_Back_Forth+0x76>

	case 4:
		// Step 4: Turn 180 degrees again to face the original direction
	    Auto_Angle(180.0, htim3);
 8001360:	6878      	ldr	r0, [r7, #4]
 8001362:	ed9f 0a09 	vldr	s0, [pc, #36]	@ 8001388 <Auto_Back_Forth+0x84>
 8001366:	f7ff fdd7 	bl	8000f18 <Auto_Angle>
		break;
 800136a:	e006      	b.n	800137a <Auto_Back_Forth+0x76>

	default:
		// End of sequence : reset current step and set to manual mode after drawing shape
		curr_step = 1;
 800136c:	4b05      	ldr	r3, [pc, #20]	@ (8001384 <Auto_Back_Forth+0x80>)
 800136e:	2201      	movs	r2, #1
 8001370:	701a      	strb	r2, [r3, #0]
		curr_mode = MANUAL_MODE;
 8001372:	4b06      	ldr	r3, [pc, #24]	@ (800138c <Auto_Back_Forth+0x88>)
 8001374:	2200      	movs	r2, #0
 8001376:	701a      	strb	r2, [r3, #0]
		break;
 8001378:	bf00      	nop
	}
	return;
 800137a:	bf00      	nop
}
 800137c:	3708      	adds	r7, #8
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	20000000 	.word	0x20000000
 8001388:	43340000 	.word	0x43340000
 800138c:	200000ae 	.word	0x200000ae

08001390 <Auto_Square>:

void Auto_Square(TIM_HandleTypeDef* htim3) {
 8001390:	b580      	push	{r7, lr}
 8001392:	b082      	sub	sp, #8
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
	// Manage ongoing step
	switch(curr_step) {
 8001398:	4b1b      	ldr	r3, [pc, #108]	@ (8001408 <Auto_Square+0x78>)
 800139a:	781b      	ldrb	r3, [r3, #0]
 800139c:	2b08      	cmp	r3, #8
 800139e:	bf8c      	ite	hi
 80013a0:	2201      	movhi	r2, #1
 80013a2:	2200      	movls	r2, #0
 80013a4:	b2d2      	uxtb	r2, r2
 80013a6:	2a00      	cmp	r2, #0
 80013a8:	d123      	bne.n	80013f2 <Auto_Square+0x62>
 80013aa:	2201      	movs	r2, #1
 80013ac:	fa02 f303 	lsl.w	r3, r2, r3
 80013b0:	f403 72aa 	and.w	r2, r3, #340	@ 0x154
 80013b4:	2a00      	cmp	r2, #0
 80013b6:	bf14      	ite	ne
 80013b8:	2201      	movne	r2, #1
 80013ba:	2200      	moveq	r2, #0
 80013bc:	b2d2      	uxtb	r2, r2
 80013be:	2a00      	cmp	r2, #0
 80013c0:	d111      	bne.n	80013e6 <Auto_Square+0x56>
 80013c2:	f003 03aa 	and.w	r3, r3, #170	@ 0xaa
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	bf14      	ite	ne
 80013ca:	2301      	movne	r3, #1
 80013cc:	2300      	moveq	r3, #0
 80013ce:	b2db      	uxtb	r3, r3
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d00e      	beq.n	80013f2 <Auto_Square+0x62>
	case 1:
	case 3:
	case 5:
	case 7:
		// Odd steps: Move forward
		Auto_Line(DISTANCE, (BASE_SPEED * 0.333), BASE_SPEED, htim3);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	f44f 72e1 	mov.w	r2, #450	@ 0x1c2
 80013da:	2195      	movs	r1, #149	@ 0x95
 80013dc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80013e0:	f7ff fe1e 	bl	8001020 <Auto_Line>
		break;
 80013e4:	e00c      	b.n	8001400 <Auto_Square+0x70>
	case 2:
	case 4:
	case 6:
	case 8:
		// Even steps: Turn 90 degrees
		Auto_Angle(90.0, htim3);
 80013e6:	6878      	ldr	r0, [r7, #4]
 80013e8:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 800140c <Auto_Square+0x7c>
 80013ec:	f7ff fd94 	bl	8000f18 <Auto_Angle>
		break;
 80013f0:	e006      	b.n	8001400 <Auto_Square+0x70>

	default:
		// End of sequence : reset current step and set to manual mode after drawing shape
		curr_step = 1;
 80013f2:	4b05      	ldr	r3, [pc, #20]	@ (8001408 <Auto_Square+0x78>)
 80013f4:	2201      	movs	r2, #1
 80013f6:	701a      	strb	r2, [r3, #0]
		curr_mode = MANUAL_MODE;
 80013f8:	4b05      	ldr	r3, [pc, #20]	@ (8001410 <Auto_Square+0x80>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	701a      	strb	r2, [r3, #0]
		break;
 80013fe:	bf00      	nop
	}
	return;
 8001400:	bf00      	nop
}
 8001402:	3708      	adds	r7, #8
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}
 8001408:	20000000 	.word	0x20000000
 800140c:	42b40000 	.word	0x42b40000
 8001410:	200000ae 	.word	0x200000ae

08001414 <Pause>:

void Pause(TIM_HandleTypeDef* htim3) {
 8001414:	b580      	push	{r7, lr}
 8001416:	b082      	sub	sp, #8
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
	pause = pause ^ 1;
 800141c:	4b1a      	ldr	r3, [pc, #104]	@ (8001488 <Pause+0x74>)
 800141e:	781b      	ldrb	r3, [r3, #0]
 8001420:	f083 0301 	eor.w	r3, r3, #1
 8001424:	b2da      	uxtb	r2, r3
 8001426:	4b18      	ldr	r3, [pc, #96]	@ (8001488 <Pause+0x74>)
 8001428:	701a      	strb	r2, [r3, #0]

	// Save currrent CCR values
	save[0] = htim3->Instance -> CCR1;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001430:	461a      	mov	r2, r3
 8001432:	4b16      	ldr	r3, [pc, #88]	@ (800148c <Pause+0x78>)
 8001434:	601a      	str	r2, [r3, #0]
	save[1] = htim3->Instance -> CCR2;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800143c:	461a      	mov	r2, r3
 800143e:	4b13      	ldr	r3, [pc, #76]	@ (800148c <Pause+0x78>)
 8001440:	605a      	str	r2, [r3, #4]
	save[2] = htim3->Instance -> CCR3;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001448:	461a      	mov	r2, r3
 800144a:	4b10      	ldr	r3, [pc, #64]	@ (800148c <Pause+0x78>)
 800144c:	609a      	str	r2, [r3, #8]
	save[3] = htim3->Instance -> CCR4;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001454:	461a      	mov	r2, r3
 8001456:	4b0d      	ldr	r3, [pc, #52]	@ (800148c <Pause+0x78>)
 8001458:	60da      	str	r2, [r3, #12]

	// Stop
	HAL_TIM_PWM_Stop(htim3, TIM_CHANNEL_1);
 800145a:	2100      	movs	r1, #0
 800145c:	6878      	ldr	r0, [r7, #4]
 800145e:	f004 fa35 	bl	80058cc <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(htim3, TIM_CHANNEL_2);
 8001462:	2104      	movs	r1, #4
 8001464:	6878      	ldr	r0, [r7, #4]
 8001466:	f004 fa31 	bl	80058cc <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(htim3, TIM_CHANNEL_3);
 800146a:	2108      	movs	r1, #8
 800146c:	6878      	ldr	r0, [r7, #4]
 800146e:	f004 fa2d 	bl	80058cc <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(htim3, TIM_CHANNEL_4);
 8001472:	210c      	movs	r1, #12
 8001474:	6878      	ldr	r0, [r7, #4]
 8001476:	f004 fa29 	bl	80058cc <HAL_TIM_PWM_Stop>
	HAL_TIM_Base_Stop_IT(&htim7);
 800147a:	4805      	ldr	r0, [pc, #20]	@ (8001490 <Pause+0x7c>)
 800147c:	f004 f8d6 	bl	800562c <HAL_TIM_Base_Stop_IT>

	return;
 8001480:	bf00      	nop
}
 8001482:	3708      	adds	r7, #8
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}
 8001488:	200000ac 	.word	0x200000ac
 800148c:	200000cc 	.word	0x200000cc
 8001490:	200002b0 	.word	0x200002b0

08001494 <Resume>:

void Resume(TIM_HandleTypeDef* htim3) {
 8001494:	b580      	push	{r7, lr}
 8001496:	b082      	sub	sp, #8
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
	pause = pause ^ 1;
 800149c:	4b18      	ldr	r3, [pc, #96]	@ (8001500 <Resume+0x6c>)
 800149e:	781b      	ldrb	r3, [r3, #0]
 80014a0:	f083 0301 	eor.w	r3, r3, #1
 80014a4:	b2da      	uxtb	r2, r3
 80014a6:	4b16      	ldr	r3, [pc, #88]	@ (8001500 <Resume+0x6c>)
 80014a8:	701a      	strb	r2, [r3, #0]

	// Restore saved CCR values
	HAL_TIM_PWM_Start(htim3, TIM_CHANNEL_1);
 80014aa:	2100      	movs	r1, #0
 80014ac:	6878      	ldr	r0, [r7, #4]
 80014ae:	f004 f945 	bl	800573c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(htim3, TIM_CHANNEL_2);
 80014b2:	2104      	movs	r1, #4
 80014b4:	6878      	ldr	r0, [r7, #4]
 80014b6:	f004 f941 	bl	800573c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(htim3, TIM_CHANNEL_3);
 80014ba:	2108      	movs	r1, #8
 80014bc:	6878      	ldr	r0, [r7, #4]
 80014be:	f004 f93d 	bl	800573c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(htim3, TIM_CHANNEL_4);
 80014c2:	210c      	movs	r1, #12
 80014c4:	6878      	ldr	r0, [r7, #4]
 80014c6:	f004 f939 	bl	800573c <HAL_TIM_PWM_Start>
	htim3->Instance -> CCR1 = save[0];
 80014ca:	4b0e      	ldr	r3, [pc, #56]	@ (8001504 <Resume+0x70>)
 80014cc:	681a      	ldr	r2, [r3, #0]
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	635a      	str	r2, [r3, #52]	@ 0x34
	htim3->Instance -> CCR2 = save[1];
 80014d4:	4b0b      	ldr	r3, [pc, #44]	@ (8001504 <Resume+0x70>)
 80014d6:	685a      	ldr	r2, [r3, #4]
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	639a      	str	r2, [r3, #56]	@ 0x38
	htim3->Instance -> CCR3 = save[2];
 80014de:	4b09      	ldr	r3, [pc, #36]	@ (8001504 <Resume+0x70>)
 80014e0:	689a      	ldr	r2, [r3, #8]
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	63da      	str	r2, [r3, #60]	@ 0x3c
	htim3->Instance -> CCR4 = save[3];
 80014e8:	4b06      	ldr	r3, [pc, #24]	@ (8001504 <Resume+0x70>)
 80014ea:	68da      	ldr	r2, [r3, #12]
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	641a      	str	r2, [r3, #64]	@ 0x40
	HAL_TIM_Base_Start_IT(&htim7);
 80014f2:	4805      	ldr	r0, [pc, #20]	@ (8001508 <Resume+0x74>)
 80014f4:	f004 f82a 	bl	800554c <HAL_TIM_Base_Start_IT>

	return;
 80014f8:	bf00      	nop
}
 80014fa:	3708      	adds	r7, #8
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	200000ac 	.word	0x200000ac
 8001504:	200000cc 	.word	0x200000cc
 8001508:	200002b0 	.word	0x200002b0
 800150c:	00000000 	.word	0x00000000

08001510 <Avancer>:
 *      Author: sebas
 */

#include "gestion_moteurs.h"

void Avancer(int Pulse, TIM_HandleTypeDef* htim3){
 8001510:	b590      	push	{r4, r7, lr}
 8001512:	b083      	sub	sp, #12
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
 8001518:	6039      	str	r1, [r7, #0]

	htim3->Instance -> CCR2 = 0;
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	2200      	movs	r2, #0
 8001520:	639a      	str	r2, [r3, #56]	@ 0x38
	htim3->Instance -> CCR4 = 0;
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	2200      	movs	r2, #0
 8001528:	641a      	str	r2, [r3, #64]	@ 0x40

	if(Pulse > 499){
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001530:	db02      	blt.n	8001538 <Avancer+0x28>
		Pulse = 499;
 8001532:	f240 13f3 	movw	r3, #499	@ 0x1f3
 8001536:	607b      	str	r3, [r7, #4]
	}

	htim3->Instance -> CCR1 = Pulse;
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	687a      	ldr	r2, [r7, #4]
 800153e:	635a      	str	r2, [r3, #52]	@ 0x34
	htim3->Instance -> CCR3 = htim3->Instance -> CCR1 * 0.9;
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001546:	4618      	mov	r0, r3
 8001548:	f7fe fff4 	bl	8000534 <__aeabi_ui2d>
 800154c:	a30a      	add	r3, pc, #40	@ (adr r3, 8001578 <Avancer+0x68>)
 800154e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001552:	f7ff f869 	bl	8000628 <__aeabi_dmul>
 8001556:	4602      	mov	r2, r0
 8001558:	460b      	mov	r3, r1
 800155a:	4610      	mov	r0, r2
 800155c:	4619      	mov	r1, r3
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	681c      	ldr	r4, [r3, #0]
 8001562:	f7ff fa9b 	bl	8000a9c <__aeabi_d2uiz>
 8001566:	4603      	mov	r3, r0
 8001568:	63e3      	str	r3, [r4, #60]	@ 0x3c

	return;
 800156a:	bf00      	nop
}
 800156c:	370c      	adds	r7, #12
 800156e:	46bd      	mov	sp, r7
 8001570:	bd90      	pop	{r4, r7, pc}
 8001572:	bf00      	nop
 8001574:	f3af 8000 	nop.w
 8001578:	cccccccd 	.word	0xcccccccd
 800157c:	3feccccc 	.word	0x3feccccc

08001580 <Droite>:

void Droite(int Pulse, TIM_HandleTypeDef* htim3){
 8001580:	b590      	push	{r4, r7, lr}
 8001582:	b083      	sub	sp, #12
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
 8001588:	6039      	str	r1, [r7, #0]

	htim3->Instance -> CCR2 = 0;
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	2200      	movs	r2, #0
 8001590:	639a      	str	r2, [r3, #56]	@ 0x38
	htim3->Instance -> CCR3 = 0;
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	2200      	movs	r2, #0
 8001598:	63da      	str	r2, [r3, #60]	@ 0x3c

	if(Pulse > 499){
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80015a0:	db02      	blt.n	80015a8 <Droite+0x28>
		Pulse = 499;
 80015a2:	f240 13f3 	movw	r3, #499	@ 0x1f3
 80015a6:	607b      	str	r3, [r7, #4]
	}
	htim3->Instance -> CCR1 = Pulse;
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	687a      	ldr	r2, [r7, #4]
 80015ae:	635a      	str	r2, [r3, #52]	@ 0x34
	htim3->Instance -> CCR4 = htim3->Instance -> CCR1 * 0.9;
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80015b6:	4618      	mov	r0, r3
 80015b8:	f7fe ffbc 	bl	8000534 <__aeabi_ui2d>
 80015bc:	a30a      	add	r3, pc, #40	@ (adr r3, 80015e8 <Droite+0x68>)
 80015be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015c2:	f7ff f831 	bl	8000628 <__aeabi_dmul>
 80015c6:	4602      	mov	r2, r0
 80015c8:	460b      	mov	r3, r1
 80015ca:	4610      	mov	r0, r2
 80015cc:	4619      	mov	r1, r3
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	681c      	ldr	r4, [r3, #0]
 80015d2:	f7ff fa63 	bl	8000a9c <__aeabi_d2uiz>
 80015d6:	4603      	mov	r3, r0
 80015d8:	6423      	str	r3, [r4, #64]	@ 0x40
}
 80015da:	bf00      	nop
 80015dc:	370c      	adds	r7, #12
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd90      	pop	{r4, r7, pc}
 80015e2:	bf00      	nop
 80015e4:	f3af 8000 	nop.w
 80015e8:	cccccccd 	.word	0xcccccccd
 80015ec:	3feccccc 	.word	0x3feccccc

080015f0 <Gauche>:

void Gauche(int Pulse, TIM_HandleTypeDef* htim3){
 80015f0:	b590      	push	{r4, r7, lr}
 80015f2:	b083      	sub	sp, #12
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
 80015f8:	6039      	str	r1, [r7, #0]

	htim3->Instance -> CCR1 = 0;
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	2200      	movs	r2, #0
 8001600:	635a      	str	r2, [r3, #52]	@ 0x34
	htim3->Instance -> CCR4 = 0;
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	2200      	movs	r2, #0
 8001608:	641a      	str	r2, [r3, #64]	@ 0x40

	if(Pulse > 499){
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001610:	db02      	blt.n	8001618 <Gauche+0x28>
		Pulse = 499;
 8001612:	f240 13f3 	movw	r3, #499	@ 0x1f3
 8001616:	607b      	str	r3, [r7, #4]
	}
	htim3->Instance -> CCR2 = Pulse;
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	687a      	ldr	r2, [r7, #4]
 800161e:	639a      	str	r2, [r3, #56]	@ 0x38
	htim3->Instance -> CCR3 = htim3->Instance -> CCR2 * 0.9;
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001626:	4618      	mov	r0, r3
 8001628:	f7fe ff84 	bl	8000534 <__aeabi_ui2d>
 800162c:	a30a      	add	r3, pc, #40	@ (adr r3, 8001658 <Gauche+0x68>)
 800162e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001632:	f7fe fff9 	bl	8000628 <__aeabi_dmul>
 8001636:	4602      	mov	r2, r0
 8001638:	460b      	mov	r3, r1
 800163a:	4610      	mov	r0, r2
 800163c:	4619      	mov	r1, r3
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	681c      	ldr	r4, [r3, #0]
 8001642:	f7ff fa2b 	bl	8000a9c <__aeabi_d2uiz>
 8001646:	4603      	mov	r3, r0
 8001648:	63e3      	str	r3, [r4, #60]	@ 0x3c
}
 800164a:	bf00      	nop
 800164c:	370c      	adds	r7, #12
 800164e:	46bd      	mov	sp, r7
 8001650:	bd90      	pop	{r4, r7, pc}
 8001652:	bf00      	nop
 8001654:	f3af 8000 	nop.w
 8001658:	cccccccd 	.word	0xcccccccd
 800165c:	3feccccc 	.word	0x3feccccc

08001660 <Reculer>:

void Reculer(int Pulse,TIM_HandleTypeDef* htim3){
 8001660:	b590      	push	{r4, r7, lr}
 8001662:	b083      	sub	sp, #12
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
 8001668:	6039      	str	r1, [r7, #0]

	htim3->Instance -> CCR1 = 0;
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	2200      	movs	r2, #0
 8001670:	635a      	str	r2, [r3, #52]	@ 0x34
	htim3->Instance -> CCR3 = 0;
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	2200      	movs	r2, #0
 8001678:	63da      	str	r2, [r3, #60]	@ 0x3c

	if(Pulse > 499){
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001680:	db02      	blt.n	8001688 <Reculer+0x28>
		Pulse = 499;
 8001682:	f240 13f3 	movw	r3, #499	@ 0x1f3
 8001686:	607b      	str	r3, [r7, #4]
	}

	htim3->Instance -> CCR4 = Pulse;
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	687a      	ldr	r2, [r7, #4]
 800168e:	641a      	str	r2, [r3, #64]	@ 0x40
	htim3->Instance -> CCR2 = htim3->Instance -> CCR4 * 0.95;
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001696:	4618      	mov	r0, r3
 8001698:	f7fe ff4c 	bl	8000534 <__aeabi_ui2d>
 800169c:	a30a      	add	r3, pc, #40	@ (adr r3, 80016c8 <Reculer+0x68>)
 800169e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016a2:	f7fe ffc1 	bl	8000628 <__aeabi_dmul>
 80016a6:	4602      	mov	r2, r0
 80016a8:	460b      	mov	r3, r1
 80016aa:	4610      	mov	r0, r2
 80016ac:	4619      	mov	r1, r3
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	681c      	ldr	r4, [r3, #0]
 80016b2:	f7ff f9f3 	bl	8000a9c <__aeabi_d2uiz>
 80016b6:	4603      	mov	r3, r0
 80016b8:	63a3      	str	r3, [r4, #56]	@ 0x38

	return;
 80016ba:	bf00      	nop
}
 80016bc:	370c      	adds	r7, #12
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd90      	pop	{r4, r7, pc}
 80016c2:	bf00      	nop
 80016c4:	f3af 8000 	nop.w
 80016c8:	66666666 	.word	0x66666666
 80016cc:	3fee6666 	.word	0x3fee6666

080016d0 <Stop>:
void Stop(TIM_HandleTypeDef* htim3){
 80016d0:	b480      	push	{r7}
 80016d2:	b083      	sub	sp, #12
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
	htim3->Instance -> CCR1 = 0;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	2200      	movs	r2, #0
 80016de:	635a      	str	r2, [r3, #52]	@ 0x34
	htim3->Instance -> CCR2 = 0;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	2200      	movs	r2, #0
 80016e6:	639a      	str	r2, [r3, #56]	@ 0x38
	htim3->Instance -> CCR3 = 0;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	2200      	movs	r2, #0
 80016ee:	63da      	str	r2, [r3, #60]	@ 0x3c
	htim3->Instance -> CCR4 = 0;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	2200      	movs	r2, #0
 80016f6:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80016f8:	bf00      	nop
 80016fa:	370c      	adds	r7, #12
 80016fc:	46bd      	mov	sp, r7
 80016fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001702:	4770      	bx	lr

08001704 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b08a      	sub	sp, #40	@ 0x28
 8001708:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800170a:	f107 0314 	add.w	r3, r7, #20
 800170e:	2200      	movs	r2, #0
 8001710:	601a      	str	r2, [r3, #0]
 8001712:	605a      	str	r2, [r3, #4]
 8001714:	609a      	str	r2, [r3, #8]
 8001716:	60da      	str	r2, [r3, #12]
 8001718:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800171a:	2300      	movs	r3, #0
 800171c:	613b      	str	r3, [r7, #16]
 800171e:	4b4d      	ldr	r3, [pc, #308]	@ (8001854 <MX_GPIO_Init+0x150>)
 8001720:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001722:	4a4c      	ldr	r2, [pc, #304]	@ (8001854 <MX_GPIO_Init+0x150>)
 8001724:	f043 0304 	orr.w	r3, r3, #4
 8001728:	6313      	str	r3, [r2, #48]	@ 0x30
 800172a:	4b4a      	ldr	r3, [pc, #296]	@ (8001854 <MX_GPIO_Init+0x150>)
 800172c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800172e:	f003 0304 	and.w	r3, r3, #4
 8001732:	613b      	str	r3, [r7, #16]
 8001734:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001736:	2300      	movs	r3, #0
 8001738:	60fb      	str	r3, [r7, #12]
 800173a:	4b46      	ldr	r3, [pc, #280]	@ (8001854 <MX_GPIO_Init+0x150>)
 800173c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800173e:	4a45      	ldr	r2, [pc, #276]	@ (8001854 <MX_GPIO_Init+0x150>)
 8001740:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001744:	6313      	str	r3, [r2, #48]	@ 0x30
 8001746:	4b43      	ldr	r3, [pc, #268]	@ (8001854 <MX_GPIO_Init+0x150>)
 8001748:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800174a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800174e:	60fb      	str	r3, [r7, #12]
 8001750:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001752:	2300      	movs	r3, #0
 8001754:	60bb      	str	r3, [r7, #8]
 8001756:	4b3f      	ldr	r3, [pc, #252]	@ (8001854 <MX_GPIO_Init+0x150>)
 8001758:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800175a:	4a3e      	ldr	r2, [pc, #248]	@ (8001854 <MX_GPIO_Init+0x150>)
 800175c:	f043 0301 	orr.w	r3, r3, #1
 8001760:	6313      	str	r3, [r2, #48]	@ 0x30
 8001762:	4b3c      	ldr	r3, [pc, #240]	@ (8001854 <MX_GPIO_Init+0x150>)
 8001764:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001766:	f003 0301 	and.w	r3, r3, #1
 800176a:	60bb      	str	r3, [r7, #8]
 800176c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800176e:	2300      	movs	r3, #0
 8001770:	607b      	str	r3, [r7, #4]
 8001772:	4b38      	ldr	r3, [pc, #224]	@ (8001854 <MX_GPIO_Init+0x150>)
 8001774:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001776:	4a37      	ldr	r2, [pc, #220]	@ (8001854 <MX_GPIO_Init+0x150>)
 8001778:	f043 0302 	orr.w	r3, r3, #2
 800177c:	6313      	str	r3, [r2, #48]	@ 0x30
 800177e:	4b35      	ldr	r3, [pc, #212]	@ (8001854 <MX_GPIO_Init+0x150>)
 8001780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001782:	f003 0302 	and.w	r3, r3, #2
 8001786:	607b      	str	r3, [r7, #4]
 8001788:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800178a:	2200      	movs	r2, #0
 800178c:	2120      	movs	r1, #32
 800178e:	4832      	ldr	r0, [pc, #200]	@ (8001858 <MX_GPIO_Init+0x154>)
 8001790:	f001 fdce 	bl	8003330 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI_RST_Pin|SPI_CS_Pin|SPI_DC_Pin, GPIO_PIN_RESET);
 8001794:	2200      	movs	r2, #0
 8001796:	f44f 4160 	mov.w	r1, #57344	@ 0xe000
 800179a:	4830      	ldr	r0, [pc, #192]	@ (800185c <MX_GPIO_Init+0x158>)
 800179c:	f001 fdc8 	bl	8003330 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Blue_Button_Pin;
 80017a0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80017a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80017a6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80017aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ac:	2300      	movs	r3, #0
 80017ae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Blue_Button_GPIO_Port, &GPIO_InitStruct);
 80017b0:	f107 0314 	add.w	r3, r7, #20
 80017b4:	4619      	mov	r1, r3
 80017b6:	482a      	ldr	r0, [pc, #168]	@ (8001860 <MX_GPIO_Init+0x15c>)
 80017b8:	f001 fc0e 	bl	8002fd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = Dipswitch_MSB_Pin|Dipswitch_LSB_Pin|Encodeur_D_B_Pin;
 80017bc:	238c      	movs	r3, #140	@ 0x8c
 80017be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017c0:	2300      	movs	r3, #0
 80017c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80017c4:	2302      	movs	r3, #2
 80017c6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017c8:	f107 0314 	add.w	r3, r7, #20
 80017cc:	4619      	mov	r1, r3
 80017ce:	4824      	ldr	r0, [pc, #144]	@ (8001860 <MX_GPIO_Init+0x15c>)
 80017d0:	f001 fc02 	bl	8002fd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80017d4:	2320      	movs	r3, #32
 80017d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017d8:	2301      	movs	r3, #1
 80017da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017dc:	2300      	movs	r3, #0
 80017de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017e0:	2300      	movs	r3, #0
 80017e2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80017e4:	f107 0314 	add.w	r3, r7, #20
 80017e8:	4619      	mov	r1, r3
 80017ea:	481b      	ldr	r0, [pc, #108]	@ (8001858 <MX_GPIO_Init+0x154>)
 80017ec:	f001 fbf4 	bl	8002fd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = SPI_RST_Pin|SPI_CS_Pin|SPI_DC_Pin;
 80017f0:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 80017f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017f6:	2301      	movs	r3, #1
 80017f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017fa:	2300      	movs	r3, #0
 80017fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017fe:	2300      	movs	r3, #0
 8001800:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001802:	f107 0314 	add.w	r3, r7, #20
 8001806:	4619      	mov	r1, r3
 8001808:	4814      	ldr	r0, [pc, #80]	@ (800185c <MX_GPIO_Init+0x158>)
 800180a:	f001 fbe5 	bl	8002fd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = Encodeur_G_A_Pin|Encodeur_D_A_Pin;
 800180e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001812:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001814:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001818:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800181a:	2302      	movs	r3, #2
 800181c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800181e:	f107 0314 	add.w	r3, r7, #20
 8001822:	4619      	mov	r1, r3
 8001824:	480c      	ldr	r0, [pc, #48]	@ (8001858 <MX_GPIO_Init+0x154>)
 8001826:	f001 fbd7 	bl	8002fd8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800182a:	2200      	movs	r2, #0
 800182c:	2100      	movs	r1, #0
 800182e:	2017      	movs	r0, #23
 8001830:	f001 fb9b 	bl	8002f6a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001834:	2017      	movs	r0, #23
 8001836:	f001 fbb4 	bl	8002fa2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800183a:	2200      	movs	r2, #0
 800183c:	2100      	movs	r1, #0
 800183e:	2028      	movs	r0, #40	@ 0x28
 8001840:	f001 fb93 	bl	8002f6a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001844:	2028      	movs	r0, #40	@ 0x28
 8001846:	f001 fbac 	bl	8002fa2 <HAL_NVIC_EnableIRQ>

}
 800184a:	bf00      	nop
 800184c:	3728      	adds	r7, #40	@ 0x28
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	40023800 	.word	0x40023800
 8001858:	40020000 	.word	0x40020000
 800185c:	40020400 	.word	0x40020400
 8001860:	40020800 	.word	0x40020800

08001864 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001868:	4b12      	ldr	r3, [pc, #72]	@ (80018b4 <MX_I2C1_Init+0x50>)
 800186a:	4a13      	ldr	r2, [pc, #76]	@ (80018b8 <MX_I2C1_Init+0x54>)
 800186c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800186e:	4b11      	ldr	r3, [pc, #68]	@ (80018b4 <MX_I2C1_Init+0x50>)
 8001870:	4a12      	ldr	r2, [pc, #72]	@ (80018bc <MX_I2C1_Init+0x58>)
 8001872:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001874:	4b0f      	ldr	r3, [pc, #60]	@ (80018b4 <MX_I2C1_Init+0x50>)
 8001876:	2200      	movs	r2, #0
 8001878:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800187a:	4b0e      	ldr	r3, [pc, #56]	@ (80018b4 <MX_I2C1_Init+0x50>)
 800187c:	2200      	movs	r2, #0
 800187e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001880:	4b0c      	ldr	r3, [pc, #48]	@ (80018b4 <MX_I2C1_Init+0x50>)
 8001882:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001886:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001888:	4b0a      	ldr	r3, [pc, #40]	@ (80018b4 <MX_I2C1_Init+0x50>)
 800188a:	2200      	movs	r2, #0
 800188c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800188e:	4b09      	ldr	r3, [pc, #36]	@ (80018b4 <MX_I2C1_Init+0x50>)
 8001890:	2200      	movs	r2, #0
 8001892:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001894:	4b07      	ldr	r3, [pc, #28]	@ (80018b4 <MX_I2C1_Init+0x50>)
 8001896:	2200      	movs	r2, #0
 8001898:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800189a:	4b06      	ldr	r3, [pc, #24]	@ (80018b4 <MX_I2C1_Init+0x50>)
 800189c:	2200      	movs	r2, #0
 800189e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80018a0:	4804      	ldr	r0, [pc, #16]	@ (80018b4 <MX_I2C1_Init+0x50>)
 80018a2:	f001 fd77 	bl	8003394 <HAL_I2C_Init>
 80018a6:	4603      	mov	r3, r0
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d001      	beq.n	80018b0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80018ac:	f000 f9f0 	bl	8001c90 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80018b0:	bf00      	nop
 80018b2:	bd80      	pop	{r7, pc}
 80018b4:	200000dc 	.word	0x200000dc
 80018b8:	40005400 	.word	0x40005400
 80018bc:	000186a0 	.word	0x000186a0

080018c0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b08a      	sub	sp, #40	@ 0x28
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018c8:	f107 0314 	add.w	r3, r7, #20
 80018cc:	2200      	movs	r2, #0
 80018ce:	601a      	str	r2, [r3, #0]
 80018d0:	605a      	str	r2, [r3, #4]
 80018d2:	609a      	str	r2, [r3, #8]
 80018d4:	60da      	str	r2, [r3, #12]
 80018d6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a19      	ldr	r2, [pc, #100]	@ (8001944 <HAL_I2C_MspInit+0x84>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d12c      	bne.n	800193c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018e2:	2300      	movs	r3, #0
 80018e4:	613b      	str	r3, [r7, #16]
 80018e6:	4b18      	ldr	r3, [pc, #96]	@ (8001948 <HAL_I2C_MspInit+0x88>)
 80018e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ea:	4a17      	ldr	r2, [pc, #92]	@ (8001948 <HAL_I2C_MspInit+0x88>)
 80018ec:	f043 0302 	orr.w	r3, r3, #2
 80018f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80018f2:	4b15      	ldr	r3, [pc, #84]	@ (8001948 <HAL_I2C_MspInit+0x88>)
 80018f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018f6:	f003 0302 	and.w	r3, r3, #2
 80018fa:	613b      	str	r3, [r7, #16]
 80018fc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80018fe:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001902:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001904:	2312      	movs	r3, #18
 8001906:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001908:	2300      	movs	r3, #0
 800190a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800190c:	2303      	movs	r3, #3
 800190e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001910:	2304      	movs	r3, #4
 8001912:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001914:	f107 0314 	add.w	r3, r7, #20
 8001918:	4619      	mov	r1, r3
 800191a:	480c      	ldr	r0, [pc, #48]	@ (800194c <HAL_I2C_MspInit+0x8c>)
 800191c:	f001 fb5c 	bl	8002fd8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001920:	2300      	movs	r3, #0
 8001922:	60fb      	str	r3, [r7, #12]
 8001924:	4b08      	ldr	r3, [pc, #32]	@ (8001948 <HAL_I2C_MspInit+0x88>)
 8001926:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001928:	4a07      	ldr	r2, [pc, #28]	@ (8001948 <HAL_I2C_MspInit+0x88>)
 800192a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800192e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001930:	4b05      	ldr	r3, [pc, #20]	@ (8001948 <HAL_I2C_MspInit+0x88>)
 8001932:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001934:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001938:	60fb      	str	r3, [r7, #12]
 800193a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800193c:	bf00      	nop
 800193e:	3728      	adds	r7, #40	@ 0x28
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}
 8001944:	40005400 	.word	0x40005400
 8001948:	40023800 	.word	0x40023800
 800194c:	40020400 	.word	0x40020400

08001950 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001954:	f001 f998 	bl	8002c88 <HAL_Init>

  /* USER CODE BEGIN Init */

  Initialisation_manette();
 8001958:	f000 f9f4 	bl	8001d44 <Initialisation_manette>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800195c:	f000 f860 	bl	8001a20 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001960:	f7ff fed0 	bl	8001704 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001964:	f000 ffe6 	bl	8002934 <MX_USART2_UART_Init>
  MX_TIM6_Init();
 8001968:	f000 fe88 	bl	800267c <MX_TIM6_Init>
  MX_TIM3_Init();
 800196c:	f000 fd76 	bl	800245c <MX_TIM3_Init>
  MX_TIM7_Init();
 8001970:	f000 feba 	bl	80026e8 <MX_TIM7_Init>
  MX_I2C1_Init();
 8001974:	f7ff ff76 	bl	8001864 <MX_I2C1_Init>
  MX_SPI2_Init();
 8001978:	f000 fb9a 	bl	80020b0 <MX_SPI2_Init>
  MX_TIM4_Init();
 800197c:	f000 fe06 	bl	800258c <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim6);
 8001980:	4823      	ldr	r0, [pc, #140]	@ (8001a10 <main+0xc0>)
 8001982:	f003 fde3 	bl	800554c <HAL_TIM_Base_Start_IT>

  if (HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1) != HAL_OK)
 8001986:	2100      	movs	r1, #0
 8001988:	4822      	ldr	r0, [pc, #136]	@ (8001a14 <main+0xc4>)
 800198a:	f003 fed7 	bl	800573c <HAL_TIM_PWM_Start>
 800198e:	4603      	mov	r3, r0
 8001990:	2b00      	cmp	r3, #0
 8001992:	d001      	beq.n	8001998 <main+0x48>
  {
      Error_Handler();
 8001994:	f000 f97c 	bl	8001c90 <Error_Handler>
  }

  if (HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2) != HAL_OK)
 8001998:	2104      	movs	r1, #4
 800199a:	481e      	ldr	r0, [pc, #120]	@ (8001a14 <main+0xc4>)
 800199c:	f003 fece 	bl	800573c <HAL_TIM_PWM_Start>
 80019a0:	4603      	mov	r3, r0
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d001      	beq.n	80019aa <main+0x5a>
  {
      Error_Handler();
 80019a6:	f000 f973 	bl	8001c90 <Error_Handler>
  }

  if (HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3) != HAL_OK)
 80019aa:	2108      	movs	r1, #8
 80019ac:	4819      	ldr	r0, [pc, #100]	@ (8001a14 <main+0xc4>)
 80019ae:	f003 fec5 	bl	800573c <HAL_TIM_PWM_Start>
 80019b2:	4603      	mov	r3, r0
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d001      	beq.n	80019bc <main+0x6c>
  {
      Error_Handler();
 80019b8:	f000 f96a 	bl	8001c90 <Error_Handler>
  }

  if (HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4) != HAL_OK)
 80019bc:	210c      	movs	r1, #12
 80019be:	4815      	ldr	r0, [pc, #84]	@ (8001a14 <main+0xc4>)
 80019c0:	f003 febc 	bl	800573c <HAL_TIM_PWM_Start>
 80019c4:	4603      	mov	r3, r0
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d001      	beq.n	80019ce <main+0x7e>
  {
      Error_Handler();
 80019ca:	f000 f961 	bl	8001c90 <Error_Handler>
  }

  LCD_Init(&LCD_Init_OK);
 80019ce:	4812      	ldr	r0, [pc, #72]	@ (8001a18 <main+0xc8>)
 80019d0:	f001 f822 	bl	8002a18 <LCD_Init>
  {

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	if(curr_mode != MANUAL_MODE) { 	// Toggle auto mode
 80019d4:	4b11      	ldr	r3, [pc, #68]	@ (8001a1c <main+0xcc>)
 80019d6:	781b      	ldrb	r3, [r3, #0]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d016      	beq.n	8001a0a <main+0xba>
		switch(curr_mode) {
 80019dc:	4b0f      	ldr	r3, [pc, #60]	@ (8001a1c <main+0xcc>)
 80019de:	781b      	ldrb	r3, [r3, #0]
 80019e0:	2b03      	cmp	r3, #3
 80019e2:	d00e      	beq.n	8001a02 <main+0xb2>
 80019e4:	2b03      	cmp	r3, #3
 80019e6:	dcf5      	bgt.n	80019d4 <main+0x84>
 80019e8:	2b01      	cmp	r3, #1
 80019ea:	d002      	beq.n	80019f2 <main+0xa2>
 80019ec:	2b02      	cmp	r3, #2
 80019ee:	d004      	beq.n	80019fa <main+0xaa>
 80019f0:	e00d      	b.n	8001a0e <main+0xbe>
			case CIRCLE_MODE:
				Auto_Circle(&htim3);
 80019f2:	4808      	ldr	r0, [pc, #32]	@ (8001a14 <main+0xc4>)
 80019f4:	f7ff fc04 	bl	8001200 <Auto_Circle>
				break;
 80019f8:	e009      	b.n	8001a0e <main+0xbe>
			case BACK_FORTH_MODE:
				Auto_Back_Forth(&htim3);
 80019fa:	4806      	ldr	r0, [pc, #24]	@ (8001a14 <main+0xc4>)
 80019fc:	f7ff fc82 	bl	8001304 <Auto_Back_Forth>
				break;
 8001a00:	e005      	b.n	8001a0e <main+0xbe>
			case SQUARE_MODE:
				Auto_Square(&htim3);
 8001a02:	4804      	ldr	r0, [pc, #16]	@ (8001a14 <main+0xc4>)
 8001a04:	f7ff fcc4 	bl	8001390 <Auto_Square>
				break;
 8001a08:	e001      	b.n	8001a0e <main+0xbe>
		}
	}

	else { 	// Manual mode
		Controler();
 8001a0a:	f000 f9bd 	bl	8001d88 <Controler>
	if(curr_mode != MANUAL_MODE) { 	// Toggle auto mode
 8001a0e:	e7e1      	b.n	80019d4 <main+0x84>
 8001a10:	20000268 	.word	0x20000268
 8001a14:	200001d8 	.word	0x200001d8
 8001a18:	20000138 	.word	0x20000138
 8001a1c:	200000ae 	.word	0x200000ae

08001a20 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b094      	sub	sp, #80	@ 0x50
 8001a24:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a26:	f107 031c 	add.w	r3, r7, #28
 8001a2a:	2234      	movs	r2, #52	@ 0x34
 8001a2c:	2100      	movs	r1, #0
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f006 f86c 	bl	8007b0c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a34:	f107 0308 	add.w	r3, r7, #8
 8001a38:	2200      	movs	r2, #0
 8001a3a:	601a      	str	r2, [r3, #0]
 8001a3c:	605a      	str	r2, [r3, #4]
 8001a3e:	609a      	str	r2, [r3, #8]
 8001a40:	60da      	str	r2, [r3, #12]
 8001a42:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a44:	2300      	movs	r3, #0
 8001a46:	607b      	str	r3, [r7, #4]
 8001a48:	4b2a      	ldr	r3, [pc, #168]	@ (8001af4 <SystemClock_Config+0xd4>)
 8001a4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a4c:	4a29      	ldr	r2, [pc, #164]	@ (8001af4 <SystemClock_Config+0xd4>)
 8001a4e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a52:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a54:	4b27      	ldr	r3, [pc, #156]	@ (8001af4 <SystemClock_Config+0xd4>)
 8001a56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a58:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a5c:	607b      	str	r3, [r7, #4]
 8001a5e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001a60:	2300      	movs	r3, #0
 8001a62:	603b      	str	r3, [r7, #0]
 8001a64:	4b24      	ldr	r3, [pc, #144]	@ (8001af8 <SystemClock_Config+0xd8>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001a6c:	4a22      	ldr	r2, [pc, #136]	@ (8001af8 <SystemClock_Config+0xd8>)
 8001a6e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a72:	6013      	str	r3, [r2, #0]
 8001a74:	4b20      	ldr	r3, [pc, #128]	@ (8001af8 <SystemClock_Config+0xd8>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001a7c:	603b      	str	r3, [r7, #0]
 8001a7e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001a80:	2302      	movs	r3, #2
 8001a82:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a84:	2301      	movs	r3, #1
 8001a86:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001a88:	2310      	movs	r3, #16
 8001a8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a8c:	2302      	movs	r3, #2
 8001a8e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001a90:	2300      	movs	r3, #0
 8001a92:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001a94:	2310      	movs	r3, #16
 8001a96:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001a98:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001a9c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001a9e:	2304      	movs	r3, #4
 8001aa0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001aa2:	2302      	movs	r3, #2
 8001aa4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001aa6:	2302      	movs	r3, #2
 8001aa8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001aaa:	f107 031c 	add.w	r3, r7, #28
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f002 ffb4 	bl	8004a1c <HAL_RCC_OscConfig>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d001      	beq.n	8001abe <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001aba:	f000 f8e9 	bl	8001c90 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001abe:	230f      	movs	r3, #15
 8001ac0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ac2:	2302      	movs	r3, #2
 8001ac4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001aca:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ace:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001ad4:	f107 0308 	add.w	r3, r7, #8
 8001ad8:	2102      	movs	r1, #2
 8001ada:	4618      	mov	r0, r3
 8001adc:	f002 fc54 	bl	8004388 <HAL_RCC_ClockConfig>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d001      	beq.n	8001aea <SystemClock_Config+0xca>
  {
    Error_Handler();
 8001ae6:	f000 f8d3 	bl	8001c90 <Error_Handler>
  }
}
 8001aea:	bf00      	nop
 8001aec:	3750      	adds	r7, #80	@ 0x50
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	40023800 	.word	0x40023800
 8001af8:	40007000 	.word	0x40007000

08001afc <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001afc:	b590      	push	{r4, r7, lr}
 8001afe:	b083      	sub	sp, #12
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	4603      	mov	r3, r0
 8001b04:	80fb      	strh	r3, [r7, #6]

	if(GPIO_Pin == GPIO_PIN_9)
 8001b06:	88fb      	ldrh	r3, [r7, #6]
 8001b08:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001b0c:	d106      	bne.n	8001b1c <HAL_GPIO_EXTI_Callback+0x20>
	{
		nbPulseD++ ; // compte les pulses de lencodeur droit
 8001b0e:	4b25      	ldr	r3, [pc, #148]	@ (8001ba4 <HAL_GPIO_EXTI_Callback+0xa8>)
 8001b10:	881b      	ldrh	r3, [r3, #0]
 8001b12:	b29b      	uxth	r3, r3
 8001b14:	3301      	adds	r3, #1
 8001b16:	b29a      	uxth	r2, r3
 8001b18:	4b22      	ldr	r3, [pc, #136]	@ (8001ba4 <HAL_GPIO_EXTI_Callback+0xa8>)
 8001b1a:	801a      	strh	r2, [r3, #0]
	}

	if(GPIO_Pin == GPIO_PIN_8)
 8001b1c:	88fb      	ldrh	r3, [r7, #6]
 8001b1e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001b22:	d106      	bne.n	8001b32 <HAL_GPIO_EXTI_Callback+0x36>
	{
		nbPulseG++ ; // compte les pulses de lencodeur droit
 8001b24:	4b20      	ldr	r3, [pc, #128]	@ (8001ba8 <HAL_GPIO_EXTI_Callback+0xac>)
 8001b26:	881b      	ldrh	r3, [r3, #0]
 8001b28:	b29b      	uxth	r3, r3
 8001b2a:	3301      	adds	r3, #1
 8001b2c:	b29a      	uxth	r2, r3
 8001b2e:	4b1e      	ldr	r3, [pc, #120]	@ (8001ba8 <HAL_GPIO_EXTI_Callback+0xac>)
 8001b30:	801a      	strh	r2, [r3, #0]
	}

	if(GPIO_Pin == Blue_Button_Pin) {
 8001b32:	88fb      	ldrh	r3, [r7, #6]
 8001b34:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001b38:	d12f      	bne.n	8001b9a <HAL_GPIO_EXTI_Callback+0x9e>
		dip_state = Get_Mode(HAL_GPIO_ReadPin(Dipswitch_MSB_GPIO_Port, Dipswitch_MSB_Pin), HAL_GPIO_ReadPin(Dipswitch_LSB_GPIO_Port, Dipswitch_LSB_Pin));
 8001b3a:	2104      	movs	r1, #4
 8001b3c:	481b      	ldr	r0, [pc, #108]	@ (8001bac <HAL_GPIO_EXTI_Callback+0xb0>)
 8001b3e:	f001 fbdf 	bl	8003300 <HAL_GPIO_ReadPin>
 8001b42:	4603      	mov	r3, r0
 8001b44:	461c      	mov	r4, r3
 8001b46:	2108      	movs	r1, #8
 8001b48:	4818      	ldr	r0, [pc, #96]	@ (8001bac <HAL_GPIO_EXTI_Callback+0xb0>)
 8001b4a:	f001 fbd9 	bl	8003300 <HAL_GPIO_ReadPin>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	4619      	mov	r1, r3
 8001b52:	4620      	mov	r0, r4
 8001b54:	f7ff f98a 	bl	8000e6c <Get_Mode>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	b2da      	uxtb	r2, r3
 8001b5c:	4b14      	ldr	r3, [pc, #80]	@ (8001bb0 <HAL_GPIO_EXTI_Callback+0xb4>)
 8001b5e:	701a      	strb	r2, [r3, #0]

		// Resume if paused
		if(pause)
 8001b60:	4b14      	ldr	r3, [pc, #80]	@ (8001bb4 <HAL_GPIO_EXTI_Callback+0xb8>)
 8001b62:	781b      	ldrb	r3, [r3, #0]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d003      	beq.n	8001b70 <HAL_GPIO_EXTI_Callback+0x74>
			Resume(&htim3);
 8001b68:	4813      	ldr	r0, [pc, #76]	@ (8001bb8 <HAL_GPIO_EXTI_Callback+0xbc>)
 8001b6a:	f7ff fc93 	bl	8001494 <Resume>
 8001b6e:	e00c      	b.n	8001b8a <HAL_GPIO_EXTI_Callback+0x8e>

		// Pause if button pressed while auto mode on
		else if(curr_mode == dip_state && curr_mode != MANUAL_MODE)
 8001b70:	4b12      	ldr	r3, [pc, #72]	@ (8001bbc <HAL_GPIO_EXTI_Callback+0xc0>)
 8001b72:	781a      	ldrb	r2, [r3, #0]
 8001b74:	4b0e      	ldr	r3, [pc, #56]	@ (8001bb0 <HAL_GPIO_EXTI_Callback+0xb4>)
 8001b76:	781b      	ldrb	r3, [r3, #0]
 8001b78:	429a      	cmp	r2, r3
 8001b7a:	d106      	bne.n	8001b8a <HAL_GPIO_EXTI_Callback+0x8e>
 8001b7c:	4b0f      	ldr	r3, [pc, #60]	@ (8001bbc <HAL_GPIO_EXTI_Callback+0xc0>)
 8001b7e:	781b      	ldrb	r3, [r3, #0]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d002      	beq.n	8001b8a <HAL_GPIO_EXTI_Callback+0x8e>
			Pause(&htim3);
 8001b84:	480c      	ldr	r0, [pc, #48]	@ (8001bb8 <HAL_GPIO_EXTI_Callback+0xbc>)
 8001b86:	f7ff fc45 	bl	8001414 <Pause>

		// Change current mode only on manual mode
		if(curr_mode == MANUAL_MODE)
 8001b8a:	4b0c      	ldr	r3, [pc, #48]	@ (8001bbc <HAL_GPIO_EXTI_Callback+0xc0>)
 8001b8c:	781b      	ldrb	r3, [r3, #0]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d103      	bne.n	8001b9a <HAL_GPIO_EXTI_Callback+0x9e>
			curr_mode = dip_state;
 8001b92:	4b07      	ldr	r3, [pc, #28]	@ (8001bb0 <HAL_GPIO_EXTI_Callback+0xb4>)
 8001b94:	781a      	ldrb	r2, [r3, #0]
 8001b96:	4b09      	ldr	r3, [pc, #36]	@ (8001bbc <HAL_GPIO_EXTI_Callback+0xc0>)
 8001b98:	701a      	strb	r2, [r3, #0]
	}
}
 8001b9a:	bf00      	nop
 8001b9c:	370c      	adds	r7, #12
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd90      	pop	{r4, r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	20000130 	.word	0x20000130
 8001ba8:	20000132 	.word	0x20000132
 8001bac:	40020800 	.word	0x40020800
 8001bb0:	200000ad 	.word	0x200000ad
 8001bb4:	200000ac 	.word	0x200000ac
 8001bb8:	200001d8 	.word	0x200001d8
 8001bbc:	200000ae 	.word	0x200000ae

08001bc0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b083      	sub	sp, #12
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
    if(htim->Instance == TIM6)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a27      	ldr	r2, [pc, #156]	@ (8001c6c <HAL_TIM_PeriodElapsedCallback+0xac>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d13b      	bne.n	8001c4a <HAL_TIM_PeriodElapsedCallback+0x8a>
    {
    	vitesseD = CIRCONFERENCE * nbPulseD / PULSE_PAR_TOUR * 2000 / (arrTimerVitesse + 1) ; // calcule la vitesse de la chenille droite en m/s
 8001bd2:	4b27      	ldr	r3, [pc, #156]	@ (8001c70 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8001bd4:	881b      	ldrh	r3, [r3, #0]
 8001bd6:	b29b      	uxth	r3, r3
 8001bd8:	461a      	mov	r2, r3
 8001bda:	239d      	movs	r3, #157	@ 0x9d
 8001bdc:	fb02 f303 	mul.w	r3, r2, r3
 8001be0:	4a24      	ldr	r2, [pc, #144]	@ (8001c74 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8001be2:	fb82 1203 	smull	r1, r2, r2, r3
 8001be6:	441a      	add	r2, r3
 8001be8:	1192      	asrs	r2, r2, #6
 8001bea:	17db      	asrs	r3, r3, #31
 8001bec:	1ad3      	subs	r3, r2, r3
 8001bee:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8001bf2:	fb03 f202 	mul.w	r2, r3, r2
 8001bf6:	4b20      	ldr	r3, [pc, #128]	@ (8001c78 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8001bf8:	881b      	ldrh	r3, [r3, #0]
 8001bfa:	b29b      	uxth	r3, r3
 8001bfc:	3301      	adds	r3, #1
 8001bfe:	fb92 f3f3 	sdiv	r3, r2, r3
 8001c02:	b29a      	uxth	r2, r3
 8001c04:	4b1d      	ldr	r3, [pc, #116]	@ (8001c7c <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8001c06:	801a      	strh	r2, [r3, #0]
    	vitesseG = CIRCONFERENCE * nbPulseG / PULSE_PAR_TOUR * 2000 / (arrTimerVitesse + 1) ;
 8001c08:	4b1d      	ldr	r3, [pc, #116]	@ (8001c80 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8001c0a:	881b      	ldrh	r3, [r3, #0]
 8001c0c:	b29b      	uxth	r3, r3
 8001c0e:	461a      	mov	r2, r3
 8001c10:	239d      	movs	r3, #157	@ 0x9d
 8001c12:	fb02 f303 	mul.w	r3, r2, r3
 8001c16:	4a17      	ldr	r2, [pc, #92]	@ (8001c74 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8001c18:	fb82 1203 	smull	r1, r2, r2, r3
 8001c1c:	441a      	add	r2, r3
 8001c1e:	1192      	asrs	r2, r2, #6
 8001c20:	17db      	asrs	r3, r3, #31
 8001c22:	1ad3      	subs	r3, r2, r3
 8001c24:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8001c28:	fb03 f202 	mul.w	r2, r3, r2
 8001c2c:	4b12      	ldr	r3, [pc, #72]	@ (8001c78 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8001c2e:	881b      	ldrh	r3, [r3, #0]
 8001c30:	b29b      	uxth	r3, r3
 8001c32:	3301      	adds	r3, #1
 8001c34:	fb92 f3f3 	sdiv	r3, r2, r3
 8001c38:	b29a      	uxth	r2, r3
 8001c3a:	4b12      	ldr	r3, [pc, #72]	@ (8001c84 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8001c3c:	801a      	strh	r2, [r3, #0]

    	nbPulseD = 0 ;
 8001c3e:	4b0c      	ldr	r3, [pc, #48]	@ (8001c70 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	801a      	strh	r2, [r3, #0]
    	nbPulseG = 0;
 8001c44:	4b0e      	ldr	r3, [pc, #56]	@ (8001c80 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	801a      	strh	r2, [r3, #0]
    	//HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
    }

    if(htim->Instance == TIM7) {	// Triggered every 10 µs
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4a0e      	ldr	r2, [pc, #56]	@ (8001c88 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8001c50:	4293      	cmp	r3, r2
 8001c52:	d104      	bne.n	8001c5e <HAL_TIM_PeriodElapsedCallback+0x9e>
    	timer_count += 10;
 8001c54:	4b0d      	ldr	r3, [pc, #52]	@ (8001c8c <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	330a      	adds	r3, #10
 8001c5a:	4a0c      	ldr	r2, [pc, #48]	@ (8001c8c <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8001c5c:	6013      	str	r3, [r2, #0]
    }
}
 8001c5e:	bf00      	nop
 8001c60:	370c      	adds	r7, #12
 8001c62:	46bd      	mov	sp, r7
 8001c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c68:	4770      	bx	lr
 8001c6a:	bf00      	nop
 8001c6c:	40001000 	.word	0x40001000
 8001c70:	20000130 	.word	0x20000130
 8001c74:	dd67c8a7 	.word	0xdd67c8a7
 8001c78:	20000002 	.word	0x20000002
 8001c7c:	20000134 	.word	0x20000134
 8001c80:	20000132 	.word	0x20000132
 8001c84:	20000136 	.word	0x20000136
 8001c88:	40001400 	.word	0x40001400
 8001c8c:	200000c4 	.word	0x200000c4

08001c90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c90:	b480      	push	{r7}
 8001c92:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c94:	b672      	cpsid	i
}
 8001c96:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c98:	bf00      	nop
 8001c9a:	e7fd      	b.n	8001c98 <Error_Handler+0x8>

08001c9c <Format_Data>:
int sendPulseMotor;

int toggle;


void Format_Data() {
 8001c9c:	b480      	push	{r7}
 8001c9e:	af00      	add	r7, sp, #0
	/*FROM LAB7*/
	formatted_data[0] = data[0];
 8001ca0:	4b20      	ldr	r3, [pc, #128]	@ (8001d24 <Format_Data+0x88>)
 8001ca2:	781b      	ldrb	r3, [r3, #0]
 8001ca4:	461a      	mov	r2, r3
 8001ca6:	4b20      	ldr	r3, [pc, #128]	@ (8001d28 <Format_Data+0x8c>)
 8001ca8:	601a      	str	r2, [r3, #0]
	formatted_data[1] = data[1];
 8001caa:	4b1e      	ldr	r3, [pc, #120]	@ (8001d24 <Format_Data+0x88>)
 8001cac:	785b      	ldrb	r3, [r3, #1]
 8001cae:	461a      	mov	r2, r3
 8001cb0:	4b1d      	ldr	r3, [pc, #116]	@ (8001d28 <Format_Data+0x8c>)
 8001cb2:	605a      	str	r2, [r3, #4]
	formatted_data[5] = (data[5] & 0x02);
 8001cb4:	4b1b      	ldr	r3, [pc, #108]	@ (8001d24 <Format_Data+0x88>)
 8001cb6:	795b      	ldrb	r3, [r3, #5]
 8001cb8:	f003 0302 	and.w	r3, r3, #2
 8001cbc:	4a1a      	ldr	r2, [pc, #104]	@ (8001d28 <Format_Data+0x8c>)
 8001cbe:	6153      	str	r3, [r2, #20]
	if(formatted_data[5] == 2)
 8001cc0:	4b19      	ldr	r3, [pc, #100]	@ (8001d28 <Format_Data+0x8c>)
 8001cc2:	695b      	ldr	r3, [r3, #20]
 8001cc4:	2b02      	cmp	r3, #2
 8001cc6:	d102      	bne.n	8001cce <Format_Data+0x32>
		formatted_data[5] = 1;
 8001cc8:	4b17      	ldr	r3, [pc, #92]	@ (8001d28 <Format_Data+0x8c>)
 8001cca:	2201      	movs	r2, #1
 8001ccc:	615a      	str	r2, [r3, #20]
	formatted_data[6] = (data[5] & 0x01);
 8001cce:	4b15      	ldr	r3, [pc, #84]	@ (8001d24 <Format_Data+0x88>)
 8001cd0:	795b      	ldrb	r3, [r3, #5]
 8001cd2:	f003 0301 	and.w	r3, r3, #1
 8001cd6:	4a14      	ldr	r2, [pc, #80]	@ (8001d28 <Format_Data+0x8c>)
 8001cd8:	6193      	str	r3, [r2, #24]

	/*MY DATA*/
	Xdata = data[0];
 8001cda:	4b12      	ldr	r3, [pc, #72]	@ (8001d24 <Format_Data+0x88>)
 8001cdc:	781b      	ldrb	r3, [r3, #0]
 8001cde:	461a      	mov	r2, r3
 8001ce0:	4b12      	ldr	r3, [pc, #72]	@ (8001d2c <Format_Data+0x90>)
 8001ce2:	601a      	str	r2, [r3, #0]
	Ydata = data[1];
 8001ce4:	4b0f      	ldr	r3, [pc, #60]	@ (8001d24 <Format_Data+0x88>)
 8001ce6:	785b      	ldrb	r3, [r3, #1]
 8001ce8:	461a      	mov	r2, r3
 8001cea:	4b11      	ldr	r3, [pc, #68]	@ (8001d30 <Format_Data+0x94>)
 8001cec:	601a      	str	r2, [r3, #0]
	Xpulse = data[0];
 8001cee:	4b0d      	ldr	r3, [pc, #52]	@ (8001d24 <Format_Data+0x88>)
 8001cf0:	781b      	ldrb	r3, [r3, #0]
 8001cf2:	461a      	mov	r2, r3
 8001cf4:	4b0f      	ldr	r3, [pc, #60]	@ (8001d34 <Format_Data+0x98>)
 8001cf6:	601a      	str	r2, [r3, #0]
	Ypulse = data[1];
 8001cf8:	4b0a      	ldr	r3, [pc, #40]	@ (8001d24 <Format_Data+0x88>)
 8001cfa:	785b      	ldrb	r3, [r3, #1]
 8001cfc:	461a      	mov	r2, r3
 8001cfe:	4b0e      	ldr	r3, [pc, #56]	@ (8001d38 <Format_Data+0x9c>)
 8001d00:	601a      	str	r2, [r3, #0]
	Cbutton = (data[5] & 0x02);
 8001d02:	4b08      	ldr	r3, [pc, #32]	@ (8001d24 <Format_Data+0x88>)
 8001d04:	795b      	ldrb	r3, [r3, #5]
 8001d06:	f003 0302 	and.w	r3, r3, #2
 8001d0a:	4a0c      	ldr	r2, [pc, #48]	@ (8001d3c <Format_Data+0xa0>)
 8001d0c:	6013      	str	r3, [r2, #0]
	Zbutton = (data[5] & 0x01);
 8001d0e:	4b05      	ldr	r3, [pc, #20]	@ (8001d24 <Format_Data+0x88>)
 8001d10:	795b      	ldrb	r3, [r3, #5]
 8001d12:	f003 0301 	and.w	r3, r3, #1
 8001d16:	4a0a      	ldr	r2, [pc, #40]	@ (8001d40 <Format_Data+0xa4>)
 8001d18:	6013      	str	r3, [r2, #0]
	/* neutral x and y data: 128
	max x and y data: 1-254 */

}
 8001d1a:	bf00      	nop
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d22:	4770      	bx	lr
 8001d24:	2000013c 	.word	0x2000013c
 8001d28:	20000144 	.word	0x20000144
 8001d2c:	20000160 	.word	0x20000160
 8001d30:	20000164 	.word	0x20000164
 8001d34:	20000168 	.word	0x20000168
 8001d38:	2000016c 	.word	0x2000016c
 8001d3c:	20000170 	.word	0x20000170
 8001d40:	20000174 	.word	0x20000174

08001d44 <Initialisation_manette>:


void Initialisation_manette(){
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b082      	sub	sp, #8
 8001d48:	af02      	add	r7, sp, #8

	HAL_I2C_Master_Transmit(&hi2c1, NUNCHUK_ADDRESS, initcomm1, 2, HAL_MAX_DELAY);
 8001d4a:	f04f 33ff 	mov.w	r3, #4294967295
 8001d4e:	9300      	str	r3, [sp, #0]
 8001d50:	2302      	movs	r3, #2
 8001d52:	4a0a      	ldr	r2, [pc, #40]	@ (8001d7c <Initialisation_manette+0x38>)
 8001d54:	21a4      	movs	r1, #164	@ 0xa4
 8001d56:	480a      	ldr	r0, [pc, #40]	@ (8001d80 <Initialisation_manette+0x3c>)
 8001d58:	f001 fc60 	bl	800361c <HAL_I2C_Master_Transmit>
	HAL_Delay(10);
 8001d5c:	200a      	movs	r0, #10
 8001d5e:	f001 f805 	bl	8002d6c <HAL_Delay>
	HAL_I2C_Master_Transmit(&hi2c1, NUNCHUK_ADDRESS, initcomm2, 2, HAL_MAX_DELAY);
 8001d62:	f04f 33ff 	mov.w	r3, #4294967295
 8001d66:	9300      	str	r3, [sp, #0]
 8001d68:	2302      	movs	r3, #2
 8001d6a:	4a06      	ldr	r2, [pc, #24]	@ (8001d84 <Initialisation_manette+0x40>)
 8001d6c:	21a4      	movs	r1, #164	@ 0xa4
 8001d6e:	4804      	ldr	r0, [pc, #16]	@ (8001d80 <Initialisation_manette+0x3c>)
 8001d70:	f001 fc54 	bl	800361c <HAL_I2C_Master_Transmit>

}
 8001d74:	bf00      	nop
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}
 8001d7a:	bf00      	nop
 8001d7c:	20000004 	.word	0x20000004
 8001d80:	200000dc 	.word	0x200000dc
 8001d84:	20000008 	.word	0x20000008

08001d88 <Controler>:


void Controler(){
 8001d88:	b5b0      	push	{r4, r5, r7, lr}
 8001d8a:	b082      	sub	sp, #8
 8001d8c:	af02      	add	r7, sp, #8

	HAL_I2C_Master_Transmit(&hi2c1, NUNCHUK_ADDRESS, 0x00, 1, HAL_MAX_DELAY);
 8001d8e:	f04f 33ff 	mov.w	r3, #4294967295
 8001d92:	9300      	str	r3, [sp, #0]
 8001d94:	2301      	movs	r3, #1
 8001d96:	2200      	movs	r2, #0
 8001d98:	21a4      	movs	r1, #164	@ 0xa4
 8001d9a:	48ad      	ldr	r0, [pc, #692]	@ (8002050 <Controler+0x2c8>)
 8001d9c:	f001 fc3e 	bl	800361c <HAL_I2C_Master_Transmit>
	HAL_Delay(10);
 8001da0:	200a      	movs	r0, #10
 8001da2:	f000 ffe3 	bl	8002d6c <HAL_Delay>
	HAL_I2C_Master_Receive(&hi2c1, NUNCHUK_ADDRESS, data, 6, HAL_MAX_DELAY);
 8001da6:	f04f 33ff 	mov.w	r3, #4294967295
 8001daa:	9300      	str	r3, [sp, #0]
 8001dac:	2306      	movs	r3, #6
 8001dae:	4aa9      	ldr	r2, [pc, #676]	@ (8002054 <Controler+0x2cc>)
 8001db0:	21a4      	movs	r1, #164	@ 0xa4
 8001db2:	48a7      	ldr	r0, [pc, #668]	@ (8002050 <Controler+0x2c8>)
 8001db4:	f001 fd30 	bl	8003818 <HAL_I2C_Master_Receive>
	Format_Data();
 8001db8:	f7ff ff70 	bl	8001c9c <Format_Data>



	if(Cbutton == 1){
 8001dbc:	4ba6      	ldr	r3, [pc, #664]	@ (8002058 <Controler+0x2d0>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	2b01      	cmp	r3, #1
 8001dc2:	f040 812f 	bne.w	8002024 <Controler+0x29c>


		if(Xdata && Ydata == 128){
 8001dc6:	4ba5      	ldr	r3, [pc, #660]	@ (800205c <Controler+0x2d4>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d007      	beq.n	8001dde <Controler+0x56>
 8001dce:	4ba4      	ldr	r3, [pc, #656]	@ (8002060 <Controler+0x2d8>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	2b80      	cmp	r3, #128	@ 0x80
 8001dd4:	d103      	bne.n	8001dde <Controler+0x56>
				Stop(&htim3);
 8001dd6:	48a3      	ldr	r0, [pc, #652]	@ (8002064 <Controler+0x2dc>)
 8001dd8:	f7ff fc7a 	bl	80016d0 <Stop>
 8001ddc:	e11b      	b.n	8002016 <Controler+0x28e>

		else{

			/* Adjustment of data according to mode */

		if(modeVitesse==1){
 8001dde:	4ba2      	ldr	r3, [pc, #648]	@ (8002068 <Controler+0x2e0>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	2b01      	cmp	r3, #1
 8001de4:	d156      	bne.n	8001e94 <Controler+0x10c>
			Xpulse = Xdata * 0.33 * pulseCoeff;
 8001de6:	4b9d      	ldr	r3, [pc, #628]	@ (800205c <Controler+0x2d4>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4618      	mov	r0, r3
 8001dec:	f7fe fbb2 	bl	8000554 <__aeabi_i2d>
 8001df0:	a393      	add	r3, pc, #588	@ (adr r3, 8002040 <Controler+0x2b8>)
 8001df2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001df6:	f7fe fc17 	bl	8000628 <__aeabi_dmul>
 8001dfa:	4602      	mov	r2, r0
 8001dfc:	460b      	mov	r3, r1
 8001dfe:	4614      	mov	r4, r2
 8001e00:	461d      	mov	r5, r3
 8001e02:	4b9a      	ldr	r3, [pc, #616]	@ (800206c <Controler+0x2e4>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4618      	mov	r0, r3
 8001e08:	f7fe fbb6 	bl	8000578 <__aeabi_f2d>
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	460b      	mov	r3, r1
 8001e10:	4620      	mov	r0, r4
 8001e12:	4629      	mov	r1, r5
 8001e14:	f7fe fc08 	bl	8000628 <__aeabi_dmul>
 8001e18:	4602      	mov	r2, r0
 8001e1a:	460b      	mov	r3, r1
 8001e1c:	4610      	mov	r0, r2
 8001e1e:	4619      	mov	r1, r3
 8001e20:	f7fe fe14 	bl	8000a4c <__aeabi_d2iz>
 8001e24:	4603      	mov	r3, r0
 8001e26:	4a92      	ldr	r2, [pc, #584]	@ (8002070 <Controler+0x2e8>)
 8001e28:	6013      	str	r3, [r2, #0]
			Ypulse = Ydata * 0.33 * pulseCoeff;
 8001e2a:	4b8d      	ldr	r3, [pc, #564]	@ (8002060 <Controler+0x2d8>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f7fe fb90 	bl	8000554 <__aeabi_i2d>
 8001e34:	a382      	add	r3, pc, #520	@ (adr r3, 8002040 <Controler+0x2b8>)
 8001e36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e3a:	f7fe fbf5 	bl	8000628 <__aeabi_dmul>
 8001e3e:	4602      	mov	r2, r0
 8001e40:	460b      	mov	r3, r1
 8001e42:	4614      	mov	r4, r2
 8001e44:	461d      	mov	r5, r3
 8001e46:	4b89      	ldr	r3, [pc, #548]	@ (800206c <Controler+0x2e4>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f7fe fb94 	bl	8000578 <__aeabi_f2d>
 8001e50:	4602      	mov	r2, r0
 8001e52:	460b      	mov	r3, r1
 8001e54:	4620      	mov	r0, r4
 8001e56:	4629      	mov	r1, r5
 8001e58:	f7fe fbe6 	bl	8000628 <__aeabi_dmul>
 8001e5c:	4602      	mov	r2, r0
 8001e5e:	460b      	mov	r3, r1
 8001e60:	4610      	mov	r0, r2
 8001e62:	4619      	mov	r1, r3
 8001e64:	f7fe fdf2 	bl	8000a4c <__aeabi_d2iz>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	4a82      	ldr	r2, [pc, #520]	@ (8002074 <Controler+0x2ec>)
 8001e6c:	6013      	str	r3, [r2, #0]
			maxInverse = maxInverse * 0.33;
 8001e6e:	4b82      	ldr	r3, [pc, #520]	@ (8002078 <Controler+0x2f0>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4618      	mov	r0, r3
 8001e74:	f7fe fb6e 	bl	8000554 <__aeabi_i2d>
 8001e78:	a371      	add	r3, pc, #452	@ (adr r3, 8002040 <Controler+0x2b8>)
 8001e7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e7e:	f7fe fbd3 	bl	8000628 <__aeabi_dmul>
 8001e82:	4602      	mov	r2, r0
 8001e84:	460b      	mov	r3, r1
 8001e86:	4610      	mov	r0, r2
 8001e88:	4619      	mov	r1, r3
 8001e8a:	f7fe fddf 	bl	8000a4c <__aeabi_d2iz>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	4a79      	ldr	r2, [pc, #484]	@ (8002078 <Controler+0x2f0>)
 8001e92:	6013      	str	r3, [r2, #0]
		}

		if(modeVitesse==2){
 8001e94:	4b74      	ldr	r3, [pc, #464]	@ (8002068 <Controler+0x2e0>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	2b02      	cmp	r3, #2
 8001e9a:	d156      	bne.n	8001f4a <Controler+0x1c2>
			Xpulse = Xdata * 0.66 * pulseCoeff;
 8001e9c:	4b6f      	ldr	r3, [pc, #444]	@ (800205c <Controler+0x2d4>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f7fe fb57 	bl	8000554 <__aeabi_i2d>
 8001ea6:	a368      	add	r3, pc, #416	@ (adr r3, 8002048 <Controler+0x2c0>)
 8001ea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eac:	f7fe fbbc 	bl	8000628 <__aeabi_dmul>
 8001eb0:	4602      	mov	r2, r0
 8001eb2:	460b      	mov	r3, r1
 8001eb4:	4614      	mov	r4, r2
 8001eb6:	461d      	mov	r5, r3
 8001eb8:	4b6c      	ldr	r3, [pc, #432]	@ (800206c <Controler+0x2e4>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f7fe fb5b 	bl	8000578 <__aeabi_f2d>
 8001ec2:	4602      	mov	r2, r0
 8001ec4:	460b      	mov	r3, r1
 8001ec6:	4620      	mov	r0, r4
 8001ec8:	4629      	mov	r1, r5
 8001eca:	f7fe fbad 	bl	8000628 <__aeabi_dmul>
 8001ece:	4602      	mov	r2, r0
 8001ed0:	460b      	mov	r3, r1
 8001ed2:	4610      	mov	r0, r2
 8001ed4:	4619      	mov	r1, r3
 8001ed6:	f7fe fdb9 	bl	8000a4c <__aeabi_d2iz>
 8001eda:	4603      	mov	r3, r0
 8001edc:	4a64      	ldr	r2, [pc, #400]	@ (8002070 <Controler+0x2e8>)
 8001ede:	6013      	str	r3, [r2, #0]
			Ypulse = Ydata * 0.66 * pulseCoeff;
 8001ee0:	4b5f      	ldr	r3, [pc, #380]	@ (8002060 <Controler+0x2d8>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f7fe fb35 	bl	8000554 <__aeabi_i2d>
 8001eea:	a357      	add	r3, pc, #348	@ (adr r3, 8002048 <Controler+0x2c0>)
 8001eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ef0:	f7fe fb9a 	bl	8000628 <__aeabi_dmul>
 8001ef4:	4602      	mov	r2, r0
 8001ef6:	460b      	mov	r3, r1
 8001ef8:	4614      	mov	r4, r2
 8001efa:	461d      	mov	r5, r3
 8001efc:	4b5b      	ldr	r3, [pc, #364]	@ (800206c <Controler+0x2e4>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4618      	mov	r0, r3
 8001f02:	f7fe fb39 	bl	8000578 <__aeabi_f2d>
 8001f06:	4602      	mov	r2, r0
 8001f08:	460b      	mov	r3, r1
 8001f0a:	4620      	mov	r0, r4
 8001f0c:	4629      	mov	r1, r5
 8001f0e:	f7fe fb8b 	bl	8000628 <__aeabi_dmul>
 8001f12:	4602      	mov	r2, r0
 8001f14:	460b      	mov	r3, r1
 8001f16:	4610      	mov	r0, r2
 8001f18:	4619      	mov	r1, r3
 8001f1a:	f7fe fd97 	bl	8000a4c <__aeabi_d2iz>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	4a54      	ldr	r2, [pc, #336]	@ (8002074 <Controler+0x2ec>)
 8001f22:	6013      	str	r3, [r2, #0]
			maxInverse = maxInverse * 0.66;
 8001f24:	4b54      	ldr	r3, [pc, #336]	@ (8002078 <Controler+0x2f0>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f7fe fb13 	bl	8000554 <__aeabi_i2d>
 8001f2e:	a346      	add	r3, pc, #280	@ (adr r3, 8002048 <Controler+0x2c0>)
 8001f30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f34:	f7fe fb78 	bl	8000628 <__aeabi_dmul>
 8001f38:	4602      	mov	r2, r0
 8001f3a:	460b      	mov	r3, r1
 8001f3c:	4610      	mov	r0, r2
 8001f3e:	4619      	mov	r1, r3
 8001f40:	f7fe fd84 	bl	8000a4c <__aeabi_d2iz>
 8001f44:	4603      	mov	r3, r0
 8001f46:	4a4c      	ldr	r2, [pc, #304]	@ (8002078 <Controler+0x2f0>)
 8001f48:	6013      	str	r3, [r2, #0]
		}

		if(modeVitesse==3){
 8001f4a:	4b47      	ldr	r3, [pc, #284]	@ (8002068 <Controler+0x2e0>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	2b03      	cmp	r3, #3
 8001f50:	d121      	bne.n	8001f96 <Controler+0x20e>
			Xpulse = Xdata * pulseCoeff;
 8001f52:	4b42      	ldr	r3, [pc, #264]	@ (800205c <Controler+0x2d4>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	ee07 3a90 	vmov	s15, r3
 8001f5a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f5e:	4b43      	ldr	r3, [pc, #268]	@ (800206c <Controler+0x2e4>)
 8001f60:	edd3 7a00 	vldr	s15, [r3]
 8001f64:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f68:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f6c:	ee17 2a90 	vmov	r2, s15
 8001f70:	4b3f      	ldr	r3, [pc, #252]	@ (8002070 <Controler+0x2e8>)
 8001f72:	601a      	str	r2, [r3, #0]
			Ypulse = Ydata * pulseCoeff;
 8001f74:	4b3a      	ldr	r3, [pc, #232]	@ (8002060 <Controler+0x2d8>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	ee07 3a90 	vmov	s15, r3
 8001f7c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f80:	4b3a      	ldr	r3, [pc, #232]	@ (800206c <Controler+0x2e4>)
 8001f82:	edd3 7a00 	vldr	s15, [r3]
 8001f86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f8a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f8e:	ee17 2a90 	vmov	r2, s15
 8001f92:	4b38      	ldr	r3, [pc, #224]	@ (8002074 <Controler+0x2ec>)
 8001f94:	601a      	str	r2, [r3, #0]
		}


		/* Sending pulse to motor */

		if(Xdata>128){
 8001f96:	4b31      	ldr	r3, [pc, #196]	@ (800205c <Controler+0x2d4>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	2b80      	cmp	r3, #128	@ 0x80
 8001f9c:	dd0a      	ble.n	8001fb4 <Controler+0x22c>
			sendPulseMotor = Xpulse;
 8001f9e:	4b34      	ldr	r3, [pc, #208]	@ (8002070 <Controler+0x2e8>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4a36      	ldr	r2, [pc, #216]	@ (800207c <Controler+0x2f4>)
 8001fa4:	6013      	str	r3, [r2, #0]
			Droite(sendPulseMotor,&htim3);
 8001fa6:	4b35      	ldr	r3, [pc, #212]	@ (800207c <Controler+0x2f4>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	492e      	ldr	r1, [pc, #184]	@ (8002064 <Controler+0x2dc>)
 8001fac:	4618      	mov	r0, r3
 8001fae:	f7ff fae7 	bl	8001580 <Droite>
 8001fb2:	e010      	b.n	8001fd6 <Controler+0x24e>
		}

		else if(Xdata<128) {
 8001fb4:	4b29      	ldr	r3, [pc, #164]	@ (800205c <Controler+0x2d4>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	2b7f      	cmp	r3, #127	@ 0x7f
 8001fba:	dc0c      	bgt.n	8001fd6 <Controler+0x24e>
				sendPulseMotor = maxInverse - Xpulse;
 8001fbc:	4b2e      	ldr	r3, [pc, #184]	@ (8002078 <Controler+0x2f0>)
 8001fbe:	681a      	ldr	r2, [r3, #0]
 8001fc0:	4b2b      	ldr	r3, [pc, #172]	@ (8002070 <Controler+0x2e8>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	1ad3      	subs	r3, r2, r3
 8001fc6:	4a2d      	ldr	r2, [pc, #180]	@ (800207c <Controler+0x2f4>)
 8001fc8:	6013      	str	r3, [r2, #0]
				Gauche(sendPulseMotor,&htim3);
 8001fca:	4b2c      	ldr	r3, [pc, #176]	@ (800207c <Controler+0x2f4>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4925      	ldr	r1, [pc, #148]	@ (8002064 <Controler+0x2dc>)
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f7ff fb0d 	bl	80015f0 <Gauche>
			}


		if(Ydata>128){
 8001fd6:	4b22      	ldr	r3, [pc, #136]	@ (8002060 <Controler+0x2d8>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	2b80      	cmp	r3, #128	@ 0x80
 8001fdc:	dd0a      	ble.n	8001ff4 <Controler+0x26c>
			sendPulseMotor = Ypulse;
 8001fde:	4b25      	ldr	r3, [pc, #148]	@ (8002074 <Controler+0x2ec>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4a26      	ldr	r2, [pc, #152]	@ (800207c <Controler+0x2f4>)
 8001fe4:	6013      	str	r3, [r2, #0]
			Avancer(sendPulseMotor,&htim3);
 8001fe6:	4b25      	ldr	r3, [pc, #148]	@ (800207c <Controler+0x2f4>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	491e      	ldr	r1, [pc, #120]	@ (8002064 <Controler+0x2dc>)
 8001fec:	4618      	mov	r0, r3
 8001fee:	f7ff fa8f 	bl	8001510 <Avancer>
 8001ff2:	e010      	b.n	8002016 <Controler+0x28e>
		}

		else if(Ydata<128){
 8001ff4:	4b1a      	ldr	r3, [pc, #104]	@ (8002060 <Controler+0x2d8>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	2b7f      	cmp	r3, #127	@ 0x7f
 8001ffa:	dc0c      	bgt.n	8002016 <Controler+0x28e>
				sendPulseMotor = maxInverse - Ypulse;
 8001ffc:	4b1e      	ldr	r3, [pc, #120]	@ (8002078 <Controler+0x2f0>)
 8001ffe:	681a      	ldr	r2, [r3, #0]
 8002000:	4b1c      	ldr	r3, [pc, #112]	@ (8002074 <Controler+0x2ec>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	1ad3      	subs	r3, r2, r3
 8002006:	4a1d      	ldr	r2, [pc, #116]	@ (800207c <Controler+0x2f4>)
 8002008:	6013      	str	r3, [r2, #0]
				Reculer(sendPulseMotor,&htim3);
 800200a:	4b1c      	ldr	r3, [pc, #112]	@ (800207c <Controler+0x2f4>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4915      	ldr	r1, [pc, #84]	@ (8002064 <Controler+0x2dc>)
 8002010:	4618      	mov	r0, r3
 8002012:	f7ff fb25 	bl	8001660 <Reculer>
			}
		}


		if(Zbutton == 0){
 8002016:	4b1a      	ldr	r3, [pc, #104]	@ (8002080 <Controler+0x2f8>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d10b      	bne.n	8002036 <Controler+0x2ae>
			ToggleModeVit();
 800201e:	f000 f831 	bl	8002084 <ToggleModeVit>
		if(Zbutton == 0){
			ToggleModeVit();
		}

	}
}
 8002022:	e008      	b.n	8002036 <Controler+0x2ae>
		Stop(&htim3);
 8002024:	480f      	ldr	r0, [pc, #60]	@ (8002064 <Controler+0x2dc>)
 8002026:	f7ff fb53 	bl	80016d0 <Stop>
		if(Zbutton == 0){
 800202a:	4b15      	ldr	r3, [pc, #84]	@ (8002080 <Controler+0x2f8>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d101      	bne.n	8002036 <Controler+0x2ae>
			ToggleModeVit();
 8002032:	f000 f827 	bl	8002084 <ToggleModeVit>
}
 8002036:	bf00      	nop
 8002038:	46bd      	mov	sp, r7
 800203a:	bdb0      	pop	{r4, r5, r7, pc}
 800203c:	f3af 8000 	nop.w
 8002040:	51eb851f 	.word	0x51eb851f
 8002044:	3fd51eb8 	.word	0x3fd51eb8
 8002048:	51eb851f 	.word	0x51eb851f
 800204c:	3fe51eb8 	.word	0x3fe51eb8
 8002050:	200000dc 	.word	0x200000dc
 8002054:	2000013c 	.word	0x2000013c
 8002058:	20000170 	.word	0x20000170
 800205c:	20000160 	.word	0x20000160
 8002060:	20000164 	.word	0x20000164
 8002064:	200001d8 	.word	0x200001d8
 8002068:	2000000c 	.word	0x2000000c
 800206c:	20000010 	.word	0x20000010
 8002070:	20000168 	.word	0x20000168
 8002074:	2000016c 	.word	0x2000016c
 8002078:	20000014 	.word	0x20000014
 800207c:	20000178 	.word	0x20000178
 8002080:	20000174 	.word	0x20000174

08002084 <ToggleModeVit>:

void ToggleModeVit() {
 8002084:	b480      	push	{r7}
 8002086:	af00      	add	r7, sp, #0
	if(modeVitesse == 3) {
 8002088:	4b08      	ldr	r3, [pc, #32]	@ (80020ac <ToggleModeVit+0x28>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	2b03      	cmp	r3, #3
 800208e:	d103      	bne.n	8002098 <ToggleModeVit+0x14>
		modeVitesse = 1;
 8002090:	4b06      	ldr	r3, [pc, #24]	@ (80020ac <ToggleModeVit+0x28>)
 8002092:	2201      	movs	r2, #1
 8002094:	601a      	str	r2, [r3, #0]
	}
	else {
		modeVitesse++;
	}
}
 8002096:	e004      	b.n	80020a2 <ToggleModeVit+0x1e>
		modeVitesse++;
 8002098:	4b04      	ldr	r3, [pc, #16]	@ (80020ac <ToggleModeVit+0x28>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	3301      	adds	r3, #1
 800209e:	4a03      	ldr	r2, [pc, #12]	@ (80020ac <ToggleModeVit+0x28>)
 80020a0:	6013      	str	r3, [r2, #0]
}
 80020a2:	bf00      	nop
 80020a4:	46bd      	mov	sp, r7
 80020a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020aa:	4770      	bx	lr
 80020ac:	2000000c 	.word	0x2000000c

080020b0 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80020b4:	4b18      	ldr	r3, [pc, #96]	@ (8002118 <MX_SPI2_Init+0x68>)
 80020b6:	4a19      	ldr	r2, [pc, #100]	@ (800211c <MX_SPI2_Init+0x6c>)
 80020b8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80020ba:	4b17      	ldr	r3, [pc, #92]	@ (8002118 <MX_SPI2_Init+0x68>)
 80020bc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80020c0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_1LINE;
 80020c2:	4b15      	ldr	r3, [pc, #84]	@ (8002118 <MX_SPI2_Init+0x68>)
 80020c4:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80020c8:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80020ca:	4b13      	ldr	r3, [pc, #76]	@ (8002118 <MX_SPI2_Init+0x68>)
 80020cc:	2200      	movs	r2, #0
 80020ce:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80020d0:	4b11      	ldr	r3, [pc, #68]	@ (8002118 <MX_SPI2_Init+0x68>)
 80020d2:	2200      	movs	r2, #0
 80020d4:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80020d6:	4b10      	ldr	r3, [pc, #64]	@ (8002118 <MX_SPI2_Init+0x68>)
 80020d8:	2200      	movs	r2, #0
 80020da:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80020dc:	4b0e      	ldr	r3, [pc, #56]	@ (8002118 <MX_SPI2_Init+0x68>)
 80020de:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80020e2:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80020e4:	4b0c      	ldr	r3, [pc, #48]	@ (8002118 <MX_SPI2_Init+0x68>)
 80020e6:	2208      	movs	r2, #8
 80020e8:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80020ea:	4b0b      	ldr	r3, [pc, #44]	@ (8002118 <MX_SPI2_Init+0x68>)
 80020ec:	2200      	movs	r2, #0
 80020ee:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80020f0:	4b09      	ldr	r3, [pc, #36]	@ (8002118 <MX_SPI2_Init+0x68>)
 80020f2:	2200      	movs	r2, #0
 80020f4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80020f6:	4b08      	ldr	r3, [pc, #32]	@ (8002118 <MX_SPI2_Init+0x68>)
 80020f8:	2200      	movs	r2, #0
 80020fa:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 80020fc:	4b06      	ldr	r3, [pc, #24]	@ (8002118 <MX_SPI2_Init+0x68>)
 80020fe:	220a      	movs	r2, #10
 8002100:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002102:	4805      	ldr	r0, [pc, #20]	@ (8002118 <MX_SPI2_Init+0x68>)
 8002104:	f002 ff28 	bl	8004f58 <HAL_SPI_Init>
 8002108:	4603      	mov	r3, r0
 800210a:	2b00      	cmp	r3, #0
 800210c:	d001      	beq.n	8002112 <MX_SPI2_Init+0x62>
  {
    Error_Handler();
 800210e:	f7ff fdbf 	bl	8001c90 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002112:	bf00      	nop
 8002114:	bd80      	pop	{r7, pc}
 8002116:	bf00      	nop
 8002118:	2000017c 	.word	0x2000017c
 800211c:	40003800 	.word	0x40003800

08002120 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b08a      	sub	sp, #40	@ 0x28
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002128:	f107 0314 	add.w	r3, r7, #20
 800212c:	2200      	movs	r2, #0
 800212e:	601a      	str	r2, [r3, #0]
 8002130:	605a      	str	r2, [r3, #4]
 8002132:	609a      	str	r2, [r3, #8]
 8002134:	60da      	str	r2, [r3, #12]
 8002136:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a28      	ldr	r2, [pc, #160]	@ (80021e0 <HAL_SPI_MspInit+0xc0>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d14a      	bne.n	80021d8 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002142:	2300      	movs	r3, #0
 8002144:	613b      	str	r3, [r7, #16]
 8002146:	4b27      	ldr	r3, [pc, #156]	@ (80021e4 <HAL_SPI_MspInit+0xc4>)
 8002148:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800214a:	4a26      	ldr	r2, [pc, #152]	@ (80021e4 <HAL_SPI_MspInit+0xc4>)
 800214c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002150:	6413      	str	r3, [r2, #64]	@ 0x40
 8002152:	4b24      	ldr	r3, [pc, #144]	@ (80021e4 <HAL_SPI_MspInit+0xc4>)
 8002154:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002156:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800215a:	613b      	str	r3, [r7, #16]
 800215c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800215e:	2300      	movs	r3, #0
 8002160:	60fb      	str	r3, [r7, #12]
 8002162:	4b20      	ldr	r3, [pc, #128]	@ (80021e4 <HAL_SPI_MspInit+0xc4>)
 8002164:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002166:	4a1f      	ldr	r2, [pc, #124]	@ (80021e4 <HAL_SPI_MspInit+0xc4>)
 8002168:	f043 0304 	orr.w	r3, r3, #4
 800216c:	6313      	str	r3, [r2, #48]	@ 0x30
 800216e:	4b1d      	ldr	r3, [pc, #116]	@ (80021e4 <HAL_SPI_MspInit+0xc4>)
 8002170:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002172:	f003 0304 	and.w	r3, r3, #4
 8002176:	60fb      	str	r3, [r7, #12]
 8002178:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800217a:	2300      	movs	r3, #0
 800217c:	60bb      	str	r3, [r7, #8]
 800217e:	4b19      	ldr	r3, [pc, #100]	@ (80021e4 <HAL_SPI_MspInit+0xc4>)
 8002180:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002182:	4a18      	ldr	r2, [pc, #96]	@ (80021e4 <HAL_SPI_MspInit+0xc4>)
 8002184:	f043 0302 	orr.w	r3, r3, #2
 8002188:	6313      	str	r3, [r2, #48]	@ 0x30
 800218a:	4b16      	ldr	r3, [pc, #88]	@ (80021e4 <HAL_SPI_MspInit+0xc4>)
 800218c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800218e:	f003 0302 	and.w	r3, r3, #2
 8002192:	60bb      	str	r3, [r7, #8]
 8002194:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC1     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002196:	2302      	movs	r3, #2
 8002198:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800219a:	2302      	movs	r3, #2
 800219c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800219e:	2300      	movs	r3, #0
 80021a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021a2:	2303      	movs	r3, #3
 80021a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 80021a6:	2307      	movs	r3, #7
 80021a8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021aa:	f107 0314 	add.w	r3, r7, #20
 80021ae:	4619      	mov	r1, r3
 80021b0:	480d      	ldr	r0, [pc, #52]	@ (80021e8 <HAL_SPI_MspInit+0xc8>)
 80021b2:	f000 ff11 	bl	8002fd8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80021b6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80021ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021bc:	2302      	movs	r3, #2
 80021be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021c0:	2300      	movs	r3, #0
 80021c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021c4:	2303      	movs	r3, #3
 80021c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80021c8:	2305      	movs	r3, #5
 80021ca:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021cc:	f107 0314 	add.w	r3, r7, #20
 80021d0:	4619      	mov	r1, r3
 80021d2:	4806      	ldr	r0, [pc, #24]	@ (80021ec <HAL_SPI_MspInit+0xcc>)
 80021d4:	f000 ff00 	bl	8002fd8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80021d8:	bf00      	nop
 80021da:	3728      	adds	r7, #40	@ 0x28
 80021dc:	46bd      	mov	sp, r7
 80021de:	bd80      	pop	{r7, pc}
 80021e0:	40003800 	.word	0x40003800
 80021e4:	40023800 	.word	0x40023800
 80021e8:	40020800 	.word	0x40020800
 80021ec:	40020400 	.word	0x40020400

080021f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b082      	sub	sp, #8
 80021f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021f6:	2300      	movs	r3, #0
 80021f8:	607b      	str	r3, [r7, #4]
 80021fa:	4b10      	ldr	r3, [pc, #64]	@ (800223c <HAL_MspInit+0x4c>)
 80021fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021fe:	4a0f      	ldr	r2, [pc, #60]	@ (800223c <HAL_MspInit+0x4c>)
 8002200:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002204:	6453      	str	r3, [r2, #68]	@ 0x44
 8002206:	4b0d      	ldr	r3, [pc, #52]	@ (800223c <HAL_MspInit+0x4c>)
 8002208:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800220a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800220e:	607b      	str	r3, [r7, #4]
 8002210:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002212:	2300      	movs	r3, #0
 8002214:	603b      	str	r3, [r7, #0]
 8002216:	4b09      	ldr	r3, [pc, #36]	@ (800223c <HAL_MspInit+0x4c>)
 8002218:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800221a:	4a08      	ldr	r2, [pc, #32]	@ (800223c <HAL_MspInit+0x4c>)
 800221c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002220:	6413      	str	r3, [r2, #64]	@ 0x40
 8002222:	4b06      	ldr	r3, [pc, #24]	@ (800223c <HAL_MspInit+0x4c>)
 8002224:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002226:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800222a:	603b      	str	r3, [r7, #0]
 800222c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800222e:	2007      	movs	r0, #7
 8002230:	f000 fe90 	bl	8002f54 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002234:	bf00      	nop
 8002236:	3708      	adds	r7, #8
 8002238:	46bd      	mov	sp, r7
 800223a:	bd80      	pop	{r7, pc}
 800223c:	40023800 	.word	0x40023800

08002240 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002240:	b480      	push	{r7}
 8002242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002244:	bf00      	nop
 8002246:	e7fd      	b.n	8002244 <NMI_Handler+0x4>

08002248 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002248:	b480      	push	{r7}
 800224a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800224c:	bf00      	nop
 800224e:	e7fd      	b.n	800224c <HardFault_Handler+0x4>

08002250 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002250:	b480      	push	{r7}
 8002252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002254:	bf00      	nop
 8002256:	e7fd      	b.n	8002254 <MemManage_Handler+0x4>

08002258 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002258:	b480      	push	{r7}
 800225a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800225c:	bf00      	nop
 800225e:	e7fd      	b.n	800225c <BusFault_Handler+0x4>

08002260 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002260:	b480      	push	{r7}
 8002262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002264:	bf00      	nop
 8002266:	e7fd      	b.n	8002264 <UsageFault_Handler+0x4>

08002268 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002268:	b480      	push	{r7}
 800226a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800226c:	bf00      	nop
 800226e:	46bd      	mov	sp, r7
 8002270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002274:	4770      	bx	lr

08002276 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002276:	b480      	push	{r7}
 8002278:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800227a:	bf00      	nop
 800227c:	46bd      	mov	sp, r7
 800227e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002282:	4770      	bx	lr

08002284 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002284:	b480      	push	{r7}
 8002286:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002288:	bf00      	nop
 800228a:	46bd      	mov	sp, r7
 800228c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002290:	4770      	bx	lr

08002292 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002292:	b580      	push	{r7, lr}
 8002294:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002296:	f000 fd49 	bl	8002d2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800229a:	bf00      	nop
 800229c:	bd80      	pop	{r7, pc}

0800229e <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800229e:	b580      	push	{r7, lr}
 80022a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Encodeur_G_A_Pin);
 80022a2:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80022a6:	f001 f85d 	bl	8003364 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Encodeur_D_A_Pin);
 80022aa:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80022ae:	f001 f859 	bl	8003364 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80022b2:	bf00      	nop
 80022b4:	bd80      	pop	{r7, pc}

080022b6 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80022b6:	b580      	push	{r7, lr}
 80022b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Blue_Button_Pin);
 80022ba:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80022be:	f001 f851 	bl	8003364 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80022c2:	bf00      	nop
 80022c4:	bd80      	pop	{r7, pc}
	...

080022c8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80022cc:	4802      	ldr	r0, [pc, #8]	@ (80022d8 <TIM6_DAC_IRQHandler+0x10>)
 80022ce:	f003 fb6d 	bl	80059ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80022d2:	bf00      	nop
 80022d4:	bd80      	pop	{r7, pc}
 80022d6:	bf00      	nop
 80022d8:	20000268 	.word	0x20000268

080022dc <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80022e0:	4802      	ldr	r0, [pc, #8]	@ (80022ec <TIM7_IRQHandler+0x10>)
 80022e2:	f003 fb63 	bl	80059ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80022e6:	bf00      	nop
 80022e8:	bd80      	pop	{r7, pc}
 80022ea:	bf00      	nop
 80022ec:	200002b0 	.word	0x200002b0

080022f0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b086      	sub	sp, #24
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	60f8      	str	r0, [r7, #12]
 80022f8:	60b9      	str	r1, [r7, #8]
 80022fa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022fc:	2300      	movs	r3, #0
 80022fe:	617b      	str	r3, [r7, #20]
 8002300:	e00a      	b.n	8002318 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002302:	f3af 8000 	nop.w
 8002306:	4601      	mov	r1, r0
 8002308:	68bb      	ldr	r3, [r7, #8]
 800230a:	1c5a      	adds	r2, r3, #1
 800230c:	60ba      	str	r2, [r7, #8]
 800230e:	b2ca      	uxtb	r2, r1
 8002310:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002312:	697b      	ldr	r3, [r7, #20]
 8002314:	3301      	adds	r3, #1
 8002316:	617b      	str	r3, [r7, #20]
 8002318:	697a      	ldr	r2, [r7, #20]
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	429a      	cmp	r2, r3
 800231e:	dbf0      	blt.n	8002302 <_read+0x12>
  }

  return len;
 8002320:	687b      	ldr	r3, [r7, #4]
}
 8002322:	4618      	mov	r0, r3
 8002324:	3718      	adds	r7, #24
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}

0800232a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800232a:	b580      	push	{r7, lr}
 800232c:	b086      	sub	sp, #24
 800232e:	af00      	add	r7, sp, #0
 8002330:	60f8      	str	r0, [r7, #12]
 8002332:	60b9      	str	r1, [r7, #8]
 8002334:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002336:	2300      	movs	r3, #0
 8002338:	617b      	str	r3, [r7, #20]
 800233a:	e009      	b.n	8002350 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800233c:	68bb      	ldr	r3, [r7, #8]
 800233e:	1c5a      	adds	r2, r3, #1
 8002340:	60ba      	str	r2, [r7, #8]
 8002342:	781b      	ldrb	r3, [r3, #0]
 8002344:	4618      	mov	r0, r3
 8002346:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800234a:	697b      	ldr	r3, [r7, #20]
 800234c:	3301      	adds	r3, #1
 800234e:	617b      	str	r3, [r7, #20]
 8002350:	697a      	ldr	r2, [r7, #20]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	429a      	cmp	r2, r3
 8002356:	dbf1      	blt.n	800233c <_write+0x12>
  }
  return len;
 8002358:	687b      	ldr	r3, [r7, #4]
}
 800235a:	4618      	mov	r0, r3
 800235c:	3718      	adds	r7, #24
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}

08002362 <_close>:

int _close(int file)
{
 8002362:	b480      	push	{r7}
 8002364:	b083      	sub	sp, #12
 8002366:	af00      	add	r7, sp, #0
 8002368:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800236a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800236e:	4618      	mov	r0, r3
 8002370:	370c      	adds	r7, #12
 8002372:	46bd      	mov	sp, r7
 8002374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002378:	4770      	bx	lr

0800237a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800237a:	b480      	push	{r7}
 800237c:	b083      	sub	sp, #12
 800237e:	af00      	add	r7, sp, #0
 8002380:	6078      	str	r0, [r7, #4]
 8002382:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800238a:	605a      	str	r2, [r3, #4]
  return 0;
 800238c:	2300      	movs	r3, #0
}
 800238e:	4618      	mov	r0, r3
 8002390:	370c      	adds	r7, #12
 8002392:	46bd      	mov	sp, r7
 8002394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002398:	4770      	bx	lr

0800239a <_isatty>:

int _isatty(int file)
{
 800239a:	b480      	push	{r7}
 800239c:	b083      	sub	sp, #12
 800239e:	af00      	add	r7, sp, #0
 80023a0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80023a2:	2301      	movs	r3, #1
}
 80023a4:	4618      	mov	r0, r3
 80023a6:	370c      	adds	r7, #12
 80023a8:	46bd      	mov	sp, r7
 80023aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ae:	4770      	bx	lr

080023b0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b085      	sub	sp, #20
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	60f8      	str	r0, [r7, #12]
 80023b8:	60b9      	str	r1, [r7, #8]
 80023ba:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80023bc:	2300      	movs	r3, #0
}
 80023be:	4618      	mov	r0, r3
 80023c0:	3714      	adds	r7, #20
 80023c2:	46bd      	mov	sp, r7
 80023c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c8:	4770      	bx	lr
	...

080023cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b086      	sub	sp, #24
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80023d4:	4a14      	ldr	r2, [pc, #80]	@ (8002428 <_sbrk+0x5c>)
 80023d6:	4b15      	ldr	r3, [pc, #84]	@ (800242c <_sbrk+0x60>)
 80023d8:	1ad3      	subs	r3, r2, r3
 80023da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80023dc:	697b      	ldr	r3, [r7, #20]
 80023de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80023e0:	4b13      	ldr	r3, [pc, #76]	@ (8002430 <_sbrk+0x64>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d102      	bne.n	80023ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80023e8:	4b11      	ldr	r3, [pc, #68]	@ (8002430 <_sbrk+0x64>)
 80023ea:	4a12      	ldr	r2, [pc, #72]	@ (8002434 <_sbrk+0x68>)
 80023ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80023ee:	4b10      	ldr	r3, [pc, #64]	@ (8002430 <_sbrk+0x64>)
 80023f0:	681a      	ldr	r2, [r3, #0]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	4413      	add	r3, r2
 80023f6:	693a      	ldr	r2, [r7, #16]
 80023f8:	429a      	cmp	r2, r3
 80023fa:	d207      	bcs.n	800240c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80023fc:	f005 fbe4 	bl	8007bc8 <__errno>
 8002400:	4603      	mov	r3, r0
 8002402:	220c      	movs	r2, #12
 8002404:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002406:	f04f 33ff 	mov.w	r3, #4294967295
 800240a:	e009      	b.n	8002420 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800240c:	4b08      	ldr	r3, [pc, #32]	@ (8002430 <_sbrk+0x64>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002412:	4b07      	ldr	r3, [pc, #28]	@ (8002430 <_sbrk+0x64>)
 8002414:	681a      	ldr	r2, [r3, #0]
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	4413      	add	r3, r2
 800241a:	4a05      	ldr	r2, [pc, #20]	@ (8002430 <_sbrk+0x64>)
 800241c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800241e:	68fb      	ldr	r3, [r7, #12]
}
 8002420:	4618      	mov	r0, r3
 8002422:	3718      	adds	r7, #24
 8002424:	46bd      	mov	sp, r7
 8002426:	bd80      	pop	{r7, pc}
 8002428:	20020000 	.word	0x20020000
 800242c:	00000400 	.word	0x00000400
 8002430:	200001d4 	.word	0x200001d4
 8002434:	200004b0 	.word	0x200004b0

08002438 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002438:	b480      	push	{r7}
 800243a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800243c:	4b06      	ldr	r3, [pc, #24]	@ (8002458 <SystemInit+0x20>)
 800243e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002442:	4a05      	ldr	r2, [pc, #20]	@ (8002458 <SystemInit+0x20>)
 8002444:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002448:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800244c:	bf00      	nop
 800244e:	46bd      	mov	sp, r7
 8002450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002454:	4770      	bx	lr
 8002456:	bf00      	nop
 8002458:	e000ed00 	.word	0xe000ed00

0800245c <MX_TIM3_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim7;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b08e      	sub	sp, #56	@ 0x38
 8002460:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002462:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002466:	2200      	movs	r2, #0
 8002468:	601a      	str	r2, [r3, #0]
 800246a:	605a      	str	r2, [r3, #4]
 800246c:	609a      	str	r2, [r3, #8]
 800246e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002470:	f107 0320 	add.w	r3, r7, #32
 8002474:	2200      	movs	r2, #0
 8002476:	601a      	str	r2, [r3, #0]
 8002478:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800247a:	1d3b      	adds	r3, r7, #4
 800247c:	2200      	movs	r2, #0
 800247e:	601a      	str	r2, [r3, #0]
 8002480:	605a      	str	r2, [r3, #4]
 8002482:	609a      	str	r2, [r3, #8]
 8002484:	60da      	str	r2, [r3, #12]
 8002486:	611a      	str	r2, [r3, #16]
 8002488:	615a      	str	r2, [r3, #20]
 800248a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800248c:	4b3d      	ldr	r3, [pc, #244]	@ (8002584 <MX_TIM3_Init+0x128>)
 800248e:	4a3e      	ldr	r2, [pc, #248]	@ (8002588 <MX_TIM3_Init+0x12c>)
 8002490:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84-1;
 8002492:	4b3c      	ldr	r3, [pc, #240]	@ (8002584 <MX_TIM3_Init+0x128>)
 8002494:	2253      	movs	r2, #83	@ 0x53
 8002496:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002498:	4b3a      	ldr	r3, [pc, #232]	@ (8002584 <MX_TIM3_Init+0x128>)
 800249a:	2200      	movs	r2, #0
 800249c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 500-1;
 800249e:	4b39      	ldr	r3, [pc, #228]	@ (8002584 <MX_TIM3_Init+0x128>)
 80024a0:	f240 12f3 	movw	r2, #499	@ 0x1f3
 80024a4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024a6:	4b37      	ldr	r3, [pc, #220]	@ (8002584 <MX_TIM3_Init+0x128>)
 80024a8:	2200      	movs	r2, #0
 80024aa:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024ac:	4b35      	ldr	r3, [pc, #212]	@ (8002584 <MX_TIM3_Init+0x128>)
 80024ae:	2200      	movs	r2, #0
 80024b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80024b2:	4834      	ldr	r0, [pc, #208]	@ (8002584 <MX_TIM3_Init+0x128>)
 80024b4:	f002 fffa 	bl	80054ac <HAL_TIM_Base_Init>
 80024b8:	4603      	mov	r3, r0
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d001      	beq.n	80024c2 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80024be:	f7ff fbe7 	bl	8001c90 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80024c2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80024c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80024c8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80024cc:	4619      	mov	r1, r3
 80024ce:	482d      	ldr	r0, [pc, #180]	@ (8002584 <MX_TIM3_Init+0x128>)
 80024d0:	f003 fc1e 	bl	8005d10 <HAL_TIM_ConfigClockSource>
 80024d4:	4603      	mov	r3, r0
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d001      	beq.n	80024de <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80024da:	f7ff fbd9 	bl	8001c90 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80024de:	4829      	ldr	r0, [pc, #164]	@ (8002584 <MX_TIM3_Init+0x128>)
 80024e0:	f003 f8d3 	bl	800568a <HAL_TIM_PWM_Init>
 80024e4:	4603      	mov	r3, r0
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d001      	beq.n	80024ee <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80024ea:	f7ff fbd1 	bl	8001c90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024ee:	2300      	movs	r3, #0
 80024f0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024f2:	2300      	movs	r3, #0
 80024f4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80024f6:	f107 0320 	add.w	r3, r7, #32
 80024fa:	4619      	mov	r1, r3
 80024fc:	4821      	ldr	r0, [pc, #132]	@ (8002584 <MX_TIM3_Init+0x128>)
 80024fe:	f004 f813 	bl	8006528 <HAL_TIMEx_MasterConfigSynchronization>
 8002502:	4603      	mov	r3, r0
 8002504:	2b00      	cmp	r3, #0
 8002506:	d001      	beq.n	800250c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8002508:	f7ff fbc2 	bl	8001c90 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800250c:	2360      	movs	r3, #96	@ 0x60
 800250e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002510:	2300      	movs	r3, #0
 8002512:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002514:	2300      	movs	r3, #0
 8002516:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002518:	2300      	movs	r3, #0
 800251a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800251c:	1d3b      	adds	r3, r7, #4
 800251e:	2200      	movs	r2, #0
 8002520:	4619      	mov	r1, r3
 8002522:	4818      	ldr	r0, [pc, #96]	@ (8002584 <MX_TIM3_Init+0x128>)
 8002524:	f003 fb32 	bl	8005b8c <HAL_TIM_PWM_ConfigChannel>
 8002528:	4603      	mov	r3, r0
 800252a:	2b00      	cmp	r3, #0
 800252c:	d001      	beq.n	8002532 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800252e:	f7ff fbaf 	bl	8001c90 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002532:	1d3b      	adds	r3, r7, #4
 8002534:	2204      	movs	r2, #4
 8002536:	4619      	mov	r1, r3
 8002538:	4812      	ldr	r0, [pc, #72]	@ (8002584 <MX_TIM3_Init+0x128>)
 800253a:	f003 fb27 	bl	8005b8c <HAL_TIM_PWM_ConfigChannel>
 800253e:	4603      	mov	r3, r0
 8002540:	2b00      	cmp	r3, #0
 8002542:	d001      	beq.n	8002548 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8002544:	f7ff fba4 	bl	8001c90 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002548:	1d3b      	adds	r3, r7, #4
 800254a:	2208      	movs	r2, #8
 800254c:	4619      	mov	r1, r3
 800254e:	480d      	ldr	r0, [pc, #52]	@ (8002584 <MX_TIM3_Init+0x128>)
 8002550:	f003 fb1c 	bl	8005b8c <HAL_TIM_PWM_ConfigChannel>
 8002554:	4603      	mov	r3, r0
 8002556:	2b00      	cmp	r3, #0
 8002558:	d001      	beq.n	800255e <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 800255a:	f7ff fb99 	bl	8001c90 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800255e:	1d3b      	adds	r3, r7, #4
 8002560:	220c      	movs	r2, #12
 8002562:	4619      	mov	r1, r3
 8002564:	4807      	ldr	r0, [pc, #28]	@ (8002584 <MX_TIM3_Init+0x128>)
 8002566:	f003 fb11 	bl	8005b8c <HAL_TIM_PWM_ConfigChannel>
 800256a:	4603      	mov	r3, r0
 800256c:	2b00      	cmp	r3, #0
 800256e:	d001      	beq.n	8002574 <MX_TIM3_Init+0x118>
  {
    Error_Handler();
 8002570:	f7ff fb8e 	bl	8001c90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002574:	4803      	ldr	r0, [pc, #12]	@ (8002584 <MX_TIM3_Init+0x128>)
 8002576:	f000 f95d 	bl	8002834 <HAL_TIM_MspPostInit>

}
 800257a:	bf00      	nop
 800257c:	3738      	adds	r7, #56	@ 0x38
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}
 8002582:	bf00      	nop
 8002584:	200001d8 	.word	0x200001d8
 8002588:	40000400 	.word	0x40000400

0800258c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b08e      	sub	sp, #56	@ 0x38
 8002590:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002592:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002596:	2200      	movs	r2, #0
 8002598:	601a      	str	r2, [r3, #0]
 800259a:	605a      	str	r2, [r3, #4]
 800259c:	609a      	str	r2, [r3, #8]
 800259e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025a0:	f107 0320 	add.w	r3, r7, #32
 80025a4:	2200      	movs	r2, #0
 80025a6:	601a      	str	r2, [r3, #0]
 80025a8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80025aa:	1d3b      	adds	r3, r7, #4
 80025ac:	2200      	movs	r2, #0
 80025ae:	601a      	str	r2, [r3, #0]
 80025b0:	605a      	str	r2, [r3, #4]
 80025b2:	609a      	str	r2, [r3, #8]
 80025b4:	60da      	str	r2, [r3, #12]
 80025b6:	611a      	str	r2, [r3, #16]
 80025b8:	615a      	str	r2, [r3, #20]
 80025ba:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80025bc:	4b2d      	ldr	r3, [pc, #180]	@ (8002674 <MX_TIM4_Init+0xe8>)
 80025be:	4a2e      	ldr	r2, [pc, #184]	@ (8002678 <MX_TIM4_Init+0xec>)
 80025c0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 300-1;
 80025c2:	4b2c      	ldr	r3, [pc, #176]	@ (8002674 <MX_TIM4_Init+0xe8>)
 80025c4:	f240 122b 	movw	r2, #299	@ 0x12b
 80025c8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025ca:	4b2a      	ldr	r3, [pc, #168]	@ (8002674 <MX_TIM4_Init+0xe8>)
 80025cc:	2200      	movs	r2, #0
 80025ce:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000-1;
 80025d0:	4b28      	ldr	r3, [pc, #160]	@ (8002674 <MX_TIM4_Init+0xe8>)
 80025d2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80025d6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025d8:	4b26      	ldr	r3, [pc, #152]	@ (8002674 <MX_TIM4_Init+0xe8>)
 80025da:	2200      	movs	r2, #0
 80025dc:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025de:	4b25      	ldr	r3, [pc, #148]	@ (8002674 <MX_TIM4_Init+0xe8>)
 80025e0:	2200      	movs	r2, #0
 80025e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80025e4:	4823      	ldr	r0, [pc, #140]	@ (8002674 <MX_TIM4_Init+0xe8>)
 80025e6:	f002 ff61 	bl	80054ac <HAL_TIM_Base_Init>
 80025ea:	4603      	mov	r3, r0
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d001      	beq.n	80025f4 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 80025f0:	f7ff fb4e 	bl	8001c90 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80025f4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80025f8:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80025fa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80025fe:	4619      	mov	r1, r3
 8002600:	481c      	ldr	r0, [pc, #112]	@ (8002674 <MX_TIM4_Init+0xe8>)
 8002602:	f003 fb85 	bl	8005d10 <HAL_TIM_ConfigClockSource>
 8002606:	4603      	mov	r3, r0
 8002608:	2b00      	cmp	r3, #0
 800260a:	d001      	beq.n	8002610 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 800260c:	f7ff fb40 	bl	8001c90 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002610:	4818      	ldr	r0, [pc, #96]	@ (8002674 <MX_TIM4_Init+0xe8>)
 8002612:	f003 f83a 	bl	800568a <HAL_TIM_PWM_Init>
 8002616:	4603      	mov	r3, r0
 8002618:	2b00      	cmp	r3, #0
 800261a:	d001      	beq.n	8002620 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 800261c:	f7ff fb38 	bl	8001c90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002620:	2300      	movs	r3, #0
 8002622:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002624:	2300      	movs	r3, #0
 8002626:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002628:	f107 0320 	add.w	r3, r7, #32
 800262c:	4619      	mov	r1, r3
 800262e:	4811      	ldr	r0, [pc, #68]	@ (8002674 <MX_TIM4_Init+0xe8>)
 8002630:	f003 ff7a 	bl	8006528 <HAL_TIMEx_MasterConfigSynchronization>
 8002634:	4603      	mov	r3, r0
 8002636:	2b00      	cmp	r3, #0
 8002638:	d001      	beq.n	800263e <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 800263a:	f7ff fb29 	bl	8001c90 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800263e:	2360      	movs	r3, #96	@ 0x60
 8002640:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002642:	2300      	movs	r3, #0
 8002644:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002646:	2300      	movs	r3, #0
 8002648:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800264a:	2300      	movs	r3, #0
 800264c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800264e:	1d3b      	adds	r3, r7, #4
 8002650:	2204      	movs	r2, #4
 8002652:	4619      	mov	r1, r3
 8002654:	4807      	ldr	r0, [pc, #28]	@ (8002674 <MX_TIM4_Init+0xe8>)
 8002656:	f003 fa99 	bl	8005b8c <HAL_TIM_PWM_ConfigChannel>
 800265a:	4603      	mov	r3, r0
 800265c:	2b00      	cmp	r3, #0
 800265e:	d001      	beq.n	8002664 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8002660:	f7ff fb16 	bl	8001c90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002664:	4803      	ldr	r0, [pc, #12]	@ (8002674 <MX_TIM4_Init+0xe8>)
 8002666:	f000 f8e5 	bl	8002834 <HAL_TIM_MspPostInit>

}
 800266a:	bf00      	nop
 800266c:	3738      	adds	r7, #56	@ 0x38
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}
 8002672:	bf00      	nop
 8002674:	20000220 	.word	0x20000220
 8002678:	40000800 	.word	0x40000800

0800267c <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b082      	sub	sp, #8
 8002680:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002682:	463b      	mov	r3, r7
 8002684:	2200      	movs	r2, #0
 8002686:	601a      	str	r2, [r3, #0]
 8002688:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800268a:	4b15      	ldr	r3, [pc, #84]	@ (80026e0 <MX_TIM6_Init+0x64>)
 800268c:	4a15      	ldr	r2, [pc, #84]	@ (80026e4 <MX_TIM6_Init+0x68>)
 800268e:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 42000-1;
 8002690:	4b13      	ldr	r3, [pc, #76]	@ (80026e0 <MX_TIM6_Init+0x64>)
 8002692:	f24a 420f 	movw	r2, #41999	@ 0xa40f
 8002696:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002698:	4b11      	ldr	r3, [pc, #68]	@ (80026e0 <MX_TIM6_Init+0x64>)
 800269a:	2200      	movs	r2, #0
 800269c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 200-1;
 800269e:	4b10      	ldr	r3, [pc, #64]	@ (80026e0 <MX_TIM6_Init+0x64>)
 80026a0:	22c7      	movs	r2, #199	@ 0xc7
 80026a2:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026a4:	4b0e      	ldr	r3, [pc, #56]	@ (80026e0 <MX_TIM6_Init+0x64>)
 80026a6:	2200      	movs	r2, #0
 80026a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80026aa:	480d      	ldr	r0, [pc, #52]	@ (80026e0 <MX_TIM6_Init+0x64>)
 80026ac:	f002 fefe 	bl	80054ac <HAL_TIM_Base_Init>
 80026b0:	4603      	mov	r3, r0
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d001      	beq.n	80026ba <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 80026b6:	f7ff faeb 	bl	8001c90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80026ba:	2320      	movs	r3, #32
 80026bc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026be:	2300      	movs	r3, #0
 80026c0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80026c2:	463b      	mov	r3, r7
 80026c4:	4619      	mov	r1, r3
 80026c6:	4806      	ldr	r0, [pc, #24]	@ (80026e0 <MX_TIM6_Init+0x64>)
 80026c8:	f003 ff2e 	bl	8006528 <HAL_TIMEx_MasterConfigSynchronization>
 80026cc:	4603      	mov	r3, r0
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d001      	beq.n	80026d6 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 80026d2:	f7ff fadd 	bl	8001c90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80026d6:	bf00      	nop
 80026d8:	3708      	adds	r7, #8
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}
 80026de:	bf00      	nop
 80026e0:	20000268 	.word	0x20000268
 80026e4:	40001000 	.word	0x40001000

080026e8 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b082      	sub	sp, #8
 80026ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80026ee:	463b      	mov	r3, r7
 80026f0:	2200      	movs	r2, #0
 80026f2:	601a      	str	r2, [r3, #0]
 80026f4:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80026f6:	4b14      	ldr	r3, [pc, #80]	@ (8002748 <MX_TIM7_Init+0x60>)
 80026f8:	4a14      	ldr	r2, [pc, #80]	@ (800274c <MX_TIM7_Init+0x64>)
 80026fa:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 83;
 80026fc:	4b12      	ldr	r3, [pc, #72]	@ (8002748 <MX_TIM7_Init+0x60>)
 80026fe:	2253      	movs	r2, #83	@ 0x53
 8002700:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002702:	4b11      	ldr	r3, [pc, #68]	@ (8002748 <MX_TIM7_Init+0x60>)
 8002704:	2200      	movs	r2, #0
 8002706:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 9;
 8002708:	4b0f      	ldr	r3, [pc, #60]	@ (8002748 <MX_TIM7_Init+0x60>)
 800270a:	2209      	movs	r2, #9
 800270c:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800270e:	4b0e      	ldr	r3, [pc, #56]	@ (8002748 <MX_TIM7_Init+0x60>)
 8002710:	2200      	movs	r2, #0
 8002712:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8002714:	480c      	ldr	r0, [pc, #48]	@ (8002748 <MX_TIM7_Init+0x60>)
 8002716:	f002 fec9 	bl	80054ac <HAL_TIM_Base_Init>
 800271a:	4603      	mov	r3, r0
 800271c:	2b00      	cmp	r3, #0
 800271e:	d001      	beq.n	8002724 <MX_TIM7_Init+0x3c>
  {
    Error_Handler();
 8002720:	f7ff fab6 	bl	8001c90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002724:	2300      	movs	r3, #0
 8002726:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002728:	2300      	movs	r3, #0
 800272a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800272c:	463b      	mov	r3, r7
 800272e:	4619      	mov	r1, r3
 8002730:	4805      	ldr	r0, [pc, #20]	@ (8002748 <MX_TIM7_Init+0x60>)
 8002732:	f003 fef9 	bl	8006528 <HAL_TIMEx_MasterConfigSynchronization>
 8002736:	4603      	mov	r3, r0
 8002738:	2b00      	cmp	r3, #0
 800273a:	d001      	beq.n	8002740 <MX_TIM7_Init+0x58>
  {
    Error_Handler();
 800273c:	f7ff faa8 	bl	8001c90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8002740:	bf00      	nop
 8002742:	3708      	adds	r7, #8
 8002744:	46bd      	mov	sp, r7
 8002746:	bd80      	pop	{r7, pc}
 8002748:	200002b0 	.word	0x200002b0
 800274c:	40001400 	.word	0x40001400

08002750 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b086      	sub	sp, #24
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a30      	ldr	r2, [pc, #192]	@ (8002820 <HAL_TIM_Base_MspInit+0xd0>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d10e      	bne.n	8002780 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002762:	2300      	movs	r3, #0
 8002764:	617b      	str	r3, [r7, #20]
 8002766:	4b2f      	ldr	r3, [pc, #188]	@ (8002824 <HAL_TIM_Base_MspInit+0xd4>)
 8002768:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800276a:	4a2e      	ldr	r2, [pc, #184]	@ (8002824 <HAL_TIM_Base_MspInit+0xd4>)
 800276c:	f043 0302 	orr.w	r3, r3, #2
 8002770:	6413      	str	r3, [r2, #64]	@ 0x40
 8002772:	4b2c      	ldr	r3, [pc, #176]	@ (8002824 <HAL_TIM_Base_MspInit+0xd4>)
 8002774:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002776:	f003 0302 	and.w	r3, r3, #2
 800277a:	617b      	str	r3, [r7, #20]
 800277c:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 800277e:	e04a      	b.n	8002816 <HAL_TIM_Base_MspInit+0xc6>
  else if(tim_baseHandle->Instance==TIM4)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a28      	ldr	r2, [pc, #160]	@ (8002828 <HAL_TIM_Base_MspInit+0xd8>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d10e      	bne.n	80027a8 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800278a:	2300      	movs	r3, #0
 800278c:	613b      	str	r3, [r7, #16]
 800278e:	4b25      	ldr	r3, [pc, #148]	@ (8002824 <HAL_TIM_Base_MspInit+0xd4>)
 8002790:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002792:	4a24      	ldr	r2, [pc, #144]	@ (8002824 <HAL_TIM_Base_MspInit+0xd4>)
 8002794:	f043 0304 	orr.w	r3, r3, #4
 8002798:	6413      	str	r3, [r2, #64]	@ 0x40
 800279a:	4b22      	ldr	r3, [pc, #136]	@ (8002824 <HAL_TIM_Base_MspInit+0xd4>)
 800279c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800279e:	f003 0304 	and.w	r3, r3, #4
 80027a2:	613b      	str	r3, [r7, #16]
 80027a4:	693b      	ldr	r3, [r7, #16]
}
 80027a6:	e036      	b.n	8002816 <HAL_TIM_Base_MspInit+0xc6>
  else if(tim_baseHandle->Instance==TIM6)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a1f      	ldr	r2, [pc, #124]	@ (800282c <HAL_TIM_Base_MspInit+0xdc>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d116      	bne.n	80027e0 <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80027b2:	2300      	movs	r3, #0
 80027b4:	60fb      	str	r3, [r7, #12]
 80027b6:	4b1b      	ldr	r3, [pc, #108]	@ (8002824 <HAL_TIM_Base_MspInit+0xd4>)
 80027b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027ba:	4a1a      	ldr	r2, [pc, #104]	@ (8002824 <HAL_TIM_Base_MspInit+0xd4>)
 80027bc:	f043 0310 	orr.w	r3, r3, #16
 80027c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80027c2:	4b18      	ldr	r3, [pc, #96]	@ (8002824 <HAL_TIM_Base_MspInit+0xd4>)
 80027c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027c6:	f003 0310 	and.w	r3, r3, #16
 80027ca:	60fb      	str	r3, [r7, #12]
 80027cc:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80027ce:	2200      	movs	r2, #0
 80027d0:	2100      	movs	r1, #0
 80027d2:	2036      	movs	r0, #54	@ 0x36
 80027d4:	f000 fbc9 	bl	8002f6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80027d8:	2036      	movs	r0, #54	@ 0x36
 80027da:	f000 fbe2 	bl	8002fa2 <HAL_NVIC_EnableIRQ>
}
 80027de:	e01a      	b.n	8002816 <HAL_TIM_Base_MspInit+0xc6>
  else if(tim_baseHandle->Instance==TIM7)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a12      	ldr	r2, [pc, #72]	@ (8002830 <HAL_TIM_Base_MspInit+0xe0>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d115      	bne.n	8002816 <HAL_TIM_Base_MspInit+0xc6>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80027ea:	2300      	movs	r3, #0
 80027ec:	60bb      	str	r3, [r7, #8]
 80027ee:	4b0d      	ldr	r3, [pc, #52]	@ (8002824 <HAL_TIM_Base_MspInit+0xd4>)
 80027f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027f2:	4a0c      	ldr	r2, [pc, #48]	@ (8002824 <HAL_TIM_Base_MspInit+0xd4>)
 80027f4:	f043 0320 	orr.w	r3, r3, #32
 80027f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80027fa:	4b0a      	ldr	r3, [pc, #40]	@ (8002824 <HAL_TIM_Base_MspInit+0xd4>)
 80027fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027fe:	f003 0320 	and.w	r3, r3, #32
 8002802:	60bb      	str	r3, [r7, #8]
 8002804:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8002806:	2200      	movs	r2, #0
 8002808:	2100      	movs	r1, #0
 800280a:	2037      	movs	r0, #55	@ 0x37
 800280c:	f000 fbad 	bl	8002f6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002810:	2037      	movs	r0, #55	@ 0x37
 8002812:	f000 fbc6 	bl	8002fa2 <HAL_NVIC_EnableIRQ>
}
 8002816:	bf00      	nop
 8002818:	3718      	adds	r7, #24
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}
 800281e:	bf00      	nop
 8002820:	40000400 	.word	0x40000400
 8002824:	40023800 	.word	0x40023800
 8002828:	40000800 	.word	0x40000800
 800282c:	40001000 	.word	0x40001000
 8002830:	40001400 	.word	0x40001400

08002834 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b08a      	sub	sp, #40	@ 0x28
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800283c:	f107 0314 	add.w	r3, r7, #20
 8002840:	2200      	movs	r2, #0
 8002842:	601a      	str	r2, [r3, #0]
 8002844:	605a      	str	r2, [r3, #4]
 8002846:	609a      	str	r2, [r3, #8]
 8002848:	60da      	str	r2, [r3, #12]
 800284a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a33      	ldr	r2, [pc, #204]	@ (8002920 <HAL_TIM_MspPostInit+0xec>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d13c      	bne.n	80028d0 <HAL_TIM_MspPostInit+0x9c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002856:	2300      	movs	r3, #0
 8002858:	613b      	str	r3, [r7, #16]
 800285a:	4b32      	ldr	r3, [pc, #200]	@ (8002924 <HAL_TIM_MspPostInit+0xf0>)
 800285c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800285e:	4a31      	ldr	r2, [pc, #196]	@ (8002924 <HAL_TIM_MspPostInit+0xf0>)
 8002860:	f043 0301 	orr.w	r3, r3, #1
 8002864:	6313      	str	r3, [r2, #48]	@ 0x30
 8002866:	4b2f      	ldr	r3, [pc, #188]	@ (8002924 <HAL_TIM_MspPostInit+0xf0>)
 8002868:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800286a:	f003 0301 	and.w	r3, r3, #1
 800286e:	613b      	str	r3, [r7, #16]
 8002870:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002872:	2300      	movs	r3, #0
 8002874:	60fb      	str	r3, [r7, #12]
 8002876:	4b2b      	ldr	r3, [pc, #172]	@ (8002924 <HAL_TIM_MspPostInit+0xf0>)
 8002878:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800287a:	4a2a      	ldr	r2, [pc, #168]	@ (8002924 <HAL_TIM_MspPostInit+0xf0>)
 800287c:	f043 0302 	orr.w	r3, r3, #2
 8002880:	6313      	str	r3, [r2, #48]	@ 0x30
 8002882:	4b28      	ldr	r3, [pc, #160]	@ (8002924 <HAL_TIM_MspPostInit+0xf0>)
 8002884:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002886:	f003 0302 	and.w	r3, r3, #2
 800288a:	60fb      	str	r3, [r7, #12]
 800288c:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = Gauche_av_Pin|Gauche_re_Pin;
 800288e:	23c0      	movs	r3, #192	@ 0xc0
 8002890:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002892:	2302      	movs	r3, #2
 8002894:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002896:	2300      	movs	r3, #0
 8002898:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800289a:	2300      	movs	r3, #0
 800289c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800289e:	2302      	movs	r3, #2
 80028a0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028a2:	f107 0314 	add.w	r3, r7, #20
 80028a6:	4619      	mov	r1, r3
 80028a8:	481f      	ldr	r0, [pc, #124]	@ (8002928 <HAL_TIM_MspPostInit+0xf4>)
 80028aa:	f000 fb95 	bl	8002fd8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Droit_av_Pin|Droit_re_Pin;
 80028ae:	2303      	movs	r3, #3
 80028b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028b2:	2302      	movs	r3, #2
 80028b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028b6:	2300      	movs	r3, #0
 80028b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028ba:	2300      	movs	r3, #0
 80028bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80028be:	2302      	movs	r3, #2
 80028c0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028c2:	f107 0314 	add.w	r3, r7, #20
 80028c6:	4619      	mov	r1, r3
 80028c8:	4818      	ldr	r0, [pc, #96]	@ (800292c <HAL_TIM_MspPostInit+0xf8>)
 80028ca:	f000 fb85 	bl	8002fd8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80028ce:	e022      	b.n	8002916 <HAL_TIM_MspPostInit+0xe2>
  else if(timHandle->Instance==TIM4)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a16      	ldr	r2, [pc, #88]	@ (8002930 <HAL_TIM_MspPostInit+0xfc>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d11d      	bne.n	8002916 <HAL_TIM_MspPostInit+0xe2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028da:	2300      	movs	r3, #0
 80028dc:	60bb      	str	r3, [r7, #8]
 80028de:	4b11      	ldr	r3, [pc, #68]	@ (8002924 <HAL_TIM_MspPostInit+0xf0>)
 80028e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028e2:	4a10      	ldr	r2, [pc, #64]	@ (8002924 <HAL_TIM_MspPostInit+0xf0>)
 80028e4:	f043 0302 	orr.w	r3, r3, #2
 80028e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80028ea:	4b0e      	ldr	r3, [pc, #56]	@ (8002924 <HAL_TIM_MspPostInit+0xf0>)
 80028ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028ee:	f003 0302 	and.w	r3, r3, #2
 80028f2:	60bb      	str	r3, [r7, #8]
 80028f4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = LCD_BL_Pin;
 80028f6:	2380      	movs	r3, #128	@ 0x80
 80028f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028fa:	2302      	movs	r3, #2
 80028fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028fe:	2300      	movs	r3, #0
 8002900:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002902:	2300      	movs	r3, #0
 8002904:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002906:	2302      	movs	r3, #2
 8002908:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(LCD_BL_GPIO_Port, &GPIO_InitStruct);
 800290a:	f107 0314 	add.w	r3, r7, #20
 800290e:	4619      	mov	r1, r3
 8002910:	4806      	ldr	r0, [pc, #24]	@ (800292c <HAL_TIM_MspPostInit+0xf8>)
 8002912:	f000 fb61 	bl	8002fd8 <HAL_GPIO_Init>
}
 8002916:	bf00      	nop
 8002918:	3728      	adds	r7, #40	@ 0x28
 800291a:	46bd      	mov	sp, r7
 800291c:	bd80      	pop	{r7, pc}
 800291e:	bf00      	nop
 8002920:	40000400 	.word	0x40000400
 8002924:	40023800 	.word	0x40023800
 8002928:	40020000 	.word	0x40020000
 800292c:	40020400 	.word	0x40020400
 8002930:	40000800 	.word	0x40000800

08002934 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002938:	4b11      	ldr	r3, [pc, #68]	@ (8002980 <MX_USART2_UART_Init+0x4c>)
 800293a:	4a12      	ldr	r2, [pc, #72]	@ (8002984 <MX_USART2_UART_Init+0x50>)
 800293c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800293e:	4b10      	ldr	r3, [pc, #64]	@ (8002980 <MX_USART2_UART_Init+0x4c>)
 8002940:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002944:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002946:	4b0e      	ldr	r3, [pc, #56]	@ (8002980 <MX_USART2_UART_Init+0x4c>)
 8002948:	2200      	movs	r2, #0
 800294a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800294c:	4b0c      	ldr	r3, [pc, #48]	@ (8002980 <MX_USART2_UART_Init+0x4c>)
 800294e:	2200      	movs	r2, #0
 8002950:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002952:	4b0b      	ldr	r3, [pc, #44]	@ (8002980 <MX_USART2_UART_Init+0x4c>)
 8002954:	2200      	movs	r2, #0
 8002956:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002958:	4b09      	ldr	r3, [pc, #36]	@ (8002980 <MX_USART2_UART_Init+0x4c>)
 800295a:	220c      	movs	r2, #12
 800295c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800295e:	4b08      	ldr	r3, [pc, #32]	@ (8002980 <MX_USART2_UART_Init+0x4c>)
 8002960:	2200      	movs	r2, #0
 8002962:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002964:	4b06      	ldr	r3, [pc, #24]	@ (8002980 <MX_USART2_UART_Init+0x4c>)
 8002966:	2200      	movs	r2, #0
 8002968:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800296a:	4805      	ldr	r0, [pc, #20]	@ (8002980 <MX_USART2_UART_Init+0x4c>)
 800296c:	f003 fe6c 	bl	8006648 <HAL_UART_Init>
 8002970:	4603      	mov	r3, r0
 8002972:	2b00      	cmp	r3, #0
 8002974:	d001      	beq.n	800297a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002976:	f7ff f98b 	bl	8001c90 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800297a:	bf00      	nop
 800297c:	bd80      	pop	{r7, pc}
 800297e:	bf00      	nop
 8002980:	200002f8 	.word	0x200002f8
 8002984:	40004400 	.word	0x40004400

08002988 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b08a      	sub	sp, #40	@ 0x28
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002990:	f107 0314 	add.w	r3, r7, #20
 8002994:	2200      	movs	r2, #0
 8002996:	601a      	str	r2, [r3, #0]
 8002998:	605a      	str	r2, [r3, #4]
 800299a:	609a      	str	r2, [r3, #8]
 800299c:	60da      	str	r2, [r3, #12]
 800299e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a19      	ldr	r2, [pc, #100]	@ (8002a0c <HAL_UART_MspInit+0x84>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d12b      	bne.n	8002a02 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80029aa:	2300      	movs	r3, #0
 80029ac:	613b      	str	r3, [r7, #16]
 80029ae:	4b18      	ldr	r3, [pc, #96]	@ (8002a10 <HAL_UART_MspInit+0x88>)
 80029b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029b2:	4a17      	ldr	r2, [pc, #92]	@ (8002a10 <HAL_UART_MspInit+0x88>)
 80029b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80029b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80029ba:	4b15      	ldr	r3, [pc, #84]	@ (8002a10 <HAL_UART_MspInit+0x88>)
 80029bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029c2:	613b      	str	r3, [r7, #16]
 80029c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029c6:	2300      	movs	r3, #0
 80029c8:	60fb      	str	r3, [r7, #12]
 80029ca:	4b11      	ldr	r3, [pc, #68]	@ (8002a10 <HAL_UART_MspInit+0x88>)
 80029cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029ce:	4a10      	ldr	r2, [pc, #64]	@ (8002a10 <HAL_UART_MspInit+0x88>)
 80029d0:	f043 0301 	orr.w	r3, r3, #1
 80029d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80029d6:	4b0e      	ldr	r3, [pc, #56]	@ (8002a10 <HAL_UART_MspInit+0x88>)
 80029d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029da:	f003 0301 	and.w	r3, r3, #1
 80029de:	60fb      	str	r3, [r7, #12]
 80029e0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80029e2:	230c      	movs	r3, #12
 80029e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029e6:	2302      	movs	r3, #2
 80029e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029ea:	2300      	movs	r3, #0
 80029ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029ee:	2303      	movs	r3, #3
 80029f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80029f2:	2307      	movs	r3, #7
 80029f4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029f6:	f107 0314 	add.w	r3, r7, #20
 80029fa:	4619      	mov	r1, r3
 80029fc:	4805      	ldr	r0, [pc, #20]	@ (8002a14 <HAL_UART_MspInit+0x8c>)
 80029fe:	f000 faeb 	bl	8002fd8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002a02:	bf00      	nop
 8002a04:	3728      	adds	r7, #40	@ 0x28
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}
 8002a0a:	bf00      	nop
 8002a0c:	40004400 	.word	0x40004400
 8002a10:	40023800 	.word	0x40023800
 8002a14:	40020000 	.word	0x40020000

08002a18 <LCD_Init>:
	Paint_DrawString_EN (190, 100, buffVG,        &Font20,    MAGENTA,  WHITE);
	Paint_DrawString_EN (190, 125, buffVD,        &Font20,    MAGENTA,  WHITE);
}

void LCD_Init(uint8_t* a)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b088      	sub	sp, #32
 8002a1c:	af02      	add	r7, sp, #8
 8002a1e:	6078      	str	r0, [r7, #4]
	char charMode[12];
//	printf("LCD_2IN_test Demo\r\n");
	DEV_Module_Init();
 8002a20:	f004 f8e8 	bl	8006bf4 <DEV_Module_Init>

//  printf("LCD_2IN_ Init and Clear...\r\n");
	LCD_2IN_SetBackLight(1000);
 8002a24:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002a28:	f004 fda0 	bl	800756c <LCD_2IN_SetBackLight>
	LCD_2IN_Init();
 8002a2c:	f004 fbe6 	bl	80071fc <LCD_2IN_Init>
	LCD_2IN_Clear(WHITE);
 8002a30:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8002a34:	f004 fd52 	bl	80074dc <LCD_2IN_Clear>

//  printf("Paint_NewImage\r\n");
	Paint_NewImage(LCD_2IN_WIDTH,LCD_2IN_HEIGHT, ROTATE_90, WHITE);
 8002a38:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002a3c:	225a      	movs	r2, #90	@ 0x5a
 8002a3e:	f44f 71a0 	mov.w	r1, #320	@ 0x140
 8002a42:	20f0      	movs	r0, #240	@ 0xf0
 8002a44:	f004 f8f6 	bl	8006c34 <Paint_NewImage>

//  printf("Set Clear and Display Funtion\r\n");
	Paint_SetClearFuntion(LCD_2IN_Clear);
 8002a48:	486a      	ldr	r0, [pc, #424]	@ (8002bf4 <LCD_Init+0x1dc>)
 8002a4a:	f004 f93f 	bl	8006ccc <Paint_SetClearFuntion>
	Paint_SetDisplayFuntion(LCD_2IN_DrawPaint);
 8002a4e:	486a      	ldr	r0, [pc, #424]	@ (8002bf8 <LCD_Init+0x1e0>)
 8002a50:	f004 f94c 	bl	8006cec <Paint_SetDisplayFuntion>

  printf("Paint_Clear\r\n");
 8002a54:	4869      	ldr	r0, [pc, #420]	@ (8002bfc <LCD_Init+0x1e4>)
 8002a56:	f004 ff79 	bl	800794c <puts>
	Paint_Clear(MAGENTA);
 8002a5a:	f64f 001f 	movw	r0, #63519	@ 0xf81f
 8002a5e:	f004 fa2f 	bl	8006ec0 <Paint_Clear>
	DEV_Delay_ms(500);
 8002a62:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002a66:	f000 f981 	bl	8002d6c <HAL_Delay>

	//  printf("Painting...\r\n");
	Paint_SetRotate(ROTATE_270);
 8002a6a:	f44f 7087 	mov.w	r0, #270	@ 0x10e
 8002a6e:	f004 f94d 	bl	8006d0c <Paint_SetRotate>
	Paint_DrawString_EN (50, 100, "DEMARRAGE DU",        &Font24,    MAGENTA,  WHITE);
 8002a72:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002a76:	9301      	str	r3, [sp, #4]
 8002a78:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 8002a7c:	9300      	str	r3, [sp, #0]
 8002a7e:	4b60      	ldr	r3, [pc, #384]	@ (8002c00 <LCD_Init+0x1e8>)
 8002a80:	4a60      	ldr	r2, [pc, #384]	@ (8002c04 <LCD_Init+0x1ec>)
 8002a82:	2164      	movs	r1, #100	@ 0x64
 8002a84:	2032      	movs	r0, #50	@ 0x32
 8002a86:	f004 fad7 	bl	8007038 <Paint_DrawString_EN>
	Paint_DrawString_EN (100, 125, "PROJET",        &Font24,    MAGENTA,  WHITE);
 8002a8a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002a8e:	9301      	str	r3, [sp, #4]
 8002a90:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 8002a94:	9300      	str	r3, [sp, #0]
 8002a96:	4b5a      	ldr	r3, [pc, #360]	@ (8002c00 <LCD_Init+0x1e8>)
 8002a98:	4a5b      	ldr	r2, [pc, #364]	@ (8002c08 <LCD_Init+0x1f0>)
 8002a9a:	217d      	movs	r1, #125	@ 0x7d
 8002a9c:	2064      	movs	r0, #100	@ 0x64
 8002a9e:	f004 facb 	bl	8007038 <Paint_DrawString_EN>
	Paint_DrawString_EN (70, 150, "VROUM-VROUM",        &Font24,    MAGENTA,  WHITE);
 8002aa2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002aa6:	9301      	str	r3, [sp, #4]
 8002aa8:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 8002aac:	9300      	str	r3, [sp, #0]
 8002aae:	4b54      	ldr	r3, [pc, #336]	@ (8002c00 <LCD_Init+0x1e8>)
 8002ab0:	4a56      	ldr	r2, [pc, #344]	@ (8002c0c <LCD_Init+0x1f4>)
 8002ab2:	2196      	movs	r1, #150	@ 0x96
 8002ab4:	2046      	movs	r0, #70	@ 0x46
 8002ab6:	f004 fabf 	bl	8007038 <Paint_DrawString_EN>
	DEV_Delay_ms(500);
 8002aba:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002abe:	f000 f955 	bl	8002d6c <HAL_Delay>
	Paint_Clear(MAGENTA);
 8002ac2:	f64f 001f 	movw	r0, #63519	@ 0xf81f
 8002ac6:	f004 f9fb 	bl	8006ec0 <Paint_Clear>

	Paint_DrawString_EN (85, 100, "LE PROJET",        &Font24,    MAGENTA,  WHITE);
 8002aca:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002ace:	9301      	str	r3, [sp, #4]
 8002ad0:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 8002ad4:	9300      	str	r3, [sp, #0]
 8002ad6:	4b4a      	ldr	r3, [pc, #296]	@ (8002c00 <LCD_Init+0x1e8>)
 8002ad8:	4a4d      	ldr	r2, [pc, #308]	@ (8002c10 <LCD_Init+0x1f8>)
 8002ada:	2164      	movs	r1, #100	@ 0x64
 8002adc:	2055      	movs	r0, #85	@ 0x55
 8002ade:	f004 faab 	bl	8007038 <Paint_DrawString_EN>
	Paint_DrawString_EN (70, 125, "VROUM-VROUM",        &Font24,    MAGENTA,  WHITE);
 8002ae2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002ae6:	9301      	str	r3, [sp, #4]
 8002ae8:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 8002aec:	9300      	str	r3, [sp, #0]
 8002aee:	4b44      	ldr	r3, [pc, #272]	@ (8002c00 <LCD_Init+0x1e8>)
 8002af0:	4a46      	ldr	r2, [pc, #280]	@ (8002c0c <LCD_Init+0x1f4>)
 8002af2:	217d      	movs	r1, #125	@ 0x7d
 8002af4:	2046      	movs	r0, #70	@ 0x46
 8002af6:	f004 fa9f 	bl	8007038 <Paint_DrawString_EN>
	Paint_DrawString_EN (85, 150, "VOUS SALUT",        &Font24,    MAGENTA,  WHITE);
 8002afa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002afe:	9301      	str	r3, [sp, #4]
 8002b00:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 8002b04:	9300      	str	r3, [sp, #0]
 8002b06:	4b3e      	ldr	r3, [pc, #248]	@ (8002c00 <LCD_Init+0x1e8>)
 8002b08:	4a42      	ldr	r2, [pc, #264]	@ (8002c14 <LCD_Init+0x1fc>)
 8002b0a:	2196      	movs	r1, #150	@ 0x96
 8002b0c:	2055      	movs	r0, #85	@ 0x55
 8002b0e:	f004 fa93 	bl	8007038 <Paint_DrawString_EN>
	DEV_Delay_ms(500);
 8002b12:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002b16:	f000 f929 	bl	8002d6c <HAL_Delay>
	Paint_Clear(MAGENTA);
 8002b1a:	f64f 001f 	movw	r0, #63519	@ 0xf81f
 8002b1e:	f004 f9cf 	bl	8006ec0 <Paint_Clear>

	Paint_DrawString_EN (5, 1, "La date : ",        &Font24,    MAGENTA,  WHITE);
 8002b22:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002b26:	9301      	str	r3, [sp, #4]
 8002b28:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 8002b2c:	9300      	str	r3, [sp, #0]
 8002b2e:	4b34      	ldr	r3, [pc, #208]	@ (8002c00 <LCD_Init+0x1e8>)
 8002b30:	4a39      	ldr	r2, [pc, #228]	@ (8002c18 <LCD_Init+0x200>)
 8002b32:	2101      	movs	r1, #1
 8002b34:	2005      	movs	r0, #5
 8002b36:	f004 fa7f 	bl	8007038 <Paint_DrawString_EN>
	Paint_DrawString_EN (5, 25, "L'heure : ",        &Font24,    MAGENTA,  WHITE);
 8002b3a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002b3e:	9301      	str	r3, [sp, #4]
 8002b40:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 8002b44:	9300      	str	r3, [sp, #0]
 8002b46:	4b2e      	ldr	r3, [pc, #184]	@ (8002c00 <LCD_Init+0x1e8>)
 8002b48:	4a34      	ldr	r2, [pc, #208]	@ (8002c1c <LCD_Init+0x204>)
 8002b4a:	2119      	movs	r1, #25
 8002b4c:	2005      	movs	r0, #5
 8002b4e:	f004 fa73 	bl	8007038 <Paint_DrawString_EN>
	Paint_DrawString_EN (5, 50, "Mode actuel : ",        &Font24,    MAGENTA,  WHITE);
 8002b52:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002b56:	9301      	str	r3, [sp, #4]
 8002b58:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 8002b5c:	9300      	str	r3, [sp, #0]
 8002b5e:	4b28      	ldr	r3, [pc, #160]	@ (8002c00 <LCD_Init+0x1e8>)
 8002b60:	4a2f      	ldr	r2, [pc, #188]	@ (8002c20 <LCD_Init+0x208>)
 8002b62:	2132      	movs	r1, #50	@ 0x32
 8002b64:	2005      	movs	r0, #5
 8002b66:	f004 fa67 	bl	8007038 <Paint_DrawString_EN>


	Paint_DrawString_EN (250, 50, charMode,        &Font24,    MAGENTA,  WHITE);
 8002b6a:	f107 020c 	add.w	r2, r7, #12
 8002b6e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002b72:	9301      	str	r3, [sp, #4]
 8002b74:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 8002b78:	9300      	str	r3, [sp, #0]
 8002b7a:	4b21      	ldr	r3, [pc, #132]	@ (8002c00 <LCD_Init+0x1e8>)
 8002b7c:	2132      	movs	r1, #50	@ 0x32
 8002b7e:	20fa      	movs	r0, #250	@ 0xfa
 8002b80:	f004 fa5a 	bl	8007038 <Paint_DrawString_EN>

	Paint_DrawString_EN (5, 100, "Vitesse G : ",        &Font24,    MAGENTA,  WHITE);
 8002b84:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002b88:	9301      	str	r3, [sp, #4]
 8002b8a:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 8002b8e:	9300      	str	r3, [sp, #0]
 8002b90:	4b1b      	ldr	r3, [pc, #108]	@ (8002c00 <LCD_Init+0x1e8>)
 8002b92:	4a24      	ldr	r2, [pc, #144]	@ (8002c24 <LCD_Init+0x20c>)
 8002b94:	2164      	movs	r1, #100	@ 0x64
 8002b96:	2005      	movs	r0, #5
 8002b98:	f004 fa4e 	bl	8007038 <Paint_DrawString_EN>
	Paint_DrawString_EN (5, 125, "Vitesse D : ",        &Font24,    MAGENTA,  WHITE);
 8002b9c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002ba0:	9301      	str	r3, [sp, #4]
 8002ba2:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 8002ba6:	9300      	str	r3, [sp, #0]
 8002ba8:	4b15      	ldr	r3, [pc, #84]	@ (8002c00 <LCD_Init+0x1e8>)
 8002baa:	4a1f      	ldr	r2, [pc, #124]	@ (8002c28 <LCD_Init+0x210>)
 8002bac:	217d      	movs	r1, #125	@ 0x7d
 8002bae:	2005      	movs	r0, #5
 8002bb0:	f004 fa42 	bl	8007038 <Paint_DrawString_EN>
	Paint_DrawString_EN (10, 220, "Attention aux enfants",        &Font20,    YELLOW,  RED);
 8002bb4:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8002bb8:	9301      	str	r3, [sp, #4]
 8002bba:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8002bbe:	9300      	str	r3, [sp, #0]
 8002bc0:	4b1a      	ldr	r3, [pc, #104]	@ (8002c2c <LCD_Init+0x214>)
 8002bc2:	4a1b      	ldr	r2, [pc, #108]	@ (8002c30 <LCD_Init+0x218>)
 8002bc4:	21dc      	movs	r1, #220	@ 0xdc
 8002bc6:	200a      	movs	r0, #10
 8002bc8:	f004 fa36 	bl	8007038 <Paint_DrawString_EN>

	DEV_Delay_ms(3000);
 8002bcc:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8002bd0:	f000 f8cc 	bl	8002d6c <HAL_Delay>
	strcpy(charMode, Get_Mode_String());
 8002bd4:	f7fe f964 	bl	8000ea0 <Get_Mode_String>
 8002bd8:	4602      	mov	r2, r0
 8002bda:	f107 030c 	add.w	r3, r7, #12
 8002bde:	4611      	mov	r1, r2
 8002be0:	4618      	mov	r0, r3
 8002be2:	f005 f81e 	bl	8007c22 <strcpy>

	*a = 1;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2201      	movs	r2, #1
 8002bea:	701a      	strb	r2, [r3, #0]
	//DEV_Module_Exit();

}
 8002bec:	bf00      	nop
 8002bee:	3718      	adds	r7, #24
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bd80      	pop	{r7, pc}
 8002bf4:	080074dd 	.word	0x080074dd
 8002bf8:	0800753d 	.word	0x0800753d
 8002bfc:	08008528 	.word	0x08008528
 8002c00:	2000002c 	.word	0x2000002c
 8002c04:	08008538 	.word	0x08008538
 8002c08:	08008548 	.word	0x08008548
 8002c0c:	08008550 	.word	0x08008550
 8002c10:	0800855c 	.word	0x0800855c
 8002c14:	08008568 	.word	0x08008568
 8002c18:	08008574 	.word	0x08008574
 8002c1c:	08008580 	.word	0x08008580
 8002c20:	0800858c 	.word	0x0800858c
 8002c24:	0800859c 	.word	0x0800859c
 8002c28:	080085ac 	.word	0x080085ac
 8002c2c:	20000024 	.word	0x20000024
 8002c30:	080085bc 	.word	0x080085bc

08002c34 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002c34:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002c6c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002c38:	f7ff fbfe 	bl	8002438 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002c3c:	480c      	ldr	r0, [pc, #48]	@ (8002c70 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002c3e:	490d      	ldr	r1, [pc, #52]	@ (8002c74 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002c40:	4a0d      	ldr	r2, [pc, #52]	@ (8002c78 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002c42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002c44:	e002      	b.n	8002c4c <LoopCopyDataInit>

08002c46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002c46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002c48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002c4a:	3304      	adds	r3, #4

08002c4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002c4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002c4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002c50:	d3f9      	bcc.n	8002c46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002c52:	4a0a      	ldr	r2, [pc, #40]	@ (8002c7c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002c54:	4c0a      	ldr	r4, [pc, #40]	@ (8002c80 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002c56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002c58:	e001      	b.n	8002c5e <LoopFillZerobss>

08002c5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002c5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002c5c:	3204      	adds	r2, #4

08002c5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002c5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002c60:	d3fb      	bcc.n	8002c5a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002c62:	f004 ffb7 	bl	8007bd4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002c66:	f7fe fe73 	bl	8001950 <main>
  bx  lr    
 8002c6a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002c6c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002c70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002c74:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8002c78:	0800b2c4 	.word	0x0800b2c4
  ldr r2, =_sbss
 8002c7c:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8002c80:	200004b0 	.word	0x200004b0

08002c84 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002c84:	e7fe      	b.n	8002c84 <ADC_IRQHandler>
	...

08002c88 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002c8c:	4b0e      	ldr	r3, [pc, #56]	@ (8002cc8 <HAL_Init+0x40>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a0d      	ldr	r2, [pc, #52]	@ (8002cc8 <HAL_Init+0x40>)
 8002c92:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002c96:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002c98:	4b0b      	ldr	r3, [pc, #44]	@ (8002cc8 <HAL_Init+0x40>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a0a      	ldr	r2, [pc, #40]	@ (8002cc8 <HAL_Init+0x40>)
 8002c9e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002ca2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002ca4:	4b08      	ldr	r3, [pc, #32]	@ (8002cc8 <HAL_Init+0x40>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a07      	ldr	r2, [pc, #28]	@ (8002cc8 <HAL_Init+0x40>)
 8002caa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002cae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002cb0:	2003      	movs	r0, #3
 8002cb2:	f000 f94f 	bl	8002f54 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002cb6:	2000      	movs	r0, #0
 8002cb8:	f000 f808 	bl	8002ccc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002cbc:	f7ff fa98 	bl	80021f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002cc0:	2300      	movs	r3, #0
}
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	bd80      	pop	{r7, pc}
 8002cc6:	bf00      	nop
 8002cc8:	40023c00 	.word	0x40023c00

08002ccc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b082      	sub	sp, #8
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002cd4:	4b12      	ldr	r3, [pc, #72]	@ (8002d20 <HAL_InitTick+0x54>)
 8002cd6:	681a      	ldr	r2, [r3, #0]
 8002cd8:	4b12      	ldr	r3, [pc, #72]	@ (8002d24 <HAL_InitTick+0x58>)
 8002cda:	781b      	ldrb	r3, [r3, #0]
 8002cdc:	4619      	mov	r1, r3
 8002cde:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002ce2:	fbb3 f3f1 	udiv	r3, r3, r1
 8002ce6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cea:	4618      	mov	r0, r3
 8002cec:	f000 f967 	bl	8002fbe <HAL_SYSTICK_Config>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d001      	beq.n	8002cfa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	e00e      	b.n	8002d18 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2b0f      	cmp	r3, #15
 8002cfe:	d80a      	bhi.n	8002d16 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d00:	2200      	movs	r2, #0
 8002d02:	6879      	ldr	r1, [r7, #4]
 8002d04:	f04f 30ff 	mov.w	r0, #4294967295
 8002d08:	f000 f92f 	bl	8002f6a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002d0c:	4a06      	ldr	r2, [pc, #24]	@ (8002d28 <HAL_InitTick+0x5c>)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002d12:	2300      	movs	r3, #0
 8002d14:	e000      	b.n	8002d18 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002d16:	2301      	movs	r3, #1
}
 8002d18:	4618      	mov	r0, r3
 8002d1a:	3708      	adds	r7, #8
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bd80      	pop	{r7, pc}
 8002d20:	20000018 	.word	0x20000018
 8002d24:	20000020 	.word	0x20000020
 8002d28:	2000001c 	.word	0x2000001c

08002d2c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002d30:	4b06      	ldr	r3, [pc, #24]	@ (8002d4c <HAL_IncTick+0x20>)
 8002d32:	781b      	ldrb	r3, [r3, #0]
 8002d34:	461a      	mov	r2, r3
 8002d36:	4b06      	ldr	r3, [pc, #24]	@ (8002d50 <HAL_IncTick+0x24>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4413      	add	r3, r2
 8002d3c:	4a04      	ldr	r2, [pc, #16]	@ (8002d50 <HAL_IncTick+0x24>)
 8002d3e:	6013      	str	r3, [r2, #0]
}
 8002d40:	bf00      	nop
 8002d42:	46bd      	mov	sp, r7
 8002d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d48:	4770      	bx	lr
 8002d4a:	bf00      	nop
 8002d4c:	20000020 	.word	0x20000020
 8002d50:	20000340 	.word	0x20000340

08002d54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d54:	b480      	push	{r7}
 8002d56:	af00      	add	r7, sp, #0
  return uwTick;
 8002d58:	4b03      	ldr	r3, [pc, #12]	@ (8002d68 <HAL_GetTick+0x14>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
}
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d64:	4770      	bx	lr
 8002d66:	bf00      	nop
 8002d68:	20000340 	.word	0x20000340

08002d6c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b084      	sub	sp, #16
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002d74:	f7ff ffee 	bl	8002d54 <HAL_GetTick>
 8002d78:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d84:	d005      	beq.n	8002d92 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002d86:	4b0a      	ldr	r3, [pc, #40]	@ (8002db0 <HAL_Delay+0x44>)
 8002d88:	781b      	ldrb	r3, [r3, #0]
 8002d8a:	461a      	mov	r2, r3
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	4413      	add	r3, r2
 8002d90:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002d92:	bf00      	nop
 8002d94:	f7ff ffde 	bl	8002d54 <HAL_GetTick>
 8002d98:	4602      	mov	r2, r0
 8002d9a:	68bb      	ldr	r3, [r7, #8]
 8002d9c:	1ad3      	subs	r3, r2, r3
 8002d9e:	68fa      	ldr	r2, [r7, #12]
 8002da0:	429a      	cmp	r2, r3
 8002da2:	d8f7      	bhi.n	8002d94 <HAL_Delay+0x28>
  {
  }
}
 8002da4:	bf00      	nop
 8002da6:	bf00      	nop
 8002da8:	3710      	adds	r7, #16
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bd80      	pop	{r7, pc}
 8002dae:	bf00      	nop
 8002db0:	20000020 	.word	0x20000020

08002db4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002db4:	b480      	push	{r7}
 8002db6:	b085      	sub	sp, #20
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	f003 0307 	and.w	r3, r3, #7
 8002dc2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002dc4:	4b0c      	ldr	r3, [pc, #48]	@ (8002df8 <__NVIC_SetPriorityGrouping+0x44>)
 8002dc6:	68db      	ldr	r3, [r3, #12]
 8002dc8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002dca:	68ba      	ldr	r2, [r7, #8]
 8002dcc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002dd0:	4013      	ands	r3, r2
 8002dd2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002dd8:	68bb      	ldr	r3, [r7, #8]
 8002dda:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ddc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002de0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002de4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002de6:	4a04      	ldr	r2, [pc, #16]	@ (8002df8 <__NVIC_SetPriorityGrouping+0x44>)
 8002de8:	68bb      	ldr	r3, [r7, #8]
 8002dea:	60d3      	str	r3, [r2, #12]
}
 8002dec:	bf00      	nop
 8002dee:	3714      	adds	r7, #20
 8002df0:	46bd      	mov	sp, r7
 8002df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df6:	4770      	bx	lr
 8002df8:	e000ed00 	.word	0xe000ed00

08002dfc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e00:	4b04      	ldr	r3, [pc, #16]	@ (8002e14 <__NVIC_GetPriorityGrouping+0x18>)
 8002e02:	68db      	ldr	r3, [r3, #12]
 8002e04:	0a1b      	lsrs	r3, r3, #8
 8002e06:	f003 0307 	and.w	r3, r3, #7
}
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e12:	4770      	bx	lr
 8002e14:	e000ed00 	.word	0xe000ed00

08002e18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	b083      	sub	sp, #12
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	4603      	mov	r3, r0
 8002e20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	db0b      	blt.n	8002e42 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e2a:	79fb      	ldrb	r3, [r7, #7]
 8002e2c:	f003 021f 	and.w	r2, r3, #31
 8002e30:	4907      	ldr	r1, [pc, #28]	@ (8002e50 <__NVIC_EnableIRQ+0x38>)
 8002e32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e36:	095b      	lsrs	r3, r3, #5
 8002e38:	2001      	movs	r0, #1
 8002e3a:	fa00 f202 	lsl.w	r2, r0, r2
 8002e3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002e42:	bf00      	nop
 8002e44:	370c      	adds	r7, #12
 8002e46:	46bd      	mov	sp, r7
 8002e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4c:	4770      	bx	lr
 8002e4e:	bf00      	nop
 8002e50:	e000e100 	.word	0xe000e100

08002e54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e54:	b480      	push	{r7}
 8002e56:	b083      	sub	sp, #12
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	6039      	str	r1, [r7, #0]
 8002e5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	db0a      	blt.n	8002e7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	b2da      	uxtb	r2, r3
 8002e6c:	490c      	ldr	r1, [pc, #48]	@ (8002ea0 <__NVIC_SetPriority+0x4c>)
 8002e6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e72:	0112      	lsls	r2, r2, #4
 8002e74:	b2d2      	uxtb	r2, r2
 8002e76:	440b      	add	r3, r1
 8002e78:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e7c:	e00a      	b.n	8002e94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	b2da      	uxtb	r2, r3
 8002e82:	4908      	ldr	r1, [pc, #32]	@ (8002ea4 <__NVIC_SetPriority+0x50>)
 8002e84:	79fb      	ldrb	r3, [r7, #7]
 8002e86:	f003 030f 	and.w	r3, r3, #15
 8002e8a:	3b04      	subs	r3, #4
 8002e8c:	0112      	lsls	r2, r2, #4
 8002e8e:	b2d2      	uxtb	r2, r2
 8002e90:	440b      	add	r3, r1
 8002e92:	761a      	strb	r2, [r3, #24]
}
 8002e94:	bf00      	nop
 8002e96:	370c      	adds	r7, #12
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9e:	4770      	bx	lr
 8002ea0:	e000e100 	.word	0xe000e100
 8002ea4:	e000ed00 	.word	0xe000ed00

08002ea8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	b089      	sub	sp, #36	@ 0x24
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	60f8      	str	r0, [r7, #12]
 8002eb0:	60b9      	str	r1, [r7, #8]
 8002eb2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	f003 0307 	and.w	r3, r3, #7
 8002eba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ebc:	69fb      	ldr	r3, [r7, #28]
 8002ebe:	f1c3 0307 	rsb	r3, r3, #7
 8002ec2:	2b04      	cmp	r3, #4
 8002ec4:	bf28      	it	cs
 8002ec6:	2304      	movcs	r3, #4
 8002ec8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002eca:	69fb      	ldr	r3, [r7, #28]
 8002ecc:	3304      	adds	r3, #4
 8002ece:	2b06      	cmp	r3, #6
 8002ed0:	d902      	bls.n	8002ed8 <NVIC_EncodePriority+0x30>
 8002ed2:	69fb      	ldr	r3, [r7, #28]
 8002ed4:	3b03      	subs	r3, #3
 8002ed6:	e000      	b.n	8002eda <NVIC_EncodePriority+0x32>
 8002ed8:	2300      	movs	r3, #0
 8002eda:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002edc:	f04f 32ff 	mov.w	r2, #4294967295
 8002ee0:	69bb      	ldr	r3, [r7, #24]
 8002ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee6:	43da      	mvns	r2, r3
 8002ee8:	68bb      	ldr	r3, [r7, #8]
 8002eea:	401a      	ands	r2, r3
 8002eec:	697b      	ldr	r3, [r7, #20]
 8002eee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ef0:	f04f 31ff 	mov.w	r1, #4294967295
 8002ef4:	697b      	ldr	r3, [r7, #20]
 8002ef6:	fa01 f303 	lsl.w	r3, r1, r3
 8002efa:	43d9      	mvns	r1, r3
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f00:	4313      	orrs	r3, r2
         );
}
 8002f02:	4618      	mov	r0, r3
 8002f04:	3724      	adds	r7, #36	@ 0x24
 8002f06:	46bd      	mov	sp, r7
 8002f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0c:	4770      	bx	lr
	...

08002f10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b082      	sub	sp, #8
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	3b01      	subs	r3, #1
 8002f1c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002f20:	d301      	bcc.n	8002f26 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f22:	2301      	movs	r3, #1
 8002f24:	e00f      	b.n	8002f46 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f26:	4a0a      	ldr	r2, [pc, #40]	@ (8002f50 <SysTick_Config+0x40>)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	3b01      	subs	r3, #1
 8002f2c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f2e:	210f      	movs	r1, #15
 8002f30:	f04f 30ff 	mov.w	r0, #4294967295
 8002f34:	f7ff ff8e 	bl	8002e54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f38:	4b05      	ldr	r3, [pc, #20]	@ (8002f50 <SysTick_Config+0x40>)
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f3e:	4b04      	ldr	r3, [pc, #16]	@ (8002f50 <SysTick_Config+0x40>)
 8002f40:	2207      	movs	r2, #7
 8002f42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f44:	2300      	movs	r3, #0
}
 8002f46:	4618      	mov	r0, r3
 8002f48:	3708      	adds	r7, #8
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bd80      	pop	{r7, pc}
 8002f4e:	bf00      	nop
 8002f50:	e000e010 	.word	0xe000e010

08002f54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b082      	sub	sp, #8
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f5c:	6878      	ldr	r0, [r7, #4]
 8002f5e:	f7ff ff29 	bl	8002db4 <__NVIC_SetPriorityGrouping>
}
 8002f62:	bf00      	nop
 8002f64:	3708      	adds	r7, #8
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bd80      	pop	{r7, pc}

08002f6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002f6a:	b580      	push	{r7, lr}
 8002f6c:	b086      	sub	sp, #24
 8002f6e:	af00      	add	r7, sp, #0
 8002f70:	4603      	mov	r3, r0
 8002f72:	60b9      	str	r1, [r7, #8]
 8002f74:	607a      	str	r2, [r7, #4]
 8002f76:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002f78:	2300      	movs	r3, #0
 8002f7a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002f7c:	f7ff ff3e 	bl	8002dfc <__NVIC_GetPriorityGrouping>
 8002f80:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f82:	687a      	ldr	r2, [r7, #4]
 8002f84:	68b9      	ldr	r1, [r7, #8]
 8002f86:	6978      	ldr	r0, [r7, #20]
 8002f88:	f7ff ff8e 	bl	8002ea8 <NVIC_EncodePriority>
 8002f8c:	4602      	mov	r2, r0
 8002f8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f92:	4611      	mov	r1, r2
 8002f94:	4618      	mov	r0, r3
 8002f96:	f7ff ff5d 	bl	8002e54 <__NVIC_SetPriority>
}
 8002f9a:	bf00      	nop
 8002f9c:	3718      	adds	r7, #24
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd80      	pop	{r7, pc}

08002fa2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fa2:	b580      	push	{r7, lr}
 8002fa4:	b082      	sub	sp, #8
 8002fa6:	af00      	add	r7, sp, #0
 8002fa8:	4603      	mov	r3, r0
 8002faa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002fac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	f7ff ff31 	bl	8002e18 <__NVIC_EnableIRQ>
}
 8002fb6:	bf00      	nop
 8002fb8:	3708      	adds	r7, #8
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd80      	pop	{r7, pc}

08002fbe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002fbe:	b580      	push	{r7, lr}
 8002fc0:	b082      	sub	sp, #8
 8002fc2:	af00      	add	r7, sp, #0
 8002fc4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002fc6:	6878      	ldr	r0, [r7, #4]
 8002fc8:	f7ff ffa2 	bl	8002f10 <SysTick_Config>
 8002fcc:	4603      	mov	r3, r0
}
 8002fce:	4618      	mov	r0, r3
 8002fd0:	3708      	adds	r7, #8
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bd80      	pop	{r7, pc}
	...

08002fd8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	b089      	sub	sp, #36	@ 0x24
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
 8002fe0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002fea:	2300      	movs	r3, #0
 8002fec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002fee:	2300      	movs	r3, #0
 8002ff0:	61fb      	str	r3, [r7, #28]
 8002ff2:	e165      	b.n	80032c0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002ff4:	2201      	movs	r2, #1
 8002ff6:	69fb      	ldr	r3, [r7, #28]
 8002ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ffc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	697a      	ldr	r2, [r7, #20]
 8003004:	4013      	ands	r3, r2
 8003006:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003008:	693a      	ldr	r2, [r7, #16]
 800300a:	697b      	ldr	r3, [r7, #20]
 800300c:	429a      	cmp	r2, r3
 800300e:	f040 8154 	bne.w	80032ba <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	f003 0303 	and.w	r3, r3, #3
 800301a:	2b01      	cmp	r3, #1
 800301c:	d005      	beq.n	800302a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003026:	2b02      	cmp	r3, #2
 8003028:	d130      	bne.n	800308c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	689b      	ldr	r3, [r3, #8]
 800302e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003030:	69fb      	ldr	r3, [r7, #28]
 8003032:	005b      	lsls	r3, r3, #1
 8003034:	2203      	movs	r2, #3
 8003036:	fa02 f303 	lsl.w	r3, r2, r3
 800303a:	43db      	mvns	r3, r3
 800303c:	69ba      	ldr	r2, [r7, #24]
 800303e:	4013      	ands	r3, r2
 8003040:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	68da      	ldr	r2, [r3, #12]
 8003046:	69fb      	ldr	r3, [r7, #28]
 8003048:	005b      	lsls	r3, r3, #1
 800304a:	fa02 f303 	lsl.w	r3, r2, r3
 800304e:	69ba      	ldr	r2, [r7, #24]
 8003050:	4313      	orrs	r3, r2
 8003052:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	69ba      	ldr	r2, [r7, #24]
 8003058:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003060:	2201      	movs	r2, #1
 8003062:	69fb      	ldr	r3, [r7, #28]
 8003064:	fa02 f303 	lsl.w	r3, r2, r3
 8003068:	43db      	mvns	r3, r3
 800306a:	69ba      	ldr	r2, [r7, #24]
 800306c:	4013      	ands	r3, r2
 800306e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	091b      	lsrs	r3, r3, #4
 8003076:	f003 0201 	and.w	r2, r3, #1
 800307a:	69fb      	ldr	r3, [r7, #28]
 800307c:	fa02 f303 	lsl.w	r3, r2, r3
 8003080:	69ba      	ldr	r2, [r7, #24]
 8003082:	4313      	orrs	r3, r2
 8003084:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	69ba      	ldr	r2, [r7, #24]
 800308a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	f003 0303 	and.w	r3, r3, #3
 8003094:	2b03      	cmp	r3, #3
 8003096:	d017      	beq.n	80030c8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	68db      	ldr	r3, [r3, #12]
 800309c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800309e:	69fb      	ldr	r3, [r7, #28]
 80030a0:	005b      	lsls	r3, r3, #1
 80030a2:	2203      	movs	r2, #3
 80030a4:	fa02 f303 	lsl.w	r3, r2, r3
 80030a8:	43db      	mvns	r3, r3
 80030aa:	69ba      	ldr	r2, [r7, #24]
 80030ac:	4013      	ands	r3, r2
 80030ae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	689a      	ldr	r2, [r3, #8]
 80030b4:	69fb      	ldr	r3, [r7, #28]
 80030b6:	005b      	lsls	r3, r3, #1
 80030b8:	fa02 f303 	lsl.w	r3, r2, r3
 80030bc:	69ba      	ldr	r2, [r7, #24]
 80030be:	4313      	orrs	r3, r2
 80030c0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	69ba      	ldr	r2, [r7, #24]
 80030c6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	f003 0303 	and.w	r3, r3, #3
 80030d0:	2b02      	cmp	r3, #2
 80030d2:	d123      	bne.n	800311c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80030d4:	69fb      	ldr	r3, [r7, #28]
 80030d6:	08da      	lsrs	r2, r3, #3
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	3208      	adds	r2, #8
 80030dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80030e2:	69fb      	ldr	r3, [r7, #28]
 80030e4:	f003 0307 	and.w	r3, r3, #7
 80030e8:	009b      	lsls	r3, r3, #2
 80030ea:	220f      	movs	r2, #15
 80030ec:	fa02 f303 	lsl.w	r3, r2, r3
 80030f0:	43db      	mvns	r3, r3
 80030f2:	69ba      	ldr	r2, [r7, #24]
 80030f4:	4013      	ands	r3, r2
 80030f6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	691a      	ldr	r2, [r3, #16]
 80030fc:	69fb      	ldr	r3, [r7, #28]
 80030fe:	f003 0307 	and.w	r3, r3, #7
 8003102:	009b      	lsls	r3, r3, #2
 8003104:	fa02 f303 	lsl.w	r3, r2, r3
 8003108:	69ba      	ldr	r2, [r7, #24]
 800310a:	4313      	orrs	r3, r2
 800310c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800310e:	69fb      	ldr	r3, [r7, #28]
 8003110:	08da      	lsrs	r2, r3, #3
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	3208      	adds	r2, #8
 8003116:	69b9      	ldr	r1, [r7, #24]
 8003118:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003122:	69fb      	ldr	r3, [r7, #28]
 8003124:	005b      	lsls	r3, r3, #1
 8003126:	2203      	movs	r2, #3
 8003128:	fa02 f303 	lsl.w	r3, r2, r3
 800312c:	43db      	mvns	r3, r3
 800312e:	69ba      	ldr	r2, [r7, #24]
 8003130:	4013      	ands	r3, r2
 8003132:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	f003 0203 	and.w	r2, r3, #3
 800313c:	69fb      	ldr	r3, [r7, #28]
 800313e:	005b      	lsls	r3, r3, #1
 8003140:	fa02 f303 	lsl.w	r3, r2, r3
 8003144:	69ba      	ldr	r2, [r7, #24]
 8003146:	4313      	orrs	r3, r2
 8003148:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	69ba      	ldr	r2, [r7, #24]
 800314e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003158:	2b00      	cmp	r3, #0
 800315a:	f000 80ae 	beq.w	80032ba <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800315e:	2300      	movs	r3, #0
 8003160:	60fb      	str	r3, [r7, #12]
 8003162:	4b5d      	ldr	r3, [pc, #372]	@ (80032d8 <HAL_GPIO_Init+0x300>)
 8003164:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003166:	4a5c      	ldr	r2, [pc, #368]	@ (80032d8 <HAL_GPIO_Init+0x300>)
 8003168:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800316c:	6453      	str	r3, [r2, #68]	@ 0x44
 800316e:	4b5a      	ldr	r3, [pc, #360]	@ (80032d8 <HAL_GPIO_Init+0x300>)
 8003170:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003172:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003176:	60fb      	str	r3, [r7, #12]
 8003178:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800317a:	4a58      	ldr	r2, [pc, #352]	@ (80032dc <HAL_GPIO_Init+0x304>)
 800317c:	69fb      	ldr	r3, [r7, #28]
 800317e:	089b      	lsrs	r3, r3, #2
 8003180:	3302      	adds	r3, #2
 8003182:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003186:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003188:	69fb      	ldr	r3, [r7, #28]
 800318a:	f003 0303 	and.w	r3, r3, #3
 800318e:	009b      	lsls	r3, r3, #2
 8003190:	220f      	movs	r2, #15
 8003192:	fa02 f303 	lsl.w	r3, r2, r3
 8003196:	43db      	mvns	r3, r3
 8003198:	69ba      	ldr	r2, [r7, #24]
 800319a:	4013      	ands	r3, r2
 800319c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	4a4f      	ldr	r2, [pc, #316]	@ (80032e0 <HAL_GPIO_Init+0x308>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d025      	beq.n	80031f2 <HAL_GPIO_Init+0x21a>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	4a4e      	ldr	r2, [pc, #312]	@ (80032e4 <HAL_GPIO_Init+0x30c>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d01f      	beq.n	80031ee <HAL_GPIO_Init+0x216>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	4a4d      	ldr	r2, [pc, #308]	@ (80032e8 <HAL_GPIO_Init+0x310>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d019      	beq.n	80031ea <HAL_GPIO_Init+0x212>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	4a4c      	ldr	r2, [pc, #304]	@ (80032ec <HAL_GPIO_Init+0x314>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d013      	beq.n	80031e6 <HAL_GPIO_Init+0x20e>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	4a4b      	ldr	r2, [pc, #300]	@ (80032f0 <HAL_GPIO_Init+0x318>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d00d      	beq.n	80031e2 <HAL_GPIO_Init+0x20a>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	4a4a      	ldr	r2, [pc, #296]	@ (80032f4 <HAL_GPIO_Init+0x31c>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d007      	beq.n	80031de <HAL_GPIO_Init+0x206>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	4a49      	ldr	r2, [pc, #292]	@ (80032f8 <HAL_GPIO_Init+0x320>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d101      	bne.n	80031da <HAL_GPIO_Init+0x202>
 80031d6:	2306      	movs	r3, #6
 80031d8:	e00c      	b.n	80031f4 <HAL_GPIO_Init+0x21c>
 80031da:	2307      	movs	r3, #7
 80031dc:	e00a      	b.n	80031f4 <HAL_GPIO_Init+0x21c>
 80031de:	2305      	movs	r3, #5
 80031e0:	e008      	b.n	80031f4 <HAL_GPIO_Init+0x21c>
 80031e2:	2304      	movs	r3, #4
 80031e4:	e006      	b.n	80031f4 <HAL_GPIO_Init+0x21c>
 80031e6:	2303      	movs	r3, #3
 80031e8:	e004      	b.n	80031f4 <HAL_GPIO_Init+0x21c>
 80031ea:	2302      	movs	r3, #2
 80031ec:	e002      	b.n	80031f4 <HAL_GPIO_Init+0x21c>
 80031ee:	2301      	movs	r3, #1
 80031f0:	e000      	b.n	80031f4 <HAL_GPIO_Init+0x21c>
 80031f2:	2300      	movs	r3, #0
 80031f4:	69fa      	ldr	r2, [r7, #28]
 80031f6:	f002 0203 	and.w	r2, r2, #3
 80031fa:	0092      	lsls	r2, r2, #2
 80031fc:	4093      	lsls	r3, r2
 80031fe:	69ba      	ldr	r2, [r7, #24]
 8003200:	4313      	orrs	r3, r2
 8003202:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003204:	4935      	ldr	r1, [pc, #212]	@ (80032dc <HAL_GPIO_Init+0x304>)
 8003206:	69fb      	ldr	r3, [r7, #28]
 8003208:	089b      	lsrs	r3, r3, #2
 800320a:	3302      	adds	r3, #2
 800320c:	69ba      	ldr	r2, [r7, #24]
 800320e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003212:	4b3a      	ldr	r3, [pc, #232]	@ (80032fc <HAL_GPIO_Init+0x324>)
 8003214:	689b      	ldr	r3, [r3, #8]
 8003216:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003218:	693b      	ldr	r3, [r7, #16]
 800321a:	43db      	mvns	r3, r3
 800321c:	69ba      	ldr	r2, [r7, #24]
 800321e:	4013      	ands	r3, r2
 8003220:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800322a:	2b00      	cmp	r3, #0
 800322c:	d003      	beq.n	8003236 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800322e:	69ba      	ldr	r2, [r7, #24]
 8003230:	693b      	ldr	r3, [r7, #16]
 8003232:	4313      	orrs	r3, r2
 8003234:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003236:	4a31      	ldr	r2, [pc, #196]	@ (80032fc <HAL_GPIO_Init+0x324>)
 8003238:	69bb      	ldr	r3, [r7, #24]
 800323a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800323c:	4b2f      	ldr	r3, [pc, #188]	@ (80032fc <HAL_GPIO_Init+0x324>)
 800323e:	68db      	ldr	r3, [r3, #12]
 8003240:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003242:	693b      	ldr	r3, [r7, #16]
 8003244:	43db      	mvns	r3, r3
 8003246:	69ba      	ldr	r2, [r7, #24]
 8003248:	4013      	ands	r3, r2
 800324a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003254:	2b00      	cmp	r3, #0
 8003256:	d003      	beq.n	8003260 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003258:	69ba      	ldr	r2, [r7, #24]
 800325a:	693b      	ldr	r3, [r7, #16]
 800325c:	4313      	orrs	r3, r2
 800325e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003260:	4a26      	ldr	r2, [pc, #152]	@ (80032fc <HAL_GPIO_Init+0x324>)
 8003262:	69bb      	ldr	r3, [r7, #24]
 8003264:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003266:	4b25      	ldr	r3, [pc, #148]	@ (80032fc <HAL_GPIO_Init+0x324>)
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800326c:	693b      	ldr	r3, [r7, #16]
 800326e:	43db      	mvns	r3, r3
 8003270:	69ba      	ldr	r2, [r7, #24]
 8003272:	4013      	ands	r3, r2
 8003274:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800327e:	2b00      	cmp	r3, #0
 8003280:	d003      	beq.n	800328a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003282:	69ba      	ldr	r2, [r7, #24]
 8003284:	693b      	ldr	r3, [r7, #16]
 8003286:	4313      	orrs	r3, r2
 8003288:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800328a:	4a1c      	ldr	r2, [pc, #112]	@ (80032fc <HAL_GPIO_Init+0x324>)
 800328c:	69bb      	ldr	r3, [r7, #24]
 800328e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003290:	4b1a      	ldr	r3, [pc, #104]	@ (80032fc <HAL_GPIO_Init+0x324>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003296:	693b      	ldr	r3, [r7, #16]
 8003298:	43db      	mvns	r3, r3
 800329a:	69ba      	ldr	r2, [r7, #24]
 800329c:	4013      	ands	r3, r2
 800329e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d003      	beq.n	80032b4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80032ac:	69ba      	ldr	r2, [r7, #24]
 80032ae:	693b      	ldr	r3, [r7, #16]
 80032b0:	4313      	orrs	r3, r2
 80032b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80032b4:	4a11      	ldr	r2, [pc, #68]	@ (80032fc <HAL_GPIO_Init+0x324>)
 80032b6:	69bb      	ldr	r3, [r7, #24]
 80032b8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80032ba:	69fb      	ldr	r3, [r7, #28]
 80032bc:	3301      	adds	r3, #1
 80032be:	61fb      	str	r3, [r7, #28]
 80032c0:	69fb      	ldr	r3, [r7, #28]
 80032c2:	2b0f      	cmp	r3, #15
 80032c4:	f67f ae96 	bls.w	8002ff4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80032c8:	bf00      	nop
 80032ca:	bf00      	nop
 80032cc:	3724      	adds	r7, #36	@ 0x24
 80032ce:	46bd      	mov	sp, r7
 80032d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d4:	4770      	bx	lr
 80032d6:	bf00      	nop
 80032d8:	40023800 	.word	0x40023800
 80032dc:	40013800 	.word	0x40013800
 80032e0:	40020000 	.word	0x40020000
 80032e4:	40020400 	.word	0x40020400
 80032e8:	40020800 	.word	0x40020800
 80032ec:	40020c00 	.word	0x40020c00
 80032f0:	40021000 	.word	0x40021000
 80032f4:	40021400 	.word	0x40021400
 80032f8:	40021800 	.word	0x40021800
 80032fc:	40013c00 	.word	0x40013c00

08003300 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003300:	b480      	push	{r7}
 8003302:	b085      	sub	sp, #20
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
 8003308:	460b      	mov	r3, r1
 800330a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	691a      	ldr	r2, [r3, #16]
 8003310:	887b      	ldrh	r3, [r7, #2]
 8003312:	4013      	ands	r3, r2
 8003314:	2b00      	cmp	r3, #0
 8003316:	d002      	beq.n	800331e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003318:	2301      	movs	r3, #1
 800331a:	73fb      	strb	r3, [r7, #15]
 800331c:	e001      	b.n	8003322 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800331e:	2300      	movs	r3, #0
 8003320:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003322:	7bfb      	ldrb	r3, [r7, #15]
}
 8003324:	4618      	mov	r0, r3
 8003326:	3714      	adds	r7, #20
 8003328:	46bd      	mov	sp, r7
 800332a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332e:	4770      	bx	lr

08003330 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003330:	b480      	push	{r7}
 8003332:	b083      	sub	sp, #12
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
 8003338:	460b      	mov	r3, r1
 800333a:	807b      	strh	r3, [r7, #2]
 800333c:	4613      	mov	r3, r2
 800333e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003340:	787b      	ldrb	r3, [r7, #1]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d003      	beq.n	800334e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003346:	887a      	ldrh	r2, [r7, #2]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800334c:	e003      	b.n	8003356 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800334e:	887b      	ldrh	r3, [r7, #2]
 8003350:	041a      	lsls	r2, r3, #16
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	619a      	str	r2, [r3, #24]
}
 8003356:	bf00      	nop
 8003358:	370c      	adds	r7, #12
 800335a:	46bd      	mov	sp, r7
 800335c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003360:	4770      	bx	lr
	...

08003364 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b082      	sub	sp, #8
 8003368:	af00      	add	r7, sp, #0
 800336a:	4603      	mov	r3, r0
 800336c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800336e:	4b08      	ldr	r3, [pc, #32]	@ (8003390 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003370:	695a      	ldr	r2, [r3, #20]
 8003372:	88fb      	ldrh	r3, [r7, #6]
 8003374:	4013      	ands	r3, r2
 8003376:	2b00      	cmp	r3, #0
 8003378:	d006      	beq.n	8003388 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800337a:	4a05      	ldr	r2, [pc, #20]	@ (8003390 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800337c:	88fb      	ldrh	r3, [r7, #6]
 800337e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003380:	88fb      	ldrh	r3, [r7, #6]
 8003382:	4618      	mov	r0, r3
 8003384:	f7fe fbba 	bl	8001afc <HAL_GPIO_EXTI_Callback>
  }
}
 8003388:	bf00      	nop
 800338a:	3708      	adds	r7, #8
 800338c:	46bd      	mov	sp, r7
 800338e:	bd80      	pop	{r7, pc}
 8003390:	40013c00 	.word	0x40013c00

08003394 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b084      	sub	sp, #16
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d101      	bne.n	80033a6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80033a2:	2301      	movs	r3, #1
 80033a4:	e12b      	b.n	80035fe <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80033ac:	b2db      	uxtb	r3, r3
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d106      	bne.n	80033c0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2200      	movs	r2, #0
 80033b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80033ba:	6878      	ldr	r0, [r7, #4]
 80033bc:	f7fe fa80 	bl	80018c0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2224      	movs	r2, #36	@ 0x24
 80033c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	681a      	ldr	r2, [r3, #0]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f022 0201 	bic.w	r2, r2, #1
 80033d6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	681a      	ldr	r2, [r3, #0]
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80033e6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	681a      	ldr	r2, [r3, #0]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80033f6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80033f8:	f001 f8b8 	bl	800456c <HAL_RCC_GetPCLK1Freq>
 80033fc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	4a81      	ldr	r2, [pc, #516]	@ (8003608 <HAL_I2C_Init+0x274>)
 8003404:	4293      	cmp	r3, r2
 8003406:	d807      	bhi.n	8003418 <HAL_I2C_Init+0x84>
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	4a80      	ldr	r2, [pc, #512]	@ (800360c <HAL_I2C_Init+0x278>)
 800340c:	4293      	cmp	r3, r2
 800340e:	bf94      	ite	ls
 8003410:	2301      	movls	r3, #1
 8003412:	2300      	movhi	r3, #0
 8003414:	b2db      	uxtb	r3, r3
 8003416:	e006      	b.n	8003426 <HAL_I2C_Init+0x92>
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	4a7d      	ldr	r2, [pc, #500]	@ (8003610 <HAL_I2C_Init+0x27c>)
 800341c:	4293      	cmp	r3, r2
 800341e:	bf94      	ite	ls
 8003420:	2301      	movls	r3, #1
 8003422:	2300      	movhi	r3, #0
 8003424:	b2db      	uxtb	r3, r3
 8003426:	2b00      	cmp	r3, #0
 8003428:	d001      	beq.n	800342e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800342a:	2301      	movs	r3, #1
 800342c:	e0e7      	b.n	80035fe <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	4a78      	ldr	r2, [pc, #480]	@ (8003614 <HAL_I2C_Init+0x280>)
 8003432:	fba2 2303 	umull	r2, r3, r2, r3
 8003436:	0c9b      	lsrs	r3, r3, #18
 8003438:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	68ba      	ldr	r2, [r7, #8]
 800344a:	430a      	orrs	r2, r1
 800344c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	6a1b      	ldr	r3, [r3, #32]
 8003454:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	4a6a      	ldr	r2, [pc, #424]	@ (8003608 <HAL_I2C_Init+0x274>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d802      	bhi.n	8003468 <HAL_I2C_Init+0xd4>
 8003462:	68bb      	ldr	r3, [r7, #8]
 8003464:	3301      	adds	r3, #1
 8003466:	e009      	b.n	800347c <HAL_I2C_Init+0xe8>
 8003468:	68bb      	ldr	r3, [r7, #8]
 800346a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800346e:	fb02 f303 	mul.w	r3, r2, r3
 8003472:	4a69      	ldr	r2, [pc, #420]	@ (8003618 <HAL_I2C_Init+0x284>)
 8003474:	fba2 2303 	umull	r2, r3, r2, r3
 8003478:	099b      	lsrs	r3, r3, #6
 800347a:	3301      	adds	r3, #1
 800347c:	687a      	ldr	r2, [r7, #4]
 800347e:	6812      	ldr	r2, [r2, #0]
 8003480:	430b      	orrs	r3, r1
 8003482:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	69db      	ldr	r3, [r3, #28]
 800348a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800348e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	495c      	ldr	r1, [pc, #368]	@ (8003608 <HAL_I2C_Init+0x274>)
 8003498:	428b      	cmp	r3, r1
 800349a:	d819      	bhi.n	80034d0 <HAL_I2C_Init+0x13c>
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	1e59      	subs	r1, r3, #1
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	005b      	lsls	r3, r3, #1
 80034a6:	fbb1 f3f3 	udiv	r3, r1, r3
 80034aa:	1c59      	adds	r1, r3, #1
 80034ac:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80034b0:	400b      	ands	r3, r1
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d00a      	beq.n	80034cc <HAL_I2C_Init+0x138>
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	1e59      	subs	r1, r3, #1
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	005b      	lsls	r3, r3, #1
 80034c0:	fbb1 f3f3 	udiv	r3, r1, r3
 80034c4:	3301      	adds	r3, #1
 80034c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034ca:	e051      	b.n	8003570 <HAL_I2C_Init+0x1dc>
 80034cc:	2304      	movs	r3, #4
 80034ce:	e04f      	b.n	8003570 <HAL_I2C_Init+0x1dc>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	689b      	ldr	r3, [r3, #8]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d111      	bne.n	80034fc <HAL_I2C_Init+0x168>
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	1e58      	subs	r0, r3, #1
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6859      	ldr	r1, [r3, #4]
 80034e0:	460b      	mov	r3, r1
 80034e2:	005b      	lsls	r3, r3, #1
 80034e4:	440b      	add	r3, r1
 80034e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80034ea:	3301      	adds	r3, #1
 80034ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	bf0c      	ite	eq
 80034f4:	2301      	moveq	r3, #1
 80034f6:	2300      	movne	r3, #0
 80034f8:	b2db      	uxtb	r3, r3
 80034fa:	e012      	b.n	8003522 <HAL_I2C_Init+0x18e>
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	1e58      	subs	r0, r3, #1
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6859      	ldr	r1, [r3, #4]
 8003504:	460b      	mov	r3, r1
 8003506:	009b      	lsls	r3, r3, #2
 8003508:	440b      	add	r3, r1
 800350a:	0099      	lsls	r1, r3, #2
 800350c:	440b      	add	r3, r1
 800350e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003512:	3301      	adds	r3, #1
 8003514:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003518:	2b00      	cmp	r3, #0
 800351a:	bf0c      	ite	eq
 800351c:	2301      	moveq	r3, #1
 800351e:	2300      	movne	r3, #0
 8003520:	b2db      	uxtb	r3, r3
 8003522:	2b00      	cmp	r3, #0
 8003524:	d001      	beq.n	800352a <HAL_I2C_Init+0x196>
 8003526:	2301      	movs	r3, #1
 8003528:	e022      	b.n	8003570 <HAL_I2C_Init+0x1dc>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	689b      	ldr	r3, [r3, #8]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d10e      	bne.n	8003550 <HAL_I2C_Init+0x1bc>
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	1e58      	subs	r0, r3, #1
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6859      	ldr	r1, [r3, #4]
 800353a:	460b      	mov	r3, r1
 800353c:	005b      	lsls	r3, r3, #1
 800353e:	440b      	add	r3, r1
 8003540:	fbb0 f3f3 	udiv	r3, r0, r3
 8003544:	3301      	adds	r3, #1
 8003546:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800354a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800354e:	e00f      	b.n	8003570 <HAL_I2C_Init+0x1dc>
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	1e58      	subs	r0, r3, #1
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6859      	ldr	r1, [r3, #4]
 8003558:	460b      	mov	r3, r1
 800355a:	009b      	lsls	r3, r3, #2
 800355c:	440b      	add	r3, r1
 800355e:	0099      	lsls	r1, r3, #2
 8003560:	440b      	add	r3, r1
 8003562:	fbb0 f3f3 	udiv	r3, r0, r3
 8003566:	3301      	adds	r3, #1
 8003568:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800356c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003570:	6879      	ldr	r1, [r7, #4]
 8003572:	6809      	ldr	r1, [r1, #0]
 8003574:	4313      	orrs	r3, r2
 8003576:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	69da      	ldr	r2, [r3, #28]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6a1b      	ldr	r3, [r3, #32]
 800358a:	431a      	orrs	r2, r3
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	430a      	orrs	r2, r1
 8003592:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	689b      	ldr	r3, [r3, #8]
 800359a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800359e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80035a2:	687a      	ldr	r2, [r7, #4]
 80035a4:	6911      	ldr	r1, [r2, #16]
 80035a6:	687a      	ldr	r2, [r7, #4]
 80035a8:	68d2      	ldr	r2, [r2, #12]
 80035aa:	4311      	orrs	r1, r2
 80035ac:	687a      	ldr	r2, [r7, #4]
 80035ae:	6812      	ldr	r2, [r2, #0]
 80035b0:	430b      	orrs	r3, r1
 80035b2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	68db      	ldr	r3, [r3, #12]
 80035ba:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	695a      	ldr	r2, [r3, #20]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	699b      	ldr	r3, [r3, #24]
 80035c6:	431a      	orrs	r2, r3
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	430a      	orrs	r2, r1
 80035ce:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	681a      	ldr	r2, [r3, #0]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f042 0201 	orr.w	r2, r2, #1
 80035de:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2200      	movs	r2, #0
 80035e4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2220      	movs	r2, #32
 80035ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2200      	movs	r2, #0
 80035f2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2200      	movs	r2, #0
 80035f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80035fc:	2300      	movs	r3, #0
}
 80035fe:	4618      	mov	r0, r3
 8003600:	3710      	adds	r7, #16
 8003602:	46bd      	mov	sp, r7
 8003604:	bd80      	pop	{r7, pc}
 8003606:	bf00      	nop
 8003608:	000186a0 	.word	0x000186a0
 800360c:	001e847f 	.word	0x001e847f
 8003610:	003d08ff 	.word	0x003d08ff
 8003614:	431bde83 	.word	0x431bde83
 8003618:	10624dd3 	.word	0x10624dd3

0800361c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b088      	sub	sp, #32
 8003620:	af02      	add	r7, sp, #8
 8003622:	60f8      	str	r0, [r7, #12]
 8003624:	607a      	str	r2, [r7, #4]
 8003626:	461a      	mov	r2, r3
 8003628:	460b      	mov	r3, r1
 800362a:	817b      	strh	r3, [r7, #10]
 800362c:	4613      	mov	r3, r2
 800362e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003630:	f7ff fb90 	bl	8002d54 <HAL_GetTick>
 8003634:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800363c:	b2db      	uxtb	r3, r3
 800363e:	2b20      	cmp	r3, #32
 8003640:	f040 80e0 	bne.w	8003804 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003644:	697b      	ldr	r3, [r7, #20]
 8003646:	9300      	str	r3, [sp, #0]
 8003648:	2319      	movs	r3, #25
 800364a:	2201      	movs	r2, #1
 800364c:	4970      	ldr	r1, [pc, #448]	@ (8003810 <HAL_I2C_Master_Transmit+0x1f4>)
 800364e:	68f8      	ldr	r0, [r7, #12]
 8003650:	f000 fc64 	bl	8003f1c <I2C_WaitOnFlagUntilTimeout>
 8003654:	4603      	mov	r3, r0
 8003656:	2b00      	cmp	r3, #0
 8003658:	d001      	beq.n	800365e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800365a:	2302      	movs	r3, #2
 800365c:	e0d3      	b.n	8003806 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003664:	2b01      	cmp	r3, #1
 8003666:	d101      	bne.n	800366c <HAL_I2C_Master_Transmit+0x50>
 8003668:	2302      	movs	r3, #2
 800366a:	e0cc      	b.n	8003806 <HAL_I2C_Master_Transmit+0x1ea>
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	2201      	movs	r2, #1
 8003670:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f003 0301 	and.w	r3, r3, #1
 800367e:	2b01      	cmp	r3, #1
 8003680:	d007      	beq.n	8003692 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	681a      	ldr	r2, [r3, #0]
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f042 0201 	orr.w	r2, r2, #1
 8003690:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	681a      	ldr	r2, [r3, #0]
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80036a0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	2221      	movs	r2, #33	@ 0x21
 80036a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	2210      	movs	r2, #16
 80036ae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	2200      	movs	r2, #0
 80036b6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	687a      	ldr	r2, [r7, #4]
 80036bc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	893a      	ldrh	r2, [r7, #8]
 80036c2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036c8:	b29a      	uxth	r2, r3
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	4a50      	ldr	r2, [pc, #320]	@ (8003814 <HAL_I2C_Master_Transmit+0x1f8>)
 80036d2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80036d4:	8979      	ldrh	r1, [r7, #10]
 80036d6:	697b      	ldr	r3, [r7, #20]
 80036d8:	6a3a      	ldr	r2, [r7, #32]
 80036da:	68f8      	ldr	r0, [r7, #12]
 80036dc:	f000 face 	bl	8003c7c <I2C_MasterRequestWrite>
 80036e0:	4603      	mov	r3, r0
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d001      	beq.n	80036ea <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80036e6:	2301      	movs	r3, #1
 80036e8:	e08d      	b.n	8003806 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036ea:	2300      	movs	r3, #0
 80036ec:	613b      	str	r3, [r7, #16]
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	695b      	ldr	r3, [r3, #20]
 80036f4:	613b      	str	r3, [r7, #16]
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	699b      	ldr	r3, [r3, #24]
 80036fc:	613b      	str	r3, [r7, #16]
 80036fe:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003700:	e066      	b.n	80037d0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003702:	697a      	ldr	r2, [r7, #20]
 8003704:	6a39      	ldr	r1, [r7, #32]
 8003706:	68f8      	ldr	r0, [r7, #12]
 8003708:	f000 fd22 	bl	8004150 <I2C_WaitOnTXEFlagUntilTimeout>
 800370c:	4603      	mov	r3, r0
 800370e:	2b00      	cmp	r3, #0
 8003710:	d00d      	beq.n	800372e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003716:	2b04      	cmp	r3, #4
 8003718:	d107      	bne.n	800372a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	681a      	ldr	r2, [r3, #0]
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003728:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800372a:	2301      	movs	r3, #1
 800372c:	e06b      	b.n	8003806 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003732:	781a      	ldrb	r2, [r3, #0]
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800373e:	1c5a      	adds	r2, r3, #1
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003748:	b29b      	uxth	r3, r3
 800374a:	3b01      	subs	r3, #1
 800374c:	b29a      	uxth	r2, r3
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003756:	3b01      	subs	r3, #1
 8003758:	b29a      	uxth	r2, r3
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	695b      	ldr	r3, [r3, #20]
 8003764:	f003 0304 	and.w	r3, r3, #4
 8003768:	2b04      	cmp	r3, #4
 800376a:	d11b      	bne.n	80037a4 <HAL_I2C_Master_Transmit+0x188>
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003770:	2b00      	cmp	r3, #0
 8003772:	d017      	beq.n	80037a4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003778:	781a      	ldrb	r2, [r3, #0]
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003784:	1c5a      	adds	r2, r3, #1
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800378e:	b29b      	uxth	r3, r3
 8003790:	3b01      	subs	r3, #1
 8003792:	b29a      	uxth	r2, r3
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800379c:	3b01      	subs	r3, #1
 800379e:	b29a      	uxth	r2, r3
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037a4:	697a      	ldr	r2, [r7, #20]
 80037a6:	6a39      	ldr	r1, [r7, #32]
 80037a8:	68f8      	ldr	r0, [r7, #12]
 80037aa:	f000 fd19 	bl	80041e0 <I2C_WaitOnBTFFlagUntilTimeout>
 80037ae:	4603      	mov	r3, r0
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d00d      	beq.n	80037d0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037b8:	2b04      	cmp	r3, #4
 80037ba:	d107      	bne.n	80037cc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	681a      	ldr	r2, [r3, #0]
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80037ca:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80037cc:	2301      	movs	r3, #1
 80037ce:	e01a      	b.n	8003806 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d194      	bne.n	8003702 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	681a      	ldr	r2, [r3, #0]
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80037e6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	2220      	movs	r2, #32
 80037ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	2200      	movs	r2, #0
 80037f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	2200      	movs	r2, #0
 80037fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003800:	2300      	movs	r3, #0
 8003802:	e000      	b.n	8003806 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003804:	2302      	movs	r3, #2
  }
}
 8003806:	4618      	mov	r0, r3
 8003808:	3718      	adds	r7, #24
 800380a:	46bd      	mov	sp, r7
 800380c:	bd80      	pop	{r7, pc}
 800380e:	bf00      	nop
 8003810:	00100002 	.word	0x00100002
 8003814:	ffff0000 	.word	0xffff0000

08003818 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b08c      	sub	sp, #48	@ 0x30
 800381c:	af02      	add	r7, sp, #8
 800381e:	60f8      	str	r0, [r7, #12]
 8003820:	607a      	str	r2, [r7, #4]
 8003822:	461a      	mov	r2, r3
 8003824:	460b      	mov	r3, r1
 8003826:	817b      	strh	r3, [r7, #10]
 8003828:	4613      	mov	r3, r2
 800382a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800382c:	f7ff fa92 	bl	8002d54 <HAL_GetTick>
 8003830:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003838:	b2db      	uxtb	r3, r3
 800383a:	2b20      	cmp	r3, #32
 800383c:	f040 8217 	bne.w	8003c6e <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003840:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003842:	9300      	str	r3, [sp, #0]
 8003844:	2319      	movs	r3, #25
 8003846:	2201      	movs	r2, #1
 8003848:	497c      	ldr	r1, [pc, #496]	@ (8003a3c <HAL_I2C_Master_Receive+0x224>)
 800384a:	68f8      	ldr	r0, [r7, #12]
 800384c:	f000 fb66 	bl	8003f1c <I2C_WaitOnFlagUntilTimeout>
 8003850:	4603      	mov	r3, r0
 8003852:	2b00      	cmp	r3, #0
 8003854:	d001      	beq.n	800385a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8003856:	2302      	movs	r3, #2
 8003858:	e20a      	b.n	8003c70 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003860:	2b01      	cmp	r3, #1
 8003862:	d101      	bne.n	8003868 <HAL_I2C_Master_Receive+0x50>
 8003864:	2302      	movs	r3, #2
 8003866:	e203      	b.n	8003c70 <HAL_I2C_Master_Receive+0x458>
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	2201      	movs	r2, #1
 800386c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f003 0301 	and.w	r3, r3, #1
 800387a:	2b01      	cmp	r3, #1
 800387c:	d007      	beq.n	800388e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	681a      	ldr	r2, [r3, #0]
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f042 0201 	orr.w	r2, r2, #1
 800388c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	681a      	ldr	r2, [r3, #0]
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800389c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	2222      	movs	r2, #34	@ 0x22
 80038a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	2210      	movs	r2, #16
 80038aa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	2200      	movs	r2, #0
 80038b2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	687a      	ldr	r2, [r7, #4]
 80038b8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	893a      	ldrh	r2, [r7, #8]
 80038be:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038c4:	b29a      	uxth	r2, r3
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	4a5c      	ldr	r2, [pc, #368]	@ (8003a40 <HAL_I2C_Master_Receive+0x228>)
 80038ce:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80038d0:	8979      	ldrh	r1, [r7, #10]
 80038d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038d4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80038d6:	68f8      	ldr	r0, [r7, #12]
 80038d8:	f000 fa52 	bl	8003d80 <I2C_MasterRequestRead>
 80038dc:	4603      	mov	r3, r0
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d001      	beq.n	80038e6 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80038e2:	2301      	movs	r3, #1
 80038e4:	e1c4      	b.n	8003c70 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d113      	bne.n	8003916 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038ee:	2300      	movs	r3, #0
 80038f0:	623b      	str	r3, [r7, #32]
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	695b      	ldr	r3, [r3, #20]
 80038f8:	623b      	str	r3, [r7, #32]
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	699b      	ldr	r3, [r3, #24]
 8003900:	623b      	str	r3, [r7, #32]
 8003902:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	681a      	ldr	r2, [r3, #0]
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003912:	601a      	str	r2, [r3, #0]
 8003914:	e198      	b.n	8003c48 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800391a:	2b01      	cmp	r3, #1
 800391c:	d11b      	bne.n	8003956 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	681a      	ldr	r2, [r3, #0]
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800392c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800392e:	2300      	movs	r3, #0
 8003930:	61fb      	str	r3, [r7, #28]
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	695b      	ldr	r3, [r3, #20]
 8003938:	61fb      	str	r3, [r7, #28]
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	699b      	ldr	r3, [r3, #24]
 8003940:	61fb      	str	r3, [r7, #28]
 8003942:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	681a      	ldr	r2, [r3, #0]
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003952:	601a      	str	r2, [r3, #0]
 8003954:	e178      	b.n	8003c48 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800395a:	2b02      	cmp	r3, #2
 800395c:	d11b      	bne.n	8003996 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	681a      	ldr	r2, [r3, #0]
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800396c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	681a      	ldr	r2, [r3, #0]
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800397c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800397e:	2300      	movs	r3, #0
 8003980:	61bb      	str	r3, [r7, #24]
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	695b      	ldr	r3, [r3, #20]
 8003988:	61bb      	str	r3, [r7, #24]
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	699b      	ldr	r3, [r3, #24]
 8003990:	61bb      	str	r3, [r7, #24]
 8003992:	69bb      	ldr	r3, [r7, #24]
 8003994:	e158      	b.n	8003c48 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	681a      	ldr	r2, [r3, #0]
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80039a4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039a6:	2300      	movs	r3, #0
 80039a8:	617b      	str	r3, [r7, #20]
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	695b      	ldr	r3, [r3, #20]
 80039b0:	617b      	str	r3, [r7, #20]
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	699b      	ldr	r3, [r3, #24]
 80039b8:	617b      	str	r3, [r7, #20]
 80039ba:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80039bc:	e144      	b.n	8003c48 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039c2:	2b03      	cmp	r3, #3
 80039c4:	f200 80f1 	bhi.w	8003baa <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039cc:	2b01      	cmp	r3, #1
 80039ce:	d123      	bne.n	8003a18 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80039d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039d2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80039d4:	68f8      	ldr	r0, [r7, #12]
 80039d6:	f000 fc4b 	bl	8004270 <I2C_WaitOnRXNEFlagUntilTimeout>
 80039da:	4603      	mov	r3, r0
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d001      	beq.n	80039e4 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80039e0:	2301      	movs	r3, #1
 80039e2:	e145      	b.n	8003c70 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	691a      	ldr	r2, [r3, #16]
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039ee:	b2d2      	uxtb	r2, r2
 80039f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039f6:	1c5a      	adds	r2, r3, #1
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a00:	3b01      	subs	r3, #1
 8003a02:	b29a      	uxth	r2, r3
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a0c:	b29b      	uxth	r3, r3
 8003a0e:	3b01      	subs	r3, #1
 8003a10:	b29a      	uxth	r2, r3
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003a16:	e117      	b.n	8003c48 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a1c:	2b02      	cmp	r3, #2
 8003a1e:	d14e      	bne.n	8003abe <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003a20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a22:	9300      	str	r3, [sp, #0]
 8003a24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a26:	2200      	movs	r2, #0
 8003a28:	4906      	ldr	r1, [pc, #24]	@ (8003a44 <HAL_I2C_Master_Receive+0x22c>)
 8003a2a:	68f8      	ldr	r0, [r7, #12]
 8003a2c:	f000 fa76 	bl	8003f1c <I2C_WaitOnFlagUntilTimeout>
 8003a30:	4603      	mov	r3, r0
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d008      	beq.n	8003a48 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8003a36:	2301      	movs	r3, #1
 8003a38:	e11a      	b.n	8003c70 <HAL_I2C_Master_Receive+0x458>
 8003a3a:	bf00      	nop
 8003a3c:	00100002 	.word	0x00100002
 8003a40:	ffff0000 	.word	0xffff0000
 8003a44:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	681a      	ldr	r2, [r3, #0]
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a56:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	691a      	ldr	r2, [r3, #16]
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a62:	b2d2      	uxtb	r2, r2
 8003a64:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a6a:	1c5a      	adds	r2, r3, #1
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a74:	3b01      	subs	r3, #1
 8003a76:	b29a      	uxth	r2, r3
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a80:	b29b      	uxth	r3, r3
 8003a82:	3b01      	subs	r3, #1
 8003a84:	b29a      	uxth	r2, r3
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	691a      	ldr	r2, [r3, #16]
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a94:	b2d2      	uxtb	r2, r2
 8003a96:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a9c:	1c5a      	adds	r2, r3, #1
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003aa6:	3b01      	subs	r3, #1
 8003aa8:	b29a      	uxth	r2, r3
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ab2:	b29b      	uxth	r3, r3
 8003ab4:	3b01      	subs	r3, #1
 8003ab6:	b29a      	uxth	r2, r3
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003abc:	e0c4      	b.n	8003c48 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003abe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ac0:	9300      	str	r3, [sp, #0]
 8003ac2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	496c      	ldr	r1, [pc, #432]	@ (8003c78 <HAL_I2C_Master_Receive+0x460>)
 8003ac8:	68f8      	ldr	r0, [r7, #12]
 8003aca:	f000 fa27 	bl	8003f1c <I2C_WaitOnFlagUntilTimeout>
 8003ace:	4603      	mov	r3, r0
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d001      	beq.n	8003ad8 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	e0cb      	b.n	8003c70 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	681a      	ldr	r2, [r3, #0]
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003ae6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	691a      	ldr	r2, [r3, #16]
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003af2:	b2d2      	uxtb	r2, r2
 8003af4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003afa:	1c5a      	adds	r2, r3, #1
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b04:	3b01      	subs	r3, #1
 8003b06:	b29a      	uxth	r2, r3
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b10:	b29b      	uxth	r3, r3
 8003b12:	3b01      	subs	r3, #1
 8003b14:	b29a      	uxth	r2, r3
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003b1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b1c:	9300      	str	r3, [sp, #0]
 8003b1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b20:	2200      	movs	r2, #0
 8003b22:	4955      	ldr	r1, [pc, #340]	@ (8003c78 <HAL_I2C_Master_Receive+0x460>)
 8003b24:	68f8      	ldr	r0, [r7, #12]
 8003b26:	f000 f9f9 	bl	8003f1c <I2C_WaitOnFlagUntilTimeout>
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d001      	beq.n	8003b34 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8003b30:	2301      	movs	r3, #1
 8003b32:	e09d      	b.n	8003c70 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	681a      	ldr	r2, [r3, #0]
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b42:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	691a      	ldr	r2, [r3, #16]
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b4e:	b2d2      	uxtb	r2, r2
 8003b50:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b56:	1c5a      	adds	r2, r3, #1
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b60:	3b01      	subs	r3, #1
 8003b62:	b29a      	uxth	r2, r3
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b6c:	b29b      	uxth	r3, r3
 8003b6e:	3b01      	subs	r3, #1
 8003b70:	b29a      	uxth	r2, r3
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	691a      	ldr	r2, [r3, #16]
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b80:	b2d2      	uxtb	r2, r2
 8003b82:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b88:	1c5a      	adds	r2, r3, #1
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b92:	3b01      	subs	r3, #1
 8003b94:	b29a      	uxth	r2, r3
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b9e:	b29b      	uxth	r3, r3
 8003ba0:	3b01      	subs	r3, #1
 8003ba2:	b29a      	uxth	r2, r3
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003ba8:	e04e      	b.n	8003c48 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003baa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003bac:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003bae:	68f8      	ldr	r0, [r7, #12]
 8003bb0:	f000 fb5e 	bl	8004270 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003bb4:	4603      	mov	r3, r0
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d001      	beq.n	8003bbe <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8003bba:	2301      	movs	r3, #1
 8003bbc:	e058      	b.n	8003c70 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	691a      	ldr	r2, [r3, #16]
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bc8:	b2d2      	uxtb	r2, r2
 8003bca:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bd0:	1c5a      	adds	r2, r3, #1
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003bda:	3b01      	subs	r3, #1
 8003bdc:	b29a      	uxth	r2, r3
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003be6:	b29b      	uxth	r3, r3
 8003be8:	3b01      	subs	r3, #1
 8003bea:	b29a      	uxth	r2, r3
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	695b      	ldr	r3, [r3, #20]
 8003bf6:	f003 0304 	and.w	r3, r3, #4
 8003bfa:	2b04      	cmp	r3, #4
 8003bfc:	d124      	bne.n	8003c48 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c02:	2b03      	cmp	r3, #3
 8003c04:	d107      	bne.n	8003c16 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	681a      	ldr	r2, [r3, #0]
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003c14:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	691a      	ldr	r2, [r3, #16]
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c20:	b2d2      	uxtb	r2, r2
 8003c22:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c28:	1c5a      	adds	r2, r3, #1
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c32:	3b01      	subs	r3, #1
 8003c34:	b29a      	uxth	r2, r3
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c3e:	b29b      	uxth	r3, r3
 8003c40:	3b01      	subs	r3, #1
 8003c42:	b29a      	uxth	r2, r3
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	f47f aeb6 	bne.w	80039be <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	2220      	movs	r2, #32
 8003c56:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	2200      	movs	r2, #0
 8003c66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	e000      	b.n	8003c70 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8003c6e:	2302      	movs	r3, #2
  }
}
 8003c70:	4618      	mov	r0, r3
 8003c72:	3728      	adds	r7, #40	@ 0x28
 8003c74:	46bd      	mov	sp, r7
 8003c76:	bd80      	pop	{r7, pc}
 8003c78:	00010004 	.word	0x00010004

08003c7c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b088      	sub	sp, #32
 8003c80:	af02      	add	r7, sp, #8
 8003c82:	60f8      	str	r0, [r7, #12]
 8003c84:	607a      	str	r2, [r7, #4]
 8003c86:	603b      	str	r3, [r7, #0]
 8003c88:	460b      	mov	r3, r1
 8003c8a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c90:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003c92:	697b      	ldr	r3, [r7, #20]
 8003c94:	2b08      	cmp	r3, #8
 8003c96:	d006      	beq.n	8003ca6 <I2C_MasterRequestWrite+0x2a>
 8003c98:	697b      	ldr	r3, [r7, #20]
 8003c9a:	2b01      	cmp	r3, #1
 8003c9c:	d003      	beq.n	8003ca6 <I2C_MasterRequestWrite+0x2a>
 8003c9e:	697b      	ldr	r3, [r7, #20]
 8003ca0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003ca4:	d108      	bne.n	8003cb8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	681a      	ldr	r2, [r3, #0]
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003cb4:	601a      	str	r2, [r3, #0]
 8003cb6:	e00b      	b.n	8003cd0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cbc:	2b12      	cmp	r3, #18
 8003cbe:	d107      	bne.n	8003cd0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	681a      	ldr	r2, [r3, #0]
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003cce:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	9300      	str	r3, [sp, #0]
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003cdc:	68f8      	ldr	r0, [r7, #12]
 8003cde:	f000 f91d 	bl	8003f1c <I2C_WaitOnFlagUntilTimeout>
 8003ce2:	4603      	mov	r3, r0
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d00d      	beq.n	8003d04 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cf2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003cf6:	d103      	bne.n	8003d00 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003cfe:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003d00:	2303      	movs	r3, #3
 8003d02:	e035      	b.n	8003d70 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	691b      	ldr	r3, [r3, #16]
 8003d08:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003d0c:	d108      	bne.n	8003d20 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003d0e:	897b      	ldrh	r3, [r7, #10]
 8003d10:	b2db      	uxtb	r3, r3
 8003d12:	461a      	mov	r2, r3
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003d1c:	611a      	str	r2, [r3, #16]
 8003d1e:	e01b      	b.n	8003d58 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003d20:	897b      	ldrh	r3, [r7, #10]
 8003d22:	11db      	asrs	r3, r3, #7
 8003d24:	b2db      	uxtb	r3, r3
 8003d26:	f003 0306 	and.w	r3, r3, #6
 8003d2a:	b2db      	uxtb	r3, r3
 8003d2c:	f063 030f 	orn	r3, r3, #15
 8003d30:	b2da      	uxtb	r2, r3
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	687a      	ldr	r2, [r7, #4]
 8003d3c:	490e      	ldr	r1, [pc, #56]	@ (8003d78 <I2C_MasterRequestWrite+0xfc>)
 8003d3e:	68f8      	ldr	r0, [r7, #12]
 8003d40:	f000 f966 	bl	8004010 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003d44:	4603      	mov	r3, r0
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d001      	beq.n	8003d4e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	e010      	b.n	8003d70 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003d4e:	897b      	ldrh	r3, [r7, #10]
 8003d50:	b2da      	uxtb	r2, r3
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	687a      	ldr	r2, [r7, #4]
 8003d5c:	4907      	ldr	r1, [pc, #28]	@ (8003d7c <I2C_MasterRequestWrite+0x100>)
 8003d5e:	68f8      	ldr	r0, [r7, #12]
 8003d60:	f000 f956 	bl	8004010 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003d64:	4603      	mov	r3, r0
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d001      	beq.n	8003d6e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	e000      	b.n	8003d70 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003d6e:	2300      	movs	r3, #0
}
 8003d70:	4618      	mov	r0, r3
 8003d72:	3718      	adds	r7, #24
 8003d74:	46bd      	mov	sp, r7
 8003d76:	bd80      	pop	{r7, pc}
 8003d78:	00010008 	.word	0x00010008
 8003d7c:	00010002 	.word	0x00010002

08003d80 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b088      	sub	sp, #32
 8003d84:	af02      	add	r7, sp, #8
 8003d86:	60f8      	str	r0, [r7, #12]
 8003d88:	607a      	str	r2, [r7, #4]
 8003d8a:	603b      	str	r3, [r7, #0]
 8003d8c:	460b      	mov	r3, r1
 8003d8e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d94:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	681a      	ldr	r2, [r3, #0]
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003da4:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003da6:	697b      	ldr	r3, [r7, #20]
 8003da8:	2b08      	cmp	r3, #8
 8003daa:	d006      	beq.n	8003dba <I2C_MasterRequestRead+0x3a>
 8003dac:	697b      	ldr	r3, [r7, #20]
 8003dae:	2b01      	cmp	r3, #1
 8003db0:	d003      	beq.n	8003dba <I2C_MasterRequestRead+0x3a>
 8003db2:	697b      	ldr	r3, [r7, #20]
 8003db4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003db8:	d108      	bne.n	8003dcc <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	681a      	ldr	r2, [r3, #0]
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003dc8:	601a      	str	r2, [r3, #0]
 8003dca:	e00b      	b.n	8003de4 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dd0:	2b11      	cmp	r3, #17
 8003dd2:	d107      	bne.n	8003de4 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	681a      	ldr	r2, [r3, #0]
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003de2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	9300      	str	r3, [sp, #0]
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2200      	movs	r2, #0
 8003dec:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003df0:	68f8      	ldr	r0, [r7, #12]
 8003df2:	f000 f893 	bl	8003f1c <I2C_WaitOnFlagUntilTimeout>
 8003df6:	4603      	mov	r3, r0
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d00d      	beq.n	8003e18 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e06:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003e0a:	d103      	bne.n	8003e14 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003e12:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003e14:	2303      	movs	r3, #3
 8003e16:	e079      	b.n	8003f0c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	691b      	ldr	r3, [r3, #16]
 8003e1c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003e20:	d108      	bne.n	8003e34 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003e22:	897b      	ldrh	r3, [r7, #10]
 8003e24:	b2db      	uxtb	r3, r3
 8003e26:	f043 0301 	orr.w	r3, r3, #1
 8003e2a:	b2da      	uxtb	r2, r3
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	611a      	str	r2, [r3, #16]
 8003e32:	e05f      	b.n	8003ef4 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003e34:	897b      	ldrh	r3, [r7, #10]
 8003e36:	11db      	asrs	r3, r3, #7
 8003e38:	b2db      	uxtb	r3, r3
 8003e3a:	f003 0306 	and.w	r3, r3, #6
 8003e3e:	b2db      	uxtb	r3, r3
 8003e40:	f063 030f 	orn	r3, r3, #15
 8003e44:	b2da      	uxtb	r2, r3
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	687a      	ldr	r2, [r7, #4]
 8003e50:	4930      	ldr	r1, [pc, #192]	@ (8003f14 <I2C_MasterRequestRead+0x194>)
 8003e52:	68f8      	ldr	r0, [r7, #12]
 8003e54:	f000 f8dc 	bl	8004010 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003e58:	4603      	mov	r3, r0
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d001      	beq.n	8003e62 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8003e5e:	2301      	movs	r3, #1
 8003e60:	e054      	b.n	8003f0c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003e62:	897b      	ldrh	r3, [r7, #10]
 8003e64:	b2da      	uxtb	r2, r3
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	687a      	ldr	r2, [r7, #4]
 8003e70:	4929      	ldr	r1, [pc, #164]	@ (8003f18 <I2C_MasterRequestRead+0x198>)
 8003e72:	68f8      	ldr	r0, [r7, #12]
 8003e74:	f000 f8cc 	bl	8004010 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003e78:	4603      	mov	r3, r0
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d001      	beq.n	8003e82 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8003e7e:	2301      	movs	r3, #1
 8003e80:	e044      	b.n	8003f0c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e82:	2300      	movs	r3, #0
 8003e84:	613b      	str	r3, [r7, #16]
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	695b      	ldr	r3, [r3, #20]
 8003e8c:	613b      	str	r3, [r7, #16]
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	699b      	ldr	r3, [r3, #24]
 8003e94:	613b      	str	r3, [r7, #16]
 8003e96:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	681a      	ldr	r2, [r3, #0]
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003ea6:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	9300      	str	r3, [sp, #0]
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003eb4:	68f8      	ldr	r0, [r7, #12]
 8003eb6:	f000 f831 	bl	8003f1c <I2C_WaitOnFlagUntilTimeout>
 8003eba:	4603      	mov	r3, r0
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d00d      	beq.n	8003edc <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003eca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003ece:	d103      	bne.n	8003ed8 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003ed6:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8003ed8:	2303      	movs	r3, #3
 8003eda:	e017      	b.n	8003f0c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003edc:	897b      	ldrh	r3, [r7, #10]
 8003ede:	11db      	asrs	r3, r3, #7
 8003ee0:	b2db      	uxtb	r3, r3
 8003ee2:	f003 0306 	and.w	r3, r3, #6
 8003ee6:	b2db      	uxtb	r3, r3
 8003ee8:	f063 030e 	orn	r3, r3, #14
 8003eec:	b2da      	uxtb	r2, r3
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	687a      	ldr	r2, [r7, #4]
 8003ef8:	4907      	ldr	r1, [pc, #28]	@ (8003f18 <I2C_MasterRequestRead+0x198>)
 8003efa:	68f8      	ldr	r0, [r7, #12]
 8003efc:	f000 f888 	bl	8004010 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003f00:	4603      	mov	r3, r0
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d001      	beq.n	8003f0a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8003f06:	2301      	movs	r3, #1
 8003f08:	e000      	b.n	8003f0c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8003f0a:	2300      	movs	r3, #0
}
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	3718      	adds	r7, #24
 8003f10:	46bd      	mov	sp, r7
 8003f12:	bd80      	pop	{r7, pc}
 8003f14:	00010008 	.word	0x00010008
 8003f18:	00010002 	.word	0x00010002

08003f1c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b084      	sub	sp, #16
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	60f8      	str	r0, [r7, #12]
 8003f24:	60b9      	str	r1, [r7, #8]
 8003f26:	603b      	str	r3, [r7, #0]
 8003f28:	4613      	mov	r3, r2
 8003f2a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003f2c:	e048      	b.n	8003fc0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f34:	d044      	beq.n	8003fc0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f36:	f7fe ff0d 	bl	8002d54 <HAL_GetTick>
 8003f3a:	4602      	mov	r2, r0
 8003f3c:	69bb      	ldr	r3, [r7, #24]
 8003f3e:	1ad3      	subs	r3, r2, r3
 8003f40:	683a      	ldr	r2, [r7, #0]
 8003f42:	429a      	cmp	r2, r3
 8003f44:	d302      	bcc.n	8003f4c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d139      	bne.n	8003fc0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003f4c:	68bb      	ldr	r3, [r7, #8]
 8003f4e:	0c1b      	lsrs	r3, r3, #16
 8003f50:	b2db      	uxtb	r3, r3
 8003f52:	2b01      	cmp	r3, #1
 8003f54:	d10d      	bne.n	8003f72 <I2C_WaitOnFlagUntilTimeout+0x56>
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	695b      	ldr	r3, [r3, #20]
 8003f5c:	43da      	mvns	r2, r3
 8003f5e:	68bb      	ldr	r3, [r7, #8]
 8003f60:	4013      	ands	r3, r2
 8003f62:	b29b      	uxth	r3, r3
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	bf0c      	ite	eq
 8003f68:	2301      	moveq	r3, #1
 8003f6a:	2300      	movne	r3, #0
 8003f6c:	b2db      	uxtb	r3, r3
 8003f6e:	461a      	mov	r2, r3
 8003f70:	e00c      	b.n	8003f8c <I2C_WaitOnFlagUntilTimeout+0x70>
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	699b      	ldr	r3, [r3, #24]
 8003f78:	43da      	mvns	r2, r3
 8003f7a:	68bb      	ldr	r3, [r7, #8]
 8003f7c:	4013      	ands	r3, r2
 8003f7e:	b29b      	uxth	r3, r3
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	bf0c      	ite	eq
 8003f84:	2301      	moveq	r3, #1
 8003f86:	2300      	movne	r3, #0
 8003f88:	b2db      	uxtb	r3, r3
 8003f8a:	461a      	mov	r2, r3
 8003f8c:	79fb      	ldrb	r3, [r7, #7]
 8003f8e:	429a      	cmp	r2, r3
 8003f90:	d116      	bne.n	8003fc0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	2200      	movs	r2, #0
 8003f96:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	2220      	movs	r2, #32
 8003f9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fac:	f043 0220 	orr.w	r2, r3, #32
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	e023      	b.n	8004008 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003fc0:	68bb      	ldr	r3, [r7, #8]
 8003fc2:	0c1b      	lsrs	r3, r3, #16
 8003fc4:	b2db      	uxtb	r3, r3
 8003fc6:	2b01      	cmp	r3, #1
 8003fc8:	d10d      	bne.n	8003fe6 <I2C_WaitOnFlagUntilTimeout+0xca>
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	695b      	ldr	r3, [r3, #20]
 8003fd0:	43da      	mvns	r2, r3
 8003fd2:	68bb      	ldr	r3, [r7, #8]
 8003fd4:	4013      	ands	r3, r2
 8003fd6:	b29b      	uxth	r3, r3
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	bf0c      	ite	eq
 8003fdc:	2301      	moveq	r3, #1
 8003fde:	2300      	movne	r3, #0
 8003fe0:	b2db      	uxtb	r3, r3
 8003fe2:	461a      	mov	r2, r3
 8003fe4:	e00c      	b.n	8004000 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	699b      	ldr	r3, [r3, #24]
 8003fec:	43da      	mvns	r2, r3
 8003fee:	68bb      	ldr	r3, [r7, #8]
 8003ff0:	4013      	ands	r3, r2
 8003ff2:	b29b      	uxth	r3, r3
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	bf0c      	ite	eq
 8003ff8:	2301      	moveq	r3, #1
 8003ffa:	2300      	movne	r3, #0
 8003ffc:	b2db      	uxtb	r3, r3
 8003ffe:	461a      	mov	r2, r3
 8004000:	79fb      	ldrb	r3, [r7, #7]
 8004002:	429a      	cmp	r2, r3
 8004004:	d093      	beq.n	8003f2e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004006:	2300      	movs	r3, #0
}
 8004008:	4618      	mov	r0, r3
 800400a:	3710      	adds	r7, #16
 800400c:	46bd      	mov	sp, r7
 800400e:	bd80      	pop	{r7, pc}

08004010 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b084      	sub	sp, #16
 8004014:	af00      	add	r7, sp, #0
 8004016:	60f8      	str	r0, [r7, #12]
 8004018:	60b9      	str	r1, [r7, #8]
 800401a:	607a      	str	r2, [r7, #4]
 800401c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800401e:	e071      	b.n	8004104 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	695b      	ldr	r3, [r3, #20]
 8004026:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800402a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800402e:	d123      	bne.n	8004078 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	681a      	ldr	r2, [r3, #0]
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800403e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004048:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	2200      	movs	r2, #0
 800404e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	2220      	movs	r2, #32
 8004054:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	2200      	movs	r2, #0
 800405c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004064:	f043 0204 	orr.w	r2, r3, #4
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	2200      	movs	r2, #0
 8004070:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004074:	2301      	movs	r3, #1
 8004076:	e067      	b.n	8004148 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800407e:	d041      	beq.n	8004104 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004080:	f7fe fe68 	bl	8002d54 <HAL_GetTick>
 8004084:	4602      	mov	r2, r0
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	1ad3      	subs	r3, r2, r3
 800408a:	687a      	ldr	r2, [r7, #4]
 800408c:	429a      	cmp	r2, r3
 800408e:	d302      	bcc.n	8004096 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d136      	bne.n	8004104 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004096:	68bb      	ldr	r3, [r7, #8]
 8004098:	0c1b      	lsrs	r3, r3, #16
 800409a:	b2db      	uxtb	r3, r3
 800409c:	2b01      	cmp	r3, #1
 800409e:	d10c      	bne.n	80040ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	695b      	ldr	r3, [r3, #20]
 80040a6:	43da      	mvns	r2, r3
 80040a8:	68bb      	ldr	r3, [r7, #8]
 80040aa:	4013      	ands	r3, r2
 80040ac:	b29b      	uxth	r3, r3
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	bf14      	ite	ne
 80040b2:	2301      	movne	r3, #1
 80040b4:	2300      	moveq	r3, #0
 80040b6:	b2db      	uxtb	r3, r3
 80040b8:	e00b      	b.n	80040d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	699b      	ldr	r3, [r3, #24]
 80040c0:	43da      	mvns	r2, r3
 80040c2:	68bb      	ldr	r3, [r7, #8]
 80040c4:	4013      	ands	r3, r2
 80040c6:	b29b      	uxth	r3, r3
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	bf14      	ite	ne
 80040cc:	2301      	movne	r3, #1
 80040ce:	2300      	moveq	r3, #0
 80040d0:	b2db      	uxtb	r3, r3
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d016      	beq.n	8004104 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	2200      	movs	r2, #0
 80040da:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	2220      	movs	r2, #32
 80040e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	2200      	movs	r2, #0
 80040e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040f0:	f043 0220 	orr.w	r2, r3, #32
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	2200      	movs	r2, #0
 80040fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004100:	2301      	movs	r3, #1
 8004102:	e021      	b.n	8004148 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004104:	68bb      	ldr	r3, [r7, #8]
 8004106:	0c1b      	lsrs	r3, r3, #16
 8004108:	b2db      	uxtb	r3, r3
 800410a:	2b01      	cmp	r3, #1
 800410c:	d10c      	bne.n	8004128 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	695b      	ldr	r3, [r3, #20]
 8004114:	43da      	mvns	r2, r3
 8004116:	68bb      	ldr	r3, [r7, #8]
 8004118:	4013      	ands	r3, r2
 800411a:	b29b      	uxth	r3, r3
 800411c:	2b00      	cmp	r3, #0
 800411e:	bf14      	ite	ne
 8004120:	2301      	movne	r3, #1
 8004122:	2300      	moveq	r3, #0
 8004124:	b2db      	uxtb	r3, r3
 8004126:	e00b      	b.n	8004140 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	699b      	ldr	r3, [r3, #24]
 800412e:	43da      	mvns	r2, r3
 8004130:	68bb      	ldr	r3, [r7, #8]
 8004132:	4013      	ands	r3, r2
 8004134:	b29b      	uxth	r3, r3
 8004136:	2b00      	cmp	r3, #0
 8004138:	bf14      	ite	ne
 800413a:	2301      	movne	r3, #1
 800413c:	2300      	moveq	r3, #0
 800413e:	b2db      	uxtb	r3, r3
 8004140:	2b00      	cmp	r3, #0
 8004142:	f47f af6d 	bne.w	8004020 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004146:	2300      	movs	r3, #0
}
 8004148:	4618      	mov	r0, r3
 800414a:	3710      	adds	r7, #16
 800414c:	46bd      	mov	sp, r7
 800414e:	bd80      	pop	{r7, pc}

08004150 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b084      	sub	sp, #16
 8004154:	af00      	add	r7, sp, #0
 8004156:	60f8      	str	r0, [r7, #12]
 8004158:	60b9      	str	r1, [r7, #8]
 800415a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800415c:	e034      	b.n	80041c8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800415e:	68f8      	ldr	r0, [r7, #12]
 8004160:	f000 f8e3 	bl	800432a <I2C_IsAcknowledgeFailed>
 8004164:	4603      	mov	r3, r0
 8004166:	2b00      	cmp	r3, #0
 8004168:	d001      	beq.n	800416e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800416a:	2301      	movs	r3, #1
 800416c:	e034      	b.n	80041d8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800416e:	68bb      	ldr	r3, [r7, #8]
 8004170:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004174:	d028      	beq.n	80041c8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004176:	f7fe fded 	bl	8002d54 <HAL_GetTick>
 800417a:	4602      	mov	r2, r0
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	1ad3      	subs	r3, r2, r3
 8004180:	68ba      	ldr	r2, [r7, #8]
 8004182:	429a      	cmp	r2, r3
 8004184:	d302      	bcc.n	800418c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004186:	68bb      	ldr	r3, [r7, #8]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d11d      	bne.n	80041c8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	695b      	ldr	r3, [r3, #20]
 8004192:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004196:	2b80      	cmp	r3, #128	@ 0x80
 8004198:	d016      	beq.n	80041c8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	2200      	movs	r2, #0
 800419e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	2220      	movs	r2, #32
 80041a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	2200      	movs	r2, #0
 80041ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041b4:	f043 0220 	orr.w	r2, r3, #32
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	2200      	movs	r2, #0
 80041c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80041c4:	2301      	movs	r3, #1
 80041c6:	e007      	b.n	80041d8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	695b      	ldr	r3, [r3, #20]
 80041ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041d2:	2b80      	cmp	r3, #128	@ 0x80
 80041d4:	d1c3      	bne.n	800415e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80041d6:	2300      	movs	r3, #0
}
 80041d8:	4618      	mov	r0, r3
 80041da:	3710      	adds	r7, #16
 80041dc:	46bd      	mov	sp, r7
 80041de:	bd80      	pop	{r7, pc}

080041e0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b084      	sub	sp, #16
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	60f8      	str	r0, [r7, #12]
 80041e8:	60b9      	str	r1, [r7, #8]
 80041ea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80041ec:	e034      	b.n	8004258 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80041ee:	68f8      	ldr	r0, [r7, #12]
 80041f0:	f000 f89b 	bl	800432a <I2C_IsAcknowledgeFailed>
 80041f4:	4603      	mov	r3, r0
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d001      	beq.n	80041fe <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80041fa:	2301      	movs	r3, #1
 80041fc:	e034      	b.n	8004268 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041fe:	68bb      	ldr	r3, [r7, #8]
 8004200:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004204:	d028      	beq.n	8004258 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004206:	f7fe fda5 	bl	8002d54 <HAL_GetTick>
 800420a:	4602      	mov	r2, r0
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	1ad3      	subs	r3, r2, r3
 8004210:	68ba      	ldr	r2, [r7, #8]
 8004212:	429a      	cmp	r2, r3
 8004214:	d302      	bcc.n	800421c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004216:	68bb      	ldr	r3, [r7, #8]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d11d      	bne.n	8004258 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	695b      	ldr	r3, [r3, #20]
 8004222:	f003 0304 	and.w	r3, r3, #4
 8004226:	2b04      	cmp	r3, #4
 8004228:	d016      	beq.n	8004258 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	2200      	movs	r2, #0
 800422e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	2220      	movs	r2, #32
 8004234:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	2200      	movs	r2, #0
 800423c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004244:	f043 0220 	orr.w	r2, r3, #32
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	2200      	movs	r2, #0
 8004250:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004254:	2301      	movs	r3, #1
 8004256:	e007      	b.n	8004268 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	695b      	ldr	r3, [r3, #20]
 800425e:	f003 0304 	and.w	r3, r3, #4
 8004262:	2b04      	cmp	r3, #4
 8004264:	d1c3      	bne.n	80041ee <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004266:	2300      	movs	r3, #0
}
 8004268:	4618      	mov	r0, r3
 800426a:	3710      	adds	r7, #16
 800426c:	46bd      	mov	sp, r7
 800426e:	bd80      	pop	{r7, pc}

08004270 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b084      	sub	sp, #16
 8004274:	af00      	add	r7, sp, #0
 8004276:	60f8      	str	r0, [r7, #12]
 8004278:	60b9      	str	r1, [r7, #8]
 800427a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800427c:	e049      	b.n	8004312 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	695b      	ldr	r3, [r3, #20]
 8004284:	f003 0310 	and.w	r3, r3, #16
 8004288:	2b10      	cmp	r3, #16
 800428a:	d119      	bne.n	80042c0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f06f 0210 	mvn.w	r2, #16
 8004294:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	2200      	movs	r2, #0
 800429a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	2220      	movs	r2, #32
 80042a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	2200      	movs	r2, #0
 80042a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	2200      	movs	r2, #0
 80042b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80042bc:	2301      	movs	r3, #1
 80042be:	e030      	b.n	8004322 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042c0:	f7fe fd48 	bl	8002d54 <HAL_GetTick>
 80042c4:	4602      	mov	r2, r0
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	1ad3      	subs	r3, r2, r3
 80042ca:	68ba      	ldr	r2, [r7, #8]
 80042cc:	429a      	cmp	r2, r3
 80042ce:	d302      	bcc.n	80042d6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80042d0:	68bb      	ldr	r3, [r7, #8]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d11d      	bne.n	8004312 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	695b      	ldr	r3, [r3, #20]
 80042dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042e0:	2b40      	cmp	r3, #64	@ 0x40
 80042e2:	d016      	beq.n	8004312 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	2200      	movs	r2, #0
 80042e8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	2220      	movs	r2, #32
 80042ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	2200      	movs	r2, #0
 80042f6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042fe:	f043 0220 	orr.w	r2, r3, #32
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	2200      	movs	r2, #0
 800430a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800430e:	2301      	movs	r3, #1
 8004310:	e007      	b.n	8004322 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	695b      	ldr	r3, [r3, #20]
 8004318:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800431c:	2b40      	cmp	r3, #64	@ 0x40
 800431e:	d1ae      	bne.n	800427e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004320:	2300      	movs	r3, #0
}
 8004322:	4618      	mov	r0, r3
 8004324:	3710      	adds	r7, #16
 8004326:	46bd      	mov	sp, r7
 8004328:	bd80      	pop	{r7, pc}

0800432a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800432a:	b480      	push	{r7}
 800432c:	b083      	sub	sp, #12
 800432e:	af00      	add	r7, sp, #0
 8004330:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	695b      	ldr	r3, [r3, #20]
 8004338:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800433c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004340:	d11b      	bne.n	800437a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800434a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2200      	movs	r2, #0
 8004350:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2220      	movs	r2, #32
 8004356:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2200      	movs	r2, #0
 800435e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004366:	f043 0204 	orr.w	r2, r3, #4
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2200      	movs	r2, #0
 8004372:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004376:	2301      	movs	r3, #1
 8004378:	e000      	b.n	800437c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800437a:	2300      	movs	r3, #0
}
 800437c:	4618      	mov	r0, r3
 800437e:	370c      	adds	r7, #12
 8004380:	46bd      	mov	sp, r7
 8004382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004386:	4770      	bx	lr

08004388 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b084      	sub	sp, #16
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
 8004390:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d101      	bne.n	800439c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004398:	2301      	movs	r3, #1
 800439a:	e0cc      	b.n	8004536 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800439c:	4b68      	ldr	r3, [pc, #416]	@ (8004540 <HAL_RCC_ClockConfig+0x1b8>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f003 030f 	and.w	r3, r3, #15
 80043a4:	683a      	ldr	r2, [r7, #0]
 80043a6:	429a      	cmp	r2, r3
 80043a8:	d90c      	bls.n	80043c4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043aa:	4b65      	ldr	r3, [pc, #404]	@ (8004540 <HAL_RCC_ClockConfig+0x1b8>)
 80043ac:	683a      	ldr	r2, [r7, #0]
 80043ae:	b2d2      	uxtb	r2, r2
 80043b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80043b2:	4b63      	ldr	r3, [pc, #396]	@ (8004540 <HAL_RCC_ClockConfig+0x1b8>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f003 030f 	and.w	r3, r3, #15
 80043ba:	683a      	ldr	r2, [r7, #0]
 80043bc:	429a      	cmp	r2, r3
 80043be:	d001      	beq.n	80043c4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80043c0:	2301      	movs	r3, #1
 80043c2:	e0b8      	b.n	8004536 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f003 0302 	and.w	r3, r3, #2
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d020      	beq.n	8004412 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f003 0304 	and.w	r3, r3, #4
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d005      	beq.n	80043e8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80043dc:	4b59      	ldr	r3, [pc, #356]	@ (8004544 <HAL_RCC_ClockConfig+0x1bc>)
 80043de:	689b      	ldr	r3, [r3, #8]
 80043e0:	4a58      	ldr	r2, [pc, #352]	@ (8004544 <HAL_RCC_ClockConfig+0x1bc>)
 80043e2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80043e6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f003 0308 	and.w	r3, r3, #8
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d005      	beq.n	8004400 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80043f4:	4b53      	ldr	r3, [pc, #332]	@ (8004544 <HAL_RCC_ClockConfig+0x1bc>)
 80043f6:	689b      	ldr	r3, [r3, #8]
 80043f8:	4a52      	ldr	r2, [pc, #328]	@ (8004544 <HAL_RCC_ClockConfig+0x1bc>)
 80043fa:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80043fe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004400:	4b50      	ldr	r3, [pc, #320]	@ (8004544 <HAL_RCC_ClockConfig+0x1bc>)
 8004402:	689b      	ldr	r3, [r3, #8]
 8004404:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	689b      	ldr	r3, [r3, #8]
 800440c:	494d      	ldr	r1, [pc, #308]	@ (8004544 <HAL_RCC_ClockConfig+0x1bc>)
 800440e:	4313      	orrs	r3, r2
 8004410:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f003 0301 	and.w	r3, r3, #1
 800441a:	2b00      	cmp	r3, #0
 800441c:	d044      	beq.n	80044a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	685b      	ldr	r3, [r3, #4]
 8004422:	2b01      	cmp	r3, #1
 8004424:	d107      	bne.n	8004436 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004426:	4b47      	ldr	r3, [pc, #284]	@ (8004544 <HAL_RCC_ClockConfig+0x1bc>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800442e:	2b00      	cmp	r3, #0
 8004430:	d119      	bne.n	8004466 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004432:	2301      	movs	r3, #1
 8004434:	e07f      	b.n	8004536 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	685b      	ldr	r3, [r3, #4]
 800443a:	2b02      	cmp	r3, #2
 800443c:	d003      	beq.n	8004446 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004442:	2b03      	cmp	r3, #3
 8004444:	d107      	bne.n	8004456 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004446:	4b3f      	ldr	r3, [pc, #252]	@ (8004544 <HAL_RCC_ClockConfig+0x1bc>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800444e:	2b00      	cmp	r3, #0
 8004450:	d109      	bne.n	8004466 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004452:	2301      	movs	r3, #1
 8004454:	e06f      	b.n	8004536 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004456:	4b3b      	ldr	r3, [pc, #236]	@ (8004544 <HAL_RCC_ClockConfig+0x1bc>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f003 0302 	and.w	r3, r3, #2
 800445e:	2b00      	cmp	r3, #0
 8004460:	d101      	bne.n	8004466 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004462:	2301      	movs	r3, #1
 8004464:	e067      	b.n	8004536 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004466:	4b37      	ldr	r3, [pc, #220]	@ (8004544 <HAL_RCC_ClockConfig+0x1bc>)
 8004468:	689b      	ldr	r3, [r3, #8]
 800446a:	f023 0203 	bic.w	r2, r3, #3
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	4934      	ldr	r1, [pc, #208]	@ (8004544 <HAL_RCC_ClockConfig+0x1bc>)
 8004474:	4313      	orrs	r3, r2
 8004476:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004478:	f7fe fc6c 	bl	8002d54 <HAL_GetTick>
 800447c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800447e:	e00a      	b.n	8004496 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004480:	f7fe fc68 	bl	8002d54 <HAL_GetTick>
 8004484:	4602      	mov	r2, r0
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	1ad3      	subs	r3, r2, r3
 800448a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800448e:	4293      	cmp	r3, r2
 8004490:	d901      	bls.n	8004496 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004492:	2303      	movs	r3, #3
 8004494:	e04f      	b.n	8004536 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004496:	4b2b      	ldr	r3, [pc, #172]	@ (8004544 <HAL_RCC_ClockConfig+0x1bc>)
 8004498:	689b      	ldr	r3, [r3, #8]
 800449a:	f003 020c 	and.w	r2, r3, #12
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	685b      	ldr	r3, [r3, #4]
 80044a2:	009b      	lsls	r3, r3, #2
 80044a4:	429a      	cmp	r2, r3
 80044a6:	d1eb      	bne.n	8004480 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80044a8:	4b25      	ldr	r3, [pc, #148]	@ (8004540 <HAL_RCC_ClockConfig+0x1b8>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f003 030f 	and.w	r3, r3, #15
 80044b0:	683a      	ldr	r2, [r7, #0]
 80044b2:	429a      	cmp	r2, r3
 80044b4:	d20c      	bcs.n	80044d0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044b6:	4b22      	ldr	r3, [pc, #136]	@ (8004540 <HAL_RCC_ClockConfig+0x1b8>)
 80044b8:	683a      	ldr	r2, [r7, #0]
 80044ba:	b2d2      	uxtb	r2, r2
 80044bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80044be:	4b20      	ldr	r3, [pc, #128]	@ (8004540 <HAL_RCC_ClockConfig+0x1b8>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f003 030f 	and.w	r3, r3, #15
 80044c6:	683a      	ldr	r2, [r7, #0]
 80044c8:	429a      	cmp	r2, r3
 80044ca:	d001      	beq.n	80044d0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80044cc:	2301      	movs	r3, #1
 80044ce:	e032      	b.n	8004536 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f003 0304 	and.w	r3, r3, #4
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d008      	beq.n	80044ee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80044dc:	4b19      	ldr	r3, [pc, #100]	@ (8004544 <HAL_RCC_ClockConfig+0x1bc>)
 80044de:	689b      	ldr	r3, [r3, #8]
 80044e0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	68db      	ldr	r3, [r3, #12]
 80044e8:	4916      	ldr	r1, [pc, #88]	@ (8004544 <HAL_RCC_ClockConfig+0x1bc>)
 80044ea:	4313      	orrs	r3, r2
 80044ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f003 0308 	and.w	r3, r3, #8
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d009      	beq.n	800450e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80044fa:	4b12      	ldr	r3, [pc, #72]	@ (8004544 <HAL_RCC_ClockConfig+0x1bc>)
 80044fc:	689b      	ldr	r3, [r3, #8]
 80044fe:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	691b      	ldr	r3, [r3, #16]
 8004506:	00db      	lsls	r3, r3, #3
 8004508:	490e      	ldr	r1, [pc, #56]	@ (8004544 <HAL_RCC_ClockConfig+0x1bc>)
 800450a:	4313      	orrs	r3, r2
 800450c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800450e:	f000 f855 	bl	80045bc <HAL_RCC_GetSysClockFreq>
 8004512:	4602      	mov	r2, r0
 8004514:	4b0b      	ldr	r3, [pc, #44]	@ (8004544 <HAL_RCC_ClockConfig+0x1bc>)
 8004516:	689b      	ldr	r3, [r3, #8]
 8004518:	091b      	lsrs	r3, r3, #4
 800451a:	f003 030f 	and.w	r3, r3, #15
 800451e:	490a      	ldr	r1, [pc, #40]	@ (8004548 <HAL_RCC_ClockConfig+0x1c0>)
 8004520:	5ccb      	ldrb	r3, [r1, r3]
 8004522:	fa22 f303 	lsr.w	r3, r2, r3
 8004526:	4a09      	ldr	r2, [pc, #36]	@ (800454c <HAL_RCC_ClockConfig+0x1c4>)
 8004528:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800452a:	4b09      	ldr	r3, [pc, #36]	@ (8004550 <HAL_RCC_ClockConfig+0x1c8>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	4618      	mov	r0, r3
 8004530:	f7fe fbcc 	bl	8002ccc <HAL_InitTick>

  return HAL_OK;
 8004534:	2300      	movs	r3, #0
}
 8004536:	4618      	mov	r0, r3
 8004538:	3710      	adds	r7, #16
 800453a:	46bd      	mov	sp, r7
 800453c:	bd80      	pop	{r7, pc}
 800453e:	bf00      	nop
 8004540:	40023c00 	.word	0x40023c00
 8004544:	40023800 	.word	0x40023800
 8004548:	080088d8 	.word	0x080088d8
 800454c:	20000018 	.word	0x20000018
 8004550:	2000001c 	.word	0x2000001c

08004554 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004554:	b480      	push	{r7}
 8004556:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004558:	4b03      	ldr	r3, [pc, #12]	@ (8004568 <HAL_RCC_GetHCLKFreq+0x14>)
 800455a:	681b      	ldr	r3, [r3, #0]
}
 800455c:	4618      	mov	r0, r3
 800455e:	46bd      	mov	sp, r7
 8004560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004564:	4770      	bx	lr
 8004566:	bf00      	nop
 8004568:	20000018 	.word	0x20000018

0800456c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800456c:	b580      	push	{r7, lr}
 800456e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004570:	f7ff fff0 	bl	8004554 <HAL_RCC_GetHCLKFreq>
 8004574:	4602      	mov	r2, r0
 8004576:	4b05      	ldr	r3, [pc, #20]	@ (800458c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004578:	689b      	ldr	r3, [r3, #8]
 800457a:	0a9b      	lsrs	r3, r3, #10
 800457c:	f003 0307 	and.w	r3, r3, #7
 8004580:	4903      	ldr	r1, [pc, #12]	@ (8004590 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004582:	5ccb      	ldrb	r3, [r1, r3]
 8004584:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004588:	4618      	mov	r0, r3
 800458a:	bd80      	pop	{r7, pc}
 800458c:	40023800 	.word	0x40023800
 8004590:	080088e8 	.word	0x080088e8

08004594 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004598:	f7ff ffdc 	bl	8004554 <HAL_RCC_GetHCLKFreq>
 800459c:	4602      	mov	r2, r0
 800459e:	4b05      	ldr	r3, [pc, #20]	@ (80045b4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80045a0:	689b      	ldr	r3, [r3, #8]
 80045a2:	0b5b      	lsrs	r3, r3, #13
 80045a4:	f003 0307 	and.w	r3, r3, #7
 80045a8:	4903      	ldr	r1, [pc, #12]	@ (80045b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80045aa:	5ccb      	ldrb	r3, [r1, r3]
 80045ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80045b0:	4618      	mov	r0, r3
 80045b2:	bd80      	pop	{r7, pc}
 80045b4:	40023800 	.word	0x40023800
 80045b8:	080088e8 	.word	0x080088e8

080045bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80045bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80045c0:	b0ae      	sub	sp, #184	@ 0xb8
 80045c2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80045c4:	2300      	movs	r3, #0
 80045c6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 80045ca:	2300      	movs	r3, #0
 80045cc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80045d0:	2300      	movs	r3, #0
 80045d2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 80045d6:	2300      	movs	r3, #0
 80045d8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 80045dc:	2300      	movs	r3, #0
 80045de:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80045e2:	4bcb      	ldr	r3, [pc, #812]	@ (8004910 <HAL_RCC_GetSysClockFreq+0x354>)
 80045e4:	689b      	ldr	r3, [r3, #8]
 80045e6:	f003 030c 	and.w	r3, r3, #12
 80045ea:	2b0c      	cmp	r3, #12
 80045ec:	f200 8206 	bhi.w	80049fc <HAL_RCC_GetSysClockFreq+0x440>
 80045f0:	a201      	add	r2, pc, #4	@ (adr r2, 80045f8 <HAL_RCC_GetSysClockFreq+0x3c>)
 80045f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045f6:	bf00      	nop
 80045f8:	0800462d 	.word	0x0800462d
 80045fc:	080049fd 	.word	0x080049fd
 8004600:	080049fd 	.word	0x080049fd
 8004604:	080049fd 	.word	0x080049fd
 8004608:	08004635 	.word	0x08004635
 800460c:	080049fd 	.word	0x080049fd
 8004610:	080049fd 	.word	0x080049fd
 8004614:	080049fd 	.word	0x080049fd
 8004618:	0800463d 	.word	0x0800463d
 800461c:	080049fd 	.word	0x080049fd
 8004620:	080049fd 	.word	0x080049fd
 8004624:	080049fd 	.word	0x080049fd
 8004628:	0800482d 	.word	0x0800482d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800462c:	4bb9      	ldr	r3, [pc, #740]	@ (8004914 <HAL_RCC_GetSysClockFreq+0x358>)
 800462e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004632:	e1e7      	b.n	8004a04 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004634:	4bb8      	ldr	r3, [pc, #736]	@ (8004918 <HAL_RCC_GetSysClockFreq+0x35c>)
 8004636:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800463a:	e1e3      	b.n	8004a04 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800463c:	4bb4      	ldr	r3, [pc, #720]	@ (8004910 <HAL_RCC_GetSysClockFreq+0x354>)
 800463e:	685b      	ldr	r3, [r3, #4]
 8004640:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004644:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004648:	4bb1      	ldr	r3, [pc, #708]	@ (8004910 <HAL_RCC_GetSysClockFreq+0x354>)
 800464a:	685b      	ldr	r3, [r3, #4]
 800464c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004650:	2b00      	cmp	r3, #0
 8004652:	d071      	beq.n	8004738 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004654:	4bae      	ldr	r3, [pc, #696]	@ (8004910 <HAL_RCC_GetSysClockFreq+0x354>)
 8004656:	685b      	ldr	r3, [r3, #4]
 8004658:	099b      	lsrs	r3, r3, #6
 800465a:	2200      	movs	r2, #0
 800465c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004660:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8004664:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004668:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800466c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004670:	2300      	movs	r3, #0
 8004672:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004676:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800467a:	4622      	mov	r2, r4
 800467c:	462b      	mov	r3, r5
 800467e:	f04f 0000 	mov.w	r0, #0
 8004682:	f04f 0100 	mov.w	r1, #0
 8004686:	0159      	lsls	r1, r3, #5
 8004688:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800468c:	0150      	lsls	r0, r2, #5
 800468e:	4602      	mov	r2, r0
 8004690:	460b      	mov	r3, r1
 8004692:	4621      	mov	r1, r4
 8004694:	1a51      	subs	r1, r2, r1
 8004696:	6439      	str	r1, [r7, #64]	@ 0x40
 8004698:	4629      	mov	r1, r5
 800469a:	eb63 0301 	sbc.w	r3, r3, r1
 800469e:	647b      	str	r3, [r7, #68]	@ 0x44
 80046a0:	f04f 0200 	mov.w	r2, #0
 80046a4:	f04f 0300 	mov.w	r3, #0
 80046a8:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 80046ac:	4649      	mov	r1, r9
 80046ae:	018b      	lsls	r3, r1, #6
 80046b0:	4641      	mov	r1, r8
 80046b2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80046b6:	4641      	mov	r1, r8
 80046b8:	018a      	lsls	r2, r1, #6
 80046ba:	4641      	mov	r1, r8
 80046bc:	1a51      	subs	r1, r2, r1
 80046be:	63b9      	str	r1, [r7, #56]	@ 0x38
 80046c0:	4649      	mov	r1, r9
 80046c2:	eb63 0301 	sbc.w	r3, r3, r1
 80046c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80046c8:	f04f 0200 	mov.w	r2, #0
 80046cc:	f04f 0300 	mov.w	r3, #0
 80046d0:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 80046d4:	4649      	mov	r1, r9
 80046d6:	00cb      	lsls	r3, r1, #3
 80046d8:	4641      	mov	r1, r8
 80046da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80046de:	4641      	mov	r1, r8
 80046e0:	00ca      	lsls	r2, r1, #3
 80046e2:	4610      	mov	r0, r2
 80046e4:	4619      	mov	r1, r3
 80046e6:	4603      	mov	r3, r0
 80046e8:	4622      	mov	r2, r4
 80046ea:	189b      	adds	r3, r3, r2
 80046ec:	633b      	str	r3, [r7, #48]	@ 0x30
 80046ee:	462b      	mov	r3, r5
 80046f0:	460a      	mov	r2, r1
 80046f2:	eb42 0303 	adc.w	r3, r2, r3
 80046f6:	637b      	str	r3, [r7, #52]	@ 0x34
 80046f8:	f04f 0200 	mov.w	r2, #0
 80046fc:	f04f 0300 	mov.w	r3, #0
 8004700:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004704:	4629      	mov	r1, r5
 8004706:	024b      	lsls	r3, r1, #9
 8004708:	4621      	mov	r1, r4
 800470a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800470e:	4621      	mov	r1, r4
 8004710:	024a      	lsls	r2, r1, #9
 8004712:	4610      	mov	r0, r2
 8004714:	4619      	mov	r1, r3
 8004716:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800471a:	2200      	movs	r2, #0
 800471c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004720:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004724:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8004728:	f7fc fa28 	bl	8000b7c <__aeabi_uldivmod>
 800472c:	4602      	mov	r2, r0
 800472e:	460b      	mov	r3, r1
 8004730:	4613      	mov	r3, r2
 8004732:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004736:	e067      	b.n	8004808 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004738:	4b75      	ldr	r3, [pc, #468]	@ (8004910 <HAL_RCC_GetSysClockFreq+0x354>)
 800473a:	685b      	ldr	r3, [r3, #4]
 800473c:	099b      	lsrs	r3, r3, #6
 800473e:	2200      	movs	r2, #0
 8004740:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004744:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8004748:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800474c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004750:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004752:	2300      	movs	r3, #0
 8004754:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004756:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800475a:	4622      	mov	r2, r4
 800475c:	462b      	mov	r3, r5
 800475e:	f04f 0000 	mov.w	r0, #0
 8004762:	f04f 0100 	mov.w	r1, #0
 8004766:	0159      	lsls	r1, r3, #5
 8004768:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800476c:	0150      	lsls	r0, r2, #5
 800476e:	4602      	mov	r2, r0
 8004770:	460b      	mov	r3, r1
 8004772:	4621      	mov	r1, r4
 8004774:	1a51      	subs	r1, r2, r1
 8004776:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004778:	4629      	mov	r1, r5
 800477a:	eb63 0301 	sbc.w	r3, r3, r1
 800477e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004780:	f04f 0200 	mov.w	r2, #0
 8004784:	f04f 0300 	mov.w	r3, #0
 8004788:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 800478c:	4649      	mov	r1, r9
 800478e:	018b      	lsls	r3, r1, #6
 8004790:	4641      	mov	r1, r8
 8004792:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004796:	4641      	mov	r1, r8
 8004798:	018a      	lsls	r2, r1, #6
 800479a:	4641      	mov	r1, r8
 800479c:	ebb2 0a01 	subs.w	sl, r2, r1
 80047a0:	4649      	mov	r1, r9
 80047a2:	eb63 0b01 	sbc.w	fp, r3, r1
 80047a6:	f04f 0200 	mov.w	r2, #0
 80047aa:	f04f 0300 	mov.w	r3, #0
 80047ae:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80047b2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80047b6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80047ba:	4692      	mov	sl, r2
 80047bc:	469b      	mov	fp, r3
 80047be:	4623      	mov	r3, r4
 80047c0:	eb1a 0303 	adds.w	r3, sl, r3
 80047c4:	623b      	str	r3, [r7, #32]
 80047c6:	462b      	mov	r3, r5
 80047c8:	eb4b 0303 	adc.w	r3, fp, r3
 80047cc:	627b      	str	r3, [r7, #36]	@ 0x24
 80047ce:	f04f 0200 	mov.w	r2, #0
 80047d2:	f04f 0300 	mov.w	r3, #0
 80047d6:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80047da:	4629      	mov	r1, r5
 80047dc:	028b      	lsls	r3, r1, #10
 80047de:	4621      	mov	r1, r4
 80047e0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80047e4:	4621      	mov	r1, r4
 80047e6:	028a      	lsls	r2, r1, #10
 80047e8:	4610      	mov	r0, r2
 80047ea:	4619      	mov	r1, r3
 80047ec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80047f0:	2200      	movs	r2, #0
 80047f2:	673b      	str	r3, [r7, #112]	@ 0x70
 80047f4:	677a      	str	r2, [r7, #116]	@ 0x74
 80047f6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80047fa:	f7fc f9bf 	bl	8000b7c <__aeabi_uldivmod>
 80047fe:	4602      	mov	r2, r0
 8004800:	460b      	mov	r3, r1
 8004802:	4613      	mov	r3, r2
 8004804:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004808:	4b41      	ldr	r3, [pc, #260]	@ (8004910 <HAL_RCC_GetSysClockFreq+0x354>)
 800480a:	685b      	ldr	r3, [r3, #4]
 800480c:	0c1b      	lsrs	r3, r3, #16
 800480e:	f003 0303 	and.w	r3, r3, #3
 8004812:	3301      	adds	r3, #1
 8004814:	005b      	lsls	r3, r3, #1
 8004816:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 800481a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800481e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004822:	fbb2 f3f3 	udiv	r3, r2, r3
 8004826:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800482a:	e0eb      	b.n	8004a04 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800482c:	4b38      	ldr	r3, [pc, #224]	@ (8004910 <HAL_RCC_GetSysClockFreq+0x354>)
 800482e:	685b      	ldr	r3, [r3, #4]
 8004830:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004834:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004838:	4b35      	ldr	r3, [pc, #212]	@ (8004910 <HAL_RCC_GetSysClockFreq+0x354>)
 800483a:	685b      	ldr	r3, [r3, #4]
 800483c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004840:	2b00      	cmp	r3, #0
 8004842:	d06b      	beq.n	800491c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004844:	4b32      	ldr	r3, [pc, #200]	@ (8004910 <HAL_RCC_GetSysClockFreq+0x354>)
 8004846:	685b      	ldr	r3, [r3, #4]
 8004848:	099b      	lsrs	r3, r3, #6
 800484a:	2200      	movs	r2, #0
 800484c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800484e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004850:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004852:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004856:	663b      	str	r3, [r7, #96]	@ 0x60
 8004858:	2300      	movs	r3, #0
 800485a:	667b      	str	r3, [r7, #100]	@ 0x64
 800485c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8004860:	4622      	mov	r2, r4
 8004862:	462b      	mov	r3, r5
 8004864:	f04f 0000 	mov.w	r0, #0
 8004868:	f04f 0100 	mov.w	r1, #0
 800486c:	0159      	lsls	r1, r3, #5
 800486e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004872:	0150      	lsls	r0, r2, #5
 8004874:	4602      	mov	r2, r0
 8004876:	460b      	mov	r3, r1
 8004878:	4621      	mov	r1, r4
 800487a:	1a51      	subs	r1, r2, r1
 800487c:	61b9      	str	r1, [r7, #24]
 800487e:	4629      	mov	r1, r5
 8004880:	eb63 0301 	sbc.w	r3, r3, r1
 8004884:	61fb      	str	r3, [r7, #28]
 8004886:	f04f 0200 	mov.w	r2, #0
 800488a:	f04f 0300 	mov.w	r3, #0
 800488e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8004892:	4659      	mov	r1, fp
 8004894:	018b      	lsls	r3, r1, #6
 8004896:	4651      	mov	r1, sl
 8004898:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800489c:	4651      	mov	r1, sl
 800489e:	018a      	lsls	r2, r1, #6
 80048a0:	4651      	mov	r1, sl
 80048a2:	ebb2 0801 	subs.w	r8, r2, r1
 80048a6:	4659      	mov	r1, fp
 80048a8:	eb63 0901 	sbc.w	r9, r3, r1
 80048ac:	f04f 0200 	mov.w	r2, #0
 80048b0:	f04f 0300 	mov.w	r3, #0
 80048b4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80048b8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80048bc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80048c0:	4690      	mov	r8, r2
 80048c2:	4699      	mov	r9, r3
 80048c4:	4623      	mov	r3, r4
 80048c6:	eb18 0303 	adds.w	r3, r8, r3
 80048ca:	613b      	str	r3, [r7, #16]
 80048cc:	462b      	mov	r3, r5
 80048ce:	eb49 0303 	adc.w	r3, r9, r3
 80048d2:	617b      	str	r3, [r7, #20]
 80048d4:	f04f 0200 	mov.w	r2, #0
 80048d8:	f04f 0300 	mov.w	r3, #0
 80048dc:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80048e0:	4629      	mov	r1, r5
 80048e2:	024b      	lsls	r3, r1, #9
 80048e4:	4621      	mov	r1, r4
 80048e6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80048ea:	4621      	mov	r1, r4
 80048ec:	024a      	lsls	r2, r1, #9
 80048ee:	4610      	mov	r0, r2
 80048f0:	4619      	mov	r1, r3
 80048f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80048f6:	2200      	movs	r2, #0
 80048f8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80048fa:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80048fc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004900:	f7fc f93c 	bl	8000b7c <__aeabi_uldivmod>
 8004904:	4602      	mov	r2, r0
 8004906:	460b      	mov	r3, r1
 8004908:	4613      	mov	r3, r2
 800490a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800490e:	e065      	b.n	80049dc <HAL_RCC_GetSysClockFreq+0x420>
 8004910:	40023800 	.word	0x40023800
 8004914:	00f42400 	.word	0x00f42400
 8004918:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800491c:	4b3d      	ldr	r3, [pc, #244]	@ (8004a14 <HAL_RCC_GetSysClockFreq+0x458>)
 800491e:	685b      	ldr	r3, [r3, #4]
 8004920:	099b      	lsrs	r3, r3, #6
 8004922:	2200      	movs	r2, #0
 8004924:	4618      	mov	r0, r3
 8004926:	4611      	mov	r1, r2
 8004928:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800492c:	653b      	str	r3, [r7, #80]	@ 0x50
 800492e:	2300      	movs	r3, #0
 8004930:	657b      	str	r3, [r7, #84]	@ 0x54
 8004932:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8004936:	4642      	mov	r2, r8
 8004938:	464b      	mov	r3, r9
 800493a:	f04f 0000 	mov.w	r0, #0
 800493e:	f04f 0100 	mov.w	r1, #0
 8004942:	0159      	lsls	r1, r3, #5
 8004944:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004948:	0150      	lsls	r0, r2, #5
 800494a:	4602      	mov	r2, r0
 800494c:	460b      	mov	r3, r1
 800494e:	4641      	mov	r1, r8
 8004950:	1a51      	subs	r1, r2, r1
 8004952:	60b9      	str	r1, [r7, #8]
 8004954:	4649      	mov	r1, r9
 8004956:	eb63 0301 	sbc.w	r3, r3, r1
 800495a:	60fb      	str	r3, [r7, #12]
 800495c:	f04f 0200 	mov.w	r2, #0
 8004960:	f04f 0300 	mov.w	r3, #0
 8004964:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8004968:	4659      	mov	r1, fp
 800496a:	018b      	lsls	r3, r1, #6
 800496c:	4651      	mov	r1, sl
 800496e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004972:	4651      	mov	r1, sl
 8004974:	018a      	lsls	r2, r1, #6
 8004976:	4651      	mov	r1, sl
 8004978:	1a54      	subs	r4, r2, r1
 800497a:	4659      	mov	r1, fp
 800497c:	eb63 0501 	sbc.w	r5, r3, r1
 8004980:	f04f 0200 	mov.w	r2, #0
 8004984:	f04f 0300 	mov.w	r3, #0
 8004988:	00eb      	lsls	r3, r5, #3
 800498a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800498e:	00e2      	lsls	r2, r4, #3
 8004990:	4614      	mov	r4, r2
 8004992:	461d      	mov	r5, r3
 8004994:	4643      	mov	r3, r8
 8004996:	18e3      	adds	r3, r4, r3
 8004998:	603b      	str	r3, [r7, #0]
 800499a:	464b      	mov	r3, r9
 800499c:	eb45 0303 	adc.w	r3, r5, r3
 80049a0:	607b      	str	r3, [r7, #4]
 80049a2:	f04f 0200 	mov.w	r2, #0
 80049a6:	f04f 0300 	mov.w	r3, #0
 80049aa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80049ae:	4629      	mov	r1, r5
 80049b0:	028b      	lsls	r3, r1, #10
 80049b2:	4621      	mov	r1, r4
 80049b4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80049b8:	4621      	mov	r1, r4
 80049ba:	028a      	lsls	r2, r1, #10
 80049bc:	4610      	mov	r0, r2
 80049be:	4619      	mov	r1, r3
 80049c0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80049c4:	2200      	movs	r2, #0
 80049c6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80049c8:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80049ca:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80049ce:	f7fc f8d5 	bl	8000b7c <__aeabi_uldivmod>
 80049d2:	4602      	mov	r2, r0
 80049d4:	460b      	mov	r3, r1
 80049d6:	4613      	mov	r3, r2
 80049d8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80049dc:	4b0d      	ldr	r3, [pc, #52]	@ (8004a14 <HAL_RCC_GetSysClockFreq+0x458>)
 80049de:	685b      	ldr	r3, [r3, #4]
 80049e0:	0f1b      	lsrs	r3, r3, #28
 80049e2:	f003 0307 	and.w	r3, r3, #7
 80049e6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 80049ea:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80049ee:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80049f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80049f6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80049fa:	e003      	b.n	8004a04 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80049fc:	4b06      	ldr	r3, [pc, #24]	@ (8004a18 <HAL_RCC_GetSysClockFreq+0x45c>)
 80049fe:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004a02:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004a04:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8004a08:	4618      	mov	r0, r3
 8004a0a:	37b8      	adds	r7, #184	@ 0xb8
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a12:	bf00      	nop
 8004a14:	40023800 	.word	0x40023800
 8004a18:	00f42400 	.word	0x00f42400

08004a1c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b086      	sub	sp, #24
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d101      	bne.n	8004a2e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	e28d      	b.n	8004f4a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f003 0301 	and.w	r3, r3, #1
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	f000 8083 	beq.w	8004b42 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004a3c:	4b94      	ldr	r3, [pc, #592]	@ (8004c90 <HAL_RCC_OscConfig+0x274>)
 8004a3e:	689b      	ldr	r3, [r3, #8]
 8004a40:	f003 030c 	and.w	r3, r3, #12
 8004a44:	2b04      	cmp	r3, #4
 8004a46:	d019      	beq.n	8004a7c <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004a48:	4b91      	ldr	r3, [pc, #580]	@ (8004c90 <HAL_RCC_OscConfig+0x274>)
 8004a4a:	689b      	ldr	r3, [r3, #8]
 8004a4c:	f003 030c 	and.w	r3, r3, #12
        || \
 8004a50:	2b08      	cmp	r3, #8
 8004a52:	d106      	bne.n	8004a62 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004a54:	4b8e      	ldr	r3, [pc, #568]	@ (8004c90 <HAL_RCC_OscConfig+0x274>)
 8004a56:	685b      	ldr	r3, [r3, #4]
 8004a58:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004a5c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004a60:	d00c      	beq.n	8004a7c <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004a62:	4b8b      	ldr	r3, [pc, #556]	@ (8004c90 <HAL_RCC_OscConfig+0x274>)
 8004a64:	689b      	ldr	r3, [r3, #8]
 8004a66:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004a6a:	2b0c      	cmp	r3, #12
 8004a6c:	d112      	bne.n	8004a94 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004a6e:	4b88      	ldr	r3, [pc, #544]	@ (8004c90 <HAL_RCC_OscConfig+0x274>)
 8004a70:	685b      	ldr	r3, [r3, #4]
 8004a72:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004a76:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004a7a:	d10b      	bne.n	8004a94 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a7c:	4b84      	ldr	r3, [pc, #528]	@ (8004c90 <HAL_RCC_OscConfig+0x274>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d05b      	beq.n	8004b40 <HAL_RCC_OscConfig+0x124>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	685b      	ldr	r3, [r3, #4]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d157      	bne.n	8004b40 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004a90:	2301      	movs	r3, #1
 8004a92:	e25a      	b.n	8004f4a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	685b      	ldr	r3, [r3, #4]
 8004a98:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a9c:	d106      	bne.n	8004aac <HAL_RCC_OscConfig+0x90>
 8004a9e:	4b7c      	ldr	r3, [pc, #496]	@ (8004c90 <HAL_RCC_OscConfig+0x274>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	4a7b      	ldr	r2, [pc, #492]	@ (8004c90 <HAL_RCC_OscConfig+0x274>)
 8004aa4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004aa8:	6013      	str	r3, [r2, #0]
 8004aaa:	e01d      	b.n	8004ae8 <HAL_RCC_OscConfig+0xcc>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	685b      	ldr	r3, [r3, #4]
 8004ab0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004ab4:	d10c      	bne.n	8004ad0 <HAL_RCC_OscConfig+0xb4>
 8004ab6:	4b76      	ldr	r3, [pc, #472]	@ (8004c90 <HAL_RCC_OscConfig+0x274>)
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4a75      	ldr	r2, [pc, #468]	@ (8004c90 <HAL_RCC_OscConfig+0x274>)
 8004abc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004ac0:	6013      	str	r3, [r2, #0]
 8004ac2:	4b73      	ldr	r3, [pc, #460]	@ (8004c90 <HAL_RCC_OscConfig+0x274>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	4a72      	ldr	r2, [pc, #456]	@ (8004c90 <HAL_RCC_OscConfig+0x274>)
 8004ac8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004acc:	6013      	str	r3, [r2, #0]
 8004ace:	e00b      	b.n	8004ae8 <HAL_RCC_OscConfig+0xcc>
 8004ad0:	4b6f      	ldr	r3, [pc, #444]	@ (8004c90 <HAL_RCC_OscConfig+0x274>)
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	4a6e      	ldr	r2, [pc, #440]	@ (8004c90 <HAL_RCC_OscConfig+0x274>)
 8004ad6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004ada:	6013      	str	r3, [r2, #0]
 8004adc:	4b6c      	ldr	r3, [pc, #432]	@ (8004c90 <HAL_RCC_OscConfig+0x274>)
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	4a6b      	ldr	r2, [pc, #428]	@ (8004c90 <HAL_RCC_OscConfig+0x274>)
 8004ae2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004ae6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	685b      	ldr	r3, [r3, #4]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d013      	beq.n	8004b18 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004af0:	f7fe f930 	bl	8002d54 <HAL_GetTick>
 8004af4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004af6:	e008      	b.n	8004b0a <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004af8:	f7fe f92c 	bl	8002d54 <HAL_GetTick>
 8004afc:	4602      	mov	r2, r0
 8004afe:	693b      	ldr	r3, [r7, #16]
 8004b00:	1ad3      	subs	r3, r2, r3
 8004b02:	2b64      	cmp	r3, #100	@ 0x64
 8004b04:	d901      	bls.n	8004b0a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004b06:	2303      	movs	r3, #3
 8004b08:	e21f      	b.n	8004f4a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b0a:	4b61      	ldr	r3, [pc, #388]	@ (8004c90 <HAL_RCC_OscConfig+0x274>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d0f0      	beq.n	8004af8 <HAL_RCC_OscConfig+0xdc>
 8004b16:	e014      	b.n	8004b42 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b18:	f7fe f91c 	bl	8002d54 <HAL_GetTick>
 8004b1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b1e:	e008      	b.n	8004b32 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b20:	f7fe f918 	bl	8002d54 <HAL_GetTick>
 8004b24:	4602      	mov	r2, r0
 8004b26:	693b      	ldr	r3, [r7, #16]
 8004b28:	1ad3      	subs	r3, r2, r3
 8004b2a:	2b64      	cmp	r3, #100	@ 0x64
 8004b2c:	d901      	bls.n	8004b32 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004b2e:	2303      	movs	r3, #3
 8004b30:	e20b      	b.n	8004f4a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b32:	4b57      	ldr	r3, [pc, #348]	@ (8004c90 <HAL_RCC_OscConfig+0x274>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d1f0      	bne.n	8004b20 <HAL_RCC_OscConfig+0x104>
 8004b3e:	e000      	b.n	8004b42 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f003 0302 	and.w	r3, r3, #2
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d06f      	beq.n	8004c2e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004b4e:	4b50      	ldr	r3, [pc, #320]	@ (8004c90 <HAL_RCC_OscConfig+0x274>)
 8004b50:	689b      	ldr	r3, [r3, #8]
 8004b52:	f003 030c 	and.w	r3, r3, #12
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d017      	beq.n	8004b8a <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004b5a:	4b4d      	ldr	r3, [pc, #308]	@ (8004c90 <HAL_RCC_OscConfig+0x274>)
 8004b5c:	689b      	ldr	r3, [r3, #8]
 8004b5e:	f003 030c 	and.w	r3, r3, #12
        || \
 8004b62:	2b08      	cmp	r3, #8
 8004b64:	d105      	bne.n	8004b72 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004b66:	4b4a      	ldr	r3, [pc, #296]	@ (8004c90 <HAL_RCC_OscConfig+0x274>)
 8004b68:	685b      	ldr	r3, [r3, #4]
 8004b6a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d00b      	beq.n	8004b8a <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004b72:	4b47      	ldr	r3, [pc, #284]	@ (8004c90 <HAL_RCC_OscConfig+0x274>)
 8004b74:	689b      	ldr	r3, [r3, #8]
 8004b76:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004b7a:	2b0c      	cmp	r3, #12
 8004b7c:	d11c      	bne.n	8004bb8 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004b7e:	4b44      	ldr	r3, [pc, #272]	@ (8004c90 <HAL_RCC_OscConfig+0x274>)
 8004b80:	685b      	ldr	r3, [r3, #4]
 8004b82:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d116      	bne.n	8004bb8 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b8a:	4b41      	ldr	r3, [pc, #260]	@ (8004c90 <HAL_RCC_OscConfig+0x274>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f003 0302 	and.w	r3, r3, #2
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d005      	beq.n	8004ba2 <HAL_RCC_OscConfig+0x186>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	68db      	ldr	r3, [r3, #12]
 8004b9a:	2b01      	cmp	r3, #1
 8004b9c:	d001      	beq.n	8004ba2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	e1d3      	b.n	8004f4a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ba2:	4b3b      	ldr	r3, [pc, #236]	@ (8004c90 <HAL_RCC_OscConfig+0x274>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	691b      	ldr	r3, [r3, #16]
 8004bae:	00db      	lsls	r3, r3, #3
 8004bb0:	4937      	ldr	r1, [pc, #220]	@ (8004c90 <HAL_RCC_OscConfig+0x274>)
 8004bb2:	4313      	orrs	r3, r2
 8004bb4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004bb6:	e03a      	b.n	8004c2e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	68db      	ldr	r3, [r3, #12]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d020      	beq.n	8004c02 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004bc0:	4b34      	ldr	r3, [pc, #208]	@ (8004c94 <HAL_RCC_OscConfig+0x278>)
 8004bc2:	2201      	movs	r2, #1
 8004bc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bc6:	f7fe f8c5 	bl	8002d54 <HAL_GetTick>
 8004bca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bcc:	e008      	b.n	8004be0 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004bce:	f7fe f8c1 	bl	8002d54 <HAL_GetTick>
 8004bd2:	4602      	mov	r2, r0
 8004bd4:	693b      	ldr	r3, [r7, #16]
 8004bd6:	1ad3      	subs	r3, r2, r3
 8004bd8:	2b02      	cmp	r3, #2
 8004bda:	d901      	bls.n	8004be0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004bdc:	2303      	movs	r3, #3
 8004bde:	e1b4      	b.n	8004f4a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004be0:	4b2b      	ldr	r3, [pc, #172]	@ (8004c90 <HAL_RCC_OscConfig+0x274>)
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f003 0302 	and.w	r3, r3, #2
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d0f0      	beq.n	8004bce <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bec:	4b28      	ldr	r3, [pc, #160]	@ (8004c90 <HAL_RCC_OscConfig+0x274>)
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	691b      	ldr	r3, [r3, #16]
 8004bf8:	00db      	lsls	r3, r3, #3
 8004bfa:	4925      	ldr	r1, [pc, #148]	@ (8004c90 <HAL_RCC_OscConfig+0x274>)
 8004bfc:	4313      	orrs	r3, r2
 8004bfe:	600b      	str	r3, [r1, #0]
 8004c00:	e015      	b.n	8004c2e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c02:	4b24      	ldr	r3, [pc, #144]	@ (8004c94 <HAL_RCC_OscConfig+0x278>)
 8004c04:	2200      	movs	r2, #0
 8004c06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c08:	f7fe f8a4 	bl	8002d54 <HAL_GetTick>
 8004c0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c0e:	e008      	b.n	8004c22 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c10:	f7fe f8a0 	bl	8002d54 <HAL_GetTick>
 8004c14:	4602      	mov	r2, r0
 8004c16:	693b      	ldr	r3, [r7, #16]
 8004c18:	1ad3      	subs	r3, r2, r3
 8004c1a:	2b02      	cmp	r3, #2
 8004c1c:	d901      	bls.n	8004c22 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004c1e:	2303      	movs	r3, #3
 8004c20:	e193      	b.n	8004f4a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c22:	4b1b      	ldr	r3, [pc, #108]	@ (8004c90 <HAL_RCC_OscConfig+0x274>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f003 0302 	and.w	r3, r3, #2
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d1f0      	bne.n	8004c10 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f003 0308 	and.w	r3, r3, #8
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d036      	beq.n	8004ca8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	695b      	ldr	r3, [r3, #20]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d016      	beq.n	8004c70 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004c42:	4b15      	ldr	r3, [pc, #84]	@ (8004c98 <HAL_RCC_OscConfig+0x27c>)
 8004c44:	2201      	movs	r2, #1
 8004c46:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c48:	f7fe f884 	bl	8002d54 <HAL_GetTick>
 8004c4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c4e:	e008      	b.n	8004c62 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c50:	f7fe f880 	bl	8002d54 <HAL_GetTick>
 8004c54:	4602      	mov	r2, r0
 8004c56:	693b      	ldr	r3, [r7, #16]
 8004c58:	1ad3      	subs	r3, r2, r3
 8004c5a:	2b02      	cmp	r3, #2
 8004c5c:	d901      	bls.n	8004c62 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004c5e:	2303      	movs	r3, #3
 8004c60:	e173      	b.n	8004f4a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c62:	4b0b      	ldr	r3, [pc, #44]	@ (8004c90 <HAL_RCC_OscConfig+0x274>)
 8004c64:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c66:	f003 0302 	and.w	r3, r3, #2
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d0f0      	beq.n	8004c50 <HAL_RCC_OscConfig+0x234>
 8004c6e:	e01b      	b.n	8004ca8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004c70:	4b09      	ldr	r3, [pc, #36]	@ (8004c98 <HAL_RCC_OscConfig+0x27c>)
 8004c72:	2200      	movs	r2, #0
 8004c74:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c76:	f7fe f86d 	bl	8002d54 <HAL_GetTick>
 8004c7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c7c:	e00e      	b.n	8004c9c <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c7e:	f7fe f869 	bl	8002d54 <HAL_GetTick>
 8004c82:	4602      	mov	r2, r0
 8004c84:	693b      	ldr	r3, [r7, #16]
 8004c86:	1ad3      	subs	r3, r2, r3
 8004c88:	2b02      	cmp	r3, #2
 8004c8a:	d907      	bls.n	8004c9c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004c8c:	2303      	movs	r3, #3
 8004c8e:	e15c      	b.n	8004f4a <HAL_RCC_OscConfig+0x52e>
 8004c90:	40023800 	.word	0x40023800
 8004c94:	42470000 	.word	0x42470000
 8004c98:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c9c:	4b8a      	ldr	r3, [pc, #552]	@ (8004ec8 <HAL_RCC_OscConfig+0x4ac>)
 8004c9e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ca0:	f003 0302 	and.w	r3, r3, #2
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d1ea      	bne.n	8004c7e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f003 0304 	and.w	r3, r3, #4
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	f000 8097 	beq.w	8004de4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004cba:	4b83      	ldr	r3, [pc, #524]	@ (8004ec8 <HAL_RCC_OscConfig+0x4ac>)
 8004cbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cbe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d10f      	bne.n	8004ce6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	60bb      	str	r3, [r7, #8]
 8004cca:	4b7f      	ldr	r3, [pc, #508]	@ (8004ec8 <HAL_RCC_OscConfig+0x4ac>)
 8004ccc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cce:	4a7e      	ldr	r2, [pc, #504]	@ (8004ec8 <HAL_RCC_OscConfig+0x4ac>)
 8004cd0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004cd4:	6413      	str	r3, [r2, #64]	@ 0x40
 8004cd6:	4b7c      	ldr	r3, [pc, #496]	@ (8004ec8 <HAL_RCC_OscConfig+0x4ac>)
 8004cd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cda:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004cde:	60bb      	str	r3, [r7, #8]
 8004ce0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ce6:	4b79      	ldr	r3, [pc, #484]	@ (8004ecc <HAL_RCC_OscConfig+0x4b0>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d118      	bne.n	8004d24 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004cf2:	4b76      	ldr	r3, [pc, #472]	@ (8004ecc <HAL_RCC_OscConfig+0x4b0>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	4a75      	ldr	r2, [pc, #468]	@ (8004ecc <HAL_RCC_OscConfig+0x4b0>)
 8004cf8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004cfc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004cfe:	f7fe f829 	bl	8002d54 <HAL_GetTick>
 8004d02:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d04:	e008      	b.n	8004d18 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d06:	f7fe f825 	bl	8002d54 <HAL_GetTick>
 8004d0a:	4602      	mov	r2, r0
 8004d0c:	693b      	ldr	r3, [r7, #16]
 8004d0e:	1ad3      	subs	r3, r2, r3
 8004d10:	2b02      	cmp	r3, #2
 8004d12:	d901      	bls.n	8004d18 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004d14:	2303      	movs	r3, #3
 8004d16:	e118      	b.n	8004f4a <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d18:	4b6c      	ldr	r3, [pc, #432]	@ (8004ecc <HAL_RCC_OscConfig+0x4b0>)
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d0f0      	beq.n	8004d06 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	689b      	ldr	r3, [r3, #8]
 8004d28:	2b01      	cmp	r3, #1
 8004d2a:	d106      	bne.n	8004d3a <HAL_RCC_OscConfig+0x31e>
 8004d2c:	4b66      	ldr	r3, [pc, #408]	@ (8004ec8 <HAL_RCC_OscConfig+0x4ac>)
 8004d2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d30:	4a65      	ldr	r2, [pc, #404]	@ (8004ec8 <HAL_RCC_OscConfig+0x4ac>)
 8004d32:	f043 0301 	orr.w	r3, r3, #1
 8004d36:	6713      	str	r3, [r2, #112]	@ 0x70
 8004d38:	e01c      	b.n	8004d74 <HAL_RCC_OscConfig+0x358>
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	689b      	ldr	r3, [r3, #8]
 8004d3e:	2b05      	cmp	r3, #5
 8004d40:	d10c      	bne.n	8004d5c <HAL_RCC_OscConfig+0x340>
 8004d42:	4b61      	ldr	r3, [pc, #388]	@ (8004ec8 <HAL_RCC_OscConfig+0x4ac>)
 8004d44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d46:	4a60      	ldr	r2, [pc, #384]	@ (8004ec8 <HAL_RCC_OscConfig+0x4ac>)
 8004d48:	f043 0304 	orr.w	r3, r3, #4
 8004d4c:	6713      	str	r3, [r2, #112]	@ 0x70
 8004d4e:	4b5e      	ldr	r3, [pc, #376]	@ (8004ec8 <HAL_RCC_OscConfig+0x4ac>)
 8004d50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d52:	4a5d      	ldr	r2, [pc, #372]	@ (8004ec8 <HAL_RCC_OscConfig+0x4ac>)
 8004d54:	f043 0301 	orr.w	r3, r3, #1
 8004d58:	6713      	str	r3, [r2, #112]	@ 0x70
 8004d5a:	e00b      	b.n	8004d74 <HAL_RCC_OscConfig+0x358>
 8004d5c:	4b5a      	ldr	r3, [pc, #360]	@ (8004ec8 <HAL_RCC_OscConfig+0x4ac>)
 8004d5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d60:	4a59      	ldr	r2, [pc, #356]	@ (8004ec8 <HAL_RCC_OscConfig+0x4ac>)
 8004d62:	f023 0301 	bic.w	r3, r3, #1
 8004d66:	6713      	str	r3, [r2, #112]	@ 0x70
 8004d68:	4b57      	ldr	r3, [pc, #348]	@ (8004ec8 <HAL_RCC_OscConfig+0x4ac>)
 8004d6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d6c:	4a56      	ldr	r2, [pc, #344]	@ (8004ec8 <HAL_RCC_OscConfig+0x4ac>)
 8004d6e:	f023 0304 	bic.w	r3, r3, #4
 8004d72:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	689b      	ldr	r3, [r3, #8]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d015      	beq.n	8004da8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d7c:	f7fd ffea 	bl	8002d54 <HAL_GetTick>
 8004d80:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d82:	e00a      	b.n	8004d9a <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d84:	f7fd ffe6 	bl	8002d54 <HAL_GetTick>
 8004d88:	4602      	mov	r2, r0
 8004d8a:	693b      	ldr	r3, [r7, #16]
 8004d8c:	1ad3      	subs	r3, r2, r3
 8004d8e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d901      	bls.n	8004d9a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004d96:	2303      	movs	r3, #3
 8004d98:	e0d7      	b.n	8004f4a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d9a:	4b4b      	ldr	r3, [pc, #300]	@ (8004ec8 <HAL_RCC_OscConfig+0x4ac>)
 8004d9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d9e:	f003 0302 	and.w	r3, r3, #2
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d0ee      	beq.n	8004d84 <HAL_RCC_OscConfig+0x368>
 8004da6:	e014      	b.n	8004dd2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004da8:	f7fd ffd4 	bl	8002d54 <HAL_GetTick>
 8004dac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004dae:	e00a      	b.n	8004dc6 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004db0:	f7fd ffd0 	bl	8002d54 <HAL_GetTick>
 8004db4:	4602      	mov	r2, r0
 8004db6:	693b      	ldr	r3, [r7, #16]
 8004db8:	1ad3      	subs	r3, r2, r3
 8004dba:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d901      	bls.n	8004dc6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004dc2:	2303      	movs	r3, #3
 8004dc4:	e0c1      	b.n	8004f4a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004dc6:	4b40      	ldr	r3, [pc, #256]	@ (8004ec8 <HAL_RCC_OscConfig+0x4ac>)
 8004dc8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004dca:	f003 0302 	and.w	r3, r3, #2
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d1ee      	bne.n	8004db0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004dd2:	7dfb      	ldrb	r3, [r7, #23]
 8004dd4:	2b01      	cmp	r3, #1
 8004dd6:	d105      	bne.n	8004de4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004dd8:	4b3b      	ldr	r3, [pc, #236]	@ (8004ec8 <HAL_RCC_OscConfig+0x4ac>)
 8004dda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ddc:	4a3a      	ldr	r2, [pc, #232]	@ (8004ec8 <HAL_RCC_OscConfig+0x4ac>)
 8004dde:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004de2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	699b      	ldr	r3, [r3, #24]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	f000 80ad 	beq.w	8004f48 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004dee:	4b36      	ldr	r3, [pc, #216]	@ (8004ec8 <HAL_RCC_OscConfig+0x4ac>)
 8004df0:	689b      	ldr	r3, [r3, #8]
 8004df2:	f003 030c 	and.w	r3, r3, #12
 8004df6:	2b08      	cmp	r3, #8
 8004df8:	d060      	beq.n	8004ebc <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	699b      	ldr	r3, [r3, #24]
 8004dfe:	2b02      	cmp	r3, #2
 8004e00:	d145      	bne.n	8004e8e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e02:	4b33      	ldr	r3, [pc, #204]	@ (8004ed0 <HAL_RCC_OscConfig+0x4b4>)
 8004e04:	2200      	movs	r2, #0
 8004e06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e08:	f7fd ffa4 	bl	8002d54 <HAL_GetTick>
 8004e0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e0e:	e008      	b.n	8004e22 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e10:	f7fd ffa0 	bl	8002d54 <HAL_GetTick>
 8004e14:	4602      	mov	r2, r0
 8004e16:	693b      	ldr	r3, [r7, #16]
 8004e18:	1ad3      	subs	r3, r2, r3
 8004e1a:	2b02      	cmp	r3, #2
 8004e1c:	d901      	bls.n	8004e22 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004e1e:	2303      	movs	r3, #3
 8004e20:	e093      	b.n	8004f4a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e22:	4b29      	ldr	r3, [pc, #164]	@ (8004ec8 <HAL_RCC_OscConfig+0x4ac>)
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d1f0      	bne.n	8004e10 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	69da      	ldr	r2, [r3, #28]
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6a1b      	ldr	r3, [r3, #32]
 8004e36:	431a      	orrs	r2, r3
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e3c:	019b      	lsls	r3, r3, #6
 8004e3e:	431a      	orrs	r2, r3
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e44:	085b      	lsrs	r3, r3, #1
 8004e46:	3b01      	subs	r3, #1
 8004e48:	041b      	lsls	r3, r3, #16
 8004e4a:	431a      	orrs	r2, r3
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e50:	061b      	lsls	r3, r3, #24
 8004e52:	431a      	orrs	r2, r3
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e58:	071b      	lsls	r3, r3, #28
 8004e5a:	491b      	ldr	r1, [pc, #108]	@ (8004ec8 <HAL_RCC_OscConfig+0x4ac>)
 8004e5c:	4313      	orrs	r3, r2
 8004e5e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004e60:	4b1b      	ldr	r3, [pc, #108]	@ (8004ed0 <HAL_RCC_OscConfig+0x4b4>)
 8004e62:	2201      	movs	r2, #1
 8004e64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e66:	f7fd ff75 	bl	8002d54 <HAL_GetTick>
 8004e6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e6c:	e008      	b.n	8004e80 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e6e:	f7fd ff71 	bl	8002d54 <HAL_GetTick>
 8004e72:	4602      	mov	r2, r0
 8004e74:	693b      	ldr	r3, [r7, #16]
 8004e76:	1ad3      	subs	r3, r2, r3
 8004e78:	2b02      	cmp	r3, #2
 8004e7a:	d901      	bls.n	8004e80 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004e7c:	2303      	movs	r3, #3
 8004e7e:	e064      	b.n	8004f4a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e80:	4b11      	ldr	r3, [pc, #68]	@ (8004ec8 <HAL_RCC_OscConfig+0x4ac>)
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d0f0      	beq.n	8004e6e <HAL_RCC_OscConfig+0x452>
 8004e8c:	e05c      	b.n	8004f48 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e8e:	4b10      	ldr	r3, [pc, #64]	@ (8004ed0 <HAL_RCC_OscConfig+0x4b4>)
 8004e90:	2200      	movs	r2, #0
 8004e92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e94:	f7fd ff5e 	bl	8002d54 <HAL_GetTick>
 8004e98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e9a:	e008      	b.n	8004eae <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e9c:	f7fd ff5a 	bl	8002d54 <HAL_GetTick>
 8004ea0:	4602      	mov	r2, r0
 8004ea2:	693b      	ldr	r3, [r7, #16]
 8004ea4:	1ad3      	subs	r3, r2, r3
 8004ea6:	2b02      	cmp	r3, #2
 8004ea8:	d901      	bls.n	8004eae <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004eaa:	2303      	movs	r3, #3
 8004eac:	e04d      	b.n	8004f4a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004eae:	4b06      	ldr	r3, [pc, #24]	@ (8004ec8 <HAL_RCC_OscConfig+0x4ac>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d1f0      	bne.n	8004e9c <HAL_RCC_OscConfig+0x480>
 8004eba:	e045      	b.n	8004f48 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	699b      	ldr	r3, [r3, #24]
 8004ec0:	2b01      	cmp	r3, #1
 8004ec2:	d107      	bne.n	8004ed4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004ec4:	2301      	movs	r3, #1
 8004ec6:	e040      	b.n	8004f4a <HAL_RCC_OscConfig+0x52e>
 8004ec8:	40023800 	.word	0x40023800
 8004ecc:	40007000 	.word	0x40007000
 8004ed0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004ed4:	4b1f      	ldr	r3, [pc, #124]	@ (8004f54 <HAL_RCC_OscConfig+0x538>)
 8004ed6:	685b      	ldr	r3, [r3, #4]
 8004ed8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	699b      	ldr	r3, [r3, #24]
 8004ede:	2b01      	cmp	r3, #1
 8004ee0:	d030      	beq.n	8004f44 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004eec:	429a      	cmp	r2, r3
 8004eee:	d129      	bne.n	8004f44 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004efa:	429a      	cmp	r2, r3
 8004efc:	d122      	bne.n	8004f44 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004efe:	68fa      	ldr	r2, [r7, #12]
 8004f00:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004f04:	4013      	ands	r3, r2
 8004f06:	687a      	ldr	r2, [r7, #4]
 8004f08:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004f0a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d119      	bne.n	8004f44 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f1a:	085b      	lsrs	r3, r3, #1
 8004f1c:	3b01      	subs	r3, #1
 8004f1e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004f20:	429a      	cmp	r2, r3
 8004f22:	d10f      	bne.n	8004f44 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f2e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004f30:	429a      	cmp	r2, r3
 8004f32:	d107      	bne.n	8004f44 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f3e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004f40:	429a      	cmp	r2, r3
 8004f42:	d001      	beq.n	8004f48 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004f44:	2301      	movs	r3, #1
 8004f46:	e000      	b.n	8004f4a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004f48:	2300      	movs	r3, #0
}
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	3718      	adds	r7, #24
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	bd80      	pop	{r7, pc}
 8004f52:	bf00      	nop
 8004f54:	40023800 	.word	0x40023800

08004f58 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b082      	sub	sp, #8
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d101      	bne.n	8004f6a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004f66:	2301      	movs	r3, #1
 8004f68:	e07b      	b.n	8005062 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d108      	bne.n	8004f84 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	685b      	ldr	r3, [r3, #4]
 8004f76:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004f7a:	d009      	beq.n	8004f90 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2200      	movs	r2, #0
 8004f80:	61da      	str	r2, [r3, #28]
 8004f82:	e005      	b.n	8004f90 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2200      	movs	r2, #0
 8004f88:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2200      	movs	r2, #0
 8004f94:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004f9c:	b2db      	uxtb	r3, r3
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d106      	bne.n	8004fb0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004faa:	6878      	ldr	r0, [r7, #4]
 8004fac:	f7fd f8b8 	bl	8002120 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2202      	movs	r2, #2
 8004fb4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	681a      	ldr	r2, [r3, #0]
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004fc6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	685b      	ldr	r3, [r3, #4]
 8004fcc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	689b      	ldr	r3, [r3, #8]
 8004fd4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004fd8:	431a      	orrs	r2, r3
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	68db      	ldr	r3, [r3, #12]
 8004fde:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004fe2:	431a      	orrs	r2, r3
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	691b      	ldr	r3, [r3, #16]
 8004fe8:	f003 0302 	and.w	r3, r3, #2
 8004fec:	431a      	orrs	r2, r3
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	695b      	ldr	r3, [r3, #20]
 8004ff2:	f003 0301 	and.w	r3, r3, #1
 8004ff6:	431a      	orrs	r2, r3
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	699b      	ldr	r3, [r3, #24]
 8004ffc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005000:	431a      	orrs	r2, r3
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	69db      	ldr	r3, [r3, #28]
 8005006:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800500a:	431a      	orrs	r2, r3
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6a1b      	ldr	r3, [r3, #32]
 8005010:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005014:	ea42 0103 	orr.w	r1, r2, r3
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800501c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	430a      	orrs	r2, r1
 8005026:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	699b      	ldr	r3, [r3, #24]
 800502c:	0c1b      	lsrs	r3, r3, #16
 800502e:	f003 0104 	and.w	r1, r3, #4
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005036:	f003 0210 	and.w	r2, r3, #16
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	430a      	orrs	r2, r1
 8005040:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	69da      	ldr	r2, [r3, #28]
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005050:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2200      	movs	r2, #0
 8005056:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2201      	movs	r2, #1
 800505c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005060:	2300      	movs	r3, #0
}
 8005062:	4618      	mov	r0, r3
 8005064:	3708      	adds	r7, #8
 8005066:	46bd      	mov	sp, r7
 8005068:	bd80      	pop	{r7, pc}

0800506a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800506a:	b580      	push	{r7, lr}
 800506c:	b088      	sub	sp, #32
 800506e:	af00      	add	r7, sp, #0
 8005070:	60f8      	str	r0, [r7, #12]
 8005072:	60b9      	str	r1, [r7, #8]
 8005074:	603b      	str	r3, [r7, #0]
 8005076:	4613      	mov	r3, r2
 8005078:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800507a:	f7fd fe6b 	bl	8002d54 <HAL_GetTick>
 800507e:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8005080:	88fb      	ldrh	r3, [r7, #6]
 8005082:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800508a:	b2db      	uxtb	r3, r3
 800508c:	2b01      	cmp	r3, #1
 800508e:	d001      	beq.n	8005094 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8005090:	2302      	movs	r3, #2
 8005092:	e12a      	b.n	80052ea <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8005094:	68bb      	ldr	r3, [r7, #8]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d002      	beq.n	80050a0 <HAL_SPI_Transmit+0x36>
 800509a:	88fb      	ldrh	r3, [r7, #6]
 800509c:	2b00      	cmp	r3, #0
 800509e:	d101      	bne.n	80050a4 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80050a0:	2301      	movs	r3, #1
 80050a2:	e122      	b.n	80052ea <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80050aa:	2b01      	cmp	r3, #1
 80050ac:	d101      	bne.n	80050b2 <HAL_SPI_Transmit+0x48>
 80050ae:	2302      	movs	r3, #2
 80050b0:	e11b      	b.n	80052ea <HAL_SPI_Transmit+0x280>
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	2201      	movs	r2, #1
 80050b6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	2203      	movs	r2, #3
 80050be:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	2200      	movs	r2, #0
 80050c6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	68ba      	ldr	r2, [r7, #8]
 80050cc:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	88fa      	ldrh	r2, [r7, #6]
 80050d2:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	88fa      	ldrh	r2, [r7, #6]
 80050d8:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	2200      	movs	r2, #0
 80050de:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	2200      	movs	r2, #0
 80050e4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	2200      	movs	r2, #0
 80050ea:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	2200      	movs	r2, #0
 80050f0:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	2200      	movs	r2, #0
 80050f6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	689b      	ldr	r3, [r3, #8]
 80050fc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005100:	d10f      	bne.n	8005122 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	681a      	ldr	r2, [r3, #0]
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005110:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	681a      	ldr	r2, [r3, #0]
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005120:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800512c:	2b40      	cmp	r3, #64	@ 0x40
 800512e:	d007      	beq.n	8005140 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	681a      	ldr	r2, [r3, #0]
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800513e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	68db      	ldr	r3, [r3, #12]
 8005144:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005148:	d152      	bne.n	80051f0 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	685b      	ldr	r3, [r3, #4]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d002      	beq.n	8005158 <HAL_SPI_Transmit+0xee>
 8005152:	8b7b      	ldrh	r3, [r7, #26]
 8005154:	2b01      	cmp	r3, #1
 8005156:	d145      	bne.n	80051e4 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800515c:	881a      	ldrh	r2, [r3, #0]
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005168:	1c9a      	adds	r2, r3, #2
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005172:	b29b      	uxth	r3, r3
 8005174:	3b01      	subs	r3, #1
 8005176:	b29a      	uxth	r2, r3
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800517c:	e032      	b.n	80051e4 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	689b      	ldr	r3, [r3, #8]
 8005184:	f003 0302 	and.w	r3, r3, #2
 8005188:	2b02      	cmp	r3, #2
 800518a:	d112      	bne.n	80051b2 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005190:	881a      	ldrh	r2, [r3, #0]
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800519c:	1c9a      	adds	r2, r3, #2
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80051a6:	b29b      	uxth	r3, r3
 80051a8:	3b01      	subs	r3, #1
 80051aa:	b29a      	uxth	r2, r3
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	86da      	strh	r2, [r3, #54]	@ 0x36
 80051b0:	e018      	b.n	80051e4 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80051b2:	f7fd fdcf 	bl	8002d54 <HAL_GetTick>
 80051b6:	4602      	mov	r2, r0
 80051b8:	69fb      	ldr	r3, [r7, #28]
 80051ba:	1ad3      	subs	r3, r2, r3
 80051bc:	683a      	ldr	r2, [r7, #0]
 80051be:	429a      	cmp	r2, r3
 80051c0:	d803      	bhi.n	80051ca <HAL_SPI_Transmit+0x160>
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051c8:	d102      	bne.n	80051d0 <HAL_SPI_Transmit+0x166>
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d109      	bne.n	80051e4 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	2201      	movs	r2, #1
 80051d4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	2200      	movs	r2, #0
 80051dc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80051e0:	2303      	movs	r3, #3
 80051e2:	e082      	b.n	80052ea <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80051e8:	b29b      	uxth	r3, r3
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d1c7      	bne.n	800517e <HAL_SPI_Transmit+0x114>
 80051ee:	e053      	b.n	8005298 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	685b      	ldr	r3, [r3, #4]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d002      	beq.n	80051fe <HAL_SPI_Transmit+0x194>
 80051f8:	8b7b      	ldrh	r3, [r7, #26]
 80051fa:	2b01      	cmp	r3, #1
 80051fc:	d147      	bne.n	800528e <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	330c      	adds	r3, #12
 8005208:	7812      	ldrb	r2, [r2, #0]
 800520a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005210:	1c5a      	adds	r2, r3, #1
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800521a:	b29b      	uxth	r3, r3
 800521c:	3b01      	subs	r3, #1
 800521e:	b29a      	uxth	r2, r3
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005224:	e033      	b.n	800528e <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	689b      	ldr	r3, [r3, #8]
 800522c:	f003 0302 	and.w	r3, r3, #2
 8005230:	2b02      	cmp	r3, #2
 8005232:	d113      	bne.n	800525c <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	330c      	adds	r3, #12
 800523e:	7812      	ldrb	r2, [r2, #0]
 8005240:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005246:	1c5a      	adds	r2, r3, #1
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005250:	b29b      	uxth	r3, r3
 8005252:	3b01      	subs	r3, #1
 8005254:	b29a      	uxth	r2, r3
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	86da      	strh	r2, [r3, #54]	@ 0x36
 800525a:	e018      	b.n	800528e <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800525c:	f7fd fd7a 	bl	8002d54 <HAL_GetTick>
 8005260:	4602      	mov	r2, r0
 8005262:	69fb      	ldr	r3, [r7, #28]
 8005264:	1ad3      	subs	r3, r2, r3
 8005266:	683a      	ldr	r2, [r7, #0]
 8005268:	429a      	cmp	r2, r3
 800526a:	d803      	bhi.n	8005274 <HAL_SPI_Transmit+0x20a>
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005272:	d102      	bne.n	800527a <HAL_SPI_Transmit+0x210>
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d109      	bne.n	800528e <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	2201      	movs	r2, #1
 800527e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	2200      	movs	r2, #0
 8005286:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800528a:	2303      	movs	r3, #3
 800528c:	e02d      	b.n	80052ea <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005292:	b29b      	uxth	r3, r3
 8005294:	2b00      	cmp	r3, #0
 8005296:	d1c6      	bne.n	8005226 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005298:	69fa      	ldr	r2, [r7, #28]
 800529a:	6839      	ldr	r1, [r7, #0]
 800529c:	68f8      	ldr	r0, [r7, #12]
 800529e:	f000 f8b1 	bl	8005404 <SPI_EndRxTxTransaction>
 80052a2:	4603      	mov	r3, r0
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d002      	beq.n	80052ae <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	2220      	movs	r2, #32
 80052ac:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	689b      	ldr	r3, [r3, #8]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d10a      	bne.n	80052cc <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80052b6:	2300      	movs	r3, #0
 80052b8:	617b      	str	r3, [r7, #20]
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	68db      	ldr	r3, [r3, #12]
 80052c0:	617b      	str	r3, [r7, #20]
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	689b      	ldr	r3, [r3, #8]
 80052c8:	617b      	str	r3, [r7, #20]
 80052ca:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	2201      	movs	r2, #1
 80052d0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	2200      	movs	r2, #0
 80052d8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d001      	beq.n	80052e8 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80052e4:	2301      	movs	r3, #1
 80052e6:	e000      	b.n	80052ea <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80052e8:	2300      	movs	r3, #0
  }
}
 80052ea:	4618      	mov	r0, r3
 80052ec:	3720      	adds	r7, #32
 80052ee:	46bd      	mov	sp, r7
 80052f0:	bd80      	pop	{r7, pc}
	...

080052f4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b088      	sub	sp, #32
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	60f8      	str	r0, [r7, #12]
 80052fc:	60b9      	str	r1, [r7, #8]
 80052fe:	603b      	str	r3, [r7, #0]
 8005300:	4613      	mov	r3, r2
 8005302:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005304:	f7fd fd26 	bl	8002d54 <HAL_GetTick>
 8005308:	4602      	mov	r2, r0
 800530a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800530c:	1a9b      	subs	r3, r3, r2
 800530e:	683a      	ldr	r2, [r7, #0]
 8005310:	4413      	add	r3, r2
 8005312:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005314:	f7fd fd1e 	bl	8002d54 <HAL_GetTick>
 8005318:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800531a:	4b39      	ldr	r3, [pc, #228]	@ (8005400 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	015b      	lsls	r3, r3, #5
 8005320:	0d1b      	lsrs	r3, r3, #20
 8005322:	69fa      	ldr	r2, [r7, #28]
 8005324:	fb02 f303 	mul.w	r3, r2, r3
 8005328:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800532a:	e054      	b.n	80053d6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800532c:	683b      	ldr	r3, [r7, #0]
 800532e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005332:	d050      	beq.n	80053d6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005334:	f7fd fd0e 	bl	8002d54 <HAL_GetTick>
 8005338:	4602      	mov	r2, r0
 800533a:	69bb      	ldr	r3, [r7, #24]
 800533c:	1ad3      	subs	r3, r2, r3
 800533e:	69fa      	ldr	r2, [r7, #28]
 8005340:	429a      	cmp	r2, r3
 8005342:	d902      	bls.n	800534a <SPI_WaitFlagStateUntilTimeout+0x56>
 8005344:	69fb      	ldr	r3, [r7, #28]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d13d      	bne.n	80053c6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	685a      	ldr	r2, [r3, #4]
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005358:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	685b      	ldr	r3, [r3, #4]
 800535e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005362:	d111      	bne.n	8005388 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	689b      	ldr	r3, [r3, #8]
 8005368:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800536c:	d004      	beq.n	8005378 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	689b      	ldr	r3, [r3, #8]
 8005372:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005376:	d107      	bne.n	8005388 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	681a      	ldr	r2, [r3, #0]
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005386:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800538c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005390:	d10f      	bne.n	80053b2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	681a      	ldr	r2, [r3, #0]
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80053a0:	601a      	str	r2, [r3, #0]
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	681a      	ldr	r2, [r3, #0]
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80053b0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	2201      	movs	r2, #1
 80053b6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	2200      	movs	r2, #0
 80053be:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80053c2:	2303      	movs	r3, #3
 80053c4:	e017      	b.n	80053f6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80053c6:	697b      	ldr	r3, [r7, #20]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d101      	bne.n	80053d0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80053cc:	2300      	movs	r3, #0
 80053ce:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80053d0:	697b      	ldr	r3, [r7, #20]
 80053d2:	3b01      	subs	r3, #1
 80053d4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	689a      	ldr	r2, [r3, #8]
 80053dc:	68bb      	ldr	r3, [r7, #8]
 80053de:	4013      	ands	r3, r2
 80053e0:	68ba      	ldr	r2, [r7, #8]
 80053e2:	429a      	cmp	r2, r3
 80053e4:	bf0c      	ite	eq
 80053e6:	2301      	moveq	r3, #1
 80053e8:	2300      	movne	r3, #0
 80053ea:	b2db      	uxtb	r3, r3
 80053ec:	461a      	mov	r2, r3
 80053ee:	79fb      	ldrb	r3, [r7, #7]
 80053f0:	429a      	cmp	r2, r3
 80053f2:	d19b      	bne.n	800532c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80053f4:	2300      	movs	r3, #0
}
 80053f6:	4618      	mov	r0, r3
 80053f8:	3720      	adds	r7, #32
 80053fa:	46bd      	mov	sp, r7
 80053fc:	bd80      	pop	{r7, pc}
 80053fe:	bf00      	nop
 8005400:	20000018 	.word	0x20000018

08005404 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005404:	b580      	push	{r7, lr}
 8005406:	b088      	sub	sp, #32
 8005408:	af02      	add	r7, sp, #8
 800540a:	60f8      	str	r0, [r7, #12]
 800540c:	60b9      	str	r1, [r7, #8]
 800540e:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	9300      	str	r3, [sp, #0]
 8005414:	68bb      	ldr	r3, [r7, #8]
 8005416:	2201      	movs	r2, #1
 8005418:	2102      	movs	r1, #2
 800541a:	68f8      	ldr	r0, [r7, #12]
 800541c:	f7ff ff6a 	bl	80052f4 <SPI_WaitFlagStateUntilTimeout>
 8005420:	4603      	mov	r3, r0
 8005422:	2b00      	cmp	r3, #0
 8005424:	d007      	beq.n	8005436 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800542a:	f043 0220 	orr.w	r2, r3, #32
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8005432:	2303      	movs	r3, #3
 8005434:	e032      	b.n	800549c <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005436:	4b1b      	ldr	r3, [pc, #108]	@ (80054a4 <SPI_EndRxTxTransaction+0xa0>)
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	4a1b      	ldr	r2, [pc, #108]	@ (80054a8 <SPI_EndRxTxTransaction+0xa4>)
 800543c:	fba2 2303 	umull	r2, r3, r2, r3
 8005440:	0d5b      	lsrs	r3, r3, #21
 8005442:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005446:	fb02 f303 	mul.w	r3, r2, r3
 800544a:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	685b      	ldr	r3, [r3, #4]
 8005450:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005454:	d112      	bne.n	800547c <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	9300      	str	r3, [sp, #0]
 800545a:	68bb      	ldr	r3, [r7, #8]
 800545c:	2200      	movs	r2, #0
 800545e:	2180      	movs	r1, #128	@ 0x80
 8005460:	68f8      	ldr	r0, [r7, #12]
 8005462:	f7ff ff47 	bl	80052f4 <SPI_WaitFlagStateUntilTimeout>
 8005466:	4603      	mov	r3, r0
 8005468:	2b00      	cmp	r3, #0
 800546a:	d016      	beq.n	800549a <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005470:	f043 0220 	orr.w	r2, r3, #32
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005478:	2303      	movs	r3, #3
 800547a:	e00f      	b.n	800549c <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800547c:	697b      	ldr	r3, [r7, #20]
 800547e:	2b00      	cmp	r3, #0
 8005480:	d00a      	beq.n	8005498 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8005482:	697b      	ldr	r3, [r7, #20]
 8005484:	3b01      	subs	r3, #1
 8005486:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	689b      	ldr	r3, [r3, #8]
 800548e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005492:	2b80      	cmp	r3, #128	@ 0x80
 8005494:	d0f2      	beq.n	800547c <SPI_EndRxTxTransaction+0x78>
 8005496:	e000      	b.n	800549a <SPI_EndRxTxTransaction+0x96>
        break;
 8005498:	bf00      	nop
  }

  return HAL_OK;
 800549a:	2300      	movs	r3, #0
}
 800549c:	4618      	mov	r0, r3
 800549e:	3718      	adds	r7, #24
 80054a0:	46bd      	mov	sp, r7
 80054a2:	bd80      	pop	{r7, pc}
 80054a4:	20000018 	.word	0x20000018
 80054a8:	165e9f81 	.word	0x165e9f81

080054ac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80054ac:	b580      	push	{r7, lr}
 80054ae:	b082      	sub	sp, #8
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d101      	bne.n	80054be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80054ba:	2301      	movs	r3, #1
 80054bc:	e041      	b.n	8005542 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80054c4:	b2db      	uxtb	r3, r3
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d106      	bne.n	80054d8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2200      	movs	r2, #0
 80054ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80054d2:	6878      	ldr	r0, [r7, #4]
 80054d4:	f7fd f93c 	bl	8002750 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2202      	movs	r2, #2
 80054dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681a      	ldr	r2, [r3, #0]
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	3304      	adds	r3, #4
 80054e8:	4619      	mov	r1, r3
 80054ea:	4610      	mov	r0, r2
 80054ec:	f000 fd00 	bl	8005ef0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2201      	movs	r2, #1
 80054f4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2201      	movs	r2, #1
 80054fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2201      	movs	r2, #1
 8005504:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2201      	movs	r2, #1
 800550c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2201      	movs	r2, #1
 8005514:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2201      	movs	r2, #1
 800551c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2201      	movs	r2, #1
 8005524:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2201      	movs	r2, #1
 800552c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2201      	movs	r2, #1
 8005534:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2201      	movs	r2, #1
 800553c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005540:	2300      	movs	r3, #0
}
 8005542:	4618      	mov	r0, r3
 8005544:	3708      	adds	r7, #8
 8005546:	46bd      	mov	sp, r7
 8005548:	bd80      	pop	{r7, pc}
	...

0800554c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800554c:	b480      	push	{r7}
 800554e:	b085      	sub	sp, #20
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800555a:	b2db      	uxtb	r3, r3
 800555c:	2b01      	cmp	r3, #1
 800555e:	d001      	beq.n	8005564 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005560:	2301      	movs	r3, #1
 8005562:	e04e      	b.n	8005602 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2202      	movs	r2, #2
 8005568:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	68da      	ldr	r2, [r3, #12]
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f042 0201 	orr.w	r2, r2, #1
 800557a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	4a23      	ldr	r2, [pc, #140]	@ (8005610 <HAL_TIM_Base_Start_IT+0xc4>)
 8005582:	4293      	cmp	r3, r2
 8005584:	d022      	beq.n	80055cc <HAL_TIM_Base_Start_IT+0x80>
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800558e:	d01d      	beq.n	80055cc <HAL_TIM_Base_Start_IT+0x80>
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	4a1f      	ldr	r2, [pc, #124]	@ (8005614 <HAL_TIM_Base_Start_IT+0xc8>)
 8005596:	4293      	cmp	r3, r2
 8005598:	d018      	beq.n	80055cc <HAL_TIM_Base_Start_IT+0x80>
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	4a1e      	ldr	r2, [pc, #120]	@ (8005618 <HAL_TIM_Base_Start_IT+0xcc>)
 80055a0:	4293      	cmp	r3, r2
 80055a2:	d013      	beq.n	80055cc <HAL_TIM_Base_Start_IT+0x80>
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	4a1c      	ldr	r2, [pc, #112]	@ (800561c <HAL_TIM_Base_Start_IT+0xd0>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d00e      	beq.n	80055cc <HAL_TIM_Base_Start_IT+0x80>
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	4a1b      	ldr	r2, [pc, #108]	@ (8005620 <HAL_TIM_Base_Start_IT+0xd4>)
 80055b4:	4293      	cmp	r3, r2
 80055b6:	d009      	beq.n	80055cc <HAL_TIM_Base_Start_IT+0x80>
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	4a19      	ldr	r2, [pc, #100]	@ (8005624 <HAL_TIM_Base_Start_IT+0xd8>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	d004      	beq.n	80055cc <HAL_TIM_Base_Start_IT+0x80>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	4a18      	ldr	r2, [pc, #96]	@ (8005628 <HAL_TIM_Base_Start_IT+0xdc>)
 80055c8:	4293      	cmp	r3, r2
 80055ca:	d111      	bne.n	80055f0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	689b      	ldr	r3, [r3, #8]
 80055d2:	f003 0307 	and.w	r3, r3, #7
 80055d6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	2b06      	cmp	r3, #6
 80055dc:	d010      	beq.n	8005600 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	681a      	ldr	r2, [r3, #0]
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f042 0201 	orr.w	r2, r2, #1
 80055ec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055ee:	e007      	b.n	8005600 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	681a      	ldr	r2, [r3, #0]
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f042 0201 	orr.w	r2, r2, #1
 80055fe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005600:	2300      	movs	r3, #0
}
 8005602:	4618      	mov	r0, r3
 8005604:	3714      	adds	r7, #20
 8005606:	46bd      	mov	sp, r7
 8005608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560c:	4770      	bx	lr
 800560e:	bf00      	nop
 8005610:	40010000 	.word	0x40010000
 8005614:	40000400 	.word	0x40000400
 8005618:	40000800 	.word	0x40000800
 800561c:	40000c00 	.word	0x40000c00
 8005620:	40010400 	.word	0x40010400
 8005624:	40014000 	.word	0x40014000
 8005628:	40001800 	.word	0x40001800

0800562c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800562c:	b480      	push	{r7}
 800562e:	b083      	sub	sp, #12
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	68da      	ldr	r2, [r3, #12]
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f022 0201 	bic.w	r2, r2, #1
 8005642:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	6a1a      	ldr	r2, [r3, #32]
 800564a:	f241 1311 	movw	r3, #4369	@ 0x1111
 800564e:	4013      	ands	r3, r2
 8005650:	2b00      	cmp	r3, #0
 8005652:	d10f      	bne.n	8005674 <HAL_TIM_Base_Stop_IT+0x48>
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	6a1a      	ldr	r2, [r3, #32]
 800565a:	f240 4344 	movw	r3, #1092	@ 0x444
 800565e:	4013      	ands	r3, r2
 8005660:	2b00      	cmp	r3, #0
 8005662:	d107      	bne.n	8005674 <HAL_TIM_Base_Stop_IT+0x48>
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	681a      	ldr	r2, [r3, #0]
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f022 0201 	bic.w	r2, r2, #1
 8005672:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2201      	movs	r2, #1
 8005678:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 800567c:	2300      	movs	r3, #0
}
 800567e:	4618      	mov	r0, r3
 8005680:	370c      	adds	r7, #12
 8005682:	46bd      	mov	sp, r7
 8005684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005688:	4770      	bx	lr

0800568a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800568a:	b580      	push	{r7, lr}
 800568c:	b082      	sub	sp, #8
 800568e:	af00      	add	r7, sp, #0
 8005690:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d101      	bne.n	800569c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005698:	2301      	movs	r3, #1
 800569a:	e041      	b.n	8005720 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80056a2:	b2db      	uxtb	r3, r3
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d106      	bne.n	80056b6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2200      	movs	r2, #0
 80056ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80056b0:	6878      	ldr	r0, [r7, #4]
 80056b2:	f000 f839 	bl	8005728 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	2202      	movs	r2, #2
 80056ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681a      	ldr	r2, [r3, #0]
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	3304      	adds	r3, #4
 80056c6:	4619      	mov	r1, r3
 80056c8:	4610      	mov	r0, r2
 80056ca:	f000 fc11 	bl	8005ef0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2201      	movs	r2, #1
 80056d2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2201      	movs	r2, #1
 80056da:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	2201      	movs	r2, #1
 80056e2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2201      	movs	r2, #1
 80056ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2201      	movs	r2, #1
 80056f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2201      	movs	r2, #1
 80056fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2201      	movs	r2, #1
 8005702:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	2201      	movs	r2, #1
 800570a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	2201      	movs	r2, #1
 8005712:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2201      	movs	r2, #1
 800571a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800571e:	2300      	movs	r3, #0
}
 8005720:	4618      	mov	r0, r3
 8005722:	3708      	adds	r7, #8
 8005724:	46bd      	mov	sp, r7
 8005726:	bd80      	pop	{r7, pc}

08005728 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005728:	b480      	push	{r7}
 800572a:	b083      	sub	sp, #12
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005730:	bf00      	nop
 8005732:	370c      	adds	r7, #12
 8005734:	46bd      	mov	sp, r7
 8005736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573a:	4770      	bx	lr

0800573c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800573c:	b580      	push	{r7, lr}
 800573e:	b084      	sub	sp, #16
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
 8005744:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d109      	bne.n	8005760 <HAL_TIM_PWM_Start+0x24>
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005752:	b2db      	uxtb	r3, r3
 8005754:	2b01      	cmp	r3, #1
 8005756:	bf14      	ite	ne
 8005758:	2301      	movne	r3, #1
 800575a:	2300      	moveq	r3, #0
 800575c:	b2db      	uxtb	r3, r3
 800575e:	e022      	b.n	80057a6 <HAL_TIM_PWM_Start+0x6a>
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	2b04      	cmp	r3, #4
 8005764:	d109      	bne.n	800577a <HAL_TIM_PWM_Start+0x3e>
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800576c:	b2db      	uxtb	r3, r3
 800576e:	2b01      	cmp	r3, #1
 8005770:	bf14      	ite	ne
 8005772:	2301      	movne	r3, #1
 8005774:	2300      	moveq	r3, #0
 8005776:	b2db      	uxtb	r3, r3
 8005778:	e015      	b.n	80057a6 <HAL_TIM_PWM_Start+0x6a>
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	2b08      	cmp	r3, #8
 800577e:	d109      	bne.n	8005794 <HAL_TIM_PWM_Start+0x58>
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005786:	b2db      	uxtb	r3, r3
 8005788:	2b01      	cmp	r3, #1
 800578a:	bf14      	ite	ne
 800578c:	2301      	movne	r3, #1
 800578e:	2300      	moveq	r3, #0
 8005790:	b2db      	uxtb	r3, r3
 8005792:	e008      	b.n	80057a6 <HAL_TIM_PWM_Start+0x6a>
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800579a:	b2db      	uxtb	r3, r3
 800579c:	2b01      	cmp	r3, #1
 800579e:	bf14      	ite	ne
 80057a0:	2301      	movne	r3, #1
 80057a2:	2300      	moveq	r3, #0
 80057a4:	b2db      	uxtb	r3, r3
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d001      	beq.n	80057ae <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80057aa:	2301      	movs	r3, #1
 80057ac:	e07c      	b.n	80058a8 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d104      	bne.n	80057be <HAL_TIM_PWM_Start+0x82>
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2202      	movs	r2, #2
 80057b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80057bc:	e013      	b.n	80057e6 <HAL_TIM_PWM_Start+0xaa>
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	2b04      	cmp	r3, #4
 80057c2:	d104      	bne.n	80057ce <HAL_TIM_PWM_Start+0x92>
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2202      	movs	r2, #2
 80057c8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80057cc:	e00b      	b.n	80057e6 <HAL_TIM_PWM_Start+0xaa>
 80057ce:	683b      	ldr	r3, [r7, #0]
 80057d0:	2b08      	cmp	r3, #8
 80057d2:	d104      	bne.n	80057de <HAL_TIM_PWM_Start+0xa2>
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2202      	movs	r2, #2
 80057d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80057dc:	e003      	b.n	80057e6 <HAL_TIM_PWM_Start+0xaa>
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	2202      	movs	r2, #2
 80057e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	2201      	movs	r2, #1
 80057ec:	6839      	ldr	r1, [r7, #0]
 80057ee:	4618      	mov	r0, r3
 80057f0:	f000 fe74 	bl	80064dc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	4a2d      	ldr	r2, [pc, #180]	@ (80058b0 <HAL_TIM_PWM_Start+0x174>)
 80057fa:	4293      	cmp	r3, r2
 80057fc:	d004      	beq.n	8005808 <HAL_TIM_PWM_Start+0xcc>
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	4a2c      	ldr	r2, [pc, #176]	@ (80058b4 <HAL_TIM_PWM_Start+0x178>)
 8005804:	4293      	cmp	r3, r2
 8005806:	d101      	bne.n	800580c <HAL_TIM_PWM_Start+0xd0>
 8005808:	2301      	movs	r3, #1
 800580a:	e000      	b.n	800580e <HAL_TIM_PWM_Start+0xd2>
 800580c:	2300      	movs	r3, #0
 800580e:	2b00      	cmp	r3, #0
 8005810:	d007      	beq.n	8005822 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005820:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	4a22      	ldr	r2, [pc, #136]	@ (80058b0 <HAL_TIM_PWM_Start+0x174>)
 8005828:	4293      	cmp	r3, r2
 800582a:	d022      	beq.n	8005872 <HAL_TIM_PWM_Start+0x136>
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005834:	d01d      	beq.n	8005872 <HAL_TIM_PWM_Start+0x136>
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	4a1f      	ldr	r2, [pc, #124]	@ (80058b8 <HAL_TIM_PWM_Start+0x17c>)
 800583c:	4293      	cmp	r3, r2
 800583e:	d018      	beq.n	8005872 <HAL_TIM_PWM_Start+0x136>
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	4a1d      	ldr	r2, [pc, #116]	@ (80058bc <HAL_TIM_PWM_Start+0x180>)
 8005846:	4293      	cmp	r3, r2
 8005848:	d013      	beq.n	8005872 <HAL_TIM_PWM_Start+0x136>
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	4a1c      	ldr	r2, [pc, #112]	@ (80058c0 <HAL_TIM_PWM_Start+0x184>)
 8005850:	4293      	cmp	r3, r2
 8005852:	d00e      	beq.n	8005872 <HAL_TIM_PWM_Start+0x136>
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	4a16      	ldr	r2, [pc, #88]	@ (80058b4 <HAL_TIM_PWM_Start+0x178>)
 800585a:	4293      	cmp	r3, r2
 800585c:	d009      	beq.n	8005872 <HAL_TIM_PWM_Start+0x136>
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	4a18      	ldr	r2, [pc, #96]	@ (80058c4 <HAL_TIM_PWM_Start+0x188>)
 8005864:	4293      	cmp	r3, r2
 8005866:	d004      	beq.n	8005872 <HAL_TIM_PWM_Start+0x136>
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	4a16      	ldr	r2, [pc, #88]	@ (80058c8 <HAL_TIM_PWM_Start+0x18c>)
 800586e:	4293      	cmp	r3, r2
 8005870:	d111      	bne.n	8005896 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	689b      	ldr	r3, [r3, #8]
 8005878:	f003 0307 	and.w	r3, r3, #7
 800587c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	2b06      	cmp	r3, #6
 8005882:	d010      	beq.n	80058a6 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	681a      	ldr	r2, [r3, #0]
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f042 0201 	orr.w	r2, r2, #1
 8005892:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005894:	e007      	b.n	80058a6 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	681a      	ldr	r2, [r3, #0]
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f042 0201 	orr.w	r2, r2, #1
 80058a4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80058a6:	2300      	movs	r3, #0
}
 80058a8:	4618      	mov	r0, r3
 80058aa:	3710      	adds	r7, #16
 80058ac:	46bd      	mov	sp, r7
 80058ae:	bd80      	pop	{r7, pc}
 80058b0:	40010000 	.word	0x40010000
 80058b4:	40010400 	.word	0x40010400
 80058b8:	40000400 	.word	0x40000400
 80058bc:	40000800 	.word	0x40000800
 80058c0:	40000c00 	.word	0x40000c00
 80058c4:	40014000 	.word	0x40014000
 80058c8:	40001800 	.word	0x40001800

080058cc <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80058cc:	b580      	push	{r7, lr}
 80058ce:	b082      	sub	sp, #8
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
 80058d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	2200      	movs	r2, #0
 80058dc:	6839      	ldr	r1, [r7, #0]
 80058de:	4618      	mov	r0, r3
 80058e0:	f000 fdfc 	bl	80064dc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	4a2e      	ldr	r2, [pc, #184]	@ (80059a4 <HAL_TIM_PWM_Stop+0xd8>)
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d004      	beq.n	80058f8 <HAL_TIM_PWM_Stop+0x2c>
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	4a2d      	ldr	r2, [pc, #180]	@ (80059a8 <HAL_TIM_PWM_Stop+0xdc>)
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d101      	bne.n	80058fc <HAL_TIM_PWM_Stop+0x30>
 80058f8:	2301      	movs	r3, #1
 80058fa:	e000      	b.n	80058fe <HAL_TIM_PWM_Stop+0x32>
 80058fc:	2300      	movs	r3, #0
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d017      	beq.n	8005932 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	6a1a      	ldr	r2, [r3, #32]
 8005908:	f241 1311 	movw	r3, #4369	@ 0x1111
 800590c:	4013      	ands	r3, r2
 800590e:	2b00      	cmp	r3, #0
 8005910:	d10f      	bne.n	8005932 <HAL_TIM_PWM_Stop+0x66>
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	6a1a      	ldr	r2, [r3, #32]
 8005918:	f240 4344 	movw	r3, #1092	@ 0x444
 800591c:	4013      	ands	r3, r2
 800591e:	2b00      	cmp	r3, #0
 8005920:	d107      	bne.n	8005932 <HAL_TIM_PWM_Stop+0x66>
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005930:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	6a1a      	ldr	r2, [r3, #32]
 8005938:	f241 1311 	movw	r3, #4369	@ 0x1111
 800593c:	4013      	ands	r3, r2
 800593e:	2b00      	cmp	r3, #0
 8005940:	d10f      	bne.n	8005962 <HAL_TIM_PWM_Stop+0x96>
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	6a1a      	ldr	r2, [r3, #32]
 8005948:	f240 4344 	movw	r3, #1092	@ 0x444
 800594c:	4013      	ands	r3, r2
 800594e:	2b00      	cmp	r3, #0
 8005950:	d107      	bne.n	8005962 <HAL_TIM_PWM_Stop+0x96>
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	681a      	ldr	r2, [r3, #0]
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f022 0201 	bic.w	r2, r2, #1
 8005960:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d104      	bne.n	8005972 <HAL_TIM_PWM_Stop+0xa6>
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2201      	movs	r2, #1
 800596c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005970:	e013      	b.n	800599a <HAL_TIM_PWM_Stop+0xce>
 8005972:	683b      	ldr	r3, [r7, #0]
 8005974:	2b04      	cmp	r3, #4
 8005976:	d104      	bne.n	8005982 <HAL_TIM_PWM_Stop+0xb6>
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2201      	movs	r2, #1
 800597c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005980:	e00b      	b.n	800599a <HAL_TIM_PWM_Stop+0xce>
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	2b08      	cmp	r3, #8
 8005986:	d104      	bne.n	8005992 <HAL_TIM_PWM_Stop+0xc6>
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2201      	movs	r2, #1
 800598c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005990:	e003      	b.n	800599a <HAL_TIM_PWM_Stop+0xce>
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	2201      	movs	r2, #1
 8005996:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 800599a:	2300      	movs	r3, #0
}
 800599c:	4618      	mov	r0, r3
 800599e:	3708      	adds	r7, #8
 80059a0:	46bd      	mov	sp, r7
 80059a2:	bd80      	pop	{r7, pc}
 80059a4:	40010000 	.word	0x40010000
 80059a8:	40010400 	.word	0x40010400

080059ac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80059ac:	b580      	push	{r7, lr}
 80059ae:	b084      	sub	sp, #16
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	68db      	ldr	r3, [r3, #12]
 80059ba:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	691b      	ldr	r3, [r3, #16]
 80059c2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80059c4:	68bb      	ldr	r3, [r7, #8]
 80059c6:	f003 0302 	and.w	r3, r3, #2
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d020      	beq.n	8005a10 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	f003 0302 	and.w	r3, r3, #2
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d01b      	beq.n	8005a10 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f06f 0202 	mvn.w	r2, #2
 80059e0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2201      	movs	r2, #1
 80059e6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	699b      	ldr	r3, [r3, #24]
 80059ee:	f003 0303 	and.w	r3, r3, #3
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d003      	beq.n	80059fe <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80059f6:	6878      	ldr	r0, [r7, #4]
 80059f8:	f000 fa5b 	bl	8005eb2 <HAL_TIM_IC_CaptureCallback>
 80059fc:	e005      	b.n	8005a0a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80059fe:	6878      	ldr	r0, [r7, #4]
 8005a00:	f000 fa4d 	bl	8005e9e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a04:	6878      	ldr	r0, [r7, #4]
 8005a06:	f000 fa5e 	bl	8005ec6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005a10:	68bb      	ldr	r3, [r7, #8]
 8005a12:	f003 0304 	and.w	r3, r3, #4
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d020      	beq.n	8005a5c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	f003 0304 	and.w	r3, r3, #4
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d01b      	beq.n	8005a5c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f06f 0204 	mvn.w	r2, #4
 8005a2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2202      	movs	r2, #2
 8005a32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	699b      	ldr	r3, [r3, #24]
 8005a3a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d003      	beq.n	8005a4a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a42:	6878      	ldr	r0, [r7, #4]
 8005a44:	f000 fa35 	bl	8005eb2 <HAL_TIM_IC_CaptureCallback>
 8005a48:	e005      	b.n	8005a56 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a4a:	6878      	ldr	r0, [r7, #4]
 8005a4c:	f000 fa27 	bl	8005e9e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a50:	6878      	ldr	r0, [r7, #4]
 8005a52:	f000 fa38 	bl	8005ec6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	2200      	movs	r2, #0
 8005a5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005a5c:	68bb      	ldr	r3, [r7, #8]
 8005a5e:	f003 0308 	and.w	r3, r3, #8
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d020      	beq.n	8005aa8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	f003 0308 	and.w	r3, r3, #8
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d01b      	beq.n	8005aa8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f06f 0208 	mvn.w	r2, #8
 8005a78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	2204      	movs	r2, #4
 8005a7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	69db      	ldr	r3, [r3, #28]
 8005a86:	f003 0303 	and.w	r3, r3, #3
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d003      	beq.n	8005a96 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a8e:	6878      	ldr	r0, [r7, #4]
 8005a90:	f000 fa0f 	bl	8005eb2 <HAL_TIM_IC_CaptureCallback>
 8005a94:	e005      	b.n	8005aa2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a96:	6878      	ldr	r0, [r7, #4]
 8005a98:	f000 fa01 	bl	8005e9e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a9c:	6878      	ldr	r0, [r7, #4]
 8005a9e:	f000 fa12 	bl	8005ec6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005aa8:	68bb      	ldr	r3, [r7, #8]
 8005aaa:	f003 0310 	and.w	r3, r3, #16
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d020      	beq.n	8005af4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	f003 0310 	and.w	r3, r3, #16
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d01b      	beq.n	8005af4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f06f 0210 	mvn.w	r2, #16
 8005ac4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	2208      	movs	r2, #8
 8005aca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	69db      	ldr	r3, [r3, #28]
 8005ad2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d003      	beq.n	8005ae2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ada:	6878      	ldr	r0, [r7, #4]
 8005adc:	f000 f9e9 	bl	8005eb2 <HAL_TIM_IC_CaptureCallback>
 8005ae0:	e005      	b.n	8005aee <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ae2:	6878      	ldr	r0, [r7, #4]
 8005ae4:	f000 f9db 	bl	8005e9e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ae8:	6878      	ldr	r0, [r7, #4]
 8005aea:	f000 f9ec 	bl	8005ec6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	2200      	movs	r2, #0
 8005af2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005af4:	68bb      	ldr	r3, [r7, #8]
 8005af6:	f003 0301 	and.w	r3, r3, #1
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d00c      	beq.n	8005b18 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	f003 0301 	and.w	r3, r3, #1
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d007      	beq.n	8005b18 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f06f 0201 	mvn.w	r2, #1
 8005b10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005b12:	6878      	ldr	r0, [r7, #4]
 8005b14:	f7fc f854 	bl	8001bc0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005b18:	68bb      	ldr	r3, [r7, #8]
 8005b1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d00c      	beq.n	8005b3c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d007      	beq.n	8005b3c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005b34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005b36:	6878      	ldr	r0, [r7, #4]
 8005b38:	f000 fd7c 	bl	8006634 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005b3c:	68bb      	ldr	r3, [r7, #8]
 8005b3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d00c      	beq.n	8005b60 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d007      	beq.n	8005b60 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005b58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005b5a:	6878      	ldr	r0, [r7, #4]
 8005b5c:	f000 f9bd 	bl	8005eda <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005b60:	68bb      	ldr	r3, [r7, #8]
 8005b62:	f003 0320 	and.w	r3, r3, #32
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d00c      	beq.n	8005b84 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	f003 0320 	and.w	r3, r3, #32
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d007      	beq.n	8005b84 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f06f 0220 	mvn.w	r2, #32
 8005b7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005b7e:	6878      	ldr	r0, [r7, #4]
 8005b80:	f000 fd4e 	bl	8006620 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005b84:	bf00      	nop
 8005b86:	3710      	adds	r7, #16
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	bd80      	pop	{r7, pc}

08005b8c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	b086      	sub	sp, #24
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	60f8      	str	r0, [r7, #12]
 8005b94:	60b9      	str	r1, [r7, #8]
 8005b96:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005b98:	2300      	movs	r3, #0
 8005b9a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005ba2:	2b01      	cmp	r3, #1
 8005ba4:	d101      	bne.n	8005baa <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005ba6:	2302      	movs	r3, #2
 8005ba8:	e0ae      	b.n	8005d08 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	2201      	movs	r2, #1
 8005bae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	2b0c      	cmp	r3, #12
 8005bb6:	f200 809f 	bhi.w	8005cf8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005bba:	a201      	add	r2, pc, #4	@ (adr r2, 8005bc0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005bbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bc0:	08005bf5 	.word	0x08005bf5
 8005bc4:	08005cf9 	.word	0x08005cf9
 8005bc8:	08005cf9 	.word	0x08005cf9
 8005bcc:	08005cf9 	.word	0x08005cf9
 8005bd0:	08005c35 	.word	0x08005c35
 8005bd4:	08005cf9 	.word	0x08005cf9
 8005bd8:	08005cf9 	.word	0x08005cf9
 8005bdc:	08005cf9 	.word	0x08005cf9
 8005be0:	08005c77 	.word	0x08005c77
 8005be4:	08005cf9 	.word	0x08005cf9
 8005be8:	08005cf9 	.word	0x08005cf9
 8005bec:	08005cf9 	.word	0x08005cf9
 8005bf0:	08005cb7 	.word	0x08005cb7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	68b9      	ldr	r1, [r7, #8]
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	f000 fa24 	bl	8006048 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	699a      	ldr	r2, [r3, #24]
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f042 0208 	orr.w	r2, r2, #8
 8005c0e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	699a      	ldr	r2, [r3, #24]
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f022 0204 	bic.w	r2, r2, #4
 8005c1e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	6999      	ldr	r1, [r3, #24]
 8005c26:	68bb      	ldr	r3, [r7, #8]
 8005c28:	691a      	ldr	r2, [r3, #16]
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	430a      	orrs	r2, r1
 8005c30:	619a      	str	r2, [r3, #24]
      break;
 8005c32:	e064      	b.n	8005cfe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	68b9      	ldr	r1, [r7, #8]
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	f000 fa74 	bl	8006128 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	699a      	ldr	r2, [r3, #24]
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005c4e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	699a      	ldr	r2, [r3, #24]
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005c5e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	6999      	ldr	r1, [r3, #24]
 8005c66:	68bb      	ldr	r3, [r7, #8]
 8005c68:	691b      	ldr	r3, [r3, #16]
 8005c6a:	021a      	lsls	r2, r3, #8
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	430a      	orrs	r2, r1
 8005c72:	619a      	str	r2, [r3, #24]
      break;
 8005c74:	e043      	b.n	8005cfe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	68b9      	ldr	r1, [r7, #8]
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	f000 fac9 	bl	8006214 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	69da      	ldr	r2, [r3, #28]
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f042 0208 	orr.w	r2, r2, #8
 8005c90:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	69da      	ldr	r2, [r3, #28]
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f022 0204 	bic.w	r2, r2, #4
 8005ca0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	69d9      	ldr	r1, [r3, #28]
 8005ca8:	68bb      	ldr	r3, [r7, #8]
 8005caa:	691a      	ldr	r2, [r3, #16]
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	430a      	orrs	r2, r1
 8005cb2:	61da      	str	r2, [r3, #28]
      break;
 8005cb4:	e023      	b.n	8005cfe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	68b9      	ldr	r1, [r7, #8]
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	f000 fb1d 	bl	80062fc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	69da      	ldr	r2, [r3, #28]
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005cd0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	69da      	ldr	r2, [r3, #28]
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005ce0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	69d9      	ldr	r1, [r3, #28]
 8005ce8:	68bb      	ldr	r3, [r7, #8]
 8005cea:	691b      	ldr	r3, [r3, #16]
 8005cec:	021a      	lsls	r2, r3, #8
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	430a      	orrs	r2, r1
 8005cf4:	61da      	str	r2, [r3, #28]
      break;
 8005cf6:	e002      	b.n	8005cfe <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005cf8:	2301      	movs	r3, #1
 8005cfa:	75fb      	strb	r3, [r7, #23]
      break;
 8005cfc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	2200      	movs	r2, #0
 8005d02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005d06:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d08:	4618      	mov	r0, r3
 8005d0a:	3718      	adds	r7, #24
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	bd80      	pop	{r7, pc}

08005d10 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005d10:	b580      	push	{r7, lr}
 8005d12:	b084      	sub	sp, #16
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
 8005d18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005d24:	2b01      	cmp	r3, #1
 8005d26:	d101      	bne.n	8005d2c <HAL_TIM_ConfigClockSource+0x1c>
 8005d28:	2302      	movs	r3, #2
 8005d2a:	e0b4      	b.n	8005e96 <HAL_TIM_ConfigClockSource+0x186>
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2201      	movs	r2, #1
 8005d30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2202      	movs	r2, #2
 8005d38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	689b      	ldr	r3, [r3, #8]
 8005d42:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005d44:	68bb      	ldr	r3, [r7, #8]
 8005d46:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005d4a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005d4c:	68bb      	ldr	r3, [r7, #8]
 8005d4e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005d52:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	68ba      	ldr	r2, [r7, #8]
 8005d5a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005d64:	d03e      	beq.n	8005de4 <HAL_TIM_ConfigClockSource+0xd4>
 8005d66:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005d6a:	f200 8087 	bhi.w	8005e7c <HAL_TIM_ConfigClockSource+0x16c>
 8005d6e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005d72:	f000 8086 	beq.w	8005e82 <HAL_TIM_ConfigClockSource+0x172>
 8005d76:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005d7a:	d87f      	bhi.n	8005e7c <HAL_TIM_ConfigClockSource+0x16c>
 8005d7c:	2b70      	cmp	r3, #112	@ 0x70
 8005d7e:	d01a      	beq.n	8005db6 <HAL_TIM_ConfigClockSource+0xa6>
 8005d80:	2b70      	cmp	r3, #112	@ 0x70
 8005d82:	d87b      	bhi.n	8005e7c <HAL_TIM_ConfigClockSource+0x16c>
 8005d84:	2b60      	cmp	r3, #96	@ 0x60
 8005d86:	d050      	beq.n	8005e2a <HAL_TIM_ConfigClockSource+0x11a>
 8005d88:	2b60      	cmp	r3, #96	@ 0x60
 8005d8a:	d877      	bhi.n	8005e7c <HAL_TIM_ConfigClockSource+0x16c>
 8005d8c:	2b50      	cmp	r3, #80	@ 0x50
 8005d8e:	d03c      	beq.n	8005e0a <HAL_TIM_ConfigClockSource+0xfa>
 8005d90:	2b50      	cmp	r3, #80	@ 0x50
 8005d92:	d873      	bhi.n	8005e7c <HAL_TIM_ConfigClockSource+0x16c>
 8005d94:	2b40      	cmp	r3, #64	@ 0x40
 8005d96:	d058      	beq.n	8005e4a <HAL_TIM_ConfigClockSource+0x13a>
 8005d98:	2b40      	cmp	r3, #64	@ 0x40
 8005d9a:	d86f      	bhi.n	8005e7c <HAL_TIM_ConfigClockSource+0x16c>
 8005d9c:	2b30      	cmp	r3, #48	@ 0x30
 8005d9e:	d064      	beq.n	8005e6a <HAL_TIM_ConfigClockSource+0x15a>
 8005da0:	2b30      	cmp	r3, #48	@ 0x30
 8005da2:	d86b      	bhi.n	8005e7c <HAL_TIM_ConfigClockSource+0x16c>
 8005da4:	2b20      	cmp	r3, #32
 8005da6:	d060      	beq.n	8005e6a <HAL_TIM_ConfigClockSource+0x15a>
 8005da8:	2b20      	cmp	r3, #32
 8005daa:	d867      	bhi.n	8005e7c <HAL_TIM_ConfigClockSource+0x16c>
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d05c      	beq.n	8005e6a <HAL_TIM_ConfigClockSource+0x15a>
 8005db0:	2b10      	cmp	r3, #16
 8005db2:	d05a      	beq.n	8005e6a <HAL_TIM_ConfigClockSource+0x15a>
 8005db4:	e062      	b.n	8005e7c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005dc6:	f000 fb69 	bl	800649c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	689b      	ldr	r3, [r3, #8]
 8005dd0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005dd2:	68bb      	ldr	r3, [r7, #8]
 8005dd4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005dd8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	68ba      	ldr	r2, [r7, #8]
 8005de0:	609a      	str	r2, [r3, #8]
      break;
 8005de2:	e04f      	b.n	8005e84 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005de8:	683b      	ldr	r3, [r7, #0]
 8005dea:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005df0:	683b      	ldr	r3, [r7, #0]
 8005df2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005df4:	f000 fb52 	bl	800649c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	689a      	ldr	r2, [r3, #8]
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005e06:	609a      	str	r2, [r3, #8]
      break;
 8005e08:	e03c      	b.n	8005e84 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e16:	461a      	mov	r2, r3
 8005e18:	f000 fac6 	bl	80063a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	2150      	movs	r1, #80	@ 0x50
 8005e22:	4618      	mov	r0, r3
 8005e24:	f000 fb1f 	bl	8006466 <TIM_ITRx_SetConfig>
      break;
 8005e28:	e02c      	b.n	8005e84 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005e2e:	683b      	ldr	r3, [r7, #0]
 8005e30:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005e36:	461a      	mov	r2, r3
 8005e38:	f000 fae5 	bl	8006406 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	2160      	movs	r1, #96	@ 0x60
 8005e42:	4618      	mov	r0, r3
 8005e44:	f000 fb0f 	bl	8006466 <TIM_ITRx_SetConfig>
      break;
 8005e48:	e01c      	b.n	8005e84 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005e4e:	683b      	ldr	r3, [r7, #0]
 8005e50:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e56:	461a      	mov	r2, r3
 8005e58:	f000 faa6 	bl	80063a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	2140      	movs	r1, #64	@ 0x40
 8005e62:	4618      	mov	r0, r3
 8005e64:	f000 faff 	bl	8006466 <TIM_ITRx_SetConfig>
      break;
 8005e68:	e00c      	b.n	8005e84 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681a      	ldr	r2, [r3, #0]
 8005e6e:	683b      	ldr	r3, [r7, #0]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	4619      	mov	r1, r3
 8005e74:	4610      	mov	r0, r2
 8005e76:	f000 faf6 	bl	8006466 <TIM_ITRx_SetConfig>
      break;
 8005e7a:	e003      	b.n	8005e84 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005e7c:	2301      	movs	r3, #1
 8005e7e:	73fb      	strb	r3, [r7, #15]
      break;
 8005e80:	e000      	b.n	8005e84 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005e82:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2201      	movs	r2, #1
 8005e88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2200      	movs	r2, #0
 8005e90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005e94:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e96:	4618      	mov	r0, r3
 8005e98:	3710      	adds	r7, #16
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	bd80      	pop	{r7, pc}

08005e9e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005e9e:	b480      	push	{r7}
 8005ea0:	b083      	sub	sp, #12
 8005ea2:	af00      	add	r7, sp, #0
 8005ea4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005ea6:	bf00      	nop
 8005ea8:	370c      	adds	r7, #12
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb0:	4770      	bx	lr

08005eb2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005eb2:	b480      	push	{r7}
 8005eb4:	b083      	sub	sp, #12
 8005eb6:	af00      	add	r7, sp, #0
 8005eb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005eba:	bf00      	nop
 8005ebc:	370c      	adds	r7, #12
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec4:	4770      	bx	lr

08005ec6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005ec6:	b480      	push	{r7}
 8005ec8:	b083      	sub	sp, #12
 8005eca:	af00      	add	r7, sp, #0
 8005ecc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005ece:	bf00      	nop
 8005ed0:	370c      	adds	r7, #12
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed8:	4770      	bx	lr

08005eda <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005eda:	b480      	push	{r7}
 8005edc:	b083      	sub	sp, #12
 8005ede:	af00      	add	r7, sp, #0
 8005ee0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005ee2:	bf00      	nop
 8005ee4:	370c      	adds	r7, #12
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eec:	4770      	bx	lr
	...

08005ef0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005ef0:	b480      	push	{r7}
 8005ef2:	b085      	sub	sp, #20
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
 8005ef8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	4a46      	ldr	r2, [pc, #280]	@ (800601c <TIM_Base_SetConfig+0x12c>)
 8005f04:	4293      	cmp	r3, r2
 8005f06:	d013      	beq.n	8005f30 <TIM_Base_SetConfig+0x40>
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f0e:	d00f      	beq.n	8005f30 <TIM_Base_SetConfig+0x40>
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	4a43      	ldr	r2, [pc, #268]	@ (8006020 <TIM_Base_SetConfig+0x130>)
 8005f14:	4293      	cmp	r3, r2
 8005f16:	d00b      	beq.n	8005f30 <TIM_Base_SetConfig+0x40>
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	4a42      	ldr	r2, [pc, #264]	@ (8006024 <TIM_Base_SetConfig+0x134>)
 8005f1c:	4293      	cmp	r3, r2
 8005f1e:	d007      	beq.n	8005f30 <TIM_Base_SetConfig+0x40>
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	4a41      	ldr	r2, [pc, #260]	@ (8006028 <TIM_Base_SetConfig+0x138>)
 8005f24:	4293      	cmp	r3, r2
 8005f26:	d003      	beq.n	8005f30 <TIM_Base_SetConfig+0x40>
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	4a40      	ldr	r2, [pc, #256]	@ (800602c <TIM_Base_SetConfig+0x13c>)
 8005f2c:	4293      	cmp	r3, r2
 8005f2e:	d108      	bne.n	8005f42 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f36:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005f38:	683b      	ldr	r3, [r7, #0]
 8005f3a:	685b      	ldr	r3, [r3, #4]
 8005f3c:	68fa      	ldr	r2, [r7, #12]
 8005f3e:	4313      	orrs	r3, r2
 8005f40:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	4a35      	ldr	r2, [pc, #212]	@ (800601c <TIM_Base_SetConfig+0x12c>)
 8005f46:	4293      	cmp	r3, r2
 8005f48:	d02b      	beq.n	8005fa2 <TIM_Base_SetConfig+0xb2>
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f50:	d027      	beq.n	8005fa2 <TIM_Base_SetConfig+0xb2>
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	4a32      	ldr	r2, [pc, #200]	@ (8006020 <TIM_Base_SetConfig+0x130>)
 8005f56:	4293      	cmp	r3, r2
 8005f58:	d023      	beq.n	8005fa2 <TIM_Base_SetConfig+0xb2>
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	4a31      	ldr	r2, [pc, #196]	@ (8006024 <TIM_Base_SetConfig+0x134>)
 8005f5e:	4293      	cmp	r3, r2
 8005f60:	d01f      	beq.n	8005fa2 <TIM_Base_SetConfig+0xb2>
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	4a30      	ldr	r2, [pc, #192]	@ (8006028 <TIM_Base_SetConfig+0x138>)
 8005f66:	4293      	cmp	r3, r2
 8005f68:	d01b      	beq.n	8005fa2 <TIM_Base_SetConfig+0xb2>
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	4a2f      	ldr	r2, [pc, #188]	@ (800602c <TIM_Base_SetConfig+0x13c>)
 8005f6e:	4293      	cmp	r3, r2
 8005f70:	d017      	beq.n	8005fa2 <TIM_Base_SetConfig+0xb2>
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	4a2e      	ldr	r2, [pc, #184]	@ (8006030 <TIM_Base_SetConfig+0x140>)
 8005f76:	4293      	cmp	r3, r2
 8005f78:	d013      	beq.n	8005fa2 <TIM_Base_SetConfig+0xb2>
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	4a2d      	ldr	r2, [pc, #180]	@ (8006034 <TIM_Base_SetConfig+0x144>)
 8005f7e:	4293      	cmp	r3, r2
 8005f80:	d00f      	beq.n	8005fa2 <TIM_Base_SetConfig+0xb2>
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	4a2c      	ldr	r2, [pc, #176]	@ (8006038 <TIM_Base_SetConfig+0x148>)
 8005f86:	4293      	cmp	r3, r2
 8005f88:	d00b      	beq.n	8005fa2 <TIM_Base_SetConfig+0xb2>
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	4a2b      	ldr	r2, [pc, #172]	@ (800603c <TIM_Base_SetConfig+0x14c>)
 8005f8e:	4293      	cmp	r3, r2
 8005f90:	d007      	beq.n	8005fa2 <TIM_Base_SetConfig+0xb2>
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	4a2a      	ldr	r2, [pc, #168]	@ (8006040 <TIM_Base_SetConfig+0x150>)
 8005f96:	4293      	cmp	r3, r2
 8005f98:	d003      	beq.n	8005fa2 <TIM_Base_SetConfig+0xb2>
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	4a29      	ldr	r2, [pc, #164]	@ (8006044 <TIM_Base_SetConfig+0x154>)
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	d108      	bne.n	8005fb4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005fa8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	68db      	ldr	r3, [r3, #12]
 8005fae:	68fa      	ldr	r2, [r7, #12]
 8005fb0:	4313      	orrs	r3, r2
 8005fb2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	695b      	ldr	r3, [r3, #20]
 8005fbe:	4313      	orrs	r3, r2
 8005fc0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	68fa      	ldr	r2, [r7, #12]
 8005fc6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	689a      	ldr	r2, [r3, #8]
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	681a      	ldr	r2, [r3, #0]
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	4a10      	ldr	r2, [pc, #64]	@ (800601c <TIM_Base_SetConfig+0x12c>)
 8005fdc:	4293      	cmp	r3, r2
 8005fde:	d003      	beq.n	8005fe8 <TIM_Base_SetConfig+0xf8>
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	4a12      	ldr	r2, [pc, #72]	@ (800602c <TIM_Base_SetConfig+0x13c>)
 8005fe4:	4293      	cmp	r3, r2
 8005fe6:	d103      	bne.n	8005ff0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	691a      	ldr	r2, [r3, #16]
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2201      	movs	r2, #1
 8005ff4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	691b      	ldr	r3, [r3, #16]
 8005ffa:	f003 0301 	and.w	r3, r3, #1
 8005ffe:	2b01      	cmp	r3, #1
 8006000:	d105      	bne.n	800600e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	691b      	ldr	r3, [r3, #16]
 8006006:	f023 0201 	bic.w	r2, r3, #1
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	611a      	str	r2, [r3, #16]
  }
}
 800600e:	bf00      	nop
 8006010:	3714      	adds	r7, #20
 8006012:	46bd      	mov	sp, r7
 8006014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006018:	4770      	bx	lr
 800601a:	bf00      	nop
 800601c:	40010000 	.word	0x40010000
 8006020:	40000400 	.word	0x40000400
 8006024:	40000800 	.word	0x40000800
 8006028:	40000c00 	.word	0x40000c00
 800602c:	40010400 	.word	0x40010400
 8006030:	40014000 	.word	0x40014000
 8006034:	40014400 	.word	0x40014400
 8006038:	40014800 	.word	0x40014800
 800603c:	40001800 	.word	0x40001800
 8006040:	40001c00 	.word	0x40001c00
 8006044:	40002000 	.word	0x40002000

08006048 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006048:	b480      	push	{r7}
 800604a:	b087      	sub	sp, #28
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
 8006050:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	6a1b      	ldr	r3, [r3, #32]
 8006056:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	6a1b      	ldr	r3, [r3, #32]
 800605c:	f023 0201 	bic.w	r2, r3, #1
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	685b      	ldr	r3, [r3, #4]
 8006068:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	699b      	ldr	r3, [r3, #24]
 800606e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006076:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	f023 0303 	bic.w	r3, r3, #3
 800607e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006080:	683b      	ldr	r3, [r7, #0]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	68fa      	ldr	r2, [r7, #12]
 8006086:	4313      	orrs	r3, r2
 8006088:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800608a:	697b      	ldr	r3, [r7, #20]
 800608c:	f023 0302 	bic.w	r3, r3, #2
 8006090:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006092:	683b      	ldr	r3, [r7, #0]
 8006094:	689b      	ldr	r3, [r3, #8]
 8006096:	697a      	ldr	r2, [r7, #20]
 8006098:	4313      	orrs	r3, r2
 800609a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	4a20      	ldr	r2, [pc, #128]	@ (8006120 <TIM_OC1_SetConfig+0xd8>)
 80060a0:	4293      	cmp	r3, r2
 80060a2:	d003      	beq.n	80060ac <TIM_OC1_SetConfig+0x64>
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	4a1f      	ldr	r2, [pc, #124]	@ (8006124 <TIM_OC1_SetConfig+0xdc>)
 80060a8:	4293      	cmp	r3, r2
 80060aa:	d10c      	bne.n	80060c6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80060ac:	697b      	ldr	r3, [r7, #20]
 80060ae:	f023 0308 	bic.w	r3, r3, #8
 80060b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	68db      	ldr	r3, [r3, #12]
 80060b8:	697a      	ldr	r2, [r7, #20]
 80060ba:	4313      	orrs	r3, r2
 80060bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80060be:	697b      	ldr	r3, [r7, #20]
 80060c0:	f023 0304 	bic.w	r3, r3, #4
 80060c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	4a15      	ldr	r2, [pc, #84]	@ (8006120 <TIM_OC1_SetConfig+0xd8>)
 80060ca:	4293      	cmp	r3, r2
 80060cc:	d003      	beq.n	80060d6 <TIM_OC1_SetConfig+0x8e>
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	4a14      	ldr	r2, [pc, #80]	@ (8006124 <TIM_OC1_SetConfig+0xdc>)
 80060d2:	4293      	cmp	r3, r2
 80060d4:	d111      	bne.n	80060fa <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80060d6:	693b      	ldr	r3, [r7, #16]
 80060d8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80060dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80060de:	693b      	ldr	r3, [r7, #16]
 80060e0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80060e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80060e6:	683b      	ldr	r3, [r7, #0]
 80060e8:	695b      	ldr	r3, [r3, #20]
 80060ea:	693a      	ldr	r2, [r7, #16]
 80060ec:	4313      	orrs	r3, r2
 80060ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	699b      	ldr	r3, [r3, #24]
 80060f4:	693a      	ldr	r2, [r7, #16]
 80060f6:	4313      	orrs	r3, r2
 80060f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	693a      	ldr	r2, [r7, #16]
 80060fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	68fa      	ldr	r2, [r7, #12]
 8006104:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006106:	683b      	ldr	r3, [r7, #0]
 8006108:	685a      	ldr	r2, [r3, #4]
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	697a      	ldr	r2, [r7, #20]
 8006112:	621a      	str	r2, [r3, #32]
}
 8006114:	bf00      	nop
 8006116:	371c      	adds	r7, #28
 8006118:	46bd      	mov	sp, r7
 800611a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611e:	4770      	bx	lr
 8006120:	40010000 	.word	0x40010000
 8006124:	40010400 	.word	0x40010400

08006128 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006128:	b480      	push	{r7}
 800612a:	b087      	sub	sp, #28
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
 8006130:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	6a1b      	ldr	r3, [r3, #32]
 8006136:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	6a1b      	ldr	r3, [r3, #32]
 800613c:	f023 0210 	bic.w	r2, r3, #16
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	685b      	ldr	r3, [r3, #4]
 8006148:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	699b      	ldr	r3, [r3, #24]
 800614e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006156:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800615e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	021b      	lsls	r3, r3, #8
 8006166:	68fa      	ldr	r2, [r7, #12]
 8006168:	4313      	orrs	r3, r2
 800616a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800616c:	697b      	ldr	r3, [r7, #20]
 800616e:	f023 0320 	bic.w	r3, r3, #32
 8006172:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	689b      	ldr	r3, [r3, #8]
 8006178:	011b      	lsls	r3, r3, #4
 800617a:	697a      	ldr	r2, [r7, #20]
 800617c:	4313      	orrs	r3, r2
 800617e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	4a22      	ldr	r2, [pc, #136]	@ (800620c <TIM_OC2_SetConfig+0xe4>)
 8006184:	4293      	cmp	r3, r2
 8006186:	d003      	beq.n	8006190 <TIM_OC2_SetConfig+0x68>
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	4a21      	ldr	r2, [pc, #132]	@ (8006210 <TIM_OC2_SetConfig+0xe8>)
 800618c:	4293      	cmp	r3, r2
 800618e:	d10d      	bne.n	80061ac <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006190:	697b      	ldr	r3, [r7, #20]
 8006192:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006196:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	68db      	ldr	r3, [r3, #12]
 800619c:	011b      	lsls	r3, r3, #4
 800619e:	697a      	ldr	r2, [r7, #20]
 80061a0:	4313      	orrs	r3, r2
 80061a2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80061a4:	697b      	ldr	r3, [r7, #20]
 80061a6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80061aa:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	4a17      	ldr	r2, [pc, #92]	@ (800620c <TIM_OC2_SetConfig+0xe4>)
 80061b0:	4293      	cmp	r3, r2
 80061b2:	d003      	beq.n	80061bc <TIM_OC2_SetConfig+0x94>
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	4a16      	ldr	r2, [pc, #88]	@ (8006210 <TIM_OC2_SetConfig+0xe8>)
 80061b8:	4293      	cmp	r3, r2
 80061ba:	d113      	bne.n	80061e4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80061bc:	693b      	ldr	r3, [r7, #16]
 80061be:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80061c2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80061c4:	693b      	ldr	r3, [r7, #16]
 80061c6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80061ca:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80061cc:	683b      	ldr	r3, [r7, #0]
 80061ce:	695b      	ldr	r3, [r3, #20]
 80061d0:	009b      	lsls	r3, r3, #2
 80061d2:	693a      	ldr	r2, [r7, #16]
 80061d4:	4313      	orrs	r3, r2
 80061d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	699b      	ldr	r3, [r3, #24]
 80061dc:	009b      	lsls	r3, r3, #2
 80061de:	693a      	ldr	r2, [r7, #16]
 80061e0:	4313      	orrs	r3, r2
 80061e2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	693a      	ldr	r2, [r7, #16]
 80061e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	68fa      	ldr	r2, [r7, #12]
 80061ee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	685a      	ldr	r2, [r3, #4]
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	697a      	ldr	r2, [r7, #20]
 80061fc:	621a      	str	r2, [r3, #32]
}
 80061fe:	bf00      	nop
 8006200:	371c      	adds	r7, #28
 8006202:	46bd      	mov	sp, r7
 8006204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006208:	4770      	bx	lr
 800620a:	bf00      	nop
 800620c:	40010000 	.word	0x40010000
 8006210:	40010400 	.word	0x40010400

08006214 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006214:	b480      	push	{r7}
 8006216:	b087      	sub	sp, #28
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
 800621c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6a1b      	ldr	r3, [r3, #32]
 8006222:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	6a1b      	ldr	r3, [r3, #32]
 8006228:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	685b      	ldr	r3, [r3, #4]
 8006234:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	69db      	ldr	r3, [r3, #28]
 800623a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006242:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	f023 0303 	bic.w	r3, r3, #3
 800624a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	68fa      	ldr	r2, [r7, #12]
 8006252:	4313      	orrs	r3, r2
 8006254:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006256:	697b      	ldr	r3, [r7, #20]
 8006258:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800625c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	689b      	ldr	r3, [r3, #8]
 8006262:	021b      	lsls	r3, r3, #8
 8006264:	697a      	ldr	r2, [r7, #20]
 8006266:	4313      	orrs	r3, r2
 8006268:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	4a21      	ldr	r2, [pc, #132]	@ (80062f4 <TIM_OC3_SetConfig+0xe0>)
 800626e:	4293      	cmp	r3, r2
 8006270:	d003      	beq.n	800627a <TIM_OC3_SetConfig+0x66>
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	4a20      	ldr	r2, [pc, #128]	@ (80062f8 <TIM_OC3_SetConfig+0xe4>)
 8006276:	4293      	cmp	r3, r2
 8006278:	d10d      	bne.n	8006296 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800627a:	697b      	ldr	r3, [r7, #20]
 800627c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006280:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006282:	683b      	ldr	r3, [r7, #0]
 8006284:	68db      	ldr	r3, [r3, #12]
 8006286:	021b      	lsls	r3, r3, #8
 8006288:	697a      	ldr	r2, [r7, #20]
 800628a:	4313      	orrs	r3, r2
 800628c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800628e:	697b      	ldr	r3, [r7, #20]
 8006290:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006294:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	4a16      	ldr	r2, [pc, #88]	@ (80062f4 <TIM_OC3_SetConfig+0xe0>)
 800629a:	4293      	cmp	r3, r2
 800629c:	d003      	beq.n	80062a6 <TIM_OC3_SetConfig+0x92>
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	4a15      	ldr	r2, [pc, #84]	@ (80062f8 <TIM_OC3_SetConfig+0xe4>)
 80062a2:	4293      	cmp	r3, r2
 80062a4:	d113      	bne.n	80062ce <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80062a6:	693b      	ldr	r3, [r7, #16]
 80062a8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80062ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80062ae:	693b      	ldr	r3, [r7, #16]
 80062b0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80062b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80062b6:	683b      	ldr	r3, [r7, #0]
 80062b8:	695b      	ldr	r3, [r3, #20]
 80062ba:	011b      	lsls	r3, r3, #4
 80062bc:	693a      	ldr	r2, [r7, #16]
 80062be:	4313      	orrs	r3, r2
 80062c0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80062c2:	683b      	ldr	r3, [r7, #0]
 80062c4:	699b      	ldr	r3, [r3, #24]
 80062c6:	011b      	lsls	r3, r3, #4
 80062c8:	693a      	ldr	r2, [r7, #16]
 80062ca:	4313      	orrs	r3, r2
 80062cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	693a      	ldr	r2, [r7, #16]
 80062d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	68fa      	ldr	r2, [r7, #12]
 80062d8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80062da:	683b      	ldr	r3, [r7, #0]
 80062dc:	685a      	ldr	r2, [r3, #4]
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	697a      	ldr	r2, [r7, #20]
 80062e6:	621a      	str	r2, [r3, #32]
}
 80062e8:	bf00      	nop
 80062ea:	371c      	adds	r7, #28
 80062ec:	46bd      	mov	sp, r7
 80062ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f2:	4770      	bx	lr
 80062f4:	40010000 	.word	0x40010000
 80062f8:	40010400 	.word	0x40010400

080062fc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80062fc:	b480      	push	{r7}
 80062fe:	b087      	sub	sp, #28
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]
 8006304:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	6a1b      	ldr	r3, [r3, #32]
 800630a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	6a1b      	ldr	r3, [r3, #32]
 8006310:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	685b      	ldr	r3, [r3, #4]
 800631c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	69db      	ldr	r3, [r3, #28]
 8006322:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800632a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006332:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	021b      	lsls	r3, r3, #8
 800633a:	68fa      	ldr	r2, [r7, #12]
 800633c:	4313      	orrs	r3, r2
 800633e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006340:	693b      	ldr	r3, [r7, #16]
 8006342:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006346:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006348:	683b      	ldr	r3, [r7, #0]
 800634a:	689b      	ldr	r3, [r3, #8]
 800634c:	031b      	lsls	r3, r3, #12
 800634e:	693a      	ldr	r2, [r7, #16]
 8006350:	4313      	orrs	r3, r2
 8006352:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	4a12      	ldr	r2, [pc, #72]	@ (80063a0 <TIM_OC4_SetConfig+0xa4>)
 8006358:	4293      	cmp	r3, r2
 800635a:	d003      	beq.n	8006364 <TIM_OC4_SetConfig+0x68>
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	4a11      	ldr	r2, [pc, #68]	@ (80063a4 <TIM_OC4_SetConfig+0xa8>)
 8006360:	4293      	cmp	r3, r2
 8006362:	d109      	bne.n	8006378 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006364:	697b      	ldr	r3, [r7, #20]
 8006366:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800636a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800636c:	683b      	ldr	r3, [r7, #0]
 800636e:	695b      	ldr	r3, [r3, #20]
 8006370:	019b      	lsls	r3, r3, #6
 8006372:	697a      	ldr	r2, [r7, #20]
 8006374:	4313      	orrs	r3, r2
 8006376:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	697a      	ldr	r2, [r7, #20]
 800637c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	68fa      	ldr	r2, [r7, #12]
 8006382:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006384:	683b      	ldr	r3, [r7, #0]
 8006386:	685a      	ldr	r2, [r3, #4]
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	693a      	ldr	r2, [r7, #16]
 8006390:	621a      	str	r2, [r3, #32]
}
 8006392:	bf00      	nop
 8006394:	371c      	adds	r7, #28
 8006396:	46bd      	mov	sp, r7
 8006398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639c:	4770      	bx	lr
 800639e:	bf00      	nop
 80063a0:	40010000 	.word	0x40010000
 80063a4:	40010400 	.word	0x40010400

080063a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80063a8:	b480      	push	{r7}
 80063aa:	b087      	sub	sp, #28
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	60f8      	str	r0, [r7, #12]
 80063b0:	60b9      	str	r1, [r7, #8]
 80063b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	6a1b      	ldr	r3, [r3, #32]
 80063b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	6a1b      	ldr	r3, [r3, #32]
 80063be:	f023 0201 	bic.w	r2, r3, #1
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	699b      	ldr	r3, [r3, #24]
 80063ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80063cc:	693b      	ldr	r3, [r7, #16]
 80063ce:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80063d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	011b      	lsls	r3, r3, #4
 80063d8:	693a      	ldr	r2, [r7, #16]
 80063da:	4313      	orrs	r3, r2
 80063dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80063de:	697b      	ldr	r3, [r7, #20]
 80063e0:	f023 030a 	bic.w	r3, r3, #10
 80063e4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80063e6:	697a      	ldr	r2, [r7, #20]
 80063e8:	68bb      	ldr	r3, [r7, #8]
 80063ea:	4313      	orrs	r3, r2
 80063ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	693a      	ldr	r2, [r7, #16]
 80063f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	697a      	ldr	r2, [r7, #20]
 80063f8:	621a      	str	r2, [r3, #32]
}
 80063fa:	bf00      	nop
 80063fc:	371c      	adds	r7, #28
 80063fe:	46bd      	mov	sp, r7
 8006400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006404:	4770      	bx	lr

08006406 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006406:	b480      	push	{r7}
 8006408:	b087      	sub	sp, #28
 800640a:	af00      	add	r7, sp, #0
 800640c:	60f8      	str	r0, [r7, #12]
 800640e:	60b9      	str	r1, [r7, #8]
 8006410:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	6a1b      	ldr	r3, [r3, #32]
 8006416:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	6a1b      	ldr	r3, [r3, #32]
 800641c:	f023 0210 	bic.w	r2, r3, #16
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	699b      	ldr	r3, [r3, #24]
 8006428:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800642a:	693b      	ldr	r3, [r7, #16]
 800642c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006430:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	031b      	lsls	r3, r3, #12
 8006436:	693a      	ldr	r2, [r7, #16]
 8006438:	4313      	orrs	r3, r2
 800643a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800643c:	697b      	ldr	r3, [r7, #20]
 800643e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006442:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006444:	68bb      	ldr	r3, [r7, #8]
 8006446:	011b      	lsls	r3, r3, #4
 8006448:	697a      	ldr	r2, [r7, #20]
 800644a:	4313      	orrs	r3, r2
 800644c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	693a      	ldr	r2, [r7, #16]
 8006452:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	697a      	ldr	r2, [r7, #20]
 8006458:	621a      	str	r2, [r3, #32]
}
 800645a:	bf00      	nop
 800645c:	371c      	adds	r7, #28
 800645e:	46bd      	mov	sp, r7
 8006460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006464:	4770      	bx	lr

08006466 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006466:	b480      	push	{r7}
 8006468:	b085      	sub	sp, #20
 800646a:	af00      	add	r7, sp, #0
 800646c:	6078      	str	r0, [r7, #4]
 800646e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	689b      	ldr	r3, [r3, #8]
 8006474:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800647c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800647e:	683a      	ldr	r2, [r7, #0]
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	4313      	orrs	r3, r2
 8006484:	f043 0307 	orr.w	r3, r3, #7
 8006488:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	68fa      	ldr	r2, [r7, #12]
 800648e:	609a      	str	r2, [r3, #8]
}
 8006490:	bf00      	nop
 8006492:	3714      	adds	r7, #20
 8006494:	46bd      	mov	sp, r7
 8006496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649a:	4770      	bx	lr

0800649c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800649c:	b480      	push	{r7}
 800649e:	b087      	sub	sp, #28
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	60f8      	str	r0, [r7, #12]
 80064a4:	60b9      	str	r1, [r7, #8]
 80064a6:	607a      	str	r2, [r7, #4]
 80064a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	689b      	ldr	r3, [r3, #8]
 80064ae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80064b0:	697b      	ldr	r3, [r7, #20]
 80064b2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80064b6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80064b8:	683b      	ldr	r3, [r7, #0]
 80064ba:	021a      	lsls	r2, r3, #8
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	431a      	orrs	r2, r3
 80064c0:	68bb      	ldr	r3, [r7, #8]
 80064c2:	4313      	orrs	r3, r2
 80064c4:	697a      	ldr	r2, [r7, #20]
 80064c6:	4313      	orrs	r3, r2
 80064c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	697a      	ldr	r2, [r7, #20]
 80064ce:	609a      	str	r2, [r3, #8]
}
 80064d0:	bf00      	nop
 80064d2:	371c      	adds	r7, #28
 80064d4:	46bd      	mov	sp, r7
 80064d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064da:	4770      	bx	lr

080064dc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80064dc:	b480      	push	{r7}
 80064de:	b087      	sub	sp, #28
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	60f8      	str	r0, [r7, #12]
 80064e4:	60b9      	str	r1, [r7, #8]
 80064e6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80064e8:	68bb      	ldr	r3, [r7, #8]
 80064ea:	f003 031f 	and.w	r3, r3, #31
 80064ee:	2201      	movs	r2, #1
 80064f0:	fa02 f303 	lsl.w	r3, r2, r3
 80064f4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	6a1a      	ldr	r2, [r3, #32]
 80064fa:	697b      	ldr	r3, [r7, #20]
 80064fc:	43db      	mvns	r3, r3
 80064fe:	401a      	ands	r2, r3
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	6a1a      	ldr	r2, [r3, #32]
 8006508:	68bb      	ldr	r3, [r7, #8]
 800650a:	f003 031f 	and.w	r3, r3, #31
 800650e:	6879      	ldr	r1, [r7, #4]
 8006510:	fa01 f303 	lsl.w	r3, r1, r3
 8006514:	431a      	orrs	r2, r3
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	621a      	str	r2, [r3, #32]
}
 800651a:	bf00      	nop
 800651c:	371c      	adds	r7, #28
 800651e:	46bd      	mov	sp, r7
 8006520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006524:	4770      	bx	lr
	...

08006528 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006528:	b480      	push	{r7}
 800652a:	b085      	sub	sp, #20
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
 8006530:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006538:	2b01      	cmp	r3, #1
 800653a:	d101      	bne.n	8006540 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800653c:	2302      	movs	r3, #2
 800653e:	e05a      	b.n	80065f6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2201      	movs	r2, #1
 8006544:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2202      	movs	r2, #2
 800654c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	685b      	ldr	r3, [r3, #4]
 8006556:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	689b      	ldr	r3, [r3, #8]
 800655e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006566:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006568:	683b      	ldr	r3, [r7, #0]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	68fa      	ldr	r2, [r7, #12]
 800656e:	4313      	orrs	r3, r2
 8006570:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	68fa      	ldr	r2, [r7, #12]
 8006578:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	4a21      	ldr	r2, [pc, #132]	@ (8006604 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006580:	4293      	cmp	r3, r2
 8006582:	d022      	beq.n	80065ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800658c:	d01d      	beq.n	80065ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	4a1d      	ldr	r2, [pc, #116]	@ (8006608 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006594:	4293      	cmp	r3, r2
 8006596:	d018      	beq.n	80065ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	4a1b      	ldr	r2, [pc, #108]	@ (800660c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800659e:	4293      	cmp	r3, r2
 80065a0:	d013      	beq.n	80065ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	4a1a      	ldr	r2, [pc, #104]	@ (8006610 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80065a8:	4293      	cmp	r3, r2
 80065aa:	d00e      	beq.n	80065ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	4a18      	ldr	r2, [pc, #96]	@ (8006614 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80065b2:	4293      	cmp	r3, r2
 80065b4:	d009      	beq.n	80065ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	4a17      	ldr	r2, [pc, #92]	@ (8006618 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80065bc:	4293      	cmp	r3, r2
 80065be:	d004      	beq.n	80065ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	4a15      	ldr	r2, [pc, #84]	@ (800661c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80065c6:	4293      	cmp	r3, r2
 80065c8:	d10c      	bne.n	80065e4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80065ca:	68bb      	ldr	r3, [r7, #8]
 80065cc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80065d0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80065d2:	683b      	ldr	r3, [r7, #0]
 80065d4:	685b      	ldr	r3, [r3, #4]
 80065d6:	68ba      	ldr	r2, [r7, #8]
 80065d8:	4313      	orrs	r3, r2
 80065da:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	68ba      	ldr	r2, [r7, #8]
 80065e2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2201      	movs	r2, #1
 80065e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2200      	movs	r2, #0
 80065f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80065f4:	2300      	movs	r3, #0
}
 80065f6:	4618      	mov	r0, r3
 80065f8:	3714      	adds	r7, #20
 80065fa:	46bd      	mov	sp, r7
 80065fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006600:	4770      	bx	lr
 8006602:	bf00      	nop
 8006604:	40010000 	.word	0x40010000
 8006608:	40000400 	.word	0x40000400
 800660c:	40000800 	.word	0x40000800
 8006610:	40000c00 	.word	0x40000c00
 8006614:	40010400 	.word	0x40010400
 8006618:	40014000 	.word	0x40014000
 800661c:	40001800 	.word	0x40001800

08006620 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006620:	b480      	push	{r7}
 8006622:	b083      	sub	sp, #12
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006628:	bf00      	nop
 800662a:	370c      	adds	r7, #12
 800662c:	46bd      	mov	sp, r7
 800662e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006632:	4770      	bx	lr

08006634 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006634:	b480      	push	{r7}
 8006636:	b083      	sub	sp, #12
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800663c:	bf00      	nop
 800663e:	370c      	adds	r7, #12
 8006640:	46bd      	mov	sp, r7
 8006642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006646:	4770      	bx	lr

08006648 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006648:	b580      	push	{r7, lr}
 800664a:	b082      	sub	sp, #8
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2b00      	cmp	r3, #0
 8006654:	d101      	bne.n	800665a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006656:	2301      	movs	r3, #1
 8006658:	e042      	b.n	80066e0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006660:	b2db      	uxtb	r3, r3
 8006662:	2b00      	cmp	r3, #0
 8006664:	d106      	bne.n	8006674 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	2200      	movs	r2, #0
 800666a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800666e:	6878      	ldr	r0, [r7, #4]
 8006670:	f7fc f98a 	bl	8002988 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2224      	movs	r2, #36	@ 0x24
 8006678:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	68da      	ldr	r2, [r3, #12]
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800668a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800668c:	6878      	ldr	r0, [r7, #4]
 800668e:	f000 f82b 	bl	80066e8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	691a      	ldr	r2, [r3, #16]
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80066a0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	695a      	ldr	r2, [r3, #20]
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80066b0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	68da      	ldr	r2, [r3, #12]
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80066c0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	2200      	movs	r2, #0
 80066c6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2220      	movs	r2, #32
 80066cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2220      	movs	r2, #32
 80066d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2200      	movs	r2, #0
 80066dc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80066de:	2300      	movs	r3, #0
}
 80066e0:	4618      	mov	r0, r3
 80066e2:	3708      	adds	r7, #8
 80066e4:	46bd      	mov	sp, r7
 80066e6:	bd80      	pop	{r7, pc}

080066e8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80066e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80066ec:	b0c0      	sub	sp, #256	@ 0x100
 80066ee:	af00      	add	r7, sp, #0
 80066f0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80066f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	691b      	ldr	r3, [r3, #16]
 80066fc:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006700:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006704:	68d9      	ldr	r1, [r3, #12]
 8006706:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800670a:	681a      	ldr	r2, [r3, #0]
 800670c:	ea40 0301 	orr.w	r3, r0, r1
 8006710:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006712:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006716:	689a      	ldr	r2, [r3, #8]
 8006718:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800671c:	691b      	ldr	r3, [r3, #16]
 800671e:	431a      	orrs	r2, r3
 8006720:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006724:	695b      	ldr	r3, [r3, #20]
 8006726:	431a      	orrs	r2, r3
 8006728:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800672c:	69db      	ldr	r3, [r3, #28]
 800672e:	4313      	orrs	r3, r2
 8006730:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006734:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	68db      	ldr	r3, [r3, #12]
 800673c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006740:	f021 010c 	bic.w	r1, r1, #12
 8006744:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006748:	681a      	ldr	r2, [r3, #0]
 800674a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800674e:	430b      	orrs	r3, r1
 8006750:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006752:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	695b      	ldr	r3, [r3, #20]
 800675a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800675e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006762:	6999      	ldr	r1, [r3, #24]
 8006764:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006768:	681a      	ldr	r2, [r3, #0]
 800676a:	ea40 0301 	orr.w	r3, r0, r1
 800676e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006770:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006774:	681a      	ldr	r2, [r3, #0]
 8006776:	4b8f      	ldr	r3, [pc, #572]	@ (80069b4 <UART_SetConfig+0x2cc>)
 8006778:	429a      	cmp	r2, r3
 800677a:	d005      	beq.n	8006788 <UART_SetConfig+0xa0>
 800677c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006780:	681a      	ldr	r2, [r3, #0]
 8006782:	4b8d      	ldr	r3, [pc, #564]	@ (80069b8 <UART_SetConfig+0x2d0>)
 8006784:	429a      	cmp	r2, r3
 8006786:	d104      	bne.n	8006792 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006788:	f7fd ff04 	bl	8004594 <HAL_RCC_GetPCLK2Freq>
 800678c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006790:	e003      	b.n	800679a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006792:	f7fd feeb 	bl	800456c <HAL_RCC_GetPCLK1Freq>
 8006796:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800679a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800679e:	69db      	ldr	r3, [r3, #28]
 80067a0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80067a4:	f040 810c 	bne.w	80069c0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80067a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80067ac:	2200      	movs	r2, #0
 80067ae:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80067b2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80067b6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80067ba:	4622      	mov	r2, r4
 80067bc:	462b      	mov	r3, r5
 80067be:	1891      	adds	r1, r2, r2
 80067c0:	65b9      	str	r1, [r7, #88]	@ 0x58
 80067c2:	415b      	adcs	r3, r3
 80067c4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80067c6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80067ca:	4621      	mov	r1, r4
 80067cc:	eb12 0801 	adds.w	r8, r2, r1
 80067d0:	4629      	mov	r1, r5
 80067d2:	eb43 0901 	adc.w	r9, r3, r1
 80067d6:	f04f 0200 	mov.w	r2, #0
 80067da:	f04f 0300 	mov.w	r3, #0
 80067de:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80067e2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80067e6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80067ea:	4690      	mov	r8, r2
 80067ec:	4699      	mov	r9, r3
 80067ee:	4623      	mov	r3, r4
 80067f0:	eb18 0303 	adds.w	r3, r8, r3
 80067f4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80067f8:	462b      	mov	r3, r5
 80067fa:	eb49 0303 	adc.w	r3, r9, r3
 80067fe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006802:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006806:	685b      	ldr	r3, [r3, #4]
 8006808:	2200      	movs	r2, #0
 800680a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800680e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006812:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006816:	460b      	mov	r3, r1
 8006818:	18db      	adds	r3, r3, r3
 800681a:	653b      	str	r3, [r7, #80]	@ 0x50
 800681c:	4613      	mov	r3, r2
 800681e:	eb42 0303 	adc.w	r3, r2, r3
 8006822:	657b      	str	r3, [r7, #84]	@ 0x54
 8006824:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006828:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800682c:	f7fa f9a6 	bl	8000b7c <__aeabi_uldivmod>
 8006830:	4602      	mov	r2, r0
 8006832:	460b      	mov	r3, r1
 8006834:	4b61      	ldr	r3, [pc, #388]	@ (80069bc <UART_SetConfig+0x2d4>)
 8006836:	fba3 2302 	umull	r2, r3, r3, r2
 800683a:	095b      	lsrs	r3, r3, #5
 800683c:	011c      	lsls	r4, r3, #4
 800683e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006842:	2200      	movs	r2, #0
 8006844:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006848:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800684c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006850:	4642      	mov	r2, r8
 8006852:	464b      	mov	r3, r9
 8006854:	1891      	adds	r1, r2, r2
 8006856:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006858:	415b      	adcs	r3, r3
 800685a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800685c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006860:	4641      	mov	r1, r8
 8006862:	eb12 0a01 	adds.w	sl, r2, r1
 8006866:	4649      	mov	r1, r9
 8006868:	eb43 0b01 	adc.w	fp, r3, r1
 800686c:	f04f 0200 	mov.w	r2, #0
 8006870:	f04f 0300 	mov.w	r3, #0
 8006874:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006878:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800687c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006880:	4692      	mov	sl, r2
 8006882:	469b      	mov	fp, r3
 8006884:	4643      	mov	r3, r8
 8006886:	eb1a 0303 	adds.w	r3, sl, r3
 800688a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800688e:	464b      	mov	r3, r9
 8006890:	eb4b 0303 	adc.w	r3, fp, r3
 8006894:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006898:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800689c:	685b      	ldr	r3, [r3, #4]
 800689e:	2200      	movs	r2, #0
 80068a0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80068a4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80068a8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80068ac:	460b      	mov	r3, r1
 80068ae:	18db      	adds	r3, r3, r3
 80068b0:	643b      	str	r3, [r7, #64]	@ 0x40
 80068b2:	4613      	mov	r3, r2
 80068b4:	eb42 0303 	adc.w	r3, r2, r3
 80068b8:	647b      	str	r3, [r7, #68]	@ 0x44
 80068ba:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80068be:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80068c2:	f7fa f95b 	bl	8000b7c <__aeabi_uldivmod>
 80068c6:	4602      	mov	r2, r0
 80068c8:	460b      	mov	r3, r1
 80068ca:	4611      	mov	r1, r2
 80068cc:	4b3b      	ldr	r3, [pc, #236]	@ (80069bc <UART_SetConfig+0x2d4>)
 80068ce:	fba3 2301 	umull	r2, r3, r3, r1
 80068d2:	095b      	lsrs	r3, r3, #5
 80068d4:	2264      	movs	r2, #100	@ 0x64
 80068d6:	fb02 f303 	mul.w	r3, r2, r3
 80068da:	1acb      	subs	r3, r1, r3
 80068dc:	00db      	lsls	r3, r3, #3
 80068de:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80068e2:	4b36      	ldr	r3, [pc, #216]	@ (80069bc <UART_SetConfig+0x2d4>)
 80068e4:	fba3 2302 	umull	r2, r3, r3, r2
 80068e8:	095b      	lsrs	r3, r3, #5
 80068ea:	005b      	lsls	r3, r3, #1
 80068ec:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80068f0:	441c      	add	r4, r3
 80068f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80068f6:	2200      	movs	r2, #0
 80068f8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80068fc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006900:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006904:	4642      	mov	r2, r8
 8006906:	464b      	mov	r3, r9
 8006908:	1891      	adds	r1, r2, r2
 800690a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800690c:	415b      	adcs	r3, r3
 800690e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006910:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006914:	4641      	mov	r1, r8
 8006916:	1851      	adds	r1, r2, r1
 8006918:	6339      	str	r1, [r7, #48]	@ 0x30
 800691a:	4649      	mov	r1, r9
 800691c:	414b      	adcs	r3, r1
 800691e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006920:	f04f 0200 	mov.w	r2, #0
 8006924:	f04f 0300 	mov.w	r3, #0
 8006928:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800692c:	4659      	mov	r1, fp
 800692e:	00cb      	lsls	r3, r1, #3
 8006930:	4651      	mov	r1, sl
 8006932:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006936:	4651      	mov	r1, sl
 8006938:	00ca      	lsls	r2, r1, #3
 800693a:	4610      	mov	r0, r2
 800693c:	4619      	mov	r1, r3
 800693e:	4603      	mov	r3, r0
 8006940:	4642      	mov	r2, r8
 8006942:	189b      	adds	r3, r3, r2
 8006944:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006948:	464b      	mov	r3, r9
 800694a:	460a      	mov	r2, r1
 800694c:	eb42 0303 	adc.w	r3, r2, r3
 8006950:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006954:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006958:	685b      	ldr	r3, [r3, #4]
 800695a:	2200      	movs	r2, #0
 800695c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006960:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006964:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006968:	460b      	mov	r3, r1
 800696a:	18db      	adds	r3, r3, r3
 800696c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800696e:	4613      	mov	r3, r2
 8006970:	eb42 0303 	adc.w	r3, r2, r3
 8006974:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006976:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800697a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800697e:	f7fa f8fd 	bl	8000b7c <__aeabi_uldivmod>
 8006982:	4602      	mov	r2, r0
 8006984:	460b      	mov	r3, r1
 8006986:	4b0d      	ldr	r3, [pc, #52]	@ (80069bc <UART_SetConfig+0x2d4>)
 8006988:	fba3 1302 	umull	r1, r3, r3, r2
 800698c:	095b      	lsrs	r3, r3, #5
 800698e:	2164      	movs	r1, #100	@ 0x64
 8006990:	fb01 f303 	mul.w	r3, r1, r3
 8006994:	1ad3      	subs	r3, r2, r3
 8006996:	00db      	lsls	r3, r3, #3
 8006998:	3332      	adds	r3, #50	@ 0x32
 800699a:	4a08      	ldr	r2, [pc, #32]	@ (80069bc <UART_SetConfig+0x2d4>)
 800699c:	fba2 2303 	umull	r2, r3, r2, r3
 80069a0:	095b      	lsrs	r3, r3, #5
 80069a2:	f003 0207 	and.w	r2, r3, #7
 80069a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	4422      	add	r2, r4
 80069ae:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80069b0:	e106      	b.n	8006bc0 <UART_SetConfig+0x4d8>
 80069b2:	bf00      	nop
 80069b4:	40011000 	.word	0x40011000
 80069b8:	40011400 	.word	0x40011400
 80069bc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80069c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80069c4:	2200      	movs	r2, #0
 80069c6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80069ca:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80069ce:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80069d2:	4642      	mov	r2, r8
 80069d4:	464b      	mov	r3, r9
 80069d6:	1891      	adds	r1, r2, r2
 80069d8:	6239      	str	r1, [r7, #32]
 80069da:	415b      	adcs	r3, r3
 80069dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80069de:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80069e2:	4641      	mov	r1, r8
 80069e4:	1854      	adds	r4, r2, r1
 80069e6:	4649      	mov	r1, r9
 80069e8:	eb43 0501 	adc.w	r5, r3, r1
 80069ec:	f04f 0200 	mov.w	r2, #0
 80069f0:	f04f 0300 	mov.w	r3, #0
 80069f4:	00eb      	lsls	r3, r5, #3
 80069f6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80069fa:	00e2      	lsls	r2, r4, #3
 80069fc:	4614      	mov	r4, r2
 80069fe:	461d      	mov	r5, r3
 8006a00:	4643      	mov	r3, r8
 8006a02:	18e3      	adds	r3, r4, r3
 8006a04:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006a08:	464b      	mov	r3, r9
 8006a0a:	eb45 0303 	adc.w	r3, r5, r3
 8006a0e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006a12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a16:	685b      	ldr	r3, [r3, #4]
 8006a18:	2200      	movs	r2, #0
 8006a1a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006a1e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006a22:	f04f 0200 	mov.w	r2, #0
 8006a26:	f04f 0300 	mov.w	r3, #0
 8006a2a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006a2e:	4629      	mov	r1, r5
 8006a30:	008b      	lsls	r3, r1, #2
 8006a32:	4621      	mov	r1, r4
 8006a34:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006a38:	4621      	mov	r1, r4
 8006a3a:	008a      	lsls	r2, r1, #2
 8006a3c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006a40:	f7fa f89c 	bl	8000b7c <__aeabi_uldivmod>
 8006a44:	4602      	mov	r2, r0
 8006a46:	460b      	mov	r3, r1
 8006a48:	4b60      	ldr	r3, [pc, #384]	@ (8006bcc <UART_SetConfig+0x4e4>)
 8006a4a:	fba3 2302 	umull	r2, r3, r3, r2
 8006a4e:	095b      	lsrs	r3, r3, #5
 8006a50:	011c      	lsls	r4, r3, #4
 8006a52:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006a56:	2200      	movs	r2, #0
 8006a58:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006a5c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006a60:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006a64:	4642      	mov	r2, r8
 8006a66:	464b      	mov	r3, r9
 8006a68:	1891      	adds	r1, r2, r2
 8006a6a:	61b9      	str	r1, [r7, #24]
 8006a6c:	415b      	adcs	r3, r3
 8006a6e:	61fb      	str	r3, [r7, #28]
 8006a70:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006a74:	4641      	mov	r1, r8
 8006a76:	1851      	adds	r1, r2, r1
 8006a78:	6139      	str	r1, [r7, #16]
 8006a7a:	4649      	mov	r1, r9
 8006a7c:	414b      	adcs	r3, r1
 8006a7e:	617b      	str	r3, [r7, #20]
 8006a80:	f04f 0200 	mov.w	r2, #0
 8006a84:	f04f 0300 	mov.w	r3, #0
 8006a88:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006a8c:	4659      	mov	r1, fp
 8006a8e:	00cb      	lsls	r3, r1, #3
 8006a90:	4651      	mov	r1, sl
 8006a92:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006a96:	4651      	mov	r1, sl
 8006a98:	00ca      	lsls	r2, r1, #3
 8006a9a:	4610      	mov	r0, r2
 8006a9c:	4619      	mov	r1, r3
 8006a9e:	4603      	mov	r3, r0
 8006aa0:	4642      	mov	r2, r8
 8006aa2:	189b      	adds	r3, r3, r2
 8006aa4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006aa8:	464b      	mov	r3, r9
 8006aaa:	460a      	mov	r2, r1
 8006aac:	eb42 0303 	adc.w	r3, r2, r3
 8006ab0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006ab4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ab8:	685b      	ldr	r3, [r3, #4]
 8006aba:	2200      	movs	r2, #0
 8006abc:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006abe:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006ac0:	f04f 0200 	mov.w	r2, #0
 8006ac4:	f04f 0300 	mov.w	r3, #0
 8006ac8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006acc:	4649      	mov	r1, r9
 8006ace:	008b      	lsls	r3, r1, #2
 8006ad0:	4641      	mov	r1, r8
 8006ad2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006ad6:	4641      	mov	r1, r8
 8006ad8:	008a      	lsls	r2, r1, #2
 8006ada:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006ade:	f7fa f84d 	bl	8000b7c <__aeabi_uldivmod>
 8006ae2:	4602      	mov	r2, r0
 8006ae4:	460b      	mov	r3, r1
 8006ae6:	4611      	mov	r1, r2
 8006ae8:	4b38      	ldr	r3, [pc, #224]	@ (8006bcc <UART_SetConfig+0x4e4>)
 8006aea:	fba3 2301 	umull	r2, r3, r3, r1
 8006aee:	095b      	lsrs	r3, r3, #5
 8006af0:	2264      	movs	r2, #100	@ 0x64
 8006af2:	fb02 f303 	mul.w	r3, r2, r3
 8006af6:	1acb      	subs	r3, r1, r3
 8006af8:	011b      	lsls	r3, r3, #4
 8006afa:	3332      	adds	r3, #50	@ 0x32
 8006afc:	4a33      	ldr	r2, [pc, #204]	@ (8006bcc <UART_SetConfig+0x4e4>)
 8006afe:	fba2 2303 	umull	r2, r3, r2, r3
 8006b02:	095b      	lsrs	r3, r3, #5
 8006b04:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006b08:	441c      	add	r4, r3
 8006b0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006b0e:	2200      	movs	r2, #0
 8006b10:	673b      	str	r3, [r7, #112]	@ 0x70
 8006b12:	677a      	str	r2, [r7, #116]	@ 0x74
 8006b14:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006b18:	4642      	mov	r2, r8
 8006b1a:	464b      	mov	r3, r9
 8006b1c:	1891      	adds	r1, r2, r2
 8006b1e:	60b9      	str	r1, [r7, #8]
 8006b20:	415b      	adcs	r3, r3
 8006b22:	60fb      	str	r3, [r7, #12]
 8006b24:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006b28:	4641      	mov	r1, r8
 8006b2a:	1851      	adds	r1, r2, r1
 8006b2c:	6039      	str	r1, [r7, #0]
 8006b2e:	4649      	mov	r1, r9
 8006b30:	414b      	adcs	r3, r1
 8006b32:	607b      	str	r3, [r7, #4]
 8006b34:	f04f 0200 	mov.w	r2, #0
 8006b38:	f04f 0300 	mov.w	r3, #0
 8006b3c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006b40:	4659      	mov	r1, fp
 8006b42:	00cb      	lsls	r3, r1, #3
 8006b44:	4651      	mov	r1, sl
 8006b46:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006b4a:	4651      	mov	r1, sl
 8006b4c:	00ca      	lsls	r2, r1, #3
 8006b4e:	4610      	mov	r0, r2
 8006b50:	4619      	mov	r1, r3
 8006b52:	4603      	mov	r3, r0
 8006b54:	4642      	mov	r2, r8
 8006b56:	189b      	adds	r3, r3, r2
 8006b58:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006b5a:	464b      	mov	r3, r9
 8006b5c:	460a      	mov	r2, r1
 8006b5e:	eb42 0303 	adc.w	r3, r2, r3
 8006b62:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006b64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b68:	685b      	ldr	r3, [r3, #4]
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	663b      	str	r3, [r7, #96]	@ 0x60
 8006b6e:	667a      	str	r2, [r7, #100]	@ 0x64
 8006b70:	f04f 0200 	mov.w	r2, #0
 8006b74:	f04f 0300 	mov.w	r3, #0
 8006b78:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006b7c:	4649      	mov	r1, r9
 8006b7e:	008b      	lsls	r3, r1, #2
 8006b80:	4641      	mov	r1, r8
 8006b82:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006b86:	4641      	mov	r1, r8
 8006b88:	008a      	lsls	r2, r1, #2
 8006b8a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006b8e:	f7f9 fff5 	bl	8000b7c <__aeabi_uldivmod>
 8006b92:	4602      	mov	r2, r0
 8006b94:	460b      	mov	r3, r1
 8006b96:	4b0d      	ldr	r3, [pc, #52]	@ (8006bcc <UART_SetConfig+0x4e4>)
 8006b98:	fba3 1302 	umull	r1, r3, r3, r2
 8006b9c:	095b      	lsrs	r3, r3, #5
 8006b9e:	2164      	movs	r1, #100	@ 0x64
 8006ba0:	fb01 f303 	mul.w	r3, r1, r3
 8006ba4:	1ad3      	subs	r3, r2, r3
 8006ba6:	011b      	lsls	r3, r3, #4
 8006ba8:	3332      	adds	r3, #50	@ 0x32
 8006baa:	4a08      	ldr	r2, [pc, #32]	@ (8006bcc <UART_SetConfig+0x4e4>)
 8006bac:	fba2 2303 	umull	r2, r3, r2, r3
 8006bb0:	095b      	lsrs	r3, r3, #5
 8006bb2:	f003 020f 	and.w	r2, r3, #15
 8006bb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	4422      	add	r2, r4
 8006bbe:	609a      	str	r2, [r3, #8]
}
 8006bc0:	bf00      	nop
 8006bc2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006bcc:	51eb851f 	.word	0x51eb851f

08006bd0 <DEV_SPI_WRite>:
	HAL_Delay(xms);
}


void DEV_SPI_WRite(UBYTE _dat)
{
 8006bd0:	b580      	push	{r7, lr}
 8006bd2:	b082      	sub	sp, #8
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	4603      	mov	r3, r0
 8006bd8:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&hspi2, (uint8_t *)&_dat, 1, 500);
 8006bda:	1df9      	adds	r1, r7, #7
 8006bdc:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8006be0:	2201      	movs	r2, #1
 8006be2:	4803      	ldr	r0, [pc, #12]	@ (8006bf0 <DEV_SPI_WRite+0x20>)
 8006be4:	f7fe fa41 	bl	800506a <HAL_SPI_Transmit>
}
 8006be8:	bf00      	nop
 8006bea:	3708      	adds	r7, #8
 8006bec:	46bd      	mov	sp, r7
 8006bee:	bd80      	pop	{r7, pc}
 8006bf0:	2000017c 	.word	0x2000017c

08006bf4 <DEV_Module_Init>:

int DEV_Module_Init(void)
{
 8006bf4:	b580      	push	{r7, lr}
 8006bf6:	af00      	add	r7, sp, #0
    DEV_Digital_Write(DEV_DC_PIN, 1);
 8006bf8:	2201      	movs	r2, #1
 8006bfa:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006bfe:	480b      	ldr	r0, [pc, #44]	@ (8006c2c <DEV_Module_Init+0x38>)
 8006c00:	f7fc fb96 	bl	8003330 <HAL_GPIO_WritePin>
    DEV_Digital_Write(DEV_CS_PIN, 1);
 8006c04:	2201      	movs	r2, #1
 8006c06:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8006c0a:	4808      	ldr	r0, [pc, #32]	@ (8006c2c <DEV_Module_Init+0x38>)
 8006c0c:	f7fc fb90 	bl	8003330 <HAL_GPIO_WritePin>
    DEV_Digital_Write(DEV_RST_PIN, 1);
 8006c10:	2201      	movs	r2, #1
 8006c12:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8006c16:	4805      	ldr	r0, [pc, #20]	@ (8006c2c <DEV_Module_Init+0x38>)
 8006c18:	f7fc fb8a 	bl	8003330 <HAL_GPIO_WritePin>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8006c1c:	2104      	movs	r1, #4
 8006c1e:	4804      	ldr	r0, [pc, #16]	@ (8006c30 <DEV_Module_Init+0x3c>)
 8006c20:	f7fe fd8c 	bl	800573c <HAL_TIM_PWM_Start>
		return 0;
 8006c24:	2300      	movs	r3, #0
}
 8006c26:	4618      	mov	r0, r3
 8006c28:	bd80      	pop	{r7, pc}
 8006c2a:	bf00      	nop
 8006c2c:	40020400 	.word	0x40020400
 8006c30:	200001d8 	.word	0x200001d8

08006c34 <Paint_NewImage>:
    width   :   The width of the picture
    Height  :   The height of the picture
    Color   :   Whether the picture is inverted
******************************************************************************/
void Paint_NewImage(UWORD Width, UWORD Height, UWORD Rotate, UWORD Color)
{
 8006c34:	b590      	push	{r4, r7, lr}
 8006c36:	b083      	sub	sp, #12
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	4604      	mov	r4, r0
 8006c3c:	4608      	mov	r0, r1
 8006c3e:	4611      	mov	r1, r2
 8006c40:	461a      	mov	r2, r3
 8006c42:	4623      	mov	r3, r4
 8006c44:	80fb      	strh	r3, [r7, #6]
 8006c46:	4603      	mov	r3, r0
 8006c48:	80bb      	strh	r3, [r7, #4]
 8006c4a:	460b      	mov	r3, r1
 8006c4c:	807b      	strh	r3, [r7, #2]
 8006c4e:	4613      	mov	r3, r2
 8006c50:	803b      	strh	r3, [r7, #0]
    Paint.WidthMemory = Width;
 8006c52:	4a1c      	ldr	r2, [pc, #112]	@ (8006cc4 <Paint_NewImage+0x90>)
 8006c54:	88fb      	ldrh	r3, [r7, #6]
 8006c56:	8113      	strh	r3, [r2, #8]
    Paint.HeightMemory = Height;
 8006c58:	4a1a      	ldr	r2, [pc, #104]	@ (8006cc4 <Paint_NewImage+0x90>)
 8006c5a:	88bb      	ldrh	r3, [r7, #4]
 8006c5c:	8153      	strh	r3, [r2, #10]
    Paint.Color = Color;    
 8006c5e:	4a19      	ldr	r2, [pc, #100]	@ (8006cc4 <Paint_NewImage+0x90>)
 8006c60:	883b      	ldrh	r3, [r7, #0]
 8006c62:	8193      	strh	r3, [r2, #12]
    Paint.WidthByte = Width;
 8006c64:	4a17      	ldr	r2, [pc, #92]	@ (8006cc4 <Paint_NewImage+0x90>)
 8006c66:	88fb      	ldrh	r3, [r7, #6]
 8006c68:	8253      	strh	r3, [r2, #18]
    Paint.HeightByte = Height;    
 8006c6a:	4a16      	ldr	r2, [pc, #88]	@ (8006cc4 <Paint_NewImage+0x90>)
 8006c6c:	88bb      	ldrh	r3, [r7, #4]
 8006c6e:	8293      	strh	r3, [r2, #20]
    printf("WidthByte = %d, HeightByte = %d\r\n", Paint.WidthByte, Paint.HeightByte);
 8006c70:	4b14      	ldr	r3, [pc, #80]	@ (8006cc4 <Paint_NewImage+0x90>)
 8006c72:	8a5b      	ldrh	r3, [r3, #18]
 8006c74:	b29b      	uxth	r3, r3
 8006c76:	4619      	mov	r1, r3
 8006c78:	4b12      	ldr	r3, [pc, #72]	@ (8006cc4 <Paint_NewImage+0x90>)
 8006c7a:	8a9b      	ldrh	r3, [r3, #20]
 8006c7c:	b29b      	uxth	r3, r3
 8006c7e:	461a      	mov	r2, r3
 8006c80:	4811      	ldr	r0, [pc, #68]	@ (8006cc8 <Paint_NewImage+0x94>)
 8006c82:	f000 fdfb 	bl	800787c <iprintf>
   
    Paint.Rotate = Rotate;
 8006c86:	4a0f      	ldr	r2, [pc, #60]	@ (8006cc4 <Paint_NewImage+0x90>)
 8006c88:	887b      	ldrh	r3, [r7, #2]
 8006c8a:	81d3      	strh	r3, [r2, #14]
    Paint.Mirror = MIRROR_NONE;
 8006c8c:	4b0d      	ldr	r3, [pc, #52]	@ (8006cc4 <Paint_NewImage+0x90>)
 8006c8e:	2200      	movs	r2, #0
 8006c90:	821a      	strh	r2, [r3, #16]
    
    if(Rotate == ROTATE_0 || Rotate == ROTATE_180) {
 8006c92:	887b      	ldrh	r3, [r7, #2]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d002      	beq.n	8006c9e <Paint_NewImage+0x6a>
 8006c98:	887b      	ldrh	r3, [r7, #2]
 8006c9a:	2bb4      	cmp	r3, #180	@ 0xb4
 8006c9c:	d106      	bne.n	8006cac <Paint_NewImage+0x78>
        Paint.Width = Width;
 8006c9e:	4a09      	ldr	r2, [pc, #36]	@ (8006cc4 <Paint_NewImage+0x90>)
 8006ca0:	88fb      	ldrh	r3, [r7, #6]
 8006ca2:	8093      	strh	r3, [r2, #4]
        Paint.Height = Height;
 8006ca4:	4a07      	ldr	r2, [pc, #28]	@ (8006cc4 <Paint_NewImage+0x90>)
 8006ca6:	88bb      	ldrh	r3, [r7, #4]
 8006ca8:	80d3      	strh	r3, [r2, #6]
 8006caa:	e006      	b.n	8006cba <Paint_NewImage+0x86>
    } else {
        Paint.Width = Height;
 8006cac:	4a05      	ldr	r2, [pc, #20]	@ (8006cc4 <Paint_NewImage+0x90>)
 8006cae:	88bb      	ldrh	r3, [r7, #4]
 8006cb0:	8093      	strh	r3, [r2, #4]
        Paint.Height = Width;
 8006cb2:	4a04      	ldr	r2, [pc, #16]	@ (8006cc4 <Paint_NewImage+0x90>)
 8006cb4:	88fb      	ldrh	r3, [r7, #6]
 8006cb6:	80d3      	strh	r3, [r2, #6]
    }
}
 8006cb8:	bf00      	nop
 8006cba:	bf00      	nop
 8006cbc:	370c      	adds	r7, #12
 8006cbe:	46bd      	mov	sp, r7
 8006cc0:	bd90      	pop	{r4, r7, pc}
 8006cc2:	bf00      	nop
 8006cc4:	20000344 	.word	0x20000344
 8006cc8:	080085d4 	.word	0x080085d4

08006ccc <Paint_SetClearFuntion>:
function:	Select Clear Funtion
parameter:
      Clear :   Pointer to Clear funtion 
******************************************************************************/
void Paint_SetClearFuntion(void (*Clear)(UWORD))
{
 8006ccc:	b480      	push	{r7}
 8006cce:	b083      	sub	sp, #12
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]
  CLEAR=Clear;
 8006cd4:	4a04      	ldr	r2, [pc, #16]	@ (8006ce8 <Paint_SetClearFuntion+0x1c>)
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	6013      	str	r3, [r2, #0]
}
 8006cda:	bf00      	nop
 8006cdc:	370c      	adds	r7, #12
 8006cde:	46bd      	mov	sp, r7
 8006ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce4:	4770      	bx	lr
 8006ce6:	bf00      	nop
 8006ce8:	20000360 	.word	0x20000360

08006cec <Paint_SetDisplayFuntion>:
function:	Select DisplayF untion
parameter:
      Display :   Pointer to display funtion 
******************************************************************************/
void Paint_SetDisplayFuntion(void (*Display)(UWORD,UWORD,UWORD))
{
 8006cec:	b480      	push	{r7}
 8006cee:	b083      	sub	sp, #12
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	6078      	str	r0, [r7, #4]
  DISPLAY=Display;
 8006cf4:	4a04      	ldr	r2, [pc, #16]	@ (8006d08 <Paint_SetDisplayFuntion+0x1c>)
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	6013      	str	r3, [r2, #0]
}
 8006cfa:	bf00      	nop
 8006cfc:	370c      	adds	r7, #12
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d04:	4770      	bx	lr
 8006d06:	bf00      	nop
 8006d08:	2000035c 	.word	0x2000035c

08006d0c <Paint_SetRotate>:
function:	Select Image Rotate
parameter:
    Rotate   :   0,90,180,270
******************************************************************************/
void Paint_SetRotate(UWORD Rotate)
{
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	b082      	sub	sp, #8
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	4603      	mov	r3, r0
 8006d14:	80fb      	strh	r3, [r7, #6]
    if(Rotate == ROTATE_0 || Rotate == ROTATE_90 || Rotate == ROTATE_180 || Rotate == ROTATE_270) {
 8006d16:	88fb      	ldrh	r3, [r7, #6]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d009      	beq.n	8006d30 <Paint_SetRotate+0x24>
 8006d1c:	88fb      	ldrh	r3, [r7, #6]
 8006d1e:	2b5a      	cmp	r3, #90	@ 0x5a
 8006d20:	d006      	beq.n	8006d30 <Paint_SetRotate+0x24>
 8006d22:	88fb      	ldrh	r3, [r7, #6]
 8006d24:	2bb4      	cmp	r3, #180	@ 0xb4
 8006d26:	d003      	beq.n	8006d30 <Paint_SetRotate+0x24>
 8006d28:	88fb      	ldrh	r3, [r7, #6]
 8006d2a:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 8006d2e:	d108      	bne.n	8006d42 <Paint_SetRotate+0x36>
        Debug("Set image Rotate %d\r\n", Rotate);
 8006d30:	88fb      	ldrh	r3, [r7, #6]
 8006d32:	4619      	mov	r1, r3
 8006d34:	4807      	ldr	r0, [pc, #28]	@ (8006d54 <Paint_SetRotate+0x48>)
 8006d36:	f000 fda1 	bl	800787c <iprintf>
        Paint.Rotate = Rotate;
 8006d3a:	4a07      	ldr	r2, [pc, #28]	@ (8006d58 <Paint_SetRotate+0x4c>)
 8006d3c:	88fb      	ldrh	r3, [r7, #6]
 8006d3e:	81d3      	strh	r3, [r2, #14]
 8006d40:	e003      	b.n	8006d4a <Paint_SetRotate+0x3e>
    } else {
        Debug("rotate = 0, 90, 180, 270\r\n");
 8006d42:	4806      	ldr	r0, [pc, #24]	@ (8006d5c <Paint_SetRotate+0x50>)
 8006d44:	f000 fe02 	bl	800794c <puts>
      //  exit(0);
    }
}
 8006d48:	bf00      	nop
 8006d4a:	bf00      	nop
 8006d4c:	3708      	adds	r7, #8
 8006d4e:	46bd      	mov	sp, r7
 8006d50:	bd80      	pop	{r7, pc}
 8006d52:	bf00      	nop
 8006d54:	080085f8 	.word	0x080085f8
 8006d58:	20000344 	.word	0x20000344
 8006d5c:	08008618 	.word	0x08008618

08006d60 <Paint_SetPixel>:
    Xpoint  :   At point X
    Ypoint  :   At point Y
    Color   :   Painted colors
******************************************************************************/
void Paint_SetPixel(UWORD Xpoint, UWORD Ypoint, UWORD Color)
{
 8006d60:	b580      	push	{r7, lr}
 8006d62:	b084      	sub	sp, #16
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	4603      	mov	r3, r0
 8006d68:	80fb      	strh	r3, [r7, #6]
 8006d6a:	460b      	mov	r3, r1
 8006d6c:	80bb      	strh	r3, [r7, #4]
 8006d6e:	4613      	mov	r3, r2
 8006d70:	807b      	strh	r3, [r7, #2]
    if(Xpoint > Paint.Width || Ypoint > Paint.Height){
 8006d72:	4b50      	ldr	r3, [pc, #320]	@ (8006eb4 <Paint_SetPixel+0x154>)
 8006d74:	889b      	ldrh	r3, [r3, #4]
 8006d76:	b29b      	uxth	r3, r3
 8006d78:	88fa      	ldrh	r2, [r7, #6]
 8006d7a:	429a      	cmp	r2, r3
 8006d7c:	d805      	bhi.n	8006d8a <Paint_SetPixel+0x2a>
 8006d7e:	4b4d      	ldr	r3, [pc, #308]	@ (8006eb4 <Paint_SetPixel+0x154>)
 8006d80:	88db      	ldrh	r3, [r3, #6]
 8006d82:	b29b      	uxth	r3, r3
 8006d84:	88ba      	ldrh	r2, [r7, #4]
 8006d86:	429a      	cmp	r2, r3
 8006d88:	d903      	bls.n	8006d92 <Paint_SetPixel+0x32>
        Debug("Exceeding display boundaries\r\n");
 8006d8a:	484b      	ldr	r0, [pc, #300]	@ (8006eb8 <Paint_SetPixel+0x158>)
 8006d8c:	f000 fdde 	bl	800794c <puts>
        return;
 8006d90:	e08c      	b.n	8006eac <Paint_SetPixel+0x14c>
    }      
    UWORD X, Y;

    switch(Paint.Rotate) {
 8006d92:	4b48      	ldr	r3, [pc, #288]	@ (8006eb4 <Paint_SetPixel+0x154>)
 8006d94:	89db      	ldrh	r3, [r3, #14]
 8006d96:	b29b      	uxth	r3, r3
 8006d98:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 8006d9c:	d02d      	beq.n	8006dfa <Paint_SetPixel+0x9a>
 8006d9e:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 8006da2:	f300 8080 	bgt.w	8006ea6 <Paint_SetPixel+0x146>
 8006da6:	2bb4      	cmp	r3, #180	@ 0xb4
 8006da8:	d016      	beq.n	8006dd8 <Paint_SetPixel+0x78>
 8006daa:	2bb4      	cmp	r3, #180	@ 0xb4
 8006dac:	dc7b      	bgt.n	8006ea6 <Paint_SetPixel+0x146>
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d002      	beq.n	8006db8 <Paint_SetPixel+0x58>
 8006db2:	2b5a      	cmp	r3, #90	@ 0x5a
 8006db4:	d005      	beq.n	8006dc2 <Paint_SetPixel+0x62>
        X = Ypoint;
        Y = Paint.HeightMemory - Xpoint - 1;
        break;

    default:
        return;
 8006db6:	e076      	b.n	8006ea6 <Paint_SetPixel+0x146>
        X = Xpoint;
 8006db8:	88fb      	ldrh	r3, [r7, #6]
 8006dba:	81fb      	strh	r3, [r7, #14]
        Y = Ypoint;  
 8006dbc:	88bb      	ldrh	r3, [r7, #4]
 8006dbe:	81bb      	strh	r3, [r7, #12]
        break;
 8006dc0:	e026      	b.n	8006e10 <Paint_SetPixel+0xb0>
        X = Paint.WidthMemory - Ypoint - 1;
 8006dc2:	4b3c      	ldr	r3, [pc, #240]	@ (8006eb4 <Paint_SetPixel+0x154>)
 8006dc4:	891b      	ldrh	r3, [r3, #8]
 8006dc6:	b29a      	uxth	r2, r3
 8006dc8:	88bb      	ldrh	r3, [r7, #4]
 8006dca:	1ad3      	subs	r3, r2, r3
 8006dcc:	b29b      	uxth	r3, r3
 8006dce:	3b01      	subs	r3, #1
 8006dd0:	81fb      	strh	r3, [r7, #14]
        Y = Xpoint;
 8006dd2:	88fb      	ldrh	r3, [r7, #6]
 8006dd4:	81bb      	strh	r3, [r7, #12]
        break;
 8006dd6:	e01b      	b.n	8006e10 <Paint_SetPixel+0xb0>
        X = Paint.WidthMemory - Xpoint - 1;
 8006dd8:	4b36      	ldr	r3, [pc, #216]	@ (8006eb4 <Paint_SetPixel+0x154>)
 8006dda:	891b      	ldrh	r3, [r3, #8]
 8006ddc:	b29a      	uxth	r2, r3
 8006dde:	88fb      	ldrh	r3, [r7, #6]
 8006de0:	1ad3      	subs	r3, r2, r3
 8006de2:	b29b      	uxth	r3, r3
 8006de4:	3b01      	subs	r3, #1
 8006de6:	81fb      	strh	r3, [r7, #14]
        Y = Paint.HeightMemory - Ypoint - 1;
 8006de8:	4b32      	ldr	r3, [pc, #200]	@ (8006eb4 <Paint_SetPixel+0x154>)
 8006dea:	895b      	ldrh	r3, [r3, #10]
 8006dec:	b29a      	uxth	r2, r3
 8006dee:	88bb      	ldrh	r3, [r7, #4]
 8006df0:	1ad3      	subs	r3, r2, r3
 8006df2:	b29b      	uxth	r3, r3
 8006df4:	3b01      	subs	r3, #1
 8006df6:	81bb      	strh	r3, [r7, #12]
        break;
 8006df8:	e00a      	b.n	8006e10 <Paint_SetPixel+0xb0>
        X = Ypoint;
 8006dfa:	88bb      	ldrh	r3, [r7, #4]
 8006dfc:	81fb      	strh	r3, [r7, #14]
        Y = Paint.HeightMemory - Xpoint - 1;
 8006dfe:	4b2d      	ldr	r3, [pc, #180]	@ (8006eb4 <Paint_SetPixel+0x154>)
 8006e00:	895b      	ldrh	r3, [r3, #10]
 8006e02:	b29a      	uxth	r2, r3
 8006e04:	88fb      	ldrh	r3, [r7, #6]
 8006e06:	1ad3      	subs	r3, r2, r3
 8006e08:	b29b      	uxth	r3, r3
 8006e0a:	3b01      	subs	r3, #1
 8006e0c:	81bb      	strh	r3, [r7, #12]
        break;
 8006e0e:	bf00      	nop
    }
    
    switch(Paint.Mirror) {
 8006e10:	4b28      	ldr	r3, [pc, #160]	@ (8006eb4 <Paint_SetPixel+0x154>)
 8006e12:	8a1b      	ldrh	r3, [r3, #16]
 8006e14:	b29b      	uxth	r3, r3
 8006e16:	2b03      	cmp	r3, #3
 8006e18:	d847      	bhi.n	8006eaa <Paint_SetPixel+0x14a>
 8006e1a:	a201      	add	r2, pc, #4	@ (adr r2, 8006e20 <Paint_SetPixel+0xc0>)
 8006e1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e20:	08006e77 	.word	0x08006e77
 8006e24:	08006e31 	.word	0x08006e31
 8006e28:	08006e43 	.word	0x08006e43
 8006e2c:	08006e55 	.word	0x08006e55
    case MIRROR_NONE:
        break;
    case MIRROR_HORIZONTAL:
        X = Paint.WidthMemory - X - 1;
 8006e30:	4b20      	ldr	r3, [pc, #128]	@ (8006eb4 <Paint_SetPixel+0x154>)
 8006e32:	891b      	ldrh	r3, [r3, #8]
 8006e34:	b29a      	uxth	r2, r3
 8006e36:	89fb      	ldrh	r3, [r7, #14]
 8006e38:	1ad3      	subs	r3, r2, r3
 8006e3a:	b29b      	uxth	r3, r3
 8006e3c:	3b01      	subs	r3, #1
 8006e3e:	81fb      	strh	r3, [r7, #14]
        break;
 8006e40:	e01a      	b.n	8006e78 <Paint_SetPixel+0x118>
    case MIRROR_VERTICAL:
        Y = Paint.HeightMemory - Y - 1;
 8006e42:	4b1c      	ldr	r3, [pc, #112]	@ (8006eb4 <Paint_SetPixel+0x154>)
 8006e44:	895b      	ldrh	r3, [r3, #10]
 8006e46:	b29a      	uxth	r2, r3
 8006e48:	89bb      	ldrh	r3, [r7, #12]
 8006e4a:	1ad3      	subs	r3, r2, r3
 8006e4c:	b29b      	uxth	r3, r3
 8006e4e:	3b01      	subs	r3, #1
 8006e50:	81bb      	strh	r3, [r7, #12]
        break;
 8006e52:	e011      	b.n	8006e78 <Paint_SetPixel+0x118>
    case MIRROR_ORIGIN:
        X = Paint.WidthMemory - X - 1;
 8006e54:	4b17      	ldr	r3, [pc, #92]	@ (8006eb4 <Paint_SetPixel+0x154>)
 8006e56:	891b      	ldrh	r3, [r3, #8]
 8006e58:	b29a      	uxth	r2, r3
 8006e5a:	89fb      	ldrh	r3, [r7, #14]
 8006e5c:	1ad3      	subs	r3, r2, r3
 8006e5e:	b29b      	uxth	r3, r3
 8006e60:	3b01      	subs	r3, #1
 8006e62:	81fb      	strh	r3, [r7, #14]
        Y = Paint.HeightMemory - Y - 1;
 8006e64:	4b13      	ldr	r3, [pc, #76]	@ (8006eb4 <Paint_SetPixel+0x154>)
 8006e66:	895b      	ldrh	r3, [r3, #10]
 8006e68:	b29a      	uxth	r2, r3
 8006e6a:	89bb      	ldrh	r3, [r7, #12]
 8006e6c:	1ad3      	subs	r3, r2, r3
 8006e6e:	b29b      	uxth	r3, r3
 8006e70:	3b01      	subs	r3, #1
 8006e72:	81bb      	strh	r3, [r7, #12]
        break;
 8006e74:	e000      	b.n	8006e78 <Paint_SetPixel+0x118>
        break;
 8006e76:	bf00      	nop
    default:
        return;
    }

    // printf("x = %d, y = %d\r\n", X, Y);
    if(X > Paint.WidthMemory || Y > Paint.HeightMemory){
 8006e78:	4b0e      	ldr	r3, [pc, #56]	@ (8006eb4 <Paint_SetPixel+0x154>)
 8006e7a:	891b      	ldrh	r3, [r3, #8]
 8006e7c:	b29b      	uxth	r3, r3
 8006e7e:	89fa      	ldrh	r2, [r7, #14]
 8006e80:	429a      	cmp	r2, r3
 8006e82:	d805      	bhi.n	8006e90 <Paint_SetPixel+0x130>
 8006e84:	4b0b      	ldr	r3, [pc, #44]	@ (8006eb4 <Paint_SetPixel+0x154>)
 8006e86:	895b      	ldrh	r3, [r3, #10]
 8006e88:	b29b      	uxth	r3, r3
 8006e8a:	89ba      	ldrh	r2, [r7, #12]
 8006e8c:	429a      	cmp	r2, r3
 8006e8e:	d903      	bls.n	8006e98 <Paint_SetPixel+0x138>
        Debug("Exceeding display boundaries\r\n");
 8006e90:	4809      	ldr	r0, [pc, #36]	@ (8006eb8 <Paint_SetPixel+0x158>)
 8006e92:	f000 fd5b 	bl	800794c <puts>
        return;
 8006e96:	e009      	b.n	8006eac <Paint_SetPixel+0x14c>
    }
    
   // UDOUBLE Addr = X / 8 + Y * Paint.WidthByte;
		DISPLAY(X,Y, Color);
 8006e98:	4b08      	ldr	r3, [pc, #32]	@ (8006ebc <Paint_SetPixel+0x15c>)
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	887a      	ldrh	r2, [r7, #2]
 8006e9e:	89b9      	ldrh	r1, [r7, #12]
 8006ea0:	89f8      	ldrh	r0, [r7, #14]
 8006ea2:	4798      	blx	r3
 8006ea4:	e002      	b.n	8006eac <Paint_SetPixel+0x14c>
        return;
 8006ea6:	bf00      	nop
 8006ea8:	e000      	b.n	8006eac <Paint_SetPixel+0x14c>
        return;
 8006eaa:	bf00      	nop
}
 8006eac:	3710      	adds	r7, #16
 8006eae:	46bd      	mov	sp, r7
 8006eb0:	bd80      	pop	{r7, pc}
 8006eb2:	bf00      	nop
 8006eb4:	20000344 	.word	0x20000344
 8006eb8:	080086d4 	.word	0x080086d4
 8006ebc:	2000035c 	.word	0x2000035c

08006ec0 <Paint_Clear>:
function:	Clear the color of the picture
parameter:
    Color   :   Painted colors
******************************************************************************/
void Paint_Clear(UWORD Color)
{	
 8006ec0:	b580      	push	{r7, lr}
 8006ec2:	b082      	sub	sp, #8
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	4603      	mov	r3, r0
 8006ec8:	80fb      	strh	r3, [r7, #6]
	CLEAR(Color);
 8006eca:	4b04      	ldr	r3, [pc, #16]	@ (8006edc <Paint_Clear+0x1c>)
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	88fa      	ldrh	r2, [r7, #6]
 8006ed0:	4610      	mov	r0, r2
 8006ed2:	4798      	blx	r3
}
 8006ed4:	bf00      	nop
 8006ed6:	3708      	adds	r7, #8
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	bd80      	pop	{r7, pc}
 8006edc:	20000360 	.word	0x20000360

08006ee0 <Paint_DrawChar>:
    Color_Background : Select the background color of the English character
    Color_Foreground : Select the foreground color of the English character
******************************************************************************/
void Paint_DrawChar(UWORD Xpoint, UWORD Ypoint, const char Acsii_Char,
                    sFONT* Font, UWORD Color_Background, UWORD Color_Foreground)
{
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	b088      	sub	sp, #32
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	607b      	str	r3, [r7, #4]
 8006ee8:	4603      	mov	r3, r0
 8006eea:	81fb      	strh	r3, [r7, #14]
 8006eec:	460b      	mov	r3, r1
 8006eee:	81bb      	strh	r3, [r7, #12]
 8006ef0:	4613      	mov	r3, r2
 8006ef2:	72fb      	strb	r3, [r7, #11]
    UWORD Page, Column;

    if (Xpoint > Paint.Width || Ypoint > Paint.Height) {
 8006ef4:	4b4e      	ldr	r3, [pc, #312]	@ (8007030 <Paint_DrawChar+0x150>)
 8006ef6:	889b      	ldrh	r3, [r3, #4]
 8006ef8:	b29b      	uxth	r3, r3
 8006efa:	89fa      	ldrh	r2, [r7, #14]
 8006efc:	429a      	cmp	r2, r3
 8006efe:	d805      	bhi.n	8006f0c <Paint_DrawChar+0x2c>
 8006f00:	4b4b      	ldr	r3, [pc, #300]	@ (8007030 <Paint_DrawChar+0x150>)
 8006f02:	88db      	ldrh	r3, [r3, #6]
 8006f04:	b29b      	uxth	r3, r3
 8006f06:	89ba      	ldrh	r2, [r7, #12]
 8006f08:	429a      	cmp	r2, r3
 8006f0a:	d903      	bls.n	8006f14 <Paint_DrawChar+0x34>
        Debug("Paint_DrawChar Input exceeds the normal display range\r\n");
 8006f0c:	4849      	ldr	r0, [pc, #292]	@ (8007034 <Paint_DrawChar+0x154>)
 8006f0e:	f000 fd1d 	bl	800794c <puts>
        return;
 8006f12:	e089      	b.n	8007028 <Paint_DrawChar+0x148>
    }

    uint32_t Char_Offset = (Acsii_Char - ' ') * Font->Height * (Font->Width / 8 + (Font->Width % 8 ? 1 : 0));
 8006f14:	7afb      	ldrb	r3, [r7, #11]
 8006f16:	3b20      	subs	r3, #32
 8006f18:	687a      	ldr	r2, [r7, #4]
 8006f1a:	88d2      	ldrh	r2, [r2, #6]
 8006f1c:	fb02 f303 	mul.w	r3, r2, r3
 8006f20:	687a      	ldr	r2, [r7, #4]
 8006f22:	8892      	ldrh	r2, [r2, #4]
 8006f24:	08d2      	lsrs	r2, r2, #3
 8006f26:	b292      	uxth	r2, r2
 8006f28:	4611      	mov	r1, r2
 8006f2a:	687a      	ldr	r2, [r7, #4]
 8006f2c:	8892      	ldrh	r2, [r2, #4]
 8006f2e:	f002 0207 	and.w	r2, r2, #7
 8006f32:	b292      	uxth	r2, r2
 8006f34:	2a00      	cmp	r2, #0
 8006f36:	bf14      	ite	ne
 8006f38:	2201      	movne	r2, #1
 8006f3a:	2200      	moveq	r2, #0
 8006f3c:	b2d2      	uxtb	r2, r2
 8006f3e:	440a      	add	r2, r1
 8006f40:	fb02 f303 	mul.w	r3, r2, r3
 8006f44:	617b      	str	r3, [r7, #20]
    const unsigned char *ptr = &Font->table[Char_Offset];
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681a      	ldr	r2, [r3, #0]
 8006f4a:	697b      	ldr	r3, [r7, #20]
 8006f4c:	4413      	add	r3, r2
 8006f4e:	61bb      	str	r3, [r7, #24]

    for (Page = 0; Page < Font->Height; Page ++ ) {
 8006f50:	2300      	movs	r3, #0
 8006f52:	83fb      	strh	r3, [r7, #30]
 8006f54:	e063      	b.n	800701e <Paint_DrawChar+0x13e>
        for (Column = 0; Column < Font->Width; Column ++ ) {
 8006f56:	2300      	movs	r3, #0
 8006f58:	83bb      	strh	r3, [r7, #28]
 8006f5a:	e04e      	b.n	8006ffa <Paint_DrawChar+0x11a>

            //To determine whether the font background color and screen background color is consistent
            if (FONT_BACKGROUND == Color_Background) { //this process is to speed up the scan
 8006f5c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8006f5e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006f62:	4293      	cmp	r3, r2
 8006f64:	d118      	bne.n	8006f98 <Paint_DrawChar+0xb8>
                if (*ptr & (0x80 >> (Column % 8)))
 8006f66:	69bb      	ldr	r3, [r7, #24]
 8006f68:	781b      	ldrb	r3, [r3, #0]
 8006f6a:	4619      	mov	r1, r3
 8006f6c:	8bbb      	ldrh	r3, [r7, #28]
 8006f6e:	f003 0307 	and.w	r3, r3, #7
 8006f72:	2280      	movs	r2, #128	@ 0x80
 8006f74:	fa42 f303 	asr.w	r3, r2, r3
 8006f78:	400b      	ands	r3, r1
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d031      	beq.n	8006fe2 <Paint_DrawChar+0x102>
                    Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Foreground);
 8006f7e:	89fa      	ldrh	r2, [r7, #14]
 8006f80:	8bbb      	ldrh	r3, [r7, #28]
 8006f82:	4413      	add	r3, r2
 8006f84:	b298      	uxth	r0, r3
 8006f86:	89ba      	ldrh	r2, [r7, #12]
 8006f88:	8bfb      	ldrh	r3, [r7, #30]
 8006f8a:	4413      	add	r3, r2
 8006f8c:	b29b      	uxth	r3, r3
 8006f8e:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8006f90:	4619      	mov	r1, r3
 8006f92:	f7ff fee5 	bl	8006d60 <Paint_SetPixel>
 8006f96:	e024      	b.n	8006fe2 <Paint_DrawChar+0x102>
                    // Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Foreground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
            } else {
                if (*ptr & (0x80 >> (Column % 8))) {
 8006f98:	69bb      	ldr	r3, [r7, #24]
 8006f9a:	781b      	ldrb	r3, [r3, #0]
 8006f9c:	4619      	mov	r1, r3
 8006f9e:	8bbb      	ldrh	r3, [r7, #28]
 8006fa0:	f003 0307 	and.w	r3, r3, #7
 8006fa4:	2280      	movs	r2, #128	@ 0x80
 8006fa6:	fa42 f303 	asr.w	r3, r2, r3
 8006faa:	400b      	ands	r3, r1
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d00c      	beq.n	8006fca <Paint_DrawChar+0xea>
                    Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Foreground);
 8006fb0:	89fa      	ldrh	r2, [r7, #14]
 8006fb2:	8bbb      	ldrh	r3, [r7, #28]
 8006fb4:	4413      	add	r3, r2
 8006fb6:	b298      	uxth	r0, r3
 8006fb8:	89ba      	ldrh	r2, [r7, #12]
 8006fba:	8bfb      	ldrh	r3, [r7, #30]
 8006fbc:	4413      	add	r3, r2
 8006fbe:	b29b      	uxth	r3, r3
 8006fc0:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8006fc2:	4619      	mov	r1, r3
 8006fc4:	f7ff fecc 	bl	8006d60 <Paint_SetPixel>
 8006fc8:	e00b      	b.n	8006fe2 <Paint_DrawChar+0x102>
                    // Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Foreground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
                } else {
                    Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Background);
 8006fca:	89fa      	ldrh	r2, [r7, #14]
 8006fcc:	8bbb      	ldrh	r3, [r7, #28]
 8006fce:	4413      	add	r3, r2
 8006fd0:	b298      	uxth	r0, r3
 8006fd2:	89ba      	ldrh	r2, [r7, #12]
 8006fd4:	8bfb      	ldrh	r3, [r7, #30]
 8006fd6:	4413      	add	r3, r2
 8006fd8:	b29b      	uxth	r3, r3
 8006fda:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8006fdc:	4619      	mov	r1, r3
 8006fde:	f7ff febf 	bl	8006d60 <Paint_SetPixel>
                    // Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Background, DOT_PIXEL_DFT, DOT_STYLE_DFT);
                }
            }
            //One pixel is 8 bits
            if (Column % 8 == 7)
 8006fe2:	8bbb      	ldrh	r3, [r7, #28]
 8006fe4:	f003 0307 	and.w	r3, r3, #7
 8006fe8:	b29b      	uxth	r3, r3
 8006fea:	2b07      	cmp	r3, #7
 8006fec:	d102      	bne.n	8006ff4 <Paint_DrawChar+0x114>
                ptr++;
 8006fee:	69bb      	ldr	r3, [r7, #24]
 8006ff0:	3301      	adds	r3, #1
 8006ff2:	61bb      	str	r3, [r7, #24]
        for (Column = 0; Column < Font->Width; Column ++ ) {
 8006ff4:	8bbb      	ldrh	r3, [r7, #28]
 8006ff6:	3301      	adds	r3, #1
 8006ff8:	83bb      	strh	r3, [r7, #28]
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	889b      	ldrh	r3, [r3, #4]
 8006ffe:	8bba      	ldrh	r2, [r7, #28]
 8007000:	429a      	cmp	r2, r3
 8007002:	d3ab      	bcc.n	8006f5c <Paint_DrawChar+0x7c>
        }// Write a line
        if (Font->Width % 8 != 0)
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	889b      	ldrh	r3, [r3, #4]
 8007008:	f003 0307 	and.w	r3, r3, #7
 800700c:	b29b      	uxth	r3, r3
 800700e:	2b00      	cmp	r3, #0
 8007010:	d002      	beq.n	8007018 <Paint_DrawChar+0x138>
            ptr++;
 8007012:	69bb      	ldr	r3, [r7, #24]
 8007014:	3301      	adds	r3, #1
 8007016:	61bb      	str	r3, [r7, #24]
    for (Page = 0; Page < Font->Height; Page ++ ) {
 8007018:	8bfb      	ldrh	r3, [r7, #30]
 800701a:	3301      	adds	r3, #1
 800701c:	83fb      	strh	r3, [r7, #30]
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	88db      	ldrh	r3, [r3, #6]
 8007022:	8bfa      	ldrh	r2, [r7, #30]
 8007024:	429a      	cmp	r2, r3
 8007026:	d396      	bcc.n	8006f56 <Paint_DrawChar+0x76>
    }// Write all
}
 8007028:	3720      	adds	r7, #32
 800702a:	46bd      	mov	sp, r7
 800702c:	bd80      	pop	{r7, pc}
 800702e:	bf00      	nop
 8007030:	20000344 	.word	0x20000344
 8007034:	080087f0 	.word	0x080087f0

08007038 <Paint_DrawString_EN>:
    Color_Background : Select the background color of the English character
    Color_Foreground : Select the foreground color of the English character
******************************************************************************/
void Paint_DrawString_EN(UWORD Xstart, UWORD Ystart, const char * pString,
                         sFONT* Font, UWORD Color_Background, UWORD Color_Foreground )
{
 8007038:	b580      	push	{r7, lr}
 800703a:	b088      	sub	sp, #32
 800703c:	af02      	add	r7, sp, #8
 800703e:	60ba      	str	r2, [r7, #8]
 8007040:	607b      	str	r3, [r7, #4]
 8007042:	4603      	mov	r3, r0
 8007044:	81fb      	strh	r3, [r7, #14]
 8007046:	460b      	mov	r3, r1
 8007048:	81bb      	strh	r3, [r7, #12]
    UWORD Xpoint = Xstart;
 800704a:	89fb      	ldrh	r3, [r7, #14]
 800704c:	82fb      	strh	r3, [r7, #22]
    UWORD Ypoint = Ystart;
 800704e:	89bb      	ldrh	r3, [r7, #12]
 8007050:	82bb      	strh	r3, [r7, #20]

    if (Xstart > Paint.Width || Ystart > Paint.Height) {
 8007052:	4b23      	ldr	r3, [pc, #140]	@ (80070e0 <Paint_DrawString_EN+0xa8>)
 8007054:	889b      	ldrh	r3, [r3, #4]
 8007056:	b29b      	uxth	r3, r3
 8007058:	89fa      	ldrh	r2, [r7, #14]
 800705a:	429a      	cmp	r2, r3
 800705c:	d805      	bhi.n	800706a <Paint_DrawString_EN+0x32>
 800705e:	4b20      	ldr	r3, [pc, #128]	@ (80070e0 <Paint_DrawString_EN+0xa8>)
 8007060:	88db      	ldrh	r3, [r3, #6]
 8007062:	b29b      	uxth	r3, r3
 8007064:	89ba      	ldrh	r2, [r7, #12]
 8007066:	429a      	cmp	r2, r3
 8007068:	d933      	bls.n	80070d2 <Paint_DrawString_EN+0x9a>
        Debug("Paint_DrawString_EN Input exceeds the normal display range\r\n");
 800706a:	481e      	ldr	r0, [pc, #120]	@ (80070e4 <Paint_DrawString_EN+0xac>)
 800706c:	f000 fc6e 	bl	800794c <puts>
        return;
 8007070:	e033      	b.n	80070da <Paint_DrawString_EN+0xa2>
    }

    while (* pString != '\0') {
        //if X direction filled , reposition to(Xstart,Ypoint),Ypoint is Y direction plus the Height of the character
        if ((Xpoint + Font->Width ) > Paint.Width ) {
 8007072:	8afb      	ldrh	r3, [r7, #22]
 8007074:	687a      	ldr	r2, [r7, #4]
 8007076:	8892      	ldrh	r2, [r2, #4]
 8007078:	4413      	add	r3, r2
 800707a:	4a19      	ldr	r2, [pc, #100]	@ (80070e0 <Paint_DrawString_EN+0xa8>)
 800707c:	8892      	ldrh	r2, [r2, #4]
 800707e:	b292      	uxth	r2, r2
 8007080:	4293      	cmp	r3, r2
 8007082:	dd06      	ble.n	8007092 <Paint_DrawString_EN+0x5a>
            Xpoint = Xstart;
 8007084:	89fb      	ldrh	r3, [r7, #14]
 8007086:	82fb      	strh	r3, [r7, #22]
            Ypoint += Font->Height;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	88da      	ldrh	r2, [r3, #6]
 800708c:	8abb      	ldrh	r3, [r7, #20]
 800708e:	4413      	add	r3, r2
 8007090:	82bb      	strh	r3, [r7, #20]
        }

        // If the Y direction is full, reposition to(Xstart, Ystart)
        if ((Ypoint  + Font->Height ) > Paint.Height ) {
 8007092:	8abb      	ldrh	r3, [r7, #20]
 8007094:	687a      	ldr	r2, [r7, #4]
 8007096:	88d2      	ldrh	r2, [r2, #6]
 8007098:	4413      	add	r3, r2
 800709a:	4a11      	ldr	r2, [pc, #68]	@ (80070e0 <Paint_DrawString_EN+0xa8>)
 800709c:	88d2      	ldrh	r2, [r2, #6]
 800709e:	b292      	uxth	r2, r2
 80070a0:	4293      	cmp	r3, r2
 80070a2:	dd03      	ble.n	80070ac <Paint_DrawString_EN+0x74>
            Xpoint = Xstart;
 80070a4:	89fb      	ldrh	r3, [r7, #14]
 80070a6:	82fb      	strh	r3, [r7, #22]
            Ypoint = Ystart;
 80070a8:	89bb      	ldrh	r3, [r7, #12]
 80070aa:	82bb      	strh	r3, [r7, #20]
        }
        Paint_DrawChar(Xpoint, Ypoint, * pString, Font, Color_Background, Color_Foreground);
 80070ac:	68bb      	ldr	r3, [r7, #8]
 80070ae:	781a      	ldrb	r2, [r3, #0]
 80070b0:	8ab9      	ldrh	r1, [r7, #20]
 80070b2:	8af8      	ldrh	r0, [r7, #22]
 80070b4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80070b6:	9301      	str	r3, [sp, #4]
 80070b8:	8c3b      	ldrh	r3, [r7, #32]
 80070ba:	9300      	str	r3, [sp, #0]
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	f7ff ff0f 	bl	8006ee0 <Paint_DrawChar>

        //The next character of the address
        pString ++;
 80070c2:	68bb      	ldr	r3, [r7, #8]
 80070c4:	3301      	adds	r3, #1
 80070c6:	60bb      	str	r3, [r7, #8]

        //The next word of the abscissa increases the font of the broadband
        Xpoint += Font->Width;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	889a      	ldrh	r2, [r3, #4]
 80070cc:	8afb      	ldrh	r3, [r7, #22]
 80070ce:	4413      	add	r3, r2
 80070d0:	82fb      	strh	r3, [r7, #22]
    while (* pString != '\0') {
 80070d2:	68bb      	ldr	r3, [r7, #8]
 80070d4:	781b      	ldrb	r3, [r3, #0]
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d1cb      	bne.n	8007072 <Paint_DrawString_EN+0x3a>
    }
}
 80070da:	3718      	adds	r7, #24
 80070dc:	46bd      	mov	sp, r7
 80070de:	bd80      	pop	{r7, pc}
 80070e0:	20000344 	.word	0x20000344
 80070e4:	08008830 	.word	0x08008830

080070e8 <LCD_2IN_Reset>:
/*******************************************************************************
function:
	Hardware reset
*******************************************************************************/
static void LCD_2IN_Reset(void)
{
 80070e8:	b580      	push	{r7, lr}
 80070ea:	af00      	add	r7, sp, #0
	LCD_2IN_RST_1;
 80070ec:	2201      	movs	r2, #1
 80070ee:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80070f2:	480d      	ldr	r0, [pc, #52]	@ (8007128 <LCD_2IN_Reset+0x40>)
 80070f4:	f7fc f91c 	bl	8003330 <HAL_GPIO_WritePin>
	DEV_Delay_ms(100);
 80070f8:	2064      	movs	r0, #100	@ 0x64
 80070fa:	f7fb fe37 	bl	8002d6c <HAL_Delay>
	LCD_2IN_RST_0;
 80070fe:	2200      	movs	r2, #0
 8007100:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8007104:	4808      	ldr	r0, [pc, #32]	@ (8007128 <LCD_2IN_Reset+0x40>)
 8007106:	f7fc f913 	bl	8003330 <HAL_GPIO_WritePin>
	DEV_Delay_ms(100);
 800710a:	2064      	movs	r0, #100	@ 0x64
 800710c:	f7fb fe2e 	bl	8002d6c <HAL_Delay>
	LCD_2IN_RST_1;
 8007110:	2201      	movs	r2, #1
 8007112:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8007116:	4804      	ldr	r0, [pc, #16]	@ (8007128 <LCD_2IN_Reset+0x40>)
 8007118:	f7fc f90a 	bl	8003330 <HAL_GPIO_WritePin>
	DEV_Delay_ms(100);
 800711c:	2064      	movs	r0, #100	@ 0x64
 800711e:	f7fb fe25 	bl	8002d6c <HAL_Delay>
}
 8007122:	bf00      	nop
 8007124:	bd80      	pop	{r7, pc}
 8007126:	bf00      	nop
 8007128:	40020400 	.word	0x40020400

0800712c <LCD_2IN_Write_Command>:
/*******************************************************************************
function:
		Write data and commands
*******************************************************************************/
static void LCD_2IN_Write_Command(UBYTE data)	 
{	
 800712c:	b580      	push	{r7, lr}
 800712e:	b082      	sub	sp, #8
 8007130:	af00      	add	r7, sp, #0
 8007132:	4603      	mov	r3, r0
 8007134:	71fb      	strb	r3, [r7, #7]
	LCD_2IN_CS_0;
 8007136:	2200      	movs	r2, #0
 8007138:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800713c:	4808      	ldr	r0, [pc, #32]	@ (8007160 <LCD_2IN_Write_Command+0x34>)
 800713e:	f7fc f8f7 	bl	8003330 <HAL_GPIO_WritePin>
	LCD_2IN_DC_0;
 8007142:	2200      	movs	r2, #0
 8007144:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8007148:	4805      	ldr	r0, [pc, #20]	@ (8007160 <LCD_2IN_Write_Command+0x34>)
 800714a:	f7fc f8f1 	bl	8003330 <HAL_GPIO_WritePin>
	DEV_SPI_WRITE(data);
 800714e:	79fb      	ldrb	r3, [r7, #7]
 8007150:	4618      	mov	r0, r3
 8007152:	f7ff fd3d 	bl	8006bd0 <DEV_SPI_WRite>
}
 8007156:	bf00      	nop
 8007158:	3708      	adds	r7, #8
 800715a:	46bd      	mov	sp, r7
 800715c:	bd80      	pop	{r7, pc}
 800715e:	bf00      	nop
 8007160:	40020400 	.word	0x40020400

08007164 <LCD_2IN_WriteData_Byte>:

static void LCD_2IN_WriteData_Byte(UBYTE data) 
{	
 8007164:	b580      	push	{r7, lr}
 8007166:	b082      	sub	sp, #8
 8007168:	af00      	add	r7, sp, #0
 800716a:	4603      	mov	r3, r0
 800716c:	71fb      	strb	r3, [r7, #7]
	LCD_2IN_CS_0;
 800716e:	2200      	movs	r2, #0
 8007170:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8007174:	480b      	ldr	r0, [pc, #44]	@ (80071a4 <LCD_2IN_WriteData_Byte+0x40>)
 8007176:	f7fc f8db 	bl	8003330 <HAL_GPIO_WritePin>
	LCD_2IN_DC_1;
 800717a:	2201      	movs	r2, #1
 800717c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8007180:	4808      	ldr	r0, [pc, #32]	@ (80071a4 <LCD_2IN_WriteData_Byte+0x40>)
 8007182:	f7fc f8d5 	bl	8003330 <HAL_GPIO_WritePin>
	DEV_SPI_WRITE(data);  
 8007186:	79fb      	ldrb	r3, [r7, #7]
 8007188:	4618      	mov	r0, r3
 800718a:	f7ff fd21 	bl	8006bd0 <DEV_SPI_WRite>
	LCD_2IN_CS_1;
 800718e:	2201      	movs	r2, #1
 8007190:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8007194:	4803      	ldr	r0, [pc, #12]	@ (80071a4 <LCD_2IN_WriteData_Byte+0x40>)
 8007196:	f7fc f8cb 	bl	8003330 <HAL_GPIO_WritePin>
}  
 800719a:	bf00      	nop
 800719c:	3708      	adds	r7, #8
 800719e:	46bd      	mov	sp, r7
 80071a0:	bd80      	pop	{r7, pc}
 80071a2:	bf00      	nop
 80071a4:	40020400 	.word	0x40020400

080071a8 <LCD_2IN_WriteData_Word>:

void LCD_2IN_WriteData_Word(UWORD data)
{
 80071a8:	b580      	push	{r7, lr}
 80071aa:	b082      	sub	sp, #8
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	4603      	mov	r3, r0
 80071b0:	80fb      	strh	r3, [r7, #6]
	LCD_2IN_CS_0;
 80071b2:	2200      	movs	r2, #0
 80071b4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80071b8:	480f      	ldr	r0, [pc, #60]	@ (80071f8 <LCD_2IN_WriteData_Word+0x50>)
 80071ba:	f7fc f8b9 	bl	8003330 <HAL_GPIO_WritePin>
	LCD_2IN_DC_1;
 80071be:	2201      	movs	r2, #1
 80071c0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80071c4:	480c      	ldr	r0, [pc, #48]	@ (80071f8 <LCD_2IN_WriteData_Word+0x50>)
 80071c6:	f7fc f8b3 	bl	8003330 <HAL_GPIO_WritePin>
	DEV_SPI_WRITE((data>>8) & 0xff);
 80071ca:	88fb      	ldrh	r3, [r7, #6]
 80071cc:	0a1b      	lsrs	r3, r3, #8
 80071ce:	b29b      	uxth	r3, r3
 80071d0:	b2db      	uxtb	r3, r3
 80071d2:	4618      	mov	r0, r3
 80071d4:	f7ff fcfc 	bl	8006bd0 <DEV_SPI_WRite>
	DEV_SPI_WRITE(data);
 80071d8:	88fb      	ldrh	r3, [r7, #6]
 80071da:	b2db      	uxtb	r3, r3
 80071dc:	4618      	mov	r0, r3
 80071de:	f7ff fcf7 	bl	8006bd0 <DEV_SPI_WRite>
	LCD_2IN_CS_1;
 80071e2:	2201      	movs	r2, #1
 80071e4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80071e8:	4803      	ldr	r0, [pc, #12]	@ (80071f8 <LCD_2IN_WriteData_Word+0x50>)
 80071ea:	f7fc f8a1 	bl	8003330 <HAL_GPIO_WritePin>
}	  
 80071ee:	bf00      	nop
 80071f0:	3708      	adds	r7, #8
 80071f2:	46bd      	mov	sp, r7
 80071f4:	bd80      	pop	{r7, pc}
 80071f6:	bf00      	nop
 80071f8:	40020400 	.word	0x40020400

080071fc <LCD_2IN_Init>:
/******************************************************************************
function:	
		Common register initialization
******************************************************************************/
void LCD_2IN_Init(void)
{
 80071fc:	b580      	push	{r7, lr}
 80071fe:	af00      	add	r7, sp, #0
	LCD_2IN_Reset();
 8007200:	f7ff ff72 	bl	80070e8 <LCD_2IN_Reset>

	LCD_2IN_Write_Command(0x36);
 8007204:	2036      	movs	r0, #54	@ 0x36
 8007206:	f7ff ff91 	bl	800712c <LCD_2IN_Write_Command>
	LCD_2IN_WriteData_Byte(0x00); 
 800720a:	2000      	movs	r0, #0
 800720c:	f7ff ffaa 	bl	8007164 <LCD_2IN_WriteData_Byte>

	LCD_2IN_Write_Command(0x3A); 
 8007210:	203a      	movs	r0, #58	@ 0x3a
 8007212:	f7ff ff8b 	bl	800712c <LCD_2IN_Write_Command>
	LCD_2IN_WriteData_Byte(0x05);
 8007216:	2005      	movs	r0, #5
 8007218:	f7ff ffa4 	bl	8007164 <LCD_2IN_WriteData_Byte>

	LCD_2IN_Write_Command(0x21); 
 800721c:	2021      	movs	r0, #33	@ 0x21
 800721e:	f7ff ff85 	bl	800712c <LCD_2IN_Write_Command>

	LCD_2IN_Write_Command(0x2A);
 8007222:	202a      	movs	r0, #42	@ 0x2a
 8007224:	f7ff ff82 	bl	800712c <LCD_2IN_Write_Command>
	LCD_2IN_WriteData_Byte(0x00);
 8007228:	2000      	movs	r0, #0
 800722a:	f7ff ff9b 	bl	8007164 <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x00);
 800722e:	2000      	movs	r0, #0
 8007230:	f7ff ff98 	bl	8007164 <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x01);
 8007234:	2001      	movs	r0, #1
 8007236:	f7ff ff95 	bl	8007164 <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x3F);
 800723a:	203f      	movs	r0, #63	@ 0x3f
 800723c:	f7ff ff92 	bl	8007164 <LCD_2IN_WriteData_Byte>

	LCD_2IN_Write_Command(0x2B);
 8007240:	202b      	movs	r0, #43	@ 0x2b
 8007242:	f7ff ff73 	bl	800712c <LCD_2IN_Write_Command>
	LCD_2IN_WriteData_Byte(0x00);
 8007246:	2000      	movs	r0, #0
 8007248:	f7ff ff8c 	bl	8007164 <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x00);
 800724c:	2000      	movs	r0, #0
 800724e:	f7ff ff89 	bl	8007164 <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x00);
 8007252:	2000      	movs	r0, #0
 8007254:	f7ff ff86 	bl	8007164 <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0xEF);
 8007258:	20ef      	movs	r0, #239	@ 0xef
 800725a:	f7ff ff83 	bl	8007164 <LCD_2IN_WriteData_Byte>

	LCD_2IN_Write_Command(0xB2);
 800725e:	20b2      	movs	r0, #178	@ 0xb2
 8007260:	f7ff ff64 	bl	800712c <LCD_2IN_Write_Command>
	LCD_2IN_WriteData_Byte(0x0C);
 8007264:	200c      	movs	r0, #12
 8007266:	f7ff ff7d 	bl	8007164 <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x0C);
 800726a:	200c      	movs	r0, #12
 800726c:	f7ff ff7a 	bl	8007164 <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x00);
 8007270:	2000      	movs	r0, #0
 8007272:	f7ff ff77 	bl	8007164 <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x33);
 8007276:	2033      	movs	r0, #51	@ 0x33
 8007278:	f7ff ff74 	bl	8007164 <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x33);
 800727c:	2033      	movs	r0, #51	@ 0x33
 800727e:	f7ff ff71 	bl	8007164 <LCD_2IN_WriteData_Byte>

	LCD_2IN_Write_Command(0xB7);
 8007282:	20b7      	movs	r0, #183	@ 0xb7
 8007284:	f7ff ff52 	bl	800712c <LCD_2IN_Write_Command>
	LCD_2IN_WriteData_Byte(0x35); 
 8007288:	2035      	movs	r0, #53	@ 0x35
 800728a:	f7ff ff6b 	bl	8007164 <LCD_2IN_WriteData_Byte>

	LCD_2IN_Write_Command(0xBB);
 800728e:	20bb      	movs	r0, #187	@ 0xbb
 8007290:	f7ff ff4c 	bl	800712c <LCD_2IN_Write_Command>
	LCD_2IN_WriteData_Byte(0x1F);
 8007294:	201f      	movs	r0, #31
 8007296:	f7ff ff65 	bl	8007164 <LCD_2IN_WriteData_Byte>

	LCD_2IN_Write_Command(0xC0);
 800729a:	20c0      	movs	r0, #192	@ 0xc0
 800729c:	f7ff ff46 	bl	800712c <LCD_2IN_Write_Command>
	LCD_2IN_WriteData_Byte(0x2C);
 80072a0:	202c      	movs	r0, #44	@ 0x2c
 80072a2:	f7ff ff5f 	bl	8007164 <LCD_2IN_WriteData_Byte>

	LCD_2IN_Write_Command(0xC2);
 80072a6:	20c2      	movs	r0, #194	@ 0xc2
 80072a8:	f7ff ff40 	bl	800712c <LCD_2IN_Write_Command>
	LCD_2IN_WriteData_Byte(0x01);
 80072ac:	2001      	movs	r0, #1
 80072ae:	f7ff ff59 	bl	8007164 <LCD_2IN_WriteData_Byte>

	LCD_2IN_Write_Command(0xC3);
 80072b2:	20c3      	movs	r0, #195	@ 0xc3
 80072b4:	f7ff ff3a 	bl	800712c <LCD_2IN_Write_Command>
	LCD_2IN_WriteData_Byte(0x12);   
 80072b8:	2012      	movs	r0, #18
 80072ba:	f7ff ff53 	bl	8007164 <LCD_2IN_WriteData_Byte>

	LCD_2IN_Write_Command(0xC4);
 80072be:	20c4      	movs	r0, #196	@ 0xc4
 80072c0:	f7ff ff34 	bl	800712c <LCD_2IN_Write_Command>
	LCD_2IN_WriteData_Byte(0x20);
 80072c4:	2020      	movs	r0, #32
 80072c6:	f7ff ff4d 	bl	8007164 <LCD_2IN_WriteData_Byte>

	LCD_2IN_Write_Command(0xC6);
 80072ca:	20c6      	movs	r0, #198	@ 0xc6
 80072cc:	f7ff ff2e 	bl	800712c <LCD_2IN_Write_Command>
	LCD_2IN_WriteData_Byte(0x0F); 
 80072d0:	200f      	movs	r0, #15
 80072d2:	f7ff ff47 	bl	8007164 <LCD_2IN_WriteData_Byte>

	LCD_2IN_Write_Command(0xD0);
 80072d6:	20d0      	movs	r0, #208	@ 0xd0
 80072d8:	f7ff ff28 	bl	800712c <LCD_2IN_Write_Command>
	LCD_2IN_WriteData_Byte(0xA4);
 80072dc:	20a4      	movs	r0, #164	@ 0xa4
 80072de:	f7ff ff41 	bl	8007164 <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0xA1);
 80072e2:	20a1      	movs	r0, #161	@ 0xa1
 80072e4:	f7ff ff3e 	bl	8007164 <LCD_2IN_WriteData_Byte>

	LCD_2IN_Write_Command(0xE0);
 80072e8:	20e0      	movs	r0, #224	@ 0xe0
 80072ea:	f7ff ff1f 	bl	800712c <LCD_2IN_Write_Command>
	LCD_2IN_WriteData_Byte(0xD0);
 80072ee:	20d0      	movs	r0, #208	@ 0xd0
 80072f0:	f7ff ff38 	bl	8007164 <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x08);
 80072f4:	2008      	movs	r0, #8
 80072f6:	f7ff ff35 	bl	8007164 <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x11);
 80072fa:	2011      	movs	r0, #17
 80072fc:	f7ff ff32 	bl	8007164 <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x08);
 8007300:	2008      	movs	r0, #8
 8007302:	f7ff ff2f 	bl	8007164 <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x0C);
 8007306:	200c      	movs	r0, #12
 8007308:	f7ff ff2c 	bl	8007164 <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x15);
 800730c:	2015      	movs	r0, #21
 800730e:	f7ff ff29 	bl	8007164 <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x39);
 8007312:	2039      	movs	r0, #57	@ 0x39
 8007314:	f7ff ff26 	bl	8007164 <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x33);
 8007318:	2033      	movs	r0, #51	@ 0x33
 800731a:	f7ff ff23 	bl	8007164 <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x50);
 800731e:	2050      	movs	r0, #80	@ 0x50
 8007320:	f7ff ff20 	bl	8007164 <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x36);
 8007324:	2036      	movs	r0, #54	@ 0x36
 8007326:	f7ff ff1d 	bl	8007164 <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x13);
 800732a:	2013      	movs	r0, #19
 800732c:	f7ff ff1a 	bl	8007164 <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x14);
 8007330:	2014      	movs	r0, #20
 8007332:	f7ff ff17 	bl	8007164 <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x29);
 8007336:	2029      	movs	r0, #41	@ 0x29
 8007338:	f7ff ff14 	bl	8007164 <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x2D);
 800733c:	202d      	movs	r0, #45	@ 0x2d
 800733e:	f7ff ff11 	bl	8007164 <LCD_2IN_WriteData_Byte>

	LCD_2IN_Write_Command(0xE1);
 8007342:	20e1      	movs	r0, #225	@ 0xe1
 8007344:	f7ff fef2 	bl	800712c <LCD_2IN_Write_Command>
	LCD_2IN_WriteData_Byte(0xD0);
 8007348:	20d0      	movs	r0, #208	@ 0xd0
 800734a:	f7ff ff0b 	bl	8007164 <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x08);
 800734e:	2008      	movs	r0, #8
 8007350:	f7ff ff08 	bl	8007164 <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x10);
 8007354:	2010      	movs	r0, #16
 8007356:	f7ff ff05 	bl	8007164 <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x08);
 800735a:	2008      	movs	r0, #8
 800735c:	f7ff ff02 	bl	8007164 <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x06);
 8007360:	2006      	movs	r0, #6
 8007362:	f7ff feff 	bl	8007164 <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x06);
 8007366:	2006      	movs	r0, #6
 8007368:	f7ff fefc 	bl	8007164 <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x39);
 800736c:	2039      	movs	r0, #57	@ 0x39
 800736e:	f7ff fef9 	bl	8007164 <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x44);
 8007372:	2044      	movs	r0, #68	@ 0x44
 8007374:	f7ff fef6 	bl	8007164 <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x51);
 8007378:	2051      	movs	r0, #81	@ 0x51
 800737a:	f7ff fef3 	bl	8007164 <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x0B);
 800737e:	200b      	movs	r0, #11
 8007380:	f7ff fef0 	bl	8007164 <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x16);
 8007384:	2016      	movs	r0, #22
 8007386:	f7ff feed 	bl	8007164 <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x14);
 800738a:	2014      	movs	r0, #20
 800738c:	f7ff feea 	bl	8007164 <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x2F);
 8007390:	202f      	movs	r0, #47	@ 0x2f
 8007392:	f7ff fee7 	bl	8007164 <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x31);
 8007396:	2031      	movs	r0, #49	@ 0x31
 8007398:	f7ff fee4 	bl	8007164 <LCD_2IN_WriteData_Byte>
	LCD_2IN_Write_Command(0x21);
 800739c:	2021      	movs	r0, #33	@ 0x21
 800739e:	f7ff fec5 	bl	800712c <LCD_2IN_Write_Command>

	LCD_2IN_Write_Command(0x11);
 80073a2:	2011      	movs	r0, #17
 80073a4:	f7ff fec2 	bl	800712c <LCD_2IN_Write_Command>

	LCD_2IN_Write_Command(0x29);
 80073a8:	2029      	movs	r0, #41	@ 0x29
 80073aa:	f7ff febf 	bl	800712c <LCD_2IN_Write_Command>
}
 80073ae:	bf00      	nop
 80073b0:	bd80      	pop	{r7, pc}

080073b2 <LCD_2IN_SetWindow>:
	  Ystart:	Start UWORD y coordinate
	  Xend  :	End UWORD coordinates
	  Yend  :	End UWORD coordinatesen
******************************************************************************/
void LCD_2IN_SetWindow(UWORD Xstart, UWORD Ystart, UWORD Xend, UWORD  Yend)
{ 
 80073b2:	b590      	push	{r4, r7, lr}
 80073b4:	b083      	sub	sp, #12
 80073b6:	af00      	add	r7, sp, #0
 80073b8:	4604      	mov	r4, r0
 80073ba:	4608      	mov	r0, r1
 80073bc:	4611      	mov	r1, r2
 80073be:	461a      	mov	r2, r3
 80073c0:	4623      	mov	r3, r4
 80073c2:	80fb      	strh	r3, [r7, #6]
 80073c4:	4603      	mov	r3, r0
 80073c6:	80bb      	strh	r3, [r7, #4]
 80073c8:	460b      	mov	r3, r1
 80073ca:	807b      	strh	r3, [r7, #2]
 80073cc:	4613      	mov	r3, r2
 80073ce:	803b      	strh	r3, [r7, #0]
	LCD_2IN_Write_Command(0x2a);
 80073d0:	202a      	movs	r0, #42	@ 0x2a
 80073d2:	f7ff feab 	bl	800712c <LCD_2IN_Write_Command>
	LCD_2IN_WriteData_Byte(Xstart >>8);
 80073d6:	88fb      	ldrh	r3, [r7, #6]
 80073d8:	0a1b      	lsrs	r3, r3, #8
 80073da:	b29b      	uxth	r3, r3
 80073dc:	b2db      	uxtb	r3, r3
 80073de:	4618      	mov	r0, r3
 80073e0:	f7ff fec0 	bl	8007164 <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(Xstart & 0xff);
 80073e4:	88fb      	ldrh	r3, [r7, #6]
 80073e6:	b2db      	uxtb	r3, r3
 80073e8:	4618      	mov	r0, r3
 80073ea:	f7ff febb 	bl	8007164 <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte((Xend - 1) >> 8);
 80073ee:	887b      	ldrh	r3, [r7, #2]
 80073f0:	3b01      	subs	r3, #1
 80073f2:	121b      	asrs	r3, r3, #8
 80073f4:	b2db      	uxtb	r3, r3
 80073f6:	4618      	mov	r0, r3
 80073f8:	f7ff feb4 	bl	8007164 <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte((Xend - 1) & 0xff);
 80073fc:	887b      	ldrh	r3, [r7, #2]
 80073fe:	b2db      	uxtb	r3, r3
 8007400:	3b01      	subs	r3, #1
 8007402:	b2db      	uxtb	r3, r3
 8007404:	4618      	mov	r0, r3
 8007406:	f7ff fead 	bl	8007164 <LCD_2IN_WriteData_Byte>

	LCD_2IN_Write_Command(0x2b);
 800740a:	202b      	movs	r0, #43	@ 0x2b
 800740c:	f7ff fe8e 	bl	800712c <LCD_2IN_Write_Command>
	LCD_2IN_WriteData_Byte(Ystart >>8);
 8007410:	88bb      	ldrh	r3, [r7, #4]
 8007412:	0a1b      	lsrs	r3, r3, #8
 8007414:	b29b      	uxth	r3, r3
 8007416:	b2db      	uxtb	r3, r3
 8007418:	4618      	mov	r0, r3
 800741a:	f7ff fea3 	bl	8007164 <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(Ystart & 0xff);
 800741e:	88bb      	ldrh	r3, [r7, #4]
 8007420:	b2db      	uxtb	r3, r3
 8007422:	4618      	mov	r0, r3
 8007424:	f7ff fe9e 	bl	8007164 <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte((Yend - 1) >> 8);
 8007428:	883b      	ldrh	r3, [r7, #0]
 800742a:	3b01      	subs	r3, #1
 800742c:	121b      	asrs	r3, r3, #8
 800742e:	b2db      	uxtb	r3, r3
 8007430:	4618      	mov	r0, r3
 8007432:	f7ff fe97 	bl	8007164 <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte((Yend - 1) & 0xff);
 8007436:	883b      	ldrh	r3, [r7, #0]
 8007438:	b2db      	uxtb	r3, r3
 800743a:	3b01      	subs	r3, #1
 800743c:	b2db      	uxtb	r3, r3
 800743e:	4618      	mov	r0, r3
 8007440:	f7ff fe90 	bl	8007164 <LCD_2IN_WriteData_Byte>

	LCD_2IN_Write_Command(0x2C);
 8007444:	202c      	movs	r0, #44	@ 0x2c
 8007446:	f7ff fe71 	bl	800712c <LCD_2IN_Write_Command>
}
 800744a:	bf00      	nop
 800744c:	370c      	adds	r7, #12
 800744e:	46bd      	mov	sp, r7
 8007450:	bd90      	pop	{r4, r7, pc}

08007452 <LCD_2IN_SetCursor>:
	  Xstart: 	Start UWORD x coordinate
	  Ystart:	Start UWORD y coordinate

******************************************************************************/
void LCD_2IN_SetCursor(UWORD X, UWORD Y)
{ 
 8007452:	b580      	push	{r7, lr}
 8007454:	b082      	sub	sp, #8
 8007456:	af00      	add	r7, sp, #0
 8007458:	4603      	mov	r3, r0
 800745a:	460a      	mov	r2, r1
 800745c:	80fb      	strh	r3, [r7, #6]
 800745e:	4613      	mov	r3, r2
 8007460:	80bb      	strh	r3, [r7, #4]
	LCD_2IN_Write_Command(0x2a);
 8007462:	202a      	movs	r0, #42	@ 0x2a
 8007464:	f7ff fe62 	bl	800712c <LCD_2IN_Write_Command>
	LCD_2IN_WriteData_Byte(X >> 8);
 8007468:	88fb      	ldrh	r3, [r7, #6]
 800746a:	0a1b      	lsrs	r3, r3, #8
 800746c:	b29b      	uxth	r3, r3
 800746e:	b2db      	uxtb	r3, r3
 8007470:	4618      	mov	r0, r3
 8007472:	f7ff fe77 	bl	8007164 <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(X);
 8007476:	88fb      	ldrh	r3, [r7, #6]
 8007478:	b2db      	uxtb	r3, r3
 800747a:	4618      	mov	r0, r3
 800747c:	f7ff fe72 	bl	8007164 <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(X >> 8);
 8007480:	88fb      	ldrh	r3, [r7, #6]
 8007482:	0a1b      	lsrs	r3, r3, #8
 8007484:	b29b      	uxth	r3, r3
 8007486:	b2db      	uxtb	r3, r3
 8007488:	4618      	mov	r0, r3
 800748a:	f7ff fe6b 	bl	8007164 <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(X);
 800748e:	88fb      	ldrh	r3, [r7, #6]
 8007490:	b2db      	uxtb	r3, r3
 8007492:	4618      	mov	r0, r3
 8007494:	f7ff fe66 	bl	8007164 <LCD_2IN_WriteData_Byte>

	LCD_2IN_Write_Command(0x2b);
 8007498:	202b      	movs	r0, #43	@ 0x2b
 800749a:	f7ff fe47 	bl	800712c <LCD_2IN_Write_Command>
	LCD_2IN_WriteData_Byte(Y >> 8);
 800749e:	88bb      	ldrh	r3, [r7, #4]
 80074a0:	0a1b      	lsrs	r3, r3, #8
 80074a2:	b29b      	uxth	r3, r3
 80074a4:	b2db      	uxtb	r3, r3
 80074a6:	4618      	mov	r0, r3
 80074a8:	f7ff fe5c 	bl	8007164 <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(Y);
 80074ac:	88bb      	ldrh	r3, [r7, #4]
 80074ae:	b2db      	uxtb	r3, r3
 80074b0:	4618      	mov	r0, r3
 80074b2:	f7ff fe57 	bl	8007164 <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(Y >> 8);
 80074b6:	88bb      	ldrh	r3, [r7, #4]
 80074b8:	0a1b      	lsrs	r3, r3, #8
 80074ba:	b29b      	uxth	r3, r3
 80074bc:	b2db      	uxtb	r3, r3
 80074be:	4618      	mov	r0, r3
 80074c0:	f7ff fe50 	bl	8007164 <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(Y);
 80074c4:	88bb      	ldrh	r3, [r7, #4]
 80074c6:	b2db      	uxtb	r3, r3
 80074c8:	4618      	mov	r0, r3
 80074ca:	f7ff fe4b 	bl	8007164 <LCD_2IN_WriteData_Byte>

	LCD_2IN_Write_Command(0x2C);
 80074ce:	202c      	movs	r0, #44	@ 0x2c
 80074d0:	f7ff fe2c 	bl	800712c <LCD_2IN_Write_Command>
}
 80074d4:	bf00      	nop
 80074d6:	3708      	adds	r7, #8
 80074d8:	46bd      	mov	sp, r7
 80074da:	bd80      	pop	{r7, pc}

080074dc <LCD_2IN_Clear>:
function:	Clear screen function, refresh the screen to a certain color
parameter	:
	  Color :		The color you want to clear all the screen
******************************************************************************/
void LCD_2IN_Clear(UWORD Color)
{
 80074dc:	b580      	push	{r7, lr}
 80074de:	b084      	sub	sp, #16
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	4603      	mov	r3, r0
 80074e4:	80fb      	strh	r3, [r7, #6]
    UWORD i,j;
    LCD_2IN_SetWindow(0, 0, LCD_2IN_WIDTH, LCD_2IN_HEIGHT);
 80074e6:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 80074ea:	22f0      	movs	r2, #240	@ 0xf0
 80074ec:	2100      	movs	r1, #0
 80074ee:	2000      	movs	r0, #0
 80074f0:	f7ff ff5f 	bl	80073b2 <LCD_2IN_SetWindow>

	DEV_Digital_Write(DEV_DC_PIN, 1);
 80074f4:	2201      	movs	r2, #1
 80074f6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80074fa:	480f      	ldr	r0, [pc, #60]	@ (8007538 <LCD_2IN_Clear+0x5c>)
 80074fc:	f7fb ff18 	bl	8003330 <HAL_GPIO_WritePin>
	for(i = 0; i < LCD_2IN_WIDTH; i++){
 8007500:	2300      	movs	r3, #0
 8007502:	81fb      	strh	r3, [r7, #14]
 8007504:	e010      	b.n	8007528 <LCD_2IN_Clear+0x4c>
		for(j = 0; j < LCD_2IN_HEIGHT; j++){
 8007506:	2300      	movs	r3, #0
 8007508:	81bb      	strh	r3, [r7, #12]
 800750a:	e006      	b.n	800751a <LCD_2IN_Clear+0x3e>
			LCD_2IN_WriteData_Word(Color);
 800750c:	88fb      	ldrh	r3, [r7, #6]
 800750e:	4618      	mov	r0, r3
 8007510:	f7ff fe4a 	bl	80071a8 <LCD_2IN_WriteData_Word>
		for(j = 0; j < LCD_2IN_HEIGHT; j++){
 8007514:	89bb      	ldrh	r3, [r7, #12]
 8007516:	3301      	adds	r3, #1
 8007518:	81bb      	strh	r3, [r7, #12]
 800751a:	89bb      	ldrh	r3, [r7, #12]
 800751c:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8007520:	d3f4      	bcc.n	800750c <LCD_2IN_Clear+0x30>
	for(i = 0; i < LCD_2IN_WIDTH; i++){
 8007522:	89fb      	ldrh	r3, [r7, #14]
 8007524:	3301      	adds	r3, #1
 8007526:	81fb      	strh	r3, [r7, #14]
 8007528:	89fb      	ldrh	r3, [r7, #14]
 800752a:	2bef      	cmp	r3, #239	@ 0xef
 800752c:	d9eb      	bls.n	8007506 <LCD_2IN_Clear+0x2a>
		}
	 }
}
 800752e:	bf00      	nop
 8007530:	bf00      	nop
 8007532:	3710      	adds	r7, #16
 8007534:	46bd      	mov	sp, r7
 8007536:	bd80      	pop	{r7, pc}
 8007538:	40020400 	.word	0x40020400

0800753c <LCD_2IN_DrawPaint>:
	    X	: 	Set the X coordinate
	    Y	:	Set the Y coordinate
	  Color :	Set the color
******************************************************************************/
void LCD_2IN_DrawPaint(UWORD x, UWORD y, UWORD Color)
{
 800753c:	b580      	push	{r7, lr}
 800753e:	b082      	sub	sp, #8
 8007540:	af00      	add	r7, sp, #0
 8007542:	4603      	mov	r3, r0
 8007544:	80fb      	strh	r3, [r7, #6]
 8007546:	460b      	mov	r3, r1
 8007548:	80bb      	strh	r3, [r7, #4]
 800754a:	4613      	mov	r3, r2
 800754c:	807b      	strh	r3, [r7, #2]
	LCD_2IN_SetCursor(x, y);
 800754e:	88ba      	ldrh	r2, [r7, #4]
 8007550:	88fb      	ldrh	r3, [r7, #6]
 8007552:	4611      	mov	r1, r2
 8007554:	4618      	mov	r0, r3
 8007556:	f7ff ff7c 	bl	8007452 <LCD_2IN_SetCursor>
	LCD_2IN_WriteData_Word(Color); 	    
 800755a:	887b      	ldrh	r3, [r7, #2]
 800755c:	4618      	mov	r0, r3
 800755e:	f7ff fe23 	bl	80071a8 <LCD_2IN_WriteData_Word>
}
 8007562:	bf00      	nop
 8007564:	3708      	adds	r7, #8
 8007566:	46bd      	mov	sp, r7
 8007568:	bd80      	pop	{r7, pc}
	...

0800756c <LCD_2IN_SetBackLight>:
	Setting backlight
parameter	:
	  value : Range 0~1000   Duty cycle is value/1000	
*******************************************************************************/
void LCD_2IN_SetBackLight(UWORD Value)
{
 800756c:	b480      	push	{r7}
 800756e:	b083      	sub	sp, #12
 8007570:	af00      	add	r7, sp, #0
 8007572:	4603      	mov	r3, r0
 8007574:	80fb      	strh	r3, [r7, #6]
	DEV_Set_PWM(Value);
 8007576:	4a04      	ldr	r2, [pc, #16]	@ (8007588 <LCD_2IN_SetBackLight+0x1c>)
 8007578:	88fb      	ldrh	r3, [r7, #6]
 800757a:	6393      	str	r3, [r2, #56]	@ 0x38
}
 800757c:	bf00      	nop
 800757e:	370c      	adds	r7, #12
 8007580:	46bd      	mov	sp, r7
 8007582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007586:	4770      	bx	lr
 8007588:	40000800 	.word	0x40000800

0800758c <malloc>:
 800758c:	4b02      	ldr	r3, [pc, #8]	@ (8007598 <malloc+0xc>)
 800758e:	4601      	mov	r1, r0
 8007590:	6818      	ldr	r0, [r3, #0]
 8007592:	f000 b825 	b.w	80075e0 <_malloc_r>
 8007596:	bf00      	nop
 8007598:	20000040 	.word	0x20000040

0800759c <sbrk_aligned>:
 800759c:	b570      	push	{r4, r5, r6, lr}
 800759e:	4e0f      	ldr	r6, [pc, #60]	@ (80075dc <sbrk_aligned+0x40>)
 80075a0:	460c      	mov	r4, r1
 80075a2:	6831      	ldr	r1, [r6, #0]
 80075a4:	4605      	mov	r5, r0
 80075a6:	b911      	cbnz	r1, 80075ae <sbrk_aligned+0x12>
 80075a8:	f000 faec 	bl	8007b84 <_sbrk_r>
 80075ac:	6030      	str	r0, [r6, #0]
 80075ae:	4621      	mov	r1, r4
 80075b0:	4628      	mov	r0, r5
 80075b2:	f000 fae7 	bl	8007b84 <_sbrk_r>
 80075b6:	1c43      	adds	r3, r0, #1
 80075b8:	d103      	bne.n	80075c2 <sbrk_aligned+0x26>
 80075ba:	f04f 34ff 	mov.w	r4, #4294967295
 80075be:	4620      	mov	r0, r4
 80075c0:	bd70      	pop	{r4, r5, r6, pc}
 80075c2:	1cc4      	adds	r4, r0, #3
 80075c4:	f024 0403 	bic.w	r4, r4, #3
 80075c8:	42a0      	cmp	r0, r4
 80075ca:	d0f8      	beq.n	80075be <sbrk_aligned+0x22>
 80075cc:	1a21      	subs	r1, r4, r0
 80075ce:	4628      	mov	r0, r5
 80075d0:	f000 fad8 	bl	8007b84 <_sbrk_r>
 80075d4:	3001      	adds	r0, #1
 80075d6:	d1f2      	bne.n	80075be <sbrk_aligned+0x22>
 80075d8:	e7ef      	b.n	80075ba <sbrk_aligned+0x1e>
 80075da:	bf00      	nop
 80075dc:	20000364 	.word	0x20000364

080075e0 <_malloc_r>:
 80075e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80075e4:	1ccd      	adds	r5, r1, #3
 80075e6:	f025 0503 	bic.w	r5, r5, #3
 80075ea:	3508      	adds	r5, #8
 80075ec:	2d0c      	cmp	r5, #12
 80075ee:	bf38      	it	cc
 80075f0:	250c      	movcc	r5, #12
 80075f2:	2d00      	cmp	r5, #0
 80075f4:	4606      	mov	r6, r0
 80075f6:	db01      	blt.n	80075fc <_malloc_r+0x1c>
 80075f8:	42a9      	cmp	r1, r5
 80075fa:	d904      	bls.n	8007606 <_malloc_r+0x26>
 80075fc:	230c      	movs	r3, #12
 80075fe:	6033      	str	r3, [r6, #0]
 8007600:	2000      	movs	r0, #0
 8007602:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007606:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80076dc <_malloc_r+0xfc>
 800760a:	f000 f869 	bl	80076e0 <__malloc_lock>
 800760e:	f8d8 3000 	ldr.w	r3, [r8]
 8007612:	461c      	mov	r4, r3
 8007614:	bb44      	cbnz	r4, 8007668 <_malloc_r+0x88>
 8007616:	4629      	mov	r1, r5
 8007618:	4630      	mov	r0, r6
 800761a:	f7ff ffbf 	bl	800759c <sbrk_aligned>
 800761e:	1c43      	adds	r3, r0, #1
 8007620:	4604      	mov	r4, r0
 8007622:	d158      	bne.n	80076d6 <_malloc_r+0xf6>
 8007624:	f8d8 4000 	ldr.w	r4, [r8]
 8007628:	4627      	mov	r7, r4
 800762a:	2f00      	cmp	r7, #0
 800762c:	d143      	bne.n	80076b6 <_malloc_r+0xd6>
 800762e:	2c00      	cmp	r4, #0
 8007630:	d04b      	beq.n	80076ca <_malloc_r+0xea>
 8007632:	6823      	ldr	r3, [r4, #0]
 8007634:	4639      	mov	r1, r7
 8007636:	4630      	mov	r0, r6
 8007638:	eb04 0903 	add.w	r9, r4, r3
 800763c:	f000 faa2 	bl	8007b84 <_sbrk_r>
 8007640:	4581      	cmp	r9, r0
 8007642:	d142      	bne.n	80076ca <_malloc_r+0xea>
 8007644:	6821      	ldr	r1, [r4, #0]
 8007646:	1a6d      	subs	r5, r5, r1
 8007648:	4629      	mov	r1, r5
 800764a:	4630      	mov	r0, r6
 800764c:	f7ff ffa6 	bl	800759c <sbrk_aligned>
 8007650:	3001      	adds	r0, #1
 8007652:	d03a      	beq.n	80076ca <_malloc_r+0xea>
 8007654:	6823      	ldr	r3, [r4, #0]
 8007656:	442b      	add	r3, r5
 8007658:	6023      	str	r3, [r4, #0]
 800765a:	f8d8 3000 	ldr.w	r3, [r8]
 800765e:	685a      	ldr	r2, [r3, #4]
 8007660:	bb62      	cbnz	r2, 80076bc <_malloc_r+0xdc>
 8007662:	f8c8 7000 	str.w	r7, [r8]
 8007666:	e00f      	b.n	8007688 <_malloc_r+0xa8>
 8007668:	6822      	ldr	r2, [r4, #0]
 800766a:	1b52      	subs	r2, r2, r5
 800766c:	d420      	bmi.n	80076b0 <_malloc_r+0xd0>
 800766e:	2a0b      	cmp	r2, #11
 8007670:	d917      	bls.n	80076a2 <_malloc_r+0xc2>
 8007672:	1961      	adds	r1, r4, r5
 8007674:	42a3      	cmp	r3, r4
 8007676:	6025      	str	r5, [r4, #0]
 8007678:	bf18      	it	ne
 800767a:	6059      	strne	r1, [r3, #4]
 800767c:	6863      	ldr	r3, [r4, #4]
 800767e:	bf08      	it	eq
 8007680:	f8c8 1000 	streq.w	r1, [r8]
 8007684:	5162      	str	r2, [r4, r5]
 8007686:	604b      	str	r3, [r1, #4]
 8007688:	4630      	mov	r0, r6
 800768a:	f000 f82f 	bl	80076ec <__malloc_unlock>
 800768e:	f104 000b 	add.w	r0, r4, #11
 8007692:	1d23      	adds	r3, r4, #4
 8007694:	f020 0007 	bic.w	r0, r0, #7
 8007698:	1ac2      	subs	r2, r0, r3
 800769a:	bf1c      	itt	ne
 800769c:	1a1b      	subne	r3, r3, r0
 800769e:	50a3      	strne	r3, [r4, r2]
 80076a0:	e7af      	b.n	8007602 <_malloc_r+0x22>
 80076a2:	6862      	ldr	r2, [r4, #4]
 80076a4:	42a3      	cmp	r3, r4
 80076a6:	bf0c      	ite	eq
 80076a8:	f8c8 2000 	streq.w	r2, [r8]
 80076ac:	605a      	strne	r2, [r3, #4]
 80076ae:	e7eb      	b.n	8007688 <_malloc_r+0xa8>
 80076b0:	4623      	mov	r3, r4
 80076b2:	6864      	ldr	r4, [r4, #4]
 80076b4:	e7ae      	b.n	8007614 <_malloc_r+0x34>
 80076b6:	463c      	mov	r4, r7
 80076b8:	687f      	ldr	r7, [r7, #4]
 80076ba:	e7b6      	b.n	800762a <_malloc_r+0x4a>
 80076bc:	461a      	mov	r2, r3
 80076be:	685b      	ldr	r3, [r3, #4]
 80076c0:	42a3      	cmp	r3, r4
 80076c2:	d1fb      	bne.n	80076bc <_malloc_r+0xdc>
 80076c4:	2300      	movs	r3, #0
 80076c6:	6053      	str	r3, [r2, #4]
 80076c8:	e7de      	b.n	8007688 <_malloc_r+0xa8>
 80076ca:	230c      	movs	r3, #12
 80076cc:	6033      	str	r3, [r6, #0]
 80076ce:	4630      	mov	r0, r6
 80076d0:	f000 f80c 	bl	80076ec <__malloc_unlock>
 80076d4:	e794      	b.n	8007600 <_malloc_r+0x20>
 80076d6:	6005      	str	r5, [r0, #0]
 80076d8:	e7d6      	b.n	8007688 <_malloc_r+0xa8>
 80076da:	bf00      	nop
 80076dc:	20000368 	.word	0x20000368

080076e0 <__malloc_lock>:
 80076e0:	4801      	ldr	r0, [pc, #4]	@ (80076e8 <__malloc_lock+0x8>)
 80076e2:	f000 ba9c 	b.w	8007c1e <__retarget_lock_acquire_recursive>
 80076e6:	bf00      	nop
 80076e8:	200004ac 	.word	0x200004ac

080076ec <__malloc_unlock>:
 80076ec:	4801      	ldr	r0, [pc, #4]	@ (80076f4 <__malloc_unlock+0x8>)
 80076ee:	f000 ba97 	b.w	8007c20 <__retarget_lock_release_recursive>
 80076f2:	bf00      	nop
 80076f4:	200004ac 	.word	0x200004ac

080076f8 <std>:
 80076f8:	2300      	movs	r3, #0
 80076fa:	b510      	push	{r4, lr}
 80076fc:	4604      	mov	r4, r0
 80076fe:	e9c0 3300 	strd	r3, r3, [r0]
 8007702:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007706:	6083      	str	r3, [r0, #8]
 8007708:	8181      	strh	r1, [r0, #12]
 800770a:	6643      	str	r3, [r0, #100]	@ 0x64
 800770c:	81c2      	strh	r2, [r0, #14]
 800770e:	6183      	str	r3, [r0, #24]
 8007710:	4619      	mov	r1, r3
 8007712:	2208      	movs	r2, #8
 8007714:	305c      	adds	r0, #92	@ 0x5c
 8007716:	f000 f9f9 	bl	8007b0c <memset>
 800771a:	4b0d      	ldr	r3, [pc, #52]	@ (8007750 <std+0x58>)
 800771c:	6263      	str	r3, [r4, #36]	@ 0x24
 800771e:	4b0d      	ldr	r3, [pc, #52]	@ (8007754 <std+0x5c>)
 8007720:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007722:	4b0d      	ldr	r3, [pc, #52]	@ (8007758 <std+0x60>)
 8007724:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007726:	4b0d      	ldr	r3, [pc, #52]	@ (800775c <std+0x64>)
 8007728:	6323      	str	r3, [r4, #48]	@ 0x30
 800772a:	4b0d      	ldr	r3, [pc, #52]	@ (8007760 <std+0x68>)
 800772c:	6224      	str	r4, [r4, #32]
 800772e:	429c      	cmp	r4, r3
 8007730:	d006      	beq.n	8007740 <std+0x48>
 8007732:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007736:	4294      	cmp	r4, r2
 8007738:	d002      	beq.n	8007740 <std+0x48>
 800773a:	33d0      	adds	r3, #208	@ 0xd0
 800773c:	429c      	cmp	r4, r3
 800773e:	d105      	bne.n	800774c <std+0x54>
 8007740:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007744:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007748:	f000 ba68 	b.w	8007c1c <__retarget_lock_init_recursive>
 800774c:	bd10      	pop	{r4, pc}
 800774e:	bf00      	nop
 8007750:	0800795d 	.word	0x0800795d
 8007754:	0800797f 	.word	0x0800797f
 8007758:	080079b7 	.word	0x080079b7
 800775c:	080079db 	.word	0x080079db
 8007760:	2000036c 	.word	0x2000036c

08007764 <stdio_exit_handler>:
 8007764:	4a02      	ldr	r2, [pc, #8]	@ (8007770 <stdio_exit_handler+0xc>)
 8007766:	4903      	ldr	r1, [pc, #12]	@ (8007774 <stdio_exit_handler+0x10>)
 8007768:	4803      	ldr	r0, [pc, #12]	@ (8007778 <stdio_exit_handler+0x14>)
 800776a:	f000 b869 	b.w	8007840 <_fwalk_sglue>
 800776e:	bf00      	nop
 8007770:	20000034 	.word	0x20000034
 8007774:	08008371 	.word	0x08008371
 8007778:	20000044 	.word	0x20000044

0800777c <cleanup_stdio>:
 800777c:	6841      	ldr	r1, [r0, #4]
 800777e:	4b0c      	ldr	r3, [pc, #48]	@ (80077b0 <cleanup_stdio+0x34>)
 8007780:	4299      	cmp	r1, r3
 8007782:	b510      	push	{r4, lr}
 8007784:	4604      	mov	r4, r0
 8007786:	d001      	beq.n	800778c <cleanup_stdio+0x10>
 8007788:	f000 fdf2 	bl	8008370 <_fflush_r>
 800778c:	68a1      	ldr	r1, [r4, #8]
 800778e:	4b09      	ldr	r3, [pc, #36]	@ (80077b4 <cleanup_stdio+0x38>)
 8007790:	4299      	cmp	r1, r3
 8007792:	d002      	beq.n	800779a <cleanup_stdio+0x1e>
 8007794:	4620      	mov	r0, r4
 8007796:	f000 fdeb 	bl	8008370 <_fflush_r>
 800779a:	68e1      	ldr	r1, [r4, #12]
 800779c:	4b06      	ldr	r3, [pc, #24]	@ (80077b8 <cleanup_stdio+0x3c>)
 800779e:	4299      	cmp	r1, r3
 80077a0:	d004      	beq.n	80077ac <cleanup_stdio+0x30>
 80077a2:	4620      	mov	r0, r4
 80077a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80077a8:	f000 bde2 	b.w	8008370 <_fflush_r>
 80077ac:	bd10      	pop	{r4, pc}
 80077ae:	bf00      	nop
 80077b0:	2000036c 	.word	0x2000036c
 80077b4:	200003d4 	.word	0x200003d4
 80077b8:	2000043c 	.word	0x2000043c

080077bc <global_stdio_init.part.0>:
 80077bc:	b510      	push	{r4, lr}
 80077be:	4b0b      	ldr	r3, [pc, #44]	@ (80077ec <global_stdio_init.part.0+0x30>)
 80077c0:	4c0b      	ldr	r4, [pc, #44]	@ (80077f0 <global_stdio_init.part.0+0x34>)
 80077c2:	4a0c      	ldr	r2, [pc, #48]	@ (80077f4 <global_stdio_init.part.0+0x38>)
 80077c4:	601a      	str	r2, [r3, #0]
 80077c6:	4620      	mov	r0, r4
 80077c8:	2200      	movs	r2, #0
 80077ca:	2104      	movs	r1, #4
 80077cc:	f7ff ff94 	bl	80076f8 <std>
 80077d0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80077d4:	2201      	movs	r2, #1
 80077d6:	2109      	movs	r1, #9
 80077d8:	f7ff ff8e 	bl	80076f8 <std>
 80077dc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80077e0:	2202      	movs	r2, #2
 80077e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80077e6:	2112      	movs	r1, #18
 80077e8:	f7ff bf86 	b.w	80076f8 <std>
 80077ec:	200004a4 	.word	0x200004a4
 80077f0:	2000036c 	.word	0x2000036c
 80077f4:	08007765 	.word	0x08007765

080077f8 <__sfp_lock_acquire>:
 80077f8:	4801      	ldr	r0, [pc, #4]	@ (8007800 <__sfp_lock_acquire+0x8>)
 80077fa:	f000 ba10 	b.w	8007c1e <__retarget_lock_acquire_recursive>
 80077fe:	bf00      	nop
 8007800:	200004ad 	.word	0x200004ad

08007804 <__sfp_lock_release>:
 8007804:	4801      	ldr	r0, [pc, #4]	@ (800780c <__sfp_lock_release+0x8>)
 8007806:	f000 ba0b 	b.w	8007c20 <__retarget_lock_release_recursive>
 800780a:	bf00      	nop
 800780c:	200004ad 	.word	0x200004ad

08007810 <__sinit>:
 8007810:	b510      	push	{r4, lr}
 8007812:	4604      	mov	r4, r0
 8007814:	f7ff fff0 	bl	80077f8 <__sfp_lock_acquire>
 8007818:	6a23      	ldr	r3, [r4, #32]
 800781a:	b11b      	cbz	r3, 8007824 <__sinit+0x14>
 800781c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007820:	f7ff bff0 	b.w	8007804 <__sfp_lock_release>
 8007824:	4b04      	ldr	r3, [pc, #16]	@ (8007838 <__sinit+0x28>)
 8007826:	6223      	str	r3, [r4, #32]
 8007828:	4b04      	ldr	r3, [pc, #16]	@ (800783c <__sinit+0x2c>)
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	2b00      	cmp	r3, #0
 800782e:	d1f5      	bne.n	800781c <__sinit+0xc>
 8007830:	f7ff ffc4 	bl	80077bc <global_stdio_init.part.0>
 8007834:	e7f2      	b.n	800781c <__sinit+0xc>
 8007836:	bf00      	nop
 8007838:	0800777d 	.word	0x0800777d
 800783c:	200004a4 	.word	0x200004a4

08007840 <_fwalk_sglue>:
 8007840:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007844:	4607      	mov	r7, r0
 8007846:	4688      	mov	r8, r1
 8007848:	4614      	mov	r4, r2
 800784a:	2600      	movs	r6, #0
 800784c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007850:	f1b9 0901 	subs.w	r9, r9, #1
 8007854:	d505      	bpl.n	8007862 <_fwalk_sglue+0x22>
 8007856:	6824      	ldr	r4, [r4, #0]
 8007858:	2c00      	cmp	r4, #0
 800785a:	d1f7      	bne.n	800784c <_fwalk_sglue+0xc>
 800785c:	4630      	mov	r0, r6
 800785e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007862:	89ab      	ldrh	r3, [r5, #12]
 8007864:	2b01      	cmp	r3, #1
 8007866:	d907      	bls.n	8007878 <_fwalk_sglue+0x38>
 8007868:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800786c:	3301      	adds	r3, #1
 800786e:	d003      	beq.n	8007878 <_fwalk_sglue+0x38>
 8007870:	4629      	mov	r1, r5
 8007872:	4638      	mov	r0, r7
 8007874:	47c0      	blx	r8
 8007876:	4306      	orrs	r6, r0
 8007878:	3568      	adds	r5, #104	@ 0x68
 800787a:	e7e9      	b.n	8007850 <_fwalk_sglue+0x10>

0800787c <iprintf>:
 800787c:	b40f      	push	{r0, r1, r2, r3}
 800787e:	b507      	push	{r0, r1, r2, lr}
 8007880:	4906      	ldr	r1, [pc, #24]	@ (800789c <iprintf+0x20>)
 8007882:	ab04      	add	r3, sp, #16
 8007884:	6808      	ldr	r0, [r1, #0]
 8007886:	f853 2b04 	ldr.w	r2, [r3], #4
 800788a:	6881      	ldr	r1, [r0, #8]
 800788c:	9301      	str	r3, [sp, #4]
 800788e:	f000 fa45 	bl	8007d1c <_vfiprintf_r>
 8007892:	b003      	add	sp, #12
 8007894:	f85d eb04 	ldr.w	lr, [sp], #4
 8007898:	b004      	add	sp, #16
 800789a:	4770      	bx	lr
 800789c:	20000040 	.word	0x20000040

080078a0 <_puts_r>:
 80078a0:	6a03      	ldr	r3, [r0, #32]
 80078a2:	b570      	push	{r4, r5, r6, lr}
 80078a4:	6884      	ldr	r4, [r0, #8]
 80078a6:	4605      	mov	r5, r0
 80078a8:	460e      	mov	r6, r1
 80078aa:	b90b      	cbnz	r3, 80078b0 <_puts_r+0x10>
 80078ac:	f7ff ffb0 	bl	8007810 <__sinit>
 80078b0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80078b2:	07db      	lsls	r3, r3, #31
 80078b4:	d405      	bmi.n	80078c2 <_puts_r+0x22>
 80078b6:	89a3      	ldrh	r3, [r4, #12]
 80078b8:	0598      	lsls	r0, r3, #22
 80078ba:	d402      	bmi.n	80078c2 <_puts_r+0x22>
 80078bc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80078be:	f000 f9ae 	bl	8007c1e <__retarget_lock_acquire_recursive>
 80078c2:	89a3      	ldrh	r3, [r4, #12]
 80078c4:	0719      	lsls	r1, r3, #28
 80078c6:	d502      	bpl.n	80078ce <_puts_r+0x2e>
 80078c8:	6923      	ldr	r3, [r4, #16]
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d135      	bne.n	800793a <_puts_r+0x9a>
 80078ce:	4621      	mov	r1, r4
 80078d0:	4628      	mov	r0, r5
 80078d2:	f000 f8c5 	bl	8007a60 <__swsetup_r>
 80078d6:	b380      	cbz	r0, 800793a <_puts_r+0x9a>
 80078d8:	f04f 35ff 	mov.w	r5, #4294967295
 80078dc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80078de:	07da      	lsls	r2, r3, #31
 80078e0:	d405      	bmi.n	80078ee <_puts_r+0x4e>
 80078e2:	89a3      	ldrh	r3, [r4, #12]
 80078e4:	059b      	lsls	r3, r3, #22
 80078e6:	d402      	bmi.n	80078ee <_puts_r+0x4e>
 80078e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80078ea:	f000 f999 	bl	8007c20 <__retarget_lock_release_recursive>
 80078ee:	4628      	mov	r0, r5
 80078f0:	bd70      	pop	{r4, r5, r6, pc}
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	da04      	bge.n	8007900 <_puts_r+0x60>
 80078f6:	69a2      	ldr	r2, [r4, #24]
 80078f8:	429a      	cmp	r2, r3
 80078fa:	dc17      	bgt.n	800792c <_puts_r+0x8c>
 80078fc:	290a      	cmp	r1, #10
 80078fe:	d015      	beq.n	800792c <_puts_r+0x8c>
 8007900:	6823      	ldr	r3, [r4, #0]
 8007902:	1c5a      	adds	r2, r3, #1
 8007904:	6022      	str	r2, [r4, #0]
 8007906:	7019      	strb	r1, [r3, #0]
 8007908:	68a3      	ldr	r3, [r4, #8]
 800790a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800790e:	3b01      	subs	r3, #1
 8007910:	60a3      	str	r3, [r4, #8]
 8007912:	2900      	cmp	r1, #0
 8007914:	d1ed      	bne.n	80078f2 <_puts_r+0x52>
 8007916:	2b00      	cmp	r3, #0
 8007918:	da11      	bge.n	800793e <_puts_r+0x9e>
 800791a:	4622      	mov	r2, r4
 800791c:	210a      	movs	r1, #10
 800791e:	4628      	mov	r0, r5
 8007920:	f000 f85f 	bl	80079e2 <__swbuf_r>
 8007924:	3001      	adds	r0, #1
 8007926:	d0d7      	beq.n	80078d8 <_puts_r+0x38>
 8007928:	250a      	movs	r5, #10
 800792a:	e7d7      	b.n	80078dc <_puts_r+0x3c>
 800792c:	4622      	mov	r2, r4
 800792e:	4628      	mov	r0, r5
 8007930:	f000 f857 	bl	80079e2 <__swbuf_r>
 8007934:	3001      	adds	r0, #1
 8007936:	d1e7      	bne.n	8007908 <_puts_r+0x68>
 8007938:	e7ce      	b.n	80078d8 <_puts_r+0x38>
 800793a:	3e01      	subs	r6, #1
 800793c:	e7e4      	b.n	8007908 <_puts_r+0x68>
 800793e:	6823      	ldr	r3, [r4, #0]
 8007940:	1c5a      	adds	r2, r3, #1
 8007942:	6022      	str	r2, [r4, #0]
 8007944:	220a      	movs	r2, #10
 8007946:	701a      	strb	r2, [r3, #0]
 8007948:	e7ee      	b.n	8007928 <_puts_r+0x88>
	...

0800794c <puts>:
 800794c:	4b02      	ldr	r3, [pc, #8]	@ (8007958 <puts+0xc>)
 800794e:	4601      	mov	r1, r0
 8007950:	6818      	ldr	r0, [r3, #0]
 8007952:	f7ff bfa5 	b.w	80078a0 <_puts_r>
 8007956:	bf00      	nop
 8007958:	20000040 	.word	0x20000040

0800795c <__sread>:
 800795c:	b510      	push	{r4, lr}
 800795e:	460c      	mov	r4, r1
 8007960:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007964:	f000 f8fc 	bl	8007b60 <_read_r>
 8007968:	2800      	cmp	r0, #0
 800796a:	bfab      	itete	ge
 800796c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800796e:	89a3      	ldrhlt	r3, [r4, #12]
 8007970:	181b      	addge	r3, r3, r0
 8007972:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007976:	bfac      	ite	ge
 8007978:	6563      	strge	r3, [r4, #84]	@ 0x54
 800797a:	81a3      	strhlt	r3, [r4, #12]
 800797c:	bd10      	pop	{r4, pc}

0800797e <__swrite>:
 800797e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007982:	461f      	mov	r7, r3
 8007984:	898b      	ldrh	r3, [r1, #12]
 8007986:	05db      	lsls	r3, r3, #23
 8007988:	4605      	mov	r5, r0
 800798a:	460c      	mov	r4, r1
 800798c:	4616      	mov	r6, r2
 800798e:	d505      	bpl.n	800799c <__swrite+0x1e>
 8007990:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007994:	2302      	movs	r3, #2
 8007996:	2200      	movs	r2, #0
 8007998:	f000 f8d0 	bl	8007b3c <_lseek_r>
 800799c:	89a3      	ldrh	r3, [r4, #12]
 800799e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80079a2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80079a6:	81a3      	strh	r3, [r4, #12]
 80079a8:	4632      	mov	r2, r6
 80079aa:	463b      	mov	r3, r7
 80079ac:	4628      	mov	r0, r5
 80079ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80079b2:	f000 b8f7 	b.w	8007ba4 <_write_r>

080079b6 <__sseek>:
 80079b6:	b510      	push	{r4, lr}
 80079b8:	460c      	mov	r4, r1
 80079ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079be:	f000 f8bd 	bl	8007b3c <_lseek_r>
 80079c2:	1c43      	adds	r3, r0, #1
 80079c4:	89a3      	ldrh	r3, [r4, #12]
 80079c6:	bf15      	itete	ne
 80079c8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80079ca:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80079ce:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80079d2:	81a3      	strheq	r3, [r4, #12]
 80079d4:	bf18      	it	ne
 80079d6:	81a3      	strhne	r3, [r4, #12]
 80079d8:	bd10      	pop	{r4, pc}

080079da <__sclose>:
 80079da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079de:	f000 b89d 	b.w	8007b1c <_close_r>

080079e2 <__swbuf_r>:
 80079e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079e4:	460e      	mov	r6, r1
 80079e6:	4614      	mov	r4, r2
 80079e8:	4605      	mov	r5, r0
 80079ea:	b118      	cbz	r0, 80079f4 <__swbuf_r+0x12>
 80079ec:	6a03      	ldr	r3, [r0, #32]
 80079ee:	b90b      	cbnz	r3, 80079f4 <__swbuf_r+0x12>
 80079f0:	f7ff ff0e 	bl	8007810 <__sinit>
 80079f4:	69a3      	ldr	r3, [r4, #24]
 80079f6:	60a3      	str	r3, [r4, #8]
 80079f8:	89a3      	ldrh	r3, [r4, #12]
 80079fa:	071a      	lsls	r2, r3, #28
 80079fc:	d501      	bpl.n	8007a02 <__swbuf_r+0x20>
 80079fe:	6923      	ldr	r3, [r4, #16]
 8007a00:	b943      	cbnz	r3, 8007a14 <__swbuf_r+0x32>
 8007a02:	4621      	mov	r1, r4
 8007a04:	4628      	mov	r0, r5
 8007a06:	f000 f82b 	bl	8007a60 <__swsetup_r>
 8007a0a:	b118      	cbz	r0, 8007a14 <__swbuf_r+0x32>
 8007a0c:	f04f 37ff 	mov.w	r7, #4294967295
 8007a10:	4638      	mov	r0, r7
 8007a12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007a14:	6823      	ldr	r3, [r4, #0]
 8007a16:	6922      	ldr	r2, [r4, #16]
 8007a18:	1a98      	subs	r0, r3, r2
 8007a1a:	6963      	ldr	r3, [r4, #20]
 8007a1c:	b2f6      	uxtb	r6, r6
 8007a1e:	4283      	cmp	r3, r0
 8007a20:	4637      	mov	r7, r6
 8007a22:	dc05      	bgt.n	8007a30 <__swbuf_r+0x4e>
 8007a24:	4621      	mov	r1, r4
 8007a26:	4628      	mov	r0, r5
 8007a28:	f000 fca2 	bl	8008370 <_fflush_r>
 8007a2c:	2800      	cmp	r0, #0
 8007a2e:	d1ed      	bne.n	8007a0c <__swbuf_r+0x2a>
 8007a30:	68a3      	ldr	r3, [r4, #8]
 8007a32:	3b01      	subs	r3, #1
 8007a34:	60a3      	str	r3, [r4, #8]
 8007a36:	6823      	ldr	r3, [r4, #0]
 8007a38:	1c5a      	adds	r2, r3, #1
 8007a3a:	6022      	str	r2, [r4, #0]
 8007a3c:	701e      	strb	r6, [r3, #0]
 8007a3e:	6962      	ldr	r2, [r4, #20]
 8007a40:	1c43      	adds	r3, r0, #1
 8007a42:	429a      	cmp	r2, r3
 8007a44:	d004      	beq.n	8007a50 <__swbuf_r+0x6e>
 8007a46:	89a3      	ldrh	r3, [r4, #12]
 8007a48:	07db      	lsls	r3, r3, #31
 8007a4a:	d5e1      	bpl.n	8007a10 <__swbuf_r+0x2e>
 8007a4c:	2e0a      	cmp	r6, #10
 8007a4e:	d1df      	bne.n	8007a10 <__swbuf_r+0x2e>
 8007a50:	4621      	mov	r1, r4
 8007a52:	4628      	mov	r0, r5
 8007a54:	f000 fc8c 	bl	8008370 <_fflush_r>
 8007a58:	2800      	cmp	r0, #0
 8007a5a:	d0d9      	beq.n	8007a10 <__swbuf_r+0x2e>
 8007a5c:	e7d6      	b.n	8007a0c <__swbuf_r+0x2a>
	...

08007a60 <__swsetup_r>:
 8007a60:	b538      	push	{r3, r4, r5, lr}
 8007a62:	4b29      	ldr	r3, [pc, #164]	@ (8007b08 <__swsetup_r+0xa8>)
 8007a64:	4605      	mov	r5, r0
 8007a66:	6818      	ldr	r0, [r3, #0]
 8007a68:	460c      	mov	r4, r1
 8007a6a:	b118      	cbz	r0, 8007a74 <__swsetup_r+0x14>
 8007a6c:	6a03      	ldr	r3, [r0, #32]
 8007a6e:	b90b      	cbnz	r3, 8007a74 <__swsetup_r+0x14>
 8007a70:	f7ff fece 	bl	8007810 <__sinit>
 8007a74:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007a78:	0719      	lsls	r1, r3, #28
 8007a7a:	d422      	bmi.n	8007ac2 <__swsetup_r+0x62>
 8007a7c:	06da      	lsls	r2, r3, #27
 8007a7e:	d407      	bmi.n	8007a90 <__swsetup_r+0x30>
 8007a80:	2209      	movs	r2, #9
 8007a82:	602a      	str	r2, [r5, #0]
 8007a84:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007a88:	81a3      	strh	r3, [r4, #12]
 8007a8a:	f04f 30ff 	mov.w	r0, #4294967295
 8007a8e:	e033      	b.n	8007af8 <__swsetup_r+0x98>
 8007a90:	0758      	lsls	r0, r3, #29
 8007a92:	d512      	bpl.n	8007aba <__swsetup_r+0x5a>
 8007a94:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007a96:	b141      	cbz	r1, 8007aaa <__swsetup_r+0x4a>
 8007a98:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007a9c:	4299      	cmp	r1, r3
 8007a9e:	d002      	beq.n	8007aa6 <__swsetup_r+0x46>
 8007aa0:	4628      	mov	r0, r5
 8007aa2:	f000 f8c7 	bl	8007c34 <_free_r>
 8007aa6:	2300      	movs	r3, #0
 8007aa8:	6363      	str	r3, [r4, #52]	@ 0x34
 8007aaa:	89a3      	ldrh	r3, [r4, #12]
 8007aac:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007ab0:	81a3      	strh	r3, [r4, #12]
 8007ab2:	2300      	movs	r3, #0
 8007ab4:	6063      	str	r3, [r4, #4]
 8007ab6:	6923      	ldr	r3, [r4, #16]
 8007ab8:	6023      	str	r3, [r4, #0]
 8007aba:	89a3      	ldrh	r3, [r4, #12]
 8007abc:	f043 0308 	orr.w	r3, r3, #8
 8007ac0:	81a3      	strh	r3, [r4, #12]
 8007ac2:	6923      	ldr	r3, [r4, #16]
 8007ac4:	b94b      	cbnz	r3, 8007ada <__swsetup_r+0x7a>
 8007ac6:	89a3      	ldrh	r3, [r4, #12]
 8007ac8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007acc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007ad0:	d003      	beq.n	8007ada <__swsetup_r+0x7a>
 8007ad2:	4621      	mov	r1, r4
 8007ad4:	4628      	mov	r0, r5
 8007ad6:	f000 fc99 	bl	800840c <__smakebuf_r>
 8007ada:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007ade:	f013 0201 	ands.w	r2, r3, #1
 8007ae2:	d00a      	beq.n	8007afa <__swsetup_r+0x9a>
 8007ae4:	2200      	movs	r2, #0
 8007ae6:	60a2      	str	r2, [r4, #8]
 8007ae8:	6962      	ldr	r2, [r4, #20]
 8007aea:	4252      	negs	r2, r2
 8007aec:	61a2      	str	r2, [r4, #24]
 8007aee:	6922      	ldr	r2, [r4, #16]
 8007af0:	b942      	cbnz	r2, 8007b04 <__swsetup_r+0xa4>
 8007af2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007af6:	d1c5      	bne.n	8007a84 <__swsetup_r+0x24>
 8007af8:	bd38      	pop	{r3, r4, r5, pc}
 8007afa:	0799      	lsls	r1, r3, #30
 8007afc:	bf58      	it	pl
 8007afe:	6962      	ldrpl	r2, [r4, #20]
 8007b00:	60a2      	str	r2, [r4, #8]
 8007b02:	e7f4      	b.n	8007aee <__swsetup_r+0x8e>
 8007b04:	2000      	movs	r0, #0
 8007b06:	e7f7      	b.n	8007af8 <__swsetup_r+0x98>
 8007b08:	20000040 	.word	0x20000040

08007b0c <memset>:
 8007b0c:	4402      	add	r2, r0
 8007b0e:	4603      	mov	r3, r0
 8007b10:	4293      	cmp	r3, r2
 8007b12:	d100      	bne.n	8007b16 <memset+0xa>
 8007b14:	4770      	bx	lr
 8007b16:	f803 1b01 	strb.w	r1, [r3], #1
 8007b1a:	e7f9      	b.n	8007b10 <memset+0x4>

08007b1c <_close_r>:
 8007b1c:	b538      	push	{r3, r4, r5, lr}
 8007b1e:	4d06      	ldr	r5, [pc, #24]	@ (8007b38 <_close_r+0x1c>)
 8007b20:	2300      	movs	r3, #0
 8007b22:	4604      	mov	r4, r0
 8007b24:	4608      	mov	r0, r1
 8007b26:	602b      	str	r3, [r5, #0]
 8007b28:	f7fa fc1b 	bl	8002362 <_close>
 8007b2c:	1c43      	adds	r3, r0, #1
 8007b2e:	d102      	bne.n	8007b36 <_close_r+0x1a>
 8007b30:	682b      	ldr	r3, [r5, #0]
 8007b32:	b103      	cbz	r3, 8007b36 <_close_r+0x1a>
 8007b34:	6023      	str	r3, [r4, #0]
 8007b36:	bd38      	pop	{r3, r4, r5, pc}
 8007b38:	200004a8 	.word	0x200004a8

08007b3c <_lseek_r>:
 8007b3c:	b538      	push	{r3, r4, r5, lr}
 8007b3e:	4d07      	ldr	r5, [pc, #28]	@ (8007b5c <_lseek_r+0x20>)
 8007b40:	4604      	mov	r4, r0
 8007b42:	4608      	mov	r0, r1
 8007b44:	4611      	mov	r1, r2
 8007b46:	2200      	movs	r2, #0
 8007b48:	602a      	str	r2, [r5, #0]
 8007b4a:	461a      	mov	r2, r3
 8007b4c:	f7fa fc30 	bl	80023b0 <_lseek>
 8007b50:	1c43      	adds	r3, r0, #1
 8007b52:	d102      	bne.n	8007b5a <_lseek_r+0x1e>
 8007b54:	682b      	ldr	r3, [r5, #0]
 8007b56:	b103      	cbz	r3, 8007b5a <_lseek_r+0x1e>
 8007b58:	6023      	str	r3, [r4, #0]
 8007b5a:	bd38      	pop	{r3, r4, r5, pc}
 8007b5c:	200004a8 	.word	0x200004a8

08007b60 <_read_r>:
 8007b60:	b538      	push	{r3, r4, r5, lr}
 8007b62:	4d07      	ldr	r5, [pc, #28]	@ (8007b80 <_read_r+0x20>)
 8007b64:	4604      	mov	r4, r0
 8007b66:	4608      	mov	r0, r1
 8007b68:	4611      	mov	r1, r2
 8007b6a:	2200      	movs	r2, #0
 8007b6c:	602a      	str	r2, [r5, #0]
 8007b6e:	461a      	mov	r2, r3
 8007b70:	f7fa fbbe 	bl	80022f0 <_read>
 8007b74:	1c43      	adds	r3, r0, #1
 8007b76:	d102      	bne.n	8007b7e <_read_r+0x1e>
 8007b78:	682b      	ldr	r3, [r5, #0]
 8007b7a:	b103      	cbz	r3, 8007b7e <_read_r+0x1e>
 8007b7c:	6023      	str	r3, [r4, #0]
 8007b7e:	bd38      	pop	{r3, r4, r5, pc}
 8007b80:	200004a8 	.word	0x200004a8

08007b84 <_sbrk_r>:
 8007b84:	b538      	push	{r3, r4, r5, lr}
 8007b86:	4d06      	ldr	r5, [pc, #24]	@ (8007ba0 <_sbrk_r+0x1c>)
 8007b88:	2300      	movs	r3, #0
 8007b8a:	4604      	mov	r4, r0
 8007b8c:	4608      	mov	r0, r1
 8007b8e:	602b      	str	r3, [r5, #0]
 8007b90:	f7fa fc1c 	bl	80023cc <_sbrk>
 8007b94:	1c43      	adds	r3, r0, #1
 8007b96:	d102      	bne.n	8007b9e <_sbrk_r+0x1a>
 8007b98:	682b      	ldr	r3, [r5, #0]
 8007b9a:	b103      	cbz	r3, 8007b9e <_sbrk_r+0x1a>
 8007b9c:	6023      	str	r3, [r4, #0]
 8007b9e:	bd38      	pop	{r3, r4, r5, pc}
 8007ba0:	200004a8 	.word	0x200004a8

08007ba4 <_write_r>:
 8007ba4:	b538      	push	{r3, r4, r5, lr}
 8007ba6:	4d07      	ldr	r5, [pc, #28]	@ (8007bc4 <_write_r+0x20>)
 8007ba8:	4604      	mov	r4, r0
 8007baa:	4608      	mov	r0, r1
 8007bac:	4611      	mov	r1, r2
 8007bae:	2200      	movs	r2, #0
 8007bb0:	602a      	str	r2, [r5, #0]
 8007bb2:	461a      	mov	r2, r3
 8007bb4:	f7fa fbb9 	bl	800232a <_write>
 8007bb8:	1c43      	adds	r3, r0, #1
 8007bba:	d102      	bne.n	8007bc2 <_write_r+0x1e>
 8007bbc:	682b      	ldr	r3, [r5, #0]
 8007bbe:	b103      	cbz	r3, 8007bc2 <_write_r+0x1e>
 8007bc0:	6023      	str	r3, [r4, #0]
 8007bc2:	bd38      	pop	{r3, r4, r5, pc}
 8007bc4:	200004a8 	.word	0x200004a8

08007bc8 <__errno>:
 8007bc8:	4b01      	ldr	r3, [pc, #4]	@ (8007bd0 <__errno+0x8>)
 8007bca:	6818      	ldr	r0, [r3, #0]
 8007bcc:	4770      	bx	lr
 8007bce:	bf00      	nop
 8007bd0:	20000040 	.word	0x20000040

08007bd4 <__libc_init_array>:
 8007bd4:	b570      	push	{r4, r5, r6, lr}
 8007bd6:	4d0d      	ldr	r5, [pc, #52]	@ (8007c0c <__libc_init_array+0x38>)
 8007bd8:	4c0d      	ldr	r4, [pc, #52]	@ (8007c10 <__libc_init_array+0x3c>)
 8007bda:	1b64      	subs	r4, r4, r5
 8007bdc:	10a4      	asrs	r4, r4, #2
 8007bde:	2600      	movs	r6, #0
 8007be0:	42a6      	cmp	r6, r4
 8007be2:	d109      	bne.n	8007bf8 <__libc_init_array+0x24>
 8007be4:	4d0b      	ldr	r5, [pc, #44]	@ (8007c14 <__libc_init_array+0x40>)
 8007be6:	4c0c      	ldr	r4, [pc, #48]	@ (8007c18 <__libc_init_array+0x44>)
 8007be8:	f000 fc6e 	bl	80084c8 <_init>
 8007bec:	1b64      	subs	r4, r4, r5
 8007bee:	10a4      	asrs	r4, r4, #2
 8007bf0:	2600      	movs	r6, #0
 8007bf2:	42a6      	cmp	r6, r4
 8007bf4:	d105      	bne.n	8007c02 <__libc_init_array+0x2e>
 8007bf6:	bd70      	pop	{r4, r5, r6, pc}
 8007bf8:	f855 3b04 	ldr.w	r3, [r5], #4
 8007bfc:	4798      	blx	r3
 8007bfe:	3601      	adds	r6, #1
 8007c00:	e7ee      	b.n	8007be0 <__libc_init_array+0xc>
 8007c02:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c06:	4798      	blx	r3
 8007c08:	3601      	adds	r6, #1
 8007c0a:	e7f2      	b.n	8007bf2 <__libc_init_array+0x1e>
 8007c0c:	0800b2bc 	.word	0x0800b2bc
 8007c10:	0800b2bc 	.word	0x0800b2bc
 8007c14:	0800b2bc 	.word	0x0800b2bc
 8007c18:	0800b2c0 	.word	0x0800b2c0

08007c1c <__retarget_lock_init_recursive>:
 8007c1c:	4770      	bx	lr

08007c1e <__retarget_lock_acquire_recursive>:
 8007c1e:	4770      	bx	lr

08007c20 <__retarget_lock_release_recursive>:
 8007c20:	4770      	bx	lr

08007c22 <strcpy>:
 8007c22:	4603      	mov	r3, r0
 8007c24:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007c28:	f803 2b01 	strb.w	r2, [r3], #1
 8007c2c:	2a00      	cmp	r2, #0
 8007c2e:	d1f9      	bne.n	8007c24 <strcpy+0x2>
 8007c30:	4770      	bx	lr
	...

08007c34 <_free_r>:
 8007c34:	b538      	push	{r3, r4, r5, lr}
 8007c36:	4605      	mov	r5, r0
 8007c38:	2900      	cmp	r1, #0
 8007c3a:	d041      	beq.n	8007cc0 <_free_r+0x8c>
 8007c3c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007c40:	1f0c      	subs	r4, r1, #4
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	bfb8      	it	lt
 8007c46:	18e4      	addlt	r4, r4, r3
 8007c48:	f7ff fd4a 	bl	80076e0 <__malloc_lock>
 8007c4c:	4a1d      	ldr	r2, [pc, #116]	@ (8007cc4 <_free_r+0x90>)
 8007c4e:	6813      	ldr	r3, [r2, #0]
 8007c50:	b933      	cbnz	r3, 8007c60 <_free_r+0x2c>
 8007c52:	6063      	str	r3, [r4, #4]
 8007c54:	6014      	str	r4, [r2, #0]
 8007c56:	4628      	mov	r0, r5
 8007c58:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007c5c:	f7ff bd46 	b.w	80076ec <__malloc_unlock>
 8007c60:	42a3      	cmp	r3, r4
 8007c62:	d908      	bls.n	8007c76 <_free_r+0x42>
 8007c64:	6820      	ldr	r0, [r4, #0]
 8007c66:	1821      	adds	r1, r4, r0
 8007c68:	428b      	cmp	r3, r1
 8007c6a:	bf01      	itttt	eq
 8007c6c:	6819      	ldreq	r1, [r3, #0]
 8007c6e:	685b      	ldreq	r3, [r3, #4]
 8007c70:	1809      	addeq	r1, r1, r0
 8007c72:	6021      	streq	r1, [r4, #0]
 8007c74:	e7ed      	b.n	8007c52 <_free_r+0x1e>
 8007c76:	461a      	mov	r2, r3
 8007c78:	685b      	ldr	r3, [r3, #4]
 8007c7a:	b10b      	cbz	r3, 8007c80 <_free_r+0x4c>
 8007c7c:	42a3      	cmp	r3, r4
 8007c7e:	d9fa      	bls.n	8007c76 <_free_r+0x42>
 8007c80:	6811      	ldr	r1, [r2, #0]
 8007c82:	1850      	adds	r0, r2, r1
 8007c84:	42a0      	cmp	r0, r4
 8007c86:	d10b      	bne.n	8007ca0 <_free_r+0x6c>
 8007c88:	6820      	ldr	r0, [r4, #0]
 8007c8a:	4401      	add	r1, r0
 8007c8c:	1850      	adds	r0, r2, r1
 8007c8e:	4283      	cmp	r3, r0
 8007c90:	6011      	str	r1, [r2, #0]
 8007c92:	d1e0      	bne.n	8007c56 <_free_r+0x22>
 8007c94:	6818      	ldr	r0, [r3, #0]
 8007c96:	685b      	ldr	r3, [r3, #4]
 8007c98:	6053      	str	r3, [r2, #4]
 8007c9a:	4408      	add	r0, r1
 8007c9c:	6010      	str	r0, [r2, #0]
 8007c9e:	e7da      	b.n	8007c56 <_free_r+0x22>
 8007ca0:	d902      	bls.n	8007ca8 <_free_r+0x74>
 8007ca2:	230c      	movs	r3, #12
 8007ca4:	602b      	str	r3, [r5, #0]
 8007ca6:	e7d6      	b.n	8007c56 <_free_r+0x22>
 8007ca8:	6820      	ldr	r0, [r4, #0]
 8007caa:	1821      	adds	r1, r4, r0
 8007cac:	428b      	cmp	r3, r1
 8007cae:	bf04      	itt	eq
 8007cb0:	6819      	ldreq	r1, [r3, #0]
 8007cb2:	685b      	ldreq	r3, [r3, #4]
 8007cb4:	6063      	str	r3, [r4, #4]
 8007cb6:	bf04      	itt	eq
 8007cb8:	1809      	addeq	r1, r1, r0
 8007cba:	6021      	streq	r1, [r4, #0]
 8007cbc:	6054      	str	r4, [r2, #4]
 8007cbe:	e7ca      	b.n	8007c56 <_free_r+0x22>
 8007cc0:	bd38      	pop	{r3, r4, r5, pc}
 8007cc2:	bf00      	nop
 8007cc4:	20000368 	.word	0x20000368

08007cc8 <__sfputc_r>:
 8007cc8:	6893      	ldr	r3, [r2, #8]
 8007cca:	3b01      	subs	r3, #1
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	b410      	push	{r4}
 8007cd0:	6093      	str	r3, [r2, #8]
 8007cd2:	da08      	bge.n	8007ce6 <__sfputc_r+0x1e>
 8007cd4:	6994      	ldr	r4, [r2, #24]
 8007cd6:	42a3      	cmp	r3, r4
 8007cd8:	db01      	blt.n	8007cde <__sfputc_r+0x16>
 8007cda:	290a      	cmp	r1, #10
 8007cdc:	d103      	bne.n	8007ce6 <__sfputc_r+0x1e>
 8007cde:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007ce2:	f7ff be7e 	b.w	80079e2 <__swbuf_r>
 8007ce6:	6813      	ldr	r3, [r2, #0]
 8007ce8:	1c58      	adds	r0, r3, #1
 8007cea:	6010      	str	r0, [r2, #0]
 8007cec:	7019      	strb	r1, [r3, #0]
 8007cee:	4608      	mov	r0, r1
 8007cf0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007cf4:	4770      	bx	lr

08007cf6 <__sfputs_r>:
 8007cf6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cf8:	4606      	mov	r6, r0
 8007cfa:	460f      	mov	r7, r1
 8007cfc:	4614      	mov	r4, r2
 8007cfe:	18d5      	adds	r5, r2, r3
 8007d00:	42ac      	cmp	r4, r5
 8007d02:	d101      	bne.n	8007d08 <__sfputs_r+0x12>
 8007d04:	2000      	movs	r0, #0
 8007d06:	e007      	b.n	8007d18 <__sfputs_r+0x22>
 8007d08:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d0c:	463a      	mov	r2, r7
 8007d0e:	4630      	mov	r0, r6
 8007d10:	f7ff ffda 	bl	8007cc8 <__sfputc_r>
 8007d14:	1c43      	adds	r3, r0, #1
 8007d16:	d1f3      	bne.n	8007d00 <__sfputs_r+0xa>
 8007d18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007d1c <_vfiprintf_r>:
 8007d1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d20:	460d      	mov	r5, r1
 8007d22:	b09d      	sub	sp, #116	@ 0x74
 8007d24:	4614      	mov	r4, r2
 8007d26:	4698      	mov	r8, r3
 8007d28:	4606      	mov	r6, r0
 8007d2a:	b118      	cbz	r0, 8007d34 <_vfiprintf_r+0x18>
 8007d2c:	6a03      	ldr	r3, [r0, #32]
 8007d2e:	b90b      	cbnz	r3, 8007d34 <_vfiprintf_r+0x18>
 8007d30:	f7ff fd6e 	bl	8007810 <__sinit>
 8007d34:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007d36:	07d9      	lsls	r1, r3, #31
 8007d38:	d405      	bmi.n	8007d46 <_vfiprintf_r+0x2a>
 8007d3a:	89ab      	ldrh	r3, [r5, #12]
 8007d3c:	059a      	lsls	r2, r3, #22
 8007d3e:	d402      	bmi.n	8007d46 <_vfiprintf_r+0x2a>
 8007d40:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007d42:	f7ff ff6c 	bl	8007c1e <__retarget_lock_acquire_recursive>
 8007d46:	89ab      	ldrh	r3, [r5, #12]
 8007d48:	071b      	lsls	r3, r3, #28
 8007d4a:	d501      	bpl.n	8007d50 <_vfiprintf_r+0x34>
 8007d4c:	692b      	ldr	r3, [r5, #16]
 8007d4e:	b99b      	cbnz	r3, 8007d78 <_vfiprintf_r+0x5c>
 8007d50:	4629      	mov	r1, r5
 8007d52:	4630      	mov	r0, r6
 8007d54:	f7ff fe84 	bl	8007a60 <__swsetup_r>
 8007d58:	b170      	cbz	r0, 8007d78 <_vfiprintf_r+0x5c>
 8007d5a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007d5c:	07dc      	lsls	r4, r3, #31
 8007d5e:	d504      	bpl.n	8007d6a <_vfiprintf_r+0x4e>
 8007d60:	f04f 30ff 	mov.w	r0, #4294967295
 8007d64:	b01d      	add	sp, #116	@ 0x74
 8007d66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d6a:	89ab      	ldrh	r3, [r5, #12]
 8007d6c:	0598      	lsls	r0, r3, #22
 8007d6e:	d4f7      	bmi.n	8007d60 <_vfiprintf_r+0x44>
 8007d70:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007d72:	f7ff ff55 	bl	8007c20 <__retarget_lock_release_recursive>
 8007d76:	e7f3      	b.n	8007d60 <_vfiprintf_r+0x44>
 8007d78:	2300      	movs	r3, #0
 8007d7a:	9309      	str	r3, [sp, #36]	@ 0x24
 8007d7c:	2320      	movs	r3, #32
 8007d7e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007d82:	f8cd 800c 	str.w	r8, [sp, #12]
 8007d86:	2330      	movs	r3, #48	@ 0x30
 8007d88:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007f38 <_vfiprintf_r+0x21c>
 8007d8c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007d90:	f04f 0901 	mov.w	r9, #1
 8007d94:	4623      	mov	r3, r4
 8007d96:	469a      	mov	sl, r3
 8007d98:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007d9c:	b10a      	cbz	r2, 8007da2 <_vfiprintf_r+0x86>
 8007d9e:	2a25      	cmp	r2, #37	@ 0x25
 8007da0:	d1f9      	bne.n	8007d96 <_vfiprintf_r+0x7a>
 8007da2:	ebba 0b04 	subs.w	fp, sl, r4
 8007da6:	d00b      	beq.n	8007dc0 <_vfiprintf_r+0xa4>
 8007da8:	465b      	mov	r3, fp
 8007daa:	4622      	mov	r2, r4
 8007dac:	4629      	mov	r1, r5
 8007dae:	4630      	mov	r0, r6
 8007db0:	f7ff ffa1 	bl	8007cf6 <__sfputs_r>
 8007db4:	3001      	adds	r0, #1
 8007db6:	f000 80a7 	beq.w	8007f08 <_vfiprintf_r+0x1ec>
 8007dba:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007dbc:	445a      	add	r2, fp
 8007dbe:	9209      	str	r2, [sp, #36]	@ 0x24
 8007dc0:	f89a 3000 	ldrb.w	r3, [sl]
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	f000 809f 	beq.w	8007f08 <_vfiprintf_r+0x1ec>
 8007dca:	2300      	movs	r3, #0
 8007dcc:	f04f 32ff 	mov.w	r2, #4294967295
 8007dd0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007dd4:	f10a 0a01 	add.w	sl, sl, #1
 8007dd8:	9304      	str	r3, [sp, #16]
 8007dda:	9307      	str	r3, [sp, #28]
 8007ddc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007de0:	931a      	str	r3, [sp, #104]	@ 0x68
 8007de2:	4654      	mov	r4, sl
 8007de4:	2205      	movs	r2, #5
 8007de6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007dea:	4853      	ldr	r0, [pc, #332]	@ (8007f38 <_vfiprintf_r+0x21c>)
 8007dec:	f7f8 fa10 	bl	8000210 <memchr>
 8007df0:	9a04      	ldr	r2, [sp, #16]
 8007df2:	b9d8      	cbnz	r0, 8007e2c <_vfiprintf_r+0x110>
 8007df4:	06d1      	lsls	r1, r2, #27
 8007df6:	bf44      	itt	mi
 8007df8:	2320      	movmi	r3, #32
 8007dfa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007dfe:	0713      	lsls	r3, r2, #28
 8007e00:	bf44      	itt	mi
 8007e02:	232b      	movmi	r3, #43	@ 0x2b
 8007e04:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007e08:	f89a 3000 	ldrb.w	r3, [sl]
 8007e0c:	2b2a      	cmp	r3, #42	@ 0x2a
 8007e0e:	d015      	beq.n	8007e3c <_vfiprintf_r+0x120>
 8007e10:	9a07      	ldr	r2, [sp, #28]
 8007e12:	4654      	mov	r4, sl
 8007e14:	2000      	movs	r0, #0
 8007e16:	f04f 0c0a 	mov.w	ip, #10
 8007e1a:	4621      	mov	r1, r4
 8007e1c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007e20:	3b30      	subs	r3, #48	@ 0x30
 8007e22:	2b09      	cmp	r3, #9
 8007e24:	d94b      	bls.n	8007ebe <_vfiprintf_r+0x1a2>
 8007e26:	b1b0      	cbz	r0, 8007e56 <_vfiprintf_r+0x13a>
 8007e28:	9207      	str	r2, [sp, #28]
 8007e2a:	e014      	b.n	8007e56 <_vfiprintf_r+0x13a>
 8007e2c:	eba0 0308 	sub.w	r3, r0, r8
 8007e30:	fa09 f303 	lsl.w	r3, r9, r3
 8007e34:	4313      	orrs	r3, r2
 8007e36:	9304      	str	r3, [sp, #16]
 8007e38:	46a2      	mov	sl, r4
 8007e3a:	e7d2      	b.n	8007de2 <_vfiprintf_r+0xc6>
 8007e3c:	9b03      	ldr	r3, [sp, #12]
 8007e3e:	1d19      	adds	r1, r3, #4
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	9103      	str	r1, [sp, #12]
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	bfbb      	ittet	lt
 8007e48:	425b      	neglt	r3, r3
 8007e4a:	f042 0202 	orrlt.w	r2, r2, #2
 8007e4e:	9307      	strge	r3, [sp, #28]
 8007e50:	9307      	strlt	r3, [sp, #28]
 8007e52:	bfb8      	it	lt
 8007e54:	9204      	strlt	r2, [sp, #16]
 8007e56:	7823      	ldrb	r3, [r4, #0]
 8007e58:	2b2e      	cmp	r3, #46	@ 0x2e
 8007e5a:	d10a      	bne.n	8007e72 <_vfiprintf_r+0x156>
 8007e5c:	7863      	ldrb	r3, [r4, #1]
 8007e5e:	2b2a      	cmp	r3, #42	@ 0x2a
 8007e60:	d132      	bne.n	8007ec8 <_vfiprintf_r+0x1ac>
 8007e62:	9b03      	ldr	r3, [sp, #12]
 8007e64:	1d1a      	adds	r2, r3, #4
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	9203      	str	r2, [sp, #12]
 8007e6a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007e6e:	3402      	adds	r4, #2
 8007e70:	9305      	str	r3, [sp, #20]
 8007e72:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007f48 <_vfiprintf_r+0x22c>
 8007e76:	7821      	ldrb	r1, [r4, #0]
 8007e78:	2203      	movs	r2, #3
 8007e7a:	4650      	mov	r0, sl
 8007e7c:	f7f8 f9c8 	bl	8000210 <memchr>
 8007e80:	b138      	cbz	r0, 8007e92 <_vfiprintf_r+0x176>
 8007e82:	9b04      	ldr	r3, [sp, #16]
 8007e84:	eba0 000a 	sub.w	r0, r0, sl
 8007e88:	2240      	movs	r2, #64	@ 0x40
 8007e8a:	4082      	lsls	r2, r0
 8007e8c:	4313      	orrs	r3, r2
 8007e8e:	3401      	adds	r4, #1
 8007e90:	9304      	str	r3, [sp, #16]
 8007e92:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e96:	4829      	ldr	r0, [pc, #164]	@ (8007f3c <_vfiprintf_r+0x220>)
 8007e98:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007e9c:	2206      	movs	r2, #6
 8007e9e:	f7f8 f9b7 	bl	8000210 <memchr>
 8007ea2:	2800      	cmp	r0, #0
 8007ea4:	d03f      	beq.n	8007f26 <_vfiprintf_r+0x20a>
 8007ea6:	4b26      	ldr	r3, [pc, #152]	@ (8007f40 <_vfiprintf_r+0x224>)
 8007ea8:	bb1b      	cbnz	r3, 8007ef2 <_vfiprintf_r+0x1d6>
 8007eaa:	9b03      	ldr	r3, [sp, #12]
 8007eac:	3307      	adds	r3, #7
 8007eae:	f023 0307 	bic.w	r3, r3, #7
 8007eb2:	3308      	adds	r3, #8
 8007eb4:	9303      	str	r3, [sp, #12]
 8007eb6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007eb8:	443b      	add	r3, r7
 8007eba:	9309      	str	r3, [sp, #36]	@ 0x24
 8007ebc:	e76a      	b.n	8007d94 <_vfiprintf_r+0x78>
 8007ebe:	fb0c 3202 	mla	r2, ip, r2, r3
 8007ec2:	460c      	mov	r4, r1
 8007ec4:	2001      	movs	r0, #1
 8007ec6:	e7a8      	b.n	8007e1a <_vfiprintf_r+0xfe>
 8007ec8:	2300      	movs	r3, #0
 8007eca:	3401      	adds	r4, #1
 8007ecc:	9305      	str	r3, [sp, #20]
 8007ece:	4619      	mov	r1, r3
 8007ed0:	f04f 0c0a 	mov.w	ip, #10
 8007ed4:	4620      	mov	r0, r4
 8007ed6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007eda:	3a30      	subs	r2, #48	@ 0x30
 8007edc:	2a09      	cmp	r2, #9
 8007ede:	d903      	bls.n	8007ee8 <_vfiprintf_r+0x1cc>
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d0c6      	beq.n	8007e72 <_vfiprintf_r+0x156>
 8007ee4:	9105      	str	r1, [sp, #20]
 8007ee6:	e7c4      	b.n	8007e72 <_vfiprintf_r+0x156>
 8007ee8:	fb0c 2101 	mla	r1, ip, r1, r2
 8007eec:	4604      	mov	r4, r0
 8007eee:	2301      	movs	r3, #1
 8007ef0:	e7f0      	b.n	8007ed4 <_vfiprintf_r+0x1b8>
 8007ef2:	ab03      	add	r3, sp, #12
 8007ef4:	9300      	str	r3, [sp, #0]
 8007ef6:	462a      	mov	r2, r5
 8007ef8:	4b12      	ldr	r3, [pc, #72]	@ (8007f44 <_vfiprintf_r+0x228>)
 8007efa:	a904      	add	r1, sp, #16
 8007efc:	4630      	mov	r0, r6
 8007efe:	f3af 8000 	nop.w
 8007f02:	4607      	mov	r7, r0
 8007f04:	1c78      	adds	r0, r7, #1
 8007f06:	d1d6      	bne.n	8007eb6 <_vfiprintf_r+0x19a>
 8007f08:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007f0a:	07d9      	lsls	r1, r3, #31
 8007f0c:	d405      	bmi.n	8007f1a <_vfiprintf_r+0x1fe>
 8007f0e:	89ab      	ldrh	r3, [r5, #12]
 8007f10:	059a      	lsls	r2, r3, #22
 8007f12:	d402      	bmi.n	8007f1a <_vfiprintf_r+0x1fe>
 8007f14:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007f16:	f7ff fe83 	bl	8007c20 <__retarget_lock_release_recursive>
 8007f1a:	89ab      	ldrh	r3, [r5, #12]
 8007f1c:	065b      	lsls	r3, r3, #25
 8007f1e:	f53f af1f 	bmi.w	8007d60 <_vfiprintf_r+0x44>
 8007f22:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007f24:	e71e      	b.n	8007d64 <_vfiprintf_r+0x48>
 8007f26:	ab03      	add	r3, sp, #12
 8007f28:	9300      	str	r3, [sp, #0]
 8007f2a:	462a      	mov	r2, r5
 8007f2c:	4b05      	ldr	r3, [pc, #20]	@ (8007f44 <_vfiprintf_r+0x228>)
 8007f2e:	a904      	add	r1, sp, #16
 8007f30:	4630      	mov	r0, r6
 8007f32:	f000 f879 	bl	8008028 <_printf_i>
 8007f36:	e7e4      	b.n	8007f02 <_vfiprintf_r+0x1e6>
 8007f38:	0800b280 	.word	0x0800b280
 8007f3c:	0800b28a 	.word	0x0800b28a
 8007f40:	00000000 	.word	0x00000000
 8007f44:	08007cf7 	.word	0x08007cf7
 8007f48:	0800b286 	.word	0x0800b286

08007f4c <_printf_common>:
 8007f4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f50:	4616      	mov	r6, r2
 8007f52:	4698      	mov	r8, r3
 8007f54:	688a      	ldr	r2, [r1, #8]
 8007f56:	690b      	ldr	r3, [r1, #16]
 8007f58:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007f5c:	4293      	cmp	r3, r2
 8007f5e:	bfb8      	it	lt
 8007f60:	4613      	movlt	r3, r2
 8007f62:	6033      	str	r3, [r6, #0]
 8007f64:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007f68:	4607      	mov	r7, r0
 8007f6a:	460c      	mov	r4, r1
 8007f6c:	b10a      	cbz	r2, 8007f72 <_printf_common+0x26>
 8007f6e:	3301      	adds	r3, #1
 8007f70:	6033      	str	r3, [r6, #0]
 8007f72:	6823      	ldr	r3, [r4, #0]
 8007f74:	0699      	lsls	r1, r3, #26
 8007f76:	bf42      	ittt	mi
 8007f78:	6833      	ldrmi	r3, [r6, #0]
 8007f7a:	3302      	addmi	r3, #2
 8007f7c:	6033      	strmi	r3, [r6, #0]
 8007f7e:	6825      	ldr	r5, [r4, #0]
 8007f80:	f015 0506 	ands.w	r5, r5, #6
 8007f84:	d106      	bne.n	8007f94 <_printf_common+0x48>
 8007f86:	f104 0a19 	add.w	sl, r4, #25
 8007f8a:	68e3      	ldr	r3, [r4, #12]
 8007f8c:	6832      	ldr	r2, [r6, #0]
 8007f8e:	1a9b      	subs	r3, r3, r2
 8007f90:	42ab      	cmp	r3, r5
 8007f92:	dc26      	bgt.n	8007fe2 <_printf_common+0x96>
 8007f94:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007f98:	6822      	ldr	r2, [r4, #0]
 8007f9a:	3b00      	subs	r3, #0
 8007f9c:	bf18      	it	ne
 8007f9e:	2301      	movne	r3, #1
 8007fa0:	0692      	lsls	r2, r2, #26
 8007fa2:	d42b      	bmi.n	8007ffc <_printf_common+0xb0>
 8007fa4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007fa8:	4641      	mov	r1, r8
 8007faa:	4638      	mov	r0, r7
 8007fac:	47c8      	blx	r9
 8007fae:	3001      	adds	r0, #1
 8007fb0:	d01e      	beq.n	8007ff0 <_printf_common+0xa4>
 8007fb2:	6823      	ldr	r3, [r4, #0]
 8007fb4:	6922      	ldr	r2, [r4, #16]
 8007fb6:	f003 0306 	and.w	r3, r3, #6
 8007fba:	2b04      	cmp	r3, #4
 8007fbc:	bf02      	ittt	eq
 8007fbe:	68e5      	ldreq	r5, [r4, #12]
 8007fc0:	6833      	ldreq	r3, [r6, #0]
 8007fc2:	1aed      	subeq	r5, r5, r3
 8007fc4:	68a3      	ldr	r3, [r4, #8]
 8007fc6:	bf0c      	ite	eq
 8007fc8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007fcc:	2500      	movne	r5, #0
 8007fce:	4293      	cmp	r3, r2
 8007fd0:	bfc4      	itt	gt
 8007fd2:	1a9b      	subgt	r3, r3, r2
 8007fd4:	18ed      	addgt	r5, r5, r3
 8007fd6:	2600      	movs	r6, #0
 8007fd8:	341a      	adds	r4, #26
 8007fda:	42b5      	cmp	r5, r6
 8007fdc:	d11a      	bne.n	8008014 <_printf_common+0xc8>
 8007fde:	2000      	movs	r0, #0
 8007fe0:	e008      	b.n	8007ff4 <_printf_common+0xa8>
 8007fe2:	2301      	movs	r3, #1
 8007fe4:	4652      	mov	r2, sl
 8007fe6:	4641      	mov	r1, r8
 8007fe8:	4638      	mov	r0, r7
 8007fea:	47c8      	blx	r9
 8007fec:	3001      	adds	r0, #1
 8007fee:	d103      	bne.n	8007ff8 <_printf_common+0xac>
 8007ff0:	f04f 30ff 	mov.w	r0, #4294967295
 8007ff4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ff8:	3501      	adds	r5, #1
 8007ffa:	e7c6      	b.n	8007f8a <_printf_common+0x3e>
 8007ffc:	18e1      	adds	r1, r4, r3
 8007ffe:	1c5a      	adds	r2, r3, #1
 8008000:	2030      	movs	r0, #48	@ 0x30
 8008002:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008006:	4422      	add	r2, r4
 8008008:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800800c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008010:	3302      	adds	r3, #2
 8008012:	e7c7      	b.n	8007fa4 <_printf_common+0x58>
 8008014:	2301      	movs	r3, #1
 8008016:	4622      	mov	r2, r4
 8008018:	4641      	mov	r1, r8
 800801a:	4638      	mov	r0, r7
 800801c:	47c8      	blx	r9
 800801e:	3001      	adds	r0, #1
 8008020:	d0e6      	beq.n	8007ff0 <_printf_common+0xa4>
 8008022:	3601      	adds	r6, #1
 8008024:	e7d9      	b.n	8007fda <_printf_common+0x8e>
	...

08008028 <_printf_i>:
 8008028:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800802c:	7e0f      	ldrb	r7, [r1, #24]
 800802e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008030:	2f78      	cmp	r7, #120	@ 0x78
 8008032:	4691      	mov	r9, r2
 8008034:	4680      	mov	r8, r0
 8008036:	460c      	mov	r4, r1
 8008038:	469a      	mov	sl, r3
 800803a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800803e:	d807      	bhi.n	8008050 <_printf_i+0x28>
 8008040:	2f62      	cmp	r7, #98	@ 0x62
 8008042:	d80a      	bhi.n	800805a <_printf_i+0x32>
 8008044:	2f00      	cmp	r7, #0
 8008046:	f000 80d2 	beq.w	80081ee <_printf_i+0x1c6>
 800804a:	2f58      	cmp	r7, #88	@ 0x58
 800804c:	f000 80b9 	beq.w	80081c2 <_printf_i+0x19a>
 8008050:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008054:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008058:	e03a      	b.n	80080d0 <_printf_i+0xa8>
 800805a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800805e:	2b15      	cmp	r3, #21
 8008060:	d8f6      	bhi.n	8008050 <_printf_i+0x28>
 8008062:	a101      	add	r1, pc, #4	@ (adr r1, 8008068 <_printf_i+0x40>)
 8008064:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008068:	080080c1 	.word	0x080080c1
 800806c:	080080d5 	.word	0x080080d5
 8008070:	08008051 	.word	0x08008051
 8008074:	08008051 	.word	0x08008051
 8008078:	08008051 	.word	0x08008051
 800807c:	08008051 	.word	0x08008051
 8008080:	080080d5 	.word	0x080080d5
 8008084:	08008051 	.word	0x08008051
 8008088:	08008051 	.word	0x08008051
 800808c:	08008051 	.word	0x08008051
 8008090:	08008051 	.word	0x08008051
 8008094:	080081d5 	.word	0x080081d5
 8008098:	080080ff 	.word	0x080080ff
 800809c:	0800818f 	.word	0x0800818f
 80080a0:	08008051 	.word	0x08008051
 80080a4:	08008051 	.word	0x08008051
 80080a8:	080081f7 	.word	0x080081f7
 80080ac:	08008051 	.word	0x08008051
 80080b0:	080080ff 	.word	0x080080ff
 80080b4:	08008051 	.word	0x08008051
 80080b8:	08008051 	.word	0x08008051
 80080bc:	08008197 	.word	0x08008197
 80080c0:	6833      	ldr	r3, [r6, #0]
 80080c2:	1d1a      	adds	r2, r3, #4
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	6032      	str	r2, [r6, #0]
 80080c8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80080cc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80080d0:	2301      	movs	r3, #1
 80080d2:	e09d      	b.n	8008210 <_printf_i+0x1e8>
 80080d4:	6833      	ldr	r3, [r6, #0]
 80080d6:	6820      	ldr	r0, [r4, #0]
 80080d8:	1d19      	adds	r1, r3, #4
 80080da:	6031      	str	r1, [r6, #0]
 80080dc:	0606      	lsls	r6, r0, #24
 80080de:	d501      	bpl.n	80080e4 <_printf_i+0xbc>
 80080e0:	681d      	ldr	r5, [r3, #0]
 80080e2:	e003      	b.n	80080ec <_printf_i+0xc4>
 80080e4:	0645      	lsls	r5, r0, #25
 80080e6:	d5fb      	bpl.n	80080e0 <_printf_i+0xb8>
 80080e8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80080ec:	2d00      	cmp	r5, #0
 80080ee:	da03      	bge.n	80080f8 <_printf_i+0xd0>
 80080f0:	232d      	movs	r3, #45	@ 0x2d
 80080f2:	426d      	negs	r5, r5
 80080f4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80080f8:	4859      	ldr	r0, [pc, #356]	@ (8008260 <_printf_i+0x238>)
 80080fa:	230a      	movs	r3, #10
 80080fc:	e011      	b.n	8008122 <_printf_i+0xfa>
 80080fe:	6821      	ldr	r1, [r4, #0]
 8008100:	6833      	ldr	r3, [r6, #0]
 8008102:	0608      	lsls	r0, r1, #24
 8008104:	f853 5b04 	ldr.w	r5, [r3], #4
 8008108:	d402      	bmi.n	8008110 <_printf_i+0xe8>
 800810a:	0649      	lsls	r1, r1, #25
 800810c:	bf48      	it	mi
 800810e:	b2ad      	uxthmi	r5, r5
 8008110:	2f6f      	cmp	r7, #111	@ 0x6f
 8008112:	4853      	ldr	r0, [pc, #332]	@ (8008260 <_printf_i+0x238>)
 8008114:	6033      	str	r3, [r6, #0]
 8008116:	bf14      	ite	ne
 8008118:	230a      	movne	r3, #10
 800811a:	2308      	moveq	r3, #8
 800811c:	2100      	movs	r1, #0
 800811e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008122:	6866      	ldr	r6, [r4, #4]
 8008124:	60a6      	str	r6, [r4, #8]
 8008126:	2e00      	cmp	r6, #0
 8008128:	bfa2      	ittt	ge
 800812a:	6821      	ldrge	r1, [r4, #0]
 800812c:	f021 0104 	bicge.w	r1, r1, #4
 8008130:	6021      	strge	r1, [r4, #0]
 8008132:	b90d      	cbnz	r5, 8008138 <_printf_i+0x110>
 8008134:	2e00      	cmp	r6, #0
 8008136:	d04b      	beq.n	80081d0 <_printf_i+0x1a8>
 8008138:	4616      	mov	r6, r2
 800813a:	fbb5 f1f3 	udiv	r1, r5, r3
 800813e:	fb03 5711 	mls	r7, r3, r1, r5
 8008142:	5dc7      	ldrb	r7, [r0, r7]
 8008144:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008148:	462f      	mov	r7, r5
 800814a:	42bb      	cmp	r3, r7
 800814c:	460d      	mov	r5, r1
 800814e:	d9f4      	bls.n	800813a <_printf_i+0x112>
 8008150:	2b08      	cmp	r3, #8
 8008152:	d10b      	bne.n	800816c <_printf_i+0x144>
 8008154:	6823      	ldr	r3, [r4, #0]
 8008156:	07df      	lsls	r7, r3, #31
 8008158:	d508      	bpl.n	800816c <_printf_i+0x144>
 800815a:	6923      	ldr	r3, [r4, #16]
 800815c:	6861      	ldr	r1, [r4, #4]
 800815e:	4299      	cmp	r1, r3
 8008160:	bfde      	ittt	le
 8008162:	2330      	movle	r3, #48	@ 0x30
 8008164:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008168:	f106 36ff 	addle.w	r6, r6, #4294967295
 800816c:	1b92      	subs	r2, r2, r6
 800816e:	6122      	str	r2, [r4, #16]
 8008170:	f8cd a000 	str.w	sl, [sp]
 8008174:	464b      	mov	r3, r9
 8008176:	aa03      	add	r2, sp, #12
 8008178:	4621      	mov	r1, r4
 800817a:	4640      	mov	r0, r8
 800817c:	f7ff fee6 	bl	8007f4c <_printf_common>
 8008180:	3001      	adds	r0, #1
 8008182:	d14a      	bne.n	800821a <_printf_i+0x1f2>
 8008184:	f04f 30ff 	mov.w	r0, #4294967295
 8008188:	b004      	add	sp, #16
 800818a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800818e:	6823      	ldr	r3, [r4, #0]
 8008190:	f043 0320 	orr.w	r3, r3, #32
 8008194:	6023      	str	r3, [r4, #0]
 8008196:	4833      	ldr	r0, [pc, #204]	@ (8008264 <_printf_i+0x23c>)
 8008198:	2778      	movs	r7, #120	@ 0x78
 800819a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800819e:	6823      	ldr	r3, [r4, #0]
 80081a0:	6831      	ldr	r1, [r6, #0]
 80081a2:	061f      	lsls	r7, r3, #24
 80081a4:	f851 5b04 	ldr.w	r5, [r1], #4
 80081a8:	d402      	bmi.n	80081b0 <_printf_i+0x188>
 80081aa:	065f      	lsls	r7, r3, #25
 80081ac:	bf48      	it	mi
 80081ae:	b2ad      	uxthmi	r5, r5
 80081b0:	6031      	str	r1, [r6, #0]
 80081b2:	07d9      	lsls	r1, r3, #31
 80081b4:	bf44      	itt	mi
 80081b6:	f043 0320 	orrmi.w	r3, r3, #32
 80081ba:	6023      	strmi	r3, [r4, #0]
 80081bc:	b11d      	cbz	r5, 80081c6 <_printf_i+0x19e>
 80081be:	2310      	movs	r3, #16
 80081c0:	e7ac      	b.n	800811c <_printf_i+0xf4>
 80081c2:	4827      	ldr	r0, [pc, #156]	@ (8008260 <_printf_i+0x238>)
 80081c4:	e7e9      	b.n	800819a <_printf_i+0x172>
 80081c6:	6823      	ldr	r3, [r4, #0]
 80081c8:	f023 0320 	bic.w	r3, r3, #32
 80081cc:	6023      	str	r3, [r4, #0]
 80081ce:	e7f6      	b.n	80081be <_printf_i+0x196>
 80081d0:	4616      	mov	r6, r2
 80081d2:	e7bd      	b.n	8008150 <_printf_i+0x128>
 80081d4:	6833      	ldr	r3, [r6, #0]
 80081d6:	6825      	ldr	r5, [r4, #0]
 80081d8:	6961      	ldr	r1, [r4, #20]
 80081da:	1d18      	adds	r0, r3, #4
 80081dc:	6030      	str	r0, [r6, #0]
 80081de:	062e      	lsls	r6, r5, #24
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	d501      	bpl.n	80081e8 <_printf_i+0x1c0>
 80081e4:	6019      	str	r1, [r3, #0]
 80081e6:	e002      	b.n	80081ee <_printf_i+0x1c6>
 80081e8:	0668      	lsls	r0, r5, #25
 80081ea:	d5fb      	bpl.n	80081e4 <_printf_i+0x1bc>
 80081ec:	8019      	strh	r1, [r3, #0]
 80081ee:	2300      	movs	r3, #0
 80081f0:	6123      	str	r3, [r4, #16]
 80081f2:	4616      	mov	r6, r2
 80081f4:	e7bc      	b.n	8008170 <_printf_i+0x148>
 80081f6:	6833      	ldr	r3, [r6, #0]
 80081f8:	1d1a      	adds	r2, r3, #4
 80081fa:	6032      	str	r2, [r6, #0]
 80081fc:	681e      	ldr	r6, [r3, #0]
 80081fe:	6862      	ldr	r2, [r4, #4]
 8008200:	2100      	movs	r1, #0
 8008202:	4630      	mov	r0, r6
 8008204:	f7f8 f804 	bl	8000210 <memchr>
 8008208:	b108      	cbz	r0, 800820e <_printf_i+0x1e6>
 800820a:	1b80      	subs	r0, r0, r6
 800820c:	6060      	str	r0, [r4, #4]
 800820e:	6863      	ldr	r3, [r4, #4]
 8008210:	6123      	str	r3, [r4, #16]
 8008212:	2300      	movs	r3, #0
 8008214:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008218:	e7aa      	b.n	8008170 <_printf_i+0x148>
 800821a:	6923      	ldr	r3, [r4, #16]
 800821c:	4632      	mov	r2, r6
 800821e:	4649      	mov	r1, r9
 8008220:	4640      	mov	r0, r8
 8008222:	47d0      	blx	sl
 8008224:	3001      	adds	r0, #1
 8008226:	d0ad      	beq.n	8008184 <_printf_i+0x15c>
 8008228:	6823      	ldr	r3, [r4, #0]
 800822a:	079b      	lsls	r3, r3, #30
 800822c:	d413      	bmi.n	8008256 <_printf_i+0x22e>
 800822e:	68e0      	ldr	r0, [r4, #12]
 8008230:	9b03      	ldr	r3, [sp, #12]
 8008232:	4298      	cmp	r0, r3
 8008234:	bfb8      	it	lt
 8008236:	4618      	movlt	r0, r3
 8008238:	e7a6      	b.n	8008188 <_printf_i+0x160>
 800823a:	2301      	movs	r3, #1
 800823c:	4632      	mov	r2, r6
 800823e:	4649      	mov	r1, r9
 8008240:	4640      	mov	r0, r8
 8008242:	47d0      	blx	sl
 8008244:	3001      	adds	r0, #1
 8008246:	d09d      	beq.n	8008184 <_printf_i+0x15c>
 8008248:	3501      	adds	r5, #1
 800824a:	68e3      	ldr	r3, [r4, #12]
 800824c:	9903      	ldr	r1, [sp, #12]
 800824e:	1a5b      	subs	r3, r3, r1
 8008250:	42ab      	cmp	r3, r5
 8008252:	dcf2      	bgt.n	800823a <_printf_i+0x212>
 8008254:	e7eb      	b.n	800822e <_printf_i+0x206>
 8008256:	2500      	movs	r5, #0
 8008258:	f104 0619 	add.w	r6, r4, #25
 800825c:	e7f5      	b.n	800824a <_printf_i+0x222>
 800825e:	bf00      	nop
 8008260:	0800b291 	.word	0x0800b291
 8008264:	0800b2a2 	.word	0x0800b2a2

08008268 <__sflush_r>:
 8008268:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800826c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008270:	0716      	lsls	r6, r2, #28
 8008272:	4605      	mov	r5, r0
 8008274:	460c      	mov	r4, r1
 8008276:	d454      	bmi.n	8008322 <__sflush_r+0xba>
 8008278:	684b      	ldr	r3, [r1, #4]
 800827a:	2b00      	cmp	r3, #0
 800827c:	dc02      	bgt.n	8008284 <__sflush_r+0x1c>
 800827e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008280:	2b00      	cmp	r3, #0
 8008282:	dd48      	ble.n	8008316 <__sflush_r+0xae>
 8008284:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008286:	2e00      	cmp	r6, #0
 8008288:	d045      	beq.n	8008316 <__sflush_r+0xae>
 800828a:	2300      	movs	r3, #0
 800828c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008290:	682f      	ldr	r7, [r5, #0]
 8008292:	6a21      	ldr	r1, [r4, #32]
 8008294:	602b      	str	r3, [r5, #0]
 8008296:	d030      	beq.n	80082fa <__sflush_r+0x92>
 8008298:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800829a:	89a3      	ldrh	r3, [r4, #12]
 800829c:	0759      	lsls	r1, r3, #29
 800829e:	d505      	bpl.n	80082ac <__sflush_r+0x44>
 80082a0:	6863      	ldr	r3, [r4, #4]
 80082a2:	1ad2      	subs	r2, r2, r3
 80082a4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80082a6:	b10b      	cbz	r3, 80082ac <__sflush_r+0x44>
 80082a8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80082aa:	1ad2      	subs	r2, r2, r3
 80082ac:	2300      	movs	r3, #0
 80082ae:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80082b0:	6a21      	ldr	r1, [r4, #32]
 80082b2:	4628      	mov	r0, r5
 80082b4:	47b0      	blx	r6
 80082b6:	1c43      	adds	r3, r0, #1
 80082b8:	89a3      	ldrh	r3, [r4, #12]
 80082ba:	d106      	bne.n	80082ca <__sflush_r+0x62>
 80082bc:	6829      	ldr	r1, [r5, #0]
 80082be:	291d      	cmp	r1, #29
 80082c0:	d82b      	bhi.n	800831a <__sflush_r+0xb2>
 80082c2:	4a2a      	ldr	r2, [pc, #168]	@ (800836c <__sflush_r+0x104>)
 80082c4:	410a      	asrs	r2, r1
 80082c6:	07d6      	lsls	r6, r2, #31
 80082c8:	d427      	bmi.n	800831a <__sflush_r+0xb2>
 80082ca:	2200      	movs	r2, #0
 80082cc:	6062      	str	r2, [r4, #4]
 80082ce:	04d9      	lsls	r1, r3, #19
 80082d0:	6922      	ldr	r2, [r4, #16]
 80082d2:	6022      	str	r2, [r4, #0]
 80082d4:	d504      	bpl.n	80082e0 <__sflush_r+0x78>
 80082d6:	1c42      	adds	r2, r0, #1
 80082d8:	d101      	bne.n	80082de <__sflush_r+0x76>
 80082da:	682b      	ldr	r3, [r5, #0]
 80082dc:	b903      	cbnz	r3, 80082e0 <__sflush_r+0x78>
 80082de:	6560      	str	r0, [r4, #84]	@ 0x54
 80082e0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80082e2:	602f      	str	r7, [r5, #0]
 80082e4:	b1b9      	cbz	r1, 8008316 <__sflush_r+0xae>
 80082e6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80082ea:	4299      	cmp	r1, r3
 80082ec:	d002      	beq.n	80082f4 <__sflush_r+0x8c>
 80082ee:	4628      	mov	r0, r5
 80082f0:	f7ff fca0 	bl	8007c34 <_free_r>
 80082f4:	2300      	movs	r3, #0
 80082f6:	6363      	str	r3, [r4, #52]	@ 0x34
 80082f8:	e00d      	b.n	8008316 <__sflush_r+0xae>
 80082fa:	2301      	movs	r3, #1
 80082fc:	4628      	mov	r0, r5
 80082fe:	47b0      	blx	r6
 8008300:	4602      	mov	r2, r0
 8008302:	1c50      	adds	r0, r2, #1
 8008304:	d1c9      	bne.n	800829a <__sflush_r+0x32>
 8008306:	682b      	ldr	r3, [r5, #0]
 8008308:	2b00      	cmp	r3, #0
 800830a:	d0c6      	beq.n	800829a <__sflush_r+0x32>
 800830c:	2b1d      	cmp	r3, #29
 800830e:	d001      	beq.n	8008314 <__sflush_r+0xac>
 8008310:	2b16      	cmp	r3, #22
 8008312:	d11e      	bne.n	8008352 <__sflush_r+0xea>
 8008314:	602f      	str	r7, [r5, #0]
 8008316:	2000      	movs	r0, #0
 8008318:	e022      	b.n	8008360 <__sflush_r+0xf8>
 800831a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800831e:	b21b      	sxth	r3, r3
 8008320:	e01b      	b.n	800835a <__sflush_r+0xf2>
 8008322:	690f      	ldr	r7, [r1, #16]
 8008324:	2f00      	cmp	r7, #0
 8008326:	d0f6      	beq.n	8008316 <__sflush_r+0xae>
 8008328:	0793      	lsls	r3, r2, #30
 800832a:	680e      	ldr	r6, [r1, #0]
 800832c:	bf08      	it	eq
 800832e:	694b      	ldreq	r3, [r1, #20]
 8008330:	600f      	str	r7, [r1, #0]
 8008332:	bf18      	it	ne
 8008334:	2300      	movne	r3, #0
 8008336:	eba6 0807 	sub.w	r8, r6, r7
 800833a:	608b      	str	r3, [r1, #8]
 800833c:	f1b8 0f00 	cmp.w	r8, #0
 8008340:	dde9      	ble.n	8008316 <__sflush_r+0xae>
 8008342:	6a21      	ldr	r1, [r4, #32]
 8008344:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008346:	4643      	mov	r3, r8
 8008348:	463a      	mov	r2, r7
 800834a:	4628      	mov	r0, r5
 800834c:	47b0      	blx	r6
 800834e:	2800      	cmp	r0, #0
 8008350:	dc08      	bgt.n	8008364 <__sflush_r+0xfc>
 8008352:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008356:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800835a:	81a3      	strh	r3, [r4, #12]
 800835c:	f04f 30ff 	mov.w	r0, #4294967295
 8008360:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008364:	4407      	add	r7, r0
 8008366:	eba8 0800 	sub.w	r8, r8, r0
 800836a:	e7e7      	b.n	800833c <__sflush_r+0xd4>
 800836c:	dfbffffe 	.word	0xdfbffffe

08008370 <_fflush_r>:
 8008370:	b538      	push	{r3, r4, r5, lr}
 8008372:	690b      	ldr	r3, [r1, #16]
 8008374:	4605      	mov	r5, r0
 8008376:	460c      	mov	r4, r1
 8008378:	b913      	cbnz	r3, 8008380 <_fflush_r+0x10>
 800837a:	2500      	movs	r5, #0
 800837c:	4628      	mov	r0, r5
 800837e:	bd38      	pop	{r3, r4, r5, pc}
 8008380:	b118      	cbz	r0, 800838a <_fflush_r+0x1a>
 8008382:	6a03      	ldr	r3, [r0, #32]
 8008384:	b90b      	cbnz	r3, 800838a <_fflush_r+0x1a>
 8008386:	f7ff fa43 	bl	8007810 <__sinit>
 800838a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800838e:	2b00      	cmp	r3, #0
 8008390:	d0f3      	beq.n	800837a <_fflush_r+0xa>
 8008392:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008394:	07d0      	lsls	r0, r2, #31
 8008396:	d404      	bmi.n	80083a2 <_fflush_r+0x32>
 8008398:	0599      	lsls	r1, r3, #22
 800839a:	d402      	bmi.n	80083a2 <_fflush_r+0x32>
 800839c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800839e:	f7ff fc3e 	bl	8007c1e <__retarget_lock_acquire_recursive>
 80083a2:	4628      	mov	r0, r5
 80083a4:	4621      	mov	r1, r4
 80083a6:	f7ff ff5f 	bl	8008268 <__sflush_r>
 80083aa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80083ac:	07da      	lsls	r2, r3, #31
 80083ae:	4605      	mov	r5, r0
 80083b0:	d4e4      	bmi.n	800837c <_fflush_r+0xc>
 80083b2:	89a3      	ldrh	r3, [r4, #12]
 80083b4:	059b      	lsls	r3, r3, #22
 80083b6:	d4e1      	bmi.n	800837c <_fflush_r+0xc>
 80083b8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80083ba:	f7ff fc31 	bl	8007c20 <__retarget_lock_release_recursive>
 80083be:	e7dd      	b.n	800837c <_fflush_r+0xc>

080083c0 <__swhatbuf_r>:
 80083c0:	b570      	push	{r4, r5, r6, lr}
 80083c2:	460c      	mov	r4, r1
 80083c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80083c8:	2900      	cmp	r1, #0
 80083ca:	b096      	sub	sp, #88	@ 0x58
 80083cc:	4615      	mov	r5, r2
 80083ce:	461e      	mov	r6, r3
 80083d0:	da0d      	bge.n	80083ee <__swhatbuf_r+0x2e>
 80083d2:	89a3      	ldrh	r3, [r4, #12]
 80083d4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80083d8:	f04f 0100 	mov.w	r1, #0
 80083dc:	bf14      	ite	ne
 80083de:	2340      	movne	r3, #64	@ 0x40
 80083e0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80083e4:	2000      	movs	r0, #0
 80083e6:	6031      	str	r1, [r6, #0]
 80083e8:	602b      	str	r3, [r5, #0]
 80083ea:	b016      	add	sp, #88	@ 0x58
 80083ec:	bd70      	pop	{r4, r5, r6, pc}
 80083ee:	466a      	mov	r2, sp
 80083f0:	f000 f848 	bl	8008484 <_fstat_r>
 80083f4:	2800      	cmp	r0, #0
 80083f6:	dbec      	blt.n	80083d2 <__swhatbuf_r+0x12>
 80083f8:	9901      	ldr	r1, [sp, #4]
 80083fa:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80083fe:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008402:	4259      	negs	r1, r3
 8008404:	4159      	adcs	r1, r3
 8008406:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800840a:	e7eb      	b.n	80083e4 <__swhatbuf_r+0x24>

0800840c <__smakebuf_r>:
 800840c:	898b      	ldrh	r3, [r1, #12]
 800840e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008410:	079d      	lsls	r5, r3, #30
 8008412:	4606      	mov	r6, r0
 8008414:	460c      	mov	r4, r1
 8008416:	d507      	bpl.n	8008428 <__smakebuf_r+0x1c>
 8008418:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800841c:	6023      	str	r3, [r4, #0]
 800841e:	6123      	str	r3, [r4, #16]
 8008420:	2301      	movs	r3, #1
 8008422:	6163      	str	r3, [r4, #20]
 8008424:	b003      	add	sp, #12
 8008426:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008428:	ab01      	add	r3, sp, #4
 800842a:	466a      	mov	r2, sp
 800842c:	f7ff ffc8 	bl	80083c0 <__swhatbuf_r>
 8008430:	9f00      	ldr	r7, [sp, #0]
 8008432:	4605      	mov	r5, r0
 8008434:	4639      	mov	r1, r7
 8008436:	4630      	mov	r0, r6
 8008438:	f7ff f8d2 	bl	80075e0 <_malloc_r>
 800843c:	b948      	cbnz	r0, 8008452 <__smakebuf_r+0x46>
 800843e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008442:	059a      	lsls	r2, r3, #22
 8008444:	d4ee      	bmi.n	8008424 <__smakebuf_r+0x18>
 8008446:	f023 0303 	bic.w	r3, r3, #3
 800844a:	f043 0302 	orr.w	r3, r3, #2
 800844e:	81a3      	strh	r3, [r4, #12]
 8008450:	e7e2      	b.n	8008418 <__smakebuf_r+0xc>
 8008452:	89a3      	ldrh	r3, [r4, #12]
 8008454:	6020      	str	r0, [r4, #0]
 8008456:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800845a:	81a3      	strh	r3, [r4, #12]
 800845c:	9b01      	ldr	r3, [sp, #4]
 800845e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008462:	b15b      	cbz	r3, 800847c <__smakebuf_r+0x70>
 8008464:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008468:	4630      	mov	r0, r6
 800846a:	f000 f81d 	bl	80084a8 <_isatty_r>
 800846e:	b128      	cbz	r0, 800847c <__smakebuf_r+0x70>
 8008470:	89a3      	ldrh	r3, [r4, #12]
 8008472:	f023 0303 	bic.w	r3, r3, #3
 8008476:	f043 0301 	orr.w	r3, r3, #1
 800847a:	81a3      	strh	r3, [r4, #12]
 800847c:	89a3      	ldrh	r3, [r4, #12]
 800847e:	431d      	orrs	r5, r3
 8008480:	81a5      	strh	r5, [r4, #12]
 8008482:	e7cf      	b.n	8008424 <__smakebuf_r+0x18>

08008484 <_fstat_r>:
 8008484:	b538      	push	{r3, r4, r5, lr}
 8008486:	4d07      	ldr	r5, [pc, #28]	@ (80084a4 <_fstat_r+0x20>)
 8008488:	2300      	movs	r3, #0
 800848a:	4604      	mov	r4, r0
 800848c:	4608      	mov	r0, r1
 800848e:	4611      	mov	r1, r2
 8008490:	602b      	str	r3, [r5, #0]
 8008492:	f7f9 ff72 	bl	800237a <_fstat>
 8008496:	1c43      	adds	r3, r0, #1
 8008498:	d102      	bne.n	80084a0 <_fstat_r+0x1c>
 800849a:	682b      	ldr	r3, [r5, #0]
 800849c:	b103      	cbz	r3, 80084a0 <_fstat_r+0x1c>
 800849e:	6023      	str	r3, [r4, #0]
 80084a0:	bd38      	pop	{r3, r4, r5, pc}
 80084a2:	bf00      	nop
 80084a4:	200004a8 	.word	0x200004a8

080084a8 <_isatty_r>:
 80084a8:	b538      	push	{r3, r4, r5, lr}
 80084aa:	4d06      	ldr	r5, [pc, #24]	@ (80084c4 <_isatty_r+0x1c>)
 80084ac:	2300      	movs	r3, #0
 80084ae:	4604      	mov	r4, r0
 80084b0:	4608      	mov	r0, r1
 80084b2:	602b      	str	r3, [r5, #0]
 80084b4:	f7f9 ff71 	bl	800239a <_isatty>
 80084b8:	1c43      	adds	r3, r0, #1
 80084ba:	d102      	bne.n	80084c2 <_isatty_r+0x1a>
 80084bc:	682b      	ldr	r3, [r5, #0]
 80084be:	b103      	cbz	r3, 80084c2 <_isatty_r+0x1a>
 80084c0:	6023      	str	r3, [r4, #0]
 80084c2:	bd38      	pop	{r3, r4, r5, pc}
 80084c4:	200004a8 	.word	0x200004a8

080084c8 <_init>:
 80084c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084ca:	bf00      	nop
 80084cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80084ce:	bc08      	pop	{r3}
 80084d0:	469e      	mov	lr, r3
 80084d2:	4770      	bx	lr

080084d4 <_fini>:
 80084d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084d6:	bf00      	nop
 80084d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80084da:	bc08      	pop	{r3}
 80084dc:	469e      	mov	lr, r3
 80084de:	4770      	bx	lr
