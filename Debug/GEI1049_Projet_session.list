
GEI1049_Projet_session.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c094  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003db0  0800c268  0800c268  0000d268  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010018  08010018  00012208  2**0
                  CONTENTS
  4 .ARM          00000008  08010018  08010018  00011018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010020  08010020  00012208  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010020  08010020  00011020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08010024  08010024  00011024  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000208  20000000  08010028  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000424  20000208  08010230  00012208  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000062c  08010230  0001262c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00012208  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017543  00000000  00000000  00012238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003b56  00000000  00000000  0002977b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014f0  00000000  00000000  0002d2d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000101d  00000000  00000000  0002e7c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026a44  00000000  00000000  0002f7e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e902  00000000  00000000  00056229  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d8a6d  00000000  00000000  00074b2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014d598  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006b44  00000000  00000000  0014d5dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  00154120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000208 	.word	0x20000208
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800c24c 	.word	0x0800c24c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000020c 	.word	0x2000020c
 800020c:	0800c24c 	.word	0x0800c24c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9a0 	b.w	8001020 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	@ (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	460c      	mov	r4, r1
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d14e      	bne.n	8000e0e <__udivmoddi4+0xaa>
 8000d70:	4694      	mov	ip, r2
 8000d72:	458c      	cmp	ip, r1
 8000d74:	4686      	mov	lr, r0
 8000d76:	fab2 f282 	clz	r2, r2
 8000d7a:	d962      	bls.n	8000e42 <__udivmoddi4+0xde>
 8000d7c:	b14a      	cbz	r2, 8000d92 <__udivmoddi4+0x2e>
 8000d7e:	f1c2 0320 	rsb	r3, r2, #32
 8000d82:	4091      	lsls	r1, r2
 8000d84:	fa20 f303 	lsr.w	r3, r0, r3
 8000d88:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d8c:	4319      	orrs	r1, r3
 8000d8e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d92:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d96:	fa1f f68c 	uxth.w	r6, ip
 8000d9a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d9e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000da2:	fb07 1114 	mls	r1, r7, r4, r1
 8000da6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000daa:	fb04 f106 	mul.w	r1, r4, r6
 8000dae:	4299      	cmp	r1, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x64>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000dba:	f080 8112 	bcs.w	8000fe2 <__udivmoddi4+0x27e>
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	f240 810f 	bls.w	8000fe2 <__udivmoddi4+0x27e>
 8000dc4:	3c02      	subs	r4, #2
 8000dc6:	4463      	add	r3, ip
 8000dc8:	1a59      	subs	r1, r3, r1
 8000dca:	fa1f f38e 	uxth.w	r3, lr
 8000dce:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dd2:	fb07 1110 	mls	r1, r7, r0, r1
 8000dd6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dda:	fb00 f606 	mul.w	r6, r0, r6
 8000dde:	429e      	cmp	r6, r3
 8000de0:	d90a      	bls.n	8000df8 <__udivmoddi4+0x94>
 8000de2:	eb1c 0303 	adds.w	r3, ip, r3
 8000de6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dea:	f080 80fc 	bcs.w	8000fe6 <__udivmoddi4+0x282>
 8000dee:	429e      	cmp	r6, r3
 8000df0:	f240 80f9 	bls.w	8000fe6 <__udivmoddi4+0x282>
 8000df4:	4463      	add	r3, ip
 8000df6:	3802      	subs	r0, #2
 8000df8:	1b9b      	subs	r3, r3, r6
 8000dfa:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dfe:	2100      	movs	r1, #0
 8000e00:	b11d      	cbz	r5, 8000e0a <__udivmoddi4+0xa6>
 8000e02:	40d3      	lsrs	r3, r2
 8000e04:	2200      	movs	r2, #0
 8000e06:	e9c5 3200 	strd	r3, r2, [r5]
 8000e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d905      	bls.n	8000e1e <__udivmoddi4+0xba>
 8000e12:	b10d      	cbz	r5, 8000e18 <__udivmoddi4+0xb4>
 8000e14:	e9c5 0100 	strd	r0, r1, [r5]
 8000e18:	2100      	movs	r1, #0
 8000e1a:	4608      	mov	r0, r1
 8000e1c:	e7f5      	b.n	8000e0a <__udivmoddi4+0xa6>
 8000e1e:	fab3 f183 	clz	r1, r3
 8000e22:	2900      	cmp	r1, #0
 8000e24:	d146      	bne.n	8000eb4 <__udivmoddi4+0x150>
 8000e26:	42a3      	cmp	r3, r4
 8000e28:	d302      	bcc.n	8000e30 <__udivmoddi4+0xcc>
 8000e2a:	4290      	cmp	r0, r2
 8000e2c:	f0c0 80f0 	bcc.w	8001010 <__udivmoddi4+0x2ac>
 8000e30:	1a86      	subs	r6, r0, r2
 8000e32:	eb64 0303 	sbc.w	r3, r4, r3
 8000e36:	2001      	movs	r0, #1
 8000e38:	2d00      	cmp	r5, #0
 8000e3a:	d0e6      	beq.n	8000e0a <__udivmoddi4+0xa6>
 8000e3c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e40:	e7e3      	b.n	8000e0a <__udivmoddi4+0xa6>
 8000e42:	2a00      	cmp	r2, #0
 8000e44:	f040 8090 	bne.w	8000f68 <__udivmoddi4+0x204>
 8000e48:	eba1 040c 	sub.w	r4, r1, ip
 8000e4c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e50:	fa1f f78c 	uxth.w	r7, ip
 8000e54:	2101      	movs	r1, #1
 8000e56:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e5a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e5e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e62:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e66:	fb07 f006 	mul.w	r0, r7, r6
 8000e6a:	4298      	cmp	r0, r3
 8000e6c:	d908      	bls.n	8000e80 <__udivmoddi4+0x11c>
 8000e6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e72:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e76:	d202      	bcs.n	8000e7e <__udivmoddi4+0x11a>
 8000e78:	4298      	cmp	r0, r3
 8000e7a:	f200 80cd 	bhi.w	8001018 <__udivmoddi4+0x2b4>
 8000e7e:	4626      	mov	r6, r4
 8000e80:	1a1c      	subs	r4, r3, r0
 8000e82:	fa1f f38e 	uxth.w	r3, lr
 8000e86:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e8a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e8e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e92:	fb00 f707 	mul.w	r7, r0, r7
 8000e96:	429f      	cmp	r7, r3
 8000e98:	d908      	bls.n	8000eac <__udivmoddi4+0x148>
 8000e9a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e9e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ea2:	d202      	bcs.n	8000eaa <__udivmoddi4+0x146>
 8000ea4:	429f      	cmp	r7, r3
 8000ea6:	f200 80b0 	bhi.w	800100a <__udivmoddi4+0x2a6>
 8000eaa:	4620      	mov	r0, r4
 8000eac:	1bdb      	subs	r3, r3, r7
 8000eae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000eb2:	e7a5      	b.n	8000e00 <__udivmoddi4+0x9c>
 8000eb4:	f1c1 0620 	rsb	r6, r1, #32
 8000eb8:	408b      	lsls	r3, r1
 8000eba:	fa22 f706 	lsr.w	r7, r2, r6
 8000ebe:	431f      	orrs	r7, r3
 8000ec0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ec4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ec8:	ea43 030c 	orr.w	r3, r3, ip
 8000ecc:	40f4      	lsrs	r4, r6
 8000ece:	fa00 f801 	lsl.w	r8, r0, r1
 8000ed2:	0c38      	lsrs	r0, r7, #16
 8000ed4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ed8:	fbb4 fef0 	udiv	lr, r4, r0
 8000edc:	fa1f fc87 	uxth.w	ip, r7
 8000ee0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ee4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ee8:	fb0e f90c 	mul.w	r9, lr, ip
 8000eec:	45a1      	cmp	r9, r4
 8000eee:	fa02 f201 	lsl.w	r2, r2, r1
 8000ef2:	d90a      	bls.n	8000f0a <__udivmoddi4+0x1a6>
 8000ef4:	193c      	adds	r4, r7, r4
 8000ef6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000efa:	f080 8084 	bcs.w	8001006 <__udivmoddi4+0x2a2>
 8000efe:	45a1      	cmp	r9, r4
 8000f00:	f240 8081 	bls.w	8001006 <__udivmoddi4+0x2a2>
 8000f04:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f08:	443c      	add	r4, r7
 8000f0a:	eba4 0409 	sub.w	r4, r4, r9
 8000f0e:	fa1f f983 	uxth.w	r9, r3
 8000f12:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f16:	fb00 4413 	mls	r4, r0, r3, r4
 8000f1a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f1e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f22:	45a4      	cmp	ip, r4
 8000f24:	d907      	bls.n	8000f36 <__udivmoddi4+0x1d2>
 8000f26:	193c      	adds	r4, r7, r4
 8000f28:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f2c:	d267      	bcs.n	8000ffe <__udivmoddi4+0x29a>
 8000f2e:	45a4      	cmp	ip, r4
 8000f30:	d965      	bls.n	8000ffe <__udivmoddi4+0x29a>
 8000f32:	3b02      	subs	r3, #2
 8000f34:	443c      	add	r4, r7
 8000f36:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f3a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f3e:	eba4 040c 	sub.w	r4, r4, ip
 8000f42:	429c      	cmp	r4, r3
 8000f44:	46ce      	mov	lr, r9
 8000f46:	469c      	mov	ip, r3
 8000f48:	d351      	bcc.n	8000fee <__udivmoddi4+0x28a>
 8000f4a:	d04e      	beq.n	8000fea <__udivmoddi4+0x286>
 8000f4c:	b155      	cbz	r5, 8000f64 <__udivmoddi4+0x200>
 8000f4e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f52:	eb64 040c 	sbc.w	r4, r4, ip
 8000f56:	fa04 f606 	lsl.w	r6, r4, r6
 8000f5a:	40cb      	lsrs	r3, r1
 8000f5c:	431e      	orrs	r6, r3
 8000f5e:	40cc      	lsrs	r4, r1
 8000f60:	e9c5 6400 	strd	r6, r4, [r5]
 8000f64:	2100      	movs	r1, #0
 8000f66:	e750      	b.n	8000e0a <__udivmoddi4+0xa6>
 8000f68:	f1c2 0320 	rsb	r3, r2, #32
 8000f6c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f70:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f74:	fa24 f303 	lsr.w	r3, r4, r3
 8000f78:	4094      	lsls	r4, r2
 8000f7a:	430c      	orrs	r4, r1
 8000f7c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f80:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f84:	fa1f f78c 	uxth.w	r7, ip
 8000f88:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f8c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f90:	0c23      	lsrs	r3, r4, #16
 8000f92:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f96:	fb00 f107 	mul.w	r1, r0, r7
 8000f9a:	4299      	cmp	r1, r3
 8000f9c:	d908      	bls.n	8000fb0 <__udivmoddi4+0x24c>
 8000f9e:	eb1c 0303 	adds.w	r3, ip, r3
 8000fa2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000fa6:	d22c      	bcs.n	8001002 <__udivmoddi4+0x29e>
 8000fa8:	4299      	cmp	r1, r3
 8000faa:	d92a      	bls.n	8001002 <__udivmoddi4+0x29e>
 8000fac:	3802      	subs	r0, #2
 8000fae:	4463      	add	r3, ip
 8000fb0:	1a5b      	subs	r3, r3, r1
 8000fb2:	b2a4      	uxth	r4, r4
 8000fb4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fb8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fbc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fc0:	fb01 f307 	mul.w	r3, r1, r7
 8000fc4:	42a3      	cmp	r3, r4
 8000fc6:	d908      	bls.n	8000fda <__udivmoddi4+0x276>
 8000fc8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fcc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fd0:	d213      	bcs.n	8000ffa <__udivmoddi4+0x296>
 8000fd2:	42a3      	cmp	r3, r4
 8000fd4:	d911      	bls.n	8000ffa <__udivmoddi4+0x296>
 8000fd6:	3902      	subs	r1, #2
 8000fd8:	4464      	add	r4, ip
 8000fda:	1ae4      	subs	r4, r4, r3
 8000fdc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fe0:	e739      	b.n	8000e56 <__udivmoddi4+0xf2>
 8000fe2:	4604      	mov	r4, r0
 8000fe4:	e6f0      	b.n	8000dc8 <__udivmoddi4+0x64>
 8000fe6:	4608      	mov	r0, r1
 8000fe8:	e706      	b.n	8000df8 <__udivmoddi4+0x94>
 8000fea:	45c8      	cmp	r8, r9
 8000fec:	d2ae      	bcs.n	8000f4c <__udivmoddi4+0x1e8>
 8000fee:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ff2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000ff6:	3801      	subs	r0, #1
 8000ff8:	e7a8      	b.n	8000f4c <__udivmoddi4+0x1e8>
 8000ffa:	4631      	mov	r1, r6
 8000ffc:	e7ed      	b.n	8000fda <__udivmoddi4+0x276>
 8000ffe:	4603      	mov	r3, r0
 8001000:	e799      	b.n	8000f36 <__udivmoddi4+0x1d2>
 8001002:	4630      	mov	r0, r6
 8001004:	e7d4      	b.n	8000fb0 <__udivmoddi4+0x24c>
 8001006:	46d6      	mov	lr, sl
 8001008:	e77f      	b.n	8000f0a <__udivmoddi4+0x1a6>
 800100a:	4463      	add	r3, ip
 800100c:	3802      	subs	r0, #2
 800100e:	e74d      	b.n	8000eac <__udivmoddi4+0x148>
 8001010:	4606      	mov	r6, r0
 8001012:	4623      	mov	r3, r4
 8001014:	4608      	mov	r0, r1
 8001016:	e70f      	b.n	8000e38 <__udivmoddi4+0xd4>
 8001018:	3e02      	subs	r6, #2
 800101a:	4463      	add	r3, ip
 800101c:	e730      	b.n	8000e80 <__udivmoddi4+0x11c>
 800101e:	bf00      	nop

08001020 <__aeabi_idiv0>:
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop

08001024 <Get_Mode>:
int save[4] = {0, 0, 0, 0};
float RATIO = 0;
float CLOCKWISE_FACTOR = 0;
float COUNTER_CLW_FACTOR = 0;

int Get_Mode(int MSB_state, int LSB_state) {
 8001024:	b480      	push	{r7}
 8001026:	b085      	sub	sp, #20
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
 800102c:	6039      	str	r1, [r7, #0]
	static const int id_lookup[4] = {MANUAL_MODE, CIRCLE_MODE,  BACK_FORTH_MODE, SQUARE_MODE};
	int bin = ((MSB_state & 1) << 1) | (LSB_state & 1);
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	005b      	lsls	r3, r3, #1
 8001032:	f003 0202 	and.w	r2, r3, #2
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	f003 0301 	and.w	r3, r3, #1
 800103c:	4313      	orrs	r3, r2
 800103e:	60fb      	str	r3, [r7, #12]
	return id_lookup[bin];
 8001040:	4a04      	ldr	r2, [pc, #16]	@ (8001054 <Get_Mode+0x30>)
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8001048:	4618      	mov	r0, r3
 800104a:	3714      	adds	r7, #20
 800104c:	46bd      	mov	sp, r7
 800104e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001052:	4770      	bx	lr
 8001054:	0800c654 	.word	0x0800c654

08001058 <Get_Mode_String>:

char* Get_Mode_String() {
 8001058:	b580      	push	{r7, lr}
 800105a:	b082      	sub	sp, #8
 800105c:	af00      	add	r7, sp, #0
	const size_t buffer_size = 8;
 800105e:	2308      	movs	r3, #8
 8001060:	603b      	str	r3, [r7, #0]
	char* str = malloc(buffer_size);
 8001062:	6838      	ldr	r0, [r7, #0]
 8001064:	f006 fd10 	bl	8007a88 <malloc>
 8001068:	4603      	mov	r3, r0
 800106a:	607b      	str	r3, [r7, #4]
	switch(curr_mode) {
 800106c:	4b11      	ldr	r3, [pc, #68]	@ (80010b4 <Get_Mode_String+0x5c>)
 800106e:	781b      	ldrb	r3, [r3, #0]
 8001070:	2b03      	cmp	r3, #3
 8001072:	d817      	bhi.n	80010a4 <Get_Mode_String+0x4c>
 8001074:	a201      	add	r2, pc, #4	@ (adr r2, 800107c <Get_Mode_String+0x24>)
 8001076:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800107a:	bf00      	nop
 800107c:	0800108d 	.word	0x0800108d
 8001080:	08001093 	.word	0x08001093
 8001084:	08001099 	.word	0x08001099
 8001088:	0800109f 	.word	0x0800109f
		case MANUAL_MODE:
			str = "MANUAL";
 800108c:	4b0a      	ldr	r3, [pc, #40]	@ (80010b8 <Get_Mode_String+0x60>)
 800108e:	607b      	str	r3, [r7, #4]
			break;
 8001090:	e00b      	b.n	80010aa <Get_Mode_String+0x52>
		case CIRCLE_MODE:
			str = "CIRCLE";
 8001092:	4b0a      	ldr	r3, [pc, #40]	@ (80010bc <Get_Mode_String+0x64>)
 8001094:	607b      	str	r3, [r7, #4]
			break;
 8001096:	e008      	b.n	80010aa <Get_Mode_String+0x52>
		case BACK_FORTH_MODE:
			str = "LINE";
 8001098:	4b09      	ldr	r3, [pc, #36]	@ (80010c0 <Get_Mode_String+0x68>)
 800109a:	607b      	str	r3, [r7, #4]
			break;
 800109c:	e005      	b.n	80010aa <Get_Mode_String+0x52>
		case SQUARE_MODE:
			str = "SQUARE";
 800109e:	4b09      	ldr	r3, [pc, #36]	@ (80010c4 <Get_Mode_String+0x6c>)
 80010a0:	607b      	str	r3, [r7, #4]
			break;
 80010a2:	e002      	b.n	80010aa <Get_Mode_String+0x52>
		default:
			str = "ERROR";
 80010a4:	4b08      	ldr	r3, [pc, #32]	@ (80010c8 <Get_Mode_String+0x70>)
 80010a6:	607b      	str	r3, [r7, #4]
			break;
 80010a8:	bf00      	nop
	}
	return str;
 80010aa:	687b      	ldr	r3, [r7, #4]
}
 80010ac:	4618      	mov	r0, r3
 80010ae:	3708      	adds	r7, #8
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	20000226 	.word	0x20000226
 80010b8:	0800c268 	.word	0x0800c268
 80010bc:	0800c270 	.word	0x0800c270
 80010c0:	0800c278 	.word	0x0800c278
 80010c4:	0800c280 	.word	0x0800c280
 80010c8:	0800c288 	.word	0x0800c288

080010cc <Auto_Angle>:

void Auto_Angle(float value) {
 80010cc:	b5b0      	push	{r4, r5, r7, lr}
 80010ce:	b082      	sub	sp, #8
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	ed87 0a01 	vstr	s0, [r7, #4]
	// Initial setup
	if(timer_count == 0) {
 80010d6:	4b49      	ldr	r3, [pc, #292]	@ (80011fc <Auto_Angle+0x130>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d16e      	bne.n	80011bc <Auto_Angle+0xf0>
		LCD_Manuel(0);
 80010de:	2000      	movs	r0, #0
 80010e0:	f001 fe6a 	bl	8002db8 <LCD_Manuel>
		LCD_Mode();
 80010e4:	f001 feb6 	bl	8002e54 <LCD_Mode>

		// Calculate the duration for the turn
		turning_time = fabs(value) * TRACK_WIDTH;
 80010e8:	edd7 7a01 	vldr	s15, [r7, #4]
 80010ec:	eef0 7ae7 	vabs.f32	s15, s15
 80010f0:	ed9f 7a43 	vldr	s14, [pc, #268]	@ 8001200 <Auto_Angle+0x134>
 80010f4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010f8:	4b42      	ldr	r3, [pc, #264]	@ (8001204 <Auto_Angle+0x138>)
 80010fa:	edc3 7a00 	vstr	s15, [r3]

		// Determine direction of turn
		if (value > 0) {
 80010fe:	edd7 7a01 	vldr	s15, [r7, #4]
 8001102:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001106:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800110a:	dd25      	ble.n	8001158 <Auto_Angle+0x8c>
			turning_time /= (360.0 * CLOCKWISE_FACTOR);
 800110c:	4b3d      	ldr	r3, [pc, #244]	@ (8001204 <Auto_Angle+0x138>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	4618      	mov	r0, r3
 8001112:	f7ff fa39 	bl	8000588 <__aeabi_f2d>
 8001116:	4604      	mov	r4, r0
 8001118:	460d      	mov	r5, r1
 800111a:	4b3b      	ldr	r3, [pc, #236]	@ (8001208 <Auto_Angle+0x13c>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	4618      	mov	r0, r3
 8001120:	f7ff fa32 	bl	8000588 <__aeabi_f2d>
 8001124:	f04f 0200 	mov.w	r2, #0
 8001128:	4b38      	ldr	r3, [pc, #224]	@ (800120c <Auto_Angle+0x140>)
 800112a:	f7ff fa85 	bl	8000638 <__aeabi_dmul>
 800112e:	4602      	mov	r2, r0
 8001130:	460b      	mov	r3, r1
 8001132:	4620      	mov	r0, r4
 8001134:	4629      	mov	r1, r5
 8001136:	f7ff fba9 	bl	800088c <__aeabi_ddiv>
 800113a:	4602      	mov	r2, r0
 800113c:	460b      	mov	r3, r1
 800113e:	4610      	mov	r0, r2
 8001140:	4619      	mov	r1, r3
 8001142:	f7ff fd71 	bl	8000c28 <__aeabi_d2f>
 8001146:	4603      	mov	r3, r0
 8001148:	4a2e      	ldr	r2, [pc, #184]	@ (8001204 <Auto_Angle+0x138>)
 800114a:	6013      	str	r3, [r2, #0]
			Droite(BASE_SPEED, &htim3);
 800114c:	4930      	ldr	r1, [pc, #192]	@ (8001210 <Auto_Angle+0x144>)
 800114e:	f44f 70e1 	mov.w	r0, #450	@ 0x1c2
 8001152:	f000 fb59 	bl	8001808 <Droite>
 8001156:	e024      	b.n	80011a2 <Auto_Angle+0xd6>
		}
		else {
			turning_time /= (360.0 * COUNTER_CLW_FACTOR);
 8001158:	4b2a      	ldr	r3, [pc, #168]	@ (8001204 <Auto_Angle+0x138>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	4618      	mov	r0, r3
 800115e:	f7ff fa13 	bl	8000588 <__aeabi_f2d>
 8001162:	4604      	mov	r4, r0
 8001164:	460d      	mov	r5, r1
 8001166:	4b2b      	ldr	r3, [pc, #172]	@ (8001214 <Auto_Angle+0x148>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	4618      	mov	r0, r3
 800116c:	f7ff fa0c 	bl	8000588 <__aeabi_f2d>
 8001170:	f04f 0200 	mov.w	r2, #0
 8001174:	4b25      	ldr	r3, [pc, #148]	@ (800120c <Auto_Angle+0x140>)
 8001176:	f7ff fa5f 	bl	8000638 <__aeabi_dmul>
 800117a:	4602      	mov	r2, r0
 800117c:	460b      	mov	r3, r1
 800117e:	4620      	mov	r0, r4
 8001180:	4629      	mov	r1, r5
 8001182:	f7ff fb83 	bl	800088c <__aeabi_ddiv>
 8001186:	4602      	mov	r2, r0
 8001188:	460b      	mov	r3, r1
 800118a:	4610      	mov	r0, r2
 800118c:	4619      	mov	r1, r3
 800118e:	f7ff fd4b 	bl	8000c28 <__aeabi_d2f>
 8001192:	4603      	mov	r3, r0
 8001194:	4a1b      	ldr	r2, [pc, #108]	@ (8001204 <Auto_Angle+0x138>)
 8001196:	6013      	str	r3, [r2, #0]
			Gauche(BASE_SPEED, &htim3);
 8001198:	491d      	ldr	r1, [pc, #116]	@ (8001210 <Auto_Angle+0x144>)
 800119a:	f44f 70e1 	mov.w	r0, #450	@ 0x1c2
 800119e:	f000 fb93 	bl	80018c8 <Gauche>
		}

		// Convert turning time in µs
		turning_time *= 1e6;
 80011a2:	4b18      	ldr	r3, [pc, #96]	@ (8001204 <Auto_Angle+0x138>)
 80011a4:	edd3 7a00 	vldr	s15, [r3]
 80011a8:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 8001218 <Auto_Angle+0x14c>
 80011ac:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011b0:	4b14      	ldr	r3, [pc, #80]	@ (8001204 <Auto_Angle+0x138>)
 80011b2:	edc3 7a00 	vstr	s15, [r3]

		// Start timer
	    HAL_TIM_Base_Start_IT(&htim7);
 80011b6:	4819      	ldr	r0, [pc, #100]	@ (800121c <Auto_Angle+0x150>)
 80011b8:	f004 fc46 	bl	8005a48 <HAL_TIM_Base_Start_IT>
	}

    // Stop when finished
	if(timer_count > (int)turning_time) {
 80011bc:	4b11      	ldr	r3, [pc, #68]	@ (8001204 <Auto_Angle+0x138>)
 80011be:	edd3 7a00 	vldr	s15, [r3]
 80011c2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011c6:	ee17 2a90 	vmov	r2, s15
 80011ca:	4b0c      	ldr	r3, [pc, #48]	@ (80011fc <Auto_Angle+0x130>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	429a      	cmp	r2, r3
 80011d0:	da0f      	bge.n	80011f2 <Auto_Angle+0x126>

		// Stop timer
		HAL_TIM_Base_Stop_IT(&htim7);
 80011d2:	4812      	ldr	r0, [pc, #72]	@ (800121c <Auto_Angle+0x150>)
 80011d4:	f004 fca8 	bl	8005b28 <HAL_TIM_Base_Stop_IT>

		// Stop the motors
		Stop(&htim3);
 80011d8:	480d      	ldr	r0, [pc, #52]	@ (8001210 <Auto_Angle+0x144>)
 80011da:	f000 fc35 	bl	8001a48 <Stop>

		// Reset temporal counter
		timer_count = 0;
 80011de:	4b07      	ldr	r3, [pc, #28]	@ (80011fc <Auto_Angle+0x130>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	601a      	str	r2, [r3, #0]

		// Ready for next step
		curr_step++;
 80011e4:	4b0e      	ldr	r3, [pc, #56]	@ (8001220 <Auto_Angle+0x154>)
 80011e6:	781b      	ldrb	r3, [r3, #0]
 80011e8:	3301      	adds	r3, #1
 80011ea:	b2da      	uxtb	r2, r3
 80011ec:	4b0c      	ldr	r3, [pc, #48]	@ (8001220 <Auto_Angle+0x154>)
 80011ee:	701a      	strb	r2, [r3, #0]
	}

	return;
 80011f0:	bf00      	nop
 80011f2:	bf00      	nop
}
 80011f4:	3708      	adds	r7, #8
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bdb0      	pop	{r4, r5, r7, pc}
 80011fa:	bf00      	nop
 80011fc:	2000023c 	.word	0x2000023c
 8001200:	43880000 	.word	0x43880000
 8001204:	20000240 	.word	0x20000240
 8001208:	20000258 	.word	0x20000258
 800120c:	40768000 	.word	0x40768000
 8001210:	20000354 	.word	0x20000354
 8001214:	2000025c 	.word	0x2000025c
 8001218:	49742400 	.word	0x49742400
 800121c:	2000042c 	.word	0x2000042c
 8001220:	20000000 	.word	0x20000000
 8001224:	00000000 	.word	0x00000000

08001228 <Auto_Line>:

void Auto_Line(int dist, int min_speed, int max_speed) {
 8001228:	b580      	push	{r7, lr}
 800122a:	b088      	sub	sp, #32
 800122c:	af00      	add	r7, sp, #0
 800122e:	60f8      	str	r0, [r7, #12]
 8001230:	60b9      	str	r1, [r7, #8]
 8001232:	607a      	str	r2, [r7, #4]
    // Constants
    const float accel_fraction = 0.4; // 40% of total time for acceleration
 8001234:	4b70      	ldr	r3, [pc, #448]	@ (80013f8 <Auto_Line+0x1d0>)
 8001236:	61fb      	str	r3, [r7, #28]
    const float decel_fraction = 0.4; // 40% of total time for deceleration
 8001238:	4b6f      	ldr	r3, [pc, #444]	@ (80013f8 <Auto_Line+0x1d0>)
 800123a:	61bb      	str	r3, [r7, #24]

    // Initial setup
    if (timer_count == 0) {
 800123c:	4b6f      	ldr	r3, [pc, #444]	@ (80013fc <Auto_Line+0x1d4>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	2b00      	cmp	r3, #0
 8001242:	d16f      	bne.n	8001324 <Auto_Line+0xfc>
    	LCD_Manuel(0);
 8001244:	2000      	movs	r0, #0
 8001246:	f001 fdb7 	bl	8002db8 <LCD_Manuel>
    	LCD_Mode();
 800124a:	f001 fe03 	bl	8002e54 <LCD_Mode>

    	// Calculate total pulses required
    	float total_pulses = dist / TRACK_RESOLUTION;
 800124e:	68f8      	ldr	r0, [r7, #12]
 8001250:	f7ff f988 	bl	8000564 <__aeabi_i2d>
 8001254:	a364      	add	r3, pc, #400	@ (adr r3, 80013e8 <Auto_Line+0x1c0>)
 8001256:	e9d3 2300 	ldrd	r2, r3, [r3]
 800125a:	f7ff fb17 	bl	800088c <__aeabi_ddiv>
 800125e:	4602      	mov	r2, r0
 8001260:	460b      	mov	r3, r1
 8001262:	4610      	mov	r0, r2
 8001264:	4619      	mov	r1, r3
 8001266:	f7ff fcdf 	bl	8000c28 <__aeabi_d2f>
 800126a:	4603      	mov	r3, r0
 800126c:	617b      	str	r3, [r7, #20]

        // Calculate total time
        turning_time = (min_speed + max_speed) / 2.0;
 800126e:	68ba      	ldr	r2, [r7, #8]
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	4413      	add	r3, r2
 8001274:	4618      	mov	r0, r3
 8001276:	f7ff f975 	bl	8000564 <__aeabi_i2d>
 800127a:	f04f 0200 	mov.w	r2, #0
 800127e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001282:	f7ff fb03 	bl	800088c <__aeabi_ddiv>
 8001286:	4602      	mov	r2, r0
 8001288:	460b      	mov	r3, r1
 800128a:	4610      	mov	r0, r2
 800128c:	4619      	mov	r1, r3
 800128e:	f7ff fccb 	bl	8000c28 <__aeabi_d2f>
 8001292:	4603      	mov	r3, r0
 8001294:	4a5a      	ldr	r2, [pc, #360]	@ (8001400 <Auto_Line+0x1d8>)
 8001296:	6013      	str	r3, [r2, #0]
        total_time = (int)((total_pulses / turning_time) * 1e7);
 8001298:	4b59      	ldr	r3, [pc, #356]	@ (8001400 <Auto_Line+0x1d8>)
 800129a:	edd3 7a00 	vldr	s15, [r3]
 800129e:	ed97 7a05 	vldr	s14, [r7, #20]
 80012a2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80012a6:	ee16 0a90 	vmov	r0, s13
 80012aa:	f7ff f96d 	bl	8000588 <__aeabi_f2d>
 80012ae:	a350      	add	r3, pc, #320	@ (adr r3, 80013f0 <Auto_Line+0x1c8>)
 80012b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012b4:	f7ff f9c0 	bl	8000638 <__aeabi_dmul>
 80012b8:	4602      	mov	r2, r0
 80012ba:	460b      	mov	r3, r1
 80012bc:	4610      	mov	r0, r2
 80012be:	4619      	mov	r1, r3
 80012c0:	f7ff fc6a 	bl	8000b98 <__aeabi_d2iz>
 80012c4:	4603      	mov	r3, r0
 80012c6:	4a4f      	ldr	r2, [pc, #316]	@ (8001404 <Auto_Line+0x1dc>)
 80012c8:	6013      	str	r3, [r2, #0]

        // Calculate time for each phase
        accel_time = (int)(total_time * accel_fraction);
 80012ca:	4b4e      	ldr	r3, [pc, #312]	@ (8001404 <Auto_Line+0x1dc>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	ee07 3a90 	vmov	s15, r3
 80012d2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012d6:	edd7 7a07 	vldr	s15, [r7, #28]
 80012da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012de:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012e2:	ee17 2a90 	vmov	r2, s15
 80012e6:	4b48      	ldr	r3, [pc, #288]	@ (8001408 <Auto_Line+0x1e0>)
 80012e8:	601a      	str	r2, [r3, #0]
        decel_time = (int)(total_time * decel_fraction);
 80012ea:	4b46      	ldr	r3, [pc, #280]	@ (8001404 <Auto_Line+0x1dc>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	ee07 3a90 	vmov	s15, r3
 80012f2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012f6:	edd7 7a06 	vldr	s15, [r7, #24]
 80012fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001302:	ee17 2a90 	vmov	r2, s15
 8001306:	4b41      	ldr	r3, [pc, #260]	@ (800140c <Auto_Line+0x1e4>)
 8001308:	601a      	str	r2, [r3, #0]
        mid_time = total_time - accel_time - decel_time;
 800130a:	4b3e      	ldr	r3, [pc, #248]	@ (8001404 <Auto_Line+0x1dc>)
 800130c:	681a      	ldr	r2, [r3, #0]
 800130e:	4b3e      	ldr	r3, [pc, #248]	@ (8001408 <Auto_Line+0x1e0>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	1ad2      	subs	r2, r2, r3
 8001314:	4b3d      	ldr	r3, [pc, #244]	@ (800140c <Auto_Line+0x1e4>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	1ad3      	subs	r3, r2, r3
 800131a:	4a3d      	ldr	r2, [pc, #244]	@ (8001410 <Auto_Line+0x1e8>)
 800131c:	6013      	str	r3, [r2, #0]

        // Start timer
        HAL_TIM_Base_Start_IT(&htim7);
 800131e:	483d      	ldr	r0, [pc, #244]	@ (8001414 <Auto_Line+0x1ec>)
 8001320:	f004 fb92 	bl	8005a48 <HAL_TIM_Base_Start_IT>
    }

    // Acceleration phase
    if (timer_count < accel_time) {
 8001324:	4b35      	ldr	r3, [pc, #212]	@ (80013fc <Auto_Line+0x1d4>)
 8001326:	681a      	ldr	r2, [r3, #0]
 8001328:	4b37      	ldr	r3, [pc, #220]	@ (8001408 <Auto_Line+0x1e0>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	429a      	cmp	r2, r3
 800132e:	da0f      	bge.n	8001350 <Auto_Line+0x128>
        current_speed = min_speed + (max_speed - min_speed) * timer_count / accel_time;
 8001330:	687a      	ldr	r2, [r7, #4]
 8001332:	68bb      	ldr	r3, [r7, #8]
 8001334:	1ad3      	subs	r3, r2, r3
 8001336:	4a31      	ldr	r2, [pc, #196]	@ (80013fc <Auto_Line+0x1d4>)
 8001338:	6812      	ldr	r2, [r2, #0]
 800133a:	fb03 f202 	mul.w	r2, r3, r2
 800133e:	4b32      	ldr	r3, [pc, #200]	@ (8001408 <Auto_Line+0x1e0>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	fb92 f2f3 	sdiv	r2, r2, r3
 8001346:	68bb      	ldr	r3, [r7, #8]
 8001348:	4413      	add	r3, r2
 800134a:	4a33      	ldr	r2, [pc, #204]	@ (8001418 <Auto_Line+0x1f0>)
 800134c:	6013      	str	r3, [r2, #0]
 800134e:	e03a      	b.n	80013c6 <Auto_Line+0x19e>
    }

    // Constant speed phase
    else if (timer_count < accel_time + mid_time) {
 8001350:	4b2d      	ldr	r3, [pc, #180]	@ (8001408 <Auto_Line+0x1e0>)
 8001352:	681a      	ldr	r2, [r3, #0]
 8001354:	4b2e      	ldr	r3, [pc, #184]	@ (8001410 <Auto_Line+0x1e8>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	441a      	add	r2, r3
 800135a:	4b28      	ldr	r3, [pc, #160]	@ (80013fc <Auto_Line+0x1d4>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	429a      	cmp	r2, r3
 8001360:	dd03      	ble.n	800136a <Auto_Line+0x142>
        current_speed = max_speed;
 8001362:	4a2d      	ldr	r2, [pc, #180]	@ (8001418 <Auto_Line+0x1f0>)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	6013      	str	r3, [r2, #0]
 8001368:	e02d      	b.n	80013c6 <Auto_Line+0x19e>
    }

    // Deceleration phase
    else if (timer_count < total_time) {
 800136a:	4b24      	ldr	r3, [pc, #144]	@ (80013fc <Auto_Line+0x1d4>)
 800136c:	681a      	ldr	r2, [r3, #0]
 800136e:	4b25      	ldr	r3, [pc, #148]	@ (8001404 <Auto_Line+0x1dc>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	429a      	cmp	r2, r3
 8001374:	da17      	bge.n	80013a6 <Auto_Line+0x17e>
        int decel_time_elapsed = timer_count - (accel_time + mid_time);
 8001376:	4b21      	ldr	r3, [pc, #132]	@ (80013fc <Auto_Line+0x1d4>)
 8001378:	681a      	ldr	r2, [r3, #0]
 800137a:	4b23      	ldr	r3, [pc, #140]	@ (8001408 <Auto_Line+0x1e0>)
 800137c:	6819      	ldr	r1, [r3, #0]
 800137e:	4b24      	ldr	r3, [pc, #144]	@ (8001410 <Auto_Line+0x1e8>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	440b      	add	r3, r1
 8001384:	1ad3      	subs	r3, r2, r3
 8001386:	613b      	str	r3, [r7, #16]
        current_speed = max_speed - (max_speed - min_speed) * decel_time_elapsed / decel_time;
 8001388:	687a      	ldr	r2, [r7, #4]
 800138a:	68bb      	ldr	r3, [r7, #8]
 800138c:	1ad3      	subs	r3, r2, r3
 800138e:	693a      	ldr	r2, [r7, #16]
 8001390:	fb03 f202 	mul.w	r2, r3, r2
 8001394:	4b1d      	ldr	r3, [pc, #116]	@ (800140c <Auto_Line+0x1e4>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	fb92 f3f3 	sdiv	r3, r2, r3
 800139c:	687a      	ldr	r2, [r7, #4]
 800139e:	1ad3      	subs	r3, r2, r3
 80013a0:	4a1d      	ldr	r2, [pc, #116]	@ (8001418 <Auto_Line+0x1f0>)
 80013a2:	6013      	str	r3, [r2, #0]
 80013a4:	e00f      	b.n	80013c6 <Auto_Line+0x19e>
    }

    // Stop when finished
    else {
        // Stop timer
        HAL_TIM_Base_Stop_IT(&htim7);
 80013a6:	481b      	ldr	r0, [pc, #108]	@ (8001414 <Auto_Line+0x1ec>)
 80013a8:	f004 fbbe 	bl	8005b28 <HAL_TIM_Base_Stop_IT>

        // Stop the motors
        Stop(&htim3);
 80013ac:	481b      	ldr	r0, [pc, #108]	@ (800141c <Auto_Line+0x1f4>)
 80013ae:	f000 fb4b 	bl	8001a48 <Stop>

        // Reset temporal counter
        timer_count = 0;
 80013b2:	4b12      	ldr	r3, [pc, #72]	@ (80013fc <Auto_Line+0x1d4>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	601a      	str	r2, [r3, #0]

        // Ready for next step
        curr_step++;
 80013b8:	4b19      	ldr	r3, [pc, #100]	@ (8001420 <Auto_Line+0x1f8>)
 80013ba:	781b      	ldrb	r3, [r3, #0]
 80013bc:	3301      	adds	r3, #1
 80013be:	b2da      	uxtb	r2, r3
 80013c0:	4b17      	ldr	r3, [pc, #92]	@ (8001420 <Auto_Line+0x1f8>)
 80013c2:	701a      	strb	r2, [r3, #0]

        // Exit
        return;
 80013c4:	e00a      	b.n	80013dc <Auto_Line+0x1b4>
    }

    // Adjust speed every iteration
    if(!pause)
 80013c6:	4b17      	ldr	r3, [pc, #92]	@ (8001424 <Auto_Line+0x1fc>)
 80013c8:	781b      	ldrb	r3, [r3, #0]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d105      	bne.n	80013da <Auto_Line+0x1b2>
    	Avancer(current_speed, &htim3);
 80013ce:	4b12      	ldr	r3, [pc, #72]	@ (8001418 <Auto_Line+0x1f0>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	4912      	ldr	r1, [pc, #72]	@ (800141c <Auto_Line+0x1f4>)
 80013d4:	4618      	mov	r0, r3
 80013d6:	f000 f9b7 	bl	8001748 <Avancer>

    return;
 80013da:	bf00      	nop
}
 80013dc:	3720      	adds	r7, #32
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	f3af 8000 	nop.w
 80013e8:	e353f7cf 	.word	0xe353f7cf
 80013ec:	40129ba5 	.word	0x40129ba5
 80013f0:	00000000 	.word	0x00000000
 80013f4:	416312d0 	.word	0x416312d0
 80013f8:	3ecccccd 	.word	0x3ecccccd
 80013fc:	2000023c 	.word	0x2000023c
 8001400:	20000240 	.word	0x20000240
 8001404:	20000228 	.word	0x20000228
 8001408:	2000022c 	.word	0x2000022c
 800140c:	20000230 	.word	0x20000230
 8001410:	20000234 	.word	0x20000234
 8001414:	2000042c 	.word	0x2000042c
 8001418:	20000238 	.word	0x20000238
 800141c:	20000354 	.word	0x20000354
 8001420:	20000000 	.word	0x20000000
 8001424:	20000224 	.word	0x20000224

08001428 <Auto_Circle>:


void Auto_Circle() {
 8001428:	b580      	push	{r7, lr}
 800142a:	b084      	sub	sp, #16
 800142c:	af00      	add	r7, sp, #0
	// Initial setup
	if(timer_count == 0) {
 800142e:	4b3e      	ldr	r3, [pc, #248]	@ (8001528 <Auto_Circle+0x100>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d157      	bne.n	80014e6 <Auto_Circle+0xbe>
		LCD_Manuel(0);
 8001436:	2000      	movs	r0, #0
 8001438:	f001 fcbe 	bl	8002db8 <LCD_Manuel>
		LCD_Mode();
 800143c:	f001 fd0a 	bl	8002e54 <LCD_Mode>

		// Calculate total outer wheel distance
		float outer_circumference = (PI*DISTANCE) / TRACK_RESOLUTION;//785
 8001440:	4b3a      	ldr	r3, [pc, #232]	@ (800152c <Auto_Circle+0x104>)
 8001442:	60fb      	str	r3, [r7, #12]
		float inner_circumference = outer_circumference - TRACK_WIDTH;//513
 8001444:	edd7 7a03 	vldr	s15, [r7, #12]
 8001448:	ed9f 7a39 	vldr	s14, [pc, #228]	@ 8001530 <Auto_Circle+0x108>
 800144c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001450:	edc7 7a02 	vstr	s15, [r7, #8]

		// Calculate total time
		total_time = (int)((2*RATIO)*(outer_circumference / BASE_SPEED) * 1e7);//17.4s
 8001454:	4b37      	ldr	r3, [pc, #220]	@ (8001534 <Auto_Circle+0x10c>)
 8001456:	edd3 7a00 	vldr	s15, [r3]
 800145a:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800145e:	edd7 6a03 	vldr	s13, [r7, #12]
 8001462:	ed9f 6a35 	vldr	s12, [pc, #212]	@ 8001538 <Auto_Circle+0x110>
 8001466:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800146a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800146e:	ee17 0a90 	vmov	r0, s15
 8001472:	f7ff f889 	bl	8000588 <__aeabi_f2d>
 8001476:	a32a      	add	r3, pc, #168	@ (adr r3, 8001520 <Auto_Circle+0xf8>)
 8001478:	e9d3 2300 	ldrd	r2, r3, [r3]
 800147c:	f7ff f8dc 	bl	8000638 <__aeabi_dmul>
 8001480:	4602      	mov	r2, r0
 8001482:	460b      	mov	r3, r1
 8001484:	4610      	mov	r0, r2
 8001486:	4619      	mov	r1, r3
 8001488:	f7ff fb86 	bl	8000b98 <__aeabi_d2iz>
 800148c:	4603      	mov	r3, r0
 800148e:	4a2b      	ldr	r2, [pc, #172]	@ (800153c <Auto_Circle+0x114>)
 8001490:	6013      	str	r3, [r2, #0]

		// Calculate wheel inner wheel speed
		float factor = RATIO * (inner_circumference / outer_circumference);
 8001492:	edd7 6a02 	vldr	s13, [r7, #8]
 8001496:	edd7 7a03 	vldr	s15, [r7, #12]
 800149a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800149e:	4b25      	ldr	r3, [pc, #148]	@ (8001534 <Auto_Circle+0x10c>)
 80014a0:	edd3 7a00 	vldr	s15, [r3]
 80014a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014a8:	edc7 7a01 	vstr	s15, [r7, #4]

		// Constant speed
		htim3.Instance -> CCR2 = 0;
 80014ac:	4b24      	ldr	r3, [pc, #144]	@ (8001540 <Auto_Circle+0x118>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	2200      	movs	r2, #0
 80014b2:	639a      	str	r2, [r3, #56]	@ 0x38
		htim3.Instance -> CCR4 = 0;
 80014b4:	4b22      	ldr	r3, [pc, #136]	@ (8001540 <Auto_Circle+0x118>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	2200      	movs	r2, #0
 80014ba:	641a      	str	r2, [r3, #64]	@ 0x40
		htim3.Instance -> CCR1 = BASE_SPEED;
 80014bc:	4b20      	ldr	r3, [pc, #128]	@ (8001540 <Auto_Circle+0x118>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f44f 72e1 	mov.w	r2, #450	@ 0x1c2
 80014c4:	635a      	str	r2, [r3, #52]	@ 0x34
		htim3.Instance -> CCR3 = (factor * BASE_SPEED);
 80014c6:	edd7 7a01 	vldr	s15, [r7, #4]
 80014ca:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 8001538 <Auto_Circle+0x110>
 80014ce:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014d2:	4b1b      	ldr	r3, [pc, #108]	@ (8001540 <Auto_Circle+0x118>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80014da:	ee17 2a90 	vmov	r2, s15
 80014de:	63da      	str	r2, [r3, #60]	@ 0x3c
		HAL_TIM_Base_Start_IT(&htim7);
 80014e0:	4818      	ldr	r0, [pc, #96]	@ (8001544 <Auto_Circle+0x11c>)
 80014e2:	f004 fab1 	bl	8005a48 <HAL_TIM_Base_Start_IT>
	}

	// Stop when finished
	if(timer_count > (int)total_time) {
 80014e6:	4b10      	ldr	r3, [pc, #64]	@ (8001528 <Auto_Circle+0x100>)
 80014e8:	681a      	ldr	r2, [r3, #0]
 80014ea:	4b14      	ldr	r3, [pc, #80]	@ (800153c <Auto_Circle+0x114>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	429a      	cmp	r2, r3
 80014f0:	dd11      	ble.n	8001516 <Auto_Circle+0xee>

		// Stop timer
		HAL_TIM_Base_Stop_IT(&htim7);
 80014f2:	4814      	ldr	r0, [pc, #80]	@ (8001544 <Auto_Circle+0x11c>)
 80014f4:	f004 fb18 	bl	8005b28 <HAL_TIM_Base_Stop_IT>

		// Stop the motors
		Stop(&htim3);
 80014f8:	4811      	ldr	r0, [pc, #68]	@ (8001540 <Auto_Circle+0x118>)
 80014fa:	f000 faa5 	bl	8001a48 <Stop>

		// Reset temporal counter
		timer_count = 0;
 80014fe:	4b0a      	ldr	r3, [pc, #40]	@ (8001528 <Auto_Circle+0x100>)
 8001500:	2200      	movs	r2, #0
 8001502:	601a      	str	r2, [r3, #0]

		// End of sequence : reset current step and set to manual mode after drawing shape
		curr_mode = MANUAL_MODE;
 8001504:	4b10      	ldr	r3, [pc, #64]	@ (8001548 <Auto_Circle+0x120>)
 8001506:	2200      	movs	r2, #0
 8001508:	701a      	strb	r2, [r3, #0]
		LCD_Mode();
 800150a:	f001 fca3 	bl	8002e54 <LCD_Mode>
		LCD_Manuel(3);
 800150e:	2003      	movs	r0, #3
 8001510:	f001 fc52 	bl	8002db8 <LCD_Manuel>
	}

	return;
 8001514:	bf00      	nop
 8001516:	bf00      	nop
}
 8001518:	3710      	adds	r7, #16
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	00000000 	.word	0x00000000
 8001524:	416312d0 	.word	0x416312d0
 8001528:	2000023c 	.word	0x2000023c
 800152c:	4428d480 	.word	0x4428d480
 8001530:	43880000 	.word	0x43880000
 8001534:	20000254 	.word	0x20000254
 8001538:	43e10000 	.word	0x43e10000
 800153c:	20000228 	.word	0x20000228
 8001540:	20000354 	.word	0x20000354
 8001544:	2000042c 	.word	0x2000042c
 8001548:	20000226 	.word	0x20000226

0800154c <Auto_Back_Forth>:

void Auto_Back_Forth() {
 800154c:	b580      	push	{r7, lr}
 800154e:	af00      	add	r7, sp, #0
	// Manage ongoing step
	switch(curr_step) {
 8001550:	4b1c      	ldr	r3, [pc, #112]	@ (80015c4 <Auto_Back_Forth+0x78>)
 8001552:	781b      	ldrb	r3, [r3, #0]
 8001554:	3b01      	subs	r3, #1
 8001556:	2b03      	cmp	r3, #3
 8001558:	d826      	bhi.n	80015a8 <Auto_Back_Forth+0x5c>
 800155a:	a201      	add	r2, pc, #4	@ (adr r2, 8001560 <Auto_Back_Forth+0x14>)
 800155c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001560:	08001571 	.word	0x08001571
 8001564:	08001583 	.word	0x08001583
 8001568:	0800158d 	.word	0x0800158d
 800156c:	0800159f 	.word	0x0800159f
	case 1:
		// Step 1: Move forward 1 meter
		Auto_Line(DISTANCE, BASE_SPEED, BASE_SPEED);
 8001570:	f44f 72e1 	mov.w	r2, #450	@ 0x1c2
 8001574:	f44f 71e1 	mov.w	r1, #450	@ 0x1c2
 8001578:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800157c:	f7ff fe54 	bl	8001228 <Auto_Line>
		break;
 8001580:	e01e      	b.n	80015c0 <Auto_Back_Forth+0x74>

	case 2:
		// Step 2: Turn 180 degrees
		Auto_Angle(180.0);
 8001582:	ed9f 0a11 	vldr	s0, [pc, #68]	@ 80015c8 <Auto_Back_Forth+0x7c>
 8001586:	f7ff fda1 	bl	80010cc <Auto_Angle>
		break;
 800158a:	e019      	b.n	80015c0 <Auto_Back_Forth+0x74>

	case 3:
		// Step 3: Move backward 1 meter
		Auto_Line(DISTANCE, BASE_SPEED, BASE_SPEED);
 800158c:	f44f 72e1 	mov.w	r2, #450	@ 0x1c2
 8001590:	f44f 71e1 	mov.w	r1, #450	@ 0x1c2
 8001594:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001598:	f7ff fe46 	bl	8001228 <Auto_Line>
		break;
 800159c:	e010      	b.n	80015c0 <Auto_Back_Forth+0x74>

	case 4:
		// Step 4: Turn 180 degrees again to face the original direction
	    Auto_Angle(180.0);
 800159e:	ed9f 0a0a 	vldr	s0, [pc, #40]	@ 80015c8 <Auto_Back_Forth+0x7c>
 80015a2:	f7ff fd93 	bl	80010cc <Auto_Angle>
		break;
 80015a6:	e00b      	b.n	80015c0 <Auto_Back_Forth+0x74>

	default:
		// End of sequence : reset current step and set to manual mode after drawing shape
		curr_step = 1;
 80015a8:	4b06      	ldr	r3, [pc, #24]	@ (80015c4 <Auto_Back_Forth+0x78>)
 80015aa:	2201      	movs	r2, #1
 80015ac:	701a      	strb	r2, [r3, #0]
		curr_mode = MANUAL_MODE;
 80015ae:	4b07      	ldr	r3, [pc, #28]	@ (80015cc <Auto_Back_Forth+0x80>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	701a      	strb	r2, [r3, #0]
		LCD_Mode();
 80015b4:	f001 fc4e 	bl	8002e54 <LCD_Mode>
		LCD_Manuel(3);
 80015b8:	2003      	movs	r0, #3
 80015ba:	f001 fbfd 	bl	8002db8 <LCD_Manuel>
		break;
 80015be:	bf00      	nop
	}
	return;
 80015c0:	bf00      	nop
}
 80015c2:	bd80      	pop	{r7, pc}
 80015c4:	20000000 	.word	0x20000000
 80015c8:	43340000 	.word	0x43340000
 80015cc:	20000226 	.word	0x20000226

080015d0 <Auto_Square>:

void Auto_Square() {
 80015d0:	b580      	push	{r7, lr}
 80015d2:	af00      	add	r7, sp, #0
	// Manage ongoing step
	switch(curr_step) {
 80015d4:	4b1c      	ldr	r3, [pc, #112]	@ (8001648 <Auto_Square+0x78>)
 80015d6:	781b      	ldrb	r3, [r3, #0]
 80015d8:	2b08      	cmp	r3, #8
 80015da:	bf8c      	ite	hi
 80015dc:	2201      	movhi	r2, #1
 80015de:	2200      	movls	r2, #0
 80015e0:	b2d2      	uxtb	r2, r2
 80015e2:	2a00      	cmp	r2, #0
 80015e4:	d121      	bne.n	800162a <Auto_Square+0x5a>
 80015e6:	2201      	movs	r2, #1
 80015e8:	fa02 f303 	lsl.w	r3, r2, r3
 80015ec:	f403 72aa 	and.w	r2, r3, #340	@ 0x154
 80015f0:	2a00      	cmp	r2, #0
 80015f2:	bf14      	ite	ne
 80015f4:	2201      	movne	r2, #1
 80015f6:	2200      	moveq	r2, #0
 80015f8:	b2d2      	uxtb	r2, r2
 80015fa:	2a00      	cmp	r2, #0
 80015fc:	d110      	bne.n	8001620 <Auto_Square+0x50>
 80015fe:	f003 03aa 	and.w	r3, r3, #170	@ 0xaa
 8001602:	2b00      	cmp	r3, #0
 8001604:	bf14      	ite	ne
 8001606:	2301      	movne	r3, #1
 8001608:	2300      	moveq	r3, #0
 800160a:	b2db      	uxtb	r3, r3
 800160c:	2b00      	cmp	r3, #0
 800160e:	d00c      	beq.n	800162a <Auto_Square+0x5a>
	case 1:
	case 3:
	case 5:
	case 7:
		// Odd steps: Move forward
		Auto_Line(DISTANCE, (BASE_SPEED * 0.333), BASE_SPEED);
 8001610:	f44f 72e1 	mov.w	r2, #450	@ 0x1c2
 8001614:	2195      	movs	r1, #149	@ 0x95
 8001616:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800161a:	f7ff fe05 	bl	8001228 <Auto_Line>
		break;
 800161e:	e010      	b.n	8001642 <Auto_Square+0x72>
	case 2:
	case 4:
	case 6:
	case 8:
		// Even steps: Turn 90 degrees
		Auto_Angle(90.0);
 8001620:	ed9f 0a0a 	vldr	s0, [pc, #40]	@ 800164c <Auto_Square+0x7c>
 8001624:	f7ff fd52 	bl	80010cc <Auto_Angle>
		break;
 8001628:	e00b      	b.n	8001642 <Auto_Square+0x72>

	default:
		// End of sequence: reset current step and set to manual mode after drawing shape
		curr_step = 1;
 800162a:	4b07      	ldr	r3, [pc, #28]	@ (8001648 <Auto_Square+0x78>)
 800162c:	2201      	movs	r2, #1
 800162e:	701a      	strb	r2, [r3, #0]
		curr_mode = MANUAL_MODE;
 8001630:	4b07      	ldr	r3, [pc, #28]	@ (8001650 <Auto_Square+0x80>)
 8001632:	2200      	movs	r2, #0
 8001634:	701a      	strb	r2, [r3, #0]
		LCD_Mode();
 8001636:	f001 fc0d 	bl	8002e54 <LCD_Mode>
		LCD_Manuel(3);
 800163a:	2003      	movs	r0, #3
 800163c:	f001 fbbc 	bl	8002db8 <LCD_Manuel>
		break;
 8001640:	bf00      	nop
	}
	return;
 8001642:	bf00      	nop
}
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	20000000 	.word	0x20000000
 800164c:	42b40000 	.word	0x42b40000
 8001650:	20000226 	.word	0x20000226

08001654 <Pause>:

void Pause() {
 8001654:	b580      	push	{r7, lr}
 8001656:	af00      	add	r7, sp, #0
	pause = pause ^ 1;
 8001658:	4b19      	ldr	r3, [pc, #100]	@ (80016c0 <Pause+0x6c>)
 800165a:	781b      	ldrb	r3, [r3, #0]
 800165c:	f083 0301 	eor.w	r3, r3, #1
 8001660:	b2da      	uxtb	r2, r3
 8001662:	4b17      	ldr	r3, [pc, #92]	@ (80016c0 <Pause+0x6c>)
 8001664:	701a      	strb	r2, [r3, #0]

	// Save currrent CCR values
	save[0] = htim3.Instance -> CCR1;
 8001666:	4b17      	ldr	r3, [pc, #92]	@ (80016c4 <Pause+0x70>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800166c:	461a      	mov	r2, r3
 800166e:	4b16      	ldr	r3, [pc, #88]	@ (80016c8 <Pause+0x74>)
 8001670:	601a      	str	r2, [r3, #0]
	save[1] = htim3.Instance -> CCR2;
 8001672:	4b14      	ldr	r3, [pc, #80]	@ (80016c4 <Pause+0x70>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001678:	461a      	mov	r2, r3
 800167a:	4b13      	ldr	r3, [pc, #76]	@ (80016c8 <Pause+0x74>)
 800167c:	605a      	str	r2, [r3, #4]
	save[2] = htim3.Instance -> CCR3;
 800167e:	4b11      	ldr	r3, [pc, #68]	@ (80016c4 <Pause+0x70>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001684:	461a      	mov	r2, r3
 8001686:	4b10      	ldr	r3, [pc, #64]	@ (80016c8 <Pause+0x74>)
 8001688:	609a      	str	r2, [r3, #8]
	save[3] = htim3.Instance -> CCR4;
 800168a:	4b0e      	ldr	r3, [pc, #56]	@ (80016c4 <Pause+0x70>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001690:	461a      	mov	r2, r3
 8001692:	4b0d      	ldr	r3, [pc, #52]	@ (80016c8 <Pause+0x74>)
 8001694:	60da      	str	r2, [r3, #12]

	// Stop
	HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 8001696:	2100      	movs	r1, #0
 8001698:	480a      	ldr	r0, [pc, #40]	@ (80016c4 <Pause+0x70>)
 800169a:	f004 fb95 	bl	8005dc8 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_2);
 800169e:	2104      	movs	r1, #4
 80016a0:	4808      	ldr	r0, [pc, #32]	@ (80016c4 <Pause+0x70>)
 80016a2:	f004 fb91 	bl	8005dc8 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_3);
 80016a6:	2108      	movs	r1, #8
 80016a8:	4806      	ldr	r0, [pc, #24]	@ (80016c4 <Pause+0x70>)
 80016aa:	f004 fb8d 	bl	8005dc8 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_4);
 80016ae:	210c      	movs	r1, #12
 80016b0:	4804      	ldr	r0, [pc, #16]	@ (80016c4 <Pause+0x70>)
 80016b2:	f004 fb89 	bl	8005dc8 <HAL_TIM_PWM_Stop>
	HAL_TIM_Base_Stop_IT(&htim7);
 80016b6:	4805      	ldr	r0, [pc, #20]	@ (80016cc <Pause+0x78>)
 80016b8:	f004 fa36 	bl	8005b28 <HAL_TIM_Base_Stop_IT>

	return;
 80016bc:	bf00      	nop
}
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	20000224 	.word	0x20000224
 80016c4:	20000354 	.word	0x20000354
 80016c8:	20000244 	.word	0x20000244
 80016cc:	2000042c 	.word	0x2000042c

080016d0 <Resume>:

void Resume() {
 80016d0:	b580      	push	{r7, lr}
 80016d2:	af00      	add	r7, sp, #0
	pause = pause ^ 1;
 80016d4:	4b17      	ldr	r3, [pc, #92]	@ (8001734 <Resume+0x64>)
 80016d6:	781b      	ldrb	r3, [r3, #0]
 80016d8:	f083 0301 	eor.w	r3, r3, #1
 80016dc:	b2da      	uxtb	r2, r3
 80016de:	4b15      	ldr	r3, [pc, #84]	@ (8001734 <Resume+0x64>)
 80016e0:	701a      	strb	r2, [r3, #0]

	// Restore saved CCR values
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80016e2:	2100      	movs	r1, #0
 80016e4:	4814      	ldr	r0, [pc, #80]	@ (8001738 <Resume+0x68>)
 80016e6:	f004 faa7 	bl	8005c38 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80016ea:	2104      	movs	r1, #4
 80016ec:	4812      	ldr	r0, [pc, #72]	@ (8001738 <Resume+0x68>)
 80016ee:	f004 faa3 	bl	8005c38 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 80016f2:	2108      	movs	r1, #8
 80016f4:	4810      	ldr	r0, [pc, #64]	@ (8001738 <Resume+0x68>)
 80016f6:	f004 fa9f 	bl	8005c38 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 80016fa:	210c      	movs	r1, #12
 80016fc:	480e      	ldr	r0, [pc, #56]	@ (8001738 <Resume+0x68>)
 80016fe:	f004 fa9b 	bl	8005c38 <HAL_TIM_PWM_Start>
	htim3.Instance -> CCR1 = save[0];
 8001702:	4b0e      	ldr	r3, [pc, #56]	@ (800173c <Resume+0x6c>)
 8001704:	681a      	ldr	r2, [r3, #0]
 8001706:	4b0c      	ldr	r3, [pc, #48]	@ (8001738 <Resume+0x68>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	635a      	str	r2, [r3, #52]	@ 0x34
	htim3.Instance -> CCR2 = save[1];
 800170c:	4b0b      	ldr	r3, [pc, #44]	@ (800173c <Resume+0x6c>)
 800170e:	685a      	ldr	r2, [r3, #4]
 8001710:	4b09      	ldr	r3, [pc, #36]	@ (8001738 <Resume+0x68>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	639a      	str	r2, [r3, #56]	@ 0x38
	htim3.Instance -> CCR3 = save[2];
 8001716:	4b09      	ldr	r3, [pc, #36]	@ (800173c <Resume+0x6c>)
 8001718:	689a      	ldr	r2, [r3, #8]
 800171a:	4b07      	ldr	r3, [pc, #28]	@ (8001738 <Resume+0x68>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	63da      	str	r2, [r3, #60]	@ 0x3c
	htim3.Instance -> CCR4 = save[3];
 8001720:	4b06      	ldr	r3, [pc, #24]	@ (800173c <Resume+0x6c>)
 8001722:	68da      	ldr	r2, [r3, #12]
 8001724:	4b04      	ldr	r3, [pc, #16]	@ (8001738 <Resume+0x68>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	641a      	str	r2, [r3, #64]	@ 0x40
	HAL_TIM_Base_Start_IT(&htim7);
 800172a:	4805      	ldr	r0, [pc, #20]	@ (8001740 <Resume+0x70>)
 800172c:	f004 f98c 	bl	8005a48 <HAL_TIM_Base_Start_IT>

	return;
 8001730:	bf00      	nop
}
 8001732:	bd80      	pop	{r7, pc}
 8001734:	20000224 	.word	0x20000224
 8001738:	20000354 	.word	0x20000354
 800173c:	20000244 	.word	0x20000244
 8001740:	2000042c 	.word	0x2000042c
 8001744:	00000000 	.word	0x00000000

08001748 <Avancer>:
 */

#include "gestion_moteurs.h"
#include "vitesse_affichage.h"

void Avancer(int Pulse, TIM_HandleTypeDef* htim3){
 8001748:	b590      	push	{r4, r7, lr}
 800174a:	b083      	sub	sp, #12
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
 8001750:	6039      	str	r1, [r7, #0]

	htim3->Instance -> CCR2 = 0;
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	2200      	movs	r2, #0
 8001758:	639a      	str	r2, [r3, #56]	@ 0x38
	htim3->Instance -> CCR4 = 0;
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	2200      	movs	r2, #0
 8001760:	641a      	str	r2, [r3, #64]	@ 0x40

	if(Pulse > 499){
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001768:	db02      	blt.n	8001770 <Avancer+0x28>
		Pulse = 499;
 800176a:	f240 13f3 	movw	r3, #499	@ 0x1f3
 800176e:	607b      	str	r3, [r7, #4]
	}

	htim3->Instance -> CCR1 = Pulse;
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	687a      	ldr	r2, [r7, #4]
 8001776:	635a      	str	r2, [r3, #52]	@ 0x34
	htim3->Instance -> CCR3 = htim3->Instance -> CCR1 * 0.9;
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800177e:	4618      	mov	r0, r3
 8001780:	f7fe fee0 	bl	8000544 <__aeabi_ui2d>
 8001784:	a31c      	add	r3, pc, #112	@ (adr r3, 80017f8 <Avancer+0xb0>)
 8001786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800178a:	f7fe ff55 	bl	8000638 <__aeabi_dmul>
 800178e:	4602      	mov	r2, r0
 8001790:	460b      	mov	r3, r1
 8001792:	4610      	mov	r0, r2
 8001794:	4619      	mov	r1, r3
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	681c      	ldr	r4, [r3, #0]
 800179a:	f7ff fa25 	bl	8000be8 <__aeabi_d2uiz>
 800179e:	4603      	mov	r3, r0
 80017a0:	63e3      	str	r3, [r4, #60]	@ 0x3c


	LCD_Vitesse((uint16_t)(Pulse*0.2), (uint16_t)(Pulse*0.2), 0, 0);
 80017a2:	6878      	ldr	r0, [r7, #4]
 80017a4:	f7fe fede 	bl	8000564 <__aeabi_i2d>
 80017a8:	a315      	add	r3, pc, #84	@ (adr r3, 8001800 <Avancer+0xb8>)
 80017aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017ae:	f7fe ff43 	bl	8000638 <__aeabi_dmul>
 80017b2:	4602      	mov	r2, r0
 80017b4:	460b      	mov	r3, r1
 80017b6:	4610      	mov	r0, r2
 80017b8:	4619      	mov	r1, r3
 80017ba:	f7ff fa15 	bl	8000be8 <__aeabi_d2uiz>
 80017be:	4603      	mov	r3, r0
 80017c0:	b29c      	uxth	r4, r3
 80017c2:	6878      	ldr	r0, [r7, #4]
 80017c4:	f7fe fece 	bl	8000564 <__aeabi_i2d>
 80017c8:	a30d      	add	r3, pc, #52	@ (adr r3, 8001800 <Avancer+0xb8>)
 80017ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017ce:	f7fe ff33 	bl	8000638 <__aeabi_dmul>
 80017d2:	4602      	mov	r2, r0
 80017d4:	460b      	mov	r3, r1
 80017d6:	4610      	mov	r0, r2
 80017d8:	4619      	mov	r1, r3
 80017da:	f7ff fa05 	bl	8000be8 <__aeabi_d2uiz>
 80017de:	4603      	mov	r3, r0
 80017e0:	b299      	uxth	r1, r3
 80017e2:	2300      	movs	r3, #0
 80017e4:	2200      	movs	r2, #0
 80017e6:	4620      	mov	r0, r4
 80017e8:	f001 fb52 	bl	8002e90 <LCD_Vitesse>
	return;
 80017ec:	bf00      	nop
}
 80017ee:	370c      	adds	r7, #12
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bd90      	pop	{r4, r7, pc}
 80017f4:	f3af 8000 	nop.w
 80017f8:	cccccccd 	.word	0xcccccccd
 80017fc:	3feccccc 	.word	0x3feccccc
 8001800:	9999999a 	.word	0x9999999a
 8001804:	3fc99999 	.word	0x3fc99999

08001808 <Droite>:

void Droite(int Pulse, TIM_HandleTypeDef* htim3){
 8001808:	b590      	push	{r4, r7, lr}
 800180a:	b083      	sub	sp, #12
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
 8001810:	6039      	str	r1, [r7, #0]

	htim3->Instance -> CCR2 = 0;
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	2200      	movs	r2, #0
 8001818:	639a      	str	r2, [r3, #56]	@ 0x38
	htim3->Instance -> CCR3 = 0;
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	2200      	movs	r2, #0
 8001820:	63da      	str	r2, [r3, #60]	@ 0x3c

	if(Pulse > 499){
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001828:	db02      	blt.n	8001830 <Droite+0x28>
		Pulse = 499;
 800182a:	f240 13f3 	movw	r3, #499	@ 0x1f3
 800182e:	607b      	str	r3, [r7, #4]
	}
	htim3->Instance -> CCR1 = Pulse;
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	687a      	ldr	r2, [r7, #4]
 8001836:	635a      	str	r2, [r3, #52]	@ 0x34
	htim3->Instance -> CCR4 = htim3->Instance -> CCR1 * 0.9;
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800183e:	4618      	mov	r0, r3
 8001840:	f7fe fe80 	bl	8000544 <__aeabi_ui2d>
 8001844:	a31c      	add	r3, pc, #112	@ (adr r3, 80018b8 <Droite+0xb0>)
 8001846:	e9d3 2300 	ldrd	r2, r3, [r3]
 800184a:	f7fe fef5 	bl	8000638 <__aeabi_dmul>
 800184e:	4602      	mov	r2, r0
 8001850:	460b      	mov	r3, r1
 8001852:	4610      	mov	r0, r2
 8001854:	4619      	mov	r1, r3
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	681c      	ldr	r4, [r3, #0]
 800185a:	f7ff f9c5 	bl	8000be8 <__aeabi_d2uiz>
 800185e:	4603      	mov	r3, r0
 8001860:	6423      	str	r3, [r4, #64]	@ 0x40

	LCD_Vitesse((uint16_t)(Pulse*0.2), (uint16_t)(Pulse*0.2), 0, 1);
 8001862:	6878      	ldr	r0, [r7, #4]
 8001864:	f7fe fe7e 	bl	8000564 <__aeabi_i2d>
 8001868:	a315      	add	r3, pc, #84	@ (adr r3, 80018c0 <Droite+0xb8>)
 800186a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800186e:	f7fe fee3 	bl	8000638 <__aeabi_dmul>
 8001872:	4602      	mov	r2, r0
 8001874:	460b      	mov	r3, r1
 8001876:	4610      	mov	r0, r2
 8001878:	4619      	mov	r1, r3
 800187a:	f7ff f9b5 	bl	8000be8 <__aeabi_d2uiz>
 800187e:	4603      	mov	r3, r0
 8001880:	b29c      	uxth	r4, r3
 8001882:	6878      	ldr	r0, [r7, #4]
 8001884:	f7fe fe6e 	bl	8000564 <__aeabi_i2d>
 8001888:	a30d      	add	r3, pc, #52	@ (adr r3, 80018c0 <Droite+0xb8>)
 800188a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800188e:	f7fe fed3 	bl	8000638 <__aeabi_dmul>
 8001892:	4602      	mov	r2, r0
 8001894:	460b      	mov	r3, r1
 8001896:	4610      	mov	r0, r2
 8001898:	4619      	mov	r1, r3
 800189a:	f7ff f9a5 	bl	8000be8 <__aeabi_d2uiz>
 800189e:	4603      	mov	r3, r0
 80018a0:	b299      	uxth	r1, r3
 80018a2:	2301      	movs	r3, #1
 80018a4:	2200      	movs	r2, #0
 80018a6:	4620      	mov	r0, r4
 80018a8:	f001 faf2 	bl	8002e90 <LCD_Vitesse>
	return;
 80018ac:	bf00      	nop
}
 80018ae:	370c      	adds	r7, #12
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd90      	pop	{r4, r7, pc}
 80018b4:	f3af 8000 	nop.w
 80018b8:	cccccccd 	.word	0xcccccccd
 80018bc:	3feccccc 	.word	0x3feccccc
 80018c0:	9999999a 	.word	0x9999999a
 80018c4:	3fc99999 	.word	0x3fc99999

080018c8 <Gauche>:

void Gauche(int Pulse, TIM_HandleTypeDef* htim3){
 80018c8:	b590      	push	{r4, r7, lr}
 80018ca:	b083      	sub	sp, #12
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
 80018d0:	6039      	str	r1, [r7, #0]

	htim3->Instance -> CCR1 = 0;
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	2200      	movs	r2, #0
 80018d8:	635a      	str	r2, [r3, #52]	@ 0x34
	htim3->Instance -> CCR4 = 0;
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	2200      	movs	r2, #0
 80018e0:	641a      	str	r2, [r3, #64]	@ 0x40

	if(Pulse > 499){
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80018e8:	db02      	blt.n	80018f0 <Gauche+0x28>
		Pulse = 499;
 80018ea:	f240 13f3 	movw	r3, #499	@ 0x1f3
 80018ee:	607b      	str	r3, [r7, #4]
	}
	htim3->Instance -> CCR2 = Pulse;
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	687a      	ldr	r2, [r7, #4]
 80018f6:	639a      	str	r2, [r3, #56]	@ 0x38
	htim3->Instance -> CCR3 = htim3->Instance -> CCR2 * 0.9;
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80018fe:	4618      	mov	r0, r3
 8001900:	f7fe fe20 	bl	8000544 <__aeabi_ui2d>
 8001904:	a31c      	add	r3, pc, #112	@ (adr r3, 8001978 <Gauche+0xb0>)
 8001906:	e9d3 2300 	ldrd	r2, r3, [r3]
 800190a:	f7fe fe95 	bl	8000638 <__aeabi_dmul>
 800190e:	4602      	mov	r2, r0
 8001910:	460b      	mov	r3, r1
 8001912:	4610      	mov	r0, r2
 8001914:	4619      	mov	r1, r3
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	681c      	ldr	r4, [r3, #0]
 800191a:	f7ff f965 	bl	8000be8 <__aeabi_d2uiz>
 800191e:	4603      	mov	r3, r0
 8001920:	63e3      	str	r3, [r4, #60]	@ 0x3c

	LCD_Vitesse((uint16_t)(Pulse*0.2), (uint16_t)(Pulse*0.2), 1, 0);
 8001922:	6878      	ldr	r0, [r7, #4]
 8001924:	f7fe fe1e 	bl	8000564 <__aeabi_i2d>
 8001928:	a315      	add	r3, pc, #84	@ (adr r3, 8001980 <Gauche+0xb8>)
 800192a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800192e:	f7fe fe83 	bl	8000638 <__aeabi_dmul>
 8001932:	4602      	mov	r2, r0
 8001934:	460b      	mov	r3, r1
 8001936:	4610      	mov	r0, r2
 8001938:	4619      	mov	r1, r3
 800193a:	f7ff f955 	bl	8000be8 <__aeabi_d2uiz>
 800193e:	4603      	mov	r3, r0
 8001940:	b29c      	uxth	r4, r3
 8001942:	6878      	ldr	r0, [r7, #4]
 8001944:	f7fe fe0e 	bl	8000564 <__aeabi_i2d>
 8001948:	a30d      	add	r3, pc, #52	@ (adr r3, 8001980 <Gauche+0xb8>)
 800194a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800194e:	f7fe fe73 	bl	8000638 <__aeabi_dmul>
 8001952:	4602      	mov	r2, r0
 8001954:	460b      	mov	r3, r1
 8001956:	4610      	mov	r0, r2
 8001958:	4619      	mov	r1, r3
 800195a:	f7ff f945 	bl	8000be8 <__aeabi_d2uiz>
 800195e:	4603      	mov	r3, r0
 8001960:	b299      	uxth	r1, r3
 8001962:	2300      	movs	r3, #0
 8001964:	2201      	movs	r2, #1
 8001966:	4620      	mov	r0, r4
 8001968:	f001 fa92 	bl	8002e90 <LCD_Vitesse>
}
 800196c:	bf00      	nop
 800196e:	370c      	adds	r7, #12
 8001970:	46bd      	mov	sp, r7
 8001972:	bd90      	pop	{r4, r7, pc}
 8001974:	f3af 8000 	nop.w
 8001978:	cccccccd 	.word	0xcccccccd
 800197c:	3feccccc 	.word	0x3feccccc
 8001980:	9999999a 	.word	0x9999999a
 8001984:	3fc99999 	.word	0x3fc99999

08001988 <Reculer>:

void Reculer(int Pulse,TIM_HandleTypeDef* htim3){
 8001988:	b590      	push	{r4, r7, lr}
 800198a:	b083      	sub	sp, #12
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
 8001990:	6039      	str	r1, [r7, #0]

	htim3->Instance -> CCR1 = 0;
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	2200      	movs	r2, #0
 8001998:	635a      	str	r2, [r3, #52]	@ 0x34
	htim3->Instance -> CCR3 = 0;
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	2200      	movs	r2, #0
 80019a0:	63da      	str	r2, [r3, #60]	@ 0x3c

	if(Pulse > 499){
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80019a8:	db02      	blt.n	80019b0 <Reculer+0x28>
		Pulse = 499;
 80019aa:	f240 13f3 	movw	r3, #499	@ 0x1f3
 80019ae:	607b      	str	r3, [r7, #4]
	}

	htim3->Instance -> CCR4 = Pulse;
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	687a      	ldr	r2, [r7, #4]
 80019b6:	641a      	str	r2, [r3, #64]	@ 0x40
	htim3->Instance -> CCR2 = htim3->Instance -> CCR4 * 0.95;
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019be:	4618      	mov	r0, r3
 80019c0:	f7fe fdc0 	bl	8000544 <__aeabi_ui2d>
 80019c4:	a31c      	add	r3, pc, #112	@ (adr r3, 8001a38 <Reculer+0xb0>)
 80019c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019ca:	f7fe fe35 	bl	8000638 <__aeabi_dmul>
 80019ce:	4602      	mov	r2, r0
 80019d0:	460b      	mov	r3, r1
 80019d2:	4610      	mov	r0, r2
 80019d4:	4619      	mov	r1, r3
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	681c      	ldr	r4, [r3, #0]
 80019da:	f7ff f905 	bl	8000be8 <__aeabi_d2uiz>
 80019de:	4603      	mov	r3, r0
 80019e0:	63a3      	str	r3, [r4, #56]	@ 0x38
	LCD_Vitesse((uint16_t)(Pulse*0.2), (uint16_t)(Pulse*0.2), 1, 1);
 80019e2:	6878      	ldr	r0, [r7, #4]
 80019e4:	f7fe fdbe 	bl	8000564 <__aeabi_i2d>
 80019e8:	a315      	add	r3, pc, #84	@ (adr r3, 8001a40 <Reculer+0xb8>)
 80019ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019ee:	f7fe fe23 	bl	8000638 <__aeabi_dmul>
 80019f2:	4602      	mov	r2, r0
 80019f4:	460b      	mov	r3, r1
 80019f6:	4610      	mov	r0, r2
 80019f8:	4619      	mov	r1, r3
 80019fa:	f7ff f8f5 	bl	8000be8 <__aeabi_d2uiz>
 80019fe:	4603      	mov	r3, r0
 8001a00:	b29c      	uxth	r4, r3
 8001a02:	6878      	ldr	r0, [r7, #4]
 8001a04:	f7fe fdae 	bl	8000564 <__aeabi_i2d>
 8001a08:	a30d      	add	r3, pc, #52	@ (adr r3, 8001a40 <Reculer+0xb8>)
 8001a0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a0e:	f7fe fe13 	bl	8000638 <__aeabi_dmul>
 8001a12:	4602      	mov	r2, r0
 8001a14:	460b      	mov	r3, r1
 8001a16:	4610      	mov	r0, r2
 8001a18:	4619      	mov	r1, r3
 8001a1a:	f7ff f8e5 	bl	8000be8 <__aeabi_d2uiz>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	b299      	uxth	r1, r3
 8001a22:	2301      	movs	r3, #1
 8001a24:	2201      	movs	r2, #1
 8001a26:	4620      	mov	r0, r4
 8001a28:	f001 fa32 	bl	8002e90 <LCD_Vitesse>
	return;
 8001a2c:	bf00      	nop
}
 8001a2e:	370c      	adds	r7, #12
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd90      	pop	{r4, r7, pc}
 8001a34:	f3af 8000 	nop.w
 8001a38:	66666666 	.word	0x66666666
 8001a3c:	3fee6666 	.word	0x3fee6666
 8001a40:	9999999a 	.word	0x9999999a
 8001a44:	3fc99999 	.word	0x3fc99999

08001a48 <Stop>:
void Stop(TIM_HandleTypeDef* htim3){
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b082      	sub	sp, #8
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
	htim3->Instance -> CCR1 = 0;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	2200      	movs	r2, #0
 8001a56:	635a      	str	r2, [r3, #52]	@ 0x34
	htim3->Instance -> CCR2 = 0;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	639a      	str	r2, [r3, #56]	@ 0x38
	htim3->Instance -> CCR3 = 0;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	2200      	movs	r2, #0
 8001a66:	63da      	str	r2, [r3, #60]	@ 0x3c
	htim3->Instance -> CCR4 = 0;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	641a      	str	r2, [r3, #64]	@ 0x40
	LCD_Vitesse(0, 0, 0, 0);
 8001a70:	2300      	movs	r3, #0
 8001a72:	2200      	movs	r2, #0
 8001a74:	2100      	movs	r1, #0
 8001a76:	2000      	movs	r0, #0
 8001a78:	f001 fa0a 	bl	8002e90 <LCD_Vitesse>
}
 8001a7c:	bf00      	nop
 8001a7e:	3708      	adds	r7, #8
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}

08001a84 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b08a      	sub	sp, #40	@ 0x28
 8001a88:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a8a:	f107 0314 	add.w	r3, r7, #20
 8001a8e:	2200      	movs	r2, #0
 8001a90:	601a      	str	r2, [r3, #0]
 8001a92:	605a      	str	r2, [r3, #4]
 8001a94:	609a      	str	r2, [r3, #8]
 8001a96:	60da      	str	r2, [r3, #12]
 8001a98:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	613b      	str	r3, [r7, #16]
 8001a9e:	4b59      	ldr	r3, [pc, #356]	@ (8001c04 <MX_GPIO_Init+0x180>)
 8001aa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aa2:	4a58      	ldr	r2, [pc, #352]	@ (8001c04 <MX_GPIO_Init+0x180>)
 8001aa4:	f043 0304 	orr.w	r3, r3, #4
 8001aa8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001aaa:	4b56      	ldr	r3, [pc, #344]	@ (8001c04 <MX_GPIO_Init+0x180>)
 8001aac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aae:	f003 0304 	and.w	r3, r3, #4
 8001ab2:	613b      	str	r3, [r7, #16]
 8001ab4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	60fb      	str	r3, [r7, #12]
 8001aba:	4b52      	ldr	r3, [pc, #328]	@ (8001c04 <MX_GPIO_Init+0x180>)
 8001abc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001abe:	4a51      	ldr	r2, [pc, #324]	@ (8001c04 <MX_GPIO_Init+0x180>)
 8001ac0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001ac4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ac6:	4b4f      	ldr	r3, [pc, #316]	@ (8001c04 <MX_GPIO_Init+0x180>)
 8001ac8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ace:	60fb      	str	r3, [r7, #12]
 8001ad0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	60bb      	str	r3, [r7, #8]
 8001ad6:	4b4b      	ldr	r3, [pc, #300]	@ (8001c04 <MX_GPIO_Init+0x180>)
 8001ad8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ada:	4a4a      	ldr	r2, [pc, #296]	@ (8001c04 <MX_GPIO_Init+0x180>)
 8001adc:	f043 0301 	orr.w	r3, r3, #1
 8001ae0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ae2:	4b48      	ldr	r3, [pc, #288]	@ (8001c04 <MX_GPIO_Init+0x180>)
 8001ae4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ae6:	f003 0301 	and.w	r3, r3, #1
 8001aea:	60bb      	str	r3, [r7, #8]
 8001aec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aee:	2300      	movs	r3, #0
 8001af0:	607b      	str	r3, [r7, #4]
 8001af2:	4b44      	ldr	r3, [pc, #272]	@ (8001c04 <MX_GPIO_Init+0x180>)
 8001af4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001af6:	4a43      	ldr	r2, [pc, #268]	@ (8001c04 <MX_GPIO_Init+0x180>)
 8001af8:	f043 0302 	orr.w	r3, r3, #2
 8001afc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001afe:	4b41      	ldr	r3, [pc, #260]	@ (8001c04 <MX_GPIO_Init+0x180>)
 8001b00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b02:	f003 0302 	and.w	r3, r3, #2
 8001b06:	607b      	str	r3, [r7, #4]
 8001b08:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	2120      	movs	r1, #32
 8001b0e:	483e      	ldr	r0, [pc, #248]	@ (8001c08 <MX_GPIO_Init+0x184>)
 8001b10:	f001 fe8c 	bl	800382c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI_RST_Pin|SPI_CS_Pin|SPI_DC_Pin, GPIO_PIN_RESET);
 8001b14:	2200      	movs	r2, #0
 8001b16:	f44f 4160 	mov.w	r1, #57344	@ 0xe000
 8001b1a:	483c      	ldr	r0, [pc, #240]	@ (8001c0c <MX_GPIO_Init+0x188>)
 8001b1c:	f001 fe86 	bl	800382c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Blue_Button_Pin;
 8001b20:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001b24:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001b26:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001b2a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Blue_Button_GPIO_Port, &GPIO_InitStruct);
 8001b30:	f107 0314 	add.w	r3, r7, #20
 8001b34:	4619      	mov	r1, r3
 8001b36:	4836      	ldr	r0, [pc, #216]	@ (8001c10 <MX_GPIO_Init+0x18c>)
 8001b38:	f001 fccc 	bl	80034d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = Dipswitch_MSB_Pin|Dipswitch_LSB_Pin;
 8001b3c:	230c      	movs	r3, #12
 8001b3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b40:	2300      	movs	r3, #0
 8001b42:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001b44:	2302      	movs	r3, #2
 8001b46:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b48:	f107 0314 	add.w	r3, r7, #20
 8001b4c:	4619      	mov	r1, r3
 8001b4e:	4830      	ldr	r0, [pc, #192]	@ (8001c10 <MX_GPIO_Init+0x18c>)
 8001b50:	f001 fcc0 	bl	80034d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001b54:	2320      	movs	r3, #32
 8001b56:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b58:	2301      	movs	r3, #1
 8001b5a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b60:	2300      	movs	r3, #0
 8001b62:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001b64:	f107 0314 	add.w	r3, r7, #20
 8001b68:	4619      	mov	r1, r3
 8001b6a:	4827      	ldr	r0, [pc, #156]	@ (8001c08 <MX_GPIO_Init+0x184>)
 8001b6c:	f001 fcb2 	bl	80034d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = SPI_RST_Pin|SPI_CS_Pin|SPI_DC_Pin;
 8001b70:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8001b74:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b76:	2301      	movs	r3, #1
 8001b78:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b82:	f107 0314 	add.w	r3, r7, #20
 8001b86:	4619      	mov	r1, r3
 8001b88:	4820      	ldr	r0, [pc, #128]	@ (8001c0c <MX_GPIO_Init+0x188>)
 8001b8a:	f001 fca3 	bl	80034d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Encodeur_D_B_Pin;
 8001b8e:	2380      	movs	r3, #128	@ 0x80
 8001b90:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b92:	2300      	movs	r3, #0
 8001b94:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b96:	2300      	movs	r3, #0
 8001b98:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Encodeur_D_B_GPIO_Port, &GPIO_InitStruct);
 8001b9a:	f107 0314 	add.w	r3, r7, #20
 8001b9e:	4619      	mov	r1, r3
 8001ba0:	481b      	ldr	r0, [pc, #108]	@ (8001c10 <MX_GPIO_Init+0x18c>)
 8001ba2:	f001 fc97 	bl	80034d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = Encodeur_G_A_Pin|Encodeur_D_A_Pin;
 8001ba6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001baa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001bac:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001bb0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001bb2:	2302      	movs	r3, #2
 8001bb4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bb6:	f107 0314 	add.w	r3, r7, #20
 8001bba:	4619      	mov	r1, r3
 8001bbc:	4812      	ldr	r0, [pc, #72]	@ (8001c08 <MX_GPIO_Init+0x184>)
 8001bbe:	f001 fc89 	bl	80034d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Encodeur_G_B_Pin;
 8001bc2:	2340      	movs	r3, #64	@ 0x40
 8001bc4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Encodeur_G_B_GPIO_Port, &GPIO_InitStruct);
 8001bce:	f107 0314 	add.w	r3, r7, #20
 8001bd2:	4619      	mov	r1, r3
 8001bd4:	480d      	ldr	r0, [pc, #52]	@ (8001c0c <MX_GPIO_Init+0x188>)
 8001bd6:	f001 fc7d 	bl	80034d4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001bda:	2200      	movs	r2, #0
 8001bdc:	2100      	movs	r1, #0
 8001bde:	2017      	movs	r0, #23
 8001be0:	f001 fc41 	bl	8003466 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001be4:	2017      	movs	r0, #23
 8001be6:	f001 fc5a 	bl	800349e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001bea:	2200      	movs	r2, #0
 8001bec:	2100      	movs	r1, #0
 8001bee:	2028      	movs	r0, #40	@ 0x28
 8001bf0:	f001 fc39 	bl	8003466 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001bf4:	2028      	movs	r0, #40	@ 0x28
 8001bf6:	f001 fc52 	bl	800349e <HAL_NVIC_EnableIRQ>

}
 8001bfa:	bf00      	nop
 8001bfc:	3728      	adds	r7, #40	@ 0x28
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	bf00      	nop
 8001c04:	40023800 	.word	0x40023800
 8001c08:	40020000 	.word	0x40020000
 8001c0c:	40020400 	.word	0x40020400
 8001c10:	40020800 	.word	0x40020800

08001c14 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001c18:	4b12      	ldr	r3, [pc, #72]	@ (8001c64 <MX_I2C1_Init+0x50>)
 8001c1a:	4a13      	ldr	r2, [pc, #76]	@ (8001c68 <MX_I2C1_Init+0x54>)
 8001c1c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001c1e:	4b11      	ldr	r3, [pc, #68]	@ (8001c64 <MX_I2C1_Init+0x50>)
 8001c20:	4a12      	ldr	r2, [pc, #72]	@ (8001c6c <MX_I2C1_Init+0x58>)
 8001c22:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001c24:	4b0f      	ldr	r3, [pc, #60]	@ (8001c64 <MX_I2C1_Init+0x50>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001c2a:	4b0e      	ldr	r3, [pc, #56]	@ (8001c64 <MX_I2C1_Init+0x50>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c30:	4b0c      	ldr	r3, [pc, #48]	@ (8001c64 <MX_I2C1_Init+0x50>)
 8001c32:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001c36:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c38:	4b0a      	ldr	r3, [pc, #40]	@ (8001c64 <MX_I2C1_Init+0x50>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001c3e:	4b09      	ldr	r3, [pc, #36]	@ (8001c64 <MX_I2C1_Init+0x50>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c44:	4b07      	ldr	r3, [pc, #28]	@ (8001c64 <MX_I2C1_Init+0x50>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001c4a:	4b06      	ldr	r3, [pc, #24]	@ (8001c64 <MX_I2C1_Init+0x50>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001c50:	4804      	ldr	r0, [pc, #16]	@ (8001c64 <MX_I2C1_Init+0x50>)
 8001c52:	f001 fe1d 	bl	8003890 <HAL_I2C_Init>
 8001c56:	4603      	mov	r3, r0
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d001      	beq.n	8001c60 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001c5c:	f000 f99c 	bl	8001f98 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001c60:	bf00      	nop
 8001c62:	bd80      	pop	{r7, pc}
 8001c64:	20000260 	.word	0x20000260
 8001c68:	40005400 	.word	0x40005400
 8001c6c:	000186a0 	.word	0x000186a0

08001c70 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b08a      	sub	sp, #40	@ 0x28
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c78:	f107 0314 	add.w	r3, r7, #20
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	601a      	str	r2, [r3, #0]
 8001c80:	605a      	str	r2, [r3, #4]
 8001c82:	609a      	str	r2, [r3, #8]
 8001c84:	60da      	str	r2, [r3, #12]
 8001c86:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4a19      	ldr	r2, [pc, #100]	@ (8001cf4 <HAL_I2C_MspInit+0x84>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d12c      	bne.n	8001cec <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c92:	2300      	movs	r3, #0
 8001c94:	613b      	str	r3, [r7, #16]
 8001c96:	4b18      	ldr	r3, [pc, #96]	@ (8001cf8 <HAL_I2C_MspInit+0x88>)
 8001c98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c9a:	4a17      	ldr	r2, [pc, #92]	@ (8001cf8 <HAL_I2C_MspInit+0x88>)
 8001c9c:	f043 0302 	orr.w	r3, r3, #2
 8001ca0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ca2:	4b15      	ldr	r3, [pc, #84]	@ (8001cf8 <HAL_I2C_MspInit+0x88>)
 8001ca4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ca6:	f003 0302 	and.w	r3, r3, #2
 8001caa:	613b      	str	r3, [r7, #16]
 8001cac:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001cae:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001cb2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001cb4:	2312      	movs	r3, #18
 8001cb6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cbc:	2303      	movs	r3, #3
 8001cbe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001cc0:	2304      	movs	r3, #4
 8001cc2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cc4:	f107 0314 	add.w	r3, r7, #20
 8001cc8:	4619      	mov	r1, r3
 8001cca:	480c      	ldr	r0, [pc, #48]	@ (8001cfc <HAL_I2C_MspInit+0x8c>)
 8001ccc:	f001 fc02 	bl	80034d4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	60fb      	str	r3, [r7, #12]
 8001cd4:	4b08      	ldr	r3, [pc, #32]	@ (8001cf8 <HAL_I2C_MspInit+0x88>)
 8001cd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cd8:	4a07      	ldr	r2, [pc, #28]	@ (8001cf8 <HAL_I2C_MspInit+0x88>)
 8001cda:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001cde:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ce0:	4b05      	ldr	r3, [pc, #20]	@ (8001cf8 <HAL_I2C_MspInit+0x88>)
 8001ce2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ce4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ce8:	60fb      	str	r3, [r7, #12]
 8001cea:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001cec:	bf00      	nop
 8001cee:	3728      	adds	r7, #40	@ 0x28
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd80      	pop	{r7, pc}
 8001cf4:	40005400 	.word	0x40005400
 8001cf8:	40023800 	.word	0x40023800
 8001cfc:	40020400 	.word	0x40020400

08001d00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d04:	f001 fa3e 	bl	8003184 <HAL_Init>

  /* USER CODE BEGIN Init */

  Initialisation_manette();
 8001d08:	f000 f9a0 	bl	800204c <Initialisation_manette>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d0c:	f000 f882 	bl	8001e14 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d10:	f7ff feb8 	bl	8001a84 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001d14:	f000 ffde 	bl	8002cd4 <MX_USART2_UART_Init>
  MX_TIM6_Init();
 8001d18:	f000 fe80 	bl	8002a1c <MX_TIM6_Init>
  MX_TIM3_Init();
 8001d1c:	f000 fd6e 	bl	80027fc <MX_TIM3_Init>
  MX_TIM7_Init();
 8001d20:	f000 feb2 	bl	8002a88 <MX_TIM7_Init>
  MX_I2C1_Init();
 8001d24:	f7ff ff76 	bl	8001c14 <MX_I2C1_Init>
  MX_SPI2_Init();
 8001d28:	f000 fb70 	bl	800240c <MX_SPI2_Init>
  MX_TIM4_Init();
 8001d2c:	f000 fdfe 	bl	800292c <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim6);
 8001d30:	482d      	ldr	r0, [pc, #180]	@ (8001de8 <main+0xe8>)
 8001d32:	f003 fe89 	bl	8005a48 <HAL_TIM_Base_Start_IT>

  if (HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1) != HAL_OK)
 8001d36:	2100      	movs	r1, #0
 8001d38:	482c      	ldr	r0, [pc, #176]	@ (8001dec <main+0xec>)
 8001d3a:	f003 ff7d 	bl	8005c38 <HAL_TIM_PWM_Start>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d001      	beq.n	8001d48 <main+0x48>
  {
      Error_Handler();
 8001d44:	f000 f928 	bl	8001f98 <Error_Handler>
  }

  if (HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2) != HAL_OK)
 8001d48:	2104      	movs	r1, #4
 8001d4a:	4828      	ldr	r0, [pc, #160]	@ (8001dec <main+0xec>)
 8001d4c:	f003 ff74 	bl	8005c38 <HAL_TIM_PWM_Start>
 8001d50:	4603      	mov	r3, r0
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d001      	beq.n	8001d5a <main+0x5a>
  {
      Error_Handler();
 8001d56:	f000 f91f 	bl	8001f98 <Error_Handler>
  }

  if (HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3) != HAL_OK)
 8001d5a:	2108      	movs	r1, #8
 8001d5c:	4823      	ldr	r0, [pc, #140]	@ (8001dec <main+0xec>)
 8001d5e:	f003 ff6b 	bl	8005c38 <HAL_TIM_PWM_Start>
 8001d62:	4603      	mov	r3, r0
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d001      	beq.n	8001d6c <main+0x6c>
  {
      Error_Handler();
 8001d68:	f000 f916 	bl	8001f98 <Error_Handler>
  }

  if (HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4) != HAL_OK)
 8001d6c:	210c      	movs	r1, #12
 8001d6e:	481f      	ldr	r0, [pc, #124]	@ (8001dec <main+0xec>)
 8001d70:	f003 ff62 	bl	8005c38 <HAL_TIM_PWM_Start>
 8001d74:	4603      	mov	r3, r0
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d001      	beq.n	8001d7e <main+0x7e>
  {
      Error_Handler();
 8001d7a:	f000 f90d 	bl	8001f98 <Error_Handler>
  }
  arrTimerVitesse = __HAL_TIM_GET_AUTORELOAD(&htim6);
 8001d7e:	4b1a      	ldr	r3, [pc, #104]	@ (8001de8 <main+0xe8>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d84:	b29a      	uxth	r2, r3
 8001d86:	4b1a      	ldr	r3, [pc, #104]	@ (8001df0 <main+0xf0>)
 8001d88:	801a      	strh	r2, [r3, #0]
  curr_mode = MANUAL_MODE;
 8001d8a:	4b1a      	ldr	r3, [pc, #104]	@ (8001df4 <main+0xf4>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	701a      	strb	r2, [r3, #0]
  curr_step = 1;
 8001d90:	4b19      	ldr	r3, [pc, #100]	@ (8001df8 <main+0xf8>)
 8001d92:	2201      	movs	r2, #1
 8001d94:	701a      	strb	r2, [r3, #0]
  if(DEBUG_MODE) {
	  CLOCKWISE_FACTOR = STARTING_VALUE;
	  COUNTER_CLW_FACTOR = STARTING_VALUE;
	  RATIO = STARTING_VALUE;
  } else {
	  RATIO = 0.61;
 8001d96:	4b19      	ldr	r3, [pc, #100]	@ (8001dfc <main+0xfc>)
 8001d98:	4a19      	ldr	r2, [pc, #100]	@ (8001e00 <main+0x100>)
 8001d9a:	601a      	str	r2, [r3, #0]
	  CLOCKWISE_FACTOR = 56.75;
 8001d9c:	4b19      	ldr	r3, [pc, #100]	@ (8001e04 <main+0x104>)
 8001d9e:	4a1a      	ldr	r2, [pc, #104]	@ (8001e08 <main+0x108>)
 8001da0:	601a      	str	r2, [r3, #0]
	  COUNTER_CLW_FACTOR = 0;
 8001da2:	4b1a      	ldr	r3, [pc, #104]	@ (8001e0c <main+0x10c>)
 8001da4:	f04f 0200 	mov.w	r2, #0
 8001da8:	601a      	str	r2, [r3, #0]
  }
  LCD_Init(&LCD_Init_OK);
 8001daa:	4819      	ldr	r0, [pc, #100]	@ (8001e10 <main+0x110>)
 8001dac:	f001 f8c2 	bl	8002f34 <LCD_Init>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	if(DEBUG_MODE)							// Find constant values
		  Constant_Tuning_Mode();
	else if(curr_mode != MANUAL_MODE) { 	// Toggle auto mode
 8001db0:	4b10      	ldr	r3, [pc, #64]	@ (8001df4 <main+0xf4>)
 8001db2:	781b      	ldrb	r3, [r3, #0]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d013      	beq.n	8001de0 <main+0xe0>
		switch(curr_mode) {
 8001db8:	4b0e      	ldr	r3, [pc, #56]	@ (8001df4 <main+0xf4>)
 8001dba:	781b      	ldrb	r3, [r3, #0]
 8001dbc:	2b03      	cmp	r3, #3
 8001dbe:	d00c      	beq.n	8001dda <main+0xda>
 8001dc0:	2b03      	cmp	r3, #3
 8001dc2:	dcf5      	bgt.n	8001db0 <main+0xb0>
 8001dc4:	2b01      	cmp	r3, #1
 8001dc6:	d002      	beq.n	8001dce <main+0xce>
 8001dc8:	2b02      	cmp	r3, #2
 8001dca:	d003      	beq.n	8001dd4 <main+0xd4>
 8001dcc:	e00a      	b.n	8001de4 <main+0xe4>
			case CIRCLE_MODE:
				Auto_Circle();
 8001dce:	f7ff fb2b 	bl	8001428 <Auto_Circle>
				break;
 8001dd2:	e007      	b.n	8001de4 <main+0xe4>
			case BACK_FORTH_MODE:
				Auto_Back_Forth();
 8001dd4:	f7ff fbba 	bl	800154c <Auto_Back_Forth>
				break;
 8001dd8:	e004      	b.n	8001de4 <main+0xe4>
			case SQUARE_MODE:
				Auto_Square();
 8001dda:	f7ff fbf9 	bl	80015d0 <Auto_Square>
				break;
 8001dde:	e001      	b.n	8001de4 <main+0xe4>
		}
	}
	else { 	// Manual mode
		Controller();
 8001de0:	f000 f956 	bl	8002090 <Controller>
	if(DEBUG_MODE)							// Find constant values
 8001de4:	e7e4      	b.n	8001db0 <main+0xb0>
 8001de6:	bf00      	nop
 8001de8:	200003e4 	.word	0x200003e4
 8001dec:	20000354 	.word	0x20000354
 8001df0:	200002b4 	.word	0x200002b4
 8001df4:	20000226 	.word	0x20000226
 8001df8:	20000000 	.word	0x20000000
 8001dfc:	20000254 	.word	0x20000254
 8001e00:	3f1c28f6 	.word	0x3f1c28f6
 8001e04:	20000258 	.word	0x20000258
 8001e08:	42630000 	.word	0x42630000
 8001e0c:	2000025c 	.word	0x2000025c
 8001e10:	200002b6 	.word	0x200002b6

08001e14 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b094      	sub	sp, #80	@ 0x50
 8001e18:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e1a:	f107 031c 	add.w	r3, r7, #28
 8001e1e:	2234      	movs	r2, #52	@ 0x34
 8001e20:	2100      	movs	r1, #0
 8001e22:	4618      	mov	r0, r3
 8001e24:	f006 ff7c 	bl	8008d20 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e28:	f107 0308 	add.w	r3, r7, #8
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	601a      	str	r2, [r3, #0]
 8001e30:	605a      	str	r2, [r3, #4]
 8001e32:	609a      	str	r2, [r3, #8]
 8001e34:	60da      	str	r2, [r3, #12]
 8001e36:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e38:	2300      	movs	r3, #0
 8001e3a:	607b      	str	r3, [r7, #4]
 8001e3c:	4b2a      	ldr	r3, [pc, #168]	@ (8001ee8 <SystemClock_Config+0xd4>)
 8001e3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e40:	4a29      	ldr	r2, [pc, #164]	@ (8001ee8 <SystemClock_Config+0xd4>)
 8001e42:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e46:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e48:	4b27      	ldr	r3, [pc, #156]	@ (8001ee8 <SystemClock_Config+0xd4>)
 8001e4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e4c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e50:	607b      	str	r3, [r7, #4]
 8001e52:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001e54:	2300      	movs	r3, #0
 8001e56:	603b      	str	r3, [r7, #0]
 8001e58:	4b24      	ldr	r3, [pc, #144]	@ (8001eec <SystemClock_Config+0xd8>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001e60:	4a22      	ldr	r2, [pc, #136]	@ (8001eec <SystemClock_Config+0xd8>)
 8001e62:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e66:	6013      	str	r3, [r2, #0]
 8001e68:	4b20      	ldr	r3, [pc, #128]	@ (8001eec <SystemClock_Config+0xd8>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001e70:	603b      	str	r3, [r7, #0]
 8001e72:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001e74:	2302      	movs	r3, #2
 8001e76:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001e78:	2301      	movs	r3, #1
 8001e7a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001e7c:	2310      	movs	r3, #16
 8001e7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e80:	2302      	movs	r3, #2
 8001e82:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001e84:	2300      	movs	r3, #0
 8001e86:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001e88:	2310      	movs	r3, #16
 8001e8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001e8c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001e90:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001e92:	2304      	movs	r3, #4
 8001e94:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001e96:	2302      	movs	r3, #2
 8001e98:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001e9a:	2302      	movs	r3, #2
 8001e9c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e9e:	f107 031c 	add.w	r3, r7, #28
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	f003 f838 	bl	8004f18 <HAL_RCC_OscConfig>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d001      	beq.n	8001eb2 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001eae:	f000 f873 	bl	8001f98 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001eb2:	230f      	movs	r3, #15
 8001eb4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001eb6:	2302      	movs	r3, #2
 8001eb8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001ebe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ec2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001ec8:	f107 0308 	add.w	r3, r7, #8
 8001ecc:	2102      	movs	r1, #2
 8001ece:	4618      	mov	r0, r3
 8001ed0:	f002 fcd8 	bl	8004884 <HAL_RCC_ClockConfig>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d001      	beq.n	8001ede <SystemClock_Config+0xca>
  {
    Error_Handler();
 8001eda:	f000 f85d 	bl	8001f98 <Error_Handler>
  }
}
 8001ede:	bf00      	nop
 8001ee0:	3750      	adds	r7, #80	@ 0x50
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	bf00      	nop
 8001ee8:	40023800 	.word	0x40023800
 8001eec:	40007000 	.word	0x40007000

08001ef0 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001ef0:	b590      	push	{r4, r7, lr}
 8001ef2:	b085      	sub	sp, #20
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	80fb      	strh	r3, [r7, #6]
	{
		nbPulseG++ ; // compte les pulses de lencodeur droit
	}
	*/

	if(GPIO_Pin == Blue_Button_Pin) {
 8001efa:	88fb      	ldrh	r3, [r7, #6]
 8001efc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001f00:	d127      	bne.n	8001f52 <HAL_GPIO_EXTI_Callback+0x62>
			Paint_DrawString_EN (120, 150, buffer, &Font16, MAGENTA, WHITE);
			return;
		}

		// Resume if auto mode paused
		if(pause)
 8001f02:	4b15      	ldr	r3, [pc, #84]	@ (8001f58 <HAL_GPIO_EXTI_Callback+0x68>)
 8001f04:	781b      	ldrb	r3, [r3, #0]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d002      	beq.n	8001f10 <HAL_GPIO_EXTI_Callback+0x20>
			Resume();
 8001f0a:	f7ff fbe1 	bl	80016d0 <Resume>
 8001f0e:	e005      	b.n	8001f1c <HAL_GPIO_EXTI_Callback+0x2c>

		// Pause auto mode if button pressed while auto mode on
		else if(curr_mode != MANUAL_MODE)
 8001f10:	4b12      	ldr	r3, [pc, #72]	@ (8001f5c <HAL_GPIO_EXTI_Callback+0x6c>)
 8001f12:	781b      	ldrb	r3, [r3, #0]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d001      	beq.n	8001f1c <HAL_GPIO_EXTI_Callback+0x2c>
			Pause();
 8001f18:	f7ff fb9c 	bl	8001654 <Pause>

		// Change current mode only on manual mode
		if(curr_mode == MANUAL_MODE) {
 8001f1c:	4b0f      	ldr	r3, [pc, #60]	@ (8001f5c <HAL_GPIO_EXTI_Callback+0x6c>)
 8001f1e:	781b      	ldrb	r3, [r3, #0]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d116      	bne.n	8001f52 <HAL_GPIO_EXTI_Callback+0x62>
			dip_state = Get_Mode(HAL_GPIO_ReadPin(Dipswitch_MSB_GPIO_Port, Dipswitch_MSB_Pin), HAL_GPIO_ReadPin(Dipswitch_LSB_GPIO_Port, Dipswitch_LSB_Pin));
 8001f24:	2104      	movs	r1, #4
 8001f26:	480e      	ldr	r0, [pc, #56]	@ (8001f60 <HAL_GPIO_EXTI_Callback+0x70>)
 8001f28:	f001 fc68 	bl	80037fc <HAL_GPIO_ReadPin>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	461c      	mov	r4, r3
 8001f30:	2108      	movs	r1, #8
 8001f32:	480b      	ldr	r0, [pc, #44]	@ (8001f60 <HAL_GPIO_EXTI_Callback+0x70>)
 8001f34:	f001 fc62 	bl	80037fc <HAL_GPIO_ReadPin>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	4619      	mov	r1, r3
 8001f3c:	4620      	mov	r0, r4
 8001f3e:	f7ff f871 	bl	8001024 <Get_Mode>
 8001f42:	4603      	mov	r3, r0
 8001f44:	b2da      	uxtb	r2, r3
 8001f46:	4b07      	ldr	r3, [pc, #28]	@ (8001f64 <HAL_GPIO_EXTI_Callback+0x74>)
 8001f48:	701a      	strb	r2, [r3, #0]
			curr_mode = dip_state;
 8001f4a:	4b06      	ldr	r3, [pc, #24]	@ (8001f64 <HAL_GPIO_EXTI_Callback+0x74>)
 8001f4c:	781a      	ldrb	r2, [r3, #0]
 8001f4e:	4b03      	ldr	r3, [pc, #12]	@ (8001f5c <HAL_GPIO_EXTI_Callback+0x6c>)
 8001f50:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8001f52:	3714      	adds	r7, #20
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd90      	pop	{r4, r7, pc}
 8001f58:	20000224 	.word	0x20000224
 8001f5c:	20000226 	.word	0x20000226
 8001f60:	40020800 	.word	0x40020800
 8001f64:	20000225 	.word	0x20000225

08001f68 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b083      	sub	sp, #12
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
    	}
    	*/

    }

    if(htim->Instance == TIM7) {	// Triggered every 10 µs
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a06      	ldr	r2, [pc, #24]	@ (8001f90 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d104      	bne.n	8001f84 <HAL_TIM_PeriodElapsedCallback+0x1c>
    	timer_count += 10;
 8001f7a:	4b06      	ldr	r3, [pc, #24]	@ (8001f94 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	330a      	adds	r3, #10
 8001f80:	4a04      	ldr	r2, [pc, #16]	@ (8001f94 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8001f82:	6013      	str	r3, [r2, #0]
    }
}
 8001f84:	bf00      	nop
 8001f86:	370c      	adds	r7, #12
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8e:	4770      	bx	lr
 8001f90:	40001400 	.word	0x40001400
 8001f94:	2000023c 	.word	0x2000023c

08001f98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f9c:	b672      	cpsid	i
}
 8001f9e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001fa0:	bf00      	nop
 8001fa2:	e7fd      	b.n	8001fa0 <Error_Handler+0x8>

08001fa4 <Format_Data>:
int maxInverse = 500;
int sendPulseMotor;

int toggle;

void Format_Data() {
 8001fa4:	b480      	push	{r7}
 8001fa6:	af00      	add	r7, sp, #0
	/*FROM LAB7*/
	formatted_data[0] = data[0];
 8001fa8:	4b20      	ldr	r3, [pc, #128]	@ (800202c <Format_Data+0x88>)
 8001faa:	781b      	ldrb	r3, [r3, #0]
 8001fac:	461a      	mov	r2, r3
 8001fae:	4b20      	ldr	r3, [pc, #128]	@ (8002030 <Format_Data+0x8c>)
 8001fb0:	601a      	str	r2, [r3, #0]
	formatted_data[1] = data[1];
 8001fb2:	4b1e      	ldr	r3, [pc, #120]	@ (800202c <Format_Data+0x88>)
 8001fb4:	785b      	ldrb	r3, [r3, #1]
 8001fb6:	461a      	mov	r2, r3
 8001fb8:	4b1d      	ldr	r3, [pc, #116]	@ (8002030 <Format_Data+0x8c>)
 8001fba:	605a      	str	r2, [r3, #4]
	formatted_data[5] = (data[5] & 0x02);
 8001fbc:	4b1b      	ldr	r3, [pc, #108]	@ (800202c <Format_Data+0x88>)
 8001fbe:	795b      	ldrb	r3, [r3, #5]
 8001fc0:	f003 0302 	and.w	r3, r3, #2
 8001fc4:	4a1a      	ldr	r2, [pc, #104]	@ (8002030 <Format_Data+0x8c>)
 8001fc6:	6153      	str	r3, [r2, #20]
	if(formatted_data[5] == 2)
 8001fc8:	4b19      	ldr	r3, [pc, #100]	@ (8002030 <Format_Data+0x8c>)
 8001fca:	695b      	ldr	r3, [r3, #20]
 8001fcc:	2b02      	cmp	r3, #2
 8001fce:	d102      	bne.n	8001fd6 <Format_Data+0x32>
		formatted_data[5] = 1;
 8001fd0:	4b17      	ldr	r3, [pc, #92]	@ (8002030 <Format_Data+0x8c>)
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	615a      	str	r2, [r3, #20]
	formatted_data[6] = (data[5] & 0x01);
 8001fd6:	4b15      	ldr	r3, [pc, #84]	@ (800202c <Format_Data+0x88>)
 8001fd8:	795b      	ldrb	r3, [r3, #5]
 8001fda:	f003 0301 	and.w	r3, r3, #1
 8001fde:	4a14      	ldr	r2, [pc, #80]	@ (8002030 <Format_Data+0x8c>)
 8001fe0:	6193      	str	r3, [r2, #24]

	/*MY DATA*/
	Xdata = data[0];
 8001fe2:	4b12      	ldr	r3, [pc, #72]	@ (800202c <Format_Data+0x88>)
 8001fe4:	781b      	ldrb	r3, [r3, #0]
 8001fe6:	461a      	mov	r2, r3
 8001fe8:	4b12      	ldr	r3, [pc, #72]	@ (8002034 <Format_Data+0x90>)
 8001fea:	601a      	str	r2, [r3, #0]
	Ydata = data[1];
 8001fec:	4b0f      	ldr	r3, [pc, #60]	@ (800202c <Format_Data+0x88>)
 8001fee:	785b      	ldrb	r3, [r3, #1]
 8001ff0:	461a      	mov	r2, r3
 8001ff2:	4b11      	ldr	r3, [pc, #68]	@ (8002038 <Format_Data+0x94>)
 8001ff4:	601a      	str	r2, [r3, #0]
	Xpulse = data[0];
 8001ff6:	4b0d      	ldr	r3, [pc, #52]	@ (800202c <Format_Data+0x88>)
 8001ff8:	781b      	ldrb	r3, [r3, #0]
 8001ffa:	461a      	mov	r2, r3
 8001ffc:	4b0f      	ldr	r3, [pc, #60]	@ (800203c <Format_Data+0x98>)
 8001ffe:	601a      	str	r2, [r3, #0]
	Ypulse = data[1];
 8002000:	4b0a      	ldr	r3, [pc, #40]	@ (800202c <Format_Data+0x88>)
 8002002:	785b      	ldrb	r3, [r3, #1]
 8002004:	461a      	mov	r2, r3
 8002006:	4b0e      	ldr	r3, [pc, #56]	@ (8002040 <Format_Data+0x9c>)
 8002008:	601a      	str	r2, [r3, #0]
	Cbutton = (data[5] & 0x02);
 800200a:	4b08      	ldr	r3, [pc, #32]	@ (800202c <Format_Data+0x88>)
 800200c:	795b      	ldrb	r3, [r3, #5]
 800200e:	f003 0302 	and.w	r3, r3, #2
 8002012:	4a0c      	ldr	r2, [pc, #48]	@ (8002044 <Format_Data+0xa0>)
 8002014:	6013      	str	r3, [r2, #0]
	Zbutton = (data[5] & 0x01);
 8002016:	4b05      	ldr	r3, [pc, #20]	@ (800202c <Format_Data+0x88>)
 8002018:	795b      	ldrb	r3, [r3, #5]
 800201a:	f003 0301 	and.w	r3, r3, #1
 800201e:	4a0a      	ldr	r2, [pc, #40]	@ (8002048 <Format_Data+0xa4>)
 8002020:	6013      	str	r3, [r2, #0]
	/* neutral x and y data: 128
	max x and y data: 1-254 */

}
 8002022:	bf00      	nop
 8002024:	46bd      	mov	sp, r7
 8002026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202a:	4770      	bx	lr
 800202c:	200002b8 	.word	0x200002b8
 8002030:	200002c0 	.word	0x200002c0
 8002034:	200002dc 	.word	0x200002dc
 8002038:	200002e0 	.word	0x200002e0
 800203c:	200002e4 	.word	0x200002e4
 8002040:	200002e8 	.word	0x200002e8
 8002044:	200002ec 	.word	0x200002ec
 8002048:	200002f0 	.word	0x200002f0

0800204c <Initialisation_manette>:


void Initialisation_manette(){
 800204c:	b580      	push	{r7, lr}
 800204e:	b082      	sub	sp, #8
 8002050:	af02      	add	r7, sp, #8

	HAL_I2C_Master_Transmit(&hi2c1, NUNCHUK_ADDRESS, initcomm1, 2, HAL_MAX_DELAY);
 8002052:	f04f 33ff 	mov.w	r3, #4294967295
 8002056:	9300      	str	r3, [sp, #0]
 8002058:	2302      	movs	r3, #2
 800205a:	4a0a      	ldr	r2, [pc, #40]	@ (8002084 <Initialisation_manette+0x38>)
 800205c:	21a4      	movs	r1, #164	@ 0xa4
 800205e:	480a      	ldr	r0, [pc, #40]	@ (8002088 <Initialisation_manette+0x3c>)
 8002060:	f001 fd5a 	bl	8003b18 <HAL_I2C_Master_Transmit>
	HAL_Delay(10);
 8002064:	200a      	movs	r0, #10
 8002066:	f001 f8ff 	bl	8003268 <HAL_Delay>
	HAL_I2C_Master_Transmit(&hi2c1, NUNCHUK_ADDRESS, initcomm2, 2, HAL_MAX_DELAY);
 800206a:	f04f 33ff 	mov.w	r3, #4294967295
 800206e:	9300      	str	r3, [sp, #0]
 8002070:	2302      	movs	r3, #2
 8002072:	4a06      	ldr	r2, [pc, #24]	@ (800208c <Initialisation_manette+0x40>)
 8002074:	21a4      	movs	r1, #164	@ 0xa4
 8002076:	4804      	ldr	r0, [pc, #16]	@ (8002088 <Initialisation_manette+0x3c>)
 8002078:	f001 fd4e 	bl	8003b18 <HAL_I2C_Master_Transmit>

}
 800207c:	bf00      	nop
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}
 8002082:	bf00      	nop
 8002084:	20000004 	.word	0x20000004
 8002088:	20000260 	.word	0x20000260
 800208c:	20000008 	.word	0x20000008

08002090 <Controller>:


void Controller(){
 8002090:	b5b0      	push	{r4, r5, r7, lr}
 8002092:	b082      	sub	sp, #8
 8002094:	af02      	add	r7, sp, #8

	HAL_I2C_Master_Transmit(&hi2c1, NUNCHUK_ADDRESS, 0x00, 1, HAL_MAX_DELAY);
 8002096:	f04f 33ff 	mov.w	r3, #4294967295
 800209a:	9300      	str	r3, [sp, #0]
 800209c:	2301      	movs	r3, #1
 800209e:	2200      	movs	r2, #0
 80020a0:	21a4      	movs	r1, #164	@ 0xa4
 80020a2:	48b5      	ldr	r0, [pc, #724]	@ (8002378 <Controller+0x2e8>)
 80020a4:	f001 fd38 	bl	8003b18 <HAL_I2C_Master_Transmit>
	HAL_Delay(10);
 80020a8:	200a      	movs	r0, #10
 80020aa:	f001 f8dd 	bl	8003268 <HAL_Delay>
	HAL_I2C_Master_Receive(&hi2c1, NUNCHUK_ADDRESS, data, 6, HAL_MAX_DELAY);
 80020ae:	f04f 33ff 	mov.w	r3, #4294967295
 80020b2:	9300      	str	r3, [sp, #0]
 80020b4:	2306      	movs	r3, #6
 80020b6:	4ab1      	ldr	r2, [pc, #708]	@ (800237c <Controller+0x2ec>)
 80020b8:	21a4      	movs	r1, #164	@ 0xa4
 80020ba:	48af      	ldr	r0, [pc, #700]	@ (8002378 <Controller+0x2e8>)
 80020bc:	f001 fe2a 	bl	8003d14 <HAL_I2C_Master_Receive>
	Format_Data();
 80020c0:	f7ff ff70 	bl	8001fa4 <Format_Data>



	if(Cbutton == 0){
 80020c4:	4bae      	ldr	r3, [pc, #696]	@ (8002380 <Controller+0x2f0>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d104      	bne.n	80020d6 <Controller+0x46>
		HAL_Delay(10);
 80020cc:	200a      	movs	r0, #10
 80020ce:	f001 f8cb 	bl	8003268 <HAL_Delay>
		ToggleModeMan();
 80020d2:	f000 f983 	bl	80023dc <ToggleModeMan>
	}
	if(Zbutton == 0){
 80020d6:	4bab      	ldr	r3, [pc, #684]	@ (8002384 <Controller+0x2f4>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d104      	bne.n	80020e8 <Controller+0x58>
		HAL_Delay(10);
 80020de:	200a      	movs	r0, #10
 80020e0:	f001 f8c2 	bl	8003268 <HAL_Delay>
		ToggleModeVit();
 80020e4:	f000 f964 	bl	80023b0 <ToggleModeVit>
	}


	if(ToggleC == 1){
 80020e8:	4ba7      	ldr	r3, [pc, #668]	@ (8002388 <Controller+0x2f8>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	2b01      	cmp	r3, #1
 80020ee:	f040 8132 	bne.w	8002356 <Controller+0x2c6>


		if(Xdata == 128 && Ydata == 128){
 80020f2:	4ba6      	ldr	r3, [pc, #664]	@ (800238c <Controller+0x2fc>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	2b80      	cmp	r3, #128	@ 0x80
 80020f8:	d107      	bne.n	800210a <Controller+0x7a>
 80020fa:	4ba5      	ldr	r3, [pc, #660]	@ (8002390 <Controller+0x300>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	2b80      	cmp	r3, #128	@ 0x80
 8002100:	d103      	bne.n	800210a <Controller+0x7a>
				Stop(&htim3);
 8002102:	48a4      	ldr	r0, [pc, #656]	@ (8002394 <Controller+0x304>)
 8002104:	f7ff fca0 	bl	8001a48 <Stop>
	}
	else{
		Stop(&htim3);
	}

}
 8002108:	e128      	b.n	800235c <Controller+0x2cc>
		if(modeVitesse==1){
 800210a:	4ba3      	ldr	r3, [pc, #652]	@ (8002398 <Controller+0x308>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	2b01      	cmp	r3, #1
 8002110:	d159      	bne.n	80021c6 <Controller+0x136>
			Xpulse = Xdata * 0.33 * pulseCoeff;
 8002112:	4b9e      	ldr	r3, [pc, #632]	@ (800238c <Controller+0x2fc>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4618      	mov	r0, r3
 8002118:	f7fe fa24 	bl	8000564 <__aeabi_i2d>
 800211c:	a392      	add	r3, pc, #584	@ (adr r3, 8002368 <Controller+0x2d8>)
 800211e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002122:	f7fe fa89 	bl	8000638 <__aeabi_dmul>
 8002126:	4602      	mov	r2, r0
 8002128:	460b      	mov	r3, r1
 800212a:	4614      	mov	r4, r2
 800212c:	461d      	mov	r5, r3
 800212e:	4b9b      	ldr	r3, [pc, #620]	@ (800239c <Controller+0x30c>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4618      	mov	r0, r3
 8002134:	f7fe fa28 	bl	8000588 <__aeabi_f2d>
 8002138:	4602      	mov	r2, r0
 800213a:	460b      	mov	r3, r1
 800213c:	4620      	mov	r0, r4
 800213e:	4629      	mov	r1, r5
 8002140:	f7fe fa7a 	bl	8000638 <__aeabi_dmul>
 8002144:	4602      	mov	r2, r0
 8002146:	460b      	mov	r3, r1
 8002148:	4610      	mov	r0, r2
 800214a:	4619      	mov	r1, r3
 800214c:	f7fe fd24 	bl	8000b98 <__aeabi_d2iz>
 8002150:	4603      	mov	r3, r0
 8002152:	4a93      	ldr	r2, [pc, #588]	@ (80023a0 <Controller+0x310>)
 8002154:	6013      	str	r3, [r2, #0]
			Ypulse = Ydata * 0.33 * pulseCoeff;
 8002156:	4b8e      	ldr	r3, [pc, #568]	@ (8002390 <Controller+0x300>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4618      	mov	r0, r3
 800215c:	f7fe fa02 	bl	8000564 <__aeabi_i2d>
 8002160:	a381      	add	r3, pc, #516	@ (adr r3, 8002368 <Controller+0x2d8>)
 8002162:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002166:	f7fe fa67 	bl	8000638 <__aeabi_dmul>
 800216a:	4602      	mov	r2, r0
 800216c:	460b      	mov	r3, r1
 800216e:	4614      	mov	r4, r2
 8002170:	461d      	mov	r5, r3
 8002172:	4b8a      	ldr	r3, [pc, #552]	@ (800239c <Controller+0x30c>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4618      	mov	r0, r3
 8002178:	f7fe fa06 	bl	8000588 <__aeabi_f2d>
 800217c:	4602      	mov	r2, r0
 800217e:	460b      	mov	r3, r1
 8002180:	4620      	mov	r0, r4
 8002182:	4629      	mov	r1, r5
 8002184:	f7fe fa58 	bl	8000638 <__aeabi_dmul>
 8002188:	4602      	mov	r2, r0
 800218a:	460b      	mov	r3, r1
 800218c:	4610      	mov	r0, r2
 800218e:	4619      	mov	r1, r3
 8002190:	f7fe fd02 	bl	8000b98 <__aeabi_d2iz>
 8002194:	4603      	mov	r3, r0
 8002196:	4a83      	ldr	r2, [pc, #524]	@ (80023a4 <Controller+0x314>)
 8002198:	6013      	str	r3, [r2, #0]
			maxInverse = maxInverse * 0.33;
 800219a:	4b83      	ldr	r3, [pc, #524]	@ (80023a8 <Controller+0x318>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4618      	mov	r0, r3
 80021a0:	f7fe f9e0 	bl	8000564 <__aeabi_i2d>
 80021a4:	a370      	add	r3, pc, #448	@ (adr r3, 8002368 <Controller+0x2d8>)
 80021a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021aa:	f7fe fa45 	bl	8000638 <__aeabi_dmul>
 80021ae:	4602      	mov	r2, r0
 80021b0:	460b      	mov	r3, r1
 80021b2:	4610      	mov	r0, r2
 80021b4:	4619      	mov	r1, r3
 80021b6:	f7fe fcef 	bl	8000b98 <__aeabi_d2iz>
 80021ba:	4603      	mov	r3, r0
 80021bc:	4a7a      	ldr	r2, [pc, #488]	@ (80023a8 <Controller+0x318>)
 80021be:	6013      	str	r3, [r2, #0]
			LCD_Manuel(1);
 80021c0:	2001      	movs	r0, #1
 80021c2:	f000 fdf9 	bl	8002db8 <LCD_Manuel>
		if(modeVitesse==2){
 80021c6:	4b74      	ldr	r3, [pc, #464]	@ (8002398 <Controller+0x308>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	2b02      	cmp	r3, #2
 80021cc:	d159      	bne.n	8002282 <Controller+0x1f2>
			Xpulse = Xdata * 0.66 * pulseCoeff;
 80021ce:	4b6f      	ldr	r3, [pc, #444]	@ (800238c <Controller+0x2fc>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4618      	mov	r0, r3
 80021d4:	f7fe f9c6 	bl	8000564 <__aeabi_i2d>
 80021d8:	a365      	add	r3, pc, #404	@ (adr r3, 8002370 <Controller+0x2e0>)
 80021da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021de:	f7fe fa2b 	bl	8000638 <__aeabi_dmul>
 80021e2:	4602      	mov	r2, r0
 80021e4:	460b      	mov	r3, r1
 80021e6:	4614      	mov	r4, r2
 80021e8:	461d      	mov	r5, r3
 80021ea:	4b6c      	ldr	r3, [pc, #432]	@ (800239c <Controller+0x30c>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4618      	mov	r0, r3
 80021f0:	f7fe f9ca 	bl	8000588 <__aeabi_f2d>
 80021f4:	4602      	mov	r2, r0
 80021f6:	460b      	mov	r3, r1
 80021f8:	4620      	mov	r0, r4
 80021fa:	4629      	mov	r1, r5
 80021fc:	f7fe fa1c 	bl	8000638 <__aeabi_dmul>
 8002200:	4602      	mov	r2, r0
 8002202:	460b      	mov	r3, r1
 8002204:	4610      	mov	r0, r2
 8002206:	4619      	mov	r1, r3
 8002208:	f7fe fcc6 	bl	8000b98 <__aeabi_d2iz>
 800220c:	4603      	mov	r3, r0
 800220e:	4a64      	ldr	r2, [pc, #400]	@ (80023a0 <Controller+0x310>)
 8002210:	6013      	str	r3, [r2, #0]
			Ypulse = Ydata * 0.66 * pulseCoeff;
 8002212:	4b5f      	ldr	r3, [pc, #380]	@ (8002390 <Controller+0x300>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4618      	mov	r0, r3
 8002218:	f7fe f9a4 	bl	8000564 <__aeabi_i2d>
 800221c:	a354      	add	r3, pc, #336	@ (adr r3, 8002370 <Controller+0x2e0>)
 800221e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002222:	f7fe fa09 	bl	8000638 <__aeabi_dmul>
 8002226:	4602      	mov	r2, r0
 8002228:	460b      	mov	r3, r1
 800222a:	4614      	mov	r4, r2
 800222c:	461d      	mov	r5, r3
 800222e:	4b5b      	ldr	r3, [pc, #364]	@ (800239c <Controller+0x30c>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4618      	mov	r0, r3
 8002234:	f7fe f9a8 	bl	8000588 <__aeabi_f2d>
 8002238:	4602      	mov	r2, r0
 800223a:	460b      	mov	r3, r1
 800223c:	4620      	mov	r0, r4
 800223e:	4629      	mov	r1, r5
 8002240:	f7fe f9fa 	bl	8000638 <__aeabi_dmul>
 8002244:	4602      	mov	r2, r0
 8002246:	460b      	mov	r3, r1
 8002248:	4610      	mov	r0, r2
 800224a:	4619      	mov	r1, r3
 800224c:	f7fe fca4 	bl	8000b98 <__aeabi_d2iz>
 8002250:	4603      	mov	r3, r0
 8002252:	4a54      	ldr	r2, [pc, #336]	@ (80023a4 <Controller+0x314>)
 8002254:	6013      	str	r3, [r2, #0]
			maxInverse = maxInverse * 0.66;
 8002256:	4b54      	ldr	r3, [pc, #336]	@ (80023a8 <Controller+0x318>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4618      	mov	r0, r3
 800225c:	f7fe f982 	bl	8000564 <__aeabi_i2d>
 8002260:	a343      	add	r3, pc, #268	@ (adr r3, 8002370 <Controller+0x2e0>)
 8002262:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002266:	f7fe f9e7 	bl	8000638 <__aeabi_dmul>
 800226a:	4602      	mov	r2, r0
 800226c:	460b      	mov	r3, r1
 800226e:	4610      	mov	r0, r2
 8002270:	4619      	mov	r1, r3
 8002272:	f7fe fc91 	bl	8000b98 <__aeabi_d2iz>
 8002276:	4603      	mov	r3, r0
 8002278:	4a4b      	ldr	r2, [pc, #300]	@ (80023a8 <Controller+0x318>)
 800227a:	6013      	str	r3, [r2, #0]
			LCD_Manuel(2);
 800227c:	2002      	movs	r0, #2
 800227e:	f000 fd9b 	bl	8002db8 <LCD_Manuel>
		if(modeVitesse==3){
 8002282:	4b45      	ldr	r3, [pc, #276]	@ (8002398 <Controller+0x308>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	2b03      	cmp	r3, #3
 8002288:	d124      	bne.n	80022d4 <Controller+0x244>
			Xpulse = Xdata * pulseCoeff;
 800228a:	4b40      	ldr	r3, [pc, #256]	@ (800238c <Controller+0x2fc>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	ee07 3a90 	vmov	s15, r3
 8002292:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002296:	4b41      	ldr	r3, [pc, #260]	@ (800239c <Controller+0x30c>)
 8002298:	edd3 7a00 	vldr	s15, [r3]
 800229c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022a0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80022a4:	ee17 2a90 	vmov	r2, s15
 80022a8:	4b3d      	ldr	r3, [pc, #244]	@ (80023a0 <Controller+0x310>)
 80022aa:	601a      	str	r2, [r3, #0]
			Ypulse = Ydata * pulseCoeff;
 80022ac:	4b38      	ldr	r3, [pc, #224]	@ (8002390 <Controller+0x300>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	ee07 3a90 	vmov	s15, r3
 80022b4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80022b8:	4b38      	ldr	r3, [pc, #224]	@ (800239c <Controller+0x30c>)
 80022ba:	edd3 7a00 	vldr	s15, [r3]
 80022be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022c2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80022c6:	ee17 2a90 	vmov	r2, s15
 80022ca:	4b36      	ldr	r3, [pc, #216]	@ (80023a4 <Controller+0x314>)
 80022cc:	601a      	str	r2, [r3, #0]
			LCD_Manuel(3);
 80022ce:	2003      	movs	r0, #3
 80022d0:	f000 fd72 	bl	8002db8 <LCD_Manuel>
		if(Xdata>128){
 80022d4:	4b2d      	ldr	r3, [pc, #180]	@ (800238c <Controller+0x2fc>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	2b80      	cmp	r3, #128	@ 0x80
 80022da:	dd0a      	ble.n	80022f2 <Controller+0x262>
			sendPulseMotor = Xpulse;
 80022dc:	4b30      	ldr	r3, [pc, #192]	@ (80023a0 <Controller+0x310>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4a32      	ldr	r2, [pc, #200]	@ (80023ac <Controller+0x31c>)
 80022e2:	6013      	str	r3, [r2, #0]
			Droite(sendPulseMotor,&htim3);
 80022e4:	4b31      	ldr	r3, [pc, #196]	@ (80023ac <Controller+0x31c>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	492a      	ldr	r1, [pc, #168]	@ (8002394 <Controller+0x304>)
 80022ea:	4618      	mov	r0, r3
 80022ec:	f7ff fa8c 	bl	8001808 <Droite>
 80022f0:	e010      	b.n	8002314 <Controller+0x284>
		else if(Xdata<128) {
 80022f2:	4b26      	ldr	r3, [pc, #152]	@ (800238c <Controller+0x2fc>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	2b7f      	cmp	r3, #127	@ 0x7f
 80022f8:	dc0c      	bgt.n	8002314 <Controller+0x284>
				sendPulseMotor = maxInverse - Xpulse;
 80022fa:	4b2b      	ldr	r3, [pc, #172]	@ (80023a8 <Controller+0x318>)
 80022fc:	681a      	ldr	r2, [r3, #0]
 80022fe:	4b28      	ldr	r3, [pc, #160]	@ (80023a0 <Controller+0x310>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	1ad3      	subs	r3, r2, r3
 8002304:	4a29      	ldr	r2, [pc, #164]	@ (80023ac <Controller+0x31c>)
 8002306:	6013      	str	r3, [r2, #0]
				Gauche(sendPulseMotor,&htim3);
 8002308:	4b28      	ldr	r3, [pc, #160]	@ (80023ac <Controller+0x31c>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4921      	ldr	r1, [pc, #132]	@ (8002394 <Controller+0x304>)
 800230e:	4618      	mov	r0, r3
 8002310:	f7ff fada 	bl	80018c8 <Gauche>
		if(Ydata>128){
 8002314:	4b1e      	ldr	r3, [pc, #120]	@ (8002390 <Controller+0x300>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	2b80      	cmp	r3, #128	@ 0x80
 800231a:	dd0a      	ble.n	8002332 <Controller+0x2a2>
			sendPulseMotor = Ypulse;
 800231c:	4b21      	ldr	r3, [pc, #132]	@ (80023a4 <Controller+0x314>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a22      	ldr	r2, [pc, #136]	@ (80023ac <Controller+0x31c>)
 8002322:	6013      	str	r3, [r2, #0]
			Avancer(sendPulseMotor,&htim3);
 8002324:	4b21      	ldr	r3, [pc, #132]	@ (80023ac <Controller+0x31c>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	491a      	ldr	r1, [pc, #104]	@ (8002394 <Controller+0x304>)
 800232a:	4618      	mov	r0, r3
 800232c:	f7ff fa0c 	bl	8001748 <Avancer>
}
 8002330:	e014      	b.n	800235c <Controller+0x2cc>
		else if(Ydata<128){
 8002332:	4b17      	ldr	r3, [pc, #92]	@ (8002390 <Controller+0x300>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	2b7f      	cmp	r3, #127	@ 0x7f
 8002338:	dc10      	bgt.n	800235c <Controller+0x2cc>
				sendPulseMotor = maxInverse - Ypulse;
 800233a:	4b1b      	ldr	r3, [pc, #108]	@ (80023a8 <Controller+0x318>)
 800233c:	681a      	ldr	r2, [r3, #0]
 800233e:	4b19      	ldr	r3, [pc, #100]	@ (80023a4 <Controller+0x314>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	1ad3      	subs	r3, r2, r3
 8002344:	4a19      	ldr	r2, [pc, #100]	@ (80023ac <Controller+0x31c>)
 8002346:	6013      	str	r3, [r2, #0]
				Reculer(sendPulseMotor,&htim3);
 8002348:	4b18      	ldr	r3, [pc, #96]	@ (80023ac <Controller+0x31c>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4911      	ldr	r1, [pc, #68]	@ (8002394 <Controller+0x304>)
 800234e:	4618      	mov	r0, r3
 8002350:	f7ff fb1a 	bl	8001988 <Reculer>
}
 8002354:	e002      	b.n	800235c <Controller+0x2cc>
		Stop(&htim3);
 8002356:	480f      	ldr	r0, [pc, #60]	@ (8002394 <Controller+0x304>)
 8002358:	f7ff fb76 	bl	8001a48 <Stop>
}
 800235c:	bf00      	nop
 800235e:	46bd      	mov	sp, r7
 8002360:	bdb0      	pop	{r4, r5, r7, pc}
 8002362:	bf00      	nop
 8002364:	f3af 8000 	nop.w
 8002368:	51eb851f 	.word	0x51eb851f
 800236c:	3fd51eb8 	.word	0x3fd51eb8
 8002370:	51eb851f 	.word	0x51eb851f
 8002374:	3fe51eb8 	.word	0x3fe51eb8
 8002378:	20000260 	.word	0x20000260
 800237c:	200002b8 	.word	0x200002b8
 8002380:	200002ec 	.word	0x200002ec
 8002384:	200002f0 	.word	0x200002f0
 8002388:	2000000c 	.word	0x2000000c
 800238c:	200002dc 	.word	0x200002dc
 8002390:	200002e0 	.word	0x200002e0
 8002394:	20000354 	.word	0x20000354
 8002398:	20000010 	.word	0x20000010
 800239c:	20000014 	.word	0x20000014
 80023a0:	200002e4 	.word	0x200002e4
 80023a4:	200002e8 	.word	0x200002e8
 80023a8:	20000018 	.word	0x20000018
 80023ac:	200002f4 	.word	0x200002f4

080023b0 <ToggleModeVit>:


void ToggleModeVit() {
 80023b0:	b480      	push	{r7}
 80023b2:	af00      	add	r7, sp, #0
	if(modeVitesse == 3) {
 80023b4:	4b08      	ldr	r3, [pc, #32]	@ (80023d8 <ToggleModeVit+0x28>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	2b03      	cmp	r3, #3
 80023ba:	d103      	bne.n	80023c4 <ToggleModeVit+0x14>
		modeVitesse = 1;
 80023bc:	4b06      	ldr	r3, [pc, #24]	@ (80023d8 <ToggleModeVit+0x28>)
 80023be:	2201      	movs	r2, #1
 80023c0:	601a      	str	r2, [r3, #0]
	}
	else {
		modeVitesse++;
	}
}
 80023c2:	e004      	b.n	80023ce <ToggleModeVit+0x1e>
		modeVitesse++;
 80023c4:	4b04      	ldr	r3, [pc, #16]	@ (80023d8 <ToggleModeVit+0x28>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	3301      	adds	r3, #1
 80023ca:	4a03      	ldr	r2, [pc, #12]	@ (80023d8 <ToggleModeVit+0x28>)
 80023cc:	6013      	str	r3, [r2, #0]
}
 80023ce:	bf00      	nop
 80023d0:	46bd      	mov	sp, r7
 80023d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d6:	4770      	bx	lr
 80023d8:	20000010 	.word	0x20000010

080023dc <ToggleModeMan>:

void ToggleModeMan() {
 80023dc:	b480      	push	{r7}
 80023de:	af00      	add	r7, sp, #0

	if(ToggleC == 1){
 80023e0:	4b09      	ldr	r3, [pc, #36]	@ (8002408 <ToggleModeMan+0x2c>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	2b01      	cmp	r3, #1
 80023e6:	d103      	bne.n	80023f0 <ToggleModeMan+0x14>
		ToggleC = 0;
 80023e8:	4b07      	ldr	r3, [pc, #28]	@ (8002408 <ToggleModeMan+0x2c>)
 80023ea:	2200      	movs	r2, #0
 80023ec:	601a      	str	r2, [r3, #0]
	}
	else if(ToggleC == 0){
		ToggleC = 1;
	}

}
 80023ee:	e006      	b.n	80023fe <ToggleModeMan+0x22>
	else if(ToggleC == 0){
 80023f0:	4b05      	ldr	r3, [pc, #20]	@ (8002408 <ToggleModeMan+0x2c>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d102      	bne.n	80023fe <ToggleModeMan+0x22>
		ToggleC = 1;
 80023f8:	4b03      	ldr	r3, [pc, #12]	@ (8002408 <ToggleModeMan+0x2c>)
 80023fa:	2201      	movs	r2, #1
 80023fc:	601a      	str	r2, [r3, #0]
}
 80023fe:	bf00      	nop
 8002400:	46bd      	mov	sp, r7
 8002402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002406:	4770      	bx	lr
 8002408:	2000000c 	.word	0x2000000c

0800240c <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8002410:	4b18      	ldr	r3, [pc, #96]	@ (8002474 <MX_SPI2_Init+0x68>)
 8002412:	4a19      	ldr	r2, [pc, #100]	@ (8002478 <MX_SPI2_Init+0x6c>)
 8002414:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002416:	4b17      	ldr	r3, [pc, #92]	@ (8002474 <MX_SPI2_Init+0x68>)
 8002418:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800241c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_1LINE;
 800241e:	4b15      	ldr	r3, [pc, #84]	@ (8002474 <MX_SPI2_Init+0x68>)
 8002420:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002424:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002426:	4b13      	ldr	r3, [pc, #76]	@ (8002474 <MX_SPI2_Init+0x68>)
 8002428:	2200      	movs	r2, #0
 800242a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800242c:	4b11      	ldr	r3, [pc, #68]	@ (8002474 <MX_SPI2_Init+0x68>)
 800242e:	2200      	movs	r2, #0
 8002430:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002432:	4b10      	ldr	r3, [pc, #64]	@ (8002474 <MX_SPI2_Init+0x68>)
 8002434:	2200      	movs	r2, #0
 8002436:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002438:	4b0e      	ldr	r3, [pc, #56]	@ (8002474 <MX_SPI2_Init+0x68>)
 800243a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800243e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8002440:	4b0c      	ldr	r3, [pc, #48]	@ (8002474 <MX_SPI2_Init+0x68>)
 8002442:	2208      	movs	r2, #8
 8002444:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002446:	4b0b      	ldr	r3, [pc, #44]	@ (8002474 <MX_SPI2_Init+0x68>)
 8002448:	2200      	movs	r2, #0
 800244a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800244c:	4b09      	ldr	r3, [pc, #36]	@ (8002474 <MX_SPI2_Init+0x68>)
 800244e:	2200      	movs	r2, #0
 8002450:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002452:	4b08      	ldr	r3, [pc, #32]	@ (8002474 <MX_SPI2_Init+0x68>)
 8002454:	2200      	movs	r2, #0
 8002456:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8002458:	4b06      	ldr	r3, [pc, #24]	@ (8002474 <MX_SPI2_Init+0x68>)
 800245a:	220a      	movs	r2, #10
 800245c:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800245e:	4805      	ldr	r0, [pc, #20]	@ (8002474 <MX_SPI2_Init+0x68>)
 8002460:	f002 fff8 	bl	8005454 <HAL_SPI_Init>
 8002464:	4603      	mov	r3, r0
 8002466:	2b00      	cmp	r3, #0
 8002468:	d001      	beq.n	800246e <MX_SPI2_Init+0x62>
  {
    Error_Handler();
 800246a:	f7ff fd95 	bl	8001f98 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800246e:	bf00      	nop
 8002470:	bd80      	pop	{r7, pc}
 8002472:	bf00      	nop
 8002474:	200002f8 	.word	0x200002f8
 8002478:	40003800 	.word	0x40003800

0800247c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b08a      	sub	sp, #40	@ 0x28
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002484:	f107 0314 	add.w	r3, r7, #20
 8002488:	2200      	movs	r2, #0
 800248a:	601a      	str	r2, [r3, #0]
 800248c:	605a      	str	r2, [r3, #4]
 800248e:	609a      	str	r2, [r3, #8]
 8002490:	60da      	str	r2, [r3, #12]
 8002492:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a28      	ldr	r2, [pc, #160]	@ (800253c <HAL_SPI_MspInit+0xc0>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d14a      	bne.n	8002534 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800249e:	2300      	movs	r3, #0
 80024a0:	613b      	str	r3, [r7, #16]
 80024a2:	4b27      	ldr	r3, [pc, #156]	@ (8002540 <HAL_SPI_MspInit+0xc4>)
 80024a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024a6:	4a26      	ldr	r2, [pc, #152]	@ (8002540 <HAL_SPI_MspInit+0xc4>)
 80024a8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80024ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80024ae:	4b24      	ldr	r3, [pc, #144]	@ (8002540 <HAL_SPI_MspInit+0xc4>)
 80024b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024b2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80024b6:	613b      	str	r3, [r7, #16]
 80024b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80024ba:	2300      	movs	r3, #0
 80024bc:	60fb      	str	r3, [r7, #12]
 80024be:	4b20      	ldr	r3, [pc, #128]	@ (8002540 <HAL_SPI_MspInit+0xc4>)
 80024c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024c2:	4a1f      	ldr	r2, [pc, #124]	@ (8002540 <HAL_SPI_MspInit+0xc4>)
 80024c4:	f043 0304 	orr.w	r3, r3, #4
 80024c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80024ca:	4b1d      	ldr	r3, [pc, #116]	@ (8002540 <HAL_SPI_MspInit+0xc4>)
 80024cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024ce:	f003 0304 	and.w	r3, r3, #4
 80024d2:	60fb      	str	r3, [r7, #12]
 80024d4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024d6:	2300      	movs	r3, #0
 80024d8:	60bb      	str	r3, [r7, #8]
 80024da:	4b19      	ldr	r3, [pc, #100]	@ (8002540 <HAL_SPI_MspInit+0xc4>)
 80024dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024de:	4a18      	ldr	r2, [pc, #96]	@ (8002540 <HAL_SPI_MspInit+0xc4>)
 80024e0:	f043 0302 	orr.w	r3, r3, #2
 80024e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80024e6:	4b16      	ldr	r3, [pc, #88]	@ (8002540 <HAL_SPI_MspInit+0xc4>)
 80024e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024ea:	f003 0302 	and.w	r3, r3, #2
 80024ee:	60bb      	str	r3, [r7, #8]
 80024f0:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC1     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80024f2:	2302      	movs	r3, #2
 80024f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024f6:	2302      	movs	r3, #2
 80024f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024fa:	2300      	movs	r3, #0
 80024fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024fe:	2303      	movs	r3, #3
 8002500:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 8002502:	2307      	movs	r3, #7
 8002504:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002506:	f107 0314 	add.w	r3, r7, #20
 800250a:	4619      	mov	r1, r3
 800250c:	480d      	ldr	r0, [pc, #52]	@ (8002544 <HAL_SPI_MspInit+0xc8>)
 800250e:	f000 ffe1 	bl	80034d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002512:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002516:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002518:	2302      	movs	r3, #2
 800251a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800251c:	2300      	movs	r3, #0
 800251e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002520:	2303      	movs	r3, #3
 8002522:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002524:	2305      	movs	r3, #5
 8002526:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002528:	f107 0314 	add.w	r3, r7, #20
 800252c:	4619      	mov	r1, r3
 800252e:	4806      	ldr	r0, [pc, #24]	@ (8002548 <HAL_SPI_MspInit+0xcc>)
 8002530:	f000 ffd0 	bl	80034d4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8002534:	bf00      	nop
 8002536:	3728      	adds	r7, #40	@ 0x28
 8002538:	46bd      	mov	sp, r7
 800253a:	bd80      	pop	{r7, pc}
 800253c:	40003800 	.word	0x40003800
 8002540:	40023800 	.word	0x40023800
 8002544:	40020800 	.word	0x40020800
 8002548:	40020400 	.word	0x40020400

0800254c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b082      	sub	sp, #8
 8002550:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002552:	2300      	movs	r3, #0
 8002554:	607b      	str	r3, [r7, #4]
 8002556:	4b10      	ldr	r3, [pc, #64]	@ (8002598 <HAL_MspInit+0x4c>)
 8002558:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800255a:	4a0f      	ldr	r2, [pc, #60]	@ (8002598 <HAL_MspInit+0x4c>)
 800255c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002560:	6453      	str	r3, [r2, #68]	@ 0x44
 8002562:	4b0d      	ldr	r3, [pc, #52]	@ (8002598 <HAL_MspInit+0x4c>)
 8002564:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002566:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800256a:	607b      	str	r3, [r7, #4]
 800256c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800256e:	2300      	movs	r3, #0
 8002570:	603b      	str	r3, [r7, #0]
 8002572:	4b09      	ldr	r3, [pc, #36]	@ (8002598 <HAL_MspInit+0x4c>)
 8002574:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002576:	4a08      	ldr	r2, [pc, #32]	@ (8002598 <HAL_MspInit+0x4c>)
 8002578:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800257c:	6413      	str	r3, [r2, #64]	@ 0x40
 800257e:	4b06      	ldr	r3, [pc, #24]	@ (8002598 <HAL_MspInit+0x4c>)
 8002580:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002582:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002586:	603b      	str	r3, [r7, #0]
 8002588:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800258a:	2007      	movs	r0, #7
 800258c:	f000 ff60 	bl	8003450 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002590:	bf00      	nop
 8002592:	3708      	adds	r7, #8
 8002594:	46bd      	mov	sp, r7
 8002596:	bd80      	pop	{r7, pc}
 8002598:	40023800 	.word	0x40023800

0800259c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800259c:	b480      	push	{r7}
 800259e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80025a0:	bf00      	nop
 80025a2:	e7fd      	b.n	80025a0 <NMI_Handler+0x4>

080025a4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80025a4:	b480      	push	{r7}
 80025a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80025a8:	bf00      	nop
 80025aa:	e7fd      	b.n	80025a8 <HardFault_Handler+0x4>

080025ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80025ac:	b480      	push	{r7}
 80025ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80025b0:	bf00      	nop
 80025b2:	e7fd      	b.n	80025b0 <MemManage_Handler+0x4>

080025b4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80025b4:	b480      	push	{r7}
 80025b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80025b8:	bf00      	nop
 80025ba:	e7fd      	b.n	80025b8 <BusFault_Handler+0x4>

080025bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80025bc:	b480      	push	{r7}
 80025be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80025c0:	bf00      	nop
 80025c2:	e7fd      	b.n	80025c0 <UsageFault_Handler+0x4>

080025c4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80025c4:	b480      	push	{r7}
 80025c6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80025c8:	bf00      	nop
 80025ca:	46bd      	mov	sp, r7
 80025cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d0:	4770      	bx	lr

080025d2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80025d2:	b480      	push	{r7}
 80025d4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80025d6:	bf00      	nop
 80025d8:	46bd      	mov	sp, r7
 80025da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025de:	4770      	bx	lr

080025e0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80025e0:	b480      	push	{r7}
 80025e2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80025e4:	bf00      	nop
 80025e6:	46bd      	mov	sp, r7
 80025e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ec:	4770      	bx	lr

080025ee <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80025ee:	b580      	push	{r7, lr}
 80025f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80025f2:	f000 fe19 	bl	8003228 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80025f6:	bf00      	nop
 80025f8:	bd80      	pop	{r7, pc}

080025fa <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80025fa:	b580      	push	{r7, lr}
 80025fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Encodeur_G_A_Pin);
 80025fe:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8002602:	f001 f92d 	bl	8003860 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Encodeur_D_A_Pin);
 8002606:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800260a:	f001 f929 	bl	8003860 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800260e:	bf00      	nop
 8002610:	bd80      	pop	{r7, pc}

08002612 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002612:	b580      	push	{r7, lr}
 8002614:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Blue_Button_Pin);
 8002616:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800261a:	f001 f921 	bl	8003860 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800261e:	bf00      	nop
 8002620:	bd80      	pop	{r7, pc}
	...

08002624 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002628:	4802      	ldr	r0, [pc, #8]	@ (8002634 <TIM6_DAC_IRQHandler+0x10>)
 800262a:	f003 fc3d 	bl	8005ea8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800262e:	bf00      	nop
 8002630:	bd80      	pop	{r7, pc}
 8002632:	bf00      	nop
 8002634:	200003e4 	.word	0x200003e4

08002638 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800263c:	4802      	ldr	r0, [pc, #8]	@ (8002648 <TIM7_IRQHandler+0x10>)
 800263e:	f003 fc33 	bl	8005ea8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8002642:	bf00      	nop
 8002644:	bd80      	pop	{r7, pc}
 8002646:	bf00      	nop
 8002648:	2000042c 	.word	0x2000042c

0800264c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800264c:	b480      	push	{r7}
 800264e:	af00      	add	r7, sp, #0
  return 1;
 8002650:	2301      	movs	r3, #1
}
 8002652:	4618      	mov	r0, r3
 8002654:	46bd      	mov	sp, r7
 8002656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265a:	4770      	bx	lr

0800265c <_kill>:

int _kill(int pid, int sig)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b082      	sub	sp, #8
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
 8002664:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002666:	f006 fbbd 	bl	8008de4 <__errno>
 800266a:	4603      	mov	r3, r0
 800266c:	2216      	movs	r2, #22
 800266e:	601a      	str	r2, [r3, #0]
  return -1;
 8002670:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002674:	4618      	mov	r0, r3
 8002676:	3708      	adds	r7, #8
 8002678:	46bd      	mov	sp, r7
 800267a:	bd80      	pop	{r7, pc}

0800267c <_exit>:

void _exit (int status)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b082      	sub	sp, #8
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002684:	f04f 31ff 	mov.w	r1, #4294967295
 8002688:	6878      	ldr	r0, [r7, #4]
 800268a:	f7ff ffe7 	bl	800265c <_kill>
  while (1) {}    /* Make sure we hang here */
 800268e:	bf00      	nop
 8002690:	e7fd      	b.n	800268e <_exit+0x12>

08002692 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002692:	b580      	push	{r7, lr}
 8002694:	b086      	sub	sp, #24
 8002696:	af00      	add	r7, sp, #0
 8002698:	60f8      	str	r0, [r7, #12]
 800269a:	60b9      	str	r1, [r7, #8]
 800269c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800269e:	2300      	movs	r3, #0
 80026a0:	617b      	str	r3, [r7, #20]
 80026a2:	e00a      	b.n	80026ba <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80026a4:	f3af 8000 	nop.w
 80026a8:	4601      	mov	r1, r0
 80026aa:	68bb      	ldr	r3, [r7, #8]
 80026ac:	1c5a      	adds	r2, r3, #1
 80026ae:	60ba      	str	r2, [r7, #8]
 80026b0:	b2ca      	uxtb	r2, r1
 80026b2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026b4:	697b      	ldr	r3, [r7, #20]
 80026b6:	3301      	adds	r3, #1
 80026b8:	617b      	str	r3, [r7, #20]
 80026ba:	697a      	ldr	r2, [r7, #20]
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	429a      	cmp	r2, r3
 80026c0:	dbf0      	blt.n	80026a4 <_read+0x12>
  }

  return len;
 80026c2:	687b      	ldr	r3, [r7, #4]
}
 80026c4:	4618      	mov	r0, r3
 80026c6:	3718      	adds	r7, #24
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bd80      	pop	{r7, pc}

080026cc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b086      	sub	sp, #24
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	60f8      	str	r0, [r7, #12]
 80026d4:	60b9      	str	r1, [r7, #8]
 80026d6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026d8:	2300      	movs	r3, #0
 80026da:	617b      	str	r3, [r7, #20]
 80026dc:	e009      	b.n	80026f2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80026de:	68bb      	ldr	r3, [r7, #8]
 80026e0:	1c5a      	adds	r2, r3, #1
 80026e2:	60ba      	str	r2, [r7, #8]
 80026e4:	781b      	ldrb	r3, [r3, #0]
 80026e6:	4618      	mov	r0, r3
 80026e8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026ec:	697b      	ldr	r3, [r7, #20]
 80026ee:	3301      	adds	r3, #1
 80026f0:	617b      	str	r3, [r7, #20]
 80026f2:	697a      	ldr	r2, [r7, #20]
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	429a      	cmp	r2, r3
 80026f8:	dbf1      	blt.n	80026de <_write+0x12>
  }
  return len;
 80026fa:	687b      	ldr	r3, [r7, #4]
}
 80026fc:	4618      	mov	r0, r3
 80026fe:	3718      	adds	r7, #24
 8002700:	46bd      	mov	sp, r7
 8002702:	bd80      	pop	{r7, pc}

08002704 <_close>:

int _close(int file)
{
 8002704:	b480      	push	{r7}
 8002706:	b083      	sub	sp, #12
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800270c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002710:	4618      	mov	r0, r3
 8002712:	370c      	adds	r7, #12
 8002714:	46bd      	mov	sp, r7
 8002716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271a:	4770      	bx	lr

0800271c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800271c:	b480      	push	{r7}
 800271e:	b083      	sub	sp, #12
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
 8002724:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800272c:	605a      	str	r2, [r3, #4]
  return 0;
 800272e:	2300      	movs	r3, #0
}
 8002730:	4618      	mov	r0, r3
 8002732:	370c      	adds	r7, #12
 8002734:	46bd      	mov	sp, r7
 8002736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273a:	4770      	bx	lr

0800273c <_isatty>:

int _isatty(int file)
{
 800273c:	b480      	push	{r7}
 800273e:	b083      	sub	sp, #12
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002744:	2301      	movs	r3, #1
}
 8002746:	4618      	mov	r0, r3
 8002748:	370c      	adds	r7, #12
 800274a:	46bd      	mov	sp, r7
 800274c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002750:	4770      	bx	lr

08002752 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002752:	b480      	push	{r7}
 8002754:	b085      	sub	sp, #20
 8002756:	af00      	add	r7, sp, #0
 8002758:	60f8      	str	r0, [r7, #12]
 800275a:	60b9      	str	r1, [r7, #8]
 800275c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800275e:	2300      	movs	r3, #0
}
 8002760:	4618      	mov	r0, r3
 8002762:	3714      	adds	r7, #20
 8002764:	46bd      	mov	sp, r7
 8002766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276a:	4770      	bx	lr

0800276c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b086      	sub	sp, #24
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002774:	4a14      	ldr	r2, [pc, #80]	@ (80027c8 <_sbrk+0x5c>)
 8002776:	4b15      	ldr	r3, [pc, #84]	@ (80027cc <_sbrk+0x60>)
 8002778:	1ad3      	subs	r3, r2, r3
 800277a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800277c:	697b      	ldr	r3, [r7, #20]
 800277e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002780:	4b13      	ldr	r3, [pc, #76]	@ (80027d0 <_sbrk+0x64>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d102      	bne.n	800278e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002788:	4b11      	ldr	r3, [pc, #68]	@ (80027d0 <_sbrk+0x64>)
 800278a:	4a12      	ldr	r2, [pc, #72]	@ (80027d4 <_sbrk+0x68>)
 800278c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800278e:	4b10      	ldr	r3, [pc, #64]	@ (80027d0 <_sbrk+0x64>)
 8002790:	681a      	ldr	r2, [r3, #0]
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	4413      	add	r3, r2
 8002796:	693a      	ldr	r2, [r7, #16]
 8002798:	429a      	cmp	r2, r3
 800279a:	d207      	bcs.n	80027ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800279c:	f006 fb22 	bl	8008de4 <__errno>
 80027a0:	4603      	mov	r3, r0
 80027a2:	220c      	movs	r2, #12
 80027a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80027a6:	f04f 33ff 	mov.w	r3, #4294967295
 80027aa:	e009      	b.n	80027c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80027ac:	4b08      	ldr	r3, [pc, #32]	@ (80027d0 <_sbrk+0x64>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80027b2:	4b07      	ldr	r3, [pc, #28]	@ (80027d0 <_sbrk+0x64>)
 80027b4:	681a      	ldr	r2, [r3, #0]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	4413      	add	r3, r2
 80027ba:	4a05      	ldr	r2, [pc, #20]	@ (80027d0 <_sbrk+0x64>)
 80027bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80027be:	68fb      	ldr	r3, [r7, #12]
}
 80027c0:	4618      	mov	r0, r3
 80027c2:	3718      	adds	r7, #24
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bd80      	pop	{r7, pc}
 80027c8:	20020000 	.word	0x20020000
 80027cc:	00000400 	.word	0x00000400
 80027d0:	20000350 	.word	0x20000350
 80027d4:	20000630 	.word	0x20000630

080027d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80027d8:	b480      	push	{r7}
 80027da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80027dc:	4b06      	ldr	r3, [pc, #24]	@ (80027f8 <SystemInit+0x20>)
 80027de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027e2:	4a05      	ldr	r2, [pc, #20]	@ (80027f8 <SystemInit+0x20>)
 80027e4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80027e8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80027ec:	bf00      	nop
 80027ee:	46bd      	mov	sp, r7
 80027f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f4:	4770      	bx	lr
 80027f6:	bf00      	nop
 80027f8:	e000ed00 	.word	0xe000ed00

080027fc <MX_TIM3_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim7;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b08e      	sub	sp, #56	@ 0x38
 8002800:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002802:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002806:	2200      	movs	r2, #0
 8002808:	601a      	str	r2, [r3, #0]
 800280a:	605a      	str	r2, [r3, #4]
 800280c:	609a      	str	r2, [r3, #8]
 800280e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002810:	f107 0320 	add.w	r3, r7, #32
 8002814:	2200      	movs	r2, #0
 8002816:	601a      	str	r2, [r3, #0]
 8002818:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800281a:	1d3b      	adds	r3, r7, #4
 800281c:	2200      	movs	r2, #0
 800281e:	601a      	str	r2, [r3, #0]
 8002820:	605a      	str	r2, [r3, #4]
 8002822:	609a      	str	r2, [r3, #8]
 8002824:	60da      	str	r2, [r3, #12]
 8002826:	611a      	str	r2, [r3, #16]
 8002828:	615a      	str	r2, [r3, #20]
 800282a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800282c:	4b3d      	ldr	r3, [pc, #244]	@ (8002924 <MX_TIM3_Init+0x128>)
 800282e:	4a3e      	ldr	r2, [pc, #248]	@ (8002928 <MX_TIM3_Init+0x12c>)
 8002830:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84-1;
 8002832:	4b3c      	ldr	r3, [pc, #240]	@ (8002924 <MX_TIM3_Init+0x128>)
 8002834:	2253      	movs	r2, #83	@ 0x53
 8002836:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002838:	4b3a      	ldr	r3, [pc, #232]	@ (8002924 <MX_TIM3_Init+0x128>)
 800283a:	2200      	movs	r2, #0
 800283c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 500-1;
 800283e:	4b39      	ldr	r3, [pc, #228]	@ (8002924 <MX_TIM3_Init+0x128>)
 8002840:	f240 12f3 	movw	r2, #499	@ 0x1f3
 8002844:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002846:	4b37      	ldr	r3, [pc, #220]	@ (8002924 <MX_TIM3_Init+0x128>)
 8002848:	2200      	movs	r2, #0
 800284a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800284c:	4b35      	ldr	r3, [pc, #212]	@ (8002924 <MX_TIM3_Init+0x128>)
 800284e:	2200      	movs	r2, #0
 8002850:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002852:	4834      	ldr	r0, [pc, #208]	@ (8002924 <MX_TIM3_Init+0x128>)
 8002854:	f003 f8a8 	bl	80059a8 <HAL_TIM_Base_Init>
 8002858:	4603      	mov	r3, r0
 800285a:	2b00      	cmp	r3, #0
 800285c:	d001      	beq.n	8002862 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800285e:	f7ff fb9b 	bl	8001f98 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002862:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002866:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002868:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800286c:	4619      	mov	r1, r3
 800286e:	482d      	ldr	r0, [pc, #180]	@ (8002924 <MX_TIM3_Init+0x128>)
 8002870:	f003 fccc 	bl	800620c <HAL_TIM_ConfigClockSource>
 8002874:	4603      	mov	r3, r0
 8002876:	2b00      	cmp	r3, #0
 8002878:	d001      	beq.n	800287e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800287a:	f7ff fb8d 	bl	8001f98 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800287e:	4829      	ldr	r0, [pc, #164]	@ (8002924 <MX_TIM3_Init+0x128>)
 8002880:	f003 f981 	bl	8005b86 <HAL_TIM_PWM_Init>
 8002884:	4603      	mov	r3, r0
 8002886:	2b00      	cmp	r3, #0
 8002888:	d001      	beq.n	800288e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800288a:	f7ff fb85 	bl	8001f98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800288e:	2300      	movs	r3, #0
 8002890:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002892:	2300      	movs	r3, #0
 8002894:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002896:	f107 0320 	add.w	r3, r7, #32
 800289a:	4619      	mov	r1, r3
 800289c:	4821      	ldr	r0, [pc, #132]	@ (8002924 <MX_TIM3_Init+0x128>)
 800289e:	f004 f8c1 	bl	8006a24 <HAL_TIMEx_MasterConfigSynchronization>
 80028a2:	4603      	mov	r3, r0
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d001      	beq.n	80028ac <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80028a8:	f7ff fb76 	bl	8001f98 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80028ac:	2360      	movs	r3, #96	@ 0x60
 80028ae:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80028b0:	2300      	movs	r3, #0
 80028b2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80028b4:	2300      	movs	r3, #0
 80028b6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80028b8:	2300      	movs	r3, #0
 80028ba:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80028bc:	1d3b      	adds	r3, r7, #4
 80028be:	2200      	movs	r2, #0
 80028c0:	4619      	mov	r1, r3
 80028c2:	4818      	ldr	r0, [pc, #96]	@ (8002924 <MX_TIM3_Init+0x128>)
 80028c4:	f003 fbe0 	bl	8006088 <HAL_TIM_PWM_ConfigChannel>
 80028c8:	4603      	mov	r3, r0
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d001      	beq.n	80028d2 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80028ce:	f7ff fb63 	bl	8001f98 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80028d2:	1d3b      	adds	r3, r7, #4
 80028d4:	2204      	movs	r2, #4
 80028d6:	4619      	mov	r1, r3
 80028d8:	4812      	ldr	r0, [pc, #72]	@ (8002924 <MX_TIM3_Init+0x128>)
 80028da:	f003 fbd5 	bl	8006088 <HAL_TIM_PWM_ConfigChannel>
 80028de:	4603      	mov	r3, r0
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d001      	beq.n	80028e8 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 80028e4:	f7ff fb58 	bl	8001f98 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80028e8:	1d3b      	adds	r3, r7, #4
 80028ea:	2208      	movs	r2, #8
 80028ec:	4619      	mov	r1, r3
 80028ee:	480d      	ldr	r0, [pc, #52]	@ (8002924 <MX_TIM3_Init+0x128>)
 80028f0:	f003 fbca 	bl	8006088 <HAL_TIM_PWM_ConfigChannel>
 80028f4:	4603      	mov	r3, r0
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d001      	beq.n	80028fe <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 80028fa:	f7ff fb4d 	bl	8001f98 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80028fe:	1d3b      	adds	r3, r7, #4
 8002900:	220c      	movs	r2, #12
 8002902:	4619      	mov	r1, r3
 8002904:	4807      	ldr	r0, [pc, #28]	@ (8002924 <MX_TIM3_Init+0x128>)
 8002906:	f003 fbbf 	bl	8006088 <HAL_TIM_PWM_ConfigChannel>
 800290a:	4603      	mov	r3, r0
 800290c:	2b00      	cmp	r3, #0
 800290e:	d001      	beq.n	8002914 <MX_TIM3_Init+0x118>
  {
    Error_Handler();
 8002910:	f7ff fb42 	bl	8001f98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002914:	4803      	ldr	r0, [pc, #12]	@ (8002924 <MX_TIM3_Init+0x128>)
 8002916:	f000 f95d 	bl	8002bd4 <HAL_TIM_MspPostInit>

}
 800291a:	bf00      	nop
 800291c:	3738      	adds	r7, #56	@ 0x38
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}
 8002922:	bf00      	nop
 8002924:	20000354 	.word	0x20000354
 8002928:	40000400 	.word	0x40000400

0800292c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b08e      	sub	sp, #56	@ 0x38
 8002930:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002932:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002936:	2200      	movs	r2, #0
 8002938:	601a      	str	r2, [r3, #0]
 800293a:	605a      	str	r2, [r3, #4]
 800293c:	609a      	str	r2, [r3, #8]
 800293e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002940:	f107 0320 	add.w	r3, r7, #32
 8002944:	2200      	movs	r2, #0
 8002946:	601a      	str	r2, [r3, #0]
 8002948:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800294a:	1d3b      	adds	r3, r7, #4
 800294c:	2200      	movs	r2, #0
 800294e:	601a      	str	r2, [r3, #0]
 8002950:	605a      	str	r2, [r3, #4]
 8002952:	609a      	str	r2, [r3, #8]
 8002954:	60da      	str	r2, [r3, #12]
 8002956:	611a      	str	r2, [r3, #16]
 8002958:	615a      	str	r2, [r3, #20]
 800295a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800295c:	4b2d      	ldr	r3, [pc, #180]	@ (8002a14 <MX_TIM4_Init+0xe8>)
 800295e:	4a2e      	ldr	r2, [pc, #184]	@ (8002a18 <MX_TIM4_Init+0xec>)
 8002960:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 300-1;
 8002962:	4b2c      	ldr	r3, [pc, #176]	@ (8002a14 <MX_TIM4_Init+0xe8>)
 8002964:	f240 122b 	movw	r2, #299	@ 0x12b
 8002968:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800296a:	4b2a      	ldr	r3, [pc, #168]	@ (8002a14 <MX_TIM4_Init+0xe8>)
 800296c:	2200      	movs	r2, #0
 800296e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000-1;
 8002970:	4b28      	ldr	r3, [pc, #160]	@ (8002a14 <MX_TIM4_Init+0xe8>)
 8002972:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002976:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002978:	4b26      	ldr	r3, [pc, #152]	@ (8002a14 <MX_TIM4_Init+0xe8>)
 800297a:	2200      	movs	r2, #0
 800297c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800297e:	4b25      	ldr	r3, [pc, #148]	@ (8002a14 <MX_TIM4_Init+0xe8>)
 8002980:	2200      	movs	r2, #0
 8002982:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002984:	4823      	ldr	r0, [pc, #140]	@ (8002a14 <MX_TIM4_Init+0xe8>)
 8002986:	f003 f80f 	bl	80059a8 <HAL_TIM_Base_Init>
 800298a:	4603      	mov	r3, r0
 800298c:	2b00      	cmp	r3, #0
 800298e:	d001      	beq.n	8002994 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8002990:	f7ff fb02 	bl	8001f98 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002994:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002998:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800299a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800299e:	4619      	mov	r1, r3
 80029a0:	481c      	ldr	r0, [pc, #112]	@ (8002a14 <MX_TIM4_Init+0xe8>)
 80029a2:	f003 fc33 	bl	800620c <HAL_TIM_ConfigClockSource>
 80029a6:	4603      	mov	r3, r0
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d001      	beq.n	80029b0 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 80029ac:	f7ff faf4 	bl	8001f98 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80029b0:	4818      	ldr	r0, [pc, #96]	@ (8002a14 <MX_TIM4_Init+0xe8>)
 80029b2:	f003 f8e8 	bl	8005b86 <HAL_TIM_PWM_Init>
 80029b6:	4603      	mov	r3, r0
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d001      	beq.n	80029c0 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 80029bc:	f7ff faec 	bl	8001f98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80029c0:	2300      	movs	r3, #0
 80029c2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80029c4:	2300      	movs	r3, #0
 80029c6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80029c8:	f107 0320 	add.w	r3, r7, #32
 80029cc:	4619      	mov	r1, r3
 80029ce:	4811      	ldr	r0, [pc, #68]	@ (8002a14 <MX_TIM4_Init+0xe8>)
 80029d0:	f004 f828 	bl	8006a24 <HAL_TIMEx_MasterConfigSynchronization>
 80029d4:	4603      	mov	r3, r0
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d001      	beq.n	80029de <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 80029da:	f7ff fadd 	bl	8001f98 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80029de:	2360      	movs	r3, #96	@ 0x60
 80029e0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 995;
 80029e2:	f240 33e3 	movw	r3, #995	@ 0x3e3
 80029e6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80029e8:	2300      	movs	r3, #0
 80029ea:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80029ec:	2300      	movs	r3, #0
 80029ee:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80029f0:	1d3b      	adds	r3, r7, #4
 80029f2:	2204      	movs	r2, #4
 80029f4:	4619      	mov	r1, r3
 80029f6:	4807      	ldr	r0, [pc, #28]	@ (8002a14 <MX_TIM4_Init+0xe8>)
 80029f8:	f003 fb46 	bl	8006088 <HAL_TIM_PWM_ConfigChannel>
 80029fc:	4603      	mov	r3, r0
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d001      	beq.n	8002a06 <MX_TIM4_Init+0xda>
  {
    Error_Handler();
 8002a02:	f7ff fac9 	bl	8001f98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002a06:	4803      	ldr	r0, [pc, #12]	@ (8002a14 <MX_TIM4_Init+0xe8>)
 8002a08:	f000 f8e4 	bl	8002bd4 <HAL_TIM_MspPostInit>

}
 8002a0c:	bf00      	nop
 8002a0e:	3738      	adds	r7, #56	@ 0x38
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bd80      	pop	{r7, pc}
 8002a14:	2000039c 	.word	0x2000039c
 8002a18:	40000800 	.word	0x40000800

08002a1c <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b082      	sub	sp, #8
 8002a20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a22:	463b      	mov	r3, r7
 8002a24:	2200      	movs	r2, #0
 8002a26:	601a      	str	r2, [r3, #0]
 8002a28:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002a2a:	4b15      	ldr	r3, [pc, #84]	@ (8002a80 <MX_TIM6_Init+0x64>)
 8002a2c:	4a15      	ldr	r2, [pc, #84]	@ (8002a84 <MX_TIM6_Init+0x68>)
 8002a2e:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 42000-1;
 8002a30:	4b13      	ldr	r3, [pc, #76]	@ (8002a80 <MX_TIM6_Init+0x64>)
 8002a32:	f24a 420f 	movw	r2, #41999	@ 0xa40f
 8002a36:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a38:	4b11      	ldr	r3, [pc, #68]	@ (8002a80 <MX_TIM6_Init+0x64>)
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 400-1;
 8002a3e:	4b10      	ldr	r3, [pc, #64]	@ (8002a80 <MX_TIM6_Init+0x64>)
 8002a40:	f240 128f 	movw	r2, #399	@ 0x18f
 8002a44:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a46:	4b0e      	ldr	r3, [pc, #56]	@ (8002a80 <MX_TIM6_Init+0x64>)
 8002a48:	2200      	movs	r2, #0
 8002a4a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002a4c:	480c      	ldr	r0, [pc, #48]	@ (8002a80 <MX_TIM6_Init+0x64>)
 8002a4e:	f002 ffab 	bl	80059a8 <HAL_TIM_Base_Init>
 8002a52:	4603      	mov	r3, r0
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d001      	beq.n	8002a5c <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8002a58:	f7ff fa9e 	bl	8001f98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002a5c:	2320      	movs	r3, #32
 8002a5e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a60:	2300      	movs	r3, #0
 8002a62:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002a64:	463b      	mov	r3, r7
 8002a66:	4619      	mov	r1, r3
 8002a68:	4805      	ldr	r0, [pc, #20]	@ (8002a80 <MX_TIM6_Init+0x64>)
 8002a6a:	f003 ffdb 	bl	8006a24 <HAL_TIMEx_MasterConfigSynchronization>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d001      	beq.n	8002a78 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8002a74:	f7ff fa90 	bl	8001f98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002a78:	bf00      	nop
 8002a7a:	3708      	adds	r7, #8
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	bd80      	pop	{r7, pc}
 8002a80:	200003e4 	.word	0x200003e4
 8002a84:	40001000 	.word	0x40001000

08002a88 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b082      	sub	sp, #8
 8002a8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a8e:	463b      	mov	r3, r7
 8002a90:	2200      	movs	r2, #0
 8002a92:	601a      	str	r2, [r3, #0]
 8002a94:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8002a96:	4b14      	ldr	r3, [pc, #80]	@ (8002ae8 <MX_TIM7_Init+0x60>)
 8002a98:	4a14      	ldr	r2, [pc, #80]	@ (8002aec <MX_TIM7_Init+0x64>)
 8002a9a:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 83;
 8002a9c:	4b12      	ldr	r3, [pc, #72]	@ (8002ae8 <MX_TIM7_Init+0x60>)
 8002a9e:	2253      	movs	r2, #83	@ 0x53
 8002aa0:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002aa2:	4b11      	ldr	r3, [pc, #68]	@ (8002ae8 <MX_TIM7_Init+0x60>)
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 9;
 8002aa8:	4b0f      	ldr	r3, [pc, #60]	@ (8002ae8 <MX_TIM7_Init+0x60>)
 8002aaa:	2209      	movs	r2, #9
 8002aac:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002aae:	4b0e      	ldr	r3, [pc, #56]	@ (8002ae8 <MX_TIM7_Init+0x60>)
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8002ab4:	480c      	ldr	r0, [pc, #48]	@ (8002ae8 <MX_TIM7_Init+0x60>)
 8002ab6:	f002 ff77 	bl	80059a8 <HAL_TIM_Base_Init>
 8002aba:	4603      	mov	r3, r0
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d001      	beq.n	8002ac4 <MX_TIM7_Init+0x3c>
  {
    Error_Handler();
 8002ac0:	f7ff fa6a 	bl	8001f98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8002acc:	463b      	mov	r3, r7
 8002ace:	4619      	mov	r1, r3
 8002ad0:	4805      	ldr	r0, [pc, #20]	@ (8002ae8 <MX_TIM7_Init+0x60>)
 8002ad2:	f003 ffa7 	bl	8006a24 <HAL_TIMEx_MasterConfigSynchronization>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d001      	beq.n	8002ae0 <MX_TIM7_Init+0x58>
  {
    Error_Handler();
 8002adc:	f7ff fa5c 	bl	8001f98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8002ae0:	bf00      	nop
 8002ae2:	3708      	adds	r7, #8
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bd80      	pop	{r7, pc}
 8002ae8:	2000042c 	.word	0x2000042c
 8002aec:	40001400 	.word	0x40001400

08002af0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b086      	sub	sp, #24
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a30      	ldr	r2, [pc, #192]	@ (8002bc0 <HAL_TIM_Base_MspInit+0xd0>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d10e      	bne.n	8002b20 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002b02:	2300      	movs	r3, #0
 8002b04:	617b      	str	r3, [r7, #20]
 8002b06:	4b2f      	ldr	r3, [pc, #188]	@ (8002bc4 <HAL_TIM_Base_MspInit+0xd4>)
 8002b08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b0a:	4a2e      	ldr	r2, [pc, #184]	@ (8002bc4 <HAL_TIM_Base_MspInit+0xd4>)
 8002b0c:	f043 0302 	orr.w	r3, r3, #2
 8002b10:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b12:	4b2c      	ldr	r3, [pc, #176]	@ (8002bc4 <HAL_TIM_Base_MspInit+0xd4>)
 8002b14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b16:	f003 0302 	and.w	r3, r3, #2
 8002b1a:	617b      	str	r3, [r7, #20]
 8002b1c:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8002b1e:	e04a      	b.n	8002bb6 <HAL_TIM_Base_MspInit+0xc6>
  else if(tim_baseHandle->Instance==TIM4)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a28      	ldr	r2, [pc, #160]	@ (8002bc8 <HAL_TIM_Base_MspInit+0xd8>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d10e      	bne.n	8002b48 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	613b      	str	r3, [r7, #16]
 8002b2e:	4b25      	ldr	r3, [pc, #148]	@ (8002bc4 <HAL_TIM_Base_MspInit+0xd4>)
 8002b30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b32:	4a24      	ldr	r2, [pc, #144]	@ (8002bc4 <HAL_TIM_Base_MspInit+0xd4>)
 8002b34:	f043 0304 	orr.w	r3, r3, #4
 8002b38:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b3a:	4b22      	ldr	r3, [pc, #136]	@ (8002bc4 <HAL_TIM_Base_MspInit+0xd4>)
 8002b3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b3e:	f003 0304 	and.w	r3, r3, #4
 8002b42:	613b      	str	r3, [r7, #16]
 8002b44:	693b      	ldr	r3, [r7, #16]
}
 8002b46:	e036      	b.n	8002bb6 <HAL_TIM_Base_MspInit+0xc6>
  else if(tim_baseHandle->Instance==TIM6)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a1f      	ldr	r2, [pc, #124]	@ (8002bcc <HAL_TIM_Base_MspInit+0xdc>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d116      	bne.n	8002b80 <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002b52:	2300      	movs	r3, #0
 8002b54:	60fb      	str	r3, [r7, #12]
 8002b56:	4b1b      	ldr	r3, [pc, #108]	@ (8002bc4 <HAL_TIM_Base_MspInit+0xd4>)
 8002b58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b5a:	4a1a      	ldr	r2, [pc, #104]	@ (8002bc4 <HAL_TIM_Base_MspInit+0xd4>)
 8002b5c:	f043 0310 	orr.w	r3, r3, #16
 8002b60:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b62:	4b18      	ldr	r3, [pc, #96]	@ (8002bc4 <HAL_TIM_Base_MspInit+0xd4>)
 8002b64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b66:	f003 0310 	and.w	r3, r3, #16
 8002b6a:	60fb      	str	r3, [r7, #12]
 8002b6c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002b6e:	2200      	movs	r2, #0
 8002b70:	2100      	movs	r1, #0
 8002b72:	2036      	movs	r0, #54	@ 0x36
 8002b74:	f000 fc77 	bl	8003466 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002b78:	2036      	movs	r0, #54	@ 0x36
 8002b7a:	f000 fc90 	bl	800349e <HAL_NVIC_EnableIRQ>
}
 8002b7e:	e01a      	b.n	8002bb6 <HAL_TIM_Base_MspInit+0xc6>
  else if(tim_baseHandle->Instance==TIM7)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a12      	ldr	r2, [pc, #72]	@ (8002bd0 <HAL_TIM_Base_MspInit+0xe0>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d115      	bne.n	8002bb6 <HAL_TIM_Base_MspInit+0xc6>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	60bb      	str	r3, [r7, #8]
 8002b8e:	4b0d      	ldr	r3, [pc, #52]	@ (8002bc4 <HAL_TIM_Base_MspInit+0xd4>)
 8002b90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b92:	4a0c      	ldr	r2, [pc, #48]	@ (8002bc4 <HAL_TIM_Base_MspInit+0xd4>)
 8002b94:	f043 0320 	orr.w	r3, r3, #32
 8002b98:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b9a:	4b0a      	ldr	r3, [pc, #40]	@ (8002bc4 <HAL_TIM_Base_MspInit+0xd4>)
 8002b9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b9e:	f003 0320 	and.w	r3, r3, #32
 8002ba2:	60bb      	str	r3, [r7, #8]
 8002ba4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	2100      	movs	r1, #0
 8002baa:	2037      	movs	r0, #55	@ 0x37
 8002bac:	f000 fc5b 	bl	8003466 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002bb0:	2037      	movs	r0, #55	@ 0x37
 8002bb2:	f000 fc74 	bl	800349e <HAL_NVIC_EnableIRQ>
}
 8002bb6:	bf00      	nop
 8002bb8:	3718      	adds	r7, #24
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd80      	pop	{r7, pc}
 8002bbe:	bf00      	nop
 8002bc0:	40000400 	.word	0x40000400
 8002bc4:	40023800 	.word	0x40023800
 8002bc8:	40000800 	.word	0x40000800
 8002bcc:	40001000 	.word	0x40001000
 8002bd0:	40001400 	.word	0x40001400

08002bd4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b08a      	sub	sp, #40	@ 0x28
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bdc:	f107 0314 	add.w	r3, r7, #20
 8002be0:	2200      	movs	r2, #0
 8002be2:	601a      	str	r2, [r3, #0]
 8002be4:	605a      	str	r2, [r3, #4]
 8002be6:	609a      	str	r2, [r3, #8]
 8002be8:	60da      	str	r2, [r3, #12]
 8002bea:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a33      	ldr	r2, [pc, #204]	@ (8002cc0 <HAL_TIM_MspPostInit+0xec>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d13c      	bne.n	8002c70 <HAL_TIM_MspPostInit+0x9c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	613b      	str	r3, [r7, #16]
 8002bfa:	4b32      	ldr	r3, [pc, #200]	@ (8002cc4 <HAL_TIM_MspPostInit+0xf0>)
 8002bfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bfe:	4a31      	ldr	r2, [pc, #196]	@ (8002cc4 <HAL_TIM_MspPostInit+0xf0>)
 8002c00:	f043 0301 	orr.w	r3, r3, #1
 8002c04:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c06:	4b2f      	ldr	r3, [pc, #188]	@ (8002cc4 <HAL_TIM_MspPostInit+0xf0>)
 8002c08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c0a:	f003 0301 	and.w	r3, r3, #1
 8002c0e:	613b      	str	r3, [r7, #16]
 8002c10:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c12:	2300      	movs	r3, #0
 8002c14:	60fb      	str	r3, [r7, #12]
 8002c16:	4b2b      	ldr	r3, [pc, #172]	@ (8002cc4 <HAL_TIM_MspPostInit+0xf0>)
 8002c18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c1a:	4a2a      	ldr	r2, [pc, #168]	@ (8002cc4 <HAL_TIM_MspPostInit+0xf0>)
 8002c1c:	f043 0302 	orr.w	r3, r3, #2
 8002c20:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c22:	4b28      	ldr	r3, [pc, #160]	@ (8002cc4 <HAL_TIM_MspPostInit+0xf0>)
 8002c24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c26:	f003 0302 	and.w	r3, r3, #2
 8002c2a:	60fb      	str	r3, [r7, #12]
 8002c2c:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = Gauche_av_Pin|Gauche_re_Pin;
 8002c2e:	23c0      	movs	r3, #192	@ 0xc0
 8002c30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c32:	2302      	movs	r3, #2
 8002c34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c36:	2300      	movs	r3, #0
 8002c38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002c3e:	2302      	movs	r3, #2
 8002c40:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c42:	f107 0314 	add.w	r3, r7, #20
 8002c46:	4619      	mov	r1, r3
 8002c48:	481f      	ldr	r0, [pc, #124]	@ (8002cc8 <HAL_TIM_MspPostInit+0xf4>)
 8002c4a:	f000 fc43 	bl	80034d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Droit_av_Pin|Droit_re_Pin;
 8002c4e:	2303      	movs	r3, #3
 8002c50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c52:	2302      	movs	r3, #2
 8002c54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c56:	2300      	movs	r3, #0
 8002c58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002c5e:	2302      	movs	r3, #2
 8002c60:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c62:	f107 0314 	add.w	r3, r7, #20
 8002c66:	4619      	mov	r1, r3
 8002c68:	4818      	ldr	r0, [pc, #96]	@ (8002ccc <HAL_TIM_MspPostInit+0xf8>)
 8002c6a:	f000 fc33 	bl	80034d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002c6e:	e022      	b.n	8002cb6 <HAL_TIM_MspPostInit+0xe2>
  else if(timHandle->Instance==TIM4)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a16      	ldr	r2, [pc, #88]	@ (8002cd0 <HAL_TIM_MspPostInit+0xfc>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d11d      	bne.n	8002cb6 <HAL_TIM_MspPostInit+0xe2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	60bb      	str	r3, [r7, #8]
 8002c7e:	4b11      	ldr	r3, [pc, #68]	@ (8002cc4 <HAL_TIM_MspPostInit+0xf0>)
 8002c80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c82:	4a10      	ldr	r2, [pc, #64]	@ (8002cc4 <HAL_TIM_MspPostInit+0xf0>)
 8002c84:	f043 0302 	orr.w	r3, r3, #2
 8002c88:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c8a:	4b0e      	ldr	r3, [pc, #56]	@ (8002cc4 <HAL_TIM_MspPostInit+0xf0>)
 8002c8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c8e:	f003 0302 	and.w	r3, r3, #2
 8002c92:	60bb      	str	r3, [r7, #8]
 8002c94:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = LCD_BL_Pin;
 8002c96:	2380      	movs	r3, #128	@ 0x80
 8002c98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c9a:	2302      	movs	r3, #2
 8002c9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002ca6:	2302      	movs	r3, #2
 8002ca8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(LCD_BL_GPIO_Port, &GPIO_InitStruct);
 8002caa:	f107 0314 	add.w	r3, r7, #20
 8002cae:	4619      	mov	r1, r3
 8002cb0:	4806      	ldr	r0, [pc, #24]	@ (8002ccc <HAL_TIM_MspPostInit+0xf8>)
 8002cb2:	f000 fc0f 	bl	80034d4 <HAL_GPIO_Init>
}
 8002cb6:	bf00      	nop
 8002cb8:	3728      	adds	r7, #40	@ 0x28
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}
 8002cbe:	bf00      	nop
 8002cc0:	40000400 	.word	0x40000400
 8002cc4:	40023800 	.word	0x40023800
 8002cc8:	40020000 	.word	0x40020000
 8002ccc:	40020400 	.word	0x40020400
 8002cd0:	40000800 	.word	0x40000800

08002cd4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002cd8:	4b11      	ldr	r3, [pc, #68]	@ (8002d20 <MX_USART2_UART_Init+0x4c>)
 8002cda:	4a12      	ldr	r2, [pc, #72]	@ (8002d24 <MX_USART2_UART_Init+0x50>)
 8002cdc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002cde:	4b10      	ldr	r3, [pc, #64]	@ (8002d20 <MX_USART2_UART_Init+0x4c>)
 8002ce0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002ce4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002ce6:	4b0e      	ldr	r3, [pc, #56]	@ (8002d20 <MX_USART2_UART_Init+0x4c>)
 8002ce8:	2200      	movs	r2, #0
 8002cea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002cec:	4b0c      	ldr	r3, [pc, #48]	@ (8002d20 <MX_USART2_UART_Init+0x4c>)
 8002cee:	2200      	movs	r2, #0
 8002cf0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002cf2:	4b0b      	ldr	r3, [pc, #44]	@ (8002d20 <MX_USART2_UART_Init+0x4c>)
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002cf8:	4b09      	ldr	r3, [pc, #36]	@ (8002d20 <MX_USART2_UART_Init+0x4c>)
 8002cfa:	220c      	movs	r2, #12
 8002cfc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002cfe:	4b08      	ldr	r3, [pc, #32]	@ (8002d20 <MX_USART2_UART_Init+0x4c>)
 8002d00:	2200      	movs	r2, #0
 8002d02:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002d04:	4b06      	ldr	r3, [pc, #24]	@ (8002d20 <MX_USART2_UART_Init+0x4c>)
 8002d06:	2200      	movs	r2, #0
 8002d08:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002d0a:	4805      	ldr	r0, [pc, #20]	@ (8002d20 <MX_USART2_UART_Init+0x4c>)
 8002d0c:	f003 ff1a 	bl	8006b44 <HAL_UART_Init>
 8002d10:	4603      	mov	r3, r0
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d001      	beq.n	8002d1a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002d16:	f7ff f93f 	bl	8001f98 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002d1a:	bf00      	nop
 8002d1c:	bd80      	pop	{r7, pc}
 8002d1e:	bf00      	nop
 8002d20:	20000474 	.word	0x20000474
 8002d24:	40004400 	.word	0x40004400

08002d28 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b08a      	sub	sp, #40	@ 0x28
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d30:	f107 0314 	add.w	r3, r7, #20
 8002d34:	2200      	movs	r2, #0
 8002d36:	601a      	str	r2, [r3, #0]
 8002d38:	605a      	str	r2, [r3, #4]
 8002d3a:	609a      	str	r2, [r3, #8]
 8002d3c:	60da      	str	r2, [r3, #12]
 8002d3e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a19      	ldr	r2, [pc, #100]	@ (8002dac <HAL_UART_MspInit+0x84>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d12b      	bne.n	8002da2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	613b      	str	r3, [r7, #16]
 8002d4e:	4b18      	ldr	r3, [pc, #96]	@ (8002db0 <HAL_UART_MspInit+0x88>)
 8002d50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d52:	4a17      	ldr	r2, [pc, #92]	@ (8002db0 <HAL_UART_MspInit+0x88>)
 8002d54:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002d58:	6413      	str	r3, [r2, #64]	@ 0x40
 8002d5a:	4b15      	ldr	r3, [pc, #84]	@ (8002db0 <HAL_UART_MspInit+0x88>)
 8002d5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d62:	613b      	str	r3, [r7, #16]
 8002d64:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d66:	2300      	movs	r3, #0
 8002d68:	60fb      	str	r3, [r7, #12]
 8002d6a:	4b11      	ldr	r3, [pc, #68]	@ (8002db0 <HAL_UART_MspInit+0x88>)
 8002d6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d6e:	4a10      	ldr	r2, [pc, #64]	@ (8002db0 <HAL_UART_MspInit+0x88>)
 8002d70:	f043 0301 	orr.w	r3, r3, #1
 8002d74:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d76:	4b0e      	ldr	r3, [pc, #56]	@ (8002db0 <HAL_UART_MspInit+0x88>)
 8002d78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d7a:	f003 0301 	and.w	r3, r3, #1
 8002d7e:	60fb      	str	r3, [r7, #12]
 8002d80:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002d82:	230c      	movs	r3, #12
 8002d84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d86:	2302      	movs	r3, #2
 8002d88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d8e:	2303      	movs	r3, #3
 8002d90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002d92:	2307      	movs	r3, #7
 8002d94:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d96:	f107 0314 	add.w	r3, r7, #20
 8002d9a:	4619      	mov	r1, r3
 8002d9c:	4805      	ldr	r0, [pc, #20]	@ (8002db4 <HAL_UART_MspInit+0x8c>)
 8002d9e:	f000 fb99 	bl	80034d4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002da2:	bf00      	nop
 8002da4:	3728      	adds	r7, #40	@ 0x28
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bd80      	pop	{r7, pc}
 8002daa:	bf00      	nop
 8002dac:	40004400 	.word	0x40004400
 8002db0:	40023800 	.word	0x40023800
 8002db4:	40020000 	.word	0x40020000

08002db8 <LCD_Manuel>:
#include <stdio.h>
#include <string.h>
#include "auto.h"

void LCD_Manuel(int a)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b084      	sub	sp, #16
 8002dbc:	af02      	add	r7, sp, #8
 8002dbe:	6078      	str	r0, [r7, #4]
	if (a == 1){
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2b01      	cmp	r3, #1
 8002dc4:	d10c      	bne.n	8002de0 <LCD_Manuel+0x28>
	Paint_DrawString_EN (120, 75, "1",        &Font24,    MAGENTA,  WHITE);
 8002dc6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002dca:	9301      	str	r3, [sp, #4]
 8002dcc:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 8002dd0:	9300      	str	r3, [sp, #0]
 8002dd2:	4b1b      	ldr	r3, [pc, #108]	@ (8002e40 <LCD_Manuel+0x88>)
 8002dd4:	4a1b      	ldr	r2, [pc, #108]	@ (8002e44 <LCD_Manuel+0x8c>)
 8002dd6:	214b      	movs	r1, #75	@ 0x4b
 8002dd8:	2078      	movs	r0, #120	@ 0x78
 8002dda:	f004 fbab 	bl	8007534 <Paint_DrawString_EN>
	Paint_DrawString_EN (120, 75, "3",        &Font24,    MAGENTA,  WHITE);
	}
	else{
	Paint_DrawString_EN (120, 75, "      ",        &Font24,    MAGENTA,  WHITE);
	}
}
 8002dde:	e02b      	b.n	8002e38 <LCD_Manuel+0x80>
	else if (a == 2){
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2b02      	cmp	r3, #2
 8002de4:	d10c      	bne.n	8002e00 <LCD_Manuel+0x48>
	Paint_DrawString_EN (120, 75, "2",        &Font24,    MAGENTA,  WHITE);
 8002de6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002dea:	9301      	str	r3, [sp, #4]
 8002dec:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 8002df0:	9300      	str	r3, [sp, #0]
 8002df2:	4b13      	ldr	r3, [pc, #76]	@ (8002e40 <LCD_Manuel+0x88>)
 8002df4:	4a14      	ldr	r2, [pc, #80]	@ (8002e48 <LCD_Manuel+0x90>)
 8002df6:	214b      	movs	r1, #75	@ 0x4b
 8002df8:	2078      	movs	r0, #120	@ 0x78
 8002dfa:	f004 fb9b 	bl	8007534 <Paint_DrawString_EN>
}
 8002dfe:	e01b      	b.n	8002e38 <LCD_Manuel+0x80>
	else if (a==3){
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2b03      	cmp	r3, #3
 8002e04:	d10c      	bne.n	8002e20 <LCD_Manuel+0x68>
	Paint_DrawString_EN (120, 75, "3",        &Font24,    MAGENTA,  WHITE);
 8002e06:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002e0a:	9301      	str	r3, [sp, #4]
 8002e0c:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 8002e10:	9300      	str	r3, [sp, #0]
 8002e12:	4b0b      	ldr	r3, [pc, #44]	@ (8002e40 <LCD_Manuel+0x88>)
 8002e14:	4a0d      	ldr	r2, [pc, #52]	@ (8002e4c <LCD_Manuel+0x94>)
 8002e16:	214b      	movs	r1, #75	@ 0x4b
 8002e18:	2078      	movs	r0, #120	@ 0x78
 8002e1a:	f004 fb8b 	bl	8007534 <Paint_DrawString_EN>
}
 8002e1e:	e00b      	b.n	8002e38 <LCD_Manuel+0x80>
	Paint_DrawString_EN (120, 75, "      ",        &Font24,    MAGENTA,  WHITE);
 8002e20:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002e24:	9301      	str	r3, [sp, #4]
 8002e26:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 8002e2a:	9300      	str	r3, [sp, #0]
 8002e2c:	4b04      	ldr	r3, [pc, #16]	@ (8002e40 <LCD_Manuel+0x88>)
 8002e2e:	4a08      	ldr	r2, [pc, #32]	@ (8002e50 <LCD_Manuel+0x98>)
 8002e30:	214b      	movs	r1, #75	@ 0x4b
 8002e32:	2078      	movs	r0, #120	@ 0x78
 8002e34:	f004 fb7e 	bl	8007534 <Paint_DrawString_EN>
}
 8002e38:	bf00      	nop
 8002e3a:	3708      	adds	r7, #8
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	bd80      	pop	{r7, pc}
 8002e40:	20000038 	.word	0x20000038
 8002e44:	0800c290 	.word	0x0800c290
 8002e48:	0800c294 	.word	0x0800c294
 8002e4c:	0800c298 	.word	0x0800c298
 8002e50:	0800c29c 	.word	0x0800c29c

08002e54 <LCD_Mode>:

void LCD_Mode()
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b086      	sub	sp, #24
 8002e58:	af02      	add	r7, sp, #8
	char charMode[12];
	strcpy(charMode, Get_Mode_String());
 8002e5a:	f7fe f8fd 	bl	8001058 <Get_Mode_String>
 8002e5e:	4602      	mov	r2, r0
 8002e60:	1d3b      	adds	r3, r7, #4
 8002e62:	4611      	mov	r1, r2
 8002e64:	4618      	mov	r0, r3
 8002e66:	f005 ffea 	bl	8008e3e <strcpy>
	Paint_DrawString_EN (5, 75, charMode,        &Font24,    MAGENTA,  WHITE);
 8002e6a:	1d3a      	adds	r2, r7, #4
 8002e6c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002e70:	9301      	str	r3, [sp, #4]
 8002e72:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 8002e76:	9300      	str	r3, [sp, #0]
 8002e78:	4b04      	ldr	r3, [pc, #16]	@ (8002e8c <LCD_Mode+0x38>)
 8002e7a:	214b      	movs	r1, #75	@ 0x4b
 8002e7c:	2005      	movs	r0, #5
 8002e7e:	f004 fb59 	bl	8007534 <Paint_DrawString_EN>
}
 8002e82:	bf00      	nop
 8002e84:	3710      	adds	r7, #16
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd80      	pop	{r7, pc}
 8002e8a:	bf00      	nop
 8002e8c:	20000038 	.word	0x20000038

08002e90 <LCD_Vitesse>:

void LCD_Vitesse(uint16_t vitesseG, uint16_t vitesseD, int encod_D, int encod_G)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b08e      	sub	sp, #56	@ 0x38
 8002e94:	af02      	add	r7, sp, #8
 8002e96:	60ba      	str	r2, [r7, #8]
 8002e98:	607b      	str	r3, [r7, #4]
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	81fb      	strh	r3, [r7, #14]
 8002e9e:	460b      	mov	r3, r1
 8002ea0:	81bb      	strh	r3, [r7, #12]
	char buffVG[14];
	char buffVD[14];

	if(encod_G == 0)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d107      	bne.n	8002eb8 <LCD_Vitesse+0x28>
	{
		sprintf(buffVG,
 8002ea8:	89fa      	ldrh	r2, [r7, #14]
 8002eaa:	f107 0320 	add.w	r3, r7, #32
 8002eae:	491e      	ldr	r1, [pc, #120]	@ (8002f28 <LCD_Vitesse+0x98>)
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	f005 fe3d 	bl	8008b30 <siprintf>
 8002eb6:	e006      	b.n	8002ec6 <LCD_Vitesse+0x36>
		  "+%2d",
		   vitesseG);
	}
	else
	{
		sprintf(buffVG,
 8002eb8:	89fa      	ldrh	r2, [r7, #14]
 8002eba:	f107 0320 	add.w	r3, r7, #32
 8002ebe:	491b      	ldr	r1, [pc, #108]	@ (8002f2c <LCD_Vitesse+0x9c>)
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	f005 fe35 	bl	8008b30 <siprintf>
			"-%2d",
			   vitesseG);
	}

	if(encod_D == 0)
 8002ec6:	68bb      	ldr	r3, [r7, #8]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d107      	bne.n	8002edc <LCD_Vitesse+0x4c>
	{
		sprintf(buffVD,
 8002ecc:	89ba      	ldrh	r2, [r7, #12]
 8002ece:	f107 0310 	add.w	r3, r7, #16
 8002ed2:	4915      	ldr	r1, [pc, #84]	@ (8002f28 <LCD_Vitesse+0x98>)
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	f005 fe2b 	bl	8008b30 <siprintf>
 8002eda:	e006      	b.n	8002eea <LCD_Vitesse+0x5a>
		  "+%2d",
		   vitesseD);
	}
	else
	{
		sprintf(buffVD,
 8002edc:	89ba      	ldrh	r2, [r7, #12]
 8002ede:	f107 0310 	add.w	r3, r7, #16
 8002ee2:	4912      	ldr	r1, [pc, #72]	@ (8002f2c <LCD_Vitesse+0x9c>)
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	f005 fe23 	bl	8008b30 <siprintf>
			"-%2d",
			   vitesseD);
	}

	Paint_DrawString_EN (190, 100, buffVD,        &Font16,    MAGENTA,  WHITE);
 8002eea:	f107 0210 	add.w	r2, r7, #16
 8002eee:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002ef2:	9301      	str	r3, [sp, #4]
 8002ef4:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 8002ef8:	9300      	str	r3, [sp, #0]
 8002efa:	4b0d      	ldr	r3, [pc, #52]	@ (8002f30 <LCD_Vitesse+0xa0>)
 8002efc:	2164      	movs	r1, #100	@ 0x64
 8002efe:	20be      	movs	r0, #190	@ 0xbe
 8002f00:	f004 fb18 	bl	8007534 <Paint_DrawString_EN>
	Paint_DrawString_EN (190, 125, buffVG,        &Font16,    MAGENTA,  WHITE);
 8002f04:	f107 0220 	add.w	r2, r7, #32
 8002f08:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002f0c:	9301      	str	r3, [sp, #4]
 8002f0e:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 8002f12:	9300      	str	r3, [sp, #0]
 8002f14:	4b06      	ldr	r3, [pc, #24]	@ (8002f30 <LCD_Vitesse+0xa0>)
 8002f16:	217d      	movs	r1, #125	@ 0x7d
 8002f18:	20be      	movs	r0, #190	@ 0xbe
 8002f1a:	f004 fb0b 	bl	8007534 <Paint_DrawString_EN>
}
 8002f1e:	bf00      	nop
 8002f20:	3730      	adds	r7, #48	@ 0x30
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}
 8002f26:	bf00      	nop
 8002f28:	0800c2a4 	.word	0x0800c2a4
 8002f2c:	0800c2ac 	.word	0x0800c2ac
 8002f30:	20000028 	.word	0x20000028

08002f34 <LCD_Init>:

void LCD_Init(uint8_t* a)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b084      	sub	sp, #16
 8002f38:	af02      	add	r7, sp, #8
 8002f3a:	6078      	str	r0, [r7, #4]
	DEV_Module_Init();
 8002f3c:	f004 f8d8 	bl	80070f0 <DEV_Module_Init>


	LCD_2IN_SetBackLight(1000);
 8002f40:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002f44:	f004 fd90 	bl	8007a68 <LCD_2IN_SetBackLight>
	LCD_2IN_Init();
 8002f48:	f004 fbd6 	bl	80076f8 <LCD_2IN_Init>
	LCD_2IN_Clear(WHITE);
 8002f4c:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8002f50:	f004 fd42 	bl	80079d8 <LCD_2IN_Clear>


	Paint_NewImage(LCD_2IN_WIDTH,LCD_2IN_HEIGHT, ROTATE_90, WHITE);
 8002f54:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002f58:	225a      	movs	r2, #90	@ 0x5a
 8002f5a:	f44f 71a0 	mov.w	r1, #320	@ 0x140
 8002f5e:	20f0      	movs	r0, #240	@ 0xf0
 8002f60:	f004 f8e6 	bl	8007130 <Paint_NewImage>


	Paint_SetClearFuntion(LCD_2IN_Clear);
 8002f64:	4862      	ldr	r0, [pc, #392]	@ (80030f0 <LCD_Init+0x1bc>)
 8002f66:	f004 f92f 	bl	80071c8 <Paint_SetClearFuntion>
	Paint_SetDisplayFuntion(LCD_2IN_DrawPaint);
 8002f6a:	4862      	ldr	r0, [pc, #392]	@ (80030f4 <LCD_Init+0x1c0>)
 8002f6c:	f004 f93c 	bl	80071e8 <Paint_SetDisplayFuntion>

  printf("Paint_Clear\r\n");
 8002f70:	4861      	ldr	r0, [pc, #388]	@ (80030f8 <LCD_Init+0x1c4>)
 8002f72:	f005 fdd5 	bl	8008b20 <puts>
	Paint_Clear(MAGENTA);
 8002f76:	f64f 001f 	movw	r0, #63519	@ 0xf81f
 8002f7a:	f004 fa1f 	bl	80073bc <Paint_Clear>
	DEV_Delay_ms(500);
 8002f7e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002f82:	f000 f971 	bl	8003268 <HAL_Delay>


	Paint_SetRotate(ROTATE_270);
 8002f86:	f44f 7087 	mov.w	r0, #270	@ 0x10e
 8002f8a:	f004 f93d 	bl	8007208 <Paint_SetRotate>
	Paint_DrawString_EN (50, 100, "DEMARRAGE DU",        &Font24,    MAGENTA,  WHITE);
 8002f8e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002f92:	9301      	str	r3, [sp, #4]
 8002f94:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 8002f98:	9300      	str	r3, [sp, #0]
 8002f9a:	4b58      	ldr	r3, [pc, #352]	@ (80030fc <LCD_Init+0x1c8>)
 8002f9c:	4a58      	ldr	r2, [pc, #352]	@ (8003100 <LCD_Init+0x1cc>)
 8002f9e:	2164      	movs	r1, #100	@ 0x64
 8002fa0:	2032      	movs	r0, #50	@ 0x32
 8002fa2:	f004 fac7 	bl	8007534 <Paint_DrawString_EN>
	Paint_DrawString_EN (100, 125, "PROJET",        &Font24,    MAGENTA,  WHITE);
 8002fa6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002faa:	9301      	str	r3, [sp, #4]
 8002fac:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 8002fb0:	9300      	str	r3, [sp, #0]
 8002fb2:	4b52      	ldr	r3, [pc, #328]	@ (80030fc <LCD_Init+0x1c8>)
 8002fb4:	4a53      	ldr	r2, [pc, #332]	@ (8003104 <LCD_Init+0x1d0>)
 8002fb6:	217d      	movs	r1, #125	@ 0x7d
 8002fb8:	2064      	movs	r0, #100	@ 0x64
 8002fba:	f004 fabb 	bl	8007534 <Paint_DrawString_EN>
	Paint_DrawString_EN (70, 150, "VROUM-VROUM",        &Font24,    MAGENTA,  WHITE);
 8002fbe:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002fc2:	9301      	str	r3, [sp, #4]
 8002fc4:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 8002fc8:	9300      	str	r3, [sp, #0]
 8002fca:	4b4c      	ldr	r3, [pc, #304]	@ (80030fc <LCD_Init+0x1c8>)
 8002fcc:	4a4e      	ldr	r2, [pc, #312]	@ (8003108 <LCD_Init+0x1d4>)
 8002fce:	2196      	movs	r1, #150	@ 0x96
 8002fd0:	2046      	movs	r0, #70	@ 0x46
 8002fd2:	f004 faaf 	bl	8007534 <Paint_DrawString_EN>
	DEV_Delay_ms(500);
 8002fd6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002fda:	f000 f945 	bl	8003268 <HAL_Delay>
	Paint_Clear(MAGENTA);
 8002fde:	f64f 001f 	movw	r0, #63519	@ 0xf81f
 8002fe2:	f004 f9eb 	bl	80073bc <Paint_Clear>

	Paint_DrawString_EN (85, 100, "LE PROJET",        &Font24,    MAGENTA,  WHITE);
 8002fe6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002fea:	9301      	str	r3, [sp, #4]
 8002fec:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 8002ff0:	9300      	str	r3, [sp, #0]
 8002ff2:	4b42      	ldr	r3, [pc, #264]	@ (80030fc <LCD_Init+0x1c8>)
 8002ff4:	4a45      	ldr	r2, [pc, #276]	@ (800310c <LCD_Init+0x1d8>)
 8002ff6:	2164      	movs	r1, #100	@ 0x64
 8002ff8:	2055      	movs	r0, #85	@ 0x55
 8002ffa:	f004 fa9b 	bl	8007534 <Paint_DrawString_EN>
	Paint_DrawString_EN (70, 125, "VROUM-VROUM",        &Font24,    MAGENTA,  WHITE);
 8002ffe:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003002:	9301      	str	r3, [sp, #4]
 8003004:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 8003008:	9300      	str	r3, [sp, #0]
 800300a:	4b3c      	ldr	r3, [pc, #240]	@ (80030fc <LCD_Init+0x1c8>)
 800300c:	4a3e      	ldr	r2, [pc, #248]	@ (8003108 <LCD_Init+0x1d4>)
 800300e:	217d      	movs	r1, #125	@ 0x7d
 8003010:	2046      	movs	r0, #70	@ 0x46
 8003012:	f004 fa8f 	bl	8007534 <Paint_DrawString_EN>
	Paint_DrawString_EN (85, 150, "VOUS SALUT",        &Font24,    MAGENTA,  WHITE);
 8003016:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800301a:	9301      	str	r3, [sp, #4]
 800301c:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 8003020:	9300      	str	r3, [sp, #0]
 8003022:	4b36      	ldr	r3, [pc, #216]	@ (80030fc <LCD_Init+0x1c8>)
 8003024:	4a3a      	ldr	r2, [pc, #232]	@ (8003110 <LCD_Init+0x1dc>)
 8003026:	2196      	movs	r1, #150	@ 0x96
 8003028:	2055      	movs	r0, #85	@ 0x55
 800302a:	f004 fa83 	bl	8007534 <Paint_DrawString_EN>
	DEV_Delay_ms(500);
 800302e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8003032:	f000 f919 	bl	8003268 <HAL_Delay>
	Paint_Clear(MAGENTA);
 8003036:	f64f 001f 	movw	r0, #63519	@ 0xf81f
 800303a:	f004 f9bf 	bl	80073bc <Paint_Clear>

	Paint_DrawString_EN (5, 1, "La date : ",        &Font24,    MAGENTA,  WHITE);
 800303e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003042:	9301      	str	r3, [sp, #4]
 8003044:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 8003048:	9300      	str	r3, [sp, #0]
 800304a:	4b2c      	ldr	r3, [pc, #176]	@ (80030fc <LCD_Init+0x1c8>)
 800304c:	4a31      	ldr	r2, [pc, #196]	@ (8003114 <LCD_Init+0x1e0>)
 800304e:	2101      	movs	r1, #1
 8003050:	2005      	movs	r0, #5
 8003052:	f004 fa6f 	bl	8007534 <Paint_DrawString_EN>
	Paint_DrawString_EN (5, 25, "L'heure : ",        &Font24,    MAGENTA,  WHITE);
 8003056:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800305a:	9301      	str	r3, [sp, #4]
 800305c:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 8003060:	9300      	str	r3, [sp, #0]
 8003062:	4b26      	ldr	r3, [pc, #152]	@ (80030fc <LCD_Init+0x1c8>)
 8003064:	4a2c      	ldr	r2, [pc, #176]	@ (8003118 <LCD_Init+0x1e4>)
 8003066:	2119      	movs	r1, #25
 8003068:	2005      	movs	r0, #5
 800306a:	f004 fa63 	bl	8007534 <Paint_DrawString_EN>
	Paint_DrawString_EN (5, 50, "Mode actuel : ",        &Font24,    MAGENTA,  WHITE);
 800306e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003072:	9301      	str	r3, [sp, #4]
 8003074:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 8003078:	9300      	str	r3, [sp, #0]
 800307a:	4b20      	ldr	r3, [pc, #128]	@ (80030fc <LCD_Init+0x1c8>)
 800307c:	4a27      	ldr	r2, [pc, #156]	@ (800311c <LCD_Init+0x1e8>)
 800307e:	2132      	movs	r1, #50	@ 0x32
 8003080:	2005      	movs	r0, #5
 8003082:	f004 fa57 	bl	8007534 <Paint_DrawString_EN>


	LCD_Mode();
 8003086:	f7ff fee5 	bl	8002e54 <LCD_Mode>
	LCD_Manuel(3);
 800308a:	2003      	movs	r0, #3
 800308c:	f7ff fe94 	bl	8002db8 <LCD_Manuel>

	Paint_DrawString_EN (5, 100, "Vitesse G :   %",        &Font24,    MAGENTA,  WHITE);
 8003090:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003094:	9301      	str	r3, [sp, #4]
 8003096:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 800309a:	9300      	str	r3, [sp, #0]
 800309c:	4b17      	ldr	r3, [pc, #92]	@ (80030fc <LCD_Init+0x1c8>)
 800309e:	4a20      	ldr	r2, [pc, #128]	@ (8003120 <LCD_Init+0x1ec>)
 80030a0:	2164      	movs	r1, #100	@ 0x64
 80030a2:	2005      	movs	r0, #5
 80030a4:	f004 fa46 	bl	8007534 <Paint_DrawString_EN>
	Paint_DrawString_EN (5, 125, "Vitesse D :   %",        &Font24,    MAGENTA,  WHITE);
 80030a8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80030ac:	9301      	str	r3, [sp, #4]
 80030ae:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 80030b2:	9300      	str	r3, [sp, #0]
 80030b4:	4b11      	ldr	r3, [pc, #68]	@ (80030fc <LCD_Init+0x1c8>)
 80030b6:	4a1b      	ldr	r2, [pc, #108]	@ (8003124 <LCD_Init+0x1f0>)
 80030b8:	217d      	movs	r1, #125	@ 0x7d
 80030ba:	2005      	movs	r0, #5
 80030bc:	f004 fa3a 	bl	8007534 <Paint_DrawString_EN>
	Paint_DrawString_EN (10, 220, "Attention aux enfants",        &Font20,    YELLOW,  RED);
 80030c0:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80030c4:	9301      	str	r3, [sp, #4]
 80030c6:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 80030ca:	9300      	str	r3, [sp, #0]
 80030cc:	4b16      	ldr	r3, [pc, #88]	@ (8003128 <LCD_Init+0x1f4>)
 80030ce:	4a17      	ldr	r2, [pc, #92]	@ (800312c <LCD_Init+0x1f8>)
 80030d0:	21dc      	movs	r1, #220	@ 0xdc
 80030d2:	200a      	movs	r0, #10
 80030d4:	f004 fa2e 	bl	8007534 <Paint_DrawString_EN>

	DEV_Delay_ms(3000);
 80030d8:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80030dc:	f000 f8c4 	bl	8003268 <HAL_Delay>

	*a = 1;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2201      	movs	r2, #1
 80030e4:	701a      	strb	r2, [r3, #0]
	//DEV_Module_Exit();

}
 80030e6:	bf00      	nop
 80030e8:	3708      	adds	r7, #8
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bd80      	pop	{r7, pc}
 80030ee:	bf00      	nop
 80030f0:	080079d9 	.word	0x080079d9
 80030f4:	08007a39 	.word	0x08007a39
 80030f8:	0800c2b4 	.word	0x0800c2b4
 80030fc:	20000038 	.word	0x20000038
 8003100:	0800c2c4 	.word	0x0800c2c4
 8003104:	0800c2d4 	.word	0x0800c2d4
 8003108:	0800c2dc 	.word	0x0800c2dc
 800310c:	0800c2e8 	.word	0x0800c2e8
 8003110:	0800c2f4 	.word	0x0800c2f4
 8003114:	0800c300 	.word	0x0800c300
 8003118:	0800c30c 	.word	0x0800c30c
 800311c:	0800c318 	.word	0x0800c318
 8003120:	0800c328 	.word	0x0800c328
 8003124:	0800c338 	.word	0x0800c338
 8003128:	20000030 	.word	0x20000030
 800312c:	0800c348 	.word	0x0800c348

08003130 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003130:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003168 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8003134:	f7ff fb50 	bl	80027d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003138:	480c      	ldr	r0, [pc, #48]	@ (800316c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800313a:	490d      	ldr	r1, [pc, #52]	@ (8003170 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800313c:	4a0d      	ldr	r2, [pc, #52]	@ (8003174 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800313e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003140:	e002      	b.n	8003148 <LoopCopyDataInit>

08003142 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003142:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003144:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003146:	3304      	adds	r3, #4

08003148 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003148:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800314a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800314c:	d3f9      	bcc.n	8003142 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800314e:	4a0a      	ldr	r2, [pc, #40]	@ (8003178 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003150:	4c0a      	ldr	r4, [pc, #40]	@ (800317c <LoopFillZerobss+0x22>)
  movs r3, #0
 8003152:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003154:	e001      	b.n	800315a <LoopFillZerobss>

08003156 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003156:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003158:	3204      	adds	r2, #4

0800315a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800315a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800315c:	d3fb      	bcc.n	8003156 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800315e:	f005 fe47 	bl	8008df0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003162:	f7fe fdcd 	bl	8001d00 <main>
  bx  lr    
 8003166:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003168:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800316c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003170:	20000208 	.word	0x20000208
  ldr r2, =_sidata
 8003174:	08010028 	.word	0x08010028
  ldr r2, =_sbss
 8003178:	20000208 	.word	0x20000208
  ldr r4, =_ebss
 800317c:	2000062c 	.word	0x2000062c

08003180 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003180:	e7fe      	b.n	8003180 <ADC_IRQHandler>
	...

08003184 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003188:	4b0e      	ldr	r3, [pc, #56]	@ (80031c4 <HAL_Init+0x40>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a0d      	ldr	r2, [pc, #52]	@ (80031c4 <HAL_Init+0x40>)
 800318e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003192:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003194:	4b0b      	ldr	r3, [pc, #44]	@ (80031c4 <HAL_Init+0x40>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a0a      	ldr	r2, [pc, #40]	@ (80031c4 <HAL_Init+0x40>)
 800319a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800319e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80031a0:	4b08      	ldr	r3, [pc, #32]	@ (80031c4 <HAL_Init+0x40>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a07      	ldr	r2, [pc, #28]	@ (80031c4 <HAL_Init+0x40>)
 80031a6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80031aa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80031ac:	2003      	movs	r0, #3
 80031ae:	f000 f94f 	bl	8003450 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80031b2:	2000      	movs	r0, #0
 80031b4:	f000 f808 	bl	80031c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80031b8:	f7ff f9c8 	bl	800254c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80031bc:	2300      	movs	r3, #0
}
 80031be:	4618      	mov	r0, r3
 80031c0:	bd80      	pop	{r7, pc}
 80031c2:	bf00      	nop
 80031c4:	40023c00 	.word	0x40023c00

080031c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b082      	sub	sp, #8
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80031d0:	4b12      	ldr	r3, [pc, #72]	@ (800321c <HAL_InitTick+0x54>)
 80031d2:	681a      	ldr	r2, [r3, #0]
 80031d4:	4b12      	ldr	r3, [pc, #72]	@ (8003220 <HAL_InitTick+0x58>)
 80031d6:	781b      	ldrb	r3, [r3, #0]
 80031d8:	4619      	mov	r1, r3
 80031da:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80031de:	fbb3 f3f1 	udiv	r3, r3, r1
 80031e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80031e6:	4618      	mov	r0, r3
 80031e8:	f000 f967 	bl	80034ba <HAL_SYSTICK_Config>
 80031ec:	4603      	mov	r3, r0
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d001      	beq.n	80031f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80031f2:	2301      	movs	r3, #1
 80031f4:	e00e      	b.n	8003214 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2b0f      	cmp	r3, #15
 80031fa:	d80a      	bhi.n	8003212 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80031fc:	2200      	movs	r2, #0
 80031fe:	6879      	ldr	r1, [r7, #4]
 8003200:	f04f 30ff 	mov.w	r0, #4294967295
 8003204:	f000 f92f 	bl	8003466 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003208:	4a06      	ldr	r2, [pc, #24]	@ (8003224 <HAL_InitTick+0x5c>)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800320e:	2300      	movs	r3, #0
 8003210:	e000      	b.n	8003214 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003212:	2301      	movs	r3, #1
}
 8003214:	4618      	mov	r0, r3
 8003216:	3708      	adds	r7, #8
 8003218:	46bd      	mov	sp, r7
 800321a:	bd80      	pop	{r7, pc}
 800321c:	2000001c 	.word	0x2000001c
 8003220:	20000024 	.word	0x20000024
 8003224:	20000020 	.word	0x20000020

08003228 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003228:	b480      	push	{r7}
 800322a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800322c:	4b06      	ldr	r3, [pc, #24]	@ (8003248 <HAL_IncTick+0x20>)
 800322e:	781b      	ldrb	r3, [r3, #0]
 8003230:	461a      	mov	r2, r3
 8003232:	4b06      	ldr	r3, [pc, #24]	@ (800324c <HAL_IncTick+0x24>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4413      	add	r3, r2
 8003238:	4a04      	ldr	r2, [pc, #16]	@ (800324c <HAL_IncTick+0x24>)
 800323a:	6013      	str	r3, [r2, #0]
}
 800323c:	bf00      	nop
 800323e:	46bd      	mov	sp, r7
 8003240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003244:	4770      	bx	lr
 8003246:	bf00      	nop
 8003248:	20000024 	.word	0x20000024
 800324c:	200004bc 	.word	0x200004bc

08003250 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003250:	b480      	push	{r7}
 8003252:	af00      	add	r7, sp, #0
  return uwTick;
 8003254:	4b03      	ldr	r3, [pc, #12]	@ (8003264 <HAL_GetTick+0x14>)
 8003256:	681b      	ldr	r3, [r3, #0]
}
 8003258:	4618      	mov	r0, r3
 800325a:	46bd      	mov	sp, r7
 800325c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003260:	4770      	bx	lr
 8003262:	bf00      	nop
 8003264:	200004bc 	.word	0x200004bc

08003268 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b084      	sub	sp, #16
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003270:	f7ff ffee 	bl	8003250 <HAL_GetTick>
 8003274:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003280:	d005      	beq.n	800328e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003282:	4b0a      	ldr	r3, [pc, #40]	@ (80032ac <HAL_Delay+0x44>)
 8003284:	781b      	ldrb	r3, [r3, #0]
 8003286:	461a      	mov	r2, r3
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	4413      	add	r3, r2
 800328c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800328e:	bf00      	nop
 8003290:	f7ff ffde 	bl	8003250 <HAL_GetTick>
 8003294:	4602      	mov	r2, r0
 8003296:	68bb      	ldr	r3, [r7, #8]
 8003298:	1ad3      	subs	r3, r2, r3
 800329a:	68fa      	ldr	r2, [r7, #12]
 800329c:	429a      	cmp	r2, r3
 800329e:	d8f7      	bhi.n	8003290 <HAL_Delay+0x28>
  {
  }
}
 80032a0:	bf00      	nop
 80032a2:	bf00      	nop
 80032a4:	3710      	adds	r7, #16
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}
 80032aa:	bf00      	nop
 80032ac:	20000024 	.word	0x20000024

080032b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032b0:	b480      	push	{r7}
 80032b2:	b085      	sub	sp, #20
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	f003 0307 	and.w	r3, r3, #7
 80032be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80032c0:	4b0c      	ldr	r3, [pc, #48]	@ (80032f4 <__NVIC_SetPriorityGrouping+0x44>)
 80032c2:	68db      	ldr	r3, [r3, #12]
 80032c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80032c6:	68ba      	ldr	r2, [r7, #8]
 80032c8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80032cc:	4013      	ands	r3, r2
 80032ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80032d4:	68bb      	ldr	r3, [r7, #8]
 80032d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80032d8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80032dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80032e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80032e2:	4a04      	ldr	r2, [pc, #16]	@ (80032f4 <__NVIC_SetPriorityGrouping+0x44>)
 80032e4:	68bb      	ldr	r3, [r7, #8]
 80032e6:	60d3      	str	r3, [r2, #12]
}
 80032e8:	bf00      	nop
 80032ea:	3714      	adds	r7, #20
 80032ec:	46bd      	mov	sp, r7
 80032ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f2:	4770      	bx	lr
 80032f4:	e000ed00 	.word	0xe000ed00

080032f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80032f8:	b480      	push	{r7}
 80032fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80032fc:	4b04      	ldr	r3, [pc, #16]	@ (8003310 <__NVIC_GetPriorityGrouping+0x18>)
 80032fe:	68db      	ldr	r3, [r3, #12]
 8003300:	0a1b      	lsrs	r3, r3, #8
 8003302:	f003 0307 	and.w	r3, r3, #7
}
 8003306:	4618      	mov	r0, r3
 8003308:	46bd      	mov	sp, r7
 800330a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330e:	4770      	bx	lr
 8003310:	e000ed00 	.word	0xe000ed00

08003314 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003314:	b480      	push	{r7}
 8003316:	b083      	sub	sp, #12
 8003318:	af00      	add	r7, sp, #0
 800331a:	4603      	mov	r3, r0
 800331c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800331e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003322:	2b00      	cmp	r3, #0
 8003324:	db0b      	blt.n	800333e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003326:	79fb      	ldrb	r3, [r7, #7]
 8003328:	f003 021f 	and.w	r2, r3, #31
 800332c:	4907      	ldr	r1, [pc, #28]	@ (800334c <__NVIC_EnableIRQ+0x38>)
 800332e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003332:	095b      	lsrs	r3, r3, #5
 8003334:	2001      	movs	r0, #1
 8003336:	fa00 f202 	lsl.w	r2, r0, r2
 800333a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800333e:	bf00      	nop
 8003340:	370c      	adds	r7, #12
 8003342:	46bd      	mov	sp, r7
 8003344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003348:	4770      	bx	lr
 800334a:	bf00      	nop
 800334c:	e000e100 	.word	0xe000e100

08003350 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003350:	b480      	push	{r7}
 8003352:	b083      	sub	sp, #12
 8003354:	af00      	add	r7, sp, #0
 8003356:	4603      	mov	r3, r0
 8003358:	6039      	str	r1, [r7, #0]
 800335a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800335c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003360:	2b00      	cmp	r3, #0
 8003362:	db0a      	blt.n	800337a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	b2da      	uxtb	r2, r3
 8003368:	490c      	ldr	r1, [pc, #48]	@ (800339c <__NVIC_SetPriority+0x4c>)
 800336a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800336e:	0112      	lsls	r2, r2, #4
 8003370:	b2d2      	uxtb	r2, r2
 8003372:	440b      	add	r3, r1
 8003374:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003378:	e00a      	b.n	8003390 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	b2da      	uxtb	r2, r3
 800337e:	4908      	ldr	r1, [pc, #32]	@ (80033a0 <__NVIC_SetPriority+0x50>)
 8003380:	79fb      	ldrb	r3, [r7, #7]
 8003382:	f003 030f 	and.w	r3, r3, #15
 8003386:	3b04      	subs	r3, #4
 8003388:	0112      	lsls	r2, r2, #4
 800338a:	b2d2      	uxtb	r2, r2
 800338c:	440b      	add	r3, r1
 800338e:	761a      	strb	r2, [r3, #24]
}
 8003390:	bf00      	nop
 8003392:	370c      	adds	r7, #12
 8003394:	46bd      	mov	sp, r7
 8003396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339a:	4770      	bx	lr
 800339c:	e000e100 	.word	0xe000e100
 80033a0:	e000ed00 	.word	0xe000ed00

080033a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80033a4:	b480      	push	{r7}
 80033a6:	b089      	sub	sp, #36	@ 0x24
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	60f8      	str	r0, [r7, #12]
 80033ac:	60b9      	str	r1, [r7, #8]
 80033ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	f003 0307 	and.w	r3, r3, #7
 80033b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80033b8:	69fb      	ldr	r3, [r7, #28]
 80033ba:	f1c3 0307 	rsb	r3, r3, #7
 80033be:	2b04      	cmp	r3, #4
 80033c0:	bf28      	it	cs
 80033c2:	2304      	movcs	r3, #4
 80033c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80033c6:	69fb      	ldr	r3, [r7, #28]
 80033c8:	3304      	adds	r3, #4
 80033ca:	2b06      	cmp	r3, #6
 80033cc:	d902      	bls.n	80033d4 <NVIC_EncodePriority+0x30>
 80033ce:	69fb      	ldr	r3, [r7, #28]
 80033d0:	3b03      	subs	r3, #3
 80033d2:	e000      	b.n	80033d6 <NVIC_EncodePriority+0x32>
 80033d4:	2300      	movs	r3, #0
 80033d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033d8:	f04f 32ff 	mov.w	r2, #4294967295
 80033dc:	69bb      	ldr	r3, [r7, #24]
 80033de:	fa02 f303 	lsl.w	r3, r2, r3
 80033e2:	43da      	mvns	r2, r3
 80033e4:	68bb      	ldr	r3, [r7, #8]
 80033e6:	401a      	ands	r2, r3
 80033e8:	697b      	ldr	r3, [r7, #20]
 80033ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80033ec:	f04f 31ff 	mov.w	r1, #4294967295
 80033f0:	697b      	ldr	r3, [r7, #20]
 80033f2:	fa01 f303 	lsl.w	r3, r1, r3
 80033f6:	43d9      	mvns	r1, r3
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033fc:	4313      	orrs	r3, r2
         );
}
 80033fe:	4618      	mov	r0, r3
 8003400:	3724      	adds	r7, #36	@ 0x24
 8003402:	46bd      	mov	sp, r7
 8003404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003408:	4770      	bx	lr
	...

0800340c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b082      	sub	sp, #8
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	3b01      	subs	r3, #1
 8003418:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800341c:	d301      	bcc.n	8003422 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800341e:	2301      	movs	r3, #1
 8003420:	e00f      	b.n	8003442 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003422:	4a0a      	ldr	r2, [pc, #40]	@ (800344c <SysTick_Config+0x40>)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	3b01      	subs	r3, #1
 8003428:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800342a:	210f      	movs	r1, #15
 800342c:	f04f 30ff 	mov.w	r0, #4294967295
 8003430:	f7ff ff8e 	bl	8003350 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003434:	4b05      	ldr	r3, [pc, #20]	@ (800344c <SysTick_Config+0x40>)
 8003436:	2200      	movs	r2, #0
 8003438:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800343a:	4b04      	ldr	r3, [pc, #16]	@ (800344c <SysTick_Config+0x40>)
 800343c:	2207      	movs	r2, #7
 800343e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003440:	2300      	movs	r3, #0
}
 8003442:	4618      	mov	r0, r3
 8003444:	3708      	adds	r7, #8
 8003446:	46bd      	mov	sp, r7
 8003448:	bd80      	pop	{r7, pc}
 800344a:	bf00      	nop
 800344c:	e000e010 	.word	0xe000e010

08003450 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b082      	sub	sp, #8
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003458:	6878      	ldr	r0, [r7, #4]
 800345a:	f7ff ff29 	bl	80032b0 <__NVIC_SetPriorityGrouping>
}
 800345e:	bf00      	nop
 8003460:	3708      	adds	r7, #8
 8003462:	46bd      	mov	sp, r7
 8003464:	bd80      	pop	{r7, pc}

08003466 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003466:	b580      	push	{r7, lr}
 8003468:	b086      	sub	sp, #24
 800346a:	af00      	add	r7, sp, #0
 800346c:	4603      	mov	r3, r0
 800346e:	60b9      	str	r1, [r7, #8]
 8003470:	607a      	str	r2, [r7, #4]
 8003472:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003474:	2300      	movs	r3, #0
 8003476:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003478:	f7ff ff3e 	bl	80032f8 <__NVIC_GetPriorityGrouping>
 800347c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800347e:	687a      	ldr	r2, [r7, #4]
 8003480:	68b9      	ldr	r1, [r7, #8]
 8003482:	6978      	ldr	r0, [r7, #20]
 8003484:	f7ff ff8e 	bl	80033a4 <NVIC_EncodePriority>
 8003488:	4602      	mov	r2, r0
 800348a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800348e:	4611      	mov	r1, r2
 8003490:	4618      	mov	r0, r3
 8003492:	f7ff ff5d 	bl	8003350 <__NVIC_SetPriority>
}
 8003496:	bf00      	nop
 8003498:	3718      	adds	r7, #24
 800349a:	46bd      	mov	sp, r7
 800349c:	bd80      	pop	{r7, pc}

0800349e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800349e:	b580      	push	{r7, lr}
 80034a0:	b082      	sub	sp, #8
 80034a2:	af00      	add	r7, sp, #0
 80034a4:	4603      	mov	r3, r0
 80034a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80034a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034ac:	4618      	mov	r0, r3
 80034ae:	f7ff ff31 	bl	8003314 <__NVIC_EnableIRQ>
}
 80034b2:	bf00      	nop
 80034b4:	3708      	adds	r7, #8
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bd80      	pop	{r7, pc}

080034ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80034ba:	b580      	push	{r7, lr}
 80034bc:	b082      	sub	sp, #8
 80034be:	af00      	add	r7, sp, #0
 80034c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80034c2:	6878      	ldr	r0, [r7, #4]
 80034c4:	f7ff ffa2 	bl	800340c <SysTick_Config>
 80034c8:	4603      	mov	r3, r0
}
 80034ca:	4618      	mov	r0, r3
 80034cc:	3708      	adds	r7, #8
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bd80      	pop	{r7, pc}
	...

080034d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80034d4:	b480      	push	{r7}
 80034d6:	b089      	sub	sp, #36	@ 0x24
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
 80034dc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80034de:	2300      	movs	r3, #0
 80034e0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80034e2:	2300      	movs	r3, #0
 80034e4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80034e6:	2300      	movs	r3, #0
 80034e8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80034ea:	2300      	movs	r3, #0
 80034ec:	61fb      	str	r3, [r7, #28]
 80034ee:	e165      	b.n	80037bc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80034f0:	2201      	movs	r2, #1
 80034f2:	69fb      	ldr	r3, [r7, #28]
 80034f4:	fa02 f303 	lsl.w	r3, r2, r3
 80034f8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	697a      	ldr	r2, [r7, #20]
 8003500:	4013      	ands	r3, r2
 8003502:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003504:	693a      	ldr	r2, [r7, #16]
 8003506:	697b      	ldr	r3, [r7, #20]
 8003508:	429a      	cmp	r2, r3
 800350a:	f040 8154 	bne.w	80037b6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	f003 0303 	and.w	r3, r3, #3
 8003516:	2b01      	cmp	r3, #1
 8003518:	d005      	beq.n	8003526 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003522:	2b02      	cmp	r3, #2
 8003524:	d130      	bne.n	8003588 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	689b      	ldr	r3, [r3, #8]
 800352a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800352c:	69fb      	ldr	r3, [r7, #28]
 800352e:	005b      	lsls	r3, r3, #1
 8003530:	2203      	movs	r2, #3
 8003532:	fa02 f303 	lsl.w	r3, r2, r3
 8003536:	43db      	mvns	r3, r3
 8003538:	69ba      	ldr	r2, [r7, #24]
 800353a:	4013      	ands	r3, r2
 800353c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	68da      	ldr	r2, [r3, #12]
 8003542:	69fb      	ldr	r3, [r7, #28]
 8003544:	005b      	lsls	r3, r3, #1
 8003546:	fa02 f303 	lsl.w	r3, r2, r3
 800354a:	69ba      	ldr	r2, [r7, #24]
 800354c:	4313      	orrs	r3, r2
 800354e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	69ba      	ldr	r2, [r7, #24]
 8003554:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800355c:	2201      	movs	r2, #1
 800355e:	69fb      	ldr	r3, [r7, #28]
 8003560:	fa02 f303 	lsl.w	r3, r2, r3
 8003564:	43db      	mvns	r3, r3
 8003566:	69ba      	ldr	r2, [r7, #24]
 8003568:	4013      	ands	r3, r2
 800356a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	091b      	lsrs	r3, r3, #4
 8003572:	f003 0201 	and.w	r2, r3, #1
 8003576:	69fb      	ldr	r3, [r7, #28]
 8003578:	fa02 f303 	lsl.w	r3, r2, r3
 800357c:	69ba      	ldr	r2, [r7, #24]
 800357e:	4313      	orrs	r3, r2
 8003580:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	69ba      	ldr	r2, [r7, #24]
 8003586:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	f003 0303 	and.w	r3, r3, #3
 8003590:	2b03      	cmp	r3, #3
 8003592:	d017      	beq.n	80035c4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	68db      	ldr	r3, [r3, #12]
 8003598:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800359a:	69fb      	ldr	r3, [r7, #28]
 800359c:	005b      	lsls	r3, r3, #1
 800359e:	2203      	movs	r2, #3
 80035a0:	fa02 f303 	lsl.w	r3, r2, r3
 80035a4:	43db      	mvns	r3, r3
 80035a6:	69ba      	ldr	r2, [r7, #24]
 80035a8:	4013      	ands	r3, r2
 80035aa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	689a      	ldr	r2, [r3, #8]
 80035b0:	69fb      	ldr	r3, [r7, #28]
 80035b2:	005b      	lsls	r3, r3, #1
 80035b4:	fa02 f303 	lsl.w	r3, r2, r3
 80035b8:	69ba      	ldr	r2, [r7, #24]
 80035ba:	4313      	orrs	r3, r2
 80035bc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	69ba      	ldr	r2, [r7, #24]
 80035c2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	f003 0303 	and.w	r3, r3, #3
 80035cc:	2b02      	cmp	r3, #2
 80035ce:	d123      	bne.n	8003618 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80035d0:	69fb      	ldr	r3, [r7, #28]
 80035d2:	08da      	lsrs	r2, r3, #3
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	3208      	adds	r2, #8
 80035d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80035dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80035de:	69fb      	ldr	r3, [r7, #28]
 80035e0:	f003 0307 	and.w	r3, r3, #7
 80035e4:	009b      	lsls	r3, r3, #2
 80035e6:	220f      	movs	r2, #15
 80035e8:	fa02 f303 	lsl.w	r3, r2, r3
 80035ec:	43db      	mvns	r3, r3
 80035ee:	69ba      	ldr	r2, [r7, #24]
 80035f0:	4013      	ands	r3, r2
 80035f2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	691a      	ldr	r2, [r3, #16]
 80035f8:	69fb      	ldr	r3, [r7, #28]
 80035fa:	f003 0307 	and.w	r3, r3, #7
 80035fe:	009b      	lsls	r3, r3, #2
 8003600:	fa02 f303 	lsl.w	r3, r2, r3
 8003604:	69ba      	ldr	r2, [r7, #24]
 8003606:	4313      	orrs	r3, r2
 8003608:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800360a:	69fb      	ldr	r3, [r7, #28]
 800360c:	08da      	lsrs	r2, r3, #3
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	3208      	adds	r2, #8
 8003612:	69b9      	ldr	r1, [r7, #24]
 8003614:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800361e:	69fb      	ldr	r3, [r7, #28]
 8003620:	005b      	lsls	r3, r3, #1
 8003622:	2203      	movs	r2, #3
 8003624:	fa02 f303 	lsl.w	r3, r2, r3
 8003628:	43db      	mvns	r3, r3
 800362a:	69ba      	ldr	r2, [r7, #24]
 800362c:	4013      	ands	r3, r2
 800362e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	f003 0203 	and.w	r2, r3, #3
 8003638:	69fb      	ldr	r3, [r7, #28]
 800363a:	005b      	lsls	r3, r3, #1
 800363c:	fa02 f303 	lsl.w	r3, r2, r3
 8003640:	69ba      	ldr	r2, [r7, #24]
 8003642:	4313      	orrs	r3, r2
 8003644:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	69ba      	ldr	r2, [r7, #24]
 800364a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003654:	2b00      	cmp	r3, #0
 8003656:	f000 80ae 	beq.w	80037b6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800365a:	2300      	movs	r3, #0
 800365c:	60fb      	str	r3, [r7, #12]
 800365e:	4b5d      	ldr	r3, [pc, #372]	@ (80037d4 <HAL_GPIO_Init+0x300>)
 8003660:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003662:	4a5c      	ldr	r2, [pc, #368]	@ (80037d4 <HAL_GPIO_Init+0x300>)
 8003664:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003668:	6453      	str	r3, [r2, #68]	@ 0x44
 800366a:	4b5a      	ldr	r3, [pc, #360]	@ (80037d4 <HAL_GPIO_Init+0x300>)
 800366c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800366e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003672:	60fb      	str	r3, [r7, #12]
 8003674:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003676:	4a58      	ldr	r2, [pc, #352]	@ (80037d8 <HAL_GPIO_Init+0x304>)
 8003678:	69fb      	ldr	r3, [r7, #28]
 800367a:	089b      	lsrs	r3, r3, #2
 800367c:	3302      	adds	r3, #2
 800367e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003682:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003684:	69fb      	ldr	r3, [r7, #28]
 8003686:	f003 0303 	and.w	r3, r3, #3
 800368a:	009b      	lsls	r3, r3, #2
 800368c:	220f      	movs	r2, #15
 800368e:	fa02 f303 	lsl.w	r3, r2, r3
 8003692:	43db      	mvns	r3, r3
 8003694:	69ba      	ldr	r2, [r7, #24]
 8003696:	4013      	ands	r3, r2
 8003698:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	4a4f      	ldr	r2, [pc, #316]	@ (80037dc <HAL_GPIO_Init+0x308>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d025      	beq.n	80036ee <HAL_GPIO_Init+0x21a>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	4a4e      	ldr	r2, [pc, #312]	@ (80037e0 <HAL_GPIO_Init+0x30c>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d01f      	beq.n	80036ea <HAL_GPIO_Init+0x216>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	4a4d      	ldr	r2, [pc, #308]	@ (80037e4 <HAL_GPIO_Init+0x310>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d019      	beq.n	80036e6 <HAL_GPIO_Init+0x212>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	4a4c      	ldr	r2, [pc, #304]	@ (80037e8 <HAL_GPIO_Init+0x314>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d013      	beq.n	80036e2 <HAL_GPIO_Init+0x20e>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	4a4b      	ldr	r2, [pc, #300]	@ (80037ec <HAL_GPIO_Init+0x318>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d00d      	beq.n	80036de <HAL_GPIO_Init+0x20a>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	4a4a      	ldr	r2, [pc, #296]	@ (80037f0 <HAL_GPIO_Init+0x31c>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d007      	beq.n	80036da <HAL_GPIO_Init+0x206>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	4a49      	ldr	r2, [pc, #292]	@ (80037f4 <HAL_GPIO_Init+0x320>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d101      	bne.n	80036d6 <HAL_GPIO_Init+0x202>
 80036d2:	2306      	movs	r3, #6
 80036d4:	e00c      	b.n	80036f0 <HAL_GPIO_Init+0x21c>
 80036d6:	2307      	movs	r3, #7
 80036d8:	e00a      	b.n	80036f0 <HAL_GPIO_Init+0x21c>
 80036da:	2305      	movs	r3, #5
 80036dc:	e008      	b.n	80036f0 <HAL_GPIO_Init+0x21c>
 80036de:	2304      	movs	r3, #4
 80036e0:	e006      	b.n	80036f0 <HAL_GPIO_Init+0x21c>
 80036e2:	2303      	movs	r3, #3
 80036e4:	e004      	b.n	80036f0 <HAL_GPIO_Init+0x21c>
 80036e6:	2302      	movs	r3, #2
 80036e8:	e002      	b.n	80036f0 <HAL_GPIO_Init+0x21c>
 80036ea:	2301      	movs	r3, #1
 80036ec:	e000      	b.n	80036f0 <HAL_GPIO_Init+0x21c>
 80036ee:	2300      	movs	r3, #0
 80036f0:	69fa      	ldr	r2, [r7, #28]
 80036f2:	f002 0203 	and.w	r2, r2, #3
 80036f6:	0092      	lsls	r2, r2, #2
 80036f8:	4093      	lsls	r3, r2
 80036fa:	69ba      	ldr	r2, [r7, #24]
 80036fc:	4313      	orrs	r3, r2
 80036fe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003700:	4935      	ldr	r1, [pc, #212]	@ (80037d8 <HAL_GPIO_Init+0x304>)
 8003702:	69fb      	ldr	r3, [r7, #28]
 8003704:	089b      	lsrs	r3, r3, #2
 8003706:	3302      	adds	r3, #2
 8003708:	69ba      	ldr	r2, [r7, #24]
 800370a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800370e:	4b3a      	ldr	r3, [pc, #232]	@ (80037f8 <HAL_GPIO_Init+0x324>)
 8003710:	689b      	ldr	r3, [r3, #8]
 8003712:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003714:	693b      	ldr	r3, [r7, #16]
 8003716:	43db      	mvns	r3, r3
 8003718:	69ba      	ldr	r2, [r7, #24]
 800371a:	4013      	ands	r3, r2
 800371c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003726:	2b00      	cmp	r3, #0
 8003728:	d003      	beq.n	8003732 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800372a:	69ba      	ldr	r2, [r7, #24]
 800372c:	693b      	ldr	r3, [r7, #16]
 800372e:	4313      	orrs	r3, r2
 8003730:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003732:	4a31      	ldr	r2, [pc, #196]	@ (80037f8 <HAL_GPIO_Init+0x324>)
 8003734:	69bb      	ldr	r3, [r7, #24]
 8003736:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003738:	4b2f      	ldr	r3, [pc, #188]	@ (80037f8 <HAL_GPIO_Init+0x324>)
 800373a:	68db      	ldr	r3, [r3, #12]
 800373c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800373e:	693b      	ldr	r3, [r7, #16]
 8003740:	43db      	mvns	r3, r3
 8003742:	69ba      	ldr	r2, [r7, #24]
 8003744:	4013      	ands	r3, r2
 8003746:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003750:	2b00      	cmp	r3, #0
 8003752:	d003      	beq.n	800375c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003754:	69ba      	ldr	r2, [r7, #24]
 8003756:	693b      	ldr	r3, [r7, #16]
 8003758:	4313      	orrs	r3, r2
 800375a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800375c:	4a26      	ldr	r2, [pc, #152]	@ (80037f8 <HAL_GPIO_Init+0x324>)
 800375e:	69bb      	ldr	r3, [r7, #24]
 8003760:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003762:	4b25      	ldr	r3, [pc, #148]	@ (80037f8 <HAL_GPIO_Init+0x324>)
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003768:	693b      	ldr	r3, [r7, #16]
 800376a:	43db      	mvns	r3, r3
 800376c:	69ba      	ldr	r2, [r7, #24]
 800376e:	4013      	ands	r3, r2
 8003770:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800377a:	2b00      	cmp	r3, #0
 800377c:	d003      	beq.n	8003786 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800377e:	69ba      	ldr	r2, [r7, #24]
 8003780:	693b      	ldr	r3, [r7, #16]
 8003782:	4313      	orrs	r3, r2
 8003784:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003786:	4a1c      	ldr	r2, [pc, #112]	@ (80037f8 <HAL_GPIO_Init+0x324>)
 8003788:	69bb      	ldr	r3, [r7, #24]
 800378a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800378c:	4b1a      	ldr	r3, [pc, #104]	@ (80037f8 <HAL_GPIO_Init+0x324>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	43db      	mvns	r3, r3
 8003796:	69ba      	ldr	r2, [r7, #24]
 8003798:	4013      	ands	r3, r2
 800379a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d003      	beq.n	80037b0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80037a8:	69ba      	ldr	r2, [r7, #24]
 80037aa:	693b      	ldr	r3, [r7, #16]
 80037ac:	4313      	orrs	r3, r2
 80037ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80037b0:	4a11      	ldr	r2, [pc, #68]	@ (80037f8 <HAL_GPIO_Init+0x324>)
 80037b2:	69bb      	ldr	r3, [r7, #24]
 80037b4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80037b6:	69fb      	ldr	r3, [r7, #28]
 80037b8:	3301      	adds	r3, #1
 80037ba:	61fb      	str	r3, [r7, #28]
 80037bc:	69fb      	ldr	r3, [r7, #28]
 80037be:	2b0f      	cmp	r3, #15
 80037c0:	f67f ae96 	bls.w	80034f0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80037c4:	bf00      	nop
 80037c6:	bf00      	nop
 80037c8:	3724      	adds	r7, #36	@ 0x24
 80037ca:	46bd      	mov	sp, r7
 80037cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d0:	4770      	bx	lr
 80037d2:	bf00      	nop
 80037d4:	40023800 	.word	0x40023800
 80037d8:	40013800 	.word	0x40013800
 80037dc:	40020000 	.word	0x40020000
 80037e0:	40020400 	.word	0x40020400
 80037e4:	40020800 	.word	0x40020800
 80037e8:	40020c00 	.word	0x40020c00
 80037ec:	40021000 	.word	0x40021000
 80037f0:	40021400 	.word	0x40021400
 80037f4:	40021800 	.word	0x40021800
 80037f8:	40013c00 	.word	0x40013c00

080037fc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80037fc:	b480      	push	{r7}
 80037fe:	b085      	sub	sp, #20
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
 8003804:	460b      	mov	r3, r1
 8003806:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	691a      	ldr	r2, [r3, #16]
 800380c:	887b      	ldrh	r3, [r7, #2]
 800380e:	4013      	ands	r3, r2
 8003810:	2b00      	cmp	r3, #0
 8003812:	d002      	beq.n	800381a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003814:	2301      	movs	r3, #1
 8003816:	73fb      	strb	r3, [r7, #15]
 8003818:	e001      	b.n	800381e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800381a:	2300      	movs	r3, #0
 800381c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800381e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003820:	4618      	mov	r0, r3
 8003822:	3714      	adds	r7, #20
 8003824:	46bd      	mov	sp, r7
 8003826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382a:	4770      	bx	lr

0800382c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800382c:	b480      	push	{r7}
 800382e:	b083      	sub	sp, #12
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
 8003834:	460b      	mov	r3, r1
 8003836:	807b      	strh	r3, [r7, #2]
 8003838:	4613      	mov	r3, r2
 800383a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800383c:	787b      	ldrb	r3, [r7, #1]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d003      	beq.n	800384a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003842:	887a      	ldrh	r2, [r7, #2]
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003848:	e003      	b.n	8003852 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800384a:	887b      	ldrh	r3, [r7, #2]
 800384c:	041a      	lsls	r2, r3, #16
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	619a      	str	r2, [r3, #24]
}
 8003852:	bf00      	nop
 8003854:	370c      	adds	r7, #12
 8003856:	46bd      	mov	sp, r7
 8003858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385c:	4770      	bx	lr
	...

08003860 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b082      	sub	sp, #8
 8003864:	af00      	add	r7, sp, #0
 8003866:	4603      	mov	r3, r0
 8003868:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800386a:	4b08      	ldr	r3, [pc, #32]	@ (800388c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800386c:	695a      	ldr	r2, [r3, #20]
 800386e:	88fb      	ldrh	r3, [r7, #6]
 8003870:	4013      	ands	r3, r2
 8003872:	2b00      	cmp	r3, #0
 8003874:	d006      	beq.n	8003884 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003876:	4a05      	ldr	r2, [pc, #20]	@ (800388c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003878:	88fb      	ldrh	r3, [r7, #6]
 800387a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800387c:	88fb      	ldrh	r3, [r7, #6]
 800387e:	4618      	mov	r0, r3
 8003880:	f7fe fb36 	bl	8001ef0 <HAL_GPIO_EXTI_Callback>
  }
}
 8003884:	bf00      	nop
 8003886:	3708      	adds	r7, #8
 8003888:	46bd      	mov	sp, r7
 800388a:	bd80      	pop	{r7, pc}
 800388c:	40013c00 	.word	0x40013c00

08003890 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b084      	sub	sp, #16
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d101      	bne.n	80038a2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800389e:	2301      	movs	r3, #1
 80038a0:	e12b      	b.n	8003afa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80038a8:	b2db      	uxtb	r3, r3
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d106      	bne.n	80038bc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2200      	movs	r2, #0
 80038b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80038b6:	6878      	ldr	r0, [r7, #4]
 80038b8:	f7fe f9da 	bl	8001c70 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2224      	movs	r2, #36	@ 0x24
 80038c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	681a      	ldr	r2, [r3, #0]
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f022 0201 	bic.w	r2, r2, #1
 80038d2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	681a      	ldr	r2, [r3, #0]
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80038e2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	681a      	ldr	r2, [r3, #0]
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80038f2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80038f4:	f001 f8b8 	bl	8004a68 <HAL_RCC_GetPCLK1Freq>
 80038f8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	685b      	ldr	r3, [r3, #4]
 80038fe:	4a81      	ldr	r2, [pc, #516]	@ (8003b04 <HAL_I2C_Init+0x274>)
 8003900:	4293      	cmp	r3, r2
 8003902:	d807      	bhi.n	8003914 <HAL_I2C_Init+0x84>
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	4a80      	ldr	r2, [pc, #512]	@ (8003b08 <HAL_I2C_Init+0x278>)
 8003908:	4293      	cmp	r3, r2
 800390a:	bf94      	ite	ls
 800390c:	2301      	movls	r3, #1
 800390e:	2300      	movhi	r3, #0
 8003910:	b2db      	uxtb	r3, r3
 8003912:	e006      	b.n	8003922 <HAL_I2C_Init+0x92>
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	4a7d      	ldr	r2, [pc, #500]	@ (8003b0c <HAL_I2C_Init+0x27c>)
 8003918:	4293      	cmp	r3, r2
 800391a:	bf94      	ite	ls
 800391c:	2301      	movls	r3, #1
 800391e:	2300      	movhi	r3, #0
 8003920:	b2db      	uxtb	r3, r3
 8003922:	2b00      	cmp	r3, #0
 8003924:	d001      	beq.n	800392a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003926:	2301      	movs	r3, #1
 8003928:	e0e7      	b.n	8003afa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	4a78      	ldr	r2, [pc, #480]	@ (8003b10 <HAL_I2C_Init+0x280>)
 800392e:	fba2 2303 	umull	r2, r3, r2, r3
 8003932:	0c9b      	lsrs	r3, r3, #18
 8003934:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	685b      	ldr	r3, [r3, #4]
 800393c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	68ba      	ldr	r2, [r7, #8]
 8003946:	430a      	orrs	r2, r1
 8003948:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	6a1b      	ldr	r3, [r3, #32]
 8003950:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	4a6a      	ldr	r2, [pc, #424]	@ (8003b04 <HAL_I2C_Init+0x274>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d802      	bhi.n	8003964 <HAL_I2C_Init+0xd4>
 800395e:	68bb      	ldr	r3, [r7, #8]
 8003960:	3301      	adds	r3, #1
 8003962:	e009      	b.n	8003978 <HAL_I2C_Init+0xe8>
 8003964:	68bb      	ldr	r3, [r7, #8]
 8003966:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800396a:	fb02 f303 	mul.w	r3, r2, r3
 800396e:	4a69      	ldr	r2, [pc, #420]	@ (8003b14 <HAL_I2C_Init+0x284>)
 8003970:	fba2 2303 	umull	r2, r3, r2, r3
 8003974:	099b      	lsrs	r3, r3, #6
 8003976:	3301      	adds	r3, #1
 8003978:	687a      	ldr	r2, [r7, #4]
 800397a:	6812      	ldr	r2, [r2, #0]
 800397c:	430b      	orrs	r3, r1
 800397e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	69db      	ldr	r3, [r3, #28]
 8003986:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800398a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	685b      	ldr	r3, [r3, #4]
 8003992:	495c      	ldr	r1, [pc, #368]	@ (8003b04 <HAL_I2C_Init+0x274>)
 8003994:	428b      	cmp	r3, r1
 8003996:	d819      	bhi.n	80039cc <HAL_I2C_Init+0x13c>
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	1e59      	subs	r1, r3, #1
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	005b      	lsls	r3, r3, #1
 80039a2:	fbb1 f3f3 	udiv	r3, r1, r3
 80039a6:	1c59      	adds	r1, r3, #1
 80039a8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80039ac:	400b      	ands	r3, r1
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d00a      	beq.n	80039c8 <HAL_I2C_Init+0x138>
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	1e59      	subs	r1, r3, #1
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	005b      	lsls	r3, r3, #1
 80039bc:	fbb1 f3f3 	udiv	r3, r1, r3
 80039c0:	3301      	adds	r3, #1
 80039c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039c6:	e051      	b.n	8003a6c <HAL_I2C_Init+0x1dc>
 80039c8:	2304      	movs	r3, #4
 80039ca:	e04f      	b.n	8003a6c <HAL_I2C_Init+0x1dc>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	689b      	ldr	r3, [r3, #8]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d111      	bne.n	80039f8 <HAL_I2C_Init+0x168>
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	1e58      	subs	r0, r3, #1
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6859      	ldr	r1, [r3, #4]
 80039dc:	460b      	mov	r3, r1
 80039de:	005b      	lsls	r3, r3, #1
 80039e0:	440b      	add	r3, r1
 80039e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80039e6:	3301      	adds	r3, #1
 80039e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	bf0c      	ite	eq
 80039f0:	2301      	moveq	r3, #1
 80039f2:	2300      	movne	r3, #0
 80039f4:	b2db      	uxtb	r3, r3
 80039f6:	e012      	b.n	8003a1e <HAL_I2C_Init+0x18e>
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	1e58      	subs	r0, r3, #1
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6859      	ldr	r1, [r3, #4]
 8003a00:	460b      	mov	r3, r1
 8003a02:	009b      	lsls	r3, r3, #2
 8003a04:	440b      	add	r3, r1
 8003a06:	0099      	lsls	r1, r3, #2
 8003a08:	440b      	add	r3, r1
 8003a0a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a0e:	3301      	adds	r3, #1
 8003a10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	bf0c      	ite	eq
 8003a18:	2301      	moveq	r3, #1
 8003a1a:	2300      	movne	r3, #0
 8003a1c:	b2db      	uxtb	r3, r3
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d001      	beq.n	8003a26 <HAL_I2C_Init+0x196>
 8003a22:	2301      	movs	r3, #1
 8003a24:	e022      	b.n	8003a6c <HAL_I2C_Init+0x1dc>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	689b      	ldr	r3, [r3, #8]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d10e      	bne.n	8003a4c <HAL_I2C_Init+0x1bc>
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	1e58      	subs	r0, r3, #1
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6859      	ldr	r1, [r3, #4]
 8003a36:	460b      	mov	r3, r1
 8003a38:	005b      	lsls	r3, r3, #1
 8003a3a:	440b      	add	r3, r1
 8003a3c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a40:	3301      	adds	r3, #1
 8003a42:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a46:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003a4a:	e00f      	b.n	8003a6c <HAL_I2C_Init+0x1dc>
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	1e58      	subs	r0, r3, #1
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6859      	ldr	r1, [r3, #4]
 8003a54:	460b      	mov	r3, r1
 8003a56:	009b      	lsls	r3, r3, #2
 8003a58:	440b      	add	r3, r1
 8003a5a:	0099      	lsls	r1, r3, #2
 8003a5c:	440b      	add	r3, r1
 8003a5e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a62:	3301      	adds	r3, #1
 8003a64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a68:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003a6c:	6879      	ldr	r1, [r7, #4]
 8003a6e:	6809      	ldr	r1, [r1, #0]
 8003a70:	4313      	orrs	r3, r2
 8003a72:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	69da      	ldr	r2, [r3, #28]
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6a1b      	ldr	r3, [r3, #32]
 8003a86:	431a      	orrs	r2, r3
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	430a      	orrs	r2, r1
 8003a8e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	689b      	ldr	r3, [r3, #8]
 8003a96:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003a9a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003a9e:	687a      	ldr	r2, [r7, #4]
 8003aa0:	6911      	ldr	r1, [r2, #16]
 8003aa2:	687a      	ldr	r2, [r7, #4]
 8003aa4:	68d2      	ldr	r2, [r2, #12]
 8003aa6:	4311      	orrs	r1, r2
 8003aa8:	687a      	ldr	r2, [r7, #4]
 8003aaa:	6812      	ldr	r2, [r2, #0]
 8003aac:	430b      	orrs	r3, r1
 8003aae:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	68db      	ldr	r3, [r3, #12]
 8003ab6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	695a      	ldr	r2, [r3, #20]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	699b      	ldr	r3, [r3, #24]
 8003ac2:	431a      	orrs	r2, r3
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	430a      	orrs	r2, r1
 8003aca:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	681a      	ldr	r2, [r3, #0]
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f042 0201 	orr.w	r2, r2, #1
 8003ada:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2200      	movs	r2, #0
 8003ae0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2220      	movs	r2, #32
 8003ae6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2200      	movs	r2, #0
 8003aee:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2200      	movs	r2, #0
 8003af4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003af8:	2300      	movs	r3, #0
}
 8003afa:	4618      	mov	r0, r3
 8003afc:	3710      	adds	r7, #16
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bd80      	pop	{r7, pc}
 8003b02:	bf00      	nop
 8003b04:	000186a0 	.word	0x000186a0
 8003b08:	001e847f 	.word	0x001e847f
 8003b0c:	003d08ff 	.word	0x003d08ff
 8003b10:	431bde83 	.word	0x431bde83
 8003b14:	10624dd3 	.word	0x10624dd3

08003b18 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b088      	sub	sp, #32
 8003b1c:	af02      	add	r7, sp, #8
 8003b1e:	60f8      	str	r0, [r7, #12]
 8003b20:	607a      	str	r2, [r7, #4]
 8003b22:	461a      	mov	r2, r3
 8003b24:	460b      	mov	r3, r1
 8003b26:	817b      	strh	r3, [r7, #10]
 8003b28:	4613      	mov	r3, r2
 8003b2a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003b2c:	f7ff fb90 	bl	8003250 <HAL_GetTick>
 8003b30:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b38:	b2db      	uxtb	r3, r3
 8003b3a:	2b20      	cmp	r3, #32
 8003b3c:	f040 80e0 	bne.w	8003d00 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003b40:	697b      	ldr	r3, [r7, #20]
 8003b42:	9300      	str	r3, [sp, #0]
 8003b44:	2319      	movs	r3, #25
 8003b46:	2201      	movs	r2, #1
 8003b48:	4970      	ldr	r1, [pc, #448]	@ (8003d0c <HAL_I2C_Master_Transmit+0x1f4>)
 8003b4a:	68f8      	ldr	r0, [r7, #12]
 8003b4c:	f000 fc64 	bl	8004418 <I2C_WaitOnFlagUntilTimeout>
 8003b50:	4603      	mov	r3, r0
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d001      	beq.n	8003b5a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003b56:	2302      	movs	r3, #2
 8003b58:	e0d3      	b.n	8003d02 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003b60:	2b01      	cmp	r3, #1
 8003b62:	d101      	bne.n	8003b68 <HAL_I2C_Master_Transmit+0x50>
 8003b64:	2302      	movs	r3, #2
 8003b66:	e0cc      	b.n	8003d02 <HAL_I2C_Master_Transmit+0x1ea>
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	2201      	movs	r2, #1
 8003b6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f003 0301 	and.w	r3, r3, #1
 8003b7a:	2b01      	cmp	r3, #1
 8003b7c:	d007      	beq.n	8003b8e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	681a      	ldr	r2, [r3, #0]
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f042 0201 	orr.w	r2, r2, #1
 8003b8c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	681a      	ldr	r2, [r3, #0]
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003b9c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	2221      	movs	r2, #33	@ 0x21
 8003ba2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	2210      	movs	r2, #16
 8003baa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	687a      	ldr	r2, [r7, #4]
 8003bb8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	893a      	ldrh	r2, [r7, #8]
 8003bbe:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bc4:	b29a      	uxth	r2, r3
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	4a50      	ldr	r2, [pc, #320]	@ (8003d10 <HAL_I2C_Master_Transmit+0x1f8>)
 8003bce:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003bd0:	8979      	ldrh	r1, [r7, #10]
 8003bd2:	697b      	ldr	r3, [r7, #20]
 8003bd4:	6a3a      	ldr	r2, [r7, #32]
 8003bd6:	68f8      	ldr	r0, [r7, #12]
 8003bd8:	f000 face 	bl	8004178 <I2C_MasterRequestWrite>
 8003bdc:	4603      	mov	r3, r0
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d001      	beq.n	8003be6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003be2:	2301      	movs	r3, #1
 8003be4:	e08d      	b.n	8003d02 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003be6:	2300      	movs	r3, #0
 8003be8:	613b      	str	r3, [r7, #16]
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	695b      	ldr	r3, [r3, #20]
 8003bf0:	613b      	str	r3, [r7, #16]
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	699b      	ldr	r3, [r3, #24]
 8003bf8:	613b      	str	r3, [r7, #16]
 8003bfa:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003bfc:	e066      	b.n	8003ccc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003bfe:	697a      	ldr	r2, [r7, #20]
 8003c00:	6a39      	ldr	r1, [r7, #32]
 8003c02:	68f8      	ldr	r0, [r7, #12]
 8003c04:	f000 fd22 	bl	800464c <I2C_WaitOnTXEFlagUntilTimeout>
 8003c08:	4603      	mov	r3, r0
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d00d      	beq.n	8003c2a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c12:	2b04      	cmp	r3, #4
 8003c14:	d107      	bne.n	8003c26 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	681a      	ldr	r2, [r3, #0]
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c24:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003c26:	2301      	movs	r3, #1
 8003c28:	e06b      	b.n	8003d02 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c2e:	781a      	ldrb	r2, [r3, #0]
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c3a:	1c5a      	adds	r2, r3, #1
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c44:	b29b      	uxth	r3, r3
 8003c46:	3b01      	subs	r3, #1
 8003c48:	b29a      	uxth	r2, r3
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c52:	3b01      	subs	r3, #1
 8003c54:	b29a      	uxth	r2, r3
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	695b      	ldr	r3, [r3, #20]
 8003c60:	f003 0304 	and.w	r3, r3, #4
 8003c64:	2b04      	cmp	r3, #4
 8003c66:	d11b      	bne.n	8003ca0 <HAL_I2C_Master_Transmit+0x188>
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d017      	beq.n	8003ca0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c74:	781a      	ldrb	r2, [r3, #0]
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c80:	1c5a      	adds	r2, r3, #1
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c8a:	b29b      	uxth	r3, r3
 8003c8c:	3b01      	subs	r3, #1
 8003c8e:	b29a      	uxth	r2, r3
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c98:	3b01      	subs	r3, #1
 8003c9a:	b29a      	uxth	r2, r3
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ca0:	697a      	ldr	r2, [r7, #20]
 8003ca2:	6a39      	ldr	r1, [r7, #32]
 8003ca4:	68f8      	ldr	r0, [r7, #12]
 8003ca6:	f000 fd19 	bl	80046dc <I2C_WaitOnBTFFlagUntilTimeout>
 8003caa:	4603      	mov	r3, r0
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d00d      	beq.n	8003ccc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cb4:	2b04      	cmp	r3, #4
 8003cb6:	d107      	bne.n	8003cc8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	681a      	ldr	r2, [r3, #0]
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003cc6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003cc8:	2301      	movs	r3, #1
 8003cca:	e01a      	b.n	8003d02 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d194      	bne.n	8003bfe <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	681a      	ldr	r2, [r3, #0]
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ce2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	2220      	movs	r2, #32
 8003ce8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	2200      	movs	r2, #0
 8003cf0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	e000      	b.n	8003d02 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003d00:	2302      	movs	r3, #2
  }
}
 8003d02:	4618      	mov	r0, r3
 8003d04:	3718      	adds	r7, #24
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bd80      	pop	{r7, pc}
 8003d0a:	bf00      	nop
 8003d0c:	00100002 	.word	0x00100002
 8003d10:	ffff0000 	.word	0xffff0000

08003d14 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b08c      	sub	sp, #48	@ 0x30
 8003d18:	af02      	add	r7, sp, #8
 8003d1a:	60f8      	str	r0, [r7, #12]
 8003d1c:	607a      	str	r2, [r7, #4]
 8003d1e:	461a      	mov	r2, r3
 8003d20:	460b      	mov	r3, r1
 8003d22:	817b      	strh	r3, [r7, #10]
 8003d24:	4613      	mov	r3, r2
 8003d26:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003d28:	f7ff fa92 	bl	8003250 <HAL_GetTick>
 8003d2c:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d34:	b2db      	uxtb	r3, r3
 8003d36:	2b20      	cmp	r3, #32
 8003d38:	f040 8217 	bne.w	800416a <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003d3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d3e:	9300      	str	r3, [sp, #0]
 8003d40:	2319      	movs	r3, #25
 8003d42:	2201      	movs	r2, #1
 8003d44:	497c      	ldr	r1, [pc, #496]	@ (8003f38 <HAL_I2C_Master_Receive+0x224>)
 8003d46:	68f8      	ldr	r0, [r7, #12]
 8003d48:	f000 fb66 	bl	8004418 <I2C_WaitOnFlagUntilTimeout>
 8003d4c:	4603      	mov	r3, r0
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d001      	beq.n	8003d56 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8003d52:	2302      	movs	r3, #2
 8003d54:	e20a      	b.n	800416c <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003d5c:	2b01      	cmp	r3, #1
 8003d5e:	d101      	bne.n	8003d64 <HAL_I2C_Master_Receive+0x50>
 8003d60:	2302      	movs	r3, #2
 8003d62:	e203      	b.n	800416c <HAL_I2C_Master_Receive+0x458>
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	2201      	movs	r2, #1
 8003d68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f003 0301 	and.w	r3, r3, #1
 8003d76:	2b01      	cmp	r3, #1
 8003d78:	d007      	beq.n	8003d8a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	681a      	ldr	r2, [r3, #0]
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f042 0201 	orr.w	r2, r2, #1
 8003d88:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	681a      	ldr	r2, [r3, #0]
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003d98:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	2222      	movs	r2, #34	@ 0x22
 8003d9e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	2210      	movs	r2, #16
 8003da6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	2200      	movs	r2, #0
 8003dae:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	687a      	ldr	r2, [r7, #4]
 8003db4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	893a      	ldrh	r2, [r7, #8]
 8003dba:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003dc0:	b29a      	uxth	r2, r3
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	4a5c      	ldr	r2, [pc, #368]	@ (8003f3c <HAL_I2C_Master_Receive+0x228>)
 8003dca:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003dcc:	8979      	ldrh	r1, [r7, #10]
 8003dce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dd0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003dd2:	68f8      	ldr	r0, [r7, #12]
 8003dd4:	f000 fa52 	bl	800427c <I2C_MasterRequestRead>
 8003dd8:	4603      	mov	r3, r0
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d001      	beq.n	8003de2 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8003dde:	2301      	movs	r3, #1
 8003de0:	e1c4      	b.n	800416c <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d113      	bne.n	8003e12 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003dea:	2300      	movs	r3, #0
 8003dec:	623b      	str	r3, [r7, #32]
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	695b      	ldr	r3, [r3, #20]
 8003df4:	623b      	str	r3, [r7, #32]
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	699b      	ldr	r3, [r3, #24]
 8003dfc:	623b      	str	r3, [r7, #32]
 8003dfe:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	681a      	ldr	r2, [r3, #0]
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e0e:	601a      	str	r2, [r3, #0]
 8003e10:	e198      	b.n	8004144 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e16:	2b01      	cmp	r3, #1
 8003e18:	d11b      	bne.n	8003e52 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	681a      	ldr	r2, [r3, #0]
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e28:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	61fb      	str	r3, [r7, #28]
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	695b      	ldr	r3, [r3, #20]
 8003e34:	61fb      	str	r3, [r7, #28]
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	699b      	ldr	r3, [r3, #24]
 8003e3c:	61fb      	str	r3, [r7, #28]
 8003e3e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	681a      	ldr	r2, [r3, #0]
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e4e:	601a      	str	r2, [r3, #0]
 8003e50:	e178      	b.n	8004144 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e56:	2b02      	cmp	r3, #2
 8003e58:	d11b      	bne.n	8003e92 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	681a      	ldr	r2, [r3, #0]
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e68:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	681a      	ldr	r2, [r3, #0]
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003e78:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	61bb      	str	r3, [r7, #24]
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	695b      	ldr	r3, [r3, #20]
 8003e84:	61bb      	str	r3, [r7, #24]
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	699b      	ldr	r3, [r3, #24]
 8003e8c:	61bb      	str	r3, [r7, #24]
 8003e8e:	69bb      	ldr	r3, [r7, #24]
 8003e90:	e158      	b.n	8004144 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	681a      	ldr	r2, [r3, #0]
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003ea0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	617b      	str	r3, [r7, #20]
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	695b      	ldr	r3, [r3, #20]
 8003eac:	617b      	str	r3, [r7, #20]
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	699b      	ldr	r3, [r3, #24]
 8003eb4:	617b      	str	r3, [r7, #20]
 8003eb6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003eb8:	e144      	b.n	8004144 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ebe:	2b03      	cmp	r3, #3
 8003ec0:	f200 80f1 	bhi.w	80040a6 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ec8:	2b01      	cmp	r3, #1
 8003eca:	d123      	bne.n	8003f14 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ecc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ece:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003ed0:	68f8      	ldr	r0, [r7, #12]
 8003ed2:	f000 fc4b 	bl	800476c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003ed6:	4603      	mov	r3, r0
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d001      	beq.n	8003ee0 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8003edc:	2301      	movs	r3, #1
 8003ede:	e145      	b.n	800416c <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	691a      	ldr	r2, [r3, #16]
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eea:	b2d2      	uxtb	r2, r2
 8003eec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ef2:	1c5a      	adds	r2, r3, #1
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003efc:	3b01      	subs	r3, #1
 8003efe:	b29a      	uxth	r2, r3
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f08:	b29b      	uxth	r3, r3
 8003f0a:	3b01      	subs	r3, #1
 8003f0c:	b29a      	uxth	r2, r3
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003f12:	e117      	b.n	8004144 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f18:	2b02      	cmp	r3, #2
 8003f1a:	d14e      	bne.n	8003fba <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003f1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f1e:	9300      	str	r3, [sp, #0]
 8003f20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f22:	2200      	movs	r2, #0
 8003f24:	4906      	ldr	r1, [pc, #24]	@ (8003f40 <HAL_I2C_Master_Receive+0x22c>)
 8003f26:	68f8      	ldr	r0, [r7, #12]
 8003f28:	f000 fa76 	bl	8004418 <I2C_WaitOnFlagUntilTimeout>
 8003f2c:	4603      	mov	r3, r0
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d008      	beq.n	8003f44 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8003f32:	2301      	movs	r3, #1
 8003f34:	e11a      	b.n	800416c <HAL_I2C_Master_Receive+0x458>
 8003f36:	bf00      	nop
 8003f38:	00100002 	.word	0x00100002
 8003f3c:	ffff0000 	.word	0xffff0000
 8003f40:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	681a      	ldr	r2, [r3, #0]
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f52:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	691a      	ldr	r2, [r3, #16]
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f5e:	b2d2      	uxtb	r2, r2
 8003f60:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f66:	1c5a      	adds	r2, r3, #1
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f70:	3b01      	subs	r3, #1
 8003f72:	b29a      	uxth	r2, r3
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f7c:	b29b      	uxth	r3, r3
 8003f7e:	3b01      	subs	r3, #1
 8003f80:	b29a      	uxth	r2, r3
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	691a      	ldr	r2, [r3, #16]
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f90:	b2d2      	uxtb	r2, r2
 8003f92:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f98:	1c5a      	adds	r2, r3, #1
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fa2:	3b01      	subs	r3, #1
 8003fa4:	b29a      	uxth	r2, r3
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fae:	b29b      	uxth	r3, r3
 8003fb0:	3b01      	subs	r3, #1
 8003fb2:	b29a      	uxth	r2, r3
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003fb8:	e0c4      	b.n	8004144 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003fba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fbc:	9300      	str	r3, [sp, #0]
 8003fbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	496c      	ldr	r1, [pc, #432]	@ (8004174 <HAL_I2C_Master_Receive+0x460>)
 8003fc4:	68f8      	ldr	r0, [r7, #12]
 8003fc6:	f000 fa27 	bl	8004418 <I2C_WaitOnFlagUntilTimeout>
 8003fca:	4603      	mov	r3, r0
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d001      	beq.n	8003fd4 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	e0cb      	b.n	800416c <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	681a      	ldr	r2, [r3, #0]
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003fe2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	691a      	ldr	r2, [r3, #16]
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fee:	b2d2      	uxtb	r2, r2
 8003ff0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ff6:	1c5a      	adds	r2, r3, #1
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004000:	3b01      	subs	r3, #1
 8004002:	b29a      	uxth	r2, r3
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800400c:	b29b      	uxth	r3, r3
 800400e:	3b01      	subs	r3, #1
 8004010:	b29a      	uxth	r2, r3
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004016:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004018:	9300      	str	r3, [sp, #0]
 800401a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800401c:	2200      	movs	r2, #0
 800401e:	4955      	ldr	r1, [pc, #340]	@ (8004174 <HAL_I2C_Master_Receive+0x460>)
 8004020:	68f8      	ldr	r0, [r7, #12]
 8004022:	f000 f9f9 	bl	8004418 <I2C_WaitOnFlagUntilTimeout>
 8004026:	4603      	mov	r3, r0
 8004028:	2b00      	cmp	r3, #0
 800402a:	d001      	beq.n	8004030 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800402c:	2301      	movs	r3, #1
 800402e:	e09d      	b.n	800416c <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	681a      	ldr	r2, [r3, #0]
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800403e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	691a      	ldr	r2, [r3, #16]
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800404a:	b2d2      	uxtb	r2, r2
 800404c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004052:	1c5a      	adds	r2, r3, #1
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800405c:	3b01      	subs	r3, #1
 800405e:	b29a      	uxth	r2, r3
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004068:	b29b      	uxth	r3, r3
 800406a:	3b01      	subs	r3, #1
 800406c:	b29a      	uxth	r2, r3
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	691a      	ldr	r2, [r3, #16]
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800407c:	b2d2      	uxtb	r2, r2
 800407e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004084:	1c5a      	adds	r2, r3, #1
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800408e:	3b01      	subs	r3, #1
 8004090:	b29a      	uxth	r2, r3
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800409a:	b29b      	uxth	r3, r3
 800409c:	3b01      	subs	r3, #1
 800409e:	b29a      	uxth	r2, r3
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80040a4:	e04e      	b.n	8004144 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80040a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80040a8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80040aa:	68f8      	ldr	r0, [r7, #12]
 80040ac:	f000 fb5e 	bl	800476c <I2C_WaitOnRXNEFlagUntilTimeout>
 80040b0:	4603      	mov	r3, r0
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d001      	beq.n	80040ba <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80040b6:	2301      	movs	r3, #1
 80040b8:	e058      	b.n	800416c <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	691a      	ldr	r2, [r3, #16]
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040c4:	b2d2      	uxtb	r2, r2
 80040c6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040cc:	1c5a      	adds	r2, r3, #1
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040d6:	3b01      	subs	r3, #1
 80040d8:	b29a      	uxth	r2, r3
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040e2:	b29b      	uxth	r3, r3
 80040e4:	3b01      	subs	r3, #1
 80040e6:	b29a      	uxth	r2, r3
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	695b      	ldr	r3, [r3, #20]
 80040f2:	f003 0304 	and.w	r3, r3, #4
 80040f6:	2b04      	cmp	r3, #4
 80040f8:	d124      	bne.n	8004144 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040fe:	2b03      	cmp	r3, #3
 8004100:	d107      	bne.n	8004112 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	681a      	ldr	r2, [r3, #0]
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004110:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	691a      	ldr	r2, [r3, #16]
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800411c:	b2d2      	uxtb	r2, r2
 800411e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004124:	1c5a      	adds	r2, r3, #1
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800412e:	3b01      	subs	r3, #1
 8004130:	b29a      	uxth	r2, r3
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800413a:	b29b      	uxth	r3, r3
 800413c:	3b01      	subs	r3, #1
 800413e:	b29a      	uxth	r2, r3
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004148:	2b00      	cmp	r3, #0
 800414a:	f47f aeb6 	bne.w	8003eba <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	2220      	movs	r2, #32
 8004152:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	2200      	movs	r2, #0
 800415a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	2200      	movs	r2, #0
 8004162:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004166:	2300      	movs	r3, #0
 8004168:	e000      	b.n	800416c <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 800416a:	2302      	movs	r3, #2
  }
}
 800416c:	4618      	mov	r0, r3
 800416e:	3728      	adds	r7, #40	@ 0x28
 8004170:	46bd      	mov	sp, r7
 8004172:	bd80      	pop	{r7, pc}
 8004174:	00010004 	.word	0x00010004

08004178 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b088      	sub	sp, #32
 800417c:	af02      	add	r7, sp, #8
 800417e:	60f8      	str	r0, [r7, #12]
 8004180:	607a      	str	r2, [r7, #4]
 8004182:	603b      	str	r3, [r7, #0]
 8004184:	460b      	mov	r3, r1
 8004186:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800418c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800418e:	697b      	ldr	r3, [r7, #20]
 8004190:	2b08      	cmp	r3, #8
 8004192:	d006      	beq.n	80041a2 <I2C_MasterRequestWrite+0x2a>
 8004194:	697b      	ldr	r3, [r7, #20]
 8004196:	2b01      	cmp	r3, #1
 8004198:	d003      	beq.n	80041a2 <I2C_MasterRequestWrite+0x2a>
 800419a:	697b      	ldr	r3, [r7, #20]
 800419c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80041a0:	d108      	bne.n	80041b4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	681a      	ldr	r2, [r3, #0]
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80041b0:	601a      	str	r2, [r3, #0]
 80041b2:	e00b      	b.n	80041cc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041b8:	2b12      	cmp	r3, #18
 80041ba:	d107      	bne.n	80041cc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	681a      	ldr	r2, [r3, #0]
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80041ca:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	9300      	str	r3, [sp, #0]
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2200      	movs	r2, #0
 80041d4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80041d8:	68f8      	ldr	r0, [r7, #12]
 80041da:	f000 f91d 	bl	8004418 <I2C_WaitOnFlagUntilTimeout>
 80041de:	4603      	mov	r3, r0
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d00d      	beq.n	8004200 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041ee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80041f2:	d103      	bne.n	80041fc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80041fa:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80041fc:	2303      	movs	r3, #3
 80041fe:	e035      	b.n	800426c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	691b      	ldr	r3, [r3, #16]
 8004204:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004208:	d108      	bne.n	800421c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800420a:	897b      	ldrh	r3, [r7, #10]
 800420c:	b2db      	uxtb	r3, r3
 800420e:	461a      	mov	r2, r3
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004218:	611a      	str	r2, [r3, #16]
 800421a:	e01b      	b.n	8004254 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800421c:	897b      	ldrh	r3, [r7, #10]
 800421e:	11db      	asrs	r3, r3, #7
 8004220:	b2db      	uxtb	r3, r3
 8004222:	f003 0306 	and.w	r3, r3, #6
 8004226:	b2db      	uxtb	r3, r3
 8004228:	f063 030f 	orn	r3, r3, #15
 800422c:	b2da      	uxtb	r2, r3
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	687a      	ldr	r2, [r7, #4]
 8004238:	490e      	ldr	r1, [pc, #56]	@ (8004274 <I2C_MasterRequestWrite+0xfc>)
 800423a:	68f8      	ldr	r0, [r7, #12]
 800423c:	f000 f966 	bl	800450c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004240:	4603      	mov	r3, r0
 8004242:	2b00      	cmp	r3, #0
 8004244:	d001      	beq.n	800424a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004246:	2301      	movs	r3, #1
 8004248:	e010      	b.n	800426c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800424a:	897b      	ldrh	r3, [r7, #10]
 800424c:	b2da      	uxtb	r2, r3
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	687a      	ldr	r2, [r7, #4]
 8004258:	4907      	ldr	r1, [pc, #28]	@ (8004278 <I2C_MasterRequestWrite+0x100>)
 800425a:	68f8      	ldr	r0, [r7, #12]
 800425c:	f000 f956 	bl	800450c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004260:	4603      	mov	r3, r0
 8004262:	2b00      	cmp	r3, #0
 8004264:	d001      	beq.n	800426a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004266:	2301      	movs	r3, #1
 8004268:	e000      	b.n	800426c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800426a:	2300      	movs	r3, #0
}
 800426c:	4618      	mov	r0, r3
 800426e:	3718      	adds	r7, #24
 8004270:	46bd      	mov	sp, r7
 8004272:	bd80      	pop	{r7, pc}
 8004274:	00010008 	.word	0x00010008
 8004278:	00010002 	.word	0x00010002

0800427c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b088      	sub	sp, #32
 8004280:	af02      	add	r7, sp, #8
 8004282:	60f8      	str	r0, [r7, #12]
 8004284:	607a      	str	r2, [r7, #4]
 8004286:	603b      	str	r3, [r7, #0]
 8004288:	460b      	mov	r3, r1
 800428a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004290:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	681a      	ldr	r2, [r3, #0]
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80042a0:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80042a2:	697b      	ldr	r3, [r7, #20]
 80042a4:	2b08      	cmp	r3, #8
 80042a6:	d006      	beq.n	80042b6 <I2C_MasterRequestRead+0x3a>
 80042a8:	697b      	ldr	r3, [r7, #20]
 80042aa:	2b01      	cmp	r3, #1
 80042ac:	d003      	beq.n	80042b6 <I2C_MasterRequestRead+0x3a>
 80042ae:	697b      	ldr	r3, [r7, #20]
 80042b0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80042b4:	d108      	bne.n	80042c8 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	681a      	ldr	r2, [r3, #0]
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80042c4:	601a      	str	r2, [r3, #0]
 80042c6:	e00b      	b.n	80042e0 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042cc:	2b11      	cmp	r3, #17
 80042ce:	d107      	bne.n	80042e0 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	681a      	ldr	r2, [r3, #0]
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80042de:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	9300      	str	r3, [sp, #0]
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2200      	movs	r2, #0
 80042e8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80042ec:	68f8      	ldr	r0, [r7, #12]
 80042ee:	f000 f893 	bl	8004418 <I2C_WaitOnFlagUntilTimeout>
 80042f2:	4603      	mov	r3, r0
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d00d      	beq.n	8004314 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004302:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004306:	d103      	bne.n	8004310 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800430e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004310:	2303      	movs	r3, #3
 8004312:	e079      	b.n	8004408 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	691b      	ldr	r3, [r3, #16]
 8004318:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800431c:	d108      	bne.n	8004330 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800431e:	897b      	ldrh	r3, [r7, #10]
 8004320:	b2db      	uxtb	r3, r3
 8004322:	f043 0301 	orr.w	r3, r3, #1
 8004326:	b2da      	uxtb	r2, r3
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	611a      	str	r2, [r3, #16]
 800432e:	e05f      	b.n	80043f0 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004330:	897b      	ldrh	r3, [r7, #10]
 8004332:	11db      	asrs	r3, r3, #7
 8004334:	b2db      	uxtb	r3, r3
 8004336:	f003 0306 	and.w	r3, r3, #6
 800433a:	b2db      	uxtb	r3, r3
 800433c:	f063 030f 	orn	r3, r3, #15
 8004340:	b2da      	uxtb	r2, r3
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	687a      	ldr	r2, [r7, #4]
 800434c:	4930      	ldr	r1, [pc, #192]	@ (8004410 <I2C_MasterRequestRead+0x194>)
 800434e:	68f8      	ldr	r0, [r7, #12]
 8004350:	f000 f8dc 	bl	800450c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004354:	4603      	mov	r3, r0
 8004356:	2b00      	cmp	r3, #0
 8004358:	d001      	beq.n	800435e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800435a:	2301      	movs	r3, #1
 800435c:	e054      	b.n	8004408 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800435e:	897b      	ldrh	r3, [r7, #10]
 8004360:	b2da      	uxtb	r2, r3
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	687a      	ldr	r2, [r7, #4]
 800436c:	4929      	ldr	r1, [pc, #164]	@ (8004414 <I2C_MasterRequestRead+0x198>)
 800436e:	68f8      	ldr	r0, [r7, #12]
 8004370:	f000 f8cc 	bl	800450c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004374:	4603      	mov	r3, r0
 8004376:	2b00      	cmp	r3, #0
 8004378:	d001      	beq.n	800437e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800437a:	2301      	movs	r3, #1
 800437c:	e044      	b.n	8004408 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800437e:	2300      	movs	r3, #0
 8004380:	613b      	str	r3, [r7, #16]
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	695b      	ldr	r3, [r3, #20]
 8004388:	613b      	str	r3, [r7, #16]
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	699b      	ldr	r3, [r3, #24]
 8004390:	613b      	str	r3, [r7, #16]
 8004392:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	681a      	ldr	r2, [r3, #0]
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80043a2:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	9300      	str	r3, [sp, #0]
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2200      	movs	r2, #0
 80043ac:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80043b0:	68f8      	ldr	r0, [r7, #12]
 80043b2:	f000 f831 	bl	8004418 <I2C_WaitOnFlagUntilTimeout>
 80043b6:	4603      	mov	r3, r0
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d00d      	beq.n	80043d8 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043c6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80043ca:	d103      	bne.n	80043d4 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80043d2:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 80043d4:	2303      	movs	r3, #3
 80043d6:	e017      	b.n	8004408 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80043d8:	897b      	ldrh	r3, [r7, #10]
 80043da:	11db      	asrs	r3, r3, #7
 80043dc:	b2db      	uxtb	r3, r3
 80043de:	f003 0306 	and.w	r3, r3, #6
 80043e2:	b2db      	uxtb	r3, r3
 80043e4:	f063 030e 	orn	r3, r3, #14
 80043e8:	b2da      	uxtb	r2, r3
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	687a      	ldr	r2, [r7, #4]
 80043f4:	4907      	ldr	r1, [pc, #28]	@ (8004414 <I2C_MasterRequestRead+0x198>)
 80043f6:	68f8      	ldr	r0, [r7, #12]
 80043f8:	f000 f888 	bl	800450c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80043fc:	4603      	mov	r3, r0
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d001      	beq.n	8004406 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8004402:	2301      	movs	r3, #1
 8004404:	e000      	b.n	8004408 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8004406:	2300      	movs	r3, #0
}
 8004408:	4618      	mov	r0, r3
 800440a:	3718      	adds	r7, #24
 800440c:	46bd      	mov	sp, r7
 800440e:	bd80      	pop	{r7, pc}
 8004410:	00010008 	.word	0x00010008
 8004414:	00010002 	.word	0x00010002

08004418 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b084      	sub	sp, #16
 800441c:	af00      	add	r7, sp, #0
 800441e:	60f8      	str	r0, [r7, #12]
 8004420:	60b9      	str	r1, [r7, #8]
 8004422:	603b      	str	r3, [r7, #0]
 8004424:	4613      	mov	r3, r2
 8004426:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004428:	e048      	b.n	80044bc <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004430:	d044      	beq.n	80044bc <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004432:	f7fe ff0d 	bl	8003250 <HAL_GetTick>
 8004436:	4602      	mov	r2, r0
 8004438:	69bb      	ldr	r3, [r7, #24]
 800443a:	1ad3      	subs	r3, r2, r3
 800443c:	683a      	ldr	r2, [r7, #0]
 800443e:	429a      	cmp	r2, r3
 8004440:	d302      	bcc.n	8004448 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d139      	bne.n	80044bc <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004448:	68bb      	ldr	r3, [r7, #8]
 800444a:	0c1b      	lsrs	r3, r3, #16
 800444c:	b2db      	uxtb	r3, r3
 800444e:	2b01      	cmp	r3, #1
 8004450:	d10d      	bne.n	800446e <I2C_WaitOnFlagUntilTimeout+0x56>
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	695b      	ldr	r3, [r3, #20]
 8004458:	43da      	mvns	r2, r3
 800445a:	68bb      	ldr	r3, [r7, #8]
 800445c:	4013      	ands	r3, r2
 800445e:	b29b      	uxth	r3, r3
 8004460:	2b00      	cmp	r3, #0
 8004462:	bf0c      	ite	eq
 8004464:	2301      	moveq	r3, #1
 8004466:	2300      	movne	r3, #0
 8004468:	b2db      	uxtb	r3, r3
 800446a:	461a      	mov	r2, r3
 800446c:	e00c      	b.n	8004488 <I2C_WaitOnFlagUntilTimeout+0x70>
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	699b      	ldr	r3, [r3, #24]
 8004474:	43da      	mvns	r2, r3
 8004476:	68bb      	ldr	r3, [r7, #8]
 8004478:	4013      	ands	r3, r2
 800447a:	b29b      	uxth	r3, r3
 800447c:	2b00      	cmp	r3, #0
 800447e:	bf0c      	ite	eq
 8004480:	2301      	moveq	r3, #1
 8004482:	2300      	movne	r3, #0
 8004484:	b2db      	uxtb	r3, r3
 8004486:	461a      	mov	r2, r3
 8004488:	79fb      	ldrb	r3, [r7, #7]
 800448a:	429a      	cmp	r2, r3
 800448c:	d116      	bne.n	80044bc <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	2200      	movs	r2, #0
 8004492:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	2220      	movs	r2, #32
 8004498:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	2200      	movs	r2, #0
 80044a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044a8:	f043 0220 	orr.w	r2, r3, #32
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	2200      	movs	r2, #0
 80044b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80044b8:	2301      	movs	r3, #1
 80044ba:	e023      	b.n	8004504 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80044bc:	68bb      	ldr	r3, [r7, #8]
 80044be:	0c1b      	lsrs	r3, r3, #16
 80044c0:	b2db      	uxtb	r3, r3
 80044c2:	2b01      	cmp	r3, #1
 80044c4:	d10d      	bne.n	80044e2 <I2C_WaitOnFlagUntilTimeout+0xca>
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	695b      	ldr	r3, [r3, #20]
 80044cc:	43da      	mvns	r2, r3
 80044ce:	68bb      	ldr	r3, [r7, #8]
 80044d0:	4013      	ands	r3, r2
 80044d2:	b29b      	uxth	r3, r3
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	bf0c      	ite	eq
 80044d8:	2301      	moveq	r3, #1
 80044da:	2300      	movne	r3, #0
 80044dc:	b2db      	uxtb	r3, r3
 80044de:	461a      	mov	r2, r3
 80044e0:	e00c      	b.n	80044fc <I2C_WaitOnFlagUntilTimeout+0xe4>
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	699b      	ldr	r3, [r3, #24]
 80044e8:	43da      	mvns	r2, r3
 80044ea:	68bb      	ldr	r3, [r7, #8]
 80044ec:	4013      	ands	r3, r2
 80044ee:	b29b      	uxth	r3, r3
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	bf0c      	ite	eq
 80044f4:	2301      	moveq	r3, #1
 80044f6:	2300      	movne	r3, #0
 80044f8:	b2db      	uxtb	r3, r3
 80044fa:	461a      	mov	r2, r3
 80044fc:	79fb      	ldrb	r3, [r7, #7]
 80044fe:	429a      	cmp	r2, r3
 8004500:	d093      	beq.n	800442a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004502:	2300      	movs	r3, #0
}
 8004504:	4618      	mov	r0, r3
 8004506:	3710      	adds	r7, #16
 8004508:	46bd      	mov	sp, r7
 800450a:	bd80      	pop	{r7, pc}

0800450c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b084      	sub	sp, #16
 8004510:	af00      	add	r7, sp, #0
 8004512:	60f8      	str	r0, [r7, #12]
 8004514:	60b9      	str	r1, [r7, #8]
 8004516:	607a      	str	r2, [r7, #4]
 8004518:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800451a:	e071      	b.n	8004600 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	695b      	ldr	r3, [r3, #20]
 8004522:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004526:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800452a:	d123      	bne.n	8004574 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	681a      	ldr	r2, [r3, #0]
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800453a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004544:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	2200      	movs	r2, #0
 800454a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	2220      	movs	r2, #32
 8004550:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	2200      	movs	r2, #0
 8004558:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004560:	f043 0204 	orr.w	r2, r3, #4
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	2200      	movs	r2, #0
 800456c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004570:	2301      	movs	r3, #1
 8004572:	e067      	b.n	8004644 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	f1b3 3fff 	cmp.w	r3, #4294967295
 800457a:	d041      	beq.n	8004600 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800457c:	f7fe fe68 	bl	8003250 <HAL_GetTick>
 8004580:	4602      	mov	r2, r0
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	1ad3      	subs	r3, r2, r3
 8004586:	687a      	ldr	r2, [r7, #4]
 8004588:	429a      	cmp	r2, r3
 800458a:	d302      	bcc.n	8004592 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d136      	bne.n	8004600 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004592:	68bb      	ldr	r3, [r7, #8]
 8004594:	0c1b      	lsrs	r3, r3, #16
 8004596:	b2db      	uxtb	r3, r3
 8004598:	2b01      	cmp	r3, #1
 800459a:	d10c      	bne.n	80045b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	695b      	ldr	r3, [r3, #20]
 80045a2:	43da      	mvns	r2, r3
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	4013      	ands	r3, r2
 80045a8:	b29b      	uxth	r3, r3
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	bf14      	ite	ne
 80045ae:	2301      	movne	r3, #1
 80045b0:	2300      	moveq	r3, #0
 80045b2:	b2db      	uxtb	r3, r3
 80045b4:	e00b      	b.n	80045ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	699b      	ldr	r3, [r3, #24]
 80045bc:	43da      	mvns	r2, r3
 80045be:	68bb      	ldr	r3, [r7, #8]
 80045c0:	4013      	ands	r3, r2
 80045c2:	b29b      	uxth	r3, r3
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	bf14      	ite	ne
 80045c8:	2301      	movne	r3, #1
 80045ca:	2300      	moveq	r3, #0
 80045cc:	b2db      	uxtb	r3, r3
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d016      	beq.n	8004600 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	2200      	movs	r2, #0
 80045d6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	2220      	movs	r2, #32
 80045dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	2200      	movs	r2, #0
 80045e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045ec:	f043 0220 	orr.w	r2, r3, #32
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	2200      	movs	r2, #0
 80045f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80045fc:	2301      	movs	r3, #1
 80045fe:	e021      	b.n	8004644 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004600:	68bb      	ldr	r3, [r7, #8]
 8004602:	0c1b      	lsrs	r3, r3, #16
 8004604:	b2db      	uxtb	r3, r3
 8004606:	2b01      	cmp	r3, #1
 8004608:	d10c      	bne.n	8004624 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	695b      	ldr	r3, [r3, #20]
 8004610:	43da      	mvns	r2, r3
 8004612:	68bb      	ldr	r3, [r7, #8]
 8004614:	4013      	ands	r3, r2
 8004616:	b29b      	uxth	r3, r3
 8004618:	2b00      	cmp	r3, #0
 800461a:	bf14      	ite	ne
 800461c:	2301      	movne	r3, #1
 800461e:	2300      	moveq	r3, #0
 8004620:	b2db      	uxtb	r3, r3
 8004622:	e00b      	b.n	800463c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	699b      	ldr	r3, [r3, #24]
 800462a:	43da      	mvns	r2, r3
 800462c:	68bb      	ldr	r3, [r7, #8]
 800462e:	4013      	ands	r3, r2
 8004630:	b29b      	uxth	r3, r3
 8004632:	2b00      	cmp	r3, #0
 8004634:	bf14      	ite	ne
 8004636:	2301      	movne	r3, #1
 8004638:	2300      	moveq	r3, #0
 800463a:	b2db      	uxtb	r3, r3
 800463c:	2b00      	cmp	r3, #0
 800463e:	f47f af6d 	bne.w	800451c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004642:	2300      	movs	r3, #0
}
 8004644:	4618      	mov	r0, r3
 8004646:	3710      	adds	r7, #16
 8004648:	46bd      	mov	sp, r7
 800464a:	bd80      	pop	{r7, pc}

0800464c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b084      	sub	sp, #16
 8004650:	af00      	add	r7, sp, #0
 8004652:	60f8      	str	r0, [r7, #12]
 8004654:	60b9      	str	r1, [r7, #8]
 8004656:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004658:	e034      	b.n	80046c4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800465a:	68f8      	ldr	r0, [r7, #12]
 800465c:	f000 f8e3 	bl	8004826 <I2C_IsAcknowledgeFailed>
 8004660:	4603      	mov	r3, r0
 8004662:	2b00      	cmp	r3, #0
 8004664:	d001      	beq.n	800466a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004666:	2301      	movs	r3, #1
 8004668:	e034      	b.n	80046d4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800466a:	68bb      	ldr	r3, [r7, #8]
 800466c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004670:	d028      	beq.n	80046c4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004672:	f7fe fded 	bl	8003250 <HAL_GetTick>
 8004676:	4602      	mov	r2, r0
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	1ad3      	subs	r3, r2, r3
 800467c:	68ba      	ldr	r2, [r7, #8]
 800467e:	429a      	cmp	r2, r3
 8004680:	d302      	bcc.n	8004688 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004682:	68bb      	ldr	r3, [r7, #8]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d11d      	bne.n	80046c4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	695b      	ldr	r3, [r3, #20]
 800468e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004692:	2b80      	cmp	r3, #128	@ 0x80
 8004694:	d016      	beq.n	80046c4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	2200      	movs	r2, #0
 800469a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	2220      	movs	r2, #32
 80046a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	2200      	movs	r2, #0
 80046a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046b0:	f043 0220 	orr.w	r2, r3, #32
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	2200      	movs	r2, #0
 80046bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80046c0:	2301      	movs	r3, #1
 80046c2:	e007      	b.n	80046d4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	695b      	ldr	r3, [r3, #20]
 80046ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046ce:	2b80      	cmp	r3, #128	@ 0x80
 80046d0:	d1c3      	bne.n	800465a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80046d2:	2300      	movs	r3, #0
}
 80046d4:	4618      	mov	r0, r3
 80046d6:	3710      	adds	r7, #16
 80046d8:	46bd      	mov	sp, r7
 80046da:	bd80      	pop	{r7, pc}

080046dc <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b084      	sub	sp, #16
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	60f8      	str	r0, [r7, #12]
 80046e4:	60b9      	str	r1, [r7, #8]
 80046e6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80046e8:	e034      	b.n	8004754 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80046ea:	68f8      	ldr	r0, [r7, #12]
 80046ec:	f000 f89b 	bl	8004826 <I2C_IsAcknowledgeFailed>
 80046f0:	4603      	mov	r3, r0
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d001      	beq.n	80046fa <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80046f6:	2301      	movs	r3, #1
 80046f8:	e034      	b.n	8004764 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046fa:	68bb      	ldr	r3, [r7, #8]
 80046fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004700:	d028      	beq.n	8004754 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004702:	f7fe fda5 	bl	8003250 <HAL_GetTick>
 8004706:	4602      	mov	r2, r0
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	1ad3      	subs	r3, r2, r3
 800470c:	68ba      	ldr	r2, [r7, #8]
 800470e:	429a      	cmp	r2, r3
 8004710:	d302      	bcc.n	8004718 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004712:	68bb      	ldr	r3, [r7, #8]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d11d      	bne.n	8004754 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	695b      	ldr	r3, [r3, #20]
 800471e:	f003 0304 	and.w	r3, r3, #4
 8004722:	2b04      	cmp	r3, #4
 8004724:	d016      	beq.n	8004754 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	2200      	movs	r2, #0
 800472a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	2220      	movs	r2, #32
 8004730:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	2200      	movs	r2, #0
 8004738:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004740:	f043 0220 	orr.w	r2, r3, #32
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	2200      	movs	r2, #0
 800474c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004750:	2301      	movs	r3, #1
 8004752:	e007      	b.n	8004764 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	695b      	ldr	r3, [r3, #20]
 800475a:	f003 0304 	and.w	r3, r3, #4
 800475e:	2b04      	cmp	r3, #4
 8004760:	d1c3      	bne.n	80046ea <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004762:	2300      	movs	r3, #0
}
 8004764:	4618      	mov	r0, r3
 8004766:	3710      	adds	r7, #16
 8004768:	46bd      	mov	sp, r7
 800476a:	bd80      	pop	{r7, pc}

0800476c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b084      	sub	sp, #16
 8004770:	af00      	add	r7, sp, #0
 8004772:	60f8      	str	r0, [r7, #12]
 8004774:	60b9      	str	r1, [r7, #8]
 8004776:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004778:	e049      	b.n	800480e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	695b      	ldr	r3, [r3, #20]
 8004780:	f003 0310 	and.w	r3, r3, #16
 8004784:	2b10      	cmp	r3, #16
 8004786:	d119      	bne.n	80047bc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f06f 0210 	mvn.w	r2, #16
 8004790:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	2200      	movs	r2, #0
 8004796:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	2220      	movs	r2, #32
 800479c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	2200      	movs	r2, #0
 80047a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	2200      	movs	r2, #0
 80047b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80047b8:	2301      	movs	r3, #1
 80047ba:	e030      	b.n	800481e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047bc:	f7fe fd48 	bl	8003250 <HAL_GetTick>
 80047c0:	4602      	mov	r2, r0
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	1ad3      	subs	r3, r2, r3
 80047c6:	68ba      	ldr	r2, [r7, #8]
 80047c8:	429a      	cmp	r2, r3
 80047ca:	d302      	bcc.n	80047d2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80047cc:	68bb      	ldr	r3, [r7, #8]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d11d      	bne.n	800480e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	695b      	ldr	r3, [r3, #20]
 80047d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047dc:	2b40      	cmp	r3, #64	@ 0x40
 80047de:	d016      	beq.n	800480e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	2200      	movs	r2, #0
 80047e4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	2220      	movs	r2, #32
 80047ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	2200      	movs	r2, #0
 80047f2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047fa:	f043 0220 	orr.w	r2, r3, #32
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	2200      	movs	r2, #0
 8004806:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800480a:	2301      	movs	r3, #1
 800480c:	e007      	b.n	800481e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	695b      	ldr	r3, [r3, #20]
 8004814:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004818:	2b40      	cmp	r3, #64	@ 0x40
 800481a:	d1ae      	bne.n	800477a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800481c:	2300      	movs	r3, #0
}
 800481e:	4618      	mov	r0, r3
 8004820:	3710      	adds	r7, #16
 8004822:	46bd      	mov	sp, r7
 8004824:	bd80      	pop	{r7, pc}

08004826 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004826:	b480      	push	{r7}
 8004828:	b083      	sub	sp, #12
 800482a:	af00      	add	r7, sp, #0
 800482c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	695b      	ldr	r3, [r3, #20]
 8004834:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004838:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800483c:	d11b      	bne.n	8004876 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004846:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2200      	movs	r2, #0
 800484c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2220      	movs	r2, #32
 8004852:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2200      	movs	r2, #0
 800485a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004862:	f043 0204 	orr.w	r2, r3, #4
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2200      	movs	r2, #0
 800486e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004872:	2301      	movs	r3, #1
 8004874:	e000      	b.n	8004878 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004876:	2300      	movs	r3, #0
}
 8004878:	4618      	mov	r0, r3
 800487a:	370c      	adds	r7, #12
 800487c:	46bd      	mov	sp, r7
 800487e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004882:	4770      	bx	lr

08004884 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004884:	b580      	push	{r7, lr}
 8004886:	b084      	sub	sp, #16
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
 800488c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2b00      	cmp	r3, #0
 8004892:	d101      	bne.n	8004898 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004894:	2301      	movs	r3, #1
 8004896:	e0cc      	b.n	8004a32 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004898:	4b68      	ldr	r3, [pc, #416]	@ (8004a3c <HAL_RCC_ClockConfig+0x1b8>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f003 030f 	and.w	r3, r3, #15
 80048a0:	683a      	ldr	r2, [r7, #0]
 80048a2:	429a      	cmp	r2, r3
 80048a4:	d90c      	bls.n	80048c0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048a6:	4b65      	ldr	r3, [pc, #404]	@ (8004a3c <HAL_RCC_ClockConfig+0x1b8>)
 80048a8:	683a      	ldr	r2, [r7, #0]
 80048aa:	b2d2      	uxtb	r2, r2
 80048ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80048ae:	4b63      	ldr	r3, [pc, #396]	@ (8004a3c <HAL_RCC_ClockConfig+0x1b8>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f003 030f 	and.w	r3, r3, #15
 80048b6:	683a      	ldr	r2, [r7, #0]
 80048b8:	429a      	cmp	r2, r3
 80048ba:	d001      	beq.n	80048c0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80048bc:	2301      	movs	r3, #1
 80048be:	e0b8      	b.n	8004a32 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f003 0302 	and.w	r3, r3, #2
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d020      	beq.n	800490e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f003 0304 	and.w	r3, r3, #4
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d005      	beq.n	80048e4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80048d8:	4b59      	ldr	r3, [pc, #356]	@ (8004a40 <HAL_RCC_ClockConfig+0x1bc>)
 80048da:	689b      	ldr	r3, [r3, #8]
 80048dc:	4a58      	ldr	r2, [pc, #352]	@ (8004a40 <HAL_RCC_ClockConfig+0x1bc>)
 80048de:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80048e2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f003 0308 	and.w	r3, r3, #8
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d005      	beq.n	80048fc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80048f0:	4b53      	ldr	r3, [pc, #332]	@ (8004a40 <HAL_RCC_ClockConfig+0x1bc>)
 80048f2:	689b      	ldr	r3, [r3, #8]
 80048f4:	4a52      	ldr	r2, [pc, #328]	@ (8004a40 <HAL_RCC_ClockConfig+0x1bc>)
 80048f6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80048fa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80048fc:	4b50      	ldr	r3, [pc, #320]	@ (8004a40 <HAL_RCC_ClockConfig+0x1bc>)
 80048fe:	689b      	ldr	r3, [r3, #8]
 8004900:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	689b      	ldr	r3, [r3, #8]
 8004908:	494d      	ldr	r1, [pc, #308]	@ (8004a40 <HAL_RCC_ClockConfig+0x1bc>)
 800490a:	4313      	orrs	r3, r2
 800490c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f003 0301 	and.w	r3, r3, #1
 8004916:	2b00      	cmp	r3, #0
 8004918:	d044      	beq.n	80049a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	685b      	ldr	r3, [r3, #4]
 800491e:	2b01      	cmp	r3, #1
 8004920:	d107      	bne.n	8004932 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004922:	4b47      	ldr	r3, [pc, #284]	@ (8004a40 <HAL_RCC_ClockConfig+0x1bc>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800492a:	2b00      	cmp	r3, #0
 800492c:	d119      	bne.n	8004962 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800492e:	2301      	movs	r3, #1
 8004930:	e07f      	b.n	8004a32 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	685b      	ldr	r3, [r3, #4]
 8004936:	2b02      	cmp	r3, #2
 8004938:	d003      	beq.n	8004942 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800493e:	2b03      	cmp	r3, #3
 8004940:	d107      	bne.n	8004952 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004942:	4b3f      	ldr	r3, [pc, #252]	@ (8004a40 <HAL_RCC_ClockConfig+0x1bc>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800494a:	2b00      	cmp	r3, #0
 800494c:	d109      	bne.n	8004962 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800494e:	2301      	movs	r3, #1
 8004950:	e06f      	b.n	8004a32 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004952:	4b3b      	ldr	r3, [pc, #236]	@ (8004a40 <HAL_RCC_ClockConfig+0x1bc>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f003 0302 	and.w	r3, r3, #2
 800495a:	2b00      	cmp	r3, #0
 800495c:	d101      	bne.n	8004962 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800495e:	2301      	movs	r3, #1
 8004960:	e067      	b.n	8004a32 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004962:	4b37      	ldr	r3, [pc, #220]	@ (8004a40 <HAL_RCC_ClockConfig+0x1bc>)
 8004964:	689b      	ldr	r3, [r3, #8]
 8004966:	f023 0203 	bic.w	r2, r3, #3
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	685b      	ldr	r3, [r3, #4]
 800496e:	4934      	ldr	r1, [pc, #208]	@ (8004a40 <HAL_RCC_ClockConfig+0x1bc>)
 8004970:	4313      	orrs	r3, r2
 8004972:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004974:	f7fe fc6c 	bl	8003250 <HAL_GetTick>
 8004978:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800497a:	e00a      	b.n	8004992 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800497c:	f7fe fc68 	bl	8003250 <HAL_GetTick>
 8004980:	4602      	mov	r2, r0
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	1ad3      	subs	r3, r2, r3
 8004986:	f241 3288 	movw	r2, #5000	@ 0x1388
 800498a:	4293      	cmp	r3, r2
 800498c:	d901      	bls.n	8004992 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800498e:	2303      	movs	r3, #3
 8004990:	e04f      	b.n	8004a32 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004992:	4b2b      	ldr	r3, [pc, #172]	@ (8004a40 <HAL_RCC_ClockConfig+0x1bc>)
 8004994:	689b      	ldr	r3, [r3, #8]
 8004996:	f003 020c 	and.w	r2, r3, #12
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	685b      	ldr	r3, [r3, #4]
 800499e:	009b      	lsls	r3, r3, #2
 80049a0:	429a      	cmp	r2, r3
 80049a2:	d1eb      	bne.n	800497c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80049a4:	4b25      	ldr	r3, [pc, #148]	@ (8004a3c <HAL_RCC_ClockConfig+0x1b8>)
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f003 030f 	and.w	r3, r3, #15
 80049ac:	683a      	ldr	r2, [r7, #0]
 80049ae:	429a      	cmp	r2, r3
 80049b0:	d20c      	bcs.n	80049cc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049b2:	4b22      	ldr	r3, [pc, #136]	@ (8004a3c <HAL_RCC_ClockConfig+0x1b8>)
 80049b4:	683a      	ldr	r2, [r7, #0]
 80049b6:	b2d2      	uxtb	r2, r2
 80049b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80049ba:	4b20      	ldr	r3, [pc, #128]	@ (8004a3c <HAL_RCC_ClockConfig+0x1b8>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f003 030f 	and.w	r3, r3, #15
 80049c2:	683a      	ldr	r2, [r7, #0]
 80049c4:	429a      	cmp	r2, r3
 80049c6:	d001      	beq.n	80049cc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80049c8:	2301      	movs	r3, #1
 80049ca:	e032      	b.n	8004a32 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f003 0304 	and.w	r3, r3, #4
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d008      	beq.n	80049ea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80049d8:	4b19      	ldr	r3, [pc, #100]	@ (8004a40 <HAL_RCC_ClockConfig+0x1bc>)
 80049da:	689b      	ldr	r3, [r3, #8]
 80049dc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	68db      	ldr	r3, [r3, #12]
 80049e4:	4916      	ldr	r1, [pc, #88]	@ (8004a40 <HAL_RCC_ClockConfig+0x1bc>)
 80049e6:	4313      	orrs	r3, r2
 80049e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f003 0308 	and.w	r3, r3, #8
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d009      	beq.n	8004a0a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80049f6:	4b12      	ldr	r3, [pc, #72]	@ (8004a40 <HAL_RCC_ClockConfig+0x1bc>)
 80049f8:	689b      	ldr	r3, [r3, #8]
 80049fa:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	691b      	ldr	r3, [r3, #16]
 8004a02:	00db      	lsls	r3, r3, #3
 8004a04:	490e      	ldr	r1, [pc, #56]	@ (8004a40 <HAL_RCC_ClockConfig+0x1bc>)
 8004a06:	4313      	orrs	r3, r2
 8004a08:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004a0a:	f000 f855 	bl	8004ab8 <HAL_RCC_GetSysClockFreq>
 8004a0e:	4602      	mov	r2, r0
 8004a10:	4b0b      	ldr	r3, [pc, #44]	@ (8004a40 <HAL_RCC_ClockConfig+0x1bc>)
 8004a12:	689b      	ldr	r3, [r3, #8]
 8004a14:	091b      	lsrs	r3, r3, #4
 8004a16:	f003 030f 	and.w	r3, r3, #15
 8004a1a:	490a      	ldr	r1, [pc, #40]	@ (8004a44 <HAL_RCC_ClockConfig+0x1c0>)
 8004a1c:	5ccb      	ldrb	r3, [r1, r3]
 8004a1e:	fa22 f303 	lsr.w	r3, r2, r3
 8004a22:	4a09      	ldr	r2, [pc, #36]	@ (8004a48 <HAL_RCC_ClockConfig+0x1c4>)
 8004a24:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004a26:	4b09      	ldr	r3, [pc, #36]	@ (8004a4c <HAL_RCC_ClockConfig+0x1c8>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	f7fe fbcc 	bl	80031c8 <HAL_InitTick>

  return HAL_OK;
 8004a30:	2300      	movs	r3, #0
}
 8004a32:	4618      	mov	r0, r3
 8004a34:	3710      	adds	r7, #16
 8004a36:	46bd      	mov	sp, r7
 8004a38:	bd80      	pop	{r7, pc}
 8004a3a:	bf00      	nop
 8004a3c:	40023c00 	.word	0x40023c00
 8004a40:	40023800 	.word	0x40023800
 8004a44:	0800c664 	.word	0x0800c664
 8004a48:	2000001c 	.word	0x2000001c
 8004a4c:	20000020 	.word	0x20000020

08004a50 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a50:	b480      	push	{r7}
 8004a52:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004a54:	4b03      	ldr	r3, [pc, #12]	@ (8004a64 <HAL_RCC_GetHCLKFreq+0x14>)
 8004a56:	681b      	ldr	r3, [r3, #0]
}
 8004a58:	4618      	mov	r0, r3
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a60:	4770      	bx	lr
 8004a62:	bf00      	nop
 8004a64:	2000001c 	.word	0x2000001c

08004a68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004a6c:	f7ff fff0 	bl	8004a50 <HAL_RCC_GetHCLKFreq>
 8004a70:	4602      	mov	r2, r0
 8004a72:	4b05      	ldr	r3, [pc, #20]	@ (8004a88 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004a74:	689b      	ldr	r3, [r3, #8]
 8004a76:	0a9b      	lsrs	r3, r3, #10
 8004a78:	f003 0307 	and.w	r3, r3, #7
 8004a7c:	4903      	ldr	r1, [pc, #12]	@ (8004a8c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004a7e:	5ccb      	ldrb	r3, [r1, r3]
 8004a80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a84:	4618      	mov	r0, r3
 8004a86:	bd80      	pop	{r7, pc}
 8004a88:	40023800 	.word	0x40023800
 8004a8c:	0800c674 	.word	0x0800c674

08004a90 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004a94:	f7ff ffdc 	bl	8004a50 <HAL_RCC_GetHCLKFreq>
 8004a98:	4602      	mov	r2, r0
 8004a9a:	4b05      	ldr	r3, [pc, #20]	@ (8004ab0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004a9c:	689b      	ldr	r3, [r3, #8]
 8004a9e:	0b5b      	lsrs	r3, r3, #13
 8004aa0:	f003 0307 	and.w	r3, r3, #7
 8004aa4:	4903      	ldr	r1, [pc, #12]	@ (8004ab4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004aa6:	5ccb      	ldrb	r3, [r1, r3]
 8004aa8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004aac:	4618      	mov	r0, r3
 8004aae:	bd80      	pop	{r7, pc}
 8004ab0:	40023800 	.word	0x40023800
 8004ab4:	0800c674 	.word	0x0800c674

08004ab8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ab8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004abc:	b0ae      	sub	sp, #184	@ 0xb8
 8004abe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8004acc:	2300      	movs	r3, #0
 8004ace:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8004ad8:	2300      	movs	r3, #0
 8004ada:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004ade:	4bcb      	ldr	r3, [pc, #812]	@ (8004e0c <HAL_RCC_GetSysClockFreq+0x354>)
 8004ae0:	689b      	ldr	r3, [r3, #8]
 8004ae2:	f003 030c 	and.w	r3, r3, #12
 8004ae6:	2b0c      	cmp	r3, #12
 8004ae8:	f200 8206 	bhi.w	8004ef8 <HAL_RCC_GetSysClockFreq+0x440>
 8004aec:	a201      	add	r2, pc, #4	@ (adr r2, 8004af4 <HAL_RCC_GetSysClockFreq+0x3c>)
 8004aee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004af2:	bf00      	nop
 8004af4:	08004b29 	.word	0x08004b29
 8004af8:	08004ef9 	.word	0x08004ef9
 8004afc:	08004ef9 	.word	0x08004ef9
 8004b00:	08004ef9 	.word	0x08004ef9
 8004b04:	08004b31 	.word	0x08004b31
 8004b08:	08004ef9 	.word	0x08004ef9
 8004b0c:	08004ef9 	.word	0x08004ef9
 8004b10:	08004ef9 	.word	0x08004ef9
 8004b14:	08004b39 	.word	0x08004b39
 8004b18:	08004ef9 	.word	0x08004ef9
 8004b1c:	08004ef9 	.word	0x08004ef9
 8004b20:	08004ef9 	.word	0x08004ef9
 8004b24:	08004d29 	.word	0x08004d29
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004b28:	4bb9      	ldr	r3, [pc, #740]	@ (8004e10 <HAL_RCC_GetSysClockFreq+0x358>)
 8004b2a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004b2e:	e1e7      	b.n	8004f00 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004b30:	4bb8      	ldr	r3, [pc, #736]	@ (8004e14 <HAL_RCC_GetSysClockFreq+0x35c>)
 8004b32:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004b36:	e1e3      	b.n	8004f00 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004b38:	4bb4      	ldr	r3, [pc, #720]	@ (8004e0c <HAL_RCC_GetSysClockFreq+0x354>)
 8004b3a:	685b      	ldr	r3, [r3, #4]
 8004b3c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004b40:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004b44:	4bb1      	ldr	r3, [pc, #708]	@ (8004e0c <HAL_RCC_GetSysClockFreq+0x354>)
 8004b46:	685b      	ldr	r3, [r3, #4]
 8004b48:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d071      	beq.n	8004c34 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b50:	4bae      	ldr	r3, [pc, #696]	@ (8004e0c <HAL_RCC_GetSysClockFreq+0x354>)
 8004b52:	685b      	ldr	r3, [r3, #4]
 8004b54:	099b      	lsrs	r3, r3, #6
 8004b56:	2200      	movs	r2, #0
 8004b58:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004b5c:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8004b60:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004b64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b68:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004b72:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004b76:	4622      	mov	r2, r4
 8004b78:	462b      	mov	r3, r5
 8004b7a:	f04f 0000 	mov.w	r0, #0
 8004b7e:	f04f 0100 	mov.w	r1, #0
 8004b82:	0159      	lsls	r1, r3, #5
 8004b84:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004b88:	0150      	lsls	r0, r2, #5
 8004b8a:	4602      	mov	r2, r0
 8004b8c:	460b      	mov	r3, r1
 8004b8e:	4621      	mov	r1, r4
 8004b90:	1a51      	subs	r1, r2, r1
 8004b92:	6439      	str	r1, [r7, #64]	@ 0x40
 8004b94:	4629      	mov	r1, r5
 8004b96:	eb63 0301 	sbc.w	r3, r3, r1
 8004b9a:	647b      	str	r3, [r7, #68]	@ 0x44
 8004b9c:	f04f 0200 	mov.w	r2, #0
 8004ba0:	f04f 0300 	mov.w	r3, #0
 8004ba4:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8004ba8:	4649      	mov	r1, r9
 8004baa:	018b      	lsls	r3, r1, #6
 8004bac:	4641      	mov	r1, r8
 8004bae:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004bb2:	4641      	mov	r1, r8
 8004bb4:	018a      	lsls	r2, r1, #6
 8004bb6:	4641      	mov	r1, r8
 8004bb8:	1a51      	subs	r1, r2, r1
 8004bba:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004bbc:	4649      	mov	r1, r9
 8004bbe:	eb63 0301 	sbc.w	r3, r3, r1
 8004bc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004bc4:	f04f 0200 	mov.w	r2, #0
 8004bc8:	f04f 0300 	mov.w	r3, #0
 8004bcc:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8004bd0:	4649      	mov	r1, r9
 8004bd2:	00cb      	lsls	r3, r1, #3
 8004bd4:	4641      	mov	r1, r8
 8004bd6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004bda:	4641      	mov	r1, r8
 8004bdc:	00ca      	lsls	r2, r1, #3
 8004bde:	4610      	mov	r0, r2
 8004be0:	4619      	mov	r1, r3
 8004be2:	4603      	mov	r3, r0
 8004be4:	4622      	mov	r2, r4
 8004be6:	189b      	adds	r3, r3, r2
 8004be8:	633b      	str	r3, [r7, #48]	@ 0x30
 8004bea:	462b      	mov	r3, r5
 8004bec:	460a      	mov	r2, r1
 8004bee:	eb42 0303 	adc.w	r3, r2, r3
 8004bf2:	637b      	str	r3, [r7, #52]	@ 0x34
 8004bf4:	f04f 0200 	mov.w	r2, #0
 8004bf8:	f04f 0300 	mov.w	r3, #0
 8004bfc:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004c00:	4629      	mov	r1, r5
 8004c02:	024b      	lsls	r3, r1, #9
 8004c04:	4621      	mov	r1, r4
 8004c06:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004c0a:	4621      	mov	r1, r4
 8004c0c:	024a      	lsls	r2, r1, #9
 8004c0e:	4610      	mov	r0, r2
 8004c10:	4619      	mov	r1, r3
 8004c12:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004c16:	2200      	movs	r2, #0
 8004c18:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004c1c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004c20:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8004c24:	f7fc f850 	bl	8000cc8 <__aeabi_uldivmod>
 8004c28:	4602      	mov	r2, r0
 8004c2a:	460b      	mov	r3, r1
 8004c2c:	4613      	mov	r3, r2
 8004c2e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004c32:	e067      	b.n	8004d04 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c34:	4b75      	ldr	r3, [pc, #468]	@ (8004e0c <HAL_RCC_GetSysClockFreq+0x354>)
 8004c36:	685b      	ldr	r3, [r3, #4]
 8004c38:	099b      	lsrs	r3, r3, #6
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004c40:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8004c44:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004c48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c4c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004c4e:	2300      	movs	r3, #0
 8004c50:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004c52:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8004c56:	4622      	mov	r2, r4
 8004c58:	462b      	mov	r3, r5
 8004c5a:	f04f 0000 	mov.w	r0, #0
 8004c5e:	f04f 0100 	mov.w	r1, #0
 8004c62:	0159      	lsls	r1, r3, #5
 8004c64:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004c68:	0150      	lsls	r0, r2, #5
 8004c6a:	4602      	mov	r2, r0
 8004c6c:	460b      	mov	r3, r1
 8004c6e:	4621      	mov	r1, r4
 8004c70:	1a51      	subs	r1, r2, r1
 8004c72:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004c74:	4629      	mov	r1, r5
 8004c76:	eb63 0301 	sbc.w	r3, r3, r1
 8004c7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004c7c:	f04f 0200 	mov.w	r2, #0
 8004c80:	f04f 0300 	mov.w	r3, #0
 8004c84:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8004c88:	4649      	mov	r1, r9
 8004c8a:	018b      	lsls	r3, r1, #6
 8004c8c:	4641      	mov	r1, r8
 8004c8e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004c92:	4641      	mov	r1, r8
 8004c94:	018a      	lsls	r2, r1, #6
 8004c96:	4641      	mov	r1, r8
 8004c98:	ebb2 0a01 	subs.w	sl, r2, r1
 8004c9c:	4649      	mov	r1, r9
 8004c9e:	eb63 0b01 	sbc.w	fp, r3, r1
 8004ca2:	f04f 0200 	mov.w	r2, #0
 8004ca6:	f04f 0300 	mov.w	r3, #0
 8004caa:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004cae:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004cb2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004cb6:	4692      	mov	sl, r2
 8004cb8:	469b      	mov	fp, r3
 8004cba:	4623      	mov	r3, r4
 8004cbc:	eb1a 0303 	adds.w	r3, sl, r3
 8004cc0:	623b      	str	r3, [r7, #32]
 8004cc2:	462b      	mov	r3, r5
 8004cc4:	eb4b 0303 	adc.w	r3, fp, r3
 8004cc8:	627b      	str	r3, [r7, #36]	@ 0x24
 8004cca:	f04f 0200 	mov.w	r2, #0
 8004cce:	f04f 0300 	mov.w	r3, #0
 8004cd2:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8004cd6:	4629      	mov	r1, r5
 8004cd8:	028b      	lsls	r3, r1, #10
 8004cda:	4621      	mov	r1, r4
 8004cdc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004ce0:	4621      	mov	r1, r4
 8004ce2:	028a      	lsls	r2, r1, #10
 8004ce4:	4610      	mov	r0, r2
 8004ce6:	4619      	mov	r1, r3
 8004ce8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004cec:	2200      	movs	r2, #0
 8004cee:	673b      	str	r3, [r7, #112]	@ 0x70
 8004cf0:	677a      	str	r2, [r7, #116]	@ 0x74
 8004cf2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8004cf6:	f7fb ffe7 	bl	8000cc8 <__aeabi_uldivmod>
 8004cfa:	4602      	mov	r2, r0
 8004cfc:	460b      	mov	r3, r1
 8004cfe:	4613      	mov	r3, r2
 8004d00:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004d04:	4b41      	ldr	r3, [pc, #260]	@ (8004e0c <HAL_RCC_GetSysClockFreq+0x354>)
 8004d06:	685b      	ldr	r3, [r3, #4]
 8004d08:	0c1b      	lsrs	r3, r3, #16
 8004d0a:	f003 0303 	and.w	r3, r3, #3
 8004d0e:	3301      	adds	r3, #1
 8004d10:	005b      	lsls	r3, r3, #1
 8004d12:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8004d16:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004d1a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004d1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d22:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004d26:	e0eb      	b.n	8004f00 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004d28:	4b38      	ldr	r3, [pc, #224]	@ (8004e0c <HAL_RCC_GetSysClockFreq+0x354>)
 8004d2a:	685b      	ldr	r3, [r3, #4]
 8004d2c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004d30:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004d34:	4b35      	ldr	r3, [pc, #212]	@ (8004e0c <HAL_RCC_GetSysClockFreq+0x354>)
 8004d36:	685b      	ldr	r3, [r3, #4]
 8004d38:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d06b      	beq.n	8004e18 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d40:	4b32      	ldr	r3, [pc, #200]	@ (8004e0c <HAL_RCC_GetSysClockFreq+0x354>)
 8004d42:	685b      	ldr	r3, [r3, #4]
 8004d44:	099b      	lsrs	r3, r3, #6
 8004d46:	2200      	movs	r2, #0
 8004d48:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004d4a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004d4c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004d4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d52:	663b      	str	r3, [r7, #96]	@ 0x60
 8004d54:	2300      	movs	r3, #0
 8004d56:	667b      	str	r3, [r7, #100]	@ 0x64
 8004d58:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8004d5c:	4622      	mov	r2, r4
 8004d5e:	462b      	mov	r3, r5
 8004d60:	f04f 0000 	mov.w	r0, #0
 8004d64:	f04f 0100 	mov.w	r1, #0
 8004d68:	0159      	lsls	r1, r3, #5
 8004d6a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004d6e:	0150      	lsls	r0, r2, #5
 8004d70:	4602      	mov	r2, r0
 8004d72:	460b      	mov	r3, r1
 8004d74:	4621      	mov	r1, r4
 8004d76:	1a51      	subs	r1, r2, r1
 8004d78:	61b9      	str	r1, [r7, #24]
 8004d7a:	4629      	mov	r1, r5
 8004d7c:	eb63 0301 	sbc.w	r3, r3, r1
 8004d80:	61fb      	str	r3, [r7, #28]
 8004d82:	f04f 0200 	mov.w	r2, #0
 8004d86:	f04f 0300 	mov.w	r3, #0
 8004d8a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8004d8e:	4659      	mov	r1, fp
 8004d90:	018b      	lsls	r3, r1, #6
 8004d92:	4651      	mov	r1, sl
 8004d94:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004d98:	4651      	mov	r1, sl
 8004d9a:	018a      	lsls	r2, r1, #6
 8004d9c:	4651      	mov	r1, sl
 8004d9e:	ebb2 0801 	subs.w	r8, r2, r1
 8004da2:	4659      	mov	r1, fp
 8004da4:	eb63 0901 	sbc.w	r9, r3, r1
 8004da8:	f04f 0200 	mov.w	r2, #0
 8004dac:	f04f 0300 	mov.w	r3, #0
 8004db0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004db4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004db8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004dbc:	4690      	mov	r8, r2
 8004dbe:	4699      	mov	r9, r3
 8004dc0:	4623      	mov	r3, r4
 8004dc2:	eb18 0303 	adds.w	r3, r8, r3
 8004dc6:	613b      	str	r3, [r7, #16]
 8004dc8:	462b      	mov	r3, r5
 8004dca:	eb49 0303 	adc.w	r3, r9, r3
 8004dce:	617b      	str	r3, [r7, #20]
 8004dd0:	f04f 0200 	mov.w	r2, #0
 8004dd4:	f04f 0300 	mov.w	r3, #0
 8004dd8:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8004ddc:	4629      	mov	r1, r5
 8004dde:	024b      	lsls	r3, r1, #9
 8004de0:	4621      	mov	r1, r4
 8004de2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004de6:	4621      	mov	r1, r4
 8004de8:	024a      	lsls	r2, r1, #9
 8004dea:	4610      	mov	r0, r2
 8004dec:	4619      	mov	r1, r3
 8004dee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004df2:	2200      	movs	r2, #0
 8004df4:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004df6:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8004df8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004dfc:	f7fb ff64 	bl	8000cc8 <__aeabi_uldivmod>
 8004e00:	4602      	mov	r2, r0
 8004e02:	460b      	mov	r3, r1
 8004e04:	4613      	mov	r3, r2
 8004e06:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004e0a:	e065      	b.n	8004ed8 <HAL_RCC_GetSysClockFreq+0x420>
 8004e0c:	40023800 	.word	0x40023800
 8004e10:	00f42400 	.word	0x00f42400
 8004e14:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e18:	4b3d      	ldr	r3, [pc, #244]	@ (8004f10 <HAL_RCC_GetSysClockFreq+0x458>)
 8004e1a:	685b      	ldr	r3, [r3, #4]
 8004e1c:	099b      	lsrs	r3, r3, #6
 8004e1e:	2200      	movs	r2, #0
 8004e20:	4618      	mov	r0, r3
 8004e22:	4611      	mov	r1, r2
 8004e24:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004e28:	653b      	str	r3, [r7, #80]	@ 0x50
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	657b      	str	r3, [r7, #84]	@ 0x54
 8004e2e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8004e32:	4642      	mov	r2, r8
 8004e34:	464b      	mov	r3, r9
 8004e36:	f04f 0000 	mov.w	r0, #0
 8004e3a:	f04f 0100 	mov.w	r1, #0
 8004e3e:	0159      	lsls	r1, r3, #5
 8004e40:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004e44:	0150      	lsls	r0, r2, #5
 8004e46:	4602      	mov	r2, r0
 8004e48:	460b      	mov	r3, r1
 8004e4a:	4641      	mov	r1, r8
 8004e4c:	1a51      	subs	r1, r2, r1
 8004e4e:	60b9      	str	r1, [r7, #8]
 8004e50:	4649      	mov	r1, r9
 8004e52:	eb63 0301 	sbc.w	r3, r3, r1
 8004e56:	60fb      	str	r3, [r7, #12]
 8004e58:	f04f 0200 	mov.w	r2, #0
 8004e5c:	f04f 0300 	mov.w	r3, #0
 8004e60:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8004e64:	4659      	mov	r1, fp
 8004e66:	018b      	lsls	r3, r1, #6
 8004e68:	4651      	mov	r1, sl
 8004e6a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004e6e:	4651      	mov	r1, sl
 8004e70:	018a      	lsls	r2, r1, #6
 8004e72:	4651      	mov	r1, sl
 8004e74:	1a54      	subs	r4, r2, r1
 8004e76:	4659      	mov	r1, fp
 8004e78:	eb63 0501 	sbc.w	r5, r3, r1
 8004e7c:	f04f 0200 	mov.w	r2, #0
 8004e80:	f04f 0300 	mov.w	r3, #0
 8004e84:	00eb      	lsls	r3, r5, #3
 8004e86:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004e8a:	00e2      	lsls	r2, r4, #3
 8004e8c:	4614      	mov	r4, r2
 8004e8e:	461d      	mov	r5, r3
 8004e90:	4643      	mov	r3, r8
 8004e92:	18e3      	adds	r3, r4, r3
 8004e94:	603b      	str	r3, [r7, #0]
 8004e96:	464b      	mov	r3, r9
 8004e98:	eb45 0303 	adc.w	r3, r5, r3
 8004e9c:	607b      	str	r3, [r7, #4]
 8004e9e:	f04f 0200 	mov.w	r2, #0
 8004ea2:	f04f 0300 	mov.w	r3, #0
 8004ea6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004eaa:	4629      	mov	r1, r5
 8004eac:	028b      	lsls	r3, r1, #10
 8004eae:	4621      	mov	r1, r4
 8004eb0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004eb4:	4621      	mov	r1, r4
 8004eb6:	028a      	lsls	r2, r1, #10
 8004eb8:	4610      	mov	r0, r2
 8004eba:	4619      	mov	r1, r3
 8004ebc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004ec4:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8004ec6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004eca:	f7fb fefd 	bl	8000cc8 <__aeabi_uldivmod>
 8004ece:	4602      	mov	r2, r0
 8004ed0:	460b      	mov	r3, r1
 8004ed2:	4613      	mov	r3, r2
 8004ed4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004ed8:	4b0d      	ldr	r3, [pc, #52]	@ (8004f10 <HAL_RCC_GetSysClockFreq+0x458>)
 8004eda:	685b      	ldr	r3, [r3, #4]
 8004edc:	0f1b      	lsrs	r3, r3, #28
 8004ede:	f003 0307 	and.w	r3, r3, #7
 8004ee2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8004ee6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004eea:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004eee:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ef2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004ef6:	e003      	b.n	8004f00 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004ef8:	4b06      	ldr	r3, [pc, #24]	@ (8004f14 <HAL_RCC_GetSysClockFreq+0x45c>)
 8004efa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004efe:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004f00:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8004f04:	4618      	mov	r0, r3
 8004f06:	37b8      	adds	r7, #184	@ 0xb8
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004f0e:	bf00      	nop
 8004f10:	40023800 	.word	0x40023800
 8004f14:	00f42400 	.word	0x00f42400

08004f18 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b086      	sub	sp, #24
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d101      	bne.n	8004f2a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004f26:	2301      	movs	r3, #1
 8004f28:	e28d      	b.n	8005446 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f003 0301 	and.w	r3, r3, #1
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	f000 8083 	beq.w	800503e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004f38:	4b94      	ldr	r3, [pc, #592]	@ (800518c <HAL_RCC_OscConfig+0x274>)
 8004f3a:	689b      	ldr	r3, [r3, #8]
 8004f3c:	f003 030c 	and.w	r3, r3, #12
 8004f40:	2b04      	cmp	r3, #4
 8004f42:	d019      	beq.n	8004f78 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004f44:	4b91      	ldr	r3, [pc, #580]	@ (800518c <HAL_RCC_OscConfig+0x274>)
 8004f46:	689b      	ldr	r3, [r3, #8]
 8004f48:	f003 030c 	and.w	r3, r3, #12
        || \
 8004f4c:	2b08      	cmp	r3, #8
 8004f4e:	d106      	bne.n	8004f5e <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004f50:	4b8e      	ldr	r3, [pc, #568]	@ (800518c <HAL_RCC_OscConfig+0x274>)
 8004f52:	685b      	ldr	r3, [r3, #4]
 8004f54:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004f58:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004f5c:	d00c      	beq.n	8004f78 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004f5e:	4b8b      	ldr	r3, [pc, #556]	@ (800518c <HAL_RCC_OscConfig+0x274>)
 8004f60:	689b      	ldr	r3, [r3, #8]
 8004f62:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004f66:	2b0c      	cmp	r3, #12
 8004f68:	d112      	bne.n	8004f90 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004f6a:	4b88      	ldr	r3, [pc, #544]	@ (800518c <HAL_RCC_OscConfig+0x274>)
 8004f6c:	685b      	ldr	r3, [r3, #4]
 8004f6e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004f72:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004f76:	d10b      	bne.n	8004f90 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f78:	4b84      	ldr	r3, [pc, #528]	@ (800518c <HAL_RCC_OscConfig+0x274>)
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d05b      	beq.n	800503c <HAL_RCC_OscConfig+0x124>
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	685b      	ldr	r3, [r3, #4]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d157      	bne.n	800503c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004f8c:	2301      	movs	r3, #1
 8004f8e:	e25a      	b.n	8005446 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	685b      	ldr	r3, [r3, #4]
 8004f94:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f98:	d106      	bne.n	8004fa8 <HAL_RCC_OscConfig+0x90>
 8004f9a:	4b7c      	ldr	r3, [pc, #496]	@ (800518c <HAL_RCC_OscConfig+0x274>)
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	4a7b      	ldr	r2, [pc, #492]	@ (800518c <HAL_RCC_OscConfig+0x274>)
 8004fa0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004fa4:	6013      	str	r3, [r2, #0]
 8004fa6:	e01d      	b.n	8004fe4 <HAL_RCC_OscConfig+0xcc>
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	685b      	ldr	r3, [r3, #4]
 8004fac:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004fb0:	d10c      	bne.n	8004fcc <HAL_RCC_OscConfig+0xb4>
 8004fb2:	4b76      	ldr	r3, [pc, #472]	@ (800518c <HAL_RCC_OscConfig+0x274>)
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	4a75      	ldr	r2, [pc, #468]	@ (800518c <HAL_RCC_OscConfig+0x274>)
 8004fb8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004fbc:	6013      	str	r3, [r2, #0]
 8004fbe:	4b73      	ldr	r3, [pc, #460]	@ (800518c <HAL_RCC_OscConfig+0x274>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	4a72      	ldr	r2, [pc, #456]	@ (800518c <HAL_RCC_OscConfig+0x274>)
 8004fc4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004fc8:	6013      	str	r3, [r2, #0]
 8004fca:	e00b      	b.n	8004fe4 <HAL_RCC_OscConfig+0xcc>
 8004fcc:	4b6f      	ldr	r3, [pc, #444]	@ (800518c <HAL_RCC_OscConfig+0x274>)
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	4a6e      	ldr	r2, [pc, #440]	@ (800518c <HAL_RCC_OscConfig+0x274>)
 8004fd2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004fd6:	6013      	str	r3, [r2, #0]
 8004fd8:	4b6c      	ldr	r3, [pc, #432]	@ (800518c <HAL_RCC_OscConfig+0x274>)
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	4a6b      	ldr	r2, [pc, #428]	@ (800518c <HAL_RCC_OscConfig+0x274>)
 8004fde:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004fe2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	685b      	ldr	r3, [r3, #4]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d013      	beq.n	8005014 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fec:	f7fe f930 	bl	8003250 <HAL_GetTick>
 8004ff0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ff2:	e008      	b.n	8005006 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ff4:	f7fe f92c 	bl	8003250 <HAL_GetTick>
 8004ff8:	4602      	mov	r2, r0
 8004ffa:	693b      	ldr	r3, [r7, #16]
 8004ffc:	1ad3      	subs	r3, r2, r3
 8004ffe:	2b64      	cmp	r3, #100	@ 0x64
 8005000:	d901      	bls.n	8005006 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8005002:	2303      	movs	r3, #3
 8005004:	e21f      	b.n	8005446 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005006:	4b61      	ldr	r3, [pc, #388]	@ (800518c <HAL_RCC_OscConfig+0x274>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800500e:	2b00      	cmp	r3, #0
 8005010:	d0f0      	beq.n	8004ff4 <HAL_RCC_OscConfig+0xdc>
 8005012:	e014      	b.n	800503e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005014:	f7fe f91c 	bl	8003250 <HAL_GetTick>
 8005018:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800501a:	e008      	b.n	800502e <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800501c:	f7fe f918 	bl	8003250 <HAL_GetTick>
 8005020:	4602      	mov	r2, r0
 8005022:	693b      	ldr	r3, [r7, #16]
 8005024:	1ad3      	subs	r3, r2, r3
 8005026:	2b64      	cmp	r3, #100	@ 0x64
 8005028:	d901      	bls.n	800502e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800502a:	2303      	movs	r3, #3
 800502c:	e20b      	b.n	8005446 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800502e:	4b57      	ldr	r3, [pc, #348]	@ (800518c <HAL_RCC_OscConfig+0x274>)
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005036:	2b00      	cmp	r3, #0
 8005038:	d1f0      	bne.n	800501c <HAL_RCC_OscConfig+0x104>
 800503a:	e000      	b.n	800503e <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800503c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f003 0302 	and.w	r3, r3, #2
 8005046:	2b00      	cmp	r3, #0
 8005048:	d06f      	beq.n	800512a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800504a:	4b50      	ldr	r3, [pc, #320]	@ (800518c <HAL_RCC_OscConfig+0x274>)
 800504c:	689b      	ldr	r3, [r3, #8]
 800504e:	f003 030c 	and.w	r3, r3, #12
 8005052:	2b00      	cmp	r3, #0
 8005054:	d017      	beq.n	8005086 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8005056:	4b4d      	ldr	r3, [pc, #308]	@ (800518c <HAL_RCC_OscConfig+0x274>)
 8005058:	689b      	ldr	r3, [r3, #8]
 800505a:	f003 030c 	and.w	r3, r3, #12
        || \
 800505e:	2b08      	cmp	r3, #8
 8005060:	d105      	bne.n	800506e <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8005062:	4b4a      	ldr	r3, [pc, #296]	@ (800518c <HAL_RCC_OscConfig+0x274>)
 8005064:	685b      	ldr	r3, [r3, #4]
 8005066:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800506a:	2b00      	cmp	r3, #0
 800506c:	d00b      	beq.n	8005086 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800506e:	4b47      	ldr	r3, [pc, #284]	@ (800518c <HAL_RCC_OscConfig+0x274>)
 8005070:	689b      	ldr	r3, [r3, #8]
 8005072:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8005076:	2b0c      	cmp	r3, #12
 8005078:	d11c      	bne.n	80050b4 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800507a:	4b44      	ldr	r3, [pc, #272]	@ (800518c <HAL_RCC_OscConfig+0x274>)
 800507c:	685b      	ldr	r3, [r3, #4]
 800507e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005082:	2b00      	cmp	r3, #0
 8005084:	d116      	bne.n	80050b4 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005086:	4b41      	ldr	r3, [pc, #260]	@ (800518c <HAL_RCC_OscConfig+0x274>)
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f003 0302 	and.w	r3, r3, #2
 800508e:	2b00      	cmp	r3, #0
 8005090:	d005      	beq.n	800509e <HAL_RCC_OscConfig+0x186>
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	68db      	ldr	r3, [r3, #12]
 8005096:	2b01      	cmp	r3, #1
 8005098:	d001      	beq.n	800509e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800509a:	2301      	movs	r3, #1
 800509c:	e1d3      	b.n	8005446 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800509e:	4b3b      	ldr	r3, [pc, #236]	@ (800518c <HAL_RCC_OscConfig+0x274>)
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	691b      	ldr	r3, [r3, #16]
 80050aa:	00db      	lsls	r3, r3, #3
 80050ac:	4937      	ldr	r1, [pc, #220]	@ (800518c <HAL_RCC_OscConfig+0x274>)
 80050ae:	4313      	orrs	r3, r2
 80050b0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80050b2:	e03a      	b.n	800512a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	68db      	ldr	r3, [r3, #12]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d020      	beq.n	80050fe <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80050bc:	4b34      	ldr	r3, [pc, #208]	@ (8005190 <HAL_RCC_OscConfig+0x278>)
 80050be:	2201      	movs	r2, #1
 80050c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050c2:	f7fe f8c5 	bl	8003250 <HAL_GetTick>
 80050c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050c8:	e008      	b.n	80050dc <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80050ca:	f7fe f8c1 	bl	8003250 <HAL_GetTick>
 80050ce:	4602      	mov	r2, r0
 80050d0:	693b      	ldr	r3, [r7, #16]
 80050d2:	1ad3      	subs	r3, r2, r3
 80050d4:	2b02      	cmp	r3, #2
 80050d6:	d901      	bls.n	80050dc <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80050d8:	2303      	movs	r3, #3
 80050da:	e1b4      	b.n	8005446 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050dc:	4b2b      	ldr	r3, [pc, #172]	@ (800518c <HAL_RCC_OscConfig+0x274>)
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f003 0302 	and.w	r3, r3, #2
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d0f0      	beq.n	80050ca <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050e8:	4b28      	ldr	r3, [pc, #160]	@ (800518c <HAL_RCC_OscConfig+0x274>)
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	691b      	ldr	r3, [r3, #16]
 80050f4:	00db      	lsls	r3, r3, #3
 80050f6:	4925      	ldr	r1, [pc, #148]	@ (800518c <HAL_RCC_OscConfig+0x274>)
 80050f8:	4313      	orrs	r3, r2
 80050fa:	600b      	str	r3, [r1, #0]
 80050fc:	e015      	b.n	800512a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80050fe:	4b24      	ldr	r3, [pc, #144]	@ (8005190 <HAL_RCC_OscConfig+0x278>)
 8005100:	2200      	movs	r2, #0
 8005102:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005104:	f7fe f8a4 	bl	8003250 <HAL_GetTick>
 8005108:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800510a:	e008      	b.n	800511e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800510c:	f7fe f8a0 	bl	8003250 <HAL_GetTick>
 8005110:	4602      	mov	r2, r0
 8005112:	693b      	ldr	r3, [r7, #16]
 8005114:	1ad3      	subs	r3, r2, r3
 8005116:	2b02      	cmp	r3, #2
 8005118:	d901      	bls.n	800511e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800511a:	2303      	movs	r3, #3
 800511c:	e193      	b.n	8005446 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800511e:	4b1b      	ldr	r3, [pc, #108]	@ (800518c <HAL_RCC_OscConfig+0x274>)
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f003 0302 	and.w	r3, r3, #2
 8005126:	2b00      	cmp	r3, #0
 8005128:	d1f0      	bne.n	800510c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f003 0308 	and.w	r3, r3, #8
 8005132:	2b00      	cmp	r3, #0
 8005134:	d036      	beq.n	80051a4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	695b      	ldr	r3, [r3, #20]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d016      	beq.n	800516c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800513e:	4b15      	ldr	r3, [pc, #84]	@ (8005194 <HAL_RCC_OscConfig+0x27c>)
 8005140:	2201      	movs	r2, #1
 8005142:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005144:	f7fe f884 	bl	8003250 <HAL_GetTick>
 8005148:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800514a:	e008      	b.n	800515e <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800514c:	f7fe f880 	bl	8003250 <HAL_GetTick>
 8005150:	4602      	mov	r2, r0
 8005152:	693b      	ldr	r3, [r7, #16]
 8005154:	1ad3      	subs	r3, r2, r3
 8005156:	2b02      	cmp	r3, #2
 8005158:	d901      	bls.n	800515e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800515a:	2303      	movs	r3, #3
 800515c:	e173      	b.n	8005446 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800515e:	4b0b      	ldr	r3, [pc, #44]	@ (800518c <HAL_RCC_OscConfig+0x274>)
 8005160:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005162:	f003 0302 	and.w	r3, r3, #2
 8005166:	2b00      	cmp	r3, #0
 8005168:	d0f0      	beq.n	800514c <HAL_RCC_OscConfig+0x234>
 800516a:	e01b      	b.n	80051a4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800516c:	4b09      	ldr	r3, [pc, #36]	@ (8005194 <HAL_RCC_OscConfig+0x27c>)
 800516e:	2200      	movs	r2, #0
 8005170:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005172:	f7fe f86d 	bl	8003250 <HAL_GetTick>
 8005176:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005178:	e00e      	b.n	8005198 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800517a:	f7fe f869 	bl	8003250 <HAL_GetTick>
 800517e:	4602      	mov	r2, r0
 8005180:	693b      	ldr	r3, [r7, #16]
 8005182:	1ad3      	subs	r3, r2, r3
 8005184:	2b02      	cmp	r3, #2
 8005186:	d907      	bls.n	8005198 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8005188:	2303      	movs	r3, #3
 800518a:	e15c      	b.n	8005446 <HAL_RCC_OscConfig+0x52e>
 800518c:	40023800 	.word	0x40023800
 8005190:	42470000 	.word	0x42470000
 8005194:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005198:	4b8a      	ldr	r3, [pc, #552]	@ (80053c4 <HAL_RCC_OscConfig+0x4ac>)
 800519a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800519c:	f003 0302 	and.w	r3, r3, #2
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d1ea      	bne.n	800517a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f003 0304 	and.w	r3, r3, #4
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	f000 8097 	beq.w	80052e0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80051b2:	2300      	movs	r3, #0
 80051b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80051b6:	4b83      	ldr	r3, [pc, #524]	@ (80053c4 <HAL_RCC_OscConfig+0x4ac>)
 80051b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d10f      	bne.n	80051e2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80051c2:	2300      	movs	r3, #0
 80051c4:	60bb      	str	r3, [r7, #8]
 80051c6:	4b7f      	ldr	r3, [pc, #508]	@ (80053c4 <HAL_RCC_OscConfig+0x4ac>)
 80051c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051ca:	4a7e      	ldr	r2, [pc, #504]	@ (80053c4 <HAL_RCC_OscConfig+0x4ac>)
 80051cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80051d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80051d2:	4b7c      	ldr	r3, [pc, #496]	@ (80053c4 <HAL_RCC_OscConfig+0x4ac>)
 80051d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80051da:	60bb      	str	r3, [r7, #8]
 80051dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80051de:	2301      	movs	r3, #1
 80051e0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051e2:	4b79      	ldr	r3, [pc, #484]	@ (80053c8 <HAL_RCC_OscConfig+0x4b0>)
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d118      	bne.n	8005220 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80051ee:	4b76      	ldr	r3, [pc, #472]	@ (80053c8 <HAL_RCC_OscConfig+0x4b0>)
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	4a75      	ldr	r2, [pc, #468]	@ (80053c8 <HAL_RCC_OscConfig+0x4b0>)
 80051f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80051f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80051fa:	f7fe f829 	bl	8003250 <HAL_GetTick>
 80051fe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005200:	e008      	b.n	8005214 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005202:	f7fe f825 	bl	8003250 <HAL_GetTick>
 8005206:	4602      	mov	r2, r0
 8005208:	693b      	ldr	r3, [r7, #16]
 800520a:	1ad3      	subs	r3, r2, r3
 800520c:	2b02      	cmp	r3, #2
 800520e:	d901      	bls.n	8005214 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8005210:	2303      	movs	r3, #3
 8005212:	e118      	b.n	8005446 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005214:	4b6c      	ldr	r3, [pc, #432]	@ (80053c8 <HAL_RCC_OscConfig+0x4b0>)
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800521c:	2b00      	cmp	r3, #0
 800521e:	d0f0      	beq.n	8005202 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	689b      	ldr	r3, [r3, #8]
 8005224:	2b01      	cmp	r3, #1
 8005226:	d106      	bne.n	8005236 <HAL_RCC_OscConfig+0x31e>
 8005228:	4b66      	ldr	r3, [pc, #408]	@ (80053c4 <HAL_RCC_OscConfig+0x4ac>)
 800522a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800522c:	4a65      	ldr	r2, [pc, #404]	@ (80053c4 <HAL_RCC_OscConfig+0x4ac>)
 800522e:	f043 0301 	orr.w	r3, r3, #1
 8005232:	6713      	str	r3, [r2, #112]	@ 0x70
 8005234:	e01c      	b.n	8005270 <HAL_RCC_OscConfig+0x358>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	689b      	ldr	r3, [r3, #8]
 800523a:	2b05      	cmp	r3, #5
 800523c:	d10c      	bne.n	8005258 <HAL_RCC_OscConfig+0x340>
 800523e:	4b61      	ldr	r3, [pc, #388]	@ (80053c4 <HAL_RCC_OscConfig+0x4ac>)
 8005240:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005242:	4a60      	ldr	r2, [pc, #384]	@ (80053c4 <HAL_RCC_OscConfig+0x4ac>)
 8005244:	f043 0304 	orr.w	r3, r3, #4
 8005248:	6713      	str	r3, [r2, #112]	@ 0x70
 800524a:	4b5e      	ldr	r3, [pc, #376]	@ (80053c4 <HAL_RCC_OscConfig+0x4ac>)
 800524c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800524e:	4a5d      	ldr	r2, [pc, #372]	@ (80053c4 <HAL_RCC_OscConfig+0x4ac>)
 8005250:	f043 0301 	orr.w	r3, r3, #1
 8005254:	6713      	str	r3, [r2, #112]	@ 0x70
 8005256:	e00b      	b.n	8005270 <HAL_RCC_OscConfig+0x358>
 8005258:	4b5a      	ldr	r3, [pc, #360]	@ (80053c4 <HAL_RCC_OscConfig+0x4ac>)
 800525a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800525c:	4a59      	ldr	r2, [pc, #356]	@ (80053c4 <HAL_RCC_OscConfig+0x4ac>)
 800525e:	f023 0301 	bic.w	r3, r3, #1
 8005262:	6713      	str	r3, [r2, #112]	@ 0x70
 8005264:	4b57      	ldr	r3, [pc, #348]	@ (80053c4 <HAL_RCC_OscConfig+0x4ac>)
 8005266:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005268:	4a56      	ldr	r2, [pc, #344]	@ (80053c4 <HAL_RCC_OscConfig+0x4ac>)
 800526a:	f023 0304 	bic.w	r3, r3, #4
 800526e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	689b      	ldr	r3, [r3, #8]
 8005274:	2b00      	cmp	r3, #0
 8005276:	d015      	beq.n	80052a4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005278:	f7fd ffea 	bl	8003250 <HAL_GetTick>
 800527c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800527e:	e00a      	b.n	8005296 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005280:	f7fd ffe6 	bl	8003250 <HAL_GetTick>
 8005284:	4602      	mov	r2, r0
 8005286:	693b      	ldr	r3, [r7, #16]
 8005288:	1ad3      	subs	r3, r2, r3
 800528a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800528e:	4293      	cmp	r3, r2
 8005290:	d901      	bls.n	8005296 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8005292:	2303      	movs	r3, #3
 8005294:	e0d7      	b.n	8005446 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005296:	4b4b      	ldr	r3, [pc, #300]	@ (80053c4 <HAL_RCC_OscConfig+0x4ac>)
 8005298:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800529a:	f003 0302 	and.w	r3, r3, #2
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d0ee      	beq.n	8005280 <HAL_RCC_OscConfig+0x368>
 80052a2:	e014      	b.n	80052ce <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052a4:	f7fd ffd4 	bl	8003250 <HAL_GetTick>
 80052a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80052aa:	e00a      	b.n	80052c2 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052ac:	f7fd ffd0 	bl	8003250 <HAL_GetTick>
 80052b0:	4602      	mov	r2, r0
 80052b2:	693b      	ldr	r3, [r7, #16]
 80052b4:	1ad3      	subs	r3, r2, r3
 80052b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80052ba:	4293      	cmp	r3, r2
 80052bc:	d901      	bls.n	80052c2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80052be:	2303      	movs	r3, #3
 80052c0:	e0c1      	b.n	8005446 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80052c2:	4b40      	ldr	r3, [pc, #256]	@ (80053c4 <HAL_RCC_OscConfig+0x4ac>)
 80052c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052c6:	f003 0302 	and.w	r3, r3, #2
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d1ee      	bne.n	80052ac <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80052ce:	7dfb      	ldrb	r3, [r7, #23]
 80052d0:	2b01      	cmp	r3, #1
 80052d2:	d105      	bne.n	80052e0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80052d4:	4b3b      	ldr	r3, [pc, #236]	@ (80053c4 <HAL_RCC_OscConfig+0x4ac>)
 80052d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052d8:	4a3a      	ldr	r2, [pc, #232]	@ (80053c4 <HAL_RCC_OscConfig+0x4ac>)
 80052da:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80052de:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	699b      	ldr	r3, [r3, #24]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	f000 80ad 	beq.w	8005444 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80052ea:	4b36      	ldr	r3, [pc, #216]	@ (80053c4 <HAL_RCC_OscConfig+0x4ac>)
 80052ec:	689b      	ldr	r3, [r3, #8]
 80052ee:	f003 030c 	and.w	r3, r3, #12
 80052f2:	2b08      	cmp	r3, #8
 80052f4:	d060      	beq.n	80053b8 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	699b      	ldr	r3, [r3, #24]
 80052fa:	2b02      	cmp	r3, #2
 80052fc:	d145      	bne.n	800538a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052fe:	4b33      	ldr	r3, [pc, #204]	@ (80053cc <HAL_RCC_OscConfig+0x4b4>)
 8005300:	2200      	movs	r2, #0
 8005302:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005304:	f7fd ffa4 	bl	8003250 <HAL_GetTick>
 8005308:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800530a:	e008      	b.n	800531e <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800530c:	f7fd ffa0 	bl	8003250 <HAL_GetTick>
 8005310:	4602      	mov	r2, r0
 8005312:	693b      	ldr	r3, [r7, #16]
 8005314:	1ad3      	subs	r3, r2, r3
 8005316:	2b02      	cmp	r3, #2
 8005318:	d901      	bls.n	800531e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800531a:	2303      	movs	r3, #3
 800531c:	e093      	b.n	8005446 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800531e:	4b29      	ldr	r3, [pc, #164]	@ (80053c4 <HAL_RCC_OscConfig+0x4ac>)
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005326:	2b00      	cmp	r3, #0
 8005328:	d1f0      	bne.n	800530c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	69da      	ldr	r2, [r3, #28]
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6a1b      	ldr	r3, [r3, #32]
 8005332:	431a      	orrs	r2, r3
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005338:	019b      	lsls	r3, r3, #6
 800533a:	431a      	orrs	r2, r3
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005340:	085b      	lsrs	r3, r3, #1
 8005342:	3b01      	subs	r3, #1
 8005344:	041b      	lsls	r3, r3, #16
 8005346:	431a      	orrs	r2, r3
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800534c:	061b      	lsls	r3, r3, #24
 800534e:	431a      	orrs	r2, r3
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005354:	071b      	lsls	r3, r3, #28
 8005356:	491b      	ldr	r1, [pc, #108]	@ (80053c4 <HAL_RCC_OscConfig+0x4ac>)
 8005358:	4313      	orrs	r3, r2
 800535a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800535c:	4b1b      	ldr	r3, [pc, #108]	@ (80053cc <HAL_RCC_OscConfig+0x4b4>)
 800535e:	2201      	movs	r2, #1
 8005360:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005362:	f7fd ff75 	bl	8003250 <HAL_GetTick>
 8005366:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005368:	e008      	b.n	800537c <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800536a:	f7fd ff71 	bl	8003250 <HAL_GetTick>
 800536e:	4602      	mov	r2, r0
 8005370:	693b      	ldr	r3, [r7, #16]
 8005372:	1ad3      	subs	r3, r2, r3
 8005374:	2b02      	cmp	r3, #2
 8005376:	d901      	bls.n	800537c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8005378:	2303      	movs	r3, #3
 800537a:	e064      	b.n	8005446 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800537c:	4b11      	ldr	r3, [pc, #68]	@ (80053c4 <HAL_RCC_OscConfig+0x4ac>)
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005384:	2b00      	cmp	r3, #0
 8005386:	d0f0      	beq.n	800536a <HAL_RCC_OscConfig+0x452>
 8005388:	e05c      	b.n	8005444 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800538a:	4b10      	ldr	r3, [pc, #64]	@ (80053cc <HAL_RCC_OscConfig+0x4b4>)
 800538c:	2200      	movs	r2, #0
 800538e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005390:	f7fd ff5e 	bl	8003250 <HAL_GetTick>
 8005394:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005396:	e008      	b.n	80053aa <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005398:	f7fd ff5a 	bl	8003250 <HAL_GetTick>
 800539c:	4602      	mov	r2, r0
 800539e:	693b      	ldr	r3, [r7, #16]
 80053a0:	1ad3      	subs	r3, r2, r3
 80053a2:	2b02      	cmp	r3, #2
 80053a4:	d901      	bls.n	80053aa <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80053a6:	2303      	movs	r3, #3
 80053a8:	e04d      	b.n	8005446 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80053aa:	4b06      	ldr	r3, [pc, #24]	@ (80053c4 <HAL_RCC_OscConfig+0x4ac>)
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d1f0      	bne.n	8005398 <HAL_RCC_OscConfig+0x480>
 80053b6:	e045      	b.n	8005444 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	699b      	ldr	r3, [r3, #24]
 80053bc:	2b01      	cmp	r3, #1
 80053be:	d107      	bne.n	80053d0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80053c0:	2301      	movs	r3, #1
 80053c2:	e040      	b.n	8005446 <HAL_RCC_OscConfig+0x52e>
 80053c4:	40023800 	.word	0x40023800
 80053c8:	40007000 	.word	0x40007000
 80053cc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80053d0:	4b1f      	ldr	r3, [pc, #124]	@ (8005450 <HAL_RCC_OscConfig+0x538>)
 80053d2:	685b      	ldr	r3, [r3, #4]
 80053d4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	699b      	ldr	r3, [r3, #24]
 80053da:	2b01      	cmp	r3, #1
 80053dc:	d030      	beq.n	8005440 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80053e8:	429a      	cmp	r2, r3
 80053ea:	d129      	bne.n	8005440 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80053f6:	429a      	cmp	r2, r3
 80053f8:	d122      	bne.n	8005440 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80053fa:	68fa      	ldr	r2, [r7, #12]
 80053fc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005400:	4013      	ands	r3, r2
 8005402:	687a      	ldr	r2, [r7, #4]
 8005404:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005406:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005408:	4293      	cmp	r3, r2
 800540a:	d119      	bne.n	8005440 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005416:	085b      	lsrs	r3, r3, #1
 8005418:	3b01      	subs	r3, #1
 800541a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800541c:	429a      	cmp	r2, r3
 800541e:	d10f      	bne.n	8005440 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800542a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800542c:	429a      	cmp	r2, r3
 800542e:	d107      	bne.n	8005440 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800543a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800543c:	429a      	cmp	r2, r3
 800543e:	d001      	beq.n	8005444 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005440:	2301      	movs	r3, #1
 8005442:	e000      	b.n	8005446 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8005444:	2300      	movs	r3, #0
}
 8005446:	4618      	mov	r0, r3
 8005448:	3718      	adds	r7, #24
 800544a:	46bd      	mov	sp, r7
 800544c:	bd80      	pop	{r7, pc}
 800544e:	bf00      	nop
 8005450:	40023800 	.word	0x40023800

08005454 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005454:	b580      	push	{r7, lr}
 8005456:	b082      	sub	sp, #8
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d101      	bne.n	8005466 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005462:	2301      	movs	r3, #1
 8005464:	e07b      	b.n	800555e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800546a:	2b00      	cmp	r3, #0
 800546c:	d108      	bne.n	8005480 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	685b      	ldr	r3, [r3, #4]
 8005472:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005476:	d009      	beq.n	800548c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2200      	movs	r2, #0
 800547c:	61da      	str	r2, [r3, #28]
 800547e:	e005      	b.n	800548c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2200      	movs	r2, #0
 8005484:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2200      	movs	r2, #0
 800548a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2200      	movs	r2, #0
 8005490:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005498:	b2db      	uxtb	r3, r3
 800549a:	2b00      	cmp	r3, #0
 800549c:	d106      	bne.n	80054ac <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	2200      	movs	r2, #0
 80054a2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80054a6:	6878      	ldr	r0, [r7, #4]
 80054a8:	f7fc ffe8 	bl	800247c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2202      	movs	r2, #2
 80054b0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	681a      	ldr	r2, [r3, #0]
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80054c2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	685b      	ldr	r3, [r3, #4]
 80054c8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	689b      	ldr	r3, [r3, #8]
 80054d0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80054d4:	431a      	orrs	r2, r3
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	68db      	ldr	r3, [r3, #12]
 80054da:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80054de:	431a      	orrs	r2, r3
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	691b      	ldr	r3, [r3, #16]
 80054e4:	f003 0302 	and.w	r3, r3, #2
 80054e8:	431a      	orrs	r2, r3
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	695b      	ldr	r3, [r3, #20]
 80054ee:	f003 0301 	and.w	r3, r3, #1
 80054f2:	431a      	orrs	r2, r3
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	699b      	ldr	r3, [r3, #24]
 80054f8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80054fc:	431a      	orrs	r2, r3
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	69db      	ldr	r3, [r3, #28]
 8005502:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005506:	431a      	orrs	r2, r3
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6a1b      	ldr	r3, [r3, #32]
 800550c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005510:	ea42 0103 	orr.w	r1, r2, r3
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005518:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	430a      	orrs	r2, r1
 8005522:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	699b      	ldr	r3, [r3, #24]
 8005528:	0c1b      	lsrs	r3, r3, #16
 800552a:	f003 0104 	and.w	r1, r3, #4
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005532:	f003 0210 	and.w	r2, r3, #16
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	430a      	orrs	r2, r1
 800553c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	69da      	ldr	r2, [r3, #28]
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800554c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	2200      	movs	r2, #0
 8005552:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2201      	movs	r2, #1
 8005558:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800555c:	2300      	movs	r3, #0
}
 800555e:	4618      	mov	r0, r3
 8005560:	3708      	adds	r7, #8
 8005562:	46bd      	mov	sp, r7
 8005564:	bd80      	pop	{r7, pc}

08005566 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005566:	b580      	push	{r7, lr}
 8005568:	b088      	sub	sp, #32
 800556a:	af00      	add	r7, sp, #0
 800556c:	60f8      	str	r0, [r7, #12]
 800556e:	60b9      	str	r1, [r7, #8]
 8005570:	603b      	str	r3, [r7, #0]
 8005572:	4613      	mov	r3, r2
 8005574:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005576:	f7fd fe6b 	bl	8003250 <HAL_GetTick>
 800557a:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800557c:	88fb      	ldrh	r3, [r7, #6]
 800557e:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005586:	b2db      	uxtb	r3, r3
 8005588:	2b01      	cmp	r3, #1
 800558a:	d001      	beq.n	8005590 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800558c:	2302      	movs	r3, #2
 800558e:	e12a      	b.n	80057e6 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8005590:	68bb      	ldr	r3, [r7, #8]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d002      	beq.n	800559c <HAL_SPI_Transmit+0x36>
 8005596:	88fb      	ldrh	r3, [r7, #6]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d101      	bne.n	80055a0 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800559c:	2301      	movs	r3, #1
 800559e:	e122      	b.n	80057e6 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80055a6:	2b01      	cmp	r3, #1
 80055a8:	d101      	bne.n	80055ae <HAL_SPI_Transmit+0x48>
 80055aa:	2302      	movs	r3, #2
 80055ac:	e11b      	b.n	80057e6 <HAL_SPI_Transmit+0x280>
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	2201      	movs	r2, #1
 80055b2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	2203      	movs	r2, #3
 80055ba:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	2200      	movs	r2, #0
 80055c2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	68ba      	ldr	r2, [r7, #8]
 80055c8:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	88fa      	ldrh	r2, [r7, #6]
 80055ce:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	88fa      	ldrh	r2, [r7, #6]
 80055d4:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	2200      	movs	r2, #0
 80055da:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	2200      	movs	r2, #0
 80055e0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	2200      	movs	r2, #0
 80055e6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	2200      	movs	r2, #0
 80055ec:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	2200      	movs	r2, #0
 80055f2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	689b      	ldr	r3, [r3, #8]
 80055f8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80055fc:	d10f      	bne.n	800561e <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	681a      	ldr	r2, [r3, #0]
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800560c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	681a      	ldr	r2, [r3, #0]
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800561c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005628:	2b40      	cmp	r3, #64	@ 0x40
 800562a:	d007      	beq.n	800563c <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	681a      	ldr	r2, [r3, #0]
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800563a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	68db      	ldr	r3, [r3, #12]
 8005640:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005644:	d152      	bne.n	80056ec <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	685b      	ldr	r3, [r3, #4]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d002      	beq.n	8005654 <HAL_SPI_Transmit+0xee>
 800564e:	8b7b      	ldrh	r3, [r7, #26]
 8005650:	2b01      	cmp	r3, #1
 8005652:	d145      	bne.n	80056e0 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005658:	881a      	ldrh	r2, [r3, #0]
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005664:	1c9a      	adds	r2, r3, #2
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800566e:	b29b      	uxth	r3, r3
 8005670:	3b01      	subs	r3, #1
 8005672:	b29a      	uxth	r2, r3
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005678:	e032      	b.n	80056e0 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	689b      	ldr	r3, [r3, #8]
 8005680:	f003 0302 	and.w	r3, r3, #2
 8005684:	2b02      	cmp	r3, #2
 8005686:	d112      	bne.n	80056ae <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800568c:	881a      	ldrh	r2, [r3, #0]
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005698:	1c9a      	adds	r2, r3, #2
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80056a2:	b29b      	uxth	r3, r3
 80056a4:	3b01      	subs	r3, #1
 80056a6:	b29a      	uxth	r2, r3
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	86da      	strh	r2, [r3, #54]	@ 0x36
 80056ac:	e018      	b.n	80056e0 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80056ae:	f7fd fdcf 	bl	8003250 <HAL_GetTick>
 80056b2:	4602      	mov	r2, r0
 80056b4:	69fb      	ldr	r3, [r7, #28]
 80056b6:	1ad3      	subs	r3, r2, r3
 80056b8:	683a      	ldr	r2, [r7, #0]
 80056ba:	429a      	cmp	r2, r3
 80056bc:	d803      	bhi.n	80056c6 <HAL_SPI_Transmit+0x160>
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056c4:	d102      	bne.n	80056cc <HAL_SPI_Transmit+0x166>
 80056c6:	683b      	ldr	r3, [r7, #0]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d109      	bne.n	80056e0 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	2201      	movs	r2, #1
 80056d0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	2200      	movs	r2, #0
 80056d8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80056dc:	2303      	movs	r3, #3
 80056de:	e082      	b.n	80057e6 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80056e4:	b29b      	uxth	r3, r3
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d1c7      	bne.n	800567a <HAL_SPI_Transmit+0x114>
 80056ea:	e053      	b.n	8005794 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	685b      	ldr	r3, [r3, #4]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d002      	beq.n	80056fa <HAL_SPI_Transmit+0x194>
 80056f4:	8b7b      	ldrh	r3, [r7, #26]
 80056f6:	2b01      	cmp	r3, #1
 80056f8:	d147      	bne.n	800578a <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	330c      	adds	r3, #12
 8005704:	7812      	ldrb	r2, [r2, #0]
 8005706:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800570c:	1c5a      	adds	r2, r3, #1
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005716:	b29b      	uxth	r3, r3
 8005718:	3b01      	subs	r3, #1
 800571a:	b29a      	uxth	r2, r3
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005720:	e033      	b.n	800578a <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	689b      	ldr	r3, [r3, #8]
 8005728:	f003 0302 	and.w	r3, r3, #2
 800572c:	2b02      	cmp	r3, #2
 800572e:	d113      	bne.n	8005758 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	330c      	adds	r3, #12
 800573a:	7812      	ldrb	r2, [r2, #0]
 800573c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005742:	1c5a      	adds	r2, r3, #1
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800574c:	b29b      	uxth	r3, r3
 800574e:	3b01      	subs	r3, #1
 8005750:	b29a      	uxth	r2, r3
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005756:	e018      	b.n	800578a <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005758:	f7fd fd7a 	bl	8003250 <HAL_GetTick>
 800575c:	4602      	mov	r2, r0
 800575e:	69fb      	ldr	r3, [r7, #28]
 8005760:	1ad3      	subs	r3, r2, r3
 8005762:	683a      	ldr	r2, [r7, #0]
 8005764:	429a      	cmp	r2, r3
 8005766:	d803      	bhi.n	8005770 <HAL_SPI_Transmit+0x20a>
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800576e:	d102      	bne.n	8005776 <HAL_SPI_Transmit+0x210>
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d109      	bne.n	800578a <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	2201      	movs	r2, #1
 800577a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	2200      	movs	r2, #0
 8005782:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005786:	2303      	movs	r3, #3
 8005788:	e02d      	b.n	80057e6 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800578e:	b29b      	uxth	r3, r3
 8005790:	2b00      	cmp	r3, #0
 8005792:	d1c6      	bne.n	8005722 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005794:	69fa      	ldr	r2, [r7, #28]
 8005796:	6839      	ldr	r1, [r7, #0]
 8005798:	68f8      	ldr	r0, [r7, #12]
 800579a:	f000 f8b1 	bl	8005900 <SPI_EndRxTxTransaction>
 800579e:	4603      	mov	r3, r0
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d002      	beq.n	80057aa <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	2220      	movs	r2, #32
 80057a8:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	689b      	ldr	r3, [r3, #8]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d10a      	bne.n	80057c8 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80057b2:	2300      	movs	r3, #0
 80057b4:	617b      	str	r3, [r7, #20]
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	68db      	ldr	r3, [r3, #12]
 80057bc:	617b      	str	r3, [r7, #20]
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	689b      	ldr	r3, [r3, #8]
 80057c4:	617b      	str	r3, [r7, #20]
 80057c6:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	2201      	movs	r2, #1
 80057cc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	2200      	movs	r2, #0
 80057d4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d001      	beq.n	80057e4 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80057e0:	2301      	movs	r3, #1
 80057e2:	e000      	b.n	80057e6 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80057e4:	2300      	movs	r3, #0
  }
}
 80057e6:	4618      	mov	r0, r3
 80057e8:	3720      	adds	r7, #32
 80057ea:	46bd      	mov	sp, r7
 80057ec:	bd80      	pop	{r7, pc}
	...

080057f0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b088      	sub	sp, #32
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	60f8      	str	r0, [r7, #12]
 80057f8:	60b9      	str	r1, [r7, #8]
 80057fa:	603b      	str	r3, [r7, #0]
 80057fc:	4613      	mov	r3, r2
 80057fe:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005800:	f7fd fd26 	bl	8003250 <HAL_GetTick>
 8005804:	4602      	mov	r2, r0
 8005806:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005808:	1a9b      	subs	r3, r3, r2
 800580a:	683a      	ldr	r2, [r7, #0]
 800580c:	4413      	add	r3, r2
 800580e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005810:	f7fd fd1e 	bl	8003250 <HAL_GetTick>
 8005814:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005816:	4b39      	ldr	r3, [pc, #228]	@ (80058fc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	015b      	lsls	r3, r3, #5
 800581c:	0d1b      	lsrs	r3, r3, #20
 800581e:	69fa      	ldr	r2, [r7, #28]
 8005820:	fb02 f303 	mul.w	r3, r2, r3
 8005824:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005826:	e054      	b.n	80058d2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800582e:	d050      	beq.n	80058d2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005830:	f7fd fd0e 	bl	8003250 <HAL_GetTick>
 8005834:	4602      	mov	r2, r0
 8005836:	69bb      	ldr	r3, [r7, #24]
 8005838:	1ad3      	subs	r3, r2, r3
 800583a:	69fa      	ldr	r2, [r7, #28]
 800583c:	429a      	cmp	r2, r3
 800583e:	d902      	bls.n	8005846 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005840:	69fb      	ldr	r3, [r7, #28]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d13d      	bne.n	80058c2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	685a      	ldr	r2, [r3, #4]
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005854:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	685b      	ldr	r3, [r3, #4]
 800585a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800585e:	d111      	bne.n	8005884 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	689b      	ldr	r3, [r3, #8]
 8005864:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005868:	d004      	beq.n	8005874 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	689b      	ldr	r3, [r3, #8]
 800586e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005872:	d107      	bne.n	8005884 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	681a      	ldr	r2, [r3, #0]
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005882:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005888:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800588c:	d10f      	bne.n	80058ae <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	681a      	ldr	r2, [r3, #0]
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800589c:	601a      	str	r2, [r3, #0]
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	681a      	ldr	r2, [r3, #0]
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80058ac:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	2201      	movs	r2, #1
 80058b2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	2200      	movs	r2, #0
 80058ba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80058be:	2303      	movs	r3, #3
 80058c0:	e017      	b.n	80058f2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80058c2:	697b      	ldr	r3, [r7, #20]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d101      	bne.n	80058cc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80058c8:	2300      	movs	r3, #0
 80058ca:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80058cc:	697b      	ldr	r3, [r7, #20]
 80058ce:	3b01      	subs	r3, #1
 80058d0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	689a      	ldr	r2, [r3, #8]
 80058d8:	68bb      	ldr	r3, [r7, #8]
 80058da:	4013      	ands	r3, r2
 80058dc:	68ba      	ldr	r2, [r7, #8]
 80058de:	429a      	cmp	r2, r3
 80058e0:	bf0c      	ite	eq
 80058e2:	2301      	moveq	r3, #1
 80058e4:	2300      	movne	r3, #0
 80058e6:	b2db      	uxtb	r3, r3
 80058e8:	461a      	mov	r2, r3
 80058ea:	79fb      	ldrb	r3, [r7, #7]
 80058ec:	429a      	cmp	r2, r3
 80058ee:	d19b      	bne.n	8005828 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80058f0:	2300      	movs	r3, #0
}
 80058f2:	4618      	mov	r0, r3
 80058f4:	3720      	adds	r7, #32
 80058f6:	46bd      	mov	sp, r7
 80058f8:	bd80      	pop	{r7, pc}
 80058fa:	bf00      	nop
 80058fc:	2000001c 	.word	0x2000001c

08005900 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005900:	b580      	push	{r7, lr}
 8005902:	b088      	sub	sp, #32
 8005904:	af02      	add	r7, sp, #8
 8005906:	60f8      	str	r0, [r7, #12]
 8005908:	60b9      	str	r1, [r7, #8]
 800590a:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	9300      	str	r3, [sp, #0]
 8005910:	68bb      	ldr	r3, [r7, #8]
 8005912:	2201      	movs	r2, #1
 8005914:	2102      	movs	r1, #2
 8005916:	68f8      	ldr	r0, [r7, #12]
 8005918:	f7ff ff6a 	bl	80057f0 <SPI_WaitFlagStateUntilTimeout>
 800591c:	4603      	mov	r3, r0
 800591e:	2b00      	cmp	r3, #0
 8005920:	d007      	beq.n	8005932 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005926:	f043 0220 	orr.w	r2, r3, #32
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800592e:	2303      	movs	r3, #3
 8005930:	e032      	b.n	8005998 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005932:	4b1b      	ldr	r3, [pc, #108]	@ (80059a0 <SPI_EndRxTxTransaction+0xa0>)
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	4a1b      	ldr	r2, [pc, #108]	@ (80059a4 <SPI_EndRxTxTransaction+0xa4>)
 8005938:	fba2 2303 	umull	r2, r3, r2, r3
 800593c:	0d5b      	lsrs	r3, r3, #21
 800593e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005942:	fb02 f303 	mul.w	r3, r2, r3
 8005946:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	685b      	ldr	r3, [r3, #4]
 800594c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005950:	d112      	bne.n	8005978 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	9300      	str	r3, [sp, #0]
 8005956:	68bb      	ldr	r3, [r7, #8]
 8005958:	2200      	movs	r2, #0
 800595a:	2180      	movs	r1, #128	@ 0x80
 800595c:	68f8      	ldr	r0, [r7, #12]
 800595e:	f7ff ff47 	bl	80057f0 <SPI_WaitFlagStateUntilTimeout>
 8005962:	4603      	mov	r3, r0
 8005964:	2b00      	cmp	r3, #0
 8005966:	d016      	beq.n	8005996 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800596c:	f043 0220 	orr.w	r2, r3, #32
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005974:	2303      	movs	r3, #3
 8005976:	e00f      	b.n	8005998 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005978:	697b      	ldr	r3, [r7, #20]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d00a      	beq.n	8005994 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800597e:	697b      	ldr	r3, [r7, #20]
 8005980:	3b01      	subs	r3, #1
 8005982:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	689b      	ldr	r3, [r3, #8]
 800598a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800598e:	2b80      	cmp	r3, #128	@ 0x80
 8005990:	d0f2      	beq.n	8005978 <SPI_EndRxTxTransaction+0x78>
 8005992:	e000      	b.n	8005996 <SPI_EndRxTxTransaction+0x96>
        break;
 8005994:	bf00      	nop
  }

  return HAL_OK;
 8005996:	2300      	movs	r3, #0
}
 8005998:	4618      	mov	r0, r3
 800599a:	3718      	adds	r7, #24
 800599c:	46bd      	mov	sp, r7
 800599e:	bd80      	pop	{r7, pc}
 80059a0:	2000001c 	.word	0x2000001c
 80059a4:	165e9f81 	.word	0x165e9f81

080059a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80059a8:	b580      	push	{r7, lr}
 80059aa:	b082      	sub	sp, #8
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d101      	bne.n	80059ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80059b6:	2301      	movs	r3, #1
 80059b8:	e041      	b.n	8005a3e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80059c0:	b2db      	uxtb	r3, r3
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d106      	bne.n	80059d4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2200      	movs	r2, #0
 80059ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80059ce:	6878      	ldr	r0, [r7, #4]
 80059d0:	f7fd f88e 	bl	8002af0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2202      	movs	r2, #2
 80059d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681a      	ldr	r2, [r3, #0]
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	3304      	adds	r3, #4
 80059e4:	4619      	mov	r1, r3
 80059e6:	4610      	mov	r0, r2
 80059e8:	f000 fd00 	bl	80063ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2201      	movs	r2, #1
 80059f0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2201      	movs	r2, #1
 80059f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2201      	movs	r2, #1
 8005a00:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2201      	movs	r2, #1
 8005a08:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2201      	movs	r2, #1
 8005a10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2201      	movs	r2, #1
 8005a18:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2201      	movs	r2, #1
 8005a20:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2201      	movs	r2, #1
 8005a28:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2201      	movs	r2, #1
 8005a30:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2201      	movs	r2, #1
 8005a38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005a3c:	2300      	movs	r3, #0
}
 8005a3e:	4618      	mov	r0, r3
 8005a40:	3708      	adds	r7, #8
 8005a42:	46bd      	mov	sp, r7
 8005a44:	bd80      	pop	{r7, pc}
	...

08005a48 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005a48:	b480      	push	{r7}
 8005a4a:	b085      	sub	sp, #20
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005a56:	b2db      	uxtb	r3, r3
 8005a58:	2b01      	cmp	r3, #1
 8005a5a:	d001      	beq.n	8005a60 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005a5c:	2301      	movs	r3, #1
 8005a5e:	e04e      	b.n	8005afe <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2202      	movs	r2, #2
 8005a64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	68da      	ldr	r2, [r3, #12]
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f042 0201 	orr.w	r2, r2, #1
 8005a76:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	4a23      	ldr	r2, [pc, #140]	@ (8005b0c <HAL_TIM_Base_Start_IT+0xc4>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d022      	beq.n	8005ac8 <HAL_TIM_Base_Start_IT+0x80>
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a8a:	d01d      	beq.n	8005ac8 <HAL_TIM_Base_Start_IT+0x80>
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	4a1f      	ldr	r2, [pc, #124]	@ (8005b10 <HAL_TIM_Base_Start_IT+0xc8>)
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d018      	beq.n	8005ac8 <HAL_TIM_Base_Start_IT+0x80>
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	4a1e      	ldr	r2, [pc, #120]	@ (8005b14 <HAL_TIM_Base_Start_IT+0xcc>)
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	d013      	beq.n	8005ac8 <HAL_TIM_Base_Start_IT+0x80>
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	4a1c      	ldr	r2, [pc, #112]	@ (8005b18 <HAL_TIM_Base_Start_IT+0xd0>)
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	d00e      	beq.n	8005ac8 <HAL_TIM_Base_Start_IT+0x80>
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	4a1b      	ldr	r2, [pc, #108]	@ (8005b1c <HAL_TIM_Base_Start_IT+0xd4>)
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	d009      	beq.n	8005ac8 <HAL_TIM_Base_Start_IT+0x80>
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	4a19      	ldr	r2, [pc, #100]	@ (8005b20 <HAL_TIM_Base_Start_IT+0xd8>)
 8005aba:	4293      	cmp	r3, r2
 8005abc:	d004      	beq.n	8005ac8 <HAL_TIM_Base_Start_IT+0x80>
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	4a18      	ldr	r2, [pc, #96]	@ (8005b24 <HAL_TIM_Base_Start_IT+0xdc>)
 8005ac4:	4293      	cmp	r3, r2
 8005ac6:	d111      	bne.n	8005aec <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	689b      	ldr	r3, [r3, #8]
 8005ace:	f003 0307 	and.w	r3, r3, #7
 8005ad2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	2b06      	cmp	r3, #6
 8005ad8:	d010      	beq.n	8005afc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	681a      	ldr	r2, [r3, #0]
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f042 0201 	orr.w	r2, r2, #1
 8005ae8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005aea:	e007      	b.n	8005afc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	681a      	ldr	r2, [r3, #0]
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f042 0201 	orr.w	r2, r2, #1
 8005afa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005afc:	2300      	movs	r3, #0
}
 8005afe:	4618      	mov	r0, r3
 8005b00:	3714      	adds	r7, #20
 8005b02:	46bd      	mov	sp, r7
 8005b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b08:	4770      	bx	lr
 8005b0a:	bf00      	nop
 8005b0c:	40010000 	.word	0x40010000
 8005b10:	40000400 	.word	0x40000400
 8005b14:	40000800 	.word	0x40000800
 8005b18:	40000c00 	.word	0x40000c00
 8005b1c:	40010400 	.word	0x40010400
 8005b20:	40014000 	.word	0x40014000
 8005b24:	40001800 	.word	0x40001800

08005b28 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8005b28:	b480      	push	{r7}
 8005b2a:	b083      	sub	sp, #12
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	68da      	ldr	r2, [r3, #12]
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f022 0201 	bic.w	r2, r2, #1
 8005b3e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	6a1a      	ldr	r2, [r3, #32]
 8005b46:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005b4a:	4013      	ands	r3, r2
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d10f      	bne.n	8005b70 <HAL_TIM_Base_Stop_IT+0x48>
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	6a1a      	ldr	r2, [r3, #32]
 8005b56:	f240 4344 	movw	r3, #1092	@ 0x444
 8005b5a:	4013      	ands	r3, r2
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d107      	bne.n	8005b70 <HAL_TIM_Base_Stop_IT+0x48>
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	681a      	ldr	r2, [r3, #0]
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f022 0201 	bic.w	r2, r2, #1
 8005b6e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2201      	movs	r2, #1
 8005b74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8005b78:	2300      	movs	r3, #0
}
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	370c      	adds	r7, #12
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b84:	4770      	bx	lr

08005b86 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005b86:	b580      	push	{r7, lr}
 8005b88:	b082      	sub	sp, #8
 8005b8a:	af00      	add	r7, sp, #0
 8005b8c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d101      	bne.n	8005b98 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005b94:	2301      	movs	r3, #1
 8005b96:	e041      	b.n	8005c1c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005b9e:	b2db      	uxtb	r3, r3
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d106      	bne.n	8005bb2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005bac:	6878      	ldr	r0, [r7, #4]
 8005bae:	f000 f839 	bl	8005c24 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	2202      	movs	r2, #2
 8005bb6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681a      	ldr	r2, [r3, #0]
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	3304      	adds	r3, #4
 8005bc2:	4619      	mov	r1, r3
 8005bc4:	4610      	mov	r0, r2
 8005bc6:	f000 fc11 	bl	80063ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	2201      	movs	r2, #1
 8005bce:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	2201      	movs	r2, #1
 8005bd6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2201      	movs	r2, #1
 8005bde:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	2201      	movs	r2, #1
 8005be6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	2201      	movs	r2, #1
 8005bee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	2201      	movs	r2, #1
 8005bf6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	2201      	movs	r2, #1
 8005bfe:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	2201      	movs	r2, #1
 8005c06:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	2201      	movs	r2, #1
 8005c0e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	2201      	movs	r2, #1
 8005c16:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005c1a:	2300      	movs	r3, #0
}
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	3708      	adds	r7, #8
 8005c20:	46bd      	mov	sp, r7
 8005c22:	bd80      	pop	{r7, pc}

08005c24 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005c24:	b480      	push	{r7}
 8005c26:	b083      	sub	sp, #12
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005c2c:	bf00      	nop
 8005c2e:	370c      	adds	r7, #12
 8005c30:	46bd      	mov	sp, r7
 8005c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c36:	4770      	bx	lr

08005c38 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b084      	sub	sp, #16
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
 8005c40:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005c42:	683b      	ldr	r3, [r7, #0]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d109      	bne.n	8005c5c <HAL_TIM_PWM_Start+0x24>
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005c4e:	b2db      	uxtb	r3, r3
 8005c50:	2b01      	cmp	r3, #1
 8005c52:	bf14      	ite	ne
 8005c54:	2301      	movne	r3, #1
 8005c56:	2300      	moveq	r3, #0
 8005c58:	b2db      	uxtb	r3, r3
 8005c5a:	e022      	b.n	8005ca2 <HAL_TIM_PWM_Start+0x6a>
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	2b04      	cmp	r3, #4
 8005c60:	d109      	bne.n	8005c76 <HAL_TIM_PWM_Start+0x3e>
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005c68:	b2db      	uxtb	r3, r3
 8005c6a:	2b01      	cmp	r3, #1
 8005c6c:	bf14      	ite	ne
 8005c6e:	2301      	movne	r3, #1
 8005c70:	2300      	moveq	r3, #0
 8005c72:	b2db      	uxtb	r3, r3
 8005c74:	e015      	b.n	8005ca2 <HAL_TIM_PWM_Start+0x6a>
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	2b08      	cmp	r3, #8
 8005c7a:	d109      	bne.n	8005c90 <HAL_TIM_PWM_Start+0x58>
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005c82:	b2db      	uxtb	r3, r3
 8005c84:	2b01      	cmp	r3, #1
 8005c86:	bf14      	ite	ne
 8005c88:	2301      	movne	r3, #1
 8005c8a:	2300      	moveq	r3, #0
 8005c8c:	b2db      	uxtb	r3, r3
 8005c8e:	e008      	b.n	8005ca2 <HAL_TIM_PWM_Start+0x6a>
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005c96:	b2db      	uxtb	r3, r3
 8005c98:	2b01      	cmp	r3, #1
 8005c9a:	bf14      	ite	ne
 8005c9c:	2301      	movne	r3, #1
 8005c9e:	2300      	moveq	r3, #0
 8005ca0:	b2db      	uxtb	r3, r3
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d001      	beq.n	8005caa <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005ca6:	2301      	movs	r3, #1
 8005ca8:	e07c      	b.n	8005da4 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005caa:	683b      	ldr	r3, [r7, #0]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d104      	bne.n	8005cba <HAL_TIM_PWM_Start+0x82>
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2202      	movs	r2, #2
 8005cb4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005cb8:	e013      	b.n	8005ce2 <HAL_TIM_PWM_Start+0xaa>
 8005cba:	683b      	ldr	r3, [r7, #0]
 8005cbc:	2b04      	cmp	r3, #4
 8005cbe:	d104      	bne.n	8005cca <HAL_TIM_PWM_Start+0x92>
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2202      	movs	r2, #2
 8005cc4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005cc8:	e00b      	b.n	8005ce2 <HAL_TIM_PWM_Start+0xaa>
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	2b08      	cmp	r3, #8
 8005cce:	d104      	bne.n	8005cda <HAL_TIM_PWM_Start+0xa2>
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2202      	movs	r2, #2
 8005cd4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005cd8:	e003      	b.n	8005ce2 <HAL_TIM_PWM_Start+0xaa>
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	2202      	movs	r2, #2
 8005cde:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	2201      	movs	r2, #1
 8005ce8:	6839      	ldr	r1, [r7, #0]
 8005cea:	4618      	mov	r0, r3
 8005cec:	f000 fe74 	bl	80069d8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	4a2d      	ldr	r2, [pc, #180]	@ (8005dac <HAL_TIM_PWM_Start+0x174>)
 8005cf6:	4293      	cmp	r3, r2
 8005cf8:	d004      	beq.n	8005d04 <HAL_TIM_PWM_Start+0xcc>
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	4a2c      	ldr	r2, [pc, #176]	@ (8005db0 <HAL_TIM_PWM_Start+0x178>)
 8005d00:	4293      	cmp	r3, r2
 8005d02:	d101      	bne.n	8005d08 <HAL_TIM_PWM_Start+0xd0>
 8005d04:	2301      	movs	r3, #1
 8005d06:	e000      	b.n	8005d0a <HAL_TIM_PWM_Start+0xd2>
 8005d08:	2300      	movs	r3, #0
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d007      	beq.n	8005d1e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005d1c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	4a22      	ldr	r2, [pc, #136]	@ (8005dac <HAL_TIM_PWM_Start+0x174>)
 8005d24:	4293      	cmp	r3, r2
 8005d26:	d022      	beq.n	8005d6e <HAL_TIM_PWM_Start+0x136>
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d30:	d01d      	beq.n	8005d6e <HAL_TIM_PWM_Start+0x136>
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	4a1f      	ldr	r2, [pc, #124]	@ (8005db4 <HAL_TIM_PWM_Start+0x17c>)
 8005d38:	4293      	cmp	r3, r2
 8005d3a:	d018      	beq.n	8005d6e <HAL_TIM_PWM_Start+0x136>
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	4a1d      	ldr	r2, [pc, #116]	@ (8005db8 <HAL_TIM_PWM_Start+0x180>)
 8005d42:	4293      	cmp	r3, r2
 8005d44:	d013      	beq.n	8005d6e <HAL_TIM_PWM_Start+0x136>
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	4a1c      	ldr	r2, [pc, #112]	@ (8005dbc <HAL_TIM_PWM_Start+0x184>)
 8005d4c:	4293      	cmp	r3, r2
 8005d4e:	d00e      	beq.n	8005d6e <HAL_TIM_PWM_Start+0x136>
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	4a16      	ldr	r2, [pc, #88]	@ (8005db0 <HAL_TIM_PWM_Start+0x178>)
 8005d56:	4293      	cmp	r3, r2
 8005d58:	d009      	beq.n	8005d6e <HAL_TIM_PWM_Start+0x136>
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	4a18      	ldr	r2, [pc, #96]	@ (8005dc0 <HAL_TIM_PWM_Start+0x188>)
 8005d60:	4293      	cmp	r3, r2
 8005d62:	d004      	beq.n	8005d6e <HAL_TIM_PWM_Start+0x136>
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	4a16      	ldr	r2, [pc, #88]	@ (8005dc4 <HAL_TIM_PWM_Start+0x18c>)
 8005d6a:	4293      	cmp	r3, r2
 8005d6c:	d111      	bne.n	8005d92 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	689b      	ldr	r3, [r3, #8]
 8005d74:	f003 0307 	and.w	r3, r3, #7
 8005d78:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	2b06      	cmp	r3, #6
 8005d7e:	d010      	beq.n	8005da2 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	681a      	ldr	r2, [r3, #0]
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f042 0201 	orr.w	r2, r2, #1
 8005d8e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d90:	e007      	b.n	8005da2 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	681a      	ldr	r2, [r3, #0]
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f042 0201 	orr.w	r2, r2, #1
 8005da0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005da2:	2300      	movs	r3, #0
}
 8005da4:	4618      	mov	r0, r3
 8005da6:	3710      	adds	r7, #16
 8005da8:	46bd      	mov	sp, r7
 8005daa:	bd80      	pop	{r7, pc}
 8005dac:	40010000 	.word	0x40010000
 8005db0:	40010400 	.word	0x40010400
 8005db4:	40000400 	.word	0x40000400
 8005db8:	40000800 	.word	0x40000800
 8005dbc:	40000c00 	.word	0x40000c00
 8005dc0:	40014000 	.word	0x40014000
 8005dc4:	40001800 	.word	0x40001800

08005dc8 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005dc8:	b580      	push	{r7, lr}
 8005dca:	b082      	sub	sp, #8
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
 8005dd0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	6839      	ldr	r1, [r7, #0]
 8005dda:	4618      	mov	r0, r3
 8005ddc:	f000 fdfc 	bl	80069d8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	4a2e      	ldr	r2, [pc, #184]	@ (8005ea0 <HAL_TIM_PWM_Stop+0xd8>)
 8005de6:	4293      	cmp	r3, r2
 8005de8:	d004      	beq.n	8005df4 <HAL_TIM_PWM_Stop+0x2c>
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	4a2d      	ldr	r2, [pc, #180]	@ (8005ea4 <HAL_TIM_PWM_Stop+0xdc>)
 8005df0:	4293      	cmp	r3, r2
 8005df2:	d101      	bne.n	8005df8 <HAL_TIM_PWM_Stop+0x30>
 8005df4:	2301      	movs	r3, #1
 8005df6:	e000      	b.n	8005dfa <HAL_TIM_PWM_Stop+0x32>
 8005df8:	2300      	movs	r3, #0
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d017      	beq.n	8005e2e <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	6a1a      	ldr	r2, [r3, #32]
 8005e04:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005e08:	4013      	ands	r3, r2
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d10f      	bne.n	8005e2e <HAL_TIM_PWM_Stop+0x66>
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	6a1a      	ldr	r2, [r3, #32]
 8005e14:	f240 4344 	movw	r3, #1092	@ 0x444
 8005e18:	4013      	ands	r3, r2
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d107      	bne.n	8005e2e <HAL_TIM_PWM_Stop+0x66>
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005e2c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	6a1a      	ldr	r2, [r3, #32]
 8005e34:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005e38:	4013      	ands	r3, r2
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d10f      	bne.n	8005e5e <HAL_TIM_PWM_Stop+0x96>
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	6a1a      	ldr	r2, [r3, #32]
 8005e44:	f240 4344 	movw	r3, #1092	@ 0x444
 8005e48:	4013      	ands	r3, r2
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d107      	bne.n	8005e5e <HAL_TIM_PWM_Stop+0x96>
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	681a      	ldr	r2, [r3, #0]
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f022 0201 	bic.w	r2, r2, #1
 8005e5c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d104      	bne.n	8005e6e <HAL_TIM_PWM_Stop+0xa6>
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2201      	movs	r2, #1
 8005e68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005e6c:	e013      	b.n	8005e96 <HAL_TIM_PWM_Stop+0xce>
 8005e6e:	683b      	ldr	r3, [r7, #0]
 8005e70:	2b04      	cmp	r3, #4
 8005e72:	d104      	bne.n	8005e7e <HAL_TIM_PWM_Stop+0xb6>
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2201      	movs	r2, #1
 8005e78:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005e7c:	e00b      	b.n	8005e96 <HAL_TIM_PWM_Stop+0xce>
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	2b08      	cmp	r3, #8
 8005e82:	d104      	bne.n	8005e8e <HAL_TIM_PWM_Stop+0xc6>
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2201      	movs	r2, #1
 8005e88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005e8c:	e003      	b.n	8005e96 <HAL_TIM_PWM_Stop+0xce>
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	2201      	movs	r2, #1
 8005e92:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 8005e96:	2300      	movs	r3, #0
}
 8005e98:	4618      	mov	r0, r3
 8005e9a:	3708      	adds	r7, #8
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	bd80      	pop	{r7, pc}
 8005ea0:	40010000 	.word	0x40010000
 8005ea4:	40010400 	.word	0x40010400

08005ea8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	b084      	sub	sp, #16
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	68db      	ldr	r3, [r3, #12]
 8005eb6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	691b      	ldr	r3, [r3, #16]
 8005ebe:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005ec0:	68bb      	ldr	r3, [r7, #8]
 8005ec2:	f003 0302 	and.w	r3, r3, #2
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d020      	beq.n	8005f0c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	f003 0302 	and.w	r3, r3, #2
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d01b      	beq.n	8005f0c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f06f 0202 	mvn.w	r2, #2
 8005edc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	2201      	movs	r2, #1
 8005ee2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	699b      	ldr	r3, [r3, #24]
 8005eea:	f003 0303 	and.w	r3, r3, #3
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d003      	beq.n	8005efa <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005ef2:	6878      	ldr	r0, [r7, #4]
 8005ef4:	f000 fa5b 	bl	80063ae <HAL_TIM_IC_CaptureCallback>
 8005ef8:	e005      	b.n	8005f06 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005efa:	6878      	ldr	r0, [r7, #4]
 8005efc:	f000 fa4d 	bl	800639a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f00:	6878      	ldr	r0, [r7, #4]
 8005f02:	f000 fa5e 	bl	80063c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	2200      	movs	r2, #0
 8005f0a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005f0c:	68bb      	ldr	r3, [r7, #8]
 8005f0e:	f003 0304 	and.w	r3, r3, #4
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d020      	beq.n	8005f58 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	f003 0304 	and.w	r3, r3, #4
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d01b      	beq.n	8005f58 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f06f 0204 	mvn.w	r2, #4
 8005f28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	2202      	movs	r2, #2
 8005f2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	699b      	ldr	r3, [r3, #24]
 8005f36:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d003      	beq.n	8005f46 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f3e:	6878      	ldr	r0, [r7, #4]
 8005f40:	f000 fa35 	bl	80063ae <HAL_TIM_IC_CaptureCallback>
 8005f44:	e005      	b.n	8005f52 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f46:	6878      	ldr	r0, [r7, #4]
 8005f48:	f000 fa27 	bl	800639a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f4c:	6878      	ldr	r0, [r7, #4]
 8005f4e:	f000 fa38 	bl	80063c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	2200      	movs	r2, #0
 8005f56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005f58:	68bb      	ldr	r3, [r7, #8]
 8005f5a:	f003 0308 	and.w	r3, r3, #8
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d020      	beq.n	8005fa4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	f003 0308 	and.w	r3, r3, #8
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d01b      	beq.n	8005fa4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f06f 0208 	mvn.w	r2, #8
 8005f74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	2204      	movs	r2, #4
 8005f7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	69db      	ldr	r3, [r3, #28]
 8005f82:	f003 0303 	and.w	r3, r3, #3
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d003      	beq.n	8005f92 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f8a:	6878      	ldr	r0, [r7, #4]
 8005f8c:	f000 fa0f 	bl	80063ae <HAL_TIM_IC_CaptureCallback>
 8005f90:	e005      	b.n	8005f9e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f92:	6878      	ldr	r0, [r7, #4]
 8005f94:	f000 fa01 	bl	800639a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f98:	6878      	ldr	r0, [r7, #4]
 8005f9a:	f000 fa12 	bl	80063c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005fa4:	68bb      	ldr	r3, [r7, #8]
 8005fa6:	f003 0310 	and.w	r3, r3, #16
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d020      	beq.n	8005ff0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	f003 0310 	and.w	r3, r3, #16
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d01b      	beq.n	8005ff0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f06f 0210 	mvn.w	r2, #16
 8005fc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	2208      	movs	r2, #8
 8005fc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	69db      	ldr	r3, [r3, #28]
 8005fce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d003      	beq.n	8005fde <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005fd6:	6878      	ldr	r0, [r7, #4]
 8005fd8:	f000 f9e9 	bl	80063ae <HAL_TIM_IC_CaptureCallback>
 8005fdc:	e005      	b.n	8005fea <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fde:	6878      	ldr	r0, [r7, #4]
 8005fe0:	f000 f9db 	bl	800639a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fe4:	6878      	ldr	r0, [r7, #4]
 8005fe6:	f000 f9ec 	bl	80063c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	2200      	movs	r2, #0
 8005fee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005ff0:	68bb      	ldr	r3, [r7, #8]
 8005ff2:	f003 0301 	and.w	r3, r3, #1
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d00c      	beq.n	8006014 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	f003 0301 	and.w	r3, r3, #1
 8006000:	2b00      	cmp	r3, #0
 8006002:	d007      	beq.n	8006014 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f06f 0201 	mvn.w	r2, #1
 800600c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800600e:	6878      	ldr	r0, [r7, #4]
 8006010:	f7fb ffaa 	bl	8001f68 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006014:	68bb      	ldr	r3, [r7, #8]
 8006016:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800601a:	2b00      	cmp	r3, #0
 800601c:	d00c      	beq.n	8006038 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006024:	2b00      	cmp	r3, #0
 8006026:	d007      	beq.n	8006038 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006030:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006032:	6878      	ldr	r0, [r7, #4]
 8006034:	f000 fd7c 	bl	8006b30 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006038:	68bb      	ldr	r3, [r7, #8]
 800603a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800603e:	2b00      	cmp	r3, #0
 8006040:	d00c      	beq.n	800605c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006048:	2b00      	cmp	r3, #0
 800604a:	d007      	beq.n	800605c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006054:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006056:	6878      	ldr	r0, [r7, #4]
 8006058:	f000 f9bd 	bl	80063d6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800605c:	68bb      	ldr	r3, [r7, #8]
 800605e:	f003 0320 	and.w	r3, r3, #32
 8006062:	2b00      	cmp	r3, #0
 8006064:	d00c      	beq.n	8006080 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	f003 0320 	and.w	r3, r3, #32
 800606c:	2b00      	cmp	r3, #0
 800606e:	d007      	beq.n	8006080 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f06f 0220 	mvn.w	r2, #32
 8006078:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800607a:	6878      	ldr	r0, [r7, #4]
 800607c:	f000 fd4e 	bl	8006b1c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006080:	bf00      	nop
 8006082:	3710      	adds	r7, #16
 8006084:	46bd      	mov	sp, r7
 8006086:	bd80      	pop	{r7, pc}

08006088 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006088:	b580      	push	{r7, lr}
 800608a:	b086      	sub	sp, #24
 800608c:	af00      	add	r7, sp, #0
 800608e:	60f8      	str	r0, [r7, #12]
 8006090:	60b9      	str	r1, [r7, #8]
 8006092:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006094:	2300      	movs	r3, #0
 8006096:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800609e:	2b01      	cmp	r3, #1
 80060a0:	d101      	bne.n	80060a6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80060a2:	2302      	movs	r3, #2
 80060a4:	e0ae      	b.n	8006204 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	2201      	movs	r2, #1
 80060aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	2b0c      	cmp	r3, #12
 80060b2:	f200 809f 	bhi.w	80061f4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80060b6:	a201      	add	r2, pc, #4	@ (adr r2, 80060bc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80060b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060bc:	080060f1 	.word	0x080060f1
 80060c0:	080061f5 	.word	0x080061f5
 80060c4:	080061f5 	.word	0x080061f5
 80060c8:	080061f5 	.word	0x080061f5
 80060cc:	08006131 	.word	0x08006131
 80060d0:	080061f5 	.word	0x080061f5
 80060d4:	080061f5 	.word	0x080061f5
 80060d8:	080061f5 	.word	0x080061f5
 80060dc:	08006173 	.word	0x08006173
 80060e0:	080061f5 	.word	0x080061f5
 80060e4:	080061f5 	.word	0x080061f5
 80060e8:	080061f5 	.word	0x080061f5
 80060ec:	080061b3 	.word	0x080061b3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	68b9      	ldr	r1, [r7, #8]
 80060f6:	4618      	mov	r0, r3
 80060f8:	f000 fa24 	bl	8006544 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	699a      	ldr	r2, [r3, #24]
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	f042 0208 	orr.w	r2, r2, #8
 800610a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	699a      	ldr	r2, [r3, #24]
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f022 0204 	bic.w	r2, r2, #4
 800611a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	6999      	ldr	r1, [r3, #24]
 8006122:	68bb      	ldr	r3, [r7, #8]
 8006124:	691a      	ldr	r2, [r3, #16]
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	430a      	orrs	r2, r1
 800612c:	619a      	str	r2, [r3, #24]
      break;
 800612e:	e064      	b.n	80061fa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	68b9      	ldr	r1, [r7, #8]
 8006136:	4618      	mov	r0, r3
 8006138:	f000 fa74 	bl	8006624 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	699a      	ldr	r2, [r3, #24]
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800614a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	699a      	ldr	r2, [r3, #24]
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800615a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	6999      	ldr	r1, [r3, #24]
 8006162:	68bb      	ldr	r3, [r7, #8]
 8006164:	691b      	ldr	r3, [r3, #16]
 8006166:	021a      	lsls	r2, r3, #8
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	430a      	orrs	r2, r1
 800616e:	619a      	str	r2, [r3, #24]
      break;
 8006170:	e043      	b.n	80061fa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	68b9      	ldr	r1, [r7, #8]
 8006178:	4618      	mov	r0, r3
 800617a:	f000 fac9 	bl	8006710 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	69da      	ldr	r2, [r3, #28]
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	f042 0208 	orr.w	r2, r2, #8
 800618c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	69da      	ldr	r2, [r3, #28]
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f022 0204 	bic.w	r2, r2, #4
 800619c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	69d9      	ldr	r1, [r3, #28]
 80061a4:	68bb      	ldr	r3, [r7, #8]
 80061a6:	691a      	ldr	r2, [r3, #16]
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	430a      	orrs	r2, r1
 80061ae:	61da      	str	r2, [r3, #28]
      break;
 80061b0:	e023      	b.n	80061fa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	68b9      	ldr	r1, [r7, #8]
 80061b8:	4618      	mov	r0, r3
 80061ba:	f000 fb1d 	bl	80067f8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	69da      	ldr	r2, [r3, #28]
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80061cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	69da      	ldr	r2, [r3, #28]
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80061dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	69d9      	ldr	r1, [r3, #28]
 80061e4:	68bb      	ldr	r3, [r7, #8]
 80061e6:	691b      	ldr	r3, [r3, #16]
 80061e8:	021a      	lsls	r2, r3, #8
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	430a      	orrs	r2, r1
 80061f0:	61da      	str	r2, [r3, #28]
      break;
 80061f2:	e002      	b.n	80061fa <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80061f4:	2301      	movs	r3, #1
 80061f6:	75fb      	strb	r3, [r7, #23]
      break;
 80061f8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	2200      	movs	r2, #0
 80061fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006202:	7dfb      	ldrb	r3, [r7, #23]
}
 8006204:	4618      	mov	r0, r3
 8006206:	3718      	adds	r7, #24
 8006208:	46bd      	mov	sp, r7
 800620a:	bd80      	pop	{r7, pc}

0800620c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800620c:	b580      	push	{r7, lr}
 800620e:	b084      	sub	sp, #16
 8006210:	af00      	add	r7, sp, #0
 8006212:	6078      	str	r0, [r7, #4]
 8006214:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006216:	2300      	movs	r3, #0
 8006218:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006220:	2b01      	cmp	r3, #1
 8006222:	d101      	bne.n	8006228 <HAL_TIM_ConfigClockSource+0x1c>
 8006224:	2302      	movs	r3, #2
 8006226:	e0b4      	b.n	8006392 <HAL_TIM_ConfigClockSource+0x186>
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2201      	movs	r2, #1
 800622c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2202      	movs	r2, #2
 8006234:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	689b      	ldr	r3, [r3, #8]
 800623e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006240:	68bb      	ldr	r3, [r7, #8]
 8006242:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006246:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006248:	68bb      	ldr	r3, [r7, #8]
 800624a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800624e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	68ba      	ldr	r2, [r7, #8]
 8006256:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006260:	d03e      	beq.n	80062e0 <HAL_TIM_ConfigClockSource+0xd4>
 8006262:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006266:	f200 8087 	bhi.w	8006378 <HAL_TIM_ConfigClockSource+0x16c>
 800626a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800626e:	f000 8086 	beq.w	800637e <HAL_TIM_ConfigClockSource+0x172>
 8006272:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006276:	d87f      	bhi.n	8006378 <HAL_TIM_ConfigClockSource+0x16c>
 8006278:	2b70      	cmp	r3, #112	@ 0x70
 800627a:	d01a      	beq.n	80062b2 <HAL_TIM_ConfigClockSource+0xa6>
 800627c:	2b70      	cmp	r3, #112	@ 0x70
 800627e:	d87b      	bhi.n	8006378 <HAL_TIM_ConfigClockSource+0x16c>
 8006280:	2b60      	cmp	r3, #96	@ 0x60
 8006282:	d050      	beq.n	8006326 <HAL_TIM_ConfigClockSource+0x11a>
 8006284:	2b60      	cmp	r3, #96	@ 0x60
 8006286:	d877      	bhi.n	8006378 <HAL_TIM_ConfigClockSource+0x16c>
 8006288:	2b50      	cmp	r3, #80	@ 0x50
 800628a:	d03c      	beq.n	8006306 <HAL_TIM_ConfigClockSource+0xfa>
 800628c:	2b50      	cmp	r3, #80	@ 0x50
 800628e:	d873      	bhi.n	8006378 <HAL_TIM_ConfigClockSource+0x16c>
 8006290:	2b40      	cmp	r3, #64	@ 0x40
 8006292:	d058      	beq.n	8006346 <HAL_TIM_ConfigClockSource+0x13a>
 8006294:	2b40      	cmp	r3, #64	@ 0x40
 8006296:	d86f      	bhi.n	8006378 <HAL_TIM_ConfigClockSource+0x16c>
 8006298:	2b30      	cmp	r3, #48	@ 0x30
 800629a:	d064      	beq.n	8006366 <HAL_TIM_ConfigClockSource+0x15a>
 800629c:	2b30      	cmp	r3, #48	@ 0x30
 800629e:	d86b      	bhi.n	8006378 <HAL_TIM_ConfigClockSource+0x16c>
 80062a0:	2b20      	cmp	r3, #32
 80062a2:	d060      	beq.n	8006366 <HAL_TIM_ConfigClockSource+0x15a>
 80062a4:	2b20      	cmp	r3, #32
 80062a6:	d867      	bhi.n	8006378 <HAL_TIM_ConfigClockSource+0x16c>
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d05c      	beq.n	8006366 <HAL_TIM_ConfigClockSource+0x15a>
 80062ac:	2b10      	cmp	r3, #16
 80062ae:	d05a      	beq.n	8006366 <HAL_TIM_ConfigClockSource+0x15a>
 80062b0:	e062      	b.n	8006378 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80062b6:	683b      	ldr	r3, [r7, #0]
 80062b8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80062ba:	683b      	ldr	r3, [r7, #0]
 80062bc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80062be:	683b      	ldr	r3, [r7, #0]
 80062c0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80062c2:	f000 fb69 	bl	8006998 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	689b      	ldr	r3, [r3, #8]
 80062cc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80062ce:	68bb      	ldr	r3, [r7, #8]
 80062d0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80062d4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	68ba      	ldr	r2, [r7, #8]
 80062dc:	609a      	str	r2, [r3, #8]
      break;
 80062de:	e04f      	b.n	8006380 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80062e8:	683b      	ldr	r3, [r7, #0]
 80062ea:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80062ec:	683b      	ldr	r3, [r7, #0]
 80062ee:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80062f0:	f000 fb52 	bl	8006998 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	689a      	ldr	r2, [r3, #8]
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006302:	609a      	str	r2, [r3, #8]
      break;
 8006304:	e03c      	b.n	8006380 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800630a:	683b      	ldr	r3, [r7, #0]
 800630c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006312:	461a      	mov	r2, r3
 8006314:	f000 fac6 	bl	80068a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	2150      	movs	r1, #80	@ 0x50
 800631e:	4618      	mov	r0, r3
 8006320:	f000 fb1f 	bl	8006962 <TIM_ITRx_SetConfig>
      break;
 8006324:	e02c      	b.n	8006380 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800632a:	683b      	ldr	r3, [r7, #0]
 800632c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800632e:	683b      	ldr	r3, [r7, #0]
 8006330:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006332:	461a      	mov	r2, r3
 8006334:	f000 fae5 	bl	8006902 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	2160      	movs	r1, #96	@ 0x60
 800633e:	4618      	mov	r0, r3
 8006340:	f000 fb0f 	bl	8006962 <TIM_ITRx_SetConfig>
      break;
 8006344:	e01c      	b.n	8006380 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800634a:	683b      	ldr	r3, [r7, #0]
 800634c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800634e:	683b      	ldr	r3, [r7, #0]
 8006350:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006352:	461a      	mov	r2, r3
 8006354:	f000 faa6 	bl	80068a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	2140      	movs	r1, #64	@ 0x40
 800635e:	4618      	mov	r0, r3
 8006360:	f000 faff 	bl	8006962 <TIM_ITRx_SetConfig>
      break;
 8006364:	e00c      	b.n	8006380 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681a      	ldr	r2, [r3, #0]
 800636a:	683b      	ldr	r3, [r7, #0]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	4619      	mov	r1, r3
 8006370:	4610      	mov	r0, r2
 8006372:	f000 faf6 	bl	8006962 <TIM_ITRx_SetConfig>
      break;
 8006376:	e003      	b.n	8006380 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006378:	2301      	movs	r3, #1
 800637a:	73fb      	strb	r3, [r7, #15]
      break;
 800637c:	e000      	b.n	8006380 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800637e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2201      	movs	r2, #1
 8006384:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2200      	movs	r2, #0
 800638c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006390:	7bfb      	ldrb	r3, [r7, #15]
}
 8006392:	4618      	mov	r0, r3
 8006394:	3710      	adds	r7, #16
 8006396:	46bd      	mov	sp, r7
 8006398:	bd80      	pop	{r7, pc}

0800639a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800639a:	b480      	push	{r7}
 800639c:	b083      	sub	sp, #12
 800639e:	af00      	add	r7, sp, #0
 80063a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80063a2:	bf00      	nop
 80063a4:	370c      	adds	r7, #12
 80063a6:	46bd      	mov	sp, r7
 80063a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ac:	4770      	bx	lr

080063ae <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80063ae:	b480      	push	{r7}
 80063b0:	b083      	sub	sp, #12
 80063b2:	af00      	add	r7, sp, #0
 80063b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80063b6:	bf00      	nop
 80063b8:	370c      	adds	r7, #12
 80063ba:	46bd      	mov	sp, r7
 80063bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c0:	4770      	bx	lr

080063c2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80063c2:	b480      	push	{r7}
 80063c4:	b083      	sub	sp, #12
 80063c6:	af00      	add	r7, sp, #0
 80063c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80063ca:	bf00      	nop
 80063cc:	370c      	adds	r7, #12
 80063ce:	46bd      	mov	sp, r7
 80063d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d4:	4770      	bx	lr

080063d6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80063d6:	b480      	push	{r7}
 80063d8:	b083      	sub	sp, #12
 80063da:	af00      	add	r7, sp, #0
 80063dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80063de:	bf00      	nop
 80063e0:	370c      	adds	r7, #12
 80063e2:	46bd      	mov	sp, r7
 80063e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e8:	4770      	bx	lr
	...

080063ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80063ec:	b480      	push	{r7}
 80063ee:	b085      	sub	sp, #20
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]
 80063f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	4a46      	ldr	r2, [pc, #280]	@ (8006518 <TIM_Base_SetConfig+0x12c>)
 8006400:	4293      	cmp	r3, r2
 8006402:	d013      	beq.n	800642c <TIM_Base_SetConfig+0x40>
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800640a:	d00f      	beq.n	800642c <TIM_Base_SetConfig+0x40>
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	4a43      	ldr	r2, [pc, #268]	@ (800651c <TIM_Base_SetConfig+0x130>)
 8006410:	4293      	cmp	r3, r2
 8006412:	d00b      	beq.n	800642c <TIM_Base_SetConfig+0x40>
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	4a42      	ldr	r2, [pc, #264]	@ (8006520 <TIM_Base_SetConfig+0x134>)
 8006418:	4293      	cmp	r3, r2
 800641a:	d007      	beq.n	800642c <TIM_Base_SetConfig+0x40>
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	4a41      	ldr	r2, [pc, #260]	@ (8006524 <TIM_Base_SetConfig+0x138>)
 8006420:	4293      	cmp	r3, r2
 8006422:	d003      	beq.n	800642c <TIM_Base_SetConfig+0x40>
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	4a40      	ldr	r2, [pc, #256]	@ (8006528 <TIM_Base_SetConfig+0x13c>)
 8006428:	4293      	cmp	r3, r2
 800642a:	d108      	bne.n	800643e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006432:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	685b      	ldr	r3, [r3, #4]
 8006438:	68fa      	ldr	r2, [r7, #12]
 800643a:	4313      	orrs	r3, r2
 800643c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	4a35      	ldr	r2, [pc, #212]	@ (8006518 <TIM_Base_SetConfig+0x12c>)
 8006442:	4293      	cmp	r3, r2
 8006444:	d02b      	beq.n	800649e <TIM_Base_SetConfig+0xb2>
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800644c:	d027      	beq.n	800649e <TIM_Base_SetConfig+0xb2>
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	4a32      	ldr	r2, [pc, #200]	@ (800651c <TIM_Base_SetConfig+0x130>)
 8006452:	4293      	cmp	r3, r2
 8006454:	d023      	beq.n	800649e <TIM_Base_SetConfig+0xb2>
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	4a31      	ldr	r2, [pc, #196]	@ (8006520 <TIM_Base_SetConfig+0x134>)
 800645a:	4293      	cmp	r3, r2
 800645c:	d01f      	beq.n	800649e <TIM_Base_SetConfig+0xb2>
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	4a30      	ldr	r2, [pc, #192]	@ (8006524 <TIM_Base_SetConfig+0x138>)
 8006462:	4293      	cmp	r3, r2
 8006464:	d01b      	beq.n	800649e <TIM_Base_SetConfig+0xb2>
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	4a2f      	ldr	r2, [pc, #188]	@ (8006528 <TIM_Base_SetConfig+0x13c>)
 800646a:	4293      	cmp	r3, r2
 800646c:	d017      	beq.n	800649e <TIM_Base_SetConfig+0xb2>
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	4a2e      	ldr	r2, [pc, #184]	@ (800652c <TIM_Base_SetConfig+0x140>)
 8006472:	4293      	cmp	r3, r2
 8006474:	d013      	beq.n	800649e <TIM_Base_SetConfig+0xb2>
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	4a2d      	ldr	r2, [pc, #180]	@ (8006530 <TIM_Base_SetConfig+0x144>)
 800647a:	4293      	cmp	r3, r2
 800647c:	d00f      	beq.n	800649e <TIM_Base_SetConfig+0xb2>
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	4a2c      	ldr	r2, [pc, #176]	@ (8006534 <TIM_Base_SetConfig+0x148>)
 8006482:	4293      	cmp	r3, r2
 8006484:	d00b      	beq.n	800649e <TIM_Base_SetConfig+0xb2>
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	4a2b      	ldr	r2, [pc, #172]	@ (8006538 <TIM_Base_SetConfig+0x14c>)
 800648a:	4293      	cmp	r3, r2
 800648c:	d007      	beq.n	800649e <TIM_Base_SetConfig+0xb2>
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	4a2a      	ldr	r2, [pc, #168]	@ (800653c <TIM_Base_SetConfig+0x150>)
 8006492:	4293      	cmp	r3, r2
 8006494:	d003      	beq.n	800649e <TIM_Base_SetConfig+0xb2>
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	4a29      	ldr	r2, [pc, #164]	@ (8006540 <TIM_Base_SetConfig+0x154>)
 800649a:	4293      	cmp	r3, r2
 800649c:	d108      	bne.n	80064b0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80064a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80064a6:	683b      	ldr	r3, [r7, #0]
 80064a8:	68db      	ldr	r3, [r3, #12]
 80064aa:	68fa      	ldr	r2, [r7, #12]
 80064ac:	4313      	orrs	r3, r2
 80064ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80064b6:	683b      	ldr	r3, [r7, #0]
 80064b8:	695b      	ldr	r3, [r3, #20]
 80064ba:	4313      	orrs	r3, r2
 80064bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	68fa      	ldr	r2, [r7, #12]
 80064c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	689a      	ldr	r2, [r3, #8]
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80064cc:	683b      	ldr	r3, [r7, #0]
 80064ce:	681a      	ldr	r2, [r3, #0]
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	4a10      	ldr	r2, [pc, #64]	@ (8006518 <TIM_Base_SetConfig+0x12c>)
 80064d8:	4293      	cmp	r3, r2
 80064da:	d003      	beq.n	80064e4 <TIM_Base_SetConfig+0xf8>
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	4a12      	ldr	r2, [pc, #72]	@ (8006528 <TIM_Base_SetConfig+0x13c>)
 80064e0:	4293      	cmp	r3, r2
 80064e2:	d103      	bne.n	80064ec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80064e4:	683b      	ldr	r3, [r7, #0]
 80064e6:	691a      	ldr	r2, [r3, #16]
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2201      	movs	r2, #1
 80064f0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	691b      	ldr	r3, [r3, #16]
 80064f6:	f003 0301 	and.w	r3, r3, #1
 80064fa:	2b01      	cmp	r3, #1
 80064fc:	d105      	bne.n	800650a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	691b      	ldr	r3, [r3, #16]
 8006502:	f023 0201 	bic.w	r2, r3, #1
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	611a      	str	r2, [r3, #16]
  }
}
 800650a:	bf00      	nop
 800650c:	3714      	adds	r7, #20
 800650e:	46bd      	mov	sp, r7
 8006510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006514:	4770      	bx	lr
 8006516:	bf00      	nop
 8006518:	40010000 	.word	0x40010000
 800651c:	40000400 	.word	0x40000400
 8006520:	40000800 	.word	0x40000800
 8006524:	40000c00 	.word	0x40000c00
 8006528:	40010400 	.word	0x40010400
 800652c:	40014000 	.word	0x40014000
 8006530:	40014400 	.word	0x40014400
 8006534:	40014800 	.word	0x40014800
 8006538:	40001800 	.word	0x40001800
 800653c:	40001c00 	.word	0x40001c00
 8006540:	40002000 	.word	0x40002000

08006544 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006544:	b480      	push	{r7}
 8006546:	b087      	sub	sp, #28
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
 800654c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	6a1b      	ldr	r3, [r3, #32]
 8006552:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	6a1b      	ldr	r3, [r3, #32]
 8006558:	f023 0201 	bic.w	r2, r3, #1
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	685b      	ldr	r3, [r3, #4]
 8006564:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	699b      	ldr	r3, [r3, #24]
 800656a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006572:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	f023 0303 	bic.w	r3, r3, #3
 800657a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800657c:	683b      	ldr	r3, [r7, #0]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	68fa      	ldr	r2, [r7, #12]
 8006582:	4313      	orrs	r3, r2
 8006584:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006586:	697b      	ldr	r3, [r7, #20]
 8006588:	f023 0302 	bic.w	r3, r3, #2
 800658c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800658e:	683b      	ldr	r3, [r7, #0]
 8006590:	689b      	ldr	r3, [r3, #8]
 8006592:	697a      	ldr	r2, [r7, #20]
 8006594:	4313      	orrs	r3, r2
 8006596:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	4a20      	ldr	r2, [pc, #128]	@ (800661c <TIM_OC1_SetConfig+0xd8>)
 800659c:	4293      	cmp	r3, r2
 800659e:	d003      	beq.n	80065a8 <TIM_OC1_SetConfig+0x64>
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	4a1f      	ldr	r2, [pc, #124]	@ (8006620 <TIM_OC1_SetConfig+0xdc>)
 80065a4:	4293      	cmp	r3, r2
 80065a6:	d10c      	bne.n	80065c2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80065a8:	697b      	ldr	r3, [r7, #20]
 80065aa:	f023 0308 	bic.w	r3, r3, #8
 80065ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80065b0:	683b      	ldr	r3, [r7, #0]
 80065b2:	68db      	ldr	r3, [r3, #12]
 80065b4:	697a      	ldr	r2, [r7, #20]
 80065b6:	4313      	orrs	r3, r2
 80065b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80065ba:	697b      	ldr	r3, [r7, #20]
 80065bc:	f023 0304 	bic.w	r3, r3, #4
 80065c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	4a15      	ldr	r2, [pc, #84]	@ (800661c <TIM_OC1_SetConfig+0xd8>)
 80065c6:	4293      	cmp	r3, r2
 80065c8:	d003      	beq.n	80065d2 <TIM_OC1_SetConfig+0x8e>
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	4a14      	ldr	r2, [pc, #80]	@ (8006620 <TIM_OC1_SetConfig+0xdc>)
 80065ce:	4293      	cmp	r3, r2
 80065d0:	d111      	bne.n	80065f6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80065d2:	693b      	ldr	r3, [r7, #16]
 80065d4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80065d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80065da:	693b      	ldr	r3, [r7, #16]
 80065dc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80065e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80065e2:	683b      	ldr	r3, [r7, #0]
 80065e4:	695b      	ldr	r3, [r3, #20]
 80065e6:	693a      	ldr	r2, [r7, #16]
 80065e8:	4313      	orrs	r3, r2
 80065ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80065ec:	683b      	ldr	r3, [r7, #0]
 80065ee:	699b      	ldr	r3, [r3, #24]
 80065f0:	693a      	ldr	r2, [r7, #16]
 80065f2:	4313      	orrs	r3, r2
 80065f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	693a      	ldr	r2, [r7, #16]
 80065fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	68fa      	ldr	r2, [r7, #12]
 8006600:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006602:	683b      	ldr	r3, [r7, #0]
 8006604:	685a      	ldr	r2, [r3, #4]
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	697a      	ldr	r2, [r7, #20]
 800660e:	621a      	str	r2, [r3, #32]
}
 8006610:	bf00      	nop
 8006612:	371c      	adds	r7, #28
 8006614:	46bd      	mov	sp, r7
 8006616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661a:	4770      	bx	lr
 800661c:	40010000 	.word	0x40010000
 8006620:	40010400 	.word	0x40010400

08006624 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006624:	b480      	push	{r7}
 8006626:	b087      	sub	sp, #28
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
 800662c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	6a1b      	ldr	r3, [r3, #32]
 8006632:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	6a1b      	ldr	r3, [r3, #32]
 8006638:	f023 0210 	bic.w	r2, r3, #16
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	685b      	ldr	r3, [r3, #4]
 8006644:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	699b      	ldr	r3, [r3, #24]
 800664a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006652:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800665a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800665c:	683b      	ldr	r3, [r7, #0]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	021b      	lsls	r3, r3, #8
 8006662:	68fa      	ldr	r2, [r7, #12]
 8006664:	4313      	orrs	r3, r2
 8006666:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006668:	697b      	ldr	r3, [r7, #20]
 800666a:	f023 0320 	bic.w	r3, r3, #32
 800666e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006670:	683b      	ldr	r3, [r7, #0]
 8006672:	689b      	ldr	r3, [r3, #8]
 8006674:	011b      	lsls	r3, r3, #4
 8006676:	697a      	ldr	r2, [r7, #20]
 8006678:	4313      	orrs	r3, r2
 800667a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	4a22      	ldr	r2, [pc, #136]	@ (8006708 <TIM_OC2_SetConfig+0xe4>)
 8006680:	4293      	cmp	r3, r2
 8006682:	d003      	beq.n	800668c <TIM_OC2_SetConfig+0x68>
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	4a21      	ldr	r2, [pc, #132]	@ (800670c <TIM_OC2_SetConfig+0xe8>)
 8006688:	4293      	cmp	r3, r2
 800668a:	d10d      	bne.n	80066a8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800668c:	697b      	ldr	r3, [r7, #20]
 800668e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006692:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006694:	683b      	ldr	r3, [r7, #0]
 8006696:	68db      	ldr	r3, [r3, #12]
 8006698:	011b      	lsls	r3, r3, #4
 800669a:	697a      	ldr	r2, [r7, #20]
 800669c:	4313      	orrs	r3, r2
 800669e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80066a0:	697b      	ldr	r3, [r7, #20]
 80066a2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80066a6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	4a17      	ldr	r2, [pc, #92]	@ (8006708 <TIM_OC2_SetConfig+0xe4>)
 80066ac:	4293      	cmp	r3, r2
 80066ae:	d003      	beq.n	80066b8 <TIM_OC2_SetConfig+0x94>
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	4a16      	ldr	r2, [pc, #88]	@ (800670c <TIM_OC2_SetConfig+0xe8>)
 80066b4:	4293      	cmp	r3, r2
 80066b6:	d113      	bne.n	80066e0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80066b8:	693b      	ldr	r3, [r7, #16]
 80066ba:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80066be:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80066c0:	693b      	ldr	r3, [r7, #16]
 80066c2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80066c6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80066c8:	683b      	ldr	r3, [r7, #0]
 80066ca:	695b      	ldr	r3, [r3, #20]
 80066cc:	009b      	lsls	r3, r3, #2
 80066ce:	693a      	ldr	r2, [r7, #16]
 80066d0:	4313      	orrs	r3, r2
 80066d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80066d4:	683b      	ldr	r3, [r7, #0]
 80066d6:	699b      	ldr	r3, [r3, #24]
 80066d8:	009b      	lsls	r3, r3, #2
 80066da:	693a      	ldr	r2, [r7, #16]
 80066dc:	4313      	orrs	r3, r2
 80066de:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	693a      	ldr	r2, [r7, #16]
 80066e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	68fa      	ldr	r2, [r7, #12]
 80066ea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80066ec:	683b      	ldr	r3, [r7, #0]
 80066ee:	685a      	ldr	r2, [r3, #4]
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	697a      	ldr	r2, [r7, #20]
 80066f8:	621a      	str	r2, [r3, #32]
}
 80066fa:	bf00      	nop
 80066fc:	371c      	adds	r7, #28
 80066fe:	46bd      	mov	sp, r7
 8006700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006704:	4770      	bx	lr
 8006706:	bf00      	nop
 8006708:	40010000 	.word	0x40010000
 800670c:	40010400 	.word	0x40010400

08006710 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006710:	b480      	push	{r7}
 8006712:	b087      	sub	sp, #28
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
 8006718:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	6a1b      	ldr	r3, [r3, #32]
 800671e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	6a1b      	ldr	r3, [r3, #32]
 8006724:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	685b      	ldr	r3, [r3, #4]
 8006730:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	69db      	ldr	r3, [r3, #28]
 8006736:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800673e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	f023 0303 	bic.w	r3, r3, #3
 8006746:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006748:	683b      	ldr	r3, [r7, #0]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	68fa      	ldr	r2, [r7, #12]
 800674e:	4313      	orrs	r3, r2
 8006750:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006752:	697b      	ldr	r3, [r7, #20]
 8006754:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006758:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800675a:	683b      	ldr	r3, [r7, #0]
 800675c:	689b      	ldr	r3, [r3, #8]
 800675e:	021b      	lsls	r3, r3, #8
 8006760:	697a      	ldr	r2, [r7, #20]
 8006762:	4313      	orrs	r3, r2
 8006764:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	4a21      	ldr	r2, [pc, #132]	@ (80067f0 <TIM_OC3_SetConfig+0xe0>)
 800676a:	4293      	cmp	r3, r2
 800676c:	d003      	beq.n	8006776 <TIM_OC3_SetConfig+0x66>
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	4a20      	ldr	r2, [pc, #128]	@ (80067f4 <TIM_OC3_SetConfig+0xe4>)
 8006772:	4293      	cmp	r3, r2
 8006774:	d10d      	bne.n	8006792 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006776:	697b      	ldr	r3, [r7, #20]
 8006778:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800677c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800677e:	683b      	ldr	r3, [r7, #0]
 8006780:	68db      	ldr	r3, [r3, #12]
 8006782:	021b      	lsls	r3, r3, #8
 8006784:	697a      	ldr	r2, [r7, #20]
 8006786:	4313      	orrs	r3, r2
 8006788:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800678a:	697b      	ldr	r3, [r7, #20]
 800678c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006790:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	4a16      	ldr	r2, [pc, #88]	@ (80067f0 <TIM_OC3_SetConfig+0xe0>)
 8006796:	4293      	cmp	r3, r2
 8006798:	d003      	beq.n	80067a2 <TIM_OC3_SetConfig+0x92>
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	4a15      	ldr	r2, [pc, #84]	@ (80067f4 <TIM_OC3_SetConfig+0xe4>)
 800679e:	4293      	cmp	r3, r2
 80067a0:	d113      	bne.n	80067ca <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80067a2:	693b      	ldr	r3, [r7, #16]
 80067a4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80067a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80067aa:	693b      	ldr	r3, [r7, #16]
 80067ac:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80067b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80067b2:	683b      	ldr	r3, [r7, #0]
 80067b4:	695b      	ldr	r3, [r3, #20]
 80067b6:	011b      	lsls	r3, r3, #4
 80067b8:	693a      	ldr	r2, [r7, #16]
 80067ba:	4313      	orrs	r3, r2
 80067bc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80067be:	683b      	ldr	r3, [r7, #0]
 80067c0:	699b      	ldr	r3, [r3, #24]
 80067c2:	011b      	lsls	r3, r3, #4
 80067c4:	693a      	ldr	r2, [r7, #16]
 80067c6:	4313      	orrs	r3, r2
 80067c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	693a      	ldr	r2, [r7, #16]
 80067ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	68fa      	ldr	r2, [r7, #12]
 80067d4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80067d6:	683b      	ldr	r3, [r7, #0]
 80067d8:	685a      	ldr	r2, [r3, #4]
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	697a      	ldr	r2, [r7, #20]
 80067e2:	621a      	str	r2, [r3, #32]
}
 80067e4:	bf00      	nop
 80067e6:	371c      	adds	r7, #28
 80067e8:	46bd      	mov	sp, r7
 80067ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ee:	4770      	bx	lr
 80067f0:	40010000 	.word	0x40010000
 80067f4:	40010400 	.word	0x40010400

080067f8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80067f8:	b480      	push	{r7}
 80067fa:	b087      	sub	sp, #28
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]
 8006800:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	6a1b      	ldr	r3, [r3, #32]
 8006806:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	6a1b      	ldr	r3, [r3, #32]
 800680c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	685b      	ldr	r3, [r3, #4]
 8006818:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	69db      	ldr	r3, [r3, #28]
 800681e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006826:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800682e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006830:	683b      	ldr	r3, [r7, #0]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	021b      	lsls	r3, r3, #8
 8006836:	68fa      	ldr	r2, [r7, #12]
 8006838:	4313      	orrs	r3, r2
 800683a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800683c:	693b      	ldr	r3, [r7, #16]
 800683e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006842:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006844:	683b      	ldr	r3, [r7, #0]
 8006846:	689b      	ldr	r3, [r3, #8]
 8006848:	031b      	lsls	r3, r3, #12
 800684a:	693a      	ldr	r2, [r7, #16]
 800684c:	4313      	orrs	r3, r2
 800684e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	4a12      	ldr	r2, [pc, #72]	@ (800689c <TIM_OC4_SetConfig+0xa4>)
 8006854:	4293      	cmp	r3, r2
 8006856:	d003      	beq.n	8006860 <TIM_OC4_SetConfig+0x68>
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	4a11      	ldr	r2, [pc, #68]	@ (80068a0 <TIM_OC4_SetConfig+0xa8>)
 800685c:	4293      	cmp	r3, r2
 800685e:	d109      	bne.n	8006874 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006860:	697b      	ldr	r3, [r7, #20]
 8006862:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006866:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006868:	683b      	ldr	r3, [r7, #0]
 800686a:	695b      	ldr	r3, [r3, #20]
 800686c:	019b      	lsls	r3, r3, #6
 800686e:	697a      	ldr	r2, [r7, #20]
 8006870:	4313      	orrs	r3, r2
 8006872:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	697a      	ldr	r2, [r7, #20]
 8006878:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	68fa      	ldr	r2, [r7, #12]
 800687e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006880:	683b      	ldr	r3, [r7, #0]
 8006882:	685a      	ldr	r2, [r3, #4]
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	693a      	ldr	r2, [r7, #16]
 800688c:	621a      	str	r2, [r3, #32]
}
 800688e:	bf00      	nop
 8006890:	371c      	adds	r7, #28
 8006892:	46bd      	mov	sp, r7
 8006894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006898:	4770      	bx	lr
 800689a:	bf00      	nop
 800689c:	40010000 	.word	0x40010000
 80068a0:	40010400 	.word	0x40010400

080068a4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80068a4:	b480      	push	{r7}
 80068a6:	b087      	sub	sp, #28
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	60f8      	str	r0, [r7, #12]
 80068ac:	60b9      	str	r1, [r7, #8]
 80068ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	6a1b      	ldr	r3, [r3, #32]
 80068b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	6a1b      	ldr	r3, [r3, #32]
 80068ba:	f023 0201 	bic.w	r2, r3, #1
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	699b      	ldr	r3, [r3, #24]
 80068c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80068c8:	693b      	ldr	r3, [r7, #16]
 80068ca:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80068ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	011b      	lsls	r3, r3, #4
 80068d4:	693a      	ldr	r2, [r7, #16]
 80068d6:	4313      	orrs	r3, r2
 80068d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80068da:	697b      	ldr	r3, [r7, #20]
 80068dc:	f023 030a 	bic.w	r3, r3, #10
 80068e0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80068e2:	697a      	ldr	r2, [r7, #20]
 80068e4:	68bb      	ldr	r3, [r7, #8]
 80068e6:	4313      	orrs	r3, r2
 80068e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	693a      	ldr	r2, [r7, #16]
 80068ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	697a      	ldr	r2, [r7, #20]
 80068f4:	621a      	str	r2, [r3, #32]
}
 80068f6:	bf00      	nop
 80068f8:	371c      	adds	r7, #28
 80068fa:	46bd      	mov	sp, r7
 80068fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006900:	4770      	bx	lr

08006902 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006902:	b480      	push	{r7}
 8006904:	b087      	sub	sp, #28
 8006906:	af00      	add	r7, sp, #0
 8006908:	60f8      	str	r0, [r7, #12]
 800690a:	60b9      	str	r1, [r7, #8]
 800690c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	6a1b      	ldr	r3, [r3, #32]
 8006912:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	6a1b      	ldr	r3, [r3, #32]
 8006918:	f023 0210 	bic.w	r2, r3, #16
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	699b      	ldr	r3, [r3, #24]
 8006924:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006926:	693b      	ldr	r3, [r7, #16]
 8006928:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800692c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	031b      	lsls	r3, r3, #12
 8006932:	693a      	ldr	r2, [r7, #16]
 8006934:	4313      	orrs	r3, r2
 8006936:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006938:	697b      	ldr	r3, [r7, #20]
 800693a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800693e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006940:	68bb      	ldr	r3, [r7, #8]
 8006942:	011b      	lsls	r3, r3, #4
 8006944:	697a      	ldr	r2, [r7, #20]
 8006946:	4313      	orrs	r3, r2
 8006948:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	693a      	ldr	r2, [r7, #16]
 800694e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	697a      	ldr	r2, [r7, #20]
 8006954:	621a      	str	r2, [r3, #32]
}
 8006956:	bf00      	nop
 8006958:	371c      	adds	r7, #28
 800695a:	46bd      	mov	sp, r7
 800695c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006960:	4770      	bx	lr

08006962 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006962:	b480      	push	{r7}
 8006964:	b085      	sub	sp, #20
 8006966:	af00      	add	r7, sp, #0
 8006968:	6078      	str	r0, [r7, #4]
 800696a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	689b      	ldr	r3, [r3, #8]
 8006970:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006978:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800697a:	683a      	ldr	r2, [r7, #0]
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	4313      	orrs	r3, r2
 8006980:	f043 0307 	orr.w	r3, r3, #7
 8006984:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	68fa      	ldr	r2, [r7, #12]
 800698a:	609a      	str	r2, [r3, #8]
}
 800698c:	bf00      	nop
 800698e:	3714      	adds	r7, #20
 8006990:	46bd      	mov	sp, r7
 8006992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006996:	4770      	bx	lr

08006998 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006998:	b480      	push	{r7}
 800699a:	b087      	sub	sp, #28
 800699c:	af00      	add	r7, sp, #0
 800699e:	60f8      	str	r0, [r7, #12]
 80069a0:	60b9      	str	r1, [r7, #8]
 80069a2:	607a      	str	r2, [r7, #4]
 80069a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	689b      	ldr	r3, [r3, #8]
 80069aa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80069ac:	697b      	ldr	r3, [r7, #20]
 80069ae:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80069b2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80069b4:	683b      	ldr	r3, [r7, #0]
 80069b6:	021a      	lsls	r2, r3, #8
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	431a      	orrs	r2, r3
 80069bc:	68bb      	ldr	r3, [r7, #8]
 80069be:	4313      	orrs	r3, r2
 80069c0:	697a      	ldr	r2, [r7, #20]
 80069c2:	4313      	orrs	r3, r2
 80069c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	697a      	ldr	r2, [r7, #20]
 80069ca:	609a      	str	r2, [r3, #8]
}
 80069cc:	bf00      	nop
 80069ce:	371c      	adds	r7, #28
 80069d0:	46bd      	mov	sp, r7
 80069d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d6:	4770      	bx	lr

080069d8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80069d8:	b480      	push	{r7}
 80069da:	b087      	sub	sp, #28
 80069dc:	af00      	add	r7, sp, #0
 80069de:	60f8      	str	r0, [r7, #12]
 80069e0:	60b9      	str	r1, [r7, #8]
 80069e2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80069e4:	68bb      	ldr	r3, [r7, #8]
 80069e6:	f003 031f 	and.w	r3, r3, #31
 80069ea:	2201      	movs	r2, #1
 80069ec:	fa02 f303 	lsl.w	r3, r2, r3
 80069f0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	6a1a      	ldr	r2, [r3, #32]
 80069f6:	697b      	ldr	r3, [r7, #20]
 80069f8:	43db      	mvns	r3, r3
 80069fa:	401a      	ands	r2, r3
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	6a1a      	ldr	r2, [r3, #32]
 8006a04:	68bb      	ldr	r3, [r7, #8]
 8006a06:	f003 031f 	and.w	r3, r3, #31
 8006a0a:	6879      	ldr	r1, [r7, #4]
 8006a0c:	fa01 f303 	lsl.w	r3, r1, r3
 8006a10:	431a      	orrs	r2, r3
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	621a      	str	r2, [r3, #32]
}
 8006a16:	bf00      	nop
 8006a18:	371c      	adds	r7, #28
 8006a1a:	46bd      	mov	sp, r7
 8006a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a20:	4770      	bx	lr
	...

08006a24 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006a24:	b480      	push	{r7}
 8006a26:	b085      	sub	sp, #20
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	6078      	str	r0, [r7, #4]
 8006a2c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006a34:	2b01      	cmp	r3, #1
 8006a36:	d101      	bne.n	8006a3c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006a38:	2302      	movs	r3, #2
 8006a3a:	e05a      	b.n	8006af2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	2201      	movs	r2, #1
 8006a40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2202      	movs	r2, #2
 8006a48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	685b      	ldr	r3, [r3, #4]
 8006a52:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	689b      	ldr	r3, [r3, #8]
 8006a5a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a62:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006a64:	683b      	ldr	r3, [r7, #0]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	68fa      	ldr	r2, [r7, #12]
 8006a6a:	4313      	orrs	r3, r2
 8006a6c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	68fa      	ldr	r2, [r7, #12]
 8006a74:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	4a21      	ldr	r2, [pc, #132]	@ (8006b00 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006a7c:	4293      	cmp	r3, r2
 8006a7e:	d022      	beq.n	8006ac6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006a88:	d01d      	beq.n	8006ac6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	4a1d      	ldr	r2, [pc, #116]	@ (8006b04 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006a90:	4293      	cmp	r3, r2
 8006a92:	d018      	beq.n	8006ac6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	4a1b      	ldr	r2, [pc, #108]	@ (8006b08 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006a9a:	4293      	cmp	r3, r2
 8006a9c:	d013      	beq.n	8006ac6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	4a1a      	ldr	r2, [pc, #104]	@ (8006b0c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006aa4:	4293      	cmp	r3, r2
 8006aa6:	d00e      	beq.n	8006ac6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	4a18      	ldr	r2, [pc, #96]	@ (8006b10 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006aae:	4293      	cmp	r3, r2
 8006ab0:	d009      	beq.n	8006ac6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	4a17      	ldr	r2, [pc, #92]	@ (8006b14 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006ab8:	4293      	cmp	r3, r2
 8006aba:	d004      	beq.n	8006ac6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	4a15      	ldr	r2, [pc, #84]	@ (8006b18 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006ac2:	4293      	cmp	r3, r2
 8006ac4:	d10c      	bne.n	8006ae0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006ac6:	68bb      	ldr	r3, [r7, #8]
 8006ac8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006acc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006ace:	683b      	ldr	r3, [r7, #0]
 8006ad0:	685b      	ldr	r3, [r3, #4]
 8006ad2:	68ba      	ldr	r2, [r7, #8]
 8006ad4:	4313      	orrs	r3, r2
 8006ad6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	68ba      	ldr	r2, [r7, #8]
 8006ade:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	2201      	movs	r2, #1
 8006ae4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	2200      	movs	r2, #0
 8006aec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006af0:	2300      	movs	r3, #0
}
 8006af2:	4618      	mov	r0, r3
 8006af4:	3714      	adds	r7, #20
 8006af6:	46bd      	mov	sp, r7
 8006af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afc:	4770      	bx	lr
 8006afe:	bf00      	nop
 8006b00:	40010000 	.word	0x40010000
 8006b04:	40000400 	.word	0x40000400
 8006b08:	40000800 	.word	0x40000800
 8006b0c:	40000c00 	.word	0x40000c00
 8006b10:	40010400 	.word	0x40010400
 8006b14:	40014000 	.word	0x40014000
 8006b18:	40001800 	.word	0x40001800

08006b1c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006b1c:	b480      	push	{r7}
 8006b1e:	b083      	sub	sp, #12
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006b24:	bf00      	nop
 8006b26:	370c      	adds	r7, #12
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2e:	4770      	bx	lr

08006b30 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006b30:	b480      	push	{r7}
 8006b32:	b083      	sub	sp, #12
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006b38:	bf00      	nop
 8006b3a:	370c      	adds	r7, #12
 8006b3c:	46bd      	mov	sp, r7
 8006b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b42:	4770      	bx	lr

08006b44 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006b44:	b580      	push	{r7, lr}
 8006b46:	b082      	sub	sp, #8
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d101      	bne.n	8006b56 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006b52:	2301      	movs	r3, #1
 8006b54:	e042      	b.n	8006bdc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006b5c:	b2db      	uxtb	r3, r3
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d106      	bne.n	8006b70 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	2200      	movs	r2, #0
 8006b66:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006b6a:	6878      	ldr	r0, [r7, #4]
 8006b6c:	f7fc f8dc 	bl	8002d28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	2224      	movs	r2, #36	@ 0x24
 8006b74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	68da      	ldr	r2, [r3, #12]
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006b86:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006b88:	6878      	ldr	r0, [r7, #4]
 8006b8a:	f000 f82b 	bl	8006be4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	691a      	ldr	r2, [r3, #16]
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006b9c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	695a      	ldr	r2, [r3, #20]
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006bac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	68da      	ldr	r2, [r3, #12]
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006bbc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2220      	movs	r2, #32
 8006bc8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2220      	movs	r2, #32
 8006bd0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006bda:	2300      	movs	r3, #0
}
 8006bdc:	4618      	mov	r0, r3
 8006bde:	3708      	adds	r7, #8
 8006be0:	46bd      	mov	sp, r7
 8006be2:	bd80      	pop	{r7, pc}

08006be4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006be4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006be8:	b0c0      	sub	sp, #256	@ 0x100
 8006bea:	af00      	add	r7, sp, #0
 8006bec:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006bf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	691b      	ldr	r3, [r3, #16]
 8006bf8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006bfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c00:	68d9      	ldr	r1, [r3, #12]
 8006c02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c06:	681a      	ldr	r2, [r3, #0]
 8006c08:	ea40 0301 	orr.w	r3, r0, r1
 8006c0c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006c0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c12:	689a      	ldr	r2, [r3, #8]
 8006c14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c18:	691b      	ldr	r3, [r3, #16]
 8006c1a:	431a      	orrs	r2, r3
 8006c1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c20:	695b      	ldr	r3, [r3, #20]
 8006c22:	431a      	orrs	r2, r3
 8006c24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c28:	69db      	ldr	r3, [r3, #28]
 8006c2a:	4313      	orrs	r3, r2
 8006c2c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006c30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	68db      	ldr	r3, [r3, #12]
 8006c38:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006c3c:	f021 010c 	bic.w	r1, r1, #12
 8006c40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c44:	681a      	ldr	r2, [r3, #0]
 8006c46:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006c4a:	430b      	orrs	r3, r1
 8006c4c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006c4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	695b      	ldr	r3, [r3, #20]
 8006c56:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006c5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c5e:	6999      	ldr	r1, [r3, #24]
 8006c60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c64:	681a      	ldr	r2, [r3, #0]
 8006c66:	ea40 0301 	orr.w	r3, r0, r1
 8006c6a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006c6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c70:	681a      	ldr	r2, [r3, #0]
 8006c72:	4b8f      	ldr	r3, [pc, #572]	@ (8006eb0 <UART_SetConfig+0x2cc>)
 8006c74:	429a      	cmp	r2, r3
 8006c76:	d005      	beq.n	8006c84 <UART_SetConfig+0xa0>
 8006c78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c7c:	681a      	ldr	r2, [r3, #0]
 8006c7e:	4b8d      	ldr	r3, [pc, #564]	@ (8006eb4 <UART_SetConfig+0x2d0>)
 8006c80:	429a      	cmp	r2, r3
 8006c82:	d104      	bne.n	8006c8e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006c84:	f7fd ff04 	bl	8004a90 <HAL_RCC_GetPCLK2Freq>
 8006c88:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006c8c:	e003      	b.n	8006c96 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006c8e:	f7fd feeb 	bl	8004a68 <HAL_RCC_GetPCLK1Freq>
 8006c92:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006c96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c9a:	69db      	ldr	r3, [r3, #28]
 8006c9c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006ca0:	f040 810c 	bne.w	8006ebc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006ca4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006ca8:	2200      	movs	r2, #0
 8006caa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006cae:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006cb2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006cb6:	4622      	mov	r2, r4
 8006cb8:	462b      	mov	r3, r5
 8006cba:	1891      	adds	r1, r2, r2
 8006cbc:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006cbe:	415b      	adcs	r3, r3
 8006cc0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006cc2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006cc6:	4621      	mov	r1, r4
 8006cc8:	eb12 0801 	adds.w	r8, r2, r1
 8006ccc:	4629      	mov	r1, r5
 8006cce:	eb43 0901 	adc.w	r9, r3, r1
 8006cd2:	f04f 0200 	mov.w	r2, #0
 8006cd6:	f04f 0300 	mov.w	r3, #0
 8006cda:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006cde:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006ce2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006ce6:	4690      	mov	r8, r2
 8006ce8:	4699      	mov	r9, r3
 8006cea:	4623      	mov	r3, r4
 8006cec:	eb18 0303 	adds.w	r3, r8, r3
 8006cf0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006cf4:	462b      	mov	r3, r5
 8006cf6:	eb49 0303 	adc.w	r3, r9, r3
 8006cfa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006cfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d02:	685b      	ldr	r3, [r3, #4]
 8006d04:	2200      	movs	r2, #0
 8006d06:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006d0a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006d0e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006d12:	460b      	mov	r3, r1
 8006d14:	18db      	adds	r3, r3, r3
 8006d16:	653b      	str	r3, [r7, #80]	@ 0x50
 8006d18:	4613      	mov	r3, r2
 8006d1a:	eb42 0303 	adc.w	r3, r2, r3
 8006d1e:	657b      	str	r3, [r7, #84]	@ 0x54
 8006d20:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006d24:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006d28:	f7f9 ffce 	bl	8000cc8 <__aeabi_uldivmod>
 8006d2c:	4602      	mov	r2, r0
 8006d2e:	460b      	mov	r3, r1
 8006d30:	4b61      	ldr	r3, [pc, #388]	@ (8006eb8 <UART_SetConfig+0x2d4>)
 8006d32:	fba3 2302 	umull	r2, r3, r3, r2
 8006d36:	095b      	lsrs	r3, r3, #5
 8006d38:	011c      	lsls	r4, r3, #4
 8006d3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006d3e:	2200      	movs	r2, #0
 8006d40:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006d44:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006d48:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006d4c:	4642      	mov	r2, r8
 8006d4e:	464b      	mov	r3, r9
 8006d50:	1891      	adds	r1, r2, r2
 8006d52:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006d54:	415b      	adcs	r3, r3
 8006d56:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006d58:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006d5c:	4641      	mov	r1, r8
 8006d5e:	eb12 0a01 	adds.w	sl, r2, r1
 8006d62:	4649      	mov	r1, r9
 8006d64:	eb43 0b01 	adc.w	fp, r3, r1
 8006d68:	f04f 0200 	mov.w	r2, #0
 8006d6c:	f04f 0300 	mov.w	r3, #0
 8006d70:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006d74:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006d78:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006d7c:	4692      	mov	sl, r2
 8006d7e:	469b      	mov	fp, r3
 8006d80:	4643      	mov	r3, r8
 8006d82:	eb1a 0303 	adds.w	r3, sl, r3
 8006d86:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006d8a:	464b      	mov	r3, r9
 8006d8c:	eb4b 0303 	adc.w	r3, fp, r3
 8006d90:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006d94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d98:	685b      	ldr	r3, [r3, #4]
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006da0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006da4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006da8:	460b      	mov	r3, r1
 8006daa:	18db      	adds	r3, r3, r3
 8006dac:	643b      	str	r3, [r7, #64]	@ 0x40
 8006dae:	4613      	mov	r3, r2
 8006db0:	eb42 0303 	adc.w	r3, r2, r3
 8006db4:	647b      	str	r3, [r7, #68]	@ 0x44
 8006db6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006dba:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8006dbe:	f7f9 ff83 	bl	8000cc8 <__aeabi_uldivmod>
 8006dc2:	4602      	mov	r2, r0
 8006dc4:	460b      	mov	r3, r1
 8006dc6:	4611      	mov	r1, r2
 8006dc8:	4b3b      	ldr	r3, [pc, #236]	@ (8006eb8 <UART_SetConfig+0x2d4>)
 8006dca:	fba3 2301 	umull	r2, r3, r3, r1
 8006dce:	095b      	lsrs	r3, r3, #5
 8006dd0:	2264      	movs	r2, #100	@ 0x64
 8006dd2:	fb02 f303 	mul.w	r3, r2, r3
 8006dd6:	1acb      	subs	r3, r1, r3
 8006dd8:	00db      	lsls	r3, r3, #3
 8006dda:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8006dde:	4b36      	ldr	r3, [pc, #216]	@ (8006eb8 <UART_SetConfig+0x2d4>)
 8006de0:	fba3 2302 	umull	r2, r3, r3, r2
 8006de4:	095b      	lsrs	r3, r3, #5
 8006de6:	005b      	lsls	r3, r3, #1
 8006de8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006dec:	441c      	add	r4, r3
 8006dee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006df2:	2200      	movs	r2, #0
 8006df4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006df8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006dfc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006e00:	4642      	mov	r2, r8
 8006e02:	464b      	mov	r3, r9
 8006e04:	1891      	adds	r1, r2, r2
 8006e06:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006e08:	415b      	adcs	r3, r3
 8006e0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006e0c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006e10:	4641      	mov	r1, r8
 8006e12:	1851      	adds	r1, r2, r1
 8006e14:	6339      	str	r1, [r7, #48]	@ 0x30
 8006e16:	4649      	mov	r1, r9
 8006e18:	414b      	adcs	r3, r1
 8006e1a:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e1c:	f04f 0200 	mov.w	r2, #0
 8006e20:	f04f 0300 	mov.w	r3, #0
 8006e24:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006e28:	4659      	mov	r1, fp
 8006e2a:	00cb      	lsls	r3, r1, #3
 8006e2c:	4651      	mov	r1, sl
 8006e2e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006e32:	4651      	mov	r1, sl
 8006e34:	00ca      	lsls	r2, r1, #3
 8006e36:	4610      	mov	r0, r2
 8006e38:	4619      	mov	r1, r3
 8006e3a:	4603      	mov	r3, r0
 8006e3c:	4642      	mov	r2, r8
 8006e3e:	189b      	adds	r3, r3, r2
 8006e40:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006e44:	464b      	mov	r3, r9
 8006e46:	460a      	mov	r2, r1
 8006e48:	eb42 0303 	adc.w	r3, r2, r3
 8006e4c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006e50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e54:	685b      	ldr	r3, [r3, #4]
 8006e56:	2200      	movs	r2, #0
 8006e58:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006e5c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006e60:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006e64:	460b      	mov	r3, r1
 8006e66:	18db      	adds	r3, r3, r3
 8006e68:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006e6a:	4613      	mov	r3, r2
 8006e6c:	eb42 0303 	adc.w	r3, r2, r3
 8006e70:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006e72:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006e76:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006e7a:	f7f9 ff25 	bl	8000cc8 <__aeabi_uldivmod>
 8006e7e:	4602      	mov	r2, r0
 8006e80:	460b      	mov	r3, r1
 8006e82:	4b0d      	ldr	r3, [pc, #52]	@ (8006eb8 <UART_SetConfig+0x2d4>)
 8006e84:	fba3 1302 	umull	r1, r3, r3, r2
 8006e88:	095b      	lsrs	r3, r3, #5
 8006e8a:	2164      	movs	r1, #100	@ 0x64
 8006e8c:	fb01 f303 	mul.w	r3, r1, r3
 8006e90:	1ad3      	subs	r3, r2, r3
 8006e92:	00db      	lsls	r3, r3, #3
 8006e94:	3332      	adds	r3, #50	@ 0x32
 8006e96:	4a08      	ldr	r2, [pc, #32]	@ (8006eb8 <UART_SetConfig+0x2d4>)
 8006e98:	fba2 2303 	umull	r2, r3, r2, r3
 8006e9c:	095b      	lsrs	r3, r3, #5
 8006e9e:	f003 0207 	and.w	r2, r3, #7
 8006ea2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	4422      	add	r2, r4
 8006eaa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006eac:	e106      	b.n	80070bc <UART_SetConfig+0x4d8>
 8006eae:	bf00      	nop
 8006eb0:	40011000 	.word	0x40011000
 8006eb4:	40011400 	.word	0x40011400
 8006eb8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006ebc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006ec6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006eca:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006ece:	4642      	mov	r2, r8
 8006ed0:	464b      	mov	r3, r9
 8006ed2:	1891      	adds	r1, r2, r2
 8006ed4:	6239      	str	r1, [r7, #32]
 8006ed6:	415b      	adcs	r3, r3
 8006ed8:	627b      	str	r3, [r7, #36]	@ 0x24
 8006eda:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006ede:	4641      	mov	r1, r8
 8006ee0:	1854      	adds	r4, r2, r1
 8006ee2:	4649      	mov	r1, r9
 8006ee4:	eb43 0501 	adc.w	r5, r3, r1
 8006ee8:	f04f 0200 	mov.w	r2, #0
 8006eec:	f04f 0300 	mov.w	r3, #0
 8006ef0:	00eb      	lsls	r3, r5, #3
 8006ef2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006ef6:	00e2      	lsls	r2, r4, #3
 8006ef8:	4614      	mov	r4, r2
 8006efa:	461d      	mov	r5, r3
 8006efc:	4643      	mov	r3, r8
 8006efe:	18e3      	adds	r3, r4, r3
 8006f00:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006f04:	464b      	mov	r3, r9
 8006f06:	eb45 0303 	adc.w	r3, r5, r3
 8006f0a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006f0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f12:	685b      	ldr	r3, [r3, #4]
 8006f14:	2200      	movs	r2, #0
 8006f16:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006f1a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006f1e:	f04f 0200 	mov.w	r2, #0
 8006f22:	f04f 0300 	mov.w	r3, #0
 8006f26:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006f2a:	4629      	mov	r1, r5
 8006f2c:	008b      	lsls	r3, r1, #2
 8006f2e:	4621      	mov	r1, r4
 8006f30:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006f34:	4621      	mov	r1, r4
 8006f36:	008a      	lsls	r2, r1, #2
 8006f38:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006f3c:	f7f9 fec4 	bl	8000cc8 <__aeabi_uldivmod>
 8006f40:	4602      	mov	r2, r0
 8006f42:	460b      	mov	r3, r1
 8006f44:	4b60      	ldr	r3, [pc, #384]	@ (80070c8 <UART_SetConfig+0x4e4>)
 8006f46:	fba3 2302 	umull	r2, r3, r3, r2
 8006f4a:	095b      	lsrs	r3, r3, #5
 8006f4c:	011c      	lsls	r4, r3, #4
 8006f4e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006f52:	2200      	movs	r2, #0
 8006f54:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006f58:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006f5c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006f60:	4642      	mov	r2, r8
 8006f62:	464b      	mov	r3, r9
 8006f64:	1891      	adds	r1, r2, r2
 8006f66:	61b9      	str	r1, [r7, #24]
 8006f68:	415b      	adcs	r3, r3
 8006f6a:	61fb      	str	r3, [r7, #28]
 8006f6c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006f70:	4641      	mov	r1, r8
 8006f72:	1851      	adds	r1, r2, r1
 8006f74:	6139      	str	r1, [r7, #16]
 8006f76:	4649      	mov	r1, r9
 8006f78:	414b      	adcs	r3, r1
 8006f7a:	617b      	str	r3, [r7, #20]
 8006f7c:	f04f 0200 	mov.w	r2, #0
 8006f80:	f04f 0300 	mov.w	r3, #0
 8006f84:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006f88:	4659      	mov	r1, fp
 8006f8a:	00cb      	lsls	r3, r1, #3
 8006f8c:	4651      	mov	r1, sl
 8006f8e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006f92:	4651      	mov	r1, sl
 8006f94:	00ca      	lsls	r2, r1, #3
 8006f96:	4610      	mov	r0, r2
 8006f98:	4619      	mov	r1, r3
 8006f9a:	4603      	mov	r3, r0
 8006f9c:	4642      	mov	r2, r8
 8006f9e:	189b      	adds	r3, r3, r2
 8006fa0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006fa4:	464b      	mov	r3, r9
 8006fa6:	460a      	mov	r2, r1
 8006fa8:	eb42 0303 	adc.w	r3, r2, r3
 8006fac:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006fb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006fb4:	685b      	ldr	r3, [r3, #4]
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006fba:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006fbc:	f04f 0200 	mov.w	r2, #0
 8006fc0:	f04f 0300 	mov.w	r3, #0
 8006fc4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006fc8:	4649      	mov	r1, r9
 8006fca:	008b      	lsls	r3, r1, #2
 8006fcc:	4641      	mov	r1, r8
 8006fce:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006fd2:	4641      	mov	r1, r8
 8006fd4:	008a      	lsls	r2, r1, #2
 8006fd6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006fda:	f7f9 fe75 	bl	8000cc8 <__aeabi_uldivmod>
 8006fde:	4602      	mov	r2, r0
 8006fe0:	460b      	mov	r3, r1
 8006fe2:	4611      	mov	r1, r2
 8006fe4:	4b38      	ldr	r3, [pc, #224]	@ (80070c8 <UART_SetConfig+0x4e4>)
 8006fe6:	fba3 2301 	umull	r2, r3, r3, r1
 8006fea:	095b      	lsrs	r3, r3, #5
 8006fec:	2264      	movs	r2, #100	@ 0x64
 8006fee:	fb02 f303 	mul.w	r3, r2, r3
 8006ff2:	1acb      	subs	r3, r1, r3
 8006ff4:	011b      	lsls	r3, r3, #4
 8006ff6:	3332      	adds	r3, #50	@ 0x32
 8006ff8:	4a33      	ldr	r2, [pc, #204]	@ (80070c8 <UART_SetConfig+0x4e4>)
 8006ffa:	fba2 2303 	umull	r2, r3, r2, r3
 8006ffe:	095b      	lsrs	r3, r3, #5
 8007000:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007004:	441c      	add	r4, r3
 8007006:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800700a:	2200      	movs	r2, #0
 800700c:	673b      	str	r3, [r7, #112]	@ 0x70
 800700e:	677a      	str	r2, [r7, #116]	@ 0x74
 8007010:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8007014:	4642      	mov	r2, r8
 8007016:	464b      	mov	r3, r9
 8007018:	1891      	adds	r1, r2, r2
 800701a:	60b9      	str	r1, [r7, #8]
 800701c:	415b      	adcs	r3, r3
 800701e:	60fb      	str	r3, [r7, #12]
 8007020:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007024:	4641      	mov	r1, r8
 8007026:	1851      	adds	r1, r2, r1
 8007028:	6039      	str	r1, [r7, #0]
 800702a:	4649      	mov	r1, r9
 800702c:	414b      	adcs	r3, r1
 800702e:	607b      	str	r3, [r7, #4]
 8007030:	f04f 0200 	mov.w	r2, #0
 8007034:	f04f 0300 	mov.w	r3, #0
 8007038:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800703c:	4659      	mov	r1, fp
 800703e:	00cb      	lsls	r3, r1, #3
 8007040:	4651      	mov	r1, sl
 8007042:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007046:	4651      	mov	r1, sl
 8007048:	00ca      	lsls	r2, r1, #3
 800704a:	4610      	mov	r0, r2
 800704c:	4619      	mov	r1, r3
 800704e:	4603      	mov	r3, r0
 8007050:	4642      	mov	r2, r8
 8007052:	189b      	adds	r3, r3, r2
 8007054:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007056:	464b      	mov	r3, r9
 8007058:	460a      	mov	r2, r1
 800705a:	eb42 0303 	adc.w	r3, r2, r3
 800705e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007060:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007064:	685b      	ldr	r3, [r3, #4]
 8007066:	2200      	movs	r2, #0
 8007068:	663b      	str	r3, [r7, #96]	@ 0x60
 800706a:	667a      	str	r2, [r7, #100]	@ 0x64
 800706c:	f04f 0200 	mov.w	r2, #0
 8007070:	f04f 0300 	mov.w	r3, #0
 8007074:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8007078:	4649      	mov	r1, r9
 800707a:	008b      	lsls	r3, r1, #2
 800707c:	4641      	mov	r1, r8
 800707e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007082:	4641      	mov	r1, r8
 8007084:	008a      	lsls	r2, r1, #2
 8007086:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800708a:	f7f9 fe1d 	bl	8000cc8 <__aeabi_uldivmod>
 800708e:	4602      	mov	r2, r0
 8007090:	460b      	mov	r3, r1
 8007092:	4b0d      	ldr	r3, [pc, #52]	@ (80070c8 <UART_SetConfig+0x4e4>)
 8007094:	fba3 1302 	umull	r1, r3, r3, r2
 8007098:	095b      	lsrs	r3, r3, #5
 800709a:	2164      	movs	r1, #100	@ 0x64
 800709c:	fb01 f303 	mul.w	r3, r1, r3
 80070a0:	1ad3      	subs	r3, r2, r3
 80070a2:	011b      	lsls	r3, r3, #4
 80070a4:	3332      	adds	r3, #50	@ 0x32
 80070a6:	4a08      	ldr	r2, [pc, #32]	@ (80070c8 <UART_SetConfig+0x4e4>)
 80070a8:	fba2 2303 	umull	r2, r3, r2, r3
 80070ac:	095b      	lsrs	r3, r3, #5
 80070ae:	f003 020f 	and.w	r2, r3, #15
 80070b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	4422      	add	r2, r4
 80070ba:	609a      	str	r2, [r3, #8]
}
 80070bc:	bf00      	nop
 80070be:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80070c2:	46bd      	mov	sp, r7
 80070c4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80070c8:	51eb851f 	.word	0x51eb851f

080070cc <DEV_SPI_WRite>:
	HAL_Delay(xms);
}


void DEV_SPI_WRite(UBYTE _dat)
{
 80070cc:	b580      	push	{r7, lr}
 80070ce:	b082      	sub	sp, #8
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	4603      	mov	r3, r0
 80070d4:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&hspi2, (uint8_t *)&_dat, 1, 500);
 80070d6:	1df9      	adds	r1, r7, #7
 80070d8:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80070dc:	2201      	movs	r2, #1
 80070de:	4803      	ldr	r0, [pc, #12]	@ (80070ec <DEV_SPI_WRite+0x20>)
 80070e0:	f7fe fa41 	bl	8005566 <HAL_SPI_Transmit>
}
 80070e4:	bf00      	nop
 80070e6:	3708      	adds	r7, #8
 80070e8:	46bd      	mov	sp, r7
 80070ea:	bd80      	pop	{r7, pc}
 80070ec:	200002f8 	.word	0x200002f8

080070f0 <DEV_Module_Init>:

int DEV_Module_Init(void)
{
 80070f0:	b580      	push	{r7, lr}
 80070f2:	af00      	add	r7, sp, #0
    DEV_Digital_Write(DEV_DC_PIN, 1);
 80070f4:	2201      	movs	r2, #1
 80070f6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80070fa:	480b      	ldr	r0, [pc, #44]	@ (8007128 <DEV_Module_Init+0x38>)
 80070fc:	f7fc fb96 	bl	800382c <HAL_GPIO_WritePin>
    DEV_Digital_Write(DEV_CS_PIN, 1);
 8007100:	2201      	movs	r2, #1
 8007102:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8007106:	4808      	ldr	r0, [pc, #32]	@ (8007128 <DEV_Module_Init+0x38>)
 8007108:	f7fc fb90 	bl	800382c <HAL_GPIO_WritePin>
    DEV_Digital_Write(DEV_RST_PIN, 1);
 800710c:	2201      	movs	r2, #1
 800710e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8007112:	4805      	ldr	r0, [pc, #20]	@ (8007128 <DEV_Module_Init+0x38>)
 8007114:	f7fc fb8a 	bl	800382c <HAL_GPIO_WritePin>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8007118:	2104      	movs	r1, #4
 800711a:	4804      	ldr	r0, [pc, #16]	@ (800712c <DEV_Module_Init+0x3c>)
 800711c:	f7fe fd8c 	bl	8005c38 <HAL_TIM_PWM_Start>
		return 0;
 8007120:	2300      	movs	r3, #0
}
 8007122:	4618      	mov	r0, r3
 8007124:	bd80      	pop	{r7, pc}
 8007126:	bf00      	nop
 8007128:	40020400 	.word	0x40020400
 800712c:	20000354 	.word	0x20000354

08007130 <Paint_NewImage>:
    width   :   The width of the picture
    Height  :   The height of the picture
    Color   :   Whether the picture is inverted
******************************************************************************/
void Paint_NewImage(UWORD Width, UWORD Height, UWORD Rotate, UWORD Color)
{
 8007130:	b590      	push	{r4, r7, lr}
 8007132:	b083      	sub	sp, #12
 8007134:	af00      	add	r7, sp, #0
 8007136:	4604      	mov	r4, r0
 8007138:	4608      	mov	r0, r1
 800713a:	4611      	mov	r1, r2
 800713c:	461a      	mov	r2, r3
 800713e:	4623      	mov	r3, r4
 8007140:	80fb      	strh	r3, [r7, #6]
 8007142:	4603      	mov	r3, r0
 8007144:	80bb      	strh	r3, [r7, #4]
 8007146:	460b      	mov	r3, r1
 8007148:	807b      	strh	r3, [r7, #2]
 800714a:	4613      	mov	r3, r2
 800714c:	803b      	strh	r3, [r7, #0]
    Paint.WidthMemory = Width;
 800714e:	4a1c      	ldr	r2, [pc, #112]	@ (80071c0 <Paint_NewImage+0x90>)
 8007150:	88fb      	ldrh	r3, [r7, #6]
 8007152:	8113      	strh	r3, [r2, #8]
    Paint.HeightMemory = Height;
 8007154:	4a1a      	ldr	r2, [pc, #104]	@ (80071c0 <Paint_NewImage+0x90>)
 8007156:	88bb      	ldrh	r3, [r7, #4]
 8007158:	8153      	strh	r3, [r2, #10]
    Paint.Color = Color;    
 800715a:	4a19      	ldr	r2, [pc, #100]	@ (80071c0 <Paint_NewImage+0x90>)
 800715c:	883b      	ldrh	r3, [r7, #0]
 800715e:	8193      	strh	r3, [r2, #12]
    Paint.WidthByte = Width;
 8007160:	4a17      	ldr	r2, [pc, #92]	@ (80071c0 <Paint_NewImage+0x90>)
 8007162:	88fb      	ldrh	r3, [r7, #6]
 8007164:	8253      	strh	r3, [r2, #18]
    Paint.HeightByte = Height;    
 8007166:	4a16      	ldr	r2, [pc, #88]	@ (80071c0 <Paint_NewImage+0x90>)
 8007168:	88bb      	ldrh	r3, [r7, #4]
 800716a:	8293      	strh	r3, [r2, #20]
    printf("WidthByte = %d, HeightByte = %d\r\n", Paint.WidthByte, Paint.HeightByte);
 800716c:	4b14      	ldr	r3, [pc, #80]	@ (80071c0 <Paint_NewImage+0x90>)
 800716e:	8a5b      	ldrh	r3, [r3, #18]
 8007170:	b29b      	uxth	r3, r3
 8007172:	4619      	mov	r1, r3
 8007174:	4b12      	ldr	r3, [pc, #72]	@ (80071c0 <Paint_NewImage+0x90>)
 8007176:	8a9b      	ldrh	r3, [r3, #20]
 8007178:	b29b      	uxth	r3, r3
 800717a:	461a      	mov	r2, r3
 800717c:	4811      	ldr	r0, [pc, #68]	@ (80071c4 <Paint_NewImage+0x94>)
 800717e:	f001 fc67 	bl	8008a50 <iprintf>
   
    Paint.Rotate = Rotate;
 8007182:	4a0f      	ldr	r2, [pc, #60]	@ (80071c0 <Paint_NewImage+0x90>)
 8007184:	887b      	ldrh	r3, [r7, #2]
 8007186:	81d3      	strh	r3, [r2, #14]
    Paint.Mirror = MIRROR_NONE;
 8007188:	4b0d      	ldr	r3, [pc, #52]	@ (80071c0 <Paint_NewImage+0x90>)
 800718a:	2200      	movs	r2, #0
 800718c:	821a      	strh	r2, [r3, #16]
    
    if(Rotate == ROTATE_0 || Rotate == ROTATE_180) {
 800718e:	887b      	ldrh	r3, [r7, #2]
 8007190:	2b00      	cmp	r3, #0
 8007192:	d002      	beq.n	800719a <Paint_NewImage+0x6a>
 8007194:	887b      	ldrh	r3, [r7, #2]
 8007196:	2bb4      	cmp	r3, #180	@ 0xb4
 8007198:	d106      	bne.n	80071a8 <Paint_NewImage+0x78>
        Paint.Width = Width;
 800719a:	4a09      	ldr	r2, [pc, #36]	@ (80071c0 <Paint_NewImage+0x90>)
 800719c:	88fb      	ldrh	r3, [r7, #6]
 800719e:	8093      	strh	r3, [r2, #4]
        Paint.Height = Height;
 80071a0:	4a07      	ldr	r2, [pc, #28]	@ (80071c0 <Paint_NewImage+0x90>)
 80071a2:	88bb      	ldrh	r3, [r7, #4]
 80071a4:	80d3      	strh	r3, [r2, #6]
 80071a6:	e006      	b.n	80071b6 <Paint_NewImage+0x86>
    } else {
        Paint.Width = Height;
 80071a8:	4a05      	ldr	r2, [pc, #20]	@ (80071c0 <Paint_NewImage+0x90>)
 80071aa:	88bb      	ldrh	r3, [r7, #4]
 80071ac:	8093      	strh	r3, [r2, #4]
        Paint.Height = Width;
 80071ae:	4a04      	ldr	r2, [pc, #16]	@ (80071c0 <Paint_NewImage+0x90>)
 80071b0:	88fb      	ldrh	r3, [r7, #6]
 80071b2:	80d3      	strh	r3, [r2, #6]
    }
}
 80071b4:	bf00      	nop
 80071b6:	bf00      	nop
 80071b8:	370c      	adds	r7, #12
 80071ba:	46bd      	mov	sp, r7
 80071bc:	bd90      	pop	{r4, r7, pc}
 80071be:	bf00      	nop
 80071c0:	200004c0 	.word	0x200004c0
 80071c4:	0800c360 	.word	0x0800c360

080071c8 <Paint_SetClearFuntion>:
function:	Select Clear Funtion
parameter:
      Clear :   Pointer to Clear funtion 
******************************************************************************/
void Paint_SetClearFuntion(void (*Clear)(UWORD))
{
 80071c8:	b480      	push	{r7}
 80071ca:	b083      	sub	sp, #12
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	6078      	str	r0, [r7, #4]
  CLEAR=Clear;
 80071d0:	4a04      	ldr	r2, [pc, #16]	@ (80071e4 <Paint_SetClearFuntion+0x1c>)
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	6013      	str	r3, [r2, #0]
}
 80071d6:	bf00      	nop
 80071d8:	370c      	adds	r7, #12
 80071da:	46bd      	mov	sp, r7
 80071dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e0:	4770      	bx	lr
 80071e2:	bf00      	nop
 80071e4:	200004dc 	.word	0x200004dc

080071e8 <Paint_SetDisplayFuntion>:
function:	Select DisplayF untion
parameter:
      Display :   Pointer to display funtion 
******************************************************************************/
void Paint_SetDisplayFuntion(void (*Display)(UWORD,UWORD,UWORD))
{
 80071e8:	b480      	push	{r7}
 80071ea:	b083      	sub	sp, #12
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	6078      	str	r0, [r7, #4]
  DISPLAY=Display;
 80071f0:	4a04      	ldr	r2, [pc, #16]	@ (8007204 <Paint_SetDisplayFuntion+0x1c>)
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	6013      	str	r3, [r2, #0]
}
 80071f6:	bf00      	nop
 80071f8:	370c      	adds	r7, #12
 80071fa:	46bd      	mov	sp, r7
 80071fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007200:	4770      	bx	lr
 8007202:	bf00      	nop
 8007204:	200004d8 	.word	0x200004d8

08007208 <Paint_SetRotate>:
function:	Select Image Rotate
parameter:
    Rotate   :   0,90,180,270
******************************************************************************/
void Paint_SetRotate(UWORD Rotate)
{
 8007208:	b580      	push	{r7, lr}
 800720a:	b082      	sub	sp, #8
 800720c:	af00      	add	r7, sp, #0
 800720e:	4603      	mov	r3, r0
 8007210:	80fb      	strh	r3, [r7, #6]
    if(Rotate == ROTATE_0 || Rotate == ROTATE_90 || Rotate == ROTATE_180 || Rotate == ROTATE_270) {
 8007212:	88fb      	ldrh	r3, [r7, #6]
 8007214:	2b00      	cmp	r3, #0
 8007216:	d009      	beq.n	800722c <Paint_SetRotate+0x24>
 8007218:	88fb      	ldrh	r3, [r7, #6]
 800721a:	2b5a      	cmp	r3, #90	@ 0x5a
 800721c:	d006      	beq.n	800722c <Paint_SetRotate+0x24>
 800721e:	88fb      	ldrh	r3, [r7, #6]
 8007220:	2bb4      	cmp	r3, #180	@ 0xb4
 8007222:	d003      	beq.n	800722c <Paint_SetRotate+0x24>
 8007224:	88fb      	ldrh	r3, [r7, #6]
 8007226:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 800722a:	d108      	bne.n	800723e <Paint_SetRotate+0x36>
        Debug("Set image Rotate %d\r\n", Rotate);
 800722c:	88fb      	ldrh	r3, [r7, #6]
 800722e:	4619      	mov	r1, r3
 8007230:	4807      	ldr	r0, [pc, #28]	@ (8007250 <Paint_SetRotate+0x48>)
 8007232:	f001 fc0d 	bl	8008a50 <iprintf>
        Paint.Rotate = Rotate;
 8007236:	4a07      	ldr	r2, [pc, #28]	@ (8007254 <Paint_SetRotate+0x4c>)
 8007238:	88fb      	ldrh	r3, [r7, #6]
 800723a:	81d3      	strh	r3, [r2, #14]
 800723c:	e003      	b.n	8007246 <Paint_SetRotate+0x3e>
    } else {
        Debug("rotate = 0, 90, 180, 270\r\n");
 800723e:	4806      	ldr	r0, [pc, #24]	@ (8007258 <Paint_SetRotate+0x50>)
 8007240:	f001 fc6e 	bl	8008b20 <puts>
      //  exit(0);
    }
}
 8007244:	bf00      	nop
 8007246:	bf00      	nop
 8007248:	3708      	adds	r7, #8
 800724a:	46bd      	mov	sp, r7
 800724c:	bd80      	pop	{r7, pc}
 800724e:	bf00      	nop
 8007250:	0800c384 	.word	0x0800c384
 8007254:	200004c0 	.word	0x200004c0
 8007258:	0800c3a4 	.word	0x0800c3a4

0800725c <Paint_SetPixel>:
    Xpoint  :   At point X
    Ypoint  :   At point Y
    Color   :   Painted colors
******************************************************************************/
void Paint_SetPixel(UWORD Xpoint, UWORD Ypoint, UWORD Color)
{
 800725c:	b580      	push	{r7, lr}
 800725e:	b084      	sub	sp, #16
 8007260:	af00      	add	r7, sp, #0
 8007262:	4603      	mov	r3, r0
 8007264:	80fb      	strh	r3, [r7, #6]
 8007266:	460b      	mov	r3, r1
 8007268:	80bb      	strh	r3, [r7, #4]
 800726a:	4613      	mov	r3, r2
 800726c:	807b      	strh	r3, [r7, #2]
    if(Xpoint > Paint.Width || Ypoint > Paint.Height){
 800726e:	4b50      	ldr	r3, [pc, #320]	@ (80073b0 <Paint_SetPixel+0x154>)
 8007270:	889b      	ldrh	r3, [r3, #4]
 8007272:	b29b      	uxth	r3, r3
 8007274:	88fa      	ldrh	r2, [r7, #6]
 8007276:	429a      	cmp	r2, r3
 8007278:	d805      	bhi.n	8007286 <Paint_SetPixel+0x2a>
 800727a:	4b4d      	ldr	r3, [pc, #308]	@ (80073b0 <Paint_SetPixel+0x154>)
 800727c:	88db      	ldrh	r3, [r3, #6]
 800727e:	b29b      	uxth	r3, r3
 8007280:	88ba      	ldrh	r2, [r7, #4]
 8007282:	429a      	cmp	r2, r3
 8007284:	d903      	bls.n	800728e <Paint_SetPixel+0x32>
        Debug("Exceeding display boundaries\r\n");
 8007286:	484b      	ldr	r0, [pc, #300]	@ (80073b4 <Paint_SetPixel+0x158>)
 8007288:	f001 fc4a 	bl	8008b20 <puts>
        return;
 800728c:	e08c      	b.n	80073a8 <Paint_SetPixel+0x14c>
    }      
    UWORD X, Y;

    switch(Paint.Rotate) {
 800728e:	4b48      	ldr	r3, [pc, #288]	@ (80073b0 <Paint_SetPixel+0x154>)
 8007290:	89db      	ldrh	r3, [r3, #14]
 8007292:	b29b      	uxth	r3, r3
 8007294:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 8007298:	d02d      	beq.n	80072f6 <Paint_SetPixel+0x9a>
 800729a:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 800729e:	f300 8080 	bgt.w	80073a2 <Paint_SetPixel+0x146>
 80072a2:	2bb4      	cmp	r3, #180	@ 0xb4
 80072a4:	d016      	beq.n	80072d4 <Paint_SetPixel+0x78>
 80072a6:	2bb4      	cmp	r3, #180	@ 0xb4
 80072a8:	dc7b      	bgt.n	80073a2 <Paint_SetPixel+0x146>
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d002      	beq.n	80072b4 <Paint_SetPixel+0x58>
 80072ae:	2b5a      	cmp	r3, #90	@ 0x5a
 80072b0:	d005      	beq.n	80072be <Paint_SetPixel+0x62>
        X = Ypoint;
        Y = Paint.HeightMemory - Xpoint - 1;
        break;

    default:
        return;
 80072b2:	e076      	b.n	80073a2 <Paint_SetPixel+0x146>
        X = Xpoint;
 80072b4:	88fb      	ldrh	r3, [r7, #6]
 80072b6:	81fb      	strh	r3, [r7, #14]
        Y = Ypoint;  
 80072b8:	88bb      	ldrh	r3, [r7, #4]
 80072ba:	81bb      	strh	r3, [r7, #12]
        break;
 80072bc:	e026      	b.n	800730c <Paint_SetPixel+0xb0>
        X = Paint.WidthMemory - Ypoint - 1;
 80072be:	4b3c      	ldr	r3, [pc, #240]	@ (80073b0 <Paint_SetPixel+0x154>)
 80072c0:	891b      	ldrh	r3, [r3, #8]
 80072c2:	b29a      	uxth	r2, r3
 80072c4:	88bb      	ldrh	r3, [r7, #4]
 80072c6:	1ad3      	subs	r3, r2, r3
 80072c8:	b29b      	uxth	r3, r3
 80072ca:	3b01      	subs	r3, #1
 80072cc:	81fb      	strh	r3, [r7, #14]
        Y = Xpoint;
 80072ce:	88fb      	ldrh	r3, [r7, #6]
 80072d0:	81bb      	strh	r3, [r7, #12]
        break;
 80072d2:	e01b      	b.n	800730c <Paint_SetPixel+0xb0>
        X = Paint.WidthMemory - Xpoint - 1;
 80072d4:	4b36      	ldr	r3, [pc, #216]	@ (80073b0 <Paint_SetPixel+0x154>)
 80072d6:	891b      	ldrh	r3, [r3, #8]
 80072d8:	b29a      	uxth	r2, r3
 80072da:	88fb      	ldrh	r3, [r7, #6]
 80072dc:	1ad3      	subs	r3, r2, r3
 80072de:	b29b      	uxth	r3, r3
 80072e0:	3b01      	subs	r3, #1
 80072e2:	81fb      	strh	r3, [r7, #14]
        Y = Paint.HeightMemory - Ypoint - 1;
 80072e4:	4b32      	ldr	r3, [pc, #200]	@ (80073b0 <Paint_SetPixel+0x154>)
 80072e6:	895b      	ldrh	r3, [r3, #10]
 80072e8:	b29a      	uxth	r2, r3
 80072ea:	88bb      	ldrh	r3, [r7, #4]
 80072ec:	1ad3      	subs	r3, r2, r3
 80072ee:	b29b      	uxth	r3, r3
 80072f0:	3b01      	subs	r3, #1
 80072f2:	81bb      	strh	r3, [r7, #12]
        break;
 80072f4:	e00a      	b.n	800730c <Paint_SetPixel+0xb0>
        X = Ypoint;
 80072f6:	88bb      	ldrh	r3, [r7, #4]
 80072f8:	81fb      	strh	r3, [r7, #14]
        Y = Paint.HeightMemory - Xpoint - 1;
 80072fa:	4b2d      	ldr	r3, [pc, #180]	@ (80073b0 <Paint_SetPixel+0x154>)
 80072fc:	895b      	ldrh	r3, [r3, #10]
 80072fe:	b29a      	uxth	r2, r3
 8007300:	88fb      	ldrh	r3, [r7, #6]
 8007302:	1ad3      	subs	r3, r2, r3
 8007304:	b29b      	uxth	r3, r3
 8007306:	3b01      	subs	r3, #1
 8007308:	81bb      	strh	r3, [r7, #12]
        break;
 800730a:	bf00      	nop
    }
    
    switch(Paint.Mirror) {
 800730c:	4b28      	ldr	r3, [pc, #160]	@ (80073b0 <Paint_SetPixel+0x154>)
 800730e:	8a1b      	ldrh	r3, [r3, #16]
 8007310:	b29b      	uxth	r3, r3
 8007312:	2b03      	cmp	r3, #3
 8007314:	d847      	bhi.n	80073a6 <Paint_SetPixel+0x14a>
 8007316:	a201      	add	r2, pc, #4	@ (adr r2, 800731c <Paint_SetPixel+0xc0>)
 8007318:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800731c:	08007373 	.word	0x08007373
 8007320:	0800732d 	.word	0x0800732d
 8007324:	0800733f 	.word	0x0800733f
 8007328:	08007351 	.word	0x08007351
    case MIRROR_NONE:
        break;
    case MIRROR_HORIZONTAL:
        X = Paint.WidthMemory - X - 1;
 800732c:	4b20      	ldr	r3, [pc, #128]	@ (80073b0 <Paint_SetPixel+0x154>)
 800732e:	891b      	ldrh	r3, [r3, #8]
 8007330:	b29a      	uxth	r2, r3
 8007332:	89fb      	ldrh	r3, [r7, #14]
 8007334:	1ad3      	subs	r3, r2, r3
 8007336:	b29b      	uxth	r3, r3
 8007338:	3b01      	subs	r3, #1
 800733a:	81fb      	strh	r3, [r7, #14]
        break;
 800733c:	e01a      	b.n	8007374 <Paint_SetPixel+0x118>
    case MIRROR_VERTICAL:
        Y = Paint.HeightMemory - Y - 1;
 800733e:	4b1c      	ldr	r3, [pc, #112]	@ (80073b0 <Paint_SetPixel+0x154>)
 8007340:	895b      	ldrh	r3, [r3, #10]
 8007342:	b29a      	uxth	r2, r3
 8007344:	89bb      	ldrh	r3, [r7, #12]
 8007346:	1ad3      	subs	r3, r2, r3
 8007348:	b29b      	uxth	r3, r3
 800734a:	3b01      	subs	r3, #1
 800734c:	81bb      	strh	r3, [r7, #12]
        break;
 800734e:	e011      	b.n	8007374 <Paint_SetPixel+0x118>
    case MIRROR_ORIGIN:
        X = Paint.WidthMemory - X - 1;
 8007350:	4b17      	ldr	r3, [pc, #92]	@ (80073b0 <Paint_SetPixel+0x154>)
 8007352:	891b      	ldrh	r3, [r3, #8]
 8007354:	b29a      	uxth	r2, r3
 8007356:	89fb      	ldrh	r3, [r7, #14]
 8007358:	1ad3      	subs	r3, r2, r3
 800735a:	b29b      	uxth	r3, r3
 800735c:	3b01      	subs	r3, #1
 800735e:	81fb      	strh	r3, [r7, #14]
        Y = Paint.HeightMemory - Y - 1;
 8007360:	4b13      	ldr	r3, [pc, #76]	@ (80073b0 <Paint_SetPixel+0x154>)
 8007362:	895b      	ldrh	r3, [r3, #10]
 8007364:	b29a      	uxth	r2, r3
 8007366:	89bb      	ldrh	r3, [r7, #12]
 8007368:	1ad3      	subs	r3, r2, r3
 800736a:	b29b      	uxth	r3, r3
 800736c:	3b01      	subs	r3, #1
 800736e:	81bb      	strh	r3, [r7, #12]
        break;
 8007370:	e000      	b.n	8007374 <Paint_SetPixel+0x118>
        break;
 8007372:	bf00      	nop
    default:
        return;
    }

    // printf("x = %d, y = %d\r\n", X, Y);
    if(X > Paint.WidthMemory || Y > Paint.HeightMemory){
 8007374:	4b0e      	ldr	r3, [pc, #56]	@ (80073b0 <Paint_SetPixel+0x154>)
 8007376:	891b      	ldrh	r3, [r3, #8]
 8007378:	b29b      	uxth	r3, r3
 800737a:	89fa      	ldrh	r2, [r7, #14]
 800737c:	429a      	cmp	r2, r3
 800737e:	d805      	bhi.n	800738c <Paint_SetPixel+0x130>
 8007380:	4b0b      	ldr	r3, [pc, #44]	@ (80073b0 <Paint_SetPixel+0x154>)
 8007382:	895b      	ldrh	r3, [r3, #10]
 8007384:	b29b      	uxth	r3, r3
 8007386:	89ba      	ldrh	r2, [r7, #12]
 8007388:	429a      	cmp	r2, r3
 800738a:	d903      	bls.n	8007394 <Paint_SetPixel+0x138>
        Debug("Exceeding display boundaries\r\n");
 800738c:	4809      	ldr	r0, [pc, #36]	@ (80073b4 <Paint_SetPixel+0x158>)
 800738e:	f001 fbc7 	bl	8008b20 <puts>
        return;
 8007392:	e009      	b.n	80073a8 <Paint_SetPixel+0x14c>
    }
    
   // UDOUBLE Addr = X / 8 + Y * Paint.WidthByte;
		DISPLAY(X,Y, Color);
 8007394:	4b08      	ldr	r3, [pc, #32]	@ (80073b8 <Paint_SetPixel+0x15c>)
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	887a      	ldrh	r2, [r7, #2]
 800739a:	89b9      	ldrh	r1, [r7, #12]
 800739c:	89f8      	ldrh	r0, [r7, #14]
 800739e:	4798      	blx	r3
 80073a0:	e002      	b.n	80073a8 <Paint_SetPixel+0x14c>
        return;
 80073a2:	bf00      	nop
 80073a4:	e000      	b.n	80073a8 <Paint_SetPixel+0x14c>
        return;
 80073a6:	bf00      	nop
}
 80073a8:	3710      	adds	r7, #16
 80073aa:	46bd      	mov	sp, r7
 80073ac:	bd80      	pop	{r7, pc}
 80073ae:	bf00      	nop
 80073b0:	200004c0 	.word	0x200004c0
 80073b4:	0800c460 	.word	0x0800c460
 80073b8:	200004d8 	.word	0x200004d8

080073bc <Paint_Clear>:
function:	Clear the color of the picture
parameter:
    Color   :   Painted colors
******************************************************************************/
void Paint_Clear(UWORD Color)
{	
 80073bc:	b580      	push	{r7, lr}
 80073be:	b082      	sub	sp, #8
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	4603      	mov	r3, r0
 80073c4:	80fb      	strh	r3, [r7, #6]
	CLEAR(Color);
 80073c6:	4b04      	ldr	r3, [pc, #16]	@ (80073d8 <Paint_Clear+0x1c>)
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	88fa      	ldrh	r2, [r7, #6]
 80073cc:	4610      	mov	r0, r2
 80073ce:	4798      	blx	r3
}
 80073d0:	bf00      	nop
 80073d2:	3708      	adds	r7, #8
 80073d4:	46bd      	mov	sp, r7
 80073d6:	bd80      	pop	{r7, pc}
 80073d8:	200004dc 	.word	0x200004dc

080073dc <Paint_DrawChar>:
    Color_Background : Select the background color of the English character
    Color_Foreground : Select the foreground color of the English character
******************************************************************************/
void Paint_DrawChar(UWORD Xpoint, UWORD Ypoint, const char Acsii_Char,
                    sFONT* Font, UWORD Color_Background, UWORD Color_Foreground)
{
 80073dc:	b580      	push	{r7, lr}
 80073de:	b088      	sub	sp, #32
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	607b      	str	r3, [r7, #4]
 80073e4:	4603      	mov	r3, r0
 80073e6:	81fb      	strh	r3, [r7, #14]
 80073e8:	460b      	mov	r3, r1
 80073ea:	81bb      	strh	r3, [r7, #12]
 80073ec:	4613      	mov	r3, r2
 80073ee:	72fb      	strb	r3, [r7, #11]
    UWORD Page, Column;

    if (Xpoint > Paint.Width || Ypoint > Paint.Height) {
 80073f0:	4b4e      	ldr	r3, [pc, #312]	@ (800752c <Paint_DrawChar+0x150>)
 80073f2:	889b      	ldrh	r3, [r3, #4]
 80073f4:	b29b      	uxth	r3, r3
 80073f6:	89fa      	ldrh	r2, [r7, #14]
 80073f8:	429a      	cmp	r2, r3
 80073fa:	d805      	bhi.n	8007408 <Paint_DrawChar+0x2c>
 80073fc:	4b4b      	ldr	r3, [pc, #300]	@ (800752c <Paint_DrawChar+0x150>)
 80073fe:	88db      	ldrh	r3, [r3, #6]
 8007400:	b29b      	uxth	r3, r3
 8007402:	89ba      	ldrh	r2, [r7, #12]
 8007404:	429a      	cmp	r2, r3
 8007406:	d903      	bls.n	8007410 <Paint_DrawChar+0x34>
        Debug("Paint_DrawChar Input exceeds the normal display range\r\n");
 8007408:	4849      	ldr	r0, [pc, #292]	@ (8007530 <Paint_DrawChar+0x154>)
 800740a:	f001 fb89 	bl	8008b20 <puts>
        return;
 800740e:	e089      	b.n	8007524 <Paint_DrawChar+0x148>
    }

    uint32_t Char_Offset = (Acsii_Char - ' ') * Font->Height * (Font->Width / 8 + (Font->Width % 8 ? 1 : 0));
 8007410:	7afb      	ldrb	r3, [r7, #11]
 8007412:	3b20      	subs	r3, #32
 8007414:	687a      	ldr	r2, [r7, #4]
 8007416:	88d2      	ldrh	r2, [r2, #6]
 8007418:	fb02 f303 	mul.w	r3, r2, r3
 800741c:	687a      	ldr	r2, [r7, #4]
 800741e:	8892      	ldrh	r2, [r2, #4]
 8007420:	08d2      	lsrs	r2, r2, #3
 8007422:	b292      	uxth	r2, r2
 8007424:	4611      	mov	r1, r2
 8007426:	687a      	ldr	r2, [r7, #4]
 8007428:	8892      	ldrh	r2, [r2, #4]
 800742a:	f002 0207 	and.w	r2, r2, #7
 800742e:	b292      	uxth	r2, r2
 8007430:	2a00      	cmp	r2, #0
 8007432:	bf14      	ite	ne
 8007434:	2201      	movne	r2, #1
 8007436:	2200      	moveq	r2, #0
 8007438:	b2d2      	uxtb	r2, r2
 800743a:	440a      	add	r2, r1
 800743c:	fb02 f303 	mul.w	r3, r2, r3
 8007440:	617b      	str	r3, [r7, #20]
    const unsigned char *ptr = &Font->table[Char_Offset];
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681a      	ldr	r2, [r3, #0]
 8007446:	697b      	ldr	r3, [r7, #20]
 8007448:	4413      	add	r3, r2
 800744a:	61bb      	str	r3, [r7, #24]

    for (Page = 0; Page < Font->Height; Page ++ ) {
 800744c:	2300      	movs	r3, #0
 800744e:	83fb      	strh	r3, [r7, #30]
 8007450:	e063      	b.n	800751a <Paint_DrawChar+0x13e>
        for (Column = 0; Column < Font->Width; Column ++ ) {
 8007452:	2300      	movs	r3, #0
 8007454:	83bb      	strh	r3, [r7, #28]
 8007456:	e04e      	b.n	80074f6 <Paint_DrawChar+0x11a>

            //To determine whether the font background color and screen background color is consistent
            if (FONT_BACKGROUND == Color_Background) { //this process is to speed up the scan
 8007458:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800745a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800745e:	4293      	cmp	r3, r2
 8007460:	d118      	bne.n	8007494 <Paint_DrawChar+0xb8>
                if (*ptr & (0x80 >> (Column % 8)))
 8007462:	69bb      	ldr	r3, [r7, #24]
 8007464:	781b      	ldrb	r3, [r3, #0]
 8007466:	4619      	mov	r1, r3
 8007468:	8bbb      	ldrh	r3, [r7, #28]
 800746a:	f003 0307 	and.w	r3, r3, #7
 800746e:	2280      	movs	r2, #128	@ 0x80
 8007470:	fa42 f303 	asr.w	r3, r2, r3
 8007474:	400b      	ands	r3, r1
 8007476:	2b00      	cmp	r3, #0
 8007478:	d031      	beq.n	80074de <Paint_DrawChar+0x102>
                    Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Foreground);
 800747a:	89fa      	ldrh	r2, [r7, #14]
 800747c:	8bbb      	ldrh	r3, [r7, #28]
 800747e:	4413      	add	r3, r2
 8007480:	b298      	uxth	r0, r3
 8007482:	89ba      	ldrh	r2, [r7, #12]
 8007484:	8bfb      	ldrh	r3, [r7, #30]
 8007486:	4413      	add	r3, r2
 8007488:	b29b      	uxth	r3, r3
 800748a:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 800748c:	4619      	mov	r1, r3
 800748e:	f7ff fee5 	bl	800725c <Paint_SetPixel>
 8007492:	e024      	b.n	80074de <Paint_DrawChar+0x102>
                    // Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Foreground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
            } else {
                if (*ptr & (0x80 >> (Column % 8))) {
 8007494:	69bb      	ldr	r3, [r7, #24]
 8007496:	781b      	ldrb	r3, [r3, #0]
 8007498:	4619      	mov	r1, r3
 800749a:	8bbb      	ldrh	r3, [r7, #28]
 800749c:	f003 0307 	and.w	r3, r3, #7
 80074a0:	2280      	movs	r2, #128	@ 0x80
 80074a2:	fa42 f303 	asr.w	r3, r2, r3
 80074a6:	400b      	ands	r3, r1
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d00c      	beq.n	80074c6 <Paint_DrawChar+0xea>
                    Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Foreground);
 80074ac:	89fa      	ldrh	r2, [r7, #14]
 80074ae:	8bbb      	ldrh	r3, [r7, #28]
 80074b0:	4413      	add	r3, r2
 80074b2:	b298      	uxth	r0, r3
 80074b4:	89ba      	ldrh	r2, [r7, #12]
 80074b6:	8bfb      	ldrh	r3, [r7, #30]
 80074b8:	4413      	add	r3, r2
 80074ba:	b29b      	uxth	r3, r3
 80074bc:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 80074be:	4619      	mov	r1, r3
 80074c0:	f7ff fecc 	bl	800725c <Paint_SetPixel>
 80074c4:	e00b      	b.n	80074de <Paint_DrawChar+0x102>
                    // Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Foreground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
                } else {
                    Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Background);
 80074c6:	89fa      	ldrh	r2, [r7, #14]
 80074c8:	8bbb      	ldrh	r3, [r7, #28]
 80074ca:	4413      	add	r3, r2
 80074cc:	b298      	uxth	r0, r3
 80074ce:	89ba      	ldrh	r2, [r7, #12]
 80074d0:	8bfb      	ldrh	r3, [r7, #30]
 80074d2:	4413      	add	r3, r2
 80074d4:	b29b      	uxth	r3, r3
 80074d6:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80074d8:	4619      	mov	r1, r3
 80074da:	f7ff febf 	bl	800725c <Paint_SetPixel>
                    // Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Background, DOT_PIXEL_DFT, DOT_STYLE_DFT);
                }
            }
            //One pixel is 8 bits
            if (Column % 8 == 7)
 80074de:	8bbb      	ldrh	r3, [r7, #28]
 80074e0:	f003 0307 	and.w	r3, r3, #7
 80074e4:	b29b      	uxth	r3, r3
 80074e6:	2b07      	cmp	r3, #7
 80074e8:	d102      	bne.n	80074f0 <Paint_DrawChar+0x114>
                ptr++;
 80074ea:	69bb      	ldr	r3, [r7, #24]
 80074ec:	3301      	adds	r3, #1
 80074ee:	61bb      	str	r3, [r7, #24]
        for (Column = 0; Column < Font->Width; Column ++ ) {
 80074f0:	8bbb      	ldrh	r3, [r7, #28]
 80074f2:	3301      	adds	r3, #1
 80074f4:	83bb      	strh	r3, [r7, #28]
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	889b      	ldrh	r3, [r3, #4]
 80074fa:	8bba      	ldrh	r2, [r7, #28]
 80074fc:	429a      	cmp	r2, r3
 80074fe:	d3ab      	bcc.n	8007458 <Paint_DrawChar+0x7c>
        }// Write a line
        if (Font->Width % 8 != 0)
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	889b      	ldrh	r3, [r3, #4]
 8007504:	f003 0307 	and.w	r3, r3, #7
 8007508:	b29b      	uxth	r3, r3
 800750a:	2b00      	cmp	r3, #0
 800750c:	d002      	beq.n	8007514 <Paint_DrawChar+0x138>
            ptr++;
 800750e:	69bb      	ldr	r3, [r7, #24]
 8007510:	3301      	adds	r3, #1
 8007512:	61bb      	str	r3, [r7, #24]
    for (Page = 0; Page < Font->Height; Page ++ ) {
 8007514:	8bfb      	ldrh	r3, [r7, #30]
 8007516:	3301      	adds	r3, #1
 8007518:	83fb      	strh	r3, [r7, #30]
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	88db      	ldrh	r3, [r3, #6]
 800751e:	8bfa      	ldrh	r2, [r7, #30]
 8007520:	429a      	cmp	r2, r3
 8007522:	d396      	bcc.n	8007452 <Paint_DrawChar+0x76>
    }// Write all
}
 8007524:	3720      	adds	r7, #32
 8007526:	46bd      	mov	sp, r7
 8007528:	bd80      	pop	{r7, pc}
 800752a:	bf00      	nop
 800752c:	200004c0 	.word	0x200004c0
 8007530:	0800c57c 	.word	0x0800c57c

08007534 <Paint_DrawString_EN>:
    Color_Background : Select the background color of the English character
    Color_Foreground : Select the foreground color of the English character
******************************************************************************/
void Paint_DrawString_EN(UWORD Xstart, UWORD Ystart, const char * pString,
                         sFONT* Font, UWORD Color_Background, UWORD Color_Foreground )
{
 8007534:	b580      	push	{r7, lr}
 8007536:	b088      	sub	sp, #32
 8007538:	af02      	add	r7, sp, #8
 800753a:	60ba      	str	r2, [r7, #8]
 800753c:	607b      	str	r3, [r7, #4]
 800753e:	4603      	mov	r3, r0
 8007540:	81fb      	strh	r3, [r7, #14]
 8007542:	460b      	mov	r3, r1
 8007544:	81bb      	strh	r3, [r7, #12]
    UWORD Xpoint = Xstart;
 8007546:	89fb      	ldrh	r3, [r7, #14]
 8007548:	82fb      	strh	r3, [r7, #22]
    UWORD Ypoint = Ystart;
 800754a:	89bb      	ldrh	r3, [r7, #12]
 800754c:	82bb      	strh	r3, [r7, #20]

    if (Xstart > Paint.Width || Ystart > Paint.Height) {
 800754e:	4b23      	ldr	r3, [pc, #140]	@ (80075dc <Paint_DrawString_EN+0xa8>)
 8007550:	889b      	ldrh	r3, [r3, #4]
 8007552:	b29b      	uxth	r3, r3
 8007554:	89fa      	ldrh	r2, [r7, #14]
 8007556:	429a      	cmp	r2, r3
 8007558:	d805      	bhi.n	8007566 <Paint_DrawString_EN+0x32>
 800755a:	4b20      	ldr	r3, [pc, #128]	@ (80075dc <Paint_DrawString_EN+0xa8>)
 800755c:	88db      	ldrh	r3, [r3, #6]
 800755e:	b29b      	uxth	r3, r3
 8007560:	89ba      	ldrh	r2, [r7, #12]
 8007562:	429a      	cmp	r2, r3
 8007564:	d933      	bls.n	80075ce <Paint_DrawString_EN+0x9a>
        Debug("Paint_DrawString_EN Input exceeds the normal display range\r\n");
 8007566:	481e      	ldr	r0, [pc, #120]	@ (80075e0 <Paint_DrawString_EN+0xac>)
 8007568:	f001 fada 	bl	8008b20 <puts>
        return;
 800756c:	e033      	b.n	80075d6 <Paint_DrawString_EN+0xa2>
    }

    while (* pString != '\0') {
        //if X direction filled , reposition to(Xstart,Ypoint),Ypoint is Y direction plus the Height of the character
        if ((Xpoint + Font->Width ) > Paint.Width ) {
 800756e:	8afb      	ldrh	r3, [r7, #22]
 8007570:	687a      	ldr	r2, [r7, #4]
 8007572:	8892      	ldrh	r2, [r2, #4]
 8007574:	4413      	add	r3, r2
 8007576:	4a19      	ldr	r2, [pc, #100]	@ (80075dc <Paint_DrawString_EN+0xa8>)
 8007578:	8892      	ldrh	r2, [r2, #4]
 800757a:	b292      	uxth	r2, r2
 800757c:	4293      	cmp	r3, r2
 800757e:	dd06      	ble.n	800758e <Paint_DrawString_EN+0x5a>
            Xpoint = Xstart;
 8007580:	89fb      	ldrh	r3, [r7, #14]
 8007582:	82fb      	strh	r3, [r7, #22]
            Ypoint += Font->Height;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	88da      	ldrh	r2, [r3, #6]
 8007588:	8abb      	ldrh	r3, [r7, #20]
 800758a:	4413      	add	r3, r2
 800758c:	82bb      	strh	r3, [r7, #20]
        }

        // If the Y direction is full, reposition to(Xstart, Ystart)
        if ((Ypoint  + Font->Height ) > Paint.Height ) {
 800758e:	8abb      	ldrh	r3, [r7, #20]
 8007590:	687a      	ldr	r2, [r7, #4]
 8007592:	88d2      	ldrh	r2, [r2, #6]
 8007594:	4413      	add	r3, r2
 8007596:	4a11      	ldr	r2, [pc, #68]	@ (80075dc <Paint_DrawString_EN+0xa8>)
 8007598:	88d2      	ldrh	r2, [r2, #6]
 800759a:	b292      	uxth	r2, r2
 800759c:	4293      	cmp	r3, r2
 800759e:	dd03      	ble.n	80075a8 <Paint_DrawString_EN+0x74>
            Xpoint = Xstart;
 80075a0:	89fb      	ldrh	r3, [r7, #14]
 80075a2:	82fb      	strh	r3, [r7, #22]
            Ypoint = Ystart;
 80075a4:	89bb      	ldrh	r3, [r7, #12]
 80075a6:	82bb      	strh	r3, [r7, #20]
        }
        Paint_DrawChar(Xpoint, Ypoint, * pString, Font, Color_Background, Color_Foreground);
 80075a8:	68bb      	ldr	r3, [r7, #8]
 80075aa:	781a      	ldrb	r2, [r3, #0]
 80075ac:	8ab9      	ldrh	r1, [r7, #20]
 80075ae:	8af8      	ldrh	r0, [r7, #22]
 80075b0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80075b2:	9301      	str	r3, [sp, #4]
 80075b4:	8c3b      	ldrh	r3, [r7, #32]
 80075b6:	9300      	str	r3, [sp, #0]
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	f7ff ff0f 	bl	80073dc <Paint_DrawChar>

        //The next character of the address
        pString ++;
 80075be:	68bb      	ldr	r3, [r7, #8]
 80075c0:	3301      	adds	r3, #1
 80075c2:	60bb      	str	r3, [r7, #8]

        //The next word of the abscissa increases the font of the broadband
        Xpoint += Font->Width;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	889a      	ldrh	r2, [r3, #4]
 80075c8:	8afb      	ldrh	r3, [r7, #22]
 80075ca:	4413      	add	r3, r2
 80075cc:	82fb      	strh	r3, [r7, #22]
    while (* pString != '\0') {
 80075ce:	68bb      	ldr	r3, [r7, #8]
 80075d0:	781b      	ldrb	r3, [r3, #0]
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d1cb      	bne.n	800756e <Paint_DrawString_EN+0x3a>
    }
}
 80075d6:	3718      	adds	r7, #24
 80075d8:	46bd      	mov	sp, r7
 80075da:	bd80      	pop	{r7, pc}
 80075dc:	200004c0 	.word	0x200004c0
 80075e0:	0800c5bc 	.word	0x0800c5bc

080075e4 <LCD_2IN_Reset>:
/*******************************************************************************
function:
	Hardware reset
*******************************************************************************/
static void LCD_2IN_Reset(void)
{
 80075e4:	b580      	push	{r7, lr}
 80075e6:	af00      	add	r7, sp, #0
	LCD_2IN_RST_1;
 80075e8:	2201      	movs	r2, #1
 80075ea:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80075ee:	480d      	ldr	r0, [pc, #52]	@ (8007624 <LCD_2IN_Reset+0x40>)
 80075f0:	f7fc f91c 	bl	800382c <HAL_GPIO_WritePin>
	DEV_Delay_ms(100);
 80075f4:	2064      	movs	r0, #100	@ 0x64
 80075f6:	f7fb fe37 	bl	8003268 <HAL_Delay>
	LCD_2IN_RST_0;
 80075fa:	2200      	movs	r2, #0
 80075fc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8007600:	4808      	ldr	r0, [pc, #32]	@ (8007624 <LCD_2IN_Reset+0x40>)
 8007602:	f7fc f913 	bl	800382c <HAL_GPIO_WritePin>
	DEV_Delay_ms(100);
 8007606:	2064      	movs	r0, #100	@ 0x64
 8007608:	f7fb fe2e 	bl	8003268 <HAL_Delay>
	LCD_2IN_RST_1;
 800760c:	2201      	movs	r2, #1
 800760e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8007612:	4804      	ldr	r0, [pc, #16]	@ (8007624 <LCD_2IN_Reset+0x40>)
 8007614:	f7fc f90a 	bl	800382c <HAL_GPIO_WritePin>
	DEV_Delay_ms(100);
 8007618:	2064      	movs	r0, #100	@ 0x64
 800761a:	f7fb fe25 	bl	8003268 <HAL_Delay>
}
 800761e:	bf00      	nop
 8007620:	bd80      	pop	{r7, pc}
 8007622:	bf00      	nop
 8007624:	40020400 	.word	0x40020400

08007628 <LCD_2IN_Write_Command>:
/*******************************************************************************
function:
		Write data and commands
*******************************************************************************/
static void LCD_2IN_Write_Command(UBYTE data)	 
{	
 8007628:	b580      	push	{r7, lr}
 800762a:	b082      	sub	sp, #8
 800762c:	af00      	add	r7, sp, #0
 800762e:	4603      	mov	r3, r0
 8007630:	71fb      	strb	r3, [r7, #7]
	LCD_2IN_CS_0;
 8007632:	2200      	movs	r2, #0
 8007634:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8007638:	4808      	ldr	r0, [pc, #32]	@ (800765c <LCD_2IN_Write_Command+0x34>)
 800763a:	f7fc f8f7 	bl	800382c <HAL_GPIO_WritePin>
	LCD_2IN_DC_0;
 800763e:	2200      	movs	r2, #0
 8007640:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8007644:	4805      	ldr	r0, [pc, #20]	@ (800765c <LCD_2IN_Write_Command+0x34>)
 8007646:	f7fc f8f1 	bl	800382c <HAL_GPIO_WritePin>
	DEV_SPI_WRITE(data);
 800764a:	79fb      	ldrb	r3, [r7, #7]
 800764c:	4618      	mov	r0, r3
 800764e:	f7ff fd3d 	bl	80070cc <DEV_SPI_WRite>
}
 8007652:	bf00      	nop
 8007654:	3708      	adds	r7, #8
 8007656:	46bd      	mov	sp, r7
 8007658:	bd80      	pop	{r7, pc}
 800765a:	bf00      	nop
 800765c:	40020400 	.word	0x40020400

08007660 <LCD_2IN_WriteData_Byte>:

static void LCD_2IN_WriteData_Byte(UBYTE data) 
{	
 8007660:	b580      	push	{r7, lr}
 8007662:	b082      	sub	sp, #8
 8007664:	af00      	add	r7, sp, #0
 8007666:	4603      	mov	r3, r0
 8007668:	71fb      	strb	r3, [r7, #7]
	LCD_2IN_CS_0;
 800766a:	2200      	movs	r2, #0
 800766c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8007670:	480b      	ldr	r0, [pc, #44]	@ (80076a0 <LCD_2IN_WriteData_Byte+0x40>)
 8007672:	f7fc f8db 	bl	800382c <HAL_GPIO_WritePin>
	LCD_2IN_DC_1;
 8007676:	2201      	movs	r2, #1
 8007678:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800767c:	4808      	ldr	r0, [pc, #32]	@ (80076a0 <LCD_2IN_WriteData_Byte+0x40>)
 800767e:	f7fc f8d5 	bl	800382c <HAL_GPIO_WritePin>
	DEV_SPI_WRITE(data);  
 8007682:	79fb      	ldrb	r3, [r7, #7]
 8007684:	4618      	mov	r0, r3
 8007686:	f7ff fd21 	bl	80070cc <DEV_SPI_WRite>
	LCD_2IN_CS_1;
 800768a:	2201      	movs	r2, #1
 800768c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8007690:	4803      	ldr	r0, [pc, #12]	@ (80076a0 <LCD_2IN_WriteData_Byte+0x40>)
 8007692:	f7fc f8cb 	bl	800382c <HAL_GPIO_WritePin>
}  
 8007696:	bf00      	nop
 8007698:	3708      	adds	r7, #8
 800769a:	46bd      	mov	sp, r7
 800769c:	bd80      	pop	{r7, pc}
 800769e:	bf00      	nop
 80076a0:	40020400 	.word	0x40020400

080076a4 <LCD_2IN_WriteData_Word>:

void LCD_2IN_WriteData_Word(UWORD data)
{
 80076a4:	b580      	push	{r7, lr}
 80076a6:	b082      	sub	sp, #8
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	4603      	mov	r3, r0
 80076ac:	80fb      	strh	r3, [r7, #6]
	LCD_2IN_CS_0;
 80076ae:	2200      	movs	r2, #0
 80076b0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80076b4:	480f      	ldr	r0, [pc, #60]	@ (80076f4 <LCD_2IN_WriteData_Word+0x50>)
 80076b6:	f7fc f8b9 	bl	800382c <HAL_GPIO_WritePin>
	LCD_2IN_DC_1;
 80076ba:	2201      	movs	r2, #1
 80076bc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80076c0:	480c      	ldr	r0, [pc, #48]	@ (80076f4 <LCD_2IN_WriteData_Word+0x50>)
 80076c2:	f7fc f8b3 	bl	800382c <HAL_GPIO_WritePin>
	DEV_SPI_WRITE((data>>8) & 0xff);
 80076c6:	88fb      	ldrh	r3, [r7, #6]
 80076c8:	0a1b      	lsrs	r3, r3, #8
 80076ca:	b29b      	uxth	r3, r3
 80076cc:	b2db      	uxtb	r3, r3
 80076ce:	4618      	mov	r0, r3
 80076d0:	f7ff fcfc 	bl	80070cc <DEV_SPI_WRite>
	DEV_SPI_WRITE(data);
 80076d4:	88fb      	ldrh	r3, [r7, #6]
 80076d6:	b2db      	uxtb	r3, r3
 80076d8:	4618      	mov	r0, r3
 80076da:	f7ff fcf7 	bl	80070cc <DEV_SPI_WRite>
	LCD_2IN_CS_1;
 80076de:	2201      	movs	r2, #1
 80076e0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80076e4:	4803      	ldr	r0, [pc, #12]	@ (80076f4 <LCD_2IN_WriteData_Word+0x50>)
 80076e6:	f7fc f8a1 	bl	800382c <HAL_GPIO_WritePin>
}	  
 80076ea:	bf00      	nop
 80076ec:	3708      	adds	r7, #8
 80076ee:	46bd      	mov	sp, r7
 80076f0:	bd80      	pop	{r7, pc}
 80076f2:	bf00      	nop
 80076f4:	40020400 	.word	0x40020400

080076f8 <LCD_2IN_Init>:
/******************************************************************************
function:	
		Common register initialization
******************************************************************************/
void LCD_2IN_Init(void)
{
 80076f8:	b580      	push	{r7, lr}
 80076fa:	af00      	add	r7, sp, #0
	LCD_2IN_Reset();
 80076fc:	f7ff ff72 	bl	80075e4 <LCD_2IN_Reset>

	LCD_2IN_Write_Command(0x36);
 8007700:	2036      	movs	r0, #54	@ 0x36
 8007702:	f7ff ff91 	bl	8007628 <LCD_2IN_Write_Command>
	LCD_2IN_WriteData_Byte(0x00); 
 8007706:	2000      	movs	r0, #0
 8007708:	f7ff ffaa 	bl	8007660 <LCD_2IN_WriteData_Byte>

	LCD_2IN_Write_Command(0x3A); 
 800770c:	203a      	movs	r0, #58	@ 0x3a
 800770e:	f7ff ff8b 	bl	8007628 <LCD_2IN_Write_Command>
	LCD_2IN_WriteData_Byte(0x05);
 8007712:	2005      	movs	r0, #5
 8007714:	f7ff ffa4 	bl	8007660 <LCD_2IN_WriteData_Byte>

	LCD_2IN_Write_Command(0x21); 
 8007718:	2021      	movs	r0, #33	@ 0x21
 800771a:	f7ff ff85 	bl	8007628 <LCD_2IN_Write_Command>

	LCD_2IN_Write_Command(0x2A);
 800771e:	202a      	movs	r0, #42	@ 0x2a
 8007720:	f7ff ff82 	bl	8007628 <LCD_2IN_Write_Command>
	LCD_2IN_WriteData_Byte(0x00);
 8007724:	2000      	movs	r0, #0
 8007726:	f7ff ff9b 	bl	8007660 <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x00);
 800772a:	2000      	movs	r0, #0
 800772c:	f7ff ff98 	bl	8007660 <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x01);
 8007730:	2001      	movs	r0, #1
 8007732:	f7ff ff95 	bl	8007660 <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x3F);
 8007736:	203f      	movs	r0, #63	@ 0x3f
 8007738:	f7ff ff92 	bl	8007660 <LCD_2IN_WriteData_Byte>

	LCD_2IN_Write_Command(0x2B);
 800773c:	202b      	movs	r0, #43	@ 0x2b
 800773e:	f7ff ff73 	bl	8007628 <LCD_2IN_Write_Command>
	LCD_2IN_WriteData_Byte(0x00);
 8007742:	2000      	movs	r0, #0
 8007744:	f7ff ff8c 	bl	8007660 <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x00);
 8007748:	2000      	movs	r0, #0
 800774a:	f7ff ff89 	bl	8007660 <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x00);
 800774e:	2000      	movs	r0, #0
 8007750:	f7ff ff86 	bl	8007660 <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0xEF);
 8007754:	20ef      	movs	r0, #239	@ 0xef
 8007756:	f7ff ff83 	bl	8007660 <LCD_2IN_WriteData_Byte>

	LCD_2IN_Write_Command(0xB2);
 800775a:	20b2      	movs	r0, #178	@ 0xb2
 800775c:	f7ff ff64 	bl	8007628 <LCD_2IN_Write_Command>
	LCD_2IN_WriteData_Byte(0x0C);
 8007760:	200c      	movs	r0, #12
 8007762:	f7ff ff7d 	bl	8007660 <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x0C);
 8007766:	200c      	movs	r0, #12
 8007768:	f7ff ff7a 	bl	8007660 <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x00);
 800776c:	2000      	movs	r0, #0
 800776e:	f7ff ff77 	bl	8007660 <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x33);
 8007772:	2033      	movs	r0, #51	@ 0x33
 8007774:	f7ff ff74 	bl	8007660 <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x33);
 8007778:	2033      	movs	r0, #51	@ 0x33
 800777a:	f7ff ff71 	bl	8007660 <LCD_2IN_WriteData_Byte>

	LCD_2IN_Write_Command(0xB7);
 800777e:	20b7      	movs	r0, #183	@ 0xb7
 8007780:	f7ff ff52 	bl	8007628 <LCD_2IN_Write_Command>
	LCD_2IN_WriteData_Byte(0x35); 
 8007784:	2035      	movs	r0, #53	@ 0x35
 8007786:	f7ff ff6b 	bl	8007660 <LCD_2IN_WriteData_Byte>

	LCD_2IN_Write_Command(0xBB);
 800778a:	20bb      	movs	r0, #187	@ 0xbb
 800778c:	f7ff ff4c 	bl	8007628 <LCD_2IN_Write_Command>
	LCD_2IN_WriteData_Byte(0x1F);
 8007790:	201f      	movs	r0, #31
 8007792:	f7ff ff65 	bl	8007660 <LCD_2IN_WriteData_Byte>

	LCD_2IN_Write_Command(0xC0);
 8007796:	20c0      	movs	r0, #192	@ 0xc0
 8007798:	f7ff ff46 	bl	8007628 <LCD_2IN_Write_Command>
	LCD_2IN_WriteData_Byte(0x2C);
 800779c:	202c      	movs	r0, #44	@ 0x2c
 800779e:	f7ff ff5f 	bl	8007660 <LCD_2IN_WriteData_Byte>

	LCD_2IN_Write_Command(0xC2);
 80077a2:	20c2      	movs	r0, #194	@ 0xc2
 80077a4:	f7ff ff40 	bl	8007628 <LCD_2IN_Write_Command>
	LCD_2IN_WriteData_Byte(0x01);
 80077a8:	2001      	movs	r0, #1
 80077aa:	f7ff ff59 	bl	8007660 <LCD_2IN_WriteData_Byte>

	LCD_2IN_Write_Command(0xC3);
 80077ae:	20c3      	movs	r0, #195	@ 0xc3
 80077b0:	f7ff ff3a 	bl	8007628 <LCD_2IN_Write_Command>
	LCD_2IN_WriteData_Byte(0x12);   
 80077b4:	2012      	movs	r0, #18
 80077b6:	f7ff ff53 	bl	8007660 <LCD_2IN_WriteData_Byte>

	LCD_2IN_Write_Command(0xC4);
 80077ba:	20c4      	movs	r0, #196	@ 0xc4
 80077bc:	f7ff ff34 	bl	8007628 <LCD_2IN_Write_Command>
	LCD_2IN_WriteData_Byte(0x20);
 80077c0:	2020      	movs	r0, #32
 80077c2:	f7ff ff4d 	bl	8007660 <LCD_2IN_WriteData_Byte>

	LCD_2IN_Write_Command(0xC6);
 80077c6:	20c6      	movs	r0, #198	@ 0xc6
 80077c8:	f7ff ff2e 	bl	8007628 <LCD_2IN_Write_Command>
	LCD_2IN_WriteData_Byte(0x0F); 
 80077cc:	200f      	movs	r0, #15
 80077ce:	f7ff ff47 	bl	8007660 <LCD_2IN_WriteData_Byte>

	LCD_2IN_Write_Command(0xD0);
 80077d2:	20d0      	movs	r0, #208	@ 0xd0
 80077d4:	f7ff ff28 	bl	8007628 <LCD_2IN_Write_Command>
	LCD_2IN_WriteData_Byte(0xA4);
 80077d8:	20a4      	movs	r0, #164	@ 0xa4
 80077da:	f7ff ff41 	bl	8007660 <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0xA1);
 80077de:	20a1      	movs	r0, #161	@ 0xa1
 80077e0:	f7ff ff3e 	bl	8007660 <LCD_2IN_WriteData_Byte>

	LCD_2IN_Write_Command(0xE0);
 80077e4:	20e0      	movs	r0, #224	@ 0xe0
 80077e6:	f7ff ff1f 	bl	8007628 <LCD_2IN_Write_Command>
	LCD_2IN_WriteData_Byte(0xD0);
 80077ea:	20d0      	movs	r0, #208	@ 0xd0
 80077ec:	f7ff ff38 	bl	8007660 <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x08);
 80077f0:	2008      	movs	r0, #8
 80077f2:	f7ff ff35 	bl	8007660 <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x11);
 80077f6:	2011      	movs	r0, #17
 80077f8:	f7ff ff32 	bl	8007660 <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x08);
 80077fc:	2008      	movs	r0, #8
 80077fe:	f7ff ff2f 	bl	8007660 <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x0C);
 8007802:	200c      	movs	r0, #12
 8007804:	f7ff ff2c 	bl	8007660 <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x15);
 8007808:	2015      	movs	r0, #21
 800780a:	f7ff ff29 	bl	8007660 <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x39);
 800780e:	2039      	movs	r0, #57	@ 0x39
 8007810:	f7ff ff26 	bl	8007660 <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x33);
 8007814:	2033      	movs	r0, #51	@ 0x33
 8007816:	f7ff ff23 	bl	8007660 <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x50);
 800781a:	2050      	movs	r0, #80	@ 0x50
 800781c:	f7ff ff20 	bl	8007660 <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x36);
 8007820:	2036      	movs	r0, #54	@ 0x36
 8007822:	f7ff ff1d 	bl	8007660 <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x13);
 8007826:	2013      	movs	r0, #19
 8007828:	f7ff ff1a 	bl	8007660 <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x14);
 800782c:	2014      	movs	r0, #20
 800782e:	f7ff ff17 	bl	8007660 <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x29);
 8007832:	2029      	movs	r0, #41	@ 0x29
 8007834:	f7ff ff14 	bl	8007660 <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x2D);
 8007838:	202d      	movs	r0, #45	@ 0x2d
 800783a:	f7ff ff11 	bl	8007660 <LCD_2IN_WriteData_Byte>

	LCD_2IN_Write_Command(0xE1);
 800783e:	20e1      	movs	r0, #225	@ 0xe1
 8007840:	f7ff fef2 	bl	8007628 <LCD_2IN_Write_Command>
	LCD_2IN_WriteData_Byte(0xD0);
 8007844:	20d0      	movs	r0, #208	@ 0xd0
 8007846:	f7ff ff0b 	bl	8007660 <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x08);
 800784a:	2008      	movs	r0, #8
 800784c:	f7ff ff08 	bl	8007660 <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x10);
 8007850:	2010      	movs	r0, #16
 8007852:	f7ff ff05 	bl	8007660 <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x08);
 8007856:	2008      	movs	r0, #8
 8007858:	f7ff ff02 	bl	8007660 <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x06);
 800785c:	2006      	movs	r0, #6
 800785e:	f7ff feff 	bl	8007660 <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x06);
 8007862:	2006      	movs	r0, #6
 8007864:	f7ff fefc 	bl	8007660 <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x39);
 8007868:	2039      	movs	r0, #57	@ 0x39
 800786a:	f7ff fef9 	bl	8007660 <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x44);
 800786e:	2044      	movs	r0, #68	@ 0x44
 8007870:	f7ff fef6 	bl	8007660 <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x51);
 8007874:	2051      	movs	r0, #81	@ 0x51
 8007876:	f7ff fef3 	bl	8007660 <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x0B);
 800787a:	200b      	movs	r0, #11
 800787c:	f7ff fef0 	bl	8007660 <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x16);
 8007880:	2016      	movs	r0, #22
 8007882:	f7ff feed 	bl	8007660 <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x14);
 8007886:	2014      	movs	r0, #20
 8007888:	f7ff feea 	bl	8007660 <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x2F);
 800788c:	202f      	movs	r0, #47	@ 0x2f
 800788e:	f7ff fee7 	bl	8007660 <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x31);
 8007892:	2031      	movs	r0, #49	@ 0x31
 8007894:	f7ff fee4 	bl	8007660 <LCD_2IN_WriteData_Byte>
	LCD_2IN_Write_Command(0x21);
 8007898:	2021      	movs	r0, #33	@ 0x21
 800789a:	f7ff fec5 	bl	8007628 <LCD_2IN_Write_Command>

	LCD_2IN_Write_Command(0x11);
 800789e:	2011      	movs	r0, #17
 80078a0:	f7ff fec2 	bl	8007628 <LCD_2IN_Write_Command>

	LCD_2IN_Write_Command(0x29);
 80078a4:	2029      	movs	r0, #41	@ 0x29
 80078a6:	f7ff febf 	bl	8007628 <LCD_2IN_Write_Command>
}
 80078aa:	bf00      	nop
 80078ac:	bd80      	pop	{r7, pc}

080078ae <LCD_2IN_SetWindow>:
	  Ystart:	Start UWORD y coordinate
	  Xend  :	End UWORD coordinates
	  Yend  :	End UWORD coordinatesen
******************************************************************************/
void LCD_2IN_SetWindow(UWORD Xstart, UWORD Ystart, UWORD Xend, UWORD  Yend)
{ 
 80078ae:	b590      	push	{r4, r7, lr}
 80078b0:	b083      	sub	sp, #12
 80078b2:	af00      	add	r7, sp, #0
 80078b4:	4604      	mov	r4, r0
 80078b6:	4608      	mov	r0, r1
 80078b8:	4611      	mov	r1, r2
 80078ba:	461a      	mov	r2, r3
 80078bc:	4623      	mov	r3, r4
 80078be:	80fb      	strh	r3, [r7, #6]
 80078c0:	4603      	mov	r3, r0
 80078c2:	80bb      	strh	r3, [r7, #4]
 80078c4:	460b      	mov	r3, r1
 80078c6:	807b      	strh	r3, [r7, #2]
 80078c8:	4613      	mov	r3, r2
 80078ca:	803b      	strh	r3, [r7, #0]
	LCD_2IN_Write_Command(0x2a);
 80078cc:	202a      	movs	r0, #42	@ 0x2a
 80078ce:	f7ff feab 	bl	8007628 <LCD_2IN_Write_Command>
	LCD_2IN_WriteData_Byte(Xstart >>8);
 80078d2:	88fb      	ldrh	r3, [r7, #6]
 80078d4:	0a1b      	lsrs	r3, r3, #8
 80078d6:	b29b      	uxth	r3, r3
 80078d8:	b2db      	uxtb	r3, r3
 80078da:	4618      	mov	r0, r3
 80078dc:	f7ff fec0 	bl	8007660 <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(Xstart & 0xff);
 80078e0:	88fb      	ldrh	r3, [r7, #6]
 80078e2:	b2db      	uxtb	r3, r3
 80078e4:	4618      	mov	r0, r3
 80078e6:	f7ff febb 	bl	8007660 <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte((Xend - 1) >> 8);
 80078ea:	887b      	ldrh	r3, [r7, #2]
 80078ec:	3b01      	subs	r3, #1
 80078ee:	121b      	asrs	r3, r3, #8
 80078f0:	b2db      	uxtb	r3, r3
 80078f2:	4618      	mov	r0, r3
 80078f4:	f7ff feb4 	bl	8007660 <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte((Xend - 1) & 0xff);
 80078f8:	887b      	ldrh	r3, [r7, #2]
 80078fa:	b2db      	uxtb	r3, r3
 80078fc:	3b01      	subs	r3, #1
 80078fe:	b2db      	uxtb	r3, r3
 8007900:	4618      	mov	r0, r3
 8007902:	f7ff fead 	bl	8007660 <LCD_2IN_WriteData_Byte>

	LCD_2IN_Write_Command(0x2b);
 8007906:	202b      	movs	r0, #43	@ 0x2b
 8007908:	f7ff fe8e 	bl	8007628 <LCD_2IN_Write_Command>
	LCD_2IN_WriteData_Byte(Ystart >>8);
 800790c:	88bb      	ldrh	r3, [r7, #4]
 800790e:	0a1b      	lsrs	r3, r3, #8
 8007910:	b29b      	uxth	r3, r3
 8007912:	b2db      	uxtb	r3, r3
 8007914:	4618      	mov	r0, r3
 8007916:	f7ff fea3 	bl	8007660 <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(Ystart & 0xff);
 800791a:	88bb      	ldrh	r3, [r7, #4]
 800791c:	b2db      	uxtb	r3, r3
 800791e:	4618      	mov	r0, r3
 8007920:	f7ff fe9e 	bl	8007660 <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte((Yend - 1) >> 8);
 8007924:	883b      	ldrh	r3, [r7, #0]
 8007926:	3b01      	subs	r3, #1
 8007928:	121b      	asrs	r3, r3, #8
 800792a:	b2db      	uxtb	r3, r3
 800792c:	4618      	mov	r0, r3
 800792e:	f7ff fe97 	bl	8007660 <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte((Yend - 1) & 0xff);
 8007932:	883b      	ldrh	r3, [r7, #0]
 8007934:	b2db      	uxtb	r3, r3
 8007936:	3b01      	subs	r3, #1
 8007938:	b2db      	uxtb	r3, r3
 800793a:	4618      	mov	r0, r3
 800793c:	f7ff fe90 	bl	8007660 <LCD_2IN_WriteData_Byte>

	LCD_2IN_Write_Command(0x2C);
 8007940:	202c      	movs	r0, #44	@ 0x2c
 8007942:	f7ff fe71 	bl	8007628 <LCD_2IN_Write_Command>
}
 8007946:	bf00      	nop
 8007948:	370c      	adds	r7, #12
 800794a:	46bd      	mov	sp, r7
 800794c:	bd90      	pop	{r4, r7, pc}

0800794e <LCD_2IN_SetCursor>:
	  Xstart: 	Start UWORD x coordinate
	  Ystart:	Start UWORD y coordinate

******************************************************************************/
void LCD_2IN_SetCursor(UWORD X, UWORD Y)
{ 
 800794e:	b580      	push	{r7, lr}
 8007950:	b082      	sub	sp, #8
 8007952:	af00      	add	r7, sp, #0
 8007954:	4603      	mov	r3, r0
 8007956:	460a      	mov	r2, r1
 8007958:	80fb      	strh	r3, [r7, #6]
 800795a:	4613      	mov	r3, r2
 800795c:	80bb      	strh	r3, [r7, #4]
	LCD_2IN_Write_Command(0x2a);
 800795e:	202a      	movs	r0, #42	@ 0x2a
 8007960:	f7ff fe62 	bl	8007628 <LCD_2IN_Write_Command>
	LCD_2IN_WriteData_Byte(X >> 8);
 8007964:	88fb      	ldrh	r3, [r7, #6]
 8007966:	0a1b      	lsrs	r3, r3, #8
 8007968:	b29b      	uxth	r3, r3
 800796a:	b2db      	uxtb	r3, r3
 800796c:	4618      	mov	r0, r3
 800796e:	f7ff fe77 	bl	8007660 <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(X);
 8007972:	88fb      	ldrh	r3, [r7, #6]
 8007974:	b2db      	uxtb	r3, r3
 8007976:	4618      	mov	r0, r3
 8007978:	f7ff fe72 	bl	8007660 <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(X >> 8);
 800797c:	88fb      	ldrh	r3, [r7, #6]
 800797e:	0a1b      	lsrs	r3, r3, #8
 8007980:	b29b      	uxth	r3, r3
 8007982:	b2db      	uxtb	r3, r3
 8007984:	4618      	mov	r0, r3
 8007986:	f7ff fe6b 	bl	8007660 <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(X);
 800798a:	88fb      	ldrh	r3, [r7, #6]
 800798c:	b2db      	uxtb	r3, r3
 800798e:	4618      	mov	r0, r3
 8007990:	f7ff fe66 	bl	8007660 <LCD_2IN_WriteData_Byte>

	LCD_2IN_Write_Command(0x2b);
 8007994:	202b      	movs	r0, #43	@ 0x2b
 8007996:	f7ff fe47 	bl	8007628 <LCD_2IN_Write_Command>
	LCD_2IN_WriteData_Byte(Y >> 8);
 800799a:	88bb      	ldrh	r3, [r7, #4]
 800799c:	0a1b      	lsrs	r3, r3, #8
 800799e:	b29b      	uxth	r3, r3
 80079a0:	b2db      	uxtb	r3, r3
 80079a2:	4618      	mov	r0, r3
 80079a4:	f7ff fe5c 	bl	8007660 <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(Y);
 80079a8:	88bb      	ldrh	r3, [r7, #4]
 80079aa:	b2db      	uxtb	r3, r3
 80079ac:	4618      	mov	r0, r3
 80079ae:	f7ff fe57 	bl	8007660 <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(Y >> 8);
 80079b2:	88bb      	ldrh	r3, [r7, #4]
 80079b4:	0a1b      	lsrs	r3, r3, #8
 80079b6:	b29b      	uxth	r3, r3
 80079b8:	b2db      	uxtb	r3, r3
 80079ba:	4618      	mov	r0, r3
 80079bc:	f7ff fe50 	bl	8007660 <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(Y);
 80079c0:	88bb      	ldrh	r3, [r7, #4]
 80079c2:	b2db      	uxtb	r3, r3
 80079c4:	4618      	mov	r0, r3
 80079c6:	f7ff fe4b 	bl	8007660 <LCD_2IN_WriteData_Byte>

	LCD_2IN_Write_Command(0x2C);
 80079ca:	202c      	movs	r0, #44	@ 0x2c
 80079cc:	f7ff fe2c 	bl	8007628 <LCD_2IN_Write_Command>
}
 80079d0:	bf00      	nop
 80079d2:	3708      	adds	r7, #8
 80079d4:	46bd      	mov	sp, r7
 80079d6:	bd80      	pop	{r7, pc}

080079d8 <LCD_2IN_Clear>:
function:	Clear screen function, refresh the screen to a certain color
parameter	:
	  Color :		The color you want to clear all the screen
******************************************************************************/
void LCD_2IN_Clear(UWORD Color)
{
 80079d8:	b580      	push	{r7, lr}
 80079da:	b084      	sub	sp, #16
 80079dc:	af00      	add	r7, sp, #0
 80079de:	4603      	mov	r3, r0
 80079e0:	80fb      	strh	r3, [r7, #6]
    UWORD i,j;
    LCD_2IN_SetWindow(0, 0, LCD_2IN_WIDTH, LCD_2IN_HEIGHT);
 80079e2:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 80079e6:	22f0      	movs	r2, #240	@ 0xf0
 80079e8:	2100      	movs	r1, #0
 80079ea:	2000      	movs	r0, #0
 80079ec:	f7ff ff5f 	bl	80078ae <LCD_2IN_SetWindow>

	DEV_Digital_Write(DEV_DC_PIN, 1);
 80079f0:	2201      	movs	r2, #1
 80079f2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80079f6:	480f      	ldr	r0, [pc, #60]	@ (8007a34 <LCD_2IN_Clear+0x5c>)
 80079f8:	f7fb ff18 	bl	800382c <HAL_GPIO_WritePin>
	for(i = 0; i < LCD_2IN_WIDTH; i++){
 80079fc:	2300      	movs	r3, #0
 80079fe:	81fb      	strh	r3, [r7, #14]
 8007a00:	e010      	b.n	8007a24 <LCD_2IN_Clear+0x4c>
		for(j = 0; j < LCD_2IN_HEIGHT; j++){
 8007a02:	2300      	movs	r3, #0
 8007a04:	81bb      	strh	r3, [r7, #12]
 8007a06:	e006      	b.n	8007a16 <LCD_2IN_Clear+0x3e>
			LCD_2IN_WriteData_Word(Color);
 8007a08:	88fb      	ldrh	r3, [r7, #6]
 8007a0a:	4618      	mov	r0, r3
 8007a0c:	f7ff fe4a 	bl	80076a4 <LCD_2IN_WriteData_Word>
		for(j = 0; j < LCD_2IN_HEIGHT; j++){
 8007a10:	89bb      	ldrh	r3, [r7, #12]
 8007a12:	3301      	adds	r3, #1
 8007a14:	81bb      	strh	r3, [r7, #12]
 8007a16:	89bb      	ldrh	r3, [r7, #12]
 8007a18:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8007a1c:	d3f4      	bcc.n	8007a08 <LCD_2IN_Clear+0x30>
	for(i = 0; i < LCD_2IN_WIDTH; i++){
 8007a1e:	89fb      	ldrh	r3, [r7, #14]
 8007a20:	3301      	adds	r3, #1
 8007a22:	81fb      	strh	r3, [r7, #14]
 8007a24:	89fb      	ldrh	r3, [r7, #14]
 8007a26:	2bef      	cmp	r3, #239	@ 0xef
 8007a28:	d9eb      	bls.n	8007a02 <LCD_2IN_Clear+0x2a>
		}
	 }
}
 8007a2a:	bf00      	nop
 8007a2c:	bf00      	nop
 8007a2e:	3710      	adds	r7, #16
 8007a30:	46bd      	mov	sp, r7
 8007a32:	bd80      	pop	{r7, pc}
 8007a34:	40020400 	.word	0x40020400

08007a38 <LCD_2IN_DrawPaint>:
	    X	: 	Set the X coordinate
	    Y	:	Set the Y coordinate
	  Color :	Set the color
******************************************************************************/
void LCD_2IN_DrawPaint(UWORD x, UWORD y, UWORD Color)
{
 8007a38:	b580      	push	{r7, lr}
 8007a3a:	b082      	sub	sp, #8
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	4603      	mov	r3, r0
 8007a40:	80fb      	strh	r3, [r7, #6]
 8007a42:	460b      	mov	r3, r1
 8007a44:	80bb      	strh	r3, [r7, #4]
 8007a46:	4613      	mov	r3, r2
 8007a48:	807b      	strh	r3, [r7, #2]
	LCD_2IN_SetCursor(x, y);
 8007a4a:	88ba      	ldrh	r2, [r7, #4]
 8007a4c:	88fb      	ldrh	r3, [r7, #6]
 8007a4e:	4611      	mov	r1, r2
 8007a50:	4618      	mov	r0, r3
 8007a52:	f7ff ff7c 	bl	800794e <LCD_2IN_SetCursor>
	LCD_2IN_WriteData_Word(Color); 	    
 8007a56:	887b      	ldrh	r3, [r7, #2]
 8007a58:	4618      	mov	r0, r3
 8007a5a:	f7ff fe23 	bl	80076a4 <LCD_2IN_WriteData_Word>
}
 8007a5e:	bf00      	nop
 8007a60:	3708      	adds	r7, #8
 8007a62:	46bd      	mov	sp, r7
 8007a64:	bd80      	pop	{r7, pc}
	...

08007a68 <LCD_2IN_SetBackLight>:
	Setting backlight
parameter	:
	  value : Range 0~1000   Duty cycle is value/1000	
*******************************************************************************/
void LCD_2IN_SetBackLight(UWORD Value)
{
 8007a68:	b480      	push	{r7}
 8007a6a:	b083      	sub	sp, #12
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	4603      	mov	r3, r0
 8007a70:	80fb      	strh	r3, [r7, #6]
	DEV_Set_PWM(Value);
 8007a72:	4a04      	ldr	r2, [pc, #16]	@ (8007a84 <LCD_2IN_SetBackLight+0x1c>)
 8007a74:	88fb      	ldrh	r3, [r7, #6]
 8007a76:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8007a78:	bf00      	nop
 8007a7a:	370c      	adds	r7, #12
 8007a7c:	46bd      	mov	sp, r7
 8007a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a82:	4770      	bx	lr
 8007a84:	40000800 	.word	0x40000800

08007a88 <malloc>:
 8007a88:	4b02      	ldr	r3, [pc, #8]	@ (8007a94 <malloc+0xc>)
 8007a8a:	4601      	mov	r1, r0
 8007a8c:	6818      	ldr	r0, [r3, #0]
 8007a8e:	f000 b825 	b.w	8007adc <_malloc_r>
 8007a92:	bf00      	nop
 8007a94:	2000004c 	.word	0x2000004c

08007a98 <sbrk_aligned>:
 8007a98:	b570      	push	{r4, r5, r6, lr}
 8007a9a:	4e0f      	ldr	r6, [pc, #60]	@ (8007ad8 <sbrk_aligned+0x40>)
 8007a9c:	460c      	mov	r4, r1
 8007a9e:	6831      	ldr	r1, [r6, #0]
 8007aa0:	4605      	mov	r5, r0
 8007aa2:	b911      	cbnz	r1, 8007aaa <sbrk_aligned+0x12>
 8007aa4:	f001 f97c 	bl	8008da0 <_sbrk_r>
 8007aa8:	6030      	str	r0, [r6, #0]
 8007aaa:	4621      	mov	r1, r4
 8007aac:	4628      	mov	r0, r5
 8007aae:	f001 f977 	bl	8008da0 <_sbrk_r>
 8007ab2:	1c43      	adds	r3, r0, #1
 8007ab4:	d103      	bne.n	8007abe <sbrk_aligned+0x26>
 8007ab6:	f04f 34ff 	mov.w	r4, #4294967295
 8007aba:	4620      	mov	r0, r4
 8007abc:	bd70      	pop	{r4, r5, r6, pc}
 8007abe:	1cc4      	adds	r4, r0, #3
 8007ac0:	f024 0403 	bic.w	r4, r4, #3
 8007ac4:	42a0      	cmp	r0, r4
 8007ac6:	d0f8      	beq.n	8007aba <sbrk_aligned+0x22>
 8007ac8:	1a21      	subs	r1, r4, r0
 8007aca:	4628      	mov	r0, r5
 8007acc:	f001 f968 	bl	8008da0 <_sbrk_r>
 8007ad0:	3001      	adds	r0, #1
 8007ad2:	d1f2      	bne.n	8007aba <sbrk_aligned+0x22>
 8007ad4:	e7ef      	b.n	8007ab6 <sbrk_aligned+0x1e>
 8007ad6:	bf00      	nop
 8007ad8:	200004e0 	.word	0x200004e0

08007adc <_malloc_r>:
 8007adc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007ae0:	1ccd      	adds	r5, r1, #3
 8007ae2:	f025 0503 	bic.w	r5, r5, #3
 8007ae6:	3508      	adds	r5, #8
 8007ae8:	2d0c      	cmp	r5, #12
 8007aea:	bf38      	it	cc
 8007aec:	250c      	movcc	r5, #12
 8007aee:	2d00      	cmp	r5, #0
 8007af0:	4606      	mov	r6, r0
 8007af2:	db01      	blt.n	8007af8 <_malloc_r+0x1c>
 8007af4:	42a9      	cmp	r1, r5
 8007af6:	d904      	bls.n	8007b02 <_malloc_r+0x26>
 8007af8:	230c      	movs	r3, #12
 8007afa:	6033      	str	r3, [r6, #0]
 8007afc:	2000      	movs	r0, #0
 8007afe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007b02:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007bd8 <_malloc_r+0xfc>
 8007b06:	f000 f869 	bl	8007bdc <__malloc_lock>
 8007b0a:	f8d8 3000 	ldr.w	r3, [r8]
 8007b0e:	461c      	mov	r4, r3
 8007b10:	bb44      	cbnz	r4, 8007b64 <_malloc_r+0x88>
 8007b12:	4629      	mov	r1, r5
 8007b14:	4630      	mov	r0, r6
 8007b16:	f7ff ffbf 	bl	8007a98 <sbrk_aligned>
 8007b1a:	1c43      	adds	r3, r0, #1
 8007b1c:	4604      	mov	r4, r0
 8007b1e:	d158      	bne.n	8007bd2 <_malloc_r+0xf6>
 8007b20:	f8d8 4000 	ldr.w	r4, [r8]
 8007b24:	4627      	mov	r7, r4
 8007b26:	2f00      	cmp	r7, #0
 8007b28:	d143      	bne.n	8007bb2 <_malloc_r+0xd6>
 8007b2a:	2c00      	cmp	r4, #0
 8007b2c:	d04b      	beq.n	8007bc6 <_malloc_r+0xea>
 8007b2e:	6823      	ldr	r3, [r4, #0]
 8007b30:	4639      	mov	r1, r7
 8007b32:	4630      	mov	r0, r6
 8007b34:	eb04 0903 	add.w	r9, r4, r3
 8007b38:	f001 f932 	bl	8008da0 <_sbrk_r>
 8007b3c:	4581      	cmp	r9, r0
 8007b3e:	d142      	bne.n	8007bc6 <_malloc_r+0xea>
 8007b40:	6821      	ldr	r1, [r4, #0]
 8007b42:	1a6d      	subs	r5, r5, r1
 8007b44:	4629      	mov	r1, r5
 8007b46:	4630      	mov	r0, r6
 8007b48:	f7ff ffa6 	bl	8007a98 <sbrk_aligned>
 8007b4c:	3001      	adds	r0, #1
 8007b4e:	d03a      	beq.n	8007bc6 <_malloc_r+0xea>
 8007b50:	6823      	ldr	r3, [r4, #0]
 8007b52:	442b      	add	r3, r5
 8007b54:	6023      	str	r3, [r4, #0]
 8007b56:	f8d8 3000 	ldr.w	r3, [r8]
 8007b5a:	685a      	ldr	r2, [r3, #4]
 8007b5c:	bb62      	cbnz	r2, 8007bb8 <_malloc_r+0xdc>
 8007b5e:	f8c8 7000 	str.w	r7, [r8]
 8007b62:	e00f      	b.n	8007b84 <_malloc_r+0xa8>
 8007b64:	6822      	ldr	r2, [r4, #0]
 8007b66:	1b52      	subs	r2, r2, r5
 8007b68:	d420      	bmi.n	8007bac <_malloc_r+0xd0>
 8007b6a:	2a0b      	cmp	r2, #11
 8007b6c:	d917      	bls.n	8007b9e <_malloc_r+0xc2>
 8007b6e:	1961      	adds	r1, r4, r5
 8007b70:	42a3      	cmp	r3, r4
 8007b72:	6025      	str	r5, [r4, #0]
 8007b74:	bf18      	it	ne
 8007b76:	6059      	strne	r1, [r3, #4]
 8007b78:	6863      	ldr	r3, [r4, #4]
 8007b7a:	bf08      	it	eq
 8007b7c:	f8c8 1000 	streq.w	r1, [r8]
 8007b80:	5162      	str	r2, [r4, r5]
 8007b82:	604b      	str	r3, [r1, #4]
 8007b84:	4630      	mov	r0, r6
 8007b86:	f000 f82f 	bl	8007be8 <__malloc_unlock>
 8007b8a:	f104 000b 	add.w	r0, r4, #11
 8007b8e:	1d23      	adds	r3, r4, #4
 8007b90:	f020 0007 	bic.w	r0, r0, #7
 8007b94:	1ac2      	subs	r2, r0, r3
 8007b96:	bf1c      	itt	ne
 8007b98:	1a1b      	subne	r3, r3, r0
 8007b9a:	50a3      	strne	r3, [r4, r2]
 8007b9c:	e7af      	b.n	8007afe <_malloc_r+0x22>
 8007b9e:	6862      	ldr	r2, [r4, #4]
 8007ba0:	42a3      	cmp	r3, r4
 8007ba2:	bf0c      	ite	eq
 8007ba4:	f8c8 2000 	streq.w	r2, [r8]
 8007ba8:	605a      	strne	r2, [r3, #4]
 8007baa:	e7eb      	b.n	8007b84 <_malloc_r+0xa8>
 8007bac:	4623      	mov	r3, r4
 8007bae:	6864      	ldr	r4, [r4, #4]
 8007bb0:	e7ae      	b.n	8007b10 <_malloc_r+0x34>
 8007bb2:	463c      	mov	r4, r7
 8007bb4:	687f      	ldr	r7, [r7, #4]
 8007bb6:	e7b6      	b.n	8007b26 <_malloc_r+0x4a>
 8007bb8:	461a      	mov	r2, r3
 8007bba:	685b      	ldr	r3, [r3, #4]
 8007bbc:	42a3      	cmp	r3, r4
 8007bbe:	d1fb      	bne.n	8007bb8 <_malloc_r+0xdc>
 8007bc0:	2300      	movs	r3, #0
 8007bc2:	6053      	str	r3, [r2, #4]
 8007bc4:	e7de      	b.n	8007b84 <_malloc_r+0xa8>
 8007bc6:	230c      	movs	r3, #12
 8007bc8:	6033      	str	r3, [r6, #0]
 8007bca:	4630      	mov	r0, r6
 8007bcc:	f000 f80c 	bl	8007be8 <__malloc_unlock>
 8007bd0:	e794      	b.n	8007afc <_malloc_r+0x20>
 8007bd2:	6005      	str	r5, [r0, #0]
 8007bd4:	e7d6      	b.n	8007b84 <_malloc_r+0xa8>
 8007bd6:	bf00      	nop
 8007bd8:	200004e4 	.word	0x200004e4

08007bdc <__malloc_lock>:
 8007bdc:	4801      	ldr	r0, [pc, #4]	@ (8007be4 <__malloc_lock+0x8>)
 8007bde:	f001 b92c 	b.w	8008e3a <__retarget_lock_acquire_recursive>
 8007be2:	bf00      	nop
 8007be4:	20000628 	.word	0x20000628

08007be8 <__malloc_unlock>:
 8007be8:	4801      	ldr	r0, [pc, #4]	@ (8007bf0 <__malloc_unlock+0x8>)
 8007bea:	f001 b927 	b.w	8008e3c <__retarget_lock_release_recursive>
 8007bee:	bf00      	nop
 8007bf0:	20000628 	.word	0x20000628

08007bf4 <__cvt>:
 8007bf4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007bf8:	ec57 6b10 	vmov	r6, r7, d0
 8007bfc:	2f00      	cmp	r7, #0
 8007bfe:	460c      	mov	r4, r1
 8007c00:	4619      	mov	r1, r3
 8007c02:	463b      	mov	r3, r7
 8007c04:	bfbb      	ittet	lt
 8007c06:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8007c0a:	461f      	movlt	r7, r3
 8007c0c:	2300      	movge	r3, #0
 8007c0e:	232d      	movlt	r3, #45	@ 0x2d
 8007c10:	700b      	strb	r3, [r1, #0]
 8007c12:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007c14:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8007c18:	4691      	mov	r9, r2
 8007c1a:	f023 0820 	bic.w	r8, r3, #32
 8007c1e:	bfbc      	itt	lt
 8007c20:	4632      	movlt	r2, r6
 8007c22:	4616      	movlt	r6, r2
 8007c24:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007c28:	d005      	beq.n	8007c36 <__cvt+0x42>
 8007c2a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8007c2e:	d100      	bne.n	8007c32 <__cvt+0x3e>
 8007c30:	3401      	adds	r4, #1
 8007c32:	2102      	movs	r1, #2
 8007c34:	e000      	b.n	8007c38 <__cvt+0x44>
 8007c36:	2103      	movs	r1, #3
 8007c38:	ab03      	add	r3, sp, #12
 8007c3a:	9301      	str	r3, [sp, #4]
 8007c3c:	ab02      	add	r3, sp, #8
 8007c3e:	9300      	str	r3, [sp, #0]
 8007c40:	ec47 6b10 	vmov	d0, r6, r7
 8007c44:	4653      	mov	r3, sl
 8007c46:	4622      	mov	r2, r4
 8007c48:	f001 f99e 	bl	8008f88 <_dtoa_r>
 8007c4c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8007c50:	4605      	mov	r5, r0
 8007c52:	d119      	bne.n	8007c88 <__cvt+0x94>
 8007c54:	f019 0f01 	tst.w	r9, #1
 8007c58:	d00e      	beq.n	8007c78 <__cvt+0x84>
 8007c5a:	eb00 0904 	add.w	r9, r0, r4
 8007c5e:	2200      	movs	r2, #0
 8007c60:	2300      	movs	r3, #0
 8007c62:	4630      	mov	r0, r6
 8007c64:	4639      	mov	r1, r7
 8007c66:	f7f8 ff4f 	bl	8000b08 <__aeabi_dcmpeq>
 8007c6a:	b108      	cbz	r0, 8007c70 <__cvt+0x7c>
 8007c6c:	f8cd 900c 	str.w	r9, [sp, #12]
 8007c70:	2230      	movs	r2, #48	@ 0x30
 8007c72:	9b03      	ldr	r3, [sp, #12]
 8007c74:	454b      	cmp	r3, r9
 8007c76:	d31e      	bcc.n	8007cb6 <__cvt+0xc2>
 8007c78:	9b03      	ldr	r3, [sp, #12]
 8007c7a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007c7c:	1b5b      	subs	r3, r3, r5
 8007c7e:	4628      	mov	r0, r5
 8007c80:	6013      	str	r3, [r2, #0]
 8007c82:	b004      	add	sp, #16
 8007c84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c88:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007c8c:	eb00 0904 	add.w	r9, r0, r4
 8007c90:	d1e5      	bne.n	8007c5e <__cvt+0x6a>
 8007c92:	7803      	ldrb	r3, [r0, #0]
 8007c94:	2b30      	cmp	r3, #48	@ 0x30
 8007c96:	d10a      	bne.n	8007cae <__cvt+0xba>
 8007c98:	2200      	movs	r2, #0
 8007c9a:	2300      	movs	r3, #0
 8007c9c:	4630      	mov	r0, r6
 8007c9e:	4639      	mov	r1, r7
 8007ca0:	f7f8 ff32 	bl	8000b08 <__aeabi_dcmpeq>
 8007ca4:	b918      	cbnz	r0, 8007cae <__cvt+0xba>
 8007ca6:	f1c4 0401 	rsb	r4, r4, #1
 8007caa:	f8ca 4000 	str.w	r4, [sl]
 8007cae:	f8da 3000 	ldr.w	r3, [sl]
 8007cb2:	4499      	add	r9, r3
 8007cb4:	e7d3      	b.n	8007c5e <__cvt+0x6a>
 8007cb6:	1c59      	adds	r1, r3, #1
 8007cb8:	9103      	str	r1, [sp, #12]
 8007cba:	701a      	strb	r2, [r3, #0]
 8007cbc:	e7d9      	b.n	8007c72 <__cvt+0x7e>

08007cbe <__exponent>:
 8007cbe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007cc0:	2900      	cmp	r1, #0
 8007cc2:	bfba      	itte	lt
 8007cc4:	4249      	neglt	r1, r1
 8007cc6:	232d      	movlt	r3, #45	@ 0x2d
 8007cc8:	232b      	movge	r3, #43	@ 0x2b
 8007cca:	2909      	cmp	r1, #9
 8007ccc:	7002      	strb	r2, [r0, #0]
 8007cce:	7043      	strb	r3, [r0, #1]
 8007cd0:	dd29      	ble.n	8007d26 <__exponent+0x68>
 8007cd2:	f10d 0307 	add.w	r3, sp, #7
 8007cd6:	461d      	mov	r5, r3
 8007cd8:	270a      	movs	r7, #10
 8007cda:	461a      	mov	r2, r3
 8007cdc:	fbb1 f6f7 	udiv	r6, r1, r7
 8007ce0:	fb07 1416 	mls	r4, r7, r6, r1
 8007ce4:	3430      	adds	r4, #48	@ 0x30
 8007ce6:	f802 4c01 	strb.w	r4, [r2, #-1]
 8007cea:	460c      	mov	r4, r1
 8007cec:	2c63      	cmp	r4, #99	@ 0x63
 8007cee:	f103 33ff 	add.w	r3, r3, #4294967295
 8007cf2:	4631      	mov	r1, r6
 8007cf4:	dcf1      	bgt.n	8007cda <__exponent+0x1c>
 8007cf6:	3130      	adds	r1, #48	@ 0x30
 8007cf8:	1e94      	subs	r4, r2, #2
 8007cfa:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007cfe:	1c41      	adds	r1, r0, #1
 8007d00:	4623      	mov	r3, r4
 8007d02:	42ab      	cmp	r3, r5
 8007d04:	d30a      	bcc.n	8007d1c <__exponent+0x5e>
 8007d06:	f10d 0309 	add.w	r3, sp, #9
 8007d0a:	1a9b      	subs	r3, r3, r2
 8007d0c:	42ac      	cmp	r4, r5
 8007d0e:	bf88      	it	hi
 8007d10:	2300      	movhi	r3, #0
 8007d12:	3302      	adds	r3, #2
 8007d14:	4403      	add	r3, r0
 8007d16:	1a18      	subs	r0, r3, r0
 8007d18:	b003      	add	sp, #12
 8007d1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007d1c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8007d20:	f801 6f01 	strb.w	r6, [r1, #1]!
 8007d24:	e7ed      	b.n	8007d02 <__exponent+0x44>
 8007d26:	2330      	movs	r3, #48	@ 0x30
 8007d28:	3130      	adds	r1, #48	@ 0x30
 8007d2a:	7083      	strb	r3, [r0, #2]
 8007d2c:	70c1      	strb	r1, [r0, #3]
 8007d2e:	1d03      	adds	r3, r0, #4
 8007d30:	e7f1      	b.n	8007d16 <__exponent+0x58>
	...

08007d34 <_printf_float>:
 8007d34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d38:	b08d      	sub	sp, #52	@ 0x34
 8007d3a:	460c      	mov	r4, r1
 8007d3c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8007d40:	4616      	mov	r6, r2
 8007d42:	461f      	mov	r7, r3
 8007d44:	4605      	mov	r5, r0
 8007d46:	f000 fff3 	bl	8008d30 <_localeconv_r>
 8007d4a:	6803      	ldr	r3, [r0, #0]
 8007d4c:	9304      	str	r3, [sp, #16]
 8007d4e:	4618      	mov	r0, r3
 8007d50:	f7f8 faae 	bl	80002b0 <strlen>
 8007d54:	2300      	movs	r3, #0
 8007d56:	930a      	str	r3, [sp, #40]	@ 0x28
 8007d58:	f8d8 3000 	ldr.w	r3, [r8]
 8007d5c:	9005      	str	r0, [sp, #20]
 8007d5e:	3307      	adds	r3, #7
 8007d60:	f023 0307 	bic.w	r3, r3, #7
 8007d64:	f103 0208 	add.w	r2, r3, #8
 8007d68:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007d6c:	f8d4 b000 	ldr.w	fp, [r4]
 8007d70:	f8c8 2000 	str.w	r2, [r8]
 8007d74:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007d78:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8007d7c:	9307      	str	r3, [sp, #28]
 8007d7e:	f8cd 8018 	str.w	r8, [sp, #24]
 8007d82:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8007d86:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007d8a:	4b9c      	ldr	r3, [pc, #624]	@ (8007ffc <_printf_float+0x2c8>)
 8007d8c:	f04f 32ff 	mov.w	r2, #4294967295
 8007d90:	f7f8 feec 	bl	8000b6c <__aeabi_dcmpun>
 8007d94:	bb70      	cbnz	r0, 8007df4 <_printf_float+0xc0>
 8007d96:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007d9a:	4b98      	ldr	r3, [pc, #608]	@ (8007ffc <_printf_float+0x2c8>)
 8007d9c:	f04f 32ff 	mov.w	r2, #4294967295
 8007da0:	f7f8 fec6 	bl	8000b30 <__aeabi_dcmple>
 8007da4:	bb30      	cbnz	r0, 8007df4 <_printf_float+0xc0>
 8007da6:	2200      	movs	r2, #0
 8007da8:	2300      	movs	r3, #0
 8007daa:	4640      	mov	r0, r8
 8007dac:	4649      	mov	r1, r9
 8007dae:	f7f8 feb5 	bl	8000b1c <__aeabi_dcmplt>
 8007db2:	b110      	cbz	r0, 8007dba <_printf_float+0x86>
 8007db4:	232d      	movs	r3, #45	@ 0x2d
 8007db6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007dba:	4a91      	ldr	r2, [pc, #580]	@ (8008000 <_printf_float+0x2cc>)
 8007dbc:	4b91      	ldr	r3, [pc, #580]	@ (8008004 <_printf_float+0x2d0>)
 8007dbe:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8007dc2:	bf94      	ite	ls
 8007dc4:	4690      	movls	r8, r2
 8007dc6:	4698      	movhi	r8, r3
 8007dc8:	2303      	movs	r3, #3
 8007dca:	6123      	str	r3, [r4, #16]
 8007dcc:	f02b 0304 	bic.w	r3, fp, #4
 8007dd0:	6023      	str	r3, [r4, #0]
 8007dd2:	f04f 0900 	mov.w	r9, #0
 8007dd6:	9700      	str	r7, [sp, #0]
 8007dd8:	4633      	mov	r3, r6
 8007dda:	aa0b      	add	r2, sp, #44	@ 0x2c
 8007ddc:	4621      	mov	r1, r4
 8007dde:	4628      	mov	r0, r5
 8007de0:	f000 f9d2 	bl	8008188 <_printf_common>
 8007de4:	3001      	adds	r0, #1
 8007de6:	f040 808d 	bne.w	8007f04 <_printf_float+0x1d0>
 8007dea:	f04f 30ff 	mov.w	r0, #4294967295
 8007dee:	b00d      	add	sp, #52	@ 0x34
 8007df0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007df4:	4642      	mov	r2, r8
 8007df6:	464b      	mov	r3, r9
 8007df8:	4640      	mov	r0, r8
 8007dfa:	4649      	mov	r1, r9
 8007dfc:	f7f8 feb6 	bl	8000b6c <__aeabi_dcmpun>
 8007e00:	b140      	cbz	r0, 8007e14 <_printf_float+0xe0>
 8007e02:	464b      	mov	r3, r9
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	bfbc      	itt	lt
 8007e08:	232d      	movlt	r3, #45	@ 0x2d
 8007e0a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8007e0e:	4a7e      	ldr	r2, [pc, #504]	@ (8008008 <_printf_float+0x2d4>)
 8007e10:	4b7e      	ldr	r3, [pc, #504]	@ (800800c <_printf_float+0x2d8>)
 8007e12:	e7d4      	b.n	8007dbe <_printf_float+0x8a>
 8007e14:	6863      	ldr	r3, [r4, #4]
 8007e16:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8007e1a:	9206      	str	r2, [sp, #24]
 8007e1c:	1c5a      	adds	r2, r3, #1
 8007e1e:	d13b      	bne.n	8007e98 <_printf_float+0x164>
 8007e20:	2306      	movs	r3, #6
 8007e22:	6063      	str	r3, [r4, #4]
 8007e24:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8007e28:	2300      	movs	r3, #0
 8007e2a:	6022      	str	r2, [r4, #0]
 8007e2c:	9303      	str	r3, [sp, #12]
 8007e2e:	ab0a      	add	r3, sp, #40	@ 0x28
 8007e30:	e9cd a301 	strd	sl, r3, [sp, #4]
 8007e34:	ab09      	add	r3, sp, #36	@ 0x24
 8007e36:	9300      	str	r3, [sp, #0]
 8007e38:	6861      	ldr	r1, [r4, #4]
 8007e3a:	ec49 8b10 	vmov	d0, r8, r9
 8007e3e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8007e42:	4628      	mov	r0, r5
 8007e44:	f7ff fed6 	bl	8007bf4 <__cvt>
 8007e48:	9b06      	ldr	r3, [sp, #24]
 8007e4a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007e4c:	2b47      	cmp	r3, #71	@ 0x47
 8007e4e:	4680      	mov	r8, r0
 8007e50:	d129      	bne.n	8007ea6 <_printf_float+0x172>
 8007e52:	1cc8      	adds	r0, r1, #3
 8007e54:	db02      	blt.n	8007e5c <_printf_float+0x128>
 8007e56:	6863      	ldr	r3, [r4, #4]
 8007e58:	4299      	cmp	r1, r3
 8007e5a:	dd41      	ble.n	8007ee0 <_printf_float+0x1ac>
 8007e5c:	f1aa 0a02 	sub.w	sl, sl, #2
 8007e60:	fa5f fa8a 	uxtb.w	sl, sl
 8007e64:	3901      	subs	r1, #1
 8007e66:	4652      	mov	r2, sl
 8007e68:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8007e6c:	9109      	str	r1, [sp, #36]	@ 0x24
 8007e6e:	f7ff ff26 	bl	8007cbe <__exponent>
 8007e72:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007e74:	1813      	adds	r3, r2, r0
 8007e76:	2a01      	cmp	r2, #1
 8007e78:	4681      	mov	r9, r0
 8007e7a:	6123      	str	r3, [r4, #16]
 8007e7c:	dc02      	bgt.n	8007e84 <_printf_float+0x150>
 8007e7e:	6822      	ldr	r2, [r4, #0]
 8007e80:	07d2      	lsls	r2, r2, #31
 8007e82:	d501      	bpl.n	8007e88 <_printf_float+0x154>
 8007e84:	3301      	adds	r3, #1
 8007e86:	6123      	str	r3, [r4, #16]
 8007e88:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d0a2      	beq.n	8007dd6 <_printf_float+0xa2>
 8007e90:	232d      	movs	r3, #45	@ 0x2d
 8007e92:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007e96:	e79e      	b.n	8007dd6 <_printf_float+0xa2>
 8007e98:	9a06      	ldr	r2, [sp, #24]
 8007e9a:	2a47      	cmp	r2, #71	@ 0x47
 8007e9c:	d1c2      	bne.n	8007e24 <_printf_float+0xf0>
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d1c0      	bne.n	8007e24 <_printf_float+0xf0>
 8007ea2:	2301      	movs	r3, #1
 8007ea4:	e7bd      	b.n	8007e22 <_printf_float+0xee>
 8007ea6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007eaa:	d9db      	bls.n	8007e64 <_printf_float+0x130>
 8007eac:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8007eb0:	d118      	bne.n	8007ee4 <_printf_float+0x1b0>
 8007eb2:	2900      	cmp	r1, #0
 8007eb4:	6863      	ldr	r3, [r4, #4]
 8007eb6:	dd0b      	ble.n	8007ed0 <_printf_float+0x19c>
 8007eb8:	6121      	str	r1, [r4, #16]
 8007eba:	b913      	cbnz	r3, 8007ec2 <_printf_float+0x18e>
 8007ebc:	6822      	ldr	r2, [r4, #0]
 8007ebe:	07d0      	lsls	r0, r2, #31
 8007ec0:	d502      	bpl.n	8007ec8 <_printf_float+0x194>
 8007ec2:	3301      	adds	r3, #1
 8007ec4:	440b      	add	r3, r1
 8007ec6:	6123      	str	r3, [r4, #16]
 8007ec8:	65a1      	str	r1, [r4, #88]	@ 0x58
 8007eca:	f04f 0900 	mov.w	r9, #0
 8007ece:	e7db      	b.n	8007e88 <_printf_float+0x154>
 8007ed0:	b913      	cbnz	r3, 8007ed8 <_printf_float+0x1a4>
 8007ed2:	6822      	ldr	r2, [r4, #0]
 8007ed4:	07d2      	lsls	r2, r2, #31
 8007ed6:	d501      	bpl.n	8007edc <_printf_float+0x1a8>
 8007ed8:	3302      	adds	r3, #2
 8007eda:	e7f4      	b.n	8007ec6 <_printf_float+0x192>
 8007edc:	2301      	movs	r3, #1
 8007ede:	e7f2      	b.n	8007ec6 <_printf_float+0x192>
 8007ee0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8007ee4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007ee6:	4299      	cmp	r1, r3
 8007ee8:	db05      	blt.n	8007ef6 <_printf_float+0x1c2>
 8007eea:	6823      	ldr	r3, [r4, #0]
 8007eec:	6121      	str	r1, [r4, #16]
 8007eee:	07d8      	lsls	r0, r3, #31
 8007ef0:	d5ea      	bpl.n	8007ec8 <_printf_float+0x194>
 8007ef2:	1c4b      	adds	r3, r1, #1
 8007ef4:	e7e7      	b.n	8007ec6 <_printf_float+0x192>
 8007ef6:	2900      	cmp	r1, #0
 8007ef8:	bfd4      	ite	le
 8007efa:	f1c1 0202 	rsble	r2, r1, #2
 8007efe:	2201      	movgt	r2, #1
 8007f00:	4413      	add	r3, r2
 8007f02:	e7e0      	b.n	8007ec6 <_printf_float+0x192>
 8007f04:	6823      	ldr	r3, [r4, #0]
 8007f06:	055a      	lsls	r2, r3, #21
 8007f08:	d407      	bmi.n	8007f1a <_printf_float+0x1e6>
 8007f0a:	6923      	ldr	r3, [r4, #16]
 8007f0c:	4642      	mov	r2, r8
 8007f0e:	4631      	mov	r1, r6
 8007f10:	4628      	mov	r0, r5
 8007f12:	47b8      	blx	r7
 8007f14:	3001      	adds	r0, #1
 8007f16:	d12b      	bne.n	8007f70 <_printf_float+0x23c>
 8007f18:	e767      	b.n	8007dea <_printf_float+0xb6>
 8007f1a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007f1e:	f240 80dd 	bls.w	80080dc <_printf_float+0x3a8>
 8007f22:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007f26:	2200      	movs	r2, #0
 8007f28:	2300      	movs	r3, #0
 8007f2a:	f7f8 fded 	bl	8000b08 <__aeabi_dcmpeq>
 8007f2e:	2800      	cmp	r0, #0
 8007f30:	d033      	beq.n	8007f9a <_printf_float+0x266>
 8007f32:	4a37      	ldr	r2, [pc, #220]	@ (8008010 <_printf_float+0x2dc>)
 8007f34:	2301      	movs	r3, #1
 8007f36:	4631      	mov	r1, r6
 8007f38:	4628      	mov	r0, r5
 8007f3a:	47b8      	blx	r7
 8007f3c:	3001      	adds	r0, #1
 8007f3e:	f43f af54 	beq.w	8007dea <_printf_float+0xb6>
 8007f42:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8007f46:	4543      	cmp	r3, r8
 8007f48:	db02      	blt.n	8007f50 <_printf_float+0x21c>
 8007f4a:	6823      	ldr	r3, [r4, #0]
 8007f4c:	07d8      	lsls	r0, r3, #31
 8007f4e:	d50f      	bpl.n	8007f70 <_printf_float+0x23c>
 8007f50:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007f54:	4631      	mov	r1, r6
 8007f56:	4628      	mov	r0, r5
 8007f58:	47b8      	blx	r7
 8007f5a:	3001      	adds	r0, #1
 8007f5c:	f43f af45 	beq.w	8007dea <_printf_float+0xb6>
 8007f60:	f04f 0900 	mov.w	r9, #0
 8007f64:	f108 38ff 	add.w	r8, r8, #4294967295
 8007f68:	f104 0a1a 	add.w	sl, r4, #26
 8007f6c:	45c8      	cmp	r8, r9
 8007f6e:	dc09      	bgt.n	8007f84 <_printf_float+0x250>
 8007f70:	6823      	ldr	r3, [r4, #0]
 8007f72:	079b      	lsls	r3, r3, #30
 8007f74:	f100 8103 	bmi.w	800817e <_printf_float+0x44a>
 8007f78:	68e0      	ldr	r0, [r4, #12]
 8007f7a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007f7c:	4298      	cmp	r0, r3
 8007f7e:	bfb8      	it	lt
 8007f80:	4618      	movlt	r0, r3
 8007f82:	e734      	b.n	8007dee <_printf_float+0xba>
 8007f84:	2301      	movs	r3, #1
 8007f86:	4652      	mov	r2, sl
 8007f88:	4631      	mov	r1, r6
 8007f8a:	4628      	mov	r0, r5
 8007f8c:	47b8      	blx	r7
 8007f8e:	3001      	adds	r0, #1
 8007f90:	f43f af2b 	beq.w	8007dea <_printf_float+0xb6>
 8007f94:	f109 0901 	add.w	r9, r9, #1
 8007f98:	e7e8      	b.n	8007f6c <_printf_float+0x238>
 8007f9a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	dc39      	bgt.n	8008014 <_printf_float+0x2e0>
 8007fa0:	4a1b      	ldr	r2, [pc, #108]	@ (8008010 <_printf_float+0x2dc>)
 8007fa2:	2301      	movs	r3, #1
 8007fa4:	4631      	mov	r1, r6
 8007fa6:	4628      	mov	r0, r5
 8007fa8:	47b8      	blx	r7
 8007faa:	3001      	adds	r0, #1
 8007fac:	f43f af1d 	beq.w	8007dea <_printf_float+0xb6>
 8007fb0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8007fb4:	ea59 0303 	orrs.w	r3, r9, r3
 8007fb8:	d102      	bne.n	8007fc0 <_printf_float+0x28c>
 8007fba:	6823      	ldr	r3, [r4, #0]
 8007fbc:	07d9      	lsls	r1, r3, #31
 8007fbe:	d5d7      	bpl.n	8007f70 <_printf_float+0x23c>
 8007fc0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007fc4:	4631      	mov	r1, r6
 8007fc6:	4628      	mov	r0, r5
 8007fc8:	47b8      	blx	r7
 8007fca:	3001      	adds	r0, #1
 8007fcc:	f43f af0d 	beq.w	8007dea <_printf_float+0xb6>
 8007fd0:	f04f 0a00 	mov.w	sl, #0
 8007fd4:	f104 0b1a 	add.w	fp, r4, #26
 8007fd8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007fda:	425b      	negs	r3, r3
 8007fdc:	4553      	cmp	r3, sl
 8007fde:	dc01      	bgt.n	8007fe4 <_printf_float+0x2b0>
 8007fe0:	464b      	mov	r3, r9
 8007fe2:	e793      	b.n	8007f0c <_printf_float+0x1d8>
 8007fe4:	2301      	movs	r3, #1
 8007fe6:	465a      	mov	r2, fp
 8007fe8:	4631      	mov	r1, r6
 8007fea:	4628      	mov	r0, r5
 8007fec:	47b8      	blx	r7
 8007fee:	3001      	adds	r0, #1
 8007ff0:	f43f aefb 	beq.w	8007dea <_printf_float+0xb6>
 8007ff4:	f10a 0a01 	add.w	sl, sl, #1
 8007ff8:	e7ee      	b.n	8007fd8 <_printf_float+0x2a4>
 8007ffa:	bf00      	nop
 8007ffc:	7fefffff 	.word	0x7fefffff
 8008000:	0800fbec 	.word	0x0800fbec
 8008004:	0800fbf0 	.word	0x0800fbf0
 8008008:	0800fbf4 	.word	0x0800fbf4
 800800c:	0800fbf8 	.word	0x0800fbf8
 8008010:	0800fbfc 	.word	0x0800fbfc
 8008014:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008016:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800801a:	4553      	cmp	r3, sl
 800801c:	bfa8      	it	ge
 800801e:	4653      	movge	r3, sl
 8008020:	2b00      	cmp	r3, #0
 8008022:	4699      	mov	r9, r3
 8008024:	dc36      	bgt.n	8008094 <_printf_float+0x360>
 8008026:	f04f 0b00 	mov.w	fp, #0
 800802a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800802e:	f104 021a 	add.w	r2, r4, #26
 8008032:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008034:	9306      	str	r3, [sp, #24]
 8008036:	eba3 0309 	sub.w	r3, r3, r9
 800803a:	455b      	cmp	r3, fp
 800803c:	dc31      	bgt.n	80080a2 <_printf_float+0x36e>
 800803e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008040:	459a      	cmp	sl, r3
 8008042:	dc3a      	bgt.n	80080ba <_printf_float+0x386>
 8008044:	6823      	ldr	r3, [r4, #0]
 8008046:	07da      	lsls	r2, r3, #31
 8008048:	d437      	bmi.n	80080ba <_printf_float+0x386>
 800804a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800804c:	ebaa 0903 	sub.w	r9, sl, r3
 8008050:	9b06      	ldr	r3, [sp, #24]
 8008052:	ebaa 0303 	sub.w	r3, sl, r3
 8008056:	4599      	cmp	r9, r3
 8008058:	bfa8      	it	ge
 800805a:	4699      	movge	r9, r3
 800805c:	f1b9 0f00 	cmp.w	r9, #0
 8008060:	dc33      	bgt.n	80080ca <_printf_float+0x396>
 8008062:	f04f 0800 	mov.w	r8, #0
 8008066:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800806a:	f104 0b1a 	add.w	fp, r4, #26
 800806e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008070:	ebaa 0303 	sub.w	r3, sl, r3
 8008074:	eba3 0309 	sub.w	r3, r3, r9
 8008078:	4543      	cmp	r3, r8
 800807a:	f77f af79 	ble.w	8007f70 <_printf_float+0x23c>
 800807e:	2301      	movs	r3, #1
 8008080:	465a      	mov	r2, fp
 8008082:	4631      	mov	r1, r6
 8008084:	4628      	mov	r0, r5
 8008086:	47b8      	blx	r7
 8008088:	3001      	adds	r0, #1
 800808a:	f43f aeae 	beq.w	8007dea <_printf_float+0xb6>
 800808e:	f108 0801 	add.w	r8, r8, #1
 8008092:	e7ec      	b.n	800806e <_printf_float+0x33a>
 8008094:	4642      	mov	r2, r8
 8008096:	4631      	mov	r1, r6
 8008098:	4628      	mov	r0, r5
 800809a:	47b8      	blx	r7
 800809c:	3001      	adds	r0, #1
 800809e:	d1c2      	bne.n	8008026 <_printf_float+0x2f2>
 80080a0:	e6a3      	b.n	8007dea <_printf_float+0xb6>
 80080a2:	2301      	movs	r3, #1
 80080a4:	4631      	mov	r1, r6
 80080a6:	4628      	mov	r0, r5
 80080a8:	9206      	str	r2, [sp, #24]
 80080aa:	47b8      	blx	r7
 80080ac:	3001      	adds	r0, #1
 80080ae:	f43f ae9c 	beq.w	8007dea <_printf_float+0xb6>
 80080b2:	9a06      	ldr	r2, [sp, #24]
 80080b4:	f10b 0b01 	add.w	fp, fp, #1
 80080b8:	e7bb      	b.n	8008032 <_printf_float+0x2fe>
 80080ba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80080be:	4631      	mov	r1, r6
 80080c0:	4628      	mov	r0, r5
 80080c2:	47b8      	blx	r7
 80080c4:	3001      	adds	r0, #1
 80080c6:	d1c0      	bne.n	800804a <_printf_float+0x316>
 80080c8:	e68f      	b.n	8007dea <_printf_float+0xb6>
 80080ca:	9a06      	ldr	r2, [sp, #24]
 80080cc:	464b      	mov	r3, r9
 80080ce:	4442      	add	r2, r8
 80080d0:	4631      	mov	r1, r6
 80080d2:	4628      	mov	r0, r5
 80080d4:	47b8      	blx	r7
 80080d6:	3001      	adds	r0, #1
 80080d8:	d1c3      	bne.n	8008062 <_printf_float+0x32e>
 80080da:	e686      	b.n	8007dea <_printf_float+0xb6>
 80080dc:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80080e0:	f1ba 0f01 	cmp.w	sl, #1
 80080e4:	dc01      	bgt.n	80080ea <_printf_float+0x3b6>
 80080e6:	07db      	lsls	r3, r3, #31
 80080e8:	d536      	bpl.n	8008158 <_printf_float+0x424>
 80080ea:	2301      	movs	r3, #1
 80080ec:	4642      	mov	r2, r8
 80080ee:	4631      	mov	r1, r6
 80080f0:	4628      	mov	r0, r5
 80080f2:	47b8      	blx	r7
 80080f4:	3001      	adds	r0, #1
 80080f6:	f43f ae78 	beq.w	8007dea <_printf_float+0xb6>
 80080fa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80080fe:	4631      	mov	r1, r6
 8008100:	4628      	mov	r0, r5
 8008102:	47b8      	blx	r7
 8008104:	3001      	adds	r0, #1
 8008106:	f43f ae70 	beq.w	8007dea <_printf_float+0xb6>
 800810a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800810e:	2200      	movs	r2, #0
 8008110:	2300      	movs	r3, #0
 8008112:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008116:	f7f8 fcf7 	bl	8000b08 <__aeabi_dcmpeq>
 800811a:	b9c0      	cbnz	r0, 800814e <_printf_float+0x41a>
 800811c:	4653      	mov	r3, sl
 800811e:	f108 0201 	add.w	r2, r8, #1
 8008122:	4631      	mov	r1, r6
 8008124:	4628      	mov	r0, r5
 8008126:	47b8      	blx	r7
 8008128:	3001      	adds	r0, #1
 800812a:	d10c      	bne.n	8008146 <_printf_float+0x412>
 800812c:	e65d      	b.n	8007dea <_printf_float+0xb6>
 800812e:	2301      	movs	r3, #1
 8008130:	465a      	mov	r2, fp
 8008132:	4631      	mov	r1, r6
 8008134:	4628      	mov	r0, r5
 8008136:	47b8      	blx	r7
 8008138:	3001      	adds	r0, #1
 800813a:	f43f ae56 	beq.w	8007dea <_printf_float+0xb6>
 800813e:	f108 0801 	add.w	r8, r8, #1
 8008142:	45d0      	cmp	r8, sl
 8008144:	dbf3      	blt.n	800812e <_printf_float+0x3fa>
 8008146:	464b      	mov	r3, r9
 8008148:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800814c:	e6df      	b.n	8007f0e <_printf_float+0x1da>
 800814e:	f04f 0800 	mov.w	r8, #0
 8008152:	f104 0b1a 	add.w	fp, r4, #26
 8008156:	e7f4      	b.n	8008142 <_printf_float+0x40e>
 8008158:	2301      	movs	r3, #1
 800815a:	4642      	mov	r2, r8
 800815c:	e7e1      	b.n	8008122 <_printf_float+0x3ee>
 800815e:	2301      	movs	r3, #1
 8008160:	464a      	mov	r2, r9
 8008162:	4631      	mov	r1, r6
 8008164:	4628      	mov	r0, r5
 8008166:	47b8      	blx	r7
 8008168:	3001      	adds	r0, #1
 800816a:	f43f ae3e 	beq.w	8007dea <_printf_float+0xb6>
 800816e:	f108 0801 	add.w	r8, r8, #1
 8008172:	68e3      	ldr	r3, [r4, #12]
 8008174:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008176:	1a5b      	subs	r3, r3, r1
 8008178:	4543      	cmp	r3, r8
 800817a:	dcf0      	bgt.n	800815e <_printf_float+0x42a>
 800817c:	e6fc      	b.n	8007f78 <_printf_float+0x244>
 800817e:	f04f 0800 	mov.w	r8, #0
 8008182:	f104 0919 	add.w	r9, r4, #25
 8008186:	e7f4      	b.n	8008172 <_printf_float+0x43e>

08008188 <_printf_common>:
 8008188:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800818c:	4616      	mov	r6, r2
 800818e:	4698      	mov	r8, r3
 8008190:	688a      	ldr	r2, [r1, #8]
 8008192:	690b      	ldr	r3, [r1, #16]
 8008194:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008198:	4293      	cmp	r3, r2
 800819a:	bfb8      	it	lt
 800819c:	4613      	movlt	r3, r2
 800819e:	6033      	str	r3, [r6, #0]
 80081a0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80081a4:	4607      	mov	r7, r0
 80081a6:	460c      	mov	r4, r1
 80081a8:	b10a      	cbz	r2, 80081ae <_printf_common+0x26>
 80081aa:	3301      	adds	r3, #1
 80081ac:	6033      	str	r3, [r6, #0]
 80081ae:	6823      	ldr	r3, [r4, #0]
 80081b0:	0699      	lsls	r1, r3, #26
 80081b2:	bf42      	ittt	mi
 80081b4:	6833      	ldrmi	r3, [r6, #0]
 80081b6:	3302      	addmi	r3, #2
 80081b8:	6033      	strmi	r3, [r6, #0]
 80081ba:	6825      	ldr	r5, [r4, #0]
 80081bc:	f015 0506 	ands.w	r5, r5, #6
 80081c0:	d106      	bne.n	80081d0 <_printf_common+0x48>
 80081c2:	f104 0a19 	add.w	sl, r4, #25
 80081c6:	68e3      	ldr	r3, [r4, #12]
 80081c8:	6832      	ldr	r2, [r6, #0]
 80081ca:	1a9b      	subs	r3, r3, r2
 80081cc:	42ab      	cmp	r3, r5
 80081ce:	dc26      	bgt.n	800821e <_printf_common+0x96>
 80081d0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80081d4:	6822      	ldr	r2, [r4, #0]
 80081d6:	3b00      	subs	r3, #0
 80081d8:	bf18      	it	ne
 80081da:	2301      	movne	r3, #1
 80081dc:	0692      	lsls	r2, r2, #26
 80081de:	d42b      	bmi.n	8008238 <_printf_common+0xb0>
 80081e0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80081e4:	4641      	mov	r1, r8
 80081e6:	4638      	mov	r0, r7
 80081e8:	47c8      	blx	r9
 80081ea:	3001      	adds	r0, #1
 80081ec:	d01e      	beq.n	800822c <_printf_common+0xa4>
 80081ee:	6823      	ldr	r3, [r4, #0]
 80081f0:	6922      	ldr	r2, [r4, #16]
 80081f2:	f003 0306 	and.w	r3, r3, #6
 80081f6:	2b04      	cmp	r3, #4
 80081f8:	bf02      	ittt	eq
 80081fa:	68e5      	ldreq	r5, [r4, #12]
 80081fc:	6833      	ldreq	r3, [r6, #0]
 80081fe:	1aed      	subeq	r5, r5, r3
 8008200:	68a3      	ldr	r3, [r4, #8]
 8008202:	bf0c      	ite	eq
 8008204:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008208:	2500      	movne	r5, #0
 800820a:	4293      	cmp	r3, r2
 800820c:	bfc4      	itt	gt
 800820e:	1a9b      	subgt	r3, r3, r2
 8008210:	18ed      	addgt	r5, r5, r3
 8008212:	2600      	movs	r6, #0
 8008214:	341a      	adds	r4, #26
 8008216:	42b5      	cmp	r5, r6
 8008218:	d11a      	bne.n	8008250 <_printf_common+0xc8>
 800821a:	2000      	movs	r0, #0
 800821c:	e008      	b.n	8008230 <_printf_common+0xa8>
 800821e:	2301      	movs	r3, #1
 8008220:	4652      	mov	r2, sl
 8008222:	4641      	mov	r1, r8
 8008224:	4638      	mov	r0, r7
 8008226:	47c8      	blx	r9
 8008228:	3001      	adds	r0, #1
 800822a:	d103      	bne.n	8008234 <_printf_common+0xac>
 800822c:	f04f 30ff 	mov.w	r0, #4294967295
 8008230:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008234:	3501      	adds	r5, #1
 8008236:	e7c6      	b.n	80081c6 <_printf_common+0x3e>
 8008238:	18e1      	adds	r1, r4, r3
 800823a:	1c5a      	adds	r2, r3, #1
 800823c:	2030      	movs	r0, #48	@ 0x30
 800823e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008242:	4422      	add	r2, r4
 8008244:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008248:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800824c:	3302      	adds	r3, #2
 800824e:	e7c7      	b.n	80081e0 <_printf_common+0x58>
 8008250:	2301      	movs	r3, #1
 8008252:	4622      	mov	r2, r4
 8008254:	4641      	mov	r1, r8
 8008256:	4638      	mov	r0, r7
 8008258:	47c8      	blx	r9
 800825a:	3001      	adds	r0, #1
 800825c:	d0e6      	beq.n	800822c <_printf_common+0xa4>
 800825e:	3601      	adds	r6, #1
 8008260:	e7d9      	b.n	8008216 <_printf_common+0x8e>
	...

08008264 <_printf_i>:
 8008264:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008268:	7e0f      	ldrb	r7, [r1, #24]
 800826a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800826c:	2f78      	cmp	r7, #120	@ 0x78
 800826e:	4691      	mov	r9, r2
 8008270:	4680      	mov	r8, r0
 8008272:	460c      	mov	r4, r1
 8008274:	469a      	mov	sl, r3
 8008276:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800827a:	d807      	bhi.n	800828c <_printf_i+0x28>
 800827c:	2f62      	cmp	r7, #98	@ 0x62
 800827e:	d80a      	bhi.n	8008296 <_printf_i+0x32>
 8008280:	2f00      	cmp	r7, #0
 8008282:	f000 80d2 	beq.w	800842a <_printf_i+0x1c6>
 8008286:	2f58      	cmp	r7, #88	@ 0x58
 8008288:	f000 80b9 	beq.w	80083fe <_printf_i+0x19a>
 800828c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008290:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008294:	e03a      	b.n	800830c <_printf_i+0xa8>
 8008296:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800829a:	2b15      	cmp	r3, #21
 800829c:	d8f6      	bhi.n	800828c <_printf_i+0x28>
 800829e:	a101      	add	r1, pc, #4	@ (adr r1, 80082a4 <_printf_i+0x40>)
 80082a0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80082a4:	080082fd 	.word	0x080082fd
 80082a8:	08008311 	.word	0x08008311
 80082ac:	0800828d 	.word	0x0800828d
 80082b0:	0800828d 	.word	0x0800828d
 80082b4:	0800828d 	.word	0x0800828d
 80082b8:	0800828d 	.word	0x0800828d
 80082bc:	08008311 	.word	0x08008311
 80082c0:	0800828d 	.word	0x0800828d
 80082c4:	0800828d 	.word	0x0800828d
 80082c8:	0800828d 	.word	0x0800828d
 80082cc:	0800828d 	.word	0x0800828d
 80082d0:	08008411 	.word	0x08008411
 80082d4:	0800833b 	.word	0x0800833b
 80082d8:	080083cb 	.word	0x080083cb
 80082dc:	0800828d 	.word	0x0800828d
 80082e0:	0800828d 	.word	0x0800828d
 80082e4:	08008433 	.word	0x08008433
 80082e8:	0800828d 	.word	0x0800828d
 80082ec:	0800833b 	.word	0x0800833b
 80082f0:	0800828d 	.word	0x0800828d
 80082f4:	0800828d 	.word	0x0800828d
 80082f8:	080083d3 	.word	0x080083d3
 80082fc:	6833      	ldr	r3, [r6, #0]
 80082fe:	1d1a      	adds	r2, r3, #4
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	6032      	str	r2, [r6, #0]
 8008304:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008308:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800830c:	2301      	movs	r3, #1
 800830e:	e09d      	b.n	800844c <_printf_i+0x1e8>
 8008310:	6833      	ldr	r3, [r6, #0]
 8008312:	6820      	ldr	r0, [r4, #0]
 8008314:	1d19      	adds	r1, r3, #4
 8008316:	6031      	str	r1, [r6, #0]
 8008318:	0606      	lsls	r6, r0, #24
 800831a:	d501      	bpl.n	8008320 <_printf_i+0xbc>
 800831c:	681d      	ldr	r5, [r3, #0]
 800831e:	e003      	b.n	8008328 <_printf_i+0xc4>
 8008320:	0645      	lsls	r5, r0, #25
 8008322:	d5fb      	bpl.n	800831c <_printf_i+0xb8>
 8008324:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008328:	2d00      	cmp	r5, #0
 800832a:	da03      	bge.n	8008334 <_printf_i+0xd0>
 800832c:	232d      	movs	r3, #45	@ 0x2d
 800832e:	426d      	negs	r5, r5
 8008330:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008334:	4859      	ldr	r0, [pc, #356]	@ (800849c <_printf_i+0x238>)
 8008336:	230a      	movs	r3, #10
 8008338:	e011      	b.n	800835e <_printf_i+0xfa>
 800833a:	6821      	ldr	r1, [r4, #0]
 800833c:	6833      	ldr	r3, [r6, #0]
 800833e:	0608      	lsls	r0, r1, #24
 8008340:	f853 5b04 	ldr.w	r5, [r3], #4
 8008344:	d402      	bmi.n	800834c <_printf_i+0xe8>
 8008346:	0649      	lsls	r1, r1, #25
 8008348:	bf48      	it	mi
 800834a:	b2ad      	uxthmi	r5, r5
 800834c:	2f6f      	cmp	r7, #111	@ 0x6f
 800834e:	4853      	ldr	r0, [pc, #332]	@ (800849c <_printf_i+0x238>)
 8008350:	6033      	str	r3, [r6, #0]
 8008352:	bf14      	ite	ne
 8008354:	230a      	movne	r3, #10
 8008356:	2308      	moveq	r3, #8
 8008358:	2100      	movs	r1, #0
 800835a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800835e:	6866      	ldr	r6, [r4, #4]
 8008360:	60a6      	str	r6, [r4, #8]
 8008362:	2e00      	cmp	r6, #0
 8008364:	bfa2      	ittt	ge
 8008366:	6821      	ldrge	r1, [r4, #0]
 8008368:	f021 0104 	bicge.w	r1, r1, #4
 800836c:	6021      	strge	r1, [r4, #0]
 800836e:	b90d      	cbnz	r5, 8008374 <_printf_i+0x110>
 8008370:	2e00      	cmp	r6, #0
 8008372:	d04b      	beq.n	800840c <_printf_i+0x1a8>
 8008374:	4616      	mov	r6, r2
 8008376:	fbb5 f1f3 	udiv	r1, r5, r3
 800837a:	fb03 5711 	mls	r7, r3, r1, r5
 800837e:	5dc7      	ldrb	r7, [r0, r7]
 8008380:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008384:	462f      	mov	r7, r5
 8008386:	42bb      	cmp	r3, r7
 8008388:	460d      	mov	r5, r1
 800838a:	d9f4      	bls.n	8008376 <_printf_i+0x112>
 800838c:	2b08      	cmp	r3, #8
 800838e:	d10b      	bne.n	80083a8 <_printf_i+0x144>
 8008390:	6823      	ldr	r3, [r4, #0]
 8008392:	07df      	lsls	r7, r3, #31
 8008394:	d508      	bpl.n	80083a8 <_printf_i+0x144>
 8008396:	6923      	ldr	r3, [r4, #16]
 8008398:	6861      	ldr	r1, [r4, #4]
 800839a:	4299      	cmp	r1, r3
 800839c:	bfde      	ittt	le
 800839e:	2330      	movle	r3, #48	@ 0x30
 80083a0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80083a4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80083a8:	1b92      	subs	r2, r2, r6
 80083aa:	6122      	str	r2, [r4, #16]
 80083ac:	f8cd a000 	str.w	sl, [sp]
 80083b0:	464b      	mov	r3, r9
 80083b2:	aa03      	add	r2, sp, #12
 80083b4:	4621      	mov	r1, r4
 80083b6:	4640      	mov	r0, r8
 80083b8:	f7ff fee6 	bl	8008188 <_printf_common>
 80083bc:	3001      	adds	r0, #1
 80083be:	d14a      	bne.n	8008456 <_printf_i+0x1f2>
 80083c0:	f04f 30ff 	mov.w	r0, #4294967295
 80083c4:	b004      	add	sp, #16
 80083c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083ca:	6823      	ldr	r3, [r4, #0]
 80083cc:	f043 0320 	orr.w	r3, r3, #32
 80083d0:	6023      	str	r3, [r4, #0]
 80083d2:	4833      	ldr	r0, [pc, #204]	@ (80084a0 <_printf_i+0x23c>)
 80083d4:	2778      	movs	r7, #120	@ 0x78
 80083d6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80083da:	6823      	ldr	r3, [r4, #0]
 80083dc:	6831      	ldr	r1, [r6, #0]
 80083de:	061f      	lsls	r7, r3, #24
 80083e0:	f851 5b04 	ldr.w	r5, [r1], #4
 80083e4:	d402      	bmi.n	80083ec <_printf_i+0x188>
 80083e6:	065f      	lsls	r7, r3, #25
 80083e8:	bf48      	it	mi
 80083ea:	b2ad      	uxthmi	r5, r5
 80083ec:	6031      	str	r1, [r6, #0]
 80083ee:	07d9      	lsls	r1, r3, #31
 80083f0:	bf44      	itt	mi
 80083f2:	f043 0320 	orrmi.w	r3, r3, #32
 80083f6:	6023      	strmi	r3, [r4, #0]
 80083f8:	b11d      	cbz	r5, 8008402 <_printf_i+0x19e>
 80083fa:	2310      	movs	r3, #16
 80083fc:	e7ac      	b.n	8008358 <_printf_i+0xf4>
 80083fe:	4827      	ldr	r0, [pc, #156]	@ (800849c <_printf_i+0x238>)
 8008400:	e7e9      	b.n	80083d6 <_printf_i+0x172>
 8008402:	6823      	ldr	r3, [r4, #0]
 8008404:	f023 0320 	bic.w	r3, r3, #32
 8008408:	6023      	str	r3, [r4, #0]
 800840a:	e7f6      	b.n	80083fa <_printf_i+0x196>
 800840c:	4616      	mov	r6, r2
 800840e:	e7bd      	b.n	800838c <_printf_i+0x128>
 8008410:	6833      	ldr	r3, [r6, #0]
 8008412:	6825      	ldr	r5, [r4, #0]
 8008414:	6961      	ldr	r1, [r4, #20]
 8008416:	1d18      	adds	r0, r3, #4
 8008418:	6030      	str	r0, [r6, #0]
 800841a:	062e      	lsls	r6, r5, #24
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	d501      	bpl.n	8008424 <_printf_i+0x1c0>
 8008420:	6019      	str	r1, [r3, #0]
 8008422:	e002      	b.n	800842a <_printf_i+0x1c6>
 8008424:	0668      	lsls	r0, r5, #25
 8008426:	d5fb      	bpl.n	8008420 <_printf_i+0x1bc>
 8008428:	8019      	strh	r1, [r3, #0]
 800842a:	2300      	movs	r3, #0
 800842c:	6123      	str	r3, [r4, #16]
 800842e:	4616      	mov	r6, r2
 8008430:	e7bc      	b.n	80083ac <_printf_i+0x148>
 8008432:	6833      	ldr	r3, [r6, #0]
 8008434:	1d1a      	adds	r2, r3, #4
 8008436:	6032      	str	r2, [r6, #0]
 8008438:	681e      	ldr	r6, [r3, #0]
 800843a:	6862      	ldr	r2, [r4, #4]
 800843c:	2100      	movs	r1, #0
 800843e:	4630      	mov	r0, r6
 8008440:	f7f7 fee6 	bl	8000210 <memchr>
 8008444:	b108      	cbz	r0, 800844a <_printf_i+0x1e6>
 8008446:	1b80      	subs	r0, r0, r6
 8008448:	6060      	str	r0, [r4, #4]
 800844a:	6863      	ldr	r3, [r4, #4]
 800844c:	6123      	str	r3, [r4, #16]
 800844e:	2300      	movs	r3, #0
 8008450:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008454:	e7aa      	b.n	80083ac <_printf_i+0x148>
 8008456:	6923      	ldr	r3, [r4, #16]
 8008458:	4632      	mov	r2, r6
 800845a:	4649      	mov	r1, r9
 800845c:	4640      	mov	r0, r8
 800845e:	47d0      	blx	sl
 8008460:	3001      	adds	r0, #1
 8008462:	d0ad      	beq.n	80083c0 <_printf_i+0x15c>
 8008464:	6823      	ldr	r3, [r4, #0]
 8008466:	079b      	lsls	r3, r3, #30
 8008468:	d413      	bmi.n	8008492 <_printf_i+0x22e>
 800846a:	68e0      	ldr	r0, [r4, #12]
 800846c:	9b03      	ldr	r3, [sp, #12]
 800846e:	4298      	cmp	r0, r3
 8008470:	bfb8      	it	lt
 8008472:	4618      	movlt	r0, r3
 8008474:	e7a6      	b.n	80083c4 <_printf_i+0x160>
 8008476:	2301      	movs	r3, #1
 8008478:	4632      	mov	r2, r6
 800847a:	4649      	mov	r1, r9
 800847c:	4640      	mov	r0, r8
 800847e:	47d0      	blx	sl
 8008480:	3001      	adds	r0, #1
 8008482:	d09d      	beq.n	80083c0 <_printf_i+0x15c>
 8008484:	3501      	adds	r5, #1
 8008486:	68e3      	ldr	r3, [r4, #12]
 8008488:	9903      	ldr	r1, [sp, #12]
 800848a:	1a5b      	subs	r3, r3, r1
 800848c:	42ab      	cmp	r3, r5
 800848e:	dcf2      	bgt.n	8008476 <_printf_i+0x212>
 8008490:	e7eb      	b.n	800846a <_printf_i+0x206>
 8008492:	2500      	movs	r5, #0
 8008494:	f104 0619 	add.w	r6, r4, #25
 8008498:	e7f5      	b.n	8008486 <_printf_i+0x222>
 800849a:	bf00      	nop
 800849c:	0800fbfe 	.word	0x0800fbfe
 80084a0:	0800fc0f 	.word	0x0800fc0f

080084a4 <_scanf_float>:
 80084a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084a8:	b087      	sub	sp, #28
 80084aa:	4617      	mov	r7, r2
 80084ac:	9303      	str	r3, [sp, #12]
 80084ae:	688b      	ldr	r3, [r1, #8]
 80084b0:	1e5a      	subs	r2, r3, #1
 80084b2:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80084b6:	bf81      	itttt	hi
 80084b8:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80084bc:	eb03 0b05 	addhi.w	fp, r3, r5
 80084c0:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80084c4:	608b      	strhi	r3, [r1, #8]
 80084c6:	680b      	ldr	r3, [r1, #0]
 80084c8:	460a      	mov	r2, r1
 80084ca:	f04f 0500 	mov.w	r5, #0
 80084ce:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 80084d2:	f842 3b1c 	str.w	r3, [r2], #28
 80084d6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80084da:	4680      	mov	r8, r0
 80084dc:	460c      	mov	r4, r1
 80084de:	bf98      	it	ls
 80084e0:	f04f 0b00 	movls.w	fp, #0
 80084e4:	9201      	str	r2, [sp, #4]
 80084e6:	4616      	mov	r6, r2
 80084e8:	46aa      	mov	sl, r5
 80084ea:	46a9      	mov	r9, r5
 80084ec:	9502      	str	r5, [sp, #8]
 80084ee:	68a2      	ldr	r2, [r4, #8]
 80084f0:	b152      	cbz	r2, 8008508 <_scanf_float+0x64>
 80084f2:	683b      	ldr	r3, [r7, #0]
 80084f4:	781b      	ldrb	r3, [r3, #0]
 80084f6:	2b4e      	cmp	r3, #78	@ 0x4e
 80084f8:	d864      	bhi.n	80085c4 <_scanf_float+0x120>
 80084fa:	2b40      	cmp	r3, #64	@ 0x40
 80084fc:	d83c      	bhi.n	8008578 <_scanf_float+0xd4>
 80084fe:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8008502:	b2c8      	uxtb	r0, r1
 8008504:	280e      	cmp	r0, #14
 8008506:	d93a      	bls.n	800857e <_scanf_float+0xda>
 8008508:	f1b9 0f00 	cmp.w	r9, #0
 800850c:	d003      	beq.n	8008516 <_scanf_float+0x72>
 800850e:	6823      	ldr	r3, [r4, #0]
 8008510:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008514:	6023      	str	r3, [r4, #0]
 8008516:	f10a 3aff 	add.w	sl, sl, #4294967295
 800851a:	f1ba 0f01 	cmp.w	sl, #1
 800851e:	f200 8117 	bhi.w	8008750 <_scanf_float+0x2ac>
 8008522:	9b01      	ldr	r3, [sp, #4]
 8008524:	429e      	cmp	r6, r3
 8008526:	f200 8108 	bhi.w	800873a <_scanf_float+0x296>
 800852a:	2001      	movs	r0, #1
 800852c:	b007      	add	sp, #28
 800852e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008532:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8008536:	2a0d      	cmp	r2, #13
 8008538:	d8e6      	bhi.n	8008508 <_scanf_float+0x64>
 800853a:	a101      	add	r1, pc, #4	@ (adr r1, 8008540 <_scanf_float+0x9c>)
 800853c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008540:	08008687 	.word	0x08008687
 8008544:	08008509 	.word	0x08008509
 8008548:	08008509 	.word	0x08008509
 800854c:	08008509 	.word	0x08008509
 8008550:	080086e7 	.word	0x080086e7
 8008554:	080086bf 	.word	0x080086bf
 8008558:	08008509 	.word	0x08008509
 800855c:	08008509 	.word	0x08008509
 8008560:	08008695 	.word	0x08008695
 8008564:	08008509 	.word	0x08008509
 8008568:	08008509 	.word	0x08008509
 800856c:	08008509 	.word	0x08008509
 8008570:	08008509 	.word	0x08008509
 8008574:	0800864d 	.word	0x0800864d
 8008578:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800857c:	e7db      	b.n	8008536 <_scanf_float+0x92>
 800857e:	290e      	cmp	r1, #14
 8008580:	d8c2      	bhi.n	8008508 <_scanf_float+0x64>
 8008582:	a001      	add	r0, pc, #4	@ (adr r0, 8008588 <_scanf_float+0xe4>)
 8008584:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8008588:	0800863d 	.word	0x0800863d
 800858c:	08008509 	.word	0x08008509
 8008590:	0800863d 	.word	0x0800863d
 8008594:	080086d3 	.word	0x080086d3
 8008598:	08008509 	.word	0x08008509
 800859c:	080085e5 	.word	0x080085e5
 80085a0:	08008623 	.word	0x08008623
 80085a4:	08008623 	.word	0x08008623
 80085a8:	08008623 	.word	0x08008623
 80085ac:	08008623 	.word	0x08008623
 80085b0:	08008623 	.word	0x08008623
 80085b4:	08008623 	.word	0x08008623
 80085b8:	08008623 	.word	0x08008623
 80085bc:	08008623 	.word	0x08008623
 80085c0:	08008623 	.word	0x08008623
 80085c4:	2b6e      	cmp	r3, #110	@ 0x6e
 80085c6:	d809      	bhi.n	80085dc <_scanf_float+0x138>
 80085c8:	2b60      	cmp	r3, #96	@ 0x60
 80085ca:	d8b2      	bhi.n	8008532 <_scanf_float+0x8e>
 80085cc:	2b54      	cmp	r3, #84	@ 0x54
 80085ce:	d07b      	beq.n	80086c8 <_scanf_float+0x224>
 80085d0:	2b59      	cmp	r3, #89	@ 0x59
 80085d2:	d199      	bne.n	8008508 <_scanf_float+0x64>
 80085d4:	2d07      	cmp	r5, #7
 80085d6:	d197      	bne.n	8008508 <_scanf_float+0x64>
 80085d8:	2508      	movs	r5, #8
 80085da:	e02c      	b.n	8008636 <_scanf_float+0x192>
 80085dc:	2b74      	cmp	r3, #116	@ 0x74
 80085de:	d073      	beq.n	80086c8 <_scanf_float+0x224>
 80085e0:	2b79      	cmp	r3, #121	@ 0x79
 80085e2:	e7f6      	b.n	80085d2 <_scanf_float+0x12e>
 80085e4:	6821      	ldr	r1, [r4, #0]
 80085e6:	05c8      	lsls	r0, r1, #23
 80085e8:	d51b      	bpl.n	8008622 <_scanf_float+0x17e>
 80085ea:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 80085ee:	6021      	str	r1, [r4, #0]
 80085f0:	f109 0901 	add.w	r9, r9, #1
 80085f4:	f1bb 0f00 	cmp.w	fp, #0
 80085f8:	d003      	beq.n	8008602 <_scanf_float+0x15e>
 80085fa:	3201      	adds	r2, #1
 80085fc:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008600:	60a2      	str	r2, [r4, #8]
 8008602:	68a3      	ldr	r3, [r4, #8]
 8008604:	3b01      	subs	r3, #1
 8008606:	60a3      	str	r3, [r4, #8]
 8008608:	6923      	ldr	r3, [r4, #16]
 800860a:	3301      	adds	r3, #1
 800860c:	6123      	str	r3, [r4, #16]
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	3b01      	subs	r3, #1
 8008612:	2b00      	cmp	r3, #0
 8008614:	607b      	str	r3, [r7, #4]
 8008616:	f340 8087 	ble.w	8008728 <_scanf_float+0x284>
 800861a:	683b      	ldr	r3, [r7, #0]
 800861c:	3301      	adds	r3, #1
 800861e:	603b      	str	r3, [r7, #0]
 8008620:	e765      	b.n	80084ee <_scanf_float+0x4a>
 8008622:	eb1a 0105 	adds.w	r1, sl, r5
 8008626:	f47f af6f 	bne.w	8008508 <_scanf_float+0x64>
 800862a:	6822      	ldr	r2, [r4, #0]
 800862c:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8008630:	6022      	str	r2, [r4, #0]
 8008632:	460d      	mov	r5, r1
 8008634:	468a      	mov	sl, r1
 8008636:	f806 3b01 	strb.w	r3, [r6], #1
 800863a:	e7e2      	b.n	8008602 <_scanf_float+0x15e>
 800863c:	6822      	ldr	r2, [r4, #0]
 800863e:	0610      	lsls	r0, r2, #24
 8008640:	f57f af62 	bpl.w	8008508 <_scanf_float+0x64>
 8008644:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008648:	6022      	str	r2, [r4, #0]
 800864a:	e7f4      	b.n	8008636 <_scanf_float+0x192>
 800864c:	f1ba 0f00 	cmp.w	sl, #0
 8008650:	d10e      	bne.n	8008670 <_scanf_float+0x1cc>
 8008652:	f1b9 0f00 	cmp.w	r9, #0
 8008656:	d10e      	bne.n	8008676 <_scanf_float+0x1d2>
 8008658:	6822      	ldr	r2, [r4, #0]
 800865a:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800865e:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8008662:	d108      	bne.n	8008676 <_scanf_float+0x1d2>
 8008664:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008668:	6022      	str	r2, [r4, #0]
 800866a:	f04f 0a01 	mov.w	sl, #1
 800866e:	e7e2      	b.n	8008636 <_scanf_float+0x192>
 8008670:	f1ba 0f02 	cmp.w	sl, #2
 8008674:	d055      	beq.n	8008722 <_scanf_float+0x27e>
 8008676:	2d01      	cmp	r5, #1
 8008678:	d002      	beq.n	8008680 <_scanf_float+0x1dc>
 800867a:	2d04      	cmp	r5, #4
 800867c:	f47f af44 	bne.w	8008508 <_scanf_float+0x64>
 8008680:	3501      	adds	r5, #1
 8008682:	b2ed      	uxtb	r5, r5
 8008684:	e7d7      	b.n	8008636 <_scanf_float+0x192>
 8008686:	f1ba 0f01 	cmp.w	sl, #1
 800868a:	f47f af3d 	bne.w	8008508 <_scanf_float+0x64>
 800868e:	f04f 0a02 	mov.w	sl, #2
 8008692:	e7d0      	b.n	8008636 <_scanf_float+0x192>
 8008694:	b97d      	cbnz	r5, 80086b6 <_scanf_float+0x212>
 8008696:	f1b9 0f00 	cmp.w	r9, #0
 800869a:	f47f af38 	bne.w	800850e <_scanf_float+0x6a>
 800869e:	6822      	ldr	r2, [r4, #0]
 80086a0:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80086a4:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80086a8:	f040 8108 	bne.w	80088bc <_scanf_float+0x418>
 80086ac:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80086b0:	6022      	str	r2, [r4, #0]
 80086b2:	2501      	movs	r5, #1
 80086b4:	e7bf      	b.n	8008636 <_scanf_float+0x192>
 80086b6:	2d03      	cmp	r5, #3
 80086b8:	d0e2      	beq.n	8008680 <_scanf_float+0x1dc>
 80086ba:	2d05      	cmp	r5, #5
 80086bc:	e7de      	b.n	800867c <_scanf_float+0x1d8>
 80086be:	2d02      	cmp	r5, #2
 80086c0:	f47f af22 	bne.w	8008508 <_scanf_float+0x64>
 80086c4:	2503      	movs	r5, #3
 80086c6:	e7b6      	b.n	8008636 <_scanf_float+0x192>
 80086c8:	2d06      	cmp	r5, #6
 80086ca:	f47f af1d 	bne.w	8008508 <_scanf_float+0x64>
 80086ce:	2507      	movs	r5, #7
 80086d0:	e7b1      	b.n	8008636 <_scanf_float+0x192>
 80086d2:	6822      	ldr	r2, [r4, #0]
 80086d4:	0591      	lsls	r1, r2, #22
 80086d6:	f57f af17 	bpl.w	8008508 <_scanf_float+0x64>
 80086da:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 80086de:	6022      	str	r2, [r4, #0]
 80086e0:	f8cd 9008 	str.w	r9, [sp, #8]
 80086e4:	e7a7      	b.n	8008636 <_scanf_float+0x192>
 80086e6:	6822      	ldr	r2, [r4, #0]
 80086e8:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 80086ec:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80086f0:	d006      	beq.n	8008700 <_scanf_float+0x25c>
 80086f2:	0550      	lsls	r0, r2, #21
 80086f4:	f57f af08 	bpl.w	8008508 <_scanf_float+0x64>
 80086f8:	f1b9 0f00 	cmp.w	r9, #0
 80086fc:	f000 80de 	beq.w	80088bc <_scanf_float+0x418>
 8008700:	0591      	lsls	r1, r2, #22
 8008702:	bf58      	it	pl
 8008704:	9902      	ldrpl	r1, [sp, #8]
 8008706:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800870a:	bf58      	it	pl
 800870c:	eba9 0101 	subpl.w	r1, r9, r1
 8008710:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8008714:	bf58      	it	pl
 8008716:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800871a:	6022      	str	r2, [r4, #0]
 800871c:	f04f 0900 	mov.w	r9, #0
 8008720:	e789      	b.n	8008636 <_scanf_float+0x192>
 8008722:	f04f 0a03 	mov.w	sl, #3
 8008726:	e786      	b.n	8008636 <_scanf_float+0x192>
 8008728:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800872c:	4639      	mov	r1, r7
 800872e:	4640      	mov	r0, r8
 8008730:	4798      	blx	r3
 8008732:	2800      	cmp	r0, #0
 8008734:	f43f aedb 	beq.w	80084ee <_scanf_float+0x4a>
 8008738:	e6e6      	b.n	8008508 <_scanf_float+0x64>
 800873a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800873e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008742:	463a      	mov	r2, r7
 8008744:	4640      	mov	r0, r8
 8008746:	4798      	blx	r3
 8008748:	6923      	ldr	r3, [r4, #16]
 800874a:	3b01      	subs	r3, #1
 800874c:	6123      	str	r3, [r4, #16]
 800874e:	e6e8      	b.n	8008522 <_scanf_float+0x7e>
 8008750:	1e6b      	subs	r3, r5, #1
 8008752:	2b06      	cmp	r3, #6
 8008754:	d824      	bhi.n	80087a0 <_scanf_float+0x2fc>
 8008756:	2d02      	cmp	r5, #2
 8008758:	d836      	bhi.n	80087c8 <_scanf_float+0x324>
 800875a:	9b01      	ldr	r3, [sp, #4]
 800875c:	429e      	cmp	r6, r3
 800875e:	f67f aee4 	bls.w	800852a <_scanf_float+0x86>
 8008762:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008766:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800876a:	463a      	mov	r2, r7
 800876c:	4640      	mov	r0, r8
 800876e:	4798      	blx	r3
 8008770:	6923      	ldr	r3, [r4, #16]
 8008772:	3b01      	subs	r3, #1
 8008774:	6123      	str	r3, [r4, #16]
 8008776:	e7f0      	b.n	800875a <_scanf_float+0x2b6>
 8008778:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800877c:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8008780:	463a      	mov	r2, r7
 8008782:	4640      	mov	r0, r8
 8008784:	4798      	blx	r3
 8008786:	6923      	ldr	r3, [r4, #16]
 8008788:	3b01      	subs	r3, #1
 800878a:	6123      	str	r3, [r4, #16]
 800878c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008790:	fa5f fa8a 	uxtb.w	sl, sl
 8008794:	f1ba 0f02 	cmp.w	sl, #2
 8008798:	d1ee      	bne.n	8008778 <_scanf_float+0x2d4>
 800879a:	3d03      	subs	r5, #3
 800879c:	b2ed      	uxtb	r5, r5
 800879e:	1b76      	subs	r6, r6, r5
 80087a0:	6823      	ldr	r3, [r4, #0]
 80087a2:	05da      	lsls	r2, r3, #23
 80087a4:	d530      	bpl.n	8008808 <_scanf_float+0x364>
 80087a6:	055b      	lsls	r3, r3, #21
 80087a8:	d511      	bpl.n	80087ce <_scanf_float+0x32a>
 80087aa:	9b01      	ldr	r3, [sp, #4]
 80087ac:	429e      	cmp	r6, r3
 80087ae:	f67f aebc 	bls.w	800852a <_scanf_float+0x86>
 80087b2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80087b6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80087ba:	463a      	mov	r2, r7
 80087bc:	4640      	mov	r0, r8
 80087be:	4798      	blx	r3
 80087c0:	6923      	ldr	r3, [r4, #16]
 80087c2:	3b01      	subs	r3, #1
 80087c4:	6123      	str	r3, [r4, #16]
 80087c6:	e7f0      	b.n	80087aa <_scanf_float+0x306>
 80087c8:	46aa      	mov	sl, r5
 80087ca:	46b3      	mov	fp, r6
 80087cc:	e7de      	b.n	800878c <_scanf_float+0x2e8>
 80087ce:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80087d2:	6923      	ldr	r3, [r4, #16]
 80087d4:	2965      	cmp	r1, #101	@ 0x65
 80087d6:	f103 33ff 	add.w	r3, r3, #4294967295
 80087da:	f106 35ff 	add.w	r5, r6, #4294967295
 80087de:	6123      	str	r3, [r4, #16]
 80087e0:	d00c      	beq.n	80087fc <_scanf_float+0x358>
 80087e2:	2945      	cmp	r1, #69	@ 0x45
 80087e4:	d00a      	beq.n	80087fc <_scanf_float+0x358>
 80087e6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80087ea:	463a      	mov	r2, r7
 80087ec:	4640      	mov	r0, r8
 80087ee:	4798      	blx	r3
 80087f0:	6923      	ldr	r3, [r4, #16]
 80087f2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80087f6:	3b01      	subs	r3, #1
 80087f8:	1eb5      	subs	r5, r6, #2
 80087fa:	6123      	str	r3, [r4, #16]
 80087fc:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008800:	463a      	mov	r2, r7
 8008802:	4640      	mov	r0, r8
 8008804:	4798      	blx	r3
 8008806:	462e      	mov	r6, r5
 8008808:	6822      	ldr	r2, [r4, #0]
 800880a:	f012 0210 	ands.w	r2, r2, #16
 800880e:	d001      	beq.n	8008814 <_scanf_float+0x370>
 8008810:	2000      	movs	r0, #0
 8008812:	e68b      	b.n	800852c <_scanf_float+0x88>
 8008814:	7032      	strb	r2, [r6, #0]
 8008816:	6823      	ldr	r3, [r4, #0]
 8008818:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800881c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008820:	d11c      	bne.n	800885c <_scanf_float+0x3b8>
 8008822:	9b02      	ldr	r3, [sp, #8]
 8008824:	454b      	cmp	r3, r9
 8008826:	eba3 0209 	sub.w	r2, r3, r9
 800882a:	d123      	bne.n	8008874 <_scanf_float+0x3d0>
 800882c:	9901      	ldr	r1, [sp, #4]
 800882e:	2200      	movs	r2, #0
 8008830:	4640      	mov	r0, r8
 8008832:	f002 fc6d 	bl	800b110 <_strtod_r>
 8008836:	9b03      	ldr	r3, [sp, #12]
 8008838:	6821      	ldr	r1, [r4, #0]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	f011 0f02 	tst.w	r1, #2
 8008840:	ec57 6b10 	vmov	r6, r7, d0
 8008844:	f103 0204 	add.w	r2, r3, #4
 8008848:	d01f      	beq.n	800888a <_scanf_float+0x3e6>
 800884a:	9903      	ldr	r1, [sp, #12]
 800884c:	600a      	str	r2, [r1, #0]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	e9c3 6700 	strd	r6, r7, [r3]
 8008854:	68e3      	ldr	r3, [r4, #12]
 8008856:	3301      	adds	r3, #1
 8008858:	60e3      	str	r3, [r4, #12]
 800885a:	e7d9      	b.n	8008810 <_scanf_float+0x36c>
 800885c:	9b04      	ldr	r3, [sp, #16]
 800885e:	2b00      	cmp	r3, #0
 8008860:	d0e4      	beq.n	800882c <_scanf_float+0x388>
 8008862:	9905      	ldr	r1, [sp, #20]
 8008864:	230a      	movs	r3, #10
 8008866:	3101      	adds	r1, #1
 8008868:	4640      	mov	r0, r8
 800886a:	f002 fcd1 	bl	800b210 <_strtol_r>
 800886e:	9b04      	ldr	r3, [sp, #16]
 8008870:	9e05      	ldr	r6, [sp, #20]
 8008872:	1ac2      	subs	r2, r0, r3
 8008874:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8008878:	429e      	cmp	r6, r3
 800887a:	bf28      	it	cs
 800887c:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8008880:	4910      	ldr	r1, [pc, #64]	@ (80088c4 <_scanf_float+0x420>)
 8008882:	4630      	mov	r0, r6
 8008884:	f000 f954 	bl	8008b30 <siprintf>
 8008888:	e7d0      	b.n	800882c <_scanf_float+0x388>
 800888a:	f011 0f04 	tst.w	r1, #4
 800888e:	9903      	ldr	r1, [sp, #12]
 8008890:	600a      	str	r2, [r1, #0]
 8008892:	d1dc      	bne.n	800884e <_scanf_float+0x3aa>
 8008894:	681d      	ldr	r5, [r3, #0]
 8008896:	4632      	mov	r2, r6
 8008898:	463b      	mov	r3, r7
 800889a:	4630      	mov	r0, r6
 800889c:	4639      	mov	r1, r7
 800889e:	f7f8 f965 	bl	8000b6c <__aeabi_dcmpun>
 80088a2:	b128      	cbz	r0, 80088b0 <_scanf_float+0x40c>
 80088a4:	4808      	ldr	r0, [pc, #32]	@ (80088c8 <_scanf_float+0x424>)
 80088a6:	f000 fae1 	bl	8008e6c <nanf>
 80088aa:	ed85 0a00 	vstr	s0, [r5]
 80088ae:	e7d1      	b.n	8008854 <_scanf_float+0x3b0>
 80088b0:	4630      	mov	r0, r6
 80088b2:	4639      	mov	r1, r7
 80088b4:	f7f8 f9b8 	bl	8000c28 <__aeabi_d2f>
 80088b8:	6028      	str	r0, [r5, #0]
 80088ba:	e7cb      	b.n	8008854 <_scanf_float+0x3b0>
 80088bc:	f04f 0900 	mov.w	r9, #0
 80088c0:	e629      	b.n	8008516 <_scanf_float+0x72>
 80088c2:	bf00      	nop
 80088c4:	0800fc20 	.word	0x0800fc20
 80088c8:	0800ffb5 	.word	0x0800ffb5

080088cc <std>:
 80088cc:	2300      	movs	r3, #0
 80088ce:	b510      	push	{r4, lr}
 80088d0:	4604      	mov	r4, r0
 80088d2:	e9c0 3300 	strd	r3, r3, [r0]
 80088d6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80088da:	6083      	str	r3, [r0, #8]
 80088dc:	8181      	strh	r1, [r0, #12]
 80088de:	6643      	str	r3, [r0, #100]	@ 0x64
 80088e0:	81c2      	strh	r2, [r0, #14]
 80088e2:	6183      	str	r3, [r0, #24]
 80088e4:	4619      	mov	r1, r3
 80088e6:	2208      	movs	r2, #8
 80088e8:	305c      	adds	r0, #92	@ 0x5c
 80088ea:	f000 fa19 	bl	8008d20 <memset>
 80088ee:	4b0d      	ldr	r3, [pc, #52]	@ (8008924 <std+0x58>)
 80088f0:	6263      	str	r3, [r4, #36]	@ 0x24
 80088f2:	4b0d      	ldr	r3, [pc, #52]	@ (8008928 <std+0x5c>)
 80088f4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80088f6:	4b0d      	ldr	r3, [pc, #52]	@ (800892c <std+0x60>)
 80088f8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80088fa:	4b0d      	ldr	r3, [pc, #52]	@ (8008930 <std+0x64>)
 80088fc:	6323      	str	r3, [r4, #48]	@ 0x30
 80088fe:	4b0d      	ldr	r3, [pc, #52]	@ (8008934 <std+0x68>)
 8008900:	6224      	str	r4, [r4, #32]
 8008902:	429c      	cmp	r4, r3
 8008904:	d006      	beq.n	8008914 <std+0x48>
 8008906:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800890a:	4294      	cmp	r4, r2
 800890c:	d002      	beq.n	8008914 <std+0x48>
 800890e:	33d0      	adds	r3, #208	@ 0xd0
 8008910:	429c      	cmp	r4, r3
 8008912:	d105      	bne.n	8008920 <std+0x54>
 8008914:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008918:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800891c:	f000 ba8c 	b.w	8008e38 <__retarget_lock_init_recursive>
 8008920:	bd10      	pop	{r4, pc}
 8008922:	bf00      	nop
 8008924:	08008b71 	.word	0x08008b71
 8008928:	08008b93 	.word	0x08008b93
 800892c:	08008bcb 	.word	0x08008bcb
 8008930:	08008bef 	.word	0x08008bef
 8008934:	200004e8 	.word	0x200004e8

08008938 <stdio_exit_handler>:
 8008938:	4a02      	ldr	r2, [pc, #8]	@ (8008944 <stdio_exit_handler+0xc>)
 800893a:	4903      	ldr	r1, [pc, #12]	@ (8008948 <stdio_exit_handler+0x10>)
 800893c:	4803      	ldr	r0, [pc, #12]	@ (800894c <stdio_exit_handler+0x14>)
 800893e:	f000 b869 	b.w	8008a14 <_fwalk_sglue>
 8008942:	bf00      	nop
 8008944:	20000040 	.word	0x20000040
 8008948:	0800b851 	.word	0x0800b851
 800894c:	20000050 	.word	0x20000050

08008950 <cleanup_stdio>:
 8008950:	6841      	ldr	r1, [r0, #4]
 8008952:	4b0c      	ldr	r3, [pc, #48]	@ (8008984 <cleanup_stdio+0x34>)
 8008954:	4299      	cmp	r1, r3
 8008956:	b510      	push	{r4, lr}
 8008958:	4604      	mov	r4, r0
 800895a:	d001      	beq.n	8008960 <cleanup_stdio+0x10>
 800895c:	f002 ff78 	bl	800b850 <_fflush_r>
 8008960:	68a1      	ldr	r1, [r4, #8]
 8008962:	4b09      	ldr	r3, [pc, #36]	@ (8008988 <cleanup_stdio+0x38>)
 8008964:	4299      	cmp	r1, r3
 8008966:	d002      	beq.n	800896e <cleanup_stdio+0x1e>
 8008968:	4620      	mov	r0, r4
 800896a:	f002 ff71 	bl	800b850 <_fflush_r>
 800896e:	68e1      	ldr	r1, [r4, #12]
 8008970:	4b06      	ldr	r3, [pc, #24]	@ (800898c <cleanup_stdio+0x3c>)
 8008972:	4299      	cmp	r1, r3
 8008974:	d004      	beq.n	8008980 <cleanup_stdio+0x30>
 8008976:	4620      	mov	r0, r4
 8008978:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800897c:	f002 bf68 	b.w	800b850 <_fflush_r>
 8008980:	bd10      	pop	{r4, pc}
 8008982:	bf00      	nop
 8008984:	200004e8 	.word	0x200004e8
 8008988:	20000550 	.word	0x20000550
 800898c:	200005b8 	.word	0x200005b8

08008990 <global_stdio_init.part.0>:
 8008990:	b510      	push	{r4, lr}
 8008992:	4b0b      	ldr	r3, [pc, #44]	@ (80089c0 <global_stdio_init.part.0+0x30>)
 8008994:	4c0b      	ldr	r4, [pc, #44]	@ (80089c4 <global_stdio_init.part.0+0x34>)
 8008996:	4a0c      	ldr	r2, [pc, #48]	@ (80089c8 <global_stdio_init.part.0+0x38>)
 8008998:	601a      	str	r2, [r3, #0]
 800899a:	4620      	mov	r0, r4
 800899c:	2200      	movs	r2, #0
 800899e:	2104      	movs	r1, #4
 80089a0:	f7ff ff94 	bl	80088cc <std>
 80089a4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80089a8:	2201      	movs	r2, #1
 80089aa:	2109      	movs	r1, #9
 80089ac:	f7ff ff8e 	bl	80088cc <std>
 80089b0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80089b4:	2202      	movs	r2, #2
 80089b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80089ba:	2112      	movs	r1, #18
 80089bc:	f7ff bf86 	b.w	80088cc <std>
 80089c0:	20000620 	.word	0x20000620
 80089c4:	200004e8 	.word	0x200004e8
 80089c8:	08008939 	.word	0x08008939

080089cc <__sfp_lock_acquire>:
 80089cc:	4801      	ldr	r0, [pc, #4]	@ (80089d4 <__sfp_lock_acquire+0x8>)
 80089ce:	f000 ba34 	b.w	8008e3a <__retarget_lock_acquire_recursive>
 80089d2:	bf00      	nop
 80089d4:	20000629 	.word	0x20000629

080089d8 <__sfp_lock_release>:
 80089d8:	4801      	ldr	r0, [pc, #4]	@ (80089e0 <__sfp_lock_release+0x8>)
 80089da:	f000 ba2f 	b.w	8008e3c <__retarget_lock_release_recursive>
 80089de:	bf00      	nop
 80089e0:	20000629 	.word	0x20000629

080089e4 <__sinit>:
 80089e4:	b510      	push	{r4, lr}
 80089e6:	4604      	mov	r4, r0
 80089e8:	f7ff fff0 	bl	80089cc <__sfp_lock_acquire>
 80089ec:	6a23      	ldr	r3, [r4, #32]
 80089ee:	b11b      	cbz	r3, 80089f8 <__sinit+0x14>
 80089f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80089f4:	f7ff bff0 	b.w	80089d8 <__sfp_lock_release>
 80089f8:	4b04      	ldr	r3, [pc, #16]	@ (8008a0c <__sinit+0x28>)
 80089fa:	6223      	str	r3, [r4, #32]
 80089fc:	4b04      	ldr	r3, [pc, #16]	@ (8008a10 <__sinit+0x2c>)
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d1f5      	bne.n	80089f0 <__sinit+0xc>
 8008a04:	f7ff ffc4 	bl	8008990 <global_stdio_init.part.0>
 8008a08:	e7f2      	b.n	80089f0 <__sinit+0xc>
 8008a0a:	bf00      	nop
 8008a0c:	08008951 	.word	0x08008951
 8008a10:	20000620 	.word	0x20000620

08008a14 <_fwalk_sglue>:
 8008a14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008a18:	4607      	mov	r7, r0
 8008a1a:	4688      	mov	r8, r1
 8008a1c:	4614      	mov	r4, r2
 8008a1e:	2600      	movs	r6, #0
 8008a20:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008a24:	f1b9 0901 	subs.w	r9, r9, #1
 8008a28:	d505      	bpl.n	8008a36 <_fwalk_sglue+0x22>
 8008a2a:	6824      	ldr	r4, [r4, #0]
 8008a2c:	2c00      	cmp	r4, #0
 8008a2e:	d1f7      	bne.n	8008a20 <_fwalk_sglue+0xc>
 8008a30:	4630      	mov	r0, r6
 8008a32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008a36:	89ab      	ldrh	r3, [r5, #12]
 8008a38:	2b01      	cmp	r3, #1
 8008a3a:	d907      	bls.n	8008a4c <_fwalk_sglue+0x38>
 8008a3c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008a40:	3301      	adds	r3, #1
 8008a42:	d003      	beq.n	8008a4c <_fwalk_sglue+0x38>
 8008a44:	4629      	mov	r1, r5
 8008a46:	4638      	mov	r0, r7
 8008a48:	47c0      	blx	r8
 8008a4a:	4306      	orrs	r6, r0
 8008a4c:	3568      	adds	r5, #104	@ 0x68
 8008a4e:	e7e9      	b.n	8008a24 <_fwalk_sglue+0x10>

08008a50 <iprintf>:
 8008a50:	b40f      	push	{r0, r1, r2, r3}
 8008a52:	b507      	push	{r0, r1, r2, lr}
 8008a54:	4906      	ldr	r1, [pc, #24]	@ (8008a70 <iprintf+0x20>)
 8008a56:	ab04      	add	r3, sp, #16
 8008a58:	6808      	ldr	r0, [r1, #0]
 8008a5a:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a5e:	6881      	ldr	r1, [r0, #8]
 8008a60:	9301      	str	r3, [sp, #4]
 8008a62:	f002 fd59 	bl	800b518 <_vfiprintf_r>
 8008a66:	b003      	add	sp, #12
 8008a68:	f85d eb04 	ldr.w	lr, [sp], #4
 8008a6c:	b004      	add	sp, #16
 8008a6e:	4770      	bx	lr
 8008a70:	2000004c 	.word	0x2000004c

08008a74 <_puts_r>:
 8008a74:	6a03      	ldr	r3, [r0, #32]
 8008a76:	b570      	push	{r4, r5, r6, lr}
 8008a78:	6884      	ldr	r4, [r0, #8]
 8008a7a:	4605      	mov	r5, r0
 8008a7c:	460e      	mov	r6, r1
 8008a7e:	b90b      	cbnz	r3, 8008a84 <_puts_r+0x10>
 8008a80:	f7ff ffb0 	bl	80089e4 <__sinit>
 8008a84:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008a86:	07db      	lsls	r3, r3, #31
 8008a88:	d405      	bmi.n	8008a96 <_puts_r+0x22>
 8008a8a:	89a3      	ldrh	r3, [r4, #12]
 8008a8c:	0598      	lsls	r0, r3, #22
 8008a8e:	d402      	bmi.n	8008a96 <_puts_r+0x22>
 8008a90:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008a92:	f000 f9d2 	bl	8008e3a <__retarget_lock_acquire_recursive>
 8008a96:	89a3      	ldrh	r3, [r4, #12]
 8008a98:	0719      	lsls	r1, r3, #28
 8008a9a:	d502      	bpl.n	8008aa2 <_puts_r+0x2e>
 8008a9c:	6923      	ldr	r3, [r4, #16]
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d135      	bne.n	8008b0e <_puts_r+0x9a>
 8008aa2:	4621      	mov	r1, r4
 8008aa4:	4628      	mov	r0, r5
 8008aa6:	f000 f8e5 	bl	8008c74 <__swsetup_r>
 8008aaa:	b380      	cbz	r0, 8008b0e <_puts_r+0x9a>
 8008aac:	f04f 35ff 	mov.w	r5, #4294967295
 8008ab0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008ab2:	07da      	lsls	r2, r3, #31
 8008ab4:	d405      	bmi.n	8008ac2 <_puts_r+0x4e>
 8008ab6:	89a3      	ldrh	r3, [r4, #12]
 8008ab8:	059b      	lsls	r3, r3, #22
 8008aba:	d402      	bmi.n	8008ac2 <_puts_r+0x4e>
 8008abc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008abe:	f000 f9bd 	bl	8008e3c <__retarget_lock_release_recursive>
 8008ac2:	4628      	mov	r0, r5
 8008ac4:	bd70      	pop	{r4, r5, r6, pc}
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	da04      	bge.n	8008ad4 <_puts_r+0x60>
 8008aca:	69a2      	ldr	r2, [r4, #24]
 8008acc:	429a      	cmp	r2, r3
 8008ace:	dc17      	bgt.n	8008b00 <_puts_r+0x8c>
 8008ad0:	290a      	cmp	r1, #10
 8008ad2:	d015      	beq.n	8008b00 <_puts_r+0x8c>
 8008ad4:	6823      	ldr	r3, [r4, #0]
 8008ad6:	1c5a      	adds	r2, r3, #1
 8008ad8:	6022      	str	r2, [r4, #0]
 8008ada:	7019      	strb	r1, [r3, #0]
 8008adc:	68a3      	ldr	r3, [r4, #8]
 8008ade:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008ae2:	3b01      	subs	r3, #1
 8008ae4:	60a3      	str	r3, [r4, #8]
 8008ae6:	2900      	cmp	r1, #0
 8008ae8:	d1ed      	bne.n	8008ac6 <_puts_r+0x52>
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	da11      	bge.n	8008b12 <_puts_r+0x9e>
 8008aee:	4622      	mov	r2, r4
 8008af0:	210a      	movs	r1, #10
 8008af2:	4628      	mov	r0, r5
 8008af4:	f000 f87f 	bl	8008bf6 <__swbuf_r>
 8008af8:	3001      	adds	r0, #1
 8008afa:	d0d7      	beq.n	8008aac <_puts_r+0x38>
 8008afc:	250a      	movs	r5, #10
 8008afe:	e7d7      	b.n	8008ab0 <_puts_r+0x3c>
 8008b00:	4622      	mov	r2, r4
 8008b02:	4628      	mov	r0, r5
 8008b04:	f000 f877 	bl	8008bf6 <__swbuf_r>
 8008b08:	3001      	adds	r0, #1
 8008b0a:	d1e7      	bne.n	8008adc <_puts_r+0x68>
 8008b0c:	e7ce      	b.n	8008aac <_puts_r+0x38>
 8008b0e:	3e01      	subs	r6, #1
 8008b10:	e7e4      	b.n	8008adc <_puts_r+0x68>
 8008b12:	6823      	ldr	r3, [r4, #0]
 8008b14:	1c5a      	adds	r2, r3, #1
 8008b16:	6022      	str	r2, [r4, #0]
 8008b18:	220a      	movs	r2, #10
 8008b1a:	701a      	strb	r2, [r3, #0]
 8008b1c:	e7ee      	b.n	8008afc <_puts_r+0x88>
	...

08008b20 <puts>:
 8008b20:	4b02      	ldr	r3, [pc, #8]	@ (8008b2c <puts+0xc>)
 8008b22:	4601      	mov	r1, r0
 8008b24:	6818      	ldr	r0, [r3, #0]
 8008b26:	f7ff bfa5 	b.w	8008a74 <_puts_r>
 8008b2a:	bf00      	nop
 8008b2c:	2000004c 	.word	0x2000004c

08008b30 <siprintf>:
 8008b30:	b40e      	push	{r1, r2, r3}
 8008b32:	b500      	push	{lr}
 8008b34:	b09c      	sub	sp, #112	@ 0x70
 8008b36:	ab1d      	add	r3, sp, #116	@ 0x74
 8008b38:	9002      	str	r0, [sp, #8]
 8008b3a:	9006      	str	r0, [sp, #24]
 8008b3c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008b40:	4809      	ldr	r0, [pc, #36]	@ (8008b68 <siprintf+0x38>)
 8008b42:	9107      	str	r1, [sp, #28]
 8008b44:	9104      	str	r1, [sp, #16]
 8008b46:	4909      	ldr	r1, [pc, #36]	@ (8008b6c <siprintf+0x3c>)
 8008b48:	f853 2b04 	ldr.w	r2, [r3], #4
 8008b4c:	9105      	str	r1, [sp, #20]
 8008b4e:	6800      	ldr	r0, [r0, #0]
 8008b50:	9301      	str	r3, [sp, #4]
 8008b52:	a902      	add	r1, sp, #8
 8008b54:	f002 fbba 	bl	800b2cc <_svfiprintf_r>
 8008b58:	9b02      	ldr	r3, [sp, #8]
 8008b5a:	2200      	movs	r2, #0
 8008b5c:	701a      	strb	r2, [r3, #0]
 8008b5e:	b01c      	add	sp, #112	@ 0x70
 8008b60:	f85d eb04 	ldr.w	lr, [sp], #4
 8008b64:	b003      	add	sp, #12
 8008b66:	4770      	bx	lr
 8008b68:	2000004c 	.word	0x2000004c
 8008b6c:	ffff0208 	.word	0xffff0208

08008b70 <__sread>:
 8008b70:	b510      	push	{r4, lr}
 8008b72:	460c      	mov	r4, r1
 8008b74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b78:	f000 f900 	bl	8008d7c <_read_r>
 8008b7c:	2800      	cmp	r0, #0
 8008b7e:	bfab      	itete	ge
 8008b80:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008b82:	89a3      	ldrhlt	r3, [r4, #12]
 8008b84:	181b      	addge	r3, r3, r0
 8008b86:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008b8a:	bfac      	ite	ge
 8008b8c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008b8e:	81a3      	strhlt	r3, [r4, #12]
 8008b90:	bd10      	pop	{r4, pc}

08008b92 <__swrite>:
 8008b92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b96:	461f      	mov	r7, r3
 8008b98:	898b      	ldrh	r3, [r1, #12]
 8008b9a:	05db      	lsls	r3, r3, #23
 8008b9c:	4605      	mov	r5, r0
 8008b9e:	460c      	mov	r4, r1
 8008ba0:	4616      	mov	r6, r2
 8008ba2:	d505      	bpl.n	8008bb0 <__swrite+0x1e>
 8008ba4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ba8:	2302      	movs	r3, #2
 8008baa:	2200      	movs	r2, #0
 8008bac:	f000 f8d4 	bl	8008d58 <_lseek_r>
 8008bb0:	89a3      	ldrh	r3, [r4, #12]
 8008bb2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008bb6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008bba:	81a3      	strh	r3, [r4, #12]
 8008bbc:	4632      	mov	r2, r6
 8008bbe:	463b      	mov	r3, r7
 8008bc0:	4628      	mov	r0, r5
 8008bc2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008bc6:	f000 b8fb 	b.w	8008dc0 <_write_r>

08008bca <__sseek>:
 8008bca:	b510      	push	{r4, lr}
 8008bcc:	460c      	mov	r4, r1
 8008bce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008bd2:	f000 f8c1 	bl	8008d58 <_lseek_r>
 8008bd6:	1c43      	adds	r3, r0, #1
 8008bd8:	89a3      	ldrh	r3, [r4, #12]
 8008bda:	bf15      	itete	ne
 8008bdc:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008bde:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008be2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008be6:	81a3      	strheq	r3, [r4, #12]
 8008be8:	bf18      	it	ne
 8008bea:	81a3      	strhne	r3, [r4, #12]
 8008bec:	bd10      	pop	{r4, pc}

08008bee <__sclose>:
 8008bee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008bf2:	f000 b8a1 	b.w	8008d38 <_close_r>

08008bf6 <__swbuf_r>:
 8008bf6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bf8:	460e      	mov	r6, r1
 8008bfa:	4614      	mov	r4, r2
 8008bfc:	4605      	mov	r5, r0
 8008bfe:	b118      	cbz	r0, 8008c08 <__swbuf_r+0x12>
 8008c00:	6a03      	ldr	r3, [r0, #32]
 8008c02:	b90b      	cbnz	r3, 8008c08 <__swbuf_r+0x12>
 8008c04:	f7ff feee 	bl	80089e4 <__sinit>
 8008c08:	69a3      	ldr	r3, [r4, #24]
 8008c0a:	60a3      	str	r3, [r4, #8]
 8008c0c:	89a3      	ldrh	r3, [r4, #12]
 8008c0e:	071a      	lsls	r2, r3, #28
 8008c10:	d501      	bpl.n	8008c16 <__swbuf_r+0x20>
 8008c12:	6923      	ldr	r3, [r4, #16]
 8008c14:	b943      	cbnz	r3, 8008c28 <__swbuf_r+0x32>
 8008c16:	4621      	mov	r1, r4
 8008c18:	4628      	mov	r0, r5
 8008c1a:	f000 f82b 	bl	8008c74 <__swsetup_r>
 8008c1e:	b118      	cbz	r0, 8008c28 <__swbuf_r+0x32>
 8008c20:	f04f 37ff 	mov.w	r7, #4294967295
 8008c24:	4638      	mov	r0, r7
 8008c26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008c28:	6823      	ldr	r3, [r4, #0]
 8008c2a:	6922      	ldr	r2, [r4, #16]
 8008c2c:	1a98      	subs	r0, r3, r2
 8008c2e:	6963      	ldr	r3, [r4, #20]
 8008c30:	b2f6      	uxtb	r6, r6
 8008c32:	4283      	cmp	r3, r0
 8008c34:	4637      	mov	r7, r6
 8008c36:	dc05      	bgt.n	8008c44 <__swbuf_r+0x4e>
 8008c38:	4621      	mov	r1, r4
 8008c3a:	4628      	mov	r0, r5
 8008c3c:	f002 fe08 	bl	800b850 <_fflush_r>
 8008c40:	2800      	cmp	r0, #0
 8008c42:	d1ed      	bne.n	8008c20 <__swbuf_r+0x2a>
 8008c44:	68a3      	ldr	r3, [r4, #8]
 8008c46:	3b01      	subs	r3, #1
 8008c48:	60a3      	str	r3, [r4, #8]
 8008c4a:	6823      	ldr	r3, [r4, #0]
 8008c4c:	1c5a      	adds	r2, r3, #1
 8008c4e:	6022      	str	r2, [r4, #0]
 8008c50:	701e      	strb	r6, [r3, #0]
 8008c52:	6962      	ldr	r2, [r4, #20]
 8008c54:	1c43      	adds	r3, r0, #1
 8008c56:	429a      	cmp	r2, r3
 8008c58:	d004      	beq.n	8008c64 <__swbuf_r+0x6e>
 8008c5a:	89a3      	ldrh	r3, [r4, #12]
 8008c5c:	07db      	lsls	r3, r3, #31
 8008c5e:	d5e1      	bpl.n	8008c24 <__swbuf_r+0x2e>
 8008c60:	2e0a      	cmp	r6, #10
 8008c62:	d1df      	bne.n	8008c24 <__swbuf_r+0x2e>
 8008c64:	4621      	mov	r1, r4
 8008c66:	4628      	mov	r0, r5
 8008c68:	f002 fdf2 	bl	800b850 <_fflush_r>
 8008c6c:	2800      	cmp	r0, #0
 8008c6e:	d0d9      	beq.n	8008c24 <__swbuf_r+0x2e>
 8008c70:	e7d6      	b.n	8008c20 <__swbuf_r+0x2a>
	...

08008c74 <__swsetup_r>:
 8008c74:	b538      	push	{r3, r4, r5, lr}
 8008c76:	4b29      	ldr	r3, [pc, #164]	@ (8008d1c <__swsetup_r+0xa8>)
 8008c78:	4605      	mov	r5, r0
 8008c7a:	6818      	ldr	r0, [r3, #0]
 8008c7c:	460c      	mov	r4, r1
 8008c7e:	b118      	cbz	r0, 8008c88 <__swsetup_r+0x14>
 8008c80:	6a03      	ldr	r3, [r0, #32]
 8008c82:	b90b      	cbnz	r3, 8008c88 <__swsetup_r+0x14>
 8008c84:	f7ff feae 	bl	80089e4 <__sinit>
 8008c88:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008c8c:	0719      	lsls	r1, r3, #28
 8008c8e:	d422      	bmi.n	8008cd6 <__swsetup_r+0x62>
 8008c90:	06da      	lsls	r2, r3, #27
 8008c92:	d407      	bmi.n	8008ca4 <__swsetup_r+0x30>
 8008c94:	2209      	movs	r2, #9
 8008c96:	602a      	str	r2, [r5, #0]
 8008c98:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008c9c:	81a3      	strh	r3, [r4, #12]
 8008c9e:	f04f 30ff 	mov.w	r0, #4294967295
 8008ca2:	e033      	b.n	8008d0c <__swsetup_r+0x98>
 8008ca4:	0758      	lsls	r0, r3, #29
 8008ca6:	d512      	bpl.n	8008cce <__swsetup_r+0x5a>
 8008ca8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008caa:	b141      	cbz	r1, 8008cbe <__swsetup_r+0x4a>
 8008cac:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008cb0:	4299      	cmp	r1, r3
 8008cb2:	d002      	beq.n	8008cba <__swsetup_r+0x46>
 8008cb4:	4628      	mov	r0, r5
 8008cb6:	f000 ff2b 	bl	8009b10 <_free_r>
 8008cba:	2300      	movs	r3, #0
 8008cbc:	6363      	str	r3, [r4, #52]	@ 0x34
 8008cbe:	89a3      	ldrh	r3, [r4, #12]
 8008cc0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008cc4:	81a3      	strh	r3, [r4, #12]
 8008cc6:	2300      	movs	r3, #0
 8008cc8:	6063      	str	r3, [r4, #4]
 8008cca:	6923      	ldr	r3, [r4, #16]
 8008ccc:	6023      	str	r3, [r4, #0]
 8008cce:	89a3      	ldrh	r3, [r4, #12]
 8008cd0:	f043 0308 	orr.w	r3, r3, #8
 8008cd4:	81a3      	strh	r3, [r4, #12]
 8008cd6:	6923      	ldr	r3, [r4, #16]
 8008cd8:	b94b      	cbnz	r3, 8008cee <__swsetup_r+0x7a>
 8008cda:	89a3      	ldrh	r3, [r4, #12]
 8008cdc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008ce0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008ce4:	d003      	beq.n	8008cee <__swsetup_r+0x7a>
 8008ce6:	4621      	mov	r1, r4
 8008ce8:	4628      	mov	r0, r5
 8008cea:	f002 fdff 	bl	800b8ec <__smakebuf_r>
 8008cee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008cf2:	f013 0201 	ands.w	r2, r3, #1
 8008cf6:	d00a      	beq.n	8008d0e <__swsetup_r+0x9a>
 8008cf8:	2200      	movs	r2, #0
 8008cfa:	60a2      	str	r2, [r4, #8]
 8008cfc:	6962      	ldr	r2, [r4, #20]
 8008cfe:	4252      	negs	r2, r2
 8008d00:	61a2      	str	r2, [r4, #24]
 8008d02:	6922      	ldr	r2, [r4, #16]
 8008d04:	b942      	cbnz	r2, 8008d18 <__swsetup_r+0xa4>
 8008d06:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008d0a:	d1c5      	bne.n	8008c98 <__swsetup_r+0x24>
 8008d0c:	bd38      	pop	{r3, r4, r5, pc}
 8008d0e:	0799      	lsls	r1, r3, #30
 8008d10:	bf58      	it	pl
 8008d12:	6962      	ldrpl	r2, [r4, #20]
 8008d14:	60a2      	str	r2, [r4, #8]
 8008d16:	e7f4      	b.n	8008d02 <__swsetup_r+0x8e>
 8008d18:	2000      	movs	r0, #0
 8008d1a:	e7f7      	b.n	8008d0c <__swsetup_r+0x98>
 8008d1c:	2000004c 	.word	0x2000004c

08008d20 <memset>:
 8008d20:	4402      	add	r2, r0
 8008d22:	4603      	mov	r3, r0
 8008d24:	4293      	cmp	r3, r2
 8008d26:	d100      	bne.n	8008d2a <memset+0xa>
 8008d28:	4770      	bx	lr
 8008d2a:	f803 1b01 	strb.w	r1, [r3], #1
 8008d2e:	e7f9      	b.n	8008d24 <memset+0x4>

08008d30 <_localeconv_r>:
 8008d30:	4800      	ldr	r0, [pc, #0]	@ (8008d34 <_localeconv_r+0x4>)
 8008d32:	4770      	bx	lr
 8008d34:	2000018c 	.word	0x2000018c

08008d38 <_close_r>:
 8008d38:	b538      	push	{r3, r4, r5, lr}
 8008d3a:	4d06      	ldr	r5, [pc, #24]	@ (8008d54 <_close_r+0x1c>)
 8008d3c:	2300      	movs	r3, #0
 8008d3e:	4604      	mov	r4, r0
 8008d40:	4608      	mov	r0, r1
 8008d42:	602b      	str	r3, [r5, #0]
 8008d44:	f7f9 fcde 	bl	8002704 <_close>
 8008d48:	1c43      	adds	r3, r0, #1
 8008d4a:	d102      	bne.n	8008d52 <_close_r+0x1a>
 8008d4c:	682b      	ldr	r3, [r5, #0]
 8008d4e:	b103      	cbz	r3, 8008d52 <_close_r+0x1a>
 8008d50:	6023      	str	r3, [r4, #0]
 8008d52:	bd38      	pop	{r3, r4, r5, pc}
 8008d54:	20000624 	.word	0x20000624

08008d58 <_lseek_r>:
 8008d58:	b538      	push	{r3, r4, r5, lr}
 8008d5a:	4d07      	ldr	r5, [pc, #28]	@ (8008d78 <_lseek_r+0x20>)
 8008d5c:	4604      	mov	r4, r0
 8008d5e:	4608      	mov	r0, r1
 8008d60:	4611      	mov	r1, r2
 8008d62:	2200      	movs	r2, #0
 8008d64:	602a      	str	r2, [r5, #0]
 8008d66:	461a      	mov	r2, r3
 8008d68:	f7f9 fcf3 	bl	8002752 <_lseek>
 8008d6c:	1c43      	adds	r3, r0, #1
 8008d6e:	d102      	bne.n	8008d76 <_lseek_r+0x1e>
 8008d70:	682b      	ldr	r3, [r5, #0]
 8008d72:	b103      	cbz	r3, 8008d76 <_lseek_r+0x1e>
 8008d74:	6023      	str	r3, [r4, #0]
 8008d76:	bd38      	pop	{r3, r4, r5, pc}
 8008d78:	20000624 	.word	0x20000624

08008d7c <_read_r>:
 8008d7c:	b538      	push	{r3, r4, r5, lr}
 8008d7e:	4d07      	ldr	r5, [pc, #28]	@ (8008d9c <_read_r+0x20>)
 8008d80:	4604      	mov	r4, r0
 8008d82:	4608      	mov	r0, r1
 8008d84:	4611      	mov	r1, r2
 8008d86:	2200      	movs	r2, #0
 8008d88:	602a      	str	r2, [r5, #0]
 8008d8a:	461a      	mov	r2, r3
 8008d8c:	f7f9 fc81 	bl	8002692 <_read>
 8008d90:	1c43      	adds	r3, r0, #1
 8008d92:	d102      	bne.n	8008d9a <_read_r+0x1e>
 8008d94:	682b      	ldr	r3, [r5, #0]
 8008d96:	b103      	cbz	r3, 8008d9a <_read_r+0x1e>
 8008d98:	6023      	str	r3, [r4, #0]
 8008d9a:	bd38      	pop	{r3, r4, r5, pc}
 8008d9c:	20000624 	.word	0x20000624

08008da0 <_sbrk_r>:
 8008da0:	b538      	push	{r3, r4, r5, lr}
 8008da2:	4d06      	ldr	r5, [pc, #24]	@ (8008dbc <_sbrk_r+0x1c>)
 8008da4:	2300      	movs	r3, #0
 8008da6:	4604      	mov	r4, r0
 8008da8:	4608      	mov	r0, r1
 8008daa:	602b      	str	r3, [r5, #0]
 8008dac:	f7f9 fcde 	bl	800276c <_sbrk>
 8008db0:	1c43      	adds	r3, r0, #1
 8008db2:	d102      	bne.n	8008dba <_sbrk_r+0x1a>
 8008db4:	682b      	ldr	r3, [r5, #0]
 8008db6:	b103      	cbz	r3, 8008dba <_sbrk_r+0x1a>
 8008db8:	6023      	str	r3, [r4, #0]
 8008dba:	bd38      	pop	{r3, r4, r5, pc}
 8008dbc:	20000624 	.word	0x20000624

08008dc0 <_write_r>:
 8008dc0:	b538      	push	{r3, r4, r5, lr}
 8008dc2:	4d07      	ldr	r5, [pc, #28]	@ (8008de0 <_write_r+0x20>)
 8008dc4:	4604      	mov	r4, r0
 8008dc6:	4608      	mov	r0, r1
 8008dc8:	4611      	mov	r1, r2
 8008dca:	2200      	movs	r2, #0
 8008dcc:	602a      	str	r2, [r5, #0]
 8008dce:	461a      	mov	r2, r3
 8008dd0:	f7f9 fc7c 	bl	80026cc <_write>
 8008dd4:	1c43      	adds	r3, r0, #1
 8008dd6:	d102      	bne.n	8008dde <_write_r+0x1e>
 8008dd8:	682b      	ldr	r3, [r5, #0]
 8008dda:	b103      	cbz	r3, 8008dde <_write_r+0x1e>
 8008ddc:	6023      	str	r3, [r4, #0]
 8008dde:	bd38      	pop	{r3, r4, r5, pc}
 8008de0:	20000624 	.word	0x20000624

08008de4 <__errno>:
 8008de4:	4b01      	ldr	r3, [pc, #4]	@ (8008dec <__errno+0x8>)
 8008de6:	6818      	ldr	r0, [r3, #0]
 8008de8:	4770      	bx	lr
 8008dea:	bf00      	nop
 8008dec:	2000004c 	.word	0x2000004c

08008df0 <__libc_init_array>:
 8008df0:	b570      	push	{r4, r5, r6, lr}
 8008df2:	4d0d      	ldr	r5, [pc, #52]	@ (8008e28 <__libc_init_array+0x38>)
 8008df4:	4c0d      	ldr	r4, [pc, #52]	@ (8008e2c <__libc_init_array+0x3c>)
 8008df6:	1b64      	subs	r4, r4, r5
 8008df8:	10a4      	asrs	r4, r4, #2
 8008dfa:	2600      	movs	r6, #0
 8008dfc:	42a6      	cmp	r6, r4
 8008dfe:	d109      	bne.n	8008e14 <__libc_init_array+0x24>
 8008e00:	4d0b      	ldr	r5, [pc, #44]	@ (8008e30 <__libc_init_array+0x40>)
 8008e02:	4c0c      	ldr	r4, [pc, #48]	@ (8008e34 <__libc_init_array+0x44>)
 8008e04:	f003 fa22 	bl	800c24c <_init>
 8008e08:	1b64      	subs	r4, r4, r5
 8008e0a:	10a4      	asrs	r4, r4, #2
 8008e0c:	2600      	movs	r6, #0
 8008e0e:	42a6      	cmp	r6, r4
 8008e10:	d105      	bne.n	8008e1e <__libc_init_array+0x2e>
 8008e12:	bd70      	pop	{r4, r5, r6, pc}
 8008e14:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e18:	4798      	blx	r3
 8008e1a:	3601      	adds	r6, #1
 8008e1c:	e7ee      	b.n	8008dfc <__libc_init_array+0xc>
 8008e1e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e22:	4798      	blx	r3
 8008e24:	3601      	adds	r6, #1
 8008e26:	e7f2      	b.n	8008e0e <__libc_init_array+0x1e>
 8008e28:	08010020 	.word	0x08010020
 8008e2c:	08010020 	.word	0x08010020
 8008e30:	08010020 	.word	0x08010020
 8008e34:	08010024 	.word	0x08010024

08008e38 <__retarget_lock_init_recursive>:
 8008e38:	4770      	bx	lr

08008e3a <__retarget_lock_acquire_recursive>:
 8008e3a:	4770      	bx	lr

08008e3c <__retarget_lock_release_recursive>:
 8008e3c:	4770      	bx	lr

08008e3e <strcpy>:
 8008e3e:	4603      	mov	r3, r0
 8008e40:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008e44:	f803 2b01 	strb.w	r2, [r3], #1
 8008e48:	2a00      	cmp	r2, #0
 8008e4a:	d1f9      	bne.n	8008e40 <strcpy+0x2>
 8008e4c:	4770      	bx	lr

08008e4e <memcpy>:
 8008e4e:	440a      	add	r2, r1
 8008e50:	4291      	cmp	r1, r2
 8008e52:	f100 33ff 	add.w	r3, r0, #4294967295
 8008e56:	d100      	bne.n	8008e5a <memcpy+0xc>
 8008e58:	4770      	bx	lr
 8008e5a:	b510      	push	{r4, lr}
 8008e5c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008e60:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008e64:	4291      	cmp	r1, r2
 8008e66:	d1f9      	bne.n	8008e5c <memcpy+0xe>
 8008e68:	bd10      	pop	{r4, pc}
	...

08008e6c <nanf>:
 8008e6c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8008e74 <nanf+0x8>
 8008e70:	4770      	bx	lr
 8008e72:	bf00      	nop
 8008e74:	7fc00000 	.word	0x7fc00000

08008e78 <quorem>:
 8008e78:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e7c:	6903      	ldr	r3, [r0, #16]
 8008e7e:	690c      	ldr	r4, [r1, #16]
 8008e80:	42a3      	cmp	r3, r4
 8008e82:	4607      	mov	r7, r0
 8008e84:	db7e      	blt.n	8008f84 <quorem+0x10c>
 8008e86:	3c01      	subs	r4, #1
 8008e88:	f101 0814 	add.w	r8, r1, #20
 8008e8c:	00a3      	lsls	r3, r4, #2
 8008e8e:	f100 0514 	add.w	r5, r0, #20
 8008e92:	9300      	str	r3, [sp, #0]
 8008e94:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008e98:	9301      	str	r3, [sp, #4]
 8008e9a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008e9e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008ea2:	3301      	adds	r3, #1
 8008ea4:	429a      	cmp	r2, r3
 8008ea6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008eaa:	fbb2 f6f3 	udiv	r6, r2, r3
 8008eae:	d32e      	bcc.n	8008f0e <quorem+0x96>
 8008eb0:	f04f 0a00 	mov.w	sl, #0
 8008eb4:	46c4      	mov	ip, r8
 8008eb6:	46ae      	mov	lr, r5
 8008eb8:	46d3      	mov	fp, sl
 8008eba:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008ebe:	b298      	uxth	r0, r3
 8008ec0:	fb06 a000 	mla	r0, r6, r0, sl
 8008ec4:	0c02      	lsrs	r2, r0, #16
 8008ec6:	0c1b      	lsrs	r3, r3, #16
 8008ec8:	fb06 2303 	mla	r3, r6, r3, r2
 8008ecc:	f8de 2000 	ldr.w	r2, [lr]
 8008ed0:	b280      	uxth	r0, r0
 8008ed2:	b292      	uxth	r2, r2
 8008ed4:	1a12      	subs	r2, r2, r0
 8008ed6:	445a      	add	r2, fp
 8008ed8:	f8de 0000 	ldr.w	r0, [lr]
 8008edc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008ee0:	b29b      	uxth	r3, r3
 8008ee2:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8008ee6:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8008eea:	b292      	uxth	r2, r2
 8008eec:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8008ef0:	45e1      	cmp	r9, ip
 8008ef2:	f84e 2b04 	str.w	r2, [lr], #4
 8008ef6:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8008efa:	d2de      	bcs.n	8008eba <quorem+0x42>
 8008efc:	9b00      	ldr	r3, [sp, #0]
 8008efe:	58eb      	ldr	r3, [r5, r3]
 8008f00:	b92b      	cbnz	r3, 8008f0e <quorem+0x96>
 8008f02:	9b01      	ldr	r3, [sp, #4]
 8008f04:	3b04      	subs	r3, #4
 8008f06:	429d      	cmp	r5, r3
 8008f08:	461a      	mov	r2, r3
 8008f0a:	d32f      	bcc.n	8008f6c <quorem+0xf4>
 8008f0c:	613c      	str	r4, [r7, #16]
 8008f0e:	4638      	mov	r0, r7
 8008f10:	f001 f90c 	bl	800a12c <__mcmp>
 8008f14:	2800      	cmp	r0, #0
 8008f16:	db25      	blt.n	8008f64 <quorem+0xec>
 8008f18:	4629      	mov	r1, r5
 8008f1a:	2000      	movs	r0, #0
 8008f1c:	f858 2b04 	ldr.w	r2, [r8], #4
 8008f20:	f8d1 c000 	ldr.w	ip, [r1]
 8008f24:	fa1f fe82 	uxth.w	lr, r2
 8008f28:	fa1f f38c 	uxth.w	r3, ip
 8008f2c:	eba3 030e 	sub.w	r3, r3, lr
 8008f30:	4403      	add	r3, r0
 8008f32:	0c12      	lsrs	r2, r2, #16
 8008f34:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8008f38:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8008f3c:	b29b      	uxth	r3, r3
 8008f3e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008f42:	45c1      	cmp	r9, r8
 8008f44:	f841 3b04 	str.w	r3, [r1], #4
 8008f48:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008f4c:	d2e6      	bcs.n	8008f1c <quorem+0xa4>
 8008f4e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008f52:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008f56:	b922      	cbnz	r2, 8008f62 <quorem+0xea>
 8008f58:	3b04      	subs	r3, #4
 8008f5a:	429d      	cmp	r5, r3
 8008f5c:	461a      	mov	r2, r3
 8008f5e:	d30b      	bcc.n	8008f78 <quorem+0x100>
 8008f60:	613c      	str	r4, [r7, #16]
 8008f62:	3601      	adds	r6, #1
 8008f64:	4630      	mov	r0, r6
 8008f66:	b003      	add	sp, #12
 8008f68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f6c:	6812      	ldr	r2, [r2, #0]
 8008f6e:	3b04      	subs	r3, #4
 8008f70:	2a00      	cmp	r2, #0
 8008f72:	d1cb      	bne.n	8008f0c <quorem+0x94>
 8008f74:	3c01      	subs	r4, #1
 8008f76:	e7c6      	b.n	8008f06 <quorem+0x8e>
 8008f78:	6812      	ldr	r2, [r2, #0]
 8008f7a:	3b04      	subs	r3, #4
 8008f7c:	2a00      	cmp	r2, #0
 8008f7e:	d1ef      	bne.n	8008f60 <quorem+0xe8>
 8008f80:	3c01      	subs	r4, #1
 8008f82:	e7ea      	b.n	8008f5a <quorem+0xe2>
 8008f84:	2000      	movs	r0, #0
 8008f86:	e7ee      	b.n	8008f66 <quorem+0xee>

08008f88 <_dtoa_r>:
 8008f88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f8c:	69c7      	ldr	r7, [r0, #28]
 8008f8e:	b099      	sub	sp, #100	@ 0x64
 8008f90:	ed8d 0b02 	vstr	d0, [sp, #8]
 8008f94:	ec55 4b10 	vmov	r4, r5, d0
 8008f98:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8008f9a:	9109      	str	r1, [sp, #36]	@ 0x24
 8008f9c:	4683      	mov	fp, r0
 8008f9e:	920e      	str	r2, [sp, #56]	@ 0x38
 8008fa0:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008fa2:	b97f      	cbnz	r7, 8008fc4 <_dtoa_r+0x3c>
 8008fa4:	2010      	movs	r0, #16
 8008fa6:	f7fe fd6f 	bl	8007a88 <malloc>
 8008faa:	4602      	mov	r2, r0
 8008fac:	f8cb 001c 	str.w	r0, [fp, #28]
 8008fb0:	b920      	cbnz	r0, 8008fbc <_dtoa_r+0x34>
 8008fb2:	4ba7      	ldr	r3, [pc, #668]	@ (8009250 <_dtoa_r+0x2c8>)
 8008fb4:	21ef      	movs	r1, #239	@ 0xef
 8008fb6:	48a7      	ldr	r0, [pc, #668]	@ (8009254 <_dtoa_r+0x2cc>)
 8008fb8:	f002 fd2a 	bl	800ba10 <__assert_func>
 8008fbc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8008fc0:	6007      	str	r7, [r0, #0]
 8008fc2:	60c7      	str	r7, [r0, #12]
 8008fc4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008fc8:	6819      	ldr	r1, [r3, #0]
 8008fca:	b159      	cbz	r1, 8008fe4 <_dtoa_r+0x5c>
 8008fcc:	685a      	ldr	r2, [r3, #4]
 8008fce:	604a      	str	r2, [r1, #4]
 8008fd0:	2301      	movs	r3, #1
 8008fd2:	4093      	lsls	r3, r2
 8008fd4:	608b      	str	r3, [r1, #8]
 8008fd6:	4658      	mov	r0, fp
 8008fd8:	f000 fe24 	bl	8009c24 <_Bfree>
 8008fdc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008fe0:	2200      	movs	r2, #0
 8008fe2:	601a      	str	r2, [r3, #0]
 8008fe4:	1e2b      	subs	r3, r5, #0
 8008fe6:	bfb9      	ittee	lt
 8008fe8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8008fec:	9303      	strlt	r3, [sp, #12]
 8008fee:	2300      	movge	r3, #0
 8008ff0:	6033      	strge	r3, [r6, #0]
 8008ff2:	9f03      	ldr	r7, [sp, #12]
 8008ff4:	4b98      	ldr	r3, [pc, #608]	@ (8009258 <_dtoa_r+0x2d0>)
 8008ff6:	bfbc      	itt	lt
 8008ff8:	2201      	movlt	r2, #1
 8008ffa:	6032      	strlt	r2, [r6, #0]
 8008ffc:	43bb      	bics	r3, r7
 8008ffe:	d112      	bne.n	8009026 <_dtoa_r+0x9e>
 8009000:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8009002:	f242 730f 	movw	r3, #9999	@ 0x270f
 8009006:	6013      	str	r3, [r2, #0]
 8009008:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800900c:	4323      	orrs	r3, r4
 800900e:	f000 854d 	beq.w	8009aac <_dtoa_r+0xb24>
 8009012:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009014:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800926c <_dtoa_r+0x2e4>
 8009018:	2b00      	cmp	r3, #0
 800901a:	f000 854f 	beq.w	8009abc <_dtoa_r+0xb34>
 800901e:	f10a 0303 	add.w	r3, sl, #3
 8009022:	f000 bd49 	b.w	8009ab8 <_dtoa_r+0xb30>
 8009026:	ed9d 7b02 	vldr	d7, [sp, #8]
 800902a:	2200      	movs	r2, #0
 800902c:	ec51 0b17 	vmov	r0, r1, d7
 8009030:	2300      	movs	r3, #0
 8009032:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8009036:	f7f7 fd67 	bl	8000b08 <__aeabi_dcmpeq>
 800903a:	4680      	mov	r8, r0
 800903c:	b158      	cbz	r0, 8009056 <_dtoa_r+0xce>
 800903e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8009040:	2301      	movs	r3, #1
 8009042:	6013      	str	r3, [r2, #0]
 8009044:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009046:	b113      	cbz	r3, 800904e <_dtoa_r+0xc6>
 8009048:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800904a:	4b84      	ldr	r3, [pc, #528]	@ (800925c <_dtoa_r+0x2d4>)
 800904c:	6013      	str	r3, [r2, #0]
 800904e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8009270 <_dtoa_r+0x2e8>
 8009052:	f000 bd33 	b.w	8009abc <_dtoa_r+0xb34>
 8009056:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800905a:	aa16      	add	r2, sp, #88	@ 0x58
 800905c:	a917      	add	r1, sp, #92	@ 0x5c
 800905e:	4658      	mov	r0, fp
 8009060:	f001 f984 	bl	800a36c <__d2b>
 8009064:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8009068:	4681      	mov	r9, r0
 800906a:	2e00      	cmp	r6, #0
 800906c:	d077      	beq.n	800915e <_dtoa_r+0x1d6>
 800906e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009070:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8009074:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009078:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800907c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8009080:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8009084:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8009088:	4619      	mov	r1, r3
 800908a:	2200      	movs	r2, #0
 800908c:	4b74      	ldr	r3, [pc, #464]	@ (8009260 <_dtoa_r+0x2d8>)
 800908e:	f7f7 f91b 	bl	80002c8 <__aeabi_dsub>
 8009092:	a369      	add	r3, pc, #420	@ (adr r3, 8009238 <_dtoa_r+0x2b0>)
 8009094:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009098:	f7f7 face 	bl	8000638 <__aeabi_dmul>
 800909c:	a368      	add	r3, pc, #416	@ (adr r3, 8009240 <_dtoa_r+0x2b8>)
 800909e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090a2:	f7f7 f913 	bl	80002cc <__adddf3>
 80090a6:	4604      	mov	r4, r0
 80090a8:	4630      	mov	r0, r6
 80090aa:	460d      	mov	r5, r1
 80090ac:	f7f7 fa5a 	bl	8000564 <__aeabi_i2d>
 80090b0:	a365      	add	r3, pc, #404	@ (adr r3, 8009248 <_dtoa_r+0x2c0>)
 80090b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090b6:	f7f7 fabf 	bl	8000638 <__aeabi_dmul>
 80090ba:	4602      	mov	r2, r0
 80090bc:	460b      	mov	r3, r1
 80090be:	4620      	mov	r0, r4
 80090c0:	4629      	mov	r1, r5
 80090c2:	f7f7 f903 	bl	80002cc <__adddf3>
 80090c6:	4604      	mov	r4, r0
 80090c8:	460d      	mov	r5, r1
 80090ca:	f7f7 fd65 	bl	8000b98 <__aeabi_d2iz>
 80090ce:	2200      	movs	r2, #0
 80090d0:	4607      	mov	r7, r0
 80090d2:	2300      	movs	r3, #0
 80090d4:	4620      	mov	r0, r4
 80090d6:	4629      	mov	r1, r5
 80090d8:	f7f7 fd20 	bl	8000b1c <__aeabi_dcmplt>
 80090dc:	b140      	cbz	r0, 80090f0 <_dtoa_r+0x168>
 80090de:	4638      	mov	r0, r7
 80090e0:	f7f7 fa40 	bl	8000564 <__aeabi_i2d>
 80090e4:	4622      	mov	r2, r4
 80090e6:	462b      	mov	r3, r5
 80090e8:	f7f7 fd0e 	bl	8000b08 <__aeabi_dcmpeq>
 80090ec:	b900      	cbnz	r0, 80090f0 <_dtoa_r+0x168>
 80090ee:	3f01      	subs	r7, #1
 80090f0:	2f16      	cmp	r7, #22
 80090f2:	d851      	bhi.n	8009198 <_dtoa_r+0x210>
 80090f4:	4b5b      	ldr	r3, [pc, #364]	@ (8009264 <_dtoa_r+0x2dc>)
 80090f6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80090fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090fe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009102:	f7f7 fd0b 	bl	8000b1c <__aeabi_dcmplt>
 8009106:	2800      	cmp	r0, #0
 8009108:	d048      	beq.n	800919c <_dtoa_r+0x214>
 800910a:	3f01      	subs	r7, #1
 800910c:	2300      	movs	r3, #0
 800910e:	9312      	str	r3, [sp, #72]	@ 0x48
 8009110:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8009112:	1b9b      	subs	r3, r3, r6
 8009114:	1e5a      	subs	r2, r3, #1
 8009116:	bf44      	itt	mi
 8009118:	f1c3 0801 	rsbmi	r8, r3, #1
 800911c:	2300      	movmi	r3, #0
 800911e:	9208      	str	r2, [sp, #32]
 8009120:	bf54      	ite	pl
 8009122:	f04f 0800 	movpl.w	r8, #0
 8009126:	9308      	strmi	r3, [sp, #32]
 8009128:	2f00      	cmp	r7, #0
 800912a:	db39      	blt.n	80091a0 <_dtoa_r+0x218>
 800912c:	9b08      	ldr	r3, [sp, #32]
 800912e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8009130:	443b      	add	r3, r7
 8009132:	9308      	str	r3, [sp, #32]
 8009134:	2300      	movs	r3, #0
 8009136:	930a      	str	r3, [sp, #40]	@ 0x28
 8009138:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800913a:	2b09      	cmp	r3, #9
 800913c:	d864      	bhi.n	8009208 <_dtoa_r+0x280>
 800913e:	2b05      	cmp	r3, #5
 8009140:	bfc4      	itt	gt
 8009142:	3b04      	subgt	r3, #4
 8009144:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8009146:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009148:	f1a3 0302 	sub.w	r3, r3, #2
 800914c:	bfcc      	ite	gt
 800914e:	2400      	movgt	r4, #0
 8009150:	2401      	movle	r4, #1
 8009152:	2b03      	cmp	r3, #3
 8009154:	d863      	bhi.n	800921e <_dtoa_r+0x296>
 8009156:	e8df f003 	tbb	[pc, r3]
 800915a:	372a      	.short	0x372a
 800915c:	5535      	.short	0x5535
 800915e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8009162:	441e      	add	r6, r3
 8009164:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8009168:	2b20      	cmp	r3, #32
 800916a:	bfc1      	itttt	gt
 800916c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8009170:	409f      	lslgt	r7, r3
 8009172:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8009176:	fa24 f303 	lsrgt.w	r3, r4, r3
 800917a:	bfd6      	itet	le
 800917c:	f1c3 0320 	rsble	r3, r3, #32
 8009180:	ea47 0003 	orrgt.w	r0, r7, r3
 8009184:	fa04 f003 	lslle.w	r0, r4, r3
 8009188:	f7f7 f9dc 	bl	8000544 <__aeabi_ui2d>
 800918c:	2201      	movs	r2, #1
 800918e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8009192:	3e01      	subs	r6, #1
 8009194:	9214      	str	r2, [sp, #80]	@ 0x50
 8009196:	e777      	b.n	8009088 <_dtoa_r+0x100>
 8009198:	2301      	movs	r3, #1
 800919a:	e7b8      	b.n	800910e <_dtoa_r+0x186>
 800919c:	9012      	str	r0, [sp, #72]	@ 0x48
 800919e:	e7b7      	b.n	8009110 <_dtoa_r+0x188>
 80091a0:	427b      	negs	r3, r7
 80091a2:	930a      	str	r3, [sp, #40]	@ 0x28
 80091a4:	2300      	movs	r3, #0
 80091a6:	eba8 0807 	sub.w	r8, r8, r7
 80091aa:	930f      	str	r3, [sp, #60]	@ 0x3c
 80091ac:	e7c4      	b.n	8009138 <_dtoa_r+0x1b0>
 80091ae:	2300      	movs	r3, #0
 80091b0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80091b2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	dc35      	bgt.n	8009224 <_dtoa_r+0x29c>
 80091b8:	2301      	movs	r3, #1
 80091ba:	9300      	str	r3, [sp, #0]
 80091bc:	9307      	str	r3, [sp, #28]
 80091be:	461a      	mov	r2, r3
 80091c0:	920e      	str	r2, [sp, #56]	@ 0x38
 80091c2:	e00b      	b.n	80091dc <_dtoa_r+0x254>
 80091c4:	2301      	movs	r3, #1
 80091c6:	e7f3      	b.n	80091b0 <_dtoa_r+0x228>
 80091c8:	2300      	movs	r3, #0
 80091ca:	930b      	str	r3, [sp, #44]	@ 0x2c
 80091cc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80091ce:	18fb      	adds	r3, r7, r3
 80091d0:	9300      	str	r3, [sp, #0]
 80091d2:	3301      	adds	r3, #1
 80091d4:	2b01      	cmp	r3, #1
 80091d6:	9307      	str	r3, [sp, #28]
 80091d8:	bfb8      	it	lt
 80091da:	2301      	movlt	r3, #1
 80091dc:	f8db 001c 	ldr.w	r0, [fp, #28]
 80091e0:	2100      	movs	r1, #0
 80091e2:	2204      	movs	r2, #4
 80091e4:	f102 0514 	add.w	r5, r2, #20
 80091e8:	429d      	cmp	r5, r3
 80091ea:	d91f      	bls.n	800922c <_dtoa_r+0x2a4>
 80091ec:	6041      	str	r1, [r0, #4]
 80091ee:	4658      	mov	r0, fp
 80091f0:	f000 fcd8 	bl	8009ba4 <_Balloc>
 80091f4:	4682      	mov	sl, r0
 80091f6:	2800      	cmp	r0, #0
 80091f8:	d13c      	bne.n	8009274 <_dtoa_r+0x2ec>
 80091fa:	4b1b      	ldr	r3, [pc, #108]	@ (8009268 <_dtoa_r+0x2e0>)
 80091fc:	4602      	mov	r2, r0
 80091fe:	f240 11af 	movw	r1, #431	@ 0x1af
 8009202:	e6d8      	b.n	8008fb6 <_dtoa_r+0x2e>
 8009204:	2301      	movs	r3, #1
 8009206:	e7e0      	b.n	80091ca <_dtoa_r+0x242>
 8009208:	2401      	movs	r4, #1
 800920a:	2300      	movs	r3, #0
 800920c:	9309      	str	r3, [sp, #36]	@ 0x24
 800920e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8009210:	f04f 33ff 	mov.w	r3, #4294967295
 8009214:	9300      	str	r3, [sp, #0]
 8009216:	9307      	str	r3, [sp, #28]
 8009218:	2200      	movs	r2, #0
 800921a:	2312      	movs	r3, #18
 800921c:	e7d0      	b.n	80091c0 <_dtoa_r+0x238>
 800921e:	2301      	movs	r3, #1
 8009220:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009222:	e7f5      	b.n	8009210 <_dtoa_r+0x288>
 8009224:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009226:	9300      	str	r3, [sp, #0]
 8009228:	9307      	str	r3, [sp, #28]
 800922a:	e7d7      	b.n	80091dc <_dtoa_r+0x254>
 800922c:	3101      	adds	r1, #1
 800922e:	0052      	lsls	r2, r2, #1
 8009230:	e7d8      	b.n	80091e4 <_dtoa_r+0x25c>
 8009232:	bf00      	nop
 8009234:	f3af 8000 	nop.w
 8009238:	636f4361 	.word	0x636f4361
 800923c:	3fd287a7 	.word	0x3fd287a7
 8009240:	8b60c8b3 	.word	0x8b60c8b3
 8009244:	3fc68a28 	.word	0x3fc68a28
 8009248:	509f79fb 	.word	0x509f79fb
 800924c:	3fd34413 	.word	0x3fd34413
 8009250:	0800fc32 	.word	0x0800fc32
 8009254:	0800fc49 	.word	0x0800fc49
 8009258:	7ff00000 	.word	0x7ff00000
 800925c:	0800fbfd 	.word	0x0800fbfd
 8009260:	3ff80000 	.word	0x3ff80000
 8009264:	0800fd40 	.word	0x0800fd40
 8009268:	0800fca1 	.word	0x0800fca1
 800926c:	0800fc2e 	.word	0x0800fc2e
 8009270:	0800fbfc 	.word	0x0800fbfc
 8009274:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009278:	6018      	str	r0, [r3, #0]
 800927a:	9b07      	ldr	r3, [sp, #28]
 800927c:	2b0e      	cmp	r3, #14
 800927e:	f200 80a4 	bhi.w	80093ca <_dtoa_r+0x442>
 8009282:	2c00      	cmp	r4, #0
 8009284:	f000 80a1 	beq.w	80093ca <_dtoa_r+0x442>
 8009288:	2f00      	cmp	r7, #0
 800928a:	dd33      	ble.n	80092f4 <_dtoa_r+0x36c>
 800928c:	4bad      	ldr	r3, [pc, #692]	@ (8009544 <_dtoa_r+0x5bc>)
 800928e:	f007 020f 	and.w	r2, r7, #15
 8009292:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009296:	ed93 7b00 	vldr	d7, [r3]
 800929a:	05f8      	lsls	r0, r7, #23
 800929c:	ed8d 7b04 	vstr	d7, [sp, #16]
 80092a0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80092a4:	d516      	bpl.n	80092d4 <_dtoa_r+0x34c>
 80092a6:	4ba8      	ldr	r3, [pc, #672]	@ (8009548 <_dtoa_r+0x5c0>)
 80092a8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80092ac:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80092b0:	f7f7 faec 	bl	800088c <__aeabi_ddiv>
 80092b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80092b8:	f004 040f 	and.w	r4, r4, #15
 80092bc:	2603      	movs	r6, #3
 80092be:	4da2      	ldr	r5, [pc, #648]	@ (8009548 <_dtoa_r+0x5c0>)
 80092c0:	b954      	cbnz	r4, 80092d8 <_dtoa_r+0x350>
 80092c2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80092c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80092ca:	f7f7 fadf 	bl	800088c <__aeabi_ddiv>
 80092ce:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80092d2:	e028      	b.n	8009326 <_dtoa_r+0x39e>
 80092d4:	2602      	movs	r6, #2
 80092d6:	e7f2      	b.n	80092be <_dtoa_r+0x336>
 80092d8:	07e1      	lsls	r1, r4, #31
 80092da:	d508      	bpl.n	80092ee <_dtoa_r+0x366>
 80092dc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80092e0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80092e4:	f7f7 f9a8 	bl	8000638 <__aeabi_dmul>
 80092e8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80092ec:	3601      	adds	r6, #1
 80092ee:	1064      	asrs	r4, r4, #1
 80092f0:	3508      	adds	r5, #8
 80092f2:	e7e5      	b.n	80092c0 <_dtoa_r+0x338>
 80092f4:	f000 80d2 	beq.w	800949c <_dtoa_r+0x514>
 80092f8:	427c      	negs	r4, r7
 80092fa:	4b92      	ldr	r3, [pc, #584]	@ (8009544 <_dtoa_r+0x5bc>)
 80092fc:	4d92      	ldr	r5, [pc, #584]	@ (8009548 <_dtoa_r+0x5c0>)
 80092fe:	f004 020f 	and.w	r2, r4, #15
 8009302:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800930a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800930e:	f7f7 f993 	bl	8000638 <__aeabi_dmul>
 8009312:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009316:	1124      	asrs	r4, r4, #4
 8009318:	2300      	movs	r3, #0
 800931a:	2602      	movs	r6, #2
 800931c:	2c00      	cmp	r4, #0
 800931e:	f040 80b2 	bne.w	8009486 <_dtoa_r+0x4fe>
 8009322:	2b00      	cmp	r3, #0
 8009324:	d1d3      	bne.n	80092ce <_dtoa_r+0x346>
 8009326:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009328:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800932c:	2b00      	cmp	r3, #0
 800932e:	f000 80b7 	beq.w	80094a0 <_dtoa_r+0x518>
 8009332:	4b86      	ldr	r3, [pc, #536]	@ (800954c <_dtoa_r+0x5c4>)
 8009334:	2200      	movs	r2, #0
 8009336:	4620      	mov	r0, r4
 8009338:	4629      	mov	r1, r5
 800933a:	f7f7 fbef 	bl	8000b1c <__aeabi_dcmplt>
 800933e:	2800      	cmp	r0, #0
 8009340:	f000 80ae 	beq.w	80094a0 <_dtoa_r+0x518>
 8009344:	9b07      	ldr	r3, [sp, #28]
 8009346:	2b00      	cmp	r3, #0
 8009348:	f000 80aa 	beq.w	80094a0 <_dtoa_r+0x518>
 800934c:	9b00      	ldr	r3, [sp, #0]
 800934e:	2b00      	cmp	r3, #0
 8009350:	dd37      	ble.n	80093c2 <_dtoa_r+0x43a>
 8009352:	1e7b      	subs	r3, r7, #1
 8009354:	9304      	str	r3, [sp, #16]
 8009356:	4620      	mov	r0, r4
 8009358:	4b7d      	ldr	r3, [pc, #500]	@ (8009550 <_dtoa_r+0x5c8>)
 800935a:	2200      	movs	r2, #0
 800935c:	4629      	mov	r1, r5
 800935e:	f7f7 f96b 	bl	8000638 <__aeabi_dmul>
 8009362:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009366:	9c00      	ldr	r4, [sp, #0]
 8009368:	3601      	adds	r6, #1
 800936a:	4630      	mov	r0, r6
 800936c:	f7f7 f8fa 	bl	8000564 <__aeabi_i2d>
 8009370:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009374:	f7f7 f960 	bl	8000638 <__aeabi_dmul>
 8009378:	4b76      	ldr	r3, [pc, #472]	@ (8009554 <_dtoa_r+0x5cc>)
 800937a:	2200      	movs	r2, #0
 800937c:	f7f6 ffa6 	bl	80002cc <__adddf3>
 8009380:	4605      	mov	r5, r0
 8009382:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8009386:	2c00      	cmp	r4, #0
 8009388:	f040 808d 	bne.w	80094a6 <_dtoa_r+0x51e>
 800938c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009390:	4b71      	ldr	r3, [pc, #452]	@ (8009558 <_dtoa_r+0x5d0>)
 8009392:	2200      	movs	r2, #0
 8009394:	f7f6 ff98 	bl	80002c8 <__aeabi_dsub>
 8009398:	4602      	mov	r2, r0
 800939a:	460b      	mov	r3, r1
 800939c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80093a0:	462a      	mov	r2, r5
 80093a2:	4633      	mov	r3, r6
 80093a4:	f7f7 fbd8 	bl	8000b58 <__aeabi_dcmpgt>
 80093a8:	2800      	cmp	r0, #0
 80093aa:	f040 828b 	bne.w	80098c4 <_dtoa_r+0x93c>
 80093ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80093b2:	462a      	mov	r2, r5
 80093b4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80093b8:	f7f7 fbb0 	bl	8000b1c <__aeabi_dcmplt>
 80093bc:	2800      	cmp	r0, #0
 80093be:	f040 8128 	bne.w	8009612 <_dtoa_r+0x68a>
 80093c2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80093c6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80093ca:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	f2c0 815a 	blt.w	8009686 <_dtoa_r+0x6fe>
 80093d2:	2f0e      	cmp	r7, #14
 80093d4:	f300 8157 	bgt.w	8009686 <_dtoa_r+0x6fe>
 80093d8:	4b5a      	ldr	r3, [pc, #360]	@ (8009544 <_dtoa_r+0x5bc>)
 80093da:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80093de:	ed93 7b00 	vldr	d7, [r3]
 80093e2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	ed8d 7b00 	vstr	d7, [sp]
 80093ea:	da03      	bge.n	80093f4 <_dtoa_r+0x46c>
 80093ec:	9b07      	ldr	r3, [sp, #28]
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	f340 8101 	ble.w	80095f6 <_dtoa_r+0x66e>
 80093f4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80093f8:	4656      	mov	r6, sl
 80093fa:	e9dd 2300 	ldrd	r2, r3, [sp]
 80093fe:	4620      	mov	r0, r4
 8009400:	4629      	mov	r1, r5
 8009402:	f7f7 fa43 	bl	800088c <__aeabi_ddiv>
 8009406:	f7f7 fbc7 	bl	8000b98 <__aeabi_d2iz>
 800940a:	4680      	mov	r8, r0
 800940c:	f7f7 f8aa 	bl	8000564 <__aeabi_i2d>
 8009410:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009414:	f7f7 f910 	bl	8000638 <__aeabi_dmul>
 8009418:	4602      	mov	r2, r0
 800941a:	460b      	mov	r3, r1
 800941c:	4620      	mov	r0, r4
 800941e:	4629      	mov	r1, r5
 8009420:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8009424:	f7f6 ff50 	bl	80002c8 <__aeabi_dsub>
 8009428:	f806 4b01 	strb.w	r4, [r6], #1
 800942c:	9d07      	ldr	r5, [sp, #28]
 800942e:	eba6 040a 	sub.w	r4, r6, sl
 8009432:	42a5      	cmp	r5, r4
 8009434:	4602      	mov	r2, r0
 8009436:	460b      	mov	r3, r1
 8009438:	f040 8117 	bne.w	800966a <_dtoa_r+0x6e2>
 800943c:	f7f6 ff46 	bl	80002cc <__adddf3>
 8009440:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009444:	4604      	mov	r4, r0
 8009446:	460d      	mov	r5, r1
 8009448:	f7f7 fb86 	bl	8000b58 <__aeabi_dcmpgt>
 800944c:	2800      	cmp	r0, #0
 800944e:	f040 80f9 	bne.w	8009644 <_dtoa_r+0x6bc>
 8009452:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009456:	4620      	mov	r0, r4
 8009458:	4629      	mov	r1, r5
 800945a:	f7f7 fb55 	bl	8000b08 <__aeabi_dcmpeq>
 800945e:	b118      	cbz	r0, 8009468 <_dtoa_r+0x4e0>
 8009460:	f018 0f01 	tst.w	r8, #1
 8009464:	f040 80ee 	bne.w	8009644 <_dtoa_r+0x6bc>
 8009468:	4649      	mov	r1, r9
 800946a:	4658      	mov	r0, fp
 800946c:	f000 fbda 	bl	8009c24 <_Bfree>
 8009470:	2300      	movs	r3, #0
 8009472:	7033      	strb	r3, [r6, #0]
 8009474:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009476:	3701      	adds	r7, #1
 8009478:	601f      	str	r7, [r3, #0]
 800947a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800947c:	2b00      	cmp	r3, #0
 800947e:	f000 831d 	beq.w	8009abc <_dtoa_r+0xb34>
 8009482:	601e      	str	r6, [r3, #0]
 8009484:	e31a      	b.n	8009abc <_dtoa_r+0xb34>
 8009486:	07e2      	lsls	r2, r4, #31
 8009488:	d505      	bpl.n	8009496 <_dtoa_r+0x50e>
 800948a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800948e:	f7f7 f8d3 	bl	8000638 <__aeabi_dmul>
 8009492:	3601      	adds	r6, #1
 8009494:	2301      	movs	r3, #1
 8009496:	1064      	asrs	r4, r4, #1
 8009498:	3508      	adds	r5, #8
 800949a:	e73f      	b.n	800931c <_dtoa_r+0x394>
 800949c:	2602      	movs	r6, #2
 800949e:	e742      	b.n	8009326 <_dtoa_r+0x39e>
 80094a0:	9c07      	ldr	r4, [sp, #28]
 80094a2:	9704      	str	r7, [sp, #16]
 80094a4:	e761      	b.n	800936a <_dtoa_r+0x3e2>
 80094a6:	4b27      	ldr	r3, [pc, #156]	@ (8009544 <_dtoa_r+0x5bc>)
 80094a8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80094aa:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80094ae:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80094b2:	4454      	add	r4, sl
 80094b4:	2900      	cmp	r1, #0
 80094b6:	d053      	beq.n	8009560 <_dtoa_r+0x5d8>
 80094b8:	4928      	ldr	r1, [pc, #160]	@ (800955c <_dtoa_r+0x5d4>)
 80094ba:	2000      	movs	r0, #0
 80094bc:	f7f7 f9e6 	bl	800088c <__aeabi_ddiv>
 80094c0:	4633      	mov	r3, r6
 80094c2:	462a      	mov	r2, r5
 80094c4:	f7f6 ff00 	bl	80002c8 <__aeabi_dsub>
 80094c8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80094cc:	4656      	mov	r6, sl
 80094ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80094d2:	f7f7 fb61 	bl	8000b98 <__aeabi_d2iz>
 80094d6:	4605      	mov	r5, r0
 80094d8:	f7f7 f844 	bl	8000564 <__aeabi_i2d>
 80094dc:	4602      	mov	r2, r0
 80094de:	460b      	mov	r3, r1
 80094e0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80094e4:	f7f6 fef0 	bl	80002c8 <__aeabi_dsub>
 80094e8:	3530      	adds	r5, #48	@ 0x30
 80094ea:	4602      	mov	r2, r0
 80094ec:	460b      	mov	r3, r1
 80094ee:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80094f2:	f806 5b01 	strb.w	r5, [r6], #1
 80094f6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80094fa:	f7f7 fb0f 	bl	8000b1c <__aeabi_dcmplt>
 80094fe:	2800      	cmp	r0, #0
 8009500:	d171      	bne.n	80095e6 <_dtoa_r+0x65e>
 8009502:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009506:	4911      	ldr	r1, [pc, #68]	@ (800954c <_dtoa_r+0x5c4>)
 8009508:	2000      	movs	r0, #0
 800950a:	f7f6 fedd 	bl	80002c8 <__aeabi_dsub>
 800950e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009512:	f7f7 fb03 	bl	8000b1c <__aeabi_dcmplt>
 8009516:	2800      	cmp	r0, #0
 8009518:	f040 8095 	bne.w	8009646 <_dtoa_r+0x6be>
 800951c:	42a6      	cmp	r6, r4
 800951e:	f43f af50 	beq.w	80093c2 <_dtoa_r+0x43a>
 8009522:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009526:	4b0a      	ldr	r3, [pc, #40]	@ (8009550 <_dtoa_r+0x5c8>)
 8009528:	2200      	movs	r2, #0
 800952a:	f7f7 f885 	bl	8000638 <__aeabi_dmul>
 800952e:	4b08      	ldr	r3, [pc, #32]	@ (8009550 <_dtoa_r+0x5c8>)
 8009530:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009534:	2200      	movs	r2, #0
 8009536:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800953a:	f7f7 f87d 	bl	8000638 <__aeabi_dmul>
 800953e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009542:	e7c4      	b.n	80094ce <_dtoa_r+0x546>
 8009544:	0800fd40 	.word	0x0800fd40
 8009548:	0800fd18 	.word	0x0800fd18
 800954c:	3ff00000 	.word	0x3ff00000
 8009550:	40240000 	.word	0x40240000
 8009554:	401c0000 	.word	0x401c0000
 8009558:	40140000 	.word	0x40140000
 800955c:	3fe00000 	.word	0x3fe00000
 8009560:	4631      	mov	r1, r6
 8009562:	4628      	mov	r0, r5
 8009564:	f7f7 f868 	bl	8000638 <__aeabi_dmul>
 8009568:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800956c:	9415      	str	r4, [sp, #84]	@ 0x54
 800956e:	4656      	mov	r6, sl
 8009570:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009574:	f7f7 fb10 	bl	8000b98 <__aeabi_d2iz>
 8009578:	4605      	mov	r5, r0
 800957a:	f7f6 fff3 	bl	8000564 <__aeabi_i2d>
 800957e:	4602      	mov	r2, r0
 8009580:	460b      	mov	r3, r1
 8009582:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009586:	f7f6 fe9f 	bl	80002c8 <__aeabi_dsub>
 800958a:	3530      	adds	r5, #48	@ 0x30
 800958c:	f806 5b01 	strb.w	r5, [r6], #1
 8009590:	4602      	mov	r2, r0
 8009592:	460b      	mov	r3, r1
 8009594:	42a6      	cmp	r6, r4
 8009596:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800959a:	f04f 0200 	mov.w	r2, #0
 800959e:	d124      	bne.n	80095ea <_dtoa_r+0x662>
 80095a0:	4bac      	ldr	r3, [pc, #688]	@ (8009854 <_dtoa_r+0x8cc>)
 80095a2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80095a6:	f7f6 fe91 	bl	80002cc <__adddf3>
 80095aa:	4602      	mov	r2, r0
 80095ac:	460b      	mov	r3, r1
 80095ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80095b2:	f7f7 fad1 	bl	8000b58 <__aeabi_dcmpgt>
 80095b6:	2800      	cmp	r0, #0
 80095b8:	d145      	bne.n	8009646 <_dtoa_r+0x6be>
 80095ba:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80095be:	49a5      	ldr	r1, [pc, #660]	@ (8009854 <_dtoa_r+0x8cc>)
 80095c0:	2000      	movs	r0, #0
 80095c2:	f7f6 fe81 	bl	80002c8 <__aeabi_dsub>
 80095c6:	4602      	mov	r2, r0
 80095c8:	460b      	mov	r3, r1
 80095ca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80095ce:	f7f7 faa5 	bl	8000b1c <__aeabi_dcmplt>
 80095d2:	2800      	cmp	r0, #0
 80095d4:	f43f aef5 	beq.w	80093c2 <_dtoa_r+0x43a>
 80095d8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80095da:	1e73      	subs	r3, r6, #1
 80095dc:	9315      	str	r3, [sp, #84]	@ 0x54
 80095de:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80095e2:	2b30      	cmp	r3, #48	@ 0x30
 80095e4:	d0f8      	beq.n	80095d8 <_dtoa_r+0x650>
 80095e6:	9f04      	ldr	r7, [sp, #16]
 80095e8:	e73e      	b.n	8009468 <_dtoa_r+0x4e0>
 80095ea:	4b9b      	ldr	r3, [pc, #620]	@ (8009858 <_dtoa_r+0x8d0>)
 80095ec:	f7f7 f824 	bl	8000638 <__aeabi_dmul>
 80095f0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80095f4:	e7bc      	b.n	8009570 <_dtoa_r+0x5e8>
 80095f6:	d10c      	bne.n	8009612 <_dtoa_r+0x68a>
 80095f8:	4b98      	ldr	r3, [pc, #608]	@ (800985c <_dtoa_r+0x8d4>)
 80095fa:	2200      	movs	r2, #0
 80095fc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009600:	f7f7 f81a 	bl	8000638 <__aeabi_dmul>
 8009604:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009608:	f7f7 fa9c 	bl	8000b44 <__aeabi_dcmpge>
 800960c:	2800      	cmp	r0, #0
 800960e:	f000 8157 	beq.w	80098c0 <_dtoa_r+0x938>
 8009612:	2400      	movs	r4, #0
 8009614:	4625      	mov	r5, r4
 8009616:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009618:	43db      	mvns	r3, r3
 800961a:	9304      	str	r3, [sp, #16]
 800961c:	4656      	mov	r6, sl
 800961e:	2700      	movs	r7, #0
 8009620:	4621      	mov	r1, r4
 8009622:	4658      	mov	r0, fp
 8009624:	f000 fafe 	bl	8009c24 <_Bfree>
 8009628:	2d00      	cmp	r5, #0
 800962a:	d0dc      	beq.n	80095e6 <_dtoa_r+0x65e>
 800962c:	b12f      	cbz	r7, 800963a <_dtoa_r+0x6b2>
 800962e:	42af      	cmp	r7, r5
 8009630:	d003      	beq.n	800963a <_dtoa_r+0x6b2>
 8009632:	4639      	mov	r1, r7
 8009634:	4658      	mov	r0, fp
 8009636:	f000 faf5 	bl	8009c24 <_Bfree>
 800963a:	4629      	mov	r1, r5
 800963c:	4658      	mov	r0, fp
 800963e:	f000 faf1 	bl	8009c24 <_Bfree>
 8009642:	e7d0      	b.n	80095e6 <_dtoa_r+0x65e>
 8009644:	9704      	str	r7, [sp, #16]
 8009646:	4633      	mov	r3, r6
 8009648:	461e      	mov	r6, r3
 800964a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800964e:	2a39      	cmp	r2, #57	@ 0x39
 8009650:	d107      	bne.n	8009662 <_dtoa_r+0x6da>
 8009652:	459a      	cmp	sl, r3
 8009654:	d1f8      	bne.n	8009648 <_dtoa_r+0x6c0>
 8009656:	9a04      	ldr	r2, [sp, #16]
 8009658:	3201      	adds	r2, #1
 800965a:	9204      	str	r2, [sp, #16]
 800965c:	2230      	movs	r2, #48	@ 0x30
 800965e:	f88a 2000 	strb.w	r2, [sl]
 8009662:	781a      	ldrb	r2, [r3, #0]
 8009664:	3201      	adds	r2, #1
 8009666:	701a      	strb	r2, [r3, #0]
 8009668:	e7bd      	b.n	80095e6 <_dtoa_r+0x65e>
 800966a:	4b7b      	ldr	r3, [pc, #492]	@ (8009858 <_dtoa_r+0x8d0>)
 800966c:	2200      	movs	r2, #0
 800966e:	f7f6 ffe3 	bl	8000638 <__aeabi_dmul>
 8009672:	2200      	movs	r2, #0
 8009674:	2300      	movs	r3, #0
 8009676:	4604      	mov	r4, r0
 8009678:	460d      	mov	r5, r1
 800967a:	f7f7 fa45 	bl	8000b08 <__aeabi_dcmpeq>
 800967e:	2800      	cmp	r0, #0
 8009680:	f43f aebb 	beq.w	80093fa <_dtoa_r+0x472>
 8009684:	e6f0      	b.n	8009468 <_dtoa_r+0x4e0>
 8009686:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8009688:	2a00      	cmp	r2, #0
 800968a:	f000 80db 	beq.w	8009844 <_dtoa_r+0x8bc>
 800968e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009690:	2a01      	cmp	r2, #1
 8009692:	f300 80bf 	bgt.w	8009814 <_dtoa_r+0x88c>
 8009696:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8009698:	2a00      	cmp	r2, #0
 800969a:	f000 80b7 	beq.w	800980c <_dtoa_r+0x884>
 800969e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80096a2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80096a4:	4646      	mov	r6, r8
 80096a6:	9a08      	ldr	r2, [sp, #32]
 80096a8:	2101      	movs	r1, #1
 80096aa:	441a      	add	r2, r3
 80096ac:	4658      	mov	r0, fp
 80096ae:	4498      	add	r8, r3
 80096b0:	9208      	str	r2, [sp, #32]
 80096b2:	f000 fbb5 	bl	8009e20 <__i2b>
 80096b6:	4605      	mov	r5, r0
 80096b8:	b15e      	cbz	r6, 80096d2 <_dtoa_r+0x74a>
 80096ba:	9b08      	ldr	r3, [sp, #32]
 80096bc:	2b00      	cmp	r3, #0
 80096be:	dd08      	ble.n	80096d2 <_dtoa_r+0x74a>
 80096c0:	42b3      	cmp	r3, r6
 80096c2:	9a08      	ldr	r2, [sp, #32]
 80096c4:	bfa8      	it	ge
 80096c6:	4633      	movge	r3, r6
 80096c8:	eba8 0803 	sub.w	r8, r8, r3
 80096cc:	1af6      	subs	r6, r6, r3
 80096ce:	1ad3      	subs	r3, r2, r3
 80096d0:	9308      	str	r3, [sp, #32]
 80096d2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80096d4:	b1f3      	cbz	r3, 8009714 <_dtoa_r+0x78c>
 80096d6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80096d8:	2b00      	cmp	r3, #0
 80096da:	f000 80b7 	beq.w	800984c <_dtoa_r+0x8c4>
 80096de:	b18c      	cbz	r4, 8009704 <_dtoa_r+0x77c>
 80096e0:	4629      	mov	r1, r5
 80096e2:	4622      	mov	r2, r4
 80096e4:	4658      	mov	r0, fp
 80096e6:	f000 fc5b 	bl	8009fa0 <__pow5mult>
 80096ea:	464a      	mov	r2, r9
 80096ec:	4601      	mov	r1, r0
 80096ee:	4605      	mov	r5, r0
 80096f0:	4658      	mov	r0, fp
 80096f2:	f000 fbab 	bl	8009e4c <__multiply>
 80096f6:	4649      	mov	r1, r9
 80096f8:	9004      	str	r0, [sp, #16]
 80096fa:	4658      	mov	r0, fp
 80096fc:	f000 fa92 	bl	8009c24 <_Bfree>
 8009700:	9b04      	ldr	r3, [sp, #16]
 8009702:	4699      	mov	r9, r3
 8009704:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009706:	1b1a      	subs	r2, r3, r4
 8009708:	d004      	beq.n	8009714 <_dtoa_r+0x78c>
 800970a:	4649      	mov	r1, r9
 800970c:	4658      	mov	r0, fp
 800970e:	f000 fc47 	bl	8009fa0 <__pow5mult>
 8009712:	4681      	mov	r9, r0
 8009714:	2101      	movs	r1, #1
 8009716:	4658      	mov	r0, fp
 8009718:	f000 fb82 	bl	8009e20 <__i2b>
 800971c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800971e:	4604      	mov	r4, r0
 8009720:	2b00      	cmp	r3, #0
 8009722:	f000 81cf 	beq.w	8009ac4 <_dtoa_r+0xb3c>
 8009726:	461a      	mov	r2, r3
 8009728:	4601      	mov	r1, r0
 800972a:	4658      	mov	r0, fp
 800972c:	f000 fc38 	bl	8009fa0 <__pow5mult>
 8009730:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009732:	2b01      	cmp	r3, #1
 8009734:	4604      	mov	r4, r0
 8009736:	f300 8095 	bgt.w	8009864 <_dtoa_r+0x8dc>
 800973a:	9b02      	ldr	r3, [sp, #8]
 800973c:	2b00      	cmp	r3, #0
 800973e:	f040 8087 	bne.w	8009850 <_dtoa_r+0x8c8>
 8009742:	9b03      	ldr	r3, [sp, #12]
 8009744:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009748:	2b00      	cmp	r3, #0
 800974a:	f040 8089 	bne.w	8009860 <_dtoa_r+0x8d8>
 800974e:	9b03      	ldr	r3, [sp, #12]
 8009750:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009754:	0d1b      	lsrs	r3, r3, #20
 8009756:	051b      	lsls	r3, r3, #20
 8009758:	b12b      	cbz	r3, 8009766 <_dtoa_r+0x7de>
 800975a:	9b08      	ldr	r3, [sp, #32]
 800975c:	3301      	adds	r3, #1
 800975e:	9308      	str	r3, [sp, #32]
 8009760:	f108 0801 	add.w	r8, r8, #1
 8009764:	2301      	movs	r3, #1
 8009766:	930a      	str	r3, [sp, #40]	@ 0x28
 8009768:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800976a:	2b00      	cmp	r3, #0
 800976c:	f000 81b0 	beq.w	8009ad0 <_dtoa_r+0xb48>
 8009770:	6923      	ldr	r3, [r4, #16]
 8009772:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009776:	6918      	ldr	r0, [r3, #16]
 8009778:	f000 fb06 	bl	8009d88 <__hi0bits>
 800977c:	f1c0 0020 	rsb	r0, r0, #32
 8009780:	9b08      	ldr	r3, [sp, #32]
 8009782:	4418      	add	r0, r3
 8009784:	f010 001f 	ands.w	r0, r0, #31
 8009788:	d077      	beq.n	800987a <_dtoa_r+0x8f2>
 800978a:	f1c0 0320 	rsb	r3, r0, #32
 800978e:	2b04      	cmp	r3, #4
 8009790:	dd6b      	ble.n	800986a <_dtoa_r+0x8e2>
 8009792:	9b08      	ldr	r3, [sp, #32]
 8009794:	f1c0 001c 	rsb	r0, r0, #28
 8009798:	4403      	add	r3, r0
 800979a:	4480      	add	r8, r0
 800979c:	4406      	add	r6, r0
 800979e:	9308      	str	r3, [sp, #32]
 80097a0:	f1b8 0f00 	cmp.w	r8, #0
 80097a4:	dd05      	ble.n	80097b2 <_dtoa_r+0x82a>
 80097a6:	4649      	mov	r1, r9
 80097a8:	4642      	mov	r2, r8
 80097aa:	4658      	mov	r0, fp
 80097ac:	f000 fc52 	bl	800a054 <__lshift>
 80097b0:	4681      	mov	r9, r0
 80097b2:	9b08      	ldr	r3, [sp, #32]
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	dd05      	ble.n	80097c4 <_dtoa_r+0x83c>
 80097b8:	4621      	mov	r1, r4
 80097ba:	461a      	mov	r2, r3
 80097bc:	4658      	mov	r0, fp
 80097be:	f000 fc49 	bl	800a054 <__lshift>
 80097c2:	4604      	mov	r4, r0
 80097c4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d059      	beq.n	800987e <_dtoa_r+0x8f6>
 80097ca:	4621      	mov	r1, r4
 80097cc:	4648      	mov	r0, r9
 80097ce:	f000 fcad 	bl	800a12c <__mcmp>
 80097d2:	2800      	cmp	r0, #0
 80097d4:	da53      	bge.n	800987e <_dtoa_r+0x8f6>
 80097d6:	1e7b      	subs	r3, r7, #1
 80097d8:	9304      	str	r3, [sp, #16]
 80097da:	4649      	mov	r1, r9
 80097dc:	2300      	movs	r3, #0
 80097de:	220a      	movs	r2, #10
 80097e0:	4658      	mov	r0, fp
 80097e2:	f000 fa41 	bl	8009c68 <__multadd>
 80097e6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80097e8:	4681      	mov	r9, r0
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	f000 8172 	beq.w	8009ad4 <_dtoa_r+0xb4c>
 80097f0:	2300      	movs	r3, #0
 80097f2:	4629      	mov	r1, r5
 80097f4:	220a      	movs	r2, #10
 80097f6:	4658      	mov	r0, fp
 80097f8:	f000 fa36 	bl	8009c68 <__multadd>
 80097fc:	9b00      	ldr	r3, [sp, #0]
 80097fe:	2b00      	cmp	r3, #0
 8009800:	4605      	mov	r5, r0
 8009802:	dc67      	bgt.n	80098d4 <_dtoa_r+0x94c>
 8009804:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009806:	2b02      	cmp	r3, #2
 8009808:	dc41      	bgt.n	800988e <_dtoa_r+0x906>
 800980a:	e063      	b.n	80098d4 <_dtoa_r+0x94c>
 800980c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800980e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8009812:	e746      	b.n	80096a2 <_dtoa_r+0x71a>
 8009814:	9b07      	ldr	r3, [sp, #28]
 8009816:	1e5c      	subs	r4, r3, #1
 8009818:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800981a:	42a3      	cmp	r3, r4
 800981c:	bfbf      	itttt	lt
 800981e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8009820:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8009822:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8009824:	1ae3      	sublt	r3, r4, r3
 8009826:	bfb4      	ite	lt
 8009828:	18d2      	addlt	r2, r2, r3
 800982a:	1b1c      	subge	r4, r3, r4
 800982c:	9b07      	ldr	r3, [sp, #28]
 800982e:	bfbc      	itt	lt
 8009830:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8009832:	2400      	movlt	r4, #0
 8009834:	2b00      	cmp	r3, #0
 8009836:	bfb5      	itete	lt
 8009838:	eba8 0603 	sublt.w	r6, r8, r3
 800983c:	9b07      	ldrge	r3, [sp, #28]
 800983e:	2300      	movlt	r3, #0
 8009840:	4646      	movge	r6, r8
 8009842:	e730      	b.n	80096a6 <_dtoa_r+0x71e>
 8009844:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009846:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8009848:	4646      	mov	r6, r8
 800984a:	e735      	b.n	80096b8 <_dtoa_r+0x730>
 800984c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800984e:	e75c      	b.n	800970a <_dtoa_r+0x782>
 8009850:	2300      	movs	r3, #0
 8009852:	e788      	b.n	8009766 <_dtoa_r+0x7de>
 8009854:	3fe00000 	.word	0x3fe00000
 8009858:	40240000 	.word	0x40240000
 800985c:	40140000 	.word	0x40140000
 8009860:	9b02      	ldr	r3, [sp, #8]
 8009862:	e780      	b.n	8009766 <_dtoa_r+0x7de>
 8009864:	2300      	movs	r3, #0
 8009866:	930a      	str	r3, [sp, #40]	@ 0x28
 8009868:	e782      	b.n	8009770 <_dtoa_r+0x7e8>
 800986a:	d099      	beq.n	80097a0 <_dtoa_r+0x818>
 800986c:	9a08      	ldr	r2, [sp, #32]
 800986e:	331c      	adds	r3, #28
 8009870:	441a      	add	r2, r3
 8009872:	4498      	add	r8, r3
 8009874:	441e      	add	r6, r3
 8009876:	9208      	str	r2, [sp, #32]
 8009878:	e792      	b.n	80097a0 <_dtoa_r+0x818>
 800987a:	4603      	mov	r3, r0
 800987c:	e7f6      	b.n	800986c <_dtoa_r+0x8e4>
 800987e:	9b07      	ldr	r3, [sp, #28]
 8009880:	9704      	str	r7, [sp, #16]
 8009882:	2b00      	cmp	r3, #0
 8009884:	dc20      	bgt.n	80098c8 <_dtoa_r+0x940>
 8009886:	9300      	str	r3, [sp, #0]
 8009888:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800988a:	2b02      	cmp	r3, #2
 800988c:	dd1e      	ble.n	80098cc <_dtoa_r+0x944>
 800988e:	9b00      	ldr	r3, [sp, #0]
 8009890:	2b00      	cmp	r3, #0
 8009892:	f47f aec0 	bne.w	8009616 <_dtoa_r+0x68e>
 8009896:	4621      	mov	r1, r4
 8009898:	2205      	movs	r2, #5
 800989a:	4658      	mov	r0, fp
 800989c:	f000 f9e4 	bl	8009c68 <__multadd>
 80098a0:	4601      	mov	r1, r0
 80098a2:	4604      	mov	r4, r0
 80098a4:	4648      	mov	r0, r9
 80098a6:	f000 fc41 	bl	800a12c <__mcmp>
 80098aa:	2800      	cmp	r0, #0
 80098ac:	f77f aeb3 	ble.w	8009616 <_dtoa_r+0x68e>
 80098b0:	4656      	mov	r6, sl
 80098b2:	2331      	movs	r3, #49	@ 0x31
 80098b4:	f806 3b01 	strb.w	r3, [r6], #1
 80098b8:	9b04      	ldr	r3, [sp, #16]
 80098ba:	3301      	adds	r3, #1
 80098bc:	9304      	str	r3, [sp, #16]
 80098be:	e6ae      	b.n	800961e <_dtoa_r+0x696>
 80098c0:	9c07      	ldr	r4, [sp, #28]
 80098c2:	9704      	str	r7, [sp, #16]
 80098c4:	4625      	mov	r5, r4
 80098c6:	e7f3      	b.n	80098b0 <_dtoa_r+0x928>
 80098c8:	9b07      	ldr	r3, [sp, #28]
 80098ca:	9300      	str	r3, [sp, #0]
 80098cc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	f000 8104 	beq.w	8009adc <_dtoa_r+0xb54>
 80098d4:	2e00      	cmp	r6, #0
 80098d6:	dd05      	ble.n	80098e4 <_dtoa_r+0x95c>
 80098d8:	4629      	mov	r1, r5
 80098da:	4632      	mov	r2, r6
 80098dc:	4658      	mov	r0, fp
 80098de:	f000 fbb9 	bl	800a054 <__lshift>
 80098e2:	4605      	mov	r5, r0
 80098e4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d05a      	beq.n	80099a0 <_dtoa_r+0xa18>
 80098ea:	6869      	ldr	r1, [r5, #4]
 80098ec:	4658      	mov	r0, fp
 80098ee:	f000 f959 	bl	8009ba4 <_Balloc>
 80098f2:	4606      	mov	r6, r0
 80098f4:	b928      	cbnz	r0, 8009902 <_dtoa_r+0x97a>
 80098f6:	4b84      	ldr	r3, [pc, #528]	@ (8009b08 <_dtoa_r+0xb80>)
 80098f8:	4602      	mov	r2, r0
 80098fa:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80098fe:	f7ff bb5a 	b.w	8008fb6 <_dtoa_r+0x2e>
 8009902:	692a      	ldr	r2, [r5, #16]
 8009904:	3202      	adds	r2, #2
 8009906:	0092      	lsls	r2, r2, #2
 8009908:	f105 010c 	add.w	r1, r5, #12
 800990c:	300c      	adds	r0, #12
 800990e:	f7ff fa9e 	bl	8008e4e <memcpy>
 8009912:	2201      	movs	r2, #1
 8009914:	4631      	mov	r1, r6
 8009916:	4658      	mov	r0, fp
 8009918:	f000 fb9c 	bl	800a054 <__lshift>
 800991c:	f10a 0301 	add.w	r3, sl, #1
 8009920:	9307      	str	r3, [sp, #28]
 8009922:	9b00      	ldr	r3, [sp, #0]
 8009924:	4453      	add	r3, sl
 8009926:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009928:	9b02      	ldr	r3, [sp, #8]
 800992a:	f003 0301 	and.w	r3, r3, #1
 800992e:	462f      	mov	r7, r5
 8009930:	930a      	str	r3, [sp, #40]	@ 0x28
 8009932:	4605      	mov	r5, r0
 8009934:	9b07      	ldr	r3, [sp, #28]
 8009936:	4621      	mov	r1, r4
 8009938:	3b01      	subs	r3, #1
 800993a:	4648      	mov	r0, r9
 800993c:	9300      	str	r3, [sp, #0]
 800993e:	f7ff fa9b 	bl	8008e78 <quorem>
 8009942:	4639      	mov	r1, r7
 8009944:	9002      	str	r0, [sp, #8]
 8009946:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800994a:	4648      	mov	r0, r9
 800994c:	f000 fbee 	bl	800a12c <__mcmp>
 8009950:	462a      	mov	r2, r5
 8009952:	9008      	str	r0, [sp, #32]
 8009954:	4621      	mov	r1, r4
 8009956:	4658      	mov	r0, fp
 8009958:	f000 fc04 	bl	800a164 <__mdiff>
 800995c:	68c2      	ldr	r2, [r0, #12]
 800995e:	4606      	mov	r6, r0
 8009960:	bb02      	cbnz	r2, 80099a4 <_dtoa_r+0xa1c>
 8009962:	4601      	mov	r1, r0
 8009964:	4648      	mov	r0, r9
 8009966:	f000 fbe1 	bl	800a12c <__mcmp>
 800996a:	4602      	mov	r2, r0
 800996c:	4631      	mov	r1, r6
 800996e:	4658      	mov	r0, fp
 8009970:	920e      	str	r2, [sp, #56]	@ 0x38
 8009972:	f000 f957 	bl	8009c24 <_Bfree>
 8009976:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009978:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800997a:	9e07      	ldr	r6, [sp, #28]
 800997c:	ea43 0102 	orr.w	r1, r3, r2
 8009980:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009982:	4319      	orrs	r1, r3
 8009984:	d110      	bne.n	80099a8 <_dtoa_r+0xa20>
 8009986:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800998a:	d029      	beq.n	80099e0 <_dtoa_r+0xa58>
 800998c:	9b08      	ldr	r3, [sp, #32]
 800998e:	2b00      	cmp	r3, #0
 8009990:	dd02      	ble.n	8009998 <_dtoa_r+0xa10>
 8009992:	9b02      	ldr	r3, [sp, #8]
 8009994:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8009998:	9b00      	ldr	r3, [sp, #0]
 800999a:	f883 8000 	strb.w	r8, [r3]
 800999e:	e63f      	b.n	8009620 <_dtoa_r+0x698>
 80099a0:	4628      	mov	r0, r5
 80099a2:	e7bb      	b.n	800991c <_dtoa_r+0x994>
 80099a4:	2201      	movs	r2, #1
 80099a6:	e7e1      	b.n	800996c <_dtoa_r+0x9e4>
 80099a8:	9b08      	ldr	r3, [sp, #32]
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	db04      	blt.n	80099b8 <_dtoa_r+0xa30>
 80099ae:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80099b0:	430b      	orrs	r3, r1
 80099b2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80099b4:	430b      	orrs	r3, r1
 80099b6:	d120      	bne.n	80099fa <_dtoa_r+0xa72>
 80099b8:	2a00      	cmp	r2, #0
 80099ba:	dded      	ble.n	8009998 <_dtoa_r+0xa10>
 80099bc:	4649      	mov	r1, r9
 80099be:	2201      	movs	r2, #1
 80099c0:	4658      	mov	r0, fp
 80099c2:	f000 fb47 	bl	800a054 <__lshift>
 80099c6:	4621      	mov	r1, r4
 80099c8:	4681      	mov	r9, r0
 80099ca:	f000 fbaf 	bl	800a12c <__mcmp>
 80099ce:	2800      	cmp	r0, #0
 80099d0:	dc03      	bgt.n	80099da <_dtoa_r+0xa52>
 80099d2:	d1e1      	bne.n	8009998 <_dtoa_r+0xa10>
 80099d4:	f018 0f01 	tst.w	r8, #1
 80099d8:	d0de      	beq.n	8009998 <_dtoa_r+0xa10>
 80099da:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80099de:	d1d8      	bne.n	8009992 <_dtoa_r+0xa0a>
 80099e0:	9a00      	ldr	r2, [sp, #0]
 80099e2:	2339      	movs	r3, #57	@ 0x39
 80099e4:	7013      	strb	r3, [r2, #0]
 80099e6:	4633      	mov	r3, r6
 80099e8:	461e      	mov	r6, r3
 80099ea:	3b01      	subs	r3, #1
 80099ec:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80099f0:	2a39      	cmp	r2, #57	@ 0x39
 80099f2:	d052      	beq.n	8009a9a <_dtoa_r+0xb12>
 80099f4:	3201      	adds	r2, #1
 80099f6:	701a      	strb	r2, [r3, #0]
 80099f8:	e612      	b.n	8009620 <_dtoa_r+0x698>
 80099fa:	2a00      	cmp	r2, #0
 80099fc:	dd07      	ble.n	8009a0e <_dtoa_r+0xa86>
 80099fe:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009a02:	d0ed      	beq.n	80099e0 <_dtoa_r+0xa58>
 8009a04:	9a00      	ldr	r2, [sp, #0]
 8009a06:	f108 0301 	add.w	r3, r8, #1
 8009a0a:	7013      	strb	r3, [r2, #0]
 8009a0c:	e608      	b.n	8009620 <_dtoa_r+0x698>
 8009a0e:	9b07      	ldr	r3, [sp, #28]
 8009a10:	9a07      	ldr	r2, [sp, #28]
 8009a12:	f803 8c01 	strb.w	r8, [r3, #-1]
 8009a16:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009a18:	4293      	cmp	r3, r2
 8009a1a:	d028      	beq.n	8009a6e <_dtoa_r+0xae6>
 8009a1c:	4649      	mov	r1, r9
 8009a1e:	2300      	movs	r3, #0
 8009a20:	220a      	movs	r2, #10
 8009a22:	4658      	mov	r0, fp
 8009a24:	f000 f920 	bl	8009c68 <__multadd>
 8009a28:	42af      	cmp	r7, r5
 8009a2a:	4681      	mov	r9, r0
 8009a2c:	f04f 0300 	mov.w	r3, #0
 8009a30:	f04f 020a 	mov.w	r2, #10
 8009a34:	4639      	mov	r1, r7
 8009a36:	4658      	mov	r0, fp
 8009a38:	d107      	bne.n	8009a4a <_dtoa_r+0xac2>
 8009a3a:	f000 f915 	bl	8009c68 <__multadd>
 8009a3e:	4607      	mov	r7, r0
 8009a40:	4605      	mov	r5, r0
 8009a42:	9b07      	ldr	r3, [sp, #28]
 8009a44:	3301      	adds	r3, #1
 8009a46:	9307      	str	r3, [sp, #28]
 8009a48:	e774      	b.n	8009934 <_dtoa_r+0x9ac>
 8009a4a:	f000 f90d 	bl	8009c68 <__multadd>
 8009a4e:	4629      	mov	r1, r5
 8009a50:	4607      	mov	r7, r0
 8009a52:	2300      	movs	r3, #0
 8009a54:	220a      	movs	r2, #10
 8009a56:	4658      	mov	r0, fp
 8009a58:	f000 f906 	bl	8009c68 <__multadd>
 8009a5c:	4605      	mov	r5, r0
 8009a5e:	e7f0      	b.n	8009a42 <_dtoa_r+0xaba>
 8009a60:	9b00      	ldr	r3, [sp, #0]
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	bfcc      	ite	gt
 8009a66:	461e      	movgt	r6, r3
 8009a68:	2601      	movle	r6, #1
 8009a6a:	4456      	add	r6, sl
 8009a6c:	2700      	movs	r7, #0
 8009a6e:	4649      	mov	r1, r9
 8009a70:	2201      	movs	r2, #1
 8009a72:	4658      	mov	r0, fp
 8009a74:	f000 faee 	bl	800a054 <__lshift>
 8009a78:	4621      	mov	r1, r4
 8009a7a:	4681      	mov	r9, r0
 8009a7c:	f000 fb56 	bl	800a12c <__mcmp>
 8009a80:	2800      	cmp	r0, #0
 8009a82:	dcb0      	bgt.n	80099e6 <_dtoa_r+0xa5e>
 8009a84:	d102      	bne.n	8009a8c <_dtoa_r+0xb04>
 8009a86:	f018 0f01 	tst.w	r8, #1
 8009a8a:	d1ac      	bne.n	80099e6 <_dtoa_r+0xa5e>
 8009a8c:	4633      	mov	r3, r6
 8009a8e:	461e      	mov	r6, r3
 8009a90:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009a94:	2a30      	cmp	r2, #48	@ 0x30
 8009a96:	d0fa      	beq.n	8009a8e <_dtoa_r+0xb06>
 8009a98:	e5c2      	b.n	8009620 <_dtoa_r+0x698>
 8009a9a:	459a      	cmp	sl, r3
 8009a9c:	d1a4      	bne.n	80099e8 <_dtoa_r+0xa60>
 8009a9e:	9b04      	ldr	r3, [sp, #16]
 8009aa0:	3301      	adds	r3, #1
 8009aa2:	9304      	str	r3, [sp, #16]
 8009aa4:	2331      	movs	r3, #49	@ 0x31
 8009aa6:	f88a 3000 	strb.w	r3, [sl]
 8009aaa:	e5b9      	b.n	8009620 <_dtoa_r+0x698>
 8009aac:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009aae:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8009b0c <_dtoa_r+0xb84>
 8009ab2:	b11b      	cbz	r3, 8009abc <_dtoa_r+0xb34>
 8009ab4:	f10a 0308 	add.w	r3, sl, #8
 8009ab8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8009aba:	6013      	str	r3, [r2, #0]
 8009abc:	4650      	mov	r0, sl
 8009abe:	b019      	add	sp, #100	@ 0x64
 8009ac0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ac4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009ac6:	2b01      	cmp	r3, #1
 8009ac8:	f77f ae37 	ble.w	800973a <_dtoa_r+0x7b2>
 8009acc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009ace:	930a      	str	r3, [sp, #40]	@ 0x28
 8009ad0:	2001      	movs	r0, #1
 8009ad2:	e655      	b.n	8009780 <_dtoa_r+0x7f8>
 8009ad4:	9b00      	ldr	r3, [sp, #0]
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	f77f aed6 	ble.w	8009888 <_dtoa_r+0x900>
 8009adc:	4656      	mov	r6, sl
 8009ade:	4621      	mov	r1, r4
 8009ae0:	4648      	mov	r0, r9
 8009ae2:	f7ff f9c9 	bl	8008e78 <quorem>
 8009ae6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8009aea:	f806 8b01 	strb.w	r8, [r6], #1
 8009aee:	9b00      	ldr	r3, [sp, #0]
 8009af0:	eba6 020a 	sub.w	r2, r6, sl
 8009af4:	4293      	cmp	r3, r2
 8009af6:	ddb3      	ble.n	8009a60 <_dtoa_r+0xad8>
 8009af8:	4649      	mov	r1, r9
 8009afa:	2300      	movs	r3, #0
 8009afc:	220a      	movs	r2, #10
 8009afe:	4658      	mov	r0, fp
 8009b00:	f000 f8b2 	bl	8009c68 <__multadd>
 8009b04:	4681      	mov	r9, r0
 8009b06:	e7ea      	b.n	8009ade <_dtoa_r+0xb56>
 8009b08:	0800fca1 	.word	0x0800fca1
 8009b0c:	0800fc25 	.word	0x0800fc25

08009b10 <_free_r>:
 8009b10:	b538      	push	{r3, r4, r5, lr}
 8009b12:	4605      	mov	r5, r0
 8009b14:	2900      	cmp	r1, #0
 8009b16:	d041      	beq.n	8009b9c <_free_r+0x8c>
 8009b18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009b1c:	1f0c      	subs	r4, r1, #4
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	bfb8      	it	lt
 8009b22:	18e4      	addlt	r4, r4, r3
 8009b24:	f7fe f85a 	bl	8007bdc <__malloc_lock>
 8009b28:	4a1d      	ldr	r2, [pc, #116]	@ (8009ba0 <_free_r+0x90>)
 8009b2a:	6813      	ldr	r3, [r2, #0]
 8009b2c:	b933      	cbnz	r3, 8009b3c <_free_r+0x2c>
 8009b2e:	6063      	str	r3, [r4, #4]
 8009b30:	6014      	str	r4, [r2, #0]
 8009b32:	4628      	mov	r0, r5
 8009b34:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009b38:	f7fe b856 	b.w	8007be8 <__malloc_unlock>
 8009b3c:	42a3      	cmp	r3, r4
 8009b3e:	d908      	bls.n	8009b52 <_free_r+0x42>
 8009b40:	6820      	ldr	r0, [r4, #0]
 8009b42:	1821      	adds	r1, r4, r0
 8009b44:	428b      	cmp	r3, r1
 8009b46:	bf01      	itttt	eq
 8009b48:	6819      	ldreq	r1, [r3, #0]
 8009b4a:	685b      	ldreq	r3, [r3, #4]
 8009b4c:	1809      	addeq	r1, r1, r0
 8009b4e:	6021      	streq	r1, [r4, #0]
 8009b50:	e7ed      	b.n	8009b2e <_free_r+0x1e>
 8009b52:	461a      	mov	r2, r3
 8009b54:	685b      	ldr	r3, [r3, #4]
 8009b56:	b10b      	cbz	r3, 8009b5c <_free_r+0x4c>
 8009b58:	42a3      	cmp	r3, r4
 8009b5a:	d9fa      	bls.n	8009b52 <_free_r+0x42>
 8009b5c:	6811      	ldr	r1, [r2, #0]
 8009b5e:	1850      	adds	r0, r2, r1
 8009b60:	42a0      	cmp	r0, r4
 8009b62:	d10b      	bne.n	8009b7c <_free_r+0x6c>
 8009b64:	6820      	ldr	r0, [r4, #0]
 8009b66:	4401      	add	r1, r0
 8009b68:	1850      	adds	r0, r2, r1
 8009b6a:	4283      	cmp	r3, r0
 8009b6c:	6011      	str	r1, [r2, #0]
 8009b6e:	d1e0      	bne.n	8009b32 <_free_r+0x22>
 8009b70:	6818      	ldr	r0, [r3, #0]
 8009b72:	685b      	ldr	r3, [r3, #4]
 8009b74:	6053      	str	r3, [r2, #4]
 8009b76:	4408      	add	r0, r1
 8009b78:	6010      	str	r0, [r2, #0]
 8009b7a:	e7da      	b.n	8009b32 <_free_r+0x22>
 8009b7c:	d902      	bls.n	8009b84 <_free_r+0x74>
 8009b7e:	230c      	movs	r3, #12
 8009b80:	602b      	str	r3, [r5, #0]
 8009b82:	e7d6      	b.n	8009b32 <_free_r+0x22>
 8009b84:	6820      	ldr	r0, [r4, #0]
 8009b86:	1821      	adds	r1, r4, r0
 8009b88:	428b      	cmp	r3, r1
 8009b8a:	bf04      	itt	eq
 8009b8c:	6819      	ldreq	r1, [r3, #0]
 8009b8e:	685b      	ldreq	r3, [r3, #4]
 8009b90:	6063      	str	r3, [r4, #4]
 8009b92:	bf04      	itt	eq
 8009b94:	1809      	addeq	r1, r1, r0
 8009b96:	6021      	streq	r1, [r4, #0]
 8009b98:	6054      	str	r4, [r2, #4]
 8009b9a:	e7ca      	b.n	8009b32 <_free_r+0x22>
 8009b9c:	bd38      	pop	{r3, r4, r5, pc}
 8009b9e:	bf00      	nop
 8009ba0:	200004e4 	.word	0x200004e4

08009ba4 <_Balloc>:
 8009ba4:	b570      	push	{r4, r5, r6, lr}
 8009ba6:	69c6      	ldr	r6, [r0, #28]
 8009ba8:	4604      	mov	r4, r0
 8009baa:	460d      	mov	r5, r1
 8009bac:	b976      	cbnz	r6, 8009bcc <_Balloc+0x28>
 8009bae:	2010      	movs	r0, #16
 8009bb0:	f7fd ff6a 	bl	8007a88 <malloc>
 8009bb4:	4602      	mov	r2, r0
 8009bb6:	61e0      	str	r0, [r4, #28]
 8009bb8:	b920      	cbnz	r0, 8009bc4 <_Balloc+0x20>
 8009bba:	4b18      	ldr	r3, [pc, #96]	@ (8009c1c <_Balloc+0x78>)
 8009bbc:	4818      	ldr	r0, [pc, #96]	@ (8009c20 <_Balloc+0x7c>)
 8009bbe:	216b      	movs	r1, #107	@ 0x6b
 8009bc0:	f001 ff26 	bl	800ba10 <__assert_func>
 8009bc4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009bc8:	6006      	str	r6, [r0, #0]
 8009bca:	60c6      	str	r6, [r0, #12]
 8009bcc:	69e6      	ldr	r6, [r4, #28]
 8009bce:	68f3      	ldr	r3, [r6, #12]
 8009bd0:	b183      	cbz	r3, 8009bf4 <_Balloc+0x50>
 8009bd2:	69e3      	ldr	r3, [r4, #28]
 8009bd4:	68db      	ldr	r3, [r3, #12]
 8009bd6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009bda:	b9b8      	cbnz	r0, 8009c0c <_Balloc+0x68>
 8009bdc:	2101      	movs	r1, #1
 8009bde:	fa01 f605 	lsl.w	r6, r1, r5
 8009be2:	1d72      	adds	r2, r6, #5
 8009be4:	0092      	lsls	r2, r2, #2
 8009be6:	4620      	mov	r0, r4
 8009be8:	f001 ff30 	bl	800ba4c <_calloc_r>
 8009bec:	b160      	cbz	r0, 8009c08 <_Balloc+0x64>
 8009bee:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009bf2:	e00e      	b.n	8009c12 <_Balloc+0x6e>
 8009bf4:	2221      	movs	r2, #33	@ 0x21
 8009bf6:	2104      	movs	r1, #4
 8009bf8:	4620      	mov	r0, r4
 8009bfa:	f001 ff27 	bl	800ba4c <_calloc_r>
 8009bfe:	69e3      	ldr	r3, [r4, #28]
 8009c00:	60f0      	str	r0, [r6, #12]
 8009c02:	68db      	ldr	r3, [r3, #12]
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d1e4      	bne.n	8009bd2 <_Balloc+0x2e>
 8009c08:	2000      	movs	r0, #0
 8009c0a:	bd70      	pop	{r4, r5, r6, pc}
 8009c0c:	6802      	ldr	r2, [r0, #0]
 8009c0e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009c12:	2300      	movs	r3, #0
 8009c14:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009c18:	e7f7      	b.n	8009c0a <_Balloc+0x66>
 8009c1a:	bf00      	nop
 8009c1c:	0800fc32 	.word	0x0800fc32
 8009c20:	0800fcb2 	.word	0x0800fcb2

08009c24 <_Bfree>:
 8009c24:	b570      	push	{r4, r5, r6, lr}
 8009c26:	69c6      	ldr	r6, [r0, #28]
 8009c28:	4605      	mov	r5, r0
 8009c2a:	460c      	mov	r4, r1
 8009c2c:	b976      	cbnz	r6, 8009c4c <_Bfree+0x28>
 8009c2e:	2010      	movs	r0, #16
 8009c30:	f7fd ff2a 	bl	8007a88 <malloc>
 8009c34:	4602      	mov	r2, r0
 8009c36:	61e8      	str	r0, [r5, #28]
 8009c38:	b920      	cbnz	r0, 8009c44 <_Bfree+0x20>
 8009c3a:	4b09      	ldr	r3, [pc, #36]	@ (8009c60 <_Bfree+0x3c>)
 8009c3c:	4809      	ldr	r0, [pc, #36]	@ (8009c64 <_Bfree+0x40>)
 8009c3e:	218f      	movs	r1, #143	@ 0x8f
 8009c40:	f001 fee6 	bl	800ba10 <__assert_func>
 8009c44:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009c48:	6006      	str	r6, [r0, #0]
 8009c4a:	60c6      	str	r6, [r0, #12]
 8009c4c:	b13c      	cbz	r4, 8009c5e <_Bfree+0x3a>
 8009c4e:	69eb      	ldr	r3, [r5, #28]
 8009c50:	6862      	ldr	r2, [r4, #4]
 8009c52:	68db      	ldr	r3, [r3, #12]
 8009c54:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009c58:	6021      	str	r1, [r4, #0]
 8009c5a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009c5e:	bd70      	pop	{r4, r5, r6, pc}
 8009c60:	0800fc32 	.word	0x0800fc32
 8009c64:	0800fcb2 	.word	0x0800fcb2

08009c68 <__multadd>:
 8009c68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c6c:	690d      	ldr	r5, [r1, #16]
 8009c6e:	4607      	mov	r7, r0
 8009c70:	460c      	mov	r4, r1
 8009c72:	461e      	mov	r6, r3
 8009c74:	f101 0c14 	add.w	ip, r1, #20
 8009c78:	2000      	movs	r0, #0
 8009c7a:	f8dc 3000 	ldr.w	r3, [ip]
 8009c7e:	b299      	uxth	r1, r3
 8009c80:	fb02 6101 	mla	r1, r2, r1, r6
 8009c84:	0c1e      	lsrs	r6, r3, #16
 8009c86:	0c0b      	lsrs	r3, r1, #16
 8009c88:	fb02 3306 	mla	r3, r2, r6, r3
 8009c8c:	b289      	uxth	r1, r1
 8009c8e:	3001      	adds	r0, #1
 8009c90:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009c94:	4285      	cmp	r5, r0
 8009c96:	f84c 1b04 	str.w	r1, [ip], #4
 8009c9a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009c9e:	dcec      	bgt.n	8009c7a <__multadd+0x12>
 8009ca0:	b30e      	cbz	r6, 8009ce6 <__multadd+0x7e>
 8009ca2:	68a3      	ldr	r3, [r4, #8]
 8009ca4:	42ab      	cmp	r3, r5
 8009ca6:	dc19      	bgt.n	8009cdc <__multadd+0x74>
 8009ca8:	6861      	ldr	r1, [r4, #4]
 8009caa:	4638      	mov	r0, r7
 8009cac:	3101      	adds	r1, #1
 8009cae:	f7ff ff79 	bl	8009ba4 <_Balloc>
 8009cb2:	4680      	mov	r8, r0
 8009cb4:	b928      	cbnz	r0, 8009cc2 <__multadd+0x5a>
 8009cb6:	4602      	mov	r2, r0
 8009cb8:	4b0c      	ldr	r3, [pc, #48]	@ (8009cec <__multadd+0x84>)
 8009cba:	480d      	ldr	r0, [pc, #52]	@ (8009cf0 <__multadd+0x88>)
 8009cbc:	21ba      	movs	r1, #186	@ 0xba
 8009cbe:	f001 fea7 	bl	800ba10 <__assert_func>
 8009cc2:	6922      	ldr	r2, [r4, #16]
 8009cc4:	3202      	adds	r2, #2
 8009cc6:	f104 010c 	add.w	r1, r4, #12
 8009cca:	0092      	lsls	r2, r2, #2
 8009ccc:	300c      	adds	r0, #12
 8009cce:	f7ff f8be 	bl	8008e4e <memcpy>
 8009cd2:	4621      	mov	r1, r4
 8009cd4:	4638      	mov	r0, r7
 8009cd6:	f7ff ffa5 	bl	8009c24 <_Bfree>
 8009cda:	4644      	mov	r4, r8
 8009cdc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009ce0:	3501      	adds	r5, #1
 8009ce2:	615e      	str	r6, [r3, #20]
 8009ce4:	6125      	str	r5, [r4, #16]
 8009ce6:	4620      	mov	r0, r4
 8009ce8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009cec:	0800fca1 	.word	0x0800fca1
 8009cf0:	0800fcb2 	.word	0x0800fcb2

08009cf4 <__s2b>:
 8009cf4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009cf8:	460c      	mov	r4, r1
 8009cfa:	4615      	mov	r5, r2
 8009cfc:	461f      	mov	r7, r3
 8009cfe:	2209      	movs	r2, #9
 8009d00:	3308      	adds	r3, #8
 8009d02:	4606      	mov	r6, r0
 8009d04:	fb93 f3f2 	sdiv	r3, r3, r2
 8009d08:	2100      	movs	r1, #0
 8009d0a:	2201      	movs	r2, #1
 8009d0c:	429a      	cmp	r2, r3
 8009d0e:	db09      	blt.n	8009d24 <__s2b+0x30>
 8009d10:	4630      	mov	r0, r6
 8009d12:	f7ff ff47 	bl	8009ba4 <_Balloc>
 8009d16:	b940      	cbnz	r0, 8009d2a <__s2b+0x36>
 8009d18:	4602      	mov	r2, r0
 8009d1a:	4b19      	ldr	r3, [pc, #100]	@ (8009d80 <__s2b+0x8c>)
 8009d1c:	4819      	ldr	r0, [pc, #100]	@ (8009d84 <__s2b+0x90>)
 8009d1e:	21d3      	movs	r1, #211	@ 0xd3
 8009d20:	f001 fe76 	bl	800ba10 <__assert_func>
 8009d24:	0052      	lsls	r2, r2, #1
 8009d26:	3101      	adds	r1, #1
 8009d28:	e7f0      	b.n	8009d0c <__s2b+0x18>
 8009d2a:	9b08      	ldr	r3, [sp, #32]
 8009d2c:	6143      	str	r3, [r0, #20]
 8009d2e:	2d09      	cmp	r5, #9
 8009d30:	f04f 0301 	mov.w	r3, #1
 8009d34:	6103      	str	r3, [r0, #16]
 8009d36:	dd16      	ble.n	8009d66 <__s2b+0x72>
 8009d38:	f104 0909 	add.w	r9, r4, #9
 8009d3c:	46c8      	mov	r8, r9
 8009d3e:	442c      	add	r4, r5
 8009d40:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009d44:	4601      	mov	r1, r0
 8009d46:	3b30      	subs	r3, #48	@ 0x30
 8009d48:	220a      	movs	r2, #10
 8009d4a:	4630      	mov	r0, r6
 8009d4c:	f7ff ff8c 	bl	8009c68 <__multadd>
 8009d50:	45a0      	cmp	r8, r4
 8009d52:	d1f5      	bne.n	8009d40 <__s2b+0x4c>
 8009d54:	f1a5 0408 	sub.w	r4, r5, #8
 8009d58:	444c      	add	r4, r9
 8009d5a:	1b2d      	subs	r5, r5, r4
 8009d5c:	1963      	adds	r3, r4, r5
 8009d5e:	42bb      	cmp	r3, r7
 8009d60:	db04      	blt.n	8009d6c <__s2b+0x78>
 8009d62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009d66:	340a      	adds	r4, #10
 8009d68:	2509      	movs	r5, #9
 8009d6a:	e7f6      	b.n	8009d5a <__s2b+0x66>
 8009d6c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009d70:	4601      	mov	r1, r0
 8009d72:	3b30      	subs	r3, #48	@ 0x30
 8009d74:	220a      	movs	r2, #10
 8009d76:	4630      	mov	r0, r6
 8009d78:	f7ff ff76 	bl	8009c68 <__multadd>
 8009d7c:	e7ee      	b.n	8009d5c <__s2b+0x68>
 8009d7e:	bf00      	nop
 8009d80:	0800fca1 	.word	0x0800fca1
 8009d84:	0800fcb2 	.word	0x0800fcb2

08009d88 <__hi0bits>:
 8009d88:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8009d8c:	4603      	mov	r3, r0
 8009d8e:	bf36      	itet	cc
 8009d90:	0403      	lslcc	r3, r0, #16
 8009d92:	2000      	movcs	r0, #0
 8009d94:	2010      	movcc	r0, #16
 8009d96:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009d9a:	bf3c      	itt	cc
 8009d9c:	021b      	lslcc	r3, r3, #8
 8009d9e:	3008      	addcc	r0, #8
 8009da0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009da4:	bf3c      	itt	cc
 8009da6:	011b      	lslcc	r3, r3, #4
 8009da8:	3004      	addcc	r0, #4
 8009daa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009dae:	bf3c      	itt	cc
 8009db0:	009b      	lslcc	r3, r3, #2
 8009db2:	3002      	addcc	r0, #2
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	db05      	blt.n	8009dc4 <__hi0bits+0x3c>
 8009db8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8009dbc:	f100 0001 	add.w	r0, r0, #1
 8009dc0:	bf08      	it	eq
 8009dc2:	2020      	moveq	r0, #32
 8009dc4:	4770      	bx	lr

08009dc6 <__lo0bits>:
 8009dc6:	6803      	ldr	r3, [r0, #0]
 8009dc8:	4602      	mov	r2, r0
 8009dca:	f013 0007 	ands.w	r0, r3, #7
 8009dce:	d00b      	beq.n	8009de8 <__lo0bits+0x22>
 8009dd0:	07d9      	lsls	r1, r3, #31
 8009dd2:	d421      	bmi.n	8009e18 <__lo0bits+0x52>
 8009dd4:	0798      	lsls	r0, r3, #30
 8009dd6:	bf49      	itett	mi
 8009dd8:	085b      	lsrmi	r3, r3, #1
 8009dda:	089b      	lsrpl	r3, r3, #2
 8009ddc:	2001      	movmi	r0, #1
 8009dde:	6013      	strmi	r3, [r2, #0]
 8009de0:	bf5c      	itt	pl
 8009de2:	6013      	strpl	r3, [r2, #0]
 8009de4:	2002      	movpl	r0, #2
 8009de6:	4770      	bx	lr
 8009de8:	b299      	uxth	r1, r3
 8009dea:	b909      	cbnz	r1, 8009df0 <__lo0bits+0x2a>
 8009dec:	0c1b      	lsrs	r3, r3, #16
 8009dee:	2010      	movs	r0, #16
 8009df0:	b2d9      	uxtb	r1, r3
 8009df2:	b909      	cbnz	r1, 8009df8 <__lo0bits+0x32>
 8009df4:	3008      	adds	r0, #8
 8009df6:	0a1b      	lsrs	r3, r3, #8
 8009df8:	0719      	lsls	r1, r3, #28
 8009dfa:	bf04      	itt	eq
 8009dfc:	091b      	lsreq	r3, r3, #4
 8009dfe:	3004      	addeq	r0, #4
 8009e00:	0799      	lsls	r1, r3, #30
 8009e02:	bf04      	itt	eq
 8009e04:	089b      	lsreq	r3, r3, #2
 8009e06:	3002      	addeq	r0, #2
 8009e08:	07d9      	lsls	r1, r3, #31
 8009e0a:	d403      	bmi.n	8009e14 <__lo0bits+0x4e>
 8009e0c:	085b      	lsrs	r3, r3, #1
 8009e0e:	f100 0001 	add.w	r0, r0, #1
 8009e12:	d003      	beq.n	8009e1c <__lo0bits+0x56>
 8009e14:	6013      	str	r3, [r2, #0]
 8009e16:	4770      	bx	lr
 8009e18:	2000      	movs	r0, #0
 8009e1a:	4770      	bx	lr
 8009e1c:	2020      	movs	r0, #32
 8009e1e:	4770      	bx	lr

08009e20 <__i2b>:
 8009e20:	b510      	push	{r4, lr}
 8009e22:	460c      	mov	r4, r1
 8009e24:	2101      	movs	r1, #1
 8009e26:	f7ff febd 	bl	8009ba4 <_Balloc>
 8009e2a:	4602      	mov	r2, r0
 8009e2c:	b928      	cbnz	r0, 8009e3a <__i2b+0x1a>
 8009e2e:	4b05      	ldr	r3, [pc, #20]	@ (8009e44 <__i2b+0x24>)
 8009e30:	4805      	ldr	r0, [pc, #20]	@ (8009e48 <__i2b+0x28>)
 8009e32:	f240 1145 	movw	r1, #325	@ 0x145
 8009e36:	f001 fdeb 	bl	800ba10 <__assert_func>
 8009e3a:	2301      	movs	r3, #1
 8009e3c:	6144      	str	r4, [r0, #20]
 8009e3e:	6103      	str	r3, [r0, #16]
 8009e40:	bd10      	pop	{r4, pc}
 8009e42:	bf00      	nop
 8009e44:	0800fca1 	.word	0x0800fca1
 8009e48:	0800fcb2 	.word	0x0800fcb2

08009e4c <__multiply>:
 8009e4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e50:	4614      	mov	r4, r2
 8009e52:	690a      	ldr	r2, [r1, #16]
 8009e54:	6923      	ldr	r3, [r4, #16]
 8009e56:	429a      	cmp	r2, r3
 8009e58:	bfa8      	it	ge
 8009e5a:	4623      	movge	r3, r4
 8009e5c:	460f      	mov	r7, r1
 8009e5e:	bfa4      	itt	ge
 8009e60:	460c      	movge	r4, r1
 8009e62:	461f      	movge	r7, r3
 8009e64:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8009e68:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8009e6c:	68a3      	ldr	r3, [r4, #8]
 8009e6e:	6861      	ldr	r1, [r4, #4]
 8009e70:	eb0a 0609 	add.w	r6, sl, r9
 8009e74:	42b3      	cmp	r3, r6
 8009e76:	b085      	sub	sp, #20
 8009e78:	bfb8      	it	lt
 8009e7a:	3101      	addlt	r1, #1
 8009e7c:	f7ff fe92 	bl	8009ba4 <_Balloc>
 8009e80:	b930      	cbnz	r0, 8009e90 <__multiply+0x44>
 8009e82:	4602      	mov	r2, r0
 8009e84:	4b44      	ldr	r3, [pc, #272]	@ (8009f98 <__multiply+0x14c>)
 8009e86:	4845      	ldr	r0, [pc, #276]	@ (8009f9c <__multiply+0x150>)
 8009e88:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8009e8c:	f001 fdc0 	bl	800ba10 <__assert_func>
 8009e90:	f100 0514 	add.w	r5, r0, #20
 8009e94:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009e98:	462b      	mov	r3, r5
 8009e9a:	2200      	movs	r2, #0
 8009e9c:	4543      	cmp	r3, r8
 8009e9e:	d321      	bcc.n	8009ee4 <__multiply+0x98>
 8009ea0:	f107 0114 	add.w	r1, r7, #20
 8009ea4:	f104 0214 	add.w	r2, r4, #20
 8009ea8:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8009eac:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8009eb0:	9302      	str	r3, [sp, #8]
 8009eb2:	1b13      	subs	r3, r2, r4
 8009eb4:	3b15      	subs	r3, #21
 8009eb6:	f023 0303 	bic.w	r3, r3, #3
 8009eba:	3304      	adds	r3, #4
 8009ebc:	f104 0715 	add.w	r7, r4, #21
 8009ec0:	42ba      	cmp	r2, r7
 8009ec2:	bf38      	it	cc
 8009ec4:	2304      	movcc	r3, #4
 8009ec6:	9301      	str	r3, [sp, #4]
 8009ec8:	9b02      	ldr	r3, [sp, #8]
 8009eca:	9103      	str	r1, [sp, #12]
 8009ecc:	428b      	cmp	r3, r1
 8009ece:	d80c      	bhi.n	8009eea <__multiply+0x9e>
 8009ed0:	2e00      	cmp	r6, #0
 8009ed2:	dd03      	ble.n	8009edc <__multiply+0x90>
 8009ed4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d05b      	beq.n	8009f94 <__multiply+0x148>
 8009edc:	6106      	str	r6, [r0, #16]
 8009ede:	b005      	add	sp, #20
 8009ee0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ee4:	f843 2b04 	str.w	r2, [r3], #4
 8009ee8:	e7d8      	b.n	8009e9c <__multiply+0x50>
 8009eea:	f8b1 a000 	ldrh.w	sl, [r1]
 8009eee:	f1ba 0f00 	cmp.w	sl, #0
 8009ef2:	d024      	beq.n	8009f3e <__multiply+0xf2>
 8009ef4:	f104 0e14 	add.w	lr, r4, #20
 8009ef8:	46a9      	mov	r9, r5
 8009efa:	f04f 0c00 	mov.w	ip, #0
 8009efe:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009f02:	f8d9 3000 	ldr.w	r3, [r9]
 8009f06:	fa1f fb87 	uxth.w	fp, r7
 8009f0a:	b29b      	uxth	r3, r3
 8009f0c:	fb0a 330b 	mla	r3, sl, fp, r3
 8009f10:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8009f14:	f8d9 7000 	ldr.w	r7, [r9]
 8009f18:	4463      	add	r3, ip
 8009f1a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8009f1e:	fb0a c70b 	mla	r7, sl, fp, ip
 8009f22:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8009f26:	b29b      	uxth	r3, r3
 8009f28:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009f2c:	4572      	cmp	r2, lr
 8009f2e:	f849 3b04 	str.w	r3, [r9], #4
 8009f32:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8009f36:	d8e2      	bhi.n	8009efe <__multiply+0xb2>
 8009f38:	9b01      	ldr	r3, [sp, #4]
 8009f3a:	f845 c003 	str.w	ip, [r5, r3]
 8009f3e:	9b03      	ldr	r3, [sp, #12]
 8009f40:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8009f44:	3104      	adds	r1, #4
 8009f46:	f1b9 0f00 	cmp.w	r9, #0
 8009f4a:	d021      	beq.n	8009f90 <__multiply+0x144>
 8009f4c:	682b      	ldr	r3, [r5, #0]
 8009f4e:	f104 0c14 	add.w	ip, r4, #20
 8009f52:	46ae      	mov	lr, r5
 8009f54:	f04f 0a00 	mov.w	sl, #0
 8009f58:	f8bc b000 	ldrh.w	fp, [ip]
 8009f5c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8009f60:	fb09 770b 	mla	r7, r9, fp, r7
 8009f64:	4457      	add	r7, sl
 8009f66:	b29b      	uxth	r3, r3
 8009f68:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009f6c:	f84e 3b04 	str.w	r3, [lr], #4
 8009f70:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009f74:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009f78:	f8be 3000 	ldrh.w	r3, [lr]
 8009f7c:	fb09 330a 	mla	r3, r9, sl, r3
 8009f80:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8009f84:	4562      	cmp	r2, ip
 8009f86:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009f8a:	d8e5      	bhi.n	8009f58 <__multiply+0x10c>
 8009f8c:	9f01      	ldr	r7, [sp, #4]
 8009f8e:	51eb      	str	r3, [r5, r7]
 8009f90:	3504      	adds	r5, #4
 8009f92:	e799      	b.n	8009ec8 <__multiply+0x7c>
 8009f94:	3e01      	subs	r6, #1
 8009f96:	e79b      	b.n	8009ed0 <__multiply+0x84>
 8009f98:	0800fca1 	.word	0x0800fca1
 8009f9c:	0800fcb2 	.word	0x0800fcb2

08009fa0 <__pow5mult>:
 8009fa0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009fa4:	4615      	mov	r5, r2
 8009fa6:	f012 0203 	ands.w	r2, r2, #3
 8009faa:	4607      	mov	r7, r0
 8009fac:	460e      	mov	r6, r1
 8009fae:	d007      	beq.n	8009fc0 <__pow5mult+0x20>
 8009fb0:	4c25      	ldr	r4, [pc, #148]	@ (800a048 <__pow5mult+0xa8>)
 8009fb2:	3a01      	subs	r2, #1
 8009fb4:	2300      	movs	r3, #0
 8009fb6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009fba:	f7ff fe55 	bl	8009c68 <__multadd>
 8009fbe:	4606      	mov	r6, r0
 8009fc0:	10ad      	asrs	r5, r5, #2
 8009fc2:	d03d      	beq.n	800a040 <__pow5mult+0xa0>
 8009fc4:	69fc      	ldr	r4, [r7, #28]
 8009fc6:	b97c      	cbnz	r4, 8009fe8 <__pow5mult+0x48>
 8009fc8:	2010      	movs	r0, #16
 8009fca:	f7fd fd5d 	bl	8007a88 <malloc>
 8009fce:	4602      	mov	r2, r0
 8009fd0:	61f8      	str	r0, [r7, #28]
 8009fd2:	b928      	cbnz	r0, 8009fe0 <__pow5mult+0x40>
 8009fd4:	4b1d      	ldr	r3, [pc, #116]	@ (800a04c <__pow5mult+0xac>)
 8009fd6:	481e      	ldr	r0, [pc, #120]	@ (800a050 <__pow5mult+0xb0>)
 8009fd8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8009fdc:	f001 fd18 	bl	800ba10 <__assert_func>
 8009fe0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009fe4:	6004      	str	r4, [r0, #0]
 8009fe6:	60c4      	str	r4, [r0, #12]
 8009fe8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8009fec:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009ff0:	b94c      	cbnz	r4, 800a006 <__pow5mult+0x66>
 8009ff2:	f240 2171 	movw	r1, #625	@ 0x271
 8009ff6:	4638      	mov	r0, r7
 8009ff8:	f7ff ff12 	bl	8009e20 <__i2b>
 8009ffc:	2300      	movs	r3, #0
 8009ffe:	f8c8 0008 	str.w	r0, [r8, #8]
 800a002:	4604      	mov	r4, r0
 800a004:	6003      	str	r3, [r0, #0]
 800a006:	f04f 0900 	mov.w	r9, #0
 800a00a:	07eb      	lsls	r3, r5, #31
 800a00c:	d50a      	bpl.n	800a024 <__pow5mult+0x84>
 800a00e:	4631      	mov	r1, r6
 800a010:	4622      	mov	r2, r4
 800a012:	4638      	mov	r0, r7
 800a014:	f7ff ff1a 	bl	8009e4c <__multiply>
 800a018:	4631      	mov	r1, r6
 800a01a:	4680      	mov	r8, r0
 800a01c:	4638      	mov	r0, r7
 800a01e:	f7ff fe01 	bl	8009c24 <_Bfree>
 800a022:	4646      	mov	r6, r8
 800a024:	106d      	asrs	r5, r5, #1
 800a026:	d00b      	beq.n	800a040 <__pow5mult+0xa0>
 800a028:	6820      	ldr	r0, [r4, #0]
 800a02a:	b938      	cbnz	r0, 800a03c <__pow5mult+0x9c>
 800a02c:	4622      	mov	r2, r4
 800a02e:	4621      	mov	r1, r4
 800a030:	4638      	mov	r0, r7
 800a032:	f7ff ff0b 	bl	8009e4c <__multiply>
 800a036:	6020      	str	r0, [r4, #0]
 800a038:	f8c0 9000 	str.w	r9, [r0]
 800a03c:	4604      	mov	r4, r0
 800a03e:	e7e4      	b.n	800a00a <__pow5mult+0x6a>
 800a040:	4630      	mov	r0, r6
 800a042:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a046:	bf00      	nop
 800a048:	0800fd0c 	.word	0x0800fd0c
 800a04c:	0800fc32 	.word	0x0800fc32
 800a050:	0800fcb2 	.word	0x0800fcb2

0800a054 <__lshift>:
 800a054:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a058:	460c      	mov	r4, r1
 800a05a:	6849      	ldr	r1, [r1, #4]
 800a05c:	6923      	ldr	r3, [r4, #16]
 800a05e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a062:	68a3      	ldr	r3, [r4, #8]
 800a064:	4607      	mov	r7, r0
 800a066:	4691      	mov	r9, r2
 800a068:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a06c:	f108 0601 	add.w	r6, r8, #1
 800a070:	42b3      	cmp	r3, r6
 800a072:	db0b      	blt.n	800a08c <__lshift+0x38>
 800a074:	4638      	mov	r0, r7
 800a076:	f7ff fd95 	bl	8009ba4 <_Balloc>
 800a07a:	4605      	mov	r5, r0
 800a07c:	b948      	cbnz	r0, 800a092 <__lshift+0x3e>
 800a07e:	4602      	mov	r2, r0
 800a080:	4b28      	ldr	r3, [pc, #160]	@ (800a124 <__lshift+0xd0>)
 800a082:	4829      	ldr	r0, [pc, #164]	@ (800a128 <__lshift+0xd4>)
 800a084:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800a088:	f001 fcc2 	bl	800ba10 <__assert_func>
 800a08c:	3101      	adds	r1, #1
 800a08e:	005b      	lsls	r3, r3, #1
 800a090:	e7ee      	b.n	800a070 <__lshift+0x1c>
 800a092:	2300      	movs	r3, #0
 800a094:	f100 0114 	add.w	r1, r0, #20
 800a098:	f100 0210 	add.w	r2, r0, #16
 800a09c:	4618      	mov	r0, r3
 800a09e:	4553      	cmp	r3, sl
 800a0a0:	db33      	blt.n	800a10a <__lshift+0xb6>
 800a0a2:	6920      	ldr	r0, [r4, #16]
 800a0a4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a0a8:	f104 0314 	add.w	r3, r4, #20
 800a0ac:	f019 091f 	ands.w	r9, r9, #31
 800a0b0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a0b4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a0b8:	d02b      	beq.n	800a112 <__lshift+0xbe>
 800a0ba:	f1c9 0e20 	rsb	lr, r9, #32
 800a0be:	468a      	mov	sl, r1
 800a0c0:	2200      	movs	r2, #0
 800a0c2:	6818      	ldr	r0, [r3, #0]
 800a0c4:	fa00 f009 	lsl.w	r0, r0, r9
 800a0c8:	4310      	orrs	r0, r2
 800a0ca:	f84a 0b04 	str.w	r0, [sl], #4
 800a0ce:	f853 2b04 	ldr.w	r2, [r3], #4
 800a0d2:	459c      	cmp	ip, r3
 800a0d4:	fa22 f20e 	lsr.w	r2, r2, lr
 800a0d8:	d8f3      	bhi.n	800a0c2 <__lshift+0x6e>
 800a0da:	ebac 0304 	sub.w	r3, ip, r4
 800a0de:	3b15      	subs	r3, #21
 800a0e0:	f023 0303 	bic.w	r3, r3, #3
 800a0e4:	3304      	adds	r3, #4
 800a0e6:	f104 0015 	add.w	r0, r4, #21
 800a0ea:	4584      	cmp	ip, r0
 800a0ec:	bf38      	it	cc
 800a0ee:	2304      	movcc	r3, #4
 800a0f0:	50ca      	str	r2, [r1, r3]
 800a0f2:	b10a      	cbz	r2, 800a0f8 <__lshift+0xa4>
 800a0f4:	f108 0602 	add.w	r6, r8, #2
 800a0f8:	3e01      	subs	r6, #1
 800a0fa:	4638      	mov	r0, r7
 800a0fc:	612e      	str	r6, [r5, #16]
 800a0fe:	4621      	mov	r1, r4
 800a100:	f7ff fd90 	bl	8009c24 <_Bfree>
 800a104:	4628      	mov	r0, r5
 800a106:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a10a:	f842 0f04 	str.w	r0, [r2, #4]!
 800a10e:	3301      	adds	r3, #1
 800a110:	e7c5      	b.n	800a09e <__lshift+0x4a>
 800a112:	3904      	subs	r1, #4
 800a114:	f853 2b04 	ldr.w	r2, [r3], #4
 800a118:	f841 2f04 	str.w	r2, [r1, #4]!
 800a11c:	459c      	cmp	ip, r3
 800a11e:	d8f9      	bhi.n	800a114 <__lshift+0xc0>
 800a120:	e7ea      	b.n	800a0f8 <__lshift+0xa4>
 800a122:	bf00      	nop
 800a124:	0800fca1 	.word	0x0800fca1
 800a128:	0800fcb2 	.word	0x0800fcb2

0800a12c <__mcmp>:
 800a12c:	690a      	ldr	r2, [r1, #16]
 800a12e:	4603      	mov	r3, r0
 800a130:	6900      	ldr	r0, [r0, #16]
 800a132:	1a80      	subs	r0, r0, r2
 800a134:	b530      	push	{r4, r5, lr}
 800a136:	d10e      	bne.n	800a156 <__mcmp+0x2a>
 800a138:	3314      	adds	r3, #20
 800a13a:	3114      	adds	r1, #20
 800a13c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a140:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a144:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a148:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a14c:	4295      	cmp	r5, r2
 800a14e:	d003      	beq.n	800a158 <__mcmp+0x2c>
 800a150:	d205      	bcs.n	800a15e <__mcmp+0x32>
 800a152:	f04f 30ff 	mov.w	r0, #4294967295
 800a156:	bd30      	pop	{r4, r5, pc}
 800a158:	42a3      	cmp	r3, r4
 800a15a:	d3f3      	bcc.n	800a144 <__mcmp+0x18>
 800a15c:	e7fb      	b.n	800a156 <__mcmp+0x2a>
 800a15e:	2001      	movs	r0, #1
 800a160:	e7f9      	b.n	800a156 <__mcmp+0x2a>
	...

0800a164 <__mdiff>:
 800a164:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a168:	4689      	mov	r9, r1
 800a16a:	4606      	mov	r6, r0
 800a16c:	4611      	mov	r1, r2
 800a16e:	4648      	mov	r0, r9
 800a170:	4614      	mov	r4, r2
 800a172:	f7ff ffdb 	bl	800a12c <__mcmp>
 800a176:	1e05      	subs	r5, r0, #0
 800a178:	d112      	bne.n	800a1a0 <__mdiff+0x3c>
 800a17a:	4629      	mov	r1, r5
 800a17c:	4630      	mov	r0, r6
 800a17e:	f7ff fd11 	bl	8009ba4 <_Balloc>
 800a182:	4602      	mov	r2, r0
 800a184:	b928      	cbnz	r0, 800a192 <__mdiff+0x2e>
 800a186:	4b3f      	ldr	r3, [pc, #252]	@ (800a284 <__mdiff+0x120>)
 800a188:	f240 2137 	movw	r1, #567	@ 0x237
 800a18c:	483e      	ldr	r0, [pc, #248]	@ (800a288 <__mdiff+0x124>)
 800a18e:	f001 fc3f 	bl	800ba10 <__assert_func>
 800a192:	2301      	movs	r3, #1
 800a194:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a198:	4610      	mov	r0, r2
 800a19a:	b003      	add	sp, #12
 800a19c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1a0:	bfbc      	itt	lt
 800a1a2:	464b      	movlt	r3, r9
 800a1a4:	46a1      	movlt	r9, r4
 800a1a6:	4630      	mov	r0, r6
 800a1a8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800a1ac:	bfba      	itte	lt
 800a1ae:	461c      	movlt	r4, r3
 800a1b0:	2501      	movlt	r5, #1
 800a1b2:	2500      	movge	r5, #0
 800a1b4:	f7ff fcf6 	bl	8009ba4 <_Balloc>
 800a1b8:	4602      	mov	r2, r0
 800a1ba:	b918      	cbnz	r0, 800a1c4 <__mdiff+0x60>
 800a1bc:	4b31      	ldr	r3, [pc, #196]	@ (800a284 <__mdiff+0x120>)
 800a1be:	f240 2145 	movw	r1, #581	@ 0x245
 800a1c2:	e7e3      	b.n	800a18c <__mdiff+0x28>
 800a1c4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800a1c8:	6926      	ldr	r6, [r4, #16]
 800a1ca:	60c5      	str	r5, [r0, #12]
 800a1cc:	f109 0310 	add.w	r3, r9, #16
 800a1d0:	f109 0514 	add.w	r5, r9, #20
 800a1d4:	f104 0e14 	add.w	lr, r4, #20
 800a1d8:	f100 0b14 	add.w	fp, r0, #20
 800a1dc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800a1e0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800a1e4:	9301      	str	r3, [sp, #4]
 800a1e6:	46d9      	mov	r9, fp
 800a1e8:	f04f 0c00 	mov.w	ip, #0
 800a1ec:	9b01      	ldr	r3, [sp, #4]
 800a1ee:	f85e 0b04 	ldr.w	r0, [lr], #4
 800a1f2:	f853 af04 	ldr.w	sl, [r3, #4]!
 800a1f6:	9301      	str	r3, [sp, #4]
 800a1f8:	fa1f f38a 	uxth.w	r3, sl
 800a1fc:	4619      	mov	r1, r3
 800a1fe:	b283      	uxth	r3, r0
 800a200:	1acb      	subs	r3, r1, r3
 800a202:	0c00      	lsrs	r0, r0, #16
 800a204:	4463      	add	r3, ip
 800a206:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800a20a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800a20e:	b29b      	uxth	r3, r3
 800a210:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800a214:	4576      	cmp	r6, lr
 800a216:	f849 3b04 	str.w	r3, [r9], #4
 800a21a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a21e:	d8e5      	bhi.n	800a1ec <__mdiff+0x88>
 800a220:	1b33      	subs	r3, r6, r4
 800a222:	3b15      	subs	r3, #21
 800a224:	f023 0303 	bic.w	r3, r3, #3
 800a228:	3415      	adds	r4, #21
 800a22a:	3304      	adds	r3, #4
 800a22c:	42a6      	cmp	r6, r4
 800a22e:	bf38      	it	cc
 800a230:	2304      	movcc	r3, #4
 800a232:	441d      	add	r5, r3
 800a234:	445b      	add	r3, fp
 800a236:	461e      	mov	r6, r3
 800a238:	462c      	mov	r4, r5
 800a23a:	4544      	cmp	r4, r8
 800a23c:	d30e      	bcc.n	800a25c <__mdiff+0xf8>
 800a23e:	f108 0103 	add.w	r1, r8, #3
 800a242:	1b49      	subs	r1, r1, r5
 800a244:	f021 0103 	bic.w	r1, r1, #3
 800a248:	3d03      	subs	r5, #3
 800a24a:	45a8      	cmp	r8, r5
 800a24c:	bf38      	it	cc
 800a24e:	2100      	movcc	r1, #0
 800a250:	440b      	add	r3, r1
 800a252:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a256:	b191      	cbz	r1, 800a27e <__mdiff+0x11a>
 800a258:	6117      	str	r7, [r2, #16]
 800a25a:	e79d      	b.n	800a198 <__mdiff+0x34>
 800a25c:	f854 1b04 	ldr.w	r1, [r4], #4
 800a260:	46e6      	mov	lr, ip
 800a262:	0c08      	lsrs	r0, r1, #16
 800a264:	fa1c fc81 	uxtah	ip, ip, r1
 800a268:	4471      	add	r1, lr
 800a26a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800a26e:	b289      	uxth	r1, r1
 800a270:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800a274:	f846 1b04 	str.w	r1, [r6], #4
 800a278:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a27c:	e7dd      	b.n	800a23a <__mdiff+0xd6>
 800a27e:	3f01      	subs	r7, #1
 800a280:	e7e7      	b.n	800a252 <__mdiff+0xee>
 800a282:	bf00      	nop
 800a284:	0800fca1 	.word	0x0800fca1
 800a288:	0800fcb2 	.word	0x0800fcb2

0800a28c <__ulp>:
 800a28c:	b082      	sub	sp, #8
 800a28e:	ed8d 0b00 	vstr	d0, [sp]
 800a292:	9a01      	ldr	r2, [sp, #4]
 800a294:	4b0f      	ldr	r3, [pc, #60]	@ (800a2d4 <__ulp+0x48>)
 800a296:	4013      	ands	r3, r2
 800a298:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	dc08      	bgt.n	800a2b2 <__ulp+0x26>
 800a2a0:	425b      	negs	r3, r3
 800a2a2:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800a2a6:	ea4f 5223 	mov.w	r2, r3, asr #20
 800a2aa:	da04      	bge.n	800a2b6 <__ulp+0x2a>
 800a2ac:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800a2b0:	4113      	asrs	r3, r2
 800a2b2:	2200      	movs	r2, #0
 800a2b4:	e008      	b.n	800a2c8 <__ulp+0x3c>
 800a2b6:	f1a2 0314 	sub.w	r3, r2, #20
 800a2ba:	2b1e      	cmp	r3, #30
 800a2bc:	bfda      	itte	le
 800a2be:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800a2c2:	40da      	lsrle	r2, r3
 800a2c4:	2201      	movgt	r2, #1
 800a2c6:	2300      	movs	r3, #0
 800a2c8:	4619      	mov	r1, r3
 800a2ca:	4610      	mov	r0, r2
 800a2cc:	ec41 0b10 	vmov	d0, r0, r1
 800a2d0:	b002      	add	sp, #8
 800a2d2:	4770      	bx	lr
 800a2d4:	7ff00000 	.word	0x7ff00000

0800a2d8 <__b2d>:
 800a2d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a2dc:	6906      	ldr	r6, [r0, #16]
 800a2de:	f100 0814 	add.w	r8, r0, #20
 800a2e2:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800a2e6:	1f37      	subs	r7, r6, #4
 800a2e8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800a2ec:	4610      	mov	r0, r2
 800a2ee:	f7ff fd4b 	bl	8009d88 <__hi0bits>
 800a2f2:	f1c0 0320 	rsb	r3, r0, #32
 800a2f6:	280a      	cmp	r0, #10
 800a2f8:	600b      	str	r3, [r1, #0]
 800a2fa:	491b      	ldr	r1, [pc, #108]	@ (800a368 <__b2d+0x90>)
 800a2fc:	dc15      	bgt.n	800a32a <__b2d+0x52>
 800a2fe:	f1c0 0c0b 	rsb	ip, r0, #11
 800a302:	fa22 f30c 	lsr.w	r3, r2, ip
 800a306:	45b8      	cmp	r8, r7
 800a308:	ea43 0501 	orr.w	r5, r3, r1
 800a30c:	bf34      	ite	cc
 800a30e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a312:	2300      	movcs	r3, #0
 800a314:	3015      	adds	r0, #21
 800a316:	fa02 f000 	lsl.w	r0, r2, r0
 800a31a:	fa23 f30c 	lsr.w	r3, r3, ip
 800a31e:	4303      	orrs	r3, r0
 800a320:	461c      	mov	r4, r3
 800a322:	ec45 4b10 	vmov	d0, r4, r5
 800a326:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a32a:	45b8      	cmp	r8, r7
 800a32c:	bf3a      	itte	cc
 800a32e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a332:	f1a6 0708 	subcc.w	r7, r6, #8
 800a336:	2300      	movcs	r3, #0
 800a338:	380b      	subs	r0, #11
 800a33a:	d012      	beq.n	800a362 <__b2d+0x8a>
 800a33c:	f1c0 0120 	rsb	r1, r0, #32
 800a340:	fa23 f401 	lsr.w	r4, r3, r1
 800a344:	4082      	lsls	r2, r0
 800a346:	4322      	orrs	r2, r4
 800a348:	4547      	cmp	r7, r8
 800a34a:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800a34e:	bf8c      	ite	hi
 800a350:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800a354:	2200      	movls	r2, #0
 800a356:	4083      	lsls	r3, r0
 800a358:	40ca      	lsrs	r2, r1
 800a35a:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800a35e:	4313      	orrs	r3, r2
 800a360:	e7de      	b.n	800a320 <__b2d+0x48>
 800a362:	ea42 0501 	orr.w	r5, r2, r1
 800a366:	e7db      	b.n	800a320 <__b2d+0x48>
 800a368:	3ff00000 	.word	0x3ff00000

0800a36c <__d2b>:
 800a36c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a370:	460f      	mov	r7, r1
 800a372:	2101      	movs	r1, #1
 800a374:	ec59 8b10 	vmov	r8, r9, d0
 800a378:	4616      	mov	r6, r2
 800a37a:	f7ff fc13 	bl	8009ba4 <_Balloc>
 800a37e:	4604      	mov	r4, r0
 800a380:	b930      	cbnz	r0, 800a390 <__d2b+0x24>
 800a382:	4602      	mov	r2, r0
 800a384:	4b23      	ldr	r3, [pc, #140]	@ (800a414 <__d2b+0xa8>)
 800a386:	4824      	ldr	r0, [pc, #144]	@ (800a418 <__d2b+0xac>)
 800a388:	f240 310f 	movw	r1, #783	@ 0x30f
 800a38c:	f001 fb40 	bl	800ba10 <__assert_func>
 800a390:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a394:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a398:	b10d      	cbz	r5, 800a39e <__d2b+0x32>
 800a39a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a39e:	9301      	str	r3, [sp, #4]
 800a3a0:	f1b8 0300 	subs.w	r3, r8, #0
 800a3a4:	d023      	beq.n	800a3ee <__d2b+0x82>
 800a3a6:	4668      	mov	r0, sp
 800a3a8:	9300      	str	r3, [sp, #0]
 800a3aa:	f7ff fd0c 	bl	8009dc6 <__lo0bits>
 800a3ae:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a3b2:	b1d0      	cbz	r0, 800a3ea <__d2b+0x7e>
 800a3b4:	f1c0 0320 	rsb	r3, r0, #32
 800a3b8:	fa02 f303 	lsl.w	r3, r2, r3
 800a3bc:	430b      	orrs	r3, r1
 800a3be:	40c2      	lsrs	r2, r0
 800a3c0:	6163      	str	r3, [r4, #20]
 800a3c2:	9201      	str	r2, [sp, #4]
 800a3c4:	9b01      	ldr	r3, [sp, #4]
 800a3c6:	61a3      	str	r3, [r4, #24]
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	bf0c      	ite	eq
 800a3cc:	2201      	moveq	r2, #1
 800a3ce:	2202      	movne	r2, #2
 800a3d0:	6122      	str	r2, [r4, #16]
 800a3d2:	b1a5      	cbz	r5, 800a3fe <__d2b+0x92>
 800a3d4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800a3d8:	4405      	add	r5, r0
 800a3da:	603d      	str	r5, [r7, #0]
 800a3dc:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800a3e0:	6030      	str	r0, [r6, #0]
 800a3e2:	4620      	mov	r0, r4
 800a3e4:	b003      	add	sp, #12
 800a3e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a3ea:	6161      	str	r1, [r4, #20]
 800a3ec:	e7ea      	b.n	800a3c4 <__d2b+0x58>
 800a3ee:	a801      	add	r0, sp, #4
 800a3f0:	f7ff fce9 	bl	8009dc6 <__lo0bits>
 800a3f4:	9b01      	ldr	r3, [sp, #4]
 800a3f6:	6163      	str	r3, [r4, #20]
 800a3f8:	3020      	adds	r0, #32
 800a3fa:	2201      	movs	r2, #1
 800a3fc:	e7e8      	b.n	800a3d0 <__d2b+0x64>
 800a3fe:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a402:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800a406:	6038      	str	r0, [r7, #0]
 800a408:	6918      	ldr	r0, [r3, #16]
 800a40a:	f7ff fcbd 	bl	8009d88 <__hi0bits>
 800a40e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a412:	e7e5      	b.n	800a3e0 <__d2b+0x74>
 800a414:	0800fca1 	.word	0x0800fca1
 800a418:	0800fcb2 	.word	0x0800fcb2

0800a41c <__ratio>:
 800a41c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a420:	b085      	sub	sp, #20
 800a422:	e9cd 1000 	strd	r1, r0, [sp]
 800a426:	a902      	add	r1, sp, #8
 800a428:	f7ff ff56 	bl	800a2d8 <__b2d>
 800a42c:	9800      	ldr	r0, [sp, #0]
 800a42e:	a903      	add	r1, sp, #12
 800a430:	ec55 4b10 	vmov	r4, r5, d0
 800a434:	f7ff ff50 	bl	800a2d8 <__b2d>
 800a438:	9b01      	ldr	r3, [sp, #4]
 800a43a:	6919      	ldr	r1, [r3, #16]
 800a43c:	9b00      	ldr	r3, [sp, #0]
 800a43e:	691b      	ldr	r3, [r3, #16]
 800a440:	1ac9      	subs	r1, r1, r3
 800a442:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800a446:	1a9b      	subs	r3, r3, r2
 800a448:	ec5b ab10 	vmov	sl, fp, d0
 800a44c:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800a450:	2b00      	cmp	r3, #0
 800a452:	bfce      	itee	gt
 800a454:	462a      	movgt	r2, r5
 800a456:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a45a:	465a      	movle	r2, fp
 800a45c:	462f      	mov	r7, r5
 800a45e:	46d9      	mov	r9, fp
 800a460:	bfcc      	ite	gt
 800a462:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800a466:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800a46a:	464b      	mov	r3, r9
 800a46c:	4652      	mov	r2, sl
 800a46e:	4620      	mov	r0, r4
 800a470:	4639      	mov	r1, r7
 800a472:	f7f6 fa0b 	bl	800088c <__aeabi_ddiv>
 800a476:	ec41 0b10 	vmov	d0, r0, r1
 800a47a:	b005      	add	sp, #20
 800a47c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a480 <__copybits>:
 800a480:	3901      	subs	r1, #1
 800a482:	b570      	push	{r4, r5, r6, lr}
 800a484:	1149      	asrs	r1, r1, #5
 800a486:	6914      	ldr	r4, [r2, #16]
 800a488:	3101      	adds	r1, #1
 800a48a:	f102 0314 	add.w	r3, r2, #20
 800a48e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a492:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a496:	1f05      	subs	r5, r0, #4
 800a498:	42a3      	cmp	r3, r4
 800a49a:	d30c      	bcc.n	800a4b6 <__copybits+0x36>
 800a49c:	1aa3      	subs	r3, r4, r2
 800a49e:	3b11      	subs	r3, #17
 800a4a0:	f023 0303 	bic.w	r3, r3, #3
 800a4a4:	3211      	adds	r2, #17
 800a4a6:	42a2      	cmp	r2, r4
 800a4a8:	bf88      	it	hi
 800a4aa:	2300      	movhi	r3, #0
 800a4ac:	4418      	add	r0, r3
 800a4ae:	2300      	movs	r3, #0
 800a4b0:	4288      	cmp	r0, r1
 800a4b2:	d305      	bcc.n	800a4c0 <__copybits+0x40>
 800a4b4:	bd70      	pop	{r4, r5, r6, pc}
 800a4b6:	f853 6b04 	ldr.w	r6, [r3], #4
 800a4ba:	f845 6f04 	str.w	r6, [r5, #4]!
 800a4be:	e7eb      	b.n	800a498 <__copybits+0x18>
 800a4c0:	f840 3b04 	str.w	r3, [r0], #4
 800a4c4:	e7f4      	b.n	800a4b0 <__copybits+0x30>

0800a4c6 <__any_on>:
 800a4c6:	f100 0214 	add.w	r2, r0, #20
 800a4ca:	6900      	ldr	r0, [r0, #16]
 800a4cc:	114b      	asrs	r3, r1, #5
 800a4ce:	4298      	cmp	r0, r3
 800a4d0:	b510      	push	{r4, lr}
 800a4d2:	db11      	blt.n	800a4f8 <__any_on+0x32>
 800a4d4:	dd0a      	ble.n	800a4ec <__any_on+0x26>
 800a4d6:	f011 011f 	ands.w	r1, r1, #31
 800a4da:	d007      	beq.n	800a4ec <__any_on+0x26>
 800a4dc:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a4e0:	fa24 f001 	lsr.w	r0, r4, r1
 800a4e4:	fa00 f101 	lsl.w	r1, r0, r1
 800a4e8:	428c      	cmp	r4, r1
 800a4ea:	d10b      	bne.n	800a504 <__any_on+0x3e>
 800a4ec:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a4f0:	4293      	cmp	r3, r2
 800a4f2:	d803      	bhi.n	800a4fc <__any_on+0x36>
 800a4f4:	2000      	movs	r0, #0
 800a4f6:	bd10      	pop	{r4, pc}
 800a4f8:	4603      	mov	r3, r0
 800a4fa:	e7f7      	b.n	800a4ec <__any_on+0x26>
 800a4fc:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a500:	2900      	cmp	r1, #0
 800a502:	d0f5      	beq.n	800a4f0 <__any_on+0x2a>
 800a504:	2001      	movs	r0, #1
 800a506:	e7f6      	b.n	800a4f6 <__any_on+0x30>

0800a508 <sulp>:
 800a508:	b570      	push	{r4, r5, r6, lr}
 800a50a:	4604      	mov	r4, r0
 800a50c:	460d      	mov	r5, r1
 800a50e:	ec45 4b10 	vmov	d0, r4, r5
 800a512:	4616      	mov	r6, r2
 800a514:	f7ff feba 	bl	800a28c <__ulp>
 800a518:	ec51 0b10 	vmov	r0, r1, d0
 800a51c:	b17e      	cbz	r6, 800a53e <sulp+0x36>
 800a51e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800a522:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800a526:	2b00      	cmp	r3, #0
 800a528:	dd09      	ble.n	800a53e <sulp+0x36>
 800a52a:	051b      	lsls	r3, r3, #20
 800a52c:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800a530:	2400      	movs	r4, #0
 800a532:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800a536:	4622      	mov	r2, r4
 800a538:	462b      	mov	r3, r5
 800a53a:	f7f6 f87d 	bl	8000638 <__aeabi_dmul>
 800a53e:	ec41 0b10 	vmov	d0, r0, r1
 800a542:	bd70      	pop	{r4, r5, r6, pc}
 800a544:	0000      	movs	r0, r0
	...

0800a548 <_strtod_l>:
 800a548:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a54c:	b09f      	sub	sp, #124	@ 0x7c
 800a54e:	460c      	mov	r4, r1
 800a550:	9217      	str	r2, [sp, #92]	@ 0x5c
 800a552:	2200      	movs	r2, #0
 800a554:	921a      	str	r2, [sp, #104]	@ 0x68
 800a556:	9005      	str	r0, [sp, #20]
 800a558:	f04f 0a00 	mov.w	sl, #0
 800a55c:	f04f 0b00 	mov.w	fp, #0
 800a560:	460a      	mov	r2, r1
 800a562:	9219      	str	r2, [sp, #100]	@ 0x64
 800a564:	7811      	ldrb	r1, [r2, #0]
 800a566:	292b      	cmp	r1, #43	@ 0x2b
 800a568:	d04a      	beq.n	800a600 <_strtod_l+0xb8>
 800a56a:	d838      	bhi.n	800a5de <_strtod_l+0x96>
 800a56c:	290d      	cmp	r1, #13
 800a56e:	d832      	bhi.n	800a5d6 <_strtod_l+0x8e>
 800a570:	2908      	cmp	r1, #8
 800a572:	d832      	bhi.n	800a5da <_strtod_l+0x92>
 800a574:	2900      	cmp	r1, #0
 800a576:	d03b      	beq.n	800a5f0 <_strtod_l+0xa8>
 800a578:	2200      	movs	r2, #0
 800a57a:	920b      	str	r2, [sp, #44]	@ 0x2c
 800a57c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800a57e:	782a      	ldrb	r2, [r5, #0]
 800a580:	2a30      	cmp	r2, #48	@ 0x30
 800a582:	f040 80b3 	bne.w	800a6ec <_strtod_l+0x1a4>
 800a586:	786a      	ldrb	r2, [r5, #1]
 800a588:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800a58c:	2a58      	cmp	r2, #88	@ 0x58
 800a58e:	d16e      	bne.n	800a66e <_strtod_l+0x126>
 800a590:	9302      	str	r3, [sp, #8]
 800a592:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a594:	9301      	str	r3, [sp, #4]
 800a596:	ab1a      	add	r3, sp, #104	@ 0x68
 800a598:	9300      	str	r3, [sp, #0]
 800a59a:	4a8e      	ldr	r2, [pc, #568]	@ (800a7d4 <_strtod_l+0x28c>)
 800a59c:	9805      	ldr	r0, [sp, #20]
 800a59e:	ab1b      	add	r3, sp, #108	@ 0x6c
 800a5a0:	a919      	add	r1, sp, #100	@ 0x64
 800a5a2:	f001 facf 	bl	800bb44 <__gethex>
 800a5a6:	f010 060f 	ands.w	r6, r0, #15
 800a5aa:	4604      	mov	r4, r0
 800a5ac:	d005      	beq.n	800a5ba <_strtod_l+0x72>
 800a5ae:	2e06      	cmp	r6, #6
 800a5b0:	d128      	bne.n	800a604 <_strtod_l+0xbc>
 800a5b2:	3501      	adds	r5, #1
 800a5b4:	2300      	movs	r3, #0
 800a5b6:	9519      	str	r5, [sp, #100]	@ 0x64
 800a5b8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a5ba:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	f040 858e 	bne.w	800b0de <_strtod_l+0xb96>
 800a5c2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a5c4:	b1cb      	cbz	r3, 800a5fa <_strtod_l+0xb2>
 800a5c6:	4652      	mov	r2, sl
 800a5c8:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800a5cc:	ec43 2b10 	vmov	d0, r2, r3
 800a5d0:	b01f      	add	sp, #124	@ 0x7c
 800a5d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5d6:	2920      	cmp	r1, #32
 800a5d8:	d1ce      	bne.n	800a578 <_strtod_l+0x30>
 800a5da:	3201      	adds	r2, #1
 800a5dc:	e7c1      	b.n	800a562 <_strtod_l+0x1a>
 800a5de:	292d      	cmp	r1, #45	@ 0x2d
 800a5e0:	d1ca      	bne.n	800a578 <_strtod_l+0x30>
 800a5e2:	2101      	movs	r1, #1
 800a5e4:	910b      	str	r1, [sp, #44]	@ 0x2c
 800a5e6:	1c51      	adds	r1, r2, #1
 800a5e8:	9119      	str	r1, [sp, #100]	@ 0x64
 800a5ea:	7852      	ldrb	r2, [r2, #1]
 800a5ec:	2a00      	cmp	r2, #0
 800a5ee:	d1c5      	bne.n	800a57c <_strtod_l+0x34>
 800a5f0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a5f2:	9419      	str	r4, [sp, #100]	@ 0x64
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	f040 8570 	bne.w	800b0da <_strtod_l+0xb92>
 800a5fa:	4652      	mov	r2, sl
 800a5fc:	465b      	mov	r3, fp
 800a5fe:	e7e5      	b.n	800a5cc <_strtod_l+0x84>
 800a600:	2100      	movs	r1, #0
 800a602:	e7ef      	b.n	800a5e4 <_strtod_l+0x9c>
 800a604:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800a606:	b13a      	cbz	r2, 800a618 <_strtod_l+0xd0>
 800a608:	2135      	movs	r1, #53	@ 0x35
 800a60a:	a81c      	add	r0, sp, #112	@ 0x70
 800a60c:	f7ff ff38 	bl	800a480 <__copybits>
 800a610:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a612:	9805      	ldr	r0, [sp, #20]
 800a614:	f7ff fb06 	bl	8009c24 <_Bfree>
 800a618:	3e01      	subs	r6, #1
 800a61a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800a61c:	2e04      	cmp	r6, #4
 800a61e:	d806      	bhi.n	800a62e <_strtod_l+0xe6>
 800a620:	e8df f006 	tbb	[pc, r6]
 800a624:	201d0314 	.word	0x201d0314
 800a628:	14          	.byte	0x14
 800a629:	00          	.byte	0x00
 800a62a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800a62e:	05e1      	lsls	r1, r4, #23
 800a630:	bf48      	it	mi
 800a632:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800a636:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a63a:	0d1b      	lsrs	r3, r3, #20
 800a63c:	051b      	lsls	r3, r3, #20
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d1bb      	bne.n	800a5ba <_strtod_l+0x72>
 800a642:	f7fe fbcf 	bl	8008de4 <__errno>
 800a646:	2322      	movs	r3, #34	@ 0x22
 800a648:	6003      	str	r3, [r0, #0]
 800a64a:	e7b6      	b.n	800a5ba <_strtod_l+0x72>
 800a64c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800a650:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800a654:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800a658:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800a65c:	e7e7      	b.n	800a62e <_strtod_l+0xe6>
 800a65e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800a7dc <_strtod_l+0x294>
 800a662:	e7e4      	b.n	800a62e <_strtod_l+0xe6>
 800a664:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800a668:	f04f 3aff 	mov.w	sl, #4294967295
 800a66c:	e7df      	b.n	800a62e <_strtod_l+0xe6>
 800a66e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a670:	1c5a      	adds	r2, r3, #1
 800a672:	9219      	str	r2, [sp, #100]	@ 0x64
 800a674:	785b      	ldrb	r3, [r3, #1]
 800a676:	2b30      	cmp	r3, #48	@ 0x30
 800a678:	d0f9      	beq.n	800a66e <_strtod_l+0x126>
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d09d      	beq.n	800a5ba <_strtod_l+0x72>
 800a67e:	2301      	movs	r3, #1
 800a680:	9309      	str	r3, [sp, #36]	@ 0x24
 800a682:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a684:	930c      	str	r3, [sp, #48]	@ 0x30
 800a686:	2300      	movs	r3, #0
 800a688:	9308      	str	r3, [sp, #32]
 800a68a:	930a      	str	r3, [sp, #40]	@ 0x28
 800a68c:	461f      	mov	r7, r3
 800a68e:	220a      	movs	r2, #10
 800a690:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800a692:	7805      	ldrb	r5, [r0, #0]
 800a694:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800a698:	b2d9      	uxtb	r1, r3
 800a69a:	2909      	cmp	r1, #9
 800a69c:	d928      	bls.n	800a6f0 <_strtod_l+0x1a8>
 800a69e:	494e      	ldr	r1, [pc, #312]	@ (800a7d8 <_strtod_l+0x290>)
 800a6a0:	2201      	movs	r2, #1
 800a6a2:	f001 f979 	bl	800b998 <strncmp>
 800a6a6:	2800      	cmp	r0, #0
 800a6a8:	d032      	beq.n	800a710 <_strtod_l+0x1c8>
 800a6aa:	2000      	movs	r0, #0
 800a6ac:	462a      	mov	r2, r5
 800a6ae:	4681      	mov	r9, r0
 800a6b0:	463d      	mov	r5, r7
 800a6b2:	4603      	mov	r3, r0
 800a6b4:	2a65      	cmp	r2, #101	@ 0x65
 800a6b6:	d001      	beq.n	800a6bc <_strtod_l+0x174>
 800a6b8:	2a45      	cmp	r2, #69	@ 0x45
 800a6ba:	d114      	bne.n	800a6e6 <_strtod_l+0x19e>
 800a6bc:	b91d      	cbnz	r5, 800a6c6 <_strtod_l+0x17e>
 800a6be:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a6c0:	4302      	orrs	r2, r0
 800a6c2:	d095      	beq.n	800a5f0 <_strtod_l+0xa8>
 800a6c4:	2500      	movs	r5, #0
 800a6c6:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800a6c8:	1c62      	adds	r2, r4, #1
 800a6ca:	9219      	str	r2, [sp, #100]	@ 0x64
 800a6cc:	7862      	ldrb	r2, [r4, #1]
 800a6ce:	2a2b      	cmp	r2, #43	@ 0x2b
 800a6d0:	d077      	beq.n	800a7c2 <_strtod_l+0x27a>
 800a6d2:	2a2d      	cmp	r2, #45	@ 0x2d
 800a6d4:	d07b      	beq.n	800a7ce <_strtod_l+0x286>
 800a6d6:	f04f 0c00 	mov.w	ip, #0
 800a6da:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800a6de:	2909      	cmp	r1, #9
 800a6e0:	f240 8082 	bls.w	800a7e8 <_strtod_l+0x2a0>
 800a6e4:	9419      	str	r4, [sp, #100]	@ 0x64
 800a6e6:	f04f 0800 	mov.w	r8, #0
 800a6ea:	e0a2      	b.n	800a832 <_strtod_l+0x2ea>
 800a6ec:	2300      	movs	r3, #0
 800a6ee:	e7c7      	b.n	800a680 <_strtod_l+0x138>
 800a6f0:	2f08      	cmp	r7, #8
 800a6f2:	bfd5      	itete	le
 800a6f4:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800a6f6:	9908      	ldrgt	r1, [sp, #32]
 800a6f8:	fb02 3301 	mlale	r3, r2, r1, r3
 800a6fc:	fb02 3301 	mlagt	r3, r2, r1, r3
 800a700:	f100 0001 	add.w	r0, r0, #1
 800a704:	bfd4      	ite	le
 800a706:	930a      	strle	r3, [sp, #40]	@ 0x28
 800a708:	9308      	strgt	r3, [sp, #32]
 800a70a:	3701      	adds	r7, #1
 800a70c:	9019      	str	r0, [sp, #100]	@ 0x64
 800a70e:	e7bf      	b.n	800a690 <_strtod_l+0x148>
 800a710:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a712:	1c5a      	adds	r2, r3, #1
 800a714:	9219      	str	r2, [sp, #100]	@ 0x64
 800a716:	785a      	ldrb	r2, [r3, #1]
 800a718:	b37f      	cbz	r7, 800a77a <_strtod_l+0x232>
 800a71a:	4681      	mov	r9, r0
 800a71c:	463d      	mov	r5, r7
 800a71e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800a722:	2b09      	cmp	r3, #9
 800a724:	d912      	bls.n	800a74c <_strtod_l+0x204>
 800a726:	2301      	movs	r3, #1
 800a728:	e7c4      	b.n	800a6b4 <_strtod_l+0x16c>
 800a72a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a72c:	1c5a      	adds	r2, r3, #1
 800a72e:	9219      	str	r2, [sp, #100]	@ 0x64
 800a730:	785a      	ldrb	r2, [r3, #1]
 800a732:	3001      	adds	r0, #1
 800a734:	2a30      	cmp	r2, #48	@ 0x30
 800a736:	d0f8      	beq.n	800a72a <_strtod_l+0x1e2>
 800a738:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800a73c:	2b08      	cmp	r3, #8
 800a73e:	f200 84d3 	bhi.w	800b0e8 <_strtod_l+0xba0>
 800a742:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a744:	930c      	str	r3, [sp, #48]	@ 0x30
 800a746:	4681      	mov	r9, r0
 800a748:	2000      	movs	r0, #0
 800a74a:	4605      	mov	r5, r0
 800a74c:	3a30      	subs	r2, #48	@ 0x30
 800a74e:	f100 0301 	add.w	r3, r0, #1
 800a752:	d02a      	beq.n	800a7aa <_strtod_l+0x262>
 800a754:	4499      	add	r9, r3
 800a756:	eb00 0c05 	add.w	ip, r0, r5
 800a75a:	462b      	mov	r3, r5
 800a75c:	210a      	movs	r1, #10
 800a75e:	4563      	cmp	r3, ip
 800a760:	d10d      	bne.n	800a77e <_strtod_l+0x236>
 800a762:	1c69      	adds	r1, r5, #1
 800a764:	4401      	add	r1, r0
 800a766:	4428      	add	r0, r5
 800a768:	2808      	cmp	r0, #8
 800a76a:	dc16      	bgt.n	800a79a <_strtod_l+0x252>
 800a76c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800a76e:	230a      	movs	r3, #10
 800a770:	fb03 2300 	mla	r3, r3, r0, r2
 800a774:	930a      	str	r3, [sp, #40]	@ 0x28
 800a776:	2300      	movs	r3, #0
 800a778:	e018      	b.n	800a7ac <_strtod_l+0x264>
 800a77a:	4638      	mov	r0, r7
 800a77c:	e7da      	b.n	800a734 <_strtod_l+0x1ec>
 800a77e:	2b08      	cmp	r3, #8
 800a780:	f103 0301 	add.w	r3, r3, #1
 800a784:	dc03      	bgt.n	800a78e <_strtod_l+0x246>
 800a786:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800a788:	434e      	muls	r6, r1
 800a78a:	960a      	str	r6, [sp, #40]	@ 0x28
 800a78c:	e7e7      	b.n	800a75e <_strtod_l+0x216>
 800a78e:	2b10      	cmp	r3, #16
 800a790:	bfde      	ittt	le
 800a792:	9e08      	ldrle	r6, [sp, #32]
 800a794:	434e      	mulle	r6, r1
 800a796:	9608      	strle	r6, [sp, #32]
 800a798:	e7e1      	b.n	800a75e <_strtod_l+0x216>
 800a79a:	280f      	cmp	r0, #15
 800a79c:	dceb      	bgt.n	800a776 <_strtod_l+0x22e>
 800a79e:	9808      	ldr	r0, [sp, #32]
 800a7a0:	230a      	movs	r3, #10
 800a7a2:	fb03 2300 	mla	r3, r3, r0, r2
 800a7a6:	9308      	str	r3, [sp, #32]
 800a7a8:	e7e5      	b.n	800a776 <_strtod_l+0x22e>
 800a7aa:	4629      	mov	r1, r5
 800a7ac:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a7ae:	1c50      	adds	r0, r2, #1
 800a7b0:	9019      	str	r0, [sp, #100]	@ 0x64
 800a7b2:	7852      	ldrb	r2, [r2, #1]
 800a7b4:	4618      	mov	r0, r3
 800a7b6:	460d      	mov	r5, r1
 800a7b8:	e7b1      	b.n	800a71e <_strtod_l+0x1d6>
 800a7ba:	f04f 0900 	mov.w	r9, #0
 800a7be:	2301      	movs	r3, #1
 800a7c0:	e77d      	b.n	800a6be <_strtod_l+0x176>
 800a7c2:	f04f 0c00 	mov.w	ip, #0
 800a7c6:	1ca2      	adds	r2, r4, #2
 800a7c8:	9219      	str	r2, [sp, #100]	@ 0x64
 800a7ca:	78a2      	ldrb	r2, [r4, #2]
 800a7cc:	e785      	b.n	800a6da <_strtod_l+0x192>
 800a7ce:	f04f 0c01 	mov.w	ip, #1
 800a7d2:	e7f8      	b.n	800a7c6 <_strtod_l+0x27e>
 800a7d4:	0800fe20 	.word	0x0800fe20
 800a7d8:	0800fe08 	.word	0x0800fe08
 800a7dc:	7ff00000 	.word	0x7ff00000
 800a7e0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a7e2:	1c51      	adds	r1, r2, #1
 800a7e4:	9119      	str	r1, [sp, #100]	@ 0x64
 800a7e6:	7852      	ldrb	r2, [r2, #1]
 800a7e8:	2a30      	cmp	r2, #48	@ 0x30
 800a7ea:	d0f9      	beq.n	800a7e0 <_strtod_l+0x298>
 800a7ec:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800a7f0:	2908      	cmp	r1, #8
 800a7f2:	f63f af78 	bhi.w	800a6e6 <_strtod_l+0x19e>
 800a7f6:	3a30      	subs	r2, #48	@ 0x30
 800a7f8:	920e      	str	r2, [sp, #56]	@ 0x38
 800a7fa:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a7fc:	920f      	str	r2, [sp, #60]	@ 0x3c
 800a7fe:	f04f 080a 	mov.w	r8, #10
 800a802:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a804:	1c56      	adds	r6, r2, #1
 800a806:	9619      	str	r6, [sp, #100]	@ 0x64
 800a808:	7852      	ldrb	r2, [r2, #1]
 800a80a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800a80e:	f1be 0f09 	cmp.w	lr, #9
 800a812:	d939      	bls.n	800a888 <_strtod_l+0x340>
 800a814:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800a816:	1a76      	subs	r6, r6, r1
 800a818:	2e08      	cmp	r6, #8
 800a81a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800a81e:	dc03      	bgt.n	800a828 <_strtod_l+0x2e0>
 800a820:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800a822:	4588      	cmp	r8, r1
 800a824:	bfa8      	it	ge
 800a826:	4688      	movge	r8, r1
 800a828:	f1bc 0f00 	cmp.w	ip, #0
 800a82c:	d001      	beq.n	800a832 <_strtod_l+0x2ea>
 800a82e:	f1c8 0800 	rsb	r8, r8, #0
 800a832:	2d00      	cmp	r5, #0
 800a834:	d14e      	bne.n	800a8d4 <_strtod_l+0x38c>
 800a836:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a838:	4308      	orrs	r0, r1
 800a83a:	f47f aebe 	bne.w	800a5ba <_strtod_l+0x72>
 800a83e:	2b00      	cmp	r3, #0
 800a840:	f47f aed6 	bne.w	800a5f0 <_strtod_l+0xa8>
 800a844:	2a69      	cmp	r2, #105	@ 0x69
 800a846:	d028      	beq.n	800a89a <_strtod_l+0x352>
 800a848:	dc25      	bgt.n	800a896 <_strtod_l+0x34e>
 800a84a:	2a49      	cmp	r2, #73	@ 0x49
 800a84c:	d025      	beq.n	800a89a <_strtod_l+0x352>
 800a84e:	2a4e      	cmp	r2, #78	@ 0x4e
 800a850:	f47f aece 	bne.w	800a5f0 <_strtod_l+0xa8>
 800a854:	499b      	ldr	r1, [pc, #620]	@ (800aac4 <_strtod_l+0x57c>)
 800a856:	a819      	add	r0, sp, #100	@ 0x64
 800a858:	f001 fb96 	bl	800bf88 <__match>
 800a85c:	2800      	cmp	r0, #0
 800a85e:	f43f aec7 	beq.w	800a5f0 <_strtod_l+0xa8>
 800a862:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a864:	781b      	ldrb	r3, [r3, #0]
 800a866:	2b28      	cmp	r3, #40	@ 0x28
 800a868:	d12e      	bne.n	800a8c8 <_strtod_l+0x380>
 800a86a:	4997      	ldr	r1, [pc, #604]	@ (800aac8 <_strtod_l+0x580>)
 800a86c:	aa1c      	add	r2, sp, #112	@ 0x70
 800a86e:	a819      	add	r0, sp, #100	@ 0x64
 800a870:	f001 fb9e 	bl	800bfb0 <__hexnan>
 800a874:	2805      	cmp	r0, #5
 800a876:	d127      	bne.n	800a8c8 <_strtod_l+0x380>
 800a878:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800a87a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800a87e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800a882:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800a886:	e698      	b.n	800a5ba <_strtod_l+0x72>
 800a888:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800a88a:	fb08 2101 	mla	r1, r8, r1, r2
 800a88e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800a892:	920e      	str	r2, [sp, #56]	@ 0x38
 800a894:	e7b5      	b.n	800a802 <_strtod_l+0x2ba>
 800a896:	2a6e      	cmp	r2, #110	@ 0x6e
 800a898:	e7da      	b.n	800a850 <_strtod_l+0x308>
 800a89a:	498c      	ldr	r1, [pc, #560]	@ (800aacc <_strtod_l+0x584>)
 800a89c:	a819      	add	r0, sp, #100	@ 0x64
 800a89e:	f001 fb73 	bl	800bf88 <__match>
 800a8a2:	2800      	cmp	r0, #0
 800a8a4:	f43f aea4 	beq.w	800a5f0 <_strtod_l+0xa8>
 800a8a8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a8aa:	4989      	ldr	r1, [pc, #548]	@ (800aad0 <_strtod_l+0x588>)
 800a8ac:	3b01      	subs	r3, #1
 800a8ae:	a819      	add	r0, sp, #100	@ 0x64
 800a8b0:	9319      	str	r3, [sp, #100]	@ 0x64
 800a8b2:	f001 fb69 	bl	800bf88 <__match>
 800a8b6:	b910      	cbnz	r0, 800a8be <_strtod_l+0x376>
 800a8b8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a8ba:	3301      	adds	r3, #1
 800a8bc:	9319      	str	r3, [sp, #100]	@ 0x64
 800a8be:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800aae0 <_strtod_l+0x598>
 800a8c2:	f04f 0a00 	mov.w	sl, #0
 800a8c6:	e678      	b.n	800a5ba <_strtod_l+0x72>
 800a8c8:	4882      	ldr	r0, [pc, #520]	@ (800aad4 <_strtod_l+0x58c>)
 800a8ca:	f001 f899 	bl	800ba00 <nan>
 800a8ce:	ec5b ab10 	vmov	sl, fp, d0
 800a8d2:	e672      	b.n	800a5ba <_strtod_l+0x72>
 800a8d4:	eba8 0309 	sub.w	r3, r8, r9
 800a8d8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800a8da:	9309      	str	r3, [sp, #36]	@ 0x24
 800a8dc:	2f00      	cmp	r7, #0
 800a8de:	bf08      	it	eq
 800a8e0:	462f      	moveq	r7, r5
 800a8e2:	2d10      	cmp	r5, #16
 800a8e4:	462c      	mov	r4, r5
 800a8e6:	bfa8      	it	ge
 800a8e8:	2410      	movge	r4, #16
 800a8ea:	f7f5 fe2b 	bl	8000544 <__aeabi_ui2d>
 800a8ee:	2d09      	cmp	r5, #9
 800a8f0:	4682      	mov	sl, r0
 800a8f2:	468b      	mov	fp, r1
 800a8f4:	dc13      	bgt.n	800a91e <_strtod_l+0x3d6>
 800a8f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	f43f ae5e 	beq.w	800a5ba <_strtod_l+0x72>
 800a8fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a900:	dd78      	ble.n	800a9f4 <_strtod_l+0x4ac>
 800a902:	2b16      	cmp	r3, #22
 800a904:	dc5f      	bgt.n	800a9c6 <_strtod_l+0x47e>
 800a906:	4974      	ldr	r1, [pc, #464]	@ (800aad8 <_strtod_l+0x590>)
 800a908:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a90c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a910:	4652      	mov	r2, sl
 800a912:	465b      	mov	r3, fp
 800a914:	f7f5 fe90 	bl	8000638 <__aeabi_dmul>
 800a918:	4682      	mov	sl, r0
 800a91a:	468b      	mov	fp, r1
 800a91c:	e64d      	b.n	800a5ba <_strtod_l+0x72>
 800a91e:	4b6e      	ldr	r3, [pc, #440]	@ (800aad8 <_strtod_l+0x590>)
 800a920:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a924:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800a928:	f7f5 fe86 	bl	8000638 <__aeabi_dmul>
 800a92c:	4682      	mov	sl, r0
 800a92e:	9808      	ldr	r0, [sp, #32]
 800a930:	468b      	mov	fp, r1
 800a932:	f7f5 fe07 	bl	8000544 <__aeabi_ui2d>
 800a936:	4602      	mov	r2, r0
 800a938:	460b      	mov	r3, r1
 800a93a:	4650      	mov	r0, sl
 800a93c:	4659      	mov	r1, fp
 800a93e:	f7f5 fcc5 	bl	80002cc <__adddf3>
 800a942:	2d0f      	cmp	r5, #15
 800a944:	4682      	mov	sl, r0
 800a946:	468b      	mov	fp, r1
 800a948:	ddd5      	ble.n	800a8f6 <_strtod_l+0x3ae>
 800a94a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a94c:	1b2c      	subs	r4, r5, r4
 800a94e:	441c      	add	r4, r3
 800a950:	2c00      	cmp	r4, #0
 800a952:	f340 8096 	ble.w	800aa82 <_strtod_l+0x53a>
 800a956:	f014 030f 	ands.w	r3, r4, #15
 800a95a:	d00a      	beq.n	800a972 <_strtod_l+0x42a>
 800a95c:	495e      	ldr	r1, [pc, #376]	@ (800aad8 <_strtod_l+0x590>)
 800a95e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a962:	4652      	mov	r2, sl
 800a964:	465b      	mov	r3, fp
 800a966:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a96a:	f7f5 fe65 	bl	8000638 <__aeabi_dmul>
 800a96e:	4682      	mov	sl, r0
 800a970:	468b      	mov	fp, r1
 800a972:	f034 040f 	bics.w	r4, r4, #15
 800a976:	d073      	beq.n	800aa60 <_strtod_l+0x518>
 800a978:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800a97c:	dd48      	ble.n	800aa10 <_strtod_l+0x4c8>
 800a97e:	2400      	movs	r4, #0
 800a980:	46a0      	mov	r8, r4
 800a982:	940a      	str	r4, [sp, #40]	@ 0x28
 800a984:	46a1      	mov	r9, r4
 800a986:	9a05      	ldr	r2, [sp, #20]
 800a988:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800aae0 <_strtod_l+0x598>
 800a98c:	2322      	movs	r3, #34	@ 0x22
 800a98e:	6013      	str	r3, [r2, #0]
 800a990:	f04f 0a00 	mov.w	sl, #0
 800a994:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a996:	2b00      	cmp	r3, #0
 800a998:	f43f ae0f 	beq.w	800a5ba <_strtod_l+0x72>
 800a99c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a99e:	9805      	ldr	r0, [sp, #20]
 800a9a0:	f7ff f940 	bl	8009c24 <_Bfree>
 800a9a4:	9805      	ldr	r0, [sp, #20]
 800a9a6:	4649      	mov	r1, r9
 800a9a8:	f7ff f93c 	bl	8009c24 <_Bfree>
 800a9ac:	9805      	ldr	r0, [sp, #20]
 800a9ae:	4641      	mov	r1, r8
 800a9b0:	f7ff f938 	bl	8009c24 <_Bfree>
 800a9b4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a9b6:	9805      	ldr	r0, [sp, #20]
 800a9b8:	f7ff f934 	bl	8009c24 <_Bfree>
 800a9bc:	9805      	ldr	r0, [sp, #20]
 800a9be:	4621      	mov	r1, r4
 800a9c0:	f7ff f930 	bl	8009c24 <_Bfree>
 800a9c4:	e5f9      	b.n	800a5ba <_strtod_l+0x72>
 800a9c6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a9c8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800a9cc:	4293      	cmp	r3, r2
 800a9ce:	dbbc      	blt.n	800a94a <_strtod_l+0x402>
 800a9d0:	4c41      	ldr	r4, [pc, #260]	@ (800aad8 <_strtod_l+0x590>)
 800a9d2:	f1c5 050f 	rsb	r5, r5, #15
 800a9d6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800a9da:	4652      	mov	r2, sl
 800a9dc:	465b      	mov	r3, fp
 800a9de:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a9e2:	f7f5 fe29 	bl	8000638 <__aeabi_dmul>
 800a9e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a9e8:	1b5d      	subs	r5, r3, r5
 800a9ea:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800a9ee:	e9d4 2300 	ldrd	r2, r3, [r4]
 800a9f2:	e78f      	b.n	800a914 <_strtod_l+0x3cc>
 800a9f4:	3316      	adds	r3, #22
 800a9f6:	dba8      	blt.n	800a94a <_strtod_l+0x402>
 800a9f8:	4b37      	ldr	r3, [pc, #220]	@ (800aad8 <_strtod_l+0x590>)
 800a9fa:	eba9 0808 	sub.w	r8, r9, r8
 800a9fe:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800aa02:	e9d8 2300 	ldrd	r2, r3, [r8]
 800aa06:	4650      	mov	r0, sl
 800aa08:	4659      	mov	r1, fp
 800aa0a:	f7f5 ff3f 	bl	800088c <__aeabi_ddiv>
 800aa0e:	e783      	b.n	800a918 <_strtod_l+0x3d0>
 800aa10:	4b32      	ldr	r3, [pc, #200]	@ (800aadc <_strtod_l+0x594>)
 800aa12:	9308      	str	r3, [sp, #32]
 800aa14:	2300      	movs	r3, #0
 800aa16:	1124      	asrs	r4, r4, #4
 800aa18:	4650      	mov	r0, sl
 800aa1a:	4659      	mov	r1, fp
 800aa1c:	461e      	mov	r6, r3
 800aa1e:	2c01      	cmp	r4, #1
 800aa20:	dc21      	bgt.n	800aa66 <_strtod_l+0x51e>
 800aa22:	b10b      	cbz	r3, 800aa28 <_strtod_l+0x4e0>
 800aa24:	4682      	mov	sl, r0
 800aa26:	468b      	mov	fp, r1
 800aa28:	492c      	ldr	r1, [pc, #176]	@ (800aadc <_strtod_l+0x594>)
 800aa2a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800aa2e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800aa32:	4652      	mov	r2, sl
 800aa34:	465b      	mov	r3, fp
 800aa36:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aa3a:	f7f5 fdfd 	bl	8000638 <__aeabi_dmul>
 800aa3e:	4b28      	ldr	r3, [pc, #160]	@ (800aae0 <_strtod_l+0x598>)
 800aa40:	460a      	mov	r2, r1
 800aa42:	400b      	ands	r3, r1
 800aa44:	4927      	ldr	r1, [pc, #156]	@ (800aae4 <_strtod_l+0x59c>)
 800aa46:	428b      	cmp	r3, r1
 800aa48:	4682      	mov	sl, r0
 800aa4a:	d898      	bhi.n	800a97e <_strtod_l+0x436>
 800aa4c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800aa50:	428b      	cmp	r3, r1
 800aa52:	bf86      	itte	hi
 800aa54:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800aae8 <_strtod_l+0x5a0>
 800aa58:	f04f 3aff 	movhi.w	sl, #4294967295
 800aa5c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800aa60:	2300      	movs	r3, #0
 800aa62:	9308      	str	r3, [sp, #32]
 800aa64:	e07a      	b.n	800ab5c <_strtod_l+0x614>
 800aa66:	07e2      	lsls	r2, r4, #31
 800aa68:	d505      	bpl.n	800aa76 <_strtod_l+0x52e>
 800aa6a:	9b08      	ldr	r3, [sp, #32]
 800aa6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa70:	f7f5 fde2 	bl	8000638 <__aeabi_dmul>
 800aa74:	2301      	movs	r3, #1
 800aa76:	9a08      	ldr	r2, [sp, #32]
 800aa78:	3208      	adds	r2, #8
 800aa7a:	3601      	adds	r6, #1
 800aa7c:	1064      	asrs	r4, r4, #1
 800aa7e:	9208      	str	r2, [sp, #32]
 800aa80:	e7cd      	b.n	800aa1e <_strtod_l+0x4d6>
 800aa82:	d0ed      	beq.n	800aa60 <_strtod_l+0x518>
 800aa84:	4264      	negs	r4, r4
 800aa86:	f014 020f 	ands.w	r2, r4, #15
 800aa8a:	d00a      	beq.n	800aaa2 <_strtod_l+0x55a>
 800aa8c:	4b12      	ldr	r3, [pc, #72]	@ (800aad8 <_strtod_l+0x590>)
 800aa8e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800aa92:	4650      	mov	r0, sl
 800aa94:	4659      	mov	r1, fp
 800aa96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa9a:	f7f5 fef7 	bl	800088c <__aeabi_ddiv>
 800aa9e:	4682      	mov	sl, r0
 800aaa0:	468b      	mov	fp, r1
 800aaa2:	1124      	asrs	r4, r4, #4
 800aaa4:	d0dc      	beq.n	800aa60 <_strtod_l+0x518>
 800aaa6:	2c1f      	cmp	r4, #31
 800aaa8:	dd20      	ble.n	800aaec <_strtod_l+0x5a4>
 800aaaa:	2400      	movs	r4, #0
 800aaac:	46a0      	mov	r8, r4
 800aaae:	940a      	str	r4, [sp, #40]	@ 0x28
 800aab0:	46a1      	mov	r9, r4
 800aab2:	9a05      	ldr	r2, [sp, #20]
 800aab4:	2322      	movs	r3, #34	@ 0x22
 800aab6:	f04f 0a00 	mov.w	sl, #0
 800aaba:	f04f 0b00 	mov.w	fp, #0
 800aabe:	6013      	str	r3, [r2, #0]
 800aac0:	e768      	b.n	800a994 <_strtod_l+0x44c>
 800aac2:	bf00      	nop
 800aac4:	0800fbf9 	.word	0x0800fbf9
 800aac8:	0800fe0c 	.word	0x0800fe0c
 800aacc:	0800fbf1 	.word	0x0800fbf1
 800aad0:	0800fc28 	.word	0x0800fc28
 800aad4:	0800ffb5 	.word	0x0800ffb5
 800aad8:	0800fd40 	.word	0x0800fd40
 800aadc:	0800fd18 	.word	0x0800fd18
 800aae0:	7ff00000 	.word	0x7ff00000
 800aae4:	7ca00000 	.word	0x7ca00000
 800aae8:	7fefffff 	.word	0x7fefffff
 800aaec:	f014 0310 	ands.w	r3, r4, #16
 800aaf0:	bf18      	it	ne
 800aaf2:	236a      	movne	r3, #106	@ 0x6a
 800aaf4:	4ea9      	ldr	r6, [pc, #676]	@ (800ad9c <_strtod_l+0x854>)
 800aaf6:	9308      	str	r3, [sp, #32]
 800aaf8:	4650      	mov	r0, sl
 800aafa:	4659      	mov	r1, fp
 800aafc:	2300      	movs	r3, #0
 800aafe:	07e2      	lsls	r2, r4, #31
 800ab00:	d504      	bpl.n	800ab0c <_strtod_l+0x5c4>
 800ab02:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ab06:	f7f5 fd97 	bl	8000638 <__aeabi_dmul>
 800ab0a:	2301      	movs	r3, #1
 800ab0c:	1064      	asrs	r4, r4, #1
 800ab0e:	f106 0608 	add.w	r6, r6, #8
 800ab12:	d1f4      	bne.n	800aafe <_strtod_l+0x5b6>
 800ab14:	b10b      	cbz	r3, 800ab1a <_strtod_l+0x5d2>
 800ab16:	4682      	mov	sl, r0
 800ab18:	468b      	mov	fp, r1
 800ab1a:	9b08      	ldr	r3, [sp, #32]
 800ab1c:	b1b3      	cbz	r3, 800ab4c <_strtod_l+0x604>
 800ab1e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800ab22:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	4659      	mov	r1, fp
 800ab2a:	dd0f      	ble.n	800ab4c <_strtod_l+0x604>
 800ab2c:	2b1f      	cmp	r3, #31
 800ab2e:	dd55      	ble.n	800abdc <_strtod_l+0x694>
 800ab30:	2b34      	cmp	r3, #52	@ 0x34
 800ab32:	bfde      	ittt	le
 800ab34:	f04f 33ff 	movle.w	r3, #4294967295
 800ab38:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800ab3c:	4093      	lslle	r3, r2
 800ab3e:	f04f 0a00 	mov.w	sl, #0
 800ab42:	bfcc      	ite	gt
 800ab44:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800ab48:	ea03 0b01 	andle.w	fp, r3, r1
 800ab4c:	2200      	movs	r2, #0
 800ab4e:	2300      	movs	r3, #0
 800ab50:	4650      	mov	r0, sl
 800ab52:	4659      	mov	r1, fp
 800ab54:	f7f5 ffd8 	bl	8000b08 <__aeabi_dcmpeq>
 800ab58:	2800      	cmp	r0, #0
 800ab5a:	d1a6      	bne.n	800aaaa <_strtod_l+0x562>
 800ab5c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ab5e:	9300      	str	r3, [sp, #0]
 800ab60:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800ab62:	9805      	ldr	r0, [sp, #20]
 800ab64:	462b      	mov	r3, r5
 800ab66:	463a      	mov	r2, r7
 800ab68:	f7ff f8c4 	bl	8009cf4 <__s2b>
 800ab6c:	900a      	str	r0, [sp, #40]	@ 0x28
 800ab6e:	2800      	cmp	r0, #0
 800ab70:	f43f af05 	beq.w	800a97e <_strtod_l+0x436>
 800ab74:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ab76:	2a00      	cmp	r2, #0
 800ab78:	eba9 0308 	sub.w	r3, r9, r8
 800ab7c:	bfa8      	it	ge
 800ab7e:	2300      	movge	r3, #0
 800ab80:	9312      	str	r3, [sp, #72]	@ 0x48
 800ab82:	2400      	movs	r4, #0
 800ab84:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800ab88:	9316      	str	r3, [sp, #88]	@ 0x58
 800ab8a:	46a0      	mov	r8, r4
 800ab8c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ab8e:	9805      	ldr	r0, [sp, #20]
 800ab90:	6859      	ldr	r1, [r3, #4]
 800ab92:	f7ff f807 	bl	8009ba4 <_Balloc>
 800ab96:	4681      	mov	r9, r0
 800ab98:	2800      	cmp	r0, #0
 800ab9a:	f43f aef4 	beq.w	800a986 <_strtod_l+0x43e>
 800ab9e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800aba0:	691a      	ldr	r2, [r3, #16]
 800aba2:	3202      	adds	r2, #2
 800aba4:	f103 010c 	add.w	r1, r3, #12
 800aba8:	0092      	lsls	r2, r2, #2
 800abaa:	300c      	adds	r0, #12
 800abac:	f7fe f94f 	bl	8008e4e <memcpy>
 800abb0:	ec4b ab10 	vmov	d0, sl, fp
 800abb4:	9805      	ldr	r0, [sp, #20]
 800abb6:	aa1c      	add	r2, sp, #112	@ 0x70
 800abb8:	a91b      	add	r1, sp, #108	@ 0x6c
 800abba:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800abbe:	f7ff fbd5 	bl	800a36c <__d2b>
 800abc2:	901a      	str	r0, [sp, #104]	@ 0x68
 800abc4:	2800      	cmp	r0, #0
 800abc6:	f43f aede 	beq.w	800a986 <_strtod_l+0x43e>
 800abca:	9805      	ldr	r0, [sp, #20]
 800abcc:	2101      	movs	r1, #1
 800abce:	f7ff f927 	bl	8009e20 <__i2b>
 800abd2:	4680      	mov	r8, r0
 800abd4:	b948      	cbnz	r0, 800abea <_strtod_l+0x6a2>
 800abd6:	f04f 0800 	mov.w	r8, #0
 800abda:	e6d4      	b.n	800a986 <_strtod_l+0x43e>
 800abdc:	f04f 32ff 	mov.w	r2, #4294967295
 800abe0:	fa02 f303 	lsl.w	r3, r2, r3
 800abe4:	ea03 0a0a 	and.w	sl, r3, sl
 800abe8:	e7b0      	b.n	800ab4c <_strtod_l+0x604>
 800abea:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800abec:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800abee:	2d00      	cmp	r5, #0
 800abf0:	bfab      	itete	ge
 800abf2:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800abf4:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800abf6:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800abf8:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800abfa:	bfac      	ite	ge
 800abfc:	18ef      	addge	r7, r5, r3
 800abfe:	1b5e      	sublt	r6, r3, r5
 800ac00:	9b08      	ldr	r3, [sp, #32]
 800ac02:	1aed      	subs	r5, r5, r3
 800ac04:	4415      	add	r5, r2
 800ac06:	4b66      	ldr	r3, [pc, #408]	@ (800ada0 <_strtod_l+0x858>)
 800ac08:	3d01      	subs	r5, #1
 800ac0a:	429d      	cmp	r5, r3
 800ac0c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800ac10:	da50      	bge.n	800acb4 <_strtod_l+0x76c>
 800ac12:	1b5b      	subs	r3, r3, r5
 800ac14:	2b1f      	cmp	r3, #31
 800ac16:	eba2 0203 	sub.w	r2, r2, r3
 800ac1a:	f04f 0101 	mov.w	r1, #1
 800ac1e:	dc3d      	bgt.n	800ac9c <_strtod_l+0x754>
 800ac20:	fa01 f303 	lsl.w	r3, r1, r3
 800ac24:	9313      	str	r3, [sp, #76]	@ 0x4c
 800ac26:	2300      	movs	r3, #0
 800ac28:	9310      	str	r3, [sp, #64]	@ 0x40
 800ac2a:	18bd      	adds	r5, r7, r2
 800ac2c:	9b08      	ldr	r3, [sp, #32]
 800ac2e:	42af      	cmp	r7, r5
 800ac30:	4416      	add	r6, r2
 800ac32:	441e      	add	r6, r3
 800ac34:	463b      	mov	r3, r7
 800ac36:	bfa8      	it	ge
 800ac38:	462b      	movge	r3, r5
 800ac3a:	42b3      	cmp	r3, r6
 800ac3c:	bfa8      	it	ge
 800ac3e:	4633      	movge	r3, r6
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	bfc2      	ittt	gt
 800ac44:	1aed      	subgt	r5, r5, r3
 800ac46:	1af6      	subgt	r6, r6, r3
 800ac48:	1aff      	subgt	r7, r7, r3
 800ac4a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	dd16      	ble.n	800ac7e <_strtod_l+0x736>
 800ac50:	4641      	mov	r1, r8
 800ac52:	9805      	ldr	r0, [sp, #20]
 800ac54:	461a      	mov	r2, r3
 800ac56:	f7ff f9a3 	bl	8009fa0 <__pow5mult>
 800ac5a:	4680      	mov	r8, r0
 800ac5c:	2800      	cmp	r0, #0
 800ac5e:	d0ba      	beq.n	800abd6 <_strtod_l+0x68e>
 800ac60:	4601      	mov	r1, r0
 800ac62:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800ac64:	9805      	ldr	r0, [sp, #20]
 800ac66:	f7ff f8f1 	bl	8009e4c <__multiply>
 800ac6a:	900e      	str	r0, [sp, #56]	@ 0x38
 800ac6c:	2800      	cmp	r0, #0
 800ac6e:	f43f ae8a 	beq.w	800a986 <_strtod_l+0x43e>
 800ac72:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ac74:	9805      	ldr	r0, [sp, #20]
 800ac76:	f7fe ffd5 	bl	8009c24 <_Bfree>
 800ac7a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ac7c:	931a      	str	r3, [sp, #104]	@ 0x68
 800ac7e:	2d00      	cmp	r5, #0
 800ac80:	dc1d      	bgt.n	800acbe <_strtod_l+0x776>
 800ac82:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	dd23      	ble.n	800acd0 <_strtod_l+0x788>
 800ac88:	4649      	mov	r1, r9
 800ac8a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800ac8c:	9805      	ldr	r0, [sp, #20]
 800ac8e:	f7ff f987 	bl	8009fa0 <__pow5mult>
 800ac92:	4681      	mov	r9, r0
 800ac94:	b9e0      	cbnz	r0, 800acd0 <_strtod_l+0x788>
 800ac96:	f04f 0900 	mov.w	r9, #0
 800ac9a:	e674      	b.n	800a986 <_strtod_l+0x43e>
 800ac9c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800aca0:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800aca4:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800aca8:	35e2      	adds	r5, #226	@ 0xe2
 800acaa:	fa01 f305 	lsl.w	r3, r1, r5
 800acae:	9310      	str	r3, [sp, #64]	@ 0x40
 800acb0:	9113      	str	r1, [sp, #76]	@ 0x4c
 800acb2:	e7ba      	b.n	800ac2a <_strtod_l+0x6e2>
 800acb4:	2300      	movs	r3, #0
 800acb6:	9310      	str	r3, [sp, #64]	@ 0x40
 800acb8:	2301      	movs	r3, #1
 800acba:	9313      	str	r3, [sp, #76]	@ 0x4c
 800acbc:	e7b5      	b.n	800ac2a <_strtod_l+0x6e2>
 800acbe:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800acc0:	9805      	ldr	r0, [sp, #20]
 800acc2:	462a      	mov	r2, r5
 800acc4:	f7ff f9c6 	bl	800a054 <__lshift>
 800acc8:	901a      	str	r0, [sp, #104]	@ 0x68
 800acca:	2800      	cmp	r0, #0
 800accc:	d1d9      	bne.n	800ac82 <_strtod_l+0x73a>
 800acce:	e65a      	b.n	800a986 <_strtod_l+0x43e>
 800acd0:	2e00      	cmp	r6, #0
 800acd2:	dd07      	ble.n	800ace4 <_strtod_l+0x79c>
 800acd4:	4649      	mov	r1, r9
 800acd6:	9805      	ldr	r0, [sp, #20]
 800acd8:	4632      	mov	r2, r6
 800acda:	f7ff f9bb 	bl	800a054 <__lshift>
 800acde:	4681      	mov	r9, r0
 800ace0:	2800      	cmp	r0, #0
 800ace2:	d0d8      	beq.n	800ac96 <_strtod_l+0x74e>
 800ace4:	2f00      	cmp	r7, #0
 800ace6:	dd08      	ble.n	800acfa <_strtod_l+0x7b2>
 800ace8:	4641      	mov	r1, r8
 800acea:	9805      	ldr	r0, [sp, #20]
 800acec:	463a      	mov	r2, r7
 800acee:	f7ff f9b1 	bl	800a054 <__lshift>
 800acf2:	4680      	mov	r8, r0
 800acf4:	2800      	cmp	r0, #0
 800acf6:	f43f ae46 	beq.w	800a986 <_strtod_l+0x43e>
 800acfa:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800acfc:	9805      	ldr	r0, [sp, #20]
 800acfe:	464a      	mov	r2, r9
 800ad00:	f7ff fa30 	bl	800a164 <__mdiff>
 800ad04:	4604      	mov	r4, r0
 800ad06:	2800      	cmp	r0, #0
 800ad08:	f43f ae3d 	beq.w	800a986 <_strtod_l+0x43e>
 800ad0c:	68c3      	ldr	r3, [r0, #12]
 800ad0e:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ad10:	2300      	movs	r3, #0
 800ad12:	60c3      	str	r3, [r0, #12]
 800ad14:	4641      	mov	r1, r8
 800ad16:	f7ff fa09 	bl	800a12c <__mcmp>
 800ad1a:	2800      	cmp	r0, #0
 800ad1c:	da46      	bge.n	800adac <_strtod_l+0x864>
 800ad1e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ad20:	ea53 030a 	orrs.w	r3, r3, sl
 800ad24:	d16c      	bne.n	800ae00 <_strtod_l+0x8b8>
 800ad26:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d168      	bne.n	800ae00 <_strtod_l+0x8b8>
 800ad2e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ad32:	0d1b      	lsrs	r3, r3, #20
 800ad34:	051b      	lsls	r3, r3, #20
 800ad36:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800ad3a:	d961      	bls.n	800ae00 <_strtod_l+0x8b8>
 800ad3c:	6963      	ldr	r3, [r4, #20]
 800ad3e:	b913      	cbnz	r3, 800ad46 <_strtod_l+0x7fe>
 800ad40:	6923      	ldr	r3, [r4, #16]
 800ad42:	2b01      	cmp	r3, #1
 800ad44:	dd5c      	ble.n	800ae00 <_strtod_l+0x8b8>
 800ad46:	4621      	mov	r1, r4
 800ad48:	2201      	movs	r2, #1
 800ad4a:	9805      	ldr	r0, [sp, #20]
 800ad4c:	f7ff f982 	bl	800a054 <__lshift>
 800ad50:	4641      	mov	r1, r8
 800ad52:	4604      	mov	r4, r0
 800ad54:	f7ff f9ea 	bl	800a12c <__mcmp>
 800ad58:	2800      	cmp	r0, #0
 800ad5a:	dd51      	ble.n	800ae00 <_strtod_l+0x8b8>
 800ad5c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ad60:	9a08      	ldr	r2, [sp, #32]
 800ad62:	0d1b      	lsrs	r3, r3, #20
 800ad64:	051b      	lsls	r3, r3, #20
 800ad66:	2a00      	cmp	r2, #0
 800ad68:	d06b      	beq.n	800ae42 <_strtod_l+0x8fa>
 800ad6a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800ad6e:	d868      	bhi.n	800ae42 <_strtod_l+0x8fa>
 800ad70:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800ad74:	f67f ae9d 	bls.w	800aab2 <_strtod_l+0x56a>
 800ad78:	4b0a      	ldr	r3, [pc, #40]	@ (800ada4 <_strtod_l+0x85c>)
 800ad7a:	4650      	mov	r0, sl
 800ad7c:	4659      	mov	r1, fp
 800ad7e:	2200      	movs	r2, #0
 800ad80:	f7f5 fc5a 	bl	8000638 <__aeabi_dmul>
 800ad84:	4b08      	ldr	r3, [pc, #32]	@ (800ada8 <_strtod_l+0x860>)
 800ad86:	400b      	ands	r3, r1
 800ad88:	4682      	mov	sl, r0
 800ad8a:	468b      	mov	fp, r1
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	f47f ae05 	bne.w	800a99c <_strtod_l+0x454>
 800ad92:	9a05      	ldr	r2, [sp, #20]
 800ad94:	2322      	movs	r3, #34	@ 0x22
 800ad96:	6013      	str	r3, [r2, #0]
 800ad98:	e600      	b.n	800a99c <_strtod_l+0x454>
 800ad9a:	bf00      	nop
 800ad9c:	0800fe38 	.word	0x0800fe38
 800ada0:	fffffc02 	.word	0xfffffc02
 800ada4:	39500000 	.word	0x39500000
 800ada8:	7ff00000 	.word	0x7ff00000
 800adac:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800adb0:	d165      	bne.n	800ae7e <_strtod_l+0x936>
 800adb2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800adb4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800adb8:	b35a      	cbz	r2, 800ae12 <_strtod_l+0x8ca>
 800adba:	4a9f      	ldr	r2, [pc, #636]	@ (800b038 <_strtod_l+0xaf0>)
 800adbc:	4293      	cmp	r3, r2
 800adbe:	d12b      	bne.n	800ae18 <_strtod_l+0x8d0>
 800adc0:	9b08      	ldr	r3, [sp, #32]
 800adc2:	4651      	mov	r1, sl
 800adc4:	b303      	cbz	r3, 800ae08 <_strtod_l+0x8c0>
 800adc6:	4b9d      	ldr	r3, [pc, #628]	@ (800b03c <_strtod_l+0xaf4>)
 800adc8:	465a      	mov	r2, fp
 800adca:	4013      	ands	r3, r2
 800adcc:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800add0:	f04f 32ff 	mov.w	r2, #4294967295
 800add4:	d81b      	bhi.n	800ae0e <_strtod_l+0x8c6>
 800add6:	0d1b      	lsrs	r3, r3, #20
 800add8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800addc:	fa02 f303 	lsl.w	r3, r2, r3
 800ade0:	4299      	cmp	r1, r3
 800ade2:	d119      	bne.n	800ae18 <_strtod_l+0x8d0>
 800ade4:	4b96      	ldr	r3, [pc, #600]	@ (800b040 <_strtod_l+0xaf8>)
 800ade6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ade8:	429a      	cmp	r2, r3
 800adea:	d102      	bne.n	800adf2 <_strtod_l+0x8aa>
 800adec:	3101      	adds	r1, #1
 800adee:	f43f adca 	beq.w	800a986 <_strtod_l+0x43e>
 800adf2:	4b92      	ldr	r3, [pc, #584]	@ (800b03c <_strtod_l+0xaf4>)
 800adf4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800adf6:	401a      	ands	r2, r3
 800adf8:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800adfc:	f04f 0a00 	mov.w	sl, #0
 800ae00:	9b08      	ldr	r3, [sp, #32]
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d1b8      	bne.n	800ad78 <_strtod_l+0x830>
 800ae06:	e5c9      	b.n	800a99c <_strtod_l+0x454>
 800ae08:	f04f 33ff 	mov.w	r3, #4294967295
 800ae0c:	e7e8      	b.n	800ade0 <_strtod_l+0x898>
 800ae0e:	4613      	mov	r3, r2
 800ae10:	e7e6      	b.n	800ade0 <_strtod_l+0x898>
 800ae12:	ea53 030a 	orrs.w	r3, r3, sl
 800ae16:	d0a1      	beq.n	800ad5c <_strtod_l+0x814>
 800ae18:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800ae1a:	b1db      	cbz	r3, 800ae54 <_strtod_l+0x90c>
 800ae1c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ae1e:	4213      	tst	r3, r2
 800ae20:	d0ee      	beq.n	800ae00 <_strtod_l+0x8b8>
 800ae22:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ae24:	9a08      	ldr	r2, [sp, #32]
 800ae26:	4650      	mov	r0, sl
 800ae28:	4659      	mov	r1, fp
 800ae2a:	b1bb      	cbz	r3, 800ae5c <_strtod_l+0x914>
 800ae2c:	f7ff fb6c 	bl	800a508 <sulp>
 800ae30:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ae34:	ec53 2b10 	vmov	r2, r3, d0
 800ae38:	f7f5 fa48 	bl	80002cc <__adddf3>
 800ae3c:	4682      	mov	sl, r0
 800ae3e:	468b      	mov	fp, r1
 800ae40:	e7de      	b.n	800ae00 <_strtod_l+0x8b8>
 800ae42:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800ae46:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800ae4a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800ae4e:	f04f 3aff 	mov.w	sl, #4294967295
 800ae52:	e7d5      	b.n	800ae00 <_strtod_l+0x8b8>
 800ae54:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800ae56:	ea13 0f0a 	tst.w	r3, sl
 800ae5a:	e7e1      	b.n	800ae20 <_strtod_l+0x8d8>
 800ae5c:	f7ff fb54 	bl	800a508 <sulp>
 800ae60:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ae64:	ec53 2b10 	vmov	r2, r3, d0
 800ae68:	f7f5 fa2e 	bl	80002c8 <__aeabi_dsub>
 800ae6c:	2200      	movs	r2, #0
 800ae6e:	2300      	movs	r3, #0
 800ae70:	4682      	mov	sl, r0
 800ae72:	468b      	mov	fp, r1
 800ae74:	f7f5 fe48 	bl	8000b08 <__aeabi_dcmpeq>
 800ae78:	2800      	cmp	r0, #0
 800ae7a:	d0c1      	beq.n	800ae00 <_strtod_l+0x8b8>
 800ae7c:	e619      	b.n	800aab2 <_strtod_l+0x56a>
 800ae7e:	4641      	mov	r1, r8
 800ae80:	4620      	mov	r0, r4
 800ae82:	f7ff facb 	bl	800a41c <__ratio>
 800ae86:	ec57 6b10 	vmov	r6, r7, d0
 800ae8a:	2200      	movs	r2, #0
 800ae8c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800ae90:	4630      	mov	r0, r6
 800ae92:	4639      	mov	r1, r7
 800ae94:	f7f5 fe4c 	bl	8000b30 <__aeabi_dcmple>
 800ae98:	2800      	cmp	r0, #0
 800ae9a:	d06f      	beq.n	800af7c <_strtod_l+0xa34>
 800ae9c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d17a      	bne.n	800af98 <_strtod_l+0xa50>
 800aea2:	f1ba 0f00 	cmp.w	sl, #0
 800aea6:	d158      	bne.n	800af5a <_strtod_l+0xa12>
 800aea8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800aeaa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d15a      	bne.n	800af68 <_strtod_l+0xa20>
 800aeb2:	4b64      	ldr	r3, [pc, #400]	@ (800b044 <_strtod_l+0xafc>)
 800aeb4:	2200      	movs	r2, #0
 800aeb6:	4630      	mov	r0, r6
 800aeb8:	4639      	mov	r1, r7
 800aeba:	f7f5 fe2f 	bl	8000b1c <__aeabi_dcmplt>
 800aebe:	2800      	cmp	r0, #0
 800aec0:	d159      	bne.n	800af76 <_strtod_l+0xa2e>
 800aec2:	4630      	mov	r0, r6
 800aec4:	4639      	mov	r1, r7
 800aec6:	4b60      	ldr	r3, [pc, #384]	@ (800b048 <_strtod_l+0xb00>)
 800aec8:	2200      	movs	r2, #0
 800aeca:	f7f5 fbb5 	bl	8000638 <__aeabi_dmul>
 800aece:	4606      	mov	r6, r0
 800aed0:	460f      	mov	r7, r1
 800aed2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800aed6:	9606      	str	r6, [sp, #24]
 800aed8:	9307      	str	r3, [sp, #28]
 800aeda:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800aede:	4d57      	ldr	r5, [pc, #348]	@ (800b03c <_strtod_l+0xaf4>)
 800aee0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800aee4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800aee6:	401d      	ands	r5, r3
 800aee8:	4b58      	ldr	r3, [pc, #352]	@ (800b04c <_strtod_l+0xb04>)
 800aeea:	429d      	cmp	r5, r3
 800aeec:	f040 80b2 	bne.w	800b054 <_strtod_l+0xb0c>
 800aef0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800aef2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800aef6:	ec4b ab10 	vmov	d0, sl, fp
 800aefa:	f7ff f9c7 	bl	800a28c <__ulp>
 800aefe:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800af02:	ec51 0b10 	vmov	r0, r1, d0
 800af06:	f7f5 fb97 	bl	8000638 <__aeabi_dmul>
 800af0a:	4652      	mov	r2, sl
 800af0c:	465b      	mov	r3, fp
 800af0e:	f7f5 f9dd 	bl	80002cc <__adddf3>
 800af12:	460b      	mov	r3, r1
 800af14:	4949      	ldr	r1, [pc, #292]	@ (800b03c <_strtod_l+0xaf4>)
 800af16:	4a4e      	ldr	r2, [pc, #312]	@ (800b050 <_strtod_l+0xb08>)
 800af18:	4019      	ands	r1, r3
 800af1a:	4291      	cmp	r1, r2
 800af1c:	4682      	mov	sl, r0
 800af1e:	d942      	bls.n	800afa6 <_strtod_l+0xa5e>
 800af20:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800af22:	4b47      	ldr	r3, [pc, #284]	@ (800b040 <_strtod_l+0xaf8>)
 800af24:	429a      	cmp	r2, r3
 800af26:	d103      	bne.n	800af30 <_strtod_l+0x9e8>
 800af28:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800af2a:	3301      	adds	r3, #1
 800af2c:	f43f ad2b 	beq.w	800a986 <_strtod_l+0x43e>
 800af30:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800b040 <_strtod_l+0xaf8>
 800af34:	f04f 3aff 	mov.w	sl, #4294967295
 800af38:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800af3a:	9805      	ldr	r0, [sp, #20]
 800af3c:	f7fe fe72 	bl	8009c24 <_Bfree>
 800af40:	9805      	ldr	r0, [sp, #20]
 800af42:	4649      	mov	r1, r9
 800af44:	f7fe fe6e 	bl	8009c24 <_Bfree>
 800af48:	9805      	ldr	r0, [sp, #20]
 800af4a:	4641      	mov	r1, r8
 800af4c:	f7fe fe6a 	bl	8009c24 <_Bfree>
 800af50:	9805      	ldr	r0, [sp, #20]
 800af52:	4621      	mov	r1, r4
 800af54:	f7fe fe66 	bl	8009c24 <_Bfree>
 800af58:	e618      	b.n	800ab8c <_strtod_l+0x644>
 800af5a:	f1ba 0f01 	cmp.w	sl, #1
 800af5e:	d103      	bne.n	800af68 <_strtod_l+0xa20>
 800af60:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800af62:	2b00      	cmp	r3, #0
 800af64:	f43f ada5 	beq.w	800aab2 <_strtod_l+0x56a>
 800af68:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800b018 <_strtod_l+0xad0>
 800af6c:	4f35      	ldr	r7, [pc, #212]	@ (800b044 <_strtod_l+0xafc>)
 800af6e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800af72:	2600      	movs	r6, #0
 800af74:	e7b1      	b.n	800aeda <_strtod_l+0x992>
 800af76:	4f34      	ldr	r7, [pc, #208]	@ (800b048 <_strtod_l+0xb00>)
 800af78:	2600      	movs	r6, #0
 800af7a:	e7aa      	b.n	800aed2 <_strtod_l+0x98a>
 800af7c:	4b32      	ldr	r3, [pc, #200]	@ (800b048 <_strtod_l+0xb00>)
 800af7e:	4630      	mov	r0, r6
 800af80:	4639      	mov	r1, r7
 800af82:	2200      	movs	r2, #0
 800af84:	f7f5 fb58 	bl	8000638 <__aeabi_dmul>
 800af88:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800af8a:	4606      	mov	r6, r0
 800af8c:	460f      	mov	r7, r1
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d09f      	beq.n	800aed2 <_strtod_l+0x98a>
 800af92:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800af96:	e7a0      	b.n	800aeda <_strtod_l+0x992>
 800af98:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800b020 <_strtod_l+0xad8>
 800af9c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800afa0:	ec57 6b17 	vmov	r6, r7, d7
 800afa4:	e799      	b.n	800aeda <_strtod_l+0x992>
 800afa6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800afaa:	9b08      	ldr	r3, [sp, #32]
 800afac:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d1c1      	bne.n	800af38 <_strtod_l+0x9f0>
 800afb4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800afb8:	0d1b      	lsrs	r3, r3, #20
 800afba:	051b      	lsls	r3, r3, #20
 800afbc:	429d      	cmp	r5, r3
 800afbe:	d1bb      	bne.n	800af38 <_strtod_l+0x9f0>
 800afc0:	4630      	mov	r0, r6
 800afc2:	4639      	mov	r1, r7
 800afc4:	f7f5 fe98 	bl	8000cf8 <__aeabi_d2lz>
 800afc8:	f7f5 fb08 	bl	80005dc <__aeabi_l2d>
 800afcc:	4602      	mov	r2, r0
 800afce:	460b      	mov	r3, r1
 800afd0:	4630      	mov	r0, r6
 800afd2:	4639      	mov	r1, r7
 800afd4:	f7f5 f978 	bl	80002c8 <__aeabi_dsub>
 800afd8:	460b      	mov	r3, r1
 800afda:	4602      	mov	r2, r0
 800afdc:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800afe0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800afe4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800afe6:	ea46 060a 	orr.w	r6, r6, sl
 800afea:	431e      	orrs	r6, r3
 800afec:	d06f      	beq.n	800b0ce <_strtod_l+0xb86>
 800afee:	a30e      	add	r3, pc, #56	@ (adr r3, 800b028 <_strtod_l+0xae0>)
 800aff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aff4:	f7f5 fd92 	bl	8000b1c <__aeabi_dcmplt>
 800aff8:	2800      	cmp	r0, #0
 800affa:	f47f accf 	bne.w	800a99c <_strtod_l+0x454>
 800affe:	a30c      	add	r3, pc, #48	@ (adr r3, 800b030 <_strtod_l+0xae8>)
 800b000:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b004:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b008:	f7f5 fda6 	bl	8000b58 <__aeabi_dcmpgt>
 800b00c:	2800      	cmp	r0, #0
 800b00e:	d093      	beq.n	800af38 <_strtod_l+0x9f0>
 800b010:	e4c4      	b.n	800a99c <_strtod_l+0x454>
 800b012:	bf00      	nop
 800b014:	f3af 8000 	nop.w
 800b018:	00000000 	.word	0x00000000
 800b01c:	bff00000 	.word	0xbff00000
 800b020:	00000000 	.word	0x00000000
 800b024:	3ff00000 	.word	0x3ff00000
 800b028:	94a03595 	.word	0x94a03595
 800b02c:	3fdfffff 	.word	0x3fdfffff
 800b030:	35afe535 	.word	0x35afe535
 800b034:	3fe00000 	.word	0x3fe00000
 800b038:	000fffff 	.word	0x000fffff
 800b03c:	7ff00000 	.word	0x7ff00000
 800b040:	7fefffff 	.word	0x7fefffff
 800b044:	3ff00000 	.word	0x3ff00000
 800b048:	3fe00000 	.word	0x3fe00000
 800b04c:	7fe00000 	.word	0x7fe00000
 800b050:	7c9fffff 	.word	0x7c9fffff
 800b054:	9b08      	ldr	r3, [sp, #32]
 800b056:	b323      	cbz	r3, 800b0a2 <_strtod_l+0xb5a>
 800b058:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800b05c:	d821      	bhi.n	800b0a2 <_strtod_l+0xb5a>
 800b05e:	a328      	add	r3, pc, #160	@ (adr r3, 800b100 <_strtod_l+0xbb8>)
 800b060:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b064:	4630      	mov	r0, r6
 800b066:	4639      	mov	r1, r7
 800b068:	f7f5 fd62 	bl	8000b30 <__aeabi_dcmple>
 800b06c:	b1a0      	cbz	r0, 800b098 <_strtod_l+0xb50>
 800b06e:	4639      	mov	r1, r7
 800b070:	4630      	mov	r0, r6
 800b072:	f7f5 fdb9 	bl	8000be8 <__aeabi_d2uiz>
 800b076:	2801      	cmp	r0, #1
 800b078:	bf38      	it	cc
 800b07a:	2001      	movcc	r0, #1
 800b07c:	f7f5 fa62 	bl	8000544 <__aeabi_ui2d>
 800b080:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b082:	4606      	mov	r6, r0
 800b084:	460f      	mov	r7, r1
 800b086:	b9fb      	cbnz	r3, 800b0c8 <_strtod_l+0xb80>
 800b088:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b08c:	9014      	str	r0, [sp, #80]	@ 0x50
 800b08e:	9315      	str	r3, [sp, #84]	@ 0x54
 800b090:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800b094:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800b098:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b09a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800b09e:	1b5b      	subs	r3, r3, r5
 800b0a0:	9311      	str	r3, [sp, #68]	@ 0x44
 800b0a2:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800b0a6:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800b0aa:	f7ff f8ef 	bl	800a28c <__ulp>
 800b0ae:	4650      	mov	r0, sl
 800b0b0:	ec53 2b10 	vmov	r2, r3, d0
 800b0b4:	4659      	mov	r1, fp
 800b0b6:	f7f5 fabf 	bl	8000638 <__aeabi_dmul>
 800b0ba:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800b0be:	f7f5 f905 	bl	80002cc <__adddf3>
 800b0c2:	4682      	mov	sl, r0
 800b0c4:	468b      	mov	fp, r1
 800b0c6:	e770      	b.n	800afaa <_strtod_l+0xa62>
 800b0c8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800b0cc:	e7e0      	b.n	800b090 <_strtod_l+0xb48>
 800b0ce:	a30e      	add	r3, pc, #56	@ (adr r3, 800b108 <_strtod_l+0xbc0>)
 800b0d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0d4:	f7f5 fd22 	bl	8000b1c <__aeabi_dcmplt>
 800b0d8:	e798      	b.n	800b00c <_strtod_l+0xac4>
 800b0da:	2300      	movs	r3, #0
 800b0dc:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b0de:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800b0e0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b0e2:	6013      	str	r3, [r2, #0]
 800b0e4:	f7ff ba6d 	b.w	800a5c2 <_strtod_l+0x7a>
 800b0e8:	2a65      	cmp	r2, #101	@ 0x65
 800b0ea:	f43f ab66 	beq.w	800a7ba <_strtod_l+0x272>
 800b0ee:	2a45      	cmp	r2, #69	@ 0x45
 800b0f0:	f43f ab63 	beq.w	800a7ba <_strtod_l+0x272>
 800b0f4:	2301      	movs	r3, #1
 800b0f6:	f7ff bb9e 	b.w	800a836 <_strtod_l+0x2ee>
 800b0fa:	bf00      	nop
 800b0fc:	f3af 8000 	nop.w
 800b100:	ffc00000 	.word	0xffc00000
 800b104:	41dfffff 	.word	0x41dfffff
 800b108:	94a03595 	.word	0x94a03595
 800b10c:	3fcfffff 	.word	0x3fcfffff

0800b110 <_strtod_r>:
 800b110:	4b01      	ldr	r3, [pc, #4]	@ (800b118 <_strtod_r+0x8>)
 800b112:	f7ff ba19 	b.w	800a548 <_strtod_l>
 800b116:	bf00      	nop
 800b118:	2000009c 	.word	0x2000009c

0800b11c <_strtol_l.constprop.0>:
 800b11c:	2b24      	cmp	r3, #36	@ 0x24
 800b11e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b122:	4686      	mov	lr, r0
 800b124:	4690      	mov	r8, r2
 800b126:	d801      	bhi.n	800b12c <_strtol_l.constprop.0+0x10>
 800b128:	2b01      	cmp	r3, #1
 800b12a:	d106      	bne.n	800b13a <_strtol_l.constprop.0+0x1e>
 800b12c:	f7fd fe5a 	bl	8008de4 <__errno>
 800b130:	2316      	movs	r3, #22
 800b132:	6003      	str	r3, [r0, #0]
 800b134:	2000      	movs	r0, #0
 800b136:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b13a:	4834      	ldr	r0, [pc, #208]	@ (800b20c <_strtol_l.constprop.0+0xf0>)
 800b13c:	460d      	mov	r5, r1
 800b13e:	462a      	mov	r2, r5
 800b140:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b144:	5d06      	ldrb	r6, [r0, r4]
 800b146:	f016 0608 	ands.w	r6, r6, #8
 800b14a:	d1f8      	bne.n	800b13e <_strtol_l.constprop.0+0x22>
 800b14c:	2c2d      	cmp	r4, #45	@ 0x2d
 800b14e:	d12d      	bne.n	800b1ac <_strtol_l.constprop.0+0x90>
 800b150:	782c      	ldrb	r4, [r5, #0]
 800b152:	2601      	movs	r6, #1
 800b154:	1c95      	adds	r5, r2, #2
 800b156:	f033 0210 	bics.w	r2, r3, #16
 800b15a:	d109      	bne.n	800b170 <_strtol_l.constprop.0+0x54>
 800b15c:	2c30      	cmp	r4, #48	@ 0x30
 800b15e:	d12a      	bne.n	800b1b6 <_strtol_l.constprop.0+0x9a>
 800b160:	782a      	ldrb	r2, [r5, #0]
 800b162:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800b166:	2a58      	cmp	r2, #88	@ 0x58
 800b168:	d125      	bne.n	800b1b6 <_strtol_l.constprop.0+0x9a>
 800b16a:	786c      	ldrb	r4, [r5, #1]
 800b16c:	2310      	movs	r3, #16
 800b16e:	3502      	adds	r5, #2
 800b170:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800b174:	f10c 3cff 	add.w	ip, ip, #4294967295
 800b178:	2200      	movs	r2, #0
 800b17a:	fbbc f9f3 	udiv	r9, ip, r3
 800b17e:	4610      	mov	r0, r2
 800b180:	fb03 ca19 	mls	sl, r3, r9, ip
 800b184:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800b188:	2f09      	cmp	r7, #9
 800b18a:	d81b      	bhi.n	800b1c4 <_strtol_l.constprop.0+0xa8>
 800b18c:	463c      	mov	r4, r7
 800b18e:	42a3      	cmp	r3, r4
 800b190:	dd27      	ble.n	800b1e2 <_strtol_l.constprop.0+0xc6>
 800b192:	1c57      	adds	r7, r2, #1
 800b194:	d007      	beq.n	800b1a6 <_strtol_l.constprop.0+0x8a>
 800b196:	4581      	cmp	r9, r0
 800b198:	d320      	bcc.n	800b1dc <_strtol_l.constprop.0+0xc0>
 800b19a:	d101      	bne.n	800b1a0 <_strtol_l.constprop.0+0x84>
 800b19c:	45a2      	cmp	sl, r4
 800b19e:	db1d      	blt.n	800b1dc <_strtol_l.constprop.0+0xc0>
 800b1a0:	fb00 4003 	mla	r0, r0, r3, r4
 800b1a4:	2201      	movs	r2, #1
 800b1a6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b1aa:	e7eb      	b.n	800b184 <_strtol_l.constprop.0+0x68>
 800b1ac:	2c2b      	cmp	r4, #43	@ 0x2b
 800b1ae:	bf04      	itt	eq
 800b1b0:	782c      	ldrbeq	r4, [r5, #0]
 800b1b2:	1c95      	addeq	r5, r2, #2
 800b1b4:	e7cf      	b.n	800b156 <_strtol_l.constprop.0+0x3a>
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d1da      	bne.n	800b170 <_strtol_l.constprop.0+0x54>
 800b1ba:	2c30      	cmp	r4, #48	@ 0x30
 800b1bc:	bf0c      	ite	eq
 800b1be:	2308      	moveq	r3, #8
 800b1c0:	230a      	movne	r3, #10
 800b1c2:	e7d5      	b.n	800b170 <_strtol_l.constprop.0+0x54>
 800b1c4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800b1c8:	2f19      	cmp	r7, #25
 800b1ca:	d801      	bhi.n	800b1d0 <_strtol_l.constprop.0+0xb4>
 800b1cc:	3c37      	subs	r4, #55	@ 0x37
 800b1ce:	e7de      	b.n	800b18e <_strtol_l.constprop.0+0x72>
 800b1d0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800b1d4:	2f19      	cmp	r7, #25
 800b1d6:	d804      	bhi.n	800b1e2 <_strtol_l.constprop.0+0xc6>
 800b1d8:	3c57      	subs	r4, #87	@ 0x57
 800b1da:	e7d8      	b.n	800b18e <_strtol_l.constprop.0+0x72>
 800b1dc:	f04f 32ff 	mov.w	r2, #4294967295
 800b1e0:	e7e1      	b.n	800b1a6 <_strtol_l.constprop.0+0x8a>
 800b1e2:	1c53      	adds	r3, r2, #1
 800b1e4:	d108      	bne.n	800b1f8 <_strtol_l.constprop.0+0xdc>
 800b1e6:	2322      	movs	r3, #34	@ 0x22
 800b1e8:	f8ce 3000 	str.w	r3, [lr]
 800b1ec:	4660      	mov	r0, ip
 800b1ee:	f1b8 0f00 	cmp.w	r8, #0
 800b1f2:	d0a0      	beq.n	800b136 <_strtol_l.constprop.0+0x1a>
 800b1f4:	1e69      	subs	r1, r5, #1
 800b1f6:	e006      	b.n	800b206 <_strtol_l.constprop.0+0xea>
 800b1f8:	b106      	cbz	r6, 800b1fc <_strtol_l.constprop.0+0xe0>
 800b1fa:	4240      	negs	r0, r0
 800b1fc:	f1b8 0f00 	cmp.w	r8, #0
 800b200:	d099      	beq.n	800b136 <_strtol_l.constprop.0+0x1a>
 800b202:	2a00      	cmp	r2, #0
 800b204:	d1f6      	bne.n	800b1f4 <_strtol_l.constprop.0+0xd8>
 800b206:	f8c8 1000 	str.w	r1, [r8]
 800b20a:	e794      	b.n	800b136 <_strtol_l.constprop.0+0x1a>
 800b20c:	0800fe61 	.word	0x0800fe61

0800b210 <_strtol_r>:
 800b210:	f7ff bf84 	b.w	800b11c <_strtol_l.constprop.0>

0800b214 <__ssputs_r>:
 800b214:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b218:	688e      	ldr	r6, [r1, #8]
 800b21a:	461f      	mov	r7, r3
 800b21c:	42be      	cmp	r6, r7
 800b21e:	680b      	ldr	r3, [r1, #0]
 800b220:	4682      	mov	sl, r0
 800b222:	460c      	mov	r4, r1
 800b224:	4690      	mov	r8, r2
 800b226:	d82d      	bhi.n	800b284 <__ssputs_r+0x70>
 800b228:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b22c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b230:	d026      	beq.n	800b280 <__ssputs_r+0x6c>
 800b232:	6965      	ldr	r5, [r4, #20]
 800b234:	6909      	ldr	r1, [r1, #16]
 800b236:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b23a:	eba3 0901 	sub.w	r9, r3, r1
 800b23e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b242:	1c7b      	adds	r3, r7, #1
 800b244:	444b      	add	r3, r9
 800b246:	106d      	asrs	r5, r5, #1
 800b248:	429d      	cmp	r5, r3
 800b24a:	bf38      	it	cc
 800b24c:	461d      	movcc	r5, r3
 800b24e:	0553      	lsls	r3, r2, #21
 800b250:	d527      	bpl.n	800b2a2 <__ssputs_r+0x8e>
 800b252:	4629      	mov	r1, r5
 800b254:	f7fc fc42 	bl	8007adc <_malloc_r>
 800b258:	4606      	mov	r6, r0
 800b25a:	b360      	cbz	r0, 800b2b6 <__ssputs_r+0xa2>
 800b25c:	6921      	ldr	r1, [r4, #16]
 800b25e:	464a      	mov	r2, r9
 800b260:	f7fd fdf5 	bl	8008e4e <memcpy>
 800b264:	89a3      	ldrh	r3, [r4, #12]
 800b266:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b26a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b26e:	81a3      	strh	r3, [r4, #12]
 800b270:	6126      	str	r6, [r4, #16]
 800b272:	6165      	str	r5, [r4, #20]
 800b274:	444e      	add	r6, r9
 800b276:	eba5 0509 	sub.w	r5, r5, r9
 800b27a:	6026      	str	r6, [r4, #0]
 800b27c:	60a5      	str	r5, [r4, #8]
 800b27e:	463e      	mov	r6, r7
 800b280:	42be      	cmp	r6, r7
 800b282:	d900      	bls.n	800b286 <__ssputs_r+0x72>
 800b284:	463e      	mov	r6, r7
 800b286:	6820      	ldr	r0, [r4, #0]
 800b288:	4632      	mov	r2, r6
 800b28a:	4641      	mov	r1, r8
 800b28c:	f000 fb6a 	bl	800b964 <memmove>
 800b290:	68a3      	ldr	r3, [r4, #8]
 800b292:	1b9b      	subs	r3, r3, r6
 800b294:	60a3      	str	r3, [r4, #8]
 800b296:	6823      	ldr	r3, [r4, #0]
 800b298:	4433      	add	r3, r6
 800b29a:	6023      	str	r3, [r4, #0]
 800b29c:	2000      	movs	r0, #0
 800b29e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b2a2:	462a      	mov	r2, r5
 800b2a4:	f000 ff31 	bl	800c10a <_realloc_r>
 800b2a8:	4606      	mov	r6, r0
 800b2aa:	2800      	cmp	r0, #0
 800b2ac:	d1e0      	bne.n	800b270 <__ssputs_r+0x5c>
 800b2ae:	6921      	ldr	r1, [r4, #16]
 800b2b0:	4650      	mov	r0, sl
 800b2b2:	f7fe fc2d 	bl	8009b10 <_free_r>
 800b2b6:	230c      	movs	r3, #12
 800b2b8:	f8ca 3000 	str.w	r3, [sl]
 800b2bc:	89a3      	ldrh	r3, [r4, #12]
 800b2be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b2c2:	81a3      	strh	r3, [r4, #12]
 800b2c4:	f04f 30ff 	mov.w	r0, #4294967295
 800b2c8:	e7e9      	b.n	800b29e <__ssputs_r+0x8a>
	...

0800b2cc <_svfiprintf_r>:
 800b2cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2d0:	4698      	mov	r8, r3
 800b2d2:	898b      	ldrh	r3, [r1, #12]
 800b2d4:	061b      	lsls	r3, r3, #24
 800b2d6:	b09d      	sub	sp, #116	@ 0x74
 800b2d8:	4607      	mov	r7, r0
 800b2da:	460d      	mov	r5, r1
 800b2dc:	4614      	mov	r4, r2
 800b2de:	d510      	bpl.n	800b302 <_svfiprintf_r+0x36>
 800b2e0:	690b      	ldr	r3, [r1, #16]
 800b2e2:	b973      	cbnz	r3, 800b302 <_svfiprintf_r+0x36>
 800b2e4:	2140      	movs	r1, #64	@ 0x40
 800b2e6:	f7fc fbf9 	bl	8007adc <_malloc_r>
 800b2ea:	6028      	str	r0, [r5, #0]
 800b2ec:	6128      	str	r0, [r5, #16]
 800b2ee:	b930      	cbnz	r0, 800b2fe <_svfiprintf_r+0x32>
 800b2f0:	230c      	movs	r3, #12
 800b2f2:	603b      	str	r3, [r7, #0]
 800b2f4:	f04f 30ff 	mov.w	r0, #4294967295
 800b2f8:	b01d      	add	sp, #116	@ 0x74
 800b2fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b2fe:	2340      	movs	r3, #64	@ 0x40
 800b300:	616b      	str	r3, [r5, #20]
 800b302:	2300      	movs	r3, #0
 800b304:	9309      	str	r3, [sp, #36]	@ 0x24
 800b306:	2320      	movs	r3, #32
 800b308:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b30c:	f8cd 800c 	str.w	r8, [sp, #12]
 800b310:	2330      	movs	r3, #48	@ 0x30
 800b312:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800b4b0 <_svfiprintf_r+0x1e4>
 800b316:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b31a:	f04f 0901 	mov.w	r9, #1
 800b31e:	4623      	mov	r3, r4
 800b320:	469a      	mov	sl, r3
 800b322:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b326:	b10a      	cbz	r2, 800b32c <_svfiprintf_r+0x60>
 800b328:	2a25      	cmp	r2, #37	@ 0x25
 800b32a:	d1f9      	bne.n	800b320 <_svfiprintf_r+0x54>
 800b32c:	ebba 0b04 	subs.w	fp, sl, r4
 800b330:	d00b      	beq.n	800b34a <_svfiprintf_r+0x7e>
 800b332:	465b      	mov	r3, fp
 800b334:	4622      	mov	r2, r4
 800b336:	4629      	mov	r1, r5
 800b338:	4638      	mov	r0, r7
 800b33a:	f7ff ff6b 	bl	800b214 <__ssputs_r>
 800b33e:	3001      	adds	r0, #1
 800b340:	f000 80a7 	beq.w	800b492 <_svfiprintf_r+0x1c6>
 800b344:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b346:	445a      	add	r2, fp
 800b348:	9209      	str	r2, [sp, #36]	@ 0x24
 800b34a:	f89a 3000 	ldrb.w	r3, [sl]
 800b34e:	2b00      	cmp	r3, #0
 800b350:	f000 809f 	beq.w	800b492 <_svfiprintf_r+0x1c6>
 800b354:	2300      	movs	r3, #0
 800b356:	f04f 32ff 	mov.w	r2, #4294967295
 800b35a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b35e:	f10a 0a01 	add.w	sl, sl, #1
 800b362:	9304      	str	r3, [sp, #16]
 800b364:	9307      	str	r3, [sp, #28]
 800b366:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b36a:	931a      	str	r3, [sp, #104]	@ 0x68
 800b36c:	4654      	mov	r4, sl
 800b36e:	2205      	movs	r2, #5
 800b370:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b374:	484e      	ldr	r0, [pc, #312]	@ (800b4b0 <_svfiprintf_r+0x1e4>)
 800b376:	f7f4 ff4b 	bl	8000210 <memchr>
 800b37a:	9a04      	ldr	r2, [sp, #16]
 800b37c:	b9d8      	cbnz	r0, 800b3b6 <_svfiprintf_r+0xea>
 800b37e:	06d0      	lsls	r0, r2, #27
 800b380:	bf44      	itt	mi
 800b382:	2320      	movmi	r3, #32
 800b384:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b388:	0711      	lsls	r1, r2, #28
 800b38a:	bf44      	itt	mi
 800b38c:	232b      	movmi	r3, #43	@ 0x2b
 800b38e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b392:	f89a 3000 	ldrb.w	r3, [sl]
 800b396:	2b2a      	cmp	r3, #42	@ 0x2a
 800b398:	d015      	beq.n	800b3c6 <_svfiprintf_r+0xfa>
 800b39a:	9a07      	ldr	r2, [sp, #28]
 800b39c:	4654      	mov	r4, sl
 800b39e:	2000      	movs	r0, #0
 800b3a0:	f04f 0c0a 	mov.w	ip, #10
 800b3a4:	4621      	mov	r1, r4
 800b3a6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b3aa:	3b30      	subs	r3, #48	@ 0x30
 800b3ac:	2b09      	cmp	r3, #9
 800b3ae:	d94b      	bls.n	800b448 <_svfiprintf_r+0x17c>
 800b3b0:	b1b0      	cbz	r0, 800b3e0 <_svfiprintf_r+0x114>
 800b3b2:	9207      	str	r2, [sp, #28]
 800b3b4:	e014      	b.n	800b3e0 <_svfiprintf_r+0x114>
 800b3b6:	eba0 0308 	sub.w	r3, r0, r8
 800b3ba:	fa09 f303 	lsl.w	r3, r9, r3
 800b3be:	4313      	orrs	r3, r2
 800b3c0:	9304      	str	r3, [sp, #16]
 800b3c2:	46a2      	mov	sl, r4
 800b3c4:	e7d2      	b.n	800b36c <_svfiprintf_r+0xa0>
 800b3c6:	9b03      	ldr	r3, [sp, #12]
 800b3c8:	1d19      	adds	r1, r3, #4
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	9103      	str	r1, [sp, #12]
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	bfbb      	ittet	lt
 800b3d2:	425b      	neglt	r3, r3
 800b3d4:	f042 0202 	orrlt.w	r2, r2, #2
 800b3d8:	9307      	strge	r3, [sp, #28]
 800b3da:	9307      	strlt	r3, [sp, #28]
 800b3dc:	bfb8      	it	lt
 800b3de:	9204      	strlt	r2, [sp, #16]
 800b3e0:	7823      	ldrb	r3, [r4, #0]
 800b3e2:	2b2e      	cmp	r3, #46	@ 0x2e
 800b3e4:	d10a      	bne.n	800b3fc <_svfiprintf_r+0x130>
 800b3e6:	7863      	ldrb	r3, [r4, #1]
 800b3e8:	2b2a      	cmp	r3, #42	@ 0x2a
 800b3ea:	d132      	bne.n	800b452 <_svfiprintf_r+0x186>
 800b3ec:	9b03      	ldr	r3, [sp, #12]
 800b3ee:	1d1a      	adds	r2, r3, #4
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	9203      	str	r2, [sp, #12]
 800b3f4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b3f8:	3402      	adds	r4, #2
 800b3fa:	9305      	str	r3, [sp, #20]
 800b3fc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800b4c0 <_svfiprintf_r+0x1f4>
 800b400:	7821      	ldrb	r1, [r4, #0]
 800b402:	2203      	movs	r2, #3
 800b404:	4650      	mov	r0, sl
 800b406:	f7f4 ff03 	bl	8000210 <memchr>
 800b40a:	b138      	cbz	r0, 800b41c <_svfiprintf_r+0x150>
 800b40c:	9b04      	ldr	r3, [sp, #16]
 800b40e:	eba0 000a 	sub.w	r0, r0, sl
 800b412:	2240      	movs	r2, #64	@ 0x40
 800b414:	4082      	lsls	r2, r0
 800b416:	4313      	orrs	r3, r2
 800b418:	3401      	adds	r4, #1
 800b41a:	9304      	str	r3, [sp, #16]
 800b41c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b420:	4824      	ldr	r0, [pc, #144]	@ (800b4b4 <_svfiprintf_r+0x1e8>)
 800b422:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b426:	2206      	movs	r2, #6
 800b428:	f7f4 fef2 	bl	8000210 <memchr>
 800b42c:	2800      	cmp	r0, #0
 800b42e:	d036      	beq.n	800b49e <_svfiprintf_r+0x1d2>
 800b430:	4b21      	ldr	r3, [pc, #132]	@ (800b4b8 <_svfiprintf_r+0x1ec>)
 800b432:	bb1b      	cbnz	r3, 800b47c <_svfiprintf_r+0x1b0>
 800b434:	9b03      	ldr	r3, [sp, #12]
 800b436:	3307      	adds	r3, #7
 800b438:	f023 0307 	bic.w	r3, r3, #7
 800b43c:	3308      	adds	r3, #8
 800b43e:	9303      	str	r3, [sp, #12]
 800b440:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b442:	4433      	add	r3, r6
 800b444:	9309      	str	r3, [sp, #36]	@ 0x24
 800b446:	e76a      	b.n	800b31e <_svfiprintf_r+0x52>
 800b448:	fb0c 3202 	mla	r2, ip, r2, r3
 800b44c:	460c      	mov	r4, r1
 800b44e:	2001      	movs	r0, #1
 800b450:	e7a8      	b.n	800b3a4 <_svfiprintf_r+0xd8>
 800b452:	2300      	movs	r3, #0
 800b454:	3401      	adds	r4, #1
 800b456:	9305      	str	r3, [sp, #20]
 800b458:	4619      	mov	r1, r3
 800b45a:	f04f 0c0a 	mov.w	ip, #10
 800b45e:	4620      	mov	r0, r4
 800b460:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b464:	3a30      	subs	r2, #48	@ 0x30
 800b466:	2a09      	cmp	r2, #9
 800b468:	d903      	bls.n	800b472 <_svfiprintf_r+0x1a6>
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	d0c6      	beq.n	800b3fc <_svfiprintf_r+0x130>
 800b46e:	9105      	str	r1, [sp, #20]
 800b470:	e7c4      	b.n	800b3fc <_svfiprintf_r+0x130>
 800b472:	fb0c 2101 	mla	r1, ip, r1, r2
 800b476:	4604      	mov	r4, r0
 800b478:	2301      	movs	r3, #1
 800b47a:	e7f0      	b.n	800b45e <_svfiprintf_r+0x192>
 800b47c:	ab03      	add	r3, sp, #12
 800b47e:	9300      	str	r3, [sp, #0]
 800b480:	462a      	mov	r2, r5
 800b482:	4b0e      	ldr	r3, [pc, #56]	@ (800b4bc <_svfiprintf_r+0x1f0>)
 800b484:	a904      	add	r1, sp, #16
 800b486:	4638      	mov	r0, r7
 800b488:	f7fc fc54 	bl	8007d34 <_printf_float>
 800b48c:	1c42      	adds	r2, r0, #1
 800b48e:	4606      	mov	r6, r0
 800b490:	d1d6      	bne.n	800b440 <_svfiprintf_r+0x174>
 800b492:	89ab      	ldrh	r3, [r5, #12]
 800b494:	065b      	lsls	r3, r3, #25
 800b496:	f53f af2d 	bmi.w	800b2f4 <_svfiprintf_r+0x28>
 800b49a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b49c:	e72c      	b.n	800b2f8 <_svfiprintf_r+0x2c>
 800b49e:	ab03      	add	r3, sp, #12
 800b4a0:	9300      	str	r3, [sp, #0]
 800b4a2:	462a      	mov	r2, r5
 800b4a4:	4b05      	ldr	r3, [pc, #20]	@ (800b4bc <_svfiprintf_r+0x1f0>)
 800b4a6:	a904      	add	r1, sp, #16
 800b4a8:	4638      	mov	r0, r7
 800b4aa:	f7fc fedb 	bl	8008264 <_printf_i>
 800b4ae:	e7ed      	b.n	800b48c <_svfiprintf_r+0x1c0>
 800b4b0:	0800ff61 	.word	0x0800ff61
 800b4b4:	0800ff6b 	.word	0x0800ff6b
 800b4b8:	08007d35 	.word	0x08007d35
 800b4bc:	0800b215 	.word	0x0800b215
 800b4c0:	0800ff67 	.word	0x0800ff67

0800b4c4 <__sfputc_r>:
 800b4c4:	6893      	ldr	r3, [r2, #8]
 800b4c6:	3b01      	subs	r3, #1
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	b410      	push	{r4}
 800b4cc:	6093      	str	r3, [r2, #8]
 800b4ce:	da08      	bge.n	800b4e2 <__sfputc_r+0x1e>
 800b4d0:	6994      	ldr	r4, [r2, #24]
 800b4d2:	42a3      	cmp	r3, r4
 800b4d4:	db01      	blt.n	800b4da <__sfputc_r+0x16>
 800b4d6:	290a      	cmp	r1, #10
 800b4d8:	d103      	bne.n	800b4e2 <__sfputc_r+0x1e>
 800b4da:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b4de:	f7fd bb8a 	b.w	8008bf6 <__swbuf_r>
 800b4e2:	6813      	ldr	r3, [r2, #0]
 800b4e4:	1c58      	adds	r0, r3, #1
 800b4e6:	6010      	str	r0, [r2, #0]
 800b4e8:	7019      	strb	r1, [r3, #0]
 800b4ea:	4608      	mov	r0, r1
 800b4ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b4f0:	4770      	bx	lr

0800b4f2 <__sfputs_r>:
 800b4f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4f4:	4606      	mov	r6, r0
 800b4f6:	460f      	mov	r7, r1
 800b4f8:	4614      	mov	r4, r2
 800b4fa:	18d5      	adds	r5, r2, r3
 800b4fc:	42ac      	cmp	r4, r5
 800b4fe:	d101      	bne.n	800b504 <__sfputs_r+0x12>
 800b500:	2000      	movs	r0, #0
 800b502:	e007      	b.n	800b514 <__sfputs_r+0x22>
 800b504:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b508:	463a      	mov	r2, r7
 800b50a:	4630      	mov	r0, r6
 800b50c:	f7ff ffda 	bl	800b4c4 <__sfputc_r>
 800b510:	1c43      	adds	r3, r0, #1
 800b512:	d1f3      	bne.n	800b4fc <__sfputs_r+0xa>
 800b514:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b518 <_vfiprintf_r>:
 800b518:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b51c:	460d      	mov	r5, r1
 800b51e:	b09d      	sub	sp, #116	@ 0x74
 800b520:	4614      	mov	r4, r2
 800b522:	4698      	mov	r8, r3
 800b524:	4606      	mov	r6, r0
 800b526:	b118      	cbz	r0, 800b530 <_vfiprintf_r+0x18>
 800b528:	6a03      	ldr	r3, [r0, #32]
 800b52a:	b90b      	cbnz	r3, 800b530 <_vfiprintf_r+0x18>
 800b52c:	f7fd fa5a 	bl	80089e4 <__sinit>
 800b530:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b532:	07d9      	lsls	r1, r3, #31
 800b534:	d405      	bmi.n	800b542 <_vfiprintf_r+0x2a>
 800b536:	89ab      	ldrh	r3, [r5, #12]
 800b538:	059a      	lsls	r2, r3, #22
 800b53a:	d402      	bmi.n	800b542 <_vfiprintf_r+0x2a>
 800b53c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b53e:	f7fd fc7c 	bl	8008e3a <__retarget_lock_acquire_recursive>
 800b542:	89ab      	ldrh	r3, [r5, #12]
 800b544:	071b      	lsls	r3, r3, #28
 800b546:	d501      	bpl.n	800b54c <_vfiprintf_r+0x34>
 800b548:	692b      	ldr	r3, [r5, #16]
 800b54a:	b99b      	cbnz	r3, 800b574 <_vfiprintf_r+0x5c>
 800b54c:	4629      	mov	r1, r5
 800b54e:	4630      	mov	r0, r6
 800b550:	f7fd fb90 	bl	8008c74 <__swsetup_r>
 800b554:	b170      	cbz	r0, 800b574 <_vfiprintf_r+0x5c>
 800b556:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b558:	07dc      	lsls	r4, r3, #31
 800b55a:	d504      	bpl.n	800b566 <_vfiprintf_r+0x4e>
 800b55c:	f04f 30ff 	mov.w	r0, #4294967295
 800b560:	b01d      	add	sp, #116	@ 0x74
 800b562:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b566:	89ab      	ldrh	r3, [r5, #12]
 800b568:	0598      	lsls	r0, r3, #22
 800b56a:	d4f7      	bmi.n	800b55c <_vfiprintf_r+0x44>
 800b56c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b56e:	f7fd fc65 	bl	8008e3c <__retarget_lock_release_recursive>
 800b572:	e7f3      	b.n	800b55c <_vfiprintf_r+0x44>
 800b574:	2300      	movs	r3, #0
 800b576:	9309      	str	r3, [sp, #36]	@ 0x24
 800b578:	2320      	movs	r3, #32
 800b57a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b57e:	f8cd 800c 	str.w	r8, [sp, #12]
 800b582:	2330      	movs	r3, #48	@ 0x30
 800b584:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800b734 <_vfiprintf_r+0x21c>
 800b588:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b58c:	f04f 0901 	mov.w	r9, #1
 800b590:	4623      	mov	r3, r4
 800b592:	469a      	mov	sl, r3
 800b594:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b598:	b10a      	cbz	r2, 800b59e <_vfiprintf_r+0x86>
 800b59a:	2a25      	cmp	r2, #37	@ 0x25
 800b59c:	d1f9      	bne.n	800b592 <_vfiprintf_r+0x7a>
 800b59e:	ebba 0b04 	subs.w	fp, sl, r4
 800b5a2:	d00b      	beq.n	800b5bc <_vfiprintf_r+0xa4>
 800b5a4:	465b      	mov	r3, fp
 800b5a6:	4622      	mov	r2, r4
 800b5a8:	4629      	mov	r1, r5
 800b5aa:	4630      	mov	r0, r6
 800b5ac:	f7ff ffa1 	bl	800b4f2 <__sfputs_r>
 800b5b0:	3001      	adds	r0, #1
 800b5b2:	f000 80a7 	beq.w	800b704 <_vfiprintf_r+0x1ec>
 800b5b6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b5b8:	445a      	add	r2, fp
 800b5ba:	9209      	str	r2, [sp, #36]	@ 0x24
 800b5bc:	f89a 3000 	ldrb.w	r3, [sl]
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	f000 809f 	beq.w	800b704 <_vfiprintf_r+0x1ec>
 800b5c6:	2300      	movs	r3, #0
 800b5c8:	f04f 32ff 	mov.w	r2, #4294967295
 800b5cc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b5d0:	f10a 0a01 	add.w	sl, sl, #1
 800b5d4:	9304      	str	r3, [sp, #16]
 800b5d6:	9307      	str	r3, [sp, #28]
 800b5d8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b5dc:	931a      	str	r3, [sp, #104]	@ 0x68
 800b5de:	4654      	mov	r4, sl
 800b5e0:	2205      	movs	r2, #5
 800b5e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b5e6:	4853      	ldr	r0, [pc, #332]	@ (800b734 <_vfiprintf_r+0x21c>)
 800b5e8:	f7f4 fe12 	bl	8000210 <memchr>
 800b5ec:	9a04      	ldr	r2, [sp, #16]
 800b5ee:	b9d8      	cbnz	r0, 800b628 <_vfiprintf_r+0x110>
 800b5f0:	06d1      	lsls	r1, r2, #27
 800b5f2:	bf44      	itt	mi
 800b5f4:	2320      	movmi	r3, #32
 800b5f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b5fa:	0713      	lsls	r3, r2, #28
 800b5fc:	bf44      	itt	mi
 800b5fe:	232b      	movmi	r3, #43	@ 0x2b
 800b600:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b604:	f89a 3000 	ldrb.w	r3, [sl]
 800b608:	2b2a      	cmp	r3, #42	@ 0x2a
 800b60a:	d015      	beq.n	800b638 <_vfiprintf_r+0x120>
 800b60c:	9a07      	ldr	r2, [sp, #28]
 800b60e:	4654      	mov	r4, sl
 800b610:	2000      	movs	r0, #0
 800b612:	f04f 0c0a 	mov.w	ip, #10
 800b616:	4621      	mov	r1, r4
 800b618:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b61c:	3b30      	subs	r3, #48	@ 0x30
 800b61e:	2b09      	cmp	r3, #9
 800b620:	d94b      	bls.n	800b6ba <_vfiprintf_r+0x1a2>
 800b622:	b1b0      	cbz	r0, 800b652 <_vfiprintf_r+0x13a>
 800b624:	9207      	str	r2, [sp, #28]
 800b626:	e014      	b.n	800b652 <_vfiprintf_r+0x13a>
 800b628:	eba0 0308 	sub.w	r3, r0, r8
 800b62c:	fa09 f303 	lsl.w	r3, r9, r3
 800b630:	4313      	orrs	r3, r2
 800b632:	9304      	str	r3, [sp, #16]
 800b634:	46a2      	mov	sl, r4
 800b636:	e7d2      	b.n	800b5de <_vfiprintf_r+0xc6>
 800b638:	9b03      	ldr	r3, [sp, #12]
 800b63a:	1d19      	adds	r1, r3, #4
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	9103      	str	r1, [sp, #12]
 800b640:	2b00      	cmp	r3, #0
 800b642:	bfbb      	ittet	lt
 800b644:	425b      	neglt	r3, r3
 800b646:	f042 0202 	orrlt.w	r2, r2, #2
 800b64a:	9307      	strge	r3, [sp, #28]
 800b64c:	9307      	strlt	r3, [sp, #28]
 800b64e:	bfb8      	it	lt
 800b650:	9204      	strlt	r2, [sp, #16]
 800b652:	7823      	ldrb	r3, [r4, #0]
 800b654:	2b2e      	cmp	r3, #46	@ 0x2e
 800b656:	d10a      	bne.n	800b66e <_vfiprintf_r+0x156>
 800b658:	7863      	ldrb	r3, [r4, #1]
 800b65a:	2b2a      	cmp	r3, #42	@ 0x2a
 800b65c:	d132      	bne.n	800b6c4 <_vfiprintf_r+0x1ac>
 800b65e:	9b03      	ldr	r3, [sp, #12]
 800b660:	1d1a      	adds	r2, r3, #4
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	9203      	str	r2, [sp, #12]
 800b666:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b66a:	3402      	adds	r4, #2
 800b66c:	9305      	str	r3, [sp, #20]
 800b66e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b744 <_vfiprintf_r+0x22c>
 800b672:	7821      	ldrb	r1, [r4, #0]
 800b674:	2203      	movs	r2, #3
 800b676:	4650      	mov	r0, sl
 800b678:	f7f4 fdca 	bl	8000210 <memchr>
 800b67c:	b138      	cbz	r0, 800b68e <_vfiprintf_r+0x176>
 800b67e:	9b04      	ldr	r3, [sp, #16]
 800b680:	eba0 000a 	sub.w	r0, r0, sl
 800b684:	2240      	movs	r2, #64	@ 0x40
 800b686:	4082      	lsls	r2, r0
 800b688:	4313      	orrs	r3, r2
 800b68a:	3401      	adds	r4, #1
 800b68c:	9304      	str	r3, [sp, #16]
 800b68e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b692:	4829      	ldr	r0, [pc, #164]	@ (800b738 <_vfiprintf_r+0x220>)
 800b694:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b698:	2206      	movs	r2, #6
 800b69a:	f7f4 fdb9 	bl	8000210 <memchr>
 800b69e:	2800      	cmp	r0, #0
 800b6a0:	d03f      	beq.n	800b722 <_vfiprintf_r+0x20a>
 800b6a2:	4b26      	ldr	r3, [pc, #152]	@ (800b73c <_vfiprintf_r+0x224>)
 800b6a4:	bb1b      	cbnz	r3, 800b6ee <_vfiprintf_r+0x1d6>
 800b6a6:	9b03      	ldr	r3, [sp, #12]
 800b6a8:	3307      	adds	r3, #7
 800b6aa:	f023 0307 	bic.w	r3, r3, #7
 800b6ae:	3308      	adds	r3, #8
 800b6b0:	9303      	str	r3, [sp, #12]
 800b6b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b6b4:	443b      	add	r3, r7
 800b6b6:	9309      	str	r3, [sp, #36]	@ 0x24
 800b6b8:	e76a      	b.n	800b590 <_vfiprintf_r+0x78>
 800b6ba:	fb0c 3202 	mla	r2, ip, r2, r3
 800b6be:	460c      	mov	r4, r1
 800b6c0:	2001      	movs	r0, #1
 800b6c2:	e7a8      	b.n	800b616 <_vfiprintf_r+0xfe>
 800b6c4:	2300      	movs	r3, #0
 800b6c6:	3401      	adds	r4, #1
 800b6c8:	9305      	str	r3, [sp, #20]
 800b6ca:	4619      	mov	r1, r3
 800b6cc:	f04f 0c0a 	mov.w	ip, #10
 800b6d0:	4620      	mov	r0, r4
 800b6d2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b6d6:	3a30      	subs	r2, #48	@ 0x30
 800b6d8:	2a09      	cmp	r2, #9
 800b6da:	d903      	bls.n	800b6e4 <_vfiprintf_r+0x1cc>
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	d0c6      	beq.n	800b66e <_vfiprintf_r+0x156>
 800b6e0:	9105      	str	r1, [sp, #20]
 800b6e2:	e7c4      	b.n	800b66e <_vfiprintf_r+0x156>
 800b6e4:	fb0c 2101 	mla	r1, ip, r1, r2
 800b6e8:	4604      	mov	r4, r0
 800b6ea:	2301      	movs	r3, #1
 800b6ec:	e7f0      	b.n	800b6d0 <_vfiprintf_r+0x1b8>
 800b6ee:	ab03      	add	r3, sp, #12
 800b6f0:	9300      	str	r3, [sp, #0]
 800b6f2:	462a      	mov	r2, r5
 800b6f4:	4b12      	ldr	r3, [pc, #72]	@ (800b740 <_vfiprintf_r+0x228>)
 800b6f6:	a904      	add	r1, sp, #16
 800b6f8:	4630      	mov	r0, r6
 800b6fa:	f7fc fb1b 	bl	8007d34 <_printf_float>
 800b6fe:	4607      	mov	r7, r0
 800b700:	1c78      	adds	r0, r7, #1
 800b702:	d1d6      	bne.n	800b6b2 <_vfiprintf_r+0x19a>
 800b704:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b706:	07d9      	lsls	r1, r3, #31
 800b708:	d405      	bmi.n	800b716 <_vfiprintf_r+0x1fe>
 800b70a:	89ab      	ldrh	r3, [r5, #12]
 800b70c:	059a      	lsls	r2, r3, #22
 800b70e:	d402      	bmi.n	800b716 <_vfiprintf_r+0x1fe>
 800b710:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b712:	f7fd fb93 	bl	8008e3c <__retarget_lock_release_recursive>
 800b716:	89ab      	ldrh	r3, [r5, #12]
 800b718:	065b      	lsls	r3, r3, #25
 800b71a:	f53f af1f 	bmi.w	800b55c <_vfiprintf_r+0x44>
 800b71e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b720:	e71e      	b.n	800b560 <_vfiprintf_r+0x48>
 800b722:	ab03      	add	r3, sp, #12
 800b724:	9300      	str	r3, [sp, #0]
 800b726:	462a      	mov	r2, r5
 800b728:	4b05      	ldr	r3, [pc, #20]	@ (800b740 <_vfiprintf_r+0x228>)
 800b72a:	a904      	add	r1, sp, #16
 800b72c:	4630      	mov	r0, r6
 800b72e:	f7fc fd99 	bl	8008264 <_printf_i>
 800b732:	e7e4      	b.n	800b6fe <_vfiprintf_r+0x1e6>
 800b734:	0800ff61 	.word	0x0800ff61
 800b738:	0800ff6b 	.word	0x0800ff6b
 800b73c:	08007d35 	.word	0x08007d35
 800b740:	0800b4f3 	.word	0x0800b4f3
 800b744:	0800ff67 	.word	0x0800ff67

0800b748 <__sflush_r>:
 800b748:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b74c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b750:	0716      	lsls	r6, r2, #28
 800b752:	4605      	mov	r5, r0
 800b754:	460c      	mov	r4, r1
 800b756:	d454      	bmi.n	800b802 <__sflush_r+0xba>
 800b758:	684b      	ldr	r3, [r1, #4]
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	dc02      	bgt.n	800b764 <__sflush_r+0x1c>
 800b75e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b760:	2b00      	cmp	r3, #0
 800b762:	dd48      	ble.n	800b7f6 <__sflush_r+0xae>
 800b764:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b766:	2e00      	cmp	r6, #0
 800b768:	d045      	beq.n	800b7f6 <__sflush_r+0xae>
 800b76a:	2300      	movs	r3, #0
 800b76c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b770:	682f      	ldr	r7, [r5, #0]
 800b772:	6a21      	ldr	r1, [r4, #32]
 800b774:	602b      	str	r3, [r5, #0]
 800b776:	d030      	beq.n	800b7da <__sflush_r+0x92>
 800b778:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b77a:	89a3      	ldrh	r3, [r4, #12]
 800b77c:	0759      	lsls	r1, r3, #29
 800b77e:	d505      	bpl.n	800b78c <__sflush_r+0x44>
 800b780:	6863      	ldr	r3, [r4, #4]
 800b782:	1ad2      	subs	r2, r2, r3
 800b784:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b786:	b10b      	cbz	r3, 800b78c <__sflush_r+0x44>
 800b788:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b78a:	1ad2      	subs	r2, r2, r3
 800b78c:	2300      	movs	r3, #0
 800b78e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b790:	6a21      	ldr	r1, [r4, #32]
 800b792:	4628      	mov	r0, r5
 800b794:	47b0      	blx	r6
 800b796:	1c43      	adds	r3, r0, #1
 800b798:	89a3      	ldrh	r3, [r4, #12]
 800b79a:	d106      	bne.n	800b7aa <__sflush_r+0x62>
 800b79c:	6829      	ldr	r1, [r5, #0]
 800b79e:	291d      	cmp	r1, #29
 800b7a0:	d82b      	bhi.n	800b7fa <__sflush_r+0xb2>
 800b7a2:	4a2a      	ldr	r2, [pc, #168]	@ (800b84c <__sflush_r+0x104>)
 800b7a4:	410a      	asrs	r2, r1
 800b7a6:	07d6      	lsls	r6, r2, #31
 800b7a8:	d427      	bmi.n	800b7fa <__sflush_r+0xb2>
 800b7aa:	2200      	movs	r2, #0
 800b7ac:	6062      	str	r2, [r4, #4]
 800b7ae:	04d9      	lsls	r1, r3, #19
 800b7b0:	6922      	ldr	r2, [r4, #16]
 800b7b2:	6022      	str	r2, [r4, #0]
 800b7b4:	d504      	bpl.n	800b7c0 <__sflush_r+0x78>
 800b7b6:	1c42      	adds	r2, r0, #1
 800b7b8:	d101      	bne.n	800b7be <__sflush_r+0x76>
 800b7ba:	682b      	ldr	r3, [r5, #0]
 800b7bc:	b903      	cbnz	r3, 800b7c0 <__sflush_r+0x78>
 800b7be:	6560      	str	r0, [r4, #84]	@ 0x54
 800b7c0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b7c2:	602f      	str	r7, [r5, #0]
 800b7c4:	b1b9      	cbz	r1, 800b7f6 <__sflush_r+0xae>
 800b7c6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b7ca:	4299      	cmp	r1, r3
 800b7cc:	d002      	beq.n	800b7d4 <__sflush_r+0x8c>
 800b7ce:	4628      	mov	r0, r5
 800b7d0:	f7fe f99e 	bl	8009b10 <_free_r>
 800b7d4:	2300      	movs	r3, #0
 800b7d6:	6363      	str	r3, [r4, #52]	@ 0x34
 800b7d8:	e00d      	b.n	800b7f6 <__sflush_r+0xae>
 800b7da:	2301      	movs	r3, #1
 800b7dc:	4628      	mov	r0, r5
 800b7de:	47b0      	blx	r6
 800b7e0:	4602      	mov	r2, r0
 800b7e2:	1c50      	adds	r0, r2, #1
 800b7e4:	d1c9      	bne.n	800b77a <__sflush_r+0x32>
 800b7e6:	682b      	ldr	r3, [r5, #0]
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d0c6      	beq.n	800b77a <__sflush_r+0x32>
 800b7ec:	2b1d      	cmp	r3, #29
 800b7ee:	d001      	beq.n	800b7f4 <__sflush_r+0xac>
 800b7f0:	2b16      	cmp	r3, #22
 800b7f2:	d11e      	bne.n	800b832 <__sflush_r+0xea>
 800b7f4:	602f      	str	r7, [r5, #0]
 800b7f6:	2000      	movs	r0, #0
 800b7f8:	e022      	b.n	800b840 <__sflush_r+0xf8>
 800b7fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b7fe:	b21b      	sxth	r3, r3
 800b800:	e01b      	b.n	800b83a <__sflush_r+0xf2>
 800b802:	690f      	ldr	r7, [r1, #16]
 800b804:	2f00      	cmp	r7, #0
 800b806:	d0f6      	beq.n	800b7f6 <__sflush_r+0xae>
 800b808:	0793      	lsls	r3, r2, #30
 800b80a:	680e      	ldr	r6, [r1, #0]
 800b80c:	bf08      	it	eq
 800b80e:	694b      	ldreq	r3, [r1, #20]
 800b810:	600f      	str	r7, [r1, #0]
 800b812:	bf18      	it	ne
 800b814:	2300      	movne	r3, #0
 800b816:	eba6 0807 	sub.w	r8, r6, r7
 800b81a:	608b      	str	r3, [r1, #8]
 800b81c:	f1b8 0f00 	cmp.w	r8, #0
 800b820:	dde9      	ble.n	800b7f6 <__sflush_r+0xae>
 800b822:	6a21      	ldr	r1, [r4, #32]
 800b824:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b826:	4643      	mov	r3, r8
 800b828:	463a      	mov	r2, r7
 800b82a:	4628      	mov	r0, r5
 800b82c:	47b0      	blx	r6
 800b82e:	2800      	cmp	r0, #0
 800b830:	dc08      	bgt.n	800b844 <__sflush_r+0xfc>
 800b832:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b836:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b83a:	81a3      	strh	r3, [r4, #12]
 800b83c:	f04f 30ff 	mov.w	r0, #4294967295
 800b840:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b844:	4407      	add	r7, r0
 800b846:	eba8 0800 	sub.w	r8, r8, r0
 800b84a:	e7e7      	b.n	800b81c <__sflush_r+0xd4>
 800b84c:	dfbffffe 	.word	0xdfbffffe

0800b850 <_fflush_r>:
 800b850:	b538      	push	{r3, r4, r5, lr}
 800b852:	690b      	ldr	r3, [r1, #16]
 800b854:	4605      	mov	r5, r0
 800b856:	460c      	mov	r4, r1
 800b858:	b913      	cbnz	r3, 800b860 <_fflush_r+0x10>
 800b85a:	2500      	movs	r5, #0
 800b85c:	4628      	mov	r0, r5
 800b85e:	bd38      	pop	{r3, r4, r5, pc}
 800b860:	b118      	cbz	r0, 800b86a <_fflush_r+0x1a>
 800b862:	6a03      	ldr	r3, [r0, #32]
 800b864:	b90b      	cbnz	r3, 800b86a <_fflush_r+0x1a>
 800b866:	f7fd f8bd 	bl	80089e4 <__sinit>
 800b86a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b86e:	2b00      	cmp	r3, #0
 800b870:	d0f3      	beq.n	800b85a <_fflush_r+0xa>
 800b872:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b874:	07d0      	lsls	r0, r2, #31
 800b876:	d404      	bmi.n	800b882 <_fflush_r+0x32>
 800b878:	0599      	lsls	r1, r3, #22
 800b87a:	d402      	bmi.n	800b882 <_fflush_r+0x32>
 800b87c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b87e:	f7fd fadc 	bl	8008e3a <__retarget_lock_acquire_recursive>
 800b882:	4628      	mov	r0, r5
 800b884:	4621      	mov	r1, r4
 800b886:	f7ff ff5f 	bl	800b748 <__sflush_r>
 800b88a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b88c:	07da      	lsls	r2, r3, #31
 800b88e:	4605      	mov	r5, r0
 800b890:	d4e4      	bmi.n	800b85c <_fflush_r+0xc>
 800b892:	89a3      	ldrh	r3, [r4, #12]
 800b894:	059b      	lsls	r3, r3, #22
 800b896:	d4e1      	bmi.n	800b85c <_fflush_r+0xc>
 800b898:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b89a:	f7fd facf 	bl	8008e3c <__retarget_lock_release_recursive>
 800b89e:	e7dd      	b.n	800b85c <_fflush_r+0xc>

0800b8a0 <__swhatbuf_r>:
 800b8a0:	b570      	push	{r4, r5, r6, lr}
 800b8a2:	460c      	mov	r4, r1
 800b8a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b8a8:	2900      	cmp	r1, #0
 800b8aa:	b096      	sub	sp, #88	@ 0x58
 800b8ac:	4615      	mov	r5, r2
 800b8ae:	461e      	mov	r6, r3
 800b8b0:	da0d      	bge.n	800b8ce <__swhatbuf_r+0x2e>
 800b8b2:	89a3      	ldrh	r3, [r4, #12]
 800b8b4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b8b8:	f04f 0100 	mov.w	r1, #0
 800b8bc:	bf14      	ite	ne
 800b8be:	2340      	movne	r3, #64	@ 0x40
 800b8c0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b8c4:	2000      	movs	r0, #0
 800b8c6:	6031      	str	r1, [r6, #0]
 800b8c8:	602b      	str	r3, [r5, #0]
 800b8ca:	b016      	add	sp, #88	@ 0x58
 800b8cc:	bd70      	pop	{r4, r5, r6, pc}
 800b8ce:	466a      	mov	r2, sp
 800b8d0:	f000 f874 	bl	800b9bc <_fstat_r>
 800b8d4:	2800      	cmp	r0, #0
 800b8d6:	dbec      	blt.n	800b8b2 <__swhatbuf_r+0x12>
 800b8d8:	9901      	ldr	r1, [sp, #4]
 800b8da:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b8de:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b8e2:	4259      	negs	r1, r3
 800b8e4:	4159      	adcs	r1, r3
 800b8e6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b8ea:	e7eb      	b.n	800b8c4 <__swhatbuf_r+0x24>

0800b8ec <__smakebuf_r>:
 800b8ec:	898b      	ldrh	r3, [r1, #12]
 800b8ee:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b8f0:	079d      	lsls	r5, r3, #30
 800b8f2:	4606      	mov	r6, r0
 800b8f4:	460c      	mov	r4, r1
 800b8f6:	d507      	bpl.n	800b908 <__smakebuf_r+0x1c>
 800b8f8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b8fc:	6023      	str	r3, [r4, #0]
 800b8fe:	6123      	str	r3, [r4, #16]
 800b900:	2301      	movs	r3, #1
 800b902:	6163      	str	r3, [r4, #20]
 800b904:	b003      	add	sp, #12
 800b906:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b908:	ab01      	add	r3, sp, #4
 800b90a:	466a      	mov	r2, sp
 800b90c:	f7ff ffc8 	bl	800b8a0 <__swhatbuf_r>
 800b910:	9f00      	ldr	r7, [sp, #0]
 800b912:	4605      	mov	r5, r0
 800b914:	4639      	mov	r1, r7
 800b916:	4630      	mov	r0, r6
 800b918:	f7fc f8e0 	bl	8007adc <_malloc_r>
 800b91c:	b948      	cbnz	r0, 800b932 <__smakebuf_r+0x46>
 800b91e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b922:	059a      	lsls	r2, r3, #22
 800b924:	d4ee      	bmi.n	800b904 <__smakebuf_r+0x18>
 800b926:	f023 0303 	bic.w	r3, r3, #3
 800b92a:	f043 0302 	orr.w	r3, r3, #2
 800b92e:	81a3      	strh	r3, [r4, #12]
 800b930:	e7e2      	b.n	800b8f8 <__smakebuf_r+0xc>
 800b932:	89a3      	ldrh	r3, [r4, #12]
 800b934:	6020      	str	r0, [r4, #0]
 800b936:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b93a:	81a3      	strh	r3, [r4, #12]
 800b93c:	9b01      	ldr	r3, [sp, #4]
 800b93e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b942:	b15b      	cbz	r3, 800b95c <__smakebuf_r+0x70>
 800b944:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b948:	4630      	mov	r0, r6
 800b94a:	f000 f849 	bl	800b9e0 <_isatty_r>
 800b94e:	b128      	cbz	r0, 800b95c <__smakebuf_r+0x70>
 800b950:	89a3      	ldrh	r3, [r4, #12]
 800b952:	f023 0303 	bic.w	r3, r3, #3
 800b956:	f043 0301 	orr.w	r3, r3, #1
 800b95a:	81a3      	strh	r3, [r4, #12]
 800b95c:	89a3      	ldrh	r3, [r4, #12]
 800b95e:	431d      	orrs	r5, r3
 800b960:	81a5      	strh	r5, [r4, #12]
 800b962:	e7cf      	b.n	800b904 <__smakebuf_r+0x18>

0800b964 <memmove>:
 800b964:	4288      	cmp	r0, r1
 800b966:	b510      	push	{r4, lr}
 800b968:	eb01 0402 	add.w	r4, r1, r2
 800b96c:	d902      	bls.n	800b974 <memmove+0x10>
 800b96e:	4284      	cmp	r4, r0
 800b970:	4623      	mov	r3, r4
 800b972:	d807      	bhi.n	800b984 <memmove+0x20>
 800b974:	1e43      	subs	r3, r0, #1
 800b976:	42a1      	cmp	r1, r4
 800b978:	d008      	beq.n	800b98c <memmove+0x28>
 800b97a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b97e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b982:	e7f8      	b.n	800b976 <memmove+0x12>
 800b984:	4402      	add	r2, r0
 800b986:	4601      	mov	r1, r0
 800b988:	428a      	cmp	r2, r1
 800b98a:	d100      	bne.n	800b98e <memmove+0x2a>
 800b98c:	bd10      	pop	{r4, pc}
 800b98e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b992:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b996:	e7f7      	b.n	800b988 <memmove+0x24>

0800b998 <strncmp>:
 800b998:	b510      	push	{r4, lr}
 800b99a:	b16a      	cbz	r2, 800b9b8 <strncmp+0x20>
 800b99c:	3901      	subs	r1, #1
 800b99e:	1884      	adds	r4, r0, r2
 800b9a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b9a4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800b9a8:	429a      	cmp	r2, r3
 800b9aa:	d103      	bne.n	800b9b4 <strncmp+0x1c>
 800b9ac:	42a0      	cmp	r0, r4
 800b9ae:	d001      	beq.n	800b9b4 <strncmp+0x1c>
 800b9b0:	2a00      	cmp	r2, #0
 800b9b2:	d1f5      	bne.n	800b9a0 <strncmp+0x8>
 800b9b4:	1ad0      	subs	r0, r2, r3
 800b9b6:	bd10      	pop	{r4, pc}
 800b9b8:	4610      	mov	r0, r2
 800b9ba:	e7fc      	b.n	800b9b6 <strncmp+0x1e>

0800b9bc <_fstat_r>:
 800b9bc:	b538      	push	{r3, r4, r5, lr}
 800b9be:	4d07      	ldr	r5, [pc, #28]	@ (800b9dc <_fstat_r+0x20>)
 800b9c0:	2300      	movs	r3, #0
 800b9c2:	4604      	mov	r4, r0
 800b9c4:	4608      	mov	r0, r1
 800b9c6:	4611      	mov	r1, r2
 800b9c8:	602b      	str	r3, [r5, #0]
 800b9ca:	f7f6 fea7 	bl	800271c <_fstat>
 800b9ce:	1c43      	adds	r3, r0, #1
 800b9d0:	d102      	bne.n	800b9d8 <_fstat_r+0x1c>
 800b9d2:	682b      	ldr	r3, [r5, #0]
 800b9d4:	b103      	cbz	r3, 800b9d8 <_fstat_r+0x1c>
 800b9d6:	6023      	str	r3, [r4, #0]
 800b9d8:	bd38      	pop	{r3, r4, r5, pc}
 800b9da:	bf00      	nop
 800b9dc:	20000624 	.word	0x20000624

0800b9e0 <_isatty_r>:
 800b9e0:	b538      	push	{r3, r4, r5, lr}
 800b9e2:	4d06      	ldr	r5, [pc, #24]	@ (800b9fc <_isatty_r+0x1c>)
 800b9e4:	2300      	movs	r3, #0
 800b9e6:	4604      	mov	r4, r0
 800b9e8:	4608      	mov	r0, r1
 800b9ea:	602b      	str	r3, [r5, #0]
 800b9ec:	f7f6 fea6 	bl	800273c <_isatty>
 800b9f0:	1c43      	adds	r3, r0, #1
 800b9f2:	d102      	bne.n	800b9fa <_isatty_r+0x1a>
 800b9f4:	682b      	ldr	r3, [r5, #0]
 800b9f6:	b103      	cbz	r3, 800b9fa <_isatty_r+0x1a>
 800b9f8:	6023      	str	r3, [r4, #0]
 800b9fa:	bd38      	pop	{r3, r4, r5, pc}
 800b9fc:	20000624 	.word	0x20000624

0800ba00 <nan>:
 800ba00:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800ba08 <nan+0x8>
 800ba04:	4770      	bx	lr
 800ba06:	bf00      	nop
 800ba08:	00000000 	.word	0x00000000
 800ba0c:	7ff80000 	.word	0x7ff80000

0800ba10 <__assert_func>:
 800ba10:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ba12:	4614      	mov	r4, r2
 800ba14:	461a      	mov	r2, r3
 800ba16:	4b09      	ldr	r3, [pc, #36]	@ (800ba3c <__assert_func+0x2c>)
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	4605      	mov	r5, r0
 800ba1c:	68d8      	ldr	r0, [r3, #12]
 800ba1e:	b954      	cbnz	r4, 800ba36 <__assert_func+0x26>
 800ba20:	4b07      	ldr	r3, [pc, #28]	@ (800ba40 <__assert_func+0x30>)
 800ba22:	461c      	mov	r4, r3
 800ba24:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ba28:	9100      	str	r1, [sp, #0]
 800ba2a:	462b      	mov	r3, r5
 800ba2c:	4905      	ldr	r1, [pc, #20]	@ (800ba44 <__assert_func+0x34>)
 800ba2e:	f000 fba7 	bl	800c180 <fiprintf>
 800ba32:	f000 fbb7 	bl	800c1a4 <abort>
 800ba36:	4b04      	ldr	r3, [pc, #16]	@ (800ba48 <__assert_func+0x38>)
 800ba38:	e7f4      	b.n	800ba24 <__assert_func+0x14>
 800ba3a:	bf00      	nop
 800ba3c:	2000004c 	.word	0x2000004c
 800ba40:	0800ffb5 	.word	0x0800ffb5
 800ba44:	0800ff87 	.word	0x0800ff87
 800ba48:	0800ff7a 	.word	0x0800ff7a

0800ba4c <_calloc_r>:
 800ba4c:	b570      	push	{r4, r5, r6, lr}
 800ba4e:	fba1 5402 	umull	r5, r4, r1, r2
 800ba52:	b93c      	cbnz	r4, 800ba64 <_calloc_r+0x18>
 800ba54:	4629      	mov	r1, r5
 800ba56:	f7fc f841 	bl	8007adc <_malloc_r>
 800ba5a:	4606      	mov	r6, r0
 800ba5c:	b928      	cbnz	r0, 800ba6a <_calloc_r+0x1e>
 800ba5e:	2600      	movs	r6, #0
 800ba60:	4630      	mov	r0, r6
 800ba62:	bd70      	pop	{r4, r5, r6, pc}
 800ba64:	220c      	movs	r2, #12
 800ba66:	6002      	str	r2, [r0, #0]
 800ba68:	e7f9      	b.n	800ba5e <_calloc_r+0x12>
 800ba6a:	462a      	mov	r2, r5
 800ba6c:	4621      	mov	r1, r4
 800ba6e:	f7fd f957 	bl	8008d20 <memset>
 800ba72:	e7f5      	b.n	800ba60 <_calloc_r+0x14>

0800ba74 <rshift>:
 800ba74:	6903      	ldr	r3, [r0, #16]
 800ba76:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800ba7a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ba7e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800ba82:	f100 0414 	add.w	r4, r0, #20
 800ba86:	dd45      	ble.n	800bb14 <rshift+0xa0>
 800ba88:	f011 011f 	ands.w	r1, r1, #31
 800ba8c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800ba90:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800ba94:	d10c      	bne.n	800bab0 <rshift+0x3c>
 800ba96:	f100 0710 	add.w	r7, r0, #16
 800ba9a:	4629      	mov	r1, r5
 800ba9c:	42b1      	cmp	r1, r6
 800ba9e:	d334      	bcc.n	800bb0a <rshift+0x96>
 800baa0:	1a9b      	subs	r3, r3, r2
 800baa2:	009b      	lsls	r3, r3, #2
 800baa4:	1eea      	subs	r2, r5, #3
 800baa6:	4296      	cmp	r6, r2
 800baa8:	bf38      	it	cc
 800baaa:	2300      	movcc	r3, #0
 800baac:	4423      	add	r3, r4
 800baae:	e015      	b.n	800badc <rshift+0x68>
 800bab0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800bab4:	f1c1 0820 	rsb	r8, r1, #32
 800bab8:	40cf      	lsrs	r7, r1
 800baba:	f105 0e04 	add.w	lr, r5, #4
 800babe:	46a1      	mov	r9, r4
 800bac0:	4576      	cmp	r6, lr
 800bac2:	46f4      	mov	ip, lr
 800bac4:	d815      	bhi.n	800baf2 <rshift+0x7e>
 800bac6:	1a9a      	subs	r2, r3, r2
 800bac8:	0092      	lsls	r2, r2, #2
 800baca:	3a04      	subs	r2, #4
 800bacc:	3501      	adds	r5, #1
 800bace:	42ae      	cmp	r6, r5
 800bad0:	bf38      	it	cc
 800bad2:	2200      	movcc	r2, #0
 800bad4:	18a3      	adds	r3, r4, r2
 800bad6:	50a7      	str	r7, [r4, r2]
 800bad8:	b107      	cbz	r7, 800badc <rshift+0x68>
 800bada:	3304      	adds	r3, #4
 800badc:	1b1a      	subs	r2, r3, r4
 800bade:	42a3      	cmp	r3, r4
 800bae0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800bae4:	bf08      	it	eq
 800bae6:	2300      	moveq	r3, #0
 800bae8:	6102      	str	r2, [r0, #16]
 800baea:	bf08      	it	eq
 800baec:	6143      	streq	r3, [r0, #20]
 800baee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800baf2:	f8dc c000 	ldr.w	ip, [ip]
 800baf6:	fa0c fc08 	lsl.w	ip, ip, r8
 800bafa:	ea4c 0707 	orr.w	r7, ip, r7
 800bafe:	f849 7b04 	str.w	r7, [r9], #4
 800bb02:	f85e 7b04 	ldr.w	r7, [lr], #4
 800bb06:	40cf      	lsrs	r7, r1
 800bb08:	e7da      	b.n	800bac0 <rshift+0x4c>
 800bb0a:	f851 cb04 	ldr.w	ip, [r1], #4
 800bb0e:	f847 cf04 	str.w	ip, [r7, #4]!
 800bb12:	e7c3      	b.n	800ba9c <rshift+0x28>
 800bb14:	4623      	mov	r3, r4
 800bb16:	e7e1      	b.n	800badc <rshift+0x68>

0800bb18 <__hexdig_fun>:
 800bb18:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800bb1c:	2b09      	cmp	r3, #9
 800bb1e:	d802      	bhi.n	800bb26 <__hexdig_fun+0xe>
 800bb20:	3820      	subs	r0, #32
 800bb22:	b2c0      	uxtb	r0, r0
 800bb24:	4770      	bx	lr
 800bb26:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800bb2a:	2b05      	cmp	r3, #5
 800bb2c:	d801      	bhi.n	800bb32 <__hexdig_fun+0x1a>
 800bb2e:	3847      	subs	r0, #71	@ 0x47
 800bb30:	e7f7      	b.n	800bb22 <__hexdig_fun+0xa>
 800bb32:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800bb36:	2b05      	cmp	r3, #5
 800bb38:	d801      	bhi.n	800bb3e <__hexdig_fun+0x26>
 800bb3a:	3827      	subs	r0, #39	@ 0x27
 800bb3c:	e7f1      	b.n	800bb22 <__hexdig_fun+0xa>
 800bb3e:	2000      	movs	r0, #0
 800bb40:	4770      	bx	lr
	...

0800bb44 <__gethex>:
 800bb44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb48:	b085      	sub	sp, #20
 800bb4a:	468a      	mov	sl, r1
 800bb4c:	9302      	str	r3, [sp, #8]
 800bb4e:	680b      	ldr	r3, [r1, #0]
 800bb50:	9001      	str	r0, [sp, #4]
 800bb52:	4690      	mov	r8, r2
 800bb54:	1c9c      	adds	r4, r3, #2
 800bb56:	46a1      	mov	r9, r4
 800bb58:	f814 0b01 	ldrb.w	r0, [r4], #1
 800bb5c:	2830      	cmp	r0, #48	@ 0x30
 800bb5e:	d0fa      	beq.n	800bb56 <__gethex+0x12>
 800bb60:	eba9 0303 	sub.w	r3, r9, r3
 800bb64:	f1a3 0b02 	sub.w	fp, r3, #2
 800bb68:	f7ff ffd6 	bl	800bb18 <__hexdig_fun>
 800bb6c:	4605      	mov	r5, r0
 800bb6e:	2800      	cmp	r0, #0
 800bb70:	d168      	bne.n	800bc44 <__gethex+0x100>
 800bb72:	49a0      	ldr	r1, [pc, #640]	@ (800bdf4 <__gethex+0x2b0>)
 800bb74:	2201      	movs	r2, #1
 800bb76:	4648      	mov	r0, r9
 800bb78:	f7ff ff0e 	bl	800b998 <strncmp>
 800bb7c:	4607      	mov	r7, r0
 800bb7e:	2800      	cmp	r0, #0
 800bb80:	d167      	bne.n	800bc52 <__gethex+0x10e>
 800bb82:	f899 0001 	ldrb.w	r0, [r9, #1]
 800bb86:	4626      	mov	r6, r4
 800bb88:	f7ff ffc6 	bl	800bb18 <__hexdig_fun>
 800bb8c:	2800      	cmp	r0, #0
 800bb8e:	d062      	beq.n	800bc56 <__gethex+0x112>
 800bb90:	4623      	mov	r3, r4
 800bb92:	7818      	ldrb	r0, [r3, #0]
 800bb94:	2830      	cmp	r0, #48	@ 0x30
 800bb96:	4699      	mov	r9, r3
 800bb98:	f103 0301 	add.w	r3, r3, #1
 800bb9c:	d0f9      	beq.n	800bb92 <__gethex+0x4e>
 800bb9e:	f7ff ffbb 	bl	800bb18 <__hexdig_fun>
 800bba2:	fab0 f580 	clz	r5, r0
 800bba6:	096d      	lsrs	r5, r5, #5
 800bba8:	f04f 0b01 	mov.w	fp, #1
 800bbac:	464a      	mov	r2, r9
 800bbae:	4616      	mov	r6, r2
 800bbb0:	3201      	adds	r2, #1
 800bbb2:	7830      	ldrb	r0, [r6, #0]
 800bbb4:	f7ff ffb0 	bl	800bb18 <__hexdig_fun>
 800bbb8:	2800      	cmp	r0, #0
 800bbba:	d1f8      	bne.n	800bbae <__gethex+0x6a>
 800bbbc:	498d      	ldr	r1, [pc, #564]	@ (800bdf4 <__gethex+0x2b0>)
 800bbbe:	2201      	movs	r2, #1
 800bbc0:	4630      	mov	r0, r6
 800bbc2:	f7ff fee9 	bl	800b998 <strncmp>
 800bbc6:	2800      	cmp	r0, #0
 800bbc8:	d13f      	bne.n	800bc4a <__gethex+0x106>
 800bbca:	b944      	cbnz	r4, 800bbde <__gethex+0x9a>
 800bbcc:	1c74      	adds	r4, r6, #1
 800bbce:	4622      	mov	r2, r4
 800bbd0:	4616      	mov	r6, r2
 800bbd2:	3201      	adds	r2, #1
 800bbd4:	7830      	ldrb	r0, [r6, #0]
 800bbd6:	f7ff ff9f 	bl	800bb18 <__hexdig_fun>
 800bbda:	2800      	cmp	r0, #0
 800bbdc:	d1f8      	bne.n	800bbd0 <__gethex+0x8c>
 800bbde:	1ba4      	subs	r4, r4, r6
 800bbe0:	00a7      	lsls	r7, r4, #2
 800bbe2:	7833      	ldrb	r3, [r6, #0]
 800bbe4:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800bbe8:	2b50      	cmp	r3, #80	@ 0x50
 800bbea:	d13e      	bne.n	800bc6a <__gethex+0x126>
 800bbec:	7873      	ldrb	r3, [r6, #1]
 800bbee:	2b2b      	cmp	r3, #43	@ 0x2b
 800bbf0:	d033      	beq.n	800bc5a <__gethex+0x116>
 800bbf2:	2b2d      	cmp	r3, #45	@ 0x2d
 800bbf4:	d034      	beq.n	800bc60 <__gethex+0x11c>
 800bbf6:	1c71      	adds	r1, r6, #1
 800bbf8:	2400      	movs	r4, #0
 800bbfa:	7808      	ldrb	r0, [r1, #0]
 800bbfc:	f7ff ff8c 	bl	800bb18 <__hexdig_fun>
 800bc00:	1e43      	subs	r3, r0, #1
 800bc02:	b2db      	uxtb	r3, r3
 800bc04:	2b18      	cmp	r3, #24
 800bc06:	d830      	bhi.n	800bc6a <__gethex+0x126>
 800bc08:	f1a0 0210 	sub.w	r2, r0, #16
 800bc0c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800bc10:	f7ff ff82 	bl	800bb18 <__hexdig_fun>
 800bc14:	f100 3cff 	add.w	ip, r0, #4294967295
 800bc18:	fa5f fc8c 	uxtb.w	ip, ip
 800bc1c:	f1bc 0f18 	cmp.w	ip, #24
 800bc20:	f04f 030a 	mov.w	r3, #10
 800bc24:	d91e      	bls.n	800bc64 <__gethex+0x120>
 800bc26:	b104      	cbz	r4, 800bc2a <__gethex+0xe6>
 800bc28:	4252      	negs	r2, r2
 800bc2a:	4417      	add	r7, r2
 800bc2c:	f8ca 1000 	str.w	r1, [sl]
 800bc30:	b1ed      	cbz	r5, 800bc6e <__gethex+0x12a>
 800bc32:	f1bb 0f00 	cmp.w	fp, #0
 800bc36:	bf0c      	ite	eq
 800bc38:	2506      	moveq	r5, #6
 800bc3a:	2500      	movne	r5, #0
 800bc3c:	4628      	mov	r0, r5
 800bc3e:	b005      	add	sp, #20
 800bc40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc44:	2500      	movs	r5, #0
 800bc46:	462c      	mov	r4, r5
 800bc48:	e7b0      	b.n	800bbac <__gethex+0x68>
 800bc4a:	2c00      	cmp	r4, #0
 800bc4c:	d1c7      	bne.n	800bbde <__gethex+0x9a>
 800bc4e:	4627      	mov	r7, r4
 800bc50:	e7c7      	b.n	800bbe2 <__gethex+0x9e>
 800bc52:	464e      	mov	r6, r9
 800bc54:	462f      	mov	r7, r5
 800bc56:	2501      	movs	r5, #1
 800bc58:	e7c3      	b.n	800bbe2 <__gethex+0x9e>
 800bc5a:	2400      	movs	r4, #0
 800bc5c:	1cb1      	adds	r1, r6, #2
 800bc5e:	e7cc      	b.n	800bbfa <__gethex+0xb6>
 800bc60:	2401      	movs	r4, #1
 800bc62:	e7fb      	b.n	800bc5c <__gethex+0x118>
 800bc64:	fb03 0002 	mla	r0, r3, r2, r0
 800bc68:	e7ce      	b.n	800bc08 <__gethex+0xc4>
 800bc6a:	4631      	mov	r1, r6
 800bc6c:	e7de      	b.n	800bc2c <__gethex+0xe8>
 800bc6e:	eba6 0309 	sub.w	r3, r6, r9
 800bc72:	3b01      	subs	r3, #1
 800bc74:	4629      	mov	r1, r5
 800bc76:	2b07      	cmp	r3, #7
 800bc78:	dc0a      	bgt.n	800bc90 <__gethex+0x14c>
 800bc7a:	9801      	ldr	r0, [sp, #4]
 800bc7c:	f7fd ff92 	bl	8009ba4 <_Balloc>
 800bc80:	4604      	mov	r4, r0
 800bc82:	b940      	cbnz	r0, 800bc96 <__gethex+0x152>
 800bc84:	4b5c      	ldr	r3, [pc, #368]	@ (800bdf8 <__gethex+0x2b4>)
 800bc86:	4602      	mov	r2, r0
 800bc88:	21e4      	movs	r1, #228	@ 0xe4
 800bc8a:	485c      	ldr	r0, [pc, #368]	@ (800bdfc <__gethex+0x2b8>)
 800bc8c:	f7ff fec0 	bl	800ba10 <__assert_func>
 800bc90:	3101      	adds	r1, #1
 800bc92:	105b      	asrs	r3, r3, #1
 800bc94:	e7ef      	b.n	800bc76 <__gethex+0x132>
 800bc96:	f100 0a14 	add.w	sl, r0, #20
 800bc9a:	2300      	movs	r3, #0
 800bc9c:	4655      	mov	r5, sl
 800bc9e:	469b      	mov	fp, r3
 800bca0:	45b1      	cmp	r9, r6
 800bca2:	d337      	bcc.n	800bd14 <__gethex+0x1d0>
 800bca4:	f845 bb04 	str.w	fp, [r5], #4
 800bca8:	eba5 050a 	sub.w	r5, r5, sl
 800bcac:	10ad      	asrs	r5, r5, #2
 800bcae:	6125      	str	r5, [r4, #16]
 800bcb0:	4658      	mov	r0, fp
 800bcb2:	f7fe f869 	bl	8009d88 <__hi0bits>
 800bcb6:	016d      	lsls	r5, r5, #5
 800bcb8:	f8d8 6000 	ldr.w	r6, [r8]
 800bcbc:	1a2d      	subs	r5, r5, r0
 800bcbe:	42b5      	cmp	r5, r6
 800bcc0:	dd54      	ble.n	800bd6c <__gethex+0x228>
 800bcc2:	1bad      	subs	r5, r5, r6
 800bcc4:	4629      	mov	r1, r5
 800bcc6:	4620      	mov	r0, r4
 800bcc8:	f7fe fbfd 	bl	800a4c6 <__any_on>
 800bccc:	4681      	mov	r9, r0
 800bcce:	b178      	cbz	r0, 800bcf0 <__gethex+0x1ac>
 800bcd0:	1e6b      	subs	r3, r5, #1
 800bcd2:	1159      	asrs	r1, r3, #5
 800bcd4:	f003 021f 	and.w	r2, r3, #31
 800bcd8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800bcdc:	f04f 0901 	mov.w	r9, #1
 800bce0:	fa09 f202 	lsl.w	r2, r9, r2
 800bce4:	420a      	tst	r2, r1
 800bce6:	d003      	beq.n	800bcf0 <__gethex+0x1ac>
 800bce8:	454b      	cmp	r3, r9
 800bcea:	dc36      	bgt.n	800bd5a <__gethex+0x216>
 800bcec:	f04f 0902 	mov.w	r9, #2
 800bcf0:	4629      	mov	r1, r5
 800bcf2:	4620      	mov	r0, r4
 800bcf4:	f7ff febe 	bl	800ba74 <rshift>
 800bcf8:	442f      	add	r7, r5
 800bcfa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800bcfe:	42bb      	cmp	r3, r7
 800bd00:	da42      	bge.n	800bd88 <__gethex+0x244>
 800bd02:	9801      	ldr	r0, [sp, #4]
 800bd04:	4621      	mov	r1, r4
 800bd06:	f7fd ff8d 	bl	8009c24 <_Bfree>
 800bd0a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bd0c:	2300      	movs	r3, #0
 800bd0e:	6013      	str	r3, [r2, #0]
 800bd10:	25a3      	movs	r5, #163	@ 0xa3
 800bd12:	e793      	b.n	800bc3c <__gethex+0xf8>
 800bd14:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800bd18:	2a2e      	cmp	r2, #46	@ 0x2e
 800bd1a:	d012      	beq.n	800bd42 <__gethex+0x1fe>
 800bd1c:	2b20      	cmp	r3, #32
 800bd1e:	d104      	bne.n	800bd2a <__gethex+0x1e6>
 800bd20:	f845 bb04 	str.w	fp, [r5], #4
 800bd24:	f04f 0b00 	mov.w	fp, #0
 800bd28:	465b      	mov	r3, fp
 800bd2a:	7830      	ldrb	r0, [r6, #0]
 800bd2c:	9303      	str	r3, [sp, #12]
 800bd2e:	f7ff fef3 	bl	800bb18 <__hexdig_fun>
 800bd32:	9b03      	ldr	r3, [sp, #12]
 800bd34:	f000 000f 	and.w	r0, r0, #15
 800bd38:	4098      	lsls	r0, r3
 800bd3a:	ea4b 0b00 	orr.w	fp, fp, r0
 800bd3e:	3304      	adds	r3, #4
 800bd40:	e7ae      	b.n	800bca0 <__gethex+0x15c>
 800bd42:	45b1      	cmp	r9, r6
 800bd44:	d8ea      	bhi.n	800bd1c <__gethex+0x1d8>
 800bd46:	492b      	ldr	r1, [pc, #172]	@ (800bdf4 <__gethex+0x2b0>)
 800bd48:	9303      	str	r3, [sp, #12]
 800bd4a:	2201      	movs	r2, #1
 800bd4c:	4630      	mov	r0, r6
 800bd4e:	f7ff fe23 	bl	800b998 <strncmp>
 800bd52:	9b03      	ldr	r3, [sp, #12]
 800bd54:	2800      	cmp	r0, #0
 800bd56:	d1e1      	bne.n	800bd1c <__gethex+0x1d8>
 800bd58:	e7a2      	b.n	800bca0 <__gethex+0x15c>
 800bd5a:	1ea9      	subs	r1, r5, #2
 800bd5c:	4620      	mov	r0, r4
 800bd5e:	f7fe fbb2 	bl	800a4c6 <__any_on>
 800bd62:	2800      	cmp	r0, #0
 800bd64:	d0c2      	beq.n	800bcec <__gethex+0x1a8>
 800bd66:	f04f 0903 	mov.w	r9, #3
 800bd6a:	e7c1      	b.n	800bcf0 <__gethex+0x1ac>
 800bd6c:	da09      	bge.n	800bd82 <__gethex+0x23e>
 800bd6e:	1b75      	subs	r5, r6, r5
 800bd70:	4621      	mov	r1, r4
 800bd72:	9801      	ldr	r0, [sp, #4]
 800bd74:	462a      	mov	r2, r5
 800bd76:	f7fe f96d 	bl	800a054 <__lshift>
 800bd7a:	1b7f      	subs	r7, r7, r5
 800bd7c:	4604      	mov	r4, r0
 800bd7e:	f100 0a14 	add.w	sl, r0, #20
 800bd82:	f04f 0900 	mov.w	r9, #0
 800bd86:	e7b8      	b.n	800bcfa <__gethex+0x1b6>
 800bd88:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800bd8c:	42bd      	cmp	r5, r7
 800bd8e:	dd6f      	ble.n	800be70 <__gethex+0x32c>
 800bd90:	1bed      	subs	r5, r5, r7
 800bd92:	42ae      	cmp	r6, r5
 800bd94:	dc34      	bgt.n	800be00 <__gethex+0x2bc>
 800bd96:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800bd9a:	2b02      	cmp	r3, #2
 800bd9c:	d022      	beq.n	800bde4 <__gethex+0x2a0>
 800bd9e:	2b03      	cmp	r3, #3
 800bda0:	d024      	beq.n	800bdec <__gethex+0x2a8>
 800bda2:	2b01      	cmp	r3, #1
 800bda4:	d115      	bne.n	800bdd2 <__gethex+0x28e>
 800bda6:	42ae      	cmp	r6, r5
 800bda8:	d113      	bne.n	800bdd2 <__gethex+0x28e>
 800bdaa:	2e01      	cmp	r6, #1
 800bdac:	d10b      	bne.n	800bdc6 <__gethex+0x282>
 800bdae:	9a02      	ldr	r2, [sp, #8]
 800bdb0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800bdb4:	6013      	str	r3, [r2, #0]
 800bdb6:	2301      	movs	r3, #1
 800bdb8:	6123      	str	r3, [r4, #16]
 800bdba:	f8ca 3000 	str.w	r3, [sl]
 800bdbe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bdc0:	2562      	movs	r5, #98	@ 0x62
 800bdc2:	601c      	str	r4, [r3, #0]
 800bdc4:	e73a      	b.n	800bc3c <__gethex+0xf8>
 800bdc6:	1e71      	subs	r1, r6, #1
 800bdc8:	4620      	mov	r0, r4
 800bdca:	f7fe fb7c 	bl	800a4c6 <__any_on>
 800bdce:	2800      	cmp	r0, #0
 800bdd0:	d1ed      	bne.n	800bdae <__gethex+0x26a>
 800bdd2:	9801      	ldr	r0, [sp, #4]
 800bdd4:	4621      	mov	r1, r4
 800bdd6:	f7fd ff25 	bl	8009c24 <_Bfree>
 800bdda:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bddc:	2300      	movs	r3, #0
 800bdde:	6013      	str	r3, [r2, #0]
 800bde0:	2550      	movs	r5, #80	@ 0x50
 800bde2:	e72b      	b.n	800bc3c <__gethex+0xf8>
 800bde4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	d1f3      	bne.n	800bdd2 <__gethex+0x28e>
 800bdea:	e7e0      	b.n	800bdae <__gethex+0x26a>
 800bdec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d1dd      	bne.n	800bdae <__gethex+0x26a>
 800bdf2:	e7ee      	b.n	800bdd2 <__gethex+0x28e>
 800bdf4:	0800fe08 	.word	0x0800fe08
 800bdf8:	0800fca1 	.word	0x0800fca1
 800bdfc:	0800ffb6 	.word	0x0800ffb6
 800be00:	1e6f      	subs	r7, r5, #1
 800be02:	f1b9 0f00 	cmp.w	r9, #0
 800be06:	d130      	bne.n	800be6a <__gethex+0x326>
 800be08:	b127      	cbz	r7, 800be14 <__gethex+0x2d0>
 800be0a:	4639      	mov	r1, r7
 800be0c:	4620      	mov	r0, r4
 800be0e:	f7fe fb5a 	bl	800a4c6 <__any_on>
 800be12:	4681      	mov	r9, r0
 800be14:	117a      	asrs	r2, r7, #5
 800be16:	2301      	movs	r3, #1
 800be18:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800be1c:	f007 071f 	and.w	r7, r7, #31
 800be20:	40bb      	lsls	r3, r7
 800be22:	4213      	tst	r3, r2
 800be24:	4629      	mov	r1, r5
 800be26:	4620      	mov	r0, r4
 800be28:	bf18      	it	ne
 800be2a:	f049 0902 	orrne.w	r9, r9, #2
 800be2e:	f7ff fe21 	bl	800ba74 <rshift>
 800be32:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800be36:	1b76      	subs	r6, r6, r5
 800be38:	2502      	movs	r5, #2
 800be3a:	f1b9 0f00 	cmp.w	r9, #0
 800be3e:	d047      	beq.n	800bed0 <__gethex+0x38c>
 800be40:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800be44:	2b02      	cmp	r3, #2
 800be46:	d015      	beq.n	800be74 <__gethex+0x330>
 800be48:	2b03      	cmp	r3, #3
 800be4a:	d017      	beq.n	800be7c <__gethex+0x338>
 800be4c:	2b01      	cmp	r3, #1
 800be4e:	d109      	bne.n	800be64 <__gethex+0x320>
 800be50:	f019 0f02 	tst.w	r9, #2
 800be54:	d006      	beq.n	800be64 <__gethex+0x320>
 800be56:	f8da 3000 	ldr.w	r3, [sl]
 800be5a:	ea49 0903 	orr.w	r9, r9, r3
 800be5e:	f019 0f01 	tst.w	r9, #1
 800be62:	d10e      	bne.n	800be82 <__gethex+0x33e>
 800be64:	f045 0510 	orr.w	r5, r5, #16
 800be68:	e032      	b.n	800bed0 <__gethex+0x38c>
 800be6a:	f04f 0901 	mov.w	r9, #1
 800be6e:	e7d1      	b.n	800be14 <__gethex+0x2d0>
 800be70:	2501      	movs	r5, #1
 800be72:	e7e2      	b.n	800be3a <__gethex+0x2f6>
 800be74:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800be76:	f1c3 0301 	rsb	r3, r3, #1
 800be7a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800be7c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800be7e:	2b00      	cmp	r3, #0
 800be80:	d0f0      	beq.n	800be64 <__gethex+0x320>
 800be82:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800be86:	f104 0314 	add.w	r3, r4, #20
 800be8a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800be8e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800be92:	f04f 0c00 	mov.w	ip, #0
 800be96:	4618      	mov	r0, r3
 800be98:	f853 2b04 	ldr.w	r2, [r3], #4
 800be9c:	f1b2 3fff 	cmp.w	r2, #4294967295
 800bea0:	d01b      	beq.n	800beda <__gethex+0x396>
 800bea2:	3201      	adds	r2, #1
 800bea4:	6002      	str	r2, [r0, #0]
 800bea6:	2d02      	cmp	r5, #2
 800bea8:	f104 0314 	add.w	r3, r4, #20
 800beac:	d13c      	bne.n	800bf28 <__gethex+0x3e4>
 800beae:	f8d8 2000 	ldr.w	r2, [r8]
 800beb2:	3a01      	subs	r2, #1
 800beb4:	42b2      	cmp	r2, r6
 800beb6:	d109      	bne.n	800becc <__gethex+0x388>
 800beb8:	1171      	asrs	r1, r6, #5
 800beba:	2201      	movs	r2, #1
 800bebc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800bec0:	f006 061f 	and.w	r6, r6, #31
 800bec4:	fa02 f606 	lsl.w	r6, r2, r6
 800bec8:	421e      	tst	r6, r3
 800beca:	d13a      	bne.n	800bf42 <__gethex+0x3fe>
 800becc:	f045 0520 	orr.w	r5, r5, #32
 800bed0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bed2:	601c      	str	r4, [r3, #0]
 800bed4:	9b02      	ldr	r3, [sp, #8]
 800bed6:	601f      	str	r7, [r3, #0]
 800bed8:	e6b0      	b.n	800bc3c <__gethex+0xf8>
 800beda:	4299      	cmp	r1, r3
 800bedc:	f843 cc04 	str.w	ip, [r3, #-4]
 800bee0:	d8d9      	bhi.n	800be96 <__gethex+0x352>
 800bee2:	68a3      	ldr	r3, [r4, #8]
 800bee4:	459b      	cmp	fp, r3
 800bee6:	db17      	blt.n	800bf18 <__gethex+0x3d4>
 800bee8:	6861      	ldr	r1, [r4, #4]
 800beea:	9801      	ldr	r0, [sp, #4]
 800beec:	3101      	adds	r1, #1
 800beee:	f7fd fe59 	bl	8009ba4 <_Balloc>
 800bef2:	4681      	mov	r9, r0
 800bef4:	b918      	cbnz	r0, 800befe <__gethex+0x3ba>
 800bef6:	4b1a      	ldr	r3, [pc, #104]	@ (800bf60 <__gethex+0x41c>)
 800bef8:	4602      	mov	r2, r0
 800befa:	2184      	movs	r1, #132	@ 0x84
 800befc:	e6c5      	b.n	800bc8a <__gethex+0x146>
 800befe:	6922      	ldr	r2, [r4, #16]
 800bf00:	3202      	adds	r2, #2
 800bf02:	f104 010c 	add.w	r1, r4, #12
 800bf06:	0092      	lsls	r2, r2, #2
 800bf08:	300c      	adds	r0, #12
 800bf0a:	f7fc ffa0 	bl	8008e4e <memcpy>
 800bf0e:	4621      	mov	r1, r4
 800bf10:	9801      	ldr	r0, [sp, #4]
 800bf12:	f7fd fe87 	bl	8009c24 <_Bfree>
 800bf16:	464c      	mov	r4, r9
 800bf18:	6923      	ldr	r3, [r4, #16]
 800bf1a:	1c5a      	adds	r2, r3, #1
 800bf1c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800bf20:	6122      	str	r2, [r4, #16]
 800bf22:	2201      	movs	r2, #1
 800bf24:	615a      	str	r2, [r3, #20]
 800bf26:	e7be      	b.n	800bea6 <__gethex+0x362>
 800bf28:	6922      	ldr	r2, [r4, #16]
 800bf2a:	455a      	cmp	r2, fp
 800bf2c:	dd0b      	ble.n	800bf46 <__gethex+0x402>
 800bf2e:	2101      	movs	r1, #1
 800bf30:	4620      	mov	r0, r4
 800bf32:	f7ff fd9f 	bl	800ba74 <rshift>
 800bf36:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800bf3a:	3701      	adds	r7, #1
 800bf3c:	42bb      	cmp	r3, r7
 800bf3e:	f6ff aee0 	blt.w	800bd02 <__gethex+0x1be>
 800bf42:	2501      	movs	r5, #1
 800bf44:	e7c2      	b.n	800becc <__gethex+0x388>
 800bf46:	f016 061f 	ands.w	r6, r6, #31
 800bf4a:	d0fa      	beq.n	800bf42 <__gethex+0x3fe>
 800bf4c:	4453      	add	r3, sl
 800bf4e:	f1c6 0620 	rsb	r6, r6, #32
 800bf52:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800bf56:	f7fd ff17 	bl	8009d88 <__hi0bits>
 800bf5a:	42b0      	cmp	r0, r6
 800bf5c:	dbe7      	blt.n	800bf2e <__gethex+0x3ea>
 800bf5e:	e7f0      	b.n	800bf42 <__gethex+0x3fe>
 800bf60:	0800fca1 	.word	0x0800fca1

0800bf64 <L_shift>:
 800bf64:	f1c2 0208 	rsb	r2, r2, #8
 800bf68:	0092      	lsls	r2, r2, #2
 800bf6a:	b570      	push	{r4, r5, r6, lr}
 800bf6c:	f1c2 0620 	rsb	r6, r2, #32
 800bf70:	6843      	ldr	r3, [r0, #4]
 800bf72:	6804      	ldr	r4, [r0, #0]
 800bf74:	fa03 f506 	lsl.w	r5, r3, r6
 800bf78:	432c      	orrs	r4, r5
 800bf7a:	40d3      	lsrs	r3, r2
 800bf7c:	6004      	str	r4, [r0, #0]
 800bf7e:	f840 3f04 	str.w	r3, [r0, #4]!
 800bf82:	4288      	cmp	r0, r1
 800bf84:	d3f4      	bcc.n	800bf70 <L_shift+0xc>
 800bf86:	bd70      	pop	{r4, r5, r6, pc}

0800bf88 <__match>:
 800bf88:	b530      	push	{r4, r5, lr}
 800bf8a:	6803      	ldr	r3, [r0, #0]
 800bf8c:	3301      	adds	r3, #1
 800bf8e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bf92:	b914      	cbnz	r4, 800bf9a <__match+0x12>
 800bf94:	6003      	str	r3, [r0, #0]
 800bf96:	2001      	movs	r0, #1
 800bf98:	bd30      	pop	{r4, r5, pc}
 800bf9a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bf9e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800bfa2:	2d19      	cmp	r5, #25
 800bfa4:	bf98      	it	ls
 800bfa6:	3220      	addls	r2, #32
 800bfa8:	42a2      	cmp	r2, r4
 800bfaa:	d0f0      	beq.n	800bf8e <__match+0x6>
 800bfac:	2000      	movs	r0, #0
 800bfae:	e7f3      	b.n	800bf98 <__match+0x10>

0800bfb0 <__hexnan>:
 800bfb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfb4:	680b      	ldr	r3, [r1, #0]
 800bfb6:	6801      	ldr	r1, [r0, #0]
 800bfb8:	115e      	asrs	r6, r3, #5
 800bfba:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800bfbe:	f013 031f 	ands.w	r3, r3, #31
 800bfc2:	b087      	sub	sp, #28
 800bfc4:	bf18      	it	ne
 800bfc6:	3604      	addne	r6, #4
 800bfc8:	2500      	movs	r5, #0
 800bfca:	1f37      	subs	r7, r6, #4
 800bfcc:	4682      	mov	sl, r0
 800bfce:	4690      	mov	r8, r2
 800bfd0:	9301      	str	r3, [sp, #4]
 800bfd2:	f846 5c04 	str.w	r5, [r6, #-4]
 800bfd6:	46b9      	mov	r9, r7
 800bfd8:	463c      	mov	r4, r7
 800bfda:	9502      	str	r5, [sp, #8]
 800bfdc:	46ab      	mov	fp, r5
 800bfde:	784a      	ldrb	r2, [r1, #1]
 800bfe0:	1c4b      	adds	r3, r1, #1
 800bfe2:	9303      	str	r3, [sp, #12]
 800bfe4:	b342      	cbz	r2, 800c038 <__hexnan+0x88>
 800bfe6:	4610      	mov	r0, r2
 800bfe8:	9105      	str	r1, [sp, #20]
 800bfea:	9204      	str	r2, [sp, #16]
 800bfec:	f7ff fd94 	bl	800bb18 <__hexdig_fun>
 800bff0:	2800      	cmp	r0, #0
 800bff2:	d151      	bne.n	800c098 <__hexnan+0xe8>
 800bff4:	9a04      	ldr	r2, [sp, #16]
 800bff6:	9905      	ldr	r1, [sp, #20]
 800bff8:	2a20      	cmp	r2, #32
 800bffa:	d818      	bhi.n	800c02e <__hexnan+0x7e>
 800bffc:	9b02      	ldr	r3, [sp, #8]
 800bffe:	459b      	cmp	fp, r3
 800c000:	dd13      	ble.n	800c02a <__hexnan+0x7a>
 800c002:	454c      	cmp	r4, r9
 800c004:	d206      	bcs.n	800c014 <__hexnan+0x64>
 800c006:	2d07      	cmp	r5, #7
 800c008:	dc04      	bgt.n	800c014 <__hexnan+0x64>
 800c00a:	462a      	mov	r2, r5
 800c00c:	4649      	mov	r1, r9
 800c00e:	4620      	mov	r0, r4
 800c010:	f7ff ffa8 	bl	800bf64 <L_shift>
 800c014:	4544      	cmp	r4, r8
 800c016:	d952      	bls.n	800c0be <__hexnan+0x10e>
 800c018:	2300      	movs	r3, #0
 800c01a:	f1a4 0904 	sub.w	r9, r4, #4
 800c01e:	f844 3c04 	str.w	r3, [r4, #-4]
 800c022:	f8cd b008 	str.w	fp, [sp, #8]
 800c026:	464c      	mov	r4, r9
 800c028:	461d      	mov	r5, r3
 800c02a:	9903      	ldr	r1, [sp, #12]
 800c02c:	e7d7      	b.n	800bfde <__hexnan+0x2e>
 800c02e:	2a29      	cmp	r2, #41	@ 0x29
 800c030:	d157      	bne.n	800c0e2 <__hexnan+0x132>
 800c032:	3102      	adds	r1, #2
 800c034:	f8ca 1000 	str.w	r1, [sl]
 800c038:	f1bb 0f00 	cmp.w	fp, #0
 800c03c:	d051      	beq.n	800c0e2 <__hexnan+0x132>
 800c03e:	454c      	cmp	r4, r9
 800c040:	d206      	bcs.n	800c050 <__hexnan+0xa0>
 800c042:	2d07      	cmp	r5, #7
 800c044:	dc04      	bgt.n	800c050 <__hexnan+0xa0>
 800c046:	462a      	mov	r2, r5
 800c048:	4649      	mov	r1, r9
 800c04a:	4620      	mov	r0, r4
 800c04c:	f7ff ff8a 	bl	800bf64 <L_shift>
 800c050:	4544      	cmp	r4, r8
 800c052:	d936      	bls.n	800c0c2 <__hexnan+0x112>
 800c054:	f1a8 0204 	sub.w	r2, r8, #4
 800c058:	4623      	mov	r3, r4
 800c05a:	f853 1b04 	ldr.w	r1, [r3], #4
 800c05e:	f842 1f04 	str.w	r1, [r2, #4]!
 800c062:	429f      	cmp	r7, r3
 800c064:	d2f9      	bcs.n	800c05a <__hexnan+0xaa>
 800c066:	1b3b      	subs	r3, r7, r4
 800c068:	f023 0303 	bic.w	r3, r3, #3
 800c06c:	3304      	adds	r3, #4
 800c06e:	3401      	adds	r4, #1
 800c070:	3e03      	subs	r6, #3
 800c072:	42b4      	cmp	r4, r6
 800c074:	bf88      	it	hi
 800c076:	2304      	movhi	r3, #4
 800c078:	4443      	add	r3, r8
 800c07a:	2200      	movs	r2, #0
 800c07c:	f843 2b04 	str.w	r2, [r3], #4
 800c080:	429f      	cmp	r7, r3
 800c082:	d2fb      	bcs.n	800c07c <__hexnan+0xcc>
 800c084:	683b      	ldr	r3, [r7, #0]
 800c086:	b91b      	cbnz	r3, 800c090 <__hexnan+0xe0>
 800c088:	4547      	cmp	r7, r8
 800c08a:	d128      	bne.n	800c0de <__hexnan+0x12e>
 800c08c:	2301      	movs	r3, #1
 800c08e:	603b      	str	r3, [r7, #0]
 800c090:	2005      	movs	r0, #5
 800c092:	b007      	add	sp, #28
 800c094:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c098:	3501      	adds	r5, #1
 800c09a:	2d08      	cmp	r5, #8
 800c09c:	f10b 0b01 	add.w	fp, fp, #1
 800c0a0:	dd06      	ble.n	800c0b0 <__hexnan+0x100>
 800c0a2:	4544      	cmp	r4, r8
 800c0a4:	d9c1      	bls.n	800c02a <__hexnan+0x7a>
 800c0a6:	2300      	movs	r3, #0
 800c0a8:	f844 3c04 	str.w	r3, [r4, #-4]
 800c0ac:	2501      	movs	r5, #1
 800c0ae:	3c04      	subs	r4, #4
 800c0b0:	6822      	ldr	r2, [r4, #0]
 800c0b2:	f000 000f 	and.w	r0, r0, #15
 800c0b6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800c0ba:	6020      	str	r0, [r4, #0]
 800c0bc:	e7b5      	b.n	800c02a <__hexnan+0x7a>
 800c0be:	2508      	movs	r5, #8
 800c0c0:	e7b3      	b.n	800c02a <__hexnan+0x7a>
 800c0c2:	9b01      	ldr	r3, [sp, #4]
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	d0dd      	beq.n	800c084 <__hexnan+0xd4>
 800c0c8:	f1c3 0320 	rsb	r3, r3, #32
 800c0cc:	f04f 32ff 	mov.w	r2, #4294967295
 800c0d0:	40da      	lsrs	r2, r3
 800c0d2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800c0d6:	4013      	ands	r3, r2
 800c0d8:	f846 3c04 	str.w	r3, [r6, #-4]
 800c0dc:	e7d2      	b.n	800c084 <__hexnan+0xd4>
 800c0de:	3f04      	subs	r7, #4
 800c0e0:	e7d0      	b.n	800c084 <__hexnan+0xd4>
 800c0e2:	2004      	movs	r0, #4
 800c0e4:	e7d5      	b.n	800c092 <__hexnan+0xe2>

0800c0e6 <__ascii_mbtowc>:
 800c0e6:	b082      	sub	sp, #8
 800c0e8:	b901      	cbnz	r1, 800c0ec <__ascii_mbtowc+0x6>
 800c0ea:	a901      	add	r1, sp, #4
 800c0ec:	b142      	cbz	r2, 800c100 <__ascii_mbtowc+0x1a>
 800c0ee:	b14b      	cbz	r3, 800c104 <__ascii_mbtowc+0x1e>
 800c0f0:	7813      	ldrb	r3, [r2, #0]
 800c0f2:	600b      	str	r3, [r1, #0]
 800c0f4:	7812      	ldrb	r2, [r2, #0]
 800c0f6:	1e10      	subs	r0, r2, #0
 800c0f8:	bf18      	it	ne
 800c0fa:	2001      	movne	r0, #1
 800c0fc:	b002      	add	sp, #8
 800c0fe:	4770      	bx	lr
 800c100:	4610      	mov	r0, r2
 800c102:	e7fb      	b.n	800c0fc <__ascii_mbtowc+0x16>
 800c104:	f06f 0001 	mvn.w	r0, #1
 800c108:	e7f8      	b.n	800c0fc <__ascii_mbtowc+0x16>

0800c10a <_realloc_r>:
 800c10a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c10e:	4680      	mov	r8, r0
 800c110:	4615      	mov	r5, r2
 800c112:	460c      	mov	r4, r1
 800c114:	b921      	cbnz	r1, 800c120 <_realloc_r+0x16>
 800c116:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c11a:	4611      	mov	r1, r2
 800c11c:	f7fb bcde 	b.w	8007adc <_malloc_r>
 800c120:	b92a      	cbnz	r2, 800c12e <_realloc_r+0x24>
 800c122:	f7fd fcf5 	bl	8009b10 <_free_r>
 800c126:	2400      	movs	r4, #0
 800c128:	4620      	mov	r0, r4
 800c12a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c12e:	f000 f840 	bl	800c1b2 <_malloc_usable_size_r>
 800c132:	4285      	cmp	r5, r0
 800c134:	4606      	mov	r6, r0
 800c136:	d802      	bhi.n	800c13e <_realloc_r+0x34>
 800c138:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800c13c:	d8f4      	bhi.n	800c128 <_realloc_r+0x1e>
 800c13e:	4629      	mov	r1, r5
 800c140:	4640      	mov	r0, r8
 800c142:	f7fb fccb 	bl	8007adc <_malloc_r>
 800c146:	4607      	mov	r7, r0
 800c148:	2800      	cmp	r0, #0
 800c14a:	d0ec      	beq.n	800c126 <_realloc_r+0x1c>
 800c14c:	42b5      	cmp	r5, r6
 800c14e:	462a      	mov	r2, r5
 800c150:	4621      	mov	r1, r4
 800c152:	bf28      	it	cs
 800c154:	4632      	movcs	r2, r6
 800c156:	f7fc fe7a 	bl	8008e4e <memcpy>
 800c15a:	4621      	mov	r1, r4
 800c15c:	4640      	mov	r0, r8
 800c15e:	f7fd fcd7 	bl	8009b10 <_free_r>
 800c162:	463c      	mov	r4, r7
 800c164:	e7e0      	b.n	800c128 <_realloc_r+0x1e>

0800c166 <__ascii_wctomb>:
 800c166:	4603      	mov	r3, r0
 800c168:	4608      	mov	r0, r1
 800c16a:	b141      	cbz	r1, 800c17e <__ascii_wctomb+0x18>
 800c16c:	2aff      	cmp	r2, #255	@ 0xff
 800c16e:	d904      	bls.n	800c17a <__ascii_wctomb+0x14>
 800c170:	228a      	movs	r2, #138	@ 0x8a
 800c172:	601a      	str	r2, [r3, #0]
 800c174:	f04f 30ff 	mov.w	r0, #4294967295
 800c178:	4770      	bx	lr
 800c17a:	700a      	strb	r2, [r1, #0]
 800c17c:	2001      	movs	r0, #1
 800c17e:	4770      	bx	lr

0800c180 <fiprintf>:
 800c180:	b40e      	push	{r1, r2, r3}
 800c182:	b503      	push	{r0, r1, lr}
 800c184:	4601      	mov	r1, r0
 800c186:	ab03      	add	r3, sp, #12
 800c188:	4805      	ldr	r0, [pc, #20]	@ (800c1a0 <fiprintf+0x20>)
 800c18a:	f853 2b04 	ldr.w	r2, [r3], #4
 800c18e:	6800      	ldr	r0, [r0, #0]
 800c190:	9301      	str	r3, [sp, #4]
 800c192:	f7ff f9c1 	bl	800b518 <_vfiprintf_r>
 800c196:	b002      	add	sp, #8
 800c198:	f85d eb04 	ldr.w	lr, [sp], #4
 800c19c:	b003      	add	sp, #12
 800c19e:	4770      	bx	lr
 800c1a0:	2000004c 	.word	0x2000004c

0800c1a4 <abort>:
 800c1a4:	b508      	push	{r3, lr}
 800c1a6:	2006      	movs	r0, #6
 800c1a8:	f000 f834 	bl	800c214 <raise>
 800c1ac:	2001      	movs	r0, #1
 800c1ae:	f7f6 fa65 	bl	800267c <_exit>

0800c1b2 <_malloc_usable_size_r>:
 800c1b2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c1b6:	1f18      	subs	r0, r3, #4
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	bfbc      	itt	lt
 800c1bc:	580b      	ldrlt	r3, [r1, r0]
 800c1be:	18c0      	addlt	r0, r0, r3
 800c1c0:	4770      	bx	lr

0800c1c2 <_raise_r>:
 800c1c2:	291f      	cmp	r1, #31
 800c1c4:	b538      	push	{r3, r4, r5, lr}
 800c1c6:	4605      	mov	r5, r0
 800c1c8:	460c      	mov	r4, r1
 800c1ca:	d904      	bls.n	800c1d6 <_raise_r+0x14>
 800c1cc:	2316      	movs	r3, #22
 800c1ce:	6003      	str	r3, [r0, #0]
 800c1d0:	f04f 30ff 	mov.w	r0, #4294967295
 800c1d4:	bd38      	pop	{r3, r4, r5, pc}
 800c1d6:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c1d8:	b112      	cbz	r2, 800c1e0 <_raise_r+0x1e>
 800c1da:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c1de:	b94b      	cbnz	r3, 800c1f4 <_raise_r+0x32>
 800c1e0:	4628      	mov	r0, r5
 800c1e2:	f000 f831 	bl	800c248 <_getpid_r>
 800c1e6:	4622      	mov	r2, r4
 800c1e8:	4601      	mov	r1, r0
 800c1ea:	4628      	mov	r0, r5
 800c1ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c1f0:	f000 b818 	b.w	800c224 <_kill_r>
 800c1f4:	2b01      	cmp	r3, #1
 800c1f6:	d00a      	beq.n	800c20e <_raise_r+0x4c>
 800c1f8:	1c59      	adds	r1, r3, #1
 800c1fa:	d103      	bne.n	800c204 <_raise_r+0x42>
 800c1fc:	2316      	movs	r3, #22
 800c1fe:	6003      	str	r3, [r0, #0]
 800c200:	2001      	movs	r0, #1
 800c202:	e7e7      	b.n	800c1d4 <_raise_r+0x12>
 800c204:	2100      	movs	r1, #0
 800c206:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800c20a:	4620      	mov	r0, r4
 800c20c:	4798      	blx	r3
 800c20e:	2000      	movs	r0, #0
 800c210:	e7e0      	b.n	800c1d4 <_raise_r+0x12>
	...

0800c214 <raise>:
 800c214:	4b02      	ldr	r3, [pc, #8]	@ (800c220 <raise+0xc>)
 800c216:	4601      	mov	r1, r0
 800c218:	6818      	ldr	r0, [r3, #0]
 800c21a:	f7ff bfd2 	b.w	800c1c2 <_raise_r>
 800c21e:	bf00      	nop
 800c220:	2000004c 	.word	0x2000004c

0800c224 <_kill_r>:
 800c224:	b538      	push	{r3, r4, r5, lr}
 800c226:	4d07      	ldr	r5, [pc, #28]	@ (800c244 <_kill_r+0x20>)
 800c228:	2300      	movs	r3, #0
 800c22a:	4604      	mov	r4, r0
 800c22c:	4608      	mov	r0, r1
 800c22e:	4611      	mov	r1, r2
 800c230:	602b      	str	r3, [r5, #0]
 800c232:	f7f6 fa13 	bl	800265c <_kill>
 800c236:	1c43      	adds	r3, r0, #1
 800c238:	d102      	bne.n	800c240 <_kill_r+0x1c>
 800c23a:	682b      	ldr	r3, [r5, #0]
 800c23c:	b103      	cbz	r3, 800c240 <_kill_r+0x1c>
 800c23e:	6023      	str	r3, [r4, #0]
 800c240:	bd38      	pop	{r3, r4, r5, pc}
 800c242:	bf00      	nop
 800c244:	20000624 	.word	0x20000624

0800c248 <_getpid_r>:
 800c248:	f7f6 ba00 	b.w	800264c <_getpid>

0800c24c <_init>:
 800c24c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c24e:	bf00      	nop
 800c250:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c252:	bc08      	pop	{r3}
 800c254:	469e      	mov	lr, r3
 800c256:	4770      	bx	lr

0800c258 <_fini>:
 800c258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c25a:	bf00      	nop
 800c25c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c25e:	bc08      	pop	{r3}
 800c260:	469e      	mov	lr, r3
 800c262:	4770      	bx	lr
