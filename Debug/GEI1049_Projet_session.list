
GEI1049_Projet_session.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d794  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003df8  0800d968  0800d968  0000e968  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011760  08011760  0001320c  2**0
                  CONTENTS
  4 .ARM          00000008  08011760  08011760  00012760  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011768  08011768  0001320c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011768  08011768  00012768  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801176c  0801176c  0001276c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000020c  20000000  08011770  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000508  2000020c  0801197c  0001320c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000714  0801197c  00013714  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001320c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000191db  00000000  00000000  0001323c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004080  00000000  00000000  0002c417  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001650  00000000  00000000  00030498  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001130  00000000  00000000  00031ae8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027acd  00000000  00000000  00032c18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00020e52  00000000  00000000  0005a6e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000deb57  00000000  00000000  0007b537  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015a08e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000070f4  00000000  00000000  0015a0d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  001611c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000020c 	.word	0x2000020c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800d94c 	.word	0x0800d94c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000210 	.word	0x20000210
 800020c:	0800d94c 	.word	0x0800d94c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9a0 	b.w	8001020 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	@ (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	460c      	mov	r4, r1
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d14e      	bne.n	8000e0e <__udivmoddi4+0xaa>
 8000d70:	4694      	mov	ip, r2
 8000d72:	458c      	cmp	ip, r1
 8000d74:	4686      	mov	lr, r0
 8000d76:	fab2 f282 	clz	r2, r2
 8000d7a:	d962      	bls.n	8000e42 <__udivmoddi4+0xde>
 8000d7c:	b14a      	cbz	r2, 8000d92 <__udivmoddi4+0x2e>
 8000d7e:	f1c2 0320 	rsb	r3, r2, #32
 8000d82:	4091      	lsls	r1, r2
 8000d84:	fa20 f303 	lsr.w	r3, r0, r3
 8000d88:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d8c:	4319      	orrs	r1, r3
 8000d8e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d92:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d96:	fa1f f68c 	uxth.w	r6, ip
 8000d9a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d9e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000da2:	fb07 1114 	mls	r1, r7, r4, r1
 8000da6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000daa:	fb04 f106 	mul.w	r1, r4, r6
 8000dae:	4299      	cmp	r1, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x64>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000dba:	f080 8112 	bcs.w	8000fe2 <__udivmoddi4+0x27e>
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	f240 810f 	bls.w	8000fe2 <__udivmoddi4+0x27e>
 8000dc4:	3c02      	subs	r4, #2
 8000dc6:	4463      	add	r3, ip
 8000dc8:	1a59      	subs	r1, r3, r1
 8000dca:	fa1f f38e 	uxth.w	r3, lr
 8000dce:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dd2:	fb07 1110 	mls	r1, r7, r0, r1
 8000dd6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dda:	fb00 f606 	mul.w	r6, r0, r6
 8000dde:	429e      	cmp	r6, r3
 8000de0:	d90a      	bls.n	8000df8 <__udivmoddi4+0x94>
 8000de2:	eb1c 0303 	adds.w	r3, ip, r3
 8000de6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dea:	f080 80fc 	bcs.w	8000fe6 <__udivmoddi4+0x282>
 8000dee:	429e      	cmp	r6, r3
 8000df0:	f240 80f9 	bls.w	8000fe6 <__udivmoddi4+0x282>
 8000df4:	4463      	add	r3, ip
 8000df6:	3802      	subs	r0, #2
 8000df8:	1b9b      	subs	r3, r3, r6
 8000dfa:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dfe:	2100      	movs	r1, #0
 8000e00:	b11d      	cbz	r5, 8000e0a <__udivmoddi4+0xa6>
 8000e02:	40d3      	lsrs	r3, r2
 8000e04:	2200      	movs	r2, #0
 8000e06:	e9c5 3200 	strd	r3, r2, [r5]
 8000e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d905      	bls.n	8000e1e <__udivmoddi4+0xba>
 8000e12:	b10d      	cbz	r5, 8000e18 <__udivmoddi4+0xb4>
 8000e14:	e9c5 0100 	strd	r0, r1, [r5]
 8000e18:	2100      	movs	r1, #0
 8000e1a:	4608      	mov	r0, r1
 8000e1c:	e7f5      	b.n	8000e0a <__udivmoddi4+0xa6>
 8000e1e:	fab3 f183 	clz	r1, r3
 8000e22:	2900      	cmp	r1, #0
 8000e24:	d146      	bne.n	8000eb4 <__udivmoddi4+0x150>
 8000e26:	42a3      	cmp	r3, r4
 8000e28:	d302      	bcc.n	8000e30 <__udivmoddi4+0xcc>
 8000e2a:	4290      	cmp	r0, r2
 8000e2c:	f0c0 80f0 	bcc.w	8001010 <__udivmoddi4+0x2ac>
 8000e30:	1a86      	subs	r6, r0, r2
 8000e32:	eb64 0303 	sbc.w	r3, r4, r3
 8000e36:	2001      	movs	r0, #1
 8000e38:	2d00      	cmp	r5, #0
 8000e3a:	d0e6      	beq.n	8000e0a <__udivmoddi4+0xa6>
 8000e3c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e40:	e7e3      	b.n	8000e0a <__udivmoddi4+0xa6>
 8000e42:	2a00      	cmp	r2, #0
 8000e44:	f040 8090 	bne.w	8000f68 <__udivmoddi4+0x204>
 8000e48:	eba1 040c 	sub.w	r4, r1, ip
 8000e4c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e50:	fa1f f78c 	uxth.w	r7, ip
 8000e54:	2101      	movs	r1, #1
 8000e56:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e5a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e5e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e62:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e66:	fb07 f006 	mul.w	r0, r7, r6
 8000e6a:	4298      	cmp	r0, r3
 8000e6c:	d908      	bls.n	8000e80 <__udivmoddi4+0x11c>
 8000e6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e72:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e76:	d202      	bcs.n	8000e7e <__udivmoddi4+0x11a>
 8000e78:	4298      	cmp	r0, r3
 8000e7a:	f200 80cd 	bhi.w	8001018 <__udivmoddi4+0x2b4>
 8000e7e:	4626      	mov	r6, r4
 8000e80:	1a1c      	subs	r4, r3, r0
 8000e82:	fa1f f38e 	uxth.w	r3, lr
 8000e86:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e8a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e8e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e92:	fb00 f707 	mul.w	r7, r0, r7
 8000e96:	429f      	cmp	r7, r3
 8000e98:	d908      	bls.n	8000eac <__udivmoddi4+0x148>
 8000e9a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e9e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ea2:	d202      	bcs.n	8000eaa <__udivmoddi4+0x146>
 8000ea4:	429f      	cmp	r7, r3
 8000ea6:	f200 80b0 	bhi.w	800100a <__udivmoddi4+0x2a6>
 8000eaa:	4620      	mov	r0, r4
 8000eac:	1bdb      	subs	r3, r3, r7
 8000eae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000eb2:	e7a5      	b.n	8000e00 <__udivmoddi4+0x9c>
 8000eb4:	f1c1 0620 	rsb	r6, r1, #32
 8000eb8:	408b      	lsls	r3, r1
 8000eba:	fa22 f706 	lsr.w	r7, r2, r6
 8000ebe:	431f      	orrs	r7, r3
 8000ec0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ec4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ec8:	ea43 030c 	orr.w	r3, r3, ip
 8000ecc:	40f4      	lsrs	r4, r6
 8000ece:	fa00 f801 	lsl.w	r8, r0, r1
 8000ed2:	0c38      	lsrs	r0, r7, #16
 8000ed4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ed8:	fbb4 fef0 	udiv	lr, r4, r0
 8000edc:	fa1f fc87 	uxth.w	ip, r7
 8000ee0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ee4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ee8:	fb0e f90c 	mul.w	r9, lr, ip
 8000eec:	45a1      	cmp	r9, r4
 8000eee:	fa02 f201 	lsl.w	r2, r2, r1
 8000ef2:	d90a      	bls.n	8000f0a <__udivmoddi4+0x1a6>
 8000ef4:	193c      	adds	r4, r7, r4
 8000ef6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000efa:	f080 8084 	bcs.w	8001006 <__udivmoddi4+0x2a2>
 8000efe:	45a1      	cmp	r9, r4
 8000f00:	f240 8081 	bls.w	8001006 <__udivmoddi4+0x2a2>
 8000f04:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f08:	443c      	add	r4, r7
 8000f0a:	eba4 0409 	sub.w	r4, r4, r9
 8000f0e:	fa1f f983 	uxth.w	r9, r3
 8000f12:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f16:	fb00 4413 	mls	r4, r0, r3, r4
 8000f1a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f1e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f22:	45a4      	cmp	ip, r4
 8000f24:	d907      	bls.n	8000f36 <__udivmoddi4+0x1d2>
 8000f26:	193c      	adds	r4, r7, r4
 8000f28:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f2c:	d267      	bcs.n	8000ffe <__udivmoddi4+0x29a>
 8000f2e:	45a4      	cmp	ip, r4
 8000f30:	d965      	bls.n	8000ffe <__udivmoddi4+0x29a>
 8000f32:	3b02      	subs	r3, #2
 8000f34:	443c      	add	r4, r7
 8000f36:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f3a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f3e:	eba4 040c 	sub.w	r4, r4, ip
 8000f42:	429c      	cmp	r4, r3
 8000f44:	46ce      	mov	lr, r9
 8000f46:	469c      	mov	ip, r3
 8000f48:	d351      	bcc.n	8000fee <__udivmoddi4+0x28a>
 8000f4a:	d04e      	beq.n	8000fea <__udivmoddi4+0x286>
 8000f4c:	b155      	cbz	r5, 8000f64 <__udivmoddi4+0x200>
 8000f4e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f52:	eb64 040c 	sbc.w	r4, r4, ip
 8000f56:	fa04 f606 	lsl.w	r6, r4, r6
 8000f5a:	40cb      	lsrs	r3, r1
 8000f5c:	431e      	orrs	r6, r3
 8000f5e:	40cc      	lsrs	r4, r1
 8000f60:	e9c5 6400 	strd	r6, r4, [r5]
 8000f64:	2100      	movs	r1, #0
 8000f66:	e750      	b.n	8000e0a <__udivmoddi4+0xa6>
 8000f68:	f1c2 0320 	rsb	r3, r2, #32
 8000f6c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f70:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f74:	fa24 f303 	lsr.w	r3, r4, r3
 8000f78:	4094      	lsls	r4, r2
 8000f7a:	430c      	orrs	r4, r1
 8000f7c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f80:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f84:	fa1f f78c 	uxth.w	r7, ip
 8000f88:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f8c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f90:	0c23      	lsrs	r3, r4, #16
 8000f92:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f96:	fb00 f107 	mul.w	r1, r0, r7
 8000f9a:	4299      	cmp	r1, r3
 8000f9c:	d908      	bls.n	8000fb0 <__udivmoddi4+0x24c>
 8000f9e:	eb1c 0303 	adds.w	r3, ip, r3
 8000fa2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000fa6:	d22c      	bcs.n	8001002 <__udivmoddi4+0x29e>
 8000fa8:	4299      	cmp	r1, r3
 8000faa:	d92a      	bls.n	8001002 <__udivmoddi4+0x29e>
 8000fac:	3802      	subs	r0, #2
 8000fae:	4463      	add	r3, ip
 8000fb0:	1a5b      	subs	r3, r3, r1
 8000fb2:	b2a4      	uxth	r4, r4
 8000fb4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fb8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fbc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fc0:	fb01 f307 	mul.w	r3, r1, r7
 8000fc4:	42a3      	cmp	r3, r4
 8000fc6:	d908      	bls.n	8000fda <__udivmoddi4+0x276>
 8000fc8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fcc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fd0:	d213      	bcs.n	8000ffa <__udivmoddi4+0x296>
 8000fd2:	42a3      	cmp	r3, r4
 8000fd4:	d911      	bls.n	8000ffa <__udivmoddi4+0x296>
 8000fd6:	3902      	subs	r1, #2
 8000fd8:	4464      	add	r4, ip
 8000fda:	1ae4      	subs	r4, r4, r3
 8000fdc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fe0:	e739      	b.n	8000e56 <__udivmoddi4+0xf2>
 8000fe2:	4604      	mov	r4, r0
 8000fe4:	e6f0      	b.n	8000dc8 <__udivmoddi4+0x64>
 8000fe6:	4608      	mov	r0, r1
 8000fe8:	e706      	b.n	8000df8 <__udivmoddi4+0x94>
 8000fea:	45c8      	cmp	r8, r9
 8000fec:	d2ae      	bcs.n	8000f4c <__udivmoddi4+0x1e8>
 8000fee:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ff2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000ff6:	3801      	subs	r0, #1
 8000ff8:	e7a8      	b.n	8000f4c <__udivmoddi4+0x1e8>
 8000ffa:	4631      	mov	r1, r6
 8000ffc:	e7ed      	b.n	8000fda <__udivmoddi4+0x276>
 8000ffe:	4603      	mov	r3, r0
 8001000:	e799      	b.n	8000f36 <__udivmoddi4+0x1d2>
 8001002:	4630      	mov	r0, r6
 8001004:	e7d4      	b.n	8000fb0 <__udivmoddi4+0x24c>
 8001006:	46d6      	mov	lr, sl
 8001008:	e77f      	b.n	8000f0a <__udivmoddi4+0x1a6>
 800100a:	4463      	add	r3, ip
 800100c:	3802      	subs	r0, #2
 800100e:	e74d      	b.n	8000eac <__udivmoddi4+0x148>
 8001010:	4606      	mov	r6, r0
 8001012:	4623      	mov	r3, r4
 8001014:	4608      	mov	r0, r1
 8001016:	e70f      	b.n	8000e38 <__udivmoddi4+0xd4>
 8001018:	3e02      	subs	r6, #2
 800101a:	4463      	add	r3, ip
 800101c:	e730      	b.n	8000e80 <__udivmoddi4+0x11c>
 800101e:	bf00      	nop

08001020 <__aeabi_idiv0>:
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop

08001024 <Get_Mode>:
int save[4] = {0, 0, 0, 0};
float RATIO = 0;
float CLOCKWISE_FACTOR = 0;
float COUNTER_CLW_FACTOR = 0;

int Get_Mode(int MSB_state, int LSB_state) {
 8001024:	b480      	push	{r7}
 8001026:	b085      	sub	sp, #20
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
 800102c:	6039      	str	r1, [r7, #0]
	static const int id_lookup[4] = {MANUAL_MODE, CIRCLE_MODE,  BACK_FORTH_MODE, SQUARE_MODE};
	int bin = ((MSB_state & 1) << 1) | (LSB_state & 1);
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	005b      	lsls	r3, r3, #1
 8001032:	f003 0202 	and.w	r2, r3, #2
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	f003 0301 	and.w	r3, r3, #1
 800103c:	4313      	orrs	r3, r2
 800103e:	60fb      	str	r3, [r7, #12]
	return id_lookup[bin];
 8001040:	4a04      	ldr	r2, [pc, #16]	@ (8001054 <Get_Mode+0x30>)
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8001048:	4618      	mov	r0, r3
 800104a:	3714      	adds	r7, #20
 800104c:	46bd      	mov	sp, r7
 800104e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001052:	4770      	bx	lr
 8001054:	0800dd9c 	.word	0x0800dd9c

08001058 <Get_Mode_String>:

char* Get_Mode_String() {
 8001058:	b580      	push	{r7, lr}
 800105a:	b082      	sub	sp, #8
 800105c:	af00      	add	r7, sp, #0
	const size_t buffer_size = 8;
 800105e:	2308      	movs	r3, #8
 8001060:	603b      	str	r3, [r7, #0]
	char* str = malloc(buffer_size);
 8001062:	6838      	ldr	r0, [r7, #0]
 8001064:	f008 f88e 	bl	8009184 <malloc>
 8001068:	4603      	mov	r3, r0
 800106a:	607b      	str	r3, [r7, #4]
	switch(curr_mode) {
 800106c:	4b11      	ldr	r3, [pc, #68]	@ (80010b4 <Get_Mode_String+0x5c>)
 800106e:	781b      	ldrb	r3, [r3, #0]
 8001070:	2b03      	cmp	r3, #3
 8001072:	d817      	bhi.n	80010a4 <Get_Mode_String+0x4c>
 8001074:	a201      	add	r2, pc, #4	@ (adr r2, 800107c <Get_Mode_String+0x24>)
 8001076:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800107a:	bf00      	nop
 800107c:	0800108d 	.word	0x0800108d
 8001080:	08001093 	.word	0x08001093
 8001084:	08001099 	.word	0x08001099
 8001088:	0800109f 	.word	0x0800109f
		case MANUAL_MODE:
			str = "MANUAL";
 800108c:	4b0a      	ldr	r3, [pc, #40]	@ (80010b8 <Get_Mode_String+0x60>)
 800108e:	607b      	str	r3, [r7, #4]
			break;
 8001090:	e00b      	b.n	80010aa <Get_Mode_String+0x52>
		case CIRCLE_MODE:
			str = "CIRCLE";
 8001092:	4b0a      	ldr	r3, [pc, #40]	@ (80010bc <Get_Mode_String+0x64>)
 8001094:	607b      	str	r3, [r7, #4]
			break;
 8001096:	e008      	b.n	80010aa <Get_Mode_String+0x52>
		case BACK_FORTH_MODE:
			str = "LINE";
 8001098:	4b09      	ldr	r3, [pc, #36]	@ (80010c0 <Get_Mode_String+0x68>)
 800109a:	607b      	str	r3, [r7, #4]
			break;
 800109c:	e005      	b.n	80010aa <Get_Mode_String+0x52>
		case SQUARE_MODE:
			str = "SQUARE";
 800109e:	4b09      	ldr	r3, [pc, #36]	@ (80010c4 <Get_Mode_String+0x6c>)
 80010a0:	607b      	str	r3, [r7, #4]
			break;
 80010a2:	e002      	b.n	80010aa <Get_Mode_String+0x52>
		default:
			str = "ERROR";
 80010a4:	4b08      	ldr	r3, [pc, #32]	@ (80010c8 <Get_Mode_String+0x70>)
 80010a6:	607b      	str	r3, [r7, #4]
			break;
 80010a8:	bf00      	nop
	}
	return str;
 80010aa:	687b      	ldr	r3, [r7, #4]
}
 80010ac:	4618      	mov	r0, r3
 80010ae:	3708      	adds	r7, #8
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	2000022a 	.word	0x2000022a
 80010b8:	0800d968 	.word	0x0800d968
 80010bc:	0800d970 	.word	0x0800d970
 80010c0:	0800d978 	.word	0x0800d978
 80010c4:	0800d980 	.word	0x0800d980
 80010c8:	0800d988 	.word	0x0800d988

080010cc <Auto_Angle>:

void Auto_Angle(float value) {
 80010cc:	b5b0      	push	{r4, r5, r7, lr}
 80010ce:	b082      	sub	sp, #8
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	ed87 0a01 	vstr	s0, [r7, #4]
	// Initial setup
	if(timer_count == 0) {
 80010d6:	4b49      	ldr	r3, [pc, #292]	@ (80011fc <Auto_Angle+0x130>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d16e      	bne.n	80011bc <Auto_Angle+0xf0>
		LCD_Manuel(0);
 80010de:	2000      	movs	r0, #0
 80010e0:	f002 fbc4 	bl	800386c <LCD_Manuel>
		LCD_Mode();
 80010e4:	f002 fc10 	bl	8003908 <LCD_Mode>

		// Calculate the duration for the turn
		turning_time = fabs(value) * TRACK_WIDTH;
 80010e8:	edd7 7a01 	vldr	s15, [r7, #4]
 80010ec:	eef0 7ae7 	vabs.f32	s15, s15
 80010f0:	ed9f 7a43 	vldr	s14, [pc, #268]	@ 8001200 <Auto_Angle+0x134>
 80010f4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010f8:	4b42      	ldr	r3, [pc, #264]	@ (8001204 <Auto_Angle+0x138>)
 80010fa:	edc3 7a00 	vstr	s15, [r3]

		// Determine direction of turn
		if (value > 0) {
 80010fe:	edd7 7a01 	vldr	s15, [r7, #4]
 8001102:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001106:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800110a:	dd25      	ble.n	8001158 <Auto_Angle+0x8c>
			turning_time /= (360.0 * CLOCKWISE_FACTOR);
 800110c:	4b3d      	ldr	r3, [pc, #244]	@ (8001204 <Auto_Angle+0x138>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	4618      	mov	r0, r3
 8001112:	f7ff fa39 	bl	8000588 <__aeabi_f2d>
 8001116:	4604      	mov	r4, r0
 8001118:	460d      	mov	r5, r1
 800111a:	4b3b      	ldr	r3, [pc, #236]	@ (8001208 <Auto_Angle+0x13c>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	4618      	mov	r0, r3
 8001120:	f7ff fa32 	bl	8000588 <__aeabi_f2d>
 8001124:	f04f 0200 	mov.w	r2, #0
 8001128:	4b38      	ldr	r3, [pc, #224]	@ (800120c <Auto_Angle+0x140>)
 800112a:	f7ff fa85 	bl	8000638 <__aeabi_dmul>
 800112e:	4602      	mov	r2, r0
 8001130:	460b      	mov	r3, r1
 8001132:	4620      	mov	r0, r4
 8001134:	4629      	mov	r1, r5
 8001136:	f7ff fba9 	bl	800088c <__aeabi_ddiv>
 800113a:	4602      	mov	r2, r0
 800113c:	460b      	mov	r3, r1
 800113e:	4610      	mov	r0, r2
 8001140:	4619      	mov	r1, r3
 8001142:	f7ff fd71 	bl	8000c28 <__aeabi_d2f>
 8001146:	4603      	mov	r3, r0
 8001148:	4a2e      	ldr	r2, [pc, #184]	@ (8001204 <Auto_Angle+0x138>)
 800114a:	6013      	str	r3, [r2, #0]
			Droite(BASE_SPEED, &htim3);
 800114c:	4930      	ldr	r1, [pc, #192]	@ (8001210 <Auto_Angle+0x144>)
 800114e:	f44f 70e1 	mov.w	r0, #450	@ 0x1c2
 8001152:	f000 fb41 	bl	80017d8 <Droite>
 8001156:	e024      	b.n	80011a2 <Auto_Angle+0xd6>
		}
		else {
			turning_time /= (360.0 * COUNTER_CLW_FACTOR);
 8001158:	4b2a      	ldr	r3, [pc, #168]	@ (8001204 <Auto_Angle+0x138>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	4618      	mov	r0, r3
 800115e:	f7ff fa13 	bl	8000588 <__aeabi_f2d>
 8001162:	4604      	mov	r4, r0
 8001164:	460d      	mov	r5, r1
 8001166:	4b2b      	ldr	r3, [pc, #172]	@ (8001214 <Auto_Angle+0x148>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	4618      	mov	r0, r3
 800116c:	f7ff fa0c 	bl	8000588 <__aeabi_f2d>
 8001170:	f04f 0200 	mov.w	r2, #0
 8001174:	4b25      	ldr	r3, [pc, #148]	@ (800120c <Auto_Angle+0x140>)
 8001176:	f7ff fa5f 	bl	8000638 <__aeabi_dmul>
 800117a:	4602      	mov	r2, r0
 800117c:	460b      	mov	r3, r1
 800117e:	4620      	mov	r0, r4
 8001180:	4629      	mov	r1, r5
 8001182:	f7ff fb83 	bl	800088c <__aeabi_ddiv>
 8001186:	4602      	mov	r2, r0
 8001188:	460b      	mov	r3, r1
 800118a:	4610      	mov	r0, r2
 800118c:	4619      	mov	r1, r3
 800118e:	f7ff fd4b 	bl	8000c28 <__aeabi_d2f>
 8001192:	4603      	mov	r3, r0
 8001194:	4a1b      	ldr	r2, [pc, #108]	@ (8001204 <Auto_Angle+0x138>)
 8001196:	6013      	str	r3, [r2, #0]
			Gauche(BASE_SPEED, &htim3);
 8001198:	491d      	ldr	r1, [pc, #116]	@ (8001210 <Auto_Angle+0x144>)
 800119a:	f44f 70e1 	mov.w	r0, #450	@ 0x1c2
 800119e:	f000 fb63 	bl	8001868 <Gauche>
		}

		// Convert turning time in µs
		turning_time *= 1e6;
 80011a2:	4b18      	ldr	r3, [pc, #96]	@ (8001204 <Auto_Angle+0x138>)
 80011a4:	edd3 7a00 	vldr	s15, [r3]
 80011a8:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 8001218 <Auto_Angle+0x14c>
 80011ac:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011b0:	4b14      	ldr	r3, [pc, #80]	@ (8001204 <Auto_Angle+0x138>)
 80011b2:	edc3 7a00 	vstr	s15, [r3]

		// Start timer
	    HAL_TIM_Base_Start_IT(&htim7);
 80011b6:	4819      	ldr	r0, [pc, #100]	@ (800121c <Auto_Angle+0x150>)
 80011b8:	f005 ffc4 	bl	8007144 <HAL_TIM_Base_Start_IT>
	}

    // Stop when finished
	if(timer_count > (int)turning_time) {
 80011bc:	4b11      	ldr	r3, [pc, #68]	@ (8001204 <Auto_Angle+0x138>)
 80011be:	edd3 7a00 	vldr	s15, [r3]
 80011c2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011c6:	ee17 2a90 	vmov	r2, s15
 80011ca:	4b0c      	ldr	r3, [pc, #48]	@ (80011fc <Auto_Angle+0x130>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	429a      	cmp	r2, r3
 80011d0:	da0f      	bge.n	80011f2 <Auto_Angle+0x126>

		// Stop timer
		HAL_TIM_Base_Stop_IT(&htim7);
 80011d2:	4812      	ldr	r0, [pc, #72]	@ (800121c <Auto_Angle+0x150>)
 80011d4:	f006 f826 	bl	8007224 <HAL_TIM_Base_Stop_IT>

		// Stop the motors
		Stop(&htim3);
 80011d8:	480d      	ldr	r0, [pc, #52]	@ (8001210 <Auto_Angle+0x144>)
 80011da:	f000 fbd5 	bl	8001988 <Stop>

		// Reset temporal counter
		timer_count = 0;
 80011de:	4b07      	ldr	r3, [pc, #28]	@ (80011fc <Auto_Angle+0x130>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	601a      	str	r2, [r3, #0]

		// Ready for next step
		curr_step++;
 80011e4:	4b0e      	ldr	r3, [pc, #56]	@ (8001220 <Auto_Angle+0x154>)
 80011e6:	781b      	ldrb	r3, [r3, #0]
 80011e8:	3301      	adds	r3, #1
 80011ea:	b2da      	uxtb	r2, r3
 80011ec:	4b0c      	ldr	r3, [pc, #48]	@ (8001220 <Auto_Angle+0x154>)
 80011ee:	701a      	strb	r2, [r3, #0]
	}

	return;
 80011f0:	bf00      	nop
 80011f2:	bf00      	nop
}
 80011f4:	3708      	adds	r7, #8
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bdb0      	pop	{r4, r5, r7, pc}
 80011fa:	bf00      	nop
 80011fc:	20000240 	.word	0x20000240
 8001200:	43880000 	.word	0x43880000
 8001204:	20000244 	.word	0x20000244
 8001208:	2000025c 	.word	0x2000025c
 800120c:	40768000 	.word	0x40768000
 8001210:	20000394 	.word	0x20000394
 8001214:	20000260 	.word	0x20000260
 8001218:	49742400 	.word	0x49742400
 800121c:	2000046c 	.word	0x2000046c
 8001220:	20000000 	.word	0x20000000
 8001224:	00000000 	.word	0x00000000

08001228 <Auto_Line>:

void Auto_Line(int dist, int min_speed, int max_speed) {
 8001228:	b580      	push	{r7, lr}
 800122a:	b088      	sub	sp, #32
 800122c:	af00      	add	r7, sp, #0
 800122e:	60f8      	str	r0, [r7, #12]
 8001230:	60b9      	str	r1, [r7, #8]
 8001232:	607a      	str	r2, [r7, #4]
    // Constants
    const float accel_fraction = 0.4; // 40% of total time for acceleration
 8001234:	4b70      	ldr	r3, [pc, #448]	@ (80013f8 <Auto_Line+0x1d0>)
 8001236:	61fb      	str	r3, [r7, #28]
    const float decel_fraction = 0.4; // 40% of total time for deceleration
 8001238:	4b6f      	ldr	r3, [pc, #444]	@ (80013f8 <Auto_Line+0x1d0>)
 800123a:	61bb      	str	r3, [r7, #24]

    // Initial setup
    if (timer_count == 0) {
 800123c:	4b6f      	ldr	r3, [pc, #444]	@ (80013fc <Auto_Line+0x1d4>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	2b00      	cmp	r3, #0
 8001242:	d16f      	bne.n	8001324 <Auto_Line+0xfc>
    	LCD_Manuel(0);
 8001244:	2000      	movs	r0, #0
 8001246:	f002 fb11 	bl	800386c <LCD_Manuel>
    	LCD_Mode();
 800124a:	f002 fb5d 	bl	8003908 <LCD_Mode>

    	// Calculate total pulses required
    	float total_pulses = dist / TRACK_RESOLUTION;
 800124e:	68f8      	ldr	r0, [r7, #12]
 8001250:	f7ff f988 	bl	8000564 <__aeabi_i2d>
 8001254:	a364      	add	r3, pc, #400	@ (adr r3, 80013e8 <Auto_Line+0x1c0>)
 8001256:	e9d3 2300 	ldrd	r2, r3, [r3]
 800125a:	f7ff fb17 	bl	800088c <__aeabi_ddiv>
 800125e:	4602      	mov	r2, r0
 8001260:	460b      	mov	r3, r1
 8001262:	4610      	mov	r0, r2
 8001264:	4619      	mov	r1, r3
 8001266:	f7ff fcdf 	bl	8000c28 <__aeabi_d2f>
 800126a:	4603      	mov	r3, r0
 800126c:	617b      	str	r3, [r7, #20]

        // Calculate total time
        turning_time = (min_speed + max_speed) / 2.0;
 800126e:	68ba      	ldr	r2, [r7, #8]
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	4413      	add	r3, r2
 8001274:	4618      	mov	r0, r3
 8001276:	f7ff f975 	bl	8000564 <__aeabi_i2d>
 800127a:	f04f 0200 	mov.w	r2, #0
 800127e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001282:	f7ff fb03 	bl	800088c <__aeabi_ddiv>
 8001286:	4602      	mov	r2, r0
 8001288:	460b      	mov	r3, r1
 800128a:	4610      	mov	r0, r2
 800128c:	4619      	mov	r1, r3
 800128e:	f7ff fccb 	bl	8000c28 <__aeabi_d2f>
 8001292:	4603      	mov	r3, r0
 8001294:	4a5a      	ldr	r2, [pc, #360]	@ (8001400 <Auto_Line+0x1d8>)
 8001296:	6013      	str	r3, [r2, #0]
        total_time = (int)((total_pulses / turning_time) * 1e7);
 8001298:	4b59      	ldr	r3, [pc, #356]	@ (8001400 <Auto_Line+0x1d8>)
 800129a:	edd3 7a00 	vldr	s15, [r3]
 800129e:	ed97 7a05 	vldr	s14, [r7, #20]
 80012a2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80012a6:	ee16 0a90 	vmov	r0, s13
 80012aa:	f7ff f96d 	bl	8000588 <__aeabi_f2d>
 80012ae:	a350      	add	r3, pc, #320	@ (adr r3, 80013f0 <Auto_Line+0x1c8>)
 80012b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012b4:	f7ff f9c0 	bl	8000638 <__aeabi_dmul>
 80012b8:	4602      	mov	r2, r0
 80012ba:	460b      	mov	r3, r1
 80012bc:	4610      	mov	r0, r2
 80012be:	4619      	mov	r1, r3
 80012c0:	f7ff fc6a 	bl	8000b98 <__aeabi_d2iz>
 80012c4:	4603      	mov	r3, r0
 80012c6:	4a4f      	ldr	r2, [pc, #316]	@ (8001404 <Auto_Line+0x1dc>)
 80012c8:	6013      	str	r3, [r2, #0]

        // Calculate time for each phase
        accel_time = (int)(total_time * accel_fraction);
 80012ca:	4b4e      	ldr	r3, [pc, #312]	@ (8001404 <Auto_Line+0x1dc>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	ee07 3a90 	vmov	s15, r3
 80012d2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012d6:	edd7 7a07 	vldr	s15, [r7, #28]
 80012da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012de:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012e2:	ee17 2a90 	vmov	r2, s15
 80012e6:	4b48      	ldr	r3, [pc, #288]	@ (8001408 <Auto_Line+0x1e0>)
 80012e8:	601a      	str	r2, [r3, #0]
        decel_time = (int)(total_time * decel_fraction);
 80012ea:	4b46      	ldr	r3, [pc, #280]	@ (8001404 <Auto_Line+0x1dc>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	ee07 3a90 	vmov	s15, r3
 80012f2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012f6:	edd7 7a06 	vldr	s15, [r7, #24]
 80012fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001302:	ee17 2a90 	vmov	r2, s15
 8001306:	4b41      	ldr	r3, [pc, #260]	@ (800140c <Auto_Line+0x1e4>)
 8001308:	601a      	str	r2, [r3, #0]
        mid_time = total_time - accel_time - decel_time;
 800130a:	4b3e      	ldr	r3, [pc, #248]	@ (8001404 <Auto_Line+0x1dc>)
 800130c:	681a      	ldr	r2, [r3, #0]
 800130e:	4b3e      	ldr	r3, [pc, #248]	@ (8001408 <Auto_Line+0x1e0>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	1ad2      	subs	r2, r2, r3
 8001314:	4b3d      	ldr	r3, [pc, #244]	@ (800140c <Auto_Line+0x1e4>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	1ad3      	subs	r3, r2, r3
 800131a:	4a3d      	ldr	r2, [pc, #244]	@ (8001410 <Auto_Line+0x1e8>)
 800131c:	6013      	str	r3, [r2, #0]

        // Start timer
        HAL_TIM_Base_Start_IT(&htim7);
 800131e:	483d      	ldr	r0, [pc, #244]	@ (8001414 <Auto_Line+0x1ec>)
 8001320:	f005 ff10 	bl	8007144 <HAL_TIM_Base_Start_IT>
    }

    // Acceleration phase
    if (timer_count < accel_time) {
 8001324:	4b35      	ldr	r3, [pc, #212]	@ (80013fc <Auto_Line+0x1d4>)
 8001326:	681a      	ldr	r2, [r3, #0]
 8001328:	4b37      	ldr	r3, [pc, #220]	@ (8001408 <Auto_Line+0x1e0>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	429a      	cmp	r2, r3
 800132e:	da0f      	bge.n	8001350 <Auto_Line+0x128>
        current_speed = min_speed + (max_speed - min_speed) * timer_count / accel_time;
 8001330:	687a      	ldr	r2, [r7, #4]
 8001332:	68bb      	ldr	r3, [r7, #8]
 8001334:	1ad3      	subs	r3, r2, r3
 8001336:	4a31      	ldr	r2, [pc, #196]	@ (80013fc <Auto_Line+0x1d4>)
 8001338:	6812      	ldr	r2, [r2, #0]
 800133a:	fb03 f202 	mul.w	r2, r3, r2
 800133e:	4b32      	ldr	r3, [pc, #200]	@ (8001408 <Auto_Line+0x1e0>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	fb92 f2f3 	sdiv	r2, r2, r3
 8001346:	68bb      	ldr	r3, [r7, #8]
 8001348:	4413      	add	r3, r2
 800134a:	4a33      	ldr	r2, [pc, #204]	@ (8001418 <Auto_Line+0x1f0>)
 800134c:	6013      	str	r3, [r2, #0]
 800134e:	e03a      	b.n	80013c6 <Auto_Line+0x19e>
    }

    // Constant speed phase
    else if (timer_count < accel_time + mid_time) {
 8001350:	4b2d      	ldr	r3, [pc, #180]	@ (8001408 <Auto_Line+0x1e0>)
 8001352:	681a      	ldr	r2, [r3, #0]
 8001354:	4b2e      	ldr	r3, [pc, #184]	@ (8001410 <Auto_Line+0x1e8>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	441a      	add	r2, r3
 800135a:	4b28      	ldr	r3, [pc, #160]	@ (80013fc <Auto_Line+0x1d4>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	429a      	cmp	r2, r3
 8001360:	dd03      	ble.n	800136a <Auto_Line+0x142>
        current_speed = max_speed;
 8001362:	4a2d      	ldr	r2, [pc, #180]	@ (8001418 <Auto_Line+0x1f0>)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	6013      	str	r3, [r2, #0]
 8001368:	e02d      	b.n	80013c6 <Auto_Line+0x19e>
    }

    // Deceleration phase
    else if (timer_count < total_time) {
 800136a:	4b24      	ldr	r3, [pc, #144]	@ (80013fc <Auto_Line+0x1d4>)
 800136c:	681a      	ldr	r2, [r3, #0]
 800136e:	4b25      	ldr	r3, [pc, #148]	@ (8001404 <Auto_Line+0x1dc>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	429a      	cmp	r2, r3
 8001374:	da17      	bge.n	80013a6 <Auto_Line+0x17e>
        int decel_time_elapsed = timer_count - (accel_time + mid_time);
 8001376:	4b21      	ldr	r3, [pc, #132]	@ (80013fc <Auto_Line+0x1d4>)
 8001378:	681a      	ldr	r2, [r3, #0]
 800137a:	4b23      	ldr	r3, [pc, #140]	@ (8001408 <Auto_Line+0x1e0>)
 800137c:	6819      	ldr	r1, [r3, #0]
 800137e:	4b24      	ldr	r3, [pc, #144]	@ (8001410 <Auto_Line+0x1e8>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	440b      	add	r3, r1
 8001384:	1ad3      	subs	r3, r2, r3
 8001386:	613b      	str	r3, [r7, #16]
        current_speed = max_speed - (max_speed - min_speed) * decel_time_elapsed / decel_time;
 8001388:	687a      	ldr	r2, [r7, #4]
 800138a:	68bb      	ldr	r3, [r7, #8]
 800138c:	1ad3      	subs	r3, r2, r3
 800138e:	693a      	ldr	r2, [r7, #16]
 8001390:	fb03 f202 	mul.w	r2, r3, r2
 8001394:	4b1d      	ldr	r3, [pc, #116]	@ (800140c <Auto_Line+0x1e4>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	fb92 f3f3 	sdiv	r3, r2, r3
 800139c:	687a      	ldr	r2, [r7, #4]
 800139e:	1ad3      	subs	r3, r2, r3
 80013a0:	4a1d      	ldr	r2, [pc, #116]	@ (8001418 <Auto_Line+0x1f0>)
 80013a2:	6013      	str	r3, [r2, #0]
 80013a4:	e00f      	b.n	80013c6 <Auto_Line+0x19e>
    }

    // Stop when finished
    else {
        // Stop timer
        HAL_TIM_Base_Stop_IT(&htim7);
 80013a6:	481b      	ldr	r0, [pc, #108]	@ (8001414 <Auto_Line+0x1ec>)
 80013a8:	f005 ff3c 	bl	8007224 <HAL_TIM_Base_Stop_IT>

        // Stop the motors
        Stop(&htim3);
 80013ac:	481b      	ldr	r0, [pc, #108]	@ (800141c <Auto_Line+0x1f4>)
 80013ae:	f000 faeb 	bl	8001988 <Stop>

        // Reset temporal counter
        timer_count = 0;
 80013b2:	4b12      	ldr	r3, [pc, #72]	@ (80013fc <Auto_Line+0x1d4>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	601a      	str	r2, [r3, #0]

        // Ready for next step
        curr_step++;
 80013b8:	4b19      	ldr	r3, [pc, #100]	@ (8001420 <Auto_Line+0x1f8>)
 80013ba:	781b      	ldrb	r3, [r3, #0]
 80013bc:	3301      	adds	r3, #1
 80013be:	b2da      	uxtb	r2, r3
 80013c0:	4b17      	ldr	r3, [pc, #92]	@ (8001420 <Auto_Line+0x1f8>)
 80013c2:	701a      	strb	r2, [r3, #0]

        // Exit
        return;
 80013c4:	e00a      	b.n	80013dc <Auto_Line+0x1b4>
    }

    // Adjust speed every iteration
    if(!pause)
 80013c6:	4b17      	ldr	r3, [pc, #92]	@ (8001424 <Auto_Line+0x1fc>)
 80013c8:	781b      	ldrb	r3, [r3, #0]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d105      	bne.n	80013da <Auto_Line+0x1b2>
    	Avancer(current_speed, &htim3);
 80013ce:	4b12      	ldr	r3, [pc, #72]	@ (8001418 <Auto_Line+0x1f0>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	4912      	ldr	r1, [pc, #72]	@ (800141c <Auto_Line+0x1f4>)
 80013d4:	4618      	mov	r0, r3
 80013d6:	f000 f9b7 	bl	8001748 <Avancer>

    return;
 80013da:	bf00      	nop
}
 80013dc:	3720      	adds	r7, #32
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	f3af 8000 	nop.w
 80013e8:	e353f7cf 	.word	0xe353f7cf
 80013ec:	40129ba5 	.word	0x40129ba5
 80013f0:	00000000 	.word	0x00000000
 80013f4:	416312d0 	.word	0x416312d0
 80013f8:	3ecccccd 	.word	0x3ecccccd
 80013fc:	20000240 	.word	0x20000240
 8001400:	20000244 	.word	0x20000244
 8001404:	2000022c 	.word	0x2000022c
 8001408:	20000230 	.word	0x20000230
 800140c:	20000234 	.word	0x20000234
 8001410:	20000238 	.word	0x20000238
 8001414:	2000046c 	.word	0x2000046c
 8001418:	2000023c 	.word	0x2000023c
 800141c:	20000394 	.word	0x20000394
 8001420:	20000000 	.word	0x20000000
 8001424:	20000228 	.word	0x20000228

08001428 <Auto_Circle>:


void Auto_Circle() {
 8001428:	b580      	push	{r7, lr}
 800142a:	b084      	sub	sp, #16
 800142c:	af00      	add	r7, sp, #0
	// Initial setup
	if(timer_count == 0) {
 800142e:	4b3e      	ldr	r3, [pc, #248]	@ (8001528 <Auto_Circle+0x100>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d157      	bne.n	80014e6 <Auto_Circle+0xbe>
		LCD_Manuel(0);
 8001436:	2000      	movs	r0, #0
 8001438:	f002 fa18 	bl	800386c <LCD_Manuel>
		LCD_Mode();
 800143c:	f002 fa64 	bl	8003908 <LCD_Mode>

		// Calculate total outer wheel distance
		float outer_circumference = (PI*DISTANCE) / TRACK_RESOLUTION;//785
 8001440:	4b3a      	ldr	r3, [pc, #232]	@ (800152c <Auto_Circle+0x104>)
 8001442:	60fb      	str	r3, [r7, #12]
		float inner_circumference = outer_circumference - TRACK_WIDTH;//513
 8001444:	edd7 7a03 	vldr	s15, [r7, #12]
 8001448:	ed9f 7a39 	vldr	s14, [pc, #228]	@ 8001530 <Auto_Circle+0x108>
 800144c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001450:	edc7 7a02 	vstr	s15, [r7, #8]

		// Calculate total time
		total_time = (int)((2*RATIO)*(outer_circumference / BASE_SPEED) * 1e7);//17.4s
 8001454:	4b37      	ldr	r3, [pc, #220]	@ (8001534 <Auto_Circle+0x10c>)
 8001456:	edd3 7a00 	vldr	s15, [r3]
 800145a:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800145e:	edd7 6a03 	vldr	s13, [r7, #12]
 8001462:	ed9f 6a35 	vldr	s12, [pc, #212]	@ 8001538 <Auto_Circle+0x110>
 8001466:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800146a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800146e:	ee17 0a90 	vmov	r0, s15
 8001472:	f7ff f889 	bl	8000588 <__aeabi_f2d>
 8001476:	a32a      	add	r3, pc, #168	@ (adr r3, 8001520 <Auto_Circle+0xf8>)
 8001478:	e9d3 2300 	ldrd	r2, r3, [r3]
 800147c:	f7ff f8dc 	bl	8000638 <__aeabi_dmul>
 8001480:	4602      	mov	r2, r0
 8001482:	460b      	mov	r3, r1
 8001484:	4610      	mov	r0, r2
 8001486:	4619      	mov	r1, r3
 8001488:	f7ff fb86 	bl	8000b98 <__aeabi_d2iz>
 800148c:	4603      	mov	r3, r0
 800148e:	4a2b      	ldr	r2, [pc, #172]	@ (800153c <Auto_Circle+0x114>)
 8001490:	6013      	str	r3, [r2, #0]

		// Calculate wheel inner wheel speed
		float factor = RATIO * (inner_circumference / outer_circumference);
 8001492:	edd7 6a02 	vldr	s13, [r7, #8]
 8001496:	edd7 7a03 	vldr	s15, [r7, #12]
 800149a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800149e:	4b25      	ldr	r3, [pc, #148]	@ (8001534 <Auto_Circle+0x10c>)
 80014a0:	edd3 7a00 	vldr	s15, [r3]
 80014a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014a8:	edc7 7a01 	vstr	s15, [r7, #4]

		// Constant speed
		htim3.Instance -> CCR2 = 0;
 80014ac:	4b24      	ldr	r3, [pc, #144]	@ (8001540 <Auto_Circle+0x118>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	2200      	movs	r2, #0
 80014b2:	639a      	str	r2, [r3, #56]	@ 0x38
		htim3.Instance -> CCR4 = 0;
 80014b4:	4b22      	ldr	r3, [pc, #136]	@ (8001540 <Auto_Circle+0x118>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	2200      	movs	r2, #0
 80014ba:	641a      	str	r2, [r3, #64]	@ 0x40
		htim3.Instance -> CCR1 = BASE_SPEED;
 80014bc:	4b20      	ldr	r3, [pc, #128]	@ (8001540 <Auto_Circle+0x118>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f44f 72e1 	mov.w	r2, #450	@ 0x1c2
 80014c4:	635a      	str	r2, [r3, #52]	@ 0x34
		htim3.Instance -> CCR3 = (factor * BASE_SPEED);
 80014c6:	edd7 7a01 	vldr	s15, [r7, #4]
 80014ca:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 8001538 <Auto_Circle+0x110>
 80014ce:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014d2:	4b1b      	ldr	r3, [pc, #108]	@ (8001540 <Auto_Circle+0x118>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80014da:	ee17 2a90 	vmov	r2, s15
 80014de:	63da      	str	r2, [r3, #60]	@ 0x3c
		HAL_TIM_Base_Start_IT(&htim7);
 80014e0:	4818      	ldr	r0, [pc, #96]	@ (8001544 <Auto_Circle+0x11c>)
 80014e2:	f005 fe2f 	bl	8007144 <HAL_TIM_Base_Start_IT>
	}

	// Stop when finished
	if(timer_count > (int)total_time) {
 80014e6:	4b10      	ldr	r3, [pc, #64]	@ (8001528 <Auto_Circle+0x100>)
 80014e8:	681a      	ldr	r2, [r3, #0]
 80014ea:	4b14      	ldr	r3, [pc, #80]	@ (800153c <Auto_Circle+0x114>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	429a      	cmp	r2, r3
 80014f0:	dd11      	ble.n	8001516 <Auto_Circle+0xee>

		// Stop timer
		HAL_TIM_Base_Stop_IT(&htim7);
 80014f2:	4814      	ldr	r0, [pc, #80]	@ (8001544 <Auto_Circle+0x11c>)
 80014f4:	f005 fe96 	bl	8007224 <HAL_TIM_Base_Stop_IT>

		// Stop the motors
		Stop(&htim3);
 80014f8:	4811      	ldr	r0, [pc, #68]	@ (8001540 <Auto_Circle+0x118>)
 80014fa:	f000 fa45 	bl	8001988 <Stop>

		// Reset temporal counter
		timer_count = 0;
 80014fe:	4b0a      	ldr	r3, [pc, #40]	@ (8001528 <Auto_Circle+0x100>)
 8001500:	2200      	movs	r2, #0
 8001502:	601a      	str	r2, [r3, #0]

		// End of sequence : reset current step and set to manual mode after drawing shape
		curr_mode = MANUAL_MODE;
 8001504:	4b10      	ldr	r3, [pc, #64]	@ (8001548 <Auto_Circle+0x120>)
 8001506:	2200      	movs	r2, #0
 8001508:	701a      	strb	r2, [r3, #0]
		LCD_Mode();
 800150a:	f002 f9fd 	bl	8003908 <LCD_Mode>
		LCD_Manuel(3);
 800150e:	2003      	movs	r0, #3
 8001510:	f002 f9ac 	bl	800386c <LCD_Manuel>
	}

	return;
 8001514:	bf00      	nop
 8001516:	bf00      	nop
}
 8001518:	3710      	adds	r7, #16
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	00000000 	.word	0x00000000
 8001524:	416312d0 	.word	0x416312d0
 8001528:	20000240 	.word	0x20000240
 800152c:	4428d480 	.word	0x4428d480
 8001530:	43880000 	.word	0x43880000
 8001534:	20000258 	.word	0x20000258
 8001538:	43e10000 	.word	0x43e10000
 800153c:	2000022c 	.word	0x2000022c
 8001540:	20000394 	.word	0x20000394
 8001544:	2000046c 	.word	0x2000046c
 8001548:	2000022a 	.word	0x2000022a

0800154c <Auto_Back_Forth>:

void Auto_Back_Forth() {
 800154c:	b580      	push	{r7, lr}
 800154e:	af00      	add	r7, sp, #0
	// Manage ongoing step
	switch(curr_step) {
 8001550:	4b1c      	ldr	r3, [pc, #112]	@ (80015c4 <Auto_Back_Forth+0x78>)
 8001552:	781b      	ldrb	r3, [r3, #0]
 8001554:	3b01      	subs	r3, #1
 8001556:	2b03      	cmp	r3, #3
 8001558:	d826      	bhi.n	80015a8 <Auto_Back_Forth+0x5c>
 800155a:	a201      	add	r2, pc, #4	@ (adr r2, 8001560 <Auto_Back_Forth+0x14>)
 800155c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001560:	08001571 	.word	0x08001571
 8001564:	08001583 	.word	0x08001583
 8001568:	0800158d 	.word	0x0800158d
 800156c:	0800159f 	.word	0x0800159f
	case 1:
		// Step 1: Move forward 1 meter
		Auto_Line(DISTANCE, BASE_SPEED, BASE_SPEED);
 8001570:	f44f 72e1 	mov.w	r2, #450	@ 0x1c2
 8001574:	f44f 71e1 	mov.w	r1, #450	@ 0x1c2
 8001578:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800157c:	f7ff fe54 	bl	8001228 <Auto_Line>
		break;
 8001580:	e01e      	b.n	80015c0 <Auto_Back_Forth+0x74>

	case 2:
		// Step 2: Turn 180 degrees
		Auto_Angle(180.0);
 8001582:	ed9f 0a11 	vldr	s0, [pc, #68]	@ 80015c8 <Auto_Back_Forth+0x7c>
 8001586:	f7ff fda1 	bl	80010cc <Auto_Angle>
		break;
 800158a:	e019      	b.n	80015c0 <Auto_Back_Forth+0x74>

	case 3:
		// Step 3: Move backward 1 meter
		Auto_Line(DISTANCE, BASE_SPEED, BASE_SPEED);
 800158c:	f44f 72e1 	mov.w	r2, #450	@ 0x1c2
 8001590:	f44f 71e1 	mov.w	r1, #450	@ 0x1c2
 8001594:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001598:	f7ff fe46 	bl	8001228 <Auto_Line>
		break;
 800159c:	e010      	b.n	80015c0 <Auto_Back_Forth+0x74>

	case 4:
		// Step 4: Turn 180 degrees again to face the original direction
	    Auto_Angle(180.0);
 800159e:	ed9f 0a0a 	vldr	s0, [pc, #40]	@ 80015c8 <Auto_Back_Forth+0x7c>
 80015a2:	f7ff fd93 	bl	80010cc <Auto_Angle>
		break;
 80015a6:	e00b      	b.n	80015c0 <Auto_Back_Forth+0x74>

	default:
		// End of sequence : reset current step and set to manual mode after drawing shape
		curr_step = 1;
 80015a8:	4b06      	ldr	r3, [pc, #24]	@ (80015c4 <Auto_Back_Forth+0x78>)
 80015aa:	2201      	movs	r2, #1
 80015ac:	701a      	strb	r2, [r3, #0]
		curr_mode = MANUAL_MODE;
 80015ae:	4b07      	ldr	r3, [pc, #28]	@ (80015cc <Auto_Back_Forth+0x80>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	701a      	strb	r2, [r3, #0]
		LCD_Mode();
 80015b4:	f002 f9a8 	bl	8003908 <LCD_Mode>
		LCD_Manuel(3);
 80015b8:	2003      	movs	r0, #3
 80015ba:	f002 f957 	bl	800386c <LCD_Manuel>
		break;
 80015be:	bf00      	nop
	}
	return;
 80015c0:	bf00      	nop
}
 80015c2:	bd80      	pop	{r7, pc}
 80015c4:	20000000 	.word	0x20000000
 80015c8:	43340000 	.word	0x43340000
 80015cc:	2000022a 	.word	0x2000022a

080015d0 <Auto_Square>:

void Auto_Square() {
 80015d0:	b580      	push	{r7, lr}
 80015d2:	af00      	add	r7, sp, #0
	// Manage ongoing step
	switch(curr_step) {
 80015d4:	4b1c      	ldr	r3, [pc, #112]	@ (8001648 <Auto_Square+0x78>)
 80015d6:	781b      	ldrb	r3, [r3, #0]
 80015d8:	2b08      	cmp	r3, #8
 80015da:	bf8c      	ite	hi
 80015dc:	2201      	movhi	r2, #1
 80015de:	2200      	movls	r2, #0
 80015e0:	b2d2      	uxtb	r2, r2
 80015e2:	2a00      	cmp	r2, #0
 80015e4:	d121      	bne.n	800162a <Auto_Square+0x5a>
 80015e6:	2201      	movs	r2, #1
 80015e8:	fa02 f303 	lsl.w	r3, r2, r3
 80015ec:	f403 72aa 	and.w	r2, r3, #340	@ 0x154
 80015f0:	2a00      	cmp	r2, #0
 80015f2:	bf14      	ite	ne
 80015f4:	2201      	movne	r2, #1
 80015f6:	2200      	moveq	r2, #0
 80015f8:	b2d2      	uxtb	r2, r2
 80015fa:	2a00      	cmp	r2, #0
 80015fc:	d110      	bne.n	8001620 <Auto_Square+0x50>
 80015fe:	f003 03aa 	and.w	r3, r3, #170	@ 0xaa
 8001602:	2b00      	cmp	r3, #0
 8001604:	bf14      	ite	ne
 8001606:	2301      	movne	r3, #1
 8001608:	2300      	moveq	r3, #0
 800160a:	b2db      	uxtb	r3, r3
 800160c:	2b00      	cmp	r3, #0
 800160e:	d00c      	beq.n	800162a <Auto_Square+0x5a>
	case 1:
	case 3:
	case 5:
	case 7:
		// Odd steps: Move forward
		Auto_Line(DISTANCE, (BASE_SPEED * 0.333), BASE_SPEED);
 8001610:	f44f 72e1 	mov.w	r2, #450	@ 0x1c2
 8001614:	2195      	movs	r1, #149	@ 0x95
 8001616:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800161a:	f7ff fe05 	bl	8001228 <Auto_Line>
		break;
 800161e:	e010      	b.n	8001642 <Auto_Square+0x72>
	case 2:
	case 4:
	case 6:
	case 8:
		// Even steps: Turn 90 degrees
		Auto_Angle(90.0);
 8001620:	ed9f 0a0a 	vldr	s0, [pc, #40]	@ 800164c <Auto_Square+0x7c>
 8001624:	f7ff fd52 	bl	80010cc <Auto_Angle>
		break;
 8001628:	e00b      	b.n	8001642 <Auto_Square+0x72>

	default:
		// End of sequence: reset current step and set to manual mode after drawing shape
		curr_step = 1;
 800162a:	4b07      	ldr	r3, [pc, #28]	@ (8001648 <Auto_Square+0x78>)
 800162c:	2201      	movs	r2, #1
 800162e:	701a      	strb	r2, [r3, #0]
		curr_mode = MANUAL_MODE;
 8001630:	4b07      	ldr	r3, [pc, #28]	@ (8001650 <Auto_Square+0x80>)
 8001632:	2200      	movs	r2, #0
 8001634:	701a      	strb	r2, [r3, #0]
		LCD_Mode();
 8001636:	f002 f967 	bl	8003908 <LCD_Mode>
		LCD_Manuel(3);
 800163a:	2003      	movs	r0, #3
 800163c:	f002 f916 	bl	800386c <LCD_Manuel>
		break;
 8001640:	bf00      	nop
	}
	return;
 8001642:	bf00      	nop
}
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	20000000 	.word	0x20000000
 800164c:	42b40000 	.word	0x42b40000
 8001650:	2000022a 	.word	0x2000022a

08001654 <Pause>:

void Pause() {
 8001654:	b580      	push	{r7, lr}
 8001656:	af00      	add	r7, sp, #0
	pause = pause ^ 1;
 8001658:	4b19      	ldr	r3, [pc, #100]	@ (80016c0 <Pause+0x6c>)
 800165a:	781b      	ldrb	r3, [r3, #0]
 800165c:	f083 0301 	eor.w	r3, r3, #1
 8001660:	b2da      	uxtb	r2, r3
 8001662:	4b17      	ldr	r3, [pc, #92]	@ (80016c0 <Pause+0x6c>)
 8001664:	701a      	strb	r2, [r3, #0]

	// Save currrent CCR values
	save[0] = htim3.Instance -> CCR1;
 8001666:	4b17      	ldr	r3, [pc, #92]	@ (80016c4 <Pause+0x70>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800166c:	461a      	mov	r2, r3
 800166e:	4b16      	ldr	r3, [pc, #88]	@ (80016c8 <Pause+0x74>)
 8001670:	601a      	str	r2, [r3, #0]
	save[1] = htim3.Instance -> CCR2;
 8001672:	4b14      	ldr	r3, [pc, #80]	@ (80016c4 <Pause+0x70>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001678:	461a      	mov	r2, r3
 800167a:	4b13      	ldr	r3, [pc, #76]	@ (80016c8 <Pause+0x74>)
 800167c:	605a      	str	r2, [r3, #4]
	save[2] = htim3.Instance -> CCR3;
 800167e:	4b11      	ldr	r3, [pc, #68]	@ (80016c4 <Pause+0x70>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001684:	461a      	mov	r2, r3
 8001686:	4b10      	ldr	r3, [pc, #64]	@ (80016c8 <Pause+0x74>)
 8001688:	609a      	str	r2, [r3, #8]
	save[3] = htim3.Instance -> CCR4;
 800168a:	4b0e      	ldr	r3, [pc, #56]	@ (80016c4 <Pause+0x70>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001690:	461a      	mov	r2, r3
 8001692:	4b0d      	ldr	r3, [pc, #52]	@ (80016c8 <Pause+0x74>)
 8001694:	60da      	str	r2, [r3, #12]

	// Stop
	HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 8001696:	2100      	movs	r1, #0
 8001698:	480a      	ldr	r0, [pc, #40]	@ (80016c4 <Pause+0x70>)
 800169a:	f005 ff13 	bl	80074c4 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_2);
 800169e:	2104      	movs	r1, #4
 80016a0:	4808      	ldr	r0, [pc, #32]	@ (80016c4 <Pause+0x70>)
 80016a2:	f005 ff0f 	bl	80074c4 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_3);
 80016a6:	2108      	movs	r1, #8
 80016a8:	4806      	ldr	r0, [pc, #24]	@ (80016c4 <Pause+0x70>)
 80016aa:	f005 ff0b 	bl	80074c4 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_4);
 80016ae:	210c      	movs	r1, #12
 80016b0:	4804      	ldr	r0, [pc, #16]	@ (80016c4 <Pause+0x70>)
 80016b2:	f005 ff07 	bl	80074c4 <HAL_TIM_PWM_Stop>
	HAL_TIM_Base_Stop_IT(&htim7);
 80016b6:	4805      	ldr	r0, [pc, #20]	@ (80016cc <Pause+0x78>)
 80016b8:	f005 fdb4 	bl	8007224 <HAL_TIM_Base_Stop_IT>

	return;
 80016bc:	bf00      	nop
}
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	20000228 	.word	0x20000228
 80016c4:	20000394 	.word	0x20000394
 80016c8:	20000248 	.word	0x20000248
 80016cc:	2000046c 	.word	0x2000046c

080016d0 <Resume>:

void Resume() {
 80016d0:	b580      	push	{r7, lr}
 80016d2:	af00      	add	r7, sp, #0
	pause = pause ^ 1;
 80016d4:	4b17      	ldr	r3, [pc, #92]	@ (8001734 <Resume+0x64>)
 80016d6:	781b      	ldrb	r3, [r3, #0]
 80016d8:	f083 0301 	eor.w	r3, r3, #1
 80016dc:	b2da      	uxtb	r2, r3
 80016de:	4b15      	ldr	r3, [pc, #84]	@ (8001734 <Resume+0x64>)
 80016e0:	701a      	strb	r2, [r3, #0]

	// Restore saved CCR values
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80016e2:	2100      	movs	r1, #0
 80016e4:	4814      	ldr	r0, [pc, #80]	@ (8001738 <Resume+0x68>)
 80016e6:	f005 fe25 	bl	8007334 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80016ea:	2104      	movs	r1, #4
 80016ec:	4812      	ldr	r0, [pc, #72]	@ (8001738 <Resume+0x68>)
 80016ee:	f005 fe21 	bl	8007334 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 80016f2:	2108      	movs	r1, #8
 80016f4:	4810      	ldr	r0, [pc, #64]	@ (8001738 <Resume+0x68>)
 80016f6:	f005 fe1d 	bl	8007334 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 80016fa:	210c      	movs	r1, #12
 80016fc:	480e      	ldr	r0, [pc, #56]	@ (8001738 <Resume+0x68>)
 80016fe:	f005 fe19 	bl	8007334 <HAL_TIM_PWM_Start>
	htim3.Instance -> CCR1 = save[0];
 8001702:	4b0e      	ldr	r3, [pc, #56]	@ (800173c <Resume+0x6c>)
 8001704:	681a      	ldr	r2, [r3, #0]
 8001706:	4b0c      	ldr	r3, [pc, #48]	@ (8001738 <Resume+0x68>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	635a      	str	r2, [r3, #52]	@ 0x34
	htim3.Instance -> CCR2 = save[1];
 800170c:	4b0b      	ldr	r3, [pc, #44]	@ (800173c <Resume+0x6c>)
 800170e:	685a      	ldr	r2, [r3, #4]
 8001710:	4b09      	ldr	r3, [pc, #36]	@ (8001738 <Resume+0x68>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	639a      	str	r2, [r3, #56]	@ 0x38
	htim3.Instance -> CCR3 = save[2];
 8001716:	4b09      	ldr	r3, [pc, #36]	@ (800173c <Resume+0x6c>)
 8001718:	689a      	ldr	r2, [r3, #8]
 800171a:	4b07      	ldr	r3, [pc, #28]	@ (8001738 <Resume+0x68>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	63da      	str	r2, [r3, #60]	@ 0x3c
	htim3.Instance -> CCR4 = save[3];
 8001720:	4b06      	ldr	r3, [pc, #24]	@ (800173c <Resume+0x6c>)
 8001722:	68da      	ldr	r2, [r3, #12]
 8001724:	4b04      	ldr	r3, [pc, #16]	@ (8001738 <Resume+0x68>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	641a      	str	r2, [r3, #64]	@ 0x40
	HAL_TIM_Base_Start_IT(&htim7);
 800172a:	4805      	ldr	r0, [pc, #20]	@ (8001740 <Resume+0x70>)
 800172c:	f005 fd0a 	bl	8007144 <HAL_TIM_Base_Start_IT>

	return;
 8001730:	bf00      	nop
}
 8001732:	bd80      	pop	{r7, pc}
 8001734:	20000228 	.word	0x20000228
 8001738:	20000394 	.word	0x20000394
 800173c:	20000248 	.word	0x20000248
 8001740:	2000046c 	.word	0x2000046c
 8001744:	00000000 	.word	0x00000000

08001748 <Avancer>:
#include "vitesse_affichage.h"

extern int directionD;
extern int directionG;

void Avancer(int Pulse, TIM_HandleTypeDef* htim3){
 8001748:	b590      	push	{r4, r7, lr}
 800174a:	b083      	sub	sp, #12
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
 8001750:	6039      	str	r1, [r7, #0]

	htim3->Instance -> CCR2 = 0;
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	2200      	movs	r2, #0
 8001758:	639a      	str	r2, [r3, #56]	@ 0x38
	htim3->Instance -> CCR4 = 0;
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	2200      	movs	r2, #0
 8001760:	641a      	str	r2, [r3, #64]	@ 0x40

	if(Pulse > 499){
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001768:	db02      	blt.n	8001770 <Avancer+0x28>
		Pulse = 499;
 800176a:	f240 13f3 	movw	r3, #499	@ 0x1f3
 800176e:	607b      	str	r3, [r7, #4]
	}

	htim3->Instance -> CCR1 = Pulse;
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	687a      	ldr	r2, [r7, #4]
 8001776:	635a      	str	r2, [r3, #52]	@ 0x34
	htim3->Instance -> CCR3 = htim3->Instance -> CCR1 * 0.9;
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800177e:	4618      	mov	r0, r3
 8001780:	f7fe fee0 	bl	8000544 <__aeabi_ui2d>
 8001784:	a312      	add	r3, pc, #72	@ (adr r3, 80017d0 <Avancer+0x88>)
 8001786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800178a:	f7fe ff55 	bl	8000638 <__aeabi_dmul>
 800178e:	4602      	mov	r2, r0
 8001790:	460b      	mov	r3, r1
 8001792:	4610      	mov	r0, r2
 8001794:	4619      	mov	r1, r3
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	681c      	ldr	r4, [r3, #0]
 800179a:	f7ff fa25 	bl	8000be8 <__aeabi_d2uiz>
 800179e:	4603      	mov	r3, r0
 80017a0:	63e3      	str	r3, [r4, #60]	@ 0x3c

	directionD = 0;
 80017a2:	4b09      	ldr	r3, [pc, #36]	@ (80017c8 <Avancer+0x80>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	601a      	str	r2, [r3, #0]
	directionG = 0;
 80017a8:	4b08      	ldr	r3, [pc, #32]	@ (80017cc <Avancer+0x84>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	601a      	str	r2, [r3, #0]

	LCD_Vitesse(directionD, directionG);
 80017ae:	4b06      	ldr	r3, [pc, #24]	@ (80017c8 <Avancer+0x80>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	4a06      	ldr	r2, [pc, #24]	@ (80017cc <Avancer+0x84>)
 80017b4:	6812      	ldr	r2, [r2, #0]
 80017b6:	4611      	mov	r1, r2
 80017b8:	4618      	mov	r0, r3
 80017ba:	f002 f8c3 	bl	8003944 <LCD_Vitesse>

	return;
 80017be:	bf00      	nop
}
 80017c0:	370c      	adds	r7, #12
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd90      	pop	{r4, r7, pc}
 80017c6:	bf00      	nop
 80017c8:	200002d0 	.word	0x200002d0
 80017cc:	200002d4 	.word	0x200002d4
 80017d0:	cccccccd 	.word	0xcccccccd
 80017d4:	3feccccc 	.word	0x3feccccc

080017d8 <Droite>:

void Droite(int Pulse, TIM_HandleTypeDef* htim3){
 80017d8:	b590      	push	{r4, r7, lr}
 80017da:	b083      	sub	sp, #12
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
 80017e0:	6039      	str	r1, [r7, #0]

	htim3->Instance -> CCR2 = 0;
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	2200      	movs	r2, #0
 80017e8:	639a      	str	r2, [r3, #56]	@ 0x38
	htim3->Instance -> CCR3 = 0;
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	2200      	movs	r2, #0
 80017f0:	63da      	str	r2, [r3, #60]	@ 0x3c

	if(Pulse > 499){
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80017f8:	db02      	blt.n	8001800 <Droite+0x28>
		Pulse = 499;
 80017fa:	f240 13f3 	movw	r3, #499	@ 0x1f3
 80017fe:	607b      	str	r3, [r7, #4]
	}
	htim3->Instance -> CCR1 = Pulse;
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	687a      	ldr	r2, [r7, #4]
 8001806:	635a      	str	r2, [r3, #52]	@ 0x34
	htim3->Instance -> CCR4 = htim3->Instance -> CCR1 * 0.9;
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800180e:	4618      	mov	r0, r3
 8001810:	f7fe fe98 	bl	8000544 <__aeabi_ui2d>
 8001814:	a312      	add	r3, pc, #72	@ (adr r3, 8001860 <Droite+0x88>)
 8001816:	e9d3 2300 	ldrd	r2, r3, [r3]
 800181a:	f7fe ff0d 	bl	8000638 <__aeabi_dmul>
 800181e:	4602      	mov	r2, r0
 8001820:	460b      	mov	r3, r1
 8001822:	4610      	mov	r0, r2
 8001824:	4619      	mov	r1, r3
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	681c      	ldr	r4, [r3, #0]
 800182a:	f7ff f9dd 	bl	8000be8 <__aeabi_d2uiz>
 800182e:	4603      	mov	r3, r0
 8001830:	6423      	str	r3, [r4, #64]	@ 0x40

	directionD = 0;
 8001832:	4b09      	ldr	r3, [pc, #36]	@ (8001858 <Droite+0x80>)
 8001834:	2200      	movs	r2, #0
 8001836:	601a      	str	r2, [r3, #0]
	directionG = 1;
 8001838:	4b08      	ldr	r3, [pc, #32]	@ (800185c <Droite+0x84>)
 800183a:	2201      	movs	r2, #1
 800183c:	601a      	str	r2, [r3, #0]

	LCD_Vitesse(directionD, directionG);
 800183e:	4b06      	ldr	r3, [pc, #24]	@ (8001858 <Droite+0x80>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	4a06      	ldr	r2, [pc, #24]	@ (800185c <Droite+0x84>)
 8001844:	6812      	ldr	r2, [r2, #0]
 8001846:	4611      	mov	r1, r2
 8001848:	4618      	mov	r0, r3
 800184a:	f002 f87b 	bl	8003944 <LCD_Vitesse>

	return;
 800184e:	bf00      	nop
}
 8001850:	370c      	adds	r7, #12
 8001852:	46bd      	mov	sp, r7
 8001854:	bd90      	pop	{r4, r7, pc}
 8001856:	bf00      	nop
 8001858:	200002d0 	.word	0x200002d0
 800185c:	200002d4 	.word	0x200002d4
 8001860:	cccccccd 	.word	0xcccccccd
 8001864:	3feccccc 	.word	0x3feccccc

08001868 <Gauche>:

void Gauche(int Pulse, TIM_HandleTypeDef* htim3){
 8001868:	b590      	push	{r4, r7, lr}
 800186a:	b083      	sub	sp, #12
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
 8001870:	6039      	str	r1, [r7, #0]

	htim3->Instance -> CCR1 = 0;
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	2200      	movs	r2, #0
 8001878:	635a      	str	r2, [r3, #52]	@ 0x34
	htim3->Instance -> CCR4 = 0;
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	2200      	movs	r2, #0
 8001880:	641a      	str	r2, [r3, #64]	@ 0x40

	if(Pulse > 499){
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001888:	db02      	blt.n	8001890 <Gauche+0x28>
		Pulse = 499;
 800188a:	f240 13f3 	movw	r3, #499	@ 0x1f3
 800188e:	607b      	str	r3, [r7, #4]
	}
	htim3->Instance -> CCR2 = Pulse;
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	687a      	ldr	r2, [r7, #4]
 8001896:	639a      	str	r2, [r3, #56]	@ 0x38
	htim3->Instance -> CCR3 = htim3->Instance -> CCR2 * 0.9;
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800189e:	4618      	mov	r0, r3
 80018a0:	f7fe fe50 	bl	8000544 <__aeabi_ui2d>
 80018a4:	a312      	add	r3, pc, #72	@ (adr r3, 80018f0 <Gauche+0x88>)
 80018a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018aa:	f7fe fec5 	bl	8000638 <__aeabi_dmul>
 80018ae:	4602      	mov	r2, r0
 80018b0:	460b      	mov	r3, r1
 80018b2:	4610      	mov	r0, r2
 80018b4:	4619      	mov	r1, r3
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	681c      	ldr	r4, [r3, #0]
 80018ba:	f7ff f995 	bl	8000be8 <__aeabi_d2uiz>
 80018be:	4603      	mov	r3, r0
 80018c0:	63e3      	str	r3, [r4, #60]	@ 0x3c

	directionD = 1;
 80018c2:	4b09      	ldr	r3, [pc, #36]	@ (80018e8 <Gauche+0x80>)
 80018c4:	2201      	movs	r2, #1
 80018c6:	601a      	str	r2, [r3, #0]
	directionG = 0;
 80018c8:	4b08      	ldr	r3, [pc, #32]	@ (80018ec <Gauche+0x84>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	601a      	str	r2, [r3, #0]

	LCD_Vitesse(directionD, directionG);
 80018ce:	4b06      	ldr	r3, [pc, #24]	@ (80018e8 <Gauche+0x80>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4a06      	ldr	r2, [pc, #24]	@ (80018ec <Gauche+0x84>)
 80018d4:	6812      	ldr	r2, [r2, #0]
 80018d6:	4611      	mov	r1, r2
 80018d8:	4618      	mov	r0, r3
 80018da:	f002 f833 	bl	8003944 <LCD_Vitesse>

	return;
 80018de:	bf00      	nop
}
 80018e0:	370c      	adds	r7, #12
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd90      	pop	{r4, r7, pc}
 80018e6:	bf00      	nop
 80018e8:	200002d0 	.word	0x200002d0
 80018ec:	200002d4 	.word	0x200002d4
 80018f0:	cccccccd 	.word	0xcccccccd
 80018f4:	3feccccc 	.word	0x3feccccc

080018f8 <Reculer>:

void Reculer(int Pulse,TIM_HandleTypeDef* htim3){
 80018f8:	b590      	push	{r4, r7, lr}
 80018fa:	b083      	sub	sp, #12
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
 8001900:	6039      	str	r1, [r7, #0]

	htim3->Instance -> CCR1 = 0;
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	2200      	movs	r2, #0
 8001908:	635a      	str	r2, [r3, #52]	@ 0x34
	htim3->Instance -> CCR3 = 0;
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	2200      	movs	r2, #0
 8001910:	63da      	str	r2, [r3, #60]	@ 0x3c

	if(Pulse > 499){
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001918:	db02      	blt.n	8001920 <Reculer+0x28>
		Pulse = 499;
 800191a:	f240 13f3 	movw	r3, #499	@ 0x1f3
 800191e:	607b      	str	r3, [r7, #4]
	}

	htim3->Instance -> CCR4 = Pulse;
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	687a      	ldr	r2, [r7, #4]
 8001926:	641a      	str	r2, [r3, #64]	@ 0x40
	htim3->Instance -> CCR2 = htim3->Instance -> CCR4 * 0.95;
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800192e:	4618      	mov	r0, r3
 8001930:	f7fe fe08 	bl	8000544 <__aeabi_ui2d>
 8001934:	a312      	add	r3, pc, #72	@ (adr r3, 8001980 <Reculer+0x88>)
 8001936:	e9d3 2300 	ldrd	r2, r3, [r3]
 800193a:	f7fe fe7d 	bl	8000638 <__aeabi_dmul>
 800193e:	4602      	mov	r2, r0
 8001940:	460b      	mov	r3, r1
 8001942:	4610      	mov	r0, r2
 8001944:	4619      	mov	r1, r3
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	681c      	ldr	r4, [r3, #0]
 800194a:	f7ff f94d 	bl	8000be8 <__aeabi_d2uiz>
 800194e:	4603      	mov	r3, r0
 8001950:	63a3      	str	r3, [r4, #56]	@ 0x38

	directionD = 1;
 8001952:	4b09      	ldr	r3, [pc, #36]	@ (8001978 <Reculer+0x80>)
 8001954:	2201      	movs	r2, #1
 8001956:	601a      	str	r2, [r3, #0]
	directionG = 1;
 8001958:	4b08      	ldr	r3, [pc, #32]	@ (800197c <Reculer+0x84>)
 800195a:	2201      	movs	r2, #1
 800195c:	601a      	str	r2, [r3, #0]

	LCD_Vitesse(directionD, directionG);
 800195e:	4b06      	ldr	r3, [pc, #24]	@ (8001978 <Reculer+0x80>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4a06      	ldr	r2, [pc, #24]	@ (800197c <Reculer+0x84>)
 8001964:	6812      	ldr	r2, [r2, #0]
 8001966:	4611      	mov	r1, r2
 8001968:	4618      	mov	r0, r3
 800196a:	f001 ffeb 	bl	8003944 <LCD_Vitesse>

	return;
 800196e:	bf00      	nop
}
 8001970:	370c      	adds	r7, #12
 8001972:	46bd      	mov	sp, r7
 8001974:	bd90      	pop	{r4, r7, pc}
 8001976:	bf00      	nop
 8001978:	200002d0 	.word	0x200002d0
 800197c:	200002d4 	.word	0x200002d4
 8001980:	66666666 	.word	0x66666666
 8001984:	3fee6666 	.word	0x3fee6666

08001988 <Stop>:
void Stop(TIM_HandleTypeDef* htim3){
 8001988:	b580      	push	{r7, lr}
 800198a:	b082      	sub	sp, #8
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
	htim3->Instance -> CCR1 = 0;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	2200      	movs	r2, #0
 8001996:	635a      	str	r2, [r3, #52]	@ 0x34
	htim3->Instance -> CCR2 = 0;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	2200      	movs	r2, #0
 800199e:	639a      	str	r2, [r3, #56]	@ 0x38
	htim3->Instance -> CCR3 = 0;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	2200      	movs	r2, #0
 80019a6:	63da      	str	r2, [r3, #60]	@ 0x3c
	htim3->Instance -> CCR4 = 0;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	2200      	movs	r2, #0
 80019ae:	641a      	str	r2, [r3, #64]	@ 0x40

	directionD = 0;
 80019b0:	4b08      	ldr	r3, [pc, #32]	@ (80019d4 <Stop+0x4c>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	601a      	str	r2, [r3, #0]
	directionG = 0;
 80019b6:	4b08      	ldr	r3, [pc, #32]	@ (80019d8 <Stop+0x50>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	601a      	str	r2, [r3, #0]

	LCD_Vitesse(directionD, directionG);
 80019bc:	4b05      	ldr	r3, [pc, #20]	@ (80019d4 <Stop+0x4c>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4a05      	ldr	r2, [pc, #20]	@ (80019d8 <Stop+0x50>)
 80019c2:	6812      	ldr	r2, [r2, #0]
 80019c4:	4611      	mov	r1, r2
 80019c6:	4618      	mov	r0, r3
 80019c8:	f001 ffbc 	bl	8003944 <LCD_Vitesse>

	return;
 80019cc:	bf00      	nop
}
 80019ce:	3708      	adds	r7, #8
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}
 80019d4:	200002d0 	.word	0x200002d0
 80019d8:	200002d4 	.word	0x200002d4

080019dc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b08a      	sub	sp, #40	@ 0x28
 80019e0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019e2:	f107 0314 	add.w	r3, r7, #20
 80019e6:	2200      	movs	r2, #0
 80019e8:	601a      	str	r2, [r3, #0]
 80019ea:	605a      	str	r2, [r3, #4]
 80019ec:	609a      	str	r2, [r3, #8]
 80019ee:	60da      	str	r2, [r3, #12]
 80019f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019f2:	2300      	movs	r3, #0
 80019f4:	613b      	str	r3, [r7, #16]
 80019f6:	4b59      	ldr	r3, [pc, #356]	@ (8001b5c <MX_GPIO_Init+0x180>)
 80019f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019fa:	4a58      	ldr	r2, [pc, #352]	@ (8001b5c <MX_GPIO_Init+0x180>)
 80019fc:	f043 0304 	orr.w	r3, r3, #4
 8001a00:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a02:	4b56      	ldr	r3, [pc, #344]	@ (8001b5c <MX_GPIO_Init+0x180>)
 8001a04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a06:	f003 0304 	and.w	r3, r3, #4
 8001a0a:	613b      	str	r3, [r7, #16]
 8001a0c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a0e:	2300      	movs	r3, #0
 8001a10:	60fb      	str	r3, [r7, #12]
 8001a12:	4b52      	ldr	r3, [pc, #328]	@ (8001b5c <MX_GPIO_Init+0x180>)
 8001a14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a16:	4a51      	ldr	r2, [pc, #324]	@ (8001b5c <MX_GPIO_Init+0x180>)
 8001a18:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001a1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a1e:	4b4f      	ldr	r3, [pc, #316]	@ (8001b5c <MX_GPIO_Init+0x180>)
 8001a20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a26:	60fb      	str	r3, [r7, #12]
 8001a28:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	60bb      	str	r3, [r7, #8]
 8001a2e:	4b4b      	ldr	r3, [pc, #300]	@ (8001b5c <MX_GPIO_Init+0x180>)
 8001a30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a32:	4a4a      	ldr	r2, [pc, #296]	@ (8001b5c <MX_GPIO_Init+0x180>)
 8001a34:	f043 0301 	orr.w	r3, r3, #1
 8001a38:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a3a:	4b48      	ldr	r3, [pc, #288]	@ (8001b5c <MX_GPIO_Init+0x180>)
 8001a3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a3e:	f003 0301 	and.w	r3, r3, #1
 8001a42:	60bb      	str	r3, [r7, #8]
 8001a44:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a46:	2300      	movs	r3, #0
 8001a48:	607b      	str	r3, [r7, #4]
 8001a4a:	4b44      	ldr	r3, [pc, #272]	@ (8001b5c <MX_GPIO_Init+0x180>)
 8001a4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a4e:	4a43      	ldr	r2, [pc, #268]	@ (8001b5c <MX_GPIO_Init+0x180>)
 8001a50:	f043 0302 	orr.w	r3, r3, #2
 8001a54:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a56:	4b41      	ldr	r3, [pc, #260]	@ (8001b5c <MX_GPIO_Init+0x180>)
 8001a58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a5a:	f003 0302 	and.w	r3, r3, #2
 8001a5e:	607b      	str	r3, [r7, #4]
 8001a60:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001a62:	2200      	movs	r2, #0
 8001a64:	2120      	movs	r1, #32
 8001a66:	483e      	ldr	r0, [pc, #248]	@ (8001b60 <MX_GPIO_Init+0x184>)
 8001a68:	f002 fc28 	bl	80042bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI_RST_Pin|SPI_CS_Pin|SPI_DC_Pin, GPIO_PIN_RESET);
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	f44f 4160 	mov.w	r1, #57344	@ 0xe000
 8001a72:	483c      	ldr	r0, [pc, #240]	@ (8001b64 <MX_GPIO_Init+0x188>)
 8001a74:	f002 fc22 	bl	80042bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Blue_Button_Pin;
 8001a78:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001a7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001a7e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001a82:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a84:	2300      	movs	r3, #0
 8001a86:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Blue_Button_GPIO_Port, &GPIO_InitStruct);
 8001a88:	f107 0314 	add.w	r3, r7, #20
 8001a8c:	4619      	mov	r1, r3
 8001a8e:	4836      	ldr	r0, [pc, #216]	@ (8001b68 <MX_GPIO_Init+0x18c>)
 8001a90:	f002 fa68 	bl	8003f64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = Dipswitch_MSB_Pin|Dipswitch_LSB_Pin;
 8001a94:	230c      	movs	r3, #12
 8001a96:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001a9c:	2302      	movs	r3, #2
 8001a9e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001aa0:	f107 0314 	add.w	r3, r7, #20
 8001aa4:	4619      	mov	r1, r3
 8001aa6:	4830      	ldr	r0, [pc, #192]	@ (8001b68 <MX_GPIO_Init+0x18c>)
 8001aa8:	f002 fa5c 	bl	8003f64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001aac:	2320      	movs	r3, #32
 8001aae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001abc:	f107 0314 	add.w	r3, r7, #20
 8001ac0:	4619      	mov	r1, r3
 8001ac2:	4827      	ldr	r0, [pc, #156]	@ (8001b60 <MX_GPIO_Init+0x184>)
 8001ac4:	f002 fa4e 	bl	8003f64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = SPI_RST_Pin|SPI_CS_Pin|SPI_DC_Pin;
 8001ac8:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8001acc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ada:	f107 0314 	add.w	r3, r7, #20
 8001ade:	4619      	mov	r1, r3
 8001ae0:	4820      	ldr	r0, [pc, #128]	@ (8001b64 <MX_GPIO_Init+0x188>)
 8001ae2:	f002 fa3f 	bl	8003f64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Encodeur_D_B_Pin;
 8001ae6:	2380      	movs	r3, #128	@ 0x80
 8001ae8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001aea:	2300      	movs	r3, #0
 8001aec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aee:	2300      	movs	r3, #0
 8001af0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Encodeur_D_B_GPIO_Port, &GPIO_InitStruct);
 8001af2:	f107 0314 	add.w	r3, r7, #20
 8001af6:	4619      	mov	r1, r3
 8001af8:	481b      	ldr	r0, [pc, #108]	@ (8001b68 <MX_GPIO_Init+0x18c>)
 8001afa:	f002 fa33 	bl	8003f64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = Encodeur_G_A_Pin|Encodeur_D_A_Pin;
 8001afe:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001b02:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001b04:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001b08:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001b0a:	2302      	movs	r3, #2
 8001b0c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b0e:	f107 0314 	add.w	r3, r7, #20
 8001b12:	4619      	mov	r1, r3
 8001b14:	4812      	ldr	r0, [pc, #72]	@ (8001b60 <MX_GPIO_Init+0x184>)
 8001b16:	f002 fa25 	bl	8003f64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Encodeur_G_B_Pin;
 8001b1a:	2340      	movs	r3, #64	@ 0x40
 8001b1c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b22:	2300      	movs	r3, #0
 8001b24:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Encodeur_G_B_GPIO_Port, &GPIO_InitStruct);
 8001b26:	f107 0314 	add.w	r3, r7, #20
 8001b2a:	4619      	mov	r1, r3
 8001b2c:	480d      	ldr	r0, [pc, #52]	@ (8001b64 <MX_GPIO_Init+0x188>)
 8001b2e:	f002 fa19 	bl	8003f64 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001b32:	2200      	movs	r2, #0
 8001b34:	2100      	movs	r1, #0
 8001b36:	2017      	movs	r0, #23
 8001b38:	f002 f9dd 	bl	8003ef6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001b3c:	2017      	movs	r0, #23
 8001b3e:	f002 f9f6 	bl	8003f2e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001b42:	2200      	movs	r2, #0
 8001b44:	2100      	movs	r1, #0
 8001b46:	2028      	movs	r0, #40	@ 0x28
 8001b48:	f002 f9d5 	bl	8003ef6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001b4c:	2028      	movs	r0, #40	@ 0x28
 8001b4e:	f002 f9ee 	bl	8003f2e <HAL_NVIC_EnableIRQ>

}
 8001b52:	bf00      	nop
 8001b54:	3728      	adds	r7, #40	@ 0x28
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	bf00      	nop
 8001b5c:	40023800 	.word	0x40023800
 8001b60:	40020000 	.word	0x40020000
 8001b64:	40020400 	.word	0x40020400
 8001b68:	40020800 	.word	0x40020800

08001b6c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001b70:	4b12      	ldr	r3, [pc, #72]	@ (8001bbc <MX_I2C1_Init+0x50>)
 8001b72:	4a13      	ldr	r2, [pc, #76]	@ (8001bc0 <MX_I2C1_Init+0x54>)
 8001b74:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001b76:	4b11      	ldr	r3, [pc, #68]	@ (8001bbc <MX_I2C1_Init+0x50>)
 8001b78:	4a12      	ldr	r2, [pc, #72]	@ (8001bc4 <MX_I2C1_Init+0x58>)
 8001b7a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001b7c:	4b0f      	ldr	r3, [pc, #60]	@ (8001bbc <MX_I2C1_Init+0x50>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001b82:	4b0e      	ldr	r3, [pc, #56]	@ (8001bbc <MX_I2C1_Init+0x50>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b88:	4b0c      	ldr	r3, [pc, #48]	@ (8001bbc <MX_I2C1_Init+0x50>)
 8001b8a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001b8e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b90:	4b0a      	ldr	r3, [pc, #40]	@ (8001bbc <MX_I2C1_Init+0x50>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001b96:	4b09      	ldr	r3, [pc, #36]	@ (8001bbc <MX_I2C1_Init+0x50>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b9c:	4b07      	ldr	r3, [pc, #28]	@ (8001bbc <MX_I2C1_Init+0x50>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001ba2:	4b06      	ldr	r3, [pc, #24]	@ (8001bbc <MX_I2C1_Init+0x50>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001ba8:	4804      	ldr	r0, [pc, #16]	@ (8001bbc <MX_I2C1_Init+0x50>)
 8001baa:	f002 fbb9 	bl	8004320 <HAL_I2C_Init>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d001      	beq.n	8001bb8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001bb4:	f000 fa5a 	bl	800206c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001bb8:	bf00      	nop
 8001bba:	bd80      	pop	{r7, pc}
 8001bbc:	20000264 	.word	0x20000264
 8001bc0:	40005400 	.word	0x40005400
 8001bc4:	000186a0 	.word	0x000186a0

08001bc8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b08a      	sub	sp, #40	@ 0x28
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bd0:	f107 0314 	add.w	r3, r7, #20
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	601a      	str	r2, [r3, #0]
 8001bd8:	605a      	str	r2, [r3, #4]
 8001bda:	609a      	str	r2, [r3, #8]
 8001bdc:	60da      	str	r2, [r3, #12]
 8001bde:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4a19      	ldr	r2, [pc, #100]	@ (8001c4c <HAL_I2C_MspInit+0x84>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d12c      	bne.n	8001c44 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bea:	2300      	movs	r3, #0
 8001bec:	613b      	str	r3, [r7, #16]
 8001bee:	4b18      	ldr	r3, [pc, #96]	@ (8001c50 <HAL_I2C_MspInit+0x88>)
 8001bf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bf2:	4a17      	ldr	r2, [pc, #92]	@ (8001c50 <HAL_I2C_MspInit+0x88>)
 8001bf4:	f043 0302 	orr.w	r3, r3, #2
 8001bf8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bfa:	4b15      	ldr	r3, [pc, #84]	@ (8001c50 <HAL_I2C_MspInit+0x88>)
 8001bfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bfe:	f003 0302 	and.w	r3, r3, #2
 8001c02:	613b      	str	r3, [r7, #16]
 8001c04:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001c06:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001c0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c0c:	2312      	movs	r3, #18
 8001c0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c10:	2300      	movs	r3, #0
 8001c12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c14:	2303      	movs	r3, #3
 8001c16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001c18:	2304      	movs	r3, #4
 8001c1a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c1c:	f107 0314 	add.w	r3, r7, #20
 8001c20:	4619      	mov	r1, r3
 8001c22:	480c      	ldr	r0, [pc, #48]	@ (8001c54 <HAL_I2C_MspInit+0x8c>)
 8001c24:	f002 f99e 	bl	8003f64 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001c28:	2300      	movs	r3, #0
 8001c2a:	60fb      	str	r3, [r7, #12]
 8001c2c:	4b08      	ldr	r3, [pc, #32]	@ (8001c50 <HAL_I2C_MspInit+0x88>)
 8001c2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c30:	4a07      	ldr	r2, [pc, #28]	@ (8001c50 <HAL_I2C_MspInit+0x88>)
 8001c32:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001c36:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c38:	4b05      	ldr	r3, [pc, #20]	@ (8001c50 <HAL_I2C_MspInit+0x88>)
 8001c3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c3c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c40:	60fb      	str	r3, [r7, #12]
 8001c42:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001c44:	bf00      	nop
 8001c46:	3728      	adds	r7, #40	@ 0x28
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}
 8001c4c:	40005400 	.word	0x40005400
 8001c50:	40023800 	.word	0x40023800
 8001c54:	40020400 	.word	0x40020400

08001c58 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c5c:	f001 ffda 	bl	8003c14 <HAL_Init>

  /* USER CODE BEGIN Init */

  Initialisation_manette();
 8001c60:	f000 fa5e 	bl	8002120 <Initialisation_manette>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c64:	f000 f8b8 	bl	8001dd8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c68:	f7ff feb8 	bl	80019dc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001c6c:	f001 f96e 	bl	8002f4c <MX_USART2_UART_Init>
  MX_TIM6_Init();
 8001c70:	f000 ffce 	bl	8002c10 <MX_TIM6_Init>
  MX_TIM3_Init();
 8001c74:	f000 febc 	bl	80029f0 <MX_TIM3_Init>
  MX_TIM7_Init();
 8001c78:	f001 f800 	bl	8002c7c <MX_TIM7_Init>
  MX_I2C1_Init();
 8001c7c:	f7ff ff76 	bl	8001b6c <MX_I2C1_Init>
  MX_SPI2_Init();
 8001c80:	f000 fcb4 	bl	80025ec <MX_SPI2_Init>
  MX_TIM4_Init();
 8001c84:	f000 ff4c 	bl	8002b20 <MX_TIM4_Init>
  MX_RTC_Init();
 8001c88:	f000 fc2c 	bl	80024e4 <MX_RTC_Init>
  MX_TIM10_Init();
 8001c8c:	f001 f82a 	bl	8002ce4 <MX_TIM10_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim6);
 8001c90:	4840      	ldr	r0, [pc, #256]	@ (8001d94 <main+0x13c>)
 8001c92:	f005 fa57 	bl	8007144 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim10);
 8001c96:	4840      	ldr	r0, [pc, #256]	@ (8001d98 <main+0x140>)
 8001c98:	f005 fa54 	bl	8007144 <HAL_TIM_Base_Start_IT>

  if (HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1) != HAL_OK)
 8001c9c:	2100      	movs	r1, #0
 8001c9e:	483f      	ldr	r0, [pc, #252]	@ (8001d9c <main+0x144>)
 8001ca0:	f005 fb48 	bl	8007334 <HAL_TIM_PWM_Start>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d001      	beq.n	8001cae <main+0x56>
  {
      Error_Handler();
 8001caa:	f000 f9df 	bl	800206c <Error_Handler>
  }

  if (HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2) != HAL_OK)
 8001cae:	2104      	movs	r1, #4
 8001cb0:	483a      	ldr	r0, [pc, #232]	@ (8001d9c <main+0x144>)
 8001cb2:	f005 fb3f 	bl	8007334 <HAL_TIM_PWM_Start>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d001      	beq.n	8001cc0 <main+0x68>
  {
      Error_Handler();
 8001cbc:	f000 f9d6 	bl	800206c <Error_Handler>
  }

  if (HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3) != HAL_OK)
 8001cc0:	2108      	movs	r1, #8
 8001cc2:	4836      	ldr	r0, [pc, #216]	@ (8001d9c <main+0x144>)
 8001cc4:	f005 fb36 	bl	8007334 <HAL_TIM_PWM_Start>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d001      	beq.n	8001cd2 <main+0x7a>
  {
      Error_Handler();
 8001cce:	f000 f9cd 	bl	800206c <Error_Handler>
  }

  if (HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4) != HAL_OK)
 8001cd2:	210c      	movs	r1, #12
 8001cd4:	4831      	ldr	r0, [pc, #196]	@ (8001d9c <main+0x144>)
 8001cd6:	f005 fb2d 	bl	8007334 <HAL_TIM_PWM_Start>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d001      	beq.n	8001ce4 <main+0x8c>
  {
      Error_Handler();
 8001ce0:	f000 f9c4 	bl	800206c <Error_Handler>
  }
  arrTimerVitesse = __HAL_TIM_GET_AUTORELOAD(&htim6);
 8001ce4:	4b2b      	ldr	r3, [pc, #172]	@ (8001d94 <main+0x13c>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cea:	b29a      	uxth	r2, r3
 8001cec:	4b2c      	ldr	r3, [pc, #176]	@ (8001da0 <main+0x148>)
 8001cee:	801a      	strh	r2, [r3, #0]
  curr_mode = MANUAL_MODE;
 8001cf0:	4b2c      	ldr	r3, [pc, #176]	@ (8001da4 <main+0x14c>)
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	701a      	strb	r2, [r3, #0]
  curr_step = 1;
 8001cf6:	4b2c      	ldr	r3, [pc, #176]	@ (8001da8 <main+0x150>)
 8001cf8:	2201      	movs	r2, #1
 8001cfa:	701a      	strb	r2, [r3, #0]
  if(DEBUG_MODE) {
	  CLOCKWISE_FACTOR = STARTING_VALUE;
	  COUNTER_CLW_FACTOR = STARTING_VALUE;
	  RATIO = STARTING_VALUE;
  } else {
	  RATIO = 0.61;
 8001cfc:	4b2b      	ldr	r3, [pc, #172]	@ (8001dac <main+0x154>)
 8001cfe:	4a2c      	ldr	r2, [pc, #176]	@ (8001db0 <main+0x158>)
 8001d00:	601a      	str	r2, [r3, #0]
	  CLOCKWISE_FACTOR = 56.75;
 8001d02:	4b2c      	ldr	r3, [pc, #176]	@ (8001db4 <main+0x15c>)
 8001d04:	4a2c      	ldr	r2, [pc, #176]	@ (8001db8 <main+0x160>)
 8001d06:	601a      	str	r2, [r3, #0]
	  COUNTER_CLW_FACTOR = 0;
 8001d08:	4b2c      	ldr	r3, [pc, #176]	@ (8001dbc <main+0x164>)
 8001d0a:	f04f 0200 	mov.w	r2, #0
 8001d0e:	601a      	str	r2, [r3, #0]
  }
  LCD_Init(&LCD_Init_OK);
 8001d10:	482b      	ldr	r0, [pc, #172]	@ (8001dc0 <main+0x168>)
 8001d12:	f001 fe6b 	bl	80039ec <LCD_Init>
  {

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	if(timeRefresh && (curr_mode == MANUAL_MODE || pause)){
 8001d16:	4b2b      	ldr	r3, [pc, #172]	@ (8001dc4 <main+0x16c>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d00c      	beq.n	8001d38 <main+0xe0>
 8001d1e:	4b21      	ldr	r3, [pc, #132]	@ (8001da4 <main+0x14c>)
 8001d20:	781b      	ldrb	r3, [r3, #0]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d003      	beq.n	8001d2e <main+0xd6>
 8001d26:	4b28      	ldr	r3, [pc, #160]	@ (8001dc8 <main+0x170>)
 8001d28:	781b      	ldrb	r3, [r3, #0]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d004      	beq.n	8001d38 <main+0xe0>
	refresh_RTC_Time();
 8001d2e:	f001 fbed 	bl	800350c <refresh_RTC_Time>
	timeRefresh = 0;
 8001d32:	4b24      	ldr	r3, [pc, #144]	@ (8001dc4 <main+0x16c>)
 8001d34:	2200      	movs	r2, #0
 8001d36:	601a      	str	r2, [r3, #0]
	}

	if(DEBUG_MODE)							// Find constant values
		  Constant_Tuning_Mode();
	else if(curr_mode != MANUAL_MODE) { 	// Toggle auto mode
 8001d38:	4b1a      	ldr	r3, [pc, #104]	@ (8001da4 <main+0x14c>)
 8001d3a:	781b      	ldrb	r3, [r3, #0]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d013      	beq.n	8001d68 <main+0x110>
		switch(curr_mode) {
 8001d40:	4b18      	ldr	r3, [pc, #96]	@ (8001da4 <main+0x14c>)
 8001d42:	781b      	ldrb	r3, [r3, #0]
 8001d44:	2b03      	cmp	r3, #3
 8001d46:	d00c      	beq.n	8001d62 <main+0x10a>
 8001d48:	2b03      	cmp	r3, #3
 8001d4a:	dc0f      	bgt.n	8001d6c <main+0x114>
 8001d4c:	2b01      	cmp	r3, #1
 8001d4e:	d002      	beq.n	8001d56 <main+0xfe>
 8001d50:	2b02      	cmp	r3, #2
 8001d52:	d003      	beq.n	8001d5c <main+0x104>
 8001d54:	e00a      	b.n	8001d6c <main+0x114>
			case CIRCLE_MODE:
				Auto_Circle();
 8001d56:	f7ff fb67 	bl	8001428 <Auto_Circle>
				break;
 8001d5a:	e007      	b.n	8001d6c <main+0x114>
			case BACK_FORTH_MODE:
				Auto_Back_Forth();
 8001d5c:	f7ff fbf6 	bl	800154c <Auto_Back_Forth>
				break;
 8001d60:	e004      	b.n	8001d6c <main+0x114>
			case SQUARE_MODE:
				Auto_Square();
 8001d62:	f7ff fc35 	bl	80015d0 <Auto_Square>
				break;
 8001d66:	e001      	b.n	8001d6c <main+0x114>
		}
	}
	else { 	// Manual mode
		Controller();
 8001d68:	f000 f9fe 	bl	8002168 <Controller>
	}
	if(vitesseRefresh >= 3 && curr_mode == MANUAL_MODE){
 8001d6c:	4b17      	ldr	r3, [pc, #92]	@ (8001dcc <main+0x174>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	2b02      	cmp	r3, #2
 8001d72:	ddd0      	ble.n	8001d16 <main+0xbe>
 8001d74:	4b0b      	ldr	r3, [pc, #44]	@ (8001da4 <main+0x14c>)
 8001d76:	781b      	ldrb	r3, [r3, #0]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d1cc      	bne.n	8001d16 <main+0xbe>
		LCD_Vitesse(directionD, directionG);
 8001d7c:	4b14      	ldr	r3, [pc, #80]	@ (8001dd0 <main+0x178>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a14      	ldr	r2, [pc, #80]	@ (8001dd4 <main+0x17c>)
 8001d82:	6812      	ldr	r2, [r2, #0]
 8001d84:	4611      	mov	r1, r2
 8001d86:	4618      	mov	r0, r3
 8001d88:	f001 fddc 	bl	8003944 <LCD_Vitesse>
		vitesseRefresh = 0;
 8001d8c:	4b0f      	ldr	r3, [pc, #60]	@ (8001dcc <main+0x174>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	601a      	str	r2, [r3, #0]
	if(timeRefresh && (curr_mode == MANUAL_MODE || pause)){
 8001d92:	e7c0      	b.n	8001d16 <main+0xbe>
 8001d94:	20000424 	.word	0x20000424
 8001d98:	200004b4 	.word	0x200004b4
 8001d9c:	20000394 	.word	0x20000394
 8001da0:	20000002 	.word	0x20000002
 8001da4:	2000022a 	.word	0x2000022a
 8001da8:	20000000 	.word	0x20000000
 8001dac:	20000258 	.word	0x20000258
 8001db0:	3f1c28f6 	.word	0x3f1c28f6
 8001db4:	2000025c 	.word	0x2000025c
 8001db8:	42630000 	.word	0x42630000
 8001dbc:	20000260 	.word	0x20000260
 8001dc0:	200002c4 	.word	0x200002c4
 8001dc4:	200002c8 	.word	0x200002c8
 8001dc8:	20000228 	.word	0x20000228
 8001dcc:	200002cc 	.word	0x200002cc
 8001dd0:	200002d0 	.word	0x200002d0
 8001dd4:	200002d4 	.word	0x200002d4

08001dd8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b094      	sub	sp, #80	@ 0x50
 8001ddc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001dde:	f107 031c 	add.w	r3, r7, #28
 8001de2:	2234      	movs	r2, #52	@ 0x34
 8001de4:	2100      	movs	r1, #0
 8001de6:	4618      	mov	r0, r3
 8001de8:	f008 fb18 	bl	800a41c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001dec:	f107 0308 	add.w	r3, r7, #8
 8001df0:	2200      	movs	r2, #0
 8001df2:	601a      	str	r2, [r3, #0]
 8001df4:	605a      	str	r2, [r3, #4]
 8001df6:	609a      	str	r2, [r3, #8]
 8001df8:	60da      	str	r2, [r3, #12]
 8001dfa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	607b      	str	r3, [r7, #4]
 8001e00:	4b2b      	ldr	r3, [pc, #172]	@ (8001eb0 <SystemClock_Config+0xd8>)
 8001e02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e04:	4a2a      	ldr	r2, [pc, #168]	@ (8001eb0 <SystemClock_Config+0xd8>)
 8001e06:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e0a:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e0c:	4b28      	ldr	r3, [pc, #160]	@ (8001eb0 <SystemClock_Config+0xd8>)
 8001e0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e10:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e14:	607b      	str	r3, [r7, #4]
 8001e16:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001e18:	2300      	movs	r3, #0
 8001e1a:	603b      	str	r3, [r7, #0]
 8001e1c:	4b25      	ldr	r3, [pc, #148]	@ (8001eb4 <SystemClock_Config+0xdc>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001e24:	4a23      	ldr	r2, [pc, #140]	@ (8001eb4 <SystemClock_Config+0xdc>)
 8001e26:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e2a:	6013      	str	r3, [r2, #0]
 8001e2c:	4b21      	ldr	r3, [pc, #132]	@ (8001eb4 <SystemClock_Config+0xdc>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001e34:	603b      	str	r3, [r7, #0]
 8001e36:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8001e38:	2306      	movs	r3, #6
 8001e3a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001e40:	2301      	movs	r3, #1
 8001e42:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001e44:	2310      	movs	r3, #16
 8001e46:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e48:	2302      	movs	r3, #2
 8001e4a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001e50:	2310      	movs	r3, #16
 8001e52:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001e54:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001e58:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001e5a:	2304      	movs	r3, #4
 8001e5c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001e5e:	2302      	movs	r3, #2
 8001e60:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001e62:	2302      	movs	r3, #2
 8001e64:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e66:	f107 031c 	add.w	r3, r7, #28
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f004 f8c6 	bl	8005ffc <HAL_RCC_OscConfig>
 8001e70:	4603      	mov	r3, r0
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d001      	beq.n	8001e7a <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8001e76:	f000 f8f9 	bl	800206c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e7a:	230f      	movs	r3, #15
 8001e7c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e7e:	2302      	movs	r3, #2
 8001e80:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e82:	2300      	movs	r3, #0
 8001e84:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001e86:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001e8a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001e90:	f107 0308 	add.w	r3, r7, #8
 8001e94:	2102      	movs	r1, #2
 8001e96:	4618      	mov	r0, r3
 8001e98:	f003 fa3c 	bl	8005314 <HAL_RCC_ClockConfig>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d001      	beq.n	8001ea6 <SystemClock_Config+0xce>
  {
    Error_Handler();
 8001ea2:	f000 f8e3 	bl	800206c <Error_Handler>
  }
}
 8001ea6:	bf00      	nop
 8001ea8:	3750      	adds	r7, #80	@ 0x50
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}
 8001eae:	bf00      	nop
 8001eb0:	40023800 	.word	0x40023800
 8001eb4:	40007000 	.word	0x40007000

08001eb8 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001eb8:	b590      	push	{r4, r7, lr}
 8001eba:	b085      	sub	sp, #20
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	80fb      	strh	r3, [r7, #6]

	if(GPIO_Pin == GPIO_PIN_9)
 8001ec2:	88fb      	ldrh	r3, [r7, #6]
 8001ec4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001ec8:	d106      	bne.n	8001ed8 <HAL_GPIO_EXTI_Callback+0x20>
	{
		nbPulseD++ ; // compte les pulses de lencodeur droit
 8001eca:	4b20      	ldr	r3, [pc, #128]	@ (8001f4c <HAL_GPIO_EXTI_Callback+0x94>)
 8001ecc:	881b      	ldrh	r3, [r3, #0]
 8001ece:	b29b      	uxth	r3, r3
 8001ed0:	3301      	adds	r3, #1
 8001ed2:	b29a      	uxth	r2, r3
 8001ed4:	4b1d      	ldr	r3, [pc, #116]	@ (8001f4c <HAL_GPIO_EXTI_Callback+0x94>)
 8001ed6:	801a      	strh	r2, [r3, #0]
    	//Encod_B_D = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_7);
	}

	if(GPIO_Pin == GPIO_PIN_8)
 8001ed8:	88fb      	ldrh	r3, [r7, #6]
 8001eda:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001ede:	d106      	bne.n	8001eee <HAL_GPIO_EXTI_Callback+0x36>
	{
		nbPulseG++ ; // compte les pulses de lencodeur droit
 8001ee0:	4b1b      	ldr	r3, [pc, #108]	@ (8001f50 <HAL_GPIO_EXTI_Callback+0x98>)
 8001ee2:	881b      	ldrh	r3, [r3, #0]
 8001ee4:	b29b      	uxth	r3, r3
 8001ee6:	3301      	adds	r3, #1
 8001ee8:	b29a      	uxth	r2, r3
 8001eea:	4b19      	ldr	r3, [pc, #100]	@ (8001f50 <HAL_GPIO_EXTI_Callback+0x98>)
 8001eec:	801a      	strh	r2, [r3, #0]
    	//Encod_B_G = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6);
	}


	if(GPIO_Pin == Blue_Button_Pin) {
 8001eee:	88fb      	ldrh	r3, [r7, #6]
 8001ef0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001ef4:	d127      	bne.n	8001f46 <HAL_GPIO_EXTI_Callback+0x8e>
			Paint_DrawString_EN (120, 150, buffer, &Font16, MAGENTA, WHITE);
			return;
		}

		// Resume if auto mode paused
		if(pause)
 8001ef6:	4b17      	ldr	r3, [pc, #92]	@ (8001f54 <HAL_GPIO_EXTI_Callback+0x9c>)
 8001ef8:	781b      	ldrb	r3, [r3, #0]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d002      	beq.n	8001f04 <HAL_GPIO_EXTI_Callback+0x4c>
			Resume();
 8001efe:	f7ff fbe7 	bl	80016d0 <Resume>
 8001f02:	e005      	b.n	8001f10 <HAL_GPIO_EXTI_Callback+0x58>

		// Pause auto mode if button pressed while auto mode on
		else if(curr_mode != MANUAL_MODE)
 8001f04:	4b14      	ldr	r3, [pc, #80]	@ (8001f58 <HAL_GPIO_EXTI_Callback+0xa0>)
 8001f06:	781b      	ldrb	r3, [r3, #0]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d001      	beq.n	8001f10 <HAL_GPIO_EXTI_Callback+0x58>
			Pause();
 8001f0c:	f7ff fba2 	bl	8001654 <Pause>

		// Change current mode only on manual mode
		if(curr_mode == MANUAL_MODE) {
 8001f10:	4b11      	ldr	r3, [pc, #68]	@ (8001f58 <HAL_GPIO_EXTI_Callback+0xa0>)
 8001f12:	781b      	ldrb	r3, [r3, #0]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d116      	bne.n	8001f46 <HAL_GPIO_EXTI_Callback+0x8e>
			dip_state = Get_Mode(HAL_GPIO_ReadPin(Dipswitch_MSB_GPIO_Port, Dipswitch_MSB_Pin), HAL_GPIO_ReadPin(Dipswitch_LSB_GPIO_Port, Dipswitch_LSB_Pin));
 8001f18:	2104      	movs	r1, #4
 8001f1a:	4810      	ldr	r0, [pc, #64]	@ (8001f5c <HAL_GPIO_EXTI_Callback+0xa4>)
 8001f1c:	f002 f9b6 	bl	800428c <HAL_GPIO_ReadPin>
 8001f20:	4603      	mov	r3, r0
 8001f22:	461c      	mov	r4, r3
 8001f24:	2108      	movs	r1, #8
 8001f26:	480d      	ldr	r0, [pc, #52]	@ (8001f5c <HAL_GPIO_EXTI_Callback+0xa4>)
 8001f28:	f002 f9b0 	bl	800428c <HAL_GPIO_ReadPin>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	4619      	mov	r1, r3
 8001f30:	4620      	mov	r0, r4
 8001f32:	f7ff f877 	bl	8001024 <Get_Mode>
 8001f36:	4603      	mov	r3, r0
 8001f38:	b2da      	uxtb	r2, r3
 8001f3a:	4b09      	ldr	r3, [pc, #36]	@ (8001f60 <HAL_GPIO_EXTI_Callback+0xa8>)
 8001f3c:	701a      	strb	r2, [r3, #0]
			curr_mode = dip_state;
 8001f3e:	4b08      	ldr	r3, [pc, #32]	@ (8001f60 <HAL_GPIO_EXTI_Callback+0xa8>)
 8001f40:	781a      	ldrb	r2, [r3, #0]
 8001f42:	4b05      	ldr	r3, [pc, #20]	@ (8001f58 <HAL_GPIO_EXTI_Callback+0xa0>)
 8001f44:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8001f46:	3714      	adds	r7, #20
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bd90      	pop	{r4, r7, pc}
 8001f4c:	200002b8 	.word	0x200002b8
 8001f50:	200002ba 	.word	0x200002ba
 8001f54:	20000228 	.word	0x20000228
 8001f58:	2000022a 	.word	0x2000022a
 8001f5c:	40020800 	.word	0x40020800
 8001f60:	20000229 	.word	0x20000229

08001f64 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b082      	sub	sp, #8
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
    if(htim->Instance == TIM6)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a30      	ldr	r2, [pc, #192]	@ (8002034 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d148      	bne.n	8002008 <HAL_TIM_PeriodElapsedCallback+0xa4>
    {

    	moyPulse(nbPulseD, nbPulseG, &moyNbPulseD, &moyNbPulseG);
 8001f76:	4b30      	ldr	r3, [pc, #192]	@ (8002038 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8001f78:	881b      	ldrh	r3, [r3, #0]
 8001f7a:	b298      	uxth	r0, r3
 8001f7c:	4b2f      	ldr	r3, [pc, #188]	@ (800203c <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8001f7e:	881b      	ldrh	r3, [r3, #0]
 8001f80:	b299      	uxth	r1, r3
 8001f82:	4b2f      	ldr	r3, [pc, #188]	@ (8002040 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8001f84:	4a2f      	ldr	r2, [pc, #188]	@ (8002044 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8001f86:	f001 f853 	bl	8003030 <moyPulse>

    	vitesseD = CIRCONFERENCE * moyNbPulseD / PULSE_PAR_TOUR * 2000 / (arrTimerVitesse + 1) ; // calcule la vitesse de la chenille droite en m/s
 8001f8a:	4b2e      	ldr	r3, [pc, #184]	@ (8002044 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8001f8c:	881b      	ldrh	r3, [r3, #0]
 8001f8e:	461a      	mov	r2, r3
 8001f90:	239d      	movs	r3, #157	@ 0x9d
 8001f92:	fb02 f303 	mul.w	r3, r2, r3
 8001f96:	4a2c      	ldr	r2, [pc, #176]	@ (8002048 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8001f98:	fb82 1203 	smull	r1, r2, r2, r3
 8001f9c:	441a      	add	r2, r3
 8001f9e:	1192      	asrs	r2, r2, #6
 8001fa0:	17db      	asrs	r3, r3, #31
 8001fa2:	1ad3      	subs	r3, r2, r3
 8001fa4:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8001fa8:	fb03 f202 	mul.w	r2, r3, r2
 8001fac:	4b27      	ldr	r3, [pc, #156]	@ (800204c <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8001fae:	881b      	ldrh	r3, [r3, #0]
 8001fb0:	b29b      	uxth	r3, r3
 8001fb2:	3301      	adds	r3, #1
 8001fb4:	fb92 f3f3 	sdiv	r3, r2, r3
 8001fb8:	b29a      	uxth	r2, r3
 8001fba:	4b25      	ldr	r3, [pc, #148]	@ (8002050 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8001fbc:	801a      	strh	r2, [r3, #0]
    	vitesseG = CIRCONFERENCE * moyNbPulseG / PULSE_PAR_TOUR * 2000 / (arrTimerVitesse + 1) ;
 8001fbe:	4b20      	ldr	r3, [pc, #128]	@ (8002040 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8001fc0:	881b      	ldrh	r3, [r3, #0]
 8001fc2:	461a      	mov	r2, r3
 8001fc4:	239d      	movs	r3, #157	@ 0x9d
 8001fc6:	fb02 f303 	mul.w	r3, r2, r3
 8001fca:	4a1f      	ldr	r2, [pc, #124]	@ (8002048 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8001fcc:	fb82 1203 	smull	r1, r2, r2, r3
 8001fd0:	441a      	add	r2, r3
 8001fd2:	1192      	asrs	r2, r2, #6
 8001fd4:	17db      	asrs	r3, r3, #31
 8001fd6:	1ad3      	subs	r3, r2, r3
 8001fd8:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8001fdc:	fb03 f202 	mul.w	r2, r3, r2
 8001fe0:	4b1a      	ldr	r3, [pc, #104]	@ (800204c <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8001fe2:	881b      	ldrh	r3, [r3, #0]
 8001fe4:	b29b      	uxth	r3, r3
 8001fe6:	3301      	adds	r3, #1
 8001fe8:	fb92 f3f3 	sdiv	r3, r2, r3
 8001fec:	b29a      	uxth	r2, r3
 8001fee:	4b19      	ldr	r3, [pc, #100]	@ (8002054 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8001ff0:	801a      	strh	r2, [r3, #0]
    	nbPulseD = 0;
 8001ff2:	4b11      	ldr	r3, [pc, #68]	@ (8002038 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	801a      	strh	r2, [r3, #0]
    	nbPulseG = 0;
 8001ff8:	4b10      	ldr	r3, [pc, #64]	@ (800203c <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	801a      	strh	r2, [r3, #0]
    	vitesseRefresh++;
 8001ffe:	4b16      	ldr	r3, [pc, #88]	@ (8002058 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	3301      	adds	r3, #1
 8002004:	4a14      	ldr	r2, [pc, #80]	@ (8002058 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8002006:	6013      	str	r3, [r2, #0]
    	    }*/
    	}



    if(htim->Instance == TIM7) {	// Triggered every 10 µs
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a13      	ldr	r2, [pc, #76]	@ (800205c <HAL_TIM_PeriodElapsedCallback+0xf8>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d104      	bne.n	800201c <HAL_TIM_PeriodElapsedCallback+0xb8>
    	timer_count += 10;
 8002012:	4b13      	ldr	r3, [pc, #76]	@ (8002060 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	330a      	adds	r3, #10
 8002018:	4a11      	ldr	r2, [pc, #68]	@ (8002060 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 800201a:	6013      	str	r3, [r2, #0]
    }
    if(htim->Instance == TIM10){
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a10      	ldr	r2, [pc, #64]	@ (8002064 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d102      	bne.n	800202c <HAL_TIM_PeriodElapsedCallback+0xc8>
    	timeRefresh = 1;
 8002026:	4b10      	ldr	r3, [pc, #64]	@ (8002068 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8002028:	2201      	movs	r2, #1
 800202a:	601a      	str	r2, [r3, #0]
    }
}
 800202c:	bf00      	nop
 800202e:	3708      	adds	r7, #8
 8002030:	46bd      	mov	sp, r7
 8002032:	bd80      	pop	{r7, pc}
 8002034:	40001000 	.word	0x40001000
 8002038:	200002b8 	.word	0x200002b8
 800203c:	200002ba 	.word	0x200002ba
 8002040:	200002bc 	.word	0x200002bc
 8002044:	200002be 	.word	0x200002be
 8002048:	dd67c8a7 	.word	0xdd67c8a7
 800204c:	20000002 	.word	0x20000002
 8002050:	200002c0 	.word	0x200002c0
 8002054:	200002c2 	.word	0x200002c2
 8002058:	200002cc 	.word	0x200002cc
 800205c:	40001400 	.word	0x40001400
 8002060:	20000240 	.word	0x20000240
 8002064:	40014400 	.word	0x40014400
 8002068:	200002c8 	.word	0x200002c8

0800206c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800206c:	b480      	push	{r7}
 800206e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002070:	b672      	cpsid	i
}
 8002072:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002074:	bf00      	nop
 8002076:	e7fd      	b.n	8002074 <Error_Handler+0x8>

08002078 <Format_Data>:
int maxInverse = 500;
int sendPulseMotor;

int toggle;

void Format_Data() {
 8002078:	b480      	push	{r7}
 800207a:	af00      	add	r7, sp, #0
	/*FROM LAB7*/
	formatted_data[0] = data[0];
 800207c:	4b20      	ldr	r3, [pc, #128]	@ (8002100 <Format_Data+0x88>)
 800207e:	781b      	ldrb	r3, [r3, #0]
 8002080:	461a      	mov	r2, r3
 8002082:	4b20      	ldr	r3, [pc, #128]	@ (8002104 <Format_Data+0x8c>)
 8002084:	601a      	str	r2, [r3, #0]
	formatted_data[1] = data[1];
 8002086:	4b1e      	ldr	r3, [pc, #120]	@ (8002100 <Format_Data+0x88>)
 8002088:	785b      	ldrb	r3, [r3, #1]
 800208a:	461a      	mov	r2, r3
 800208c:	4b1d      	ldr	r3, [pc, #116]	@ (8002104 <Format_Data+0x8c>)
 800208e:	605a      	str	r2, [r3, #4]
	formatted_data[5] = (data[5] & 0x02);
 8002090:	4b1b      	ldr	r3, [pc, #108]	@ (8002100 <Format_Data+0x88>)
 8002092:	795b      	ldrb	r3, [r3, #5]
 8002094:	f003 0302 	and.w	r3, r3, #2
 8002098:	4a1a      	ldr	r2, [pc, #104]	@ (8002104 <Format_Data+0x8c>)
 800209a:	6153      	str	r3, [r2, #20]
	if(formatted_data[5] == 2)
 800209c:	4b19      	ldr	r3, [pc, #100]	@ (8002104 <Format_Data+0x8c>)
 800209e:	695b      	ldr	r3, [r3, #20]
 80020a0:	2b02      	cmp	r3, #2
 80020a2:	d102      	bne.n	80020aa <Format_Data+0x32>
		formatted_data[5] = 1;
 80020a4:	4b17      	ldr	r3, [pc, #92]	@ (8002104 <Format_Data+0x8c>)
 80020a6:	2201      	movs	r2, #1
 80020a8:	615a      	str	r2, [r3, #20]
	formatted_data[6] = (data[5] & 0x01);
 80020aa:	4b15      	ldr	r3, [pc, #84]	@ (8002100 <Format_Data+0x88>)
 80020ac:	795b      	ldrb	r3, [r3, #5]
 80020ae:	f003 0301 	and.w	r3, r3, #1
 80020b2:	4a14      	ldr	r2, [pc, #80]	@ (8002104 <Format_Data+0x8c>)
 80020b4:	6193      	str	r3, [r2, #24]

	/*MY DATA*/
	Xdata = data[0];
 80020b6:	4b12      	ldr	r3, [pc, #72]	@ (8002100 <Format_Data+0x88>)
 80020b8:	781b      	ldrb	r3, [r3, #0]
 80020ba:	461a      	mov	r2, r3
 80020bc:	4b12      	ldr	r3, [pc, #72]	@ (8002108 <Format_Data+0x90>)
 80020be:	601a      	str	r2, [r3, #0]
	Ydata = data[1];
 80020c0:	4b0f      	ldr	r3, [pc, #60]	@ (8002100 <Format_Data+0x88>)
 80020c2:	785b      	ldrb	r3, [r3, #1]
 80020c4:	461a      	mov	r2, r3
 80020c6:	4b11      	ldr	r3, [pc, #68]	@ (800210c <Format_Data+0x94>)
 80020c8:	601a      	str	r2, [r3, #0]
	Xpulse = data[0];
 80020ca:	4b0d      	ldr	r3, [pc, #52]	@ (8002100 <Format_Data+0x88>)
 80020cc:	781b      	ldrb	r3, [r3, #0]
 80020ce:	461a      	mov	r2, r3
 80020d0:	4b0f      	ldr	r3, [pc, #60]	@ (8002110 <Format_Data+0x98>)
 80020d2:	601a      	str	r2, [r3, #0]
	Ypulse = data[1];
 80020d4:	4b0a      	ldr	r3, [pc, #40]	@ (8002100 <Format_Data+0x88>)
 80020d6:	785b      	ldrb	r3, [r3, #1]
 80020d8:	461a      	mov	r2, r3
 80020da:	4b0e      	ldr	r3, [pc, #56]	@ (8002114 <Format_Data+0x9c>)
 80020dc:	601a      	str	r2, [r3, #0]
	Cbutton = (data[5] & 0x02);
 80020de:	4b08      	ldr	r3, [pc, #32]	@ (8002100 <Format_Data+0x88>)
 80020e0:	795b      	ldrb	r3, [r3, #5]
 80020e2:	f003 0302 	and.w	r3, r3, #2
 80020e6:	4a0c      	ldr	r2, [pc, #48]	@ (8002118 <Format_Data+0xa0>)
 80020e8:	6013      	str	r3, [r2, #0]
	Zbutton = (data[5] & 0x01);
 80020ea:	4b05      	ldr	r3, [pc, #20]	@ (8002100 <Format_Data+0x88>)
 80020ec:	795b      	ldrb	r3, [r3, #5]
 80020ee:	f003 0301 	and.w	r3, r3, #1
 80020f2:	4a0a      	ldr	r2, [pc, #40]	@ (800211c <Format_Data+0xa4>)
 80020f4:	6013      	str	r3, [r2, #0]
	/* neutral x and y data: 128
	max x and y data: 1-254 */

}
 80020f6:	bf00      	nop
 80020f8:	46bd      	mov	sp, r7
 80020fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fe:	4770      	bx	lr
 8002100:	200002d8 	.word	0x200002d8
 8002104:	200002e0 	.word	0x200002e0
 8002108:	200002fc 	.word	0x200002fc
 800210c:	20000300 	.word	0x20000300
 8002110:	20000304 	.word	0x20000304
 8002114:	20000308 	.word	0x20000308
 8002118:	2000030c 	.word	0x2000030c
 800211c:	20000310 	.word	0x20000310

08002120 <Initialisation_manette>:


void Initialisation_manette(){
 8002120:	b580      	push	{r7, lr}
 8002122:	b082      	sub	sp, #8
 8002124:	af02      	add	r7, sp, #8

	HAL_I2C_Master_Transmit(&hi2c1, NUNCHUK_ADDRESS, initcomm1, 2, HAL_MAX_DELAY);
 8002126:	f04f 33ff 	mov.w	r3, #4294967295
 800212a:	9300      	str	r3, [sp, #0]
 800212c:	2302      	movs	r3, #2
 800212e:	4a0a      	ldr	r2, [pc, #40]	@ (8002158 <Initialisation_manette+0x38>)
 8002130:	21a4      	movs	r1, #164	@ 0xa4
 8002132:	480a      	ldr	r0, [pc, #40]	@ (800215c <Initialisation_manette+0x3c>)
 8002134:	f002 fa38 	bl	80045a8 <HAL_I2C_Master_Transmit>
	HAL_Delay(10);
 8002138:	200a      	movs	r0, #10
 800213a:	f001 fddd 	bl	8003cf8 <HAL_Delay>
	HAL_I2C_Master_Transmit(&hi2c1, NUNCHUK_ADDRESS, initcomm2, 2, HAL_MAX_DELAY);
 800213e:	f04f 33ff 	mov.w	r3, #4294967295
 8002142:	9300      	str	r3, [sp, #0]
 8002144:	2302      	movs	r3, #2
 8002146:	4a06      	ldr	r2, [pc, #24]	@ (8002160 <Initialisation_manette+0x40>)
 8002148:	21a4      	movs	r1, #164	@ 0xa4
 800214a:	4804      	ldr	r0, [pc, #16]	@ (800215c <Initialisation_manette+0x3c>)
 800214c:	f002 fa2c 	bl	80045a8 <HAL_I2C_Master_Transmit>

}
 8002150:	bf00      	nop
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}
 8002156:	bf00      	nop
 8002158:	20000004 	.word	0x20000004
 800215c:	20000264 	.word	0x20000264
 8002160:	20000008 	.word	0x20000008
 8002164:	00000000 	.word	0x00000000

08002168 <Controller>:


void Controller(){
 8002168:	b5b0      	push	{r4, r5, r7, lr}
 800216a:	b082      	sub	sp, #8
 800216c:	af02      	add	r7, sp, #8

	HAL_I2C_Master_Transmit(&hi2c1, NUNCHUK_ADDRESS, 0x00, 1, HAL_MAX_DELAY);
 800216e:	f04f 33ff 	mov.w	r3, #4294967295
 8002172:	9300      	str	r3, [sp, #0]
 8002174:	2301      	movs	r3, #1
 8002176:	2200      	movs	r2, #0
 8002178:	21a4      	movs	r1, #164	@ 0xa4
 800217a:	48b5      	ldr	r0, [pc, #724]	@ (8002450 <Controller+0x2e8>)
 800217c:	f002 fa14 	bl	80045a8 <HAL_I2C_Master_Transmit>
	HAL_Delay(10);
 8002180:	200a      	movs	r0, #10
 8002182:	f001 fdb9 	bl	8003cf8 <HAL_Delay>
	HAL_I2C_Master_Receive(&hi2c1, NUNCHUK_ADDRESS, data, 6, HAL_MAX_DELAY);
 8002186:	f04f 33ff 	mov.w	r3, #4294967295
 800218a:	9300      	str	r3, [sp, #0]
 800218c:	2306      	movs	r3, #6
 800218e:	4ab1      	ldr	r2, [pc, #708]	@ (8002454 <Controller+0x2ec>)
 8002190:	21a4      	movs	r1, #164	@ 0xa4
 8002192:	48af      	ldr	r0, [pc, #700]	@ (8002450 <Controller+0x2e8>)
 8002194:	f002 fb06 	bl	80047a4 <HAL_I2C_Master_Receive>
	Format_Data();
 8002198:	f7ff ff6e 	bl	8002078 <Format_Data>



	if(Cbutton == 0){
 800219c:	4bae      	ldr	r3, [pc, #696]	@ (8002458 <Controller+0x2f0>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d104      	bne.n	80021ae <Controller+0x46>
		HAL_Delay(10);
 80021a4:	200a      	movs	r0, #10
 80021a6:	f001 fda7 	bl	8003cf8 <HAL_Delay>
		ToggleModeMan();
 80021aa:	f000 f983 	bl	80024b4 <ToggleModeMan>
	}
	if(Zbutton == 0){
 80021ae:	4bab      	ldr	r3, [pc, #684]	@ (800245c <Controller+0x2f4>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d104      	bne.n	80021c0 <Controller+0x58>
		HAL_Delay(10);
 80021b6:	200a      	movs	r0, #10
 80021b8:	f001 fd9e 	bl	8003cf8 <HAL_Delay>
		ToggleModeVit();
 80021bc:	f000 f964 	bl	8002488 <ToggleModeVit>
	}


	if(ToggleC == 1){
 80021c0:	4ba7      	ldr	r3, [pc, #668]	@ (8002460 <Controller+0x2f8>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	2b01      	cmp	r3, #1
 80021c6:	f040 8132 	bne.w	800242e <Controller+0x2c6>


		if(Xdata == 128 && Ydata == 128){
 80021ca:	4ba6      	ldr	r3, [pc, #664]	@ (8002464 <Controller+0x2fc>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	2b80      	cmp	r3, #128	@ 0x80
 80021d0:	d107      	bne.n	80021e2 <Controller+0x7a>
 80021d2:	4ba5      	ldr	r3, [pc, #660]	@ (8002468 <Controller+0x300>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	2b80      	cmp	r3, #128	@ 0x80
 80021d8:	d103      	bne.n	80021e2 <Controller+0x7a>
				Stop(&htim3);
 80021da:	48a4      	ldr	r0, [pc, #656]	@ (800246c <Controller+0x304>)
 80021dc:	f7ff fbd4 	bl	8001988 <Stop>
	}
	else{
		Stop(&htim3);
	}

}
 80021e0:	e128      	b.n	8002434 <Controller+0x2cc>
		if(modeVitesse==1){
 80021e2:	4ba3      	ldr	r3, [pc, #652]	@ (8002470 <Controller+0x308>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	2b01      	cmp	r3, #1
 80021e8:	d159      	bne.n	800229e <Controller+0x136>
			Xpulse = Xdata * 0.33 * pulseCoeff;
 80021ea:	4b9e      	ldr	r3, [pc, #632]	@ (8002464 <Controller+0x2fc>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4618      	mov	r0, r3
 80021f0:	f7fe f9b8 	bl	8000564 <__aeabi_i2d>
 80021f4:	a392      	add	r3, pc, #584	@ (adr r3, 8002440 <Controller+0x2d8>)
 80021f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021fa:	f7fe fa1d 	bl	8000638 <__aeabi_dmul>
 80021fe:	4602      	mov	r2, r0
 8002200:	460b      	mov	r3, r1
 8002202:	4614      	mov	r4, r2
 8002204:	461d      	mov	r5, r3
 8002206:	4b9b      	ldr	r3, [pc, #620]	@ (8002474 <Controller+0x30c>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4618      	mov	r0, r3
 800220c:	f7fe f9bc 	bl	8000588 <__aeabi_f2d>
 8002210:	4602      	mov	r2, r0
 8002212:	460b      	mov	r3, r1
 8002214:	4620      	mov	r0, r4
 8002216:	4629      	mov	r1, r5
 8002218:	f7fe fa0e 	bl	8000638 <__aeabi_dmul>
 800221c:	4602      	mov	r2, r0
 800221e:	460b      	mov	r3, r1
 8002220:	4610      	mov	r0, r2
 8002222:	4619      	mov	r1, r3
 8002224:	f7fe fcb8 	bl	8000b98 <__aeabi_d2iz>
 8002228:	4603      	mov	r3, r0
 800222a:	4a93      	ldr	r2, [pc, #588]	@ (8002478 <Controller+0x310>)
 800222c:	6013      	str	r3, [r2, #0]
			Ypulse = Ydata * 0.33 * pulseCoeff;
 800222e:	4b8e      	ldr	r3, [pc, #568]	@ (8002468 <Controller+0x300>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4618      	mov	r0, r3
 8002234:	f7fe f996 	bl	8000564 <__aeabi_i2d>
 8002238:	a381      	add	r3, pc, #516	@ (adr r3, 8002440 <Controller+0x2d8>)
 800223a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800223e:	f7fe f9fb 	bl	8000638 <__aeabi_dmul>
 8002242:	4602      	mov	r2, r0
 8002244:	460b      	mov	r3, r1
 8002246:	4614      	mov	r4, r2
 8002248:	461d      	mov	r5, r3
 800224a:	4b8a      	ldr	r3, [pc, #552]	@ (8002474 <Controller+0x30c>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4618      	mov	r0, r3
 8002250:	f7fe f99a 	bl	8000588 <__aeabi_f2d>
 8002254:	4602      	mov	r2, r0
 8002256:	460b      	mov	r3, r1
 8002258:	4620      	mov	r0, r4
 800225a:	4629      	mov	r1, r5
 800225c:	f7fe f9ec 	bl	8000638 <__aeabi_dmul>
 8002260:	4602      	mov	r2, r0
 8002262:	460b      	mov	r3, r1
 8002264:	4610      	mov	r0, r2
 8002266:	4619      	mov	r1, r3
 8002268:	f7fe fc96 	bl	8000b98 <__aeabi_d2iz>
 800226c:	4603      	mov	r3, r0
 800226e:	4a83      	ldr	r2, [pc, #524]	@ (800247c <Controller+0x314>)
 8002270:	6013      	str	r3, [r2, #0]
			maxInverse = maxInverse * 0.33;
 8002272:	4b83      	ldr	r3, [pc, #524]	@ (8002480 <Controller+0x318>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4618      	mov	r0, r3
 8002278:	f7fe f974 	bl	8000564 <__aeabi_i2d>
 800227c:	a370      	add	r3, pc, #448	@ (adr r3, 8002440 <Controller+0x2d8>)
 800227e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002282:	f7fe f9d9 	bl	8000638 <__aeabi_dmul>
 8002286:	4602      	mov	r2, r0
 8002288:	460b      	mov	r3, r1
 800228a:	4610      	mov	r0, r2
 800228c:	4619      	mov	r1, r3
 800228e:	f7fe fc83 	bl	8000b98 <__aeabi_d2iz>
 8002292:	4603      	mov	r3, r0
 8002294:	4a7a      	ldr	r2, [pc, #488]	@ (8002480 <Controller+0x318>)
 8002296:	6013      	str	r3, [r2, #0]
			LCD_Manuel(1);
 8002298:	2001      	movs	r0, #1
 800229a:	f001 fae7 	bl	800386c <LCD_Manuel>
		if(modeVitesse==2){
 800229e:	4b74      	ldr	r3, [pc, #464]	@ (8002470 <Controller+0x308>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	2b02      	cmp	r3, #2
 80022a4:	d159      	bne.n	800235a <Controller+0x1f2>
			Xpulse = Xdata * 0.66 * pulseCoeff;
 80022a6:	4b6f      	ldr	r3, [pc, #444]	@ (8002464 <Controller+0x2fc>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4618      	mov	r0, r3
 80022ac:	f7fe f95a 	bl	8000564 <__aeabi_i2d>
 80022b0:	a365      	add	r3, pc, #404	@ (adr r3, 8002448 <Controller+0x2e0>)
 80022b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022b6:	f7fe f9bf 	bl	8000638 <__aeabi_dmul>
 80022ba:	4602      	mov	r2, r0
 80022bc:	460b      	mov	r3, r1
 80022be:	4614      	mov	r4, r2
 80022c0:	461d      	mov	r5, r3
 80022c2:	4b6c      	ldr	r3, [pc, #432]	@ (8002474 <Controller+0x30c>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4618      	mov	r0, r3
 80022c8:	f7fe f95e 	bl	8000588 <__aeabi_f2d>
 80022cc:	4602      	mov	r2, r0
 80022ce:	460b      	mov	r3, r1
 80022d0:	4620      	mov	r0, r4
 80022d2:	4629      	mov	r1, r5
 80022d4:	f7fe f9b0 	bl	8000638 <__aeabi_dmul>
 80022d8:	4602      	mov	r2, r0
 80022da:	460b      	mov	r3, r1
 80022dc:	4610      	mov	r0, r2
 80022de:	4619      	mov	r1, r3
 80022e0:	f7fe fc5a 	bl	8000b98 <__aeabi_d2iz>
 80022e4:	4603      	mov	r3, r0
 80022e6:	4a64      	ldr	r2, [pc, #400]	@ (8002478 <Controller+0x310>)
 80022e8:	6013      	str	r3, [r2, #0]
			Ypulse = Ydata * 0.66 * pulseCoeff;
 80022ea:	4b5f      	ldr	r3, [pc, #380]	@ (8002468 <Controller+0x300>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4618      	mov	r0, r3
 80022f0:	f7fe f938 	bl	8000564 <__aeabi_i2d>
 80022f4:	a354      	add	r3, pc, #336	@ (adr r3, 8002448 <Controller+0x2e0>)
 80022f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022fa:	f7fe f99d 	bl	8000638 <__aeabi_dmul>
 80022fe:	4602      	mov	r2, r0
 8002300:	460b      	mov	r3, r1
 8002302:	4614      	mov	r4, r2
 8002304:	461d      	mov	r5, r3
 8002306:	4b5b      	ldr	r3, [pc, #364]	@ (8002474 <Controller+0x30c>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4618      	mov	r0, r3
 800230c:	f7fe f93c 	bl	8000588 <__aeabi_f2d>
 8002310:	4602      	mov	r2, r0
 8002312:	460b      	mov	r3, r1
 8002314:	4620      	mov	r0, r4
 8002316:	4629      	mov	r1, r5
 8002318:	f7fe f98e 	bl	8000638 <__aeabi_dmul>
 800231c:	4602      	mov	r2, r0
 800231e:	460b      	mov	r3, r1
 8002320:	4610      	mov	r0, r2
 8002322:	4619      	mov	r1, r3
 8002324:	f7fe fc38 	bl	8000b98 <__aeabi_d2iz>
 8002328:	4603      	mov	r3, r0
 800232a:	4a54      	ldr	r2, [pc, #336]	@ (800247c <Controller+0x314>)
 800232c:	6013      	str	r3, [r2, #0]
			maxInverse = maxInverse * 0.66;
 800232e:	4b54      	ldr	r3, [pc, #336]	@ (8002480 <Controller+0x318>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4618      	mov	r0, r3
 8002334:	f7fe f916 	bl	8000564 <__aeabi_i2d>
 8002338:	a343      	add	r3, pc, #268	@ (adr r3, 8002448 <Controller+0x2e0>)
 800233a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800233e:	f7fe f97b 	bl	8000638 <__aeabi_dmul>
 8002342:	4602      	mov	r2, r0
 8002344:	460b      	mov	r3, r1
 8002346:	4610      	mov	r0, r2
 8002348:	4619      	mov	r1, r3
 800234a:	f7fe fc25 	bl	8000b98 <__aeabi_d2iz>
 800234e:	4603      	mov	r3, r0
 8002350:	4a4b      	ldr	r2, [pc, #300]	@ (8002480 <Controller+0x318>)
 8002352:	6013      	str	r3, [r2, #0]
			LCD_Manuel(2);
 8002354:	2002      	movs	r0, #2
 8002356:	f001 fa89 	bl	800386c <LCD_Manuel>
		if(modeVitesse==3){
 800235a:	4b45      	ldr	r3, [pc, #276]	@ (8002470 <Controller+0x308>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	2b03      	cmp	r3, #3
 8002360:	d124      	bne.n	80023ac <Controller+0x244>
			Xpulse = Xdata * pulseCoeff;
 8002362:	4b40      	ldr	r3, [pc, #256]	@ (8002464 <Controller+0x2fc>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	ee07 3a90 	vmov	s15, r3
 800236a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800236e:	4b41      	ldr	r3, [pc, #260]	@ (8002474 <Controller+0x30c>)
 8002370:	edd3 7a00 	vldr	s15, [r3]
 8002374:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002378:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800237c:	ee17 2a90 	vmov	r2, s15
 8002380:	4b3d      	ldr	r3, [pc, #244]	@ (8002478 <Controller+0x310>)
 8002382:	601a      	str	r2, [r3, #0]
			Ypulse = Ydata * pulseCoeff;
 8002384:	4b38      	ldr	r3, [pc, #224]	@ (8002468 <Controller+0x300>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	ee07 3a90 	vmov	s15, r3
 800238c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002390:	4b38      	ldr	r3, [pc, #224]	@ (8002474 <Controller+0x30c>)
 8002392:	edd3 7a00 	vldr	s15, [r3]
 8002396:	ee67 7a27 	vmul.f32	s15, s14, s15
 800239a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800239e:	ee17 2a90 	vmov	r2, s15
 80023a2:	4b36      	ldr	r3, [pc, #216]	@ (800247c <Controller+0x314>)
 80023a4:	601a      	str	r2, [r3, #0]
			LCD_Manuel(3);
 80023a6:	2003      	movs	r0, #3
 80023a8:	f001 fa60 	bl	800386c <LCD_Manuel>
		if(Xdata>128){
 80023ac:	4b2d      	ldr	r3, [pc, #180]	@ (8002464 <Controller+0x2fc>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	2b80      	cmp	r3, #128	@ 0x80
 80023b2:	dd0a      	ble.n	80023ca <Controller+0x262>
			sendPulseMotor = Xpulse;
 80023b4:	4b30      	ldr	r3, [pc, #192]	@ (8002478 <Controller+0x310>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4a32      	ldr	r2, [pc, #200]	@ (8002484 <Controller+0x31c>)
 80023ba:	6013      	str	r3, [r2, #0]
			Droite(sendPulseMotor,&htim3);
 80023bc:	4b31      	ldr	r3, [pc, #196]	@ (8002484 <Controller+0x31c>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	492a      	ldr	r1, [pc, #168]	@ (800246c <Controller+0x304>)
 80023c2:	4618      	mov	r0, r3
 80023c4:	f7ff fa08 	bl	80017d8 <Droite>
 80023c8:	e010      	b.n	80023ec <Controller+0x284>
		else if(Xdata<128) {
 80023ca:	4b26      	ldr	r3, [pc, #152]	@ (8002464 <Controller+0x2fc>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	2b7f      	cmp	r3, #127	@ 0x7f
 80023d0:	dc0c      	bgt.n	80023ec <Controller+0x284>
				sendPulseMotor = maxInverse - Xpulse;
 80023d2:	4b2b      	ldr	r3, [pc, #172]	@ (8002480 <Controller+0x318>)
 80023d4:	681a      	ldr	r2, [r3, #0]
 80023d6:	4b28      	ldr	r3, [pc, #160]	@ (8002478 <Controller+0x310>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	1ad3      	subs	r3, r2, r3
 80023dc:	4a29      	ldr	r2, [pc, #164]	@ (8002484 <Controller+0x31c>)
 80023de:	6013      	str	r3, [r2, #0]
				Gauche(sendPulseMotor,&htim3);
 80023e0:	4b28      	ldr	r3, [pc, #160]	@ (8002484 <Controller+0x31c>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4921      	ldr	r1, [pc, #132]	@ (800246c <Controller+0x304>)
 80023e6:	4618      	mov	r0, r3
 80023e8:	f7ff fa3e 	bl	8001868 <Gauche>
		if(Ydata>128){
 80023ec:	4b1e      	ldr	r3, [pc, #120]	@ (8002468 <Controller+0x300>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	2b80      	cmp	r3, #128	@ 0x80
 80023f2:	dd0a      	ble.n	800240a <Controller+0x2a2>
			sendPulseMotor = Ypulse;
 80023f4:	4b21      	ldr	r3, [pc, #132]	@ (800247c <Controller+0x314>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a22      	ldr	r2, [pc, #136]	@ (8002484 <Controller+0x31c>)
 80023fa:	6013      	str	r3, [r2, #0]
			Avancer(sendPulseMotor,&htim3);
 80023fc:	4b21      	ldr	r3, [pc, #132]	@ (8002484 <Controller+0x31c>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	491a      	ldr	r1, [pc, #104]	@ (800246c <Controller+0x304>)
 8002402:	4618      	mov	r0, r3
 8002404:	f7ff f9a0 	bl	8001748 <Avancer>
}
 8002408:	e014      	b.n	8002434 <Controller+0x2cc>
		else if(Ydata<128){
 800240a:	4b17      	ldr	r3, [pc, #92]	@ (8002468 <Controller+0x300>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	2b7f      	cmp	r3, #127	@ 0x7f
 8002410:	dc10      	bgt.n	8002434 <Controller+0x2cc>
				sendPulseMotor = maxInverse - Ypulse;
 8002412:	4b1b      	ldr	r3, [pc, #108]	@ (8002480 <Controller+0x318>)
 8002414:	681a      	ldr	r2, [r3, #0]
 8002416:	4b19      	ldr	r3, [pc, #100]	@ (800247c <Controller+0x314>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	1ad3      	subs	r3, r2, r3
 800241c:	4a19      	ldr	r2, [pc, #100]	@ (8002484 <Controller+0x31c>)
 800241e:	6013      	str	r3, [r2, #0]
				Reculer(sendPulseMotor,&htim3);
 8002420:	4b18      	ldr	r3, [pc, #96]	@ (8002484 <Controller+0x31c>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4911      	ldr	r1, [pc, #68]	@ (800246c <Controller+0x304>)
 8002426:	4618      	mov	r0, r3
 8002428:	f7ff fa66 	bl	80018f8 <Reculer>
}
 800242c:	e002      	b.n	8002434 <Controller+0x2cc>
		Stop(&htim3);
 800242e:	480f      	ldr	r0, [pc, #60]	@ (800246c <Controller+0x304>)
 8002430:	f7ff faaa 	bl	8001988 <Stop>
}
 8002434:	bf00      	nop
 8002436:	46bd      	mov	sp, r7
 8002438:	bdb0      	pop	{r4, r5, r7, pc}
 800243a:	bf00      	nop
 800243c:	f3af 8000 	nop.w
 8002440:	51eb851f 	.word	0x51eb851f
 8002444:	3fd51eb8 	.word	0x3fd51eb8
 8002448:	51eb851f 	.word	0x51eb851f
 800244c:	3fe51eb8 	.word	0x3fe51eb8
 8002450:	20000264 	.word	0x20000264
 8002454:	200002d8 	.word	0x200002d8
 8002458:	2000030c 	.word	0x2000030c
 800245c:	20000310 	.word	0x20000310
 8002460:	2000000c 	.word	0x2000000c
 8002464:	200002fc 	.word	0x200002fc
 8002468:	20000300 	.word	0x20000300
 800246c:	20000394 	.word	0x20000394
 8002470:	20000010 	.word	0x20000010
 8002474:	20000014 	.word	0x20000014
 8002478:	20000304 	.word	0x20000304
 800247c:	20000308 	.word	0x20000308
 8002480:	20000018 	.word	0x20000018
 8002484:	20000314 	.word	0x20000314

08002488 <ToggleModeVit>:


void ToggleModeVit() {
 8002488:	b480      	push	{r7}
 800248a:	af00      	add	r7, sp, #0
	if(modeVitesse == 3) {
 800248c:	4b08      	ldr	r3, [pc, #32]	@ (80024b0 <ToggleModeVit+0x28>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	2b03      	cmp	r3, #3
 8002492:	d103      	bne.n	800249c <ToggleModeVit+0x14>
		modeVitesse = 1;
 8002494:	4b06      	ldr	r3, [pc, #24]	@ (80024b0 <ToggleModeVit+0x28>)
 8002496:	2201      	movs	r2, #1
 8002498:	601a      	str	r2, [r3, #0]
	}
	else {
		modeVitesse++;
	}
}
 800249a:	e004      	b.n	80024a6 <ToggleModeVit+0x1e>
		modeVitesse++;
 800249c:	4b04      	ldr	r3, [pc, #16]	@ (80024b0 <ToggleModeVit+0x28>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	3301      	adds	r3, #1
 80024a2:	4a03      	ldr	r2, [pc, #12]	@ (80024b0 <ToggleModeVit+0x28>)
 80024a4:	6013      	str	r3, [r2, #0]
}
 80024a6:	bf00      	nop
 80024a8:	46bd      	mov	sp, r7
 80024aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ae:	4770      	bx	lr
 80024b0:	20000010 	.word	0x20000010

080024b4 <ToggleModeMan>:

void ToggleModeMan() {
 80024b4:	b480      	push	{r7}
 80024b6:	af00      	add	r7, sp, #0

	if(ToggleC == 1){
 80024b8:	4b09      	ldr	r3, [pc, #36]	@ (80024e0 <ToggleModeMan+0x2c>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	2b01      	cmp	r3, #1
 80024be:	d103      	bne.n	80024c8 <ToggleModeMan+0x14>
		ToggleC = 0;
 80024c0:	4b07      	ldr	r3, [pc, #28]	@ (80024e0 <ToggleModeMan+0x2c>)
 80024c2:	2200      	movs	r2, #0
 80024c4:	601a      	str	r2, [r3, #0]
	}
	else if(ToggleC == 0){
		ToggleC = 1;
	}

}
 80024c6:	e006      	b.n	80024d6 <ToggleModeMan+0x22>
	else if(ToggleC == 0){
 80024c8:	4b05      	ldr	r3, [pc, #20]	@ (80024e0 <ToggleModeMan+0x2c>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d102      	bne.n	80024d6 <ToggleModeMan+0x22>
		ToggleC = 1;
 80024d0:	4b03      	ldr	r3, [pc, #12]	@ (80024e0 <ToggleModeMan+0x2c>)
 80024d2:	2201      	movs	r2, #1
 80024d4:	601a      	str	r2, [r3, #0]
}
 80024d6:	bf00      	nop
 80024d8:	46bd      	mov	sp, r7
 80024da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024de:	4770      	bx	lr
 80024e0:	2000000c 	.word	0x2000000c

080024e4 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b086      	sub	sp, #24
 80024e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80024ea:	1d3b      	adds	r3, r7, #4
 80024ec:	2200      	movs	r2, #0
 80024ee:	601a      	str	r2, [r3, #0]
 80024f0:	605a      	str	r2, [r3, #4]
 80024f2:	609a      	str	r2, [r3, #8]
 80024f4:	60da      	str	r2, [r3, #12]
 80024f6:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80024f8:	2300      	movs	r3, #0
 80024fa:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80024fc:	4b24      	ldr	r3, [pc, #144]	@ (8002590 <MX_RTC_Init+0xac>)
 80024fe:	4a25      	ldr	r2, [pc, #148]	@ (8002594 <MX_RTC_Init+0xb0>)
 8002500:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002502:	4b23      	ldr	r3, [pc, #140]	@ (8002590 <MX_RTC_Init+0xac>)
 8002504:	2200      	movs	r2, #0
 8002506:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 128-1;
 8002508:	4b21      	ldr	r3, [pc, #132]	@ (8002590 <MX_RTC_Init+0xac>)
 800250a:	227f      	movs	r2, #127	@ 0x7f
 800250c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 256-1;
 800250e:	4b20      	ldr	r3, [pc, #128]	@ (8002590 <MX_RTC_Init+0xac>)
 8002510:	22ff      	movs	r2, #255	@ 0xff
 8002512:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002514:	4b1e      	ldr	r3, [pc, #120]	@ (8002590 <MX_RTC_Init+0xac>)
 8002516:	2200      	movs	r2, #0
 8002518:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800251a:	4b1d      	ldr	r3, [pc, #116]	@ (8002590 <MX_RTC_Init+0xac>)
 800251c:	2200      	movs	r2, #0
 800251e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002520:	4b1b      	ldr	r3, [pc, #108]	@ (8002590 <MX_RTC_Init+0xac>)
 8002522:	2200      	movs	r2, #0
 8002524:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002526:	481a      	ldr	r0, [pc, #104]	@ (8002590 <MX_RTC_Init+0xac>)
 8002528:	f004 f806 	bl	8006538 <HAL_RTC_Init>
 800252c:	4603      	mov	r3, r0
 800252e:	2b00      	cmp	r3, #0
 8002530:	d001      	beq.n	8002536 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8002532:	f7ff fd9b 	bl	800206c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x17;
 8002536:	2317      	movs	r3, #23
 8002538:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 800253a:	2300      	movs	r3, #0
 800253c:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 800253e:	2300      	movs	r3, #0
 8002540:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002542:	2300      	movs	r3, #0
 8002544:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002546:	2300      	movs	r3, #0
 8002548:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800254a:	1d3b      	adds	r3, r7, #4
 800254c:	2201      	movs	r2, #1
 800254e:	4619      	mov	r1, r3
 8002550:	480f      	ldr	r0, [pc, #60]	@ (8002590 <MX_RTC_Init+0xac>)
 8002552:	f004 f874 	bl	800663e <HAL_RTC_SetTime>
 8002556:	4603      	mov	r3, r0
 8002558:	2b00      	cmp	r3, #0
 800255a:	d001      	beq.n	8002560 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 800255c:	f7ff fd86 	bl	800206c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_WEDNESDAY;
 8002560:	2303      	movs	r3, #3
 8002562:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_DECEMBER;
 8002564:	2312      	movs	r3, #18
 8002566:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x4;
 8002568:	2304      	movs	r3, #4
 800256a:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x24;
 800256c:	2324      	movs	r3, #36	@ 0x24
 800256e:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8002570:	463b      	mov	r3, r7
 8002572:	2201      	movs	r2, #1
 8002574:	4619      	mov	r1, r3
 8002576:	4806      	ldr	r0, [pc, #24]	@ (8002590 <MX_RTC_Init+0xac>)
 8002578:	f004 f959 	bl	800682e <HAL_RTC_SetDate>
 800257c:	4603      	mov	r3, r0
 800257e:	2b00      	cmp	r3, #0
 8002580:	d001      	beq.n	8002586 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8002582:	f7ff fd73 	bl	800206c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002586:	bf00      	nop
 8002588:	3718      	adds	r7, #24
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}
 800258e:	bf00      	nop
 8002590:	20000318 	.word	0x20000318
 8002594:	40002800 	.word	0x40002800

08002598 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b09a      	sub	sp, #104	@ 0x68
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80025a0:	f107 030c 	add.w	r3, r7, #12
 80025a4:	225c      	movs	r2, #92	@ 0x5c
 80025a6:	2100      	movs	r1, #0
 80025a8:	4618      	mov	r0, r3
 80025aa:	f007 ff37 	bl	800a41c <memset>
  if(rtcHandle->Instance==RTC)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4a0c      	ldr	r2, [pc, #48]	@ (80025e4 <HAL_RTC_MspInit+0x4c>)
 80025b4:	4293      	cmp	r3, r2
 80025b6:	d111      	bne.n	80025dc <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80025b8:	2320      	movs	r3, #32
 80025ba:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80025bc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80025c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80025c2:	f107 030c 	add.w	r3, r7, #12
 80025c6:	4618      	mov	r0, r3
 80025c8:	f002 ffbe 	bl	8005548 <HAL_RCCEx_PeriphCLKConfig>
 80025cc:	4603      	mov	r3, r0
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d001      	beq.n	80025d6 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 80025d2:	f7ff fd4b 	bl	800206c <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80025d6:	4b04      	ldr	r3, [pc, #16]	@ (80025e8 <HAL_RTC_MspInit+0x50>)
 80025d8:	2201      	movs	r2, #1
 80025da:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80025dc:	bf00      	nop
 80025de:	3768      	adds	r7, #104	@ 0x68
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bd80      	pop	{r7, pc}
 80025e4:	40002800 	.word	0x40002800
 80025e8:	42470e3c 	.word	0x42470e3c

080025ec <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80025f0:	4b18      	ldr	r3, [pc, #96]	@ (8002654 <MX_SPI2_Init+0x68>)
 80025f2:	4a19      	ldr	r2, [pc, #100]	@ (8002658 <MX_SPI2_Init+0x6c>)
 80025f4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80025f6:	4b17      	ldr	r3, [pc, #92]	@ (8002654 <MX_SPI2_Init+0x68>)
 80025f8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80025fc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_1LINE;
 80025fe:	4b15      	ldr	r3, [pc, #84]	@ (8002654 <MX_SPI2_Init+0x68>)
 8002600:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002604:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002606:	4b13      	ldr	r3, [pc, #76]	@ (8002654 <MX_SPI2_Init+0x68>)
 8002608:	2200      	movs	r2, #0
 800260a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800260c:	4b11      	ldr	r3, [pc, #68]	@ (8002654 <MX_SPI2_Init+0x68>)
 800260e:	2200      	movs	r2, #0
 8002610:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002612:	4b10      	ldr	r3, [pc, #64]	@ (8002654 <MX_SPI2_Init+0x68>)
 8002614:	2200      	movs	r2, #0
 8002616:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002618:	4b0e      	ldr	r3, [pc, #56]	@ (8002654 <MX_SPI2_Init+0x68>)
 800261a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800261e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8002620:	4b0c      	ldr	r3, [pc, #48]	@ (8002654 <MX_SPI2_Init+0x68>)
 8002622:	2208      	movs	r2, #8
 8002624:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002626:	4b0b      	ldr	r3, [pc, #44]	@ (8002654 <MX_SPI2_Init+0x68>)
 8002628:	2200      	movs	r2, #0
 800262a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800262c:	4b09      	ldr	r3, [pc, #36]	@ (8002654 <MX_SPI2_Init+0x68>)
 800262e:	2200      	movs	r2, #0
 8002630:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002632:	4b08      	ldr	r3, [pc, #32]	@ (8002654 <MX_SPI2_Init+0x68>)
 8002634:	2200      	movs	r2, #0
 8002636:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8002638:	4b06      	ldr	r3, [pc, #24]	@ (8002654 <MX_SPI2_Init+0x68>)
 800263a:	220a      	movs	r2, #10
 800263c:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800263e:	4805      	ldr	r0, [pc, #20]	@ (8002654 <MX_SPI2_Init+0x68>)
 8002640:	f004 fa86 	bl	8006b50 <HAL_SPI_Init>
 8002644:	4603      	mov	r3, r0
 8002646:	2b00      	cmp	r3, #0
 8002648:	d001      	beq.n	800264e <MX_SPI2_Init+0x62>
  {
    Error_Handler();
 800264a:	f7ff fd0f 	bl	800206c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800264e:	bf00      	nop
 8002650:	bd80      	pop	{r7, pc}
 8002652:	bf00      	nop
 8002654:	20000338 	.word	0x20000338
 8002658:	40003800 	.word	0x40003800

0800265c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b08a      	sub	sp, #40	@ 0x28
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002664:	f107 0314 	add.w	r3, r7, #20
 8002668:	2200      	movs	r2, #0
 800266a:	601a      	str	r2, [r3, #0]
 800266c:	605a      	str	r2, [r3, #4]
 800266e:	609a      	str	r2, [r3, #8]
 8002670:	60da      	str	r2, [r3, #12]
 8002672:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4a28      	ldr	r2, [pc, #160]	@ (800271c <HAL_SPI_MspInit+0xc0>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d14a      	bne.n	8002714 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800267e:	2300      	movs	r3, #0
 8002680:	613b      	str	r3, [r7, #16]
 8002682:	4b27      	ldr	r3, [pc, #156]	@ (8002720 <HAL_SPI_MspInit+0xc4>)
 8002684:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002686:	4a26      	ldr	r2, [pc, #152]	@ (8002720 <HAL_SPI_MspInit+0xc4>)
 8002688:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800268c:	6413      	str	r3, [r2, #64]	@ 0x40
 800268e:	4b24      	ldr	r3, [pc, #144]	@ (8002720 <HAL_SPI_MspInit+0xc4>)
 8002690:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002692:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002696:	613b      	str	r3, [r7, #16]
 8002698:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800269a:	2300      	movs	r3, #0
 800269c:	60fb      	str	r3, [r7, #12]
 800269e:	4b20      	ldr	r3, [pc, #128]	@ (8002720 <HAL_SPI_MspInit+0xc4>)
 80026a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026a2:	4a1f      	ldr	r2, [pc, #124]	@ (8002720 <HAL_SPI_MspInit+0xc4>)
 80026a4:	f043 0304 	orr.w	r3, r3, #4
 80026a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80026aa:	4b1d      	ldr	r3, [pc, #116]	@ (8002720 <HAL_SPI_MspInit+0xc4>)
 80026ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026ae:	f003 0304 	and.w	r3, r3, #4
 80026b2:	60fb      	str	r3, [r7, #12]
 80026b4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026b6:	2300      	movs	r3, #0
 80026b8:	60bb      	str	r3, [r7, #8]
 80026ba:	4b19      	ldr	r3, [pc, #100]	@ (8002720 <HAL_SPI_MspInit+0xc4>)
 80026bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026be:	4a18      	ldr	r2, [pc, #96]	@ (8002720 <HAL_SPI_MspInit+0xc4>)
 80026c0:	f043 0302 	orr.w	r3, r3, #2
 80026c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80026c6:	4b16      	ldr	r3, [pc, #88]	@ (8002720 <HAL_SPI_MspInit+0xc4>)
 80026c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026ca:	f003 0302 	and.w	r3, r3, #2
 80026ce:	60bb      	str	r3, [r7, #8]
 80026d0:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC1     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80026d2:	2302      	movs	r3, #2
 80026d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026d6:	2302      	movs	r3, #2
 80026d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026da:	2300      	movs	r3, #0
 80026dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026de:	2303      	movs	r3, #3
 80026e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 80026e2:	2307      	movs	r3, #7
 80026e4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026e6:	f107 0314 	add.w	r3, r7, #20
 80026ea:	4619      	mov	r1, r3
 80026ec:	480d      	ldr	r0, [pc, #52]	@ (8002724 <HAL_SPI_MspInit+0xc8>)
 80026ee:	f001 fc39 	bl	8003f64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80026f2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80026f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026f8:	2302      	movs	r3, #2
 80026fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026fc:	2300      	movs	r3, #0
 80026fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002700:	2303      	movs	r3, #3
 8002702:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002704:	2305      	movs	r3, #5
 8002706:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002708:	f107 0314 	add.w	r3, r7, #20
 800270c:	4619      	mov	r1, r3
 800270e:	4806      	ldr	r0, [pc, #24]	@ (8002728 <HAL_SPI_MspInit+0xcc>)
 8002710:	f001 fc28 	bl	8003f64 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8002714:	bf00      	nop
 8002716:	3728      	adds	r7, #40	@ 0x28
 8002718:	46bd      	mov	sp, r7
 800271a:	bd80      	pop	{r7, pc}
 800271c:	40003800 	.word	0x40003800
 8002720:	40023800 	.word	0x40023800
 8002724:	40020800 	.word	0x40020800
 8002728:	40020400 	.word	0x40020400

0800272c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b082      	sub	sp, #8
 8002730:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002732:	2300      	movs	r3, #0
 8002734:	607b      	str	r3, [r7, #4]
 8002736:	4b10      	ldr	r3, [pc, #64]	@ (8002778 <HAL_MspInit+0x4c>)
 8002738:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800273a:	4a0f      	ldr	r2, [pc, #60]	@ (8002778 <HAL_MspInit+0x4c>)
 800273c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002740:	6453      	str	r3, [r2, #68]	@ 0x44
 8002742:	4b0d      	ldr	r3, [pc, #52]	@ (8002778 <HAL_MspInit+0x4c>)
 8002744:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002746:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800274a:	607b      	str	r3, [r7, #4]
 800274c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800274e:	2300      	movs	r3, #0
 8002750:	603b      	str	r3, [r7, #0]
 8002752:	4b09      	ldr	r3, [pc, #36]	@ (8002778 <HAL_MspInit+0x4c>)
 8002754:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002756:	4a08      	ldr	r2, [pc, #32]	@ (8002778 <HAL_MspInit+0x4c>)
 8002758:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800275c:	6413      	str	r3, [r2, #64]	@ 0x40
 800275e:	4b06      	ldr	r3, [pc, #24]	@ (8002778 <HAL_MspInit+0x4c>)
 8002760:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002762:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002766:	603b      	str	r3, [r7, #0]
 8002768:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800276a:	2007      	movs	r0, #7
 800276c:	f001 fbb8 	bl	8003ee0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002770:	bf00      	nop
 8002772:	3708      	adds	r7, #8
 8002774:	46bd      	mov	sp, r7
 8002776:	bd80      	pop	{r7, pc}
 8002778:	40023800 	.word	0x40023800

0800277c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800277c:	b480      	push	{r7}
 800277e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002780:	bf00      	nop
 8002782:	e7fd      	b.n	8002780 <NMI_Handler+0x4>

08002784 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002784:	b480      	push	{r7}
 8002786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002788:	bf00      	nop
 800278a:	e7fd      	b.n	8002788 <HardFault_Handler+0x4>

0800278c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800278c:	b480      	push	{r7}
 800278e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002790:	bf00      	nop
 8002792:	e7fd      	b.n	8002790 <MemManage_Handler+0x4>

08002794 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002794:	b480      	push	{r7}
 8002796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002798:	bf00      	nop
 800279a:	e7fd      	b.n	8002798 <BusFault_Handler+0x4>

0800279c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800279c:	b480      	push	{r7}
 800279e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80027a0:	bf00      	nop
 80027a2:	e7fd      	b.n	80027a0 <UsageFault_Handler+0x4>

080027a4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80027a4:	b480      	push	{r7}
 80027a6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80027a8:	bf00      	nop
 80027aa:	46bd      	mov	sp, r7
 80027ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b0:	4770      	bx	lr

080027b2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80027b2:	b480      	push	{r7}
 80027b4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80027b6:	bf00      	nop
 80027b8:	46bd      	mov	sp, r7
 80027ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027be:	4770      	bx	lr

080027c0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80027c0:	b480      	push	{r7}
 80027c2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80027c4:	bf00      	nop
 80027c6:	46bd      	mov	sp, r7
 80027c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027cc:	4770      	bx	lr

080027ce <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80027ce:	b580      	push	{r7, lr}
 80027d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80027d2:	f001 fa71 	bl	8003cb8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80027d6:	bf00      	nop
 80027d8:	bd80      	pop	{r7, pc}

080027da <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80027da:	b580      	push	{r7, lr}
 80027dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Encodeur_G_A_Pin);
 80027de:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80027e2:	f001 fd85 	bl	80042f0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Encodeur_D_A_Pin);
 80027e6:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80027ea:	f001 fd81 	bl	80042f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80027ee:	bf00      	nop
 80027f0:	bd80      	pop	{r7, pc}
	...

080027f4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 80027f8:	4802      	ldr	r0, [pc, #8]	@ (8002804 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80027fa:	f004 fed3 	bl	80075a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80027fe:	bf00      	nop
 8002800:	bd80      	pop	{r7, pc}
 8002802:	bf00      	nop
 8002804:	200004b4 	.word	0x200004b4

08002808 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Blue_Button_Pin);
 800280c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8002810:	f001 fd6e 	bl	80042f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002814:	bf00      	nop
 8002816:	bd80      	pop	{r7, pc}

08002818 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800281c:	4802      	ldr	r0, [pc, #8]	@ (8002828 <TIM6_DAC_IRQHandler+0x10>)
 800281e:	f004 fec1 	bl	80075a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002822:	bf00      	nop
 8002824:	bd80      	pop	{r7, pc}
 8002826:	bf00      	nop
 8002828:	20000424 	.word	0x20000424

0800282c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002830:	4802      	ldr	r0, [pc, #8]	@ (800283c <TIM7_IRQHandler+0x10>)
 8002832:	f004 feb7 	bl	80075a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8002836:	bf00      	nop
 8002838:	bd80      	pop	{r7, pc}
 800283a:	bf00      	nop
 800283c:	2000046c 	.word	0x2000046c

08002840 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002840:	b480      	push	{r7}
 8002842:	af00      	add	r7, sp, #0
  return 1;
 8002844:	2301      	movs	r3, #1
}
 8002846:	4618      	mov	r0, r3
 8002848:	46bd      	mov	sp, r7
 800284a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284e:	4770      	bx	lr

08002850 <_kill>:

int _kill(int pid, int sig)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b082      	sub	sp, #8
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
 8002858:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800285a:	f007 fe41 	bl	800a4e0 <__errno>
 800285e:	4603      	mov	r3, r0
 8002860:	2216      	movs	r2, #22
 8002862:	601a      	str	r2, [r3, #0]
  return -1;
 8002864:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002868:	4618      	mov	r0, r3
 800286a:	3708      	adds	r7, #8
 800286c:	46bd      	mov	sp, r7
 800286e:	bd80      	pop	{r7, pc}

08002870 <_exit>:

void _exit (int status)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b082      	sub	sp, #8
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002878:	f04f 31ff 	mov.w	r1, #4294967295
 800287c:	6878      	ldr	r0, [r7, #4]
 800287e:	f7ff ffe7 	bl	8002850 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002882:	bf00      	nop
 8002884:	e7fd      	b.n	8002882 <_exit+0x12>

08002886 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002886:	b580      	push	{r7, lr}
 8002888:	b086      	sub	sp, #24
 800288a:	af00      	add	r7, sp, #0
 800288c:	60f8      	str	r0, [r7, #12]
 800288e:	60b9      	str	r1, [r7, #8]
 8002890:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002892:	2300      	movs	r3, #0
 8002894:	617b      	str	r3, [r7, #20]
 8002896:	e00a      	b.n	80028ae <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002898:	f3af 8000 	nop.w
 800289c:	4601      	mov	r1, r0
 800289e:	68bb      	ldr	r3, [r7, #8]
 80028a0:	1c5a      	adds	r2, r3, #1
 80028a2:	60ba      	str	r2, [r7, #8]
 80028a4:	b2ca      	uxtb	r2, r1
 80028a6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028a8:	697b      	ldr	r3, [r7, #20]
 80028aa:	3301      	adds	r3, #1
 80028ac:	617b      	str	r3, [r7, #20]
 80028ae:	697a      	ldr	r2, [r7, #20]
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	429a      	cmp	r2, r3
 80028b4:	dbf0      	blt.n	8002898 <_read+0x12>
  }

  return len;
 80028b6:	687b      	ldr	r3, [r7, #4]
}
 80028b8:	4618      	mov	r0, r3
 80028ba:	3718      	adds	r7, #24
 80028bc:	46bd      	mov	sp, r7
 80028be:	bd80      	pop	{r7, pc}

080028c0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b086      	sub	sp, #24
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	60f8      	str	r0, [r7, #12]
 80028c8:	60b9      	str	r1, [r7, #8]
 80028ca:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028cc:	2300      	movs	r3, #0
 80028ce:	617b      	str	r3, [r7, #20]
 80028d0:	e009      	b.n	80028e6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80028d2:	68bb      	ldr	r3, [r7, #8]
 80028d4:	1c5a      	adds	r2, r3, #1
 80028d6:	60ba      	str	r2, [r7, #8]
 80028d8:	781b      	ldrb	r3, [r3, #0]
 80028da:	4618      	mov	r0, r3
 80028dc:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028e0:	697b      	ldr	r3, [r7, #20]
 80028e2:	3301      	adds	r3, #1
 80028e4:	617b      	str	r3, [r7, #20]
 80028e6:	697a      	ldr	r2, [r7, #20]
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	429a      	cmp	r2, r3
 80028ec:	dbf1      	blt.n	80028d2 <_write+0x12>
  }
  return len;
 80028ee:	687b      	ldr	r3, [r7, #4]
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	3718      	adds	r7, #24
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}

080028f8 <_close>:

int _close(int file)
{
 80028f8:	b480      	push	{r7}
 80028fa:	b083      	sub	sp, #12
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002900:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002904:	4618      	mov	r0, r3
 8002906:	370c      	adds	r7, #12
 8002908:	46bd      	mov	sp, r7
 800290a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290e:	4770      	bx	lr

08002910 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002910:	b480      	push	{r7}
 8002912:	b083      	sub	sp, #12
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
 8002918:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002920:	605a      	str	r2, [r3, #4]
  return 0;
 8002922:	2300      	movs	r3, #0
}
 8002924:	4618      	mov	r0, r3
 8002926:	370c      	adds	r7, #12
 8002928:	46bd      	mov	sp, r7
 800292a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292e:	4770      	bx	lr

08002930 <_isatty>:

int _isatty(int file)
{
 8002930:	b480      	push	{r7}
 8002932:	b083      	sub	sp, #12
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002938:	2301      	movs	r3, #1
}
 800293a:	4618      	mov	r0, r3
 800293c:	370c      	adds	r7, #12
 800293e:	46bd      	mov	sp, r7
 8002940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002944:	4770      	bx	lr

08002946 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002946:	b480      	push	{r7}
 8002948:	b085      	sub	sp, #20
 800294a:	af00      	add	r7, sp, #0
 800294c:	60f8      	str	r0, [r7, #12]
 800294e:	60b9      	str	r1, [r7, #8]
 8002950:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002952:	2300      	movs	r3, #0
}
 8002954:	4618      	mov	r0, r3
 8002956:	3714      	adds	r7, #20
 8002958:	46bd      	mov	sp, r7
 800295a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295e:	4770      	bx	lr

08002960 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b086      	sub	sp, #24
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002968:	4a14      	ldr	r2, [pc, #80]	@ (80029bc <_sbrk+0x5c>)
 800296a:	4b15      	ldr	r3, [pc, #84]	@ (80029c0 <_sbrk+0x60>)
 800296c:	1ad3      	subs	r3, r2, r3
 800296e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002970:	697b      	ldr	r3, [r7, #20]
 8002972:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002974:	4b13      	ldr	r3, [pc, #76]	@ (80029c4 <_sbrk+0x64>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d102      	bne.n	8002982 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800297c:	4b11      	ldr	r3, [pc, #68]	@ (80029c4 <_sbrk+0x64>)
 800297e:	4a12      	ldr	r2, [pc, #72]	@ (80029c8 <_sbrk+0x68>)
 8002980:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002982:	4b10      	ldr	r3, [pc, #64]	@ (80029c4 <_sbrk+0x64>)
 8002984:	681a      	ldr	r2, [r3, #0]
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	4413      	add	r3, r2
 800298a:	693a      	ldr	r2, [r7, #16]
 800298c:	429a      	cmp	r2, r3
 800298e:	d207      	bcs.n	80029a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002990:	f007 fda6 	bl	800a4e0 <__errno>
 8002994:	4603      	mov	r3, r0
 8002996:	220c      	movs	r2, #12
 8002998:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800299a:	f04f 33ff 	mov.w	r3, #4294967295
 800299e:	e009      	b.n	80029b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80029a0:	4b08      	ldr	r3, [pc, #32]	@ (80029c4 <_sbrk+0x64>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80029a6:	4b07      	ldr	r3, [pc, #28]	@ (80029c4 <_sbrk+0x64>)
 80029a8:	681a      	ldr	r2, [r3, #0]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	4413      	add	r3, r2
 80029ae:	4a05      	ldr	r2, [pc, #20]	@ (80029c4 <_sbrk+0x64>)
 80029b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80029b2:	68fb      	ldr	r3, [r7, #12]
}
 80029b4:	4618      	mov	r0, r3
 80029b6:	3718      	adds	r7, #24
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bd80      	pop	{r7, pc}
 80029bc:	20020000 	.word	0x20020000
 80029c0:	00000400 	.word	0x00000400
 80029c4:	20000390 	.word	0x20000390
 80029c8:	20000718 	.word	0x20000718

080029cc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80029cc:	b480      	push	{r7}
 80029ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80029d0:	4b06      	ldr	r3, [pc, #24]	@ (80029ec <SystemInit+0x20>)
 80029d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029d6:	4a05      	ldr	r2, [pc, #20]	@ (80029ec <SystemInit+0x20>)
 80029d8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80029dc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80029e0:	bf00      	nop
 80029e2:	46bd      	mov	sp, r7
 80029e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e8:	4770      	bx	lr
 80029ea:	bf00      	nop
 80029ec:	e000ed00 	.word	0xe000ed00

080029f0 <MX_TIM3_Init>:
TIM_HandleTypeDef htim7;
TIM_HandleTypeDef htim10;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b08e      	sub	sp, #56	@ 0x38
 80029f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80029f6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80029fa:	2200      	movs	r2, #0
 80029fc:	601a      	str	r2, [r3, #0]
 80029fe:	605a      	str	r2, [r3, #4]
 8002a00:	609a      	str	r2, [r3, #8]
 8002a02:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a04:	f107 0320 	add.w	r3, r7, #32
 8002a08:	2200      	movs	r2, #0
 8002a0a:	601a      	str	r2, [r3, #0]
 8002a0c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002a0e:	1d3b      	adds	r3, r7, #4
 8002a10:	2200      	movs	r2, #0
 8002a12:	601a      	str	r2, [r3, #0]
 8002a14:	605a      	str	r2, [r3, #4]
 8002a16:	609a      	str	r2, [r3, #8]
 8002a18:	60da      	str	r2, [r3, #12]
 8002a1a:	611a      	str	r2, [r3, #16]
 8002a1c:	615a      	str	r2, [r3, #20]
 8002a1e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002a20:	4b3d      	ldr	r3, [pc, #244]	@ (8002b18 <MX_TIM3_Init+0x128>)
 8002a22:	4a3e      	ldr	r2, [pc, #248]	@ (8002b1c <MX_TIM3_Init+0x12c>)
 8002a24:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84-1;
 8002a26:	4b3c      	ldr	r3, [pc, #240]	@ (8002b18 <MX_TIM3_Init+0x128>)
 8002a28:	2253      	movs	r2, #83	@ 0x53
 8002a2a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a2c:	4b3a      	ldr	r3, [pc, #232]	@ (8002b18 <MX_TIM3_Init+0x128>)
 8002a2e:	2200      	movs	r2, #0
 8002a30:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 500-1;
 8002a32:	4b39      	ldr	r3, [pc, #228]	@ (8002b18 <MX_TIM3_Init+0x128>)
 8002a34:	f240 12f3 	movw	r2, #499	@ 0x1f3
 8002a38:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a3a:	4b37      	ldr	r3, [pc, #220]	@ (8002b18 <MX_TIM3_Init+0x128>)
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a40:	4b35      	ldr	r3, [pc, #212]	@ (8002b18 <MX_TIM3_Init+0x128>)
 8002a42:	2200      	movs	r2, #0
 8002a44:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002a46:	4834      	ldr	r0, [pc, #208]	@ (8002b18 <MX_TIM3_Init+0x128>)
 8002a48:	f004 fb2c 	bl	80070a4 <HAL_TIM_Base_Init>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d001      	beq.n	8002a56 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8002a52:	f7ff fb0b 	bl	800206c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002a56:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002a5a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002a5c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002a60:	4619      	mov	r1, r3
 8002a62:	482d      	ldr	r0, [pc, #180]	@ (8002b18 <MX_TIM3_Init+0x128>)
 8002a64:	f004 ff50 	bl	8007908 <HAL_TIM_ConfigClockSource>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d001      	beq.n	8002a72 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8002a6e:	f7ff fafd 	bl	800206c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002a72:	4829      	ldr	r0, [pc, #164]	@ (8002b18 <MX_TIM3_Init+0x128>)
 8002a74:	f004 fc05 	bl	8007282 <HAL_TIM_PWM_Init>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d001      	beq.n	8002a82 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8002a7e:	f7ff faf5 	bl	800206c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a82:	2300      	movs	r3, #0
 8002a84:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a86:	2300      	movs	r3, #0
 8002a88:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002a8a:	f107 0320 	add.w	r3, r7, #32
 8002a8e:	4619      	mov	r1, r3
 8002a90:	4821      	ldr	r0, [pc, #132]	@ (8002b18 <MX_TIM3_Init+0x128>)
 8002a92:	f005 fb45 	bl	8008120 <HAL_TIMEx_MasterConfigSynchronization>
 8002a96:	4603      	mov	r3, r0
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d001      	beq.n	8002aa0 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8002a9c:	f7ff fae6 	bl	800206c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002aa0:	2360      	movs	r3, #96	@ 0x60
 8002aa2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002aac:	2300      	movs	r3, #0
 8002aae:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002ab0:	1d3b      	adds	r3, r7, #4
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	4619      	mov	r1, r3
 8002ab6:	4818      	ldr	r0, [pc, #96]	@ (8002b18 <MX_TIM3_Init+0x128>)
 8002ab8:	f004 fe64 	bl	8007784 <HAL_TIM_PWM_ConfigChannel>
 8002abc:	4603      	mov	r3, r0
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d001      	beq.n	8002ac6 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8002ac2:	f7ff fad3 	bl	800206c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002ac6:	1d3b      	adds	r3, r7, #4
 8002ac8:	2204      	movs	r2, #4
 8002aca:	4619      	mov	r1, r3
 8002acc:	4812      	ldr	r0, [pc, #72]	@ (8002b18 <MX_TIM3_Init+0x128>)
 8002ace:	f004 fe59 	bl	8007784 <HAL_TIM_PWM_ConfigChannel>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d001      	beq.n	8002adc <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8002ad8:	f7ff fac8 	bl	800206c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002adc:	1d3b      	adds	r3, r7, #4
 8002ade:	2208      	movs	r2, #8
 8002ae0:	4619      	mov	r1, r3
 8002ae2:	480d      	ldr	r0, [pc, #52]	@ (8002b18 <MX_TIM3_Init+0x128>)
 8002ae4:	f004 fe4e 	bl	8007784 <HAL_TIM_PWM_ConfigChannel>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d001      	beq.n	8002af2 <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 8002aee:	f7ff fabd 	bl	800206c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002af2:	1d3b      	adds	r3, r7, #4
 8002af4:	220c      	movs	r2, #12
 8002af6:	4619      	mov	r1, r3
 8002af8:	4807      	ldr	r0, [pc, #28]	@ (8002b18 <MX_TIM3_Init+0x128>)
 8002afa:	f004 fe43 	bl	8007784 <HAL_TIM_PWM_ConfigChannel>
 8002afe:	4603      	mov	r3, r0
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d001      	beq.n	8002b08 <MX_TIM3_Init+0x118>
  {
    Error_Handler();
 8002b04:	f7ff fab2 	bl	800206c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002b08:	4803      	ldr	r0, [pc, #12]	@ (8002b18 <MX_TIM3_Init+0x128>)
 8002b0a:	f000 f99f 	bl	8002e4c <HAL_TIM_MspPostInit>

}
 8002b0e:	bf00      	nop
 8002b10:	3738      	adds	r7, #56	@ 0x38
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}
 8002b16:	bf00      	nop
 8002b18:	20000394 	.word	0x20000394
 8002b1c:	40000400 	.word	0x40000400

08002b20 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b08e      	sub	sp, #56	@ 0x38
 8002b24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002b26:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	601a      	str	r2, [r3, #0]
 8002b2e:	605a      	str	r2, [r3, #4]
 8002b30:	609a      	str	r2, [r3, #8]
 8002b32:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b34:	f107 0320 	add.w	r3, r7, #32
 8002b38:	2200      	movs	r2, #0
 8002b3a:	601a      	str	r2, [r3, #0]
 8002b3c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002b3e:	1d3b      	adds	r3, r7, #4
 8002b40:	2200      	movs	r2, #0
 8002b42:	601a      	str	r2, [r3, #0]
 8002b44:	605a      	str	r2, [r3, #4]
 8002b46:	609a      	str	r2, [r3, #8]
 8002b48:	60da      	str	r2, [r3, #12]
 8002b4a:	611a      	str	r2, [r3, #16]
 8002b4c:	615a      	str	r2, [r3, #20]
 8002b4e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002b50:	4b2d      	ldr	r3, [pc, #180]	@ (8002c08 <MX_TIM4_Init+0xe8>)
 8002b52:	4a2e      	ldr	r2, [pc, #184]	@ (8002c0c <MX_TIM4_Init+0xec>)
 8002b54:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 300-1;
 8002b56:	4b2c      	ldr	r3, [pc, #176]	@ (8002c08 <MX_TIM4_Init+0xe8>)
 8002b58:	f240 122b 	movw	r2, #299	@ 0x12b
 8002b5c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b5e:	4b2a      	ldr	r3, [pc, #168]	@ (8002c08 <MX_TIM4_Init+0xe8>)
 8002b60:	2200      	movs	r2, #0
 8002b62:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000-1;
 8002b64:	4b28      	ldr	r3, [pc, #160]	@ (8002c08 <MX_TIM4_Init+0xe8>)
 8002b66:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002b6a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b6c:	4b26      	ldr	r3, [pc, #152]	@ (8002c08 <MX_TIM4_Init+0xe8>)
 8002b6e:	2200      	movs	r2, #0
 8002b70:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b72:	4b25      	ldr	r3, [pc, #148]	@ (8002c08 <MX_TIM4_Init+0xe8>)
 8002b74:	2200      	movs	r2, #0
 8002b76:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002b78:	4823      	ldr	r0, [pc, #140]	@ (8002c08 <MX_TIM4_Init+0xe8>)
 8002b7a:	f004 fa93 	bl	80070a4 <HAL_TIM_Base_Init>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d001      	beq.n	8002b88 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8002b84:	f7ff fa72 	bl	800206c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002b88:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002b8c:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002b8e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002b92:	4619      	mov	r1, r3
 8002b94:	481c      	ldr	r0, [pc, #112]	@ (8002c08 <MX_TIM4_Init+0xe8>)
 8002b96:	f004 feb7 	bl	8007908 <HAL_TIM_ConfigClockSource>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d001      	beq.n	8002ba4 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8002ba0:	f7ff fa64 	bl	800206c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002ba4:	4818      	ldr	r0, [pc, #96]	@ (8002c08 <MX_TIM4_Init+0xe8>)
 8002ba6:	f004 fb6c 	bl	8007282 <HAL_TIM_PWM_Init>
 8002baa:	4603      	mov	r3, r0
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d001      	beq.n	8002bb4 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8002bb0:	f7ff fa5c 	bl	800206c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002bb8:	2300      	movs	r3, #0
 8002bba:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002bbc:	f107 0320 	add.w	r3, r7, #32
 8002bc0:	4619      	mov	r1, r3
 8002bc2:	4811      	ldr	r0, [pc, #68]	@ (8002c08 <MX_TIM4_Init+0xe8>)
 8002bc4:	f005 faac 	bl	8008120 <HAL_TIMEx_MasterConfigSynchronization>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d001      	beq.n	8002bd2 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8002bce:	f7ff fa4d 	bl	800206c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002bd2:	2360      	movs	r3, #96	@ 0x60
 8002bd4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002bde:	2300      	movs	r3, #0
 8002be0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002be2:	1d3b      	adds	r3, r7, #4
 8002be4:	2204      	movs	r2, #4
 8002be6:	4619      	mov	r1, r3
 8002be8:	4807      	ldr	r0, [pc, #28]	@ (8002c08 <MX_TIM4_Init+0xe8>)
 8002bea:	f004 fdcb 	bl	8007784 <HAL_TIM_PWM_ConfigChannel>
 8002bee:	4603      	mov	r3, r0
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d001      	beq.n	8002bf8 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8002bf4:	f7ff fa3a 	bl	800206c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002bf8:	4803      	ldr	r0, [pc, #12]	@ (8002c08 <MX_TIM4_Init+0xe8>)
 8002bfa:	f000 f927 	bl	8002e4c <HAL_TIM_MspPostInit>

}
 8002bfe:	bf00      	nop
 8002c00:	3738      	adds	r7, #56	@ 0x38
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd80      	pop	{r7, pc}
 8002c06:	bf00      	nop
 8002c08:	200003dc 	.word	0x200003dc
 8002c0c:	40000800 	.word	0x40000800

08002c10 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b082      	sub	sp, #8
 8002c14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c16:	463b      	mov	r3, r7
 8002c18:	2200      	movs	r2, #0
 8002c1a:	601a      	str	r2, [r3, #0]
 8002c1c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002c1e:	4b15      	ldr	r3, [pc, #84]	@ (8002c74 <MX_TIM6_Init+0x64>)
 8002c20:	4a15      	ldr	r2, [pc, #84]	@ (8002c78 <MX_TIM6_Init+0x68>)
 8002c22:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 42000-1;
 8002c24:	4b13      	ldr	r3, [pc, #76]	@ (8002c74 <MX_TIM6_Init+0x64>)
 8002c26:	f24a 420f 	movw	r2, #41999	@ 0xa40f
 8002c2a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c2c:	4b11      	ldr	r3, [pc, #68]	@ (8002c74 <MX_TIM6_Init+0x64>)
 8002c2e:	2200      	movs	r2, #0
 8002c30:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 200-1;
 8002c32:	4b10      	ldr	r3, [pc, #64]	@ (8002c74 <MX_TIM6_Init+0x64>)
 8002c34:	22c7      	movs	r2, #199	@ 0xc7
 8002c36:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c38:	4b0e      	ldr	r3, [pc, #56]	@ (8002c74 <MX_TIM6_Init+0x64>)
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002c3e:	480d      	ldr	r0, [pc, #52]	@ (8002c74 <MX_TIM6_Init+0x64>)
 8002c40:	f004 fa30 	bl	80070a4 <HAL_TIM_Base_Init>
 8002c44:	4603      	mov	r3, r0
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d001      	beq.n	8002c4e <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8002c4a:	f7ff fa0f 	bl	800206c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002c4e:	2320      	movs	r3, #32
 8002c50:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c52:	2300      	movs	r3, #0
 8002c54:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002c56:	463b      	mov	r3, r7
 8002c58:	4619      	mov	r1, r3
 8002c5a:	4806      	ldr	r0, [pc, #24]	@ (8002c74 <MX_TIM6_Init+0x64>)
 8002c5c:	f005 fa60 	bl	8008120 <HAL_TIMEx_MasterConfigSynchronization>
 8002c60:	4603      	mov	r3, r0
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d001      	beq.n	8002c6a <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8002c66:	f7ff fa01 	bl	800206c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002c6a:	bf00      	nop
 8002c6c:	3708      	adds	r7, #8
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bd80      	pop	{r7, pc}
 8002c72:	bf00      	nop
 8002c74:	20000424 	.word	0x20000424
 8002c78:	40001000 	.word	0x40001000

08002c7c <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b082      	sub	sp, #8
 8002c80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c82:	463b      	mov	r3, r7
 8002c84:	2200      	movs	r2, #0
 8002c86:	601a      	str	r2, [r3, #0]
 8002c88:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8002c8a:	4b14      	ldr	r3, [pc, #80]	@ (8002cdc <MX_TIM7_Init+0x60>)
 8002c8c:	4a14      	ldr	r2, [pc, #80]	@ (8002ce0 <MX_TIM7_Init+0x64>)
 8002c8e:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 83;
 8002c90:	4b12      	ldr	r3, [pc, #72]	@ (8002cdc <MX_TIM7_Init+0x60>)
 8002c92:	2253      	movs	r2, #83	@ 0x53
 8002c94:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c96:	4b11      	ldr	r3, [pc, #68]	@ (8002cdc <MX_TIM7_Init+0x60>)
 8002c98:	2200      	movs	r2, #0
 8002c9a:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 9;
 8002c9c:	4b0f      	ldr	r3, [pc, #60]	@ (8002cdc <MX_TIM7_Init+0x60>)
 8002c9e:	2209      	movs	r2, #9
 8002ca0:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ca2:	4b0e      	ldr	r3, [pc, #56]	@ (8002cdc <MX_TIM7_Init+0x60>)
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8002ca8:	480c      	ldr	r0, [pc, #48]	@ (8002cdc <MX_TIM7_Init+0x60>)
 8002caa:	f004 f9fb 	bl	80070a4 <HAL_TIM_Base_Init>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d001      	beq.n	8002cb8 <MX_TIM7_Init+0x3c>
  {
    Error_Handler();
 8002cb4:	f7ff f9da 	bl	800206c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002cb8:	2300      	movs	r3, #0
 8002cba:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8002cc0:	463b      	mov	r3, r7
 8002cc2:	4619      	mov	r1, r3
 8002cc4:	4805      	ldr	r0, [pc, #20]	@ (8002cdc <MX_TIM7_Init+0x60>)
 8002cc6:	f005 fa2b 	bl	8008120 <HAL_TIMEx_MasterConfigSynchronization>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d001      	beq.n	8002cd4 <MX_TIM7_Init+0x58>
  {
    Error_Handler();
 8002cd0:	f7ff f9cc 	bl	800206c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8002cd4:	bf00      	nop
 8002cd6:	3708      	adds	r7, #8
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	bd80      	pop	{r7, pc}
 8002cdc:	2000046c 	.word	0x2000046c
 8002ce0:	40001400 	.word	0x40001400

08002ce4 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8002ce8:	4b0e      	ldr	r3, [pc, #56]	@ (8002d24 <MX_TIM10_Init+0x40>)
 8002cea:	4a0f      	ldr	r2, [pc, #60]	@ (8002d28 <MX_TIM10_Init+0x44>)
 8002cec:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 42000-1;
 8002cee:	4b0d      	ldr	r3, [pc, #52]	@ (8002d24 <MX_TIM10_Init+0x40>)
 8002cf0:	f24a 420f 	movw	r2, #41999	@ 0xa40f
 8002cf4:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002cf6:	4b0b      	ldr	r3, [pc, #44]	@ (8002d24 <MX_TIM10_Init+0x40>)
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 2000-1;
 8002cfc:	4b09      	ldr	r3, [pc, #36]	@ (8002d24 <MX_TIM10_Init+0x40>)
 8002cfe:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8002d02:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d04:	4b07      	ldr	r3, [pc, #28]	@ (8002d24 <MX_TIM10_Init+0x40>)
 8002d06:	2200      	movs	r2, #0
 8002d08:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d0a:	4b06      	ldr	r3, [pc, #24]	@ (8002d24 <MX_TIM10_Init+0x40>)
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8002d10:	4804      	ldr	r0, [pc, #16]	@ (8002d24 <MX_TIM10_Init+0x40>)
 8002d12:	f004 f9c7 	bl	80070a4 <HAL_TIM_Base_Init>
 8002d16:	4603      	mov	r3, r0
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d001      	beq.n	8002d20 <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 8002d1c:	f7ff f9a6 	bl	800206c <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8002d20:	bf00      	nop
 8002d22:	bd80      	pop	{r7, pc}
 8002d24:	200004b4 	.word	0x200004b4
 8002d28:	40014400 	.word	0x40014400

08002d2c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b088      	sub	sp, #32
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4a3e      	ldr	r2, [pc, #248]	@ (8002e34 <HAL_TIM_Base_MspInit+0x108>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d10e      	bne.n	8002d5c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002d3e:	2300      	movs	r3, #0
 8002d40:	61fb      	str	r3, [r7, #28]
 8002d42:	4b3d      	ldr	r3, [pc, #244]	@ (8002e38 <HAL_TIM_Base_MspInit+0x10c>)
 8002d44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d46:	4a3c      	ldr	r2, [pc, #240]	@ (8002e38 <HAL_TIM_Base_MspInit+0x10c>)
 8002d48:	f043 0302 	orr.w	r3, r3, #2
 8002d4c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002d4e:	4b3a      	ldr	r3, [pc, #232]	@ (8002e38 <HAL_TIM_Base_MspInit+0x10c>)
 8002d50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d52:	f003 0302 	and.w	r3, r3, #2
 8002d56:	61fb      	str	r3, [r7, #28]
 8002d58:	69fb      	ldr	r3, [r7, #28]
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }
}
 8002d5a:	e066      	b.n	8002e2a <HAL_TIM_Base_MspInit+0xfe>
  else if(tim_baseHandle->Instance==TIM4)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a36      	ldr	r2, [pc, #216]	@ (8002e3c <HAL_TIM_Base_MspInit+0x110>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d10e      	bne.n	8002d84 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002d66:	2300      	movs	r3, #0
 8002d68:	61bb      	str	r3, [r7, #24]
 8002d6a:	4b33      	ldr	r3, [pc, #204]	@ (8002e38 <HAL_TIM_Base_MspInit+0x10c>)
 8002d6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d6e:	4a32      	ldr	r2, [pc, #200]	@ (8002e38 <HAL_TIM_Base_MspInit+0x10c>)
 8002d70:	f043 0304 	orr.w	r3, r3, #4
 8002d74:	6413      	str	r3, [r2, #64]	@ 0x40
 8002d76:	4b30      	ldr	r3, [pc, #192]	@ (8002e38 <HAL_TIM_Base_MspInit+0x10c>)
 8002d78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d7a:	f003 0304 	and.w	r3, r3, #4
 8002d7e:	61bb      	str	r3, [r7, #24]
 8002d80:	69bb      	ldr	r3, [r7, #24]
}
 8002d82:	e052      	b.n	8002e2a <HAL_TIM_Base_MspInit+0xfe>
  else if(tim_baseHandle->Instance==TIM6)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4a2d      	ldr	r2, [pc, #180]	@ (8002e40 <HAL_TIM_Base_MspInit+0x114>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d116      	bne.n	8002dbc <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002d8e:	2300      	movs	r3, #0
 8002d90:	617b      	str	r3, [r7, #20]
 8002d92:	4b29      	ldr	r3, [pc, #164]	@ (8002e38 <HAL_TIM_Base_MspInit+0x10c>)
 8002d94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d96:	4a28      	ldr	r2, [pc, #160]	@ (8002e38 <HAL_TIM_Base_MspInit+0x10c>)
 8002d98:	f043 0310 	orr.w	r3, r3, #16
 8002d9c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002d9e:	4b26      	ldr	r3, [pc, #152]	@ (8002e38 <HAL_TIM_Base_MspInit+0x10c>)
 8002da0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002da2:	f003 0310 	and.w	r3, r3, #16
 8002da6:	617b      	str	r3, [r7, #20]
 8002da8:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002daa:	2200      	movs	r2, #0
 8002dac:	2100      	movs	r1, #0
 8002dae:	2036      	movs	r0, #54	@ 0x36
 8002db0:	f001 f8a1 	bl	8003ef6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002db4:	2036      	movs	r0, #54	@ 0x36
 8002db6:	f001 f8ba 	bl	8003f2e <HAL_NVIC_EnableIRQ>
}
 8002dba:	e036      	b.n	8002e2a <HAL_TIM_Base_MspInit+0xfe>
  else if(tim_baseHandle->Instance==TIM7)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a20      	ldr	r2, [pc, #128]	@ (8002e44 <HAL_TIM_Base_MspInit+0x118>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d116      	bne.n	8002df4 <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	613b      	str	r3, [r7, #16]
 8002dca:	4b1b      	ldr	r3, [pc, #108]	@ (8002e38 <HAL_TIM_Base_MspInit+0x10c>)
 8002dcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dce:	4a1a      	ldr	r2, [pc, #104]	@ (8002e38 <HAL_TIM_Base_MspInit+0x10c>)
 8002dd0:	f043 0320 	orr.w	r3, r3, #32
 8002dd4:	6413      	str	r3, [r2, #64]	@ 0x40
 8002dd6:	4b18      	ldr	r3, [pc, #96]	@ (8002e38 <HAL_TIM_Base_MspInit+0x10c>)
 8002dd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dda:	f003 0320 	and.w	r3, r3, #32
 8002dde:	613b      	str	r3, [r7, #16]
 8002de0:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8002de2:	2200      	movs	r2, #0
 8002de4:	2100      	movs	r1, #0
 8002de6:	2037      	movs	r0, #55	@ 0x37
 8002de8:	f001 f885 	bl	8003ef6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002dec:	2037      	movs	r0, #55	@ 0x37
 8002dee:	f001 f89e 	bl	8003f2e <HAL_NVIC_EnableIRQ>
}
 8002df2:	e01a      	b.n	8002e2a <HAL_TIM_Base_MspInit+0xfe>
  else if(tim_baseHandle->Instance==TIM10)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a13      	ldr	r2, [pc, #76]	@ (8002e48 <HAL_TIM_Base_MspInit+0x11c>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d115      	bne.n	8002e2a <HAL_TIM_Base_MspInit+0xfe>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8002dfe:	2300      	movs	r3, #0
 8002e00:	60fb      	str	r3, [r7, #12]
 8002e02:	4b0d      	ldr	r3, [pc, #52]	@ (8002e38 <HAL_TIM_Base_MspInit+0x10c>)
 8002e04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e06:	4a0c      	ldr	r2, [pc, #48]	@ (8002e38 <HAL_TIM_Base_MspInit+0x10c>)
 8002e08:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002e0c:	6453      	str	r3, [r2, #68]	@ 0x44
 8002e0e:	4b0a      	ldr	r3, [pc, #40]	@ (8002e38 <HAL_TIM_Base_MspInit+0x10c>)
 8002e10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e16:	60fb      	str	r3, [r7, #12]
 8002e18:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	2100      	movs	r1, #0
 8002e1e:	2019      	movs	r0, #25
 8002e20:	f001 f869 	bl	8003ef6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002e24:	2019      	movs	r0, #25
 8002e26:	f001 f882 	bl	8003f2e <HAL_NVIC_EnableIRQ>
}
 8002e2a:	bf00      	nop
 8002e2c:	3720      	adds	r7, #32
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bd80      	pop	{r7, pc}
 8002e32:	bf00      	nop
 8002e34:	40000400 	.word	0x40000400
 8002e38:	40023800 	.word	0x40023800
 8002e3c:	40000800 	.word	0x40000800
 8002e40:	40001000 	.word	0x40001000
 8002e44:	40001400 	.word	0x40001400
 8002e48:	40014400 	.word	0x40014400

08002e4c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b08a      	sub	sp, #40	@ 0x28
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e54:	f107 0314 	add.w	r3, r7, #20
 8002e58:	2200      	movs	r2, #0
 8002e5a:	601a      	str	r2, [r3, #0]
 8002e5c:	605a      	str	r2, [r3, #4]
 8002e5e:	609a      	str	r2, [r3, #8]
 8002e60:	60da      	str	r2, [r3, #12]
 8002e62:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4a33      	ldr	r2, [pc, #204]	@ (8002f38 <HAL_TIM_MspPostInit+0xec>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d13c      	bne.n	8002ee8 <HAL_TIM_MspPostInit+0x9c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e6e:	2300      	movs	r3, #0
 8002e70:	613b      	str	r3, [r7, #16]
 8002e72:	4b32      	ldr	r3, [pc, #200]	@ (8002f3c <HAL_TIM_MspPostInit+0xf0>)
 8002e74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e76:	4a31      	ldr	r2, [pc, #196]	@ (8002f3c <HAL_TIM_MspPostInit+0xf0>)
 8002e78:	f043 0301 	orr.w	r3, r3, #1
 8002e7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e7e:	4b2f      	ldr	r3, [pc, #188]	@ (8002f3c <HAL_TIM_MspPostInit+0xf0>)
 8002e80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e82:	f003 0301 	and.w	r3, r3, #1
 8002e86:	613b      	str	r3, [r7, #16]
 8002e88:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	60fb      	str	r3, [r7, #12]
 8002e8e:	4b2b      	ldr	r3, [pc, #172]	@ (8002f3c <HAL_TIM_MspPostInit+0xf0>)
 8002e90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e92:	4a2a      	ldr	r2, [pc, #168]	@ (8002f3c <HAL_TIM_MspPostInit+0xf0>)
 8002e94:	f043 0302 	orr.w	r3, r3, #2
 8002e98:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e9a:	4b28      	ldr	r3, [pc, #160]	@ (8002f3c <HAL_TIM_MspPostInit+0xf0>)
 8002e9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e9e:	f003 0302 	and.w	r3, r3, #2
 8002ea2:	60fb      	str	r3, [r7, #12]
 8002ea4:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = Gauche_av_Pin|Gauche_re_Pin;
 8002ea6:	23c0      	movs	r3, #192	@ 0xc0
 8002ea8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002eaa:	2302      	movs	r3, #2
 8002eac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eae:	2300      	movs	r3, #0
 8002eb0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002eb6:	2302      	movs	r3, #2
 8002eb8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002eba:	f107 0314 	add.w	r3, r7, #20
 8002ebe:	4619      	mov	r1, r3
 8002ec0:	481f      	ldr	r0, [pc, #124]	@ (8002f40 <HAL_TIM_MspPostInit+0xf4>)
 8002ec2:	f001 f84f 	bl	8003f64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Droit_av_Pin|Droit_re_Pin;
 8002ec6:	2303      	movs	r3, #3
 8002ec8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002eca:	2302      	movs	r3, #2
 8002ecc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ece:	2300      	movs	r3, #0
 8002ed0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002ed6:	2302      	movs	r3, #2
 8002ed8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002eda:	f107 0314 	add.w	r3, r7, #20
 8002ede:	4619      	mov	r1, r3
 8002ee0:	4818      	ldr	r0, [pc, #96]	@ (8002f44 <HAL_TIM_MspPostInit+0xf8>)
 8002ee2:	f001 f83f 	bl	8003f64 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002ee6:	e022      	b.n	8002f2e <HAL_TIM_MspPostInit+0xe2>
  else if(timHandle->Instance==TIM4)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a16      	ldr	r2, [pc, #88]	@ (8002f48 <HAL_TIM_MspPostInit+0xfc>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d11d      	bne.n	8002f2e <HAL_TIM_MspPostInit+0xe2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	60bb      	str	r3, [r7, #8]
 8002ef6:	4b11      	ldr	r3, [pc, #68]	@ (8002f3c <HAL_TIM_MspPostInit+0xf0>)
 8002ef8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002efa:	4a10      	ldr	r2, [pc, #64]	@ (8002f3c <HAL_TIM_MspPostInit+0xf0>)
 8002efc:	f043 0302 	orr.w	r3, r3, #2
 8002f00:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f02:	4b0e      	ldr	r3, [pc, #56]	@ (8002f3c <HAL_TIM_MspPostInit+0xf0>)
 8002f04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f06:	f003 0302 	and.w	r3, r3, #2
 8002f0a:	60bb      	str	r3, [r7, #8]
 8002f0c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = LCD_BL_Pin;
 8002f0e:	2380      	movs	r3, #128	@ 0x80
 8002f10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f12:	2302      	movs	r3, #2
 8002f14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f16:	2300      	movs	r3, #0
 8002f18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002f1e:	2302      	movs	r3, #2
 8002f20:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(LCD_BL_GPIO_Port, &GPIO_InitStruct);
 8002f22:	f107 0314 	add.w	r3, r7, #20
 8002f26:	4619      	mov	r1, r3
 8002f28:	4806      	ldr	r0, [pc, #24]	@ (8002f44 <HAL_TIM_MspPostInit+0xf8>)
 8002f2a:	f001 f81b 	bl	8003f64 <HAL_GPIO_Init>
}
 8002f2e:	bf00      	nop
 8002f30:	3728      	adds	r7, #40	@ 0x28
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd80      	pop	{r7, pc}
 8002f36:	bf00      	nop
 8002f38:	40000400 	.word	0x40000400
 8002f3c:	40023800 	.word	0x40023800
 8002f40:	40020000 	.word	0x40020000
 8002f44:	40020400 	.word	0x40020400
 8002f48:	40000800 	.word	0x40000800

08002f4c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002f50:	4b11      	ldr	r3, [pc, #68]	@ (8002f98 <MX_USART2_UART_Init+0x4c>)
 8002f52:	4a12      	ldr	r2, [pc, #72]	@ (8002f9c <MX_USART2_UART_Init+0x50>)
 8002f54:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002f56:	4b10      	ldr	r3, [pc, #64]	@ (8002f98 <MX_USART2_UART_Init+0x4c>)
 8002f58:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002f5c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002f5e:	4b0e      	ldr	r3, [pc, #56]	@ (8002f98 <MX_USART2_UART_Init+0x4c>)
 8002f60:	2200      	movs	r2, #0
 8002f62:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002f64:	4b0c      	ldr	r3, [pc, #48]	@ (8002f98 <MX_USART2_UART_Init+0x4c>)
 8002f66:	2200      	movs	r2, #0
 8002f68:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002f6a:	4b0b      	ldr	r3, [pc, #44]	@ (8002f98 <MX_USART2_UART_Init+0x4c>)
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002f70:	4b09      	ldr	r3, [pc, #36]	@ (8002f98 <MX_USART2_UART_Init+0x4c>)
 8002f72:	220c      	movs	r2, #12
 8002f74:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f76:	4b08      	ldr	r3, [pc, #32]	@ (8002f98 <MX_USART2_UART_Init+0x4c>)
 8002f78:	2200      	movs	r2, #0
 8002f7a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f7c:	4b06      	ldr	r3, [pc, #24]	@ (8002f98 <MX_USART2_UART_Init+0x4c>)
 8002f7e:	2200      	movs	r2, #0
 8002f80:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002f82:	4805      	ldr	r0, [pc, #20]	@ (8002f98 <MX_USART2_UART_Init+0x4c>)
 8002f84:	f005 f95c 	bl	8008240 <HAL_UART_Init>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d001      	beq.n	8002f92 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002f8e:	f7ff f86d 	bl	800206c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002f92:	bf00      	nop
 8002f94:	bd80      	pop	{r7, pc}
 8002f96:	bf00      	nop
 8002f98:	200004fc 	.word	0x200004fc
 8002f9c:	40004400 	.word	0x40004400

08002fa0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b08a      	sub	sp, #40	@ 0x28
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fa8:	f107 0314 	add.w	r3, r7, #20
 8002fac:	2200      	movs	r2, #0
 8002fae:	601a      	str	r2, [r3, #0]
 8002fb0:	605a      	str	r2, [r3, #4]
 8002fb2:	609a      	str	r2, [r3, #8]
 8002fb4:	60da      	str	r2, [r3, #12]
 8002fb6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a19      	ldr	r2, [pc, #100]	@ (8003024 <HAL_UART_MspInit+0x84>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d12b      	bne.n	800301a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	613b      	str	r3, [r7, #16]
 8002fc6:	4b18      	ldr	r3, [pc, #96]	@ (8003028 <HAL_UART_MspInit+0x88>)
 8002fc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fca:	4a17      	ldr	r2, [pc, #92]	@ (8003028 <HAL_UART_MspInit+0x88>)
 8002fcc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002fd0:	6413      	str	r3, [r2, #64]	@ 0x40
 8002fd2:	4b15      	ldr	r3, [pc, #84]	@ (8003028 <HAL_UART_MspInit+0x88>)
 8002fd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fda:	613b      	str	r3, [r7, #16]
 8002fdc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fde:	2300      	movs	r3, #0
 8002fe0:	60fb      	str	r3, [r7, #12]
 8002fe2:	4b11      	ldr	r3, [pc, #68]	@ (8003028 <HAL_UART_MspInit+0x88>)
 8002fe4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fe6:	4a10      	ldr	r2, [pc, #64]	@ (8003028 <HAL_UART_MspInit+0x88>)
 8002fe8:	f043 0301 	orr.w	r3, r3, #1
 8002fec:	6313      	str	r3, [r2, #48]	@ 0x30
 8002fee:	4b0e      	ldr	r3, [pc, #56]	@ (8003028 <HAL_UART_MspInit+0x88>)
 8002ff0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ff2:	f003 0301 	and.w	r3, r3, #1
 8002ff6:	60fb      	str	r3, [r7, #12]
 8002ff8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002ffa:	230c      	movs	r3, #12
 8002ffc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ffe:	2302      	movs	r3, #2
 8003000:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003002:	2300      	movs	r3, #0
 8003004:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003006:	2303      	movs	r3, #3
 8003008:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800300a:	2307      	movs	r3, #7
 800300c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800300e:	f107 0314 	add.w	r3, r7, #20
 8003012:	4619      	mov	r1, r3
 8003014:	4805      	ldr	r0, [pc, #20]	@ (800302c <HAL_UART_MspInit+0x8c>)
 8003016:	f000 ffa5 	bl	8003f64 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800301a:	bf00      	nop
 800301c:	3728      	adds	r7, #40	@ 0x28
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}
 8003022:	bf00      	nop
 8003024:	40004400 	.word	0x40004400
 8003028:	40023800 	.word	0x40023800
 800302c:	40020000 	.word	0x40020000

08003030 <moyPulse>:



    extern volatile uint16_t vitesseD, vitesseG; //en mm par seconde

void moyPulse(uint16_t pulseD, uint16_t pulseG, uint16_t *moyD, uint16_t *moyG){
 8003030:	b480      	push	{r7}
 8003032:	b085      	sub	sp, #20
 8003034:	af00      	add	r7, sp, #0
 8003036:	60ba      	str	r2, [r7, #8]
 8003038:	607b      	str	r3, [r7, #4]
 800303a:	4603      	mov	r3, r0
 800303c:	81fb      	strh	r3, [r7, #14]
 800303e:	460b      	mov	r3, r1
 8003040:	81bb      	strh	r3, [r7, #12]

	sumD = 0;
 8003042:	4b30      	ldr	r3, [pc, #192]	@ (8003104 <moyPulse+0xd4>)
 8003044:	2200      	movs	r2, #0
 8003046:	701a      	strb	r2, [r3, #0]
	sumG = 0;
 8003048:	4b2f      	ldr	r3, [pc, #188]	@ (8003108 <moyPulse+0xd8>)
 800304a:	2200      	movs	r2, #0
 800304c:	701a      	strb	r2, [r3, #0]

    if(indiceMem < INDICE_MEM_MAX){
 800304e:	4b2f      	ldr	r3, [pc, #188]	@ (800310c <moyPulse+0xdc>)
 8003050:	781b      	ldrb	r3, [r3, #0]
 8003052:	2b03      	cmp	r3, #3
 8003054:	d806      	bhi.n	8003064 <moyPulse+0x34>
        indiceMem++;
 8003056:	4b2d      	ldr	r3, [pc, #180]	@ (800310c <moyPulse+0xdc>)
 8003058:	781b      	ldrb	r3, [r3, #0]
 800305a:	3301      	adds	r3, #1
 800305c:	b2da      	uxtb	r2, r3
 800305e:	4b2b      	ldr	r3, [pc, #172]	@ (800310c <moyPulse+0xdc>)
 8003060:	701a      	strb	r2, [r3, #0]
 8003062:	e002      	b.n	800306a <moyPulse+0x3a>
    }
    else{
        indiceMem = 0;
 8003064:	4b29      	ldr	r3, [pc, #164]	@ (800310c <moyPulse+0xdc>)
 8003066:	2200      	movs	r2, #0
 8003068:	701a      	strb	r2, [r3, #0]
    }

	memPulseD[indiceMem] = pulseD;
 800306a:	4b28      	ldr	r3, [pc, #160]	@ (800310c <moyPulse+0xdc>)
 800306c:	781b      	ldrb	r3, [r3, #0]
 800306e:	4619      	mov	r1, r3
 8003070:	4a27      	ldr	r2, [pc, #156]	@ (8003110 <moyPulse+0xe0>)
 8003072:	89fb      	ldrh	r3, [r7, #14]
 8003074:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
	memPulseG[indiceMem] = pulseG;
 8003078:	4b24      	ldr	r3, [pc, #144]	@ (800310c <moyPulse+0xdc>)
 800307a:	781b      	ldrb	r3, [r3, #0]
 800307c:	4619      	mov	r1, r3
 800307e:	4a25      	ldr	r2, [pc, #148]	@ (8003114 <moyPulse+0xe4>)
 8003080:	89bb      	ldrh	r3, [r7, #12]
 8003082:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]

	for (ind = 0; ind < (INDICE_MEM_MAX+1); ind++){
 8003086:	4b24      	ldr	r3, [pc, #144]	@ (8003118 <moyPulse+0xe8>)
 8003088:	2200      	movs	r2, #0
 800308a:	601a      	str	r2, [r3, #0]
 800308c:	e01c      	b.n	80030c8 <moyPulse+0x98>
		sumD += memPulseD[ind];
 800308e:	4b22      	ldr	r3, [pc, #136]	@ (8003118 <moyPulse+0xe8>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4a1f      	ldr	r2, [pc, #124]	@ (8003110 <moyPulse+0xe0>)
 8003094:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003098:	b2da      	uxtb	r2, r3
 800309a:	4b1a      	ldr	r3, [pc, #104]	@ (8003104 <moyPulse+0xd4>)
 800309c:	781b      	ldrb	r3, [r3, #0]
 800309e:	4413      	add	r3, r2
 80030a0:	b2da      	uxtb	r2, r3
 80030a2:	4b18      	ldr	r3, [pc, #96]	@ (8003104 <moyPulse+0xd4>)
 80030a4:	701a      	strb	r2, [r3, #0]
		sumG += memPulseG[ind];
 80030a6:	4b1c      	ldr	r3, [pc, #112]	@ (8003118 <moyPulse+0xe8>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4a1a      	ldr	r2, [pc, #104]	@ (8003114 <moyPulse+0xe4>)
 80030ac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80030b0:	b2da      	uxtb	r2, r3
 80030b2:	4b15      	ldr	r3, [pc, #84]	@ (8003108 <moyPulse+0xd8>)
 80030b4:	781b      	ldrb	r3, [r3, #0]
 80030b6:	4413      	add	r3, r2
 80030b8:	b2da      	uxtb	r2, r3
 80030ba:	4b13      	ldr	r3, [pc, #76]	@ (8003108 <moyPulse+0xd8>)
 80030bc:	701a      	strb	r2, [r3, #0]
	for (ind = 0; ind < (INDICE_MEM_MAX+1); ind++){
 80030be:	4b16      	ldr	r3, [pc, #88]	@ (8003118 <moyPulse+0xe8>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	3301      	adds	r3, #1
 80030c4:	4a14      	ldr	r2, [pc, #80]	@ (8003118 <moyPulse+0xe8>)
 80030c6:	6013      	str	r3, [r2, #0]
 80030c8:	4b13      	ldr	r3, [pc, #76]	@ (8003118 <moyPulse+0xe8>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	2b04      	cmp	r3, #4
 80030ce:	ddde      	ble.n	800308e <moyPulse+0x5e>
	}

	*moyD = sumD / (INDICE_MEM_MAX + 1 );
 80030d0:	4b0c      	ldr	r3, [pc, #48]	@ (8003104 <moyPulse+0xd4>)
 80030d2:	781b      	ldrb	r3, [r3, #0]
 80030d4:	4a11      	ldr	r2, [pc, #68]	@ (800311c <moyPulse+0xec>)
 80030d6:	fba2 2303 	umull	r2, r3, r2, r3
 80030da:	089b      	lsrs	r3, r3, #2
 80030dc:	b2db      	uxtb	r3, r3
 80030de:	461a      	mov	r2, r3
 80030e0:	68bb      	ldr	r3, [r7, #8]
 80030e2:	801a      	strh	r2, [r3, #0]
	*moyG = sumG / (INDICE_MEM_MAX + 1);
 80030e4:	4b08      	ldr	r3, [pc, #32]	@ (8003108 <moyPulse+0xd8>)
 80030e6:	781b      	ldrb	r3, [r3, #0]
 80030e8:	4a0c      	ldr	r2, [pc, #48]	@ (800311c <moyPulse+0xec>)
 80030ea:	fba2 2303 	umull	r2, r3, r2, r3
 80030ee:	089b      	lsrs	r3, r3, #2
 80030f0:	b2db      	uxtb	r3, r3
 80030f2:	461a      	mov	r2, r3
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	801a      	strh	r2, [r3, #0]
}
 80030f8:	bf00      	nop
 80030fa:	3714      	adds	r7, #20
 80030fc:	46bd      	mov	sp, r7
 80030fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003102:	4770      	bx	lr
 8003104:	200005a0 	.word	0x200005a0
 8003108:	2000059f 	.word	0x2000059f
 800310c:	2000059e 	.word	0x2000059e
 8003110:	20000588 	.word	0x20000588
 8003114:	20000594 	.word	0x20000594
 8003118:	20000564 	.word	0x20000564
 800311c:	cccccccd 	.word	0xcccccccd

08003120 <int_to_str>:


void int_to_str(int num, char *str) {
 8003120:	b480      	push	{r7}
 8003122:	b087      	sub	sp, #28
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
 8003128:	6039      	str	r1, [r7, #0]
	    int i = 0, j, digit;
 800312a:	2300      	movs	r3, #0
 800312c:	617b      	str	r3, [r7, #20]
	    char temp;

	    if (num == 0) {
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d128      	bne.n	8003186 <int_to_str+0x66>
	        str[i++] = '0';
 8003134:	697b      	ldr	r3, [r7, #20]
 8003136:	1c5a      	adds	r2, r3, #1
 8003138:	617a      	str	r2, [r7, #20]
 800313a:	461a      	mov	r2, r3
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	4413      	add	r3, r2
 8003140:	2230      	movs	r2, #48	@ 0x30
 8003142:	701a      	strb	r2, [r3, #0]
 8003144:	e022      	b.n	800318c <int_to_str+0x6c>
	    } else {
	        while (num > 0) {
	            digit = num % 10;
 8003146:	687a      	ldr	r2, [r7, #4]
 8003148:	4b2a      	ldr	r3, [pc, #168]	@ (80031f4 <int_to_str+0xd4>)
 800314a:	fb83 1302 	smull	r1, r3, r3, r2
 800314e:	1099      	asrs	r1, r3, #2
 8003150:	17d3      	asrs	r3, r2, #31
 8003152:	1ac9      	subs	r1, r1, r3
 8003154:	460b      	mov	r3, r1
 8003156:	009b      	lsls	r3, r3, #2
 8003158:	440b      	add	r3, r1
 800315a:	005b      	lsls	r3, r3, #1
 800315c:	1ad3      	subs	r3, r2, r3
 800315e:	60fb      	str	r3, [r7, #12]
	            str[i++] = digit + '0';
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	b2da      	uxtb	r2, r3
 8003164:	697b      	ldr	r3, [r7, #20]
 8003166:	1c59      	adds	r1, r3, #1
 8003168:	6179      	str	r1, [r7, #20]
 800316a:	4619      	mov	r1, r3
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	440b      	add	r3, r1
 8003170:	3230      	adds	r2, #48	@ 0x30
 8003172:	b2d2      	uxtb	r2, r2
 8003174:	701a      	strb	r2, [r3, #0]
	            num /= 10;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	4a1e      	ldr	r2, [pc, #120]	@ (80031f4 <int_to_str+0xd4>)
 800317a:	fb82 1203 	smull	r1, r2, r2, r3
 800317e:	1092      	asrs	r2, r2, #2
 8003180:	17db      	asrs	r3, r3, #31
 8003182:	1ad3      	subs	r3, r2, r3
 8003184:	607b      	str	r3, [r7, #4]
	        while (num > 0) {
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2b00      	cmp	r3, #0
 800318a:	dcdc      	bgt.n	8003146 <int_to_str+0x26>
	        }
	    }
	    str[i] = '\0';
 800318c:	697b      	ldr	r3, [r7, #20]
 800318e:	683a      	ldr	r2, [r7, #0]
 8003190:	4413      	add	r3, r2
 8003192:	2200      	movs	r2, #0
 8003194:	701a      	strb	r2, [r3, #0]

	    // Inverser la chaîne
	    for (j = 0; j < i / 2; j++) {
 8003196:	2300      	movs	r3, #0
 8003198:	613b      	str	r3, [r7, #16]
 800319a:	e01c      	b.n	80031d6 <int_to_str+0xb6>
	        temp = str[j];
 800319c:	693b      	ldr	r3, [r7, #16]
 800319e:	683a      	ldr	r2, [r7, #0]
 80031a0:	4413      	add	r3, r2
 80031a2:	781b      	ldrb	r3, [r3, #0]
 80031a4:	72fb      	strb	r3, [r7, #11]
	        str[j] = str[i - 1 - j];
 80031a6:	697b      	ldr	r3, [r7, #20]
 80031a8:	1e5a      	subs	r2, r3, #1
 80031aa:	693b      	ldr	r3, [r7, #16]
 80031ac:	1ad3      	subs	r3, r2, r3
 80031ae:	461a      	mov	r2, r3
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	441a      	add	r2, r3
 80031b4:	693b      	ldr	r3, [r7, #16]
 80031b6:	6839      	ldr	r1, [r7, #0]
 80031b8:	440b      	add	r3, r1
 80031ba:	7812      	ldrb	r2, [r2, #0]
 80031bc:	701a      	strb	r2, [r3, #0]
	        str[i - 1 - j] = temp;
 80031be:	697b      	ldr	r3, [r7, #20]
 80031c0:	1e5a      	subs	r2, r3, #1
 80031c2:	693b      	ldr	r3, [r7, #16]
 80031c4:	1ad3      	subs	r3, r2, r3
 80031c6:	461a      	mov	r2, r3
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	4413      	add	r3, r2
 80031cc:	7afa      	ldrb	r2, [r7, #11]
 80031ce:	701a      	strb	r2, [r3, #0]
	    for (j = 0; j < i / 2; j++) {
 80031d0:	693b      	ldr	r3, [r7, #16]
 80031d2:	3301      	adds	r3, #1
 80031d4:	613b      	str	r3, [r7, #16]
 80031d6:	697b      	ldr	r3, [r7, #20]
 80031d8:	0fda      	lsrs	r2, r3, #31
 80031da:	4413      	add	r3, r2
 80031dc:	105b      	asrs	r3, r3, #1
 80031de:	461a      	mov	r2, r3
 80031e0:	693b      	ldr	r3, [r7, #16]
 80031e2:	4293      	cmp	r3, r2
 80031e4:	dbda      	blt.n	800319c <int_to_str+0x7c>
	    }
	}
 80031e6:	bf00      	nop
 80031e8:	bf00      	nop
 80031ea:	371c      	adds	r7, #28
 80031ec:	46bd      	mov	sp, r7
 80031ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f2:	4770      	bx	lr
 80031f4:	66666667 	.word	0x66666667

080031f8 <format_date>:

void format_date(int date, int month, int year, char *buffDate) {
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b084      	sub	sp, #16
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	60f8      	str	r0, [r7, #12]
 8003200:	60b9      	str	r1, [r7, #8]
 8003202:	607a      	str	r2, [r7, #4]
 8003204:	603b      	str	r3, [r7, #0]
	    ind = 0;
 8003206:	4b33      	ldr	r3, [pc, #204]	@ (80032d4 <format_date+0xdc>)
 8003208:	2200      	movs	r2, #0
 800320a:	601a      	str	r2, [r3, #0]

	    int_to_str(date, buffDate + ind);
 800320c:	4b31      	ldr	r3, [pc, #196]	@ (80032d4 <format_date+0xdc>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	461a      	mov	r2, r3
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	4413      	add	r3, r2
 8003216:	4619      	mov	r1, r3
 8003218:	68f8      	ldr	r0, [r7, #12]
 800321a:	f7ff ff81 	bl	8003120 <int_to_str>
	    while (buffDate[ind] != '\0') ind++;
 800321e:	e004      	b.n	800322a <format_date+0x32>
 8003220:	4b2c      	ldr	r3, [pc, #176]	@ (80032d4 <format_date+0xdc>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	3301      	adds	r3, #1
 8003226:	4a2b      	ldr	r2, [pc, #172]	@ (80032d4 <format_date+0xdc>)
 8003228:	6013      	str	r3, [r2, #0]
 800322a:	4b2a      	ldr	r3, [pc, #168]	@ (80032d4 <format_date+0xdc>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	461a      	mov	r2, r3
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	4413      	add	r3, r2
 8003234:	781b      	ldrb	r3, [r3, #0]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d1f2      	bne.n	8003220 <format_date+0x28>
	    buffDate[ind++] = ',';
 800323a:	4b26      	ldr	r3, [pc, #152]	@ (80032d4 <format_date+0xdc>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	1c5a      	adds	r2, r3, #1
 8003240:	4924      	ldr	r1, [pc, #144]	@ (80032d4 <format_date+0xdc>)
 8003242:	600a      	str	r2, [r1, #0]
 8003244:	461a      	mov	r2, r3
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	4413      	add	r3, r2
 800324a:	222c      	movs	r2, #44	@ 0x2c
 800324c:	701a      	strb	r2, [r3, #0]

	    int_to_str(month, buffDate + ind);
 800324e:	4b21      	ldr	r3, [pc, #132]	@ (80032d4 <format_date+0xdc>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	461a      	mov	r2, r3
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	4413      	add	r3, r2
 8003258:	4619      	mov	r1, r3
 800325a:	68b8      	ldr	r0, [r7, #8]
 800325c:	f7ff ff60 	bl	8003120 <int_to_str>
	    while (buffDate[ind] != '\0') ind++;
 8003260:	e004      	b.n	800326c <format_date+0x74>
 8003262:	4b1c      	ldr	r3, [pc, #112]	@ (80032d4 <format_date+0xdc>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	3301      	adds	r3, #1
 8003268:	4a1a      	ldr	r2, [pc, #104]	@ (80032d4 <format_date+0xdc>)
 800326a:	6013      	str	r3, [r2, #0]
 800326c:	4b19      	ldr	r3, [pc, #100]	@ (80032d4 <format_date+0xdc>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	461a      	mov	r2, r3
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	4413      	add	r3, r2
 8003276:	781b      	ldrb	r3, [r3, #0]
 8003278:	2b00      	cmp	r3, #0
 800327a:	d1f2      	bne.n	8003262 <format_date+0x6a>
	    buffDate[ind++] = ',';
 800327c:	4b15      	ldr	r3, [pc, #84]	@ (80032d4 <format_date+0xdc>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	1c5a      	adds	r2, r3, #1
 8003282:	4914      	ldr	r1, [pc, #80]	@ (80032d4 <format_date+0xdc>)
 8003284:	600a      	str	r2, [r1, #0]
 8003286:	461a      	mov	r2, r3
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	4413      	add	r3, r2
 800328c:	222c      	movs	r2, #44	@ 0x2c
 800328e:	701a      	strb	r2, [r3, #0]

	    buffDate[ind++] = '2';
 8003290:	4b10      	ldr	r3, [pc, #64]	@ (80032d4 <format_date+0xdc>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	1c5a      	adds	r2, r3, #1
 8003296:	490f      	ldr	r1, [pc, #60]	@ (80032d4 <format_date+0xdc>)
 8003298:	600a      	str	r2, [r1, #0]
 800329a:	461a      	mov	r2, r3
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	4413      	add	r3, r2
 80032a0:	2232      	movs	r2, #50	@ 0x32
 80032a2:	701a      	strb	r2, [r3, #0]
	    buffDate[ind++] = '0';
 80032a4:	4b0b      	ldr	r3, [pc, #44]	@ (80032d4 <format_date+0xdc>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	1c5a      	adds	r2, r3, #1
 80032aa:	490a      	ldr	r1, [pc, #40]	@ (80032d4 <format_date+0xdc>)
 80032ac:	600a      	str	r2, [r1, #0]
 80032ae:	461a      	mov	r2, r3
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	4413      	add	r3, r2
 80032b4:	2230      	movs	r2, #48	@ 0x30
 80032b6:	701a      	strb	r2, [r3, #0]
	    int_to_str(year, buffDate + ind);
 80032b8:	4b06      	ldr	r3, [pc, #24]	@ (80032d4 <format_date+0xdc>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	461a      	mov	r2, r3
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	4413      	add	r3, r2
 80032c2:	4619      	mov	r1, r3
 80032c4:	6878      	ldr	r0, [r7, #4]
 80032c6:	f7ff ff2b 	bl	8003120 <int_to_str>
	}
 80032ca:	bf00      	nop
 80032cc:	3710      	adds	r7, #16
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bd80      	pop	{r7, pc}
 80032d2:	bf00      	nop
 80032d4:	20000564 	.word	0x20000564

080032d8 <format_vitesse>:

void format_vitesse(int vitesse, char *buffVitesse, int negatif) {
 80032d8:	b580      	push	{r7, lr}
 80032da:	b084      	sub	sp, #16
 80032dc:	af00      	add	r7, sp, #0
 80032de:	60f8      	str	r0, [r7, #12]
 80032e0:	60b9      	str	r1, [r7, #8]
 80032e2:	607a      	str	r2, [r7, #4]
	    ind = 0;
 80032e4:	4b24      	ldr	r3, [pc, #144]	@ (8003378 <format_vitesse+0xa0>)
 80032e6:	2200      	movs	r2, #0
 80032e8:	601a      	str	r2, [r3, #0]
	    if(negatif)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d007      	beq.n	8003300 <format_vitesse+0x28>
	    {
		buffVitesse[ind] = '-';
 80032f0:	4b21      	ldr	r3, [pc, #132]	@ (8003378 <format_vitesse+0xa0>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	461a      	mov	r2, r3
 80032f6:	68bb      	ldr	r3, [r7, #8]
 80032f8:	4413      	add	r3, r2
 80032fa:	222d      	movs	r2, #45	@ 0x2d
 80032fc:	701a      	strb	r2, [r3, #0]
 80032fe:	e006      	b.n	800330e <format_vitesse+0x36>
	    }
	    else
	    {
	    buffVitesse[ind] = '+';
 8003300:	4b1d      	ldr	r3, [pc, #116]	@ (8003378 <format_vitesse+0xa0>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	461a      	mov	r2, r3
 8003306:	68bb      	ldr	r3, [r7, #8]
 8003308:	4413      	add	r3, r2
 800330a:	222b      	movs	r2, #43	@ 0x2b
 800330c:	701a      	strb	r2, [r3, #0]
	    }

	    ind++;
 800330e:	4b1a      	ldr	r3, [pc, #104]	@ (8003378 <format_vitesse+0xa0>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	3301      	adds	r3, #1
 8003314:	4a18      	ldr	r2, [pc, #96]	@ (8003378 <format_vitesse+0xa0>)
 8003316:	6013      	str	r3, [r2, #0]
	    if(vitesse < 100){
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	2b63      	cmp	r3, #99	@ 0x63
 800331c:	dc1a      	bgt.n	8003354 <format_vitesse+0x7c>
	    	buffVitesse[ind] = 48;
 800331e:	4b16      	ldr	r3, [pc, #88]	@ (8003378 <format_vitesse+0xa0>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	461a      	mov	r2, r3
 8003324:	68bb      	ldr	r3, [r7, #8]
 8003326:	4413      	add	r3, r2
 8003328:	2230      	movs	r2, #48	@ 0x30
 800332a:	701a      	strb	r2, [r3, #0]
	    	ind++;
 800332c:	4b12      	ldr	r3, [pc, #72]	@ (8003378 <format_vitesse+0xa0>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	3301      	adds	r3, #1
 8003332:	4a11      	ldr	r2, [pc, #68]	@ (8003378 <format_vitesse+0xa0>)
 8003334:	6013      	str	r3, [r2, #0]

		    if(vitesse < 10){
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	2b09      	cmp	r3, #9
 800333a:	dc0b      	bgt.n	8003354 <format_vitesse+0x7c>
		    	buffVitesse[ind] = 48;
 800333c:	4b0e      	ldr	r3, [pc, #56]	@ (8003378 <format_vitesse+0xa0>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	461a      	mov	r2, r3
 8003342:	68bb      	ldr	r3, [r7, #8]
 8003344:	4413      	add	r3, r2
 8003346:	2230      	movs	r2, #48	@ 0x30
 8003348:	701a      	strb	r2, [r3, #0]
		    	ind++;
 800334a:	4b0b      	ldr	r3, [pc, #44]	@ (8003378 <format_vitesse+0xa0>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	3301      	adds	r3, #1
 8003350:	4a09      	ldr	r2, [pc, #36]	@ (8003378 <format_vitesse+0xa0>)
 8003352:	6013      	str	r3, [r2, #0]
		    }
	    }

	    int_to_str(vitesse, buffVitesse + ind);
 8003354:	4b08      	ldr	r3, [pc, #32]	@ (8003378 <format_vitesse+0xa0>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	461a      	mov	r2, r3
 800335a:	68bb      	ldr	r3, [r7, #8]
 800335c:	4413      	add	r3, r2
 800335e:	4619      	mov	r1, r3
 8003360:	68f8      	ldr	r0, [r7, #12]
 8003362:	f7ff fedd 	bl	8003120 <int_to_str>
	    buffVitesse[4] = 0;
 8003366:	68bb      	ldr	r3, [r7, #8]
 8003368:	3304      	adds	r3, #4
 800336a:	2200      	movs	r2, #0
 800336c:	701a      	strb	r2, [r3, #0]

	}
 800336e:	bf00      	nop
 8003370:	3710      	adds	r7, #16
 8003372:	46bd      	mov	sp, r7
 8003374:	bd80      	pop	{r7, pc}
 8003376:	bf00      	nop
 8003378:	20000564 	.word	0x20000564

0800337c <init_RTC_Time>:

void init_RTC_Time()
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b082      	sub	sp, #8
 8003380:	af02      	add	r7, sp, #8
	if (HAL_RTC_GetTime(&hrtc, &currentTime, RTC_FORMAT_BIN) == HAL_OK)
 8003382:	2200      	movs	r2, #0
 8003384:	4955      	ldr	r1, [pc, #340]	@ (80034dc <init_RTC_Time+0x160>)
 8003386:	4856      	ldr	r0, [pc, #344]	@ (80034e0 <init_RTC_Time+0x164>)
 8003388:	f003 f9f3 	bl	8006772 <HAL_RTC_GetTime>
 800338c:	4603      	mov	r3, r0
 800338e:	2b00      	cmp	r3, #0
 8003390:	d111      	bne.n	80033b6 <init_RTC_Time+0x3a>
	{
		HAL_RTC_GetDate(&hrtc, &currentDate, RTC_FORMAT_BIN);
 8003392:	2200      	movs	r2, #0
 8003394:	4953      	ldr	r1, [pc, #332]	@ (80034e4 <init_RTC_Time+0x168>)
 8003396:	4852      	ldr	r0, [pc, #328]	@ (80034e0 <init_RTC_Time+0x164>)
 8003398:	f003 facd 	bl	8006936 <HAL_RTC_GetDate>
	    hours = currentTime.Hours;
 800339c:	4b4f      	ldr	r3, [pc, #316]	@ (80034dc <init_RTC_Time+0x160>)
 800339e:	781a      	ldrb	r2, [r3, #0]
 80033a0:	4b51      	ldr	r3, [pc, #324]	@ (80034e8 <init_RTC_Time+0x16c>)
 80033a2:	701a      	strb	r2, [r3, #0]
	    minutes = currentTime.Minutes;
 80033a4:	4b4d      	ldr	r3, [pc, #308]	@ (80034dc <init_RTC_Time+0x160>)
 80033a6:	785a      	ldrb	r2, [r3, #1]
 80033a8:	4b50      	ldr	r3, [pc, #320]	@ (80034ec <init_RTC_Time+0x170>)
 80033aa:	701a      	strb	r2, [r3, #0]
	    seconds = currentTime.Seconds;
 80033ac:	4b4b      	ldr	r3, [pc, #300]	@ (80034dc <init_RTC_Time+0x160>)
 80033ae:	789a      	ldrb	r2, [r3, #2]
 80033b0:	4b4f      	ldr	r3, [pc, #316]	@ (80034f0 <init_RTC_Time+0x174>)
 80033b2:	701a      	strb	r2, [r3, #0]
 80033b4:	e001      	b.n	80033ba <init_RTC_Time+0x3e>
	}
	else
	{
		Error_Handler();
 80033b6:	f7fe fe59 	bl	800206c <Error_Handler>
	}
		ind = 0;
 80033ba:	4b4e      	ldr	r3, [pc, #312]	@ (80034f4 <init_RTC_Time+0x178>)
 80033bc:	2200      	movs	r2, #0
 80033be:	601a      	str	r2, [r3, #0]

		if(hours/10 == 0){
 80033c0:	4b49      	ldr	r3, [pc, #292]	@ (80034e8 <init_RTC_Time+0x16c>)
 80033c2:	781b      	ldrb	r3, [r3, #0]
 80033c4:	2b09      	cmp	r3, #9
 80033c6:	d809      	bhi.n	80033dc <init_RTC_Time+0x60>
			buffTime[ind] = '0';
 80033c8:	4b4a      	ldr	r3, [pc, #296]	@ (80034f4 <init_RTC_Time+0x178>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4a4a      	ldr	r2, [pc, #296]	@ (80034f8 <init_RTC_Time+0x17c>)
 80033ce:	2130      	movs	r1, #48	@ 0x30
 80033d0:	54d1      	strb	r1, [r2, r3]
			ind++;
 80033d2:	4b48      	ldr	r3, [pc, #288]	@ (80034f4 <init_RTC_Time+0x178>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	3301      	adds	r3, #1
 80033d8:	4a46      	ldr	r2, [pc, #280]	@ (80034f4 <init_RTC_Time+0x178>)
 80033da:	6013      	str	r3, [r2, #0]
		}

	    int_to_str(hours, buffTime + ind);
 80033dc:	4b42      	ldr	r3, [pc, #264]	@ (80034e8 <init_RTC_Time+0x16c>)
 80033de:	781b      	ldrb	r3, [r3, #0]
 80033e0:	4618      	mov	r0, r3
 80033e2:	4b44      	ldr	r3, [pc, #272]	@ (80034f4 <init_RTC_Time+0x178>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	461a      	mov	r2, r3
 80033e8:	4b43      	ldr	r3, [pc, #268]	@ (80034f8 <init_RTC_Time+0x17c>)
 80033ea:	4413      	add	r3, r2
 80033ec:	4619      	mov	r1, r3
 80033ee:	f7ff fe97 	bl	8003120 <int_to_str>
	    while (buffTime[ind] != '\0') ind++;
 80033f2:	e004      	b.n	80033fe <init_RTC_Time+0x82>
 80033f4:	4b3f      	ldr	r3, [pc, #252]	@ (80034f4 <init_RTC_Time+0x178>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	3301      	adds	r3, #1
 80033fa:	4a3e      	ldr	r2, [pc, #248]	@ (80034f4 <init_RTC_Time+0x178>)
 80033fc:	6013      	str	r3, [r2, #0]
 80033fe:	4b3d      	ldr	r3, [pc, #244]	@ (80034f4 <init_RTC_Time+0x178>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4a3d      	ldr	r2, [pc, #244]	@ (80034f8 <init_RTC_Time+0x17c>)
 8003404:	5cd3      	ldrb	r3, [r2, r3]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d1f4      	bne.n	80033f4 <init_RTC_Time+0x78>
	    buffTime[ind++] = 58;
 800340a:	4b3a      	ldr	r3, [pc, #232]	@ (80034f4 <init_RTC_Time+0x178>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	1c5a      	adds	r2, r3, #1
 8003410:	4938      	ldr	r1, [pc, #224]	@ (80034f4 <init_RTC_Time+0x178>)
 8003412:	600a      	str	r2, [r1, #0]
 8003414:	4a38      	ldr	r2, [pc, #224]	@ (80034f8 <init_RTC_Time+0x17c>)
 8003416:	213a      	movs	r1, #58	@ 0x3a
 8003418:	54d1      	strb	r1, [r2, r3]

	    if(minutes/10 ==0){
 800341a:	4b34      	ldr	r3, [pc, #208]	@ (80034ec <init_RTC_Time+0x170>)
 800341c:	781b      	ldrb	r3, [r3, #0]
 800341e:	2b09      	cmp	r3, #9
 8003420:	d809      	bhi.n	8003436 <init_RTC_Time+0xba>
			buffTime[ind] = '0';
 8003422:	4b34      	ldr	r3, [pc, #208]	@ (80034f4 <init_RTC_Time+0x178>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4a34      	ldr	r2, [pc, #208]	@ (80034f8 <init_RTC_Time+0x17c>)
 8003428:	2130      	movs	r1, #48	@ 0x30
 800342a:	54d1      	strb	r1, [r2, r3]
			ind++;
 800342c:	4b31      	ldr	r3, [pc, #196]	@ (80034f4 <init_RTC_Time+0x178>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	3301      	adds	r3, #1
 8003432:	4a30      	ldr	r2, [pc, #192]	@ (80034f4 <init_RTC_Time+0x178>)
 8003434:	6013      	str	r3, [r2, #0]
	    	}

	    int_to_str(minutes, buffTime + ind);
 8003436:	4b2d      	ldr	r3, [pc, #180]	@ (80034ec <init_RTC_Time+0x170>)
 8003438:	781b      	ldrb	r3, [r3, #0]
 800343a:	4618      	mov	r0, r3
 800343c:	4b2d      	ldr	r3, [pc, #180]	@ (80034f4 <init_RTC_Time+0x178>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	461a      	mov	r2, r3
 8003442:	4b2d      	ldr	r3, [pc, #180]	@ (80034f8 <init_RTC_Time+0x17c>)
 8003444:	4413      	add	r3, r2
 8003446:	4619      	mov	r1, r3
 8003448:	f7ff fe6a 	bl	8003120 <int_to_str>
	    while (buffTime[ind] != '\0') ind++;
 800344c:	e004      	b.n	8003458 <init_RTC_Time+0xdc>
 800344e:	4b29      	ldr	r3, [pc, #164]	@ (80034f4 <init_RTC_Time+0x178>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	3301      	adds	r3, #1
 8003454:	4a27      	ldr	r2, [pc, #156]	@ (80034f4 <init_RTC_Time+0x178>)
 8003456:	6013      	str	r3, [r2, #0]
 8003458:	4b26      	ldr	r3, [pc, #152]	@ (80034f4 <init_RTC_Time+0x178>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a26      	ldr	r2, [pc, #152]	@ (80034f8 <init_RTC_Time+0x17c>)
 800345e:	5cd3      	ldrb	r3, [r2, r3]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d1f4      	bne.n	800344e <init_RTC_Time+0xd2>
	    buffTime[ind++] = 58;
 8003464:	4b23      	ldr	r3, [pc, #140]	@ (80034f4 <init_RTC_Time+0x178>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	1c5a      	adds	r2, r3, #1
 800346a:	4922      	ldr	r1, [pc, #136]	@ (80034f4 <init_RTC_Time+0x178>)
 800346c:	600a      	str	r2, [r1, #0]
 800346e:	4a22      	ldr	r2, [pc, #136]	@ (80034f8 <init_RTC_Time+0x17c>)
 8003470:	213a      	movs	r1, #58	@ 0x3a
 8003472:	54d1      	strb	r1, [r2, r3]

	    if(seconds/10 == 0){
 8003474:	4b1e      	ldr	r3, [pc, #120]	@ (80034f0 <init_RTC_Time+0x174>)
 8003476:	781b      	ldrb	r3, [r3, #0]
 8003478:	2b09      	cmp	r3, #9
 800347a:	d809      	bhi.n	8003490 <init_RTC_Time+0x114>
	    	buffTime[ind] = '0';
 800347c:	4b1d      	ldr	r3, [pc, #116]	@ (80034f4 <init_RTC_Time+0x178>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a1d      	ldr	r2, [pc, #116]	@ (80034f8 <init_RTC_Time+0x17c>)
 8003482:	2130      	movs	r1, #48	@ 0x30
 8003484:	54d1      	strb	r1, [r2, r3]
	    	ind++;
 8003486:	4b1b      	ldr	r3, [pc, #108]	@ (80034f4 <init_RTC_Time+0x178>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	3301      	adds	r3, #1
 800348c:	4a19      	ldr	r2, [pc, #100]	@ (80034f4 <init_RTC_Time+0x178>)
 800348e:	6013      	str	r3, [r2, #0]
	    	}

	    int_to_str(seconds, buffTime + ind);
 8003490:	4b17      	ldr	r3, [pc, #92]	@ (80034f0 <init_RTC_Time+0x174>)
 8003492:	781b      	ldrb	r3, [r3, #0]
 8003494:	4618      	mov	r0, r3
 8003496:	4b17      	ldr	r3, [pc, #92]	@ (80034f4 <init_RTC_Time+0x178>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	461a      	mov	r2, r3
 800349c:	4b16      	ldr	r3, [pc, #88]	@ (80034f8 <init_RTC_Time+0x17c>)
 800349e:	4413      	add	r3, r2
 80034a0:	4619      	mov	r1, r3
 80034a2:	f7ff fe3d 	bl	8003120 <int_to_str>

		Paint_DrawString_EN (5, 25, buffTime,        &Font24,    MAGENTA,  WHITE);
 80034a6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80034aa:	9301      	str	r3, [sp, #4]
 80034ac:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 80034b0:	9300      	str	r3, [sp, #0]
 80034b2:	4b12      	ldr	r3, [pc, #72]	@ (80034fc <init_RTC_Time+0x180>)
 80034b4:	4a10      	ldr	r2, [pc, #64]	@ (80034f8 <init_RTC_Time+0x17c>)
 80034b6:	2119      	movs	r1, #25
 80034b8:	2005      	movs	r0, #5
 80034ba:	f005 fbb9 	bl	8008c30 <Paint_DrawString_EN>
		pastHours = hours;
 80034be:	4b0a      	ldr	r3, [pc, #40]	@ (80034e8 <init_RTC_Time+0x16c>)
 80034c0:	781a      	ldrb	r2, [r3, #0]
 80034c2:	4b0f      	ldr	r3, [pc, #60]	@ (8003500 <init_RTC_Time+0x184>)
 80034c4:	701a      	strb	r2, [r3, #0]
		pastMinutes = minutes;
 80034c6:	4b09      	ldr	r3, [pc, #36]	@ (80034ec <init_RTC_Time+0x170>)
 80034c8:	781a      	ldrb	r2, [r3, #0]
 80034ca:	4b0e      	ldr	r3, [pc, #56]	@ (8003504 <init_RTC_Time+0x188>)
 80034cc:	701a      	strb	r2, [r3, #0]
		pastSeconds = seconds;
 80034ce:	4b08      	ldr	r3, [pc, #32]	@ (80034f0 <init_RTC_Time+0x174>)
 80034d0:	781a      	ldrb	r2, [r3, #0]
 80034d2:	4b0d      	ldr	r3, [pc, #52]	@ (8003508 <init_RTC_Time+0x18c>)
 80034d4:	701a      	strb	r2, [r3, #0]

}
 80034d6:	bf00      	nop
 80034d8:	46bd      	mov	sp, r7
 80034da:	bd80      	pop	{r7, pc}
 80034dc:	20000568 	.word	0x20000568
 80034e0:	20000318 	.word	0x20000318
 80034e4:	2000057c 	.word	0x2000057c
 80034e8:	20000580 	.word	0x20000580
 80034ec:	20000582 	.word	0x20000582
 80034f0:	20000584 	.word	0x20000584
 80034f4:	20000564 	.word	0x20000564
 80034f8:	20000544 	.word	0x20000544
 80034fc:	2000003c 	.word	0x2000003c
 8003500:	20000581 	.word	0x20000581
 8003504:	20000583 	.word	0x20000583
 8003508:	20000585 	.word	0x20000585

0800350c <refresh_RTC_Time>:

void refresh_RTC_Time(){
 800350c:	b580      	push	{r7, lr}
 800350e:	b082      	sub	sp, #8
 8003510:	af02      	add	r7, sp, #8
	if (HAL_RTC_GetTime(&hrtc, &currentTime, RTC_FORMAT_BIN) == HAL_OK)
 8003512:	2200      	movs	r2, #0
 8003514:	4961      	ldr	r1, [pc, #388]	@ (800369c <refresh_RTC_Time+0x190>)
 8003516:	4862      	ldr	r0, [pc, #392]	@ (80036a0 <refresh_RTC_Time+0x194>)
 8003518:	f003 f92b 	bl	8006772 <HAL_RTC_GetTime>
 800351c:	4603      	mov	r3, r0
 800351e:	2b00      	cmp	r3, #0
 8003520:	d111      	bne.n	8003546 <refresh_RTC_Time+0x3a>
	{
		HAL_RTC_GetDate(&hrtc, &currentDate, RTC_FORMAT_BIN);
 8003522:	2200      	movs	r2, #0
 8003524:	495f      	ldr	r1, [pc, #380]	@ (80036a4 <refresh_RTC_Time+0x198>)
 8003526:	485e      	ldr	r0, [pc, #376]	@ (80036a0 <refresh_RTC_Time+0x194>)
 8003528:	f003 fa05 	bl	8006936 <HAL_RTC_GetDate>
	    hours = currentTime.Hours;
 800352c:	4b5b      	ldr	r3, [pc, #364]	@ (800369c <refresh_RTC_Time+0x190>)
 800352e:	781a      	ldrb	r2, [r3, #0]
 8003530:	4b5d      	ldr	r3, [pc, #372]	@ (80036a8 <refresh_RTC_Time+0x19c>)
 8003532:	701a      	strb	r2, [r3, #0]
	    minutes = currentTime.Minutes;
 8003534:	4b59      	ldr	r3, [pc, #356]	@ (800369c <refresh_RTC_Time+0x190>)
 8003536:	785a      	ldrb	r2, [r3, #1]
 8003538:	4b5c      	ldr	r3, [pc, #368]	@ (80036ac <refresh_RTC_Time+0x1a0>)
 800353a:	701a      	strb	r2, [r3, #0]
	    seconds = currentTime.Seconds;
 800353c:	4b57      	ldr	r3, [pc, #348]	@ (800369c <refresh_RTC_Time+0x190>)
 800353e:	789a      	ldrb	r2, [r3, #2]
 8003540:	4b5b      	ldr	r3, [pc, #364]	@ (80036b0 <refresh_RTC_Time+0x1a4>)
 8003542:	701a      	strb	r2, [r3, #0]
 8003544:	e001      	b.n	800354a <refresh_RTC_Time+0x3e>
	}
	else
	{
		Error_Handler();
 8003546:	f7fe fd91 	bl	800206c <Error_Handler>
	}

if(pastSeconds != seconds){
 800354a:	4b5a      	ldr	r3, [pc, #360]	@ (80036b4 <refresh_RTC_Time+0x1a8>)
 800354c:	781a      	ldrb	r2, [r3, #0]
 800354e:	4b58      	ldr	r3, [pc, #352]	@ (80036b0 <refresh_RTC_Time+0x1a4>)
 8003550:	781b      	ldrb	r3, [r3, #0]
 8003552:	429a      	cmp	r2, r3
 8003554:	d033      	beq.n	80035be <refresh_RTC_Time+0xb2>
	ind = 0;
 8003556:	4b58      	ldr	r3, [pc, #352]	@ (80036b8 <refresh_RTC_Time+0x1ac>)
 8003558:	2200      	movs	r2, #0
 800355a:	601a      	str	r2, [r3, #0]
    if(seconds/10 == 0){
 800355c:	4b54      	ldr	r3, [pc, #336]	@ (80036b0 <refresh_RTC_Time+0x1a4>)
 800355e:	781b      	ldrb	r3, [r3, #0]
 8003560:	2b09      	cmp	r3, #9
 8003562:	d809      	bhi.n	8003578 <refresh_RTC_Time+0x6c>
    	buffTimeRefresh[ind] = '0';
 8003564:	4b54      	ldr	r3, [pc, #336]	@ (80036b8 <refresh_RTC_Time+0x1ac>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4a54      	ldr	r2, [pc, #336]	@ (80036bc <refresh_RTC_Time+0x1b0>)
 800356a:	2130      	movs	r1, #48	@ 0x30
 800356c:	54d1      	strb	r1, [r2, r3]
    	ind++;
 800356e:	4b52      	ldr	r3, [pc, #328]	@ (80036b8 <refresh_RTC_Time+0x1ac>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	3301      	adds	r3, #1
 8003574:	4a50      	ldr	r2, [pc, #320]	@ (80036b8 <refresh_RTC_Time+0x1ac>)
 8003576:	6013      	str	r3, [r2, #0]
    	}
    int_to_str(seconds, buffTimeRefresh + ind);
 8003578:	4b4d      	ldr	r3, [pc, #308]	@ (80036b0 <refresh_RTC_Time+0x1a4>)
 800357a:	781b      	ldrb	r3, [r3, #0]
 800357c:	4618      	mov	r0, r3
 800357e:	4b4e      	ldr	r3, [pc, #312]	@ (80036b8 <refresh_RTC_Time+0x1ac>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	461a      	mov	r2, r3
 8003584:	4b4d      	ldr	r3, [pc, #308]	@ (80036bc <refresh_RTC_Time+0x1b0>)
 8003586:	4413      	add	r3, r2
 8003588:	4619      	mov	r1, r3
 800358a:	f7ff fdc9 	bl	8003120 <int_to_str>
    Paint_DrawString_EN ((5 + 6 * largeurFont24), 25, buffTimeRefresh,        &Font24,    MAGENTA,  WHITE);
 800358e:	4b4c      	ldr	r3, [pc, #304]	@ (80036c0 <refresh_RTC_Time+0x1b4>)
 8003590:	781b      	ldrb	r3, [r3, #0]
 8003592:	461a      	mov	r2, r3
 8003594:	0052      	lsls	r2, r2, #1
 8003596:	4413      	add	r3, r2
 8003598:	005b      	lsls	r3, r3, #1
 800359a:	b29b      	uxth	r3, r3
 800359c:	3305      	adds	r3, #5
 800359e:	b298      	uxth	r0, r3
 80035a0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80035a4:	9301      	str	r3, [sp, #4]
 80035a6:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 80035aa:	9300      	str	r3, [sp, #0]
 80035ac:	4b45      	ldr	r3, [pc, #276]	@ (80036c4 <refresh_RTC_Time+0x1b8>)
 80035ae:	4a43      	ldr	r2, [pc, #268]	@ (80036bc <refresh_RTC_Time+0x1b0>)
 80035b0:	2119      	movs	r1, #25
 80035b2:	f005 fb3d 	bl	8008c30 <Paint_DrawString_EN>
	pastSeconds = seconds;
 80035b6:	4b3e      	ldr	r3, [pc, #248]	@ (80036b0 <refresh_RTC_Time+0x1a4>)
 80035b8:	781a      	ldrb	r2, [r3, #0]
 80035ba:	4b3e      	ldr	r3, [pc, #248]	@ (80036b4 <refresh_RTC_Time+0x1a8>)
 80035bc:	701a      	strb	r2, [r3, #0]
}

if(pastMinutes != minutes){
 80035be:	4b42      	ldr	r3, [pc, #264]	@ (80036c8 <refresh_RTC_Time+0x1bc>)
 80035c0:	781a      	ldrb	r2, [r3, #0]
 80035c2:	4b3a      	ldr	r3, [pc, #232]	@ (80036ac <refresh_RTC_Time+0x1a0>)
 80035c4:	781b      	ldrb	r3, [r3, #0]
 80035c6:	429a      	cmp	r2, r3
 80035c8:	d032      	beq.n	8003630 <refresh_RTC_Time+0x124>
	ind = 0;
 80035ca:	4b3b      	ldr	r3, [pc, #236]	@ (80036b8 <refresh_RTC_Time+0x1ac>)
 80035cc:	2200      	movs	r2, #0
 80035ce:	601a      	str	r2, [r3, #0]
    if(minutes/10 == 0){
 80035d0:	4b36      	ldr	r3, [pc, #216]	@ (80036ac <refresh_RTC_Time+0x1a0>)
 80035d2:	781b      	ldrb	r3, [r3, #0]
 80035d4:	2b09      	cmp	r3, #9
 80035d6:	d809      	bhi.n	80035ec <refresh_RTC_Time+0xe0>
    	buffTimeRefresh[ind] = '0';
 80035d8:	4b37      	ldr	r3, [pc, #220]	@ (80036b8 <refresh_RTC_Time+0x1ac>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4a37      	ldr	r2, [pc, #220]	@ (80036bc <refresh_RTC_Time+0x1b0>)
 80035de:	2130      	movs	r1, #48	@ 0x30
 80035e0:	54d1      	strb	r1, [r2, r3]
    	ind++;
 80035e2:	4b35      	ldr	r3, [pc, #212]	@ (80036b8 <refresh_RTC_Time+0x1ac>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	3301      	adds	r3, #1
 80035e8:	4a33      	ldr	r2, [pc, #204]	@ (80036b8 <refresh_RTC_Time+0x1ac>)
 80035ea:	6013      	str	r3, [r2, #0]
    	}
    int_to_str(minutes, buffTimeRefresh + ind);
 80035ec:	4b2f      	ldr	r3, [pc, #188]	@ (80036ac <refresh_RTC_Time+0x1a0>)
 80035ee:	781b      	ldrb	r3, [r3, #0]
 80035f0:	4618      	mov	r0, r3
 80035f2:	4b31      	ldr	r3, [pc, #196]	@ (80036b8 <refresh_RTC_Time+0x1ac>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	461a      	mov	r2, r3
 80035f8:	4b30      	ldr	r3, [pc, #192]	@ (80036bc <refresh_RTC_Time+0x1b0>)
 80035fa:	4413      	add	r3, r2
 80035fc:	4619      	mov	r1, r3
 80035fe:	f7ff fd8f 	bl	8003120 <int_to_str>
    Paint_DrawString_EN ((5 + 3 * largeurFont24), 25, buffTimeRefresh,        &Font24,    MAGENTA,  WHITE);
 8003602:	4b2f      	ldr	r3, [pc, #188]	@ (80036c0 <refresh_RTC_Time+0x1b4>)
 8003604:	781b      	ldrb	r3, [r3, #0]
 8003606:	461a      	mov	r2, r3
 8003608:	0052      	lsls	r2, r2, #1
 800360a:	4413      	add	r3, r2
 800360c:	b29b      	uxth	r3, r3
 800360e:	3305      	adds	r3, #5
 8003610:	b298      	uxth	r0, r3
 8003612:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003616:	9301      	str	r3, [sp, #4]
 8003618:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 800361c:	9300      	str	r3, [sp, #0]
 800361e:	4b29      	ldr	r3, [pc, #164]	@ (80036c4 <refresh_RTC_Time+0x1b8>)
 8003620:	4a26      	ldr	r2, [pc, #152]	@ (80036bc <refresh_RTC_Time+0x1b0>)
 8003622:	2119      	movs	r1, #25
 8003624:	f005 fb04 	bl	8008c30 <Paint_DrawString_EN>
	pastMinutes = minutes;
 8003628:	4b20      	ldr	r3, [pc, #128]	@ (80036ac <refresh_RTC_Time+0x1a0>)
 800362a:	781a      	ldrb	r2, [r3, #0]
 800362c:	4b26      	ldr	r3, [pc, #152]	@ (80036c8 <refresh_RTC_Time+0x1bc>)
 800362e:	701a      	strb	r2, [r3, #0]
}

if(pastHours != hours){
 8003630:	4b26      	ldr	r3, [pc, #152]	@ (80036cc <refresh_RTC_Time+0x1c0>)
 8003632:	781a      	ldrb	r2, [r3, #0]
 8003634:	4b1c      	ldr	r3, [pc, #112]	@ (80036a8 <refresh_RTC_Time+0x19c>)
 8003636:	781b      	ldrb	r3, [r3, #0]
 8003638:	429a      	cmp	r2, r3
 800363a:	d02b      	beq.n	8003694 <refresh_RTC_Time+0x188>
	ind = 0;
 800363c:	4b1e      	ldr	r3, [pc, #120]	@ (80036b8 <refresh_RTC_Time+0x1ac>)
 800363e:	2200      	movs	r2, #0
 8003640:	601a      	str	r2, [r3, #0]
    if(hours/10 == 0){
 8003642:	4b19      	ldr	r3, [pc, #100]	@ (80036a8 <refresh_RTC_Time+0x19c>)
 8003644:	781b      	ldrb	r3, [r3, #0]
 8003646:	2b09      	cmp	r3, #9
 8003648:	d809      	bhi.n	800365e <refresh_RTC_Time+0x152>
    	buffTimeRefresh[ind] = '0';
 800364a:	4b1b      	ldr	r3, [pc, #108]	@ (80036b8 <refresh_RTC_Time+0x1ac>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4a1b      	ldr	r2, [pc, #108]	@ (80036bc <refresh_RTC_Time+0x1b0>)
 8003650:	2130      	movs	r1, #48	@ 0x30
 8003652:	54d1      	strb	r1, [r2, r3]
    	ind++;
 8003654:	4b18      	ldr	r3, [pc, #96]	@ (80036b8 <refresh_RTC_Time+0x1ac>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	3301      	adds	r3, #1
 800365a:	4a17      	ldr	r2, [pc, #92]	@ (80036b8 <refresh_RTC_Time+0x1ac>)
 800365c:	6013      	str	r3, [r2, #0]
    	}
    int_to_str(hours, buffTimeRefresh + ind);
 800365e:	4b12      	ldr	r3, [pc, #72]	@ (80036a8 <refresh_RTC_Time+0x19c>)
 8003660:	781b      	ldrb	r3, [r3, #0]
 8003662:	4618      	mov	r0, r3
 8003664:	4b14      	ldr	r3, [pc, #80]	@ (80036b8 <refresh_RTC_Time+0x1ac>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	461a      	mov	r2, r3
 800366a:	4b14      	ldr	r3, [pc, #80]	@ (80036bc <refresh_RTC_Time+0x1b0>)
 800366c:	4413      	add	r3, r2
 800366e:	4619      	mov	r1, r3
 8003670:	f7ff fd56 	bl	8003120 <int_to_str>
    Paint_DrawString_EN (5, 25, buffTimeRefresh,        &Font24,    MAGENTA,  WHITE);
 8003674:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003678:	9301      	str	r3, [sp, #4]
 800367a:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 800367e:	9300      	str	r3, [sp, #0]
 8003680:	4b10      	ldr	r3, [pc, #64]	@ (80036c4 <refresh_RTC_Time+0x1b8>)
 8003682:	4a0e      	ldr	r2, [pc, #56]	@ (80036bc <refresh_RTC_Time+0x1b0>)
 8003684:	2119      	movs	r1, #25
 8003686:	2005      	movs	r0, #5
 8003688:	f005 fad2 	bl	8008c30 <Paint_DrawString_EN>
	pastHours = hours;
 800368c:	4b06      	ldr	r3, [pc, #24]	@ (80036a8 <refresh_RTC_Time+0x19c>)
 800368e:	781a      	ldrb	r2, [r3, #0]
 8003690:	4b0e      	ldr	r3, [pc, #56]	@ (80036cc <refresh_RTC_Time+0x1c0>)
 8003692:	701a      	strb	r2, [r3, #0]





}
 8003694:	bf00      	nop
 8003696:	46bd      	mov	sp, r7
 8003698:	bd80      	pop	{r7, pc}
 800369a:	bf00      	nop
 800369c:	20000568 	.word	0x20000568
 80036a0:	20000318 	.word	0x20000318
 80036a4:	2000057c 	.word	0x2000057c
 80036a8:	20000580 	.word	0x20000580
 80036ac:	20000582 	.word	0x20000582
 80036b0:	20000584 	.word	0x20000584
 80036b4:	20000585 	.word	0x20000585
 80036b8:	20000564 	.word	0x20000564
 80036bc:	20000550 	.word	0x20000550
 80036c0:	20000020 	.word	0x20000020
 80036c4:	2000003c 	.word	0x2000003c
 80036c8:	20000583 	.word	0x20000583
 80036cc:	20000581 	.word	0x20000581

080036d0 <affich_RTC_Date>:

void affich_RTC_Date()
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b088      	sub	sp, #32
 80036d4:	af02      	add	r7, sp, #8
	uint8_t year = 0;
 80036d6:	2300      	movs	r3, #0
 80036d8:	75fb      	strb	r3, [r7, #23]
	uint8_t month = 0;
 80036da:	2300      	movs	r3, #0
 80036dc:	75bb      	strb	r3, [r7, #22]
	uint8_t date = 0;
 80036de:	2300      	movs	r3, #0
 80036e0:	757b      	strb	r3, [r7, #21]
	uint8_t weekday = 0;
 80036e2:	2300      	movs	r3, #0
 80036e4:	753b      	strb	r3, [r7, #20]

	if (HAL_RTC_GetDate(&hrtc, &currentDate, RTC_FORMAT_BIN) == HAL_OK)
 80036e6:	2200      	movs	r2, #0
 80036e8:	4954      	ldr	r1, [pc, #336]	@ (800383c <affich_RTC_Date+0x16c>)
 80036ea:	4855      	ldr	r0, [pc, #340]	@ (8003840 <affich_RTC_Date+0x170>)
 80036ec:	f003 f923 	bl	8006936 <HAL_RTC_GetDate>
 80036f0:	4603      	mov	r3, r0
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d10c      	bne.n	8003710 <affich_RTC_Date+0x40>
	{
	    year = currentDate.Year;
 80036f6:	4b51      	ldr	r3, [pc, #324]	@ (800383c <affich_RTC_Date+0x16c>)
 80036f8:	78db      	ldrb	r3, [r3, #3]
 80036fa:	75fb      	strb	r3, [r7, #23]
	    month = currentDate.Month;
 80036fc:	4b4f      	ldr	r3, [pc, #316]	@ (800383c <affich_RTC_Date+0x16c>)
 80036fe:	785b      	ldrb	r3, [r3, #1]
 8003700:	75bb      	strb	r3, [r7, #22]
	    date = currentDate.Date;
 8003702:	4b4e      	ldr	r3, [pc, #312]	@ (800383c <affich_RTC_Date+0x16c>)
 8003704:	789b      	ldrb	r3, [r3, #2]
 8003706:	757b      	strb	r3, [r7, #21]
	    weekday = currentDate.WeekDay;
 8003708:	4b4c      	ldr	r3, [pc, #304]	@ (800383c <affich_RTC_Date+0x16c>)
 800370a:	781b      	ldrb	r3, [r3, #0]
 800370c:	753b      	strb	r3, [r7, #20]
 800370e:	e001      	b.n	8003714 <affich_RTC_Date+0x44>
	}
	else
	{
		Error_Handler();
 8003710:	f7fe fcac 	bl	800206c <Error_Handler>
	}


	switch(weekday)
 8003714:	7d3b      	ldrb	r3, [r7, #20]
 8003716:	3b01      	subs	r3, #1
 8003718:	2b06      	cmp	r3, #6
 800371a:	d86c      	bhi.n	80037f6 <affich_RTC_Date+0x126>
 800371c:	a201      	add	r2, pc, #4	@ (adr r2, 8003724 <affich_RTC_Date+0x54>)
 800371e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003722:	bf00      	nop
 8003724:	08003741 	.word	0x08003741
 8003728:	0800375b 	.word	0x0800375b
 800372c:	08003775 	.word	0x08003775
 8003730:	0800378f 	.word	0x0800378f
 8003734:	080037a9 	.word	0x080037a9
 8003738:	080037c3 	.word	0x080037c3
 800373c:	080037dd 	.word	0x080037dd
	{
			case 1:
				Paint_DrawString_EN (5, 1, "Lundi le ",        &Font24,    MAGENTA,  WHITE);
 8003740:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003744:	9301      	str	r3, [sp, #4]
 8003746:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 800374a:	9300      	str	r3, [sp, #0]
 800374c:	4b3d      	ldr	r3, [pc, #244]	@ (8003844 <affich_RTC_Date+0x174>)
 800374e:	4a3e      	ldr	r2, [pc, #248]	@ (8003848 <affich_RTC_Date+0x178>)
 8003750:	2101      	movs	r1, #1
 8003752:	2005      	movs	r0, #5
 8003754:	f005 fa6c 	bl	8008c30 <Paint_DrawString_EN>
	            break;
 8003758:	e05a      	b.n	8003810 <affich_RTC_Date+0x140>
	        case 2:
				Paint_DrawString_EN (5, 1, "Mardi le ",        &Font24,    MAGENTA,  WHITE);
 800375a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800375e:	9301      	str	r3, [sp, #4]
 8003760:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 8003764:	9300      	str	r3, [sp, #0]
 8003766:	4b37      	ldr	r3, [pc, #220]	@ (8003844 <affich_RTC_Date+0x174>)
 8003768:	4a38      	ldr	r2, [pc, #224]	@ (800384c <affich_RTC_Date+0x17c>)
 800376a:	2101      	movs	r1, #1
 800376c:	2005      	movs	r0, #5
 800376e:	f005 fa5f 	bl	8008c30 <Paint_DrawString_EN>
	            break;
 8003772:	e04d      	b.n	8003810 <affich_RTC_Date+0x140>
	        case 3:
				Paint_DrawString_EN (5, 1, "Mercredi le ",        &Font24,    MAGENTA,  WHITE);
 8003774:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003778:	9301      	str	r3, [sp, #4]
 800377a:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 800377e:	9300      	str	r3, [sp, #0]
 8003780:	4b30      	ldr	r3, [pc, #192]	@ (8003844 <affich_RTC_Date+0x174>)
 8003782:	4a33      	ldr	r2, [pc, #204]	@ (8003850 <affich_RTC_Date+0x180>)
 8003784:	2101      	movs	r1, #1
 8003786:	2005      	movs	r0, #5
 8003788:	f005 fa52 	bl	8008c30 <Paint_DrawString_EN>
	            break;
 800378c:	e040      	b.n	8003810 <affich_RTC_Date+0x140>
	        case 4:
	        	Paint_DrawString_EN (5, 1, "Jeudi le ",        &Font24,    MAGENTA,  WHITE);
 800378e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003792:	9301      	str	r3, [sp, #4]
 8003794:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 8003798:	9300      	str	r3, [sp, #0]
 800379a:	4b2a      	ldr	r3, [pc, #168]	@ (8003844 <affich_RTC_Date+0x174>)
 800379c:	4a2d      	ldr	r2, [pc, #180]	@ (8003854 <affich_RTC_Date+0x184>)
 800379e:	2101      	movs	r1, #1
 80037a0:	2005      	movs	r0, #5
 80037a2:	f005 fa45 	bl	8008c30 <Paint_DrawString_EN>
	            break;
 80037a6:	e033      	b.n	8003810 <affich_RTC_Date+0x140>
	        case 5:
	        	Paint_DrawString_EN (5, 1, "Vendredi le ",        &Font24,    MAGENTA,  WHITE);
 80037a8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80037ac:	9301      	str	r3, [sp, #4]
 80037ae:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 80037b2:	9300      	str	r3, [sp, #0]
 80037b4:	4b23      	ldr	r3, [pc, #140]	@ (8003844 <affich_RTC_Date+0x174>)
 80037b6:	4a28      	ldr	r2, [pc, #160]	@ (8003858 <affich_RTC_Date+0x188>)
 80037b8:	2101      	movs	r1, #1
 80037ba:	2005      	movs	r0, #5
 80037bc:	f005 fa38 	bl	8008c30 <Paint_DrawString_EN>
	            break;
 80037c0:	e026      	b.n	8003810 <affich_RTC_Date+0x140>
	        case 6:
	        	Paint_DrawString_EN (5, 1, "Samedi le ",        &Font24,    MAGENTA,  WHITE);
 80037c2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80037c6:	9301      	str	r3, [sp, #4]
 80037c8:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 80037cc:	9300      	str	r3, [sp, #0]
 80037ce:	4b1d      	ldr	r3, [pc, #116]	@ (8003844 <affich_RTC_Date+0x174>)
 80037d0:	4a22      	ldr	r2, [pc, #136]	@ (800385c <affich_RTC_Date+0x18c>)
 80037d2:	2101      	movs	r1, #1
 80037d4:	2005      	movs	r0, #5
 80037d6:	f005 fa2b 	bl	8008c30 <Paint_DrawString_EN>
	            break;
 80037da:	e019      	b.n	8003810 <affich_RTC_Date+0x140>
	        case RTC_WEEKDAY_SUNDAY:
	        	Paint_DrawString_EN (5, 1, "Dimanche le ",        &Font24,    MAGENTA,  WHITE);
 80037dc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80037e0:	9301      	str	r3, [sp, #4]
 80037e2:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 80037e6:	9300      	str	r3, [sp, #0]
 80037e8:	4b16      	ldr	r3, [pc, #88]	@ (8003844 <affich_RTC_Date+0x174>)
 80037ea:	4a1d      	ldr	r2, [pc, #116]	@ (8003860 <affich_RTC_Date+0x190>)
 80037ec:	2101      	movs	r1, #1
 80037ee:	2005      	movs	r0, #5
 80037f0:	f005 fa1e 	bl	8008c30 <Paint_DrawString_EN>
	            break;
 80037f4:	e00c      	b.n	8003810 <affich_RTC_Date+0x140>
	        default:
	        	Paint_DrawString_EN (5, 1, "Journee ",        &Font24,    MAGENTA,  WHITE);
 80037f6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80037fa:	9301      	str	r3, [sp, #4]
 80037fc:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 8003800:	9300      	str	r3, [sp, #0]
 8003802:	4b10      	ldr	r3, [pc, #64]	@ (8003844 <affich_RTC_Date+0x174>)
 8003804:	4a17      	ldr	r2, [pc, #92]	@ (8003864 <affich_RTC_Date+0x194>)
 8003806:	2101      	movs	r1, #1
 8003808:	2005      	movs	r0, #5
 800380a:	f005 fa11 	bl	8008c30 <Paint_DrawString_EN>
	            break;
 800380e:	bf00      	nop
	}

	char buffDate[15];
	format_date(date, month, year, buffDate);;
 8003810:	7d78      	ldrb	r0, [r7, #21]
 8003812:	7db9      	ldrb	r1, [r7, #22]
 8003814:	7dfa      	ldrb	r2, [r7, #23]
 8003816:	1d3b      	adds	r3, r7, #4
 8003818:	f7ff fcee 	bl	80031f8 <format_date>


	Paint_DrawString_EN (210, 6, buffDate,        &Font16,    MAGENTA,  WHITE);
 800381c:	1d3a      	adds	r2, r7, #4
 800381e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003822:	9301      	str	r3, [sp, #4]
 8003824:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 8003828:	9300      	str	r3, [sp, #0]
 800382a:	4b0f      	ldr	r3, [pc, #60]	@ (8003868 <affich_RTC_Date+0x198>)
 800382c:	2106      	movs	r1, #6
 800382e:	20d2      	movs	r0, #210	@ 0xd2
 8003830:	f005 f9fe 	bl	8008c30 <Paint_DrawString_EN>

}
 8003834:	bf00      	nop
 8003836:	3718      	adds	r7, #24
 8003838:	46bd      	mov	sp, r7
 800383a:	bd80      	pop	{r7, pc}
 800383c:	2000057c 	.word	0x2000057c
 8003840:	20000318 	.word	0x20000318
 8003844:	2000003c 	.word	0x2000003c
 8003848:	0800d990 	.word	0x0800d990
 800384c:	0800d99c 	.word	0x0800d99c
 8003850:	0800d9a8 	.word	0x0800d9a8
 8003854:	0800d9b8 	.word	0x0800d9b8
 8003858:	0800d9c4 	.word	0x0800d9c4
 800385c:	0800d9d4 	.word	0x0800d9d4
 8003860:	0800d9e0 	.word	0x0800d9e0
 8003864:	0800d9f0 	.word	0x0800d9f0
 8003868:	2000002c 	.word	0x2000002c

0800386c <LCD_Manuel>:


void LCD_Manuel(int a)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b084      	sub	sp, #16
 8003870:	af02      	add	r7, sp, #8
 8003872:	6078      	str	r0, [r7, #4]
	if (a == 1){
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2b01      	cmp	r3, #1
 8003878:	d10c      	bne.n	8003894 <LCD_Manuel+0x28>
	Paint_DrawString_EN (120, 75, "1",        &Font24,    MAGENTA,  WHITE);
 800387a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800387e:	9301      	str	r3, [sp, #4]
 8003880:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 8003884:	9300      	str	r3, [sp, #0]
 8003886:	4b1b      	ldr	r3, [pc, #108]	@ (80038f4 <LCD_Manuel+0x88>)
 8003888:	4a1b      	ldr	r2, [pc, #108]	@ (80038f8 <LCD_Manuel+0x8c>)
 800388a:	214b      	movs	r1, #75	@ 0x4b
 800388c:	2078      	movs	r0, #120	@ 0x78
 800388e:	f005 f9cf 	bl	8008c30 <Paint_DrawString_EN>
	Paint_DrawString_EN (120, 75, "3",        &Font24,    MAGENTA,  WHITE);
	}
	else{
	Paint_DrawString_EN (120, 75, "   ",        &Font24,    MAGENTA,  WHITE);
	}
}
 8003892:	e02b      	b.n	80038ec <LCD_Manuel+0x80>
	else if (a == 2){
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2b02      	cmp	r3, #2
 8003898:	d10c      	bne.n	80038b4 <LCD_Manuel+0x48>
	Paint_DrawString_EN (120, 75, "2",        &Font24,    MAGENTA,  WHITE);
 800389a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800389e:	9301      	str	r3, [sp, #4]
 80038a0:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 80038a4:	9300      	str	r3, [sp, #0]
 80038a6:	4b13      	ldr	r3, [pc, #76]	@ (80038f4 <LCD_Manuel+0x88>)
 80038a8:	4a14      	ldr	r2, [pc, #80]	@ (80038fc <LCD_Manuel+0x90>)
 80038aa:	214b      	movs	r1, #75	@ 0x4b
 80038ac:	2078      	movs	r0, #120	@ 0x78
 80038ae:	f005 f9bf 	bl	8008c30 <Paint_DrawString_EN>
}
 80038b2:	e01b      	b.n	80038ec <LCD_Manuel+0x80>
	else if (a==3){
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2b03      	cmp	r3, #3
 80038b8:	d10c      	bne.n	80038d4 <LCD_Manuel+0x68>
	Paint_DrawString_EN (120, 75, "3",        &Font24,    MAGENTA,  WHITE);
 80038ba:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80038be:	9301      	str	r3, [sp, #4]
 80038c0:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 80038c4:	9300      	str	r3, [sp, #0]
 80038c6:	4b0b      	ldr	r3, [pc, #44]	@ (80038f4 <LCD_Manuel+0x88>)
 80038c8:	4a0d      	ldr	r2, [pc, #52]	@ (8003900 <LCD_Manuel+0x94>)
 80038ca:	214b      	movs	r1, #75	@ 0x4b
 80038cc:	2078      	movs	r0, #120	@ 0x78
 80038ce:	f005 f9af 	bl	8008c30 <Paint_DrawString_EN>
}
 80038d2:	e00b      	b.n	80038ec <LCD_Manuel+0x80>
	Paint_DrawString_EN (120, 75, "   ",        &Font24,    MAGENTA,  WHITE);
 80038d4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80038d8:	9301      	str	r3, [sp, #4]
 80038da:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 80038de:	9300      	str	r3, [sp, #0]
 80038e0:	4b04      	ldr	r3, [pc, #16]	@ (80038f4 <LCD_Manuel+0x88>)
 80038e2:	4a08      	ldr	r2, [pc, #32]	@ (8003904 <LCD_Manuel+0x98>)
 80038e4:	214b      	movs	r1, #75	@ 0x4b
 80038e6:	2078      	movs	r0, #120	@ 0x78
 80038e8:	f005 f9a2 	bl	8008c30 <Paint_DrawString_EN>
}
 80038ec:	bf00      	nop
 80038ee:	3708      	adds	r7, #8
 80038f0:	46bd      	mov	sp, r7
 80038f2:	bd80      	pop	{r7, pc}
 80038f4:	2000003c 	.word	0x2000003c
 80038f8:	0800d9fc 	.word	0x0800d9fc
 80038fc:	0800da00 	.word	0x0800da00
 8003900:	0800da04 	.word	0x0800da04
 8003904:	0800da08 	.word	0x0800da08

08003908 <LCD_Mode>:

void LCD_Mode()
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b086      	sub	sp, #24
 800390c:	af02      	add	r7, sp, #8
	char charMode[12];
	strcpy(charMode, Get_Mode_String());
 800390e:	f7fd fba3 	bl	8001058 <Get_Mode_String>
 8003912:	4602      	mov	r2, r0
 8003914:	1d3b      	adds	r3, r7, #4
 8003916:	4611      	mov	r1, r2
 8003918:	4618      	mov	r0, r3
 800391a:	f006 fe0e 	bl	800a53a <strcpy>
	Paint_DrawString_EN (5, 75, charMode,        &Font24,    MAGENTA,  WHITE);
 800391e:	1d3a      	adds	r2, r7, #4
 8003920:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003924:	9301      	str	r3, [sp, #4]
 8003926:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 800392a:	9300      	str	r3, [sp, #0]
 800392c:	4b04      	ldr	r3, [pc, #16]	@ (8003940 <LCD_Mode+0x38>)
 800392e:	214b      	movs	r1, #75	@ 0x4b
 8003930:	2005      	movs	r0, #5
 8003932:	f005 f97d 	bl	8008c30 <Paint_DrawString_EN>
}
 8003936:	bf00      	nop
 8003938:	3710      	adds	r7, #16
 800393a:	46bd      	mov	sp, r7
 800393c:	bd80      	pop	{r7, pc}
 800393e:	bf00      	nop
 8003940:	2000003c 	.word	0x2000003c

08003944 <LCD_Vitesse>:

void LCD_Vitesse(int encod_D, int encod_G)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b084      	sub	sp, #16
 8003948:	af02      	add	r7, sp, #8
 800394a:	6078      	str	r0, [r7, #4]
 800394c:	6039      	str	r1, [r7, #0]


	if(encod_G == 0)
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d108      	bne.n	8003966 <LCD_Vitesse+0x22>
	{
		format_vitesse(vitesseG, buffVG, 0);
 8003954:	4b20      	ldr	r3, [pc, #128]	@ (80039d8 <LCD_Vitesse+0x94>)
 8003956:	881b      	ldrh	r3, [r3, #0]
 8003958:	b29b      	uxth	r3, r3
 800395a:	2200      	movs	r2, #0
 800395c:	491f      	ldr	r1, [pc, #124]	@ (80039dc <LCD_Vitesse+0x98>)
 800395e:	4618      	mov	r0, r3
 8003960:	f7ff fcba 	bl	80032d8 <format_vitesse>
 8003964:	e007      	b.n	8003976 <LCD_Vitesse+0x32>
	}
	else
	{
		format_vitesse(vitesseG, buffVG, 1);
 8003966:	4b1c      	ldr	r3, [pc, #112]	@ (80039d8 <LCD_Vitesse+0x94>)
 8003968:	881b      	ldrh	r3, [r3, #0]
 800396a:	b29b      	uxth	r3, r3
 800396c:	2201      	movs	r2, #1
 800396e:	491b      	ldr	r1, [pc, #108]	@ (80039dc <LCD_Vitesse+0x98>)
 8003970:	4618      	mov	r0, r3
 8003972:	f7ff fcb1 	bl	80032d8 <format_vitesse>
	}

	if(encod_D == 0)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d108      	bne.n	800398e <LCD_Vitesse+0x4a>
	{
		format_vitesse(vitesseD, buffVD, 0);
 800397c:	4b18      	ldr	r3, [pc, #96]	@ (80039e0 <LCD_Vitesse+0x9c>)
 800397e:	881b      	ldrh	r3, [r3, #0]
 8003980:	b29b      	uxth	r3, r3
 8003982:	2200      	movs	r2, #0
 8003984:	4917      	ldr	r1, [pc, #92]	@ (80039e4 <LCD_Vitesse+0xa0>)
 8003986:	4618      	mov	r0, r3
 8003988:	f7ff fca6 	bl	80032d8 <format_vitesse>
 800398c:	e007      	b.n	800399e <LCD_Vitesse+0x5a>
	}
	else
	{
		format_vitesse(vitesseD, buffVD, 1);
 800398e:	4b14      	ldr	r3, [pc, #80]	@ (80039e0 <LCD_Vitesse+0x9c>)
 8003990:	881b      	ldrh	r3, [r3, #0]
 8003992:	b29b      	uxth	r3, r3
 8003994:	2201      	movs	r2, #1
 8003996:	4913      	ldr	r1, [pc, #76]	@ (80039e4 <LCD_Vitesse+0xa0>)
 8003998:	4618      	mov	r0, r3
 800399a:	f7ff fc9d 	bl	80032d8 <format_vitesse>
	}

	Paint_DrawString_EN (180, 105, buffVD,        &Font16,    MAGENTA,  WHITE);
 800399e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80039a2:	9301      	str	r3, [sp, #4]
 80039a4:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 80039a8:	9300      	str	r3, [sp, #0]
 80039aa:	4b0f      	ldr	r3, [pc, #60]	@ (80039e8 <LCD_Vitesse+0xa4>)
 80039ac:	4a0d      	ldr	r2, [pc, #52]	@ (80039e4 <LCD_Vitesse+0xa0>)
 80039ae:	2169      	movs	r1, #105	@ 0x69
 80039b0:	20b4      	movs	r0, #180	@ 0xb4
 80039b2:	f005 f93d 	bl	8008c30 <Paint_DrawString_EN>
	Paint_DrawString_EN (180, 130, buffVG,        &Font16,    MAGENTA,  WHITE);
 80039b6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80039ba:	9301      	str	r3, [sp, #4]
 80039bc:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 80039c0:	9300      	str	r3, [sp, #0]
 80039c2:	4b09      	ldr	r3, [pc, #36]	@ (80039e8 <LCD_Vitesse+0xa4>)
 80039c4:	4a05      	ldr	r2, [pc, #20]	@ (80039dc <LCD_Vitesse+0x98>)
 80039c6:	2182      	movs	r1, #130	@ 0x82
 80039c8:	20b4      	movs	r0, #180	@ 0xb4
 80039ca:	f005 f931 	bl	8008c30 <Paint_DrawString_EN>
}
 80039ce:	bf00      	nop
 80039d0:	3708      	adds	r7, #8
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bd80      	pop	{r7, pc}
 80039d6:	bf00      	nop
 80039d8:	200002c2 	.word	0x200002c2
 80039dc:	20000554 	.word	0x20000554
 80039e0:	200002c0 	.word	0x200002c0
 80039e4:	2000055c 	.word	0x2000055c
 80039e8:	2000002c 	.word	0x2000002c

080039ec <LCD_Init>:

void LCD_Init(uint8_t* a)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b084      	sub	sp, #16
 80039f0:	af02      	add	r7, sp, #8
 80039f2:	6078      	str	r0, [r7, #4]
	DEV_Module_Init();
 80039f4:	f004 fefa 	bl	80087ec <DEV_Module_Init>


	LCD_2IN_SetBackLight(1000);
 80039f8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80039fc:	f005 fbb2 	bl	8009164 <LCD_2IN_SetBackLight>
	LCD_2IN_Init();
 8003a00:	f005 f9f8 	bl	8008df4 <LCD_2IN_Init>
	LCD_2IN_Clear(WHITE);
 8003a04:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8003a08:	f005 fb64 	bl	80090d4 <LCD_2IN_Clear>


	Paint_NewImage(LCD_2IN_WIDTH,LCD_2IN_HEIGHT, ROTATE_90, WHITE);
 8003a0c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003a10:	225a      	movs	r2, #90	@ 0x5a
 8003a12:	f44f 71a0 	mov.w	r1, #320	@ 0x140
 8003a16:	20f0      	movs	r0, #240	@ 0xf0
 8003a18:	f004 ff08 	bl	800882c <Paint_NewImage>


	Paint_SetClearFuntion(LCD_2IN_Clear);
 8003a1c:	485a      	ldr	r0, [pc, #360]	@ (8003b88 <LCD_Init+0x19c>)
 8003a1e:	f004 ff51 	bl	80088c4 <Paint_SetClearFuntion>
	Paint_SetDisplayFuntion(LCD_2IN_DrawPaint);
 8003a22:	485a      	ldr	r0, [pc, #360]	@ (8003b8c <LCD_Init+0x1a0>)
 8003a24:	f004 ff5e 	bl	80088e4 <Paint_SetDisplayFuntion>

  printf("Paint_Clear\r\n");
 8003a28:	4859      	ldr	r0, [pc, #356]	@ (8003b90 <LCD_Init+0x1a4>)
 8003a2a:	f006 fbf7 	bl	800a21c <puts>
	Paint_Clear(MAGENTA);
 8003a2e:	f64f 001f 	movw	r0, #63519	@ 0xf81f
 8003a32:	f005 f841 	bl	8008ab8 <Paint_Clear>
	DEV_Delay_ms(500);
 8003a36:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8003a3a:	f000 f95d 	bl	8003cf8 <HAL_Delay>


	Paint_SetRotate(ROTATE_270);
 8003a3e:	f44f 7087 	mov.w	r0, #270	@ 0x10e
 8003a42:	f004 ff5f 	bl	8008904 <Paint_SetRotate>
	Paint_DrawString_EN (50, 100, "DEMARRAGE DU",        &Font24,    MAGENTA,  WHITE);
 8003a46:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003a4a:	9301      	str	r3, [sp, #4]
 8003a4c:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 8003a50:	9300      	str	r3, [sp, #0]
 8003a52:	4b50      	ldr	r3, [pc, #320]	@ (8003b94 <LCD_Init+0x1a8>)
 8003a54:	4a50      	ldr	r2, [pc, #320]	@ (8003b98 <LCD_Init+0x1ac>)
 8003a56:	2164      	movs	r1, #100	@ 0x64
 8003a58:	2032      	movs	r0, #50	@ 0x32
 8003a5a:	f005 f8e9 	bl	8008c30 <Paint_DrawString_EN>
	Paint_DrawString_EN (100, 125, "PROJET",        &Font24,    MAGENTA,  WHITE);
 8003a5e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003a62:	9301      	str	r3, [sp, #4]
 8003a64:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 8003a68:	9300      	str	r3, [sp, #0]
 8003a6a:	4b4a      	ldr	r3, [pc, #296]	@ (8003b94 <LCD_Init+0x1a8>)
 8003a6c:	4a4b      	ldr	r2, [pc, #300]	@ (8003b9c <LCD_Init+0x1b0>)
 8003a6e:	217d      	movs	r1, #125	@ 0x7d
 8003a70:	2064      	movs	r0, #100	@ 0x64
 8003a72:	f005 f8dd 	bl	8008c30 <Paint_DrawString_EN>
	Paint_DrawString_EN (70, 150, "VROUM-VROUM",        &Font24,    MAGENTA,  WHITE);
 8003a76:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003a7a:	9301      	str	r3, [sp, #4]
 8003a7c:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 8003a80:	9300      	str	r3, [sp, #0]
 8003a82:	4b44      	ldr	r3, [pc, #272]	@ (8003b94 <LCD_Init+0x1a8>)
 8003a84:	4a46      	ldr	r2, [pc, #280]	@ (8003ba0 <LCD_Init+0x1b4>)
 8003a86:	2196      	movs	r1, #150	@ 0x96
 8003a88:	2046      	movs	r0, #70	@ 0x46
 8003a8a:	f005 f8d1 	bl	8008c30 <Paint_DrawString_EN>
	DEV_Delay_ms(500);
 8003a8e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8003a92:	f000 f931 	bl	8003cf8 <HAL_Delay>
	Paint_Clear(MAGENTA);
 8003a96:	f64f 001f 	movw	r0, #63519	@ 0xf81f
 8003a9a:	f005 f80d 	bl	8008ab8 <Paint_Clear>

	Paint_DrawString_EN (85, 100, "LE PROJET",        &Font24,    MAGENTA,  WHITE);
 8003a9e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003aa2:	9301      	str	r3, [sp, #4]
 8003aa4:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 8003aa8:	9300      	str	r3, [sp, #0]
 8003aaa:	4b3a      	ldr	r3, [pc, #232]	@ (8003b94 <LCD_Init+0x1a8>)
 8003aac:	4a3d      	ldr	r2, [pc, #244]	@ (8003ba4 <LCD_Init+0x1b8>)
 8003aae:	2164      	movs	r1, #100	@ 0x64
 8003ab0:	2055      	movs	r0, #85	@ 0x55
 8003ab2:	f005 f8bd 	bl	8008c30 <Paint_DrawString_EN>
	Paint_DrawString_EN (70, 125, "VROUM-VROUM",        &Font24,    MAGENTA,  WHITE);
 8003ab6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003aba:	9301      	str	r3, [sp, #4]
 8003abc:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 8003ac0:	9300      	str	r3, [sp, #0]
 8003ac2:	4b34      	ldr	r3, [pc, #208]	@ (8003b94 <LCD_Init+0x1a8>)
 8003ac4:	4a36      	ldr	r2, [pc, #216]	@ (8003ba0 <LCD_Init+0x1b4>)
 8003ac6:	217d      	movs	r1, #125	@ 0x7d
 8003ac8:	2046      	movs	r0, #70	@ 0x46
 8003aca:	f005 f8b1 	bl	8008c30 <Paint_DrawString_EN>
	Paint_DrawString_EN (85, 150, "VOUS SALUT",        &Font24,    MAGENTA,  WHITE);
 8003ace:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003ad2:	9301      	str	r3, [sp, #4]
 8003ad4:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 8003ad8:	9300      	str	r3, [sp, #0]
 8003ada:	4b2e      	ldr	r3, [pc, #184]	@ (8003b94 <LCD_Init+0x1a8>)
 8003adc:	4a32      	ldr	r2, [pc, #200]	@ (8003ba8 <LCD_Init+0x1bc>)
 8003ade:	2196      	movs	r1, #150	@ 0x96
 8003ae0:	2055      	movs	r0, #85	@ 0x55
 8003ae2:	f005 f8a5 	bl	8008c30 <Paint_DrawString_EN>
	DEV_Delay_ms(500);
 8003ae6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8003aea:	f000 f905 	bl	8003cf8 <HAL_Delay>
	Paint_Clear(MAGENTA);
 8003aee:	f64f 001f 	movw	r0, #63519	@ 0xf81f
 8003af2:	f004 ffe1 	bl	8008ab8 <Paint_Clear>

	affich_RTC_Date();
 8003af6:	f7ff fdeb 	bl	80036d0 <affich_RTC_Date>
	init_RTC_Time();
 8003afa:	f7ff fc3f 	bl	800337c <init_RTC_Time>
	Paint_DrawString_EN (5, 50, "Mode actuel : ",        &Font24,    MAGENTA,  WHITE);
 8003afe:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003b02:	9301      	str	r3, [sp, #4]
 8003b04:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 8003b08:	9300      	str	r3, [sp, #0]
 8003b0a:	4b22      	ldr	r3, [pc, #136]	@ (8003b94 <LCD_Init+0x1a8>)
 8003b0c:	4a27      	ldr	r2, [pc, #156]	@ (8003bac <LCD_Init+0x1c0>)
 8003b0e:	2132      	movs	r1, #50	@ 0x32
 8003b10:	2005      	movs	r0, #5
 8003b12:	f005 f88d 	bl	8008c30 <Paint_DrawString_EN>


	LCD_Mode();
 8003b16:	f7ff fef7 	bl	8003908 <LCD_Mode>
	LCD_Manuel(3);
 8003b1a:	2003      	movs	r0, #3
 8003b1c:	f7ff fea6 	bl	800386c <LCD_Manuel>

	Paint_DrawString_EN (5, 100, "Vitesse G:    mm/s",        &Font24,    MAGENTA,  WHITE);
 8003b20:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003b24:	9301      	str	r3, [sp, #4]
 8003b26:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 8003b2a:	9300      	str	r3, [sp, #0]
 8003b2c:	4b19      	ldr	r3, [pc, #100]	@ (8003b94 <LCD_Init+0x1a8>)
 8003b2e:	4a20      	ldr	r2, [pc, #128]	@ (8003bb0 <LCD_Init+0x1c4>)
 8003b30:	2164      	movs	r1, #100	@ 0x64
 8003b32:	2005      	movs	r0, #5
 8003b34:	f005 f87c 	bl	8008c30 <Paint_DrawString_EN>
	Paint_DrawString_EN (5, 125, "Vitesse D:    mm/s",        &Font24,    MAGENTA,  WHITE);
 8003b38:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003b3c:	9301      	str	r3, [sp, #4]
 8003b3e:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 8003b42:	9300      	str	r3, [sp, #0]
 8003b44:	4b13      	ldr	r3, [pc, #76]	@ (8003b94 <LCD_Init+0x1a8>)
 8003b46:	4a1b      	ldr	r2, [pc, #108]	@ (8003bb4 <LCD_Init+0x1c8>)
 8003b48:	217d      	movs	r1, #125	@ 0x7d
 8003b4a:	2005      	movs	r0, #5
 8003b4c:	f005 f870 	bl	8008c30 <Paint_DrawString_EN>
	Paint_DrawString_EN (10, 220, "Attention aux enfants",        &Font20,    YELLOW,  RED);
 8003b50:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8003b54:	9301      	str	r3, [sp, #4]
 8003b56:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8003b5a:	9300      	str	r3, [sp, #0]
 8003b5c:	4b16      	ldr	r3, [pc, #88]	@ (8003bb8 <LCD_Init+0x1cc>)
 8003b5e:	4a17      	ldr	r2, [pc, #92]	@ (8003bbc <LCD_Init+0x1d0>)
 8003b60:	21dc      	movs	r1, #220	@ 0xdc
 8003b62:	200a      	movs	r0, #10
 8003b64:	f005 f864 	bl	8008c30 <Paint_DrawString_EN>

	LCD_Vitesse(0, 0);
 8003b68:	2100      	movs	r1, #0
 8003b6a:	2000      	movs	r0, #0
 8003b6c:	f7ff feea 	bl	8003944 <LCD_Vitesse>

	DEV_Delay_ms(500);
 8003b70:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8003b74:	f000 f8c0 	bl	8003cf8 <HAL_Delay>

	*a = 1;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2201      	movs	r2, #1
 8003b7c:	701a      	strb	r2, [r3, #0]
	//DEV_Module_Exit();

}
 8003b7e:	bf00      	nop
 8003b80:	3708      	adds	r7, #8
 8003b82:	46bd      	mov	sp, r7
 8003b84:	bd80      	pop	{r7, pc}
 8003b86:	bf00      	nop
 8003b88:	080090d5 	.word	0x080090d5
 8003b8c:	08009135 	.word	0x08009135
 8003b90:	0800da0c 	.word	0x0800da0c
 8003b94:	2000003c 	.word	0x2000003c
 8003b98:	0800da1c 	.word	0x0800da1c
 8003b9c:	0800da2c 	.word	0x0800da2c
 8003ba0:	0800da34 	.word	0x0800da34
 8003ba4:	0800da40 	.word	0x0800da40
 8003ba8:	0800da4c 	.word	0x0800da4c
 8003bac:	0800da58 	.word	0x0800da58
 8003bb0:	0800da68 	.word	0x0800da68
 8003bb4:	0800da7c 	.word	0x0800da7c
 8003bb8:	20000034 	.word	0x20000034
 8003bbc:	0800da90 	.word	0x0800da90

08003bc0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003bc0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003bf8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8003bc4:	f7fe ff02 	bl	80029cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003bc8:	480c      	ldr	r0, [pc, #48]	@ (8003bfc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003bca:	490d      	ldr	r1, [pc, #52]	@ (8003c00 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003bcc:	4a0d      	ldr	r2, [pc, #52]	@ (8003c04 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003bce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003bd0:	e002      	b.n	8003bd8 <LoopCopyDataInit>

08003bd2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003bd2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003bd4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003bd6:	3304      	adds	r3, #4

08003bd8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003bd8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003bda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003bdc:	d3f9      	bcc.n	8003bd2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003bde:	4a0a      	ldr	r2, [pc, #40]	@ (8003c08 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003be0:	4c0a      	ldr	r4, [pc, #40]	@ (8003c0c <LoopFillZerobss+0x22>)
  movs r3, #0
 8003be2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003be4:	e001      	b.n	8003bea <LoopFillZerobss>

08003be6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003be6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003be8:	3204      	adds	r2, #4

08003bea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003bea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003bec:	d3fb      	bcc.n	8003be6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8003bee:	f006 fc7d 	bl	800a4ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003bf2:	f7fe f831 	bl	8001c58 <main>
  bx  lr    
 8003bf6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003bf8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003bfc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003c00:	2000020c 	.word	0x2000020c
  ldr r2, =_sidata
 8003c04:	08011770 	.word	0x08011770
  ldr r2, =_sbss
 8003c08:	2000020c 	.word	0x2000020c
  ldr r4, =_ebss
 8003c0c:	20000714 	.word	0x20000714

08003c10 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003c10:	e7fe      	b.n	8003c10 <ADC_IRQHandler>
	...

08003c14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003c18:	4b0e      	ldr	r3, [pc, #56]	@ (8003c54 <HAL_Init+0x40>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4a0d      	ldr	r2, [pc, #52]	@ (8003c54 <HAL_Init+0x40>)
 8003c1e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003c22:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003c24:	4b0b      	ldr	r3, [pc, #44]	@ (8003c54 <HAL_Init+0x40>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4a0a      	ldr	r2, [pc, #40]	@ (8003c54 <HAL_Init+0x40>)
 8003c2a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003c2e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003c30:	4b08      	ldr	r3, [pc, #32]	@ (8003c54 <HAL_Init+0x40>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4a07      	ldr	r2, [pc, #28]	@ (8003c54 <HAL_Init+0x40>)
 8003c36:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c3a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003c3c:	2003      	movs	r0, #3
 8003c3e:	f000 f94f 	bl	8003ee0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003c42:	2000      	movs	r0, #0
 8003c44:	f000 f808 	bl	8003c58 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003c48:	f7fe fd70 	bl	800272c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003c4c:	2300      	movs	r3, #0
}
 8003c4e:	4618      	mov	r0, r3
 8003c50:	bd80      	pop	{r7, pc}
 8003c52:	bf00      	nop
 8003c54:	40023c00 	.word	0x40023c00

08003c58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b082      	sub	sp, #8
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003c60:	4b12      	ldr	r3, [pc, #72]	@ (8003cac <HAL_InitTick+0x54>)
 8003c62:	681a      	ldr	r2, [r3, #0]
 8003c64:	4b12      	ldr	r3, [pc, #72]	@ (8003cb0 <HAL_InitTick+0x58>)
 8003c66:	781b      	ldrb	r3, [r3, #0]
 8003c68:	4619      	mov	r1, r3
 8003c6a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003c6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003c72:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c76:	4618      	mov	r0, r3
 8003c78:	f000 f967 	bl	8003f4a <HAL_SYSTICK_Config>
 8003c7c:	4603      	mov	r3, r0
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d001      	beq.n	8003c86 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003c82:	2301      	movs	r3, #1
 8003c84:	e00e      	b.n	8003ca4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2b0f      	cmp	r3, #15
 8003c8a:	d80a      	bhi.n	8003ca2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	6879      	ldr	r1, [r7, #4]
 8003c90:	f04f 30ff 	mov.w	r0, #4294967295
 8003c94:	f000 f92f 	bl	8003ef6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003c98:	4a06      	ldr	r2, [pc, #24]	@ (8003cb4 <HAL_InitTick+0x5c>)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	e000      	b.n	8003ca4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003ca2:	2301      	movs	r3, #1
}
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	3708      	adds	r7, #8
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	bd80      	pop	{r7, pc}
 8003cac:	2000001c 	.word	0x2000001c
 8003cb0:	20000028 	.word	0x20000028
 8003cb4:	20000024 	.word	0x20000024

08003cb8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003cb8:	b480      	push	{r7}
 8003cba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003cbc:	4b06      	ldr	r3, [pc, #24]	@ (8003cd8 <HAL_IncTick+0x20>)
 8003cbe:	781b      	ldrb	r3, [r3, #0]
 8003cc0:	461a      	mov	r2, r3
 8003cc2:	4b06      	ldr	r3, [pc, #24]	@ (8003cdc <HAL_IncTick+0x24>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	4413      	add	r3, r2
 8003cc8:	4a04      	ldr	r2, [pc, #16]	@ (8003cdc <HAL_IncTick+0x24>)
 8003cca:	6013      	str	r3, [r2, #0]
}
 8003ccc:	bf00      	nop
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd4:	4770      	bx	lr
 8003cd6:	bf00      	nop
 8003cd8:	20000028 	.word	0x20000028
 8003cdc:	200005a4 	.word	0x200005a4

08003ce0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	af00      	add	r7, sp, #0
  return uwTick;
 8003ce4:	4b03      	ldr	r3, [pc, #12]	@ (8003cf4 <HAL_GetTick+0x14>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
}
 8003ce8:	4618      	mov	r0, r3
 8003cea:	46bd      	mov	sp, r7
 8003cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf0:	4770      	bx	lr
 8003cf2:	bf00      	nop
 8003cf4:	200005a4 	.word	0x200005a4

08003cf8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b084      	sub	sp, #16
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003d00:	f7ff ffee 	bl	8003ce0 <HAL_GetTick>
 8003d04:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d10:	d005      	beq.n	8003d1e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003d12:	4b0a      	ldr	r3, [pc, #40]	@ (8003d3c <HAL_Delay+0x44>)
 8003d14:	781b      	ldrb	r3, [r3, #0]
 8003d16:	461a      	mov	r2, r3
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	4413      	add	r3, r2
 8003d1c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003d1e:	bf00      	nop
 8003d20:	f7ff ffde 	bl	8003ce0 <HAL_GetTick>
 8003d24:	4602      	mov	r2, r0
 8003d26:	68bb      	ldr	r3, [r7, #8]
 8003d28:	1ad3      	subs	r3, r2, r3
 8003d2a:	68fa      	ldr	r2, [r7, #12]
 8003d2c:	429a      	cmp	r2, r3
 8003d2e:	d8f7      	bhi.n	8003d20 <HAL_Delay+0x28>
  {
  }
}
 8003d30:	bf00      	nop
 8003d32:	bf00      	nop
 8003d34:	3710      	adds	r7, #16
 8003d36:	46bd      	mov	sp, r7
 8003d38:	bd80      	pop	{r7, pc}
 8003d3a:	bf00      	nop
 8003d3c:	20000028 	.word	0x20000028

08003d40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d40:	b480      	push	{r7}
 8003d42:	b085      	sub	sp, #20
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	f003 0307 	and.w	r3, r3, #7
 8003d4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003d50:	4b0c      	ldr	r3, [pc, #48]	@ (8003d84 <__NVIC_SetPriorityGrouping+0x44>)
 8003d52:	68db      	ldr	r3, [r3, #12]
 8003d54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003d56:	68ba      	ldr	r2, [r7, #8]
 8003d58:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003d5c:	4013      	ands	r3, r2
 8003d5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003d64:	68bb      	ldr	r3, [r7, #8]
 8003d66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003d68:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003d6c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003d70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003d72:	4a04      	ldr	r2, [pc, #16]	@ (8003d84 <__NVIC_SetPriorityGrouping+0x44>)
 8003d74:	68bb      	ldr	r3, [r7, #8]
 8003d76:	60d3      	str	r3, [r2, #12]
}
 8003d78:	bf00      	nop
 8003d7a:	3714      	adds	r7, #20
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d82:	4770      	bx	lr
 8003d84:	e000ed00 	.word	0xe000ed00

08003d88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003d88:	b480      	push	{r7}
 8003d8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003d8c:	4b04      	ldr	r3, [pc, #16]	@ (8003da0 <__NVIC_GetPriorityGrouping+0x18>)
 8003d8e:	68db      	ldr	r3, [r3, #12]
 8003d90:	0a1b      	lsrs	r3, r3, #8
 8003d92:	f003 0307 	and.w	r3, r3, #7
}
 8003d96:	4618      	mov	r0, r3
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9e:	4770      	bx	lr
 8003da0:	e000ed00 	.word	0xe000ed00

08003da4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003da4:	b480      	push	{r7}
 8003da6:	b083      	sub	sp, #12
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	4603      	mov	r3, r0
 8003dac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003dae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	db0b      	blt.n	8003dce <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003db6:	79fb      	ldrb	r3, [r7, #7]
 8003db8:	f003 021f 	and.w	r2, r3, #31
 8003dbc:	4907      	ldr	r1, [pc, #28]	@ (8003ddc <__NVIC_EnableIRQ+0x38>)
 8003dbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dc2:	095b      	lsrs	r3, r3, #5
 8003dc4:	2001      	movs	r0, #1
 8003dc6:	fa00 f202 	lsl.w	r2, r0, r2
 8003dca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003dce:	bf00      	nop
 8003dd0:	370c      	adds	r7, #12
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd8:	4770      	bx	lr
 8003dda:	bf00      	nop
 8003ddc:	e000e100 	.word	0xe000e100

08003de0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003de0:	b480      	push	{r7}
 8003de2:	b083      	sub	sp, #12
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	4603      	mov	r3, r0
 8003de8:	6039      	str	r1, [r7, #0]
 8003dea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003dec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	db0a      	blt.n	8003e0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	b2da      	uxtb	r2, r3
 8003df8:	490c      	ldr	r1, [pc, #48]	@ (8003e2c <__NVIC_SetPriority+0x4c>)
 8003dfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dfe:	0112      	lsls	r2, r2, #4
 8003e00:	b2d2      	uxtb	r2, r2
 8003e02:	440b      	add	r3, r1
 8003e04:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003e08:	e00a      	b.n	8003e20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	b2da      	uxtb	r2, r3
 8003e0e:	4908      	ldr	r1, [pc, #32]	@ (8003e30 <__NVIC_SetPriority+0x50>)
 8003e10:	79fb      	ldrb	r3, [r7, #7]
 8003e12:	f003 030f 	and.w	r3, r3, #15
 8003e16:	3b04      	subs	r3, #4
 8003e18:	0112      	lsls	r2, r2, #4
 8003e1a:	b2d2      	uxtb	r2, r2
 8003e1c:	440b      	add	r3, r1
 8003e1e:	761a      	strb	r2, [r3, #24]
}
 8003e20:	bf00      	nop
 8003e22:	370c      	adds	r7, #12
 8003e24:	46bd      	mov	sp, r7
 8003e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2a:	4770      	bx	lr
 8003e2c:	e000e100 	.word	0xe000e100
 8003e30:	e000ed00 	.word	0xe000ed00

08003e34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e34:	b480      	push	{r7}
 8003e36:	b089      	sub	sp, #36	@ 0x24
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	60f8      	str	r0, [r7, #12]
 8003e3c:	60b9      	str	r1, [r7, #8]
 8003e3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	f003 0307 	and.w	r3, r3, #7
 8003e46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003e48:	69fb      	ldr	r3, [r7, #28]
 8003e4a:	f1c3 0307 	rsb	r3, r3, #7
 8003e4e:	2b04      	cmp	r3, #4
 8003e50:	bf28      	it	cs
 8003e52:	2304      	movcs	r3, #4
 8003e54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003e56:	69fb      	ldr	r3, [r7, #28]
 8003e58:	3304      	adds	r3, #4
 8003e5a:	2b06      	cmp	r3, #6
 8003e5c:	d902      	bls.n	8003e64 <NVIC_EncodePriority+0x30>
 8003e5e:	69fb      	ldr	r3, [r7, #28]
 8003e60:	3b03      	subs	r3, #3
 8003e62:	e000      	b.n	8003e66 <NVIC_EncodePriority+0x32>
 8003e64:	2300      	movs	r3, #0
 8003e66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e68:	f04f 32ff 	mov.w	r2, #4294967295
 8003e6c:	69bb      	ldr	r3, [r7, #24]
 8003e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e72:	43da      	mvns	r2, r3
 8003e74:	68bb      	ldr	r3, [r7, #8]
 8003e76:	401a      	ands	r2, r3
 8003e78:	697b      	ldr	r3, [r7, #20]
 8003e7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003e7c:	f04f 31ff 	mov.w	r1, #4294967295
 8003e80:	697b      	ldr	r3, [r7, #20]
 8003e82:	fa01 f303 	lsl.w	r3, r1, r3
 8003e86:	43d9      	mvns	r1, r3
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e8c:	4313      	orrs	r3, r2
         );
}
 8003e8e:	4618      	mov	r0, r3
 8003e90:	3724      	adds	r7, #36	@ 0x24
 8003e92:	46bd      	mov	sp, r7
 8003e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e98:	4770      	bx	lr
	...

08003e9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b082      	sub	sp, #8
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	3b01      	subs	r3, #1
 8003ea8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003eac:	d301      	bcc.n	8003eb2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003eae:	2301      	movs	r3, #1
 8003eb0:	e00f      	b.n	8003ed2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003eb2:	4a0a      	ldr	r2, [pc, #40]	@ (8003edc <SysTick_Config+0x40>)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	3b01      	subs	r3, #1
 8003eb8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003eba:	210f      	movs	r1, #15
 8003ebc:	f04f 30ff 	mov.w	r0, #4294967295
 8003ec0:	f7ff ff8e 	bl	8003de0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003ec4:	4b05      	ldr	r3, [pc, #20]	@ (8003edc <SysTick_Config+0x40>)
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003eca:	4b04      	ldr	r3, [pc, #16]	@ (8003edc <SysTick_Config+0x40>)
 8003ecc:	2207      	movs	r2, #7
 8003ece:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003ed0:	2300      	movs	r3, #0
}
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	3708      	adds	r7, #8
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	bd80      	pop	{r7, pc}
 8003eda:	bf00      	nop
 8003edc:	e000e010 	.word	0xe000e010

08003ee0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b082      	sub	sp, #8
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003ee8:	6878      	ldr	r0, [r7, #4]
 8003eea:	f7ff ff29 	bl	8003d40 <__NVIC_SetPriorityGrouping>
}
 8003eee:	bf00      	nop
 8003ef0:	3708      	adds	r7, #8
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	bd80      	pop	{r7, pc}

08003ef6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003ef6:	b580      	push	{r7, lr}
 8003ef8:	b086      	sub	sp, #24
 8003efa:	af00      	add	r7, sp, #0
 8003efc:	4603      	mov	r3, r0
 8003efe:	60b9      	str	r1, [r7, #8]
 8003f00:	607a      	str	r2, [r7, #4]
 8003f02:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003f04:	2300      	movs	r3, #0
 8003f06:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003f08:	f7ff ff3e 	bl	8003d88 <__NVIC_GetPriorityGrouping>
 8003f0c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003f0e:	687a      	ldr	r2, [r7, #4]
 8003f10:	68b9      	ldr	r1, [r7, #8]
 8003f12:	6978      	ldr	r0, [r7, #20]
 8003f14:	f7ff ff8e 	bl	8003e34 <NVIC_EncodePriority>
 8003f18:	4602      	mov	r2, r0
 8003f1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f1e:	4611      	mov	r1, r2
 8003f20:	4618      	mov	r0, r3
 8003f22:	f7ff ff5d 	bl	8003de0 <__NVIC_SetPriority>
}
 8003f26:	bf00      	nop
 8003f28:	3718      	adds	r7, #24
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bd80      	pop	{r7, pc}

08003f2e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f2e:	b580      	push	{r7, lr}
 8003f30:	b082      	sub	sp, #8
 8003f32:	af00      	add	r7, sp, #0
 8003f34:	4603      	mov	r3, r0
 8003f36:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003f38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	f7ff ff31 	bl	8003da4 <__NVIC_EnableIRQ>
}
 8003f42:	bf00      	nop
 8003f44:	3708      	adds	r7, #8
 8003f46:	46bd      	mov	sp, r7
 8003f48:	bd80      	pop	{r7, pc}

08003f4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003f4a:	b580      	push	{r7, lr}
 8003f4c:	b082      	sub	sp, #8
 8003f4e:	af00      	add	r7, sp, #0
 8003f50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003f52:	6878      	ldr	r0, [r7, #4]
 8003f54:	f7ff ffa2 	bl	8003e9c <SysTick_Config>
 8003f58:	4603      	mov	r3, r0
}
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	3708      	adds	r7, #8
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	bd80      	pop	{r7, pc}
	...

08003f64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003f64:	b480      	push	{r7}
 8003f66:	b089      	sub	sp, #36	@ 0x24
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
 8003f6c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003f6e:	2300      	movs	r3, #0
 8003f70:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003f72:	2300      	movs	r3, #0
 8003f74:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003f76:	2300      	movs	r3, #0
 8003f78:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	61fb      	str	r3, [r7, #28]
 8003f7e:	e165      	b.n	800424c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003f80:	2201      	movs	r2, #1
 8003f82:	69fb      	ldr	r3, [r7, #28]
 8003f84:	fa02 f303 	lsl.w	r3, r2, r3
 8003f88:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	697a      	ldr	r2, [r7, #20]
 8003f90:	4013      	ands	r3, r2
 8003f92:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003f94:	693a      	ldr	r2, [r7, #16]
 8003f96:	697b      	ldr	r3, [r7, #20]
 8003f98:	429a      	cmp	r2, r3
 8003f9a:	f040 8154 	bne.w	8004246 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	685b      	ldr	r3, [r3, #4]
 8003fa2:	f003 0303 	and.w	r3, r3, #3
 8003fa6:	2b01      	cmp	r3, #1
 8003fa8:	d005      	beq.n	8003fb6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003fb2:	2b02      	cmp	r3, #2
 8003fb4:	d130      	bne.n	8004018 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	689b      	ldr	r3, [r3, #8]
 8003fba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003fbc:	69fb      	ldr	r3, [r7, #28]
 8003fbe:	005b      	lsls	r3, r3, #1
 8003fc0:	2203      	movs	r2, #3
 8003fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8003fc6:	43db      	mvns	r3, r3
 8003fc8:	69ba      	ldr	r2, [r7, #24]
 8003fca:	4013      	ands	r3, r2
 8003fcc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	68da      	ldr	r2, [r3, #12]
 8003fd2:	69fb      	ldr	r3, [r7, #28]
 8003fd4:	005b      	lsls	r3, r3, #1
 8003fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8003fda:	69ba      	ldr	r2, [r7, #24]
 8003fdc:	4313      	orrs	r3, r2
 8003fde:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	69ba      	ldr	r2, [r7, #24]
 8003fe4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003fec:	2201      	movs	r2, #1
 8003fee:	69fb      	ldr	r3, [r7, #28]
 8003ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ff4:	43db      	mvns	r3, r3
 8003ff6:	69ba      	ldr	r2, [r7, #24]
 8003ff8:	4013      	ands	r3, r2
 8003ffa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	685b      	ldr	r3, [r3, #4]
 8004000:	091b      	lsrs	r3, r3, #4
 8004002:	f003 0201 	and.w	r2, r3, #1
 8004006:	69fb      	ldr	r3, [r7, #28]
 8004008:	fa02 f303 	lsl.w	r3, r2, r3
 800400c:	69ba      	ldr	r2, [r7, #24]
 800400e:	4313      	orrs	r3, r2
 8004010:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	69ba      	ldr	r2, [r7, #24]
 8004016:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	f003 0303 	and.w	r3, r3, #3
 8004020:	2b03      	cmp	r3, #3
 8004022:	d017      	beq.n	8004054 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	68db      	ldr	r3, [r3, #12]
 8004028:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800402a:	69fb      	ldr	r3, [r7, #28]
 800402c:	005b      	lsls	r3, r3, #1
 800402e:	2203      	movs	r2, #3
 8004030:	fa02 f303 	lsl.w	r3, r2, r3
 8004034:	43db      	mvns	r3, r3
 8004036:	69ba      	ldr	r2, [r7, #24]
 8004038:	4013      	ands	r3, r2
 800403a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	689a      	ldr	r2, [r3, #8]
 8004040:	69fb      	ldr	r3, [r7, #28]
 8004042:	005b      	lsls	r3, r3, #1
 8004044:	fa02 f303 	lsl.w	r3, r2, r3
 8004048:	69ba      	ldr	r2, [r7, #24]
 800404a:	4313      	orrs	r3, r2
 800404c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	69ba      	ldr	r2, [r7, #24]
 8004052:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	f003 0303 	and.w	r3, r3, #3
 800405c:	2b02      	cmp	r3, #2
 800405e:	d123      	bne.n	80040a8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004060:	69fb      	ldr	r3, [r7, #28]
 8004062:	08da      	lsrs	r2, r3, #3
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	3208      	adds	r2, #8
 8004068:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800406c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800406e:	69fb      	ldr	r3, [r7, #28]
 8004070:	f003 0307 	and.w	r3, r3, #7
 8004074:	009b      	lsls	r3, r3, #2
 8004076:	220f      	movs	r2, #15
 8004078:	fa02 f303 	lsl.w	r3, r2, r3
 800407c:	43db      	mvns	r3, r3
 800407e:	69ba      	ldr	r2, [r7, #24]
 8004080:	4013      	ands	r3, r2
 8004082:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	691a      	ldr	r2, [r3, #16]
 8004088:	69fb      	ldr	r3, [r7, #28]
 800408a:	f003 0307 	and.w	r3, r3, #7
 800408e:	009b      	lsls	r3, r3, #2
 8004090:	fa02 f303 	lsl.w	r3, r2, r3
 8004094:	69ba      	ldr	r2, [r7, #24]
 8004096:	4313      	orrs	r3, r2
 8004098:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800409a:	69fb      	ldr	r3, [r7, #28]
 800409c:	08da      	lsrs	r2, r3, #3
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	3208      	adds	r2, #8
 80040a2:	69b9      	ldr	r1, [r7, #24]
 80040a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80040ae:	69fb      	ldr	r3, [r7, #28]
 80040b0:	005b      	lsls	r3, r3, #1
 80040b2:	2203      	movs	r2, #3
 80040b4:	fa02 f303 	lsl.w	r3, r2, r3
 80040b8:	43db      	mvns	r3, r3
 80040ba:	69ba      	ldr	r2, [r7, #24]
 80040bc:	4013      	ands	r3, r2
 80040be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	f003 0203 	and.w	r2, r3, #3
 80040c8:	69fb      	ldr	r3, [r7, #28]
 80040ca:	005b      	lsls	r3, r3, #1
 80040cc:	fa02 f303 	lsl.w	r3, r2, r3
 80040d0:	69ba      	ldr	r2, [r7, #24]
 80040d2:	4313      	orrs	r3, r2
 80040d4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	69ba      	ldr	r2, [r7, #24]
 80040da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	685b      	ldr	r3, [r3, #4]
 80040e0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	f000 80ae 	beq.w	8004246 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80040ea:	2300      	movs	r3, #0
 80040ec:	60fb      	str	r3, [r7, #12]
 80040ee:	4b5d      	ldr	r3, [pc, #372]	@ (8004264 <HAL_GPIO_Init+0x300>)
 80040f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040f2:	4a5c      	ldr	r2, [pc, #368]	@ (8004264 <HAL_GPIO_Init+0x300>)
 80040f4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80040f8:	6453      	str	r3, [r2, #68]	@ 0x44
 80040fa:	4b5a      	ldr	r3, [pc, #360]	@ (8004264 <HAL_GPIO_Init+0x300>)
 80040fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040fe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004102:	60fb      	str	r3, [r7, #12]
 8004104:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004106:	4a58      	ldr	r2, [pc, #352]	@ (8004268 <HAL_GPIO_Init+0x304>)
 8004108:	69fb      	ldr	r3, [r7, #28]
 800410a:	089b      	lsrs	r3, r3, #2
 800410c:	3302      	adds	r3, #2
 800410e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004112:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004114:	69fb      	ldr	r3, [r7, #28]
 8004116:	f003 0303 	and.w	r3, r3, #3
 800411a:	009b      	lsls	r3, r3, #2
 800411c:	220f      	movs	r2, #15
 800411e:	fa02 f303 	lsl.w	r3, r2, r3
 8004122:	43db      	mvns	r3, r3
 8004124:	69ba      	ldr	r2, [r7, #24]
 8004126:	4013      	ands	r3, r2
 8004128:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	4a4f      	ldr	r2, [pc, #316]	@ (800426c <HAL_GPIO_Init+0x308>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d025      	beq.n	800417e <HAL_GPIO_Init+0x21a>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	4a4e      	ldr	r2, [pc, #312]	@ (8004270 <HAL_GPIO_Init+0x30c>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d01f      	beq.n	800417a <HAL_GPIO_Init+0x216>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	4a4d      	ldr	r2, [pc, #308]	@ (8004274 <HAL_GPIO_Init+0x310>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d019      	beq.n	8004176 <HAL_GPIO_Init+0x212>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	4a4c      	ldr	r2, [pc, #304]	@ (8004278 <HAL_GPIO_Init+0x314>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d013      	beq.n	8004172 <HAL_GPIO_Init+0x20e>
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	4a4b      	ldr	r2, [pc, #300]	@ (800427c <HAL_GPIO_Init+0x318>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d00d      	beq.n	800416e <HAL_GPIO_Init+0x20a>
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	4a4a      	ldr	r2, [pc, #296]	@ (8004280 <HAL_GPIO_Init+0x31c>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d007      	beq.n	800416a <HAL_GPIO_Init+0x206>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	4a49      	ldr	r2, [pc, #292]	@ (8004284 <HAL_GPIO_Init+0x320>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d101      	bne.n	8004166 <HAL_GPIO_Init+0x202>
 8004162:	2306      	movs	r3, #6
 8004164:	e00c      	b.n	8004180 <HAL_GPIO_Init+0x21c>
 8004166:	2307      	movs	r3, #7
 8004168:	e00a      	b.n	8004180 <HAL_GPIO_Init+0x21c>
 800416a:	2305      	movs	r3, #5
 800416c:	e008      	b.n	8004180 <HAL_GPIO_Init+0x21c>
 800416e:	2304      	movs	r3, #4
 8004170:	e006      	b.n	8004180 <HAL_GPIO_Init+0x21c>
 8004172:	2303      	movs	r3, #3
 8004174:	e004      	b.n	8004180 <HAL_GPIO_Init+0x21c>
 8004176:	2302      	movs	r3, #2
 8004178:	e002      	b.n	8004180 <HAL_GPIO_Init+0x21c>
 800417a:	2301      	movs	r3, #1
 800417c:	e000      	b.n	8004180 <HAL_GPIO_Init+0x21c>
 800417e:	2300      	movs	r3, #0
 8004180:	69fa      	ldr	r2, [r7, #28]
 8004182:	f002 0203 	and.w	r2, r2, #3
 8004186:	0092      	lsls	r2, r2, #2
 8004188:	4093      	lsls	r3, r2
 800418a:	69ba      	ldr	r2, [r7, #24]
 800418c:	4313      	orrs	r3, r2
 800418e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004190:	4935      	ldr	r1, [pc, #212]	@ (8004268 <HAL_GPIO_Init+0x304>)
 8004192:	69fb      	ldr	r3, [r7, #28]
 8004194:	089b      	lsrs	r3, r3, #2
 8004196:	3302      	adds	r3, #2
 8004198:	69ba      	ldr	r2, [r7, #24]
 800419a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800419e:	4b3a      	ldr	r3, [pc, #232]	@ (8004288 <HAL_GPIO_Init+0x324>)
 80041a0:	689b      	ldr	r3, [r3, #8]
 80041a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80041a4:	693b      	ldr	r3, [r7, #16]
 80041a6:	43db      	mvns	r3, r3
 80041a8:	69ba      	ldr	r2, [r7, #24]
 80041aa:	4013      	ands	r3, r2
 80041ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	685b      	ldr	r3, [r3, #4]
 80041b2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d003      	beq.n	80041c2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80041ba:	69ba      	ldr	r2, [r7, #24]
 80041bc:	693b      	ldr	r3, [r7, #16]
 80041be:	4313      	orrs	r3, r2
 80041c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80041c2:	4a31      	ldr	r2, [pc, #196]	@ (8004288 <HAL_GPIO_Init+0x324>)
 80041c4:	69bb      	ldr	r3, [r7, #24]
 80041c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80041c8:	4b2f      	ldr	r3, [pc, #188]	@ (8004288 <HAL_GPIO_Init+0x324>)
 80041ca:	68db      	ldr	r3, [r3, #12]
 80041cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80041ce:	693b      	ldr	r3, [r7, #16]
 80041d0:	43db      	mvns	r3, r3
 80041d2:	69ba      	ldr	r2, [r7, #24]
 80041d4:	4013      	ands	r3, r2
 80041d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	685b      	ldr	r3, [r3, #4]
 80041dc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d003      	beq.n	80041ec <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80041e4:	69ba      	ldr	r2, [r7, #24]
 80041e6:	693b      	ldr	r3, [r7, #16]
 80041e8:	4313      	orrs	r3, r2
 80041ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80041ec:	4a26      	ldr	r2, [pc, #152]	@ (8004288 <HAL_GPIO_Init+0x324>)
 80041ee:	69bb      	ldr	r3, [r7, #24]
 80041f0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80041f2:	4b25      	ldr	r3, [pc, #148]	@ (8004288 <HAL_GPIO_Init+0x324>)
 80041f4:	685b      	ldr	r3, [r3, #4]
 80041f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80041f8:	693b      	ldr	r3, [r7, #16]
 80041fa:	43db      	mvns	r3, r3
 80041fc:	69ba      	ldr	r2, [r7, #24]
 80041fe:	4013      	ands	r3, r2
 8004200:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	685b      	ldr	r3, [r3, #4]
 8004206:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800420a:	2b00      	cmp	r3, #0
 800420c:	d003      	beq.n	8004216 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800420e:	69ba      	ldr	r2, [r7, #24]
 8004210:	693b      	ldr	r3, [r7, #16]
 8004212:	4313      	orrs	r3, r2
 8004214:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004216:	4a1c      	ldr	r2, [pc, #112]	@ (8004288 <HAL_GPIO_Init+0x324>)
 8004218:	69bb      	ldr	r3, [r7, #24]
 800421a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800421c:	4b1a      	ldr	r3, [pc, #104]	@ (8004288 <HAL_GPIO_Init+0x324>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004222:	693b      	ldr	r3, [r7, #16]
 8004224:	43db      	mvns	r3, r3
 8004226:	69ba      	ldr	r2, [r7, #24]
 8004228:	4013      	ands	r3, r2
 800422a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004234:	2b00      	cmp	r3, #0
 8004236:	d003      	beq.n	8004240 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004238:	69ba      	ldr	r2, [r7, #24]
 800423a:	693b      	ldr	r3, [r7, #16]
 800423c:	4313      	orrs	r3, r2
 800423e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004240:	4a11      	ldr	r2, [pc, #68]	@ (8004288 <HAL_GPIO_Init+0x324>)
 8004242:	69bb      	ldr	r3, [r7, #24]
 8004244:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004246:	69fb      	ldr	r3, [r7, #28]
 8004248:	3301      	adds	r3, #1
 800424a:	61fb      	str	r3, [r7, #28]
 800424c:	69fb      	ldr	r3, [r7, #28]
 800424e:	2b0f      	cmp	r3, #15
 8004250:	f67f ae96 	bls.w	8003f80 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004254:	bf00      	nop
 8004256:	bf00      	nop
 8004258:	3724      	adds	r7, #36	@ 0x24
 800425a:	46bd      	mov	sp, r7
 800425c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004260:	4770      	bx	lr
 8004262:	bf00      	nop
 8004264:	40023800 	.word	0x40023800
 8004268:	40013800 	.word	0x40013800
 800426c:	40020000 	.word	0x40020000
 8004270:	40020400 	.word	0x40020400
 8004274:	40020800 	.word	0x40020800
 8004278:	40020c00 	.word	0x40020c00
 800427c:	40021000 	.word	0x40021000
 8004280:	40021400 	.word	0x40021400
 8004284:	40021800 	.word	0x40021800
 8004288:	40013c00 	.word	0x40013c00

0800428c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800428c:	b480      	push	{r7}
 800428e:	b085      	sub	sp, #20
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
 8004294:	460b      	mov	r3, r1
 8004296:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	691a      	ldr	r2, [r3, #16]
 800429c:	887b      	ldrh	r3, [r7, #2]
 800429e:	4013      	ands	r3, r2
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d002      	beq.n	80042aa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80042a4:	2301      	movs	r3, #1
 80042a6:	73fb      	strb	r3, [r7, #15]
 80042a8:	e001      	b.n	80042ae <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80042aa:	2300      	movs	r3, #0
 80042ac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80042ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80042b0:	4618      	mov	r0, r3
 80042b2:	3714      	adds	r7, #20
 80042b4:	46bd      	mov	sp, r7
 80042b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ba:	4770      	bx	lr

080042bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80042bc:	b480      	push	{r7}
 80042be:	b083      	sub	sp, #12
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
 80042c4:	460b      	mov	r3, r1
 80042c6:	807b      	strh	r3, [r7, #2]
 80042c8:	4613      	mov	r3, r2
 80042ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80042cc:	787b      	ldrb	r3, [r7, #1]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d003      	beq.n	80042da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80042d2:	887a      	ldrh	r2, [r7, #2]
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80042d8:	e003      	b.n	80042e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80042da:	887b      	ldrh	r3, [r7, #2]
 80042dc:	041a      	lsls	r2, r3, #16
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	619a      	str	r2, [r3, #24]
}
 80042e2:	bf00      	nop
 80042e4:	370c      	adds	r7, #12
 80042e6:	46bd      	mov	sp, r7
 80042e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ec:	4770      	bx	lr
	...

080042f0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b082      	sub	sp, #8
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	4603      	mov	r3, r0
 80042f8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80042fa:	4b08      	ldr	r3, [pc, #32]	@ (800431c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80042fc:	695a      	ldr	r2, [r3, #20]
 80042fe:	88fb      	ldrh	r3, [r7, #6]
 8004300:	4013      	ands	r3, r2
 8004302:	2b00      	cmp	r3, #0
 8004304:	d006      	beq.n	8004314 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004306:	4a05      	ldr	r2, [pc, #20]	@ (800431c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004308:	88fb      	ldrh	r3, [r7, #6]
 800430a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800430c:	88fb      	ldrh	r3, [r7, #6]
 800430e:	4618      	mov	r0, r3
 8004310:	f7fd fdd2 	bl	8001eb8 <HAL_GPIO_EXTI_Callback>
  }
}
 8004314:	bf00      	nop
 8004316:	3708      	adds	r7, #8
 8004318:	46bd      	mov	sp, r7
 800431a:	bd80      	pop	{r7, pc}
 800431c:	40013c00 	.word	0x40013c00

08004320 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b084      	sub	sp, #16
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d101      	bne.n	8004332 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800432e:	2301      	movs	r3, #1
 8004330:	e12b      	b.n	800458a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004338:	b2db      	uxtb	r3, r3
 800433a:	2b00      	cmp	r3, #0
 800433c:	d106      	bne.n	800434c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2200      	movs	r2, #0
 8004342:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004346:	6878      	ldr	r0, [r7, #4]
 8004348:	f7fd fc3e 	bl	8001bc8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2224      	movs	r2, #36	@ 0x24
 8004350:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	681a      	ldr	r2, [r3, #0]
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f022 0201 	bic.w	r2, r2, #1
 8004362:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	681a      	ldr	r2, [r3, #0]
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004372:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	681a      	ldr	r2, [r3, #0]
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004382:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004384:	f001 f8b8 	bl	80054f8 <HAL_RCC_GetPCLK1Freq>
 8004388:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	685b      	ldr	r3, [r3, #4]
 800438e:	4a81      	ldr	r2, [pc, #516]	@ (8004594 <HAL_I2C_Init+0x274>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d807      	bhi.n	80043a4 <HAL_I2C_Init+0x84>
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	4a80      	ldr	r2, [pc, #512]	@ (8004598 <HAL_I2C_Init+0x278>)
 8004398:	4293      	cmp	r3, r2
 800439a:	bf94      	ite	ls
 800439c:	2301      	movls	r3, #1
 800439e:	2300      	movhi	r3, #0
 80043a0:	b2db      	uxtb	r3, r3
 80043a2:	e006      	b.n	80043b2 <HAL_I2C_Init+0x92>
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	4a7d      	ldr	r2, [pc, #500]	@ (800459c <HAL_I2C_Init+0x27c>)
 80043a8:	4293      	cmp	r3, r2
 80043aa:	bf94      	ite	ls
 80043ac:	2301      	movls	r3, #1
 80043ae:	2300      	movhi	r3, #0
 80043b0:	b2db      	uxtb	r3, r3
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d001      	beq.n	80043ba <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80043b6:	2301      	movs	r3, #1
 80043b8:	e0e7      	b.n	800458a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	4a78      	ldr	r2, [pc, #480]	@ (80045a0 <HAL_I2C_Init+0x280>)
 80043be:	fba2 2303 	umull	r2, r3, r2, r3
 80043c2:	0c9b      	lsrs	r3, r3, #18
 80043c4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	685b      	ldr	r3, [r3, #4]
 80043cc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	68ba      	ldr	r2, [r7, #8]
 80043d6:	430a      	orrs	r2, r1
 80043d8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	6a1b      	ldr	r3, [r3, #32]
 80043e0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	685b      	ldr	r3, [r3, #4]
 80043e8:	4a6a      	ldr	r2, [pc, #424]	@ (8004594 <HAL_I2C_Init+0x274>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d802      	bhi.n	80043f4 <HAL_I2C_Init+0xd4>
 80043ee:	68bb      	ldr	r3, [r7, #8]
 80043f0:	3301      	adds	r3, #1
 80043f2:	e009      	b.n	8004408 <HAL_I2C_Init+0xe8>
 80043f4:	68bb      	ldr	r3, [r7, #8]
 80043f6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80043fa:	fb02 f303 	mul.w	r3, r2, r3
 80043fe:	4a69      	ldr	r2, [pc, #420]	@ (80045a4 <HAL_I2C_Init+0x284>)
 8004400:	fba2 2303 	umull	r2, r3, r2, r3
 8004404:	099b      	lsrs	r3, r3, #6
 8004406:	3301      	adds	r3, #1
 8004408:	687a      	ldr	r2, [r7, #4]
 800440a:	6812      	ldr	r2, [r2, #0]
 800440c:	430b      	orrs	r3, r1
 800440e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	69db      	ldr	r3, [r3, #28]
 8004416:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800441a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	685b      	ldr	r3, [r3, #4]
 8004422:	495c      	ldr	r1, [pc, #368]	@ (8004594 <HAL_I2C_Init+0x274>)
 8004424:	428b      	cmp	r3, r1
 8004426:	d819      	bhi.n	800445c <HAL_I2C_Init+0x13c>
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	1e59      	subs	r1, r3, #1
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	685b      	ldr	r3, [r3, #4]
 8004430:	005b      	lsls	r3, r3, #1
 8004432:	fbb1 f3f3 	udiv	r3, r1, r3
 8004436:	1c59      	adds	r1, r3, #1
 8004438:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800443c:	400b      	ands	r3, r1
 800443e:	2b00      	cmp	r3, #0
 8004440:	d00a      	beq.n	8004458 <HAL_I2C_Init+0x138>
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	1e59      	subs	r1, r3, #1
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	685b      	ldr	r3, [r3, #4]
 800444a:	005b      	lsls	r3, r3, #1
 800444c:	fbb1 f3f3 	udiv	r3, r1, r3
 8004450:	3301      	adds	r3, #1
 8004452:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004456:	e051      	b.n	80044fc <HAL_I2C_Init+0x1dc>
 8004458:	2304      	movs	r3, #4
 800445a:	e04f      	b.n	80044fc <HAL_I2C_Init+0x1dc>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	689b      	ldr	r3, [r3, #8]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d111      	bne.n	8004488 <HAL_I2C_Init+0x168>
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	1e58      	subs	r0, r3, #1
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6859      	ldr	r1, [r3, #4]
 800446c:	460b      	mov	r3, r1
 800446e:	005b      	lsls	r3, r3, #1
 8004470:	440b      	add	r3, r1
 8004472:	fbb0 f3f3 	udiv	r3, r0, r3
 8004476:	3301      	adds	r3, #1
 8004478:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800447c:	2b00      	cmp	r3, #0
 800447e:	bf0c      	ite	eq
 8004480:	2301      	moveq	r3, #1
 8004482:	2300      	movne	r3, #0
 8004484:	b2db      	uxtb	r3, r3
 8004486:	e012      	b.n	80044ae <HAL_I2C_Init+0x18e>
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	1e58      	subs	r0, r3, #1
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6859      	ldr	r1, [r3, #4]
 8004490:	460b      	mov	r3, r1
 8004492:	009b      	lsls	r3, r3, #2
 8004494:	440b      	add	r3, r1
 8004496:	0099      	lsls	r1, r3, #2
 8004498:	440b      	add	r3, r1
 800449a:	fbb0 f3f3 	udiv	r3, r0, r3
 800449e:	3301      	adds	r3, #1
 80044a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	bf0c      	ite	eq
 80044a8:	2301      	moveq	r3, #1
 80044aa:	2300      	movne	r3, #0
 80044ac:	b2db      	uxtb	r3, r3
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d001      	beq.n	80044b6 <HAL_I2C_Init+0x196>
 80044b2:	2301      	movs	r3, #1
 80044b4:	e022      	b.n	80044fc <HAL_I2C_Init+0x1dc>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	689b      	ldr	r3, [r3, #8]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d10e      	bne.n	80044dc <HAL_I2C_Init+0x1bc>
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	1e58      	subs	r0, r3, #1
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6859      	ldr	r1, [r3, #4]
 80044c6:	460b      	mov	r3, r1
 80044c8:	005b      	lsls	r3, r3, #1
 80044ca:	440b      	add	r3, r1
 80044cc:	fbb0 f3f3 	udiv	r3, r0, r3
 80044d0:	3301      	adds	r3, #1
 80044d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044d6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80044da:	e00f      	b.n	80044fc <HAL_I2C_Init+0x1dc>
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	1e58      	subs	r0, r3, #1
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6859      	ldr	r1, [r3, #4]
 80044e4:	460b      	mov	r3, r1
 80044e6:	009b      	lsls	r3, r3, #2
 80044e8:	440b      	add	r3, r1
 80044ea:	0099      	lsls	r1, r3, #2
 80044ec:	440b      	add	r3, r1
 80044ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80044f2:	3301      	adds	r3, #1
 80044f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044f8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80044fc:	6879      	ldr	r1, [r7, #4]
 80044fe:	6809      	ldr	r1, [r1, #0]
 8004500:	4313      	orrs	r3, r2
 8004502:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	69da      	ldr	r2, [r3, #28]
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6a1b      	ldr	r3, [r3, #32]
 8004516:	431a      	orrs	r2, r3
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	430a      	orrs	r2, r1
 800451e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	689b      	ldr	r3, [r3, #8]
 8004526:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800452a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800452e:	687a      	ldr	r2, [r7, #4]
 8004530:	6911      	ldr	r1, [r2, #16]
 8004532:	687a      	ldr	r2, [r7, #4]
 8004534:	68d2      	ldr	r2, [r2, #12]
 8004536:	4311      	orrs	r1, r2
 8004538:	687a      	ldr	r2, [r7, #4]
 800453a:	6812      	ldr	r2, [r2, #0]
 800453c:	430b      	orrs	r3, r1
 800453e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	68db      	ldr	r3, [r3, #12]
 8004546:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	695a      	ldr	r2, [r3, #20]
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	699b      	ldr	r3, [r3, #24]
 8004552:	431a      	orrs	r2, r3
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	430a      	orrs	r2, r1
 800455a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	681a      	ldr	r2, [r3, #0]
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f042 0201 	orr.w	r2, r2, #1
 800456a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2200      	movs	r2, #0
 8004570:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2220      	movs	r2, #32
 8004576:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2200      	movs	r2, #0
 800457e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2200      	movs	r2, #0
 8004584:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004588:	2300      	movs	r3, #0
}
 800458a:	4618      	mov	r0, r3
 800458c:	3710      	adds	r7, #16
 800458e:	46bd      	mov	sp, r7
 8004590:	bd80      	pop	{r7, pc}
 8004592:	bf00      	nop
 8004594:	000186a0 	.word	0x000186a0
 8004598:	001e847f 	.word	0x001e847f
 800459c:	003d08ff 	.word	0x003d08ff
 80045a0:	431bde83 	.word	0x431bde83
 80045a4:	10624dd3 	.word	0x10624dd3

080045a8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b088      	sub	sp, #32
 80045ac:	af02      	add	r7, sp, #8
 80045ae:	60f8      	str	r0, [r7, #12]
 80045b0:	607a      	str	r2, [r7, #4]
 80045b2:	461a      	mov	r2, r3
 80045b4:	460b      	mov	r3, r1
 80045b6:	817b      	strh	r3, [r7, #10]
 80045b8:	4613      	mov	r3, r2
 80045ba:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80045bc:	f7ff fb90 	bl	8003ce0 <HAL_GetTick>
 80045c0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80045c8:	b2db      	uxtb	r3, r3
 80045ca:	2b20      	cmp	r3, #32
 80045cc:	f040 80e0 	bne.w	8004790 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80045d0:	697b      	ldr	r3, [r7, #20]
 80045d2:	9300      	str	r3, [sp, #0]
 80045d4:	2319      	movs	r3, #25
 80045d6:	2201      	movs	r2, #1
 80045d8:	4970      	ldr	r1, [pc, #448]	@ (800479c <HAL_I2C_Master_Transmit+0x1f4>)
 80045da:	68f8      	ldr	r0, [r7, #12]
 80045dc:	f000 fc64 	bl	8004ea8 <I2C_WaitOnFlagUntilTimeout>
 80045e0:	4603      	mov	r3, r0
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d001      	beq.n	80045ea <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80045e6:	2302      	movs	r3, #2
 80045e8:	e0d3      	b.n	8004792 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80045f0:	2b01      	cmp	r3, #1
 80045f2:	d101      	bne.n	80045f8 <HAL_I2C_Master_Transmit+0x50>
 80045f4:	2302      	movs	r3, #2
 80045f6:	e0cc      	b.n	8004792 <HAL_I2C_Master_Transmit+0x1ea>
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	2201      	movs	r2, #1
 80045fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f003 0301 	and.w	r3, r3, #1
 800460a:	2b01      	cmp	r3, #1
 800460c:	d007      	beq.n	800461e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	681a      	ldr	r2, [r3, #0]
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f042 0201 	orr.w	r2, r2, #1
 800461c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	681a      	ldr	r2, [r3, #0]
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800462c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	2221      	movs	r2, #33	@ 0x21
 8004632:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	2210      	movs	r2, #16
 800463a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	2200      	movs	r2, #0
 8004642:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	687a      	ldr	r2, [r7, #4]
 8004648:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	893a      	ldrh	r2, [r7, #8]
 800464e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004654:	b29a      	uxth	r2, r3
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	4a50      	ldr	r2, [pc, #320]	@ (80047a0 <HAL_I2C_Master_Transmit+0x1f8>)
 800465e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004660:	8979      	ldrh	r1, [r7, #10]
 8004662:	697b      	ldr	r3, [r7, #20]
 8004664:	6a3a      	ldr	r2, [r7, #32]
 8004666:	68f8      	ldr	r0, [r7, #12]
 8004668:	f000 face 	bl	8004c08 <I2C_MasterRequestWrite>
 800466c:	4603      	mov	r3, r0
 800466e:	2b00      	cmp	r3, #0
 8004670:	d001      	beq.n	8004676 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004672:	2301      	movs	r3, #1
 8004674:	e08d      	b.n	8004792 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004676:	2300      	movs	r3, #0
 8004678:	613b      	str	r3, [r7, #16]
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	695b      	ldr	r3, [r3, #20]
 8004680:	613b      	str	r3, [r7, #16]
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	699b      	ldr	r3, [r3, #24]
 8004688:	613b      	str	r3, [r7, #16]
 800468a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800468c:	e066      	b.n	800475c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800468e:	697a      	ldr	r2, [r7, #20]
 8004690:	6a39      	ldr	r1, [r7, #32]
 8004692:	68f8      	ldr	r0, [r7, #12]
 8004694:	f000 fd22 	bl	80050dc <I2C_WaitOnTXEFlagUntilTimeout>
 8004698:	4603      	mov	r3, r0
 800469a:	2b00      	cmp	r3, #0
 800469c:	d00d      	beq.n	80046ba <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046a2:	2b04      	cmp	r3, #4
 80046a4:	d107      	bne.n	80046b6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	681a      	ldr	r2, [r3, #0]
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80046b4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80046b6:	2301      	movs	r3, #1
 80046b8:	e06b      	b.n	8004792 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046be:	781a      	ldrb	r2, [r3, #0]
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046ca:	1c5a      	adds	r2, r3, #1
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046d4:	b29b      	uxth	r3, r3
 80046d6:	3b01      	subs	r3, #1
 80046d8:	b29a      	uxth	r2, r3
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046e2:	3b01      	subs	r3, #1
 80046e4:	b29a      	uxth	r2, r3
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	695b      	ldr	r3, [r3, #20]
 80046f0:	f003 0304 	and.w	r3, r3, #4
 80046f4:	2b04      	cmp	r3, #4
 80046f6:	d11b      	bne.n	8004730 <HAL_I2C_Master_Transmit+0x188>
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d017      	beq.n	8004730 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004704:	781a      	ldrb	r2, [r3, #0]
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004710:	1c5a      	adds	r2, r3, #1
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800471a:	b29b      	uxth	r3, r3
 800471c:	3b01      	subs	r3, #1
 800471e:	b29a      	uxth	r2, r3
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004728:	3b01      	subs	r3, #1
 800472a:	b29a      	uxth	r2, r3
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004730:	697a      	ldr	r2, [r7, #20]
 8004732:	6a39      	ldr	r1, [r7, #32]
 8004734:	68f8      	ldr	r0, [r7, #12]
 8004736:	f000 fd19 	bl	800516c <I2C_WaitOnBTFFlagUntilTimeout>
 800473a:	4603      	mov	r3, r0
 800473c:	2b00      	cmp	r3, #0
 800473e:	d00d      	beq.n	800475c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004744:	2b04      	cmp	r3, #4
 8004746:	d107      	bne.n	8004758 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	681a      	ldr	r2, [r3, #0]
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004756:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004758:	2301      	movs	r3, #1
 800475a:	e01a      	b.n	8004792 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004760:	2b00      	cmp	r3, #0
 8004762:	d194      	bne.n	800468e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	681a      	ldr	r2, [r3, #0]
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004772:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	2220      	movs	r2, #32
 8004778:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	2200      	movs	r2, #0
 8004780:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	2200      	movs	r2, #0
 8004788:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800478c:	2300      	movs	r3, #0
 800478e:	e000      	b.n	8004792 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004790:	2302      	movs	r3, #2
  }
}
 8004792:	4618      	mov	r0, r3
 8004794:	3718      	adds	r7, #24
 8004796:	46bd      	mov	sp, r7
 8004798:	bd80      	pop	{r7, pc}
 800479a:	bf00      	nop
 800479c:	00100002 	.word	0x00100002
 80047a0:	ffff0000 	.word	0xffff0000

080047a4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b08c      	sub	sp, #48	@ 0x30
 80047a8:	af02      	add	r7, sp, #8
 80047aa:	60f8      	str	r0, [r7, #12]
 80047ac:	607a      	str	r2, [r7, #4]
 80047ae:	461a      	mov	r2, r3
 80047b0:	460b      	mov	r3, r1
 80047b2:	817b      	strh	r3, [r7, #10]
 80047b4:	4613      	mov	r3, r2
 80047b6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80047b8:	f7ff fa92 	bl	8003ce0 <HAL_GetTick>
 80047bc:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80047c4:	b2db      	uxtb	r3, r3
 80047c6:	2b20      	cmp	r3, #32
 80047c8:	f040 8217 	bne.w	8004bfa <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80047cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047ce:	9300      	str	r3, [sp, #0]
 80047d0:	2319      	movs	r3, #25
 80047d2:	2201      	movs	r2, #1
 80047d4:	497c      	ldr	r1, [pc, #496]	@ (80049c8 <HAL_I2C_Master_Receive+0x224>)
 80047d6:	68f8      	ldr	r0, [r7, #12]
 80047d8:	f000 fb66 	bl	8004ea8 <I2C_WaitOnFlagUntilTimeout>
 80047dc:	4603      	mov	r3, r0
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d001      	beq.n	80047e6 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80047e2:	2302      	movs	r3, #2
 80047e4:	e20a      	b.n	8004bfc <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80047ec:	2b01      	cmp	r3, #1
 80047ee:	d101      	bne.n	80047f4 <HAL_I2C_Master_Receive+0x50>
 80047f0:	2302      	movs	r3, #2
 80047f2:	e203      	b.n	8004bfc <HAL_I2C_Master_Receive+0x458>
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	2201      	movs	r2, #1
 80047f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f003 0301 	and.w	r3, r3, #1
 8004806:	2b01      	cmp	r3, #1
 8004808:	d007      	beq.n	800481a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	681a      	ldr	r2, [r3, #0]
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f042 0201 	orr.w	r2, r2, #1
 8004818:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	681a      	ldr	r2, [r3, #0]
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004828:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	2222      	movs	r2, #34	@ 0x22
 800482e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	2210      	movs	r2, #16
 8004836:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	2200      	movs	r2, #0
 800483e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	687a      	ldr	r2, [r7, #4]
 8004844:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	893a      	ldrh	r2, [r7, #8]
 800484a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004850:	b29a      	uxth	r2, r3
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	4a5c      	ldr	r2, [pc, #368]	@ (80049cc <HAL_I2C_Master_Receive+0x228>)
 800485a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800485c:	8979      	ldrh	r1, [r7, #10]
 800485e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004860:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004862:	68f8      	ldr	r0, [r7, #12]
 8004864:	f000 fa52 	bl	8004d0c <I2C_MasterRequestRead>
 8004868:	4603      	mov	r3, r0
 800486a:	2b00      	cmp	r3, #0
 800486c:	d001      	beq.n	8004872 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800486e:	2301      	movs	r3, #1
 8004870:	e1c4      	b.n	8004bfc <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004876:	2b00      	cmp	r3, #0
 8004878:	d113      	bne.n	80048a2 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800487a:	2300      	movs	r3, #0
 800487c:	623b      	str	r3, [r7, #32]
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	695b      	ldr	r3, [r3, #20]
 8004884:	623b      	str	r3, [r7, #32]
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	699b      	ldr	r3, [r3, #24]
 800488c:	623b      	str	r3, [r7, #32]
 800488e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	681a      	ldr	r2, [r3, #0]
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800489e:	601a      	str	r2, [r3, #0]
 80048a0:	e198      	b.n	8004bd4 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80048a6:	2b01      	cmp	r3, #1
 80048a8:	d11b      	bne.n	80048e2 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	681a      	ldr	r2, [r3, #0]
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80048b8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80048ba:	2300      	movs	r3, #0
 80048bc:	61fb      	str	r3, [r7, #28]
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	695b      	ldr	r3, [r3, #20]
 80048c4:	61fb      	str	r3, [r7, #28]
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	699b      	ldr	r3, [r3, #24]
 80048cc:	61fb      	str	r3, [r7, #28]
 80048ce:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	681a      	ldr	r2, [r3, #0]
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80048de:	601a      	str	r2, [r3, #0]
 80048e0:	e178      	b.n	8004bd4 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80048e6:	2b02      	cmp	r3, #2
 80048e8:	d11b      	bne.n	8004922 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	681a      	ldr	r2, [r3, #0]
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80048f8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	681a      	ldr	r2, [r3, #0]
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004908:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800490a:	2300      	movs	r3, #0
 800490c:	61bb      	str	r3, [r7, #24]
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	695b      	ldr	r3, [r3, #20]
 8004914:	61bb      	str	r3, [r7, #24]
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	699b      	ldr	r3, [r3, #24]
 800491c:	61bb      	str	r3, [r7, #24]
 800491e:	69bb      	ldr	r3, [r7, #24]
 8004920:	e158      	b.n	8004bd4 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	681a      	ldr	r2, [r3, #0]
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004930:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004932:	2300      	movs	r3, #0
 8004934:	617b      	str	r3, [r7, #20]
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	695b      	ldr	r3, [r3, #20]
 800493c:	617b      	str	r3, [r7, #20]
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	699b      	ldr	r3, [r3, #24]
 8004944:	617b      	str	r3, [r7, #20]
 8004946:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004948:	e144      	b.n	8004bd4 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800494e:	2b03      	cmp	r3, #3
 8004950:	f200 80f1 	bhi.w	8004b36 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004958:	2b01      	cmp	r3, #1
 800495a:	d123      	bne.n	80049a4 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800495c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800495e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004960:	68f8      	ldr	r0, [r7, #12]
 8004962:	f000 fc4b 	bl	80051fc <I2C_WaitOnRXNEFlagUntilTimeout>
 8004966:	4603      	mov	r3, r0
 8004968:	2b00      	cmp	r3, #0
 800496a:	d001      	beq.n	8004970 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800496c:	2301      	movs	r3, #1
 800496e:	e145      	b.n	8004bfc <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	691a      	ldr	r2, [r3, #16]
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800497a:	b2d2      	uxtb	r2, r2
 800497c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004982:	1c5a      	adds	r2, r3, #1
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800498c:	3b01      	subs	r3, #1
 800498e:	b29a      	uxth	r2, r3
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004998:	b29b      	uxth	r3, r3
 800499a:	3b01      	subs	r3, #1
 800499c:	b29a      	uxth	r2, r3
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80049a2:	e117      	b.n	8004bd4 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80049a8:	2b02      	cmp	r3, #2
 80049aa:	d14e      	bne.n	8004a4a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80049ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049ae:	9300      	str	r3, [sp, #0]
 80049b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049b2:	2200      	movs	r2, #0
 80049b4:	4906      	ldr	r1, [pc, #24]	@ (80049d0 <HAL_I2C_Master_Receive+0x22c>)
 80049b6:	68f8      	ldr	r0, [r7, #12]
 80049b8:	f000 fa76 	bl	8004ea8 <I2C_WaitOnFlagUntilTimeout>
 80049bc:	4603      	mov	r3, r0
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d008      	beq.n	80049d4 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80049c2:	2301      	movs	r3, #1
 80049c4:	e11a      	b.n	8004bfc <HAL_I2C_Master_Receive+0x458>
 80049c6:	bf00      	nop
 80049c8:	00100002 	.word	0x00100002
 80049cc:	ffff0000 	.word	0xffff0000
 80049d0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	681a      	ldr	r2, [r3, #0]
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80049e2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	691a      	ldr	r2, [r3, #16]
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049ee:	b2d2      	uxtb	r2, r2
 80049f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049f6:	1c5a      	adds	r2, r3, #1
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a00:	3b01      	subs	r3, #1
 8004a02:	b29a      	uxth	r2, r3
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a0c:	b29b      	uxth	r3, r3
 8004a0e:	3b01      	subs	r3, #1
 8004a10:	b29a      	uxth	r2, r3
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	691a      	ldr	r2, [r3, #16]
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a20:	b2d2      	uxtb	r2, r2
 8004a22:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a28:	1c5a      	adds	r2, r3, #1
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a32:	3b01      	subs	r3, #1
 8004a34:	b29a      	uxth	r2, r3
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a3e:	b29b      	uxth	r3, r3
 8004a40:	3b01      	subs	r3, #1
 8004a42:	b29a      	uxth	r2, r3
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004a48:	e0c4      	b.n	8004bd4 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004a4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a4c:	9300      	str	r3, [sp, #0]
 8004a4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a50:	2200      	movs	r2, #0
 8004a52:	496c      	ldr	r1, [pc, #432]	@ (8004c04 <HAL_I2C_Master_Receive+0x460>)
 8004a54:	68f8      	ldr	r0, [r7, #12]
 8004a56:	f000 fa27 	bl	8004ea8 <I2C_WaitOnFlagUntilTimeout>
 8004a5a:	4603      	mov	r3, r0
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d001      	beq.n	8004a64 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8004a60:	2301      	movs	r3, #1
 8004a62:	e0cb      	b.n	8004bfc <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	681a      	ldr	r2, [r3, #0]
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004a72:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	691a      	ldr	r2, [r3, #16]
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a7e:	b2d2      	uxtb	r2, r2
 8004a80:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a86:	1c5a      	adds	r2, r3, #1
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a90:	3b01      	subs	r3, #1
 8004a92:	b29a      	uxth	r2, r3
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a9c:	b29b      	uxth	r3, r3
 8004a9e:	3b01      	subs	r3, #1
 8004aa0:	b29a      	uxth	r2, r3
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004aa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004aa8:	9300      	str	r3, [sp, #0]
 8004aaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004aac:	2200      	movs	r2, #0
 8004aae:	4955      	ldr	r1, [pc, #340]	@ (8004c04 <HAL_I2C_Master_Receive+0x460>)
 8004ab0:	68f8      	ldr	r0, [r7, #12]
 8004ab2:	f000 f9f9 	bl	8004ea8 <I2C_WaitOnFlagUntilTimeout>
 8004ab6:	4603      	mov	r3, r0
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d001      	beq.n	8004ac0 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8004abc:	2301      	movs	r3, #1
 8004abe:	e09d      	b.n	8004bfc <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	681a      	ldr	r2, [r3, #0]
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004ace:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	691a      	ldr	r2, [r3, #16]
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ada:	b2d2      	uxtb	r2, r2
 8004adc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ae2:	1c5a      	adds	r2, r3, #1
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004aec:	3b01      	subs	r3, #1
 8004aee:	b29a      	uxth	r2, r3
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004af8:	b29b      	uxth	r3, r3
 8004afa:	3b01      	subs	r3, #1
 8004afc:	b29a      	uxth	r2, r3
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	691a      	ldr	r2, [r3, #16]
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b0c:	b2d2      	uxtb	r2, r2
 8004b0e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b14:	1c5a      	adds	r2, r3, #1
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b1e:	3b01      	subs	r3, #1
 8004b20:	b29a      	uxth	r2, r3
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b2a:	b29b      	uxth	r3, r3
 8004b2c:	3b01      	subs	r3, #1
 8004b2e:	b29a      	uxth	r2, r3
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004b34:	e04e      	b.n	8004bd4 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b36:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b38:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004b3a:	68f8      	ldr	r0, [r7, #12]
 8004b3c:	f000 fb5e 	bl	80051fc <I2C_WaitOnRXNEFlagUntilTimeout>
 8004b40:	4603      	mov	r3, r0
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d001      	beq.n	8004b4a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8004b46:	2301      	movs	r3, #1
 8004b48:	e058      	b.n	8004bfc <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	691a      	ldr	r2, [r3, #16]
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b54:	b2d2      	uxtb	r2, r2
 8004b56:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b5c:	1c5a      	adds	r2, r3, #1
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b66:	3b01      	subs	r3, #1
 8004b68:	b29a      	uxth	r2, r3
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b72:	b29b      	uxth	r3, r3
 8004b74:	3b01      	subs	r3, #1
 8004b76:	b29a      	uxth	r2, r3
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	695b      	ldr	r3, [r3, #20]
 8004b82:	f003 0304 	and.w	r3, r3, #4
 8004b86:	2b04      	cmp	r3, #4
 8004b88:	d124      	bne.n	8004bd4 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b8e:	2b03      	cmp	r3, #3
 8004b90:	d107      	bne.n	8004ba2 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	681a      	ldr	r2, [r3, #0]
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004ba0:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	691a      	ldr	r2, [r3, #16]
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bac:	b2d2      	uxtb	r2, r2
 8004bae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bb4:	1c5a      	adds	r2, r3, #1
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004bbe:	3b01      	subs	r3, #1
 8004bc0:	b29a      	uxth	r2, r3
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004bca:	b29b      	uxth	r3, r3
 8004bcc:	3b01      	subs	r3, #1
 8004bce:	b29a      	uxth	r2, r3
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	f47f aeb6 	bne.w	800494a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	2220      	movs	r2, #32
 8004be2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	2200      	movs	r2, #0
 8004bea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	e000      	b.n	8004bfc <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8004bfa:	2302      	movs	r3, #2
  }
}
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	3728      	adds	r7, #40	@ 0x28
 8004c00:	46bd      	mov	sp, r7
 8004c02:	bd80      	pop	{r7, pc}
 8004c04:	00010004 	.word	0x00010004

08004c08 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b088      	sub	sp, #32
 8004c0c:	af02      	add	r7, sp, #8
 8004c0e:	60f8      	str	r0, [r7, #12]
 8004c10:	607a      	str	r2, [r7, #4]
 8004c12:	603b      	str	r3, [r7, #0]
 8004c14:	460b      	mov	r3, r1
 8004c16:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c1c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004c1e:	697b      	ldr	r3, [r7, #20]
 8004c20:	2b08      	cmp	r3, #8
 8004c22:	d006      	beq.n	8004c32 <I2C_MasterRequestWrite+0x2a>
 8004c24:	697b      	ldr	r3, [r7, #20]
 8004c26:	2b01      	cmp	r3, #1
 8004c28:	d003      	beq.n	8004c32 <I2C_MasterRequestWrite+0x2a>
 8004c2a:	697b      	ldr	r3, [r7, #20]
 8004c2c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004c30:	d108      	bne.n	8004c44 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	681a      	ldr	r2, [r3, #0]
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004c40:	601a      	str	r2, [r3, #0]
 8004c42:	e00b      	b.n	8004c5c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c48:	2b12      	cmp	r3, #18
 8004c4a:	d107      	bne.n	8004c5c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	681a      	ldr	r2, [r3, #0]
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004c5a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	9300      	str	r3, [sp, #0]
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2200      	movs	r2, #0
 8004c64:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004c68:	68f8      	ldr	r0, [r7, #12]
 8004c6a:	f000 f91d 	bl	8004ea8 <I2C_WaitOnFlagUntilTimeout>
 8004c6e:	4603      	mov	r3, r0
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d00d      	beq.n	8004c90 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c7e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004c82:	d103      	bne.n	8004c8c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004c8a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004c8c:	2303      	movs	r3, #3
 8004c8e:	e035      	b.n	8004cfc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	691b      	ldr	r3, [r3, #16]
 8004c94:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004c98:	d108      	bne.n	8004cac <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004c9a:	897b      	ldrh	r3, [r7, #10]
 8004c9c:	b2db      	uxtb	r3, r3
 8004c9e:	461a      	mov	r2, r3
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004ca8:	611a      	str	r2, [r3, #16]
 8004caa:	e01b      	b.n	8004ce4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004cac:	897b      	ldrh	r3, [r7, #10]
 8004cae:	11db      	asrs	r3, r3, #7
 8004cb0:	b2db      	uxtb	r3, r3
 8004cb2:	f003 0306 	and.w	r3, r3, #6
 8004cb6:	b2db      	uxtb	r3, r3
 8004cb8:	f063 030f 	orn	r3, r3, #15
 8004cbc:	b2da      	uxtb	r2, r3
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	687a      	ldr	r2, [r7, #4]
 8004cc8:	490e      	ldr	r1, [pc, #56]	@ (8004d04 <I2C_MasterRequestWrite+0xfc>)
 8004cca:	68f8      	ldr	r0, [r7, #12]
 8004ccc:	f000 f966 	bl	8004f9c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004cd0:	4603      	mov	r3, r0
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d001      	beq.n	8004cda <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	e010      	b.n	8004cfc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004cda:	897b      	ldrh	r3, [r7, #10]
 8004cdc:	b2da      	uxtb	r2, r3
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	687a      	ldr	r2, [r7, #4]
 8004ce8:	4907      	ldr	r1, [pc, #28]	@ (8004d08 <I2C_MasterRequestWrite+0x100>)
 8004cea:	68f8      	ldr	r0, [r7, #12]
 8004cec:	f000 f956 	bl	8004f9c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004cf0:	4603      	mov	r3, r0
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d001      	beq.n	8004cfa <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	e000      	b.n	8004cfc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004cfa:	2300      	movs	r3, #0
}
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	3718      	adds	r7, #24
 8004d00:	46bd      	mov	sp, r7
 8004d02:	bd80      	pop	{r7, pc}
 8004d04:	00010008 	.word	0x00010008
 8004d08:	00010002 	.word	0x00010002

08004d0c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b088      	sub	sp, #32
 8004d10:	af02      	add	r7, sp, #8
 8004d12:	60f8      	str	r0, [r7, #12]
 8004d14:	607a      	str	r2, [r7, #4]
 8004d16:	603b      	str	r3, [r7, #0]
 8004d18:	460b      	mov	r3, r1
 8004d1a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d20:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	681a      	ldr	r2, [r3, #0]
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004d30:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004d32:	697b      	ldr	r3, [r7, #20]
 8004d34:	2b08      	cmp	r3, #8
 8004d36:	d006      	beq.n	8004d46 <I2C_MasterRequestRead+0x3a>
 8004d38:	697b      	ldr	r3, [r7, #20]
 8004d3a:	2b01      	cmp	r3, #1
 8004d3c:	d003      	beq.n	8004d46 <I2C_MasterRequestRead+0x3a>
 8004d3e:	697b      	ldr	r3, [r7, #20]
 8004d40:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004d44:	d108      	bne.n	8004d58 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	681a      	ldr	r2, [r3, #0]
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004d54:	601a      	str	r2, [r3, #0]
 8004d56:	e00b      	b.n	8004d70 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d5c:	2b11      	cmp	r3, #17
 8004d5e:	d107      	bne.n	8004d70 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	681a      	ldr	r2, [r3, #0]
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004d6e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	9300      	str	r3, [sp, #0]
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2200      	movs	r2, #0
 8004d78:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004d7c:	68f8      	ldr	r0, [r7, #12]
 8004d7e:	f000 f893 	bl	8004ea8 <I2C_WaitOnFlagUntilTimeout>
 8004d82:	4603      	mov	r3, r0
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d00d      	beq.n	8004da4 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d92:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004d96:	d103      	bne.n	8004da0 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004d9e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004da0:	2303      	movs	r3, #3
 8004da2:	e079      	b.n	8004e98 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	691b      	ldr	r3, [r3, #16]
 8004da8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004dac:	d108      	bne.n	8004dc0 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004dae:	897b      	ldrh	r3, [r7, #10]
 8004db0:	b2db      	uxtb	r3, r3
 8004db2:	f043 0301 	orr.w	r3, r3, #1
 8004db6:	b2da      	uxtb	r2, r3
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	611a      	str	r2, [r3, #16]
 8004dbe:	e05f      	b.n	8004e80 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004dc0:	897b      	ldrh	r3, [r7, #10]
 8004dc2:	11db      	asrs	r3, r3, #7
 8004dc4:	b2db      	uxtb	r3, r3
 8004dc6:	f003 0306 	and.w	r3, r3, #6
 8004dca:	b2db      	uxtb	r3, r3
 8004dcc:	f063 030f 	orn	r3, r3, #15
 8004dd0:	b2da      	uxtb	r2, r3
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	687a      	ldr	r2, [r7, #4]
 8004ddc:	4930      	ldr	r1, [pc, #192]	@ (8004ea0 <I2C_MasterRequestRead+0x194>)
 8004dde:	68f8      	ldr	r0, [r7, #12]
 8004de0:	f000 f8dc 	bl	8004f9c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004de4:	4603      	mov	r3, r0
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d001      	beq.n	8004dee <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8004dea:	2301      	movs	r3, #1
 8004dec:	e054      	b.n	8004e98 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004dee:	897b      	ldrh	r3, [r7, #10]
 8004df0:	b2da      	uxtb	r2, r3
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	687a      	ldr	r2, [r7, #4]
 8004dfc:	4929      	ldr	r1, [pc, #164]	@ (8004ea4 <I2C_MasterRequestRead+0x198>)
 8004dfe:	68f8      	ldr	r0, [r7, #12]
 8004e00:	f000 f8cc 	bl	8004f9c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004e04:	4603      	mov	r3, r0
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d001      	beq.n	8004e0e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8004e0a:	2301      	movs	r3, #1
 8004e0c:	e044      	b.n	8004e98 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e0e:	2300      	movs	r3, #0
 8004e10:	613b      	str	r3, [r7, #16]
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	695b      	ldr	r3, [r3, #20]
 8004e18:	613b      	str	r3, [r7, #16]
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	699b      	ldr	r3, [r3, #24]
 8004e20:	613b      	str	r3, [r7, #16]
 8004e22:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	681a      	ldr	r2, [r3, #0]
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004e32:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	9300      	str	r3, [sp, #0]
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004e40:	68f8      	ldr	r0, [r7, #12]
 8004e42:	f000 f831 	bl	8004ea8 <I2C_WaitOnFlagUntilTimeout>
 8004e46:	4603      	mov	r3, r0
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d00d      	beq.n	8004e68 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e56:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004e5a:	d103      	bne.n	8004e64 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004e62:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8004e64:	2303      	movs	r3, #3
 8004e66:	e017      	b.n	8004e98 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004e68:	897b      	ldrh	r3, [r7, #10]
 8004e6a:	11db      	asrs	r3, r3, #7
 8004e6c:	b2db      	uxtb	r3, r3
 8004e6e:	f003 0306 	and.w	r3, r3, #6
 8004e72:	b2db      	uxtb	r3, r3
 8004e74:	f063 030e 	orn	r3, r3, #14
 8004e78:	b2da      	uxtb	r2, r3
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	687a      	ldr	r2, [r7, #4]
 8004e84:	4907      	ldr	r1, [pc, #28]	@ (8004ea4 <I2C_MasterRequestRead+0x198>)
 8004e86:	68f8      	ldr	r0, [r7, #12]
 8004e88:	f000 f888 	bl	8004f9c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004e8c:	4603      	mov	r3, r0
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d001      	beq.n	8004e96 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8004e92:	2301      	movs	r3, #1
 8004e94:	e000      	b.n	8004e98 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8004e96:	2300      	movs	r3, #0
}
 8004e98:	4618      	mov	r0, r3
 8004e9a:	3718      	adds	r7, #24
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	bd80      	pop	{r7, pc}
 8004ea0:	00010008 	.word	0x00010008
 8004ea4:	00010002 	.word	0x00010002

08004ea8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b084      	sub	sp, #16
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	60f8      	str	r0, [r7, #12]
 8004eb0:	60b9      	str	r1, [r7, #8]
 8004eb2:	603b      	str	r3, [r7, #0]
 8004eb4:	4613      	mov	r3, r2
 8004eb6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004eb8:	e048      	b.n	8004f4c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ec0:	d044      	beq.n	8004f4c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ec2:	f7fe ff0d 	bl	8003ce0 <HAL_GetTick>
 8004ec6:	4602      	mov	r2, r0
 8004ec8:	69bb      	ldr	r3, [r7, #24]
 8004eca:	1ad3      	subs	r3, r2, r3
 8004ecc:	683a      	ldr	r2, [r7, #0]
 8004ece:	429a      	cmp	r2, r3
 8004ed0:	d302      	bcc.n	8004ed8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d139      	bne.n	8004f4c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004ed8:	68bb      	ldr	r3, [r7, #8]
 8004eda:	0c1b      	lsrs	r3, r3, #16
 8004edc:	b2db      	uxtb	r3, r3
 8004ede:	2b01      	cmp	r3, #1
 8004ee0:	d10d      	bne.n	8004efe <I2C_WaitOnFlagUntilTimeout+0x56>
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	695b      	ldr	r3, [r3, #20]
 8004ee8:	43da      	mvns	r2, r3
 8004eea:	68bb      	ldr	r3, [r7, #8]
 8004eec:	4013      	ands	r3, r2
 8004eee:	b29b      	uxth	r3, r3
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	bf0c      	ite	eq
 8004ef4:	2301      	moveq	r3, #1
 8004ef6:	2300      	movne	r3, #0
 8004ef8:	b2db      	uxtb	r3, r3
 8004efa:	461a      	mov	r2, r3
 8004efc:	e00c      	b.n	8004f18 <I2C_WaitOnFlagUntilTimeout+0x70>
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	699b      	ldr	r3, [r3, #24]
 8004f04:	43da      	mvns	r2, r3
 8004f06:	68bb      	ldr	r3, [r7, #8]
 8004f08:	4013      	ands	r3, r2
 8004f0a:	b29b      	uxth	r3, r3
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	bf0c      	ite	eq
 8004f10:	2301      	moveq	r3, #1
 8004f12:	2300      	movne	r3, #0
 8004f14:	b2db      	uxtb	r3, r3
 8004f16:	461a      	mov	r2, r3
 8004f18:	79fb      	ldrb	r3, [r7, #7]
 8004f1a:	429a      	cmp	r2, r3
 8004f1c:	d116      	bne.n	8004f4c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	2200      	movs	r2, #0
 8004f22:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	2220      	movs	r2, #32
 8004f28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	2200      	movs	r2, #0
 8004f30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f38:	f043 0220 	orr.w	r2, r3, #32
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	2200      	movs	r2, #0
 8004f44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004f48:	2301      	movs	r3, #1
 8004f4a:	e023      	b.n	8004f94 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004f4c:	68bb      	ldr	r3, [r7, #8]
 8004f4e:	0c1b      	lsrs	r3, r3, #16
 8004f50:	b2db      	uxtb	r3, r3
 8004f52:	2b01      	cmp	r3, #1
 8004f54:	d10d      	bne.n	8004f72 <I2C_WaitOnFlagUntilTimeout+0xca>
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	695b      	ldr	r3, [r3, #20]
 8004f5c:	43da      	mvns	r2, r3
 8004f5e:	68bb      	ldr	r3, [r7, #8]
 8004f60:	4013      	ands	r3, r2
 8004f62:	b29b      	uxth	r3, r3
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	bf0c      	ite	eq
 8004f68:	2301      	moveq	r3, #1
 8004f6a:	2300      	movne	r3, #0
 8004f6c:	b2db      	uxtb	r3, r3
 8004f6e:	461a      	mov	r2, r3
 8004f70:	e00c      	b.n	8004f8c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	699b      	ldr	r3, [r3, #24]
 8004f78:	43da      	mvns	r2, r3
 8004f7a:	68bb      	ldr	r3, [r7, #8]
 8004f7c:	4013      	ands	r3, r2
 8004f7e:	b29b      	uxth	r3, r3
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	bf0c      	ite	eq
 8004f84:	2301      	moveq	r3, #1
 8004f86:	2300      	movne	r3, #0
 8004f88:	b2db      	uxtb	r3, r3
 8004f8a:	461a      	mov	r2, r3
 8004f8c:	79fb      	ldrb	r3, [r7, #7]
 8004f8e:	429a      	cmp	r2, r3
 8004f90:	d093      	beq.n	8004eba <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004f92:	2300      	movs	r3, #0
}
 8004f94:	4618      	mov	r0, r3
 8004f96:	3710      	adds	r7, #16
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	bd80      	pop	{r7, pc}

08004f9c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b084      	sub	sp, #16
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	60f8      	str	r0, [r7, #12]
 8004fa4:	60b9      	str	r1, [r7, #8]
 8004fa6:	607a      	str	r2, [r7, #4]
 8004fa8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004faa:	e071      	b.n	8005090 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	695b      	ldr	r3, [r3, #20]
 8004fb2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004fb6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004fba:	d123      	bne.n	8005004 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	681a      	ldr	r2, [r3, #0]
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004fca:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004fd4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	2200      	movs	r2, #0
 8004fda:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	2220      	movs	r2, #32
 8004fe0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ff0:	f043 0204 	orr.w	r2, r3, #4
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005000:	2301      	movs	r3, #1
 8005002:	e067      	b.n	80050d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	f1b3 3fff 	cmp.w	r3, #4294967295
 800500a:	d041      	beq.n	8005090 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800500c:	f7fe fe68 	bl	8003ce0 <HAL_GetTick>
 8005010:	4602      	mov	r2, r0
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	1ad3      	subs	r3, r2, r3
 8005016:	687a      	ldr	r2, [r7, #4]
 8005018:	429a      	cmp	r2, r3
 800501a:	d302      	bcc.n	8005022 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d136      	bne.n	8005090 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8005022:	68bb      	ldr	r3, [r7, #8]
 8005024:	0c1b      	lsrs	r3, r3, #16
 8005026:	b2db      	uxtb	r3, r3
 8005028:	2b01      	cmp	r3, #1
 800502a:	d10c      	bne.n	8005046 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	695b      	ldr	r3, [r3, #20]
 8005032:	43da      	mvns	r2, r3
 8005034:	68bb      	ldr	r3, [r7, #8]
 8005036:	4013      	ands	r3, r2
 8005038:	b29b      	uxth	r3, r3
 800503a:	2b00      	cmp	r3, #0
 800503c:	bf14      	ite	ne
 800503e:	2301      	movne	r3, #1
 8005040:	2300      	moveq	r3, #0
 8005042:	b2db      	uxtb	r3, r3
 8005044:	e00b      	b.n	800505e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	699b      	ldr	r3, [r3, #24]
 800504c:	43da      	mvns	r2, r3
 800504e:	68bb      	ldr	r3, [r7, #8]
 8005050:	4013      	ands	r3, r2
 8005052:	b29b      	uxth	r3, r3
 8005054:	2b00      	cmp	r3, #0
 8005056:	bf14      	ite	ne
 8005058:	2301      	movne	r3, #1
 800505a:	2300      	moveq	r3, #0
 800505c:	b2db      	uxtb	r3, r3
 800505e:	2b00      	cmp	r3, #0
 8005060:	d016      	beq.n	8005090 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	2200      	movs	r2, #0
 8005066:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	2220      	movs	r2, #32
 800506c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	2200      	movs	r2, #0
 8005074:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800507c:	f043 0220 	orr.w	r2, r3, #32
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	2200      	movs	r2, #0
 8005088:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800508c:	2301      	movs	r3, #1
 800508e:	e021      	b.n	80050d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005090:	68bb      	ldr	r3, [r7, #8]
 8005092:	0c1b      	lsrs	r3, r3, #16
 8005094:	b2db      	uxtb	r3, r3
 8005096:	2b01      	cmp	r3, #1
 8005098:	d10c      	bne.n	80050b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	695b      	ldr	r3, [r3, #20]
 80050a0:	43da      	mvns	r2, r3
 80050a2:	68bb      	ldr	r3, [r7, #8]
 80050a4:	4013      	ands	r3, r2
 80050a6:	b29b      	uxth	r3, r3
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	bf14      	ite	ne
 80050ac:	2301      	movne	r3, #1
 80050ae:	2300      	moveq	r3, #0
 80050b0:	b2db      	uxtb	r3, r3
 80050b2:	e00b      	b.n	80050cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	699b      	ldr	r3, [r3, #24]
 80050ba:	43da      	mvns	r2, r3
 80050bc:	68bb      	ldr	r3, [r7, #8]
 80050be:	4013      	ands	r3, r2
 80050c0:	b29b      	uxth	r3, r3
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	bf14      	ite	ne
 80050c6:	2301      	movne	r3, #1
 80050c8:	2300      	moveq	r3, #0
 80050ca:	b2db      	uxtb	r3, r3
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	f47f af6d 	bne.w	8004fac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80050d2:	2300      	movs	r3, #0
}
 80050d4:	4618      	mov	r0, r3
 80050d6:	3710      	adds	r7, #16
 80050d8:	46bd      	mov	sp, r7
 80050da:	bd80      	pop	{r7, pc}

080050dc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b084      	sub	sp, #16
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	60f8      	str	r0, [r7, #12]
 80050e4:	60b9      	str	r1, [r7, #8]
 80050e6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80050e8:	e034      	b.n	8005154 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80050ea:	68f8      	ldr	r0, [r7, #12]
 80050ec:	f000 f8e3 	bl	80052b6 <I2C_IsAcknowledgeFailed>
 80050f0:	4603      	mov	r3, r0
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d001      	beq.n	80050fa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80050f6:	2301      	movs	r3, #1
 80050f8:	e034      	b.n	8005164 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050fa:	68bb      	ldr	r3, [r7, #8]
 80050fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005100:	d028      	beq.n	8005154 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005102:	f7fe fded 	bl	8003ce0 <HAL_GetTick>
 8005106:	4602      	mov	r2, r0
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	1ad3      	subs	r3, r2, r3
 800510c:	68ba      	ldr	r2, [r7, #8]
 800510e:	429a      	cmp	r2, r3
 8005110:	d302      	bcc.n	8005118 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005112:	68bb      	ldr	r3, [r7, #8]
 8005114:	2b00      	cmp	r3, #0
 8005116:	d11d      	bne.n	8005154 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	695b      	ldr	r3, [r3, #20]
 800511e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005122:	2b80      	cmp	r3, #128	@ 0x80
 8005124:	d016      	beq.n	8005154 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	2200      	movs	r2, #0
 800512a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	2220      	movs	r2, #32
 8005130:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	2200      	movs	r2, #0
 8005138:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005140:	f043 0220 	orr.w	r2, r3, #32
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	2200      	movs	r2, #0
 800514c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005150:	2301      	movs	r3, #1
 8005152:	e007      	b.n	8005164 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	695b      	ldr	r3, [r3, #20]
 800515a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800515e:	2b80      	cmp	r3, #128	@ 0x80
 8005160:	d1c3      	bne.n	80050ea <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005162:	2300      	movs	r3, #0
}
 8005164:	4618      	mov	r0, r3
 8005166:	3710      	adds	r7, #16
 8005168:	46bd      	mov	sp, r7
 800516a:	bd80      	pop	{r7, pc}

0800516c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800516c:	b580      	push	{r7, lr}
 800516e:	b084      	sub	sp, #16
 8005170:	af00      	add	r7, sp, #0
 8005172:	60f8      	str	r0, [r7, #12]
 8005174:	60b9      	str	r1, [r7, #8]
 8005176:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005178:	e034      	b.n	80051e4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800517a:	68f8      	ldr	r0, [r7, #12]
 800517c:	f000 f89b 	bl	80052b6 <I2C_IsAcknowledgeFailed>
 8005180:	4603      	mov	r3, r0
 8005182:	2b00      	cmp	r3, #0
 8005184:	d001      	beq.n	800518a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005186:	2301      	movs	r3, #1
 8005188:	e034      	b.n	80051f4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800518a:	68bb      	ldr	r3, [r7, #8]
 800518c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005190:	d028      	beq.n	80051e4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005192:	f7fe fda5 	bl	8003ce0 <HAL_GetTick>
 8005196:	4602      	mov	r2, r0
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	1ad3      	subs	r3, r2, r3
 800519c:	68ba      	ldr	r2, [r7, #8]
 800519e:	429a      	cmp	r2, r3
 80051a0:	d302      	bcc.n	80051a8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80051a2:	68bb      	ldr	r3, [r7, #8]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d11d      	bne.n	80051e4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	695b      	ldr	r3, [r3, #20]
 80051ae:	f003 0304 	and.w	r3, r3, #4
 80051b2:	2b04      	cmp	r3, #4
 80051b4:	d016      	beq.n	80051e4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	2200      	movs	r2, #0
 80051ba:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	2220      	movs	r2, #32
 80051c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	2200      	movs	r2, #0
 80051c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051d0:	f043 0220 	orr.w	r2, r3, #32
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	2200      	movs	r2, #0
 80051dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80051e0:	2301      	movs	r3, #1
 80051e2:	e007      	b.n	80051f4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	695b      	ldr	r3, [r3, #20]
 80051ea:	f003 0304 	and.w	r3, r3, #4
 80051ee:	2b04      	cmp	r3, #4
 80051f0:	d1c3      	bne.n	800517a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80051f2:	2300      	movs	r3, #0
}
 80051f4:	4618      	mov	r0, r3
 80051f6:	3710      	adds	r7, #16
 80051f8:	46bd      	mov	sp, r7
 80051fa:	bd80      	pop	{r7, pc}

080051fc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80051fc:	b580      	push	{r7, lr}
 80051fe:	b084      	sub	sp, #16
 8005200:	af00      	add	r7, sp, #0
 8005202:	60f8      	str	r0, [r7, #12]
 8005204:	60b9      	str	r1, [r7, #8]
 8005206:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005208:	e049      	b.n	800529e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	695b      	ldr	r3, [r3, #20]
 8005210:	f003 0310 	and.w	r3, r3, #16
 8005214:	2b10      	cmp	r3, #16
 8005216:	d119      	bne.n	800524c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f06f 0210 	mvn.w	r2, #16
 8005220:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	2200      	movs	r2, #0
 8005226:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	2220      	movs	r2, #32
 800522c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	2200      	movs	r2, #0
 8005234:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	2200      	movs	r2, #0
 8005244:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005248:	2301      	movs	r3, #1
 800524a:	e030      	b.n	80052ae <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800524c:	f7fe fd48 	bl	8003ce0 <HAL_GetTick>
 8005250:	4602      	mov	r2, r0
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	1ad3      	subs	r3, r2, r3
 8005256:	68ba      	ldr	r2, [r7, #8]
 8005258:	429a      	cmp	r2, r3
 800525a:	d302      	bcc.n	8005262 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800525c:	68bb      	ldr	r3, [r7, #8]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d11d      	bne.n	800529e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	695b      	ldr	r3, [r3, #20]
 8005268:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800526c:	2b40      	cmp	r3, #64	@ 0x40
 800526e:	d016      	beq.n	800529e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	2200      	movs	r2, #0
 8005274:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	2220      	movs	r2, #32
 800527a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	2200      	movs	r2, #0
 8005282:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800528a:	f043 0220 	orr.w	r2, r3, #32
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	2200      	movs	r2, #0
 8005296:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800529a:	2301      	movs	r3, #1
 800529c:	e007      	b.n	80052ae <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	695b      	ldr	r3, [r3, #20]
 80052a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052a8:	2b40      	cmp	r3, #64	@ 0x40
 80052aa:	d1ae      	bne.n	800520a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80052ac:	2300      	movs	r3, #0
}
 80052ae:	4618      	mov	r0, r3
 80052b0:	3710      	adds	r7, #16
 80052b2:	46bd      	mov	sp, r7
 80052b4:	bd80      	pop	{r7, pc}

080052b6 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80052b6:	b480      	push	{r7}
 80052b8:	b083      	sub	sp, #12
 80052ba:	af00      	add	r7, sp, #0
 80052bc:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	695b      	ldr	r3, [r3, #20]
 80052c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80052c8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80052cc:	d11b      	bne.n	8005306 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80052d6:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2200      	movs	r2, #0
 80052dc:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2220      	movs	r2, #32
 80052e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2200      	movs	r2, #0
 80052ea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052f2:	f043 0204 	orr.w	r2, r3, #4
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2200      	movs	r2, #0
 80052fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8005302:	2301      	movs	r3, #1
 8005304:	e000      	b.n	8005308 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005306:	2300      	movs	r3, #0
}
 8005308:	4618      	mov	r0, r3
 800530a:	370c      	adds	r7, #12
 800530c:	46bd      	mov	sp, r7
 800530e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005312:	4770      	bx	lr

08005314 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005314:	b580      	push	{r7, lr}
 8005316:	b084      	sub	sp, #16
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
 800531c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d101      	bne.n	8005328 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005324:	2301      	movs	r3, #1
 8005326:	e0cc      	b.n	80054c2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005328:	4b68      	ldr	r3, [pc, #416]	@ (80054cc <HAL_RCC_ClockConfig+0x1b8>)
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f003 030f 	and.w	r3, r3, #15
 8005330:	683a      	ldr	r2, [r7, #0]
 8005332:	429a      	cmp	r2, r3
 8005334:	d90c      	bls.n	8005350 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005336:	4b65      	ldr	r3, [pc, #404]	@ (80054cc <HAL_RCC_ClockConfig+0x1b8>)
 8005338:	683a      	ldr	r2, [r7, #0]
 800533a:	b2d2      	uxtb	r2, r2
 800533c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800533e:	4b63      	ldr	r3, [pc, #396]	@ (80054cc <HAL_RCC_ClockConfig+0x1b8>)
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f003 030f 	and.w	r3, r3, #15
 8005346:	683a      	ldr	r2, [r7, #0]
 8005348:	429a      	cmp	r2, r3
 800534a:	d001      	beq.n	8005350 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800534c:	2301      	movs	r3, #1
 800534e:	e0b8      	b.n	80054c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f003 0302 	and.w	r3, r3, #2
 8005358:	2b00      	cmp	r3, #0
 800535a:	d020      	beq.n	800539e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f003 0304 	and.w	r3, r3, #4
 8005364:	2b00      	cmp	r3, #0
 8005366:	d005      	beq.n	8005374 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005368:	4b59      	ldr	r3, [pc, #356]	@ (80054d0 <HAL_RCC_ClockConfig+0x1bc>)
 800536a:	689b      	ldr	r3, [r3, #8]
 800536c:	4a58      	ldr	r2, [pc, #352]	@ (80054d0 <HAL_RCC_ClockConfig+0x1bc>)
 800536e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005372:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f003 0308 	and.w	r3, r3, #8
 800537c:	2b00      	cmp	r3, #0
 800537e:	d005      	beq.n	800538c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005380:	4b53      	ldr	r3, [pc, #332]	@ (80054d0 <HAL_RCC_ClockConfig+0x1bc>)
 8005382:	689b      	ldr	r3, [r3, #8]
 8005384:	4a52      	ldr	r2, [pc, #328]	@ (80054d0 <HAL_RCC_ClockConfig+0x1bc>)
 8005386:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800538a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800538c:	4b50      	ldr	r3, [pc, #320]	@ (80054d0 <HAL_RCC_ClockConfig+0x1bc>)
 800538e:	689b      	ldr	r3, [r3, #8]
 8005390:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	689b      	ldr	r3, [r3, #8]
 8005398:	494d      	ldr	r1, [pc, #308]	@ (80054d0 <HAL_RCC_ClockConfig+0x1bc>)
 800539a:	4313      	orrs	r3, r2
 800539c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f003 0301 	and.w	r3, r3, #1
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d044      	beq.n	8005434 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	685b      	ldr	r3, [r3, #4]
 80053ae:	2b01      	cmp	r3, #1
 80053b0:	d107      	bne.n	80053c2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80053b2:	4b47      	ldr	r3, [pc, #284]	@ (80054d0 <HAL_RCC_ClockConfig+0x1bc>)
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d119      	bne.n	80053f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80053be:	2301      	movs	r3, #1
 80053c0:	e07f      	b.n	80054c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	685b      	ldr	r3, [r3, #4]
 80053c6:	2b02      	cmp	r3, #2
 80053c8:	d003      	beq.n	80053d2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80053ce:	2b03      	cmp	r3, #3
 80053d0:	d107      	bne.n	80053e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80053d2:	4b3f      	ldr	r3, [pc, #252]	@ (80054d0 <HAL_RCC_ClockConfig+0x1bc>)
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d109      	bne.n	80053f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80053de:	2301      	movs	r3, #1
 80053e0:	e06f      	b.n	80054c2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80053e2:	4b3b      	ldr	r3, [pc, #236]	@ (80054d0 <HAL_RCC_ClockConfig+0x1bc>)
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f003 0302 	and.w	r3, r3, #2
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d101      	bne.n	80053f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80053ee:	2301      	movs	r3, #1
 80053f0:	e067      	b.n	80054c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80053f2:	4b37      	ldr	r3, [pc, #220]	@ (80054d0 <HAL_RCC_ClockConfig+0x1bc>)
 80053f4:	689b      	ldr	r3, [r3, #8]
 80053f6:	f023 0203 	bic.w	r2, r3, #3
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	685b      	ldr	r3, [r3, #4]
 80053fe:	4934      	ldr	r1, [pc, #208]	@ (80054d0 <HAL_RCC_ClockConfig+0x1bc>)
 8005400:	4313      	orrs	r3, r2
 8005402:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005404:	f7fe fc6c 	bl	8003ce0 <HAL_GetTick>
 8005408:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800540a:	e00a      	b.n	8005422 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800540c:	f7fe fc68 	bl	8003ce0 <HAL_GetTick>
 8005410:	4602      	mov	r2, r0
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	1ad3      	subs	r3, r2, r3
 8005416:	f241 3288 	movw	r2, #5000	@ 0x1388
 800541a:	4293      	cmp	r3, r2
 800541c:	d901      	bls.n	8005422 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800541e:	2303      	movs	r3, #3
 8005420:	e04f      	b.n	80054c2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005422:	4b2b      	ldr	r3, [pc, #172]	@ (80054d0 <HAL_RCC_ClockConfig+0x1bc>)
 8005424:	689b      	ldr	r3, [r3, #8]
 8005426:	f003 020c 	and.w	r2, r3, #12
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	685b      	ldr	r3, [r3, #4]
 800542e:	009b      	lsls	r3, r3, #2
 8005430:	429a      	cmp	r2, r3
 8005432:	d1eb      	bne.n	800540c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005434:	4b25      	ldr	r3, [pc, #148]	@ (80054cc <HAL_RCC_ClockConfig+0x1b8>)
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f003 030f 	and.w	r3, r3, #15
 800543c:	683a      	ldr	r2, [r7, #0]
 800543e:	429a      	cmp	r2, r3
 8005440:	d20c      	bcs.n	800545c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005442:	4b22      	ldr	r3, [pc, #136]	@ (80054cc <HAL_RCC_ClockConfig+0x1b8>)
 8005444:	683a      	ldr	r2, [r7, #0]
 8005446:	b2d2      	uxtb	r2, r2
 8005448:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800544a:	4b20      	ldr	r3, [pc, #128]	@ (80054cc <HAL_RCC_ClockConfig+0x1b8>)
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f003 030f 	and.w	r3, r3, #15
 8005452:	683a      	ldr	r2, [r7, #0]
 8005454:	429a      	cmp	r2, r3
 8005456:	d001      	beq.n	800545c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005458:	2301      	movs	r3, #1
 800545a:	e032      	b.n	80054c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f003 0304 	and.w	r3, r3, #4
 8005464:	2b00      	cmp	r3, #0
 8005466:	d008      	beq.n	800547a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005468:	4b19      	ldr	r3, [pc, #100]	@ (80054d0 <HAL_RCC_ClockConfig+0x1bc>)
 800546a:	689b      	ldr	r3, [r3, #8]
 800546c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	68db      	ldr	r3, [r3, #12]
 8005474:	4916      	ldr	r1, [pc, #88]	@ (80054d0 <HAL_RCC_ClockConfig+0x1bc>)
 8005476:	4313      	orrs	r3, r2
 8005478:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f003 0308 	and.w	r3, r3, #8
 8005482:	2b00      	cmp	r3, #0
 8005484:	d009      	beq.n	800549a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005486:	4b12      	ldr	r3, [pc, #72]	@ (80054d0 <HAL_RCC_ClockConfig+0x1bc>)
 8005488:	689b      	ldr	r3, [r3, #8]
 800548a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	691b      	ldr	r3, [r3, #16]
 8005492:	00db      	lsls	r3, r3, #3
 8005494:	490e      	ldr	r1, [pc, #56]	@ (80054d0 <HAL_RCC_ClockConfig+0x1bc>)
 8005496:	4313      	orrs	r3, r2
 8005498:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800549a:	f000 fb7f 	bl	8005b9c <HAL_RCC_GetSysClockFreq>
 800549e:	4602      	mov	r2, r0
 80054a0:	4b0b      	ldr	r3, [pc, #44]	@ (80054d0 <HAL_RCC_ClockConfig+0x1bc>)
 80054a2:	689b      	ldr	r3, [r3, #8]
 80054a4:	091b      	lsrs	r3, r3, #4
 80054a6:	f003 030f 	and.w	r3, r3, #15
 80054aa:	490a      	ldr	r1, [pc, #40]	@ (80054d4 <HAL_RCC_ClockConfig+0x1c0>)
 80054ac:	5ccb      	ldrb	r3, [r1, r3]
 80054ae:	fa22 f303 	lsr.w	r3, r2, r3
 80054b2:	4a09      	ldr	r2, [pc, #36]	@ (80054d8 <HAL_RCC_ClockConfig+0x1c4>)
 80054b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80054b6:	4b09      	ldr	r3, [pc, #36]	@ (80054dc <HAL_RCC_ClockConfig+0x1c8>)
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	4618      	mov	r0, r3
 80054bc:	f7fe fbcc 	bl	8003c58 <HAL_InitTick>

  return HAL_OK;
 80054c0:	2300      	movs	r3, #0
}
 80054c2:	4618      	mov	r0, r3
 80054c4:	3710      	adds	r7, #16
 80054c6:	46bd      	mov	sp, r7
 80054c8:	bd80      	pop	{r7, pc}
 80054ca:	bf00      	nop
 80054cc:	40023c00 	.word	0x40023c00
 80054d0:	40023800 	.word	0x40023800
 80054d4:	0800ddac 	.word	0x0800ddac
 80054d8:	2000001c 	.word	0x2000001c
 80054dc:	20000024 	.word	0x20000024

080054e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80054e0:	b480      	push	{r7}
 80054e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80054e4:	4b03      	ldr	r3, [pc, #12]	@ (80054f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80054e6:	681b      	ldr	r3, [r3, #0]
}
 80054e8:	4618      	mov	r0, r3
 80054ea:	46bd      	mov	sp, r7
 80054ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f0:	4770      	bx	lr
 80054f2:	bf00      	nop
 80054f4:	2000001c 	.word	0x2000001c

080054f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80054fc:	f7ff fff0 	bl	80054e0 <HAL_RCC_GetHCLKFreq>
 8005500:	4602      	mov	r2, r0
 8005502:	4b05      	ldr	r3, [pc, #20]	@ (8005518 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005504:	689b      	ldr	r3, [r3, #8]
 8005506:	0a9b      	lsrs	r3, r3, #10
 8005508:	f003 0307 	and.w	r3, r3, #7
 800550c:	4903      	ldr	r1, [pc, #12]	@ (800551c <HAL_RCC_GetPCLK1Freq+0x24>)
 800550e:	5ccb      	ldrb	r3, [r1, r3]
 8005510:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005514:	4618      	mov	r0, r3
 8005516:	bd80      	pop	{r7, pc}
 8005518:	40023800 	.word	0x40023800
 800551c:	0800ddbc 	.word	0x0800ddbc

08005520 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005520:	b580      	push	{r7, lr}
 8005522:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005524:	f7ff ffdc 	bl	80054e0 <HAL_RCC_GetHCLKFreq>
 8005528:	4602      	mov	r2, r0
 800552a:	4b05      	ldr	r3, [pc, #20]	@ (8005540 <HAL_RCC_GetPCLK2Freq+0x20>)
 800552c:	689b      	ldr	r3, [r3, #8]
 800552e:	0b5b      	lsrs	r3, r3, #13
 8005530:	f003 0307 	and.w	r3, r3, #7
 8005534:	4903      	ldr	r1, [pc, #12]	@ (8005544 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005536:	5ccb      	ldrb	r3, [r1, r3]
 8005538:	fa22 f303 	lsr.w	r3, r2, r3
}
 800553c:	4618      	mov	r0, r3
 800553e:	bd80      	pop	{r7, pc}
 8005540:	40023800 	.word	0x40023800
 8005544:	0800ddbc 	.word	0x0800ddbc

08005548 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005548:	b580      	push	{r7, lr}
 800554a:	b08c      	sub	sp, #48	@ 0x30
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005550:	2300      	movs	r3, #0
 8005552:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmpreg1 = 0U;
 8005554:	2300      	movs	r3, #0
 8005556:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8005558:	2300      	movs	r3, #0
 800555a:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 800555c:	2300      	movs	r3, #0
 800555e:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8005560:	2300      	movs	r3, #0
 8005562:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8005564:	2300      	movs	r3, #0
 8005566:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8005568:	2300      	movs	r3, #0
 800556a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 800556c:	2300      	movs	r3, #0
 800556e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t pllsaiused = 0U;
 8005570:	2300      	movs	r3, #0
 8005572:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f003 0301 	and.w	r3, r3, #1
 800557c:	2b00      	cmp	r3, #0
 800557e:	d010      	beq.n	80055a2 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8005580:	4b6f      	ldr	r3, [pc, #444]	@ (8005740 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005582:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005586:	f023 62c0 	bic.w	r2, r3, #100663296	@ 0x6000000
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800558e:	496c      	ldr	r1, [pc, #432]	@ (8005740 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005590:	4313      	orrs	r3, r2
 8005592:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800559a:	2b00      	cmp	r3, #0
 800559c:	d101      	bne.n	80055a2 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 800559e:	2301      	movs	r3, #1
 80055a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f003 0302 	and.w	r3, r3, #2
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d010      	beq.n	80055d0 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 80055ae:	4b64      	ldr	r3, [pc, #400]	@ (8005740 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80055b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80055b4:	f023 52c0 	bic.w	r2, r3, #402653184	@ 0x18000000
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055bc:	4960      	ldr	r1, [pc, #384]	@ (8005740 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80055be:	4313      	orrs	r3, r2
 80055c0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d101      	bne.n	80055d0 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 80055cc:	2301      	movs	r3, #1
 80055ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f003 0304 	and.w	r3, r3, #4
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d017      	beq.n	800560c <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80055dc:	4b58      	ldr	r3, [pc, #352]	@ (8005740 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80055de:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80055e2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055ea:	4955      	ldr	r1, [pc, #340]	@ (8005740 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80055ec:	4313      	orrs	r3, r2
 80055ee:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055f6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80055fa:	d101      	bne.n	8005600 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 80055fc:	2301      	movs	r3, #1
 80055fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005604:	2b00      	cmp	r3, #0
 8005606:	d101      	bne.n	800560c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8005608:	2301      	movs	r3, #1
 800560a:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f003 0308 	and.w	r3, r3, #8
 8005614:	2b00      	cmp	r3, #0
 8005616:	d017      	beq.n	8005648 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005618:	4b49      	ldr	r3, [pc, #292]	@ (8005740 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800561a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800561e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005626:	4946      	ldr	r1, [pc, #280]	@ (8005740 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005628:	4313      	orrs	r3, r2
 800562a:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005632:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005636:	d101      	bne.n	800563c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8005638:	2301      	movs	r3, #1
 800563a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005640:	2b00      	cmp	r3, #0
 8005642:	d101      	bne.n	8005648 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8005644:	2301      	movs	r3, #1
 8005646:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f003 0320 	and.w	r3, r3, #32
 8005650:	2b00      	cmp	r3, #0
 8005652:	f000 808a 	beq.w	800576a <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005656:	2300      	movs	r3, #0
 8005658:	60bb      	str	r3, [r7, #8]
 800565a:	4b39      	ldr	r3, [pc, #228]	@ (8005740 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800565c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800565e:	4a38      	ldr	r2, [pc, #224]	@ (8005740 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005660:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005664:	6413      	str	r3, [r2, #64]	@ 0x40
 8005666:	4b36      	ldr	r3, [pc, #216]	@ (8005740 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005668:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800566a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800566e:	60bb      	str	r3, [r7, #8]
 8005670:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005672:	4b34      	ldr	r3, [pc, #208]	@ (8005744 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	4a33      	ldr	r2, [pc, #204]	@ (8005744 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8005678:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800567c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800567e:	f7fe fb2f 	bl	8003ce0 <HAL_GetTick>
 8005682:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8005684:	e008      	b.n	8005698 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005686:	f7fe fb2b 	bl	8003ce0 <HAL_GetTick>
 800568a:	4602      	mov	r2, r0
 800568c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800568e:	1ad3      	subs	r3, r2, r3
 8005690:	2b02      	cmp	r3, #2
 8005692:	d901      	bls.n	8005698 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8005694:	2303      	movs	r3, #3
 8005696:	e278      	b.n	8005b8a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8005698:	4b2a      	ldr	r3, [pc, #168]	@ (8005744 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d0f0      	beq.n	8005686 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80056a4:	4b26      	ldr	r3, [pc, #152]	@ (8005740 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80056a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056a8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80056ac:	623b      	str	r3, [r7, #32]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80056ae:	6a3b      	ldr	r3, [r7, #32]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d02f      	beq.n	8005714 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056b8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80056bc:	6a3a      	ldr	r2, [r7, #32]
 80056be:	429a      	cmp	r2, r3
 80056c0:	d028      	beq.n	8005714 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80056c2:	4b1f      	ldr	r3, [pc, #124]	@ (8005740 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80056c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056c6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80056ca:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80056cc:	4b1e      	ldr	r3, [pc, #120]	@ (8005748 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80056ce:	2201      	movs	r2, #1
 80056d0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80056d2:	4b1d      	ldr	r3, [pc, #116]	@ (8005748 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80056d4:	2200      	movs	r2, #0
 80056d6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80056d8:	4a19      	ldr	r2, [pc, #100]	@ (8005740 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80056da:	6a3b      	ldr	r3, [r7, #32]
 80056dc:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80056de:	4b18      	ldr	r3, [pc, #96]	@ (8005740 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80056e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056e2:	f003 0301 	and.w	r3, r3, #1
 80056e6:	2b01      	cmp	r3, #1
 80056e8:	d114      	bne.n	8005714 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80056ea:	f7fe faf9 	bl	8003ce0 <HAL_GetTick>
 80056ee:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056f0:	e00a      	b.n	8005708 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80056f2:	f7fe faf5 	bl	8003ce0 <HAL_GetTick>
 80056f6:	4602      	mov	r2, r0
 80056f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056fa:	1ad3      	subs	r3, r2, r3
 80056fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005700:	4293      	cmp	r3, r2
 8005702:	d901      	bls.n	8005708 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8005704:	2303      	movs	r3, #3
 8005706:	e240      	b.n	8005b8a <HAL_RCCEx_PeriphCLKConfig+0x642>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005708:	4b0d      	ldr	r3, [pc, #52]	@ (8005740 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800570a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800570c:	f003 0302 	and.w	r3, r3, #2
 8005710:	2b00      	cmp	r3, #0
 8005712:	d0ee      	beq.n	80056f2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005718:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800571c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005720:	d114      	bne.n	800574c <HAL_RCCEx_PeriphCLKConfig+0x204>
 8005722:	4b07      	ldr	r3, [pc, #28]	@ (8005740 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005724:	689b      	ldr	r3, [r3, #8]
 8005726:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800572e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8005732:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005736:	4902      	ldr	r1, [pc, #8]	@ (8005740 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005738:	4313      	orrs	r3, r2
 800573a:	608b      	str	r3, [r1, #8]
 800573c:	e00c      	b.n	8005758 <HAL_RCCEx_PeriphCLKConfig+0x210>
 800573e:	bf00      	nop
 8005740:	40023800 	.word	0x40023800
 8005744:	40007000 	.word	0x40007000
 8005748:	42470e40 	.word	0x42470e40
 800574c:	4b4a      	ldr	r3, [pc, #296]	@ (8005878 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800574e:	689b      	ldr	r3, [r3, #8]
 8005750:	4a49      	ldr	r2, [pc, #292]	@ (8005878 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005752:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8005756:	6093      	str	r3, [r2, #8]
 8005758:	4b47      	ldr	r3, [pc, #284]	@ (8005878 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800575a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005760:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005764:	4944      	ldr	r1, [pc, #272]	@ (8005878 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005766:	4313      	orrs	r3, r2
 8005768:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f003 0310 	and.w	r3, r3, #16
 8005772:	2b00      	cmp	r3, #0
 8005774:	d004      	beq.n	8005780 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 800577c:	4b3f      	ldr	r3, [pc, #252]	@ (800587c <HAL_RCCEx_PeriphCLKConfig+0x334>)
 800577e:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005788:	2b00      	cmp	r3, #0
 800578a:	d00a      	beq.n	80057a2 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 800578c:	4b3a      	ldr	r3, [pc, #232]	@ (8005878 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800578e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005792:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800579a:	4937      	ldr	r1, [pc, #220]	@ (8005878 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800579c:	4313      	orrs	r3, r2
 800579e:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d00a      	beq.n	80057c4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80057ae:	4b32      	ldr	r3, [pc, #200]	@ (8005878 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80057b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80057b4:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80057bc:	492e      	ldr	r1, [pc, #184]	@ (8005878 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80057be:	4313      	orrs	r3, r2
 80057c0:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d011      	beq.n	80057f4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80057d0:	4b29      	ldr	r3, [pc, #164]	@ (8005878 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80057d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80057d6:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057de:	4926      	ldr	r1, [pc, #152]	@ (8005878 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80057e0:	4313      	orrs	r3, r2
 80057e2:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057ea:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80057ee:	d101      	bne.n	80057f4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 80057f0:	2301      	movs	r3, #1
 80057f2:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d00a      	beq.n	8005816 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8005800:	4b1d      	ldr	r3, [pc, #116]	@ (8005878 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005802:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005806:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800580e:	491a      	ldr	r1, [pc, #104]	@ (8005878 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005810:	4313      	orrs	r3, r2
 8005812:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800581e:	2b00      	cmp	r3, #0
 8005820:	d011      	beq.n	8005846 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8005822:	4b15      	ldr	r3, [pc, #84]	@ (8005878 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005824:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005828:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005830:	4911      	ldr	r1, [pc, #68]	@ (8005878 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005832:	4313      	orrs	r3, r2
 8005834:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800583c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005840:	d101      	bne.n	8005846 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8005842:	2301      	movs	r3, #1
 8005844:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if ((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8005846:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005848:	2b01      	cmp	r3, #1
 800584a:	d005      	beq.n	8005858 <HAL_RCCEx_PeriphCLKConfig+0x310>
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005854:	f040 80ff 	bne.w	8005a56 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005858:	4b09      	ldr	r3, [pc, #36]	@ (8005880 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800585a:	2200      	movs	r2, #0
 800585c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800585e:	f7fe fa3f 	bl	8003ce0 <HAL_GetTick>
 8005862:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005864:	e00e      	b.n	8005884 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005866:	f7fe fa3b 	bl	8003ce0 <HAL_GetTick>
 800586a:	4602      	mov	r2, r0
 800586c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800586e:	1ad3      	subs	r3, r2, r3
 8005870:	2b02      	cmp	r3, #2
 8005872:	d907      	bls.n	8005884 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005874:	2303      	movs	r3, #3
 8005876:	e188      	b.n	8005b8a <HAL_RCCEx_PeriphCLKConfig+0x642>
 8005878:	40023800 	.word	0x40023800
 800587c:	424711e0 	.word	0x424711e0
 8005880:	42470068 	.word	0x42470068
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005884:	4b7e      	ldr	r3, [pc, #504]	@ (8005a80 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800588c:	2b00      	cmp	r3, #0
 800588e:	d1ea      	bne.n	8005866 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1)
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f003 0301 	and.w	r3, r3, #1
 8005898:	2b00      	cmp	r3, #0
 800589a:	d003      	beq.n	80058a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d009      	beq.n	80058b8 <HAL_RCCEx_PeriphCLKConfig+0x370>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f003 0302 	and.w	r3, r3, #2
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d028      	beq.n	8005902 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d124      	bne.n	8005902 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80058b8:	4b71      	ldr	r3, [pc, #452]	@ (8005a80 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80058ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80058be:	0c1b      	lsrs	r3, r3, #16
 80058c0:	f003 0303 	and.w	r3, r3, #3
 80058c4:	3301      	adds	r3, #1
 80058c6:	005b      	lsls	r3, r3, #1
 80058c8:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80058ca:	4b6d      	ldr	r3, [pc, #436]	@ (8005a80 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80058cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80058d0:	0e1b      	lsrs	r3, r3, #24
 80058d2:	f003 030f 	and.w	r3, r3, #15
 80058d6:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sp, plli2sq,
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	685a      	ldr	r2, [r3, #4]
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	689b      	ldr	r3, [r3, #8]
 80058e0:	019b      	lsls	r3, r3, #6
 80058e2:	431a      	orrs	r2, r3
 80058e4:	69fb      	ldr	r3, [r7, #28]
 80058e6:	085b      	lsrs	r3, r3, #1
 80058e8:	3b01      	subs	r3, #1
 80058ea:	041b      	lsls	r3, r3, #16
 80058ec:	431a      	orrs	r2, r3
 80058ee:	69bb      	ldr	r3, [r7, #24]
 80058f0:	061b      	lsls	r3, r3, #24
 80058f2:	431a      	orrs	r2, r3
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	695b      	ldr	r3, [r3, #20]
 80058f8:	071b      	lsls	r3, r3, #28
 80058fa:	4961      	ldr	r1, [pc, #388]	@ (8005a80 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80058fc:	4313      	orrs	r3, r2
 80058fe:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f003 0304 	and.w	r3, r3, #4
 800590a:	2b00      	cmp	r3, #0
 800590c:	d004      	beq.n	8005918 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005912:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005916:	d00a      	beq.n	800592e <HAL_RCCEx_PeriphCLKConfig+0x3e6>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f003 0308 	and.w	r3, r3, #8
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005920:	2b00      	cmp	r3, #0
 8005922:	d035      	beq.n	8005990 <HAL_RCCEx_PeriphCLKConfig+0x448>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005928:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800592c:	d130      	bne.n	8005990 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800592e:	4b54      	ldr	r3, [pc, #336]	@ (8005a80 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005930:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005934:	0c1b      	lsrs	r3, r3, #16
 8005936:	f003 0303 	and.w	r3, r3, #3
 800593a:	3301      	adds	r3, #1
 800593c:	005b      	lsls	r3, r3, #1
 800593e:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005940:	4b4f      	ldr	r3, [pc, #316]	@ (8005a80 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005942:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005946:	0f1b      	lsrs	r3, r3, #28
 8005948:	f003 0307 	and.w	r3, r3, #7
 800594c:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sp,
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	685a      	ldr	r2, [r3, #4]
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	689b      	ldr	r3, [r3, #8]
 8005956:	019b      	lsls	r3, r3, #6
 8005958:	431a      	orrs	r2, r3
 800595a:	69fb      	ldr	r3, [r7, #28]
 800595c:	085b      	lsrs	r3, r3, #1
 800595e:	3b01      	subs	r3, #1
 8005960:	041b      	lsls	r3, r3, #16
 8005962:	431a      	orrs	r2, r3
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	691b      	ldr	r3, [r3, #16]
 8005968:	061b      	lsls	r3, r3, #24
 800596a:	431a      	orrs	r2, r3
 800596c:	697b      	ldr	r3, [r7, #20]
 800596e:	071b      	lsls	r3, r3, #28
 8005970:	4943      	ldr	r1, [pc, #268]	@ (8005a80 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005972:	4313      	orrs	r3, r2
 8005974:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005978:	4b41      	ldr	r3, [pc, #260]	@ (8005a80 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800597a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800597e:	f023 021f 	bic.w	r2, r3, #31
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005986:	3b01      	subs	r3, #1
 8005988:	493d      	ldr	r1, [pc, #244]	@ (8005a80 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800598a:	4313      	orrs	r3, r2
 800598c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005998:	2b00      	cmp	r3, #0
 800599a:	d029      	beq.n	80059f0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
        && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80059a0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80059a4:	d124      	bne.n	80059f0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80059a6:	4b36      	ldr	r3, [pc, #216]	@ (8005a80 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80059a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80059ac:	0c1b      	lsrs	r3, r3, #16
 80059ae:	f003 0303 	and.w	r3, r3, #3
 80059b2:	3301      	adds	r3, #1
 80059b4:	005b      	lsls	r3, r3, #1
 80059b6:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80059b8:	4b31      	ldr	r3, [pc, #196]	@ (8005a80 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80059ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80059be:	0f1b      	lsrs	r3, r3, #28
 80059c0:	f003 0307 	and.w	r3, r3, #7
 80059c4:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SP,
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	685a      	ldr	r2, [r3, #4]
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	689b      	ldr	r3, [r3, #8]
 80059ce:	019b      	lsls	r3, r3, #6
 80059d0:	431a      	orrs	r2, r3
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	68db      	ldr	r3, [r3, #12]
 80059d6:	085b      	lsrs	r3, r3, #1
 80059d8:	3b01      	subs	r3, #1
 80059da:	041b      	lsls	r3, r3, #16
 80059dc:	431a      	orrs	r2, r3
 80059de:	69bb      	ldr	r3, [r7, #24]
 80059e0:	061b      	lsls	r3, r3, #24
 80059e2:	431a      	orrs	r2, r3
 80059e4:	697b      	ldr	r3, [r7, #20]
 80059e6:	071b      	lsls	r3, r3, #28
 80059e8:	4925      	ldr	r1, [pc, #148]	@ (8005a80 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80059ea:	4313      	orrs	r3, r2
 80059ec:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              plli2sq, plli2sr);
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d016      	beq.n	8005a2a <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SP,
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	685a      	ldr	r2, [r3, #4]
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	689b      	ldr	r3, [r3, #8]
 8005a04:	019b      	lsls	r3, r3, #6
 8005a06:	431a      	orrs	r2, r3
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	68db      	ldr	r3, [r3, #12]
 8005a0c:	085b      	lsrs	r3, r3, #1
 8005a0e:	3b01      	subs	r3, #1
 8005a10:	041b      	lsls	r3, r3, #16
 8005a12:	431a      	orrs	r2, r3
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	691b      	ldr	r3, [r3, #16]
 8005a18:	061b      	lsls	r3, r3, #24
 8005a1a:	431a      	orrs	r2, r3
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	695b      	ldr	r3, [r3, #20]
 8005a20:	071b      	lsls	r3, r3, #28
 8005a22:	4917      	ldr	r1, [pc, #92]	@ (8005a80 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005a24:	4313      	orrs	r3, r2
 8005a26:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005a2a:	4b16      	ldr	r3, [pc, #88]	@ (8005a84 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8005a2c:	2201      	movs	r2, #1
 8005a2e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005a30:	f7fe f956 	bl	8003ce0 <HAL_GetTick>
 8005a34:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005a36:	e008      	b.n	8005a4a <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005a38:	f7fe f952 	bl	8003ce0 <HAL_GetTick>
 8005a3c:	4602      	mov	r2, r0
 8005a3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a40:	1ad3      	subs	r3, r2, r3
 8005a42:	2b02      	cmp	r3, #2
 8005a44:	d901      	bls.n	8005a4a <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005a46:	2303      	movs	r3, #3
 8005a48:	e09f      	b.n	8005b8a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005a4a:	4b0d      	ldr	r3, [pc, #52]	@ (8005a80 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d0f0      	beq.n	8005a38 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if (pllsaiused == 1U)
 8005a56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a58:	2b01      	cmp	r3, #1
 8005a5a:	f040 8095 	bne.w	8005b88 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005a5e:	4b0a      	ldr	r3, [pc, #40]	@ (8005a88 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8005a60:	2200      	movs	r2, #0
 8005a62:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005a64:	f7fe f93c 	bl	8003ce0 <HAL_GetTick>
 8005a68:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005a6a:	e00f      	b.n	8005a8c <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005a6c:	f7fe f938 	bl	8003ce0 <HAL_GetTick>
 8005a70:	4602      	mov	r2, r0
 8005a72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a74:	1ad3      	subs	r3, r2, r3
 8005a76:	2b02      	cmp	r3, #2
 8005a78:	d908      	bls.n	8005a8c <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005a7a:	2303      	movs	r3, #3
 8005a7c:	e085      	b.n	8005b8a <HAL_RCCEx_PeriphCLKConfig+0x642>
 8005a7e:	bf00      	nop
 8005a80:	40023800 	.word	0x40023800
 8005a84:	42470068 	.word	0x42470068
 8005a88:	42470070 	.word	0x42470070
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005a8c:	4b41      	ldr	r3, [pc, #260]	@ (8005b94 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005a94:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005a98:	d0e8      	beq.n	8005a6c <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f003 0304 	and.w	r3, r3, #4
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d003      	beq.n	8005aae <HAL_RCCEx_PeriphCLKConfig+0x566>
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d009      	beq.n	8005ac2 <HAL_RCCEx_PeriphCLKConfig+0x57a>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f003 0308 	and.w	r3, r3, #8
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d02b      	beq.n	8005b12 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d127      	bne.n	8005b12 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8005ac2:	4b34      	ldr	r3, [pc, #208]	@ (8005b94 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005ac4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ac8:	0c1b      	lsrs	r3, r3, #16
 8005aca:	f003 0303 	and.w	r3, r3, #3
 8005ace:	3301      	adds	r3, #1
 8005ad0:	005b      	lsls	r3, r3, #1
 8005ad2:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN, pllsaip,
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	699a      	ldr	r2, [r3, #24]
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	69db      	ldr	r3, [r3, #28]
 8005adc:	019b      	lsls	r3, r3, #6
 8005ade:	431a      	orrs	r2, r3
 8005ae0:	693b      	ldr	r3, [r7, #16]
 8005ae2:	085b      	lsrs	r3, r3, #1
 8005ae4:	3b01      	subs	r3, #1
 8005ae6:	041b      	lsls	r3, r3, #16
 8005ae8:	431a      	orrs	r2, r3
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005aee:	061b      	lsls	r3, r3, #24
 8005af0:	4928      	ldr	r1, [pc, #160]	@ (8005b94 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005af2:	4313      	orrs	r3, r2
 8005af4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
                              PeriphClkInit->PLLSAI.PLLSAIQ, 0U);

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005af8:	4b26      	ldr	r3, [pc, #152]	@ (8005b94 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005afa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005afe:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b06:	3b01      	subs	r3, #1
 8005b08:	021b      	lsls	r3, r3, #8
 8005b0a:	4922      	ldr	r1, [pc, #136]	@ (8005b94 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005b0c:	4313      	orrs	r3, r2
 8005b0e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d01d      	beq.n	8005b5a <HAL_RCCEx_PeriphCLKConfig+0x612>
        && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b22:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005b26:	d118      	bne.n	8005b5a <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005b28:	4b1a      	ldr	r3, [pc, #104]	@ (8005b94 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005b2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b2e:	0e1b      	lsrs	r3, r3, #24
 8005b30:	f003 030f 	and.w	r3, r3, #15
 8005b34:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP,
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	699a      	ldr	r2, [r3, #24]
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	69db      	ldr	r3, [r3, #28]
 8005b3e:	019b      	lsls	r3, r3, #6
 8005b40:	431a      	orrs	r2, r3
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6a1b      	ldr	r3, [r3, #32]
 8005b46:	085b      	lsrs	r3, r3, #1
 8005b48:	3b01      	subs	r3, #1
 8005b4a:	041b      	lsls	r3, r3, #16
 8005b4c:	431a      	orrs	r2, r3
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	061b      	lsls	r3, r3, #24
 8005b52:	4910      	ldr	r1, [pc, #64]	@ (8005b94 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005b54:	4313      	orrs	r3, r2
 8005b56:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
                              pllsaiq, 0U);
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005b5a:	4b0f      	ldr	r3, [pc, #60]	@ (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8005b5c:	2201      	movs	r2, #1
 8005b5e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005b60:	f7fe f8be 	bl	8003ce0 <HAL_GetTick>
 8005b64:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005b66:	e008      	b.n	8005b7a <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005b68:	f7fe f8ba 	bl	8003ce0 <HAL_GetTick>
 8005b6c:	4602      	mov	r2, r0
 8005b6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b70:	1ad3      	subs	r3, r2, r3
 8005b72:	2b02      	cmp	r3, #2
 8005b74:	d901      	bls.n	8005b7a <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005b76:	2303      	movs	r3, #3
 8005b78:	e007      	b.n	8005b8a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005b7a:	4b06      	ldr	r3, [pc, #24]	@ (8005b94 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005b82:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005b86:	d1ef      	bne.n	8005b68 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8005b88:	2300      	movs	r3, #0
}
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	3730      	adds	r7, #48	@ 0x30
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	bd80      	pop	{r7, pc}
 8005b92:	bf00      	nop
 8005b94:	40023800 	.word	0x40023800
 8005b98:	42470070 	.word	0x42470070

08005b9c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005b9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005ba0:	b0ae      	sub	sp, #184	@ 0xb8
 8005ba2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8005baa:	2300      	movs	r3, #0
 8005bac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8005bb0:	2300      	movs	r3, #0
 8005bb2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005bc2:	4bcb      	ldr	r3, [pc, #812]	@ (8005ef0 <HAL_RCC_GetSysClockFreq+0x354>)
 8005bc4:	689b      	ldr	r3, [r3, #8]
 8005bc6:	f003 030c 	and.w	r3, r3, #12
 8005bca:	2b0c      	cmp	r3, #12
 8005bcc:	f200 8206 	bhi.w	8005fdc <HAL_RCC_GetSysClockFreq+0x440>
 8005bd0:	a201      	add	r2, pc, #4	@ (adr r2, 8005bd8 <HAL_RCC_GetSysClockFreq+0x3c>)
 8005bd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bd6:	bf00      	nop
 8005bd8:	08005c0d 	.word	0x08005c0d
 8005bdc:	08005fdd 	.word	0x08005fdd
 8005be0:	08005fdd 	.word	0x08005fdd
 8005be4:	08005fdd 	.word	0x08005fdd
 8005be8:	08005c15 	.word	0x08005c15
 8005bec:	08005fdd 	.word	0x08005fdd
 8005bf0:	08005fdd 	.word	0x08005fdd
 8005bf4:	08005fdd 	.word	0x08005fdd
 8005bf8:	08005c1d 	.word	0x08005c1d
 8005bfc:	08005fdd 	.word	0x08005fdd
 8005c00:	08005fdd 	.word	0x08005fdd
 8005c04:	08005fdd 	.word	0x08005fdd
 8005c08:	08005e0d 	.word	0x08005e0d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005c0c:	4bb9      	ldr	r3, [pc, #740]	@ (8005ef4 <HAL_RCC_GetSysClockFreq+0x358>)
 8005c0e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8005c12:	e1e7      	b.n	8005fe4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005c14:	4bb8      	ldr	r3, [pc, #736]	@ (8005ef8 <HAL_RCC_GetSysClockFreq+0x35c>)
 8005c16:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8005c1a:	e1e3      	b.n	8005fe4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005c1c:	4bb4      	ldr	r3, [pc, #720]	@ (8005ef0 <HAL_RCC_GetSysClockFreq+0x354>)
 8005c1e:	685b      	ldr	r3, [r3, #4]
 8005c20:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005c24:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005c28:	4bb1      	ldr	r3, [pc, #708]	@ (8005ef0 <HAL_RCC_GetSysClockFreq+0x354>)
 8005c2a:	685b      	ldr	r3, [r3, #4]
 8005c2c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d071      	beq.n	8005d18 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005c34:	4bae      	ldr	r3, [pc, #696]	@ (8005ef0 <HAL_RCC_GetSysClockFreq+0x354>)
 8005c36:	685b      	ldr	r3, [r3, #4]
 8005c38:	099b      	lsrs	r3, r3, #6
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005c40:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8005c44:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005c48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c4c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005c50:	2300      	movs	r3, #0
 8005c52:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005c56:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005c5a:	4622      	mov	r2, r4
 8005c5c:	462b      	mov	r3, r5
 8005c5e:	f04f 0000 	mov.w	r0, #0
 8005c62:	f04f 0100 	mov.w	r1, #0
 8005c66:	0159      	lsls	r1, r3, #5
 8005c68:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005c6c:	0150      	lsls	r0, r2, #5
 8005c6e:	4602      	mov	r2, r0
 8005c70:	460b      	mov	r3, r1
 8005c72:	4621      	mov	r1, r4
 8005c74:	1a51      	subs	r1, r2, r1
 8005c76:	6439      	str	r1, [r7, #64]	@ 0x40
 8005c78:	4629      	mov	r1, r5
 8005c7a:	eb63 0301 	sbc.w	r3, r3, r1
 8005c7e:	647b      	str	r3, [r7, #68]	@ 0x44
 8005c80:	f04f 0200 	mov.w	r2, #0
 8005c84:	f04f 0300 	mov.w	r3, #0
 8005c88:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8005c8c:	4649      	mov	r1, r9
 8005c8e:	018b      	lsls	r3, r1, #6
 8005c90:	4641      	mov	r1, r8
 8005c92:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005c96:	4641      	mov	r1, r8
 8005c98:	018a      	lsls	r2, r1, #6
 8005c9a:	4641      	mov	r1, r8
 8005c9c:	1a51      	subs	r1, r2, r1
 8005c9e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005ca0:	4649      	mov	r1, r9
 8005ca2:	eb63 0301 	sbc.w	r3, r3, r1
 8005ca6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005ca8:	f04f 0200 	mov.w	r2, #0
 8005cac:	f04f 0300 	mov.w	r3, #0
 8005cb0:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8005cb4:	4649      	mov	r1, r9
 8005cb6:	00cb      	lsls	r3, r1, #3
 8005cb8:	4641      	mov	r1, r8
 8005cba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005cbe:	4641      	mov	r1, r8
 8005cc0:	00ca      	lsls	r2, r1, #3
 8005cc2:	4610      	mov	r0, r2
 8005cc4:	4619      	mov	r1, r3
 8005cc6:	4603      	mov	r3, r0
 8005cc8:	4622      	mov	r2, r4
 8005cca:	189b      	adds	r3, r3, r2
 8005ccc:	633b      	str	r3, [r7, #48]	@ 0x30
 8005cce:	462b      	mov	r3, r5
 8005cd0:	460a      	mov	r2, r1
 8005cd2:	eb42 0303 	adc.w	r3, r2, r3
 8005cd6:	637b      	str	r3, [r7, #52]	@ 0x34
 8005cd8:	f04f 0200 	mov.w	r2, #0
 8005cdc:	f04f 0300 	mov.w	r3, #0
 8005ce0:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8005ce4:	4629      	mov	r1, r5
 8005ce6:	024b      	lsls	r3, r1, #9
 8005ce8:	4621      	mov	r1, r4
 8005cea:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005cee:	4621      	mov	r1, r4
 8005cf0:	024a      	lsls	r2, r1, #9
 8005cf2:	4610      	mov	r0, r2
 8005cf4:	4619      	mov	r1, r3
 8005cf6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005d00:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005d04:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8005d08:	f7fa ffde 	bl	8000cc8 <__aeabi_uldivmod>
 8005d0c:	4602      	mov	r2, r0
 8005d0e:	460b      	mov	r3, r1
 8005d10:	4613      	mov	r3, r2
 8005d12:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005d16:	e067      	b.n	8005de8 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005d18:	4b75      	ldr	r3, [pc, #468]	@ (8005ef0 <HAL_RCC_GetSysClockFreq+0x354>)
 8005d1a:	685b      	ldr	r3, [r3, #4]
 8005d1c:	099b      	lsrs	r3, r3, #6
 8005d1e:	2200      	movs	r2, #0
 8005d20:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005d24:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8005d28:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005d2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d30:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005d32:	2300      	movs	r3, #0
 8005d34:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005d36:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8005d3a:	4622      	mov	r2, r4
 8005d3c:	462b      	mov	r3, r5
 8005d3e:	f04f 0000 	mov.w	r0, #0
 8005d42:	f04f 0100 	mov.w	r1, #0
 8005d46:	0159      	lsls	r1, r3, #5
 8005d48:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005d4c:	0150      	lsls	r0, r2, #5
 8005d4e:	4602      	mov	r2, r0
 8005d50:	460b      	mov	r3, r1
 8005d52:	4621      	mov	r1, r4
 8005d54:	1a51      	subs	r1, r2, r1
 8005d56:	62b9      	str	r1, [r7, #40]	@ 0x28
 8005d58:	4629      	mov	r1, r5
 8005d5a:	eb63 0301 	sbc.w	r3, r3, r1
 8005d5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005d60:	f04f 0200 	mov.w	r2, #0
 8005d64:	f04f 0300 	mov.w	r3, #0
 8005d68:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8005d6c:	4649      	mov	r1, r9
 8005d6e:	018b      	lsls	r3, r1, #6
 8005d70:	4641      	mov	r1, r8
 8005d72:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005d76:	4641      	mov	r1, r8
 8005d78:	018a      	lsls	r2, r1, #6
 8005d7a:	4641      	mov	r1, r8
 8005d7c:	ebb2 0a01 	subs.w	sl, r2, r1
 8005d80:	4649      	mov	r1, r9
 8005d82:	eb63 0b01 	sbc.w	fp, r3, r1
 8005d86:	f04f 0200 	mov.w	r2, #0
 8005d8a:	f04f 0300 	mov.w	r3, #0
 8005d8e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005d92:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005d96:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005d9a:	4692      	mov	sl, r2
 8005d9c:	469b      	mov	fp, r3
 8005d9e:	4623      	mov	r3, r4
 8005da0:	eb1a 0303 	adds.w	r3, sl, r3
 8005da4:	623b      	str	r3, [r7, #32]
 8005da6:	462b      	mov	r3, r5
 8005da8:	eb4b 0303 	adc.w	r3, fp, r3
 8005dac:	627b      	str	r3, [r7, #36]	@ 0x24
 8005dae:	f04f 0200 	mov.w	r2, #0
 8005db2:	f04f 0300 	mov.w	r3, #0
 8005db6:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8005dba:	4629      	mov	r1, r5
 8005dbc:	028b      	lsls	r3, r1, #10
 8005dbe:	4621      	mov	r1, r4
 8005dc0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005dc4:	4621      	mov	r1, r4
 8005dc6:	028a      	lsls	r2, r1, #10
 8005dc8:	4610      	mov	r0, r2
 8005dca:	4619      	mov	r1, r3
 8005dcc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	673b      	str	r3, [r7, #112]	@ 0x70
 8005dd4:	677a      	str	r2, [r7, #116]	@ 0x74
 8005dd6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8005dda:	f7fa ff75 	bl	8000cc8 <__aeabi_uldivmod>
 8005dde:	4602      	mov	r2, r0
 8005de0:	460b      	mov	r3, r1
 8005de2:	4613      	mov	r3, r2
 8005de4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005de8:	4b41      	ldr	r3, [pc, #260]	@ (8005ef0 <HAL_RCC_GetSysClockFreq+0x354>)
 8005dea:	685b      	ldr	r3, [r3, #4]
 8005dec:	0c1b      	lsrs	r3, r3, #16
 8005dee:	f003 0303 	and.w	r3, r3, #3
 8005df2:	3301      	adds	r3, #1
 8005df4:	005b      	lsls	r3, r3, #1
 8005df6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8005dfa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005dfe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005e02:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e06:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8005e0a:	e0eb      	b.n	8005fe4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005e0c:	4b38      	ldr	r3, [pc, #224]	@ (8005ef0 <HAL_RCC_GetSysClockFreq+0x354>)
 8005e0e:	685b      	ldr	r3, [r3, #4]
 8005e10:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005e14:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005e18:	4b35      	ldr	r3, [pc, #212]	@ (8005ef0 <HAL_RCC_GetSysClockFreq+0x354>)
 8005e1a:	685b      	ldr	r3, [r3, #4]
 8005e1c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d06b      	beq.n	8005efc <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005e24:	4b32      	ldr	r3, [pc, #200]	@ (8005ef0 <HAL_RCC_GetSysClockFreq+0x354>)
 8005e26:	685b      	ldr	r3, [r3, #4]
 8005e28:	099b      	lsrs	r3, r3, #6
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005e2e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005e30:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005e32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e36:	663b      	str	r3, [r7, #96]	@ 0x60
 8005e38:	2300      	movs	r3, #0
 8005e3a:	667b      	str	r3, [r7, #100]	@ 0x64
 8005e3c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8005e40:	4622      	mov	r2, r4
 8005e42:	462b      	mov	r3, r5
 8005e44:	f04f 0000 	mov.w	r0, #0
 8005e48:	f04f 0100 	mov.w	r1, #0
 8005e4c:	0159      	lsls	r1, r3, #5
 8005e4e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005e52:	0150      	lsls	r0, r2, #5
 8005e54:	4602      	mov	r2, r0
 8005e56:	460b      	mov	r3, r1
 8005e58:	4621      	mov	r1, r4
 8005e5a:	1a51      	subs	r1, r2, r1
 8005e5c:	61b9      	str	r1, [r7, #24]
 8005e5e:	4629      	mov	r1, r5
 8005e60:	eb63 0301 	sbc.w	r3, r3, r1
 8005e64:	61fb      	str	r3, [r7, #28]
 8005e66:	f04f 0200 	mov.w	r2, #0
 8005e6a:	f04f 0300 	mov.w	r3, #0
 8005e6e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8005e72:	4659      	mov	r1, fp
 8005e74:	018b      	lsls	r3, r1, #6
 8005e76:	4651      	mov	r1, sl
 8005e78:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005e7c:	4651      	mov	r1, sl
 8005e7e:	018a      	lsls	r2, r1, #6
 8005e80:	4651      	mov	r1, sl
 8005e82:	ebb2 0801 	subs.w	r8, r2, r1
 8005e86:	4659      	mov	r1, fp
 8005e88:	eb63 0901 	sbc.w	r9, r3, r1
 8005e8c:	f04f 0200 	mov.w	r2, #0
 8005e90:	f04f 0300 	mov.w	r3, #0
 8005e94:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005e98:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005e9c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005ea0:	4690      	mov	r8, r2
 8005ea2:	4699      	mov	r9, r3
 8005ea4:	4623      	mov	r3, r4
 8005ea6:	eb18 0303 	adds.w	r3, r8, r3
 8005eaa:	613b      	str	r3, [r7, #16]
 8005eac:	462b      	mov	r3, r5
 8005eae:	eb49 0303 	adc.w	r3, r9, r3
 8005eb2:	617b      	str	r3, [r7, #20]
 8005eb4:	f04f 0200 	mov.w	r2, #0
 8005eb8:	f04f 0300 	mov.w	r3, #0
 8005ebc:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8005ec0:	4629      	mov	r1, r5
 8005ec2:	024b      	lsls	r3, r1, #9
 8005ec4:	4621      	mov	r1, r4
 8005ec6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005eca:	4621      	mov	r1, r4
 8005ecc:	024a      	lsls	r2, r1, #9
 8005ece:	4610      	mov	r0, r2
 8005ed0:	4619      	mov	r1, r3
 8005ed2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005eda:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8005edc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005ee0:	f7fa fef2 	bl	8000cc8 <__aeabi_uldivmod>
 8005ee4:	4602      	mov	r2, r0
 8005ee6:	460b      	mov	r3, r1
 8005ee8:	4613      	mov	r3, r2
 8005eea:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005eee:	e065      	b.n	8005fbc <HAL_RCC_GetSysClockFreq+0x420>
 8005ef0:	40023800 	.word	0x40023800
 8005ef4:	00f42400 	.word	0x00f42400
 8005ef8:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005efc:	4b3d      	ldr	r3, [pc, #244]	@ (8005ff4 <HAL_RCC_GetSysClockFreq+0x458>)
 8005efe:	685b      	ldr	r3, [r3, #4]
 8005f00:	099b      	lsrs	r3, r3, #6
 8005f02:	2200      	movs	r2, #0
 8005f04:	4618      	mov	r0, r3
 8005f06:	4611      	mov	r1, r2
 8005f08:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005f0c:	653b      	str	r3, [r7, #80]	@ 0x50
 8005f0e:	2300      	movs	r3, #0
 8005f10:	657b      	str	r3, [r7, #84]	@ 0x54
 8005f12:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8005f16:	4642      	mov	r2, r8
 8005f18:	464b      	mov	r3, r9
 8005f1a:	f04f 0000 	mov.w	r0, #0
 8005f1e:	f04f 0100 	mov.w	r1, #0
 8005f22:	0159      	lsls	r1, r3, #5
 8005f24:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005f28:	0150      	lsls	r0, r2, #5
 8005f2a:	4602      	mov	r2, r0
 8005f2c:	460b      	mov	r3, r1
 8005f2e:	4641      	mov	r1, r8
 8005f30:	1a51      	subs	r1, r2, r1
 8005f32:	60b9      	str	r1, [r7, #8]
 8005f34:	4649      	mov	r1, r9
 8005f36:	eb63 0301 	sbc.w	r3, r3, r1
 8005f3a:	60fb      	str	r3, [r7, #12]
 8005f3c:	f04f 0200 	mov.w	r2, #0
 8005f40:	f04f 0300 	mov.w	r3, #0
 8005f44:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8005f48:	4659      	mov	r1, fp
 8005f4a:	018b      	lsls	r3, r1, #6
 8005f4c:	4651      	mov	r1, sl
 8005f4e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005f52:	4651      	mov	r1, sl
 8005f54:	018a      	lsls	r2, r1, #6
 8005f56:	4651      	mov	r1, sl
 8005f58:	1a54      	subs	r4, r2, r1
 8005f5a:	4659      	mov	r1, fp
 8005f5c:	eb63 0501 	sbc.w	r5, r3, r1
 8005f60:	f04f 0200 	mov.w	r2, #0
 8005f64:	f04f 0300 	mov.w	r3, #0
 8005f68:	00eb      	lsls	r3, r5, #3
 8005f6a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005f6e:	00e2      	lsls	r2, r4, #3
 8005f70:	4614      	mov	r4, r2
 8005f72:	461d      	mov	r5, r3
 8005f74:	4643      	mov	r3, r8
 8005f76:	18e3      	adds	r3, r4, r3
 8005f78:	603b      	str	r3, [r7, #0]
 8005f7a:	464b      	mov	r3, r9
 8005f7c:	eb45 0303 	adc.w	r3, r5, r3
 8005f80:	607b      	str	r3, [r7, #4]
 8005f82:	f04f 0200 	mov.w	r2, #0
 8005f86:	f04f 0300 	mov.w	r3, #0
 8005f8a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005f8e:	4629      	mov	r1, r5
 8005f90:	028b      	lsls	r3, r1, #10
 8005f92:	4621      	mov	r1, r4
 8005f94:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005f98:	4621      	mov	r1, r4
 8005f9a:	028a      	lsls	r2, r1, #10
 8005f9c:	4610      	mov	r0, r2
 8005f9e:	4619      	mov	r1, r3
 8005fa0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005fa8:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8005faa:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005fae:	f7fa fe8b 	bl	8000cc8 <__aeabi_uldivmod>
 8005fb2:	4602      	mov	r2, r0
 8005fb4:	460b      	mov	r3, r1
 8005fb6:	4613      	mov	r3, r2
 8005fb8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8005fbc:	4b0d      	ldr	r3, [pc, #52]	@ (8005ff4 <HAL_RCC_GetSysClockFreq+0x458>)
 8005fbe:	685b      	ldr	r3, [r3, #4]
 8005fc0:	0f1b      	lsrs	r3, r3, #28
 8005fc2:	f003 0307 	and.w	r3, r3, #7
 8005fc6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8005fca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005fce:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8005fd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fd6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8005fda:	e003      	b.n	8005fe4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005fdc:	4b06      	ldr	r3, [pc, #24]	@ (8005ff8 <HAL_RCC_GetSysClockFreq+0x45c>)
 8005fde:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8005fe2:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005fe4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8005fe8:	4618      	mov	r0, r3
 8005fea:	37b8      	adds	r7, #184	@ 0xb8
 8005fec:	46bd      	mov	sp, r7
 8005fee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005ff2:	bf00      	nop
 8005ff4:	40023800 	.word	0x40023800
 8005ff8:	00f42400 	.word	0x00f42400

08005ffc <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	b086      	sub	sp, #24
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d101      	bne.n	800600e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800600a:	2301      	movs	r3, #1
 800600c:	e28d      	b.n	800652a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	f003 0301 	and.w	r3, r3, #1
 8006016:	2b00      	cmp	r3, #0
 8006018:	f000 8083 	beq.w	8006122 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800601c:	4b94      	ldr	r3, [pc, #592]	@ (8006270 <HAL_RCC_OscConfig+0x274>)
 800601e:	689b      	ldr	r3, [r3, #8]
 8006020:	f003 030c 	and.w	r3, r3, #12
 8006024:	2b04      	cmp	r3, #4
 8006026:	d019      	beq.n	800605c <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8006028:	4b91      	ldr	r3, [pc, #580]	@ (8006270 <HAL_RCC_OscConfig+0x274>)
 800602a:	689b      	ldr	r3, [r3, #8]
 800602c:	f003 030c 	and.w	r3, r3, #12
        || \
 8006030:	2b08      	cmp	r3, #8
 8006032:	d106      	bne.n	8006042 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8006034:	4b8e      	ldr	r3, [pc, #568]	@ (8006270 <HAL_RCC_OscConfig+0x274>)
 8006036:	685b      	ldr	r3, [r3, #4]
 8006038:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800603c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006040:	d00c      	beq.n	800605c <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006042:	4b8b      	ldr	r3, [pc, #556]	@ (8006270 <HAL_RCC_OscConfig+0x274>)
 8006044:	689b      	ldr	r3, [r3, #8]
 8006046:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800604a:	2b0c      	cmp	r3, #12
 800604c:	d112      	bne.n	8006074 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800604e:	4b88      	ldr	r3, [pc, #544]	@ (8006270 <HAL_RCC_OscConfig+0x274>)
 8006050:	685b      	ldr	r3, [r3, #4]
 8006052:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006056:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800605a:	d10b      	bne.n	8006074 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800605c:	4b84      	ldr	r3, [pc, #528]	@ (8006270 <HAL_RCC_OscConfig+0x274>)
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006064:	2b00      	cmp	r3, #0
 8006066:	d05b      	beq.n	8006120 <HAL_RCC_OscConfig+0x124>
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	685b      	ldr	r3, [r3, #4]
 800606c:	2b00      	cmp	r3, #0
 800606e:	d157      	bne.n	8006120 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8006070:	2301      	movs	r3, #1
 8006072:	e25a      	b.n	800652a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	685b      	ldr	r3, [r3, #4]
 8006078:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800607c:	d106      	bne.n	800608c <HAL_RCC_OscConfig+0x90>
 800607e:	4b7c      	ldr	r3, [pc, #496]	@ (8006270 <HAL_RCC_OscConfig+0x274>)
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	4a7b      	ldr	r2, [pc, #492]	@ (8006270 <HAL_RCC_OscConfig+0x274>)
 8006084:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006088:	6013      	str	r3, [r2, #0]
 800608a:	e01d      	b.n	80060c8 <HAL_RCC_OscConfig+0xcc>
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	685b      	ldr	r3, [r3, #4]
 8006090:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006094:	d10c      	bne.n	80060b0 <HAL_RCC_OscConfig+0xb4>
 8006096:	4b76      	ldr	r3, [pc, #472]	@ (8006270 <HAL_RCC_OscConfig+0x274>)
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	4a75      	ldr	r2, [pc, #468]	@ (8006270 <HAL_RCC_OscConfig+0x274>)
 800609c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80060a0:	6013      	str	r3, [r2, #0]
 80060a2:	4b73      	ldr	r3, [pc, #460]	@ (8006270 <HAL_RCC_OscConfig+0x274>)
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	4a72      	ldr	r2, [pc, #456]	@ (8006270 <HAL_RCC_OscConfig+0x274>)
 80060a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80060ac:	6013      	str	r3, [r2, #0]
 80060ae:	e00b      	b.n	80060c8 <HAL_RCC_OscConfig+0xcc>
 80060b0:	4b6f      	ldr	r3, [pc, #444]	@ (8006270 <HAL_RCC_OscConfig+0x274>)
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	4a6e      	ldr	r2, [pc, #440]	@ (8006270 <HAL_RCC_OscConfig+0x274>)
 80060b6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80060ba:	6013      	str	r3, [r2, #0]
 80060bc:	4b6c      	ldr	r3, [pc, #432]	@ (8006270 <HAL_RCC_OscConfig+0x274>)
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	4a6b      	ldr	r2, [pc, #428]	@ (8006270 <HAL_RCC_OscConfig+0x274>)
 80060c2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80060c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	685b      	ldr	r3, [r3, #4]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d013      	beq.n	80060f8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060d0:	f7fd fe06 	bl	8003ce0 <HAL_GetTick>
 80060d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80060d6:	e008      	b.n	80060ea <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80060d8:	f7fd fe02 	bl	8003ce0 <HAL_GetTick>
 80060dc:	4602      	mov	r2, r0
 80060de:	693b      	ldr	r3, [r7, #16]
 80060e0:	1ad3      	subs	r3, r2, r3
 80060e2:	2b64      	cmp	r3, #100	@ 0x64
 80060e4:	d901      	bls.n	80060ea <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80060e6:	2303      	movs	r3, #3
 80060e8:	e21f      	b.n	800652a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80060ea:	4b61      	ldr	r3, [pc, #388]	@ (8006270 <HAL_RCC_OscConfig+0x274>)
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d0f0      	beq.n	80060d8 <HAL_RCC_OscConfig+0xdc>
 80060f6:	e014      	b.n	8006122 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060f8:	f7fd fdf2 	bl	8003ce0 <HAL_GetTick>
 80060fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80060fe:	e008      	b.n	8006112 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006100:	f7fd fdee 	bl	8003ce0 <HAL_GetTick>
 8006104:	4602      	mov	r2, r0
 8006106:	693b      	ldr	r3, [r7, #16]
 8006108:	1ad3      	subs	r3, r2, r3
 800610a:	2b64      	cmp	r3, #100	@ 0x64
 800610c:	d901      	bls.n	8006112 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800610e:	2303      	movs	r3, #3
 8006110:	e20b      	b.n	800652a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006112:	4b57      	ldr	r3, [pc, #348]	@ (8006270 <HAL_RCC_OscConfig+0x274>)
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800611a:	2b00      	cmp	r3, #0
 800611c:	d1f0      	bne.n	8006100 <HAL_RCC_OscConfig+0x104>
 800611e:	e000      	b.n	8006122 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006120:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f003 0302 	and.w	r3, r3, #2
 800612a:	2b00      	cmp	r3, #0
 800612c:	d06f      	beq.n	800620e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800612e:	4b50      	ldr	r3, [pc, #320]	@ (8006270 <HAL_RCC_OscConfig+0x274>)
 8006130:	689b      	ldr	r3, [r3, #8]
 8006132:	f003 030c 	and.w	r3, r3, #12
 8006136:	2b00      	cmp	r3, #0
 8006138:	d017      	beq.n	800616a <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800613a:	4b4d      	ldr	r3, [pc, #308]	@ (8006270 <HAL_RCC_OscConfig+0x274>)
 800613c:	689b      	ldr	r3, [r3, #8]
 800613e:	f003 030c 	and.w	r3, r3, #12
        || \
 8006142:	2b08      	cmp	r3, #8
 8006144:	d105      	bne.n	8006152 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8006146:	4b4a      	ldr	r3, [pc, #296]	@ (8006270 <HAL_RCC_OscConfig+0x274>)
 8006148:	685b      	ldr	r3, [r3, #4]
 800614a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800614e:	2b00      	cmp	r3, #0
 8006150:	d00b      	beq.n	800616a <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006152:	4b47      	ldr	r3, [pc, #284]	@ (8006270 <HAL_RCC_OscConfig+0x274>)
 8006154:	689b      	ldr	r3, [r3, #8]
 8006156:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800615a:	2b0c      	cmp	r3, #12
 800615c:	d11c      	bne.n	8006198 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800615e:	4b44      	ldr	r3, [pc, #272]	@ (8006270 <HAL_RCC_OscConfig+0x274>)
 8006160:	685b      	ldr	r3, [r3, #4]
 8006162:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006166:	2b00      	cmp	r3, #0
 8006168:	d116      	bne.n	8006198 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800616a:	4b41      	ldr	r3, [pc, #260]	@ (8006270 <HAL_RCC_OscConfig+0x274>)
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f003 0302 	and.w	r3, r3, #2
 8006172:	2b00      	cmp	r3, #0
 8006174:	d005      	beq.n	8006182 <HAL_RCC_OscConfig+0x186>
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	68db      	ldr	r3, [r3, #12]
 800617a:	2b01      	cmp	r3, #1
 800617c:	d001      	beq.n	8006182 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800617e:	2301      	movs	r3, #1
 8006180:	e1d3      	b.n	800652a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006182:	4b3b      	ldr	r3, [pc, #236]	@ (8006270 <HAL_RCC_OscConfig+0x274>)
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	691b      	ldr	r3, [r3, #16]
 800618e:	00db      	lsls	r3, r3, #3
 8006190:	4937      	ldr	r1, [pc, #220]	@ (8006270 <HAL_RCC_OscConfig+0x274>)
 8006192:	4313      	orrs	r3, r2
 8006194:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006196:	e03a      	b.n	800620e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	68db      	ldr	r3, [r3, #12]
 800619c:	2b00      	cmp	r3, #0
 800619e:	d020      	beq.n	80061e2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80061a0:	4b34      	ldr	r3, [pc, #208]	@ (8006274 <HAL_RCC_OscConfig+0x278>)
 80061a2:	2201      	movs	r2, #1
 80061a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061a6:	f7fd fd9b 	bl	8003ce0 <HAL_GetTick>
 80061aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80061ac:	e008      	b.n	80061c0 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80061ae:	f7fd fd97 	bl	8003ce0 <HAL_GetTick>
 80061b2:	4602      	mov	r2, r0
 80061b4:	693b      	ldr	r3, [r7, #16]
 80061b6:	1ad3      	subs	r3, r2, r3
 80061b8:	2b02      	cmp	r3, #2
 80061ba:	d901      	bls.n	80061c0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80061bc:	2303      	movs	r3, #3
 80061be:	e1b4      	b.n	800652a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80061c0:	4b2b      	ldr	r3, [pc, #172]	@ (8006270 <HAL_RCC_OscConfig+0x274>)
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f003 0302 	and.w	r3, r3, #2
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d0f0      	beq.n	80061ae <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80061cc:	4b28      	ldr	r3, [pc, #160]	@ (8006270 <HAL_RCC_OscConfig+0x274>)
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	691b      	ldr	r3, [r3, #16]
 80061d8:	00db      	lsls	r3, r3, #3
 80061da:	4925      	ldr	r1, [pc, #148]	@ (8006270 <HAL_RCC_OscConfig+0x274>)
 80061dc:	4313      	orrs	r3, r2
 80061de:	600b      	str	r3, [r1, #0]
 80061e0:	e015      	b.n	800620e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80061e2:	4b24      	ldr	r3, [pc, #144]	@ (8006274 <HAL_RCC_OscConfig+0x278>)
 80061e4:	2200      	movs	r2, #0
 80061e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061e8:	f7fd fd7a 	bl	8003ce0 <HAL_GetTick>
 80061ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80061ee:	e008      	b.n	8006202 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80061f0:	f7fd fd76 	bl	8003ce0 <HAL_GetTick>
 80061f4:	4602      	mov	r2, r0
 80061f6:	693b      	ldr	r3, [r7, #16]
 80061f8:	1ad3      	subs	r3, r2, r3
 80061fa:	2b02      	cmp	r3, #2
 80061fc:	d901      	bls.n	8006202 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80061fe:	2303      	movs	r3, #3
 8006200:	e193      	b.n	800652a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006202:	4b1b      	ldr	r3, [pc, #108]	@ (8006270 <HAL_RCC_OscConfig+0x274>)
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	f003 0302 	and.w	r3, r3, #2
 800620a:	2b00      	cmp	r3, #0
 800620c:	d1f0      	bne.n	80061f0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	f003 0308 	and.w	r3, r3, #8
 8006216:	2b00      	cmp	r3, #0
 8006218:	d036      	beq.n	8006288 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	695b      	ldr	r3, [r3, #20]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d016      	beq.n	8006250 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006222:	4b15      	ldr	r3, [pc, #84]	@ (8006278 <HAL_RCC_OscConfig+0x27c>)
 8006224:	2201      	movs	r2, #1
 8006226:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006228:	f7fd fd5a 	bl	8003ce0 <HAL_GetTick>
 800622c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800622e:	e008      	b.n	8006242 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006230:	f7fd fd56 	bl	8003ce0 <HAL_GetTick>
 8006234:	4602      	mov	r2, r0
 8006236:	693b      	ldr	r3, [r7, #16]
 8006238:	1ad3      	subs	r3, r2, r3
 800623a:	2b02      	cmp	r3, #2
 800623c:	d901      	bls.n	8006242 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800623e:	2303      	movs	r3, #3
 8006240:	e173      	b.n	800652a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006242:	4b0b      	ldr	r3, [pc, #44]	@ (8006270 <HAL_RCC_OscConfig+0x274>)
 8006244:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006246:	f003 0302 	and.w	r3, r3, #2
 800624a:	2b00      	cmp	r3, #0
 800624c:	d0f0      	beq.n	8006230 <HAL_RCC_OscConfig+0x234>
 800624e:	e01b      	b.n	8006288 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006250:	4b09      	ldr	r3, [pc, #36]	@ (8006278 <HAL_RCC_OscConfig+0x27c>)
 8006252:	2200      	movs	r2, #0
 8006254:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006256:	f7fd fd43 	bl	8003ce0 <HAL_GetTick>
 800625a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800625c:	e00e      	b.n	800627c <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800625e:	f7fd fd3f 	bl	8003ce0 <HAL_GetTick>
 8006262:	4602      	mov	r2, r0
 8006264:	693b      	ldr	r3, [r7, #16]
 8006266:	1ad3      	subs	r3, r2, r3
 8006268:	2b02      	cmp	r3, #2
 800626a:	d907      	bls.n	800627c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800626c:	2303      	movs	r3, #3
 800626e:	e15c      	b.n	800652a <HAL_RCC_OscConfig+0x52e>
 8006270:	40023800 	.word	0x40023800
 8006274:	42470000 	.word	0x42470000
 8006278:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800627c:	4b8a      	ldr	r3, [pc, #552]	@ (80064a8 <HAL_RCC_OscConfig+0x4ac>)
 800627e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006280:	f003 0302 	and.w	r3, r3, #2
 8006284:	2b00      	cmp	r3, #0
 8006286:	d1ea      	bne.n	800625e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f003 0304 	and.w	r3, r3, #4
 8006290:	2b00      	cmp	r3, #0
 8006292:	f000 8097 	beq.w	80063c4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006296:	2300      	movs	r3, #0
 8006298:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800629a:	4b83      	ldr	r3, [pc, #524]	@ (80064a8 <HAL_RCC_OscConfig+0x4ac>)
 800629c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800629e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d10f      	bne.n	80062c6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80062a6:	2300      	movs	r3, #0
 80062a8:	60bb      	str	r3, [r7, #8]
 80062aa:	4b7f      	ldr	r3, [pc, #508]	@ (80064a8 <HAL_RCC_OscConfig+0x4ac>)
 80062ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062ae:	4a7e      	ldr	r2, [pc, #504]	@ (80064a8 <HAL_RCC_OscConfig+0x4ac>)
 80062b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80062b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80062b6:	4b7c      	ldr	r3, [pc, #496]	@ (80064a8 <HAL_RCC_OscConfig+0x4ac>)
 80062b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80062be:	60bb      	str	r3, [r7, #8]
 80062c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80062c2:	2301      	movs	r3, #1
 80062c4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80062c6:	4b79      	ldr	r3, [pc, #484]	@ (80064ac <HAL_RCC_OscConfig+0x4b0>)
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d118      	bne.n	8006304 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80062d2:	4b76      	ldr	r3, [pc, #472]	@ (80064ac <HAL_RCC_OscConfig+0x4b0>)
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	4a75      	ldr	r2, [pc, #468]	@ (80064ac <HAL_RCC_OscConfig+0x4b0>)
 80062d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80062dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80062de:	f7fd fcff 	bl	8003ce0 <HAL_GetTick>
 80062e2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80062e4:	e008      	b.n	80062f8 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80062e6:	f7fd fcfb 	bl	8003ce0 <HAL_GetTick>
 80062ea:	4602      	mov	r2, r0
 80062ec:	693b      	ldr	r3, [r7, #16]
 80062ee:	1ad3      	subs	r3, r2, r3
 80062f0:	2b02      	cmp	r3, #2
 80062f2:	d901      	bls.n	80062f8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80062f4:	2303      	movs	r3, #3
 80062f6:	e118      	b.n	800652a <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80062f8:	4b6c      	ldr	r3, [pc, #432]	@ (80064ac <HAL_RCC_OscConfig+0x4b0>)
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006300:	2b00      	cmp	r3, #0
 8006302:	d0f0      	beq.n	80062e6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	689b      	ldr	r3, [r3, #8]
 8006308:	2b01      	cmp	r3, #1
 800630a:	d106      	bne.n	800631a <HAL_RCC_OscConfig+0x31e>
 800630c:	4b66      	ldr	r3, [pc, #408]	@ (80064a8 <HAL_RCC_OscConfig+0x4ac>)
 800630e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006310:	4a65      	ldr	r2, [pc, #404]	@ (80064a8 <HAL_RCC_OscConfig+0x4ac>)
 8006312:	f043 0301 	orr.w	r3, r3, #1
 8006316:	6713      	str	r3, [r2, #112]	@ 0x70
 8006318:	e01c      	b.n	8006354 <HAL_RCC_OscConfig+0x358>
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	689b      	ldr	r3, [r3, #8]
 800631e:	2b05      	cmp	r3, #5
 8006320:	d10c      	bne.n	800633c <HAL_RCC_OscConfig+0x340>
 8006322:	4b61      	ldr	r3, [pc, #388]	@ (80064a8 <HAL_RCC_OscConfig+0x4ac>)
 8006324:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006326:	4a60      	ldr	r2, [pc, #384]	@ (80064a8 <HAL_RCC_OscConfig+0x4ac>)
 8006328:	f043 0304 	orr.w	r3, r3, #4
 800632c:	6713      	str	r3, [r2, #112]	@ 0x70
 800632e:	4b5e      	ldr	r3, [pc, #376]	@ (80064a8 <HAL_RCC_OscConfig+0x4ac>)
 8006330:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006332:	4a5d      	ldr	r2, [pc, #372]	@ (80064a8 <HAL_RCC_OscConfig+0x4ac>)
 8006334:	f043 0301 	orr.w	r3, r3, #1
 8006338:	6713      	str	r3, [r2, #112]	@ 0x70
 800633a:	e00b      	b.n	8006354 <HAL_RCC_OscConfig+0x358>
 800633c:	4b5a      	ldr	r3, [pc, #360]	@ (80064a8 <HAL_RCC_OscConfig+0x4ac>)
 800633e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006340:	4a59      	ldr	r2, [pc, #356]	@ (80064a8 <HAL_RCC_OscConfig+0x4ac>)
 8006342:	f023 0301 	bic.w	r3, r3, #1
 8006346:	6713      	str	r3, [r2, #112]	@ 0x70
 8006348:	4b57      	ldr	r3, [pc, #348]	@ (80064a8 <HAL_RCC_OscConfig+0x4ac>)
 800634a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800634c:	4a56      	ldr	r2, [pc, #344]	@ (80064a8 <HAL_RCC_OscConfig+0x4ac>)
 800634e:	f023 0304 	bic.w	r3, r3, #4
 8006352:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	689b      	ldr	r3, [r3, #8]
 8006358:	2b00      	cmp	r3, #0
 800635a:	d015      	beq.n	8006388 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800635c:	f7fd fcc0 	bl	8003ce0 <HAL_GetTick>
 8006360:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006362:	e00a      	b.n	800637a <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006364:	f7fd fcbc 	bl	8003ce0 <HAL_GetTick>
 8006368:	4602      	mov	r2, r0
 800636a:	693b      	ldr	r3, [r7, #16]
 800636c:	1ad3      	subs	r3, r2, r3
 800636e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006372:	4293      	cmp	r3, r2
 8006374:	d901      	bls.n	800637a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8006376:	2303      	movs	r3, #3
 8006378:	e0d7      	b.n	800652a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800637a:	4b4b      	ldr	r3, [pc, #300]	@ (80064a8 <HAL_RCC_OscConfig+0x4ac>)
 800637c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800637e:	f003 0302 	and.w	r3, r3, #2
 8006382:	2b00      	cmp	r3, #0
 8006384:	d0ee      	beq.n	8006364 <HAL_RCC_OscConfig+0x368>
 8006386:	e014      	b.n	80063b2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006388:	f7fd fcaa 	bl	8003ce0 <HAL_GetTick>
 800638c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800638e:	e00a      	b.n	80063a6 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006390:	f7fd fca6 	bl	8003ce0 <HAL_GetTick>
 8006394:	4602      	mov	r2, r0
 8006396:	693b      	ldr	r3, [r7, #16]
 8006398:	1ad3      	subs	r3, r2, r3
 800639a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800639e:	4293      	cmp	r3, r2
 80063a0:	d901      	bls.n	80063a6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80063a2:	2303      	movs	r3, #3
 80063a4:	e0c1      	b.n	800652a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80063a6:	4b40      	ldr	r3, [pc, #256]	@ (80064a8 <HAL_RCC_OscConfig+0x4ac>)
 80063a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80063aa:	f003 0302 	and.w	r3, r3, #2
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d1ee      	bne.n	8006390 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80063b2:	7dfb      	ldrb	r3, [r7, #23]
 80063b4:	2b01      	cmp	r3, #1
 80063b6:	d105      	bne.n	80063c4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80063b8:	4b3b      	ldr	r3, [pc, #236]	@ (80064a8 <HAL_RCC_OscConfig+0x4ac>)
 80063ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063bc:	4a3a      	ldr	r2, [pc, #232]	@ (80064a8 <HAL_RCC_OscConfig+0x4ac>)
 80063be:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80063c2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	699b      	ldr	r3, [r3, #24]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	f000 80ad 	beq.w	8006528 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80063ce:	4b36      	ldr	r3, [pc, #216]	@ (80064a8 <HAL_RCC_OscConfig+0x4ac>)
 80063d0:	689b      	ldr	r3, [r3, #8]
 80063d2:	f003 030c 	and.w	r3, r3, #12
 80063d6:	2b08      	cmp	r3, #8
 80063d8:	d060      	beq.n	800649c <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	699b      	ldr	r3, [r3, #24]
 80063de:	2b02      	cmp	r3, #2
 80063e0:	d145      	bne.n	800646e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80063e2:	4b33      	ldr	r3, [pc, #204]	@ (80064b0 <HAL_RCC_OscConfig+0x4b4>)
 80063e4:	2200      	movs	r2, #0
 80063e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063e8:	f7fd fc7a 	bl	8003ce0 <HAL_GetTick>
 80063ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80063ee:	e008      	b.n	8006402 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80063f0:	f7fd fc76 	bl	8003ce0 <HAL_GetTick>
 80063f4:	4602      	mov	r2, r0
 80063f6:	693b      	ldr	r3, [r7, #16]
 80063f8:	1ad3      	subs	r3, r2, r3
 80063fa:	2b02      	cmp	r3, #2
 80063fc:	d901      	bls.n	8006402 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80063fe:	2303      	movs	r3, #3
 8006400:	e093      	b.n	800652a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006402:	4b29      	ldr	r3, [pc, #164]	@ (80064a8 <HAL_RCC_OscConfig+0x4ac>)
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800640a:	2b00      	cmp	r3, #0
 800640c:	d1f0      	bne.n	80063f0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	69da      	ldr	r2, [r3, #28]
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	6a1b      	ldr	r3, [r3, #32]
 8006416:	431a      	orrs	r2, r3
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800641c:	019b      	lsls	r3, r3, #6
 800641e:	431a      	orrs	r2, r3
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006424:	085b      	lsrs	r3, r3, #1
 8006426:	3b01      	subs	r3, #1
 8006428:	041b      	lsls	r3, r3, #16
 800642a:	431a      	orrs	r2, r3
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006430:	061b      	lsls	r3, r3, #24
 8006432:	431a      	orrs	r2, r3
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006438:	071b      	lsls	r3, r3, #28
 800643a:	491b      	ldr	r1, [pc, #108]	@ (80064a8 <HAL_RCC_OscConfig+0x4ac>)
 800643c:	4313      	orrs	r3, r2
 800643e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006440:	4b1b      	ldr	r3, [pc, #108]	@ (80064b0 <HAL_RCC_OscConfig+0x4b4>)
 8006442:	2201      	movs	r2, #1
 8006444:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006446:	f7fd fc4b 	bl	8003ce0 <HAL_GetTick>
 800644a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800644c:	e008      	b.n	8006460 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800644e:	f7fd fc47 	bl	8003ce0 <HAL_GetTick>
 8006452:	4602      	mov	r2, r0
 8006454:	693b      	ldr	r3, [r7, #16]
 8006456:	1ad3      	subs	r3, r2, r3
 8006458:	2b02      	cmp	r3, #2
 800645a:	d901      	bls.n	8006460 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800645c:	2303      	movs	r3, #3
 800645e:	e064      	b.n	800652a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006460:	4b11      	ldr	r3, [pc, #68]	@ (80064a8 <HAL_RCC_OscConfig+0x4ac>)
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006468:	2b00      	cmp	r3, #0
 800646a:	d0f0      	beq.n	800644e <HAL_RCC_OscConfig+0x452>
 800646c:	e05c      	b.n	8006528 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800646e:	4b10      	ldr	r3, [pc, #64]	@ (80064b0 <HAL_RCC_OscConfig+0x4b4>)
 8006470:	2200      	movs	r2, #0
 8006472:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006474:	f7fd fc34 	bl	8003ce0 <HAL_GetTick>
 8006478:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800647a:	e008      	b.n	800648e <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800647c:	f7fd fc30 	bl	8003ce0 <HAL_GetTick>
 8006480:	4602      	mov	r2, r0
 8006482:	693b      	ldr	r3, [r7, #16]
 8006484:	1ad3      	subs	r3, r2, r3
 8006486:	2b02      	cmp	r3, #2
 8006488:	d901      	bls.n	800648e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800648a:	2303      	movs	r3, #3
 800648c:	e04d      	b.n	800652a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800648e:	4b06      	ldr	r3, [pc, #24]	@ (80064a8 <HAL_RCC_OscConfig+0x4ac>)
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006496:	2b00      	cmp	r3, #0
 8006498:	d1f0      	bne.n	800647c <HAL_RCC_OscConfig+0x480>
 800649a:	e045      	b.n	8006528 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	699b      	ldr	r3, [r3, #24]
 80064a0:	2b01      	cmp	r3, #1
 80064a2:	d107      	bne.n	80064b4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80064a4:	2301      	movs	r3, #1
 80064a6:	e040      	b.n	800652a <HAL_RCC_OscConfig+0x52e>
 80064a8:	40023800 	.word	0x40023800
 80064ac:	40007000 	.word	0x40007000
 80064b0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80064b4:	4b1f      	ldr	r3, [pc, #124]	@ (8006534 <HAL_RCC_OscConfig+0x538>)
 80064b6:	685b      	ldr	r3, [r3, #4]
 80064b8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	699b      	ldr	r3, [r3, #24]
 80064be:	2b01      	cmp	r3, #1
 80064c0:	d030      	beq.n	8006524 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80064cc:	429a      	cmp	r2, r3
 80064ce:	d129      	bne.n	8006524 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80064da:	429a      	cmp	r2, r3
 80064dc:	d122      	bne.n	8006524 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80064de:	68fa      	ldr	r2, [r7, #12]
 80064e0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80064e4:	4013      	ands	r3, r2
 80064e6:	687a      	ldr	r2, [r7, #4]
 80064e8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80064ea:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80064ec:	4293      	cmp	r3, r2
 80064ee:	d119      	bne.n	8006524 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064fa:	085b      	lsrs	r3, r3, #1
 80064fc:	3b01      	subs	r3, #1
 80064fe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006500:	429a      	cmp	r2, r3
 8006502:	d10f      	bne.n	8006524 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800650e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006510:	429a      	cmp	r2, r3
 8006512:	d107      	bne.n	8006524 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800651e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006520:	429a      	cmp	r2, r3
 8006522:	d001      	beq.n	8006528 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8006524:	2301      	movs	r3, #1
 8006526:	e000      	b.n	800652a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8006528:	2300      	movs	r3, #0
}
 800652a:	4618      	mov	r0, r3
 800652c:	3718      	adds	r7, #24
 800652e:	46bd      	mov	sp, r7
 8006530:	bd80      	pop	{r7, pc}
 8006532:	bf00      	nop
 8006534:	40023800 	.word	0x40023800

08006538 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006538:	b580      	push	{r7, lr}
 800653a:	b084      	sub	sp, #16
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8006540:	2301      	movs	r3, #1
 8006542:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	2b00      	cmp	r3, #0
 8006548:	d101      	bne.n	800654e <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800654a:	2301      	movs	r3, #1
 800654c:	e073      	b.n	8006636 <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	7f5b      	ldrb	r3, [r3, #29]
 8006552:	b2db      	uxtb	r3, r3
 8006554:	2b00      	cmp	r3, #0
 8006556:	d105      	bne.n	8006564 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2200      	movs	r2, #0
 800655c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800655e:	6878      	ldr	r0, [r7, #4]
 8006560:	f7fc f81a 	bl	8002598 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	2202      	movs	r2, #2
 8006568:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	68db      	ldr	r3, [r3, #12]
 8006570:	f003 0310 	and.w	r3, r3, #16
 8006574:	2b10      	cmp	r3, #16
 8006576:	d055      	beq.n	8006624 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	22ca      	movs	r2, #202	@ 0xca
 800657e:	625a      	str	r2, [r3, #36]	@ 0x24
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	2253      	movs	r2, #83	@ 0x53
 8006586:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8006588:	6878      	ldr	r0, [r7, #4]
 800658a:	f000 fa49 	bl	8006a20 <RTC_EnterInitMode>
 800658e:	4603      	mov	r3, r0
 8006590:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8006592:	7bfb      	ldrb	r3, [r7, #15]
 8006594:	2b00      	cmp	r3, #0
 8006596:	d12c      	bne.n	80065f2 <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	689b      	ldr	r3, [r3, #8]
 800659e:	687a      	ldr	r2, [r7, #4]
 80065a0:	6812      	ldr	r2, [r2, #0]
 80065a2:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80065a6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80065aa:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	6899      	ldr	r1, [r3, #8]
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	685a      	ldr	r2, [r3, #4]
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	691b      	ldr	r3, [r3, #16]
 80065ba:	431a      	orrs	r2, r3
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	695b      	ldr	r3, [r3, #20]
 80065c0:	431a      	orrs	r2, r3
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	430a      	orrs	r2, r1
 80065c8:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	687a      	ldr	r2, [r7, #4]
 80065d0:	68d2      	ldr	r2, [r2, #12]
 80065d2:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	6919      	ldr	r1, [r3, #16]
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	689b      	ldr	r3, [r3, #8]
 80065de:	041a      	lsls	r2, r3, #16
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	430a      	orrs	r2, r1
 80065e6:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80065e8:	6878      	ldr	r0, [r7, #4]
 80065ea:	f000 fa50 	bl	8006a8e <RTC_ExitInitMode>
 80065ee:	4603      	mov	r3, r0
 80065f0:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 80065f2:	7bfb      	ldrb	r3, [r7, #15]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d110      	bne.n	800661a <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8006606:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	699a      	ldr	r2, [r3, #24]
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	430a      	orrs	r2, r1
 8006618:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	22ff      	movs	r2, #255	@ 0xff
 8006620:	625a      	str	r2, [r3, #36]	@ 0x24
 8006622:	e001      	b.n	8006628 <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8006624:	2300      	movs	r3, #0
 8006626:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8006628:	7bfb      	ldrb	r3, [r7, #15]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d102      	bne.n	8006634 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	2201      	movs	r2, #1
 8006632:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8006634:	7bfb      	ldrb	r3, [r7, #15]
}
 8006636:	4618      	mov	r0, r3
 8006638:	3710      	adds	r7, #16
 800663a:	46bd      	mov	sp, r7
 800663c:	bd80      	pop	{r7, pc}

0800663e <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800663e:	b590      	push	{r4, r7, lr}
 8006640:	b087      	sub	sp, #28
 8006642:	af00      	add	r7, sp, #0
 8006644:	60f8      	str	r0, [r7, #12]
 8006646:	60b9      	str	r1, [r7, #8]
 8006648:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800664a:	2300      	movs	r3, #0
 800664c:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	7f1b      	ldrb	r3, [r3, #28]
 8006652:	2b01      	cmp	r3, #1
 8006654:	d101      	bne.n	800665a <HAL_RTC_SetTime+0x1c>
 8006656:	2302      	movs	r3, #2
 8006658:	e087      	b.n	800676a <HAL_RTC_SetTime+0x12c>
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	2201      	movs	r2, #1
 800665e:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	2202      	movs	r2, #2
 8006664:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d126      	bne.n	80066ba <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	689b      	ldr	r3, [r3, #8]
 8006672:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006676:	2b00      	cmp	r3, #0
 8006678:	d102      	bne.n	8006680 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800667a:	68bb      	ldr	r3, [r7, #8]
 800667c:	2200      	movs	r2, #0
 800667e:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8006680:	68bb      	ldr	r3, [r7, #8]
 8006682:	781b      	ldrb	r3, [r3, #0]
 8006684:	4618      	mov	r0, r3
 8006686:	f000 fa27 	bl	8006ad8 <RTC_ByteToBcd2>
 800668a:	4603      	mov	r3, r0
 800668c:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800668e:	68bb      	ldr	r3, [r7, #8]
 8006690:	785b      	ldrb	r3, [r3, #1]
 8006692:	4618      	mov	r0, r3
 8006694:	f000 fa20 	bl	8006ad8 <RTC_ByteToBcd2>
 8006698:	4603      	mov	r3, r0
 800669a:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800669c:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 800669e:	68bb      	ldr	r3, [r7, #8]
 80066a0:	789b      	ldrb	r3, [r3, #2]
 80066a2:	4618      	mov	r0, r3
 80066a4:	f000 fa18 	bl	8006ad8 <RTC_ByteToBcd2>
 80066a8:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80066aa:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 80066ae:	68bb      	ldr	r3, [r7, #8]
 80066b0:	78db      	ldrb	r3, [r3, #3]
 80066b2:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80066b4:	4313      	orrs	r3, r2
 80066b6:	617b      	str	r3, [r7, #20]
 80066b8:	e018      	b.n	80066ec <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	689b      	ldr	r3, [r3, #8]
 80066c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d102      	bne.n	80066ce <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80066c8:	68bb      	ldr	r3, [r7, #8]
 80066ca:	2200      	movs	r2, #0
 80066cc:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80066ce:	68bb      	ldr	r3, [r7, #8]
 80066d0:	781b      	ldrb	r3, [r3, #0]
 80066d2:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80066d4:	68bb      	ldr	r3, [r7, #8]
 80066d6:	785b      	ldrb	r3, [r3, #1]
 80066d8:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80066da:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 80066dc:	68ba      	ldr	r2, [r7, #8]
 80066de:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80066e0:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80066e2:	68bb      	ldr	r3, [r7, #8]
 80066e4:	78db      	ldrb	r3, [r3, #3]
 80066e6:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80066e8:	4313      	orrs	r3, r2
 80066ea:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	22ca      	movs	r2, #202	@ 0xca
 80066f2:	625a      	str	r2, [r3, #36]	@ 0x24
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	2253      	movs	r2, #83	@ 0x53
 80066fa:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80066fc:	68f8      	ldr	r0, [r7, #12]
 80066fe:	f000 f98f 	bl	8006a20 <RTC_EnterInitMode>
 8006702:	4603      	mov	r3, r0
 8006704:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8006706:	7cfb      	ldrb	r3, [r7, #19]
 8006708:	2b00      	cmp	r3, #0
 800670a:	d120      	bne.n	800674e <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	681a      	ldr	r2, [r3, #0]
 8006710:	697b      	ldr	r3, [r7, #20]
 8006712:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8006716:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 800671a:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	689a      	ldr	r2, [r3, #8]
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800672a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	6899      	ldr	r1, [r3, #8]
 8006732:	68bb      	ldr	r3, [r7, #8]
 8006734:	68da      	ldr	r2, [r3, #12]
 8006736:	68bb      	ldr	r3, [r7, #8]
 8006738:	691b      	ldr	r3, [r3, #16]
 800673a:	431a      	orrs	r2, r3
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	430a      	orrs	r2, r1
 8006742:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006744:	68f8      	ldr	r0, [r7, #12]
 8006746:	f000 f9a2 	bl	8006a8e <RTC_ExitInitMode>
 800674a:	4603      	mov	r3, r0
 800674c:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800674e:	7cfb      	ldrb	r3, [r7, #19]
 8006750:	2b00      	cmp	r3, #0
 8006752:	d102      	bne.n	800675a <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	2201      	movs	r2, #1
 8006758:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	22ff      	movs	r2, #255	@ 0xff
 8006760:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	2200      	movs	r2, #0
 8006766:	771a      	strb	r2, [r3, #28]

  return status;
 8006768:	7cfb      	ldrb	r3, [r7, #19]
}
 800676a:	4618      	mov	r0, r3
 800676c:	371c      	adds	r7, #28
 800676e:	46bd      	mov	sp, r7
 8006770:	bd90      	pop	{r4, r7, pc}

08006772 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006772:	b580      	push	{r7, lr}
 8006774:	b086      	sub	sp, #24
 8006776:	af00      	add	r7, sp, #0
 8006778:	60f8      	str	r0, [r7, #12]
 800677a:	60b9      	str	r1, [r7, #8]
 800677c:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800677e:	2300      	movs	r3, #0
 8006780:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006788:	68bb      	ldr	r3, [r7, #8]
 800678a:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	691b      	ldr	r3, [r3, #16]
 8006792:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8006796:	68bb      	ldr	r3, [r7, #8]
 8006798:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 80067a4:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 80067a8:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 80067aa:	697b      	ldr	r3, [r7, #20]
 80067ac:	0c1b      	lsrs	r3, r3, #16
 80067ae:	b2db      	uxtb	r3, r3
 80067b0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80067b4:	b2da      	uxtb	r2, r3
 80067b6:	68bb      	ldr	r3, [r7, #8]
 80067b8:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80067ba:	697b      	ldr	r3, [r7, #20]
 80067bc:	0a1b      	lsrs	r3, r3, #8
 80067be:	b2db      	uxtb	r3, r3
 80067c0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80067c4:	b2da      	uxtb	r2, r3
 80067c6:	68bb      	ldr	r3, [r7, #8]
 80067c8:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 80067ca:	697b      	ldr	r3, [r7, #20]
 80067cc:	b2db      	uxtb	r3, r3
 80067ce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80067d2:	b2da      	uxtb	r2, r3
 80067d4:	68bb      	ldr	r3, [r7, #8]
 80067d6:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 80067d8:	697b      	ldr	r3, [r7, #20]
 80067da:	0d9b      	lsrs	r3, r3, #22
 80067dc:	b2db      	uxtb	r3, r3
 80067de:	f003 0301 	and.w	r3, r3, #1
 80067e2:	b2da      	uxtb	r2, r3
 80067e4:	68bb      	ldr	r3, [r7, #8]
 80067e6:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d11a      	bne.n	8006824 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80067ee:	68bb      	ldr	r3, [r7, #8]
 80067f0:	781b      	ldrb	r3, [r3, #0]
 80067f2:	4618      	mov	r0, r3
 80067f4:	f000 f98e 	bl	8006b14 <RTC_Bcd2ToByte>
 80067f8:	4603      	mov	r3, r0
 80067fa:	461a      	mov	r2, r3
 80067fc:	68bb      	ldr	r3, [r7, #8]
 80067fe:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8006800:	68bb      	ldr	r3, [r7, #8]
 8006802:	785b      	ldrb	r3, [r3, #1]
 8006804:	4618      	mov	r0, r3
 8006806:	f000 f985 	bl	8006b14 <RTC_Bcd2ToByte>
 800680a:	4603      	mov	r3, r0
 800680c:	461a      	mov	r2, r3
 800680e:	68bb      	ldr	r3, [r7, #8]
 8006810:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8006812:	68bb      	ldr	r3, [r7, #8]
 8006814:	789b      	ldrb	r3, [r3, #2]
 8006816:	4618      	mov	r0, r3
 8006818:	f000 f97c 	bl	8006b14 <RTC_Bcd2ToByte>
 800681c:	4603      	mov	r3, r0
 800681e:	461a      	mov	r2, r3
 8006820:	68bb      	ldr	r3, [r7, #8]
 8006822:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8006824:	2300      	movs	r3, #0
}
 8006826:	4618      	mov	r0, r3
 8006828:	3718      	adds	r7, #24
 800682a:	46bd      	mov	sp, r7
 800682c:	bd80      	pop	{r7, pc}

0800682e <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800682e:	b590      	push	{r4, r7, lr}
 8006830:	b087      	sub	sp, #28
 8006832:	af00      	add	r7, sp, #0
 8006834:	60f8      	str	r0, [r7, #12]
 8006836:	60b9      	str	r1, [r7, #8]
 8006838:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800683a:	2300      	movs	r3, #0
 800683c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	7f1b      	ldrb	r3, [r3, #28]
 8006842:	2b01      	cmp	r3, #1
 8006844:	d101      	bne.n	800684a <HAL_RTC_SetDate+0x1c>
 8006846:	2302      	movs	r3, #2
 8006848:	e071      	b.n	800692e <HAL_RTC_SetDate+0x100>
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	2201      	movs	r2, #1
 800684e:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	2202      	movs	r2, #2
 8006854:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	2b00      	cmp	r3, #0
 800685a:	d10e      	bne.n	800687a <HAL_RTC_SetDate+0x4c>
 800685c:	68bb      	ldr	r3, [r7, #8]
 800685e:	785b      	ldrb	r3, [r3, #1]
 8006860:	f003 0310 	and.w	r3, r3, #16
 8006864:	2b00      	cmp	r3, #0
 8006866:	d008      	beq.n	800687a <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8006868:	68bb      	ldr	r3, [r7, #8]
 800686a:	785b      	ldrb	r3, [r3, #1]
 800686c:	f023 0310 	bic.w	r3, r3, #16
 8006870:	b2db      	uxtb	r3, r3
 8006872:	330a      	adds	r3, #10
 8006874:	b2da      	uxtb	r2, r3
 8006876:	68bb      	ldr	r3, [r7, #8]
 8006878:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d11c      	bne.n	80068ba <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006880:	68bb      	ldr	r3, [r7, #8]
 8006882:	78db      	ldrb	r3, [r3, #3]
 8006884:	4618      	mov	r0, r3
 8006886:	f000 f927 	bl	8006ad8 <RTC_ByteToBcd2>
 800688a:	4603      	mov	r3, r0
 800688c:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800688e:	68bb      	ldr	r3, [r7, #8]
 8006890:	785b      	ldrb	r3, [r3, #1]
 8006892:	4618      	mov	r0, r3
 8006894:	f000 f920 	bl	8006ad8 <RTC_ByteToBcd2>
 8006898:	4603      	mov	r3, r0
 800689a:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800689c:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 800689e:	68bb      	ldr	r3, [r7, #8]
 80068a0:	789b      	ldrb	r3, [r3, #2]
 80068a2:	4618      	mov	r0, r3
 80068a4:	f000 f918 	bl	8006ad8 <RTC_ByteToBcd2>
 80068a8:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80068aa:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 80068ae:	68bb      	ldr	r3, [r7, #8]
 80068b0:	781b      	ldrb	r3, [r3, #0]
 80068b2:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80068b4:	4313      	orrs	r3, r2
 80068b6:	617b      	str	r3, [r7, #20]
 80068b8:	e00e      	b.n	80068d8 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80068ba:	68bb      	ldr	r3, [r7, #8]
 80068bc:	78db      	ldrb	r3, [r3, #3]
 80068be:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80068c0:	68bb      	ldr	r3, [r7, #8]
 80068c2:	785b      	ldrb	r3, [r3, #1]
 80068c4:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80068c6:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 80068c8:	68ba      	ldr	r2, [r7, #8]
 80068ca:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80068cc:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80068ce:	68bb      	ldr	r3, [r7, #8]
 80068d0:	781b      	ldrb	r3, [r3, #0]
 80068d2:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80068d4:	4313      	orrs	r3, r2
 80068d6:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	22ca      	movs	r2, #202	@ 0xca
 80068de:	625a      	str	r2, [r3, #36]	@ 0x24
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	2253      	movs	r2, #83	@ 0x53
 80068e6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80068e8:	68f8      	ldr	r0, [r7, #12]
 80068ea:	f000 f899 	bl	8006a20 <RTC_EnterInitMode>
 80068ee:	4603      	mov	r3, r0
 80068f0:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80068f2:	7cfb      	ldrb	r3, [r7, #19]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d10c      	bne.n	8006912 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	681a      	ldr	r2, [r3, #0]
 80068fc:	697b      	ldr	r3, [r7, #20]
 80068fe:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8006902:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8006906:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006908:	68f8      	ldr	r0, [r7, #12]
 800690a:	f000 f8c0 	bl	8006a8e <RTC_ExitInitMode>
 800690e:	4603      	mov	r3, r0
 8006910:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8006912:	7cfb      	ldrb	r3, [r7, #19]
 8006914:	2b00      	cmp	r3, #0
 8006916:	d102      	bne.n	800691e <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	2201      	movs	r2, #1
 800691c:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	22ff      	movs	r2, #255	@ 0xff
 8006924:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	2200      	movs	r2, #0
 800692a:	771a      	strb	r2, [r3, #28]

  return status;
 800692c:	7cfb      	ldrb	r3, [r7, #19]
}
 800692e:	4618      	mov	r0, r3
 8006930:	371c      	adds	r7, #28
 8006932:	46bd      	mov	sp, r7
 8006934:	bd90      	pop	{r4, r7, pc}

08006936 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006936:	b580      	push	{r7, lr}
 8006938:	b086      	sub	sp, #24
 800693a:	af00      	add	r7, sp, #0
 800693c:	60f8      	str	r0, [r7, #12]
 800693e:	60b9      	str	r1, [r7, #8]
 8006940:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8006942:	2300      	movs	r3, #0
 8006944:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	685b      	ldr	r3, [r3, #4]
 800694c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8006950:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8006954:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8006956:	697b      	ldr	r3, [r7, #20]
 8006958:	0c1b      	lsrs	r3, r3, #16
 800695a:	b2da      	uxtb	r2, r3
 800695c:	68bb      	ldr	r3, [r7, #8]
 800695e:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8006960:	697b      	ldr	r3, [r7, #20]
 8006962:	0a1b      	lsrs	r3, r3, #8
 8006964:	b2db      	uxtb	r3, r3
 8006966:	f003 031f 	and.w	r3, r3, #31
 800696a:	b2da      	uxtb	r2, r3
 800696c:	68bb      	ldr	r3, [r7, #8]
 800696e:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8006970:	697b      	ldr	r3, [r7, #20]
 8006972:	b2db      	uxtb	r3, r3
 8006974:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006978:	b2da      	uxtb	r2, r3
 800697a:	68bb      	ldr	r3, [r7, #8]
 800697c:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800697e:	697b      	ldr	r3, [r7, #20]
 8006980:	0b5b      	lsrs	r3, r3, #13
 8006982:	b2db      	uxtb	r3, r3
 8006984:	f003 0307 	and.w	r3, r3, #7
 8006988:	b2da      	uxtb	r2, r3
 800698a:	68bb      	ldr	r3, [r7, #8]
 800698c:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	2b00      	cmp	r3, #0
 8006992:	d11a      	bne.n	80069ca <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8006994:	68bb      	ldr	r3, [r7, #8]
 8006996:	78db      	ldrb	r3, [r3, #3]
 8006998:	4618      	mov	r0, r3
 800699a:	f000 f8bb 	bl	8006b14 <RTC_Bcd2ToByte>
 800699e:	4603      	mov	r3, r0
 80069a0:	461a      	mov	r2, r3
 80069a2:	68bb      	ldr	r3, [r7, #8]
 80069a4:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80069a6:	68bb      	ldr	r3, [r7, #8]
 80069a8:	785b      	ldrb	r3, [r3, #1]
 80069aa:	4618      	mov	r0, r3
 80069ac:	f000 f8b2 	bl	8006b14 <RTC_Bcd2ToByte>
 80069b0:	4603      	mov	r3, r0
 80069b2:	461a      	mov	r2, r3
 80069b4:	68bb      	ldr	r3, [r7, #8]
 80069b6:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80069b8:	68bb      	ldr	r3, [r7, #8]
 80069ba:	789b      	ldrb	r3, [r3, #2]
 80069bc:	4618      	mov	r0, r3
 80069be:	f000 f8a9 	bl	8006b14 <RTC_Bcd2ToByte>
 80069c2:	4603      	mov	r3, r0
 80069c4:	461a      	mov	r2, r3
 80069c6:	68bb      	ldr	r3, [r7, #8]
 80069c8:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80069ca:	2300      	movs	r3, #0
}
 80069cc:	4618      	mov	r0, r3
 80069ce:	3718      	adds	r7, #24
 80069d0:	46bd      	mov	sp, r7
 80069d2:	bd80      	pop	{r7, pc}

080069d4 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80069d4:	b580      	push	{r7, lr}
 80069d6:	b084      	sub	sp, #16
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80069dc:	2300      	movs	r3, #0
 80069de:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	4a0d      	ldr	r2, [pc, #52]	@ (8006a1c <HAL_RTC_WaitForSynchro+0x48>)
 80069e6:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80069e8:	f7fd f97a 	bl	8003ce0 <HAL_GetTick>
 80069ec:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80069ee:	e009      	b.n	8006a04 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80069f0:	f7fd f976 	bl	8003ce0 <HAL_GetTick>
 80069f4:	4602      	mov	r2, r0
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	1ad3      	subs	r3, r2, r3
 80069fa:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80069fe:	d901      	bls.n	8006a04 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8006a00:	2303      	movs	r3, #3
 8006a02:	e007      	b.n	8006a14 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	68db      	ldr	r3, [r3, #12]
 8006a0a:	f003 0320 	and.w	r3, r3, #32
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d0ee      	beq.n	80069f0 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8006a12:	2300      	movs	r3, #0
}
 8006a14:	4618      	mov	r0, r3
 8006a16:	3710      	adds	r7, #16
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	bd80      	pop	{r7, pc}
 8006a1c:	00017f5f 	.word	0x00017f5f

08006a20 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006a20:	b580      	push	{r7, lr}
 8006a22:	b084      	sub	sp, #16
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006a28:	2300      	movs	r3, #0
 8006a2a:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8006a2c:	2300      	movs	r3, #0
 8006a2e:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	68db      	ldr	r3, [r3, #12]
 8006a36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d122      	bne.n	8006a84 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	68da      	ldr	r2, [r3, #12]
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8006a4c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006a4e:	f7fd f947 	bl	8003ce0 <HAL_GetTick>
 8006a52:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8006a54:	e00c      	b.n	8006a70 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006a56:	f7fd f943 	bl	8003ce0 <HAL_GetTick>
 8006a5a:	4602      	mov	r2, r0
 8006a5c:	68bb      	ldr	r3, [r7, #8]
 8006a5e:	1ad3      	subs	r3, r2, r3
 8006a60:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006a64:	d904      	bls.n	8006a70 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	2204      	movs	r2, #4
 8006a6a:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8006a6c:	2301      	movs	r3, #1
 8006a6e:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	68db      	ldr	r3, [r3, #12]
 8006a76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d102      	bne.n	8006a84 <RTC_EnterInitMode+0x64>
 8006a7e:	7bfb      	ldrb	r3, [r7, #15]
 8006a80:	2b01      	cmp	r3, #1
 8006a82:	d1e8      	bne.n	8006a56 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8006a84:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a86:	4618      	mov	r0, r3
 8006a88:	3710      	adds	r7, #16
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	bd80      	pop	{r7, pc}

08006a8e <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8006a8e:	b580      	push	{r7, lr}
 8006a90:	b084      	sub	sp, #16
 8006a92:	af00      	add	r7, sp, #0
 8006a94:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006a96:	2300      	movs	r3, #0
 8006a98:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	68da      	ldr	r2, [r3, #12]
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006aa8:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	689b      	ldr	r3, [r3, #8]
 8006ab0:	f003 0320 	and.w	r3, r3, #32
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d10a      	bne.n	8006ace <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006ab8:	6878      	ldr	r0, [r7, #4]
 8006aba:	f7ff ff8b 	bl	80069d4 <HAL_RTC_WaitForSynchro>
 8006abe:	4603      	mov	r3, r0
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d004      	beq.n	8006ace <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	2204      	movs	r2, #4
 8006ac8:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8006aca:	2301      	movs	r3, #1
 8006acc:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8006ace:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ad0:	4618      	mov	r0, r3
 8006ad2:	3710      	adds	r7, #16
 8006ad4:	46bd      	mov	sp, r7
 8006ad6:	bd80      	pop	{r7, pc}

08006ad8 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8006ad8:	b480      	push	{r7}
 8006ada:	b085      	sub	sp, #20
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	4603      	mov	r3, r0
 8006ae0:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8006ae6:	e005      	b.n	8006af4 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	3301      	adds	r3, #1
 8006aec:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8006aee:	79fb      	ldrb	r3, [r7, #7]
 8006af0:	3b0a      	subs	r3, #10
 8006af2:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8006af4:	79fb      	ldrb	r3, [r7, #7]
 8006af6:	2b09      	cmp	r3, #9
 8006af8:	d8f6      	bhi.n	8006ae8 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	b2db      	uxtb	r3, r3
 8006afe:	011b      	lsls	r3, r3, #4
 8006b00:	b2da      	uxtb	r2, r3
 8006b02:	79fb      	ldrb	r3, [r7, #7]
 8006b04:	4313      	orrs	r3, r2
 8006b06:	b2db      	uxtb	r3, r3
}
 8006b08:	4618      	mov	r0, r3
 8006b0a:	3714      	adds	r7, #20
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b12:	4770      	bx	lr

08006b14 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8006b14:	b480      	push	{r7}
 8006b16:	b085      	sub	sp, #20
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	4603      	mov	r3, r0
 8006b1c:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 8006b1e:	2300      	movs	r3, #0
 8006b20:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8006b22:	79fb      	ldrb	r3, [r7, #7]
 8006b24:	091b      	lsrs	r3, r3, #4
 8006b26:	b2db      	uxtb	r3, r3
 8006b28:	461a      	mov	r2, r3
 8006b2a:	4613      	mov	r3, r2
 8006b2c:	009b      	lsls	r3, r3, #2
 8006b2e:	4413      	add	r3, r2
 8006b30:	005b      	lsls	r3, r3, #1
 8006b32:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	b2da      	uxtb	r2, r3
 8006b38:	79fb      	ldrb	r3, [r7, #7]
 8006b3a:	f003 030f 	and.w	r3, r3, #15
 8006b3e:	b2db      	uxtb	r3, r3
 8006b40:	4413      	add	r3, r2
 8006b42:	b2db      	uxtb	r3, r3
}
 8006b44:	4618      	mov	r0, r3
 8006b46:	3714      	adds	r7, #20
 8006b48:	46bd      	mov	sp, r7
 8006b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4e:	4770      	bx	lr

08006b50 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006b50:	b580      	push	{r7, lr}
 8006b52:	b082      	sub	sp, #8
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d101      	bne.n	8006b62 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006b5e:	2301      	movs	r3, #1
 8006b60:	e07b      	b.n	8006c5a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d108      	bne.n	8006b7c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	685b      	ldr	r3, [r3, #4]
 8006b6e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006b72:	d009      	beq.n	8006b88 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2200      	movs	r2, #0
 8006b78:	61da      	str	r2, [r3, #28]
 8006b7a:	e005      	b.n	8006b88 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2200      	movs	r2, #0
 8006b80:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	2200      	movs	r2, #0
 8006b86:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006b94:	b2db      	uxtb	r3, r3
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d106      	bne.n	8006ba8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	2200      	movs	r2, #0
 8006b9e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006ba2:	6878      	ldr	r0, [r7, #4]
 8006ba4:	f7fb fd5a 	bl	800265c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	2202      	movs	r2, #2
 8006bac:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	681a      	ldr	r2, [r3, #0]
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006bbe:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	685b      	ldr	r3, [r3, #4]
 8006bc4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	689b      	ldr	r3, [r3, #8]
 8006bcc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006bd0:	431a      	orrs	r2, r3
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	68db      	ldr	r3, [r3, #12]
 8006bd6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006bda:	431a      	orrs	r2, r3
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	691b      	ldr	r3, [r3, #16]
 8006be0:	f003 0302 	and.w	r3, r3, #2
 8006be4:	431a      	orrs	r2, r3
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	695b      	ldr	r3, [r3, #20]
 8006bea:	f003 0301 	and.w	r3, r3, #1
 8006bee:	431a      	orrs	r2, r3
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	699b      	ldr	r3, [r3, #24]
 8006bf4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006bf8:	431a      	orrs	r2, r3
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	69db      	ldr	r3, [r3, #28]
 8006bfe:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006c02:	431a      	orrs	r2, r3
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	6a1b      	ldr	r3, [r3, #32]
 8006c08:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006c0c:	ea42 0103 	orr.w	r1, r2, r3
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c14:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	430a      	orrs	r2, r1
 8006c1e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	699b      	ldr	r3, [r3, #24]
 8006c24:	0c1b      	lsrs	r3, r3, #16
 8006c26:	f003 0104 	and.w	r1, r3, #4
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c2e:	f003 0210 	and.w	r2, r3, #16
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	430a      	orrs	r2, r1
 8006c38:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	69da      	ldr	r2, [r3, #28]
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006c48:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	2200      	movs	r2, #0
 8006c4e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2201      	movs	r2, #1
 8006c54:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8006c58:	2300      	movs	r3, #0
}
 8006c5a:	4618      	mov	r0, r3
 8006c5c:	3708      	adds	r7, #8
 8006c5e:	46bd      	mov	sp, r7
 8006c60:	bd80      	pop	{r7, pc}

08006c62 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006c62:	b580      	push	{r7, lr}
 8006c64:	b088      	sub	sp, #32
 8006c66:	af00      	add	r7, sp, #0
 8006c68:	60f8      	str	r0, [r7, #12]
 8006c6a:	60b9      	str	r1, [r7, #8]
 8006c6c:	603b      	str	r3, [r7, #0]
 8006c6e:	4613      	mov	r3, r2
 8006c70:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006c72:	f7fd f835 	bl	8003ce0 <HAL_GetTick>
 8006c76:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8006c78:	88fb      	ldrh	r3, [r7, #6]
 8006c7a:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006c82:	b2db      	uxtb	r3, r3
 8006c84:	2b01      	cmp	r3, #1
 8006c86:	d001      	beq.n	8006c8c <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8006c88:	2302      	movs	r3, #2
 8006c8a:	e12a      	b.n	8006ee2 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8006c8c:	68bb      	ldr	r3, [r7, #8]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d002      	beq.n	8006c98 <HAL_SPI_Transmit+0x36>
 8006c92:	88fb      	ldrh	r3, [r7, #6]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d101      	bne.n	8006c9c <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8006c98:	2301      	movs	r3, #1
 8006c9a:	e122      	b.n	8006ee2 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006ca2:	2b01      	cmp	r3, #1
 8006ca4:	d101      	bne.n	8006caa <HAL_SPI_Transmit+0x48>
 8006ca6:	2302      	movs	r3, #2
 8006ca8:	e11b      	b.n	8006ee2 <HAL_SPI_Transmit+0x280>
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	2201      	movs	r2, #1
 8006cae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	2203      	movs	r2, #3
 8006cb6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	2200      	movs	r2, #0
 8006cbe:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	68ba      	ldr	r2, [r7, #8]
 8006cc4:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	88fa      	ldrh	r2, [r7, #6]
 8006cca:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	88fa      	ldrh	r2, [r7, #6]
 8006cd0:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	2200      	movs	r2, #0
 8006cdc:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	2200      	movs	r2, #0
 8006ce2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	2200      	movs	r2, #0
 8006ce8:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	2200      	movs	r2, #0
 8006cee:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	689b      	ldr	r3, [r3, #8]
 8006cf4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006cf8:	d10f      	bne.n	8006d1a <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	681a      	ldr	r2, [r3, #0]
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006d08:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	681a      	ldr	r2, [r3, #0]
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006d18:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d24:	2b40      	cmp	r3, #64	@ 0x40
 8006d26:	d007      	beq.n	8006d38 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	681a      	ldr	r2, [r3, #0]
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006d36:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	68db      	ldr	r3, [r3, #12]
 8006d3c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006d40:	d152      	bne.n	8006de8 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	685b      	ldr	r3, [r3, #4]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d002      	beq.n	8006d50 <HAL_SPI_Transmit+0xee>
 8006d4a:	8b7b      	ldrh	r3, [r7, #26]
 8006d4c:	2b01      	cmp	r3, #1
 8006d4e:	d145      	bne.n	8006ddc <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d54:	881a      	ldrh	r2, [r3, #0]
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d60:	1c9a      	adds	r2, r3, #2
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006d6a:	b29b      	uxth	r3, r3
 8006d6c:	3b01      	subs	r3, #1
 8006d6e:	b29a      	uxth	r2, r3
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006d74:	e032      	b.n	8006ddc <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	689b      	ldr	r3, [r3, #8]
 8006d7c:	f003 0302 	and.w	r3, r3, #2
 8006d80:	2b02      	cmp	r3, #2
 8006d82:	d112      	bne.n	8006daa <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d88:	881a      	ldrh	r2, [r3, #0]
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d94:	1c9a      	adds	r2, r3, #2
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006d9e:	b29b      	uxth	r3, r3
 8006da0:	3b01      	subs	r3, #1
 8006da2:	b29a      	uxth	r2, r3
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006da8:	e018      	b.n	8006ddc <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006daa:	f7fc ff99 	bl	8003ce0 <HAL_GetTick>
 8006dae:	4602      	mov	r2, r0
 8006db0:	69fb      	ldr	r3, [r7, #28]
 8006db2:	1ad3      	subs	r3, r2, r3
 8006db4:	683a      	ldr	r2, [r7, #0]
 8006db6:	429a      	cmp	r2, r3
 8006db8:	d803      	bhi.n	8006dc2 <HAL_SPI_Transmit+0x160>
 8006dba:	683b      	ldr	r3, [r7, #0]
 8006dbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dc0:	d102      	bne.n	8006dc8 <HAL_SPI_Transmit+0x166>
 8006dc2:	683b      	ldr	r3, [r7, #0]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d109      	bne.n	8006ddc <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	2201      	movs	r2, #1
 8006dcc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8006dd8:	2303      	movs	r3, #3
 8006dda:	e082      	b.n	8006ee2 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006de0:	b29b      	uxth	r3, r3
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d1c7      	bne.n	8006d76 <HAL_SPI_Transmit+0x114>
 8006de6:	e053      	b.n	8006e90 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	685b      	ldr	r3, [r3, #4]
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d002      	beq.n	8006df6 <HAL_SPI_Transmit+0x194>
 8006df0:	8b7b      	ldrh	r3, [r7, #26]
 8006df2:	2b01      	cmp	r3, #1
 8006df4:	d147      	bne.n	8006e86 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	330c      	adds	r3, #12
 8006e00:	7812      	ldrb	r2, [r2, #0]
 8006e02:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e08:	1c5a      	adds	r2, r3, #1
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006e12:	b29b      	uxth	r3, r3
 8006e14:	3b01      	subs	r3, #1
 8006e16:	b29a      	uxth	r2, r3
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006e1c:	e033      	b.n	8006e86 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	689b      	ldr	r3, [r3, #8]
 8006e24:	f003 0302 	and.w	r3, r3, #2
 8006e28:	2b02      	cmp	r3, #2
 8006e2a:	d113      	bne.n	8006e54 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	330c      	adds	r3, #12
 8006e36:	7812      	ldrb	r2, [r2, #0]
 8006e38:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e3e:	1c5a      	adds	r2, r3, #1
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006e48:	b29b      	uxth	r3, r3
 8006e4a:	3b01      	subs	r3, #1
 8006e4c:	b29a      	uxth	r2, r3
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006e52:	e018      	b.n	8006e86 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006e54:	f7fc ff44 	bl	8003ce0 <HAL_GetTick>
 8006e58:	4602      	mov	r2, r0
 8006e5a:	69fb      	ldr	r3, [r7, #28]
 8006e5c:	1ad3      	subs	r3, r2, r3
 8006e5e:	683a      	ldr	r2, [r7, #0]
 8006e60:	429a      	cmp	r2, r3
 8006e62:	d803      	bhi.n	8006e6c <HAL_SPI_Transmit+0x20a>
 8006e64:	683b      	ldr	r3, [r7, #0]
 8006e66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e6a:	d102      	bne.n	8006e72 <HAL_SPI_Transmit+0x210>
 8006e6c:	683b      	ldr	r3, [r7, #0]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d109      	bne.n	8006e86 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	2201      	movs	r2, #1
 8006e76:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	2200      	movs	r2, #0
 8006e7e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8006e82:	2303      	movs	r3, #3
 8006e84:	e02d      	b.n	8006ee2 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006e8a:	b29b      	uxth	r3, r3
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d1c6      	bne.n	8006e1e <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006e90:	69fa      	ldr	r2, [r7, #28]
 8006e92:	6839      	ldr	r1, [r7, #0]
 8006e94:	68f8      	ldr	r0, [r7, #12]
 8006e96:	f000 f8b1 	bl	8006ffc <SPI_EndRxTxTransaction>
 8006e9a:	4603      	mov	r3, r0
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d002      	beq.n	8006ea6 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	2220      	movs	r2, #32
 8006ea4:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	689b      	ldr	r3, [r3, #8]
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d10a      	bne.n	8006ec4 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006eae:	2300      	movs	r3, #0
 8006eb0:	617b      	str	r3, [r7, #20]
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	68db      	ldr	r3, [r3, #12]
 8006eb8:	617b      	str	r3, [r7, #20]
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	689b      	ldr	r3, [r3, #8]
 8006ec0:	617b      	str	r3, [r7, #20]
 8006ec2:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	2201      	movs	r2, #1
 8006ec8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	2200      	movs	r2, #0
 8006ed0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d001      	beq.n	8006ee0 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8006edc:	2301      	movs	r3, #1
 8006ede:	e000      	b.n	8006ee2 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8006ee0:	2300      	movs	r3, #0
  }
}
 8006ee2:	4618      	mov	r0, r3
 8006ee4:	3720      	adds	r7, #32
 8006ee6:	46bd      	mov	sp, r7
 8006ee8:	bd80      	pop	{r7, pc}
	...

08006eec <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006eec:	b580      	push	{r7, lr}
 8006eee:	b088      	sub	sp, #32
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	60f8      	str	r0, [r7, #12]
 8006ef4:	60b9      	str	r1, [r7, #8]
 8006ef6:	603b      	str	r3, [r7, #0]
 8006ef8:	4613      	mov	r3, r2
 8006efa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006efc:	f7fc fef0 	bl	8003ce0 <HAL_GetTick>
 8006f00:	4602      	mov	r2, r0
 8006f02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f04:	1a9b      	subs	r3, r3, r2
 8006f06:	683a      	ldr	r2, [r7, #0]
 8006f08:	4413      	add	r3, r2
 8006f0a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006f0c:	f7fc fee8 	bl	8003ce0 <HAL_GetTick>
 8006f10:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006f12:	4b39      	ldr	r3, [pc, #228]	@ (8006ff8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	015b      	lsls	r3, r3, #5
 8006f18:	0d1b      	lsrs	r3, r3, #20
 8006f1a:	69fa      	ldr	r2, [r7, #28]
 8006f1c:	fb02 f303 	mul.w	r3, r2, r3
 8006f20:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006f22:	e054      	b.n	8006fce <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006f24:	683b      	ldr	r3, [r7, #0]
 8006f26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f2a:	d050      	beq.n	8006fce <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006f2c:	f7fc fed8 	bl	8003ce0 <HAL_GetTick>
 8006f30:	4602      	mov	r2, r0
 8006f32:	69bb      	ldr	r3, [r7, #24]
 8006f34:	1ad3      	subs	r3, r2, r3
 8006f36:	69fa      	ldr	r2, [r7, #28]
 8006f38:	429a      	cmp	r2, r3
 8006f3a:	d902      	bls.n	8006f42 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006f3c:	69fb      	ldr	r3, [r7, #28]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d13d      	bne.n	8006fbe <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	685a      	ldr	r2, [r3, #4]
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006f50:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	685b      	ldr	r3, [r3, #4]
 8006f56:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006f5a:	d111      	bne.n	8006f80 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	689b      	ldr	r3, [r3, #8]
 8006f60:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006f64:	d004      	beq.n	8006f70 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	689b      	ldr	r3, [r3, #8]
 8006f6a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006f6e:	d107      	bne.n	8006f80 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	681a      	ldr	r2, [r3, #0]
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006f7e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f84:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006f88:	d10f      	bne.n	8006faa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	681a      	ldr	r2, [r3, #0]
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006f98:	601a      	str	r2, [r3, #0]
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	681a      	ldr	r2, [r3, #0]
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006fa8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	2201      	movs	r2, #1
 8006fae:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	2200      	movs	r2, #0
 8006fb6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8006fba:	2303      	movs	r3, #3
 8006fbc:	e017      	b.n	8006fee <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006fbe:	697b      	ldr	r3, [r7, #20]
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d101      	bne.n	8006fc8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006fc4:	2300      	movs	r3, #0
 8006fc6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006fc8:	697b      	ldr	r3, [r7, #20]
 8006fca:	3b01      	subs	r3, #1
 8006fcc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	689a      	ldr	r2, [r3, #8]
 8006fd4:	68bb      	ldr	r3, [r7, #8]
 8006fd6:	4013      	ands	r3, r2
 8006fd8:	68ba      	ldr	r2, [r7, #8]
 8006fda:	429a      	cmp	r2, r3
 8006fdc:	bf0c      	ite	eq
 8006fde:	2301      	moveq	r3, #1
 8006fe0:	2300      	movne	r3, #0
 8006fe2:	b2db      	uxtb	r3, r3
 8006fe4:	461a      	mov	r2, r3
 8006fe6:	79fb      	ldrb	r3, [r7, #7]
 8006fe8:	429a      	cmp	r2, r3
 8006fea:	d19b      	bne.n	8006f24 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006fec:	2300      	movs	r3, #0
}
 8006fee:	4618      	mov	r0, r3
 8006ff0:	3720      	adds	r7, #32
 8006ff2:	46bd      	mov	sp, r7
 8006ff4:	bd80      	pop	{r7, pc}
 8006ff6:	bf00      	nop
 8006ff8:	2000001c 	.word	0x2000001c

08006ffc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006ffc:	b580      	push	{r7, lr}
 8006ffe:	b088      	sub	sp, #32
 8007000:	af02      	add	r7, sp, #8
 8007002:	60f8      	str	r0, [r7, #12]
 8007004:	60b9      	str	r1, [r7, #8]
 8007006:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	9300      	str	r3, [sp, #0]
 800700c:	68bb      	ldr	r3, [r7, #8]
 800700e:	2201      	movs	r2, #1
 8007010:	2102      	movs	r1, #2
 8007012:	68f8      	ldr	r0, [r7, #12]
 8007014:	f7ff ff6a 	bl	8006eec <SPI_WaitFlagStateUntilTimeout>
 8007018:	4603      	mov	r3, r0
 800701a:	2b00      	cmp	r3, #0
 800701c:	d007      	beq.n	800702e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007022:	f043 0220 	orr.w	r2, r3, #32
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800702a:	2303      	movs	r3, #3
 800702c:	e032      	b.n	8007094 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800702e:	4b1b      	ldr	r3, [pc, #108]	@ (800709c <SPI_EndRxTxTransaction+0xa0>)
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	4a1b      	ldr	r2, [pc, #108]	@ (80070a0 <SPI_EndRxTxTransaction+0xa4>)
 8007034:	fba2 2303 	umull	r2, r3, r2, r3
 8007038:	0d5b      	lsrs	r3, r3, #21
 800703a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800703e:	fb02 f303 	mul.w	r3, r2, r3
 8007042:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	685b      	ldr	r3, [r3, #4]
 8007048:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800704c:	d112      	bne.n	8007074 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	9300      	str	r3, [sp, #0]
 8007052:	68bb      	ldr	r3, [r7, #8]
 8007054:	2200      	movs	r2, #0
 8007056:	2180      	movs	r1, #128	@ 0x80
 8007058:	68f8      	ldr	r0, [r7, #12]
 800705a:	f7ff ff47 	bl	8006eec <SPI_WaitFlagStateUntilTimeout>
 800705e:	4603      	mov	r3, r0
 8007060:	2b00      	cmp	r3, #0
 8007062:	d016      	beq.n	8007092 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007068:	f043 0220 	orr.w	r2, r3, #32
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8007070:	2303      	movs	r3, #3
 8007072:	e00f      	b.n	8007094 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007074:	697b      	ldr	r3, [r7, #20]
 8007076:	2b00      	cmp	r3, #0
 8007078:	d00a      	beq.n	8007090 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800707a:	697b      	ldr	r3, [r7, #20]
 800707c:	3b01      	subs	r3, #1
 800707e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	689b      	ldr	r3, [r3, #8]
 8007086:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800708a:	2b80      	cmp	r3, #128	@ 0x80
 800708c:	d0f2      	beq.n	8007074 <SPI_EndRxTxTransaction+0x78>
 800708e:	e000      	b.n	8007092 <SPI_EndRxTxTransaction+0x96>
        break;
 8007090:	bf00      	nop
  }

  return HAL_OK;
 8007092:	2300      	movs	r3, #0
}
 8007094:	4618      	mov	r0, r3
 8007096:	3718      	adds	r7, #24
 8007098:	46bd      	mov	sp, r7
 800709a:	bd80      	pop	{r7, pc}
 800709c:	2000001c 	.word	0x2000001c
 80070a0:	165e9f81 	.word	0x165e9f81

080070a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80070a4:	b580      	push	{r7, lr}
 80070a6:	b082      	sub	sp, #8
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d101      	bne.n	80070b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80070b2:	2301      	movs	r3, #1
 80070b4:	e041      	b.n	800713a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80070bc:	b2db      	uxtb	r3, r3
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d106      	bne.n	80070d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	2200      	movs	r2, #0
 80070c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80070ca:	6878      	ldr	r0, [r7, #4]
 80070cc:	f7fb fe2e 	bl	8002d2c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	2202      	movs	r2, #2
 80070d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681a      	ldr	r2, [r3, #0]
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	3304      	adds	r3, #4
 80070e0:	4619      	mov	r1, r3
 80070e2:	4610      	mov	r0, r2
 80070e4:	f000 fd00 	bl	8007ae8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	2201      	movs	r2, #1
 80070ec:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2201      	movs	r2, #1
 80070f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	2201      	movs	r2, #1
 80070fc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	2201      	movs	r2, #1
 8007104:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	2201      	movs	r2, #1
 800710c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	2201      	movs	r2, #1
 8007114:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	2201      	movs	r2, #1
 800711c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	2201      	movs	r2, #1
 8007124:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	2201      	movs	r2, #1
 800712c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	2201      	movs	r2, #1
 8007134:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007138:	2300      	movs	r3, #0
}
 800713a:	4618      	mov	r0, r3
 800713c:	3708      	adds	r7, #8
 800713e:	46bd      	mov	sp, r7
 8007140:	bd80      	pop	{r7, pc}
	...

08007144 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007144:	b480      	push	{r7}
 8007146:	b085      	sub	sp, #20
 8007148:	af00      	add	r7, sp, #0
 800714a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007152:	b2db      	uxtb	r3, r3
 8007154:	2b01      	cmp	r3, #1
 8007156:	d001      	beq.n	800715c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007158:	2301      	movs	r3, #1
 800715a:	e04e      	b.n	80071fa <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	2202      	movs	r2, #2
 8007160:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	68da      	ldr	r2, [r3, #12]
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	f042 0201 	orr.w	r2, r2, #1
 8007172:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	4a23      	ldr	r2, [pc, #140]	@ (8007208 <HAL_TIM_Base_Start_IT+0xc4>)
 800717a:	4293      	cmp	r3, r2
 800717c:	d022      	beq.n	80071c4 <HAL_TIM_Base_Start_IT+0x80>
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007186:	d01d      	beq.n	80071c4 <HAL_TIM_Base_Start_IT+0x80>
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	4a1f      	ldr	r2, [pc, #124]	@ (800720c <HAL_TIM_Base_Start_IT+0xc8>)
 800718e:	4293      	cmp	r3, r2
 8007190:	d018      	beq.n	80071c4 <HAL_TIM_Base_Start_IT+0x80>
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	4a1e      	ldr	r2, [pc, #120]	@ (8007210 <HAL_TIM_Base_Start_IT+0xcc>)
 8007198:	4293      	cmp	r3, r2
 800719a:	d013      	beq.n	80071c4 <HAL_TIM_Base_Start_IT+0x80>
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	4a1c      	ldr	r2, [pc, #112]	@ (8007214 <HAL_TIM_Base_Start_IT+0xd0>)
 80071a2:	4293      	cmp	r3, r2
 80071a4:	d00e      	beq.n	80071c4 <HAL_TIM_Base_Start_IT+0x80>
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	4a1b      	ldr	r2, [pc, #108]	@ (8007218 <HAL_TIM_Base_Start_IT+0xd4>)
 80071ac:	4293      	cmp	r3, r2
 80071ae:	d009      	beq.n	80071c4 <HAL_TIM_Base_Start_IT+0x80>
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	4a19      	ldr	r2, [pc, #100]	@ (800721c <HAL_TIM_Base_Start_IT+0xd8>)
 80071b6:	4293      	cmp	r3, r2
 80071b8:	d004      	beq.n	80071c4 <HAL_TIM_Base_Start_IT+0x80>
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	4a18      	ldr	r2, [pc, #96]	@ (8007220 <HAL_TIM_Base_Start_IT+0xdc>)
 80071c0:	4293      	cmp	r3, r2
 80071c2:	d111      	bne.n	80071e8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	689b      	ldr	r3, [r3, #8]
 80071ca:	f003 0307 	and.w	r3, r3, #7
 80071ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	2b06      	cmp	r3, #6
 80071d4:	d010      	beq.n	80071f8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	681a      	ldr	r2, [r3, #0]
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	f042 0201 	orr.w	r2, r2, #1
 80071e4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80071e6:	e007      	b.n	80071f8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	681a      	ldr	r2, [r3, #0]
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	f042 0201 	orr.w	r2, r2, #1
 80071f6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80071f8:	2300      	movs	r3, #0
}
 80071fa:	4618      	mov	r0, r3
 80071fc:	3714      	adds	r7, #20
 80071fe:	46bd      	mov	sp, r7
 8007200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007204:	4770      	bx	lr
 8007206:	bf00      	nop
 8007208:	40010000 	.word	0x40010000
 800720c:	40000400 	.word	0x40000400
 8007210:	40000800 	.word	0x40000800
 8007214:	40000c00 	.word	0x40000c00
 8007218:	40010400 	.word	0x40010400
 800721c:	40014000 	.word	0x40014000
 8007220:	40001800 	.word	0x40001800

08007224 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8007224:	b480      	push	{r7}
 8007226:	b083      	sub	sp, #12
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	68da      	ldr	r2, [r3, #12]
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	f022 0201 	bic.w	r2, r2, #1
 800723a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	6a1a      	ldr	r2, [r3, #32]
 8007242:	f241 1311 	movw	r3, #4369	@ 0x1111
 8007246:	4013      	ands	r3, r2
 8007248:	2b00      	cmp	r3, #0
 800724a:	d10f      	bne.n	800726c <HAL_TIM_Base_Stop_IT+0x48>
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	6a1a      	ldr	r2, [r3, #32]
 8007252:	f240 4344 	movw	r3, #1092	@ 0x444
 8007256:	4013      	ands	r3, r2
 8007258:	2b00      	cmp	r3, #0
 800725a:	d107      	bne.n	800726c <HAL_TIM_Base_Stop_IT+0x48>
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	681a      	ldr	r2, [r3, #0]
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	f022 0201 	bic.w	r2, r2, #1
 800726a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	2201      	movs	r2, #1
 8007270:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8007274:	2300      	movs	r3, #0
}
 8007276:	4618      	mov	r0, r3
 8007278:	370c      	adds	r7, #12
 800727a:	46bd      	mov	sp, r7
 800727c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007280:	4770      	bx	lr

08007282 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007282:	b580      	push	{r7, lr}
 8007284:	b082      	sub	sp, #8
 8007286:	af00      	add	r7, sp, #0
 8007288:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	2b00      	cmp	r3, #0
 800728e:	d101      	bne.n	8007294 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007290:	2301      	movs	r3, #1
 8007292:	e041      	b.n	8007318 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800729a:	b2db      	uxtb	r3, r3
 800729c:	2b00      	cmp	r3, #0
 800729e:	d106      	bne.n	80072ae <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	2200      	movs	r2, #0
 80072a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80072a8:	6878      	ldr	r0, [r7, #4]
 80072aa:	f000 f839 	bl	8007320 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	2202      	movs	r2, #2
 80072b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681a      	ldr	r2, [r3, #0]
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	3304      	adds	r3, #4
 80072be:	4619      	mov	r1, r3
 80072c0:	4610      	mov	r0, r2
 80072c2:	f000 fc11 	bl	8007ae8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	2201      	movs	r2, #1
 80072ca:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	2201      	movs	r2, #1
 80072d2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	2201      	movs	r2, #1
 80072da:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	2201      	movs	r2, #1
 80072e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	2201      	movs	r2, #1
 80072ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	2201      	movs	r2, #1
 80072f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	2201      	movs	r2, #1
 80072fa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	2201      	movs	r2, #1
 8007302:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	2201      	movs	r2, #1
 800730a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	2201      	movs	r2, #1
 8007312:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007316:	2300      	movs	r3, #0
}
 8007318:	4618      	mov	r0, r3
 800731a:	3708      	adds	r7, #8
 800731c:	46bd      	mov	sp, r7
 800731e:	bd80      	pop	{r7, pc}

08007320 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007320:	b480      	push	{r7}
 8007322:	b083      	sub	sp, #12
 8007324:	af00      	add	r7, sp, #0
 8007326:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007328:	bf00      	nop
 800732a:	370c      	adds	r7, #12
 800732c:	46bd      	mov	sp, r7
 800732e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007332:	4770      	bx	lr

08007334 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007334:	b580      	push	{r7, lr}
 8007336:	b084      	sub	sp, #16
 8007338:	af00      	add	r7, sp, #0
 800733a:	6078      	str	r0, [r7, #4]
 800733c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800733e:	683b      	ldr	r3, [r7, #0]
 8007340:	2b00      	cmp	r3, #0
 8007342:	d109      	bne.n	8007358 <HAL_TIM_PWM_Start+0x24>
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800734a:	b2db      	uxtb	r3, r3
 800734c:	2b01      	cmp	r3, #1
 800734e:	bf14      	ite	ne
 8007350:	2301      	movne	r3, #1
 8007352:	2300      	moveq	r3, #0
 8007354:	b2db      	uxtb	r3, r3
 8007356:	e022      	b.n	800739e <HAL_TIM_PWM_Start+0x6a>
 8007358:	683b      	ldr	r3, [r7, #0]
 800735a:	2b04      	cmp	r3, #4
 800735c:	d109      	bne.n	8007372 <HAL_TIM_PWM_Start+0x3e>
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007364:	b2db      	uxtb	r3, r3
 8007366:	2b01      	cmp	r3, #1
 8007368:	bf14      	ite	ne
 800736a:	2301      	movne	r3, #1
 800736c:	2300      	moveq	r3, #0
 800736e:	b2db      	uxtb	r3, r3
 8007370:	e015      	b.n	800739e <HAL_TIM_PWM_Start+0x6a>
 8007372:	683b      	ldr	r3, [r7, #0]
 8007374:	2b08      	cmp	r3, #8
 8007376:	d109      	bne.n	800738c <HAL_TIM_PWM_Start+0x58>
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800737e:	b2db      	uxtb	r3, r3
 8007380:	2b01      	cmp	r3, #1
 8007382:	bf14      	ite	ne
 8007384:	2301      	movne	r3, #1
 8007386:	2300      	moveq	r3, #0
 8007388:	b2db      	uxtb	r3, r3
 800738a:	e008      	b.n	800739e <HAL_TIM_PWM_Start+0x6a>
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007392:	b2db      	uxtb	r3, r3
 8007394:	2b01      	cmp	r3, #1
 8007396:	bf14      	ite	ne
 8007398:	2301      	movne	r3, #1
 800739a:	2300      	moveq	r3, #0
 800739c:	b2db      	uxtb	r3, r3
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d001      	beq.n	80073a6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80073a2:	2301      	movs	r3, #1
 80073a4:	e07c      	b.n	80074a0 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80073a6:	683b      	ldr	r3, [r7, #0]
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d104      	bne.n	80073b6 <HAL_TIM_PWM_Start+0x82>
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	2202      	movs	r2, #2
 80073b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80073b4:	e013      	b.n	80073de <HAL_TIM_PWM_Start+0xaa>
 80073b6:	683b      	ldr	r3, [r7, #0]
 80073b8:	2b04      	cmp	r3, #4
 80073ba:	d104      	bne.n	80073c6 <HAL_TIM_PWM_Start+0x92>
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	2202      	movs	r2, #2
 80073c0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80073c4:	e00b      	b.n	80073de <HAL_TIM_PWM_Start+0xaa>
 80073c6:	683b      	ldr	r3, [r7, #0]
 80073c8:	2b08      	cmp	r3, #8
 80073ca:	d104      	bne.n	80073d6 <HAL_TIM_PWM_Start+0xa2>
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	2202      	movs	r2, #2
 80073d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80073d4:	e003      	b.n	80073de <HAL_TIM_PWM_Start+0xaa>
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	2202      	movs	r2, #2
 80073da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	2201      	movs	r2, #1
 80073e4:	6839      	ldr	r1, [r7, #0]
 80073e6:	4618      	mov	r0, r3
 80073e8:	f000 fe74 	bl	80080d4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	4a2d      	ldr	r2, [pc, #180]	@ (80074a8 <HAL_TIM_PWM_Start+0x174>)
 80073f2:	4293      	cmp	r3, r2
 80073f4:	d004      	beq.n	8007400 <HAL_TIM_PWM_Start+0xcc>
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	4a2c      	ldr	r2, [pc, #176]	@ (80074ac <HAL_TIM_PWM_Start+0x178>)
 80073fc:	4293      	cmp	r3, r2
 80073fe:	d101      	bne.n	8007404 <HAL_TIM_PWM_Start+0xd0>
 8007400:	2301      	movs	r3, #1
 8007402:	e000      	b.n	8007406 <HAL_TIM_PWM_Start+0xd2>
 8007404:	2300      	movs	r3, #0
 8007406:	2b00      	cmp	r3, #0
 8007408:	d007      	beq.n	800741a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007418:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	4a22      	ldr	r2, [pc, #136]	@ (80074a8 <HAL_TIM_PWM_Start+0x174>)
 8007420:	4293      	cmp	r3, r2
 8007422:	d022      	beq.n	800746a <HAL_TIM_PWM_Start+0x136>
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800742c:	d01d      	beq.n	800746a <HAL_TIM_PWM_Start+0x136>
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	4a1f      	ldr	r2, [pc, #124]	@ (80074b0 <HAL_TIM_PWM_Start+0x17c>)
 8007434:	4293      	cmp	r3, r2
 8007436:	d018      	beq.n	800746a <HAL_TIM_PWM_Start+0x136>
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	4a1d      	ldr	r2, [pc, #116]	@ (80074b4 <HAL_TIM_PWM_Start+0x180>)
 800743e:	4293      	cmp	r3, r2
 8007440:	d013      	beq.n	800746a <HAL_TIM_PWM_Start+0x136>
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	4a1c      	ldr	r2, [pc, #112]	@ (80074b8 <HAL_TIM_PWM_Start+0x184>)
 8007448:	4293      	cmp	r3, r2
 800744a:	d00e      	beq.n	800746a <HAL_TIM_PWM_Start+0x136>
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	4a16      	ldr	r2, [pc, #88]	@ (80074ac <HAL_TIM_PWM_Start+0x178>)
 8007452:	4293      	cmp	r3, r2
 8007454:	d009      	beq.n	800746a <HAL_TIM_PWM_Start+0x136>
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	4a18      	ldr	r2, [pc, #96]	@ (80074bc <HAL_TIM_PWM_Start+0x188>)
 800745c:	4293      	cmp	r3, r2
 800745e:	d004      	beq.n	800746a <HAL_TIM_PWM_Start+0x136>
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	4a16      	ldr	r2, [pc, #88]	@ (80074c0 <HAL_TIM_PWM_Start+0x18c>)
 8007466:	4293      	cmp	r3, r2
 8007468:	d111      	bne.n	800748e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	689b      	ldr	r3, [r3, #8]
 8007470:	f003 0307 	and.w	r3, r3, #7
 8007474:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	2b06      	cmp	r3, #6
 800747a:	d010      	beq.n	800749e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	681a      	ldr	r2, [r3, #0]
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	f042 0201 	orr.w	r2, r2, #1
 800748a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800748c:	e007      	b.n	800749e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	681a      	ldr	r2, [r3, #0]
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	f042 0201 	orr.w	r2, r2, #1
 800749c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800749e:	2300      	movs	r3, #0
}
 80074a0:	4618      	mov	r0, r3
 80074a2:	3710      	adds	r7, #16
 80074a4:	46bd      	mov	sp, r7
 80074a6:	bd80      	pop	{r7, pc}
 80074a8:	40010000 	.word	0x40010000
 80074ac:	40010400 	.word	0x40010400
 80074b0:	40000400 	.word	0x40000400
 80074b4:	40000800 	.word	0x40000800
 80074b8:	40000c00 	.word	0x40000c00
 80074bc:	40014000 	.word	0x40014000
 80074c0:	40001800 	.word	0x40001800

080074c4 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80074c4:	b580      	push	{r7, lr}
 80074c6:	b082      	sub	sp, #8
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	6078      	str	r0, [r7, #4]
 80074cc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	2200      	movs	r2, #0
 80074d4:	6839      	ldr	r1, [r7, #0]
 80074d6:	4618      	mov	r0, r3
 80074d8:	f000 fdfc 	bl	80080d4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	4a2e      	ldr	r2, [pc, #184]	@ (800759c <HAL_TIM_PWM_Stop+0xd8>)
 80074e2:	4293      	cmp	r3, r2
 80074e4:	d004      	beq.n	80074f0 <HAL_TIM_PWM_Stop+0x2c>
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	4a2d      	ldr	r2, [pc, #180]	@ (80075a0 <HAL_TIM_PWM_Stop+0xdc>)
 80074ec:	4293      	cmp	r3, r2
 80074ee:	d101      	bne.n	80074f4 <HAL_TIM_PWM_Stop+0x30>
 80074f0:	2301      	movs	r3, #1
 80074f2:	e000      	b.n	80074f6 <HAL_TIM_PWM_Stop+0x32>
 80074f4:	2300      	movs	r3, #0
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d017      	beq.n	800752a <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	6a1a      	ldr	r2, [r3, #32]
 8007500:	f241 1311 	movw	r3, #4369	@ 0x1111
 8007504:	4013      	ands	r3, r2
 8007506:	2b00      	cmp	r3, #0
 8007508:	d10f      	bne.n	800752a <HAL_TIM_PWM_Stop+0x66>
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	6a1a      	ldr	r2, [r3, #32]
 8007510:	f240 4344 	movw	r3, #1092	@ 0x444
 8007514:	4013      	ands	r3, r2
 8007516:	2b00      	cmp	r3, #0
 8007518:	d107      	bne.n	800752a <HAL_TIM_PWM_Stop+0x66>
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007528:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	6a1a      	ldr	r2, [r3, #32]
 8007530:	f241 1311 	movw	r3, #4369	@ 0x1111
 8007534:	4013      	ands	r3, r2
 8007536:	2b00      	cmp	r3, #0
 8007538:	d10f      	bne.n	800755a <HAL_TIM_PWM_Stop+0x96>
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	6a1a      	ldr	r2, [r3, #32]
 8007540:	f240 4344 	movw	r3, #1092	@ 0x444
 8007544:	4013      	ands	r3, r2
 8007546:	2b00      	cmp	r3, #0
 8007548:	d107      	bne.n	800755a <HAL_TIM_PWM_Stop+0x96>
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	681a      	ldr	r2, [r3, #0]
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	f022 0201 	bic.w	r2, r2, #1
 8007558:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800755a:	683b      	ldr	r3, [r7, #0]
 800755c:	2b00      	cmp	r3, #0
 800755e:	d104      	bne.n	800756a <HAL_TIM_PWM_Stop+0xa6>
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	2201      	movs	r2, #1
 8007564:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007568:	e013      	b.n	8007592 <HAL_TIM_PWM_Stop+0xce>
 800756a:	683b      	ldr	r3, [r7, #0]
 800756c:	2b04      	cmp	r3, #4
 800756e:	d104      	bne.n	800757a <HAL_TIM_PWM_Stop+0xb6>
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	2201      	movs	r2, #1
 8007574:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007578:	e00b      	b.n	8007592 <HAL_TIM_PWM_Stop+0xce>
 800757a:	683b      	ldr	r3, [r7, #0]
 800757c:	2b08      	cmp	r3, #8
 800757e:	d104      	bne.n	800758a <HAL_TIM_PWM_Stop+0xc6>
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	2201      	movs	r2, #1
 8007584:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007588:	e003      	b.n	8007592 <HAL_TIM_PWM_Stop+0xce>
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	2201      	movs	r2, #1
 800758e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 8007592:	2300      	movs	r3, #0
}
 8007594:	4618      	mov	r0, r3
 8007596:	3708      	adds	r7, #8
 8007598:	46bd      	mov	sp, r7
 800759a:	bd80      	pop	{r7, pc}
 800759c:	40010000 	.word	0x40010000
 80075a0:	40010400 	.word	0x40010400

080075a4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80075a4:	b580      	push	{r7, lr}
 80075a6:	b084      	sub	sp, #16
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	68db      	ldr	r3, [r3, #12]
 80075b2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	691b      	ldr	r3, [r3, #16]
 80075ba:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80075bc:	68bb      	ldr	r3, [r7, #8]
 80075be:	f003 0302 	and.w	r3, r3, #2
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d020      	beq.n	8007608 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	f003 0302 	and.w	r3, r3, #2
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d01b      	beq.n	8007608 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	f06f 0202 	mvn.w	r2, #2
 80075d8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	2201      	movs	r2, #1
 80075de:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	699b      	ldr	r3, [r3, #24]
 80075e6:	f003 0303 	and.w	r3, r3, #3
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d003      	beq.n	80075f6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80075ee:	6878      	ldr	r0, [r7, #4]
 80075f0:	f000 fa5b 	bl	8007aaa <HAL_TIM_IC_CaptureCallback>
 80075f4:	e005      	b.n	8007602 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80075f6:	6878      	ldr	r0, [r7, #4]
 80075f8:	f000 fa4d 	bl	8007a96 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80075fc:	6878      	ldr	r0, [r7, #4]
 80075fe:	f000 fa5e 	bl	8007abe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	2200      	movs	r2, #0
 8007606:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007608:	68bb      	ldr	r3, [r7, #8]
 800760a:	f003 0304 	and.w	r3, r3, #4
 800760e:	2b00      	cmp	r3, #0
 8007610:	d020      	beq.n	8007654 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	f003 0304 	and.w	r3, r3, #4
 8007618:	2b00      	cmp	r3, #0
 800761a:	d01b      	beq.n	8007654 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	f06f 0204 	mvn.w	r2, #4
 8007624:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	2202      	movs	r2, #2
 800762a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	699b      	ldr	r3, [r3, #24]
 8007632:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007636:	2b00      	cmp	r3, #0
 8007638:	d003      	beq.n	8007642 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800763a:	6878      	ldr	r0, [r7, #4]
 800763c:	f000 fa35 	bl	8007aaa <HAL_TIM_IC_CaptureCallback>
 8007640:	e005      	b.n	800764e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007642:	6878      	ldr	r0, [r7, #4]
 8007644:	f000 fa27 	bl	8007a96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007648:	6878      	ldr	r0, [r7, #4]
 800764a:	f000 fa38 	bl	8007abe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	2200      	movs	r2, #0
 8007652:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007654:	68bb      	ldr	r3, [r7, #8]
 8007656:	f003 0308 	and.w	r3, r3, #8
 800765a:	2b00      	cmp	r3, #0
 800765c:	d020      	beq.n	80076a0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	f003 0308 	and.w	r3, r3, #8
 8007664:	2b00      	cmp	r3, #0
 8007666:	d01b      	beq.n	80076a0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	f06f 0208 	mvn.w	r2, #8
 8007670:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	2204      	movs	r2, #4
 8007676:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	69db      	ldr	r3, [r3, #28]
 800767e:	f003 0303 	and.w	r3, r3, #3
 8007682:	2b00      	cmp	r3, #0
 8007684:	d003      	beq.n	800768e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007686:	6878      	ldr	r0, [r7, #4]
 8007688:	f000 fa0f 	bl	8007aaa <HAL_TIM_IC_CaptureCallback>
 800768c:	e005      	b.n	800769a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800768e:	6878      	ldr	r0, [r7, #4]
 8007690:	f000 fa01 	bl	8007a96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007694:	6878      	ldr	r0, [r7, #4]
 8007696:	f000 fa12 	bl	8007abe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	2200      	movs	r2, #0
 800769e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80076a0:	68bb      	ldr	r3, [r7, #8]
 80076a2:	f003 0310 	and.w	r3, r3, #16
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d020      	beq.n	80076ec <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	f003 0310 	and.w	r3, r3, #16
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d01b      	beq.n	80076ec <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	f06f 0210 	mvn.w	r2, #16
 80076bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	2208      	movs	r2, #8
 80076c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	69db      	ldr	r3, [r3, #28]
 80076ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d003      	beq.n	80076da <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80076d2:	6878      	ldr	r0, [r7, #4]
 80076d4:	f000 f9e9 	bl	8007aaa <HAL_TIM_IC_CaptureCallback>
 80076d8:	e005      	b.n	80076e6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80076da:	6878      	ldr	r0, [r7, #4]
 80076dc:	f000 f9db 	bl	8007a96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80076e0:	6878      	ldr	r0, [r7, #4]
 80076e2:	f000 f9ec 	bl	8007abe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	2200      	movs	r2, #0
 80076ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80076ec:	68bb      	ldr	r3, [r7, #8]
 80076ee:	f003 0301 	and.w	r3, r3, #1
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d00c      	beq.n	8007710 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	f003 0301 	and.w	r3, r3, #1
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d007      	beq.n	8007710 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	f06f 0201 	mvn.w	r2, #1
 8007708:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800770a:	6878      	ldr	r0, [r7, #4]
 800770c:	f7fa fc2a 	bl	8001f64 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8007710:	68bb      	ldr	r3, [r7, #8]
 8007712:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007716:	2b00      	cmp	r3, #0
 8007718:	d00c      	beq.n	8007734 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007720:	2b00      	cmp	r3, #0
 8007722:	d007      	beq.n	8007734 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800772c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800772e:	6878      	ldr	r0, [r7, #4]
 8007730:	f000 fd7c 	bl	800822c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007734:	68bb      	ldr	r3, [r7, #8]
 8007736:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800773a:	2b00      	cmp	r3, #0
 800773c:	d00c      	beq.n	8007758 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007744:	2b00      	cmp	r3, #0
 8007746:	d007      	beq.n	8007758 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007750:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007752:	6878      	ldr	r0, [r7, #4]
 8007754:	f000 f9bd 	bl	8007ad2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007758:	68bb      	ldr	r3, [r7, #8]
 800775a:	f003 0320 	and.w	r3, r3, #32
 800775e:	2b00      	cmp	r3, #0
 8007760:	d00c      	beq.n	800777c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	f003 0320 	and.w	r3, r3, #32
 8007768:	2b00      	cmp	r3, #0
 800776a:	d007      	beq.n	800777c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	f06f 0220 	mvn.w	r2, #32
 8007774:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007776:	6878      	ldr	r0, [r7, #4]
 8007778:	f000 fd4e 	bl	8008218 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800777c:	bf00      	nop
 800777e:	3710      	adds	r7, #16
 8007780:	46bd      	mov	sp, r7
 8007782:	bd80      	pop	{r7, pc}

08007784 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007784:	b580      	push	{r7, lr}
 8007786:	b086      	sub	sp, #24
 8007788:	af00      	add	r7, sp, #0
 800778a:	60f8      	str	r0, [r7, #12]
 800778c:	60b9      	str	r1, [r7, #8]
 800778e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007790:	2300      	movs	r3, #0
 8007792:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800779a:	2b01      	cmp	r3, #1
 800779c:	d101      	bne.n	80077a2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800779e:	2302      	movs	r3, #2
 80077a0:	e0ae      	b.n	8007900 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	2201      	movs	r2, #1
 80077a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	2b0c      	cmp	r3, #12
 80077ae:	f200 809f 	bhi.w	80078f0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80077b2:	a201      	add	r2, pc, #4	@ (adr r2, 80077b8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80077b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077b8:	080077ed 	.word	0x080077ed
 80077bc:	080078f1 	.word	0x080078f1
 80077c0:	080078f1 	.word	0x080078f1
 80077c4:	080078f1 	.word	0x080078f1
 80077c8:	0800782d 	.word	0x0800782d
 80077cc:	080078f1 	.word	0x080078f1
 80077d0:	080078f1 	.word	0x080078f1
 80077d4:	080078f1 	.word	0x080078f1
 80077d8:	0800786f 	.word	0x0800786f
 80077dc:	080078f1 	.word	0x080078f1
 80077e0:	080078f1 	.word	0x080078f1
 80077e4:	080078f1 	.word	0x080078f1
 80077e8:	080078af 	.word	0x080078af
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	68b9      	ldr	r1, [r7, #8]
 80077f2:	4618      	mov	r0, r3
 80077f4:	f000 fa24 	bl	8007c40 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	699a      	ldr	r2, [r3, #24]
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	f042 0208 	orr.w	r2, r2, #8
 8007806:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	699a      	ldr	r2, [r3, #24]
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	f022 0204 	bic.w	r2, r2, #4
 8007816:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	6999      	ldr	r1, [r3, #24]
 800781e:	68bb      	ldr	r3, [r7, #8]
 8007820:	691a      	ldr	r2, [r3, #16]
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	430a      	orrs	r2, r1
 8007828:	619a      	str	r2, [r3, #24]
      break;
 800782a:	e064      	b.n	80078f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	68b9      	ldr	r1, [r7, #8]
 8007832:	4618      	mov	r0, r3
 8007834:	f000 fa74 	bl	8007d20 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	699a      	ldr	r2, [r3, #24]
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007846:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	699a      	ldr	r2, [r3, #24]
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007856:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	6999      	ldr	r1, [r3, #24]
 800785e:	68bb      	ldr	r3, [r7, #8]
 8007860:	691b      	ldr	r3, [r3, #16]
 8007862:	021a      	lsls	r2, r3, #8
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	430a      	orrs	r2, r1
 800786a:	619a      	str	r2, [r3, #24]
      break;
 800786c:	e043      	b.n	80078f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	68b9      	ldr	r1, [r7, #8]
 8007874:	4618      	mov	r0, r3
 8007876:	f000 fac9 	bl	8007e0c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	69da      	ldr	r2, [r3, #28]
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	f042 0208 	orr.w	r2, r2, #8
 8007888:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	69da      	ldr	r2, [r3, #28]
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	f022 0204 	bic.w	r2, r2, #4
 8007898:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	69d9      	ldr	r1, [r3, #28]
 80078a0:	68bb      	ldr	r3, [r7, #8]
 80078a2:	691a      	ldr	r2, [r3, #16]
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	430a      	orrs	r2, r1
 80078aa:	61da      	str	r2, [r3, #28]
      break;
 80078ac:	e023      	b.n	80078f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	68b9      	ldr	r1, [r7, #8]
 80078b4:	4618      	mov	r0, r3
 80078b6:	f000 fb1d 	bl	8007ef4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	69da      	ldr	r2, [r3, #28]
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80078c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	69da      	ldr	r2, [r3, #28]
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80078d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	69d9      	ldr	r1, [r3, #28]
 80078e0:	68bb      	ldr	r3, [r7, #8]
 80078e2:	691b      	ldr	r3, [r3, #16]
 80078e4:	021a      	lsls	r2, r3, #8
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	430a      	orrs	r2, r1
 80078ec:	61da      	str	r2, [r3, #28]
      break;
 80078ee:	e002      	b.n	80078f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80078f0:	2301      	movs	r3, #1
 80078f2:	75fb      	strb	r3, [r7, #23]
      break;
 80078f4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	2200      	movs	r2, #0
 80078fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80078fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8007900:	4618      	mov	r0, r3
 8007902:	3718      	adds	r7, #24
 8007904:	46bd      	mov	sp, r7
 8007906:	bd80      	pop	{r7, pc}

08007908 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007908:	b580      	push	{r7, lr}
 800790a:	b084      	sub	sp, #16
 800790c:	af00      	add	r7, sp, #0
 800790e:	6078      	str	r0, [r7, #4]
 8007910:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007912:	2300      	movs	r3, #0
 8007914:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800791c:	2b01      	cmp	r3, #1
 800791e:	d101      	bne.n	8007924 <HAL_TIM_ConfigClockSource+0x1c>
 8007920:	2302      	movs	r3, #2
 8007922:	e0b4      	b.n	8007a8e <HAL_TIM_ConfigClockSource+0x186>
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	2201      	movs	r2, #1
 8007928:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	2202      	movs	r2, #2
 8007930:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	689b      	ldr	r3, [r3, #8]
 800793a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800793c:	68bb      	ldr	r3, [r7, #8]
 800793e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8007942:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007944:	68bb      	ldr	r3, [r7, #8]
 8007946:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800794a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	68ba      	ldr	r2, [r7, #8]
 8007952:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007954:	683b      	ldr	r3, [r7, #0]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800795c:	d03e      	beq.n	80079dc <HAL_TIM_ConfigClockSource+0xd4>
 800795e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007962:	f200 8087 	bhi.w	8007a74 <HAL_TIM_ConfigClockSource+0x16c>
 8007966:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800796a:	f000 8086 	beq.w	8007a7a <HAL_TIM_ConfigClockSource+0x172>
 800796e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007972:	d87f      	bhi.n	8007a74 <HAL_TIM_ConfigClockSource+0x16c>
 8007974:	2b70      	cmp	r3, #112	@ 0x70
 8007976:	d01a      	beq.n	80079ae <HAL_TIM_ConfigClockSource+0xa6>
 8007978:	2b70      	cmp	r3, #112	@ 0x70
 800797a:	d87b      	bhi.n	8007a74 <HAL_TIM_ConfigClockSource+0x16c>
 800797c:	2b60      	cmp	r3, #96	@ 0x60
 800797e:	d050      	beq.n	8007a22 <HAL_TIM_ConfigClockSource+0x11a>
 8007980:	2b60      	cmp	r3, #96	@ 0x60
 8007982:	d877      	bhi.n	8007a74 <HAL_TIM_ConfigClockSource+0x16c>
 8007984:	2b50      	cmp	r3, #80	@ 0x50
 8007986:	d03c      	beq.n	8007a02 <HAL_TIM_ConfigClockSource+0xfa>
 8007988:	2b50      	cmp	r3, #80	@ 0x50
 800798a:	d873      	bhi.n	8007a74 <HAL_TIM_ConfigClockSource+0x16c>
 800798c:	2b40      	cmp	r3, #64	@ 0x40
 800798e:	d058      	beq.n	8007a42 <HAL_TIM_ConfigClockSource+0x13a>
 8007990:	2b40      	cmp	r3, #64	@ 0x40
 8007992:	d86f      	bhi.n	8007a74 <HAL_TIM_ConfigClockSource+0x16c>
 8007994:	2b30      	cmp	r3, #48	@ 0x30
 8007996:	d064      	beq.n	8007a62 <HAL_TIM_ConfigClockSource+0x15a>
 8007998:	2b30      	cmp	r3, #48	@ 0x30
 800799a:	d86b      	bhi.n	8007a74 <HAL_TIM_ConfigClockSource+0x16c>
 800799c:	2b20      	cmp	r3, #32
 800799e:	d060      	beq.n	8007a62 <HAL_TIM_ConfigClockSource+0x15a>
 80079a0:	2b20      	cmp	r3, #32
 80079a2:	d867      	bhi.n	8007a74 <HAL_TIM_ConfigClockSource+0x16c>
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d05c      	beq.n	8007a62 <HAL_TIM_ConfigClockSource+0x15a>
 80079a8:	2b10      	cmp	r3, #16
 80079aa:	d05a      	beq.n	8007a62 <HAL_TIM_ConfigClockSource+0x15a>
 80079ac:	e062      	b.n	8007a74 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80079b2:	683b      	ldr	r3, [r7, #0]
 80079b4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80079b6:	683b      	ldr	r3, [r7, #0]
 80079b8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80079ba:	683b      	ldr	r3, [r7, #0]
 80079bc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80079be:	f000 fb69 	bl	8008094 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	689b      	ldr	r3, [r3, #8]
 80079c8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80079ca:	68bb      	ldr	r3, [r7, #8]
 80079cc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80079d0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	68ba      	ldr	r2, [r7, #8]
 80079d8:	609a      	str	r2, [r3, #8]
      break;
 80079da:	e04f      	b.n	8007a7c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80079e0:	683b      	ldr	r3, [r7, #0]
 80079e2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80079e4:	683b      	ldr	r3, [r7, #0]
 80079e6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80079e8:	683b      	ldr	r3, [r7, #0]
 80079ea:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80079ec:	f000 fb52 	bl	8008094 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	689a      	ldr	r2, [r3, #8]
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80079fe:	609a      	str	r2, [r3, #8]
      break;
 8007a00:	e03c      	b.n	8007a7c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007a06:	683b      	ldr	r3, [r7, #0]
 8007a08:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007a0a:	683b      	ldr	r3, [r7, #0]
 8007a0c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007a0e:	461a      	mov	r2, r3
 8007a10:	f000 fac6 	bl	8007fa0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	2150      	movs	r1, #80	@ 0x50
 8007a1a:	4618      	mov	r0, r3
 8007a1c:	f000 fb1f 	bl	800805e <TIM_ITRx_SetConfig>
      break;
 8007a20:	e02c      	b.n	8007a7c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007a26:	683b      	ldr	r3, [r7, #0]
 8007a28:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007a2a:	683b      	ldr	r3, [r7, #0]
 8007a2c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007a2e:	461a      	mov	r2, r3
 8007a30:	f000 fae5 	bl	8007ffe <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	2160      	movs	r1, #96	@ 0x60
 8007a3a:	4618      	mov	r0, r3
 8007a3c:	f000 fb0f 	bl	800805e <TIM_ITRx_SetConfig>
      break;
 8007a40:	e01c      	b.n	8007a7c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007a46:	683b      	ldr	r3, [r7, #0]
 8007a48:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007a4a:	683b      	ldr	r3, [r7, #0]
 8007a4c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007a4e:	461a      	mov	r2, r3
 8007a50:	f000 faa6 	bl	8007fa0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	2140      	movs	r1, #64	@ 0x40
 8007a5a:	4618      	mov	r0, r3
 8007a5c:	f000 faff 	bl	800805e <TIM_ITRx_SetConfig>
      break;
 8007a60:	e00c      	b.n	8007a7c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681a      	ldr	r2, [r3, #0]
 8007a66:	683b      	ldr	r3, [r7, #0]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	4619      	mov	r1, r3
 8007a6c:	4610      	mov	r0, r2
 8007a6e:	f000 faf6 	bl	800805e <TIM_ITRx_SetConfig>
      break;
 8007a72:	e003      	b.n	8007a7c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007a74:	2301      	movs	r3, #1
 8007a76:	73fb      	strb	r3, [r7, #15]
      break;
 8007a78:	e000      	b.n	8007a7c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007a7a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	2201      	movs	r2, #1
 8007a80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	2200      	movs	r2, #0
 8007a88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007a8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a8e:	4618      	mov	r0, r3
 8007a90:	3710      	adds	r7, #16
 8007a92:	46bd      	mov	sp, r7
 8007a94:	bd80      	pop	{r7, pc}

08007a96 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007a96:	b480      	push	{r7}
 8007a98:	b083      	sub	sp, #12
 8007a9a:	af00      	add	r7, sp, #0
 8007a9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007a9e:	bf00      	nop
 8007aa0:	370c      	adds	r7, #12
 8007aa2:	46bd      	mov	sp, r7
 8007aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa8:	4770      	bx	lr

08007aaa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007aaa:	b480      	push	{r7}
 8007aac:	b083      	sub	sp, #12
 8007aae:	af00      	add	r7, sp, #0
 8007ab0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007ab2:	bf00      	nop
 8007ab4:	370c      	adds	r7, #12
 8007ab6:	46bd      	mov	sp, r7
 8007ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007abc:	4770      	bx	lr

08007abe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007abe:	b480      	push	{r7}
 8007ac0:	b083      	sub	sp, #12
 8007ac2:	af00      	add	r7, sp, #0
 8007ac4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007ac6:	bf00      	nop
 8007ac8:	370c      	adds	r7, #12
 8007aca:	46bd      	mov	sp, r7
 8007acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad0:	4770      	bx	lr

08007ad2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007ad2:	b480      	push	{r7}
 8007ad4:	b083      	sub	sp, #12
 8007ad6:	af00      	add	r7, sp, #0
 8007ad8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007ada:	bf00      	nop
 8007adc:	370c      	adds	r7, #12
 8007ade:	46bd      	mov	sp, r7
 8007ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae4:	4770      	bx	lr
	...

08007ae8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007ae8:	b480      	push	{r7}
 8007aea:	b085      	sub	sp, #20
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	6078      	str	r0, [r7, #4]
 8007af0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	4a46      	ldr	r2, [pc, #280]	@ (8007c14 <TIM_Base_SetConfig+0x12c>)
 8007afc:	4293      	cmp	r3, r2
 8007afe:	d013      	beq.n	8007b28 <TIM_Base_SetConfig+0x40>
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007b06:	d00f      	beq.n	8007b28 <TIM_Base_SetConfig+0x40>
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	4a43      	ldr	r2, [pc, #268]	@ (8007c18 <TIM_Base_SetConfig+0x130>)
 8007b0c:	4293      	cmp	r3, r2
 8007b0e:	d00b      	beq.n	8007b28 <TIM_Base_SetConfig+0x40>
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	4a42      	ldr	r2, [pc, #264]	@ (8007c1c <TIM_Base_SetConfig+0x134>)
 8007b14:	4293      	cmp	r3, r2
 8007b16:	d007      	beq.n	8007b28 <TIM_Base_SetConfig+0x40>
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	4a41      	ldr	r2, [pc, #260]	@ (8007c20 <TIM_Base_SetConfig+0x138>)
 8007b1c:	4293      	cmp	r3, r2
 8007b1e:	d003      	beq.n	8007b28 <TIM_Base_SetConfig+0x40>
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	4a40      	ldr	r2, [pc, #256]	@ (8007c24 <TIM_Base_SetConfig+0x13c>)
 8007b24:	4293      	cmp	r3, r2
 8007b26:	d108      	bne.n	8007b3a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007b2e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007b30:	683b      	ldr	r3, [r7, #0]
 8007b32:	685b      	ldr	r3, [r3, #4]
 8007b34:	68fa      	ldr	r2, [r7, #12]
 8007b36:	4313      	orrs	r3, r2
 8007b38:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	4a35      	ldr	r2, [pc, #212]	@ (8007c14 <TIM_Base_SetConfig+0x12c>)
 8007b3e:	4293      	cmp	r3, r2
 8007b40:	d02b      	beq.n	8007b9a <TIM_Base_SetConfig+0xb2>
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007b48:	d027      	beq.n	8007b9a <TIM_Base_SetConfig+0xb2>
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	4a32      	ldr	r2, [pc, #200]	@ (8007c18 <TIM_Base_SetConfig+0x130>)
 8007b4e:	4293      	cmp	r3, r2
 8007b50:	d023      	beq.n	8007b9a <TIM_Base_SetConfig+0xb2>
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	4a31      	ldr	r2, [pc, #196]	@ (8007c1c <TIM_Base_SetConfig+0x134>)
 8007b56:	4293      	cmp	r3, r2
 8007b58:	d01f      	beq.n	8007b9a <TIM_Base_SetConfig+0xb2>
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	4a30      	ldr	r2, [pc, #192]	@ (8007c20 <TIM_Base_SetConfig+0x138>)
 8007b5e:	4293      	cmp	r3, r2
 8007b60:	d01b      	beq.n	8007b9a <TIM_Base_SetConfig+0xb2>
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	4a2f      	ldr	r2, [pc, #188]	@ (8007c24 <TIM_Base_SetConfig+0x13c>)
 8007b66:	4293      	cmp	r3, r2
 8007b68:	d017      	beq.n	8007b9a <TIM_Base_SetConfig+0xb2>
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	4a2e      	ldr	r2, [pc, #184]	@ (8007c28 <TIM_Base_SetConfig+0x140>)
 8007b6e:	4293      	cmp	r3, r2
 8007b70:	d013      	beq.n	8007b9a <TIM_Base_SetConfig+0xb2>
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	4a2d      	ldr	r2, [pc, #180]	@ (8007c2c <TIM_Base_SetConfig+0x144>)
 8007b76:	4293      	cmp	r3, r2
 8007b78:	d00f      	beq.n	8007b9a <TIM_Base_SetConfig+0xb2>
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	4a2c      	ldr	r2, [pc, #176]	@ (8007c30 <TIM_Base_SetConfig+0x148>)
 8007b7e:	4293      	cmp	r3, r2
 8007b80:	d00b      	beq.n	8007b9a <TIM_Base_SetConfig+0xb2>
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	4a2b      	ldr	r2, [pc, #172]	@ (8007c34 <TIM_Base_SetConfig+0x14c>)
 8007b86:	4293      	cmp	r3, r2
 8007b88:	d007      	beq.n	8007b9a <TIM_Base_SetConfig+0xb2>
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	4a2a      	ldr	r2, [pc, #168]	@ (8007c38 <TIM_Base_SetConfig+0x150>)
 8007b8e:	4293      	cmp	r3, r2
 8007b90:	d003      	beq.n	8007b9a <TIM_Base_SetConfig+0xb2>
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	4a29      	ldr	r2, [pc, #164]	@ (8007c3c <TIM_Base_SetConfig+0x154>)
 8007b96:	4293      	cmp	r3, r2
 8007b98:	d108      	bne.n	8007bac <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007ba0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007ba2:	683b      	ldr	r3, [r7, #0]
 8007ba4:	68db      	ldr	r3, [r3, #12]
 8007ba6:	68fa      	ldr	r2, [r7, #12]
 8007ba8:	4313      	orrs	r3, r2
 8007baa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007bb2:	683b      	ldr	r3, [r7, #0]
 8007bb4:	695b      	ldr	r3, [r3, #20]
 8007bb6:	4313      	orrs	r3, r2
 8007bb8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	68fa      	ldr	r2, [r7, #12]
 8007bbe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007bc0:	683b      	ldr	r3, [r7, #0]
 8007bc2:	689a      	ldr	r2, [r3, #8]
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007bc8:	683b      	ldr	r3, [r7, #0]
 8007bca:	681a      	ldr	r2, [r3, #0]
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	4a10      	ldr	r2, [pc, #64]	@ (8007c14 <TIM_Base_SetConfig+0x12c>)
 8007bd4:	4293      	cmp	r3, r2
 8007bd6:	d003      	beq.n	8007be0 <TIM_Base_SetConfig+0xf8>
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	4a12      	ldr	r2, [pc, #72]	@ (8007c24 <TIM_Base_SetConfig+0x13c>)
 8007bdc:	4293      	cmp	r3, r2
 8007bde:	d103      	bne.n	8007be8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007be0:	683b      	ldr	r3, [r7, #0]
 8007be2:	691a      	ldr	r2, [r3, #16]
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	2201      	movs	r2, #1
 8007bec:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	691b      	ldr	r3, [r3, #16]
 8007bf2:	f003 0301 	and.w	r3, r3, #1
 8007bf6:	2b01      	cmp	r3, #1
 8007bf8:	d105      	bne.n	8007c06 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	691b      	ldr	r3, [r3, #16]
 8007bfe:	f023 0201 	bic.w	r2, r3, #1
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	611a      	str	r2, [r3, #16]
  }
}
 8007c06:	bf00      	nop
 8007c08:	3714      	adds	r7, #20
 8007c0a:	46bd      	mov	sp, r7
 8007c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c10:	4770      	bx	lr
 8007c12:	bf00      	nop
 8007c14:	40010000 	.word	0x40010000
 8007c18:	40000400 	.word	0x40000400
 8007c1c:	40000800 	.word	0x40000800
 8007c20:	40000c00 	.word	0x40000c00
 8007c24:	40010400 	.word	0x40010400
 8007c28:	40014000 	.word	0x40014000
 8007c2c:	40014400 	.word	0x40014400
 8007c30:	40014800 	.word	0x40014800
 8007c34:	40001800 	.word	0x40001800
 8007c38:	40001c00 	.word	0x40001c00
 8007c3c:	40002000 	.word	0x40002000

08007c40 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007c40:	b480      	push	{r7}
 8007c42:	b087      	sub	sp, #28
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	6078      	str	r0, [r7, #4]
 8007c48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	6a1b      	ldr	r3, [r3, #32]
 8007c4e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	6a1b      	ldr	r3, [r3, #32]
 8007c54:	f023 0201 	bic.w	r2, r3, #1
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	685b      	ldr	r3, [r3, #4]
 8007c60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	699b      	ldr	r3, [r3, #24]
 8007c66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007c6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	f023 0303 	bic.w	r3, r3, #3
 8007c76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007c78:	683b      	ldr	r3, [r7, #0]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	68fa      	ldr	r2, [r7, #12]
 8007c7e:	4313      	orrs	r3, r2
 8007c80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007c82:	697b      	ldr	r3, [r7, #20]
 8007c84:	f023 0302 	bic.w	r3, r3, #2
 8007c88:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007c8a:	683b      	ldr	r3, [r7, #0]
 8007c8c:	689b      	ldr	r3, [r3, #8]
 8007c8e:	697a      	ldr	r2, [r7, #20]
 8007c90:	4313      	orrs	r3, r2
 8007c92:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	4a20      	ldr	r2, [pc, #128]	@ (8007d18 <TIM_OC1_SetConfig+0xd8>)
 8007c98:	4293      	cmp	r3, r2
 8007c9a:	d003      	beq.n	8007ca4 <TIM_OC1_SetConfig+0x64>
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	4a1f      	ldr	r2, [pc, #124]	@ (8007d1c <TIM_OC1_SetConfig+0xdc>)
 8007ca0:	4293      	cmp	r3, r2
 8007ca2:	d10c      	bne.n	8007cbe <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007ca4:	697b      	ldr	r3, [r7, #20]
 8007ca6:	f023 0308 	bic.w	r3, r3, #8
 8007caa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007cac:	683b      	ldr	r3, [r7, #0]
 8007cae:	68db      	ldr	r3, [r3, #12]
 8007cb0:	697a      	ldr	r2, [r7, #20]
 8007cb2:	4313      	orrs	r3, r2
 8007cb4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007cb6:	697b      	ldr	r3, [r7, #20]
 8007cb8:	f023 0304 	bic.w	r3, r3, #4
 8007cbc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	4a15      	ldr	r2, [pc, #84]	@ (8007d18 <TIM_OC1_SetConfig+0xd8>)
 8007cc2:	4293      	cmp	r3, r2
 8007cc4:	d003      	beq.n	8007cce <TIM_OC1_SetConfig+0x8e>
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	4a14      	ldr	r2, [pc, #80]	@ (8007d1c <TIM_OC1_SetConfig+0xdc>)
 8007cca:	4293      	cmp	r3, r2
 8007ccc:	d111      	bne.n	8007cf2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007cce:	693b      	ldr	r3, [r7, #16]
 8007cd0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007cd4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007cd6:	693b      	ldr	r3, [r7, #16]
 8007cd8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007cdc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007cde:	683b      	ldr	r3, [r7, #0]
 8007ce0:	695b      	ldr	r3, [r3, #20]
 8007ce2:	693a      	ldr	r2, [r7, #16]
 8007ce4:	4313      	orrs	r3, r2
 8007ce6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007ce8:	683b      	ldr	r3, [r7, #0]
 8007cea:	699b      	ldr	r3, [r3, #24]
 8007cec:	693a      	ldr	r2, [r7, #16]
 8007cee:	4313      	orrs	r3, r2
 8007cf0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	693a      	ldr	r2, [r7, #16]
 8007cf6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	68fa      	ldr	r2, [r7, #12]
 8007cfc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007cfe:	683b      	ldr	r3, [r7, #0]
 8007d00:	685a      	ldr	r2, [r3, #4]
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	697a      	ldr	r2, [r7, #20]
 8007d0a:	621a      	str	r2, [r3, #32]
}
 8007d0c:	bf00      	nop
 8007d0e:	371c      	adds	r7, #28
 8007d10:	46bd      	mov	sp, r7
 8007d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d16:	4770      	bx	lr
 8007d18:	40010000 	.word	0x40010000
 8007d1c:	40010400 	.word	0x40010400

08007d20 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007d20:	b480      	push	{r7}
 8007d22:	b087      	sub	sp, #28
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	6078      	str	r0, [r7, #4]
 8007d28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	6a1b      	ldr	r3, [r3, #32]
 8007d2e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	6a1b      	ldr	r3, [r3, #32]
 8007d34:	f023 0210 	bic.w	r2, r3, #16
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	685b      	ldr	r3, [r3, #4]
 8007d40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	699b      	ldr	r3, [r3, #24]
 8007d46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007d4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007d56:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007d58:	683b      	ldr	r3, [r7, #0]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	021b      	lsls	r3, r3, #8
 8007d5e:	68fa      	ldr	r2, [r7, #12]
 8007d60:	4313      	orrs	r3, r2
 8007d62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007d64:	697b      	ldr	r3, [r7, #20]
 8007d66:	f023 0320 	bic.w	r3, r3, #32
 8007d6a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007d6c:	683b      	ldr	r3, [r7, #0]
 8007d6e:	689b      	ldr	r3, [r3, #8]
 8007d70:	011b      	lsls	r3, r3, #4
 8007d72:	697a      	ldr	r2, [r7, #20]
 8007d74:	4313      	orrs	r3, r2
 8007d76:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	4a22      	ldr	r2, [pc, #136]	@ (8007e04 <TIM_OC2_SetConfig+0xe4>)
 8007d7c:	4293      	cmp	r3, r2
 8007d7e:	d003      	beq.n	8007d88 <TIM_OC2_SetConfig+0x68>
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	4a21      	ldr	r2, [pc, #132]	@ (8007e08 <TIM_OC2_SetConfig+0xe8>)
 8007d84:	4293      	cmp	r3, r2
 8007d86:	d10d      	bne.n	8007da4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007d88:	697b      	ldr	r3, [r7, #20]
 8007d8a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007d8e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007d90:	683b      	ldr	r3, [r7, #0]
 8007d92:	68db      	ldr	r3, [r3, #12]
 8007d94:	011b      	lsls	r3, r3, #4
 8007d96:	697a      	ldr	r2, [r7, #20]
 8007d98:	4313      	orrs	r3, r2
 8007d9a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007d9c:	697b      	ldr	r3, [r7, #20]
 8007d9e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007da2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	4a17      	ldr	r2, [pc, #92]	@ (8007e04 <TIM_OC2_SetConfig+0xe4>)
 8007da8:	4293      	cmp	r3, r2
 8007daa:	d003      	beq.n	8007db4 <TIM_OC2_SetConfig+0x94>
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	4a16      	ldr	r2, [pc, #88]	@ (8007e08 <TIM_OC2_SetConfig+0xe8>)
 8007db0:	4293      	cmp	r3, r2
 8007db2:	d113      	bne.n	8007ddc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007db4:	693b      	ldr	r3, [r7, #16]
 8007db6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007dba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007dbc:	693b      	ldr	r3, [r7, #16]
 8007dbe:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007dc2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007dc4:	683b      	ldr	r3, [r7, #0]
 8007dc6:	695b      	ldr	r3, [r3, #20]
 8007dc8:	009b      	lsls	r3, r3, #2
 8007dca:	693a      	ldr	r2, [r7, #16]
 8007dcc:	4313      	orrs	r3, r2
 8007dce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007dd0:	683b      	ldr	r3, [r7, #0]
 8007dd2:	699b      	ldr	r3, [r3, #24]
 8007dd4:	009b      	lsls	r3, r3, #2
 8007dd6:	693a      	ldr	r2, [r7, #16]
 8007dd8:	4313      	orrs	r3, r2
 8007dda:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	693a      	ldr	r2, [r7, #16]
 8007de0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	68fa      	ldr	r2, [r7, #12]
 8007de6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007de8:	683b      	ldr	r3, [r7, #0]
 8007dea:	685a      	ldr	r2, [r3, #4]
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	697a      	ldr	r2, [r7, #20]
 8007df4:	621a      	str	r2, [r3, #32]
}
 8007df6:	bf00      	nop
 8007df8:	371c      	adds	r7, #28
 8007dfa:	46bd      	mov	sp, r7
 8007dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e00:	4770      	bx	lr
 8007e02:	bf00      	nop
 8007e04:	40010000 	.word	0x40010000
 8007e08:	40010400 	.word	0x40010400

08007e0c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007e0c:	b480      	push	{r7}
 8007e0e:	b087      	sub	sp, #28
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	6078      	str	r0, [r7, #4]
 8007e14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	6a1b      	ldr	r3, [r3, #32]
 8007e1a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	6a1b      	ldr	r3, [r3, #32]
 8007e20:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	685b      	ldr	r3, [r3, #4]
 8007e2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	69db      	ldr	r3, [r3, #28]
 8007e32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007e3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	f023 0303 	bic.w	r3, r3, #3
 8007e42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007e44:	683b      	ldr	r3, [r7, #0]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	68fa      	ldr	r2, [r7, #12]
 8007e4a:	4313      	orrs	r3, r2
 8007e4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007e4e:	697b      	ldr	r3, [r7, #20]
 8007e50:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007e54:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007e56:	683b      	ldr	r3, [r7, #0]
 8007e58:	689b      	ldr	r3, [r3, #8]
 8007e5a:	021b      	lsls	r3, r3, #8
 8007e5c:	697a      	ldr	r2, [r7, #20]
 8007e5e:	4313      	orrs	r3, r2
 8007e60:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	4a21      	ldr	r2, [pc, #132]	@ (8007eec <TIM_OC3_SetConfig+0xe0>)
 8007e66:	4293      	cmp	r3, r2
 8007e68:	d003      	beq.n	8007e72 <TIM_OC3_SetConfig+0x66>
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	4a20      	ldr	r2, [pc, #128]	@ (8007ef0 <TIM_OC3_SetConfig+0xe4>)
 8007e6e:	4293      	cmp	r3, r2
 8007e70:	d10d      	bne.n	8007e8e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007e72:	697b      	ldr	r3, [r7, #20]
 8007e74:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007e78:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007e7a:	683b      	ldr	r3, [r7, #0]
 8007e7c:	68db      	ldr	r3, [r3, #12]
 8007e7e:	021b      	lsls	r3, r3, #8
 8007e80:	697a      	ldr	r2, [r7, #20]
 8007e82:	4313      	orrs	r3, r2
 8007e84:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007e86:	697b      	ldr	r3, [r7, #20]
 8007e88:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007e8c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	4a16      	ldr	r2, [pc, #88]	@ (8007eec <TIM_OC3_SetConfig+0xe0>)
 8007e92:	4293      	cmp	r3, r2
 8007e94:	d003      	beq.n	8007e9e <TIM_OC3_SetConfig+0x92>
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	4a15      	ldr	r2, [pc, #84]	@ (8007ef0 <TIM_OC3_SetConfig+0xe4>)
 8007e9a:	4293      	cmp	r3, r2
 8007e9c:	d113      	bne.n	8007ec6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007e9e:	693b      	ldr	r3, [r7, #16]
 8007ea0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007ea4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007ea6:	693b      	ldr	r3, [r7, #16]
 8007ea8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007eac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007eae:	683b      	ldr	r3, [r7, #0]
 8007eb0:	695b      	ldr	r3, [r3, #20]
 8007eb2:	011b      	lsls	r3, r3, #4
 8007eb4:	693a      	ldr	r2, [r7, #16]
 8007eb6:	4313      	orrs	r3, r2
 8007eb8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007eba:	683b      	ldr	r3, [r7, #0]
 8007ebc:	699b      	ldr	r3, [r3, #24]
 8007ebe:	011b      	lsls	r3, r3, #4
 8007ec0:	693a      	ldr	r2, [r7, #16]
 8007ec2:	4313      	orrs	r3, r2
 8007ec4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	693a      	ldr	r2, [r7, #16]
 8007eca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	68fa      	ldr	r2, [r7, #12]
 8007ed0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007ed2:	683b      	ldr	r3, [r7, #0]
 8007ed4:	685a      	ldr	r2, [r3, #4]
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	697a      	ldr	r2, [r7, #20]
 8007ede:	621a      	str	r2, [r3, #32]
}
 8007ee0:	bf00      	nop
 8007ee2:	371c      	adds	r7, #28
 8007ee4:	46bd      	mov	sp, r7
 8007ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eea:	4770      	bx	lr
 8007eec:	40010000 	.word	0x40010000
 8007ef0:	40010400 	.word	0x40010400

08007ef4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007ef4:	b480      	push	{r7}
 8007ef6:	b087      	sub	sp, #28
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	6078      	str	r0, [r7, #4]
 8007efc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	6a1b      	ldr	r3, [r3, #32]
 8007f02:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	6a1b      	ldr	r3, [r3, #32]
 8007f08:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	685b      	ldr	r3, [r3, #4]
 8007f14:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	69db      	ldr	r3, [r3, #28]
 8007f1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007f22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007f2a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007f2c:	683b      	ldr	r3, [r7, #0]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	021b      	lsls	r3, r3, #8
 8007f32:	68fa      	ldr	r2, [r7, #12]
 8007f34:	4313      	orrs	r3, r2
 8007f36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007f38:	693b      	ldr	r3, [r7, #16]
 8007f3a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007f3e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007f40:	683b      	ldr	r3, [r7, #0]
 8007f42:	689b      	ldr	r3, [r3, #8]
 8007f44:	031b      	lsls	r3, r3, #12
 8007f46:	693a      	ldr	r2, [r7, #16]
 8007f48:	4313      	orrs	r3, r2
 8007f4a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	4a12      	ldr	r2, [pc, #72]	@ (8007f98 <TIM_OC4_SetConfig+0xa4>)
 8007f50:	4293      	cmp	r3, r2
 8007f52:	d003      	beq.n	8007f5c <TIM_OC4_SetConfig+0x68>
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	4a11      	ldr	r2, [pc, #68]	@ (8007f9c <TIM_OC4_SetConfig+0xa8>)
 8007f58:	4293      	cmp	r3, r2
 8007f5a:	d109      	bne.n	8007f70 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007f5c:	697b      	ldr	r3, [r7, #20]
 8007f5e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007f62:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007f64:	683b      	ldr	r3, [r7, #0]
 8007f66:	695b      	ldr	r3, [r3, #20]
 8007f68:	019b      	lsls	r3, r3, #6
 8007f6a:	697a      	ldr	r2, [r7, #20]
 8007f6c:	4313      	orrs	r3, r2
 8007f6e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	697a      	ldr	r2, [r7, #20]
 8007f74:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	68fa      	ldr	r2, [r7, #12]
 8007f7a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007f7c:	683b      	ldr	r3, [r7, #0]
 8007f7e:	685a      	ldr	r2, [r3, #4]
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	693a      	ldr	r2, [r7, #16]
 8007f88:	621a      	str	r2, [r3, #32]
}
 8007f8a:	bf00      	nop
 8007f8c:	371c      	adds	r7, #28
 8007f8e:	46bd      	mov	sp, r7
 8007f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f94:	4770      	bx	lr
 8007f96:	bf00      	nop
 8007f98:	40010000 	.word	0x40010000
 8007f9c:	40010400 	.word	0x40010400

08007fa0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007fa0:	b480      	push	{r7}
 8007fa2:	b087      	sub	sp, #28
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	60f8      	str	r0, [r7, #12]
 8007fa8:	60b9      	str	r1, [r7, #8]
 8007faa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	6a1b      	ldr	r3, [r3, #32]
 8007fb0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	6a1b      	ldr	r3, [r3, #32]
 8007fb6:	f023 0201 	bic.w	r2, r3, #1
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	699b      	ldr	r3, [r3, #24]
 8007fc2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007fc4:	693b      	ldr	r3, [r7, #16]
 8007fc6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007fca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	011b      	lsls	r3, r3, #4
 8007fd0:	693a      	ldr	r2, [r7, #16]
 8007fd2:	4313      	orrs	r3, r2
 8007fd4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007fd6:	697b      	ldr	r3, [r7, #20]
 8007fd8:	f023 030a 	bic.w	r3, r3, #10
 8007fdc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007fde:	697a      	ldr	r2, [r7, #20]
 8007fe0:	68bb      	ldr	r3, [r7, #8]
 8007fe2:	4313      	orrs	r3, r2
 8007fe4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	693a      	ldr	r2, [r7, #16]
 8007fea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	697a      	ldr	r2, [r7, #20]
 8007ff0:	621a      	str	r2, [r3, #32]
}
 8007ff2:	bf00      	nop
 8007ff4:	371c      	adds	r7, #28
 8007ff6:	46bd      	mov	sp, r7
 8007ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ffc:	4770      	bx	lr

08007ffe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007ffe:	b480      	push	{r7}
 8008000:	b087      	sub	sp, #28
 8008002:	af00      	add	r7, sp, #0
 8008004:	60f8      	str	r0, [r7, #12]
 8008006:	60b9      	str	r1, [r7, #8]
 8008008:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	6a1b      	ldr	r3, [r3, #32]
 800800e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	6a1b      	ldr	r3, [r3, #32]
 8008014:	f023 0210 	bic.w	r2, r3, #16
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	699b      	ldr	r3, [r3, #24]
 8008020:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008022:	693b      	ldr	r3, [r7, #16]
 8008024:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008028:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	031b      	lsls	r3, r3, #12
 800802e:	693a      	ldr	r2, [r7, #16]
 8008030:	4313      	orrs	r3, r2
 8008032:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008034:	697b      	ldr	r3, [r7, #20]
 8008036:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800803a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800803c:	68bb      	ldr	r3, [r7, #8]
 800803e:	011b      	lsls	r3, r3, #4
 8008040:	697a      	ldr	r2, [r7, #20]
 8008042:	4313      	orrs	r3, r2
 8008044:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	693a      	ldr	r2, [r7, #16]
 800804a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	697a      	ldr	r2, [r7, #20]
 8008050:	621a      	str	r2, [r3, #32]
}
 8008052:	bf00      	nop
 8008054:	371c      	adds	r7, #28
 8008056:	46bd      	mov	sp, r7
 8008058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800805c:	4770      	bx	lr

0800805e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800805e:	b480      	push	{r7}
 8008060:	b085      	sub	sp, #20
 8008062:	af00      	add	r7, sp, #0
 8008064:	6078      	str	r0, [r7, #4]
 8008066:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	689b      	ldr	r3, [r3, #8]
 800806c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008074:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008076:	683a      	ldr	r2, [r7, #0]
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	4313      	orrs	r3, r2
 800807c:	f043 0307 	orr.w	r3, r3, #7
 8008080:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	68fa      	ldr	r2, [r7, #12]
 8008086:	609a      	str	r2, [r3, #8]
}
 8008088:	bf00      	nop
 800808a:	3714      	adds	r7, #20
 800808c:	46bd      	mov	sp, r7
 800808e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008092:	4770      	bx	lr

08008094 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008094:	b480      	push	{r7}
 8008096:	b087      	sub	sp, #28
 8008098:	af00      	add	r7, sp, #0
 800809a:	60f8      	str	r0, [r7, #12]
 800809c:	60b9      	str	r1, [r7, #8]
 800809e:	607a      	str	r2, [r7, #4]
 80080a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	689b      	ldr	r3, [r3, #8]
 80080a6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80080a8:	697b      	ldr	r3, [r7, #20]
 80080aa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80080ae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80080b0:	683b      	ldr	r3, [r7, #0]
 80080b2:	021a      	lsls	r2, r3, #8
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	431a      	orrs	r2, r3
 80080b8:	68bb      	ldr	r3, [r7, #8]
 80080ba:	4313      	orrs	r3, r2
 80080bc:	697a      	ldr	r2, [r7, #20]
 80080be:	4313      	orrs	r3, r2
 80080c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	697a      	ldr	r2, [r7, #20]
 80080c6:	609a      	str	r2, [r3, #8]
}
 80080c8:	bf00      	nop
 80080ca:	371c      	adds	r7, #28
 80080cc:	46bd      	mov	sp, r7
 80080ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d2:	4770      	bx	lr

080080d4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80080d4:	b480      	push	{r7}
 80080d6:	b087      	sub	sp, #28
 80080d8:	af00      	add	r7, sp, #0
 80080da:	60f8      	str	r0, [r7, #12]
 80080dc:	60b9      	str	r1, [r7, #8]
 80080de:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80080e0:	68bb      	ldr	r3, [r7, #8]
 80080e2:	f003 031f 	and.w	r3, r3, #31
 80080e6:	2201      	movs	r2, #1
 80080e8:	fa02 f303 	lsl.w	r3, r2, r3
 80080ec:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	6a1a      	ldr	r2, [r3, #32]
 80080f2:	697b      	ldr	r3, [r7, #20]
 80080f4:	43db      	mvns	r3, r3
 80080f6:	401a      	ands	r2, r3
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	6a1a      	ldr	r2, [r3, #32]
 8008100:	68bb      	ldr	r3, [r7, #8]
 8008102:	f003 031f 	and.w	r3, r3, #31
 8008106:	6879      	ldr	r1, [r7, #4]
 8008108:	fa01 f303 	lsl.w	r3, r1, r3
 800810c:	431a      	orrs	r2, r3
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	621a      	str	r2, [r3, #32]
}
 8008112:	bf00      	nop
 8008114:	371c      	adds	r7, #28
 8008116:	46bd      	mov	sp, r7
 8008118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800811c:	4770      	bx	lr
	...

08008120 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008120:	b480      	push	{r7}
 8008122:	b085      	sub	sp, #20
 8008124:	af00      	add	r7, sp, #0
 8008126:	6078      	str	r0, [r7, #4]
 8008128:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008130:	2b01      	cmp	r3, #1
 8008132:	d101      	bne.n	8008138 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008134:	2302      	movs	r3, #2
 8008136:	e05a      	b.n	80081ee <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	2201      	movs	r2, #1
 800813c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	2202      	movs	r2, #2
 8008144:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	685b      	ldr	r3, [r3, #4]
 800814e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	689b      	ldr	r3, [r3, #8]
 8008156:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800815e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008160:	683b      	ldr	r3, [r7, #0]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	68fa      	ldr	r2, [r7, #12]
 8008166:	4313      	orrs	r3, r2
 8008168:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	68fa      	ldr	r2, [r7, #12]
 8008170:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	4a21      	ldr	r2, [pc, #132]	@ (80081fc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008178:	4293      	cmp	r3, r2
 800817a:	d022      	beq.n	80081c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008184:	d01d      	beq.n	80081c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	4a1d      	ldr	r2, [pc, #116]	@ (8008200 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800818c:	4293      	cmp	r3, r2
 800818e:	d018      	beq.n	80081c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	4a1b      	ldr	r2, [pc, #108]	@ (8008204 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008196:	4293      	cmp	r3, r2
 8008198:	d013      	beq.n	80081c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	4a1a      	ldr	r2, [pc, #104]	@ (8008208 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80081a0:	4293      	cmp	r3, r2
 80081a2:	d00e      	beq.n	80081c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	4a18      	ldr	r2, [pc, #96]	@ (800820c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80081aa:	4293      	cmp	r3, r2
 80081ac:	d009      	beq.n	80081c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	4a17      	ldr	r2, [pc, #92]	@ (8008210 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80081b4:	4293      	cmp	r3, r2
 80081b6:	d004      	beq.n	80081c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	4a15      	ldr	r2, [pc, #84]	@ (8008214 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80081be:	4293      	cmp	r3, r2
 80081c0:	d10c      	bne.n	80081dc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80081c2:	68bb      	ldr	r3, [r7, #8]
 80081c4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80081c8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80081ca:	683b      	ldr	r3, [r7, #0]
 80081cc:	685b      	ldr	r3, [r3, #4]
 80081ce:	68ba      	ldr	r2, [r7, #8]
 80081d0:	4313      	orrs	r3, r2
 80081d2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	68ba      	ldr	r2, [r7, #8]
 80081da:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	2201      	movs	r2, #1
 80081e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	2200      	movs	r2, #0
 80081e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80081ec:	2300      	movs	r3, #0
}
 80081ee:	4618      	mov	r0, r3
 80081f0:	3714      	adds	r7, #20
 80081f2:	46bd      	mov	sp, r7
 80081f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f8:	4770      	bx	lr
 80081fa:	bf00      	nop
 80081fc:	40010000 	.word	0x40010000
 8008200:	40000400 	.word	0x40000400
 8008204:	40000800 	.word	0x40000800
 8008208:	40000c00 	.word	0x40000c00
 800820c:	40010400 	.word	0x40010400
 8008210:	40014000 	.word	0x40014000
 8008214:	40001800 	.word	0x40001800

08008218 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008218:	b480      	push	{r7}
 800821a:	b083      	sub	sp, #12
 800821c:	af00      	add	r7, sp, #0
 800821e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008220:	bf00      	nop
 8008222:	370c      	adds	r7, #12
 8008224:	46bd      	mov	sp, r7
 8008226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800822a:	4770      	bx	lr

0800822c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800822c:	b480      	push	{r7}
 800822e:	b083      	sub	sp, #12
 8008230:	af00      	add	r7, sp, #0
 8008232:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008234:	bf00      	nop
 8008236:	370c      	adds	r7, #12
 8008238:	46bd      	mov	sp, r7
 800823a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800823e:	4770      	bx	lr

08008240 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008240:	b580      	push	{r7, lr}
 8008242:	b082      	sub	sp, #8
 8008244:	af00      	add	r7, sp, #0
 8008246:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	2b00      	cmp	r3, #0
 800824c:	d101      	bne.n	8008252 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800824e:	2301      	movs	r3, #1
 8008250:	e042      	b.n	80082d8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008258:	b2db      	uxtb	r3, r3
 800825a:	2b00      	cmp	r3, #0
 800825c:	d106      	bne.n	800826c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	2200      	movs	r2, #0
 8008262:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008266:	6878      	ldr	r0, [r7, #4]
 8008268:	f7fa fe9a 	bl	8002fa0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	2224      	movs	r2, #36	@ 0x24
 8008270:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	68da      	ldr	r2, [r3, #12]
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008282:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008284:	6878      	ldr	r0, [r7, #4]
 8008286:	f000 f82b 	bl	80082e0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	691a      	ldr	r2, [r3, #16]
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008298:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	695a      	ldr	r2, [r3, #20]
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80082a8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	68da      	ldr	r2, [r3, #12]
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80082b8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	2200      	movs	r2, #0
 80082be:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	2220      	movs	r2, #32
 80082c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	2220      	movs	r2, #32
 80082cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	2200      	movs	r2, #0
 80082d4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80082d6:	2300      	movs	r3, #0
}
 80082d8:	4618      	mov	r0, r3
 80082da:	3708      	adds	r7, #8
 80082dc:	46bd      	mov	sp, r7
 80082de:	bd80      	pop	{r7, pc}

080082e0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80082e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80082e4:	b0c0      	sub	sp, #256	@ 0x100
 80082e6:	af00      	add	r7, sp, #0
 80082e8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80082ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	691b      	ldr	r3, [r3, #16]
 80082f4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80082f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80082fc:	68d9      	ldr	r1, [r3, #12]
 80082fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008302:	681a      	ldr	r2, [r3, #0]
 8008304:	ea40 0301 	orr.w	r3, r0, r1
 8008308:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800830a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800830e:	689a      	ldr	r2, [r3, #8]
 8008310:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008314:	691b      	ldr	r3, [r3, #16]
 8008316:	431a      	orrs	r2, r3
 8008318:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800831c:	695b      	ldr	r3, [r3, #20]
 800831e:	431a      	orrs	r2, r3
 8008320:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008324:	69db      	ldr	r3, [r3, #28]
 8008326:	4313      	orrs	r3, r2
 8008328:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800832c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	68db      	ldr	r3, [r3, #12]
 8008334:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8008338:	f021 010c 	bic.w	r1, r1, #12
 800833c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008340:	681a      	ldr	r2, [r3, #0]
 8008342:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8008346:	430b      	orrs	r3, r1
 8008348:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800834a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	695b      	ldr	r3, [r3, #20]
 8008352:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8008356:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800835a:	6999      	ldr	r1, [r3, #24]
 800835c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008360:	681a      	ldr	r2, [r3, #0]
 8008362:	ea40 0301 	orr.w	r3, r0, r1
 8008366:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008368:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800836c:	681a      	ldr	r2, [r3, #0]
 800836e:	4b8f      	ldr	r3, [pc, #572]	@ (80085ac <UART_SetConfig+0x2cc>)
 8008370:	429a      	cmp	r2, r3
 8008372:	d005      	beq.n	8008380 <UART_SetConfig+0xa0>
 8008374:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008378:	681a      	ldr	r2, [r3, #0]
 800837a:	4b8d      	ldr	r3, [pc, #564]	@ (80085b0 <UART_SetConfig+0x2d0>)
 800837c:	429a      	cmp	r2, r3
 800837e:	d104      	bne.n	800838a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008380:	f7fd f8ce 	bl	8005520 <HAL_RCC_GetPCLK2Freq>
 8008384:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8008388:	e003      	b.n	8008392 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800838a:	f7fd f8b5 	bl	80054f8 <HAL_RCC_GetPCLK1Freq>
 800838e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008392:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008396:	69db      	ldr	r3, [r3, #28]
 8008398:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800839c:	f040 810c 	bne.w	80085b8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80083a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80083a4:	2200      	movs	r2, #0
 80083a6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80083aa:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80083ae:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80083b2:	4622      	mov	r2, r4
 80083b4:	462b      	mov	r3, r5
 80083b6:	1891      	adds	r1, r2, r2
 80083b8:	65b9      	str	r1, [r7, #88]	@ 0x58
 80083ba:	415b      	adcs	r3, r3
 80083bc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80083be:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80083c2:	4621      	mov	r1, r4
 80083c4:	eb12 0801 	adds.w	r8, r2, r1
 80083c8:	4629      	mov	r1, r5
 80083ca:	eb43 0901 	adc.w	r9, r3, r1
 80083ce:	f04f 0200 	mov.w	r2, #0
 80083d2:	f04f 0300 	mov.w	r3, #0
 80083d6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80083da:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80083de:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80083e2:	4690      	mov	r8, r2
 80083e4:	4699      	mov	r9, r3
 80083e6:	4623      	mov	r3, r4
 80083e8:	eb18 0303 	adds.w	r3, r8, r3
 80083ec:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80083f0:	462b      	mov	r3, r5
 80083f2:	eb49 0303 	adc.w	r3, r9, r3
 80083f6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80083fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80083fe:	685b      	ldr	r3, [r3, #4]
 8008400:	2200      	movs	r2, #0
 8008402:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008406:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800840a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800840e:	460b      	mov	r3, r1
 8008410:	18db      	adds	r3, r3, r3
 8008412:	653b      	str	r3, [r7, #80]	@ 0x50
 8008414:	4613      	mov	r3, r2
 8008416:	eb42 0303 	adc.w	r3, r2, r3
 800841a:	657b      	str	r3, [r7, #84]	@ 0x54
 800841c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8008420:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8008424:	f7f8 fc50 	bl	8000cc8 <__aeabi_uldivmod>
 8008428:	4602      	mov	r2, r0
 800842a:	460b      	mov	r3, r1
 800842c:	4b61      	ldr	r3, [pc, #388]	@ (80085b4 <UART_SetConfig+0x2d4>)
 800842e:	fba3 2302 	umull	r2, r3, r3, r2
 8008432:	095b      	lsrs	r3, r3, #5
 8008434:	011c      	lsls	r4, r3, #4
 8008436:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800843a:	2200      	movs	r2, #0
 800843c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008440:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8008444:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8008448:	4642      	mov	r2, r8
 800844a:	464b      	mov	r3, r9
 800844c:	1891      	adds	r1, r2, r2
 800844e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8008450:	415b      	adcs	r3, r3
 8008452:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008454:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8008458:	4641      	mov	r1, r8
 800845a:	eb12 0a01 	adds.w	sl, r2, r1
 800845e:	4649      	mov	r1, r9
 8008460:	eb43 0b01 	adc.w	fp, r3, r1
 8008464:	f04f 0200 	mov.w	r2, #0
 8008468:	f04f 0300 	mov.w	r3, #0
 800846c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008470:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008474:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008478:	4692      	mov	sl, r2
 800847a:	469b      	mov	fp, r3
 800847c:	4643      	mov	r3, r8
 800847e:	eb1a 0303 	adds.w	r3, sl, r3
 8008482:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008486:	464b      	mov	r3, r9
 8008488:	eb4b 0303 	adc.w	r3, fp, r3
 800848c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008490:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008494:	685b      	ldr	r3, [r3, #4]
 8008496:	2200      	movs	r2, #0
 8008498:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800849c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80084a0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80084a4:	460b      	mov	r3, r1
 80084a6:	18db      	adds	r3, r3, r3
 80084a8:	643b      	str	r3, [r7, #64]	@ 0x40
 80084aa:	4613      	mov	r3, r2
 80084ac:	eb42 0303 	adc.w	r3, r2, r3
 80084b0:	647b      	str	r3, [r7, #68]	@ 0x44
 80084b2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80084b6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80084ba:	f7f8 fc05 	bl	8000cc8 <__aeabi_uldivmod>
 80084be:	4602      	mov	r2, r0
 80084c0:	460b      	mov	r3, r1
 80084c2:	4611      	mov	r1, r2
 80084c4:	4b3b      	ldr	r3, [pc, #236]	@ (80085b4 <UART_SetConfig+0x2d4>)
 80084c6:	fba3 2301 	umull	r2, r3, r3, r1
 80084ca:	095b      	lsrs	r3, r3, #5
 80084cc:	2264      	movs	r2, #100	@ 0x64
 80084ce:	fb02 f303 	mul.w	r3, r2, r3
 80084d2:	1acb      	subs	r3, r1, r3
 80084d4:	00db      	lsls	r3, r3, #3
 80084d6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80084da:	4b36      	ldr	r3, [pc, #216]	@ (80085b4 <UART_SetConfig+0x2d4>)
 80084dc:	fba3 2302 	umull	r2, r3, r3, r2
 80084e0:	095b      	lsrs	r3, r3, #5
 80084e2:	005b      	lsls	r3, r3, #1
 80084e4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80084e8:	441c      	add	r4, r3
 80084ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80084ee:	2200      	movs	r2, #0
 80084f0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80084f4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80084f8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80084fc:	4642      	mov	r2, r8
 80084fe:	464b      	mov	r3, r9
 8008500:	1891      	adds	r1, r2, r2
 8008502:	63b9      	str	r1, [r7, #56]	@ 0x38
 8008504:	415b      	adcs	r3, r3
 8008506:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008508:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800850c:	4641      	mov	r1, r8
 800850e:	1851      	adds	r1, r2, r1
 8008510:	6339      	str	r1, [r7, #48]	@ 0x30
 8008512:	4649      	mov	r1, r9
 8008514:	414b      	adcs	r3, r1
 8008516:	637b      	str	r3, [r7, #52]	@ 0x34
 8008518:	f04f 0200 	mov.w	r2, #0
 800851c:	f04f 0300 	mov.w	r3, #0
 8008520:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8008524:	4659      	mov	r1, fp
 8008526:	00cb      	lsls	r3, r1, #3
 8008528:	4651      	mov	r1, sl
 800852a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800852e:	4651      	mov	r1, sl
 8008530:	00ca      	lsls	r2, r1, #3
 8008532:	4610      	mov	r0, r2
 8008534:	4619      	mov	r1, r3
 8008536:	4603      	mov	r3, r0
 8008538:	4642      	mov	r2, r8
 800853a:	189b      	adds	r3, r3, r2
 800853c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008540:	464b      	mov	r3, r9
 8008542:	460a      	mov	r2, r1
 8008544:	eb42 0303 	adc.w	r3, r2, r3
 8008548:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800854c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008550:	685b      	ldr	r3, [r3, #4]
 8008552:	2200      	movs	r2, #0
 8008554:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008558:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800855c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8008560:	460b      	mov	r3, r1
 8008562:	18db      	adds	r3, r3, r3
 8008564:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008566:	4613      	mov	r3, r2
 8008568:	eb42 0303 	adc.w	r3, r2, r3
 800856c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800856e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8008572:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8008576:	f7f8 fba7 	bl	8000cc8 <__aeabi_uldivmod>
 800857a:	4602      	mov	r2, r0
 800857c:	460b      	mov	r3, r1
 800857e:	4b0d      	ldr	r3, [pc, #52]	@ (80085b4 <UART_SetConfig+0x2d4>)
 8008580:	fba3 1302 	umull	r1, r3, r3, r2
 8008584:	095b      	lsrs	r3, r3, #5
 8008586:	2164      	movs	r1, #100	@ 0x64
 8008588:	fb01 f303 	mul.w	r3, r1, r3
 800858c:	1ad3      	subs	r3, r2, r3
 800858e:	00db      	lsls	r3, r3, #3
 8008590:	3332      	adds	r3, #50	@ 0x32
 8008592:	4a08      	ldr	r2, [pc, #32]	@ (80085b4 <UART_SetConfig+0x2d4>)
 8008594:	fba2 2303 	umull	r2, r3, r2, r3
 8008598:	095b      	lsrs	r3, r3, #5
 800859a:	f003 0207 	and.w	r2, r3, #7
 800859e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	4422      	add	r2, r4
 80085a6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80085a8:	e106      	b.n	80087b8 <UART_SetConfig+0x4d8>
 80085aa:	bf00      	nop
 80085ac:	40011000 	.word	0x40011000
 80085b0:	40011400 	.word	0x40011400
 80085b4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80085b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80085bc:	2200      	movs	r2, #0
 80085be:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80085c2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80085c6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80085ca:	4642      	mov	r2, r8
 80085cc:	464b      	mov	r3, r9
 80085ce:	1891      	adds	r1, r2, r2
 80085d0:	6239      	str	r1, [r7, #32]
 80085d2:	415b      	adcs	r3, r3
 80085d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80085d6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80085da:	4641      	mov	r1, r8
 80085dc:	1854      	adds	r4, r2, r1
 80085de:	4649      	mov	r1, r9
 80085e0:	eb43 0501 	adc.w	r5, r3, r1
 80085e4:	f04f 0200 	mov.w	r2, #0
 80085e8:	f04f 0300 	mov.w	r3, #0
 80085ec:	00eb      	lsls	r3, r5, #3
 80085ee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80085f2:	00e2      	lsls	r2, r4, #3
 80085f4:	4614      	mov	r4, r2
 80085f6:	461d      	mov	r5, r3
 80085f8:	4643      	mov	r3, r8
 80085fa:	18e3      	adds	r3, r4, r3
 80085fc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008600:	464b      	mov	r3, r9
 8008602:	eb45 0303 	adc.w	r3, r5, r3
 8008606:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800860a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800860e:	685b      	ldr	r3, [r3, #4]
 8008610:	2200      	movs	r2, #0
 8008612:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008616:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800861a:	f04f 0200 	mov.w	r2, #0
 800861e:	f04f 0300 	mov.w	r3, #0
 8008622:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8008626:	4629      	mov	r1, r5
 8008628:	008b      	lsls	r3, r1, #2
 800862a:	4621      	mov	r1, r4
 800862c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008630:	4621      	mov	r1, r4
 8008632:	008a      	lsls	r2, r1, #2
 8008634:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8008638:	f7f8 fb46 	bl	8000cc8 <__aeabi_uldivmod>
 800863c:	4602      	mov	r2, r0
 800863e:	460b      	mov	r3, r1
 8008640:	4b60      	ldr	r3, [pc, #384]	@ (80087c4 <UART_SetConfig+0x4e4>)
 8008642:	fba3 2302 	umull	r2, r3, r3, r2
 8008646:	095b      	lsrs	r3, r3, #5
 8008648:	011c      	lsls	r4, r3, #4
 800864a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800864e:	2200      	movs	r2, #0
 8008650:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008654:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8008658:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800865c:	4642      	mov	r2, r8
 800865e:	464b      	mov	r3, r9
 8008660:	1891      	adds	r1, r2, r2
 8008662:	61b9      	str	r1, [r7, #24]
 8008664:	415b      	adcs	r3, r3
 8008666:	61fb      	str	r3, [r7, #28]
 8008668:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800866c:	4641      	mov	r1, r8
 800866e:	1851      	adds	r1, r2, r1
 8008670:	6139      	str	r1, [r7, #16]
 8008672:	4649      	mov	r1, r9
 8008674:	414b      	adcs	r3, r1
 8008676:	617b      	str	r3, [r7, #20]
 8008678:	f04f 0200 	mov.w	r2, #0
 800867c:	f04f 0300 	mov.w	r3, #0
 8008680:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008684:	4659      	mov	r1, fp
 8008686:	00cb      	lsls	r3, r1, #3
 8008688:	4651      	mov	r1, sl
 800868a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800868e:	4651      	mov	r1, sl
 8008690:	00ca      	lsls	r2, r1, #3
 8008692:	4610      	mov	r0, r2
 8008694:	4619      	mov	r1, r3
 8008696:	4603      	mov	r3, r0
 8008698:	4642      	mov	r2, r8
 800869a:	189b      	adds	r3, r3, r2
 800869c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80086a0:	464b      	mov	r3, r9
 80086a2:	460a      	mov	r2, r1
 80086a4:	eb42 0303 	adc.w	r3, r2, r3
 80086a8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80086ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80086b0:	685b      	ldr	r3, [r3, #4]
 80086b2:	2200      	movs	r2, #0
 80086b4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80086b6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80086b8:	f04f 0200 	mov.w	r2, #0
 80086bc:	f04f 0300 	mov.w	r3, #0
 80086c0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80086c4:	4649      	mov	r1, r9
 80086c6:	008b      	lsls	r3, r1, #2
 80086c8:	4641      	mov	r1, r8
 80086ca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80086ce:	4641      	mov	r1, r8
 80086d0:	008a      	lsls	r2, r1, #2
 80086d2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80086d6:	f7f8 faf7 	bl	8000cc8 <__aeabi_uldivmod>
 80086da:	4602      	mov	r2, r0
 80086dc:	460b      	mov	r3, r1
 80086de:	4611      	mov	r1, r2
 80086e0:	4b38      	ldr	r3, [pc, #224]	@ (80087c4 <UART_SetConfig+0x4e4>)
 80086e2:	fba3 2301 	umull	r2, r3, r3, r1
 80086e6:	095b      	lsrs	r3, r3, #5
 80086e8:	2264      	movs	r2, #100	@ 0x64
 80086ea:	fb02 f303 	mul.w	r3, r2, r3
 80086ee:	1acb      	subs	r3, r1, r3
 80086f0:	011b      	lsls	r3, r3, #4
 80086f2:	3332      	adds	r3, #50	@ 0x32
 80086f4:	4a33      	ldr	r2, [pc, #204]	@ (80087c4 <UART_SetConfig+0x4e4>)
 80086f6:	fba2 2303 	umull	r2, r3, r2, r3
 80086fa:	095b      	lsrs	r3, r3, #5
 80086fc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008700:	441c      	add	r4, r3
 8008702:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008706:	2200      	movs	r2, #0
 8008708:	673b      	str	r3, [r7, #112]	@ 0x70
 800870a:	677a      	str	r2, [r7, #116]	@ 0x74
 800870c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8008710:	4642      	mov	r2, r8
 8008712:	464b      	mov	r3, r9
 8008714:	1891      	adds	r1, r2, r2
 8008716:	60b9      	str	r1, [r7, #8]
 8008718:	415b      	adcs	r3, r3
 800871a:	60fb      	str	r3, [r7, #12]
 800871c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008720:	4641      	mov	r1, r8
 8008722:	1851      	adds	r1, r2, r1
 8008724:	6039      	str	r1, [r7, #0]
 8008726:	4649      	mov	r1, r9
 8008728:	414b      	adcs	r3, r1
 800872a:	607b      	str	r3, [r7, #4]
 800872c:	f04f 0200 	mov.w	r2, #0
 8008730:	f04f 0300 	mov.w	r3, #0
 8008734:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008738:	4659      	mov	r1, fp
 800873a:	00cb      	lsls	r3, r1, #3
 800873c:	4651      	mov	r1, sl
 800873e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008742:	4651      	mov	r1, sl
 8008744:	00ca      	lsls	r2, r1, #3
 8008746:	4610      	mov	r0, r2
 8008748:	4619      	mov	r1, r3
 800874a:	4603      	mov	r3, r0
 800874c:	4642      	mov	r2, r8
 800874e:	189b      	adds	r3, r3, r2
 8008750:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008752:	464b      	mov	r3, r9
 8008754:	460a      	mov	r2, r1
 8008756:	eb42 0303 	adc.w	r3, r2, r3
 800875a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800875c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008760:	685b      	ldr	r3, [r3, #4]
 8008762:	2200      	movs	r2, #0
 8008764:	663b      	str	r3, [r7, #96]	@ 0x60
 8008766:	667a      	str	r2, [r7, #100]	@ 0x64
 8008768:	f04f 0200 	mov.w	r2, #0
 800876c:	f04f 0300 	mov.w	r3, #0
 8008770:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8008774:	4649      	mov	r1, r9
 8008776:	008b      	lsls	r3, r1, #2
 8008778:	4641      	mov	r1, r8
 800877a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800877e:	4641      	mov	r1, r8
 8008780:	008a      	lsls	r2, r1, #2
 8008782:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8008786:	f7f8 fa9f 	bl	8000cc8 <__aeabi_uldivmod>
 800878a:	4602      	mov	r2, r0
 800878c:	460b      	mov	r3, r1
 800878e:	4b0d      	ldr	r3, [pc, #52]	@ (80087c4 <UART_SetConfig+0x4e4>)
 8008790:	fba3 1302 	umull	r1, r3, r3, r2
 8008794:	095b      	lsrs	r3, r3, #5
 8008796:	2164      	movs	r1, #100	@ 0x64
 8008798:	fb01 f303 	mul.w	r3, r1, r3
 800879c:	1ad3      	subs	r3, r2, r3
 800879e:	011b      	lsls	r3, r3, #4
 80087a0:	3332      	adds	r3, #50	@ 0x32
 80087a2:	4a08      	ldr	r2, [pc, #32]	@ (80087c4 <UART_SetConfig+0x4e4>)
 80087a4:	fba2 2303 	umull	r2, r3, r2, r3
 80087a8:	095b      	lsrs	r3, r3, #5
 80087aa:	f003 020f 	and.w	r2, r3, #15
 80087ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	4422      	add	r2, r4
 80087b6:	609a      	str	r2, [r3, #8]
}
 80087b8:	bf00      	nop
 80087ba:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80087be:	46bd      	mov	sp, r7
 80087c0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80087c4:	51eb851f 	.word	0x51eb851f

080087c8 <DEV_SPI_WRite>:
	HAL_Delay(xms);
}


void DEV_SPI_WRite(UBYTE _dat)
{
 80087c8:	b580      	push	{r7, lr}
 80087ca:	b082      	sub	sp, #8
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	4603      	mov	r3, r0
 80087d0:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&hspi2, (uint8_t *)&_dat, 1, 500);
 80087d2:	1df9      	adds	r1, r7, #7
 80087d4:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80087d8:	2201      	movs	r2, #1
 80087da:	4803      	ldr	r0, [pc, #12]	@ (80087e8 <DEV_SPI_WRite+0x20>)
 80087dc:	f7fe fa41 	bl	8006c62 <HAL_SPI_Transmit>
}
 80087e0:	bf00      	nop
 80087e2:	3708      	adds	r7, #8
 80087e4:	46bd      	mov	sp, r7
 80087e6:	bd80      	pop	{r7, pc}
 80087e8:	20000338 	.word	0x20000338

080087ec <DEV_Module_Init>:

int DEV_Module_Init(void)
{
 80087ec:	b580      	push	{r7, lr}
 80087ee:	af00      	add	r7, sp, #0
    DEV_Digital_Write(DEV_DC_PIN, 1);
 80087f0:	2201      	movs	r2, #1
 80087f2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80087f6:	480b      	ldr	r0, [pc, #44]	@ (8008824 <DEV_Module_Init+0x38>)
 80087f8:	f7fb fd60 	bl	80042bc <HAL_GPIO_WritePin>
    DEV_Digital_Write(DEV_CS_PIN, 1);
 80087fc:	2201      	movs	r2, #1
 80087fe:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8008802:	4808      	ldr	r0, [pc, #32]	@ (8008824 <DEV_Module_Init+0x38>)
 8008804:	f7fb fd5a 	bl	80042bc <HAL_GPIO_WritePin>
    DEV_Digital_Write(DEV_RST_PIN, 1);
 8008808:	2201      	movs	r2, #1
 800880a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800880e:	4805      	ldr	r0, [pc, #20]	@ (8008824 <DEV_Module_Init+0x38>)
 8008810:	f7fb fd54 	bl	80042bc <HAL_GPIO_WritePin>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8008814:	2104      	movs	r1, #4
 8008816:	4804      	ldr	r0, [pc, #16]	@ (8008828 <DEV_Module_Init+0x3c>)
 8008818:	f7fe fd8c 	bl	8007334 <HAL_TIM_PWM_Start>
		return 0;
 800881c:	2300      	movs	r3, #0
}
 800881e:	4618      	mov	r0, r3
 8008820:	bd80      	pop	{r7, pc}
 8008822:	bf00      	nop
 8008824:	40020400 	.word	0x40020400
 8008828:	20000394 	.word	0x20000394

0800882c <Paint_NewImage>:
    width   :   The width of the picture
    Height  :   The height of the picture
    Color   :   Whether the picture is inverted
******************************************************************************/
void Paint_NewImage(UWORD Width, UWORD Height, UWORD Rotate, UWORD Color)
{
 800882c:	b590      	push	{r4, r7, lr}
 800882e:	b083      	sub	sp, #12
 8008830:	af00      	add	r7, sp, #0
 8008832:	4604      	mov	r4, r0
 8008834:	4608      	mov	r0, r1
 8008836:	4611      	mov	r1, r2
 8008838:	461a      	mov	r2, r3
 800883a:	4623      	mov	r3, r4
 800883c:	80fb      	strh	r3, [r7, #6]
 800883e:	4603      	mov	r3, r0
 8008840:	80bb      	strh	r3, [r7, #4]
 8008842:	460b      	mov	r3, r1
 8008844:	807b      	strh	r3, [r7, #2]
 8008846:	4613      	mov	r3, r2
 8008848:	803b      	strh	r3, [r7, #0]
    Paint.WidthMemory = Width;
 800884a:	4a1c      	ldr	r2, [pc, #112]	@ (80088bc <Paint_NewImage+0x90>)
 800884c:	88fb      	ldrh	r3, [r7, #6]
 800884e:	8113      	strh	r3, [r2, #8]
    Paint.HeightMemory = Height;
 8008850:	4a1a      	ldr	r2, [pc, #104]	@ (80088bc <Paint_NewImage+0x90>)
 8008852:	88bb      	ldrh	r3, [r7, #4]
 8008854:	8153      	strh	r3, [r2, #10]
    Paint.Color = Color;    
 8008856:	4a19      	ldr	r2, [pc, #100]	@ (80088bc <Paint_NewImage+0x90>)
 8008858:	883b      	ldrh	r3, [r7, #0]
 800885a:	8193      	strh	r3, [r2, #12]
    Paint.WidthByte = Width;
 800885c:	4a17      	ldr	r2, [pc, #92]	@ (80088bc <Paint_NewImage+0x90>)
 800885e:	88fb      	ldrh	r3, [r7, #6]
 8008860:	8253      	strh	r3, [r2, #18]
    Paint.HeightByte = Height;    
 8008862:	4a16      	ldr	r2, [pc, #88]	@ (80088bc <Paint_NewImage+0x90>)
 8008864:	88bb      	ldrh	r3, [r7, #4]
 8008866:	8293      	strh	r3, [r2, #20]
    printf("WidthByte = %d, HeightByte = %d\r\n", Paint.WidthByte, Paint.HeightByte);
 8008868:	4b14      	ldr	r3, [pc, #80]	@ (80088bc <Paint_NewImage+0x90>)
 800886a:	8a5b      	ldrh	r3, [r3, #18]
 800886c:	b29b      	uxth	r3, r3
 800886e:	4619      	mov	r1, r3
 8008870:	4b12      	ldr	r3, [pc, #72]	@ (80088bc <Paint_NewImage+0x90>)
 8008872:	8a9b      	ldrh	r3, [r3, #20]
 8008874:	b29b      	uxth	r3, r3
 8008876:	461a      	mov	r2, r3
 8008878:	4811      	ldr	r0, [pc, #68]	@ (80088c0 <Paint_NewImage+0x94>)
 800887a:	f001 fc67 	bl	800a14c <iprintf>
   
    Paint.Rotate = Rotate;
 800887e:	4a0f      	ldr	r2, [pc, #60]	@ (80088bc <Paint_NewImage+0x90>)
 8008880:	887b      	ldrh	r3, [r7, #2]
 8008882:	81d3      	strh	r3, [r2, #14]
    Paint.Mirror = MIRROR_NONE;
 8008884:	4b0d      	ldr	r3, [pc, #52]	@ (80088bc <Paint_NewImage+0x90>)
 8008886:	2200      	movs	r2, #0
 8008888:	821a      	strh	r2, [r3, #16]
    
    if(Rotate == ROTATE_0 || Rotate == ROTATE_180) {
 800888a:	887b      	ldrh	r3, [r7, #2]
 800888c:	2b00      	cmp	r3, #0
 800888e:	d002      	beq.n	8008896 <Paint_NewImage+0x6a>
 8008890:	887b      	ldrh	r3, [r7, #2]
 8008892:	2bb4      	cmp	r3, #180	@ 0xb4
 8008894:	d106      	bne.n	80088a4 <Paint_NewImage+0x78>
        Paint.Width = Width;
 8008896:	4a09      	ldr	r2, [pc, #36]	@ (80088bc <Paint_NewImage+0x90>)
 8008898:	88fb      	ldrh	r3, [r7, #6]
 800889a:	8093      	strh	r3, [r2, #4]
        Paint.Height = Height;
 800889c:	4a07      	ldr	r2, [pc, #28]	@ (80088bc <Paint_NewImage+0x90>)
 800889e:	88bb      	ldrh	r3, [r7, #4]
 80088a0:	80d3      	strh	r3, [r2, #6]
 80088a2:	e006      	b.n	80088b2 <Paint_NewImage+0x86>
    } else {
        Paint.Width = Height;
 80088a4:	4a05      	ldr	r2, [pc, #20]	@ (80088bc <Paint_NewImage+0x90>)
 80088a6:	88bb      	ldrh	r3, [r7, #4]
 80088a8:	8093      	strh	r3, [r2, #4]
        Paint.Height = Width;
 80088aa:	4a04      	ldr	r2, [pc, #16]	@ (80088bc <Paint_NewImage+0x90>)
 80088ac:	88fb      	ldrh	r3, [r7, #6]
 80088ae:	80d3      	strh	r3, [r2, #6]
    }
}
 80088b0:	bf00      	nop
 80088b2:	bf00      	nop
 80088b4:	370c      	adds	r7, #12
 80088b6:	46bd      	mov	sp, r7
 80088b8:	bd90      	pop	{r4, r7, pc}
 80088ba:	bf00      	nop
 80088bc:	200005a8 	.word	0x200005a8
 80088c0:	0800daa8 	.word	0x0800daa8

080088c4 <Paint_SetClearFuntion>:
function:	Select Clear Funtion
parameter:
      Clear :   Pointer to Clear funtion 
******************************************************************************/
void Paint_SetClearFuntion(void (*Clear)(UWORD))
{
 80088c4:	b480      	push	{r7}
 80088c6:	b083      	sub	sp, #12
 80088c8:	af00      	add	r7, sp, #0
 80088ca:	6078      	str	r0, [r7, #4]
  CLEAR=Clear;
 80088cc:	4a04      	ldr	r2, [pc, #16]	@ (80088e0 <Paint_SetClearFuntion+0x1c>)
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	6013      	str	r3, [r2, #0]
}
 80088d2:	bf00      	nop
 80088d4:	370c      	adds	r7, #12
 80088d6:	46bd      	mov	sp, r7
 80088d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088dc:	4770      	bx	lr
 80088de:	bf00      	nop
 80088e0:	200005c4 	.word	0x200005c4

080088e4 <Paint_SetDisplayFuntion>:
function:	Select DisplayF untion
parameter:
      Display :   Pointer to display funtion 
******************************************************************************/
void Paint_SetDisplayFuntion(void (*Display)(UWORD,UWORD,UWORD))
{
 80088e4:	b480      	push	{r7}
 80088e6:	b083      	sub	sp, #12
 80088e8:	af00      	add	r7, sp, #0
 80088ea:	6078      	str	r0, [r7, #4]
  DISPLAY=Display;
 80088ec:	4a04      	ldr	r2, [pc, #16]	@ (8008900 <Paint_SetDisplayFuntion+0x1c>)
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	6013      	str	r3, [r2, #0]
}
 80088f2:	bf00      	nop
 80088f4:	370c      	adds	r7, #12
 80088f6:	46bd      	mov	sp, r7
 80088f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088fc:	4770      	bx	lr
 80088fe:	bf00      	nop
 8008900:	200005c0 	.word	0x200005c0

08008904 <Paint_SetRotate>:
function:	Select Image Rotate
parameter:
    Rotate   :   0,90,180,270
******************************************************************************/
void Paint_SetRotate(UWORD Rotate)
{
 8008904:	b580      	push	{r7, lr}
 8008906:	b082      	sub	sp, #8
 8008908:	af00      	add	r7, sp, #0
 800890a:	4603      	mov	r3, r0
 800890c:	80fb      	strh	r3, [r7, #6]
    if(Rotate == ROTATE_0 || Rotate == ROTATE_90 || Rotate == ROTATE_180 || Rotate == ROTATE_270) {
 800890e:	88fb      	ldrh	r3, [r7, #6]
 8008910:	2b00      	cmp	r3, #0
 8008912:	d009      	beq.n	8008928 <Paint_SetRotate+0x24>
 8008914:	88fb      	ldrh	r3, [r7, #6]
 8008916:	2b5a      	cmp	r3, #90	@ 0x5a
 8008918:	d006      	beq.n	8008928 <Paint_SetRotate+0x24>
 800891a:	88fb      	ldrh	r3, [r7, #6]
 800891c:	2bb4      	cmp	r3, #180	@ 0xb4
 800891e:	d003      	beq.n	8008928 <Paint_SetRotate+0x24>
 8008920:	88fb      	ldrh	r3, [r7, #6]
 8008922:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 8008926:	d108      	bne.n	800893a <Paint_SetRotate+0x36>
        Debug("Set image Rotate %d\r\n", Rotate);
 8008928:	88fb      	ldrh	r3, [r7, #6]
 800892a:	4619      	mov	r1, r3
 800892c:	4807      	ldr	r0, [pc, #28]	@ (800894c <Paint_SetRotate+0x48>)
 800892e:	f001 fc0d 	bl	800a14c <iprintf>
        Paint.Rotate = Rotate;
 8008932:	4a07      	ldr	r2, [pc, #28]	@ (8008950 <Paint_SetRotate+0x4c>)
 8008934:	88fb      	ldrh	r3, [r7, #6]
 8008936:	81d3      	strh	r3, [r2, #14]
 8008938:	e003      	b.n	8008942 <Paint_SetRotate+0x3e>
    } else {
        Debug("rotate = 0, 90, 180, 270\r\n");
 800893a:	4806      	ldr	r0, [pc, #24]	@ (8008954 <Paint_SetRotate+0x50>)
 800893c:	f001 fc6e 	bl	800a21c <puts>
      //  exit(0);
    }
}
 8008940:	bf00      	nop
 8008942:	bf00      	nop
 8008944:	3708      	adds	r7, #8
 8008946:	46bd      	mov	sp, r7
 8008948:	bd80      	pop	{r7, pc}
 800894a:	bf00      	nop
 800894c:	0800dacc 	.word	0x0800dacc
 8008950:	200005a8 	.word	0x200005a8
 8008954:	0800daec 	.word	0x0800daec

08008958 <Paint_SetPixel>:
    Xpoint  :   At point X
    Ypoint  :   At point Y
    Color   :   Painted colors
******************************************************************************/
void Paint_SetPixel(UWORD Xpoint, UWORD Ypoint, UWORD Color)
{
 8008958:	b580      	push	{r7, lr}
 800895a:	b084      	sub	sp, #16
 800895c:	af00      	add	r7, sp, #0
 800895e:	4603      	mov	r3, r0
 8008960:	80fb      	strh	r3, [r7, #6]
 8008962:	460b      	mov	r3, r1
 8008964:	80bb      	strh	r3, [r7, #4]
 8008966:	4613      	mov	r3, r2
 8008968:	807b      	strh	r3, [r7, #2]
    if(Xpoint > Paint.Width || Ypoint > Paint.Height){
 800896a:	4b50      	ldr	r3, [pc, #320]	@ (8008aac <Paint_SetPixel+0x154>)
 800896c:	889b      	ldrh	r3, [r3, #4]
 800896e:	b29b      	uxth	r3, r3
 8008970:	88fa      	ldrh	r2, [r7, #6]
 8008972:	429a      	cmp	r2, r3
 8008974:	d805      	bhi.n	8008982 <Paint_SetPixel+0x2a>
 8008976:	4b4d      	ldr	r3, [pc, #308]	@ (8008aac <Paint_SetPixel+0x154>)
 8008978:	88db      	ldrh	r3, [r3, #6]
 800897a:	b29b      	uxth	r3, r3
 800897c:	88ba      	ldrh	r2, [r7, #4]
 800897e:	429a      	cmp	r2, r3
 8008980:	d903      	bls.n	800898a <Paint_SetPixel+0x32>
        Debug("Exceeding display boundaries\r\n");
 8008982:	484b      	ldr	r0, [pc, #300]	@ (8008ab0 <Paint_SetPixel+0x158>)
 8008984:	f001 fc4a 	bl	800a21c <puts>
        return;
 8008988:	e08c      	b.n	8008aa4 <Paint_SetPixel+0x14c>
    }      
    UWORD X, Y;

    switch(Paint.Rotate) {
 800898a:	4b48      	ldr	r3, [pc, #288]	@ (8008aac <Paint_SetPixel+0x154>)
 800898c:	89db      	ldrh	r3, [r3, #14]
 800898e:	b29b      	uxth	r3, r3
 8008990:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 8008994:	d02d      	beq.n	80089f2 <Paint_SetPixel+0x9a>
 8008996:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 800899a:	f300 8080 	bgt.w	8008a9e <Paint_SetPixel+0x146>
 800899e:	2bb4      	cmp	r3, #180	@ 0xb4
 80089a0:	d016      	beq.n	80089d0 <Paint_SetPixel+0x78>
 80089a2:	2bb4      	cmp	r3, #180	@ 0xb4
 80089a4:	dc7b      	bgt.n	8008a9e <Paint_SetPixel+0x146>
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d002      	beq.n	80089b0 <Paint_SetPixel+0x58>
 80089aa:	2b5a      	cmp	r3, #90	@ 0x5a
 80089ac:	d005      	beq.n	80089ba <Paint_SetPixel+0x62>
        X = Ypoint;
        Y = Paint.HeightMemory - Xpoint - 1;
        break;

    default:
        return;
 80089ae:	e076      	b.n	8008a9e <Paint_SetPixel+0x146>
        X = Xpoint;
 80089b0:	88fb      	ldrh	r3, [r7, #6]
 80089b2:	81fb      	strh	r3, [r7, #14]
        Y = Ypoint;  
 80089b4:	88bb      	ldrh	r3, [r7, #4]
 80089b6:	81bb      	strh	r3, [r7, #12]
        break;
 80089b8:	e026      	b.n	8008a08 <Paint_SetPixel+0xb0>
        X = Paint.WidthMemory - Ypoint - 1;
 80089ba:	4b3c      	ldr	r3, [pc, #240]	@ (8008aac <Paint_SetPixel+0x154>)
 80089bc:	891b      	ldrh	r3, [r3, #8]
 80089be:	b29a      	uxth	r2, r3
 80089c0:	88bb      	ldrh	r3, [r7, #4]
 80089c2:	1ad3      	subs	r3, r2, r3
 80089c4:	b29b      	uxth	r3, r3
 80089c6:	3b01      	subs	r3, #1
 80089c8:	81fb      	strh	r3, [r7, #14]
        Y = Xpoint;
 80089ca:	88fb      	ldrh	r3, [r7, #6]
 80089cc:	81bb      	strh	r3, [r7, #12]
        break;
 80089ce:	e01b      	b.n	8008a08 <Paint_SetPixel+0xb0>
        X = Paint.WidthMemory - Xpoint - 1;
 80089d0:	4b36      	ldr	r3, [pc, #216]	@ (8008aac <Paint_SetPixel+0x154>)
 80089d2:	891b      	ldrh	r3, [r3, #8]
 80089d4:	b29a      	uxth	r2, r3
 80089d6:	88fb      	ldrh	r3, [r7, #6]
 80089d8:	1ad3      	subs	r3, r2, r3
 80089da:	b29b      	uxth	r3, r3
 80089dc:	3b01      	subs	r3, #1
 80089de:	81fb      	strh	r3, [r7, #14]
        Y = Paint.HeightMemory - Ypoint - 1;
 80089e0:	4b32      	ldr	r3, [pc, #200]	@ (8008aac <Paint_SetPixel+0x154>)
 80089e2:	895b      	ldrh	r3, [r3, #10]
 80089e4:	b29a      	uxth	r2, r3
 80089e6:	88bb      	ldrh	r3, [r7, #4]
 80089e8:	1ad3      	subs	r3, r2, r3
 80089ea:	b29b      	uxth	r3, r3
 80089ec:	3b01      	subs	r3, #1
 80089ee:	81bb      	strh	r3, [r7, #12]
        break;
 80089f0:	e00a      	b.n	8008a08 <Paint_SetPixel+0xb0>
        X = Ypoint;
 80089f2:	88bb      	ldrh	r3, [r7, #4]
 80089f4:	81fb      	strh	r3, [r7, #14]
        Y = Paint.HeightMemory - Xpoint - 1;
 80089f6:	4b2d      	ldr	r3, [pc, #180]	@ (8008aac <Paint_SetPixel+0x154>)
 80089f8:	895b      	ldrh	r3, [r3, #10]
 80089fa:	b29a      	uxth	r2, r3
 80089fc:	88fb      	ldrh	r3, [r7, #6]
 80089fe:	1ad3      	subs	r3, r2, r3
 8008a00:	b29b      	uxth	r3, r3
 8008a02:	3b01      	subs	r3, #1
 8008a04:	81bb      	strh	r3, [r7, #12]
        break;
 8008a06:	bf00      	nop
    }
    
    switch(Paint.Mirror) {
 8008a08:	4b28      	ldr	r3, [pc, #160]	@ (8008aac <Paint_SetPixel+0x154>)
 8008a0a:	8a1b      	ldrh	r3, [r3, #16]
 8008a0c:	b29b      	uxth	r3, r3
 8008a0e:	2b03      	cmp	r3, #3
 8008a10:	d847      	bhi.n	8008aa2 <Paint_SetPixel+0x14a>
 8008a12:	a201      	add	r2, pc, #4	@ (adr r2, 8008a18 <Paint_SetPixel+0xc0>)
 8008a14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a18:	08008a6f 	.word	0x08008a6f
 8008a1c:	08008a29 	.word	0x08008a29
 8008a20:	08008a3b 	.word	0x08008a3b
 8008a24:	08008a4d 	.word	0x08008a4d
    case MIRROR_NONE:
        break;
    case MIRROR_HORIZONTAL:
        X = Paint.WidthMemory - X - 1;
 8008a28:	4b20      	ldr	r3, [pc, #128]	@ (8008aac <Paint_SetPixel+0x154>)
 8008a2a:	891b      	ldrh	r3, [r3, #8]
 8008a2c:	b29a      	uxth	r2, r3
 8008a2e:	89fb      	ldrh	r3, [r7, #14]
 8008a30:	1ad3      	subs	r3, r2, r3
 8008a32:	b29b      	uxth	r3, r3
 8008a34:	3b01      	subs	r3, #1
 8008a36:	81fb      	strh	r3, [r7, #14]
        break;
 8008a38:	e01a      	b.n	8008a70 <Paint_SetPixel+0x118>
    case MIRROR_VERTICAL:
        Y = Paint.HeightMemory - Y - 1;
 8008a3a:	4b1c      	ldr	r3, [pc, #112]	@ (8008aac <Paint_SetPixel+0x154>)
 8008a3c:	895b      	ldrh	r3, [r3, #10]
 8008a3e:	b29a      	uxth	r2, r3
 8008a40:	89bb      	ldrh	r3, [r7, #12]
 8008a42:	1ad3      	subs	r3, r2, r3
 8008a44:	b29b      	uxth	r3, r3
 8008a46:	3b01      	subs	r3, #1
 8008a48:	81bb      	strh	r3, [r7, #12]
        break;
 8008a4a:	e011      	b.n	8008a70 <Paint_SetPixel+0x118>
    case MIRROR_ORIGIN:
        X = Paint.WidthMemory - X - 1;
 8008a4c:	4b17      	ldr	r3, [pc, #92]	@ (8008aac <Paint_SetPixel+0x154>)
 8008a4e:	891b      	ldrh	r3, [r3, #8]
 8008a50:	b29a      	uxth	r2, r3
 8008a52:	89fb      	ldrh	r3, [r7, #14]
 8008a54:	1ad3      	subs	r3, r2, r3
 8008a56:	b29b      	uxth	r3, r3
 8008a58:	3b01      	subs	r3, #1
 8008a5a:	81fb      	strh	r3, [r7, #14]
        Y = Paint.HeightMemory - Y - 1;
 8008a5c:	4b13      	ldr	r3, [pc, #76]	@ (8008aac <Paint_SetPixel+0x154>)
 8008a5e:	895b      	ldrh	r3, [r3, #10]
 8008a60:	b29a      	uxth	r2, r3
 8008a62:	89bb      	ldrh	r3, [r7, #12]
 8008a64:	1ad3      	subs	r3, r2, r3
 8008a66:	b29b      	uxth	r3, r3
 8008a68:	3b01      	subs	r3, #1
 8008a6a:	81bb      	strh	r3, [r7, #12]
        break;
 8008a6c:	e000      	b.n	8008a70 <Paint_SetPixel+0x118>
        break;
 8008a6e:	bf00      	nop
    default:
        return;
    }

    // printf("x = %d, y = %d\r\n", X, Y);
    if(X > Paint.WidthMemory || Y > Paint.HeightMemory){
 8008a70:	4b0e      	ldr	r3, [pc, #56]	@ (8008aac <Paint_SetPixel+0x154>)
 8008a72:	891b      	ldrh	r3, [r3, #8]
 8008a74:	b29b      	uxth	r3, r3
 8008a76:	89fa      	ldrh	r2, [r7, #14]
 8008a78:	429a      	cmp	r2, r3
 8008a7a:	d805      	bhi.n	8008a88 <Paint_SetPixel+0x130>
 8008a7c:	4b0b      	ldr	r3, [pc, #44]	@ (8008aac <Paint_SetPixel+0x154>)
 8008a7e:	895b      	ldrh	r3, [r3, #10]
 8008a80:	b29b      	uxth	r3, r3
 8008a82:	89ba      	ldrh	r2, [r7, #12]
 8008a84:	429a      	cmp	r2, r3
 8008a86:	d903      	bls.n	8008a90 <Paint_SetPixel+0x138>
        Debug("Exceeding display boundaries\r\n");
 8008a88:	4809      	ldr	r0, [pc, #36]	@ (8008ab0 <Paint_SetPixel+0x158>)
 8008a8a:	f001 fbc7 	bl	800a21c <puts>
        return;
 8008a8e:	e009      	b.n	8008aa4 <Paint_SetPixel+0x14c>
    }
    
   // UDOUBLE Addr = X / 8 + Y * Paint.WidthByte;
		DISPLAY(X,Y, Color);
 8008a90:	4b08      	ldr	r3, [pc, #32]	@ (8008ab4 <Paint_SetPixel+0x15c>)
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	887a      	ldrh	r2, [r7, #2]
 8008a96:	89b9      	ldrh	r1, [r7, #12]
 8008a98:	89f8      	ldrh	r0, [r7, #14]
 8008a9a:	4798      	blx	r3
 8008a9c:	e002      	b.n	8008aa4 <Paint_SetPixel+0x14c>
        return;
 8008a9e:	bf00      	nop
 8008aa0:	e000      	b.n	8008aa4 <Paint_SetPixel+0x14c>
        return;
 8008aa2:	bf00      	nop
}
 8008aa4:	3710      	adds	r7, #16
 8008aa6:	46bd      	mov	sp, r7
 8008aa8:	bd80      	pop	{r7, pc}
 8008aaa:	bf00      	nop
 8008aac:	200005a8 	.word	0x200005a8
 8008ab0:	0800dba8 	.word	0x0800dba8
 8008ab4:	200005c0 	.word	0x200005c0

08008ab8 <Paint_Clear>:
function:	Clear the color of the picture
parameter:
    Color   :   Painted colors
******************************************************************************/
void Paint_Clear(UWORD Color)
{	
 8008ab8:	b580      	push	{r7, lr}
 8008aba:	b082      	sub	sp, #8
 8008abc:	af00      	add	r7, sp, #0
 8008abe:	4603      	mov	r3, r0
 8008ac0:	80fb      	strh	r3, [r7, #6]
	CLEAR(Color);
 8008ac2:	4b04      	ldr	r3, [pc, #16]	@ (8008ad4 <Paint_Clear+0x1c>)
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	88fa      	ldrh	r2, [r7, #6]
 8008ac8:	4610      	mov	r0, r2
 8008aca:	4798      	blx	r3
}
 8008acc:	bf00      	nop
 8008ace:	3708      	adds	r7, #8
 8008ad0:	46bd      	mov	sp, r7
 8008ad2:	bd80      	pop	{r7, pc}
 8008ad4:	200005c4 	.word	0x200005c4

08008ad8 <Paint_DrawChar>:
    Color_Background : Select the background color of the English character
    Color_Foreground : Select the foreground color of the English character
******************************************************************************/
void Paint_DrawChar(UWORD Xpoint, UWORD Ypoint, const char Acsii_Char,
                    sFONT* Font, UWORD Color_Background, UWORD Color_Foreground)
{
 8008ad8:	b580      	push	{r7, lr}
 8008ada:	b088      	sub	sp, #32
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	607b      	str	r3, [r7, #4]
 8008ae0:	4603      	mov	r3, r0
 8008ae2:	81fb      	strh	r3, [r7, #14]
 8008ae4:	460b      	mov	r3, r1
 8008ae6:	81bb      	strh	r3, [r7, #12]
 8008ae8:	4613      	mov	r3, r2
 8008aea:	72fb      	strb	r3, [r7, #11]
    UWORD Page, Column;

    if (Xpoint > Paint.Width || Ypoint > Paint.Height) {
 8008aec:	4b4e      	ldr	r3, [pc, #312]	@ (8008c28 <Paint_DrawChar+0x150>)
 8008aee:	889b      	ldrh	r3, [r3, #4]
 8008af0:	b29b      	uxth	r3, r3
 8008af2:	89fa      	ldrh	r2, [r7, #14]
 8008af4:	429a      	cmp	r2, r3
 8008af6:	d805      	bhi.n	8008b04 <Paint_DrawChar+0x2c>
 8008af8:	4b4b      	ldr	r3, [pc, #300]	@ (8008c28 <Paint_DrawChar+0x150>)
 8008afa:	88db      	ldrh	r3, [r3, #6]
 8008afc:	b29b      	uxth	r3, r3
 8008afe:	89ba      	ldrh	r2, [r7, #12]
 8008b00:	429a      	cmp	r2, r3
 8008b02:	d903      	bls.n	8008b0c <Paint_DrawChar+0x34>
        Debug("Paint_DrawChar Input exceeds the normal display range\r\n");
 8008b04:	4849      	ldr	r0, [pc, #292]	@ (8008c2c <Paint_DrawChar+0x154>)
 8008b06:	f001 fb89 	bl	800a21c <puts>
        return;
 8008b0a:	e089      	b.n	8008c20 <Paint_DrawChar+0x148>
    }

    uint32_t Char_Offset = (Acsii_Char - ' ') * Font->Height * (Font->Width / 8 + (Font->Width % 8 ? 1 : 0));
 8008b0c:	7afb      	ldrb	r3, [r7, #11]
 8008b0e:	3b20      	subs	r3, #32
 8008b10:	687a      	ldr	r2, [r7, #4]
 8008b12:	88d2      	ldrh	r2, [r2, #6]
 8008b14:	fb02 f303 	mul.w	r3, r2, r3
 8008b18:	687a      	ldr	r2, [r7, #4]
 8008b1a:	8892      	ldrh	r2, [r2, #4]
 8008b1c:	08d2      	lsrs	r2, r2, #3
 8008b1e:	b292      	uxth	r2, r2
 8008b20:	4611      	mov	r1, r2
 8008b22:	687a      	ldr	r2, [r7, #4]
 8008b24:	8892      	ldrh	r2, [r2, #4]
 8008b26:	f002 0207 	and.w	r2, r2, #7
 8008b2a:	b292      	uxth	r2, r2
 8008b2c:	2a00      	cmp	r2, #0
 8008b2e:	bf14      	ite	ne
 8008b30:	2201      	movne	r2, #1
 8008b32:	2200      	moveq	r2, #0
 8008b34:	b2d2      	uxtb	r2, r2
 8008b36:	440a      	add	r2, r1
 8008b38:	fb02 f303 	mul.w	r3, r2, r3
 8008b3c:	617b      	str	r3, [r7, #20]
    const unsigned char *ptr = &Font->table[Char_Offset];
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	681a      	ldr	r2, [r3, #0]
 8008b42:	697b      	ldr	r3, [r7, #20]
 8008b44:	4413      	add	r3, r2
 8008b46:	61bb      	str	r3, [r7, #24]

    for (Page = 0; Page < Font->Height; Page ++ ) {
 8008b48:	2300      	movs	r3, #0
 8008b4a:	83fb      	strh	r3, [r7, #30]
 8008b4c:	e063      	b.n	8008c16 <Paint_DrawChar+0x13e>
        for (Column = 0; Column < Font->Width; Column ++ ) {
 8008b4e:	2300      	movs	r3, #0
 8008b50:	83bb      	strh	r3, [r7, #28]
 8008b52:	e04e      	b.n	8008bf2 <Paint_DrawChar+0x11a>

            //To determine whether the font background color and screen background color is consistent
            if (FONT_BACKGROUND == Color_Background) { //this process is to speed up the scan
 8008b54:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8008b56:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008b5a:	4293      	cmp	r3, r2
 8008b5c:	d118      	bne.n	8008b90 <Paint_DrawChar+0xb8>
                if (*ptr & (0x80 >> (Column % 8)))
 8008b5e:	69bb      	ldr	r3, [r7, #24]
 8008b60:	781b      	ldrb	r3, [r3, #0]
 8008b62:	4619      	mov	r1, r3
 8008b64:	8bbb      	ldrh	r3, [r7, #28]
 8008b66:	f003 0307 	and.w	r3, r3, #7
 8008b6a:	2280      	movs	r2, #128	@ 0x80
 8008b6c:	fa42 f303 	asr.w	r3, r2, r3
 8008b70:	400b      	ands	r3, r1
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d031      	beq.n	8008bda <Paint_DrawChar+0x102>
                    Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Foreground);
 8008b76:	89fa      	ldrh	r2, [r7, #14]
 8008b78:	8bbb      	ldrh	r3, [r7, #28]
 8008b7a:	4413      	add	r3, r2
 8008b7c:	b298      	uxth	r0, r3
 8008b7e:	89ba      	ldrh	r2, [r7, #12]
 8008b80:	8bfb      	ldrh	r3, [r7, #30]
 8008b82:	4413      	add	r3, r2
 8008b84:	b29b      	uxth	r3, r3
 8008b86:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8008b88:	4619      	mov	r1, r3
 8008b8a:	f7ff fee5 	bl	8008958 <Paint_SetPixel>
 8008b8e:	e024      	b.n	8008bda <Paint_DrawChar+0x102>
                    // Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Foreground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
            } else {
                if (*ptr & (0x80 >> (Column % 8))) {
 8008b90:	69bb      	ldr	r3, [r7, #24]
 8008b92:	781b      	ldrb	r3, [r3, #0]
 8008b94:	4619      	mov	r1, r3
 8008b96:	8bbb      	ldrh	r3, [r7, #28]
 8008b98:	f003 0307 	and.w	r3, r3, #7
 8008b9c:	2280      	movs	r2, #128	@ 0x80
 8008b9e:	fa42 f303 	asr.w	r3, r2, r3
 8008ba2:	400b      	ands	r3, r1
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d00c      	beq.n	8008bc2 <Paint_DrawChar+0xea>
                    Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Foreground);
 8008ba8:	89fa      	ldrh	r2, [r7, #14]
 8008baa:	8bbb      	ldrh	r3, [r7, #28]
 8008bac:	4413      	add	r3, r2
 8008bae:	b298      	uxth	r0, r3
 8008bb0:	89ba      	ldrh	r2, [r7, #12]
 8008bb2:	8bfb      	ldrh	r3, [r7, #30]
 8008bb4:	4413      	add	r3, r2
 8008bb6:	b29b      	uxth	r3, r3
 8008bb8:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8008bba:	4619      	mov	r1, r3
 8008bbc:	f7ff fecc 	bl	8008958 <Paint_SetPixel>
 8008bc0:	e00b      	b.n	8008bda <Paint_DrawChar+0x102>
                    // Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Foreground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
                } else {
                    Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Background);
 8008bc2:	89fa      	ldrh	r2, [r7, #14]
 8008bc4:	8bbb      	ldrh	r3, [r7, #28]
 8008bc6:	4413      	add	r3, r2
 8008bc8:	b298      	uxth	r0, r3
 8008bca:	89ba      	ldrh	r2, [r7, #12]
 8008bcc:	8bfb      	ldrh	r3, [r7, #30]
 8008bce:	4413      	add	r3, r2
 8008bd0:	b29b      	uxth	r3, r3
 8008bd2:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8008bd4:	4619      	mov	r1, r3
 8008bd6:	f7ff febf 	bl	8008958 <Paint_SetPixel>
                    // Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Background, DOT_PIXEL_DFT, DOT_STYLE_DFT);
                }
            }
            //One pixel is 8 bits
            if (Column % 8 == 7)
 8008bda:	8bbb      	ldrh	r3, [r7, #28]
 8008bdc:	f003 0307 	and.w	r3, r3, #7
 8008be0:	b29b      	uxth	r3, r3
 8008be2:	2b07      	cmp	r3, #7
 8008be4:	d102      	bne.n	8008bec <Paint_DrawChar+0x114>
                ptr++;
 8008be6:	69bb      	ldr	r3, [r7, #24]
 8008be8:	3301      	adds	r3, #1
 8008bea:	61bb      	str	r3, [r7, #24]
        for (Column = 0; Column < Font->Width; Column ++ ) {
 8008bec:	8bbb      	ldrh	r3, [r7, #28]
 8008bee:	3301      	adds	r3, #1
 8008bf0:	83bb      	strh	r3, [r7, #28]
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	889b      	ldrh	r3, [r3, #4]
 8008bf6:	8bba      	ldrh	r2, [r7, #28]
 8008bf8:	429a      	cmp	r2, r3
 8008bfa:	d3ab      	bcc.n	8008b54 <Paint_DrawChar+0x7c>
        }// Write a line
        if (Font->Width % 8 != 0)
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	889b      	ldrh	r3, [r3, #4]
 8008c00:	f003 0307 	and.w	r3, r3, #7
 8008c04:	b29b      	uxth	r3, r3
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d002      	beq.n	8008c10 <Paint_DrawChar+0x138>
            ptr++;
 8008c0a:	69bb      	ldr	r3, [r7, #24]
 8008c0c:	3301      	adds	r3, #1
 8008c0e:	61bb      	str	r3, [r7, #24]
    for (Page = 0; Page < Font->Height; Page ++ ) {
 8008c10:	8bfb      	ldrh	r3, [r7, #30]
 8008c12:	3301      	adds	r3, #1
 8008c14:	83fb      	strh	r3, [r7, #30]
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	88db      	ldrh	r3, [r3, #6]
 8008c1a:	8bfa      	ldrh	r2, [r7, #30]
 8008c1c:	429a      	cmp	r2, r3
 8008c1e:	d396      	bcc.n	8008b4e <Paint_DrawChar+0x76>
    }// Write all
}
 8008c20:	3720      	adds	r7, #32
 8008c22:	46bd      	mov	sp, r7
 8008c24:	bd80      	pop	{r7, pc}
 8008c26:	bf00      	nop
 8008c28:	200005a8 	.word	0x200005a8
 8008c2c:	0800dcc4 	.word	0x0800dcc4

08008c30 <Paint_DrawString_EN>:
    Color_Background : Select the background color of the English character
    Color_Foreground : Select the foreground color of the English character
******************************************************************************/
void Paint_DrawString_EN(UWORD Xstart, UWORD Ystart, const char * pString,
                         sFONT* Font, UWORD Color_Background, UWORD Color_Foreground )
{
 8008c30:	b580      	push	{r7, lr}
 8008c32:	b088      	sub	sp, #32
 8008c34:	af02      	add	r7, sp, #8
 8008c36:	60ba      	str	r2, [r7, #8]
 8008c38:	607b      	str	r3, [r7, #4]
 8008c3a:	4603      	mov	r3, r0
 8008c3c:	81fb      	strh	r3, [r7, #14]
 8008c3e:	460b      	mov	r3, r1
 8008c40:	81bb      	strh	r3, [r7, #12]
    UWORD Xpoint = Xstart;
 8008c42:	89fb      	ldrh	r3, [r7, #14]
 8008c44:	82fb      	strh	r3, [r7, #22]
    UWORD Ypoint = Ystart;
 8008c46:	89bb      	ldrh	r3, [r7, #12]
 8008c48:	82bb      	strh	r3, [r7, #20]

    if (Xstart > Paint.Width || Ystart > Paint.Height) {
 8008c4a:	4b23      	ldr	r3, [pc, #140]	@ (8008cd8 <Paint_DrawString_EN+0xa8>)
 8008c4c:	889b      	ldrh	r3, [r3, #4]
 8008c4e:	b29b      	uxth	r3, r3
 8008c50:	89fa      	ldrh	r2, [r7, #14]
 8008c52:	429a      	cmp	r2, r3
 8008c54:	d805      	bhi.n	8008c62 <Paint_DrawString_EN+0x32>
 8008c56:	4b20      	ldr	r3, [pc, #128]	@ (8008cd8 <Paint_DrawString_EN+0xa8>)
 8008c58:	88db      	ldrh	r3, [r3, #6]
 8008c5a:	b29b      	uxth	r3, r3
 8008c5c:	89ba      	ldrh	r2, [r7, #12]
 8008c5e:	429a      	cmp	r2, r3
 8008c60:	d933      	bls.n	8008cca <Paint_DrawString_EN+0x9a>
        Debug("Paint_DrawString_EN Input exceeds the normal display range\r\n");
 8008c62:	481e      	ldr	r0, [pc, #120]	@ (8008cdc <Paint_DrawString_EN+0xac>)
 8008c64:	f001 fada 	bl	800a21c <puts>
        return;
 8008c68:	e033      	b.n	8008cd2 <Paint_DrawString_EN+0xa2>
    }

    while (* pString != '\0') {
        //if X direction filled , reposition to(Xstart,Ypoint),Ypoint is Y direction plus the Height of the character
        if ((Xpoint + Font->Width ) > Paint.Width ) {
 8008c6a:	8afb      	ldrh	r3, [r7, #22]
 8008c6c:	687a      	ldr	r2, [r7, #4]
 8008c6e:	8892      	ldrh	r2, [r2, #4]
 8008c70:	4413      	add	r3, r2
 8008c72:	4a19      	ldr	r2, [pc, #100]	@ (8008cd8 <Paint_DrawString_EN+0xa8>)
 8008c74:	8892      	ldrh	r2, [r2, #4]
 8008c76:	b292      	uxth	r2, r2
 8008c78:	4293      	cmp	r3, r2
 8008c7a:	dd06      	ble.n	8008c8a <Paint_DrawString_EN+0x5a>
            Xpoint = Xstart;
 8008c7c:	89fb      	ldrh	r3, [r7, #14]
 8008c7e:	82fb      	strh	r3, [r7, #22]
            Ypoint += Font->Height;
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	88da      	ldrh	r2, [r3, #6]
 8008c84:	8abb      	ldrh	r3, [r7, #20]
 8008c86:	4413      	add	r3, r2
 8008c88:	82bb      	strh	r3, [r7, #20]
        }

        // If the Y direction is full, reposition to(Xstart, Ystart)
        if ((Ypoint  + Font->Height ) > Paint.Height ) {
 8008c8a:	8abb      	ldrh	r3, [r7, #20]
 8008c8c:	687a      	ldr	r2, [r7, #4]
 8008c8e:	88d2      	ldrh	r2, [r2, #6]
 8008c90:	4413      	add	r3, r2
 8008c92:	4a11      	ldr	r2, [pc, #68]	@ (8008cd8 <Paint_DrawString_EN+0xa8>)
 8008c94:	88d2      	ldrh	r2, [r2, #6]
 8008c96:	b292      	uxth	r2, r2
 8008c98:	4293      	cmp	r3, r2
 8008c9a:	dd03      	ble.n	8008ca4 <Paint_DrawString_EN+0x74>
            Xpoint = Xstart;
 8008c9c:	89fb      	ldrh	r3, [r7, #14]
 8008c9e:	82fb      	strh	r3, [r7, #22]
            Ypoint = Ystart;
 8008ca0:	89bb      	ldrh	r3, [r7, #12]
 8008ca2:	82bb      	strh	r3, [r7, #20]
        }
        Paint_DrawChar(Xpoint, Ypoint, * pString, Font, Color_Background, Color_Foreground);
 8008ca4:	68bb      	ldr	r3, [r7, #8]
 8008ca6:	781a      	ldrb	r2, [r3, #0]
 8008ca8:	8ab9      	ldrh	r1, [r7, #20]
 8008caa:	8af8      	ldrh	r0, [r7, #22]
 8008cac:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008cae:	9301      	str	r3, [sp, #4]
 8008cb0:	8c3b      	ldrh	r3, [r7, #32]
 8008cb2:	9300      	str	r3, [sp, #0]
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	f7ff ff0f 	bl	8008ad8 <Paint_DrawChar>

        //The next character of the address
        pString ++;
 8008cba:	68bb      	ldr	r3, [r7, #8]
 8008cbc:	3301      	adds	r3, #1
 8008cbe:	60bb      	str	r3, [r7, #8]

        //The next word of the abscissa increases the font of the broadband
        Xpoint += Font->Width;
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	889a      	ldrh	r2, [r3, #4]
 8008cc4:	8afb      	ldrh	r3, [r7, #22]
 8008cc6:	4413      	add	r3, r2
 8008cc8:	82fb      	strh	r3, [r7, #22]
    while (* pString != '\0') {
 8008cca:	68bb      	ldr	r3, [r7, #8]
 8008ccc:	781b      	ldrb	r3, [r3, #0]
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d1cb      	bne.n	8008c6a <Paint_DrawString_EN+0x3a>
    }
}
 8008cd2:	3718      	adds	r7, #24
 8008cd4:	46bd      	mov	sp, r7
 8008cd6:	bd80      	pop	{r7, pc}
 8008cd8:	200005a8 	.word	0x200005a8
 8008cdc:	0800dd04 	.word	0x0800dd04

08008ce0 <LCD_2IN_Reset>:
/*******************************************************************************
function:
	Hardware reset
*******************************************************************************/
static void LCD_2IN_Reset(void)
{
 8008ce0:	b580      	push	{r7, lr}
 8008ce2:	af00      	add	r7, sp, #0
	LCD_2IN_RST_1;
 8008ce4:	2201      	movs	r2, #1
 8008ce6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8008cea:	480d      	ldr	r0, [pc, #52]	@ (8008d20 <LCD_2IN_Reset+0x40>)
 8008cec:	f7fb fae6 	bl	80042bc <HAL_GPIO_WritePin>
	DEV_Delay_ms(100);
 8008cf0:	2064      	movs	r0, #100	@ 0x64
 8008cf2:	f7fb f801 	bl	8003cf8 <HAL_Delay>
	LCD_2IN_RST_0;
 8008cf6:	2200      	movs	r2, #0
 8008cf8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8008cfc:	4808      	ldr	r0, [pc, #32]	@ (8008d20 <LCD_2IN_Reset+0x40>)
 8008cfe:	f7fb fadd 	bl	80042bc <HAL_GPIO_WritePin>
	DEV_Delay_ms(100);
 8008d02:	2064      	movs	r0, #100	@ 0x64
 8008d04:	f7fa fff8 	bl	8003cf8 <HAL_Delay>
	LCD_2IN_RST_1;
 8008d08:	2201      	movs	r2, #1
 8008d0a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8008d0e:	4804      	ldr	r0, [pc, #16]	@ (8008d20 <LCD_2IN_Reset+0x40>)
 8008d10:	f7fb fad4 	bl	80042bc <HAL_GPIO_WritePin>
	DEV_Delay_ms(100);
 8008d14:	2064      	movs	r0, #100	@ 0x64
 8008d16:	f7fa ffef 	bl	8003cf8 <HAL_Delay>
}
 8008d1a:	bf00      	nop
 8008d1c:	bd80      	pop	{r7, pc}
 8008d1e:	bf00      	nop
 8008d20:	40020400 	.word	0x40020400

08008d24 <LCD_2IN_Write_Command>:
/*******************************************************************************
function:
		Write data and commands
*******************************************************************************/
static void LCD_2IN_Write_Command(UBYTE data)	 
{	
 8008d24:	b580      	push	{r7, lr}
 8008d26:	b082      	sub	sp, #8
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	4603      	mov	r3, r0
 8008d2c:	71fb      	strb	r3, [r7, #7]
	LCD_2IN_CS_0;
 8008d2e:	2200      	movs	r2, #0
 8008d30:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8008d34:	4808      	ldr	r0, [pc, #32]	@ (8008d58 <LCD_2IN_Write_Command+0x34>)
 8008d36:	f7fb fac1 	bl	80042bc <HAL_GPIO_WritePin>
	LCD_2IN_DC_0;
 8008d3a:	2200      	movs	r2, #0
 8008d3c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8008d40:	4805      	ldr	r0, [pc, #20]	@ (8008d58 <LCD_2IN_Write_Command+0x34>)
 8008d42:	f7fb fabb 	bl	80042bc <HAL_GPIO_WritePin>
	DEV_SPI_WRITE(data);
 8008d46:	79fb      	ldrb	r3, [r7, #7]
 8008d48:	4618      	mov	r0, r3
 8008d4a:	f7ff fd3d 	bl	80087c8 <DEV_SPI_WRite>
}
 8008d4e:	bf00      	nop
 8008d50:	3708      	adds	r7, #8
 8008d52:	46bd      	mov	sp, r7
 8008d54:	bd80      	pop	{r7, pc}
 8008d56:	bf00      	nop
 8008d58:	40020400 	.word	0x40020400

08008d5c <LCD_2IN_WriteData_Byte>:

static void LCD_2IN_WriteData_Byte(UBYTE data) 
{	
 8008d5c:	b580      	push	{r7, lr}
 8008d5e:	b082      	sub	sp, #8
 8008d60:	af00      	add	r7, sp, #0
 8008d62:	4603      	mov	r3, r0
 8008d64:	71fb      	strb	r3, [r7, #7]
	LCD_2IN_CS_0;
 8008d66:	2200      	movs	r2, #0
 8008d68:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8008d6c:	480b      	ldr	r0, [pc, #44]	@ (8008d9c <LCD_2IN_WriteData_Byte+0x40>)
 8008d6e:	f7fb faa5 	bl	80042bc <HAL_GPIO_WritePin>
	LCD_2IN_DC_1;
 8008d72:	2201      	movs	r2, #1
 8008d74:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8008d78:	4808      	ldr	r0, [pc, #32]	@ (8008d9c <LCD_2IN_WriteData_Byte+0x40>)
 8008d7a:	f7fb fa9f 	bl	80042bc <HAL_GPIO_WritePin>
	DEV_SPI_WRITE(data);  
 8008d7e:	79fb      	ldrb	r3, [r7, #7]
 8008d80:	4618      	mov	r0, r3
 8008d82:	f7ff fd21 	bl	80087c8 <DEV_SPI_WRite>
	LCD_2IN_CS_1;
 8008d86:	2201      	movs	r2, #1
 8008d88:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8008d8c:	4803      	ldr	r0, [pc, #12]	@ (8008d9c <LCD_2IN_WriteData_Byte+0x40>)
 8008d8e:	f7fb fa95 	bl	80042bc <HAL_GPIO_WritePin>
}  
 8008d92:	bf00      	nop
 8008d94:	3708      	adds	r7, #8
 8008d96:	46bd      	mov	sp, r7
 8008d98:	bd80      	pop	{r7, pc}
 8008d9a:	bf00      	nop
 8008d9c:	40020400 	.word	0x40020400

08008da0 <LCD_2IN_WriteData_Word>:

void LCD_2IN_WriteData_Word(UWORD data)
{
 8008da0:	b580      	push	{r7, lr}
 8008da2:	b082      	sub	sp, #8
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	4603      	mov	r3, r0
 8008da8:	80fb      	strh	r3, [r7, #6]
	LCD_2IN_CS_0;
 8008daa:	2200      	movs	r2, #0
 8008dac:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8008db0:	480f      	ldr	r0, [pc, #60]	@ (8008df0 <LCD_2IN_WriteData_Word+0x50>)
 8008db2:	f7fb fa83 	bl	80042bc <HAL_GPIO_WritePin>
	LCD_2IN_DC_1;
 8008db6:	2201      	movs	r2, #1
 8008db8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8008dbc:	480c      	ldr	r0, [pc, #48]	@ (8008df0 <LCD_2IN_WriteData_Word+0x50>)
 8008dbe:	f7fb fa7d 	bl	80042bc <HAL_GPIO_WritePin>
	DEV_SPI_WRITE((data>>8) & 0xff);
 8008dc2:	88fb      	ldrh	r3, [r7, #6]
 8008dc4:	0a1b      	lsrs	r3, r3, #8
 8008dc6:	b29b      	uxth	r3, r3
 8008dc8:	b2db      	uxtb	r3, r3
 8008dca:	4618      	mov	r0, r3
 8008dcc:	f7ff fcfc 	bl	80087c8 <DEV_SPI_WRite>
	DEV_SPI_WRITE(data);
 8008dd0:	88fb      	ldrh	r3, [r7, #6]
 8008dd2:	b2db      	uxtb	r3, r3
 8008dd4:	4618      	mov	r0, r3
 8008dd6:	f7ff fcf7 	bl	80087c8 <DEV_SPI_WRite>
	LCD_2IN_CS_1;
 8008dda:	2201      	movs	r2, #1
 8008ddc:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8008de0:	4803      	ldr	r0, [pc, #12]	@ (8008df0 <LCD_2IN_WriteData_Word+0x50>)
 8008de2:	f7fb fa6b 	bl	80042bc <HAL_GPIO_WritePin>
}	  
 8008de6:	bf00      	nop
 8008de8:	3708      	adds	r7, #8
 8008dea:	46bd      	mov	sp, r7
 8008dec:	bd80      	pop	{r7, pc}
 8008dee:	bf00      	nop
 8008df0:	40020400 	.word	0x40020400

08008df4 <LCD_2IN_Init>:
/******************************************************************************
function:	
		Common register initialization
******************************************************************************/
void LCD_2IN_Init(void)
{
 8008df4:	b580      	push	{r7, lr}
 8008df6:	af00      	add	r7, sp, #0
	LCD_2IN_Reset();
 8008df8:	f7ff ff72 	bl	8008ce0 <LCD_2IN_Reset>

	LCD_2IN_Write_Command(0x36);
 8008dfc:	2036      	movs	r0, #54	@ 0x36
 8008dfe:	f7ff ff91 	bl	8008d24 <LCD_2IN_Write_Command>
	LCD_2IN_WriteData_Byte(0x00); 
 8008e02:	2000      	movs	r0, #0
 8008e04:	f7ff ffaa 	bl	8008d5c <LCD_2IN_WriteData_Byte>

	LCD_2IN_Write_Command(0x3A); 
 8008e08:	203a      	movs	r0, #58	@ 0x3a
 8008e0a:	f7ff ff8b 	bl	8008d24 <LCD_2IN_Write_Command>
	LCD_2IN_WriteData_Byte(0x05);
 8008e0e:	2005      	movs	r0, #5
 8008e10:	f7ff ffa4 	bl	8008d5c <LCD_2IN_WriteData_Byte>

	LCD_2IN_Write_Command(0x21); 
 8008e14:	2021      	movs	r0, #33	@ 0x21
 8008e16:	f7ff ff85 	bl	8008d24 <LCD_2IN_Write_Command>

	LCD_2IN_Write_Command(0x2A);
 8008e1a:	202a      	movs	r0, #42	@ 0x2a
 8008e1c:	f7ff ff82 	bl	8008d24 <LCD_2IN_Write_Command>
	LCD_2IN_WriteData_Byte(0x00);
 8008e20:	2000      	movs	r0, #0
 8008e22:	f7ff ff9b 	bl	8008d5c <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x00);
 8008e26:	2000      	movs	r0, #0
 8008e28:	f7ff ff98 	bl	8008d5c <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x01);
 8008e2c:	2001      	movs	r0, #1
 8008e2e:	f7ff ff95 	bl	8008d5c <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x3F);
 8008e32:	203f      	movs	r0, #63	@ 0x3f
 8008e34:	f7ff ff92 	bl	8008d5c <LCD_2IN_WriteData_Byte>

	LCD_2IN_Write_Command(0x2B);
 8008e38:	202b      	movs	r0, #43	@ 0x2b
 8008e3a:	f7ff ff73 	bl	8008d24 <LCD_2IN_Write_Command>
	LCD_2IN_WriteData_Byte(0x00);
 8008e3e:	2000      	movs	r0, #0
 8008e40:	f7ff ff8c 	bl	8008d5c <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x00);
 8008e44:	2000      	movs	r0, #0
 8008e46:	f7ff ff89 	bl	8008d5c <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x00);
 8008e4a:	2000      	movs	r0, #0
 8008e4c:	f7ff ff86 	bl	8008d5c <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0xEF);
 8008e50:	20ef      	movs	r0, #239	@ 0xef
 8008e52:	f7ff ff83 	bl	8008d5c <LCD_2IN_WriteData_Byte>

	LCD_2IN_Write_Command(0xB2);
 8008e56:	20b2      	movs	r0, #178	@ 0xb2
 8008e58:	f7ff ff64 	bl	8008d24 <LCD_2IN_Write_Command>
	LCD_2IN_WriteData_Byte(0x0C);
 8008e5c:	200c      	movs	r0, #12
 8008e5e:	f7ff ff7d 	bl	8008d5c <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x0C);
 8008e62:	200c      	movs	r0, #12
 8008e64:	f7ff ff7a 	bl	8008d5c <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x00);
 8008e68:	2000      	movs	r0, #0
 8008e6a:	f7ff ff77 	bl	8008d5c <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x33);
 8008e6e:	2033      	movs	r0, #51	@ 0x33
 8008e70:	f7ff ff74 	bl	8008d5c <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x33);
 8008e74:	2033      	movs	r0, #51	@ 0x33
 8008e76:	f7ff ff71 	bl	8008d5c <LCD_2IN_WriteData_Byte>

	LCD_2IN_Write_Command(0xB7);
 8008e7a:	20b7      	movs	r0, #183	@ 0xb7
 8008e7c:	f7ff ff52 	bl	8008d24 <LCD_2IN_Write_Command>
	LCD_2IN_WriteData_Byte(0x35); 
 8008e80:	2035      	movs	r0, #53	@ 0x35
 8008e82:	f7ff ff6b 	bl	8008d5c <LCD_2IN_WriteData_Byte>

	LCD_2IN_Write_Command(0xBB);
 8008e86:	20bb      	movs	r0, #187	@ 0xbb
 8008e88:	f7ff ff4c 	bl	8008d24 <LCD_2IN_Write_Command>
	LCD_2IN_WriteData_Byte(0x1F);
 8008e8c:	201f      	movs	r0, #31
 8008e8e:	f7ff ff65 	bl	8008d5c <LCD_2IN_WriteData_Byte>

	LCD_2IN_Write_Command(0xC0);
 8008e92:	20c0      	movs	r0, #192	@ 0xc0
 8008e94:	f7ff ff46 	bl	8008d24 <LCD_2IN_Write_Command>
	LCD_2IN_WriteData_Byte(0x2C);
 8008e98:	202c      	movs	r0, #44	@ 0x2c
 8008e9a:	f7ff ff5f 	bl	8008d5c <LCD_2IN_WriteData_Byte>

	LCD_2IN_Write_Command(0xC2);
 8008e9e:	20c2      	movs	r0, #194	@ 0xc2
 8008ea0:	f7ff ff40 	bl	8008d24 <LCD_2IN_Write_Command>
	LCD_2IN_WriteData_Byte(0x01);
 8008ea4:	2001      	movs	r0, #1
 8008ea6:	f7ff ff59 	bl	8008d5c <LCD_2IN_WriteData_Byte>

	LCD_2IN_Write_Command(0xC3);
 8008eaa:	20c3      	movs	r0, #195	@ 0xc3
 8008eac:	f7ff ff3a 	bl	8008d24 <LCD_2IN_Write_Command>
	LCD_2IN_WriteData_Byte(0x12);   
 8008eb0:	2012      	movs	r0, #18
 8008eb2:	f7ff ff53 	bl	8008d5c <LCD_2IN_WriteData_Byte>

	LCD_2IN_Write_Command(0xC4);
 8008eb6:	20c4      	movs	r0, #196	@ 0xc4
 8008eb8:	f7ff ff34 	bl	8008d24 <LCD_2IN_Write_Command>
	LCD_2IN_WriteData_Byte(0x20);
 8008ebc:	2020      	movs	r0, #32
 8008ebe:	f7ff ff4d 	bl	8008d5c <LCD_2IN_WriteData_Byte>

	LCD_2IN_Write_Command(0xC6);
 8008ec2:	20c6      	movs	r0, #198	@ 0xc6
 8008ec4:	f7ff ff2e 	bl	8008d24 <LCD_2IN_Write_Command>
	LCD_2IN_WriteData_Byte(0x0F); 
 8008ec8:	200f      	movs	r0, #15
 8008eca:	f7ff ff47 	bl	8008d5c <LCD_2IN_WriteData_Byte>

	LCD_2IN_Write_Command(0xD0);
 8008ece:	20d0      	movs	r0, #208	@ 0xd0
 8008ed0:	f7ff ff28 	bl	8008d24 <LCD_2IN_Write_Command>
	LCD_2IN_WriteData_Byte(0xA4);
 8008ed4:	20a4      	movs	r0, #164	@ 0xa4
 8008ed6:	f7ff ff41 	bl	8008d5c <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0xA1);
 8008eda:	20a1      	movs	r0, #161	@ 0xa1
 8008edc:	f7ff ff3e 	bl	8008d5c <LCD_2IN_WriteData_Byte>

	LCD_2IN_Write_Command(0xE0);
 8008ee0:	20e0      	movs	r0, #224	@ 0xe0
 8008ee2:	f7ff ff1f 	bl	8008d24 <LCD_2IN_Write_Command>
	LCD_2IN_WriteData_Byte(0xD0);
 8008ee6:	20d0      	movs	r0, #208	@ 0xd0
 8008ee8:	f7ff ff38 	bl	8008d5c <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x08);
 8008eec:	2008      	movs	r0, #8
 8008eee:	f7ff ff35 	bl	8008d5c <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x11);
 8008ef2:	2011      	movs	r0, #17
 8008ef4:	f7ff ff32 	bl	8008d5c <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x08);
 8008ef8:	2008      	movs	r0, #8
 8008efa:	f7ff ff2f 	bl	8008d5c <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x0C);
 8008efe:	200c      	movs	r0, #12
 8008f00:	f7ff ff2c 	bl	8008d5c <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x15);
 8008f04:	2015      	movs	r0, #21
 8008f06:	f7ff ff29 	bl	8008d5c <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x39);
 8008f0a:	2039      	movs	r0, #57	@ 0x39
 8008f0c:	f7ff ff26 	bl	8008d5c <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x33);
 8008f10:	2033      	movs	r0, #51	@ 0x33
 8008f12:	f7ff ff23 	bl	8008d5c <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x50);
 8008f16:	2050      	movs	r0, #80	@ 0x50
 8008f18:	f7ff ff20 	bl	8008d5c <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x36);
 8008f1c:	2036      	movs	r0, #54	@ 0x36
 8008f1e:	f7ff ff1d 	bl	8008d5c <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x13);
 8008f22:	2013      	movs	r0, #19
 8008f24:	f7ff ff1a 	bl	8008d5c <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x14);
 8008f28:	2014      	movs	r0, #20
 8008f2a:	f7ff ff17 	bl	8008d5c <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x29);
 8008f2e:	2029      	movs	r0, #41	@ 0x29
 8008f30:	f7ff ff14 	bl	8008d5c <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x2D);
 8008f34:	202d      	movs	r0, #45	@ 0x2d
 8008f36:	f7ff ff11 	bl	8008d5c <LCD_2IN_WriteData_Byte>

	LCD_2IN_Write_Command(0xE1);
 8008f3a:	20e1      	movs	r0, #225	@ 0xe1
 8008f3c:	f7ff fef2 	bl	8008d24 <LCD_2IN_Write_Command>
	LCD_2IN_WriteData_Byte(0xD0);
 8008f40:	20d0      	movs	r0, #208	@ 0xd0
 8008f42:	f7ff ff0b 	bl	8008d5c <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x08);
 8008f46:	2008      	movs	r0, #8
 8008f48:	f7ff ff08 	bl	8008d5c <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x10);
 8008f4c:	2010      	movs	r0, #16
 8008f4e:	f7ff ff05 	bl	8008d5c <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x08);
 8008f52:	2008      	movs	r0, #8
 8008f54:	f7ff ff02 	bl	8008d5c <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x06);
 8008f58:	2006      	movs	r0, #6
 8008f5a:	f7ff feff 	bl	8008d5c <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x06);
 8008f5e:	2006      	movs	r0, #6
 8008f60:	f7ff fefc 	bl	8008d5c <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x39);
 8008f64:	2039      	movs	r0, #57	@ 0x39
 8008f66:	f7ff fef9 	bl	8008d5c <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x44);
 8008f6a:	2044      	movs	r0, #68	@ 0x44
 8008f6c:	f7ff fef6 	bl	8008d5c <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x51);
 8008f70:	2051      	movs	r0, #81	@ 0x51
 8008f72:	f7ff fef3 	bl	8008d5c <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x0B);
 8008f76:	200b      	movs	r0, #11
 8008f78:	f7ff fef0 	bl	8008d5c <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x16);
 8008f7c:	2016      	movs	r0, #22
 8008f7e:	f7ff feed 	bl	8008d5c <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x14);
 8008f82:	2014      	movs	r0, #20
 8008f84:	f7ff feea 	bl	8008d5c <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x2F);
 8008f88:	202f      	movs	r0, #47	@ 0x2f
 8008f8a:	f7ff fee7 	bl	8008d5c <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(0x31);
 8008f8e:	2031      	movs	r0, #49	@ 0x31
 8008f90:	f7ff fee4 	bl	8008d5c <LCD_2IN_WriteData_Byte>
	LCD_2IN_Write_Command(0x21);
 8008f94:	2021      	movs	r0, #33	@ 0x21
 8008f96:	f7ff fec5 	bl	8008d24 <LCD_2IN_Write_Command>

	LCD_2IN_Write_Command(0x11);
 8008f9a:	2011      	movs	r0, #17
 8008f9c:	f7ff fec2 	bl	8008d24 <LCD_2IN_Write_Command>

	LCD_2IN_Write_Command(0x29);
 8008fa0:	2029      	movs	r0, #41	@ 0x29
 8008fa2:	f7ff febf 	bl	8008d24 <LCD_2IN_Write_Command>
}
 8008fa6:	bf00      	nop
 8008fa8:	bd80      	pop	{r7, pc}

08008faa <LCD_2IN_SetWindow>:
	  Ystart:	Start UWORD y coordinate
	  Xend  :	End UWORD coordinates
	  Yend  :	End UWORD coordinatesen
******************************************************************************/
void LCD_2IN_SetWindow(UWORD Xstart, UWORD Ystart, UWORD Xend, UWORD  Yend)
{ 
 8008faa:	b590      	push	{r4, r7, lr}
 8008fac:	b083      	sub	sp, #12
 8008fae:	af00      	add	r7, sp, #0
 8008fb0:	4604      	mov	r4, r0
 8008fb2:	4608      	mov	r0, r1
 8008fb4:	4611      	mov	r1, r2
 8008fb6:	461a      	mov	r2, r3
 8008fb8:	4623      	mov	r3, r4
 8008fba:	80fb      	strh	r3, [r7, #6]
 8008fbc:	4603      	mov	r3, r0
 8008fbe:	80bb      	strh	r3, [r7, #4]
 8008fc0:	460b      	mov	r3, r1
 8008fc2:	807b      	strh	r3, [r7, #2]
 8008fc4:	4613      	mov	r3, r2
 8008fc6:	803b      	strh	r3, [r7, #0]
	LCD_2IN_Write_Command(0x2a);
 8008fc8:	202a      	movs	r0, #42	@ 0x2a
 8008fca:	f7ff feab 	bl	8008d24 <LCD_2IN_Write_Command>
	LCD_2IN_WriteData_Byte(Xstart >>8);
 8008fce:	88fb      	ldrh	r3, [r7, #6]
 8008fd0:	0a1b      	lsrs	r3, r3, #8
 8008fd2:	b29b      	uxth	r3, r3
 8008fd4:	b2db      	uxtb	r3, r3
 8008fd6:	4618      	mov	r0, r3
 8008fd8:	f7ff fec0 	bl	8008d5c <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(Xstart & 0xff);
 8008fdc:	88fb      	ldrh	r3, [r7, #6]
 8008fde:	b2db      	uxtb	r3, r3
 8008fe0:	4618      	mov	r0, r3
 8008fe2:	f7ff febb 	bl	8008d5c <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte((Xend - 1) >> 8);
 8008fe6:	887b      	ldrh	r3, [r7, #2]
 8008fe8:	3b01      	subs	r3, #1
 8008fea:	121b      	asrs	r3, r3, #8
 8008fec:	b2db      	uxtb	r3, r3
 8008fee:	4618      	mov	r0, r3
 8008ff0:	f7ff feb4 	bl	8008d5c <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte((Xend - 1) & 0xff);
 8008ff4:	887b      	ldrh	r3, [r7, #2]
 8008ff6:	b2db      	uxtb	r3, r3
 8008ff8:	3b01      	subs	r3, #1
 8008ffa:	b2db      	uxtb	r3, r3
 8008ffc:	4618      	mov	r0, r3
 8008ffe:	f7ff fead 	bl	8008d5c <LCD_2IN_WriteData_Byte>

	LCD_2IN_Write_Command(0x2b);
 8009002:	202b      	movs	r0, #43	@ 0x2b
 8009004:	f7ff fe8e 	bl	8008d24 <LCD_2IN_Write_Command>
	LCD_2IN_WriteData_Byte(Ystart >>8);
 8009008:	88bb      	ldrh	r3, [r7, #4]
 800900a:	0a1b      	lsrs	r3, r3, #8
 800900c:	b29b      	uxth	r3, r3
 800900e:	b2db      	uxtb	r3, r3
 8009010:	4618      	mov	r0, r3
 8009012:	f7ff fea3 	bl	8008d5c <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(Ystart & 0xff);
 8009016:	88bb      	ldrh	r3, [r7, #4]
 8009018:	b2db      	uxtb	r3, r3
 800901a:	4618      	mov	r0, r3
 800901c:	f7ff fe9e 	bl	8008d5c <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte((Yend - 1) >> 8);
 8009020:	883b      	ldrh	r3, [r7, #0]
 8009022:	3b01      	subs	r3, #1
 8009024:	121b      	asrs	r3, r3, #8
 8009026:	b2db      	uxtb	r3, r3
 8009028:	4618      	mov	r0, r3
 800902a:	f7ff fe97 	bl	8008d5c <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte((Yend - 1) & 0xff);
 800902e:	883b      	ldrh	r3, [r7, #0]
 8009030:	b2db      	uxtb	r3, r3
 8009032:	3b01      	subs	r3, #1
 8009034:	b2db      	uxtb	r3, r3
 8009036:	4618      	mov	r0, r3
 8009038:	f7ff fe90 	bl	8008d5c <LCD_2IN_WriteData_Byte>

	LCD_2IN_Write_Command(0x2C);
 800903c:	202c      	movs	r0, #44	@ 0x2c
 800903e:	f7ff fe71 	bl	8008d24 <LCD_2IN_Write_Command>
}
 8009042:	bf00      	nop
 8009044:	370c      	adds	r7, #12
 8009046:	46bd      	mov	sp, r7
 8009048:	bd90      	pop	{r4, r7, pc}

0800904a <LCD_2IN_SetCursor>:
	  Xstart: 	Start UWORD x coordinate
	  Ystart:	Start UWORD y coordinate

******************************************************************************/
void LCD_2IN_SetCursor(UWORD X, UWORD Y)
{ 
 800904a:	b580      	push	{r7, lr}
 800904c:	b082      	sub	sp, #8
 800904e:	af00      	add	r7, sp, #0
 8009050:	4603      	mov	r3, r0
 8009052:	460a      	mov	r2, r1
 8009054:	80fb      	strh	r3, [r7, #6]
 8009056:	4613      	mov	r3, r2
 8009058:	80bb      	strh	r3, [r7, #4]
	LCD_2IN_Write_Command(0x2a);
 800905a:	202a      	movs	r0, #42	@ 0x2a
 800905c:	f7ff fe62 	bl	8008d24 <LCD_2IN_Write_Command>
	LCD_2IN_WriteData_Byte(X >> 8);
 8009060:	88fb      	ldrh	r3, [r7, #6]
 8009062:	0a1b      	lsrs	r3, r3, #8
 8009064:	b29b      	uxth	r3, r3
 8009066:	b2db      	uxtb	r3, r3
 8009068:	4618      	mov	r0, r3
 800906a:	f7ff fe77 	bl	8008d5c <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(X);
 800906e:	88fb      	ldrh	r3, [r7, #6]
 8009070:	b2db      	uxtb	r3, r3
 8009072:	4618      	mov	r0, r3
 8009074:	f7ff fe72 	bl	8008d5c <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(X >> 8);
 8009078:	88fb      	ldrh	r3, [r7, #6]
 800907a:	0a1b      	lsrs	r3, r3, #8
 800907c:	b29b      	uxth	r3, r3
 800907e:	b2db      	uxtb	r3, r3
 8009080:	4618      	mov	r0, r3
 8009082:	f7ff fe6b 	bl	8008d5c <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(X);
 8009086:	88fb      	ldrh	r3, [r7, #6]
 8009088:	b2db      	uxtb	r3, r3
 800908a:	4618      	mov	r0, r3
 800908c:	f7ff fe66 	bl	8008d5c <LCD_2IN_WriteData_Byte>

	LCD_2IN_Write_Command(0x2b);
 8009090:	202b      	movs	r0, #43	@ 0x2b
 8009092:	f7ff fe47 	bl	8008d24 <LCD_2IN_Write_Command>
	LCD_2IN_WriteData_Byte(Y >> 8);
 8009096:	88bb      	ldrh	r3, [r7, #4]
 8009098:	0a1b      	lsrs	r3, r3, #8
 800909a:	b29b      	uxth	r3, r3
 800909c:	b2db      	uxtb	r3, r3
 800909e:	4618      	mov	r0, r3
 80090a0:	f7ff fe5c 	bl	8008d5c <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(Y);
 80090a4:	88bb      	ldrh	r3, [r7, #4]
 80090a6:	b2db      	uxtb	r3, r3
 80090a8:	4618      	mov	r0, r3
 80090aa:	f7ff fe57 	bl	8008d5c <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(Y >> 8);
 80090ae:	88bb      	ldrh	r3, [r7, #4]
 80090b0:	0a1b      	lsrs	r3, r3, #8
 80090b2:	b29b      	uxth	r3, r3
 80090b4:	b2db      	uxtb	r3, r3
 80090b6:	4618      	mov	r0, r3
 80090b8:	f7ff fe50 	bl	8008d5c <LCD_2IN_WriteData_Byte>
	LCD_2IN_WriteData_Byte(Y);
 80090bc:	88bb      	ldrh	r3, [r7, #4]
 80090be:	b2db      	uxtb	r3, r3
 80090c0:	4618      	mov	r0, r3
 80090c2:	f7ff fe4b 	bl	8008d5c <LCD_2IN_WriteData_Byte>

	LCD_2IN_Write_Command(0x2C);
 80090c6:	202c      	movs	r0, #44	@ 0x2c
 80090c8:	f7ff fe2c 	bl	8008d24 <LCD_2IN_Write_Command>
}
 80090cc:	bf00      	nop
 80090ce:	3708      	adds	r7, #8
 80090d0:	46bd      	mov	sp, r7
 80090d2:	bd80      	pop	{r7, pc}

080090d4 <LCD_2IN_Clear>:
function:	Clear screen function, refresh the screen to a certain color
parameter	:
	  Color :		The color you want to clear all the screen
******************************************************************************/
void LCD_2IN_Clear(UWORD Color)
{
 80090d4:	b580      	push	{r7, lr}
 80090d6:	b084      	sub	sp, #16
 80090d8:	af00      	add	r7, sp, #0
 80090da:	4603      	mov	r3, r0
 80090dc:	80fb      	strh	r3, [r7, #6]
    UWORD i,j;
    LCD_2IN_SetWindow(0, 0, LCD_2IN_WIDTH, LCD_2IN_HEIGHT);
 80090de:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 80090e2:	22f0      	movs	r2, #240	@ 0xf0
 80090e4:	2100      	movs	r1, #0
 80090e6:	2000      	movs	r0, #0
 80090e8:	f7ff ff5f 	bl	8008faa <LCD_2IN_SetWindow>

	DEV_Digital_Write(DEV_DC_PIN, 1);
 80090ec:	2201      	movs	r2, #1
 80090ee:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80090f2:	480f      	ldr	r0, [pc, #60]	@ (8009130 <LCD_2IN_Clear+0x5c>)
 80090f4:	f7fb f8e2 	bl	80042bc <HAL_GPIO_WritePin>
	for(i = 0; i < LCD_2IN_WIDTH; i++){
 80090f8:	2300      	movs	r3, #0
 80090fa:	81fb      	strh	r3, [r7, #14]
 80090fc:	e010      	b.n	8009120 <LCD_2IN_Clear+0x4c>
		for(j = 0; j < LCD_2IN_HEIGHT; j++){
 80090fe:	2300      	movs	r3, #0
 8009100:	81bb      	strh	r3, [r7, #12]
 8009102:	e006      	b.n	8009112 <LCD_2IN_Clear+0x3e>
			LCD_2IN_WriteData_Word(Color);
 8009104:	88fb      	ldrh	r3, [r7, #6]
 8009106:	4618      	mov	r0, r3
 8009108:	f7ff fe4a 	bl	8008da0 <LCD_2IN_WriteData_Word>
		for(j = 0; j < LCD_2IN_HEIGHT; j++){
 800910c:	89bb      	ldrh	r3, [r7, #12]
 800910e:	3301      	adds	r3, #1
 8009110:	81bb      	strh	r3, [r7, #12]
 8009112:	89bb      	ldrh	r3, [r7, #12]
 8009114:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8009118:	d3f4      	bcc.n	8009104 <LCD_2IN_Clear+0x30>
	for(i = 0; i < LCD_2IN_WIDTH; i++){
 800911a:	89fb      	ldrh	r3, [r7, #14]
 800911c:	3301      	adds	r3, #1
 800911e:	81fb      	strh	r3, [r7, #14]
 8009120:	89fb      	ldrh	r3, [r7, #14]
 8009122:	2bef      	cmp	r3, #239	@ 0xef
 8009124:	d9eb      	bls.n	80090fe <LCD_2IN_Clear+0x2a>
		}
	 }
}
 8009126:	bf00      	nop
 8009128:	bf00      	nop
 800912a:	3710      	adds	r7, #16
 800912c:	46bd      	mov	sp, r7
 800912e:	bd80      	pop	{r7, pc}
 8009130:	40020400 	.word	0x40020400

08009134 <LCD_2IN_DrawPaint>:
	    X	: 	Set the X coordinate
	    Y	:	Set the Y coordinate
	  Color :	Set the color
******************************************************************************/
void LCD_2IN_DrawPaint(UWORD x, UWORD y, UWORD Color)
{
 8009134:	b580      	push	{r7, lr}
 8009136:	b082      	sub	sp, #8
 8009138:	af00      	add	r7, sp, #0
 800913a:	4603      	mov	r3, r0
 800913c:	80fb      	strh	r3, [r7, #6]
 800913e:	460b      	mov	r3, r1
 8009140:	80bb      	strh	r3, [r7, #4]
 8009142:	4613      	mov	r3, r2
 8009144:	807b      	strh	r3, [r7, #2]
	LCD_2IN_SetCursor(x, y);
 8009146:	88ba      	ldrh	r2, [r7, #4]
 8009148:	88fb      	ldrh	r3, [r7, #6]
 800914a:	4611      	mov	r1, r2
 800914c:	4618      	mov	r0, r3
 800914e:	f7ff ff7c 	bl	800904a <LCD_2IN_SetCursor>
	LCD_2IN_WriteData_Word(Color); 	    
 8009152:	887b      	ldrh	r3, [r7, #2]
 8009154:	4618      	mov	r0, r3
 8009156:	f7ff fe23 	bl	8008da0 <LCD_2IN_WriteData_Word>
}
 800915a:	bf00      	nop
 800915c:	3708      	adds	r7, #8
 800915e:	46bd      	mov	sp, r7
 8009160:	bd80      	pop	{r7, pc}
	...

08009164 <LCD_2IN_SetBackLight>:
	Setting backlight
parameter	:
	  value : Range 0~1000   Duty cycle is value/1000	
*******************************************************************************/
void LCD_2IN_SetBackLight(UWORD Value)
{
 8009164:	b480      	push	{r7}
 8009166:	b083      	sub	sp, #12
 8009168:	af00      	add	r7, sp, #0
 800916a:	4603      	mov	r3, r0
 800916c:	80fb      	strh	r3, [r7, #6]
	DEV_Set_PWM(Value);
 800916e:	4a04      	ldr	r2, [pc, #16]	@ (8009180 <LCD_2IN_SetBackLight+0x1c>)
 8009170:	88fb      	ldrh	r3, [r7, #6]
 8009172:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8009174:	bf00      	nop
 8009176:	370c      	adds	r7, #12
 8009178:	46bd      	mov	sp, r7
 800917a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800917e:	4770      	bx	lr
 8009180:	40000800 	.word	0x40000800

08009184 <malloc>:
 8009184:	4b02      	ldr	r3, [pc, #8]	@ (8009190 <malloc+0xc>)
 8009186:	4601      	mov	r1, r0
 8009188:	6818      	ldr	r0, [r3, #0]
 800918a:	f000 b825 	b.w	80091d8 <_malloc_r>
 800918e:	bf00      	nop
 8009190:	20000050 	.word	0x20000050

08009194 <sbrk_aligned>:
 8009194:	b570      	push	{r4, r5, r6, lr}
 8009196:	4e0f      	ldr	r6, [pc, #60]	@ (80091d4 <sbrk_aligned+0x40>)
 8009198:	460c      	mov	r4, r1
 800919a:	6831      	ldr	r1, [r6, #0]
 800919c:	4605      	mov	r5, r0
 800919e:	b911      	cbnz	r1, 80091a6 <sbrk_aligned+0x12>
 80091a0:	f001 f97c 	bl	800a49c <_sbrk_r>
 80091a4:	6030      	str	r0, [r6, #0]
 80091a6:	4621      	mov	r1, r4
 80091a8:	4628      	mov	r0, r5
 80091aa:	f001 f977 	bl	800a49c <_sbrk_r>
 80091ae:	1c43      	adds	r3, r0, #1
 80091b0:	d103      	bne.n	80091ba <sbrk_aligned+0x26>
 80091b2:	f04f 34ff 	mov.w	r4, #4294967295
 80091b6:	4620      	mov	r0, r4
 80091b8:	bd70      	pop	{r4, r5, r6, pc}
 80091ba:	1cc4      	adds	r4, r0, #3
 80091bc:	f024 0403 	bic.w	r4, r4, #3
 80091c0:	42a0      	cmp	r0, r4
 80091c2:	d0f8      	beq.n	80091b6 <sbrk_aligned+0x22>
 80091c4:	1a21      	subs	r1, r4, r0
 80091c6:	4628      	mov	r0, r5
 80091c8:	f001 f968 	bl	800a49c <_sbrk_r>
 80091cc:	3001      	adds	r0, #1
 80091ce:	d1f2      	bne.n	80091b6 <sbrk_aligned+0x22>
 80091d0:	e7ef      	b.n	80091b2 <sbrk_aligned+0x1e>
 80091d2:	bf00      	nop
 80091d4:	200005c8 	.word	0x200005c8

080091d8 <_malloc_r>:
 80091d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80091dc:	1ccd      	adds	r5, r1, #3
 80091de:	f025 0503 	bic.w	r5, r5, #3
 80091e2:	3508      	adds	r5, #8
 80091e4:	2d0c      	cmp	r5, #12
 80091e6:	bf38      	it	cc
 80091e8:	250c      	movcc	r5, #12
 80091ea:	2d00      	cmp	r5, #0
 80091ec:	4606      	mov	r6, r0
 80091ee:	db01      	blt.n	80091f4 <_malloc_r+0x1c>
 80091f0:	42a9      	cmp	r1, r5
 80091f2:	d904      	bls.n	80091fe <_malloc_r+0x26>
 80091f4:	230c      	movs	r3, #12
 80091f6:	6033      	str	r3, [r6, #0]
 80091f8:	2000      	movs	r0, #0
 80091fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80091fe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80092d4 <_malloc_r+0xfc>
 8009202:	f000 f869 	bl	80092d8 <__malloc_lock>
 8009206:	f8d8 3000 	ldr.w	r3, [r8]
 800920a:	461c      	mov	r4, r3
 800920c:	bb44      	cbnz	r4, 8009260 <_malloc_r+0x88>
 800920e:	4629      	mov	r1, r5
 8009210:	4630      	mov	r0, r6
 8009212:	f7ff ffbf 	bl	8009194 <sbrk_aligned>
 8009216:	1c43      	adds	r3, r0, #1
 8009218:	4604      	mov	r4, r0
 800921a:	d158      	bne.n	80092ce <_malloc_r+0xf6>
 800921c:	f8d8 4000 	ldr.w	r4, [r8]
 8009220:	4627      	mov	r7, r4
 8009222:	2f00      	cmp	r7, #0
 8009224:	d143      	bne.n	80092ae <_malloc_r+0xd6>
 8009226:	2c00      	cmp	r4, #0
 8009228:	d04b      	beq.n	80092c2 <_malloc_r+0xea>
 800922a:	6823      	ldr	r3, [r4, #0]
 800922c:	4639      	mov	r1, r7
 800922e:	4630      	mov	r0, r6
 8009230:	eb04 0903 	add.w	r9, r4, r3
 8009234:	f001 f932 	bl	800a49c <_sbrk_r>
 8009238:	4581      	cmp	r9, r0
 800923a:	d142      	bne.n	80092c2 <_malloc_r+0xea>
 800923c:	6821      	ldr	r1, [r4, #0]
 800923e:	1a6d      	subs	r5, r5, r1
 8009240:	4629      	mov	r1, r5
 8009242:	4630      	mov	r0, r6
 8009244:	f7ff ffa6 	bl	8009194 <sbrk_aligned>
 8009248:	3001      	adds	r0, #1
 800924a:	d03a      	beq.n	80092c2 <_malloc_r+0xea>
 800924c:	6823      	ldr	r3, [r4, #0]
 800924e:	442b      	add	r3, r5
 8009250:	6023      	str	r3, [r4, #0]
 8009252:	f8d8 3000 	ldr.w	r3, [r8]
 8009256:	685a      	ldr	r2, [r3, #4]
 8009258:	bb62      	cbnz	r2, 80092b4 <_malloc_r+0xdc>
 800925a:	f8c8 7000 	str.w	r7, [r8]
 800925e:	e00f      	b.n	8009280 <_malloc_r+0xa8>
 8009260:	6822      	ldr	r2, [r4, #0]
 8009262:	1b52      	subs	r2, r2, r5
 8009264:	d420      	bmi.n	80092a8 <_malloc_r+0xd0>
 8009266:	2a0b      	cmp	r2, #11
 8009268:	d917      	bls.n	800929a <_malloc_r+0xc2>
 800926a:	1961      	adds	r1, r4, r5
 800926c:	42a3      	cmp	r3, r4
 800926e:	6025      	str	r5, [r4, #0]
 8009270:	bf18      	it	ne
 8009272:	6059      	strne	r1, [r3, #4]
 8009274:	6863      	ldr	r3, [r4, #4]
 8009276:	bf08      	it	eq
 8009278:	f8c8 1000 	streq.w	r1, [r8]
 800927c:	5162      	str	r2, [r4, r5]
 800927e:	604b      	str	r3, [r1, #4]
 8009280:	4630      	mov	r0, r6
 8009282:	f000 f82f 	bl	80092e4 <__malloc_unlock>
 8009286:	f104 000b 	add.w	r0, r4, #11
 800928a:	1d23      	adds	r3, r4, #4
 800928c:	f020 0007 	bic.w	r0, r0, #7
 8009290:	1ac2      	subs	r2, r0, r3
 8009292:	bf1c      	itt	ne
 8009294:	1a1b      	subne	r3, r3, r0
 8009296:	50a3      	strne	r3, [r4, r2]
 8009298:	e7af      	b.n	80091fa <_malloc_r+0x22>
 800929a:	6862      	ldr	r2, [r4, #4]
 800929c:	42a3      	cmp	r3, r4
 800929e:	bf0c      	ite	eq
 80092a0:	f8c8 2000 	streq.w	r2, [r8]
 80092a4:	605a      	strne	r2, [r3, #4]
 80092a6:	e7eb      	b.n	8009280 <_malloc_r+0xa8>
 80092a8:	4623      	mov	r3, r4
 80092aa:	6864      	ldr	r4, [r4, #4]
 80092ac:	e7ae      	b.n	800920c <_malloc_r+0x34>
 80092ae:	463c      	mov	r4, r7
 80092b0:	687f      	ldr	r7, [r7, #4]
 80092b2:	e7b6      	b.n	8009222 <_malloc_r+0x4a>
 80092b4:	461a      	mov	r2, r3
 80092b6:	685b      	ldr	r3, [r3, #4]
 80092b8:	42a3      	cmp	r3, r4
 80092ba:	d1fb      	bne.n	80092b4 <_malloc_r+0xdc>
 80092bc:	2300      	movs	r3, #0
 80092be:	6053      	str	r3, [r2, #4]
 80092c0:	e7de      	b.n	8009280 <_malloc_r+0xa8>
 80092c2:	230c      	movs	r3, #12
 80092c4:	6033      	str	r3, [r6, #0]
 80092c6:	4630      	mov	r0, r6
 80092c8:	f000 f80c 	bl	80092e4 <__malloc_unlock>
 80092cc:	e794      	b.n	80091f8 <_malloc_r+0x20>
 80092ce:	6005      	str	r5, [r0, #0]
 80092d0:	e7d6      	b.n	8009280 <_malloc_r+0xa8>
 80092d2:	bf00      	nop
 80092d4:	200005cc 	.word	0x200005cc

080092d8 <__malloc_lock>:
 80092d8:	4801      	ldr	r0, [pc, #4]	@ (80092e0 <__malloc_lock+0x8>)
 80092da:	f001 b92c 	b.w	800a536 <__retarget_lock_acquire_recursive>
 80092de:	bf00      	nop
 80092e0:	20000710 	.word	0x20000710

080092e4 <__malloc_unlock>:
 80092e4:	4801      	ldr	r0, [pc, #4]	@ (80092ec <__malloc_unlock+0x8>)
 80092e6:	f001 b927 	b.w	800a538 <__retarget_lock_release_recursive>
 80092ea:	bf00      	nop
 80092ec:	20000710 	.word	0x20000710

080092f0 <__cvt>:
 80092f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80092f4:	ec57 6b10 	vmov	r6, r7, d0
 80092f8:	2f00      	cmp	r7, #0
 80092fa:	460c      	mov	r4, r1
 80092fc:	4619      	mov	r1, r3
 80092fe:	463b      	mov	r3, r7
 8009300:	bfbb      	ittet	lt
 8009302:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8009306:	461f      	movlt	r7, r3
 8009308:	2300      	movge	r3, #0
 800930a:	232d      	movlt	r3, #45	@ 0x2d
 800930c:	700b      	strb	r3, [r1, #0]
 800930e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009310:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8009314:	4691      	mov	r9, r2
 8009316:	f023 0820 	bic.w	r8, r3, #32
 800931a:	bfbc      	itt	lt
 800931c:	4632      	movlt	r2, r6
 800931e:	4616      	movlt	r6, r2
 8009320:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009324:	d005      	beq.n	8009332 <__cvt+0x42>
 8009326:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800932a:	d100      	bne.n	800932e <__cvt+0x3e>
 800932c:	3401      	adds	r4, #1
 800932e:	2102      	movs	r1, #2
 8009330:	e000      	b.n	8009334 <__cvt+0x44>
 8009332:	2103      	movs	r1, #3
 8009334:	ab03      	add	r3, sp, #12
 8009336:	9301      	str	r3, [sp, #4]
 8009338:	ab02      	add	r3, sp, #8
 800933a:	9300      	str	r3, [sp, #0]
 800933c:	ec47 6b10 	vmov	d0, r6, r7
 8009340:	4653      	mov	r3, sl
 8009342:	4622      	mov	r2, r4
 8009344:	f001 f9a0 	bl	800a688 <_dtoa_r>
 8009348:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800934c:	4605      	mov	r5, r0
 800934e:	d119      	bne.n	8009384 <__cvt+0x94>
 8009350:	f019 0f01 	tst.w	r9, #1
 8009354:	d00e      	beq.n	8009374 <__cvt+0x84>
 8009356:	eb00 0904 	add.w	r9, r0, r4
 800935a:	2200      	movs	r2, #0
 800935c:	2300      	movs	r3, #0
 800935e:	4630      	mov	r0, r6
 8009360:	4639      	mov	r1, r7
 8009362:	f7f7 fbd1 	bl	8000b08 <__aeabi_dcmpeq>
 8009366:	b108      	cbz	r0, 800936c <__cvt+0x7c>
 8009368:	f8cd 900c 	str.w	r9, [sp, #12]
 800936c:	2230      	movs	r2, #48	@ 0x30
 800936e:	9b03      	ldr	r3, [sp, #12]
 8009370:	454b      	cmp	r3, r9
 8009372:	d31e      	bcc.n	80093b2 <__cvt+0xc2>
 8009374:	9b03      	ldr	r3, [sp, #12]
 8009376:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009378:	1b5b      	subs	r3, r3, r5
 800937a:	4628      	mov	r0, r5
 800937c:	6013      	str	r3, [r2, #0]
 800937e:	b004      	add	sp, #16
 8009380:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009384:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009388:	eb00 0904 	add.w	r9, r0, r4
 800938c:	d1e5      	bne.n	800935a <__cvt+0x6a>
 800938e:	7803      	ldrb	r3, [r0, #0]
 8009390:	2b30      	cmp	r3, #48	@ 0x30
 8009392:	d10a      	bne.n	80093aa <__cvt+0xba>
 8009394:	2200      	movs	r2, #0
 8009396:	2300      	movs	r3, #0
 8009398:	4630      	mov	r0, r6
 800939a:	4639      	mov	r1, r7
 800939c:	f7f7 fbb4 	bl	8000b08 <__aeabi_dcmpeq>
 80093a0:	b918      	cbnz	r0, 80093aa <__cvt+0xba>
 80093a2:	f1c4 0401 	rsb	r4, r4, #1
 80093a6:	f8ca 4000 	str.w	r4, [sl]
 80093aa:	f8da 3000 	ldr.w	r3, [sl]
 80093ae:	4499      	add	r9, r3
 80093b0:	e7d3      	b.n	800935a <__cvt+0x6a>
 80093b2:	1c59      	adds	r1, r3, #1
 80093b4:	9103      	str	r1, [sp, #12]
 80093b6:	701a      	strb	r2, [r3, #0]
 80093b8:	e7d9      	b.n	800936e <__cvt+0x7e>

080093ba <__exponent>:
 80093ba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80093bc:	2900      	cmp	r1, #0
 80093be:	bfba      	itte	lt
 80093c0:	4249      	neglt	r1, r1
 80093c2:	232d      	movlt	r3, #45	@ 0x2d
 80093c4:	232b      	movge	r3, #43	@ 0x2b
 80093c6:	2909      	cmp	r1, #9
 80093c8:	7002      	strb	r2, [r0, #0]
 80093ca:	7043      	strb	r3, [r0, #1]
 80093cc:	dd29      	ble.n	8009422 <__exponent+0x68>
 80093ce:	f10d 0307 	add.w	r3, sp, #7
 80093d2:	461d      	mov	r5, r3
 80093d4:	270a      	movs	r7, #10
 80093d6:	461a      	mov	r2, r3
 80093d8:	fbb1 f6f7 	udiv	r6, r1, r7
 80093dc:	fb07 1416 	mls	r4, r7, r6, r1
 80093e0:	3430      	adds	r4, #48	@ 0x30
 80093e2:	f802 4c01 	strb.w	r4, [r2, #-1]
 80093e6:	460c      	mov	r4, r1
 80093e8:	2c63      	cmp	r4, #99	@ 0x63
 80093ea:	f103 33ff 	add.w	r3, r3, #4294967295
 80093ee:	4631      	mov	r1, r6
 80093f0:	dcf1      	bgt.n	80093d6 <__exponent+0x1c>
 80093f2:	3130      	adds	r1, #48	@ 0x30
 80093f4:	1e94      	subs	r4, r2, #2
 80093f6:	f803 1c01 	strb.w	r1, [r3, #-1]
 80093fa:	1c41      	adds	r1, r0, #1
 80093fc:	4623      	mov	r3, r4
 80093fe:	42ab      	cmp	r3, r5
 8009400:	d30a      	bcc.n	8009418 <__exponent+0x5e>
 8009402:	f10d 0309 	add.w	r3, sp, #9
 8009406:	1a9b      	subs	r3, r3, r2
 8009408:	42ac      	cmp	r4, r5
 800940a:	bf88      	it	hi
 800940c:	2300      	movhi	r3, #0
 800940e:	3302      	adds	r3, #2
 8009410:	4403      	add	r3, r0
 8009412:	1a18      	subs	r0, r3, r0
 8009414:	b003      	add	sp, #12
 8009416:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009418:	f813 6b01 	ldrb.w	r6, [r3], #1
 800941c:	f801 6f01 	strb.w	r6, [r1, #1]!
 8009420:	e7ed      	b.n	80093fe <__exponent+0x44>
 8009422:	2330      	movs	r3, #48	@ 0x30
 8009424:	3130      	adds	r1, #48	@ 0x30
 8009426:	7083      	strb	r3, [r0, #2]
 8009428:	70c1      	strb	r1, [r0, #3]
 800942a:	1d03      	adds	r3, r0, #4
 800942c:	e7f1      	b.n	8009412 <__exponent+0x58>
	...

08009430 <_printf_float>:
 8009430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009434:	b08d      	sub	sp, #52	@ 0x34
 8009436:	460c      	mov	r4, r1
 8009438:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800943c:	4616      	mov	r6, r2
 800943e:	461f      	mov	r7, r3
 8009440:	4605      	mov	r5, r0
 8009442:	f000 fff3 	bl	800a42c <_localeconv_r>
 8009446:	6803      	ldr	r3, [r0, #0]
 8009448:	9304      	str	r3, [sp, #16]
 800944a:	4618      	mov	r0, r3
 800944c:	f7f6 ff30 	bl	80002b0 <strlen>
 8009450:	2300      	movs	r3, #0
 8009452:	930a      	str	r3, [sp, #40]	@ 0x28
 8009454:	f8d8 3000 	ldr.w	r3, [r8]
 8009458:	9005      	str	r0, [sp, #20]
 800945a:	3307      	adds	r3, #7
 800945c:	f023 0307 	bic.w	r3, r3, #7
 8009460:	f103 0208 	add.w	r2, r3, #8
 8009464:	f894 a018 	ldrb.w	sl, [r4, #24]
 8009468:	f8d4 b000 	ldr.w	fp, [r4]
 800946c:	f8c8 2000 	str.w	r2, [r8]
 8009470:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009474:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8009478:	9307      	str	r3, [sp, #28]
 800947a:	f8cd 8018 	str.w	r8, [sp, #24]
 800947e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8009482:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009486:	4b9c      	ldr	r3, [pc, #624]	@ (80096f8 <_printf_float+0x2c8>)
 8009488:	f04f 32ff 	mov.w	r2, #4294967295
 800948c:	f7f7 fb6e 	bl	8000b6c <__aeabi_dcmpun>
 8009490:	bb70      	cbnz	r0, 80094f0 <_printf_float+0xc0>
 8009492:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009496:	4b98      	ldr	r3, [pc, #608]	@ (80096f8 <_printf_float+0x2c8>)
 8009498:	f04f 32ff 	mov.w	r2, #4294967295
 800949c:	f7f7 fb48 	bl	8000b30 <__aeabi_dcmple>
 80094a0:	bb30      	cbnz	r0, 80094f0 <_printf_float+0xc0>
 80094a2:	2200      	movs	r2, #0
 80094a4:	2300      	movs	r3, #0
 80094a6:	4640      	mov	r0, r8
 80094a8:	4649      	mov	r1, r9
 80094aa:	f7f7 fb37 	bl	8000b1c <__aeabi_dcmplt>
 80094ae:	b110      	cbz	r0, 80094b6 <_printf_float+0x86>
 80094b0:	232d      	movs	r3, #45	@ 0x2d
 80094b2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80094b6:	4a91      	ldr	r2, [pc, #580]	@ (80096fc <_printf_float+0x2cc>)
 80094b8:	4b91      	ldr	r3, [pc, #580]	@ (8009700 <_printf_float+0x2d0>)
 80094ba:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80094be:	bf94      	ite	ls
 80094c0:	4690      	movls	r8, r2
 80094c2:	4698      	movhi	r8, r3
 80094c4:	2303      	movs	r3, #3
 80094c6:	6123      	str	r3, [r4, #16]
 80094c8:	f02b 0304 	bic.w	r3, fp, #4
 80094cc:	6023      	str	r3, [r4, #0]
 80094ce:	f04f 0900 	mov.w	r9, #0
 80094d2:	9700      	str	r7, [sp, #0]
 80094d4:	4633      	mov	r3, r6
 80094d6:	aa0b      	add	r2, sp, #44	@ 0x2c
 80094d8:	4621      	mov	r1, r4
 80094da:	4628      	mov	r0, r5
 80094dc:	f000 f9d2 	bl	8009884 <_printf_common>
 80094e0:	3001      	adds	r0, #1
 80094e2:	f040 808d 	bne.w	8009600 <_printf_float+0x1d0>
 80094e6:	f04f 30ff 	mov.w	r0, #4294967295
 80094ea:	b00d      	add	sp, #52	@ 0x34
 80094ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094f0:	4642      	mov	r2, r8
 80094f2:	464b      	mov	r3, r9
 80094f4:	4640      	mov	r0, r8
 80094f6:	4649      	mov	r1, r9
 80094f8:	f7f7 fb38 	bl	8000b6c <__aeabi_dcmpun>
 80094fc:	b140      	cbz	r0, 8009510 <_printf_float+0xe0>
 80094fe:	464b      	mov	r3, r9
 8009500:	2b00      	cmp	r3, #0
 8009502:	bfbc      	itt	lt
 8009504:	232d      	movlt	r3, #45	@ 0x2d
 8009506:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800950a:	4a7e      	ldr	r2, [pc, #504]	@ (8009704 <_printf_float+0x2d4>)
 800950c:	4b7e      	ldr	r3, [pc, #504]	@ (8009708 <_printf_float+0x2d8>)
 800950e:	e7d4      	b.n	80094ba <_printf_float+0x8a>
 8009510:	6863      	ldr	r3, [r4, #4]
 8009512:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8009516:	9206      	str	r2, [sp, #24]
 8009518:	1c5a      	adds	r2, r3, #1
 800951a:	d13b      	bne.n	8009594 <_printf_float+0x164>
 800951c:	2306      	movs	r3, #6
 800951e:	6063      	str	r3, [r4, #4]
 8009520:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8009524:	2300      	movs	r3, #0
 8009526:	6022      	str	r2, [r4, #0]
 8009528:	9303      	str	r3, [sp, #12]
 800952a:	ab0a      	add	r3, sp, #40	@ 0x28
 800952c:	e9cd a301 	strd	sl, r3, [sp, #4]
 8009530:	ab09      	add	r3, sp, #36	@ 0x24
 8009532:	9300      	str	r3, [sp, #0]
 8009534:	6861      	ldr	r1, [r4, #4]
 8009536:	ec49 8b10 	vmov	d0, r8, r9
 800953a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800953e:	4628      	mov	r0, r5
 8009540:	f7ff fed6 	bl	80092f0 <__cvt>
 8009544:	9b06      	ldr	r3, [sp, #24]
 8009546:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009548:	2b47      	cmp	r3, #71	@ 0x47
 800954a:	4680      	mov	r8, r0
 800954c:	d129      	bne.n	80095a2 <_printf_float+0x172>
 800954e:	1cc8      	adds	r0, r1, #3
 8009550:	db02      	blt.n	8009558 <_printf_float+0x128>
 8009552:	6863      	ldr	r3, [r4, #4]
 8009554:	4299      	cmp	r1, r3
 8009556:	dd41      	ble.n	80095dc <_printf_float+0x1ac>
 8009558:	f1aa 0a02 	sub.w	sl, sl, #2
 800955c:	fa5f fa8a 	uxtb.w	sl, sl
 8009560:	3901      	subs	r1, #1
 8009562:	4652      	mov	r2, sl
 8009564:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8009568:	9109      	str	r1, [sp, #36]	@ 0x24
 800956a:	f7ff ff26 	bl	80093ba <__exponent>
 800956e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009570:	1813      	adds	r3, r2, r0
 8009572:	2a01      	cmp	r2, #1
 8009574:	4681      	mov	r9, r0
 8009576:	6123      	str	r3, [r4, #16]
 8009578:	dc02      	bgt.n	8009580 <_printf_float+0x150>
 800957a:	6822      	ldr	r2, [r4, #0]
 800957c:	07d2      	lsls	r2, r2, #31
 800957e:	d501      	bpl.n	8009584 <_printf_float+0x154>
 8009580:	3301      	adds	r3, #1
 8009582:	6123      	str	r3, [r4, #16]
 8009584:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8009588:	2b00      	cmp	r3, #0
 800958a:	d0a2      	beq.n	80094d2 <_printf_float+0xa2>
 800958c:	232d      	movs	r3, #45	@ 0x2d
 800958e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009592:	e79e      	b.n	80094d2 <_printf_float+0xa2>
 8009594:	9a06      	ldr	r2, [sp, #24]
 8009596:	2a47      	cmp	r2, #71	@ 0x47
 8009598:	d1c2      	bne.n	8009520 <_printf_float+0xf0>
 800959a:	2b00      	cmp	r3, #0
 800959c:	d1c0      	bne.n	8009520 <_printf_float+0xf0>
 800959e:	2301      	movs	r3, #1
 80095a0:	e7bd      	b.n	800951e <_printf_float+0xee>
 80095a2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80095a6:	d9db      	bls.n	8009560 <_printf_float+0x130>
 80095a8:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80095ac:	d118      	bne.n	80095e0 <_printf_float+0x1b0>
 80095ae:	2900      	cmp	r1, #0
 80095b0:	6863      	ldr	r3, [r4, #4]
 80095b2:	dd0b      	ble.n	80095cc <_printf_float+0x19c>
 80095b4:	6121      	str	r1, [r4, #16]
 80095b6:	b913      	cbnz	r3, 80095be <_printf_float+0x18e>
 80095b8:	6822      	ldr	r2, [r4, #0]
 80095ba:	07d0      	lsls	r0, r2, #31
 80095bc:	d502      	bpl.n	80095c4 <_printf_float+0x194>
 80095be:	3301      	adds	r3, #1
 80095c0:	440b      	add	r3, r1
 80095c2:	6123      	str	r3, [r4, #16]
 80095c4:	65a1      	str	r1, [r4, #88]	@ 0x58
 80095c6:	f04f 0900 	mov.w	r9, #0
 80095ca:	e7db      	b.n	8009584 <_printf_float+0x154>
 80095cc:	b913      	cbnz	r3, 80095d4 <_printf_float+0x1a4>
 80095ce:	6822      	ldr	r2, [r4, #0]
 80095d0:	07d2      	lsls	r2, r2, #31
 80095d2:	d501      	bpl.n	80095d8 <_printf_float+0x1a8>
 80095d4:	3302      	adds	r3, #2
 80095d6:	e7f4      	b.n	80095c2 <_printf_float+0x192>
 80095d8:	2301      	movs	r3, #1
 80095da:	e7f2      	b.n	80095c2 <_printf_float+0x192>
 80095dc:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80095e0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80095e2:	4299      	cmp	r1, r3
 80095e4:	db05      	blt.n	80095f2 <_printf_float+0x1c2>
 80095e6:	6823      	ldr	r3, [r4, #0]
 80095e8:	6121      	str	r1, [r4, #16]
 80095ea:	07d8      	lsls	r0, r3, #31
 80095ec:	d5ea      	bpl.n	80095c4 <_printf_float+0x194>
 80095ee:	1c4b      	adds	r3, r1, #1
 80095f0:	e7e7      	b.n	80095c2 <_printf_float+0x192>
 80095f2:	2900      	cmp	r1, #0
 80095f4:	bfd4      	ite	le
 80095f6:	f1c1 0202 	rsble	r2, r1, #2
 80095fa:	2201      	movgt	r2, #1
 80095fc:	4413      	add	r3, r2
 80095fe:	e7e0      	b.n	80095c2 <_printf_float+0x192>
 8009600:	6823      	ldr	r3, [r4, #0]
 8009602:	055a      	lsls	r2, r3, #21
 8009604:	d407      	bmi.n	8009616 <_printf_float+0x1e6>
 8009606:	6923      	ldr	r3, [r4, #16]
 8009608:	4642      	mov	r2, r8
 800960a:	4631      	mov	r1, r6
 800960c:	4628      	mov	r0, r5
 800960e:	47b8      	blx	r7
 8009610:	3001      	adds	r0, #1
 8009612:	d12b      	bne.n	800966c <_printf_float+0x23c>
 8009614:	e767      	b.n	80094e6 <_printf_float+0xb6>
 8009616:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800961a:	f240 80dd 	bls.w	80097d8 <_printf_float+0x3a8>
 800961e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009622:	2200      	movs	r2, #0
 8009624:	2300      	movs	r3, #0
 8009626:	f7f7 fa6f 	bl	8000b08 <__aeabi_dcmpeq>
 800962a:	2800      	cmp	r0, #0
 800962c:	d033      	beq.n	8009696 <_printf_float+0x266>
 800962e:	4a37      	ldr	r2, [pc, #220]	@ (800970c <_printf_float+0x2dc>)
 8009630:	2301      	movs	r3, #1
 8009632:	4631      	mov	r1, r6
 8009634:	4628      	mov	r0, r5
 8009636:	47b8      	blx	r7
 8009638:	3001      	adds	r0, #1
 800963a:	f43f af54 	beq.w	80094e6 <_printf_float+0xb6>
 800963e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8009642:	4543      	cmp	r3, r8
 8009644:	db02      	blt.n	800964c <_printf_float+0x21c>
 8009646:	6823      	ldr	r3, [r4, #0]
 8009648:	07d8      	lsls	r0, r3, #31
 800964a:	d50f      	bpl.n	800966c <_printf_float+0x23c>
 800964c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009650:	4631      	mov	r1, r6
 8009652:	4628      	mov	r0, r5
 8009654:	47b8      	blx	r7
 8009656:	3001      	adds	r0, #1
 8009658:	f43f af45 	beq.w	80094e6 <_printf_float+0xb6>
 800965c:	f04f 0900 	mov.w	r9, #0
 8009660:	f108 38ff 	add.w	r8, r8, #4294967295
 8009664:	f104 0a1a 	add.w	sl, r4, #26
 8009668:	45c8      	cmp	r8, r9
 800966a:	dc09      	bgt.n	8009680 <_printf_float+0x250>
 800966c:	6823      	ldr	r3, [r4, #0]
 800966e:	079b      	lsls	r3, r3, #30
 8009670:	f100 8103 	bmi.w	800987a <_printf_float+0x44a>
 8009674:	68e0      	ldr	r0, [r4, #12]
 8009676:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009678:	4298      	cmp	r0, r3
 800967a:	bfb8      	it	lt
 800967c:	4618      	movlt	r0, r3
 800967e:	e734      	b.n	80094ea <_printf_float+0xba>
 8009680:	2301      	movs	r3, #1
 8009682:	4652      	mov	r2, sl
 8009684:	4631      	mov	r1, r6
 8009686:	4628      	mov	r0, r5
 8009688:	47b8      	blx	r7
 800968a:	3001      	adds	r0, #1
 800968c:	f43f af2b 	beq.w	80094e6 <_printf_float+0xb6>
 8009690:	f109 0901 	add.w	r9, r9, #1
 8009694:	e7e8      	b.n	8009668 <_printf_float+0x238>
 8009696:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009698:	2b00      	cmp	r3, #0
 800969a:	dc39      	bgt.n	8009710 <_printf_float+0x2e0>
 800969c:	4a1b      	ldr	r2, [pc, #108]	@ (800970c <_printf_float+0x2dc>)
 800969e:	2301      	movs	r3, #1
 80096a0:	4631      	mov	r1, r6
 80096a2:	4628      	mov	r0, r5
 80096a4:	47b8      	blx	r7
 80096a6:	3001      	adds	r0, #1
 80096a8:	f43f af1d 	beq.w	80094e6 <_printf_float+0xb6>
 80096ac:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80096b0:	ea59 0303 	orrs.w	r3, r9, r3
 80096b4:	d102      	bne.n	80096bc <_printf_float+0x28c>
 80096b6:	6823      	ldr	r3, [r4, #0]
 80096b8:	07d9      	lsls	r1, r3, #31
 80096ba:	d5d7      	bpl.n	800966c <_printf_float+0x23c>
 80096bc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80096c0:	4631      	mov	r1, r6
 80096c2:	4628      	mov	r0, r5
 80096c4:	47b8      	blx	r7
 80096c6:	3001      	adds	r0, #1
 80096c8:	f43f af0d 	beq.w	80094e6 <_printf_float+0xb6>
 80096cc:	f04f 0a00 	mov.w	sl, #0
 80096d0:	f104 0b1a 	add.w	fp, r4, #26
 80096d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80096d6:	425b      	negs	r3, r3
 80096d8:	4553      	cmp	r3, sl
 80096da:	dc01      	bgt.n	80096e0 <_printf_float+0x2b0>
 80096dc:	464b      	mov	r3, r9
 80096de:	e793      	b.n	8009608 <_printf_float+0x1d8>
 80096e0:	2301      	movs	r3, #1
 80096e2:	465a      	mov	r2, fp
 80096e4:	4631      	mov	r1, r6
 80096e6:	4628      	mov	r0, r5
 80096e8:	47b8      	blx	r7
 80096ea:	3001      	adds	r0, #1
 80096ec:	f43f aefb 	beq.w	80094e6 <_printf_float+0xb6>
 80096f0:	f10a 0a01 	add.w	sl, sl, #1
 80096f4:	e7ee      	b.n	80096d4 <_printf_float+0x2a4>
 80096f6:	bf00      	nop
 80096f8:	7fefffff 	.word	0x7fefffff
 80096fc:	08011334 	.word	0x08011334
 8009700:	08011338 	.word	0x08011338
 8009704:	0801133c 	.word	0x0801133c
 8009708:	08011340 	.word	0x08011340
 800970c:	08011344 	.word	0x08011344
 8009710:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009712:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009716:	4553      	cmp	r3, sl
 8009718:	bfa8      	it	ge
 800971a:	4653      	movge	r3, sl
 800971c:	2b00      	cmp	r3, #0
 800971e:	4699      	mov	r9, r3
 8009720:	dc36      	bgt.n	8009790 <_printf_float+0x360>
 8009722:	f04f 0b00 	mov.w	fp, #0
 8009726:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800972a:	f104 021a 	add.w	r2, r4, #26
 800972e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009730:	9306      	str	r3, [sp, #24]
 8009732:	eba3 0309 	sub.w	r3, r3, r9
 8009736:	455b      	cmp	r3, fp
 8009738:	dc31      	bgt.n	800979e <_printf_float+0x36e>
 800973a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800973c:	459a      	cmp	sl, r3
 800973e:	dc3a      	bgt.n	80097b6 <_printf_float+0x386>
 8009740:	6823      	ldr	r3, [r4, #0]
 8009742:	07da      	lsls	r2, r3, #31
 8009744:	d437      	bmi.n	80097b6 <_printf_float+0x386>
 8009746:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009748:	ebaa 0903 	sub.w	r9, sl, r3
 800974c:	9b06      	ldr	r3, [sp, #24]
 800974e:	ebaa 0303 	sub.w	r3, sl, r3
 8009752:	4599      	cmp	r9, r3
 8009754:	bfa8      	it	ge
 8009756:	4699      	movge	r9, r3
 8009758:	f1b9 0f00 	cmp.w	r9, #0
 800975c:	dc33      	bgt.n	80097c6 <_printf_float+0x396>
 800975e:	f04f 0800 	mov.w	r8, #0
 8009762:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009766:	f104 0b1a 	add.w	fp, r4, #26
 800976a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800976c:	ebaa 0303 	sub.w	r3, sl, r3
 8009770:	eba3 0309 	sub.w	r3, r3, r9
 8009774:	4543      	cmp	r3, r8
 8009776:	f77f af79 	ble.w	800966c <_printf_float+0x23c>
 800977a:	2301      	movs	r3, #1
 800977c:	465a      	mov	r2, fp
 800977e:	4631      	mov	r1, r6
 8009780:	4628      	mov	r0, r5
 8009782:	47b8      	blx	r7
 8009784:	3001      	adds	r0, #1
 8009786:	f43f aeae 	beq.w	80094e6 <_printf_float+0xb6>
 800978a:	f108 0801 	add.w	r8, r8, #1
 800978e:	e7ec      	b.n	800976a <_printf_float+0x33a>
 8009790:	4642      	mov	r2, r8
 8009792:	4631      	mov	r1, r6
 8009794:	4628      	mov	r0, r5
 8009796:	47b8      	blx	r7
 8009798:	3001      	adds	r0, #1
 800979a:	d1c2      	bne.n	8009722 <_printf_float+0x2f2>
 800979c:	e6a3      	b.n	80094e6 <_printf_float+0xb6>
 800979e:	2301      	movs	r3, #1
 80097a0:	4631      	mov	r1, r6
 80097a2:	4628      	mov	r0, r5
 80097a4:	9206      	str	r2, [sp, #24]
 80097a6:	47b8      	blx	r7
 80097a8:	3001      	adds	r0, #1
 80097aa:	f43f ae9c 	beq.w	80094e6 <_printf_float+0xb6>
 80097ae:	9a06      	ldr	r2, [sp, #24]
 80097b0:	f10b 0b01 	add.w	fp, fp, #1
 80097b4:	e7bb      	b.n	800972e <_printf_float+0x2fe>
 80097b6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80097ba:	4631      	mov	r1, r6
 80097bc:	4628      	mov	r0, r5
 80097be:	47b8      	blx	r7
 80097c0:	3001      	adds	r0, #1
 80097c2:	d1c0      	bne.n	8009746 <_printf_float+0x316>
 80097c4:	e68f      	b.n	80094e6 <_printf_float+0xb6>
 80097c6:	9a06      	ldr	r2, [sp, #24]
 80097c8:	464b      	mov	r3, r9
 80097ca:	4442      	add	r2, r8
 80097cc:	4631      	mov	r1, r6
 80097ce:	4628      	mov	r0, r5
 80097d0:	47b8      	blx	r7
 80097d2:	3001      	adds	r0, #1
 80097d4:	d1c3      	bne.n	800975e <_printf_float+0x32e>
 80097d6:	e686      	b.n	80094e6 <_printf_float+0xb6>
 80097d8:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80097dc:	f1ba 0f01 	cmp.w	sl, #1
 80097e0:	dc01      	bgt.n	80097e6 <_printf_float+0x3b6>
 80097e2:	07db      	lsls	r3, r3, #31
 80097e4:	d536      	bpl.n	8009854 <_printf_float+0x424>
 80097e6:	2301      	movs	r3, #1
 80097e8:	4642      	mov	r2, r8
 80097ea:	4631      	mov	r1, r6
 80097ec:	4628      	mov	r0, r5
 80097ee:	47b8      	blx	r7
 80097f0:	3001      	adds	r0, #1
 80097f2:	f43f ae78 	beq.w	80094e6 <_printf_float+0xb6>
 80097f6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80097fa:	4631      	mov	r1, r6
 80097fc:	4628      	mov	r0, r5
 80097fe:	47b8      	blx	r7
 8009800:	3001      	adds	r0, #1
 8009802:	f43f ae70 	beq.w	80094e6 <_printf_float+0xb6>
 8009806:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800980a:	2200      	movs	r2, #0
 800980c:	2300      	movs	r3, #0
 800980e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009812:	f7f7 f979 	bl	8000b08 <__aeabi_dcmpeq>
 8009816:	b9c0      	cbnz	r0, 800984a <_printf_float+0x41a>
 8009818:	4653      	mov	r3, sl
 800981a:	f108 0201 	add.w	r2, r8, #1
 800981e:	4631      	mov	r1, r6
 8009820:	4628      	mov	r0, r5
 8009822:	47b8      	blx	r7
 8009824:	3001      	adds	r0, #1
 8009826:	d10c      	bne.n	8009842 <_printf_float+0x412>
 8009828:	e65d      	b.n	80094e6 <_printf_float+0xb6>
 800982a:	2301      	movs	r3, #1
 800982c:	465a      	mov	r2, fp
 800982e:	4631      	mov	r1, r6
 8009830:	4628      	mov	r0, r5
 8009832:	47b8      	blx	r7
 8009834:	3001      	adds	r0, #1
 8009836:	f43f ae56 	beq.w	80094e6 <_printf_float+0xb6>
 800983a:	f108 0801 	add.w	r8, r8, #1
 800983e:	45d0      	cmp	r8, sl
 8009840:	dbf3      	blt.n	800982a <_printf_float+0x3fa>
 8009842:	464b      	mov	r3, r9
 8009844:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8009848:	e6df      	b.n	800960a <_printf_float+0x1da>
 800984a:	f04f 0800 	mov.w	r8, #0
 800984e:	f104 0b1a 	add.w	fp, r4, #26
 8009852:	e7f4      	b.n	800983e <_printf_float+0x40e>
 8009854:	2301      	movs	r3, #1
 8009856:	4642      	mov	r2, r8
 8009858:	e7e1      	b.n	800981e <_printf_float+0x3ee>
 800985a:	2301      	movs	r3, #1
 800985c:	464a      	mov	r2, r9
 800985e:	4631      	mov	r1, r6
 8009860:	4628      	mov	r0, r5
 8009862:	47b8      	blx	r7
 8009864:	3001      	adds	r0, #1
 8009866:	f43f ae3e 	beq.w	80094e6 <_printf_float+0xb6>
 800986a:	f108 0801 	add.w	r8, r8, #1
 800986e:	68e3      	ldr	r3, [r4, #12]
 8009870:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009872:	1a5b      	subs	r3, r3, r1
 8009874:	4543      	cmp	r3, r8
 8009876:	dcf0      	bgt.n	800985a <_printf_float+0x42a>
 8009878:	e6fc      	b.n	8009674 <_printf_float+0x244>
 800987a:	f04f 0800 	mov.w	r8, #0
 800987e:	f104 0919 	add.w	r9, r4, #25
 8009882:	e7f4      	b.n	800986e <_printf_float+0x43e>

08009884 <_printf_common>:
 8009884:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009888:	4616      	mov	r6, r2
 800988a:	4698      	mov	r8, r3
 800988c:	688a      	ldr	r2, [r1, #8]
 800988e:	690b      	ldr	r3, [r1, #16]
 8009890:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009894:	4293      	cmp	r3, r2
 8009896:	bfb8      	it	lt
 8009898:	4613      	movlt	r3, r2
 800989a:	6033      	str	r3, [r6, #0]
 800989c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80098a0:	4607      	mov	r7, r0
 80098a2:	460c      	mov	r4, r1
 80098a4:	b10a      	cbz	r2, 80098aa <_printf_common+0x26>
 80098a6:	3301      	adds	r3, #1
 80098a8:	6033      	str	r3, [r6, #0]
 80098aa:	6823      	ldr	r3, [r4, #0]
 80098ac:	0699      	lsls	r1, r3, #26
 80098ae:	bf42      	ittt	mi
 80098b0:	6833      	ldrmi	r3, [r6, #0]
 80098b2:	3302      	addmi	r3, #2
 80098b4:	6033      	strmi	r3, [r6, #0]
 80098b6:	6825      	ldr	r5, [r4, #0]
 80098b8:	f015 0506 	ands.w	r5, r5, #6
 80098bc:	d106      	bne.n	80098cc <_printf_common+0x48>
 80098be:	f104 0a19 	add.w	sl, r4, #25
 80098c2:	68e3      	ldr	r3, [r4, #12]
 80098c4:	6832      	ldr	r2, [r6, #0]
 80098c6:	1a9b      	subs	r3, r3, r2
 80098c8:	42ab      	cmp	r3, r5
 80098ca:	dc26      	bgt.n	800991a <_printf_common+0x96>
 80098cc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80098d0:	6822      	ldr	r2, [r4, #0]
 80098d2:	3b00      	subs	r3, #0
 80098d4:	bf18      	it	ne
 80098d6:	2301      	movne	r3, #1
 80098d8:	0692      	lsls	r2, r2, #26
 80098da:	d42b      	bmi.n	8009934 <_printf_common+0xb0>
 80098dc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80098e0:	4641      	mov	r1, r8
 80098e2:	4638      	mov	r0, r7
 80098e4:	47c8      	blx	r9
 80098e6:	3001      	adds	r0, #1
 80098e8:	d01e      	beq.n	8009928 <_printf_common+0xa4>
 80098ea:	6823      	ldr	r3, [r4, #0]
 80098ec:	6922      	ldr	r2, [r4, #16]
 80098ee:	f003 0306 	and.w	r3, r3, #6
 80098f2:	2b04      	cmp	r3, #4
 80098f4:	bf02      	ittt	eq
 80098f6:	68e5      	ldreq	r5, [r4, #12]
 80098f8:	6833      	ldreq	r3, [r6, #0]
 80098fa:	1aed      	subeq	r5, r5, r3
 80098fc:	68a3      	ldr	r3, [r4, #8]
 80098fe:	bf0c      	ite	eq
 8009900:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009904:	2500      	movne	r5, #0
 8009906:	4293      	cmp	r3, r2
 8009908:	bfc4      	itt	gt
 800990a:	1a9b      	subgt	r3, r3, r2
 800990c:	18ed      	addgt	r5, r5, r3
 800990e:	2600      	movs	r6, #0
 8009910:	341a      	adds	r4, #26
 8009912:	42b5      	cmp	r5, r6
 8009914:	d11a      	bne.n	800994c <_printf_common+0xc8>
 8009916:	2000      	movs	r0, #0
 8009918:	e008      	b.n	800992c <_printf_common+0xa8>
 800991a:	2301      	movs	r3, #1
 800991c:	4652      	mov	r2, sl
 800991e:	4641      	mov	r1, r8
 8009920:	4638      	mov	r0, r7
 8009922:	47c8      	blx	r9
 8009924:	3001      	adds	r0, #1
 8009926:	d103      	bne.n	8009930 <_printf_common+0xac>
 8009928:	f04f 30ff 	mov.w	r0, #4294967295
 800992c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009930:	3501      	adds	r5, #1
 8009932:	e7c6      	b.n	80098c2 <_printf_common+0x3e>
 8009934:	18e1      	adds	r1, r4, r3
 8009936:	1c5a      	adds	r2, r3, #1
 8009938:	2030      	movs	r0, #48	@ 0x30
 800993a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800993e:	4422      	add	r2, r4
 8009940:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009944:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009948:	3302      	adds	r3, #2
 800994a:	e7c7      	b.n	80098dc <_printf_common+0x58>
 800994c:	2301      	movs	r3, #1
 800994e:	4622      	mov	r2, r4
 8009950:	4641      	mov	r1, r8
 8009952:	4638      	mov	r0, r7
 8009954:	47c8      	blx	r9
 8009956:	3001      	adds	r0, #1
 8009958:	d0e6      	beq.n	8009928 <_printf_common+0xa4>
 800995a:	3601      	adds	r6, #1
 800995c:	e7d9      	b.n	8009912 <_printf_common+0x8e>
	...

08009960 <_printf_i>:
 8009960:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009964:	7e0f      	ldrb	r7, [r1, #24]
 8009966:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009968:	2f78      	cmp	r7, #120	@ 0x78
 800996a:	4691      	mov	r9, r2
 800996c:	4680      	mov	r8, r0
 800996e:	460c      	mov	r4, r1
 8009970:	469a      	mov	sl, r3
 8009972:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009976:	d807      	bhi.n	8009988 <_printf_i+0x28>
 8009978:	2f62      	cmp	r7, #98	@ 0x62
 800997a:	d80a      	bhi.n	8009992 <_printf_i+0x32>
 800997c:	2f00      	cmp	r7, #0
 800997e:	f000 80d2 	beq.w	8009b26 <_printf_i+0x1c6>
 8009982:	2f58      	cmp	r7, #88	@ 0x58
 8009984:	f000 80b9 	beq.w	8009afa <_printf_i+0x19a>
 8009988:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800998c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009990:	e03a      	b.n	8009a08 <_printf_i+0xa8>
 8009992:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009996:	2b15      	cmp	r3, #21
 8009998:	d8f6      	bhi.n	8009988 <_printf_i+0x28>
 800999a:	a101      	add	r1, pc, #4	@ (adr r1, 80099a0 <_printf_i+0x40>)
 800999c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80099a0:	080099f9 	.word	0x080099f9
 80099a4:	08009a0d 	.word	0x08009a0d
 80099a8:	08009989 	.word	0x08009989
 80099ac:	08009989 	.word	0x08009989
 80099b0:	08009989 	.word	0x08009989
 80099b4:	08009989 	.word	0x08009989
 80099b8:	08009a0d 	.word	0x08009a0d
 80099bc:	08009989 	.word	0x08009989
 80099c0:	08009989 	.word	0x08009989
 80099c4:	08009989 	.word	0x08009989
 80099c8:	08009989 	.word	0x08009989
 80099cc:	08009b0d 	.word	0x08009b0d
 80099d0:	08009a37 	.word	0x08009a37
 80099d4:	08009ac7 	.word	0x08009ac7
 80099d8:	08009989 	.word	0x08009989
 80099dc:	08009989 	.word	0x08009989
 80099e0:	08009b2f 	.word	0x08009b2f
 80099e4:	08009989 	.word	0x08009989
 80099e8:	08009a37 	.word	0x08009a37
 80099ec:	08009989 	.word	0x08009989
 80099f0:	08009989 	.word	0x08009989
 80099f4:	08009acf 	.word	0x08009acf
 80099f8:	6833      	ldr	r3, [r6, #0]
 80099fa:	1d1a      	adds	r2, r3, #4
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	6032      	str	r2, [r6, #0]
 8009a00:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009a04:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009a08:	2301      	movs	r3, #1
 8009a0a:	e09d      	b.n	8009b48 <_printf_i+0x1e8>
 8009a0c:	6833      	ldr	r3, [r6, #0]
 8009a0e:	6820      	ldr	r0, [r4, #0]
 8009a10:	1d19      	adds	r1, r3, #4
 8009a12:	6031      	str	r1, [r6, #0]
 8009a14:	0606      	lsls	r6, r0, #24
 8009a16:	d501      	bpl.n	8009a1c <_printf_i+0xbc>
 8009a18:	681d      	ldr	r5, [r3, #0]
 8009a1a:	e003      	b.n	8009a24 <_printf_i+0xc4>
 8009a1c:	0645      	lsls	r5, r0, #25
 8009a1e:	d5fb      	bpl.n	8009a18 <_printf_i+0xb8>
 8009a20:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009a24:	2d00      	cmp	r5, #0
 8009a26:	da03      	bge.n	8009a30 <_printf_i+0xd0>
 8009a28:	232d      	movs	r3, #45	@ 0x2d
 8009a2a:	426d      	negs	r5, r5
 8009a2c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009a30:	4859      	ldr	r0, [pc, #356]	@ (8009b98 <_printf_i+0x238>)
 8009a32:	230a      	movs	r3, #10
 8009a34:	e011      	b.n	8009a5a <_printf_i+0xfa>
 8009a36:	6821      	ldr	r1, [r4, #0]
 8009a38:	6833      	ldr	r3, [r6, #0]
 8009a3a:	0608      	lsls	r0, r1, #24
 8009a3c:	f853 5b04 	ldr.w	r5, [r3], #4
 8009a40:	d402      	bmi.n	8009a48 <_printf_i+0xe8>
 8009a42:	0649      	lsls	r1, r1, #25
 8009a44:	bf48      	it	mi
 8009a46:	b2ad      	uxthmi	r5, r5
 8009a48:	2f6f      	cmp	r7, #111	@ 0x6f
 8009a4a:	4853      	ldr	r0, [pc, #332]	@ (8009b98 <_printf_i+0x238>)
 8009a4c:	6033      	str	r3, [r6, #0]
 8009a4e:	bf14      	ite	ne
 8009a50:	230a      	movne	r3, #10
 8009a52:	2308      	moveq	r3, #8
 8009a54:	2100      	movs	r1, #0
 8009a56:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009a5a:	6866      	ldr	r6, [r4, #4]
 8009a5c:	60a6      	str	r6, [r4, #8]
 8009a5e:	2e00      	cmp	r6, #0
 8009a60:	bfa2      	ittt	ge
 8009a62:	6821      	ldrge	r1, [r4, #0]
 8009a64:	f021 0104 	bicge.w	r1, r1, #4
 8009a68:	6021      	strge	r1, [r4, #0]
 8009a6a:	b90d      	cbnz	r5, 8009a70 <_printf_i+0x110>
 8009a6c:	2e00      	cmp	r6, #0
 8009a6e:	d04b      	beq.n	8009b08 <_printf_i+0x1a8>
 8009a70:	4616      	mov	r6, r2
 8009a72:	fbb5 f1f3 	udiv	r1, r5, r3
 8009a76:	fb03 5711 	mls	r7, r3, r1, r5
 8009a7a:	5dc7      	ldrb	r7, [r0, r7]
 8009a7c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009a80:	462f      	mov	r7, r5
 8009a82:	42bb      	cmp	r3, r7
 8009a84:	460d      	mov	r5, r1
 8009a86:	d9f4      	bls.n	8009a72 <_printf_i+0x112>
 8009a88:	2b08      	cmp	r3, #8
 8009a8a:	d10b      	bne.n	8009aa4 <_printf_i+0x144>
 8009a8c:	6823      	ldr	r3, [r4, #0]
 8009a8e:	07df      	lsls	r7, r3, #31
 8009a90:	d508      	bpl.n	8009aa4 <_printf_i+0x144>
 8009a92:	6923      	ldr	r3, [r4, #16]
 8009a94:	6861      	ldr	r1, [r4, #4]
 8009a96:	4299      	cmp	r1, r3
 8009a98:	bfde      	ittt	le
 8009a9a:	2330      	movle	r3, #48	@ 0x30
 8009a9c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009aa0:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009aa4:	1b92      	subs	r2, r2, r6
 8009aa6:	6122      	str	r2, [r4, #16]
 8009aa8:	f8cd a000 	str.w	sl, [sp]
 8009aac:	464b      	mov	r3, r9
 8009aae:	aa03      	add	r2, sp, #12
 8009ab0:	4621      	mov	r1, r4
 8009ab2:	4640      	mov	r0, r8
 8009ab4:	f7ff fee6 	bl	8009884 <_printf_common>
 8009ab8:	3001      	adds	r0, #1
 8009aba:	d14a      	bne.n	8009b52 <_printf_i+0x1f2>
 8009abc:	f04f 30ff 	mov.w	r0, #4294967295
 8009ac0:	b004      	add	sp, #16
 8009ac2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ac6:	6823      	ldr	r3, [r4, #0]
 8009ac8:	f043 0320 	orr.w	r3, r3, #32
 8009acc:	6023      	str	r3, [r4, #0]
 8009ace:	4833      	ldr	r0, [pc, #204]	@ (8009b9c <_printf_i+0x23c>)
 8009ad0:	2778      	movs	r7, #120	@ 0x78
 8009ad2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009ad6:	6823      	ldr	r3, [r4, #0]
 8009ad8:	6831      	ldr	r1, [r6, #0]
 8009ada:	061f      	lsls	r7, r3, #24
 8009adc:	f851 5b04 	ldr.w	r5, [r1], #4
 8009ae0:	d402      	bmi.n	8009ae8 <_printf_i+0x188>
 8009ae2:	065f      	lsls	r7, r3, #25
 8009ae4:	bf48      	it	mi
 8009ae6:	b2ad      	uxthmi	r5, r5
 8009ae8:	6031      	str	r1, [r6, #0]
 8009aea:	07d9      	lsls	r1, r3, #31
 8009aec:	bf44      	itt	mi
 8009aee:	f043 0320 	orrmi.w	r3, r3, #32
 8009af2:	6023      	strmi	r3, [r4, #0]
 8009af4:	b11d      	cbz	r5, 8009afe <_printf_i+0x19e>
 8009af6:	2310      	movs	r3, #16
 8009af8:	e7ac      	b.n	8009a54 <_printf_i+0xf4>
 8009afa:	4827      	ldr	r0, [pc, #156]	@ (8009b98 <_printf_i+0x238>)
 8009afc:	e7e9      	b.n	8009ad2 <_printf_i+0x172>
 8009afe:	6823      	ldr	r3, [r4, #0]
 8009b00:	f023 0320 	bic.w	r3, r3, #32
 8009b04:	6023      	str	r3, [r4, #0]
 8009b06:	e7f6      	b.n	8009af6 <_printf_i+0x196>
 8009b08:	4616      	mov	r6, r2
 8009b0a:	e7bd      	b.n	8009a88 <_printf_i+0x128>
 8009b0c:	6833      	ldr	r3, [r6, #0]
 8009b0e:	6825      	ldr	r5, [r4, #0]
 8009b10:	6961      	ldr	r1, [r4, #20]
 8009b12:	1d18      	adds	r0, r3, #4
 8009b14:	6030      	str	r0, [r6, #0]
 8009b16:	062e      	lsls	r6, r5, #24
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	d501      	bpl.n	8009b20 <_printf_i+0x1c0>
 8009b1c:	6019      	str	r1, [r3, #0]
 8009b1e:	e002      	b.n	8009b26 <_printf_i+0x1c6>
 8009b20:	0668      	lsls	r0, r5, #25
 8009b22:	d5fb      	bpl.n	8009b1c <_printf_i+0x1bc>
 8009b24:	8019      	strh	r1, [r3, #0]
 8009b26:	2300      	movs	r3, #0
 8009b28:	6123      	str	r3, [r4, #16]
 8009b2a:	4616      	mov	r6, r2
 8009b2c:	e7bc      	b.n	8009aa8 <_printf_i+0x148>
 8009b2e:	6833      	ldr	r3, [r6, #0]
 8009b30:	1d1a      	adds	r2, r3, #4
 8009b32:	6032      	str	r2, [r6, #0]
 8009b34:	681e      	ldr	r6, [r3, #0]
 8009b36:	6862      	ldr	r2, [r4, #4]
 8009b38:	2100      	movs	r1, #0
 8009b3a:	4630      	mov	r0, r6
 8009b3c:	f7f6 fb68 	bl	8000210 <memchr>
 8009b40:	b108      	cbz	r0, 8009b46 <_printf_i+0x1e6>
 8009b42:	1b80      	subs	r0, r0, r6
 8009b44:	6060      	str	r0, [r4, #4]
 8009b46:	6863      	ldr	r3, [r4, #4]
 8009b48:	6123      	str	r3, [r4, #16]
 8009b4a:	2300      	movs	r3, #0
 8009b4c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009b50:	e7aa      	b.n	8009aa8 <_printf_i+0x148>
 8009b52:	6923      	ldr	r3, [r4, #16]
 8009b54:	4632      	mov	r2, r6
 8009b56:	4649      	mov	r1, r9
 8009b58:	4640      	mov	r0, r8
 8009b5a:	47d0      	blx	sl
 8009b5c:	3001      	adds	r0, #1
 8009b5e:	d0ad      	beq.n	8009abc <_printf_i+0x15c>
 8009b60:	6823      	ldr	r3, [r4, #0]
 8009b62:	079b      	lsls	r3, r3, #30
 8009b64:	d413      	bmi.n	8009b8e <_printf_i+0x22e>
 8009b66:	68e0      	ldr	r0, [r4, #12]
 8009b68:	9b03      	ldr	r3, [sp, #12]
 8009b6a:	4298      	cmp	r0, r3
 8009b6c:	bfb8      	it	lt
 8009b6e:	4618      	movlt	r0, r3
 8009b70:	e7a6      	b.n	8009ac0 <_printf_i+0x160>
 8009b72:	2301      	movs	r3, #1
 8009b74:	4632      	mov	r2, r6
 8009b76:	4649      	mov	r1, r9
 8009b78:	4640      	mov	r0, r8
 8009b7a:	47d0      	blx	sl
 8009b7c:	3001      	adds	r0, #1
 8009b7e:	d09d      	beq.n	8009abc <_printf_i+0x15c>
 8009b80:	3501      	adds	r5, #1
 8009b82:	68e3      	ldr	r3, [r4, #12]
 8009b84:	9903      	ldr	r1, [sp, #12]
 8009b86:	1a5b      	subs	r3, r3, r1
 8009b88:	42ab      	cmp	r3, r5
 8009b8a:	dcf2      	bgt.n	8009b72 <_printf_i+0x212>
 8009b8c:	e7eb      	b.n	8009b66 <_printf_i+0x206>
 8009b8e:	2500      	movs	r5, #0
 8009b90:	f104 0619 	add.w	r6, r4, #25
 8009b94:	e7f5      	b.n	8009b82 <_printf_i+0x222>
 8009b96:	bf00      	nop
 8009b98:	08011346 	.word	0x08011346
 8009b9c:	08011357 	.word	0x08011357

08009ba0 <_scanf_float>:
 8009ba0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ba4:	b087      	sub	sp, #28
 8009ba6:	4617      	mov	r7, r2
 8009ba8:	9303      	str	r3, [sp, #12]
 8009baa:	688b      	ldr	r3, [r1, #8]
 8009bac:	1e5a      	subs	r2, r3, #1
 8009bae:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8009bb2:	bf81      	itttt	hi
 8009bb4:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8009bb8:	eb03 0b05 	addhi.w	fp, r3, r5
 8009bbc:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8009bc0:	608b      	strhi	r3, [r1, #8]
 8009bc2:	680b      	ldr	r3, [r1, #0]
 8009bc4:	460a      	mov	r2, r1
 8009bc6:	f04f 0500 	mov.w	r5, #0
 8009bca:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8009bce:	f842 3b1c 	str.w	r3, [r2], #28
 8009bd2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8009bd6:	4680      	mov	r8, r0
 8009bd8:	460c      	mov	r4, r1
 8009bda:	bf98      	it	ls
 8009bdc:	f04f 0b00 	movls.w	fp, #0
 8009be0:	9201      	str	r2, [sp, #4]
 8009be2:	4616      	mov	r6, r2
 8009be4:	46aa      	mov	sl, r5
 8009be6:	46a9      	mov	r9, r5
 8009be8:	9502      	str	r5, [sp, #8]
 8009bea:	68a2      	ldr	r2, [r4, #8]
 8009bec:	b152      	cbz	r2, 8009c04 <_scanf_float+0x64>
 8009bee:	683b      	ldr	r3, [r7, #0]
 8009bf0:	781b      	ldrb	r3, [r3, #0]
 8009bf2:	2b4e      	cmp	r3, #78	@ 0x4e
 8009bf4:	d864      	bhi.n	8009cc0 <_scanf_float+0x120>
 8009bf6:	2b40      	cmp	r3, #64	@ 0x40
 8009bf8:	d83c      	bhi.n	8009c74 <_scanf_float+0xd4>
 8009bfa:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8009bfe:	b2c8      	uxtb	r0, r1
 8009c00:	280e      	cmp	r0, #14
 8009c02:	d93a      	bls.n	8009c7a <_scanf_float+0xda>
 8009c04:	f1b9 0f00 	cmp.w	r9, #0
 8009c08:	d003      	beq.n	8009c12 <_scanf_float+0x72>
 8009c0a:	6823      	ldr	r3, [r4, #0]
 8009c0c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009c10:	6023      	str	r3, [r4, #0]
 8009c12:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009c16:	f1ba 0f01 	cmp.w	sl, #1
 8009c1a:	f200 8117 	bhi.w	8009e4c <_scanf_float+0x2ac>
 8009c1e:	9b01      	ldr	r3, [sp, #4]
 8009c20:	429e      	cmp	r6, r3
 8009c22:	f200 8108 	bhi.w	8009e36 <_scanf_float+0x296>
 8009c26:	2001      	movs	r0, #1
 8009c28:	b007      	add	sp, #28
 8009c2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c2e:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8009c32:	2a0d      	cmp	r2, #13
 8009c34:	d8e6      	bhi.n	8009c04 <_scanf_float+0x64>
 8009c36:	a101      	add	r1, pc, #4	@ (adr r1, 8009c3c <_scanf_float+0x9c>)
 8009c38:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8009c3c:	08009d83 	.word	0x08009d83
 8009c40:	08009c05 	.word	0x08009c05
 8009c44:	08009c05 	.word	0x08009c05
 8009c48:	08009c05 	.word	0x08009c05
 8009c4c:	08009de3 	.word	0x08009de3
 8009c50:	08009dbb 	.word	0x08009dbb
 8009c54:	08009c05 	.word	0x08009c05
 8009c58:	08009c05 	.word	0x08009c05
 8009c5c:	08009d91 	.word	0x08009d91
 8009c60:	08009c05 	.word	0x08009c05
 8009c64:	08009c05 	.word	0x08009c05
 8009c68:	08009c05 	.word	0x08009c05
 8009c6c:	08009c05 	.word	0x08009c05
 8009c70:	08009d49 	.word	0x08009d49
 8009c74:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8009c78:	e7db      	b.n	8009c32 <_scanf_float+0x92>
 8009c7a:	290e      	cmp	r1, #14
 8009c7c:	d8c2      	bhi.n	8009c04 <_scanf_float+0x64>
 8009c7e:	a001      	add	r0, pc, #4	@ (adr r0, 8009c84 <_scanf_float+0xe4>)
 8009c80:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8009c84:	08009d39 	.word	0x08009d39
 8009c88:	08009c05 	.word	0x08009c05
 8009c8c:	08009d39 	.word	0x08009d39
 8009c90:	08009dcf 	.word	0x08009dcf
 8009c94:	08009c05 	.word	0x08009c05
 8009c98:	08009ce1 	.word	0x08009ce1
 8009c9c:	08009d1f 	.word	0x08009d1f
 8009ca0:	08009d1f 	.word	0x08009d1f
 8009ca4:	08009d1f 	.word	0x08009d1f
 8009ca8:	08009d1f 	.word	0x08009d1f
 8009cac:	08009d1f 	.word	0x08009d1f
 8009cb0:	08009d1f 	.word	0x08009d1f
 8009cb4:	08009d1f 	.word	0x08009d1f
 8009cb8:	08009d1f 	.word	0x08009d1f
 8009cbc:	08009d1f 	.word	0x08009d1f
 8009cc0:	2b6e      	cmp	r3, #110	@ 0x6e
 8009cc2:	d809      	bhi.n	8009cd8 <_scanf_float+0x138>
 8009cc4:	2b60      	cmp	r3, #96	@ 0x60
 8009cc6:	d8b2      	bhi.n	8009c2e <_scanf_float+0x8e>
 8009cc8:	2b54      	cmp	r3, #84	@ 0x54
 8009cca:	d07b      	beq.n	8009dc4 <_scanf_float+0x224>
 8009ccc:	2b59      	cmp	r3, #89	@ 0x59
 8009cce:	d199      	bne.n	8009c04 <_scanf_float+0x64>
 8009cd0:	2d07      	cmp	r5, #7
 8009cd2:	d197      	bne.n	8009c04 <_scanf_float+0x64>
 8009cd4:	2508      	movs	r5, #8
 8009cd6:	e02c      	b.n	8009d32 <_scanf_float+0x192>
 8009cd8:	2b74      	cmp	r3, #116	@ 0x74
 8009cda:	d073      	beq.n	8009dc4 <_scanf_float+0x224>
 8009cdc:	2b79      	cmp	r3, #121	@ 0x79
 8009cde:	e7f6      	b.n	8009cce <_scanf_float+0x12e>
 8009ce0:	6821      	ldr	r1, [r4, #0]
 8009ce2:	05c8      	lsls	r0, r1, #23
 8009ce4:	d51b      	bpl.n	8009d1e <_scanf_float+0x17e>
 8009ce6:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8009cea:	6021      	str	r1, [r4, #0]
 8009cec:	f109 0901 	add.w	r9, r9, #1
 8009cf0:	f1bb 0f00 	cmp.w	fp, #0
 8009cf4:	d003      	beq.n	8009cfe <_scanf_float+0x15e>
 8009cf6:	3201      	adds	r2, #1
 8009cf8:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009cfc:	60a2      	str	r2, [r4, #8]
 8009cfe:	68a3      	ldr	r3, [r4, #8]
 8009d00:	3b01      	subs	r3, #1
 8009d02:	60a3      	str	r3, [r4, #8]
 8009d04:	6923      	ldr	r3, [r4, #16]
 8009d06:	3301      	adds	r3, #1
 8009d08:	6123      	str	r3, [r4, #16]
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	3b01      	subs	r3, #1
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	607b      	str	r3, [r7, #4]
 8009d12:	f340 8087 	ble.w	8009e24 <_scanf_float+0x284>
 8009d16:	683b      	ldr	r3, [r7, #0]
 8009d18:	3301      	adds	r3, #1
 8009d1a:	603b      	str	r3, [r7, #0]
 8009d1c:	e765      	b.n	8009bea <_scanf_float+0x4a>
 8009d1e:	eb1a 0105 	adds.w	r1, sl, r5
 8009d22:	f47f af6f 	bne.w	8009c04 <_scanf_float+0x64>
 8009d26:	6822      	ldr	r2, [r4, #0]
 8009d28:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8009d2c:	6022      	str	r2, [r4, #0]
 8009d2e:	460d      	mov	r5, r1
 8009d30:	468a      	mov	sl, r1
 8009d32:	f806 3b01 	strb.w	r3, [r6], #1
 8009d36:	e7e2      	b.n	8009cfe <_scanf_float+0x15e>
 8009d38:	6822      	ldr	r2, [r4, #0]
 8009d3a:	0610      	lsls	r0, r2, #24
 8009d3c:	f57f af62 	bpl.w	8009c04 <_scanf_float+0x64>
 8009d40:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009d44:	6022      	str	r2, [r4, #0]
 8009d46:	e7f4      	b.n	8009d32 <_scanf_float+0x192>
 8009d48:	f1ba 0f00 	cmp.w	sl, #0
 8009d4c:	d10e      	bne.n	8009d6c <_scanf_float+0x1cc>
 8009d4e:	f1b9 0f00 	cmp.w	r9, #0
 8009d52:	d10e      	bne.n	8009d72 <_scanf_float+0x1d2>
 8009d54:	6822      	ldr	r2, [r4, #0]
 8009d56:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8009d5a:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8009d5e:	d108      	bne.n	8009d72 <_scanf_float+0x1d2>
 8009d60:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8009d64:	6022      	str	r2, [r4, #0]
 8009d66:	f04f 0a01 	mov.w	sl, #1
 8009d6a:	e7e2      	b.n	8009d32 <_scanf_float+0x192>
 8009d6c:	f1ba 0f02 	cmp.w	sl, #2
 8009d70:	d055      	beq.n	8009e1e <_scanf_float+0x27e>
 8009d72:	2d01      	cmp	r5, #1
 8009d74:	d002      	beq.n	8009d7c <_scanf_float+0x1dc>
 8009d76:	2d04      	cmp	r5, #4
 8009d78:	f47f af44 	bne.w	8009c04 <_scanf_float+0x64>
 8009d7c:	3501      	adds	r5, #1
 8009d7e:	b2ed      	uxtb	r5, r5
 8009d80:	e7d7      	b.n	8009d32 <_scanf_float+0x192>
 8009d82:	f1ba 0f01 	cmp.w	sl, #1
 8009d86:	f47f af3d 	bne.w	8009c04 <_scanf_float+0x64>
 8009d8a:	f04f 0a02 	mov.w	sl, #2
 8009d8e:	e7d0      	b.n	8009d32 <_scanf_float+0x192>
 8009d90:	b97d      	cbnz	r5, 8009db2 <_scanf_float+0x212>
 8009d92:	f1b9 0f00 	cmp.w	r9, #0
 8009d96:	f47f af38 	bne.w	8009c0a <_scanf_float+0x6a>
 8009d9a:	6822      	ldr	r2, [r4, #0]
 8009d9c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8009da0:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8009da4:	f040 8108 	bne.w	8009fb8 <_scanf_float+0x418>
 8009da8:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8009dac:	6022      	str	r2, [r4, #0]
 8009dae:	2501      	movs	r5, #1
 8009db0:	e7bf      	b.n	8009d32 <_scanf_float+0x192>
 8009db2:	2d03      	cmp	r5, #3
 8009db4:	d0e2      	beq.n	8009d7c <_scanf_float+0x1dc>
 8009db6:	2d05      	cmp	r5, #5
 8009db8:	e7de      	b.n	8009d78 <_scanf_float+0x1d8>
 8009dba:	2d02      	cmp	r5, #2
 8009dbc:	f47f af22 	bne.w	8009c04 <_scanf_float+0x64>
 8009dc0:	2503      	movs	r5, #3
 8009dc2:	e7b6      	b.n	8009d32 <_scanf_float+0x192>
 8009dc4:	2d06      	cmp	r5, #6
 8009dc6:	f47f af1d 	bne.w	8009c04 <_scanf_float+0x64>
 8009dca:	2507      	movs	r5, #7
 8009dcc:	e7b1      	b.n	8009d32 <_scanf_float+0x192>
 8009dce:	6822      	ldr	r2, [r4, #0]
 8009dd0:	0591      	lsls	r1, r2, #22
 8009dd2:	f57f af17 	bpl.w	8009c04 <_scanf_float+0x64>
 8009dd6:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8009dda:	6022      	str	r2, [r4, #0]
 8009ddc:	f8cd 9008 	str.w	r9, [sp, #8]
 8009de0:	e7a7      	b.n	8009d32 <_scanf_float+0x192>
 8009de2:	6822      	ldr	r2, [r4, #0]
 8009de4:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8009de8:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8009dec:	d006      	beq.n	8009dfc <_scanf_float+0x25c>
 8009dee:	0550      	lsls	r0, r2, #21
 8009df0:	f57f af08 	bpl.w	8009c04 <_scanf_float+0x64>
 8009df4:	f1b9 0f00 	cmp.w	r9, #0
 8009df8:	f000 80de 	beq.w	8009fb8 <_scanf_float+0x418>
 8009dfc:	0591      	lsls	r1, r2, #22
 8009dfe:	bf58      	it	pl
 8009e00:	9902      	ldrpl	r1, [sp, #8]
 8009e02:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8009e06:	bf58      	it	pl
 8009e08:	eba9 0101 	subpl.w	r1, r9, r1
 8009e0c:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8009e10:	bf58      	it	pl
 8009e12:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8009e16:	6022      	str	r2, [r4, #0]
 8009e18:	f04f 0900 	mov.w	r9, #0
 8009e1c:	e789      	b.n	8009d32 <_scanf_float+0x192>
 8009e1e:	f04f 0a03 	mov.w	sl, #3
 8009e22:	e786      	b.n	8009d32 <_scanf_float+0x192>
 8009e24:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8009e28:	4639      	mov	r1, r7
 8009e2a:	4640      	mov	r0, r8
 8009e2c:	4798      	blx	r3
 8009e2e:	2800      	cmp	r0, #0
 8009e30:	f43f aedb 	beq.w	8009bea <_scanf_float+0x4a>
 8009e34:	e6e6      	b.n	8009c04 <_scanf_float+0x64>
 8009e36:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009e3a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009e3e:	463a      	mov	r2, r7
 8009e40:	4640      	mov	r0, r8
 8009e42:	4798      	blx	r3
 8009e44:	6923      	ldr	r3, [r4, #16]
 8009e46:	3b01      	subs	r3, #1
 8009e48:	6123      	str	r3, [r4, #16]
 8009e4a:	e6e8      	b.n	8009c1e <_scanf_float+0x7e>
 8009e4c:	1e6b      	subs	r3, r5, #1
 8009e4e:	2b06      	cmp	r3, #6
 8009e50:	d824      	bhi.n	8009e9c <_scanf_float+0x2fc>
 8009e52:	2d02      	cmp	r5, #2
 8009e54:	d836      	bhi.n	8009ec4 <_scanf_float+0x324>
 8009e56:	9b01      	ldr	r3, [sp, #4]
 8009e58:	429e      	cmp	r6, r3
 8009e5a:	f67f aee4 	bls.w	8009c26 <_scanf_float+0x86>
 8009e5e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009e62:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009e66:	463a      	mov	r2, r7
 8009e68:	4640      	mov	r0, r8
 8009e6a:	4798      	blx	r3
 8009e6c:	6923      	ldr	r3, [r4, #16]
 8009e6e:	3b01      	subs	r3, #1
 8009e70:	6123      	str	r3, [r4, #16]
 8009e72:	e7f0      	b.n	8009e56 <_scanf_float+0x2b6>
 8009e74:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009e78:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8009e7c:	463a      	mov	r2, r7
 8009e7e:	4640      	mov	r0, r8
 8009e80:	4798      	blx	r3
 8009e82:	6923      	ldr	r3, [r4, #16]
 8009e84:	3b01      	subs	r3, #1
 8009e86:	6123      	str	r3, [r4, #16]
 8009e88:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009e8c:	fa5f fa8a 	uxtb.w	sl, sl
 8009e90:	f1ba 0f02 	cmp.w	sl, #2
 8009e94:	d1ee      	bne.n	8009e74 <_scanf_float+0x2d4>
 8009e96:	3d03      	subs	r5, #3
 8009e98:	b2ed      	uxtb	r5, r5
 8009e9a:	1b76      	subs	r6, r6, r5
 8009e9c:	6823      	ldr	r3, [r4, #0]
 8009e9e:	05da      	lsls	r2, r3, #23
 8009ea0:	d530      	bpl.n	8009f04 <_scanf_float+0x364>
 8009ea2:	055b      	lsls	r3, r3, #21
 8009ea4:	d511      	bpl.n	8009eca <_scanf_float+0x32a>
 8009ea6:	9b01      	ldr	r3, [sp, #4]
 8009ea8:	429e      	cmp	r6, r3
 8009eaa:	f67f aebc 	bls.w	8009c26 <_scanf_float+0x86>
 8009eae:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009eb2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009eb6:	463a      	mov	r2, r7
 8009eb8:	4640      	mov	r0, r8
 8009eba:	4798      	blx	r3
 8009ebc:	6923      	ldr	r3, [r4, #16]
 8009ebe:	3b01      	subs	r3, #1
 8009ec0:	6123      	str	r3, [r4, #16]
 8009ec2:	e7f0      	b.n	8009ea6 <_scanf_float+0x306>
 8009ec4:	46aa      	mov	sl, r5
 8009ec6:	46b3      	mov	fp, r6
 8009ec8:	e7de      	b.n	8009e88 <_scanf_float+0x2e8>
 8009eca:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8009ece:	6923      	ldr	r3, [r4, #16]
 8009ed0:	2965      	cmp	r1, #101	@ 0x65
 8009ed2:	f103 33ff 	add.w	r3, r3, #4294967295
 8009ed6:	f106 35ff 	add.w	r5, r6, #4294967295
 8009eda:	6123      	str	r3, [r4, #16]
 8009edc:	d00c      	beq.n	8009ef8 <_scanf_float+0x358>
 8009ede:	2945      	cmp	r1, #69	@ 0x45
 8009ee0:	d00a      	beq.n	8009ef8 <_scanf_float+0x358>
 8009ee2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009ee6:	463a      	mov	r2, r7
 8009ee8:	4640      	mov	r0, r8
 8009eea:	4798      	blx	r3
 8009eec:	6923      	ldr	r3, [r4, #16]
 8009eee:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8009ef2:	3b01      	subs	r3, #1
 8009ef4:	1eb5      	subs	r5, r6, #2
 8009ef6:	6123      	str	r3, [r4, #16]
 8009ef8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009efc:	463a      	mov	r2, r7
 8009efe:	4640      	mov	r0, r8
 8009f00:	4798      	blx	r3
 8009f02:	462e      	mov	r6, r5
 8009f04:	6822      	ldr	r2, [r4, #0]
 8009f06:	f012 0210 	ands.w	r2, r2, #16
 8009f0a:	d001      	beq.n	8009f10 <_scanf_float+0x370>
 8009f0c:	2000      	movs	r0, #0
 8009f0e:	e68b      	b.n	8009c28 <_scanf_float+0x88>
 8009f10:	7032      	strb	r2, [r6, #0]
 8009f12:	6823      	ldr	r3, [r4, #0]
 8009f14:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8009f18:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009f1c:	d11c      	bne.n	8009f58 <_scanf_float+0x3b8>
 8009f1e:	9b02      	ldr	r3, [sp, #8]
 8009f20:	454b      	cmp	r3, r9
 8009f22:	eba3 0209 	sub.w	r2, r3, r9
 8009f26:	d123      	bne.n	8009f70 <_scanf_float+0x3d0>
 8009f28:	9901      	ldr	r1, [sp, #4]
 8009f2a:	2200      	movs	r2, #0
 8009f2c:	4640      	mov	r0, r8
 8009f2e:	f002 fc6f 	bl	800c810 <_strtod_r>
 8009f32:	9b03      	ldr	r3, [sp, #12]
 8009f34:	6821      	ldr	r1, [r4, #0]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	f011 0f02 	tst.w	r1, #2
 8009f3c:	ec57 6b10 	vmov	r6, r7, d0
 8009f40:	f103 0204 	add.w	r2, r3, #4
 8009f44:	d01f      	beq.n	8009f86 <_scanf_float+0x3e6>
 8009f46:	9903      	ldr	r1, [sp, #12]
 8009f48:	600a      	str	r2, [r1, #0]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	e9c3 6700 	strd	r6, r7, [r3]
 8009f50:	68e3      	ldr	r3, [r4, #12]
 8009f52:	3301      	adds	r3, #1
 8009f54:	60e3      	str	r3, [r4, #12]
 8009f56:	e7d9      	b.n	8009f0c <_scanf_float+0x36c>
 8009f58:	9b04      	ldr	r3, [sp, #16]
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d0e4      	beq.n	8009f28 <_scanf_float+0x388>
 8009f5e:	9905      	ldr	r1, [sp, #20]
 8009f60:	230a      	movs	r3, #10
 8009f62:	3101      	adds	r1, #1
 8009f64:	4640      	mov	r0, r8
 8009f66:	f002 fcd3 	bl	800c910 <_strtol_r>
 8009f6a:	9b04      	ldr	r3, [sp, #16]
 8009f6c:	9e05      	ldr	r6, [sp, #20]
 8009f6e:	1ac2      	subs	r2, r0, r3
 8009f70:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8009f74:	429e      	cmp	r6, r3
 8009f76:	bf28      	it	cs
 8009f78:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8009f7c:	4910      	ldr	r1, [pc, #64]	@ (8009fc0 <_scanf_float+0x420>)
 8009f7e:	4630      	mov	r0, r6
 8009f80:	f000 f954 	bl	800a22c <siprintf>
 8009f84:	e7d0      	b.n	8009f28 <_scanf_float+0x388>
 8009f86:	f011 0f04 	tst.w	r1, #4
 8009f8a:	9903      	ldr	r1, [sp, #12]
 8009f8c:	600a      	str	r2, [r1, #0]
 8009f8e:	d1dc      	bne.n	8009f4a <_scanf_float+0x3aa>
 8009f90:	681d      	ldr	r5, [r3, #0]
 8009f92:	4632      	mov	r2, r6
 8009f94:	463b      	mov	r3, r7
 8009f96:	4630      	mov	r0, r6
 8009f98:	4639      	mov	r1, r7
 8009f9a:	f7f6 fde7 	bl	8000b6c <__aeabi_dcmpun>
 8009f9e:	b128      	cbz	r0, 8009fac <_scanf_float+0x40c>
 8009fa0:	4808      	ldr	r0, [pc, #32]	@ (8009fc4 <_scanf_float+0x424>)
 8009fa2:	f000 fae1 	bl	800a568 <nanf>
 8009fa6:	ed85 0a00 	vstr	s0, [r5]
 8009faa:	e7d1      	b.n	8009f50 <_scanf_float+0x3b0>
 8009fac:	4630      	mov	r0, r6
 8009fae:	4639      	mov	r1, r7
 8009fb0:	f7f6 fe3a 	bl	8000c28 <__aeabi_d2f>
 8009fb4:	6028      	str	r0, [r5, #0]
 8009fb6:	e7cb      	b.n	8009f50 <_scanf_float+0x3b0>
 8009fb8:	f04f 0900 	mov.w	r9, #0
 8009fbc:	e629      	b.n	8009c12 <_scanf_float+0x72>
 8009fbe:	bf00      	nop
 8009fc0:	08011368 	.word	0x08011368
 8009fc4:	080116fd 	.word	0x080116fd

08009fc8 <std>:
 8009fc8:	2300      	movs	r3, #0
 8009fca:	b510      	push	{r4, lr}
 8009fcc:	4604      	mov	r4, r0
 8009fce:	e9c0 3300 	strd	r3, r3, [r0]
 8009fd2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009fd6:	6083      	str	r3, [r0, #8]
 8009fd8:	8181      	strh	r1, [r0, #12]
 8009fda:	6643      	str	r3, [r0, #100]	@ 0x64
 8009fdc:	81c2      	strh	r2, [r0, #14]
 8009fde:	6183      	str	r3, [r0, #24]
 8009fe0:	4619      	mov	r1, r3
 8009fe2:	2208      	movs	r2, #8
 8009fe4:	305c      	adds	r0, #92	@ 0x5c
 8009fe6:	f000 fa19 	bl	800a41c <memset>
 8009fea:	4b0d      	ldr	r3, [pc, #52]	@ (800a020 <std+0x58>)
 8009fec:	6263      	str	r3, [r4, #36]	@ 0x24
 8009fee:	4b0d      	ldr	r3, [pc, #52]	@ (800a024 <std+0x5c>)
 8009ff0:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009ff2:	4b0d      	ldr	r3, [pc, #52]	@ (800a028 <std+0x60>)
 8009ff4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009ff6:	4b0d      	ldr	r3, [pc, #52]	@ (800a02c <std+0x64>)
 8009ff8:	6323      	str	r3, [r4, #48]	@ 0x30
 8009ffa:	4b0d      	ldr	r3, [pc, #52]	@ (800a030 <std+0x68>)
 8009ffc:	6224      	str	r4, [r4, #32]
 8009ffe:	429c      	cmp	r4, r3
 800a000:	d006      	beq.n	800a010 <std+0x48>
 800a002:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a006:	4294      	cmp	r4, r2
 800a008:	d002      	beq.n	800a010 <std+0x48>
 800a00a:	33d0      	adds	r3, #208	@ 0xd0
 800a00c:	429c      	cmp	r4, r3
 800a00e:	d105      	bne.n	800a01c <std+0x54>
 800a010:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a014:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a018:	f000 ba8c 	b.w	800a534 <__retarget_lock_init_recursive>
 800a01c:	bd10      	pop	{r4, pc}
 800a01e:	bf00      	nop
 800a020:	0800a26d 	.word	0x0800a26d
 800a024:	0800a28f 	.word	0x0800a28f
 800a028:	0800a2c7 	.word	0x0800a2c7
 800a02c:	0800a2eb 	.word	0x0800a2eb
 800a030:	200005d0 	.word	0x200005d0

0800a034 <stdio_exit_handler>:
 800a034:	4a02      	ldr	r2, [pc, #8]	@ (800a040 <stdio_exit_handler+0xc>)
 800a036:	4903      	ldr	r1, [pc, #12]	@ (800a044 <stdio_exit_handler+0x10>)
 800a038:	4803      	ldr	r0, [pc, #12]	@ (800a048 <stdio_exit_handler+0x14>)
 800a03a:	f000 b869 	b.w	800a110 <_fwalk_sglue>
 800a03e:	bf00      	nop
 800a040:	20000044 	.word	0x20000044
 800a044:	0800cf51 	.word	0x0800cf51
 800a048:	20000054 	.word	0x20000054

0800a04c <cleanup_stdio>:
 800a04c:	6841      	ldr	r1, [r0, #4]
 800a04e:	4b0c      	ldr	r3, [pc, #48]	@ (800a080 <cleanup_stdio+0x34>)
 800a050:	4299      	cmp	r1, r3
 800a052:	b510      	push	{r4, lr}
 800a054:	4604      	mov	r4, r0
 800a056:	d001      	beq.n	800a05c <cleanup_stdio+0x10>
 800a058:	f002 ff7a 	bl	800cf50 <_fflush_r>
 800a05c:	68a1      	ldr	r1, [r4, #8]
 800a05e:	4b09      	ldr	r3, [pc, #36]	@ (800a084 <cleanup_stdio+0x38>)
 800a060:	4299      	cmp	r1, r3
 800a062:	d002      	beq.n	800a06a <cleanup_stdio+0x1e>
 800a064:	4620      	mov	r0, r4
 800a066:	f002 ff73 	bl	800cf50 <_fflush_r>
 800a06a:	68e1      	ldr	r1, [r4, #12]
 800a06c:	4b06      	ldr	r3, [pc, #24]	@ (800a088 <cleanup_stdio+0x3c>)
 800a06e:	4299      	cmp	r1, r3
 800a070:	d004      	beq.n	800a07c <cleanup_stdio+0x30>
 800a072:	4620      	mov	r0, r4
 800a074:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a078:	f002 bf6a 	b.w	800cf50 <_fflush_r>
 800a07c:	bd10      	pop	{r4, pc}
 800a07e:	bf00      	nop
 800a080:	200005d0 	.word	0x200005d0
 800a084:	20000638 	.word	0x20000638
 800a088:	200006a0 	.word	0x200006a0

0800a08c <global_stdio_init.part.0>:
 800a08c:	b510      	push	{r4, lr}
 800a08e:	4b0b      	ldr	r3, [pc, #44]	@ (800a0bc <global_stdio_init.part.0+0x30>)
 800a090:	4c0b      	ldr	r4, [pc, #44]	@ (800a0c0 <global_stdio_init.part.0+0x34>)
 800a092:	4a0c      	ldr	r2, [pc, #48]	@ (800a0c4 <global_stdio_init.part.0+0x38>)
 800a094:	601a      	str	r2, [r3, #0]
 800a096:	4620      	mov	r0, r4
 800a098:	2200      	movs	r2, #0
 800a09a:	2104      	movs	r1, #4
 800a09c:	f7ff ff94 	bl	8009fc8 <std>
 800a0a0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a0a4:	2201      	movs	r2, #1
 800a0a6:	2109      	movs	r1, #9
 800a0a8:	f7ff ff8e 	bl	8009fc8 <std>
 800a0ac:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a0b0:	2202      	movs	r2, #2
 800a0b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a0b6:	2112      	movs	r1, #18
 800a0b8:	f7ff bf86 	b.w	8009fc8 <std>
 800a0bc:	20000708 	.word	0x20000708
 800a0c0:	200005d0 	.word	0x200005d0
 800a0c4:	0800a035 	.word	0x0800a035

0800a0c8 <__sfp_lock_acquire>:
 800a0c8:	4801      	ldr	r0, [pc, #4]	@ (800a0d0 <__sfp_lock_acquire+0x8>)
 800a0ca:	f000 ba34 	b.w	800a536 <__retarget_lock_acquire_recursive>
 800a0ce:	bf00      	nop
 800a0d0:	20000711 	.word	0x20000711

0800a0d4 <__sfp_lock_release>:
 800a0d4:	4801      	ldr	r0, [pc, #4]	@ (800a0dc <__sfp_lock_release+0x8>)
 800a0d6:	f000 ba2f 	b.w	800a538 <__retarget_lock_release_recursive>
 800a0da:	bf00      	nop
 800a0dc:	20000711 	.word	0x20000711

0800a0e0 <__sinit>:
 800a0e0:	b510      	push	{r4, lr}
 800a0e2:	4604      	mov	r4, r0
 800a0e4:	f7ff fff0 	bl	800a0c8 <__sfp_lock_acquire>
 800a0e8:	6a23      	ldr	r3, [r4, #32]
 800a0ea:	b11b      	cbz	r3, 800a0f4 <__sinit+0x14>
 800a0ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a0f0:	f7ff bff0 	b.w	800a0d4 <__sfp_lock_release>
 800a0f4:	4b04      	ldr	r3, [pc, #16]	@ (800a108 <__sinit+0x28>)
 800a0f6:	6223      	str	r3, [r4, #32]
 800a0f8:	4b04      	ldr	r3, [pc, #16]	@ (800a10c <__sinit+0x2c>)
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d1f5      	bne.n	800a0ec <__sinit+0xc>
 800a100:	f7ff ffc4 	bl	800a08c <global_stdio_init.part.0>
 800a104:	e7f2      	b.n	800a0ec <__sinit+0xc>
 800a106:	bf00      	nop
 800a108:	0800a04d 	.word	0x0800a04d
 800a10c:	20000708 	.word	0x20000708

0800a110 <_fwalk_sglue>:
 800a110:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a114:	4607      	mov	r7, r0
 800a116:	4688      	mov	r8, r1
 800a118:	4614      	mov	r4, r2
 800a11a:	2600      	movs	r6, #0
 800a11c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a120:	f1b9 0901 	subs.w	r9, r9, #1
 800a124:	d505      	bpl.n	800a132 <_fwalk_sglue+0x22>
 800a126:	6824      	ldr	r4, [r4, #0]
 800a128:	2c00      	cmp	r4, #0
 800a12a:	d1f7      	bne.n	800a11c <_fwalk_sglue+0xc>
 800a12c:	4630      	mov	r0, r6
 800a12e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a132:	89ab      	ldrh	r3, [r5, #12]
 800a134:	2b01      	cmp	r3, #1
 800a136:	d907      	bls.n	800a148 <_fwalk_sglue+0x38>
 800a138:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a13c:	3301      	adds	r3, #1
 800a13e:	d003      	beq.n	800a148 <_fwalk_sglue+0x38>
 800a140:	4629      	mov	r1, r5
 800a142:	4638      	mov	r0, r7
 800a144:	47c0      	blx	r8
 800a146:	4306      	orrs	r6, r0
 800a148:	3568      	adds	r5, #104	@ 0x68
 800a14a:	e7e9      	b.n	800a120 <_fwalk_sglue+0x10>

0800a14c <iprintf>:
 800a14c:	b40f      	push	{r0, r1, r2, r3}
 800a14e:	b507      	push	{r0, r1, r2, lr}
 800a150:	4906      	ldr	r1, [pc, #24]	@ (800a16c <iprintf+0x20>)
 800a152:	ab04      	add	r3, sp, #16
 800a154:	6808      	ldr	r0, [r1, #0]
 800a156:	f853 2b04 	ldr.w	r2, [r3], #4
 800a15a:	6881      	ldr	r1, [r0, #8]
 800a15c:	9301      	str	r3, [sp, #4]
 800a15e:	f002 fd5b 	bl	800cc18 <_vfiprintf_r>
 800a162:	b003      	add	sp, #12
 800a164:	f85d eb04 	ldr.w	lr, [sp], #4
 800a168:	b004      	add	sp, #16
 800a16a:	4770      	bx	lr
 800a16c:	20000050 	.word	0x20000050

0800a170 <_puts_r>:
 800a170:	6a03      	ldr	r3, [r0, #32]
 800a172:	b570      	push	{r4, r5, r6, lr}
 800a174:	6884      	ldr	r4, [r0, #8]
 800a176:	4605      	mov	r5, r0
 800a178:	460e      	mov	r6, r1
 800a17a:	b90b      	cbnz	r3, 800a180 <_puts_r+0x10>
 800a17c:	f7ff ffb0 	bl	800a0e0 <__sinit>
 800a180:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a182:	07db      	lsls	r3, r3, #31
 800a184:	d405      	bmi.n	800a192 <_puts_r+0x22>
 800a186:	89a3      	ldrh	r3, [r4, #12]
 800a188:	0598      	lsls	r0, r3, #22
 800a18a:	d402      	bmi.n	800a192 <_puts_r+0x22>
 800a18c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a18e:	f000 f9d2 	bl	800a536 <__retarget_lock_acquire_recursive>
 800a192:	89a3      	ldrh	r3, [r4, #12]
 800a194:	0719      	lsls	r1, r3, #28
 800a196:	d502      	bpl.n	800a19e <_puts_r+0x2e>
 800a198:	6923      	ldr	r3, [r4, #16]
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d135      	bne.n	800a20a <_puts_r+0x9a>
 800a19e:	4621      	mov	r1, r4
 800a1a0:	4628      	mov	r0, r5
 800a1a2:	f000 f8e5 	bl	800a370 <__swsetup_r>
 800a1a6:	b380      	cbz	r0, 800a20a <_puts_r+0x9a>
 800a1a8:	f04f 35ff 	mov.w	r5, #4294967295
 800a1ac:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a1ae:	07da      	lsls	r2, r3, #31
 800a1b0:	d405      	bmi.n	800a1be <_puts_r+0x4e>
 800a1b2:	89a3      	ldrh	r3, [r4, #12]
 800a1b4:	059b      	lsls	r3, r3, #22
 800a1b6:	d402      	bmi.n	800a1be <_puts_r+0x4e>
 800a1b8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a1ba:	f000 f9bd 	bl	800a538 <__retarget_lock_release_recursive>
 800a1be:	4628      	mov	r0, r5
 800a1c0:	bd70      	pop	{r4, r5, r6, pc}
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	da04      	bge.n	800a1d0 <_puts_r+0x60>
 800a1c6:	69a2      	ldr	r2, [r4, #24]
 800a1c8:	429a      	cmp	r2, r3
 800a1ca:	dc17      	bgt.n	800a1fc <_puts_r+0x8c>
 800a1cc:	290a      	cmp	r1, #10
 800a1ce:	d015      	beq.n	800a1fc <_puts_r+0x8c>
 800a1d0:	6823      	ldr	r3, [r4, #0]
 800a1d2:	1c5a      	adds	r2, r3, #1
 800a1d4:	6022      	str	r2, [r4, #0]
 800a1d6:	7019      	strb	r1, [r3, #0]
 800a1d8:	68a3      	ldr	r3, [r4, #8]
 800a1da:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a1de:	3b01      	subs	r3, #1
 800a1e0:	60a3      	str	r3, [r4, #8]
 800a1e2:	2900      	cmp	r1, #0
 800a1e4:	d1ed      	bne.n	800a1c2 <_puts_r+0x52>
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	da11      	bge.n	800a20e <_puts_r+0x9e>
 800a1ea:	4622      	mov	r2, r4
 800a1ec:	210a      	movs	r1, #10
 800a1ee:	4628      	mov	r0, r5
 800a1f0:	f000 f87f 	bl	800a2f2 <__swbuf_r>
 800a1f4:	3001      	adds	r0, #1
 800a1f6:	d0d7      	beq.n	800a1a8 <_puts_r+0x38>
 800a1f8:	250a      	movs	r5, #10
 800a1fa:	e7d7      	b.n	800a1ac <_puts_r+0x3c>
 800a1fc:	4622      	mov	r2, r4
 800a1fe:	4628      	mov	r0, r5
 800a200:	f000 f877 	bl	800a2f2 <__swbuf_r>
 800a204:	3001      	adds	r0, #1
 800a206:	d1e7      	bne.n	800a1d8 <_puts_r+0x68>
 800a208:	e7ce      	b.n	800a1a8 <_puts_r+0x38>
 800a20a:	3e01      	subs	r6, #1
 800a20c:	e7e4      	b.n	800a1d8 <_puts_r+0x68>
 800a20e:	6823      	ldr	r3, [r4, #0]
 800a210:	1c5a      	adds	r2, r3, #1
 800a212:	6022      	str	r2, [r4, #0]
 800a214:	220a      	movs	r2, #10
 800a216:	701a      	strb	r2, [r3, #0]
 800a218:	e7ee      	b.n	800a1f8 <_puts_r+0x88>
	...

0800a21c <puts>:
 800a21c:	4b02      	ldr	r3, [pc, #8]	@ (800a228 <puts+0xc>)
 800a21e:	4601      	mov	r1, r0
 800a220:	6818      	ldr	r0, [r3, #0]
 800a222:	f7ff bfa5 	b.w	800a170 <_puts_r>
 800a226:	bf00      	nop
 800a228:	20000050 	.word	0x20000050

0800a22c <siprintf>:
 800a22c:	b40e      	push	{r1, r2, r3}
 800a22e:	b500      	push	{lr}
 800a230:	b09c      	sub	sp, #112	@ 0x70
 800a232:	ab1d      	add	r3, sp, #116	@ 0x74
 800a234:	9002      	str	r0, [sp, #8]
 800a236:	9006      	str	r0, [sp, #24]
 800a238:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800a23c:	4809      	ldr	r0, [pc, #36]	@ (800a264 <siprintf+0x38>)
 800a23e:	9107      	str	r1, [sp, #28]
 800a240:	9104      	str	r1, [sp, #16]
 800a242:	4909      	ldr	r1, [pc, #36]	@ (800a268 <siprintf+0x3c>)
 800a244:	f853 2b04 	ldr.w	r2, [r3], #4
 800a248:	9105      	str	r1, [sp, #20]
 800a24a:	6800      	ldr	r0, [r0, #0]
 800a24c:	9301      	str	r3, [sp, #4]
 800a24e:	a902      	add	r1, sp, #8
 800a250:	f002 fbbc 	bl	800c9cc <_svfiprintf_r>
 800a254:	9b02      	ldr	r3, [sp, #8]
 800a256:	2200      	movs	r2, #0
 800a258:	701a      	strb	r2, [r3, #0]
 800a25a:	b01c      	add	sp, #112	@ 0x70
 800a25c:	f85d eb04 	ldr.w	lr, [sp], #4
 800a260:	b003      	add	sp, #12
 800a262:	4770      	bx	lr
 800a264:	20000050 	.word	0x20000050
 800a268:	ffff0208 	.word	0xffff0208

0800a26c <__sread>:
 800a26c:	b510      	push	{r4, lr}
 800a26e:	460c      	mov	r4, r1
 800a270:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a274:	f000 f900 	bl	800a478 <_read_r>
 800a278:	2800      	cmp	r0, #0
 800a27a:	bfab      	itete	ge
 800a27c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a27e:	89a3      	ldrhlt	r3, [r4, #12]
 800a280:	181b      	addge	r3, r3, r0
 800a282:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a286:	bfac      	ite	ge
 800a288:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a28a:	81a3      	strhlt	r3, [r4, #12]
 800a28c:	bd10      	pop	{r4, pc}

0800a28e <__swrite>:
 800a28e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a292:	461f      	mov	r7, r3
 800a294:	898b      	ldrh	r3, [r1, #12]
 800a296:	05db      	lsls	r3, r3, #23
 800a298:	4605      	mov	r5, r0
 800a29a:	460c      	mov	r4, r1
 800a29c:	4616      	mov	r6, r2
 800a29e:	d505      	bpl.n	800a2ac <__swrite+0x1e>
 800a2a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a2a4:	2302      	movs	r3, #2
 800a2a6:	2200      	movs	r2, #0
 800a2a8:	f000 f8d4 	bl	800a454 <_lseek_r>
 800a2ac:	89a3      	ldrh	r3, [r4, #12]
 800a2ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a2b2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a2b6:	81a3      	strh	r3, [r4, #12]
 800a2b8:	4632      	mov	r2, r6
 800a2ba:	463b      	mov	r3, r7
 800a2bc:	4628      	mov	r0, r5
 800a2be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a2c2:	f000 b8fb 	b.w	800a4bc <_write_r>

0800a2c6 <__sseek>:
 800a2c6:	b510      	push	{r4, lr}
 800a2c8:	460c      	mov	r4, r1
 800a2ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a2ce:	f000 f8c1 	bl	800a454 <_lseek_r>
 800a2d2:	1c43      	adds	r3, r0, #1
 800a2d4:	89a3      	ldrh	r3, [r4, #12]
 800a2d6:	bf15      	itete	ne
 800a2d8:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a2da:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a2de:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a2e2:	81a3      	strheq	r3, [r4, #12]
 800a2e4:	bf18      	it	ne
 800a2e6:	81a3      	strhne	r3, [r4, #12]
 800a2e8:	bd10      	pop	{r4, pc}

0800a2ea <__sclose>:
 800a2ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a2ee:	f000 b8a1 	b.w	800a434 <_close_r>

0800a2f2 <__swbuf_r>:
 800a2f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2f4:	460e      	mov	r6, r1
 800a2f6:	4614      	mov	r4, r2
 800a2f8:	4605      	mov	r5, r0
 800a2fa:	b118      	cbz	r0, 800a304 <__swbuf_r+0x12>
 800a2fc:	6a03      	ldr	r3, [r0, #32]
 800a2fe:	b90b      	cbnz	r3, 800a304 <__swbuf_r+0x12>
 800a300:	f7ff feee 	bl	800a0e0 <__sinit>
 800a304:	69a3      	ldr	r3, [r4, #24]
 800a306:	60a3      	str	r3, [r4, #8]
 800a308:	89a3      	ldrh	r3, [r4, #12]
 800a30a:	071a      	lsls	r2, r3, #28
 800a30c:	d501      	bpl.n	800a312 <__swbuf_r+0x20>
 800a30e:	6923      	ldr	r3, [r4, #16]
 800a310:	b943      	cbnz	r3, 800a324 <__swbuf_r+0x32>
 800a312:	4621      	mov	r1, r4
 800a314:	4628      	mov	r0, r5
 800a316:	f000 f82b 	bl	800a370 <__swsetup_r>
 800a31a:	b118      	cbz	r0, 800a324 <__swbuf_r+0x32>
 800a31c:	f04f 37ff 	mov.w	r7, #4294967295
 800a320:	4638      	mov	r0, r7
 800a322:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a324:	6823      	ldr	r3, [r4, #0]
 800a326:	6922      	ldr	r2, [r4, #16]
 800a328:	1a98      	subs	r0, r3, r2
 800a32a:	6963      	ldr	r3, [r4, #20]
 800a32c:	b2f6      	uxtb	r6, r6
 800a32e:	4283      	cmp	r3, r0
 800a330:	4637      	mov	r7, r6
 800a332:	dc05      	bgt.n	800a340 <__swbuf_r+0x4e>
 800a334:	4621      	mov	r1, r4
 800a336:	4628      	mov	r0, r5
 800a338:	f002 fe0a 	bl	800cf50 <_fflush_r>
 800a33c:	2800      	cmp	r0, #0
 800a33e:	d1ed      	bne.n	800a31c <__swbuf_r+0x2a>
 800a340:	68a3      	ldr	r3, [r4, #8]
 800a342:	3b01      	subs	r3, #1
 800a344:	60a3      	str	r3, [r4, #8]
 800a346:	6823      	ldr	r3, [r4, #0]
 800a348:	1c5a      	adds	r2, r3, #1
 800a34a:	6022      	str	r2, [r4, #0]
 800a34c:	701e      	strb	r6, [r3, #0]
 800a34e:	6962      	ldr	r2, [r4, #20]
 800a350:	1c43      	adds	r3, r0, #1
 800a352:	429a      	cmp	r2, r3
 800a354:	d004      	beq.n	800a360 <__swbuf_r+0x6e>
 800a356:	89a3      	ldrh	r3, [r4, #12]
 800a358:	07db      	lsls	r3, r3, #31
 800a35a:	d5e1      	bpl.n	800a320 <__swbuf_r+0x2e>
 800a35c:	2e0a      	cmp	r6, #10
 800a35e:	d1df      	bne.n	800a320 <__swbuf_r+0x2e>
 800a360:	4621      	mov	r1, r4
 800a362:	4628      	mov	r0, r5
 800a364:	f002 fdf4 	bl	800cf50 <_fflush_r>
 800a368:	2800      	cmp	r0, #0
 800a36a:	d0d9      	beq.n	800a320 <__swbuf_r+0x2e>
 800a36c:	e7d6      	b.n	800a31c <__swbuf_r+0x2a>
	...

0800a370 <__swsetup_r>:
 800a370:	b538      	push	{r3, r4, r5, lr}
 800a372:	4b29      	ldr	r3, [pc, #164]	@ (800a418 <__swsetup_r+0xa8>)
 800a374:	4605      	mov	r5, r0
 800a376:	6818      	ldr	r0, [r3, #0]
 800a378:	460c      	mov	r4, r1
 800a37a:	b118      	cbz	r0, 800a384 <__swsetup_r+0x14>
 800a37c:	6a03      	ldr	r3, [r0, #32]
 800a37e:	b90b      	cbnz	r3, 800a384 <__swsetup_r+0x14>
 800a380:	f7ff feae 	bl	800a0e0 <__sinit>
 800a384:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a388:	0719      	lsls	r1, r3, #28
 800a38a:	d422      	bmi.n	800a3d2 <__swsetup_r+0x62>
 800a38c:	06da      	lsls	r2, r3, #27
 800a38e:	d407      	bmi.n	800a3a0 <__swsetup_r+0x30>
 800a390:	2209      	movs	r2, #9
 800a392:	602a      	str	r2, [r5, #0]
 800a394:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a398:	81a3      	strh	r3, [r4, #12]
 800a39a:	f04f 30ff 	mov.w	r0, #4294967295
 800a39e:	e033      	b.n	800a408 <__swsetup_r+0x98>
 800a3a0:	0758      	lsls	r0, r3, #29
 800a3a2:	d512      	bpl.n	800a3ca <__swsetup_r+0x5a>
 800a3a4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a3a6:	b141      	cbz	r1, 800a3ba <__swsetup_r+0x4a>
 800a3a8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a3ac:	4299      	cmp	r1, r3
 800a3ae:	d002      	beq.n	800a3b6 <__swsetup_r+0x46>
 800a3b0:	4628      	mov	r0, r5
 800a3b2:	f000 ff2d 	bl	800b210 <_free_r>
 800a3b6:	2300      	movs	r3, #0
 800a3b8:	6363      	str	r3, [r4, #52]	@ 0x34
 800a3ba:	89a3      	ldrh	r3, [r4, #12]
 800a3bc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a3c0:	81a3      	strh	r3, [r4, #12]
 800a3c2:	2300      	movs	r3, #0
 800a3c4:	6063      	str	r3, [r4, #4]
 800a3c6:	6923      	ldr	r3, [r4, #16]
 800a3c8:	6023      	str	r3, [r4, #0]
 800a3ca:	89a3      	ldrh	r3, [r4, #12]
 800a3cc:	f043 0308 	orr.w	r3, r3, #8
 800a3d0:	81a3      	strh	r3, [r4, #12]
 800a3d2:	6923      	ldr	r3, [r4, #16]
 800a3d4:	b94b      	cbnz	r3, 800a3ea <__swsetup_r+0x7a>
 800a3d6:	89a3      	ldrh	r3, [r4, #12]
 800a3d8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a3dc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a3e0:	d003      	beq.n	800a3ea <__swsetup_r+0x7a>
 800a3e2:	4621      	mov	r1, r4
 800a3e4:	4628      	mov	r0, r5
 800a3e6:	f002 fe01 	bl	800cfec <__smakebuf_r>
 800a3ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a3ee:	f013 0201 	ands.w	r2, r3, #1
 800a3f2:	d00a      	beq.n	800a40a <__swsetup_r+0x9a>
 800a3f4:	2200      	movs	r2, #0
 800a3f6:	60a2      	str	r2, [r4, #8]
 800a3f8:	6962      	ldr	r2, [r4, #20]
 800a3fa:	4252      	negs	r2, r2
 800a3fc:	61a2      	str	r2, [r4, #24]
 800a3fe:	6922      	ldr	r2, [r4, #16]
 800a400:	b942      	cbnz	r2, 800a414 <__swsetup_r+0xa4>
 800a402:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a406:	d1c5      	bne.n	800a394 <__swsetup_r+0x24>
 800a408:	bd38      	pop	{r3, r4, r5, pc}
 800a40a:	0799      	lsls	r1, r3, #30
 800a40c:	bf58      	it	pl
 800a40e:	6962      	ldrpl	r2, [r4, #20]
 800a410:	60a2      	str	r2, [r4, #8]
 800a412:	e7f4      	b.n	800a3fe <__swsetup_r+0x8e>
 800a414:	2000      	movs	r0, #0
 800a416:	e7f7      	b.n	800a408 <__swsetup_r+0x98>
 800a418:	20000050 	.word	0x20000050

0800a41c <memset>:
 800a41c:	4402      	add	r2, r0
 800a41e:	4603      	mov	r3, r0
 800a420:	4293      	cmp	r3, r2
 800a422:	d100      	bne.n	800a426 <memset+0xa>
 800a424:	4770      	bx	lr
 800a426:	f803 1b01 	strb.w	r1, [r3], #1
 800a42a:	e7f9      	b.n	800a420 <memset+0x4>

0800a42c <_localeconv_r>:
 800a42c:	4800      	ldr	r0, [pc, #0]	@ (800a430 <_localeconv_r+0x4>)
 800a42e:	4770      	bx	lr
 800a430:	20000190 	.word	0x20000190

0800a434 <_close_r>:
 800a434:	b538      	push	{r3, r4, r5, lr}
 800a436:	4d06      	ldr	r5, [pc, #24]	@ (800a450 <_close_r+0x1c>)
 800a438:	2300      	movs	r3, #0
 800a43a:	4604      	mov	r4, r0
 800a43c:	4608      	mov	r0, r1
 800a43e:	602b      	str	r3, [r5, #0]
 800a440:	f7f8 fa5a 	bl	80028f8 <_close>
 800a444:	1c43      	adds	r3, r0, #1
 800a446:	d102      	bne.n	800a44e <_close_r+0x1a>
 800a448:	682b      	ldr	r3, [r5, #0]
 800a44a:	b103      	cbz	r3, 800a44e <_close_r+0x1a>
 800a44c:	6023      	str	r3, [r4, #0]
 800a44e:	bd38      	pop	{r3, r4, r5, pc}
 800a450:	2000070c 	.word	0x2000070c

0800a454 <_lseek_r>:
 800a454:	b538      	push	{r3, r4, r5, lr}
 800a456:	4d07      	ldr	r5, [pc, #28]	@ (800a474 <_lseek_r+0x20>)
 800a458:	4604      	mov	r4, r0
 800a45a:	4608      	mov	r0, r1
 800a45c:	4611      	mov	r1, r2
 800a45e:	2200      	movs	r2, #0
 800a460:	602a      	str	r2, [r5, #0]
 800a462:	461a      	mov	r2, r3
 800a464:	f7f8 fa6f 	bl	8002946 <_lseek>
 800a468:	1c43      	adds	r3, r0, #1
 800a46a:	d102      	bne.n	800a472 <_lseek_r+0x1e>
 800a46c:	682b      	ldr	r3, [r5, #0]
 800a46e:	b103      	cbz	r3, 800a472 <_lseek_r+0x1e>
 800a470:	6023      	str	r3, [r4, #0]
 800a472:	bd38      	pop	{r3, r4, r5, pc}
 800a474:	2000070c 	.word	0x2000070c

0800a478 <_read_r>:
 800a478:	b538      	push	{r3, r4, r5, lr}
 800a47a:	4d07      	ldr	r5, [pc, #28]	@ (800a498 <_read_r+0x20>)
 800a47c:	4604      	mov	r4, r0
 800a47e:	4608      	mov	r0, r1
 800a480:	4611      	mov	r1, r2
 800a482:	2200      	movs	r2, #0
 800a484:	602a      	str	r2, [r5, #0]
 800a486:	461a      	mov	r2, r3
 800a488:	f7f8 f9fd 	bl	8002886 <_read>
 800a48c:	1c43      	adds	r3, r0, #1
 800a48e:	d102      	bne.n	800a496 <_read_r+0x1e>
 800a490:	682b      	ldr	r3, [r5, #0]
 800a492:	b103      	cbz	r3, 800a496 <_read_r+0x1e>
 800a494:	6023      	str	r3, [r4, #0]
 800a496:	bd38      	pop	{r3, r4, r5, pc}
 800a498:	2000070c 	.word	0x2000070c

0800a49c <_sbrk_r>:
 800a49c:	b538      	push	{r3, r4, r5, lr}
 800a49e:	4d06      	ldr	r5, [pc, #24]	@ (800a4b8 <_sbrk_r+0x1c>)
 800a4a0:	2300      	movs	r3, #0
 800a4a2:	4604      	mov	r4, r0
 800a4a4:	4608      	mov	r0, r1
 800a4a6:	602b      	str	r3, [r5, #0]
 800a4a8:	f7f8 fa5a 	bl	8002960 <_sbrk>
 800a4ac:	1c43      	adds	r3, r0, #1
 800a4ae:	d102      	bne.n	800a4b6 <_sbrk_r+0x1a>
 800a4b0:	682b      	ldr	r3, [r5, #0]
 800a4b2:	b103      	cbz	r3, 800a4b6 <_sbrk_r+0x1a>
 800a4b4:	6023      	str	r3, [r4, #0]
 800a4b6:	bd38      	pop	{r3, r4, r5, pc}
 800a4b8:	2000070c 	.word	0x2000070c

0800a4bc <_write_r>:
 800a4bc:	b538      	push	{r3, r4, r5, lr}
 800a4be:	4d07      	ldr	r5, [pc, #28]	@ (800a4dc <_write_r+0x20>)
 800a4c0:	4604      	mov	r4, r0
 800a4c2:	4608      	mov	r0, r1
 800a4c4:	4611      	mov	r1, r2
 800a4c6:	2200      	movs	r2, #0
 800a4c8:	602a      	str	r2, [r5, #0]
 800a4ca:	461a      	mov	r2, r3
 800a4cc:	f7f8 f9f8 	bl	80028c0 <_write>
 800a4d0:	1c43      	adds	r3, r0, #1
 800a4d2:	d102      	bne.n	800a4da <_write_r+0x1e>
 800a4d4:	682b      	ldr	r3, [r5, #0]
 800a4d6:	b103      	cbz	r3, 800a4da <_write_r+0x1e>
 800a4d8:	6023      	str	r3, [r4, #0]
 800a4da:	bd38      	pop	{r3, r4, r5, pc}
 800a4dc:	2000070c 	.word	0x2000070c

0800a4e0 <__errno>:
 800a4e0:	4b01      	ldr	r3, [pc, #4]	@ (800a4e8 <__errno+0x8>)
 800a4e2:	6818      	ldr	r0, [r3, #0]
 800a4e4:	4770      	bx	lr
 800a4e6:	bf00      	nop
 800a4e8:	20000050 	.word	0x20000050

0800a4ec <__libc_init_array>:
 800a4ec:	b570      	push	{r4, r5, r6, lr}
 800a4ee:	4d0d      	ldr	r5, [pc, #52]	@ (800a524 <__libc_init_array+0x38>)
 800a4f0:	4c0d      	ldr	r4, [pc, #52]	@ (800a528 <__libc_init_array+0x3c>)
 800a4f2:	1b64      	subs	r4, r4, r5
 800a4f4:	10a4      	asrs	r4, r4, #2
 800a4f6:	2600      	movs	r6, #0
 800a4f8:	42a6      	cmp	r6, r4
 800a4fa:	d109      	bne.n	800a510 <__libc_init_array+0x24>
 800a4fc:	4d0b      	ldr	r5, [pc, #44]	@ (800a52c <__libc_init_array+0x40>)
 800a4fe:	4c0c      	ldr	r4, [pc, #48]	@ (800a530 <__libc_init_array+0x44>)
 800a500:	f003 fa24 	bl	800d94c <_init>
 800a504:	1b64      	subs	r4, r4, r5
 800a506:	10a4      	asrs	r4, r4, #2
 800a508:	2600      	movs	r6, #0
 800a50a:	42a6      	cmp	r6, r4
 800a50c:	d105      	bne.n	800a51a <__libc_init_array+0x2e>
 800a50e:	bd70      	pop	{r4, r5, r6, pc}
 800a510:	f855 3b04 	ldr.w	r3, [r5], #4
 800a514:	4798      	blx	r3
 800a516:	3601      	adds	r6, #1
 800a518:	e7ee      	b.n	800a4f8 <__libc_init_array+0xc>
 800a51a:	f855 3b04 	ldr.w	r3, [r5], #4
 800a51e:	4798      	blx	r3
 800a520:	3601      	adds	r6, #1
 800a522:	e7f2      	b.n	800a50a <__libc_init_array+0x1e>
 800a524:	08011768 	.word	0x08011768
 800a528:	08011768 	.word	0x08011768
 800a52c:	08011768 	.word	0x08011768
 800a530:	0801176c 	.word	0x0801176c

0800a534 <__retarget_lock_init_recursive>:
 800a534:	4770      	bx	lr

0800a536 <__retarget_lock_acquire_recursive>:
 800a536:	4770      	bx	lr

0800a538 <__retarget_lock_release_recursive>:
 800a538:	4770      	bx	lr

0800a53a <strcpy>:
 800a53a:	4603      	mov	r3, r0
 800a53c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a540:	f803 2b01 	strb.w	r2, [r3], #1
 800a544:	2a00      	cmp	r2, #0
 800a546:	d1f9      	bne.n	800a53c <strcpy+0x2>
 800a548:	4770      	bx	lr

0800a54a <memcpy>:
 800a54a:	440a      	add	r2, r1
 800a54c:	4291      	cmp	r1, r2
 800a54e:	f100 33ff 	add.w	r3, r0, #4294967295
 800a552:	d100      	bne.n	800a556 <memcpy+0xc>
 800a554:	4770      	bx	lr
 800a556:	b510      	push	{r4, lr}
 800a558:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a55c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a560:	4291      	cmp	r1, r2
 800a562:	d1f9      	bne.n	800a558 <memcpy+0xe>
 800a564:	bd10      	pop	{r4, pc}
	...

0800a568 <nanf>:
 800a568:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800a570 <nanf+0x8>
 800a56c:	4770      	bx	lr
 800a56e:	bf00      	nop
 800a570:	7fc00000 	.word	0x7fc00000

0800a574 <quorem>:
 800a574:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a578:	6903      	ldr	r3, [r0, #16]
 800a57a:	690c      	ldr	r4, [r1, #16]
 800a57c:	42a3      	cmp	r3, r4
 800a57e:	4607      	mov	r7, r0
 800a580:	db7e      	blt.n	800a680 <quorem+0x10c>
 800a582:	3c01      	subs	r4, #1
 800a584:	f101 0814 	add.w	r8, r1, #20
 800a588:	00a3      	lsls	r3, r4, #2
 800a58a:	f100 0514 	add.w	r5, r0, #20
 800a58e:	9300      	str	r3, [sp, #0]
 800a590:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a594:	9301      	str	r3, [sp, #4]
 800a596:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a59a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a59e:	3301      	adds	r3, #1
 800a5a0:	429a      	cmp	r2, r3
 800a5a2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a5a6:	fbb2 f6f3 	udiv	r6, r2, r3
 800a5aa:	d32e      	bcc.n	800a60a <quorem+0x96>
 800a5ac:	f04f 0a00 	mov.w	sl, #0
 800a5b0:	46c4      	mov	ip, r8
 800a5b2:	46ae      	mov	lr, r5
 800a5b4:	46d3      	mov	fp, sl
 800a5b6:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a5ba:	b298      	uxth	r0, r3
 800a5bc:	fb06 a000 	mla	r0, r6, r0, sl
 800a5c0:	0c02      	lsrs	r2, r0, #16
 800a5c2:	0c1b      	lsrs	r3, r3, #16
 800a5c4:	fb06 2303 	mla	r3, r6, r3, r2
 800a5c8:	f8de 2000 	ldr.w	r2, [lr]
 800a5cc:	b280      	uxth	r0, r0
 800a5ce:	b292      	uxth	r2, r2
 800a5d0:	1a12      	subs	r2, r2, r0
 800a5d2:	445a      	add	r2, fp
 800a5d4:	f8de 0000 	ldr.w	r0, [lr]
 800a5d8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a5dc:	b29b      	uxth	r3, r3
 800a5de:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800a5e2:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800a5e6:	b292      	uxth	r2, r2
 800a5e8:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800a5ec:	45e1      	cmp	r9, ip
 800a5ee:	f84e 2b04 	str.w	r2, [lr], #4
 800a5f2:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800a5f6:	d2de      	bcs.n	800a5b6 <quorem+0x42>
 800a5f8:	9b00      	ldr	r3, [sp, #0]
 800a5fa:	58eb      	ldr	r3, [r5, r3]
 800a5fc:	b92b      	cbnz	r3, 800a60a <quorem+0x96>
 800a5fe:	9b01      	ldr	r3, [sp, #4]
 800a600:	3b04      	subs	r3, #4
 800a602:	429d      	cmp	r5, r3
 800a604:	461a      	mov	r2, r3
 800a606:	d32f      	bcc.n	800a668 <quorem+0xf4>
 800a608:	613c      	str	r4, [r7, #16]
 800a60a:	4638      	mov	r0, r7
 800a60c:	f001 f90e 	bl	800b82c <__mcmp>
 800a610:	2800      	cmp	r0, #0
 800a612:	db25      	blt.n	800a660 <quorem+0xec>
 800a614:	4629      	mov	r1, r5
 800a616:	2000      	movs	r0, #0
 800a618:	f858 2b04 	ldr.w	r2, [r8], #4
 800a61c:	f8d1 c000 	ldr.w	ip, [r1]
 800a620:	fa1f fe82 	uxth.w	lr, r2
 800a624:	fa1f f38c 	uxth.w	r3, ip
 800a628:	eba3 030e 	sub.w	r3, r3, lr
 800a62c:	4403      	add	r3, r0
 800a62e:	0c12      	lsrs	r2, r2, #16
 800a630:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800a634:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800a638:	b29b      	uxth	r3, r3
 800a63a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a63e:	45c1      	cmp	r9, r8
 800a640:	f841 3b04 	str.w	r3, [r1], #4
 800a644:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a648:	d2e6      	bcs.n	800a618 <quorem+0xa4>
 800a64a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a64e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a652:	b922      	cbnz	r2, 800a65e <quorem+0xea>
 800a654:	3b04      	subs	r3, #4
 800a656:	429d      	cmp	r5, r3
 800a658:	461a      	mov	r2, r3
 800a65a:	d30b      	bcc.n	800a674 <quorem+0x100>
 800a65c:	613c      	str	r4, [r7, #16]
 800a65e:	3601      	adds	r6, #1
 800a660:	4630      	mov	r0, r6
 800a662:	b003      	add	sp, #12
 800a664:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a668:	6812      	ldr	r2, [r2, #0]
 800a66a:	3b04      	subs	r3, #4
 800a66c:	2a00      	cmp	r2, #0
 800a66e:	d1cb      	bne.n	800a608 <quorem+0x94>
 800a670:	3c01      	subs	r4, #1
 800a672:	e7c6      	b.n	800a602 <quorem+0x8e>
 800a674:	6812      	ldr	r2, [r2, #0]
 800a676:	3b04      	subs	r3, #4
 800a678:	2a00      	cmp	r2, #0
 800a67a:	d1ef      	bne.n	800a65c <quorem+0xe8>
 800a67c:	3c01      	subs	r4, #1
 800a67e:	e7ea      	b.n	800a656 <quorem+0xe2>
 800a680:	2000      	movs	r0, #0
 800a682:	e7ee      	b.n	800a662 <quorem+0xee>
 800a684:	0000      	movs	r0, r0
	...

0800a688 <_dtoa_r>:
 800a688:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a68c:	69c7      	ldr	r7, [r0, #28]
 800a68e:	b099      	sub	sp, #100	@ 0x64
 800a690:	ed8d 0b02 	vstr	d0, [sp, #8]
 800a694:	ec55 4b10 	vmov	r4, r5, d0
 800a698:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800a69a:	9109      	str	r1, [sp, #36]	@ 0x24
 800a69c:	4683      	mov	fp, r0
 800a69e:	920e      	str	r2, [sp, #56]	@ 0x38
 800a6a0:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a6a2:	b97f      	cbnz	r7, 800a6c4 <_dtoa_r+0x3c>
 800a6a4:	2010      	movs	r0, #16
 800a6a6:	f7fe fd6d 	bl	8009184 <malloc>
 800a6aa:	4602      	mov	r2, r0
 800a6ac:	f8cb 001c 	str.w	r0, [fp, #28]
 800a6b0:	b920      	cbnz	r0, 800a6bc <_dtoa_r+0x34>
 800a6b2:	4ba7      	ldr	r3, [pc, #668]	@ (800a950 <_dtoa_r+0x2c8>)
 800a6b4:	21ef      	movs	r1, #239	@ 0xef
 800a6b6:	48a7      	ldr	r0, [pc, #668]	@ (800a954 <_dtoa_r+0x2cc>)
 800a6b8:	f002 fd2a 	bl	800d110 <__assert_func>
 800a6bc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800a6c0:	6007      	str	r7, [r0, #0]
 800a6c2:	60c7      	str	r7, [r0, #12]
 800a6c4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a6c8:	6819      	ldr	r1, [r3, #0]
 800a6ca:	b159      	cbz	r1, 800a6e4 <_dtoa_r+0x5c>
 800a6cc:	685a      	ldr	r2, [r3, #4]
 800a6ce:	604a      	str	r2, [r1, #4]
 800a6d0:	2301      	movs	r3, #1
 800a6d2:	4093      	lsls	r3, r2
 800a6d4:	608b      	str	r3, [r1, #8]
 800a6d6:	4658      	mov	r0, fp
 800a6d8:	f000 fe24 	bl	800b324 <_Bfree>
 800a6dc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a6e0:	2200      	movs	r2, #0
 800a6e2:	601a      	str	r2, [r3, #0]
 800a6e4:	1e2b      	subs	r3, r5, #0
 800a6e6:	bfb9      	ittee	lt
 800a6e8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800a6ec:	9303      	strlt	r3, [sp, #12]
 800a6ee:	2300      	movge	r3, #0
 800a6f0:	6033      	strge	r3, [r6, #0]
 800a6f2:	9f03      	ldr	r7, [sp, #12]
 800a6f4:	4b98      	ldr	r3, [pc, #608]	@ (800a958 <_dtoa_r+0x2d0>)
 800a6f6:	bfbc      	itt	lt
 800a6f8:	2201      	movlt	r2, #1
 800a6fa:	6032      	strlt	r2, [r6, #0]
 800a6fc:	43bb      	bics	r3, r7
 800a6fe:	d112      	bne.n	800a726 <_dtoa_r+0x9e>
 800a700:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800a702:	f242 730f 	movw	r3, #9999	@ 0x270f
 800a706:	6013      	str	r3, [r2, #0]
 800a708:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a70c:	4323      	orrs	r3, r4
 800a70e:	f000 854d 	beq.w	800b1ac <_dtoa_r+0xb24>
 800a712:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a714:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800a96c <_dtoa_r+0x2e4>
 800a718:	2b00      	cmp	r3, #0
 800a71a:	f000 854f 	beq.w	800b1bc <_dtoa_r+0xb34>
 800a71e:	f10a 0303 	add.w	r3, sl, #3
 800a722:	f000 bd49 	b.w	800b1b8 <_dtoa_r+0xb30>
 800a726:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a72a:	2200      	movs	r2, #0
 800a72c:	ec51 0b17 	vmov	r0, r1, d7
 800a730:	2300      	movs	r3, #0
 800a732:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800a736:	f7f6 f9e7 	bl	8000b08 <__aeabi_dcmpeq>
 800a73a:	4680      	mov	r8, r0
 800a73c:	b158      	cbz	r0, 800a756 <_dtoa_r+0xce>
 800a73e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800a740:	2301      	movs	r3, #1
 800a742:	6013      	str	r3, [r2, #0]
 800a744:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a746:	b113      	cbz	r3, 800a74e <_dtoa_r+0xc6>
 800a748:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800a74a:	4b84      	ldr	r3, [pc, #528]	@ (800a95c <_dtoa_r+0x2d4>)
 800a74c:	6013      	str	r3, [r2, #0]
 800a74e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800a970 <_dtoa_r+0x2e8>
 800a752:	f000 bd33 	b.w	800b1bc <_dtoa_r+0xb34>
 800a756:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800a75a:	aa16      	add	r2, sp, #88	@ 0x58
 800a75c:	a917      	add	r1, sp, #92	@ 0x5c
 800a75e:	4658      	mov	r0, fp
 800a760:	f001 f984 	bl	800ba6c <__d2b>
 800a764:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800a768:	4681      	mov	r9, r0
 800a76a:	2e00      	cmp	r6, #0
 800a76c:	d077      	beq.n	800a85e <_dtoa_r+0x1d6>
 800a76e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a770:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800a774:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a778:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a77c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800a780:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800a784:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800a788:	4619      	mov	r1, r3
 800a78a:	2200      	movs	r2, #0
 800a78c:	4b74      	ldr	r3, [pc, #464]	@ (800a960 <_dtoa_r+0x2d8>)
 800a78e:	f7f5 fd9b 	bl	80002c8 <__aeabi_dsub>
 800a792:	a369      	add	r3, pc, #420	@ (adr r3, 800a938 <_dtoa_r+0x2b0>)
 800a794:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a798:	f7f5 ff4e 	bl	8000638 <__aeabi_dmul>
 800a79c:	a368      	add	r3, pc, #416	@ (adr r3, 800a940 <_dtoa_r+0x2b8>)
 800a79e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7a2:	f7f5 fd93 	bl	80002cc <__adddf3>
 800a7a6:	4604      	mov	r4, r0
 800a7a8:	4630      	mov	r0, r6
 800a7aa:	460d      	mov	r5, r1
 800a7ac:	f7f5 feda 	bl	8000564 <__aeabi_i2d>
 800a7b0:	a365      	add	r3, pc, #404	@ (adr r3, 800a948 <_dtoa_r+0x2c0>)
 800a7b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7b6:	f7f5 ff3f 	bl	8000638 <__aeabi_dmul>
 800a7ba:	4602      	mov	r2, r0
 800a7bc:	460b      	mov	r3, r1
 800a7be:	4620      	mov	r0, r4
 800a7c0:	4629      	mov	r1, r5
 800a7c2:	f7f5 fd83 	bl	80002cc <__adddf3>
 800a7c6:	4604      	mov	r4, r0
 800a7c8:	460d      	mov	r5, r1
 800a7ca:	f7f6 f9e5 	bl	8000b98 <__aeabi_d2iz>
 800a7ce:	2200      	movs	r2, #0
 800a7d0:	4607      	mov	r7, r0
 800a7d2:	2300      	movs	r3, #0
 800a7d4:	4620      	mov	r0, r4
 800a7d6:	4629      	mov	r1, r5
 800a7d8:	f7f6 f9a0 	bl	8000b1c <__aeabi_dcmplt>
 800a7dc:	b140      	cbz	r0, 800a7f0 <_dtoa_r+0x168>
 800a7de:	4638      	mov	r0, r7
 800a7e0:	f7f5 fec0 	bl	8000564 <__aeabi_i2d>
 800a7e4:	4622      	mov	r2, r4
 800a7e6:	462b      	mov	r3, r5
 800a7e8:	f7f6 f98e 	bl	8000b08 <__aeabi_dcmpeq>
 800a7ec:	b900      	cbnz	r0, 800a7f0 <_dtoa_r+0x168>
 800a7ee:	3f01      	subs	r7, #1
 800a7f0:	2f16      	cmp	r7, #22
 800a7f2:	d851      	bhi.n	800a898 <_dtoa_r+0x210>
 800a7f4:	4b5b      	ldr	r3, [pc, #364]	@ (800a964 <_dtoa_r+0x2dc>)
 800a7f6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a7fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7fe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a802:	f7f6 f98b 	bl	8000b1c <__aeabi_dcmplt>
 800a806:	2800      	cmp	r0, #0
 800a808:	d048      	beq.n	800a89c <_dtoa_r+0x214>
 800a80a:	3f01      	subs	r7, #1
 800a80c:	2300      	movs	r3, #0
 800a80e:	9312      	str	r3, [sp, #72]	@ 0x48
 800a810:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800a812:	1b9b      	subs	r3, r3, r6
 800a814:	1e5a      	subs	r2, r3, #1
 800a816:	bf44      	itt	mi
 800a818:	f1c3 0801 	rsbmi	r8, r3, #1
 800a81c:	2300      	movmi	r3, #0
 800a81e:	9208      	str	r2, [sp, #32]
 800a820:	bf54      	ite	pl
 800a822:	f04f 0800 	movpl.w	r8, #0
 800a826:	9308      	strmi	r3, [sp, #32]
 800a828:	2f00      	cmp	r7, #0
 800a82a:	db39      	blt.n	800a8a0 <_dtoa_r+0x218>
 800a82c:	9b08      	ldr	r3, [sp, #32]
 800a82e:	970f      	str	r7, [sp, #60]	@ 0x3c
 800a830:	443b      	add	r3, r7
 800a832:	9308      	str	r3, [sp, #32]
 800a834:	2300      	movs	r3, #0
 800a836:	930a      	str	r3, [sp, #40]	@ 0x28
 800a838:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a83a:	2b09      	cmp	r3, #9
 800a83c:	d864      	bhi.n	800a908 <_dtoa_r+0x280>
 800a83e:	2b05      	cmp	r3, #5
 800a840:	bfc4      	itt	gt
 800a842:	3b04      	subgt	r3, #4
 800a844:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800a846:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a848:	f1a3 0302 	sub.w	r3, r3, #2
 800a84c:	bfcc      	ite	gt
 800a84e:	2400      	movgt	r4, #0
 800a850:	2401      	movle	r4, #1
 800a852:	2b03      	cmp	r3, #3
 800a854:	d863      	bhi.n	800a91e <_dtoa_r+0x296>
 800a856:	e8df f003 	tbb	[pc, r3]
 800a85a:	372a      	.short	0x372a
 800a85c:	5535      	.short	0x5535
 800a85e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800a862:	441e      	add	r6, r3
 800a864:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800a868:	2b20      	cmp	r3, #32
 800a86a:	bfc1      	itttt	gt
 800a86c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800a870:	409f      	lslgt	r7, r3
 800a872:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800a876:	fa24 f303 	lsrgt.w	r3, r4, r3
 800a87a:	bfd6      	itet	le
 800a87c:	f1c3 0320 	rsble	r3, r3, #32
 800a880:	ea47 0003 	orrgt.w	r0, r7, r3
 800a884:	fa04 f003 	lslle.w	r0, r4, r3
 800a888:	f7f5 fe5c 	bl	8000544 <__aeabi_ui2d>
 800a88c:	2201      	movs	r2, #1
 800a88e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800a892:	3e01      	subs	r6, #1
 800a894:	9214      	str	r2, [sp, #80]	@ 0x50
 800a896:	e777      	b.n	800a788 <_dtoa_r+0x100>
 800a898:	2301      	movs	r3, #1
 800a89a:	e7b8      	b.n	800a80e <_dtoa_r+0x186>
 800a89c:	9012      	str	r0, [sp, #72]	@ 0x48
 800a89e:	e7b7      	b.n	800a810 <_dtoa_r+0x188>
 800a8a0:	427b      	negs	r3, r7
 800a8a2:	930a      	str	r3, [sp, #40]	@ 0x28
 800a8a4:	2300      	movs	r3, #0
 800a8a6:	eba8 0807 	sub.w	r8, r8, r7
 800a8aa:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a8ac:	e7c4      	b.n	800a838 <_dtoa_r+0x1b0>
 800a8ae:	2300      	movs	r3, #0
 800a8b0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a8b2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	dc35      	bgt.n	800a924 <_dtoa_r+0x29c>
 800a8b8:	2301      	movs	r3, #1
 800a8ba:	9300      	str	r3, [sp, #0]
 800a8bc:	9307      	str	r3, [sp, #28]
 800a8be:	461a      	mov	r2, r3
 800a8c0:	920e      	str	r2, [sp, #56]	@ 0x38
 800a8c2:	e00b      	b.n	800a8dc <_dtoa_r+0x254>
 800a8c4:	2301      	movs	r3, #1
 800a8c6:	e7f3      	b.n	800a8b0 <_dtoa_r+0x228>
 800a8c8:	2300      	movs	r3, #0
 800a8ca:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a8cc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a8ce:	18fb      	adds	r3, r7, r3
 800a8d0:	9300      	str	r3, [sp, #0]
 800a8d2:	3301      	adds	r3, #1
 800a8d4:	2b01      	cmp	r3, #1
 800a8d6:	9307      	str	r3, [sp, #28]
 800a8d8:	bfb8      	it	lt
 800a8da:	2301      	movlt	r3, #1
 800a8dc:	f8db 001c 	ldr.w	r0, [fp, #28]
 800a8e0:	2100      	movs	r1, #0
 800a8e2:	2204      	movs	r2, #4
 800a8e4:	f102 0514 	add.w	r5, r2, #20
 800a8e8:	429d      	cmp	r5, r3
 800a8ea:	d91f      	bls.n	800a92c <_dtoa_r+0x2a4>
 800a8ec:	6041      	str	r1, [r0, #4]
 800a8ee:	4658      	mov	r0, fp
 800a8f0:	f000 fcd8 	bl	800b2a4 <_Balloc>
 800a8f4:	4682      	mov	sl, r0
 800a8f6:	2800      	cmp	r0, #0
 800a8f8:	d13c      	bne.n	800a974 <_dtoa_r+0x2ec>
 800a8fa:	4b1b      	ldr	r3, [pc, #108]	@ (800a968 <_dtoa_r+0x2e0>)
 800a8fc:	4602      	mov	r2, r0
 800a8fe:	f240 11af 	movw	r1, #431	@ 0x1af
 800a902:	e6d8      	b.n	800a6b6 <_dtoa_r+0x2e>
 800a904:	2301      	movs	r3, #1
 800a906:	e7e0      	b.n	800a8ca <_dtoa_r+0x242>
 800a908:	2401      	movs	r4, #1
 800a90a:	2300      	movs	r3, #0
 800a90c:	9309      	str	r3, [sp, #36]	@ 0x24
 800a90e:	940b      	str	r4, [sp, #44]	@ 0x2c
 800a910:	f04f 33ff 	mov.w	r3, #4294967295
 800a914:	9300      	str	r3, [sp, #0]
 800a916:	9307      	str	r3, [sp, #28]
 800a918:	2200      	movs	r2, #0
 800a91a:	2312      	movs	r3, #18
 800a91c:	e7d0      	b.n	800a8c0 <_dtoa_r+0x238>
 800a91e:	2301      	movs	r3, #1
 800a920:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a922:	e7f5      	b.n	800a910 <_dtoa_r+0x288>
 800a924:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a926:	9300      	str	r3, [sp, #0]
 800a928:	9307      	str	r3, [sp, #28]
 800a92a:	e7d7      	b.n	800a8dc <_dtoa_r+0x254>
 800a92c:	3101      	adds	r1, #1
 800a92e:	0052      	lsls	r2, r2, #1
 800a930:	e7d8      	b.n	800a8e4 <_dtoa_r+0x25c>
 800a932:	bf00      	nop
 800a934:	f3af 8000 	nop.w
 800a938:	636f4361 	.word	0x636f4361
 800a93c:	3fd287a7 	.word	0x3fd287a7
 800a940:	8b60c8b3 	.word	0x8b60c8b3
 800a944:	3fc68a28 	.word	0x3fc68a28
 800a948:	509f79fb 	.word	0x509f79fb
 800a94c:	3fd34413 	.word	0x3fd34413
 800a950:	0801137a 	.word	0x0801137a
 800a954:	08011391 	.word	0x08011391
 800a958:	7ff00000 	.word	0x7ff00000
 800a95c:	08011345 	.word	0x08011345
 800a960:	3ff80000 	.word	0x3ff80000
 800a964:	08011488 	.word	0x08011488
 800a968:	080113e9 	.word	0x080113e9
 800a96c:	08011376 	.word	0x08011376
 800a970:	08011344 	.word	0x08011344
 800a974:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a978:	6018      	str	r0, [r3, #0]
 800a97a:	9b07      	ldr	r3, [sp, #28]
 800a97c:	2b0e      	cmp	r3, #14
 800a97e:	f200 80a4 	bhi.w	800aaca <_dtoa_r+0x442>
 800a982:	2c00      	cmp	r4, #0
 800a984:	f000 80a1 	beq.w	800aaca <_dtoa_r+0x442>
 800a988:	2f00      	cmp	r7, #0
 800a98a:	dd33      	ble.n	800a9f4 <_dtoa_r+0x36c>
 800a98c:	4bad      	ldr	r3, [pc, #692]	@ (800ac44 <_dtoa_r+0x5bc>)
 800a98e:	f007 020f 	and.w	r2, r7, #15
 800a992:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a996:	ed93 7b00 	vldr	d7, [r3]
 800a99a:	05f8      	lsls	r0, r7, #23
 800a99c:	ed8d 7b04 	vstr	d7, [sp, #16]
 800a9a0:	ea4f 1427 	mov.w	r4, r7, asr #4
 800a9a4:	d516      	bpl.n	800a9d4 <_dtoa_r+0x34c>
 800a9a6:	4ba8      	ldr	r3, [pc, #672]	@ (800ac48 <_dtoa_r+0x5c0>)
 800a9a8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a9ac:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a9b0:	f7f5 ff6c 	bl	800088c <__aeabi_ddiv>
 800a9b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a9b8:	f004 040f 	and.w	r4, r4, #15
 800a9bc:	2603      	movs	r6, #3
 800a9be:	4da2      	ldr	r5, [pc, #648]	@ (800ac48 <_dtoa_r+0x5c0>)
 800a9c0:	b954      	cbnz	r4, 800a9d8 <_dtoa_r+0x350>
 800a9c2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a9c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a9ca:	f7f5 ff5f 	bl	800088c <__aeabi_ddiv>
 800a9ce:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a9d2:	e028      	b.n	800aa26 <_dtoa_r+0x39e>
 800a9d4:	2602      	movs	r6, #2
 800a9d6:	e7f2      	b.n	800a9be <_dtoa_r+0x336>
 800a9d8:	07e1      	lsls	r1, r4, #31
 800a9da:	d508      	bpl.n	800a9ee <_dtoa_r+0x366>
 800a9dc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a9e0:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a9e4:	f7f5 fe28 	bl	8000638 <__aeabi_dmul>
 800a9e8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a9ec:	3601      	adds	r6, #1
 800a9ee:	1064      	asrs	r4, r4, #1
 800a9f0:	3508      	adds	r5, #8
 800a9f2:	e7e5      	b.n	800a9c0 <_dtoa_r+0x338>
 800a9f4:	f000 80d2 	beq.w	800ab9c <_dtoa_r+0x514>
 800a9f8:	427c      	negs	r4, r7
 800a9fa:	4b92      	ldr	r3, [pc, #584]	@ (800ac44 <_dtoa_r+0x5bc>)
 800a9fc:	4d92      	ldr	r5, [pc, #584]	@ (800ac48 <_dtoa_r+0x5c0>)
 800a9fe:	f004 020f 	and.w	r2, r4, #15
 800aa02:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800aa06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa0a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800aa0e:	f7f5 fe13 	bl	8000638 <__aeabi_dmul>
 800aa12:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aa16:	1124      	asrs	r4, r4, #4
 800aa18:	2300      	movs	r3, #0
 800aa1a:	2602      	movs	r6, #2
 800aa1c:	2c00      	cmp	r4, #0
 800aa1e:	f040 80b2 	bne.w	800ab86 <_dtoa_r+0x4fe>
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d1d3      	bne.n	800a9ce <_dtoa_r+0x346>
 800aa26:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800aa28:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	f000 80b7 	beq.w	800aba0 <_dtoa_r+0x518>
 800aa32:	4b86      	ldr	r3, [pc, #536]	@ (800ac4c <_dtoa_r+0x5c4>)
 800aa34:	2200      	movs	r2, #0
 800aa36:	4620      	mov	r0, r4
 800aa38:	4629      	mov	r1, r5
 800aa3a:	f7f6 f86f 	bl	8000b1c <__aeabi_dcmplt>
 800aa3e:	2800      	cmp	r0, #0
 800aa40:	f000 80ae 	beq.w	800aba0 <_dtoa_r+0x518>
 800aa44:	9b07      	ldr	r3, [sp, #28]
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	f000 80aa 	beq.w	800aba0 <_dtoa_r+0x518>
 800aa4c:	9b00      	ldr	r3, [sp, #0]
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	dd37      	ble.n	800aac2 <_dtoa_r+0x43a>
 800aa52:	1e7b      	subs	r3, r7, #1
 800aa54:	9304      	str	r3, [sp, #16]
 800aa56:	4620      	mov	r0, r4
 800aa58:	4b7d      	ldr	r3, [pc, #500]	@ (800ac50 <_dtoa_r+0x5c8>)
 800aa5a:	2200      	movs	r2, #0
 800aa5c:	4629      	mov	r1, r5
 800aa5e:	f7f5 fdeb 	bl	8000638 <__aeabi_dmul>
 800aa62:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aa66:	9c00      	ldr	r4, [sp, #0]
 800aa68:	3601      	adds	r6, #1
 800aa6a:	4630      	mov	r0, r6
 800aa6c:	f7f5 fd7a 	bl	8000564 <__aeabi_i2d>
 800aa70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800aa74:	f7f5 fde0 	bl	8000638 <__aeabi_dmul>
 800aa78:	4b76      	ldr	r3, [pc, #472]	@ (800ac54 <_dtoa_r+0x5cc>)
 800aa7a:	2200      	movs	r2, #0
 800aa7c:	f7f5 fc26 	bl	80002cc <__adddf3>
 800aa80:	4605      	mov	r5, r0
 800aa82:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800aa86:	2c00      	cmp	r4, #0
 800aa88:	f040 808d 	bne.w	800aba6 <_dtoa_r+0x51e>
 800aa8c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aa90:	4b71      	ldr	r3, [pc, #452]	@ (800ac58 <_dtoa_r+0x5d0>)
 800aa92:	2200      	movs	r2, #0
 800aa94:	f7f5 fc18 	bl	80002c8 <__aeabi_dsub>
 800aa98:	4602      	mov	r2, r0
 800aa9a:	460b      	mov	r3, r1
 800aa9c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800aaa0:	462a      	mov	r2, r5
 800aaa2:	4633      	mov	r3, r6
 800aaa4:	f7f6 f858 	bl	8000b58 <__aeabi_dcmpgt>
 800aaa8:	2800      	cmp	r0, #0
 800aaaa:	f040 828b 	bne.w	800afc4 <_dtoa_r+0x93c>
 800aaae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aab2:	462a      	mov	r2, r5
 800aab4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800aab8:	f7f6 f830 	bl	8000b1c <__aeabi_dcmplt>
 800aabc:	2800      	cmp	r0, #0
 800aabe:	f040 8128 	bne.w	800ad12 <_dtoa_r+0x68a>
 800aac2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800aac6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800aaca:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800aacc:	2b00      	cmp	r3, #0
 800aace:	f2c0 815a 	blt.w	800ad86 <_dtoa_r+0x6fe>
 800aad2:	2f0e      	cmp	r7, #14
 800aad4:	f300 8157 	bgt.w	800ad86 <_dtoa_r+0x6fe>
 800aad8:	4b5a      	ldr	r3, [pc, #360]	@ (800ac44 <_dtoa_r+0x5bc>)
 800aada:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800aade:	ed93 7b00 	vldr	d7, [r3]
 800aae2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	ed8d 7b00 	vstr	d7, [sp]
 800aaea:	da03      	bge.n	800aaf4 <_dtoa_r+0x46c>
 800aaec:	9b07      	ldr	r3, [sp, #28]
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	f340 8101 	ble.w	800acf6 <_dtoa_r+0x66e>
 800aaf4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800aaf8:	4656      	mov	r6, sl
 800aafa:	e9dd 2300 	ldrd	r2, r3, [sp]
 800aafe:	4620      	mov	r0, r4
 800ab00:	4629      	mov	r1, r5
 800ab02:	f7f5 fec3 	bl	800088c <__aeabi_ddiv>
 800ab06:	f7f6 f847 	bl	8000b98 <__aeabi_d2iz>
 800ab0a:	4680      	mov	r8, r0
 800ab0c:	f7f5 fd2a 	bl	8000564 <__aeabi_i2d>
 800ab10:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ab14:	f7f5 fd90 	bl	8000638 <__aeabi_dmul>
 800ab18:	4602      	mov	r2, r0
 800ab1a:	460b      	mov	r3, r1
 800ab1c:	4620      	mov	r0, r4
 800ab1e:	4629      	mov	r1, r5
 800ab20:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800ab24:	f7f5 fbd0 	bl	80002c8 <__aeabi_dsub>
 800ab28:	f806 4b01 	strb.w	r4, [r6], #1
 800ab2c:	9d07      	ldr	r5, [sp, #28]
 800ab2e:	eba6 040a 	sub.w	r4, r6, sl
 800ab32:	42a5      	cmp	r5, r4
 800ab34:	4602      	mov	r2, r0
 800ab36:	460b      	mov	r3, r1
 800ab38:	f040 8117 	bne.w	800ad6a <_dtoa_r+0x6e2>
 800ab3c:	f7f5 fbc6 	bl	80002cc <__adddf3>
 800ab40:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ab44:	4604      	mov	r4, r0
 800ab46:	460d      	mov	r5, r1
 800ab48:	f7f6 f806 	bl	8000b58 <__aeabi_dcmpgt>
 800ab4c:	2800      	cmp	r0, #0
 800ab4e:	f040 80f9 	bne.w	800ad44 <_dtoa_r+0x6bc>
 800ab52:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ab56:	4620      	mov	r0, r4
 800ab58:	4629      	mov	r1, r5
 800ab5a:	f7f5 ffd5 	bl	8000b08 <__aeabi_dcmpeq>
 800ab5e:	b118      	cbz	r0, 800ab68 <_dtoa_r+0x4e0>
 800ab60:	f018 0f01 	tst.w	r8, #1
 800ab64:	f040 80ee 	bne.w	800ad44 <_dtoa_r+0x6bc>
 800ab68:	4649      	mov	r1, r9
 800ab6a:	4658      	mov	r0, fp
 800ab6c:	f000 fbda 	bl	800b324 <_Bfree>
 800ab70:	2300      	movs	r3, #0
 800ab72:	7033      	strb	r3, [r6, #0]
 800ab74:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800ab76:	3701      	adds	r7, #1
 800ab78:	601f      	str	r7, [r3, #0]
 800ab7a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	f000 831d 	beq.w	800b1bc <_dtoa_r+0xb34>
 800ab82:	601e      	str	r6, [r3, #0]
 800ab84:	e31a      	b.n	800b1bc <_dtoa_r+0xb34>
 800ab86:	07e2      	lsls	r2, r4, #31
 800ab88:	d505      	bpl.n	800ab96 <_dtoa_r+0x50e>
 800ab8a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ab8e:	f7f5 fd53 	bl	8000638 <__aeabi_dmul>
 800ab92:	3601      	adds	r6, #1
 800ab94:	2301      	movs	r3, #1
 800ab96:	1064      	asrs	r4, r4, #1
 800ab98:	3508      	adds	r5, #8
 800ab9a:	e73f      	b.n	800aa1c <_dtoa_r+0x394>
 800ab9c:	2602      	movs	r6, #2
 800ab9e:	e742      	b.n	800aa26 <_dtoa_r+0x39e>
 800aba0:	9c07      	ldr	r4, [sp, #28]
 800aba2:	9704      	str	r7, [sp, #16]
 800aba4:	e761      	b.n	800aa6a <_dtoa_r+0x3e2>
 800aba6:	4b27      	ldr	r3, [pc, #156]	@ (800ac44 <_dtoa_r+0x5bc>)
 800aba8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800abaa:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800abae:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800abb2:	4454      	add	r4, sl
 800abb4:	2900      	cmp	r1, #0
 800abb6:	d053      	beq.n	800ac60 <_dtoa_r+0x5d8>
 800abb8:	4928      	ldr	r1, [pc, #160]	@ (800ac5c <_dtoa_r+0x5d4>)
 800abba:	2000      	movs	r0, #0
 800abbc:	f7f5 fe66 	bl	800088c <__aeabi_ddiv>
 800abc0:	4633      	mov	r3, r6
 800abc2:	462a      	mov	r2, r5
 800abc4:	f7f5 fb80 	bl	80002c8 <__aeabi_dsub>
 800abc8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800abcc:	4656      	mov	r6, sl
 800abce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800abd2:	f7f5 ffe1 	bl	8000b98 <__aeabi_d2iz>
 800abd6:	4605      	mov	r5, r0
 800abd8:	f7f5 fcc4 	bl	8000564 <__aeabi_i2d>
 800abdc:	4602      	mov	r2, r0
 800abde:	460b      	mov	r3, r1
 800abe0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800abe4:	f7f5 fb70 	bl	80002c8 <__aeabi_dsub>
 800abe8:	3530      	adds	r5, #48	@ 0x30
 800abea:	4602      	mov	r2, r0
 800abec:	460b      	mov	r3, r1
 800abee:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800abf2:	f806 5b01 	strb.w	r5, [r6], #1
 800abf6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800abfa:	f7f5 ff8f 	bl	8000b1c <__aeabi_dcmplt>
 800abfe:	2800      	cmp	r0, #0
 800ac00:	d171      	bne.n	800ace6 <_dtoa_r+0x65e>
 800ac02:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ac06:	4911      	ldr	r1, [pc, #68]	@ (800ac4c <_dtoa_r+0x5c4>)
 800ac08:	2000      	movs	r0, #0
 800ac0a:	f7f5 fb5d 	bl	80002c8 <__aeabi_dsub>
 800ac0e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800ac12:	f7f5 ff83 	bl	8000b1c <__aeabi_dcmplt>
 800ac16:	2800      	cmp	r0, #0
 800ac18:	f040 8095 	bne.w	800ad46 <_dtoa_r+0x6be>
 800ac1c:	42a6      	cmp	r6, r4
 800ac1e:	f43f af50 	beq.w	800aac2 <_dtoa_r+0x43a>
 800ac22:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800ac26:	4b0a      	ldr	r3, [pc, #40]	@ (800ac50 <_dtoa_r+0x5c8>)
 800ac28:	2200      	movs	r2, #0
 800ac2a:	f7f5 fd05 	bl	8000638 <__aeabi_dmul>
 800ac2e:	4b08      	ldr	r3, [pc, #32]	@ (800ac50 <_dtoa_r+0x5c8>)
 800ac30:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800ac34:	2200      	movs	r2, #0
 800ac36:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ac3a:	f7f5 fcfd 	bl	8000638 <__aeabi_dmul>
 800ac3e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ac42:	e7c4      	b.n	800abce <_dtoa_r+0x546>
 800ac44:	08011488 	.word	0x08011488
 800ac48:	08011460 	.word	0x08011460
 800ac4c:	3ff00000 	.word	0x3ff00000
 800ac50:	40240000 	.word	0x40240000
 800ac54:	401c0000 	.word	0x401c0000
 800ac58:	40140000 	.word	0x40140000
 800ac5c:	3fe00000 	.word	0x3fe00000
 800ac60:	4631      	mov	r1, r6
 800ac62:	4628      	mov	r0, r5
 800ac64:	f7f5 fce8 	bl	8000638 <__aeabi_dmul>
 800ac68:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800ac6c:	9415      	str	r4, [sp, #84]	@ 0x54
 800ac6e:	4656      	mov	r6, sl
 800ac70:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ac74:	f7f5 ff90 	bl	8000b98 <__aeabi_d2iz>
 800ac78:	4605      	mov	r5, r0
 800ac7a:	f7f5 fc73 	bl	8000564 <__aeabi_i2d>
 800ac7e:	4602      	mov	r2, r0
 800ac80:	460b      	mov	r3, r1
 800ac82:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ac86:	f7f5 fb1f 	bl	80002c8 <__aeabi_dsub>
 800ac8a:	3530      	adds	r5, #48	@ 0x30
 800ac8c:	f806 5b01 	strb.w	r5, [r6], #1
 800ac90:	4602      	mov	r2, r0
 800ac92:	460b      	mov	r3, r1
 800ac94:	42a6      	cmp	r6, r4
 800ac96:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ac9a:	f04f 0200 	mov.w	r2, #0
 800ac9e:	d124      	bne.n	800acea <_dtoa_r+0x662>
 800aca0:	4bac      	ldr	r3, [pc, #688]	@ (800af54 <_dtoa_r+0x8cc>)
 800aca2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800aca6:	f7f5 fb11 	bl	80002cc <__adddf3>
 800acaa:	4602      	mov	r2, r0
 800acac:	460b      	mov	r3, r1
 800acae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800acb2:	f7f5 ff51 	bl	8000b58 <__aeabi_dcmpgt>
 800acb6:	2800      	cmp	r0, #0
 800acb8:	d145      	bne.n	800ad46 <_dtoa_r+0x6be>
 800acba:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800acbe:	49a5      	ldr	r1, [pc, #660]	@ (800af54 <_dtoa_r+0x8cc>)
 800acc0:	2000      	movs	r0, #0
 800acc2:	f7f5 fb01 	bl	80002c8 <__aeabi_dsub>
 800acc6:	4602      	mov	r2, r0
 800acc8:	460b      	mov	r3, r1
 800acca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800acce:	f7f5 ff25 	bl	8000b1c <__aeabi_dcmplt>
 800acd2:	2800      	cmp	r0, #0
 800acd4:	f43f aef5 	beq.w	800aac2 <_dtoa_r+0x43a>
 800acd8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800acda:	1e73      	subs	r3, r6, #1
 800acdc:	9315      	str	r3, [sp, #84]	@ 0x54
 800acde:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800ace2:	2b30      	cmp	r3, #48	@ 0x30
 800ace4:	d0f8      	beq.n	800acd8 <_dtoa_r+0x650>
 800ace6:	9f04      	ldr	r7, [sp, #16]
 800ace8:	e73e      	b.n	800ab68 <_dtoa_r+0x4e0>
 800acea:	4b9b      	ldr	r3, [pc, #620]	@ (800af58 <_dtoa_r+0x8d0>)
 800acec:	f7f5 fca4 	bl	8000638 <__aeabi_dmul>
 800acf0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800acf4:	e7bc      	b.n	800ac70 <_dtoa_r+0x5e8>
 800acf6:	d10c      	bne.n	800ad12 <_dtoa_r+0x68a>
 800acf8:	4b98      	ldr	r3, [pc, #608]	@ (800af5c <_dtoa_r+0x8d4>)
 800acfa:	2200      	movs	r2, #0
 800acfc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ad00:	f7f5 fc9a 	bl	8000638 <__aeabi_dmul>
 800ad04:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ad08:	f7f5 ff1c 	bl	8000b44 <__aeabi_dcmpge>
 800ad0c:	2800      	cmp	r0, #0
 800ad0e:	f000 8157 	beq.w	800afc0 <_dtoa_r+0x938>
 800ad12:	2400      	movs	r4, #0
 800ad14:	4625      	mov	r5, r4
 800ad16:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ad18:	43db      	mvns	r3, r3
 800ad1a:	9304      	str	r3, [sp, #16]
 800ad1c:	4656      	mov	r6, sl
 800ad1e:	2700      	movs	r7, #0
 800ad20:	4621      	mov	r1, r4
 800ad22:	4658      	mov	r0, fp
 800ad24:	f000 fafe 	bl	800b324 <_Bfree>
 800ad28:	2d00      	cmp	r5, #0
 800ad2a:	d0dc      	beq.n	800ace6 <_dtoa_r+0x65e>
 800ad2c:	b12f      	cbz	r7, 800ad3a <_dtoa_r+0x6b2>
 800ad2e:	42af      	cmp	r7, r5
 800ad30:	d003      	beq.n	800ad3a <_dtoa_r+0x6b2>
 800ad32:	4639      	mov	r1, r7
 800ad34:	4658      	mov	r0, fp
 800ad36:	f000 faf5 	bl	800b324 <_Bfree>
 800ad3a:	4629      	mov	r1, r5
 800ad3c:	4658      	mov	r0, fp
 800ad3e:	f000 faf1 	bl	800b324 <_Bfree>
 800ad42:	e7d0      	b.n	800ace6 <_dtoa_r+0x65e>
 800ad44:	9704      	str	r7, [sp, #16]
 800ad46:	4633      	mov	r3, r6
 800ad48:	461e      	mov	r6, r3
 800ad4a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ad4e:	2a39      	cmp	r2, #57	@ 0x39
 800ad50:	d107      	bne.n	800ad62 <_dtoa_r+0x6da>
 800ad52:	459a      	cmp	sl, r3
 800ad54:	d1f8      	bne.n	800ad48 <_dtoa_r+0x6c0>
 800ad56:	9a04      	ldr	r2, [sp, #16]
 800ad58:	3201      	adds	r2, #1
 800ad5a:	9204      	str	r2, [sp, #16]
 800ad5c:	2230      	movs	r2, #48	@ 0x30
 800ad5e:	f88a 2000 	strb.w	r2, [sl]
 800ad62:	781a      	ldrb	r2, [r3, #0]
 800ad64:	3201      	adds	r2, #1
 800ad66:	701a      	strb	r2, [r3, #0]
 800ad68:	e7bd      	b.n	800ace6 <_dtoa_r+0x65e>
 800ad6a:	4b7b      	ldr	r3, [pc, #492]	@ (800af58 <_dtoa_r+0x8d0>)
 800ad6c:	2200      	movs	r2, #0
 800ad6e:	f7f5 fc63 	bl	8000638 <__aeabi_dmul>
 800ad72:	2200      	movs	r2, #0
 800ad74:	2300      	movs	r3, #0
 800ad76:	4604      	mov	r4, r0
 800ad78:	460d      	mov	r5, r1
 800ad7a:	f7f5 fec5 	bl	8000b08 <__aeabi_dcmpeq>
 800ad7e:	2800      	cmp	r0, #0
 800ad80:	f43f aebb 	beq.w	800aafa <_dtoa_r+0x472>
 800ad84:	e6f0      	b.n	800ab68 <_dtoa_r+0x4e0>
 800ad86:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800ad88:	2a00      	cmp	r2, #0
 800ad8a:	f000 80db 	beq.w	800af44 <_dtoa_r+0x8bc>
 800ad8e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ad90:	2a01      	cmp	r2, #1
 800ad92:	f300 80bf 	bgt.w	800af14 <_dtoa_r+0x88c>
 800ad96:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800ad98:	2a00      	cmp	r2, #0
 800ad9a:	f000 80b7 	beq.w	800af0c <_dtoa_r+0x884>
 800ad9e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800ada2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800ada4:	4646      	mov	r6, r8
 800ada6:	9a08      	ldr	r2, [sp, #32]
 800ada8:	2101      	movs	r1, #1
 800adaa:	441a      	add	r2, r3
 800adac:	4658      	mov	r0, fp
 800adae:	4498      	add	r8, r3
 800adb0:	9208      	str	r2, [sp, #32]
 800adb2:	f000 fbb5 	bl	800b520 <__i2b>
 800adb6:	4605      	mov	r5, r0
 800adb8:	b15e      	cbz	r6, 800add2 <_dtoa_r+0x74a>
 800adba:	9b08      	ldr	r3, [sp, #32]
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	dd08      	ble.n	800add2 <_dtoa_r+0x74a>
 800adc0:	42b3      	cmp	r3, r6
 800adc2:	9a08      	ldr	r2, [sp, #32]
 800adc4:	bfa8      	it	ge
 800adc6:	4633      	movge	r3, r6
 800adc8:	eba8 0803 	sub.w	r8, r8, r3
 800adcc:	1af6      	subs	r6, r6, r3
 800adce:	1ad3      	subs	r3, r2, r3
 800add0:	9308      	str	r3, [sp, #32]
 800add2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800add4:	b1f3      	cbz	r3, 800ae14 <_dtoa_r+0x78c>
 800add6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800add8:	2b00      	cmp	r3, #0
 800adda:	f000 80b7 	beq.w	800af4c <_dtoa_r+0x8c4>
 800adde:	b18c      	cbz	r4, 800ae04 <_dtoa_r+0x77c>
 800ade0:	4629      	mov	r1, r5
 800ade2:	4622      	mov	r2, r4
 800ade4:	4658      	mov	r0, fp
 800ade6:	f000 fc5b 	bl	800b6a0 <__pow5mult>
 800adea:	464a      	mov	r2, r9
 800adec:	4601      	mov	r1, r0
 800adee:	4605      	mov	r5, r0
 800adf0:	4658      	mov	r0, fp
 800adf2:	f000 fbab 	bl	800b54c <__multiply>
 800adf6:	4649      	mov	r1, r9
 800adf8:	9004      	str	r0, [sp, #16]
 800adfa:	4658      	mov	r0, fp
 800adfc:	f000 fa92 	bl	800b324 <_Bfree>
 800ae00:	9b04      	ldr	r3, [sp, #16]
 800ae02:	4699      	mov	r9, r3
 800ae04:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ae06:	1b1a      	subs	r2, r3, r4
 800ae08:	d004      	beq.n	800ae14 <_dtoa_r+0x78c>
 800ae0a:	4649      	mov	r1, r9
 800ae0c:	4658      	mov	r0, fp
 800ae0e:	f000 fc47 	bl	800b6a0 <__pow5mult>
 800ae12:	4681      	mov	r9, r0
 800ae14:	2101      	movs	r1, #1
 800ae16:	4658      	mov	r0, fp
 800ae18:	f000 fb82 	bl	800b520 <__i2b>
 800ae1c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ae1e:	4604      	mov	r4, r0
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	f000 81cf 	beq.w	800b1c4 <_dtoa_r+0xb3c>
 800ae26:	461a      	mov	r2, r3
 800ae28:	4601      	mov	r1, r0
 800ae2a:	4658      	mov	r0, fp
 800ae2c:	f000 fc38 	bl	800b6a0 <__pow5mult>
 800ae30:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ae32:	2b01      	cmp	r3, #1
 800ae34:	4604      	mov	r4, r0
 800ae36:	f300 8095 	bgt.w	800af64 <_dtoa_r+0x8dc>
 800ae3a:	9b02      	ldr	r3, [sp, #8]
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	f040 8087 	bne.w	800af50 <_dtoa_r+0x8c8>
 800ae42:	9b03      	ldr	r3, [sp, #12]
 800ae44:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	f040 8089 	bne.w	800af60 <_dtoa_r+0x8d8>
 800ae4e:	9b03      	ldr	r3, [sp, #12]
 800ae50:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800ae54:	0d1b      	lsrs	r3, r3, #20
 800ae56:	051b      	lsls	r3, r3, #20
 800ae58:	b12b      	cbz	r3, 800ae66 <_dtoa_r+0x7de>
 800ae5a:	9b08      	ldr	r3, [sp, #32]
 800ae5c:	3301      	adds	r3, #1
 800ae5e:	9308      	str	r3, [sp, #32]
 800ae60:	f108 0801 	add.w	r8, r8, #1
 800ae64:	2301      	movs	r3, #1
 800ae66:	930a      	str	r3, [sp, #40]	@ 0x28
 800ae68:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	f000 81b0 	beq.w	800b1d0 <_dtoa_r+0xb48>
 800ae70:	6923      	ldr	r3, [r4, #16]
 800ae72:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ae76:	6918      	ldr	r0, [r3, #16]
 800ae78:	f000 fb06 	bl	800b488 <__hi0bits>
 800ae7c:	f1c0 0020 	rsb	r0, r0, #32
 800ae80:	9b08      	ldr	r3, [sp, #32]
 800ae82:	4418      	add	r0, r3
 800ae84:	f010 001f 	ands.w	r0, r0, #31
 800ae88:	d077      	beq.n	800af7a <_dtoa_r+0x8f2>
 800ae8a:	f1c0 0320 	rsb	r3, r0, #32
 800ae8e:	2b04      	cmp	r3, #4
 800ae90:	dd6b      	ble.n	800af6a <_dtoa_r+0x8e2>
 800ae92:	9b08      	ldr	r3, [sp, #32]
 800ae94:	f1c0 001c 	rsb	r0, r0, #28
 800ae98:	4403      	add	r3, r0
 800ae9a:	4480      	add	r8, r0
 800ae9c:	4406      	add	r6, r0
 800ae9e:	9308      	str	r3, [sp, #32]
 800aea0:	f1b8 0f00 	cmp.w	r8, #0
 800aea4:	dd05      	ble.n	800aeb2 <_dtoa_r+0x82a>
 800aea6:	4649      	mov	r1, r9
 800aea8:	4642      	mov	r2, r8
 800aeaa:	4658      	mov	r0, fp
 800aeac:	f000 fc52 	bl	800b754 <__lshift>
 800aeb0:	4681      	mov	r9, r0
 800aeb2:	9b08      	ldr	r3, [sp, #32]
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	dd05      	ble.n	800aec4 <_dtoa_r+0x83c>
 800aeb8:	4621      	mov	r1, r4
 800aeba:	461a      	mov	r2, r3
 800aebc:	4658      	mov	r0, fp
 800aebe:	f000 fc49 	bl	800b754 <__lshift>
 800aec2:	4604      	mov	r4, r0
 800aec4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	d059      	beq.n	800af7e <_dtoa_r+0x8f6>
 800aeca:	4621      	mov	r1, r4
 800aecc:	4648      	mov	r0, r9
 800aece:	f000 fcad 	bl	800b82c <__mcmp>
 800aed2:	2800      	cmp	r0, #0
 800aed4:	da53      	bge.n	800af7e <_dtoa_r+0x8f6>
 800aed6:	1e7b      	subs	r3, r7, #1
 800aed8:	9304      	str	r3, [sp, #16]
 800aeda:	4649      	mov	r1, r9
 800aedc:	2300      	movs	r3, #0
 800aede:	220a      	movs	r2, #10
 800aee0:	4658      	mov	r0, fp
 800aee2:	f000 fa41 	bl	800b368 <__multadd>
 800aee6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800aee8:	4681      	mov	r9, r0
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	f000 8172 	beq.w	800b1d4 <_dtoa_r+0xb4c>
 800aef0:	2300      	movs	r3, #0
 800aef2:	4629      	mov	r1, r5
 800aef4:	220a      	movs	r2, #10
 800aef6:	4658      	mov	r0, fp
 800aef8:	f000 fa36 	bl	800b368 <__multadd>
 800aefc:	9b00      	ldr	r3, [sp, #0]
 800aefe:	2b00      	cmp	r3, #0
 800af00:	4605      	mov	r5, r0
 800af02:	dc67      	bgt.n	800afd4 <_dtoa_r+0x94c>
 800af04:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af06:	2b02      	cmp	r3, #2
 800af08:	dc41      	bgt.n	800af8e <_dtoa_r+0x906>
 800af0a:	e063      	b.n	800afd4 <_dtoa_r+0x94c>
 800af0c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800af0e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800af12:	e746      	b.n	800ada2 <_dtoa_r+0x71a>
 800af14:	9b07      	ldr	r3, [sp, #28]
 800af16:	1e5c      	subs	r4, r3, #1
 800af18:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800af1a:	42a3      	cmp	r3, r4
 800af1c:	bfbf      	itttt	lt
 800af1e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800af20:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800af22:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800af24:	1ae3      	sublt	r3, r4, r3
 800af26:	bfb4      	ite	lt
 800af28:	18d2      	addlt	r2, r2, r3
 800af2a:	1b1c      	subge	r4, r3, r4
 800af2c:	9b07      	ldr	r3, [sp, #28]
 800af2e:	bfbc      	itt	lt
 800af30:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800af32:	2400      	movlt	r4, #0
 800af34:	2b00      	cmp	r3, #0
 800af36:	bfb5      	itete	lt
 800af38:	eba8 0603 	sublt.w	r6, r8, r3
 800af3c:	9b07      	ldrge	r3, [sp, #28]
 800af3e:	2300      	movlt	r3, #0
 800af40:	4646      	movge	r6, r8
 800af42:	e730      	b.n	800ada6 <_dtoa_r+0x71e>
 800af44:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800af46:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800af48:	4646      	mov	r6, r8
 800af4a:	e735      	b.n	800adb8 <_dtoa_r+0x730>
 800af4c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800af4e:	e75c      	b.n	800ae0a <_dtoa_r+0x782>
 800af50:	2300      	movs	r3, #0
 800af52:	e788      	b.n	800ae66 <_dtoa_r+0x7de>
 800af54:	3fe00000 	.word	0x3fe00000
 800af58:	40240000 	.word	0x40240000
 800af5c:	40140000 	.word	0x40140000
 800af60:	9b02      	ldr	r3, [sp, #8]
 800af62:	e780      	b.n	800ae66 <_dtoa_r+0x7de>
 800af64:	2300      	movs	r3, #0
 800af66:	930a      	str	r3, [sp, #40]	@ 0x28
 800af68:	e782      	b.n	800ae70 <_dtoa_r+0x7e8>
 800af6a:	d099      	beq.n	800aea0 <_dtoa_r+0x818>
 800af6c:	9a08      	ldr	r2, [sp, #32]
 800af6e:	331c      	adds	r3, #28
 800af70:	441a      	add	r2, r3
 800af72:	4498      	add	r8, r3
 800af74:	441e      	add	r6, r3
 800af76:	9208      	str	r2, [sp, #32]
 800af78:	e792      	b.n	800aea0 <_dtoa_r+0x818>
 800af7a:	4603      	mov	r3, r0
 800af7c:	e7f6      	b.n	800af6c <_dtoa_r+0x8e4>
 800af7e:	9b07      	ldr	r3, [sp, #28]
 800af80:	9704      	str	r7, [sp, #16]
 800af82:	2b00      	cmp	r3, #0
 800af84:	dc20      	bgt.n	800afc8 <_dtoa_r+0x940>
 800af86:	9300      	str	r3, [sp, #0]
 800af88:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af8a:	2b02      	cmp	r3, #2
 800af8c:	dd1e      	ble.n	800afcc <_dtoa_r+0x944>
 800af8e:	9b00      	ldr	r3, [sp, #0]
 800af90:	2b00      	cmp	r3, #0
 800af92:	f47f aec0 	bne.w	800ad16 <_dtoa_r+0x68e>
 800af96:	4621      	mov	r1, r4
 800af98:	2205      	movs	r2, #5
 800af9a:	4658      	mov	r0, fp
 800af9c:	f000 f9e4 	bl	800b368 <__multadd>
 800afa0:	4601      	mov	r1, r0
 800afa2:	4604      	mov	r4, r0
 800afa4:	4648      	mov	r0, r9
 800afa6:	f000 fc41 	bl	800b82c <__mcmp>
 800afaa:	2800      	cmp	r0, #0
 800afac:	f77f aeb3 	ble.w	800ad16 <_dtoa_r+0x68e>
 800afb0:	4656      	mov	r6, sl
 800afb2:	2331      	movs	r3, #49	@ 0x31
 800afb4:	f806 3b01 	strb.w	r3, [r6], #1
 800afb8:	9b04      	ldr	r3, [sp, #16]
 800afba:	3301      	adds	r3, #1
 800afbc:	9304      	str	r3, [sp, #16]
 800afbe:	e6ae      	b.n	800ad1e <_dtoa_r+0x696>
 800afc0:	9c07      	ldr	r4, [sp, #28]
 800afc2:	9704      	str	r7, [sp, #16]
 800afc4:	4625      	mov	r5, r4
 800afc6:	e7f3      	b.n	800afb0 <_dtoa_r+0x928>
 800afc8:	9b07      	ldr	r3, [sp, #28]
 800afca:	9300      	str	r3, [sp, #0]
 800afcc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800afce:	2b00      	cmp	r3, #0
 800afd0:	f000 8104 	beq.w	800b1dc <_dtoa_r+0xb54>
 800afd4:	2e00      	cmp	r6, #0
 800afd6:	dd05      	ble.n	800afe4 <_dtoa_r+0x95c>
 800afd8:	4629      	mov	r1, r5
 800afda:	4632      	mov	r2, r6
 800afdc:	4658      	mov	r0, fp
 800afde:	f000 fbb9 	bl	800b754 <__lshift>
 800afe2:	4605      	mov	r5, r0
 800afe4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d05a      	beq.n	800b0a0 <_dtoa_r+0xa18>
 800afea:	6869      	ldr	r1, [r5, #4]
 800afec:	4658      	mov	r0, fp
 800afee:	f000 f959 	bl	800b2a4 <_Balloc>
 800aff2:	4606      	mov	r6, r0
 800aff4:	b928      	cbnz	r0, 800b002 <_dtoa_r+0x97a>
 800aff6:	4b84      	ldr	r3, [pc, #528]	@ (800b208 <_dtoa_r+0xb80>)
 800aff8:	4602      	mov	r2, r0
 800affa:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800affe:	f7ff bb5a 	b.w	800a6b6 <_dtoa_r+0x2e>
 800b002:	692a      	ldr	r2, [r5, #16]
 800b004:	3202      	adds	r2, #2
 800b006:	0092      	lsls	r2, r2, #2
 800b008:	f105 010c 	add.w	r1, r5, #12
 800b00c:	300c      	adds	r0, #12
 800b00e:	f7ff fa9c 	bl	800a54a <memcpy>
 800b012:	2201      	movs	r2, #1
 800b014:	4631      	mov	r1, r6
 800b016:	4658      	mov	r0, fp
 800b018:	f000 fb9c 	bl	800b754 <__lshift>
 800b01c:	f10a 0301 	add.w	r3, sl, #1
 800b020:	9307      	str	r3, [sp, #28]
 800b022:	9b00      	ldr	r3, [sp, #0]
 800b024:	4453      	add	r3, sl
 800b026:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b028:	9b02      	ldr	r3, [sp, #8]
 800b02a:	f003 0301 	and.w	r3, r3, #1
 800b02e:	462f      	mov	r7, r5
 800b030:	930a      	str	r3, [sp, #40]	@ 0x28
 800b032:	4605      	mov	r5, r0
 800b034:	9b07      	ldr	r3, [sp, #28]
 800b036:	4621      	mov	r1, r4
 800b038:	3b01      	subs	r3, #1
 800b03a:	4648      	mov	r0, r9
 800b03c:	9300      	str	r3, [sp, #0]
 800b03e:	f7ff fa99 	bl	800a574 <quorem>
 800b042:	4639      	mov	r1, r7
 800b044:	9002      	str	r0, [sp, #8]
 800b046:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800b04a:	4648      	mov	r0, r9
 800b04c:	f000 fbee 	bl	800b82c <__mcmp>
 800b050:	462a      	mov	r2, r5
 800b052:	9008      	str	r0, [sp, #32]
 800b054:	4621      	mov	r1, r4
 800b056:	4658      	mov	r0, fp
 800b058:	f000 fc04 	bl	800b864 <__mdiff>
 800b05c:	68c2      	ldr	r2, [r0, #12]
 800b05e:	4606      	mov	r6, r0
 800b060:	bb02      	cbnz	r2, 800b0a4 <_dtoa_r+0xa1c>
 800b062:	4601      	mov	r1, r0
 800b064:	4648      	mov	r0, r9
 800b066:	f000 fbe1 	bl	800b82c <__mcmp>
 800b06a:	4602      	mov	r2, r0
 800b06c:	4631      	mov	r1, r6
 800b06e:	4658      	mov	r0, fp
 800b070:	920e      	str	r2, [sp, #56]	@ 0x38
 800b072:	f000 f957 	bl	800b324 <_Bfree>
 800b076:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b078:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b07a:	9e07      	ldr	r6, [sp, #28]
 800b07c:	ea43 0102 	orr.w	r1, r3, r2
 800b080:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b082:	4319      	orrs	r1, r3
 800b084:	d110      	bne.n	800b0a8 <_dtoa_r+0xa20>
 800b086:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b08a:	d029      	beq.n	800b0e0 <_dtoa_r+0xa58>
 800b08c:	9b08      	ldr	r3, [sp, #32]
 800b08e:	2b00      	cmp	r3, #0
 800b090:	dd02      	ble.n	800b098 <_dtoa_r+0xa10>
 800b092:	9b02      	ldr	r3, [sp, #8]
 800b094:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800b098:	9b00      	ldr	r3, [sp, #0]
 800b09a:	f883 8000 	strb.w	r8, [r3]
 800b09e:	e63f      	b.n	800ad20 <_dtoa_r+0x698>
 800b0a0:	4628      	mov	r0, r5
 800b0a2:	e7bb      	b.n	800b01c <_dtoa_r+0x994>
 800b0a4:	2201      	movs	r2, #1
 800b0a6:	e7e1      	b.n	800b06c <_dtoa_r+0x9e4>
 800b0a8:	9b08      	ldr	r3, [sp, #32]
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	db04      	blt.n	800b0b8 <_dtoa_r+0xa30>
 800b0ae:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b0b0:	430b      	orrs	r3, r1
 800b0b2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b0b4:	430b      	orrs	r3, r1
 800b0b6:	d120      	bne.n	800b0fa <_dtoa_r+0xa72>
 800b0b8:	2a00      	cmp	r2, #0
 800b0ba:	dded      	ble.n	800b098 <_dtoa_r+0xa10>
 800b0bc:	4649      	mov	r1, r9
 800b0be:	2201      	movs	r2, #1
 800b0c0:	4658      	mov	r0, fp
 800b0c2:	f000 fb47 	bl	800b754 <__lshift>
 800b0c6:	4621      	mov	r1, r4
 800b0c8:	4681      	mov	r9, r0
 800b0ca:	f000 fbaf 	bl	800b82c <__mcmp>
 800b0ce:	2800      	cmp	r0, #0
 800b0d0:	dc03      	bgt.n	800b0da <_dtoa_r+0xa52>
 800b0d2:	d1e1      	bne.n	800b098 <_dtoa_r+0xa10>
 800b0d4:	f018 0f01 	tst.w	r8, #1
 800b0d8:	d0de      	beq.n	800b098 <_dtoa_r+0xa10>
 800b0da:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b0de:	d1d8      	bne.n	800b092 <_dtoa_r+0xa0a>
 800b0e0:	9a00      	ldr	r2, [sp, #0]
 800b0e2:	2339      	movs	r3, #57	@ 0x39
 800b0e4:	7013      	strb	r3, [r2, #0]
 800b0e6:	4633      	mov	r3, r6
 800b0e8:	461e      	mov	r6, r3
 800b0ea:	3b01      	subs	r3, #1
 800b0ec:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800b0f0:	2a39      	cmp	r2, #57	@ 0x39
 800b0f2:	d052      	beq.n	800b19a <_dtoa_r+0xb12>
 800b0f4:	3201      	adds	r2, #1
 800b0f6:	701a      	strb	r2, [r3, #0]
 800b0f8:	e612      	b.n	800ad20 <_dtoa_r+0x698>
 800b0fa:	2a00      	cmp	r2, #0
 800b0fc:	dd07      	ble.n	800b10e <_dtoa_r+0xa86>
 800b0fe:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b102:	d0ed      	beq.n	800b0e0 <_dtoa_r+0xa58>
 800b104:	9a00      	ldr	r2, [sp, #0]
 800b106:	f108 0301 	add.w	r3, r8, #1
 800b10a:	7013      	strb	r3, [r2, #0]
 800b10c:	e608      	b.n	800ad20 <_dtoa_r+0x698>
 800b10e:	9b07      	ldr	r3, [sp, #28]
 800b110:	9a07      	ldr	r2, [sp, #28]
 800b112:	f803 8c01 	strb.w	r8, [r3, #-1]
 800b116:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b118:	4293      	cmp	r3, r2
 800b11a:	d028      	beq.n	800b16e <_dtoa_r+0xae6>
 800b11c:	4649      	mov	r1, r9
 800b11e:	2300      	movs	r3, #0
 800b120:	220a      	movs	r2, #10
 800b122:	4658      	mov	r0, fp
 800b124:	f000 f920 	bl	800b368 <__multadd>
 800b128:	42af      	cmp	r7, r5
 800b12a:	4681      	mov	r9, r0
 800b12c:	f04f 0300 	mov.w	r3, #0
 800b130:	f04f 020a 	mov.w	r2, #10
 800b134:	4639      	mov	r1, r7
 800b136:	4658      	mov	r0, fp
 800b138:	d107      	bne.n	800b14a <_dtoa_r+0xac2>
 800b13a:	f000 f915 	bl	800b368 <__multadd>
 800b13e:	4607      	mov	r7, r0
 800b140:	4605      	mov	r5, r0
 800b142:	9b07      	ldr	r3, [sp, #28]
 800b144:	3301      	adds	r3, #1
 800b146:	9307      	str	r3, [sp, #28]
 800b148:	e774      	b.n	800b034 <_dtoa_r+0x9ac>
 800b14a:	f000 f90d 	bl	800b368 <__multadd>
 800b14e:	4629      	mov	r1, r5
 800b150:	4607      	mov	r7, r0
 800b152:	2300      	movs	r3, #0
 800b154:	220a      	movs	r2, #10
 800b156:	4658      	mov	r0, fp
 800b158:	f000 f906 	bl	800b368 <__multadd>
 800b15c:	4605      	mov	r5, r0
 800b15e:	e7f0      	b.n	800b142 <_dtoa_r+0xaba>
 800b160:	9b00      	ldr	r3, [sp, #0]
 800b162:	2b00      	cmp	r3, #0
 800b164:	bfcc      	ite	gt
 800b166:	461e      	movgt	r6, r3
 800b168:	2601      	movle	r6, #1
 800b16a:	4456      	add	r6, sl
 800b16c:	2700      	movs	r7, #0
 800b16e:	4649      	mov	r1, r9
 800b170:	2201      	movs	r2, #1
 800b172:	4658      	mov	r0, fp
 800b174:	f000 faee 	bl	800b754 <__lshift>
 800b178:	4621      	mov	r1, r4
 800b17a:	4681      	mov	r9, r0
 800b17c:	f000 fb56 	bl	800b82c <__mcmp>
 800b180:	2800      	cmp	r0, #0
 800b182:	dcb0      	bgt.n	800b0e6 <_dtoa_r+0xa5e>
 800b184:	d102      	bne.n	800b18c <_dtoa_r+0xb04>
 800b186:	f018 0f01 	tst.w	r8, #1
 800b18a:	d1ac      	bne.n	800b0e6 <_dtoa_r+0xa5e>
 800b18c:	4633      	mov	r3, r6
 800b18e:	461e      	mov	r6, r3
 800b190:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b194:	2a30      	cmp	r2, #48	@ 0x30
 800b196:	d0fa      	beq.n	800b18e <_dtoa_r+0xb06>
 800b198:	e5c2      	b.n	800ad20 <_dtoa_r+0x698>
 800b19a:	459a      	cmp	sl, r3
 800b19c:	d1a4      	bne.n	800b0e8 <_dtoa_r+0xa60>
 800b19e:	9b04      	ldr	r3, [sp, #16]
 800b1a0:	3301      	adds	r3, #1
 800b1a2:	9304      	str	r3, [sp, #16]
 800b1a4:	2331      	movs	r3, #49	@ 0x31
 800b1a6:	f88a 3000 	strb.w	r3, [sl]
 800b1aa:	e5b9      	b.n	800ad20 <_dtoa_r+0x698>
 800b1ac:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b1ae:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800b20c <_dtoa_r+0xb84>
 800b1b2:	b11b      	cbz	r3, 800b1bc <_dtoa_r+0xb34>
 800b1b4:	f10a 0308 	add.w	r3, sl, #8
 800b1b8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800b1ba:	6013      	str	r3, [r2, #0]
 800b1bc:	4650      	mov	r0, sl
 800b1be:	b019      	add	sp, #100	@ 0x64
 800b1c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b1c6:	2b01      	cmp	r3, #1
 800b1c8:	f77f ae37 	ble.w	800ae3a <_dtoa_r+0x7b2>
 800b1cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b1ce:	930a      	str	r3, [sp, #40]	@ 0x28
 800b1d0:	2001      	movs	r0, #1
 800b1d2:	e655      	b.n	800ae80 <_dtoa_r+0x7f8>
 800b1d4:	9b00      	ldr	r3, [sp, #0]
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	f77f aed6 	ble.w	800af88 <_dtoa_r+0x900>
 800b1dc:	4656      	mov	r6, sl
 800b1de:	4621      	mov	r1, r4
 800b1e0:	4648      	mov	r0, r9
 800b1e2:	f7ff f9c7 	bl	800a574 <quorem>
 800b1e6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800b1ea:	f806 8b01 	strb.w	r8, [r6], #1
 800b1ee:	9b00      	ldr	r3, [sp, #0]
 800b1f0:	eba6 020a 	sub.w	r2, r6, sl
 800b1f4:	4293      	cmp	r3, r2
 800b1f6:	ddb3      	ble.n	800b160 <_dtoa_r+0xad8>
 800b1f8:	4649      	mov	r1, r9
 800b1fa:	2300      	movs	r3, #0
 800b1fc:	220a      	movs	r2, #10
 800b1fe:	4658      	mov	r0, fp
 800b200:	f000 f8b2 	bl	800b368 <__multadd>
 800b204:	4681      	mov	r9, r0
 800b206:	e7ea      	b.n	800b1de <_dtoa_r+0xb56>
 800b208:	080113e9 	.word	0x080113e9
 800b20c:	0801136d 	.word	0x0801136d

0800b210 <_free_r>:
 800b210:	b538      	push	{r3, r4, r5, lr}
 800b212:	4605      	mov	r5, r0
 800b214:	2900      	cmp	r1, #0
 800b216:	d041      	beq.n	800b29c <_free_r+0x8c>
 800b218:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b21c:	1f0c      	subs	r4, r1, #4
 800b21e:	2b00      	cmp	r3, #0
 800b220:	bfb8      	it	lt
 800b222:	18e4      	addlt	r4, r4, r3
 800b224:	f7fe f858 	bl	80092d8 <__malloc_lock>
 800b228:	4a1d      	ldr	r2, [pc, #116]	@ (800b2a0 <_free_r+0x90>)
 800b22a:	6813      	ldr	r3, [r2, #0]
 800b22c:	b933      	cbnz	r3, 800b23c <_free_r+0x2c>
 800b22e:	6063      	str	r3, [r4, #4]
 800b230:	6014      	str	r4, [r2, #0]
 800b232:	4628      	mov	r0, r5
 800b234:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b238:	f7fe b854 	b.w	80092e4 <__malloc_unlock>
 800b23c:	42a3      	cmp	r3, r4
 800b23e:	d908      	bls.n	800b252 <_free_r+0x42>
 800b240:	6820      	ldr	r0, [r4, #0]
 800b242:	1821      	adds	r1, r4, r0
 800b244:	428b      	cmp	r3, r1
 800b246:	bf01      	itttt	eq
 800b248:	6819      	ldreq	r1, [r3, #0]
 800b24a:	685b      	ldreq	r3, [r3, #4]
 800b24c:	1809      	addeq	r1, r1, r0
 800b24e:	6021      	streq	r1, [r4, #0]
 800b250:	e7ed      	b.n	800b22e <_free_r+0x1e>
 800b252:	461a      	mov	r2, r3
 800b254:	685b      	ldr	r3, [r3, #4]
 800b256:	b10b      	cbz	r3, 800b25c <_free_r+0x4c>
 800b258:	42a3      	cmp	r3, r4
 800b25a:	d9fa      	bls.n	800b252 <_free_r+0x42>
 800b25c:	6811      	ldr	r1, [r2, #0]
 800b25e:	1850      	adds	r0, r2, r1
 800b260:	42a0      	cmp	r0, r4
 800b262:	d10b      	bne.n	800b27c <_free_r+0x6c>
 800b264:	6820      	ldr	r0, [r4, #0]
 800b266:	4401      	add	r1, r0
 800b268:	1850      	adds	r0, r2, r1
 800b26a:	4283      	cmp	r3, r0
 800b26c:	6011      	str	r1, [r2, #0]
 800b26e:	d1e0      	bne.n	800b232 <_free_r+0x22>
 800b270:	6818      	ldr	r0, [r3, #0]
 800b272:	685b      	ldr	r3, [r3, #4]
 800b274:	6053      	str	r3, [r2, #4]
 800b276:	4408      	add	r0, r1
 800b278:	6010      	str	r0, [r2, #0]
 800b27a:	e7da      	b.n	800b232 <_free_r+0x22>
 800b27c:	d902      	bls.n	800b284 <_free_r+0x74>
 800b27e:	230c      	movs	r3, #12
 800b280:	602b      	str	r3, [r5, #0]
 800b282:	e7d6      	b.n	800b232 <_free_r+0x22>
 800b284:	6820      	ldr	r0, [r4, #0]
 800b286:	1821      	adds	r1, r4, r0
 800b288:	428b      	cmp	r3, r1
 800b28a:	bf04      	itt	eq
 800b28c:	6819      	ldreq	r1, [r3, #0]
 800b28e:	685b      	ldreq	r3, [r3, #4]
 800b290:	6063      	str	r3, [r4, #4]
 800b292:	bf04      	itt	eq
 800b294:	1809      	addeq	r1, r1, r0
 800b296:	6021      	streq	r1, [r4, #0]
 800b298:	6054      	str	r4, [r2, #4]
 800b29a:	e7ca      	b.n	800b232 <_free_r+0x22>
 800b29c:	bd38      	pop	{r3, r4, r5, pc}
 800b29e:	bf00      	nop
 800b2a0:	200005cc 	.word	0x200005cc

0800b2a4 <_Balloc>:
 800b2a4:	b570      	push	{r4, r5, r6, lr}
 800b2a6:	69c6      	ldr	r6, [r0, #28]
 800b2a8:	4604      	mov	r4, r0
 800b2aa:	460d      	mov	r5, r1
 800b2ac:	b976      	cbnz	r6, 800b2cc <_Balloc+0x28>
 800b2ae:	2010      	movs	r0, #16
 800b2b0:	f7fd ff68 	bl	8009184 <malloc>
 800b2b4:	4602      	mov	r2, r0
 800b2b6:	61e0      	str	r0, [r4, #28]
 800b2b8:	b920      	cbnz	r0, 800b2c4 <_Balloc+0x20>
 800b2ba:	4b18      	ldr	r3, [pc, #96]	@ (800b31c <_Balloc+0x78>)
 800b2bc:	4818      	ldr	r0, [pc, #96]	@ (800b320 <_Balloc+0x7c>)
 800b2be:	216b      	movs	r1, #107	@ 0x6b
 800b2c0:	f001 ff26 	bl	800d110 <__assert_func>
 800b2c4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b2c8:	6006      	str	r6, [r0, #0]
 800b2ca:	60c6      	str	r6, [r0, #12]
 800b2cc:	69e6      	ldr	r6, [r4, #28]
 800b2ce:	68f3      	ldr	r3, [r6, #12]
 800b2d0:	b183      	cbz	r3, 800b2f4 <_Balloc+0x50>
 800b2d2:	69e3      	ldr	r3, [r4, #28]
 800b2d4:	68db      	ldr	r3, [r3, #12]
 800b2d6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b2da:	b9b8      	cbnz	r0, 800b30c <_Balloc+0x68>
 800b2dc:	2101      	movs	r1, #1
 800b2de:	fa01 f605 	lsl.w	r6, r1, r5
 800b2e2:	1d72      	adds	r2, r6, #5
 800b2e4:	0092      	lsls	r2, r2, #2
 800b2e6:	4620      	mov	r0, r4
 800b2e8:	f001 ff30 	bl	800d14c <_calloc_r>
 800b2ec:	b160      	cbz	r0, 800b308 <_Balloc+0x64>
 800b2ee:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b2f2:	e00e      	b.n	800b312 <_Balloc+0x6e>
 800b2f4:	2221      	movs	r2, #33	@ 0x21
 800b2f6:	2104      	movs	r1, #4
 800b2f8:	4620      	mov	r0, r4
 800b2fa:	f001 ff27 	bl	800d14c <_calloc_r>
 800b2fe:	69e3      	ldr	r3, [r4, #28]
 800b300:	60f0      	str	r0, [r6, #12]
 800b302:	68db      	ldr	r3, [r3, #12]
 800b304:	2b00      	cmp	r3, #0
 800b306:	d1e4      	bne.n	800b2d2 <_Balloc+0x2e>
 800b308:	2000      	movs	r0, #0
 800b30a:	bd70      	pop	{r4, r5, r6, pc}
 800b30c:	6802      	ldr	r2, [r0, #0]
 800b30e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b312:	2300      	movs	r3, #0
 800b314:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b318:	e7f7      	b.n	800b30a <_Balloc+0x66>
 800b31a:	bf00      	nop
 800b31c:	0801137a 	.word	0x0801137a
 800b320:	080113fa 	.word	0x080113fa

0800b324 <_Bfree>:
 800b324:	b570      	push	{r4, r5, r6, lr}
 800b326:	69c6      	ldr	r6, [r0, #28]
 800b328:	4605      	mov	r5, r0
 800b32a:	460c      	mov	r4, r1
 800b32c:	b976      	cbnz	r6, 800b34c <_Bfree+0x28>
 800b32e:	2010      	movs	r0, #16
 800b330:	f7fd ff28 	bl	8009184 <malloc>
 800b334:	4602      	mov	r2, r0
 800b336:	61e8      	str	r0, [r5, #28]
 800b338:	b920      	cbnz	r0, 800b344 <_Bfree+0x20>
 800b33a:	4b09      	ldr	r3, [pc, #36]	@ (800b360 <_Bfree+0x3c>)
 800b33c:	4809      	ldr	r0, [pc, #36]	@ (800b364 <_Bfree+0x40>)
 800b33e:	218f      	movs	r1, #143	@ 0x8f
 800b340:	f001 fee6 	bl	800d110 <__assert_func>
 800b344:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b348:	6006      	str	r6, [r0, #0]
 800b34a:	60c6      	str	r6, [r0, #12]
 800b34c:	b13c      	cbz	r4, 800b35e <_Bfree+0x3a>
 800b34e:	69eb      	ldr	r3, [r5, #28]
 800b350:	6862      	ldr	r2, [r4, #4]
 800b352:	68db      	ldr	r3, [r3, #12]
 800b354:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b358:	6021      	str	r1, [r4, #0]
 800b35a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b35e:	bd70      	pop	{r4, r5, r6, pc}
 800b360:	0801137a 	.word	0x0801137a
 800b364:	080113fa 	.word	0x080113fa

0800b368 <__multadd>:
 800b368:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b36c:	690d      	ldr	r5, [r1, #16]
 800b36e:	4607      	mov	r7, r0
 800b370:	460c      	mov	r4, r1
 800b372:	461e      	mov	r6, r3
 800b374:	f101 0c14 	add.w	ip, r1, #20
 800b378:	2000      	movs	r0, #0
 800b37a:	f8dc 3000 	ldr.w	r3, [ip]
 800b37e:	b299      	uxth	r1, r3
 800b380:	fb02 6101 	mla	r1, r2, r1, r6
 800b384:	0c1e      	lsrs	r6, r3, #16
 800b386:	0c0b      	lsrs	r3, r1, #16
 800b388:	fb02 3306 	mla	r3, r2, r6, r3
 800b38c:	b289      	uxth	r1, r1
 800b38e:	3001      	adds	r0, #1
 800b390:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b394:	4285      	cmp	r5, r0
 800b396:	f84c 1b04 	str.w	r1, [ip], #4
 800b39a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b39e:	dcec      	bgt.n	800b37a <__multadd+0x12>
 800b3a0:	b30e      	cbz	r6, 800b3e6 <__multadd+0x7e>
 800b3a2:	68a3      	ldr	r3, [r4, #8]
 800b3a4:	42ab      	cmp	r3, r5
 800b3a6:	dc19      	bgt.n	800b3dc <__multadd+0x74>
 800b3a8:	6861      	ldr	r1, [r4, #4]
 800b3aa:	4638      	mov	r0, r7
 800b3ac:	3101      	adds	r1, #1
 800b3ae:	f7ff ff79 	bl	800b2a4 <_Balloc>
 800b3b2:	4680      	mov	r8, r0
 800b3b4:	b928      	cbnz	r0, 800b3c2 <__multadd+0x5a>
 800b3b6:	4602      	mov	r2, r0
 800b3b8:	4b0c      	ldr	r3, [pc, #48]	@ (800b3ec <__multadd+0x84>)
 800b3ba:	480d      	ldr	r0, [pc, #52]	@ (800b3f0 <__multadd+0x88>)
 800b3bc:	21ba      	movs	r1, #186	@ 0xba
 800b3be:	f001 fea7 	bl	800d110 <__assert_func>
 800b3c2:	6922      	ldr	r2, [r4, #16]
 800b3c4:	3202      	adds	r2, #2
 800b3c6:	f104 010c 	add.w	r1, r4, #12
 800b3ca:	0092      	lsls	r2, r2, #2
 800b3cc:	300c      	adds	r0, #12
 800b3ce:	f7ff f8bc 	bl	800a54a <memcpy>
 800b3d2:	4621      	mov	r1, r4
 800b3d4:	4638      	mov	r0, r7
 800b3d6:	f7ff ffa5 	bl	800b324 <_Bfree>
 800b3da:	4644      	mov	r4, r8
 800b3dc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b3e0:	3501      	adds	r5, #1
 800b3e2:	615e      	str	r6, [r3, #20]
 800b3e4:	6125      	str	r5, [r4, #16]
 800b3e6:	4620      	mov	r0, r4
 800b3e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b3ec:	080113e9 	.word	0x080113e9
 800b3f0:	080113fa 	.word	0x080113fa

0800b3f4 <__s2b>:
 800b3f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b3f8:	460c      	mov	r4, r1
 800b3fa:	4615      	mov	r5, r2
 800b3fc:	461f      	mov	r7, r3
 800b3fe:	2209      	movs	r2, #9
 800b400:	3308      	adds	r3, #8
 800b402:	4606      	mov	r6, r0
 800b404:	fb93 f3f2 	sdiv	r3, r3, r2
 800b408:	2100      	movs	r1, #0
 800b40a:	2201      	movs	r2, #1
 800b40c:	429a      	cmp	r2, r3
 800b40e:	db09      	blt.n	800b424 <__s2b+0x30>
 800b410:	4630      	mov	r0, r6
 800b412:	f7ff ff47 	bl	800b2a4 <_Balloc>
 800b416:	b940      	cbnz	r0, 800b42a <__s2b+0x36>
 800b418:	4602      	mov	r2, r0
 800b41a:	4b19      	ldr	r3, [pc, #100]	@ (800b480 <__s2b+0x8c>)
 800b41c:	4819      	ldr	r0, [pc, #100]	@ (800b484 <__s2b+0x90>)
 800b41e:	21d3      	movs	r1, #211	@ 0xd3
 800b420:	f001 fe76 	bl	800d110 <__assert_func>
 800b424:	0052      	lsls	r2, r2, #1
 800b426:	3101      	adds	r1, #1
 800b428:	e7f0      	b.n	800b40c <__s2b+0x18>
 800b42a:	9b08      	ldr	r3, [sp, #32]
 800b42c:	6143      	str	r3, [r0, #20]
 800b42e:	2d09      	cmp	r5, #9
 800b430:	f04f 0301 	mov.w	r3, #1
 800b434:	6103      	str	r3, [r0, #16]
 800b436:	dd16      	ble.n	800b466 <__s2b+0x72>
 800b438:	f104 0909 	add.w	r9, r4, #9
 800b43c:	46c8      	mov	r8, r9
 800b43e:	442c      	add	r4, r5
 800b440:	f818 3b01 	ldrb.w	r3, [r8], #1
 800b444:	4601      	mov	r1, r0
 800b446:	3b30      	subs	r3, #48	@ 0x30
 800b448:	220a      	movs	r2, #10
 800b44a:	4630      	mov	r0, r6
 800b44c:	f7ff ff8c 	bl	800b368 <__multadd>
 800b450:	45a0      	cmp	r8, r4
 800b452:	d1f5      	bne.n	800b440 <__s2b+0x4c>
 800b454:	f1a5 0408 	sub.w	r4, r5, #8
 800b458:	444c      	add	r4, r9
 800b45a:	1b2d      	subs	r5, r5, r4
 800b45c:	1963      	adds	r3, r4, r5
 800b45e:	42bb      	cmp	r3, r7
 800b460:	db04      	blt.n	800b46c <__s2b+0x78>
 800b462:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b466:	340a      	adds	r4, #10
 800b468:	2509      	movs	r5, #9
 800b46a:	e7f6      	b.n	800b45a <__s2b+0x66>
 800b46c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b470:	4601      	mov	r1, r0
 800b472:	3b30      	subs	r3, #48	@ 0x30
 800b474:	220a      	movs	r2, #10
 800b476:	4630      	mov	r0, r6
 800b478:	f7ff ff76 	bl	800b368 <__multadd>
 800b47c:	e7ee      	b.n	800b45c <__s2b+0x68>
 800b47e:	bf00      	nop
 800b480:	080113e9 	.word	0x080113e9
 800b484:	080113fa 	.word	0x080113fa

0800b488 <__hi0bits>:
 800b488:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800b48c:	4603      	mov	r3, r0
 800b48e:	bf36      	itet	cc
 800b490:	0403      	lslcc	r3, r0, #16
 800b492:	2000      	movcs	r0, #0
 800b494:	2010      	movcc	r0, #16
 800b496:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b49a:	bf3c      	itt	cc
 800b49c:	021b      	lslcc	r3, r3, #8
 800b49e:	3008      	addcc	r0, #8
 800b4a0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b4a4:	bf3c      	itt	cc
 800b4a6:	011b      	lslcc	r3, r3, #4
 800b4a8:	3004      	addcc	r0, #4
 800b4aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b4ae:	bf3c      	itt	cc
 800b4b0:	009b      	lslcc	r3, r3, #2
 800b4b2:	3002      	addcc	r0, #2
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	db05      	blt.n	800b4c4 <__hi0bits+0x3c>
 800b4b8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800b4bc:	f100 0001 	add.w	r0, r0, #1
 800b4c0:	bf08      	it	eq
 800b4c2:	2020      	moveq	r0, #32
 800b4c4:	4770      	bx	lr

0800b4c6 <__lo0bits>:
 800b4c6:	6803      	ldr	r3, [r0, #0]
 800b4c8:	4602      	mov	r2, r0
 800b4ca:	f013 0007 	ands.w	r0, r3, #7
 800b4ce:	d00b      	beq.n	800b4e8 <__lo0bits+0x22>
 800b4d0:	07d9      	lsls	r1, r3, #31
 800b4d2:	d421      	bmi.n	800b518 <__lo0bits+0x52>
 800b4d4:	0798      	lsls	r0, r3, #30
 800b4d6:	bf49      	itett	mi
 800b4d8:	085b      	lsrmi	r3, r3, #1
 800b4da:	089b      	lsrpl	r3, r3, #2
 800b4dc:	2001      	movmi	r0, #1
 800b4de:	6013      	strmi	r3, [r2, #0]
 800b4e0:	bf5c      	itt	pl
 800b4e2:	6013      	strpl	r3, [r2, #0]
 800b4e4:	2002      	movpl	r0, #2
 800b4e6:	4770      	bx	lr
 800b4e8:	b299      	uxth	r1, r3
 800b4ea:	b909      	cbnz	r1, 800b4f0 <__lo0bits+0x2a>
 800b4ec:	0c1b      	lsrs	r3, r3, #16
 800b4ee:	2010      	movs	r0, #16
 800b4f0:	b2d9      	uxtb	r1, r3
 800b4f2:	b909      	cbnz	r1, 800b4f8 <__lo0bits+0x32>
 800b4f4:	3008      	adds	r0, #8
 800b4f6:	0a1b      	lsrs	r3, r3, #8
 800b4f8:	0719      	lsls	r1, r3, #28
 800b4fa:	bf04      	itt	eq
 800b4fc:	091b      	lsreq	r3, r3, #4
 800b4fe:	3004      	addeq	r0, #4
 800b500:	0799      	lsls	r1, r3, #30
 800b502:	bf04      	itt	eq
 800b504:	089b      	lsreq	r3, r3, #2
 800b506:	3002      	addeq	r0, #2
 800b508:	07d9      	lsls	r1, r3, #31
 800b50a:	d403      	bmi.n	800b514 <__lo0bits+0x4e>
 800b50c:	085b      	lsrs	r3, r3, #1
 800b50e:	f100 0001 	add.w	r0, r0, #1
 800b512:	d003      	beq.n	800b51c <__lo0bits+0x56>
 800b514:	6013      	str	r3, [r2, #0]
 800b516:	4770      	bx	lr
 800b518:	2000      	movs	r0, #0
 800b51a:	4770      	bx	lr
 800b51c:	2020      	movs	r0, #32
 800b51e:	4770      	bx	lr

0800b520 <__i2b>:
 800b520:	b510      	push	{r4, lr}
 800b522:	460c      	mov	r4, r1
 800b524:	2101      	movs	r1, #1
 800b526:	f7ff febd 	bl	800b2a4 <_Balloc>
 800b52a:	4602      	mov	r2, r0
 800b52c:	b928      	cbnz	r0, 800b53a <__i2b+0x1a>
 800b52e:	4b05      	ldr	r3, [pc, #20]	@ (800b544 <__i2b+0x24>)
 800b530:	4805      	ldr	r0, [pc, #20]	@ (800b548 <__i2b+0x28>)
 800b532:	f240 1145 	movw	r1, #325	@ 0x145
 800b536:	f001 fdeb 	bl	800d110 <__assert_func>
 800b53a:	2301      	movs	r3, #1
 800b53c:	6144      	str	r4, [r0, #20]
 800b53e:	6103      	str	r3, [r0, #16]
 800b540:	bd10      	pop	{r4, pc}
 800b542:	bf00      	nop
 800b544:	080113e9 	.word	0x080113e9
 800b548:	080113fa 	.word	0x080113fa

0800b54c <__multiply>:
 800b54c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b550:	4614      	mov	r4, r2
 800b552:	690a      	ldr	r2, [r1, #16]
 800b554:	6923      	ldr	r3, [r4, #16]
 800b556:	429a      	cmp	r2, r3
 800b558:	bfa8      	it	ge
 800b55a:	4623      	movge	r3, r4
 800b55c:	460f      	mov	r7, r1
 800b55e:	bfa4      	itt	ge
 800b560:	460c      	movge	r4, r1
 800b562:	461f      	movge	r7, r3
 800b564:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800b568:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800b56c:	68a3      	ldr	r3, [r4, #8]
 800b56e:	6861      	ldr	r1, [r4, #4]
 800b570:	eb0a 0609 	add.w	r6, sl, r9
 800b574:	42b3      	cmp	r3, r6
 800b576:	b085      	sub	sp, #20
 800b578:	bfb8      	it	lt
 800b57a:	3101      	addlt	r1, #1
 800b57c:	f7ff fe92 	bl	800b2a4 <_Balloc>
 800b580:	b930      	cbnz	r0, 800b590 <__multiply+0x44>
 800b582:	4602      	mov	r2, r0
 800b584:	4b44      	ldr	r3, [pc, #272]	@ (800b698 <__multiply+0x14c>)
 800b586:	4845      	ldr	r0, [pc, #276]	@ (800b69c <__multiply+0x150>)
 800b588:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800b58c:	f001 fdc0 	bl	800d110 <__assert_func>
 800b590:	f100 0514 	add.w	r5, r0, #20
 800b594:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b598:	462b      	mov	r3, r5
 800b59a:	2200      	movs	r2, #0
 800b59c:	4543      	cmp	r3, r8
 800b59e:	d321      	bcc.n	800b5e4 <__multiply+0x98>
 800b5a0:	f107 0114 	add.w	r1, r7, #20
 800b5a4:	f104 0214 	add.w	r2, r4, #20
 800b5a8:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800b5ac:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800b5b0:	9302      	str	r3, [sp, #8]
 800b5b2:	1b13      	subs	r3, r2, r4
 800b5b4:	3b15      	subs	r3, #21
 800b5b6:	f023 0303 	bic.w	r3, r3, #3
 800b5ba:	3304      	adds	r3, #4
 800b5bc:	f104 0715 	add.w	r7, r4, #21
 800b5c0:	42ba      	cmp	r2, r7
 800b5c2:	bf38      	it	cc
 800b5c4:	2304      	movcc	r3, #4
 800b5c6:	9301      	str	r3, [sp, #4]
 800b5c8:	9b02      	ldr	r3, [sp, #8]
 800b5ca:	9103      	str	r1, [sp, #12]
 800b5cc:	428b      	cmp	r3, r1
 800b5ce:	d80c      	bhi.n	800b5ea <__multiply+0x9e>
 800b5d0:	2e00      	cmp	r6, #0
 800b5d2:	dd03      	ble.n	800b5dc <__multiply+0x90>
 800b5d4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d05b      	beq.n	800b694 <__multiply+0x148>
 800b5dc:	6106      	str	r6, [r0, #16]
 800b5de:	b005      	add	sp, #20
 800b5e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b5e4:	f843 2b04 	str.w	r2, [r3], #4
 800b5e8:	e7d8      	b.n	800b59c <__multiply+0x50>
 800b5ea:	f8b1 a000 	ldrh.w	sl, [r1]
 800b5ee:	f1ba 0f00 	cmp.w	sl, #0
 800b5f2:	d024      	beq.n	800b63e <__multiply+0xf2>
 800b5f4:	f104 0e14 	add.w	lr, r4, #20
 800b5f8:	46a9      	mov	r9, r5
 800b5fa:	f04f 0c00 	mov.w	ip, #0
 800b5fe:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b602:	f8d9 3000 	ldr.w	r3, [r9]
 800b606:	fa1f fb87 	uxth.w	fp, r7
 800b60a:	b29b      	uxth	r3, r3
 800b60c:	fb0a 330b 	mla	r3, sl, fp, r3
 800b610:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800b614:	f8d9 7000 	ldr.w	r7, [r9]
 800b618:	4463      	add	r3, ip
 800b61a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800b61e:	fb0a c70b 	mla	r7, sl, fp, ip
 800b622:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800b626:	b29b      	uxth	r3, r3
 800b628:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800b62c:	4572      	cmp	r2, lr
 800b62e:	f849 3b04 	str.w	r3, [r9], #4
 800b632:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800b636:	d8e2      	bhi.n	800b5fe <__multiply+0xb2>
 800b638:	9b01      	ldr	r3, [sp, #4]
 800b63a:	f845 c003 	str.w	ip, [r5, r3]
 800b63e:	9b03      	ldr	r3, [sp, #12]
 800b640:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800b644:	3104      	adds	r1, #4
 800b646:	f1b9 0f00 	cmp.w	r9, #0
 800b64a:	d021      	beq.n	800b690 <__multiply+0x144>
 800b64c:	682b      	ldr	r3, [r5, #0]
 800b64e:	f104 0c14 	add.w	ip, r4, #20
 800b652:	46ae      	mov	lr, r5
 800b654:	f04f 0a00 	mov.w	sl, #0
 800b658:	f8bc b000 	ldrh.w	fp, [ip]
 800b65c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800b660:	fb09 770b 	mla	r7, r9, fp, r7
 800b664:	4457      	add	r7, sl
 800b666:	b29b      	uxth	r3, r3
 800b668:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800b66c:	f84e 3b04 	str.w	r3, [lr], #4
 800b670:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b674:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b678:	f8be 3000 	ldrh.w	r3, [lr]
 800b67c:	fb09 330a 	mla	r3, r9, sl, r3
 800b680:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800b684:	4562      	cmp	r2, ip
 800b686:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b68a:	d8e5      	bhi.n	800b658 <__multiply+0x10c>
 800b68c:	9f01      	ldr	r7, [sp, #4]
 800b68e:	51eb      	str	r3, [r5, r7]
 800b690:	3504      	adds	r5, #4
 800b692:	e799      	b.n	800b5c8 <__multiply+0x7c>
 800b694:	3e01      	subs	r6, #1
 800b696:	e79b      	b.n	800b5d0 <__multiply+0x84>
 800b698:	080113e9 	.word	0x080113e9
 800b69c:	080113fa 	.word	0x080113fa

0800b6a0 <__pow5mult>:
 800b6a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b6a4:	4615      	mov	r5, r2
 800b6a6:	f012 0203 	ands.w	r2, r2, #3
 800b6aa:	4607      	mov	r7, r0
 800b6ac:	460e      	mov	r6, r1
 800b6ae:	d007      	beq.n	800b6c0 <__pow5mult+0x20>
 800b6b0:	4c25      	ldr	r4, [pc, #148]	@ (800b748 <__pow5mult+0xa8>)
 800b6b2:	3a01      	subs	r2, #1
 800b6b4:	2300      	movs	r3, #0
 800b6b6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b6ba:	f7ff fe55 	bl	800b368 <__multadd>
 800b6be:	4606      	mov	r6, r0
 800b6c0:	10ad      	asrs	r5, r5, #2
 800b6c2:	d03d      	beq.n	800b740 <__pow5mult+0xa0>
 800b6c4:	69fc      	ldr	r4, [r7, #28]
 800b6c6:	b97c      	cbnz	r4, 800b6e8 <__pow5mult+0x48>
 800b6c8:	2010      	movs	r0, #16
 800b6ca:	f7fd fd5b 	bl	8009184 <malloc>
 800b6ce:	4602      	mov	r2, r0
 800b6d0:	61f8      	str	r0, [r7, #28]
 800b6d2:	b928      	cbnz	r0, 800b6e0 <__pow5mult+0x40>
 800b6d4:	4b1d      	ldr	r3, [pc, #116]	@ (800b74c <__pow5mult+0xac>)
 800b6d6:	481e      	ldr	r0, [pc, #120]	@ (800b750 <__pow5mult+0xb0>)
 800b6d8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800b6dc:	f001 fd18 	bl	800d110 <__assert_func>
 800b6e0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b6e4:	6004      	str	r4, [r0, #0]
 800b6e6:	60c4      	str	r4, [r0, #12]
 800b6e8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800b6ec:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b6f0:	b94c      	cbnz	r4, 800b706 <__pow5mult+0x66>
 800b6f2:	f240 2171 	movw	r1, #625	@ 0x271
 800b6f6:	4638      	mov	r0, r7
 800b6f8:	f7ff ff12 	bl	800b520 <__i2b>
 800b6fc:	2300      	movs	r3, #0
 800b6fe:	f8c8 0008 	str.w	r0, [r8, #8]
 800b702:	4604      	mov	r4, r0
 800b704:	6003      	str	r3, [r0, #0]
 800b706:	f04f 0900 	mov.w	r9, #0
 800b70a:	07eb      	lsls	r3, r5, #31
 800b70c:	d50a      	bpl.n	800b724 <__pow5mult+0x84>
 800b70e:	4631      	mov	r1, r6
 800b710:	4622      	mov	r2, r4
 800b712:	4638      	mov	r0, r7
 800b714:	f7ff ff1a 	bl	800b54c <__multiply>
 800b718:	4631      	mov	r1, r6
 800b71a:	4680      	mov	r8, r0
 800b71c:	4638      	mov	r0, r7
 800b71e:	f7ff fe01 	bl	800b324 <_Bfree>
 800b722:	4646      	mov	r6, r8
 800b724:	106d      	asrs	r5, r5, #1
 800b726:	d00b      	beq.n	800b740 <__pow5mult+0xa0>
 800b728:	6820      	ldr	r0, [r4, #0]
 800b72a:	b938      	cbnz	r0, 800b73c <__pow5mult+0x9c>
 800b72c:	4622      	mov	r2, r4
 800b72e:	4621      	mov	r1, r4
 800b730:	4638      	mov	r0, r7
 800b732:	f7ff ff0b 	bl	800b54c <__multiply>
 800b736:	6020      	str	r0, [r4, #0]
 800b738:	f8c0 9000 	str.w	r9, [r0]
 800b73c:	4604      	mov	r4, r0
 800b73e:	e7e4      	b.n	800b70a <__pow5mult+0x6a>
 800b740:	4630      	mov	r0, r6
 800b742:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b746:	bf00      	nop
 800b748:	08011454 	.word	0x08011454
 800b74c:	0801137a 	.word	0x0801137a
 800b750:	080113fa 	.word	0x080113fa

0800b754 <__lshift>:
 800b754:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b758:	460c      	mov	r4, r1
 800b75a:	6849      	ldr	r1, [r1, #4]
 800b75c:	6923      	ldr	r3, [r4, #16]
 800b75e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b762:	68a3      	ldr	r3, [r4, #8]
 800b764:	4607      	mov	r7, r0
 800b766:	4691      	mov	r9, r2
 800b768:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b76c:	f108 0601 	add.w	r6, r8, #1
 800b770:	42b3      	cmp	r3, r6
 800b772:	db0b      	blt.n	800b78c <__lshift+0x38>
 800b774:	4638      	mov	r0, r7
 800b776:	f7ff fd95 	bl	800b2a4 <_Balloc>
 800b77a:	4605      	mov	r5, r0
 800b77c:	b948      	cbnz	r0, 800b792 <__lshift+0x3e>
 800b77e:	4602      	mov	r2, r0
 800b780:	4b28      	ldr	r3, [pc, #160]	@ (800b824 <__lshift+0xd0>)
 800b782:	4829      	ldr	r0, [pc, #164]	@ (800b828 <__lshift+0xd4>)
 800b784:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800b788:	f001 fcc2 	bl	800d110 <__assert_func>
 800b78c:	3101      	adds	r1, #1
 800b78e:	005b      	lsls	r3, r3, #1
 800b790:	e7ee      	b.n	800b770 <__lshift+0x1c>
 800b792:	2300      	movs	r3, #0
 800b794:	f100 0114 	add.w	r1, r0, #20
 800b798:	f100 0210 	add.w	r2, r0, #16
 800b79c:	4618      	mov	r0, r3
 800b79e:	4553      	cmp	r3, sl
 800b7a0:	db33      	blt.n	800b80a <__lshift+0xb6>
 800b7a2:	6920      	ldr	r0, [r4, #16]
 800b7a4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b7a8:	f104 0314 	add.w	r3, r4, #20
 800b7ac:	f019 091f 	ands.w	r9, r9, #31
 800b7b0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b7b4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b7b8:	d02b      	beq.n	800b812 <__lshift+0xbe>
 800b7ba:	f1c9 0e20 	rsb	lr, r9, #32
 800b7be:	468a      	mov	sl, r1
 800b7c0:	2200      	movs	r2, #0
 800b7c2:	6818      	ldr	r0, [r3, #0]
 800b7c4:	fa00 f009 	lsl.w	r0, r0, r9
 800b7c8:	4310      	orrs	r0, r2
 800b7ca:	f84a 0b04 	str.w	r0, [sl], #4
 800b7ce:	f853 2b04 	ldr.w	r2, [r3], #4
 800b7d2:	459c      	cmp	ip, r3
 800b7d4:	fa22 f20e 	lsr.w	r2, r2, lr
 800b7d8:	d8f3      	bhi.n	800b7c2 <__lshift+0x6e>
 800b7da:	ebac 0304 	sub.w	r3, ip, r4
 800b7de:	3b15      	subs	r3, #21
 800b7e0:	f023 0303 	bic.w	r3, r3, #3
 800b7e4:	3304      	adds	r3, #4
 800b7e6:	f104 0015 	add.w	r0, r4, #21
 800b7ea:	4584      	cmp	ip, r0
 800b7ec:	bf38      	it	cc
 800b7ee:	2304      	movcc	r3, #4
 800b7f0:	50ca      	str	r2, [r1, r3]
 800b7f2:	b10a      	cbz	r2, 800b7f8 <__lshift+0xa4>
 800b7f4:	f108 0602 	add.w	r6, r8, #2
 800b7f8:	3e01      	subs	r6, #1
 800b7fa:	4638      	mov	r0, r7
 800b7fc:	612e      	str	r6, [r5, #16]
 800b7fe:	4621      	mov	r1, r4
 800b800:	f7ff fd90 	bl	800b324 <_Bfree>
 800b804:	4628      	mov	r0, r5
 800b806:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b80a:	f842 0f04 	str.w	r0, [r2, #4]!
 800b80e:	3301      	adds	r3, #1
 800b810:	e7c5      	b.n	800b79e <__lshift+0x4a>
 800b812:	3904      	subs	r1, #4
 800b814:	f853 2b04 	ldr.w	r2, [r3], #4
 800b818:	f841 2f04 	str.w	r2, [r1, #4]!
 800b81c:	459c      	cmp	ip, r3
 800b81e:	d8f9      	bhi.n	800b814 <__lshift+0xc0>
 800b820:	e7ea      	b.n	800b7f8 <__lshift+0xa4>
 800b822:	bf00      	nop
 800b824:	080113e9 	.word	0x080113e9
 800b828:	080113fa 	.word	0x080113fa

0800b82c <__mcmp>:
 800b82c:	690a      	ldr	r2, [r1, #16]
 800b82e:	4603      	mov	r3, r0
 800b830:	6900      	ldr	r0, [r0, #16]
 800b832:	1a80      	subs	r0, r0, r2
 800b834:	b530      	push	{r4, r5, lr}
 800b836:	d10e      	bne.n	800b856 <__mcmp+0x2a>
 800b838:	3314      	adds	r3, #20
 800b83a:	3114      	adds	r1, #20
 800b83c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b840:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b844:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b848:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b84c:	4295      	cmp	r5, r2
 800b84e:	d003      	beq.n	800b858 <__mcmp+0x2c>
 800b850:	d205      	bcs.n	800b85e <__mcmp+0x32>
 800b852:	f04f 30ff 	mov.w	r0, #4294967295
 800b856:	bd30      	pop	{r4, r5, pc}
 800b858:	42a3      	cmp	r3, r4
 800b85a:	d3f3      	bcc.n	800b844 <__mcmp+0x18>
 800b85c:	e7fb      	b.n	800b856 <__mcmp+0x2a>
 800b85e:	2001      	movs	r0, #1
 800b860:	e7f9      	b.n	800b856 <__mcmp+0x2a>
	...

0800b864 <__mdiff>:
 800b864:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b868:	4689      	mov	r9, r1
 800b86a:	4606      	mov	r6, r0
 800b86c:	4611      	mov	r1, r2
 800b86e:	4648      	mov	r0, r9
 800b870:	4614      	mov	r4, r2
 800b872:	f7ff ffdb 	bl	800b82c <__mcmp>
 800b876:	1e05      	subs	r5, r0, #0
 800b878:	d112      	bne.n	800b8a0 <__mdiff+0x3c>
 800b87a:	4629      	mov	r1, r5
 800b87c:	4630      	mov	r0, r6
 800b87e:	f7ff fd11 	bl	800b2a4 <_Balloc>
 800b882:	4602      	mov	r2, r0
 800b884:	b928      	cbnz	r0, 800b892 <__mdiff+0x2e>
 800b886:	4b3f      	ldr	r3, [pc, #252]	@ (800b984 <__mdiff+0x120>)
 800b888:	f240 2137 	movw	r1, #567	@ 0x237
 800b88c:	483e      	ldr	r0, [pc, #248]	@ (800b988 <__mdiff+0x124>)
 800b88e:	f001 fc3f 	bl	800d110 <__assert_func>
 800b892:	2301      	movs	r3, #1
 800b894:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b898:	4610      	mov	r0, r2
 800b89a:	b003      	add	sp, #12
 800b89c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8a0:	bfbc      	itt	lt
 800b8a2:	464b      	movlt	r3, r9
 800b8a4:	46a1      	movlt	r9, r4
 800b8a6:	4630      	mov	r0, r6
 800b8a8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800b8ac:	bfba      	itte	lt
 800b8ae:	461c      	movlt	r4, r3
 800b8b0:	2501      	movlt	r5, #1
 800b8b2:	2500      	movge	r5, #0
 800b8b4:	f7ff fcf6 	bl	800b2a4 <_Balloc>
 800b8b8:	4602      	mov	r2, r0
 800b8ba:	b918      	cbnz	r0, 800b8c4 <__mdiff+0x60>
 800b8bc:	4b31      	ldr	r3, [pc, #196]	@ (800b984 <__mdiff+0x120>)
 800b8be:	f240 2145 	movw	r1, #581	@ 0x245
 800b8c2:	e7e3      	b.n	800b88c <__mdiff+0x28>
 800b8c4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800b8c8:	6926      	ldr	r6, [r4, #16]
 800b8ca:	60c5      	str	r5, [r0, #12]
 800b8cc:	f109 0310 	add.w	r3, r9, #16
 800b8d0:	f109 0514 	add.w	r5, r9, #20
 800b8d4:	f104 0e14 	add.w	lr, r4, #20
 800b8d8:	f100 0b14 	add.w	fp, r0, #20
 800b8dc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800b8e0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800b8e4:	9301      	str	r3, [sp, #4]
 800b8e6:	46d9      	mov	r9, fp
 800b8e8:	f04f 0c00 	mov.w	ip, #0
 800b8ec:	9b01      	ldr	r3, [sp, #4]
 800b8ee:	f85e 0b04 	ldr.w	r0, [lr], #4
 800b8f2:	f853 af04 	ldr.w	sl, [r3, #4]!
 800b8f6:	9301      	str	r3, [sp, #4]
 800b8f8:	fa1f f38a 	uxth.w	r3, sl
 800b8fc:	4619      	mov	r1, r3
 800b8fe:	b283      	uxth	r3, r0
 800b900:	1acb      	subs	r3, r1, r3
 800b902:	0c00      	lsrs	r0, r0, #16
 800b904:	4463      	add	r3, ip
 800b906:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800b90a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800b90e:	b29b      	uxth	r3, r3
 800b910:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800b914:	4576      	cmp	r6, lr
 800b916:	f849 3b04 	str.w	r3, [r9], #4
 800b91a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b91e:	d8e5      	bhi.n	800b8ec <__mdiff+0x88>
 800b920:	1b33      	subs	r3, r6, r4
 800b922:	3b15      	subs	r3, #21
 800b924:	f023 0303 	bic.w	r3, r3, #3
 800b928:	3415      	adds	r4, #21
 800b92a:	3304      	adds	r3, #4
 800b92c:	42a6      	cmp	r6, r4
 800b92e:	bf38      	it	cc
 800b930:	2304      	movcc	r3, #4
 800b932:	441d      	add	r5, r3
 800b934:	445b      	add	r3, fp
 800b936:	461e      	mov	r6, r3
 800b938:	462c      	mov	r4, r5
 800b93a:	4544      	cmp	r4, r8
 800b93c:	d30e      	bcc.n	800b95c <__mdiff+0xf8>
 800b93e:	f108 0103 	add.w	r1, r8, #3
 800b942:	1b49      	subs	r1, r1, r5
 800b944:	f021 0103 	bic.w	r1, r1, #3
 800b948:	3d03      	subs	r5, #3
 800b94a:	45a8      	cmp	r8, r5
 800b94c:	bf38      	it	cc
 800b94e:	2100      	movcc	r1, #0
 800b950:	440b      	add	r3, r1
 800b952:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b956:	b191      	cbz	r1, 800b97e <__mdiff+0x11a>
 800b958:	6117      	str	r7, [r2, #16]
 800b95a:	e79d      	b.n	800b898 <__mdiff+0x34>
 800b95c:	f854 1b04 	ldr.w	r1, [r4], #4
 800b960:	46e6      	mov	lr, ip
 800b962:	0c08      	lsrs	r0, r1, #16
 800b964:	fa1c fc81 	uxtah	ip, ip, r1
 800b968:	4471      	add	r1, lr
 800b96a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800b96e:	b289      	uxth	r1, r1
 800b970:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800b974:	f846 1b04 	str.w	r1, [r6], #4
 800b978:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b97c:	e7dd      	b.n	800b93a <__mdiff+0xd6>
 800b97e:	3f01      	subs	r7, #1
 800b980:	e7e7      	b.n	800b952 <__mdiff+0xee>
 800b982:	bf00      	nop
 800b984:	080113e9 	.word	0x080113e9
 800b988:	080113fa 	.word	0x080113fa

0800b98c <__ulp>:
 800b98c:	b082      	sub	sp, #8
 800b98e:	ed8d 0b00 	vstr	d0, [sp]
 800b992:	9a01      	ldr	r2, [sp, #4]
 800b994:	4b0f      	ldr	r3, [pc, #60]	@ (800b9d4 <__ulp+0x48>)
 800b996:	4013      	ands	r3, r2
 800b998:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	dc08      	bgt.n	800b9b2 <__ulp+0x26>
 800b9a0:	425b      	negs	r3, r3
 800b9a2:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800b9a6:	ea4f 5223 	mov.w	r2, r3, asr #20
 800b9aa:	da04      	bge.n	800b9b6 <__ulp+0x2a>
 800b9ac:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800b9b0:	4113      	asrs	r3, r2
 800b9b2:	2200      	movs	r2, #0
 800b9b4:	e008      	b.n	800b9c8 <__ulp+0x3c>
 800b9b6:	f1a2 0314 	sub.w	r3, r2, #20
 800b9ba:	2b1e      	cmp	r3, #30
 800b9bc:	bfda      	itte	le
 800b9be:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800b9c2:	40da      	lsrle	r2, r3
 800b9c4:	2201      	movgt	r2, #1
 800b9c6:	2300      	movs	r3, #0
 800b9c8:	4619      	mov	r1, r3
 800b9ca:	4610      	mov	r0, r2
 800b9cc:	ec41 0b10 	vmov	d0, r0, r1
 800b9d0:	b002      	add	sp, #8
 800b9d2:	4770      	bx	lr
 800b9d4:	7ff00000 	.word	0x7ff00000

0800b9d8 <__b2d>:
 800b9d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b9dc:	6906      	ldr	r6, [r0, #16]
 800b9de:	f100 0814 	add.w	r8, r0, #20
 800b9e2:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800b9e6:	1f37      	subs	r7, r6, #4
 800b9e8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800b9ec:	4610      	mov	r0, r2
 800b9ee:	f7ff fd4b 	bl	800b488 <__hi0bits>
 800b9f2:	f1c0 0320 	rsb	r3, r0, #32
 800b9f6:	280a      	cmp	r0, #10
 800b9f8:	600b      	str	r3, [r1, #0]
 800b9fa:	491b      	ldr	r1, [pc, #108]	@ (800ba68 <__b2d+0x90>)
 800b9fc:	dc15      	bgt.n	800ba2a <__b2d+0x52>
 800b9fe:	f1c0 0c0b 	rsb	ip, r0, #11
 800ba02:	fa22 f30c 	lsr.w	r3, r2, ip
 800ba06:	45b8      	cmp	r8, r7
 800ba08:	ea43 0501 	orr.w	r5, r3, r1
 800ba0c:	bf34      	ite	cc
 800ba0e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800ba12:	2300      	movcs	r3, #0
 800ba14:	3015      	adds	r0, #21
 800ba16:	fa02 f000 	lsl.w	r0, r2, r0
 800ba1a:	fa23 f30c 	lsr.w	r3, r3, ip
 800ba1e:	4303      	orrs	r3, r0
 800ba20:	461c      	mov	r4, r3
 800ba22:	ec45 4b10 	vmov	d0, r4, r5
 800ba26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ba2a:	45b8      	cmp	r8, r7
 800ba2c:	bf3a      	itte	cc
 800ba2e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800ba32:	f1a6 0708 	subcc.w	r7, r6, #8
 800ba36:	2300      	movcs	r3, #0
 800ba38:	380b      	subs	r0, #11
 800ba3a:	d012      	beq.n	800ba62 <__b2d+0x8a>
 800ba3c:	f1c0 0120 	rsb	r1, r0, #32
 800ba40:	fa23 f401 	lsr.w	r4, r3, r1
 800ba44:	4082      	lsls	r2, r0
 800ba46:	4322      	orrs	r2, r4
 800ba48:	4547      	cmp	r7, r8
 800ba4a:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800ba4e:	bf8c      	ite	hi
 800ba50:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800ba54:	2200      	movls	r2, #0
 800ba56:	4083      	lsls	r3, r0
 800ba58:	40ca      	lsrs	r2, r1
 800ba5a:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800ba5e:	4313      	orrs	r3, r2
 800ba60:	e7de      	b.n	800ba20 <__b2d+0x48>
 800ba62:	ea42 0501 	orr.w	r5, r2, r1
 800ba66:	e7db      	b.n	800ba20 <__b2d+0x48>
 800ba68:	3ff00000 	.word	0x3ff00000

0800ba6c <__d2b>:
 800ba6c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ba70:	460f      	mov	r7, r1
 800ba72:	2101      	movs	r1, #1
 800ba74:	ec59 8b10 	vmov	r8, r9, d0
 800ba78:	4616      	mov	r6, r2
 800ba7a:	f7ff fc13 	bl	800b2a4 <_Balloc>
 800ba7e:	4604      	mov	r4, r0
 800ba80:	b930      	cbnz	r0, 800ba90 <__d2b+0x24>
 800ba82:	4602      	mov	r2, r0
 800ba84:	4b23      	ldr	r3, [pc, #140]	@ (800bb14 <__d2b+0xa8>)
 800ba86:	4824      	ldr	r0, [pc, #144]	@ (800bb18 <__d2b+0xac>)
 800ba88:	f240 310f 	movw	r1, #783	@ 0x30f
 800ba8c:	f001 fb40 	bl	800d110 <__assert_func>
 800ba90:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800ba94:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ba98:	b10d      	cbz	r5, 800ba9e <__d2b+0x32>
 800ba9a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ba9e:	9301      	str	r3, [sp, #4]
 800baa0:	f1b8 0300 	subs.w	r3, r8, #0
 800baa4:	d023      	beq.n	800baee <__d2b+0x82>
 800baa6:	4668      	mov	r0, sp
 800baa8:	9300      	str	r3, [sp, #0]
 800baaa:	f7ff fd0c 	bl	800b4c6 <__lo0bits>
 800baae:	e9dd 1200 	ldrd	r1, r2, [sp]
 800bab2:	b1d0      	cbz	r0, 800baea <__d2b+0x7e>
 800bab4:	f1c0 0320 	rsb	r3, r0, #32
 800bab8:	fa02 f303 	lsl.w	r3, r2, r3
 800babc:	430b      	orrs	r3, r1
 800babe:	40c2      	lsrs	r2, r0
 800bac0:	6163      	str	r3, [r4, #20]
 800bac2:	9201      	str	r2, [sp, #4]
 800bac4:	9b01      	ldr	r3, [sp, #4]
 800bac6:	61a3      	str	r3, [r4, #24]
 800bac8:	2b00      	cmp	r3, #0
 800baca:	bf0c      	ite	eq
 800bacc:	2201      	moveq	r2, #1
 800bace:	2202      	movne	r2, #2
 800bad0:	6122      	str	r2, [r4, #16]
 800bad2:	b1a5      	cbz	r5, 800bafe <__d2b+0x92>
 800bad4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800bad8:	4405      	add	r5, r0
 800bada:	603d      	str	r5, [r7, #0]
 800badc:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800bae0:	6030      	str	r0, [r6, #0]
 800bae2:	4620      	mov	r0, r4
 800bae4:	b003      	add	sp, #12
 800bae6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800baea:	6161      	str	r1, [r4, #20]
 800baec:	e7ea      	b.n	800bac4 <__d2b+0x58>
 800baee:	a801      	add	r0, sp, #4
 800baf0:	f7ff fce9 	bl	800b4c6 <__lo0bits>
 800baf4:	9b01      	ldr	r3, [sp, #4]
 800baf6:	6163      	str	r3, [r4, #20]
 800baf8:	3020      	adds	r0, #32
 800bafa:	2201      	movs	r2, #1
 800bafc:	e7e8      	b.n	800bad0 <__d2b+0x64>
 800bafe:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800bb02:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800bb06:	6038      	str	r0, [r7, #0]
 800bb08:	6918      	ldr	r0, [r3, #16]
 800bb0a:	f7ff fcbd 	bl	800b488 <__hi0bits>
 800bb0e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800bb12:	e7e5      	b.n	800bae0 <__d2b+0x74>
 800bb14:	080113e9 	.word	0x080113e9
 800bb18:	080113fa 	.word	0x080113fa

0800bb1c <__ratio>:
 800bb1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb20:	b085      	sub	sp, #20
 800bb22:	e9cd 1000 	strd	r1, r0, [sp]
 800bb26:	a902      	add	r1, sp, #8
 800bb28:	f7ff ff56 	bl	800b9d8 <__b2d>
 800bb2c:	9800      	ldr	r0, [sp, #0]
 800bb2e:	a903      	add	r1, sp, #12
 800bb30:	ec55 4b10 	vmov	r4, r5, d0
 800bb34:	f7ff ff50 	bl	800b9d8 <__b2d>
 800bb38:	9b01      	ldr	r3, [sp, #4]
 800bb3a:	6919      	ldr	r1, [r3, #16]
 800bb3c:	9b00      	ldr	r3, [sp, #0]
 800bb3e:	691b      	ldr	r3, [r3, #16]
 800bb40:	1ac9      	subs	r1, r1, r3
 800bb42:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800bb46:	1a9b      	subs	r3, r3, r2
 800bb48:	ec5b ab10 	vmov	sl, fp, d0
 800bb4c:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	bfce      	itee	gt
 800bb54:	462a      	movgt	r2, r5
 800bb56:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800bb5a:	465a      	movle	r2, fp
 800bb5c:	462f      	mov	r7, r5
 800bb5e:	46d9      	mov	r9, fp
 800bb60:	bfcc      	ite	gt
 800bb62:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800bb66:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800bb6a:	464b      	mov	r3, r9
 800bb6c:	4652      	mov	r2, sl
 800bb6e:	4620      	mov	r0, r4
 800bb70:	4639      	mov	r1, r7
 800bb72:	f7f4 fe8b 	bl	800088c <__aeabi_ddiv>
 800bb76:	ec41 0b10 	vmov	d0, r0, r1
 800bb7a:	b005      	add	sp, #20
 800bb7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800bb80 <__copybits>:
 800bb80:	3901      	subs	r1, #1
 800bb82:	b570      	push	{r4, r5, r6, lr}
 800bb84:	1149      	asrs	r1, r1, #5
 800bb86:	6914      	ldr	r4, [r2, #16]
 800bb88:	3101      	adds	r1, #1
 800bb8a:	f102 0314 	add.w	r3, r2, #20
 800bb8e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800bb92:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800bb96:	1f05      	subs	r5, r0, #4
 800bb98:	42a3      	cmp	r3, r4
 800bb9a:	d30c      	bcc.n	800bbb6 <__copybits+0x36>
 800bb9c:	1aa3      	subs	r3, r4, r2
 800bb9e:	3b11      	subs	r3, #17
 800bba0:	f023 0303 	bic.w	r3, r3, #3
 800bba4:	3211      	adds	r2, #17
 800bba6:	42a2      	cmp	r2, r4
 800bba8:	bf88      	it	hi
 800bbaa:	2300      	movhi	r3, #0
 800bbac:	4418      	add	r0, r3
 800bbae:	2300      	movs	r3, #0
 800bbb0:	4288      	cmp	r0, r1
 800bbb2:	d305      	bcc.n	800bbc0 <__copybits+0x40>
 800bbb4:	bd70      	pop	{r4, r5, r6, pc}
 800bbb6:	f853 6b04 	ldr.w	r6, [r3], #4
 800bbba:	f845 6f04 	str.w	r6, [r5, #4]!
 800bbbe:	e7eb      	b.n	800bb98 <__copybits+0x18>
 800bbc0:	f840 3b04 	str.w	r3, [r0], #4
 800bbc4:	e7f4      	b.n	800bbb0 <__copybits+0x30>

0800bbc6 <__any_on>:
 800bbc6:	f100 0214 	add.w	r2, r0, #20
 800bbca:	6900      	ldr	r0, [r0, #16]
 800bbcc:	114b      	asrs	r3, r1, #5
 800bbce:	4298      	cmp	r0, r3
 800bbd0:	b510      	push	{r4, lr}
 800bbd2:	db11      	blt.n	800bbf8 <__any_on+0x32>
 800bbd4:	dd0a      	ble.n	800bbec <__any_on+0x26>
 800bbd6:	f011 011f 	ands.w	r1, r1, #31
 800bbda:	d007      	beq.n	800bbec <__any_on+0x26>
 800bbdc:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800bbe0:	fa24 f001 	lsr.w	r0, r4, r1
 800bbe4:	fa00 f101 	lsl.w	r1, r0, r1
 800bbe8:	428c      	cmp	r4, r1
 800bbea:	d10b      	bne.n	800bc04 <__any_on+0x3e>
 800bbec:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800bbf0:	4293      	cmp	r3, r2
 800bbf2:	d803      	bhi.n	800bbfc <__any_on+0x36>
 800bbf4:	2000      	movs	r0, #0
 800bbf6:	bd10      	pop	{r4, pc}
 800bbf8:	4603      	mov	r3, r0
 800bbfa:	e7f7      	b.n	800bbec <__any_on+0x26>
 800bbfc:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800bc00:	2900      	cmp	r1, #0
 800bc02:	d0f5      	beq.n	800bbf0 <__any_on+0x2a>
 800bc04:	2001      	movs	r0, #1
 800bc06:	e7f6      	b.n	800bbf6 <__any_on+0x30>

0800bc08 <sulp>:
 800bc08:	b570      	push	{r4, r5, r6, lr}
 800bc0a:	4604      	mov	r4, r0
 800bc0c:	460d      	mov	r5, r1
 800bc0e:	ec45 4b10 	vmov	d0, r4, r5
 800bc12:	4616      	mov	r6, r2
 800bc14:	f7ff feba 	bl	800b98c <__ulp>
 800bc18:	ec51 0b10 	vmov	r0, r1, d0
 800bc1c:	b17e      	cbz	r6, 800bc3e <sulp+0x36>
 800bc1e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800bc22:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	dd09      	ble.n	800bc3e <sulp+0x36>
 800bc2a:	051b      	lsls	r3, r3, #20
 800bc2c:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800bc30:	2400      	movs	r4, #0
 800bc32:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800bc36:	4622      	mov	r2, r4
 800bc38:	462b      	mov	r3, r5
 800bc3a:	f7f4 fcfd 	bl	8000638 <__aeabi_dmul>
 800bc3e:	ec41 0b10 	vmov	d0, r0, r1
 800bc42:	bd70      	pop	{r4, r5, r6, pc}
 800bc44:	0000      	movs	r0, r0
	...

0800bc48 <_strtod_l>:
 800bc48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc4c:	b09f      	sub	sp, #124	@ 0x7c
 800bc4e:	460c      	mov	r4, r1
 800bc50:	9217      	str	r2, [sp, #92]	@ 0x5c
 800bc52:	2200      	movs	r2, #0
 800bc54:	921a      	str	r2, [sp, #104]	@ 0x68
 800bc56:	9005      	str	r0, [sp, #20]
 800bc58:	f04f 0a00 	mov.w	sl, #0
 800bc5c:	f04f 0b00 	mov.w	fp, #0
 800bc60:	460a      	mov	r2, r1
 800bc62:	9219      	str	r2, [sp, #100]	@ 0x64
 800bc64:	7811      	ldrb	r1, [r2, #0]
 800bc66:	292b      	cmp	r1, #43	@ 0x2b
 800bc68:	d04a      	beq.n	800bd00 <_strtod_l+0xb8>
 800bc6a:	d838      	bhi.n	800bcde <_strtod_l+0x96>
 800bc6c:	290d      	cmp	r1, #13
 800bc6e:	d832      	bhi.n	800bcd6 <_strtod_l+0x8e>
 800bc70:	2908      	cmp	r1, #8
 800bc72:	d832      	bhi.n	800bcda <_strtod_l+0x92>
 800bc74:	2900      	cmp	r1, #0
 800bc76:	d03b      	beq.n	800bcf0 <_strtod_l+0xa8>
 800bc78:	2200      	movs	r2, #0
 800bc7a:	920b      	str	r2, [sp, #44]	@ 0x2c
 800bc7c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800bc7e:	782a      	ldrb	r2, [r5, #0]
 800bc80:	2a30      	cmp	r2, #48	@ 0x30
 800bc82:	f040 80b3 	bne.w	800bdec <_strtod_l+0x1a4>
 800bc86:	786a      	ldrb	r2, [r5, #1]
 800bc88:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800bc8c:	2a58      	cmp	r2, #88	@ 0x58
 800bc8e:	d16e      	bne.n	800bd6e <_strtod_l+0x126>
 800bc90:	9302      	str	r3, [sp, #8]
 800bc92:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bc94:	9301      	str	r3, [sp, #4]
 800bc96:	ab1a      	add	r3, sp, #104	@ 0x68
 800bc98:	9300      	str	r3, [sp, #0]
 800bc9a:	4a8e      	ldr	r2, [pc, #568]	@ (800bed4 <_strtod_l+0x28c>)
 800bc9c:	9805      	ldr	r0, [sp, #20]
 800bc9e:	ab1b      	add	r3, sp, #108	@ 0x6c
 800bca0:	a919      	add	r1, sp, #100	@ 0x64
 800bca2:	f001 facf 	bl	800d244 <__gethex>
 800bca6:	f010 060f 	ands.w	r6, r0, #15
 800bcaa:	4604      	mov	r4, r0
 800bcac:	d005      	beq.n	800bcba <_strtod_l+0x72>
 800bcae:	2e06      	cmp	r6, #6
 800bcb0:	d128      	bne.n	800bd04 <_strtod_l+0xbc>
 800bcb2:	3501      	adds	r5, #1
 800bcb4:	2300      	movs	r3, #0
 800bcb6:	9519      	str	r5, [sp, #100]	@ 0x64
 800bcb8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bcba:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	f040 858e 	bne.w	800c7de <_strtod_l+0xb96>
 800bcc2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bcc4:	b1cb      	cbz	r3, 800bcfa <_strtod_l+0xb2>
 800bcc6:	4652      	mov	r2, sl
 800bcc8:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800bccc:	ec43 2b10 	vmov	d0, r2, r3
 800bcd0:	b01f      	add	sp, #124	@ 0x7c
 800bcd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bcd6:	2920      	cmp	r1, #32
 800bcd8:	d1ce      	bne.n	800bc78 <_strtod_l+0x30>
 800bcda:	3201      	adds	r2, #1
 800bcdc:	e7c1      	b.n	800bc62 <_strtod_l+0x1a>
 800bcde:	292d      	cmp	r1, #45	@ 0x2d
 800bce0:	d1ca      	bne.n	800bc78 <_strtod_l+0x30>
 800bce2:	2101      	movs	r1, #1
 800bce4:	910b      	str	r1, [sp, #44]	@ 0x2c
 800bce6:	1c51      	adds	r1, r2, #1
 800bce8:	9119      	str	r1, [sp, #100]	@ 0x64
 800bcea:	7852      	ldrb	r2, [r2, #1]
 800bcec:	2a00      	cmp	r2, #0
 800bcee:	d1c5      	bne.n	800bc7c <_strtod_l+0x34>
 800bcf0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800bcf2:	9419      	str	r4, [sp, #100]	@ 0x64
 800bcf4:	2b00      	cmp	r3, #0
 800bcf6:	f040 8570 	bne.w	800c7da <_strtod_l+0xb92>
 800bcfa:	4652      	mov	r2, sl
 800bcfc:	465b      	mov	r3, fp
 800bcfe:	e7e5      	b.n	800bccc <_strtod_l+0x84>
 800bd00:	2100      	movs	r1, #0
 800bd02:	e7ef      	b.n	800bce4 <_strtod_l+0x9c>
 800bd04:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800bd06:	b13a      	cbz	r2, 800bd18 <_strtod_l+0xd0>
 800bd08:	2135      	movs	r1, #53	@ 0x35
 800bd0a:	a81c      	add	r0, sp, #112	@ 0x70
 800bd0c:	f7ff ff38 	bl	800bb80 <__copybits>
 800bd10:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800bd12:	9805      	ldr	r0, [sp, #20]
 800bd14:	f7ff fb06 	bl	800b324 <_Bfree>
 800bd18:	3e01      	subs	r6, #1
 800bd1a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800bd1c:	2e04      	cmp	r6, #4
 800bd1e:	d806      	bhi.n	800bd2e <_strtod_l+0xe6>
 800bd20:	e8df f006 	tbb	[pc, r6]
 800bd24:	201d0314 	.word	0x201d0314
 800bd28:	14          	.byte	0x14
 800bd29:	00          	.byte	0x00
 800bd2a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800bd2e:	05e1      	lsls	r1, r4, #23
 800bd30:	bf48      	it	mi
 800bd32:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800bd36:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800bd3a:	0d1b      	lsrs	r3, r3, #20
 800bd3c:	051b      	lsls	r3, r3, #20
 800bd3e:	2b00      	cmp	r3, #0
 800bd40:	d1bb      	bne.n	800bcba <_strtod_l+0x72>
 800bd42:	f7fe fbcd 	bl	800a4e0 <__errno>
 800bd46:	2322      	movs	r3, #34	@ 0x22
 800bd48:	6003      	str	r3, [r0, #0]
 800bd4a:	e7b6      	b.n	800bcba <_strtod_l+0x72>
 800bd4c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800bd50:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800bd54:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800bd58:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800bd5c:	e7e7      	b.n	800bd2e <_strtod_l+0xe6>
 800bd5e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800bedc <_strtod_l+0x294>
 800bd62:	e7e4      	b.n	800bd2e <_strtod_l+0xe6>
 800bd64:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800bd68:	f04f 3aff 	mov.w	sl, #4294967295
 800bd6c:	e7df      	b.n	800bd2e <_strtod_l+0xe6>
 800bd6e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800bd70:	1c5a      	adds	r2, r3, #1
 800bd72:	9219      	str	r2, [sp, #100]	@ 0x64
 800bd74:	785b      	ldrb	r3, [r3, #1]
 800bd76:	2b30      	cmp	r3, #48	@ 0x30
 800bd78:	d0f9      	beq.n	800bd6e <_strtod_l+0x126>
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d09d      	beq.n	800bcba <_strtod_l+0x72>
 800bd7e:	2301      	movs	r3, #1
 800bd80:	9309      	str	r3, [sp, #36]	@ 0x24
 800bd82:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800bd84:	930c      	str	r3, [sp, #48]	@ 0x30
 800bd86:	2300      	movs	r3, #0
 800bd88:	9308      	str	r3, [sp, #32]
 800bd8a:	930a      	str	r3, [sp, #40]	@ 0x28
 800bd8c:	461f      	mov	r7, r3
 800bd8e:	220a      	movs	r2, #10
 800bd90:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800bd92:	7805      	ldrb	r5, [r0, #0]
 800bd94:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800bd98:	b2d9      	uxtb	r1, r3
 800bd9a:	2909      	cmp	r1, #9
 800bd9c:	d928      	bls.n	800bdf0 <_strtod_l+0x1a8>
 800bd9e:	494e      	ldr	r1, [pc, #312]	@ (800bed8 <_strtod_l+0x290>)
 800bda0:	2201      	movs	r2, #1
 800bda2:	f001 f979 	bl	800d098 <strncmp>
 800bda6:	2800      	cmp	r0, #0
 800bda8:	d032      	beq.n	800be10 <_strtod_l+0x1c8>
 800bdaa:	2000      	movs	r0, #0
 800bdac:	462a      	mov	r2, r5
 800bdae:	4681      	mov	r9, r0
 800bdb0:	463d      	mov	r5, r7
 800bdb2:	4603      	mov	r3, r0
 800bdb4:	2a65      	cmp	r2, #101	@ 0x65
 800bdb6:	d001      	beq.n	800bdbc <_strtod_l+0x174>
 800bdb8:	2a45      	cmp	r2, #69	@ 0x45
 800bdba:	d114      	bne.n	800bde6 <_strtod_l+0x19e>
 800bdbc:	b91d      	cbnz	r5, 800bdc6 <_strtod_l+0x17e>
 800bdbe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bdc0:	4302      	orrs	r2, r0
 800bdc2:	d095      	beq.n	800bcf0 <_strtod_l+0xa8>
 800bdc4:	2500      	movs	r5, #0
 800bdc6:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800bdc8:	1c62      	adds	r2, r4, #1
 800bdca:	9219      	str	r2, [sp, #100]	@ 0x64
 800bdcc:	7862      	ldrb	r2, [r4, #1]
 800bdce:	2a2b      	cmp	r2, #43	@ 0x2b
 800bdd0:	d077      	beq.n	800bec2 <_strtod_l+0x27a>
 800bdd2:	2a2d      	cmp	r2, #45	@ 0x2d
 800bdd4:	d07b      	beq.n	800bece <_strtod_l+0x286>
 800bdd6:	f04f 0c00 	mov.w	ip, #0
 800bdda:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800bdde:	2909      	cmp	r1, #9
 800bde0:	f240 8082 	bls.w	800bee8 <_strtod_l+0x2a0>
 800bde4:	9419      	str	r4, [sp, #100]	@ 0x64
 800bde6:	f04f 0800 	mov.w	r8, #0
 800bdea:	e0a2      	b.n	800bf32 <_strtod_l+0x2ea>
 800bdec:	2300      	movs	r3, #0
 800bdee:	e7c7      	b.n	800bd80 <_strtod_l+0x138>
 800bdf0:	2f08      	cmp	r7, #8
 800bdf2:	bfd5      	itete	le
 800bdf4:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800bdf6:	9908      	ldrgt	r1, [sp, #32]
 800bdf8:	fb02 3301 	mlale	r3, r2, r1, r3
 800bdfc:	fb02 3301 	mlagt	r3, r2, r1, r3
 800be00:	f100 0001 	add.w	r0, r0, #1
 800be04:	bfd4      	ite	le
 800be06:	930a      	strle	r3, [sp, #40]	@ 0x28
 800be08:	9308      	strgt	r3, [sp, #32]
 800be0a:	3701      	adds	r7, #1
 800be0c:	9019      	str	r0, [sp, #100]	@ 0x64
 800be0e:	e7bf      	b.n	800bd90 <_strtod_l+0x148>
 800be10:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800be12:	1c5a      	adds	r2, r3, #1
 800be14:	9219      	str	r2, [sp, #100]	@ 0x64
 800be16:	785a      	ldrb	r2, [r3, #1]
 800be18:	b37f      	cbz	r7, 800be7a <_strtod_l+0x232>
 800be1a:	4681      	mov	r9, r0
 800be1c:	463d      	mov	r5, r7
 800be1e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800be22:	2b09      	cmp	r3, #9
 800be24:	d912      	bls.n	800be4c <_strtod_l+0x204>
 800be26:	2301      	movs	r3, #1
 800be28:	e7c4      	b.n	800bdb4 <_strtod_l+0x16c>
 800be2a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800be2c:	1c5a      	adds	r2, r3, #1
 800be2e:	9219      	str	r2, [sp, #100]	@ 0x64
 800be30:	785a      	ldrb	r2, [r3, #1]
 800be32:	3001      	adds	r0, #1
 800be34:	2a30      	cmp	r2, #48	@ 0x30
 800be36:	d0f8      	beq.n	800be2a <_strtod_l+0x1e2>
 800be38:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800be3c:	2b08      	cmp	r3, #8
 800be3e:	f200 84d3 	bhi.w	800c7e8 <_strtod_l+0xba0>
 800be42:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800be44:	930c      	str	r3, [sp, #48]	@ 0x30
 800be46:	4681      	mov	r9, r0
 800be48:	2000      	movs	r0, #0
 800be4a:	4605      	mov	r5, r0
 800be4c:	3a30      	subs	r2, #48	@ 0x30
 800be4e:	f100 0301 	add.w	r3, r0, #1
 800be52:	d02a      	beq.n	800beaa <_strtod_l+0x262>
 800be54:	4499      	add	r9, r3
 800be56:	eb00 0c05 	add.w	ip, r0, r5
 800be5a:	462b      	mov	r3, r5
 800be5c:	210a      	movs	r1, #10
 800be5e:	4563      	cmp	r3, ip
 800be60:	d10d      	bne.n	800be7e <_strtod_l+0x236>
 800be62:	1c69      	adds	r1, r5, #1
 800be64:	4401      	add	r1, r0
 800be66:	4428      	add	r0, r5
 800be68:	2808      	cmp	r0, #8
 800be6a:	dc16      	bgt.n	800be9a <_strtod_l+0x252>
 800be6c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800be6e:	230a      	movs	r3, #10
 800be70:	fb03 2300 	mla	r3, r3, r0, r2
 800be74:	930a      	str	r3, [sp, #40]	@ 0x28
 800be76:	2300      	movs	r3, #0
 800be78:	e018      	b.n	800beac <_strtod_l+0x264>
 800be7a:	4638      	mov	r0, r7
 800be7c:	e7da      	b.n	800be34 <_strtod_l+0x1ec>
 800be7e:	2b08      	cmp	r3, #8
 800be80:	f103 0301 	add.w	r3, r3, #1
 800be84:	dc03      	bgt.n	800be8e <_strtod_l+0x246>
 800be86:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800be88:	434e      	muls	r6, r1
 800be8a:	960a      	str	r6, [sp, #40]	@ 0x28
 800be8c:	e7e7      	b.n	800be5e <_strtod_l+0x216>
 800be8e:	2b10      	cmp	r3, #16
 800be90:	bfde      	ittt	le
 800be92:	9e08      	ldrle	r6, [sp, #32]
 800be94:	434e      	mulle	r6, r1
 800be96:	9608      	strle	r6, [sp, #32]
 800be98:	e7e1      	b.n	800be5e <_strtod_l+0x216>
 800be9a:	280f      	cmp	r0, #15
 800be9c:	dceb      	bgt.n	800be76 <_strtod_l+0x22e>
 800be9e:	9808      	ldr	r0, [sp, #32]
 800bea0:	230a      	movs	r3, #10
 800bea2:	fb03 2300 	mla	r3, r3, r0, r2
 800bea6:	9308      	str	r3, [sp, #32]
 800bea8:	e7e5      	b.n	800be76 <_strtod_l+0x22e>
 800beaa:	4629      	mov	r1, r5
 800beac:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800beae:	1c50      	adds	r0, r2, #1
 800beb0:	9019      	str	r0, [sp, #100]	@ 0x64
 800beb2:	7852      	ldrb	r2, [r2, #1]
 800beb4:	4618      	mov	r0, r3
 800beb6:	460d      	mov	r5, r1
 800beb8:	e7b1      	b.n	800be1e <_strtod_l+0x1d6>
 800beba:	f04f 0900 	mov.w	r9, #0
 800bebe:	2301      	movs	r3, #1
 800bec0:	e77d      	b.n	800bdbe <_strtod_l+0x176>
 800bec2:	f04f 0c00 	mov.w	ip, #0
 800bec6:	1ca2      	adds	r2, r4, #2
 800bec8:	9219      	str	r2, [sp, #100]	@ 0x64
 800beca:	78a2      	ldrb	r2, [r4, #2]
 800becc:	e785      	b.n	800bdda <_strtod_l+0x192>
 800bece:	f04f 0c01 	mov.w	ip, #1
 800bed2:	e7f8      	b.n	800bec6 <_strtod_l+0x27e>
 800bed4:	08011568 	.word	0x08011568
 800bed8:	08011550 	.word	0x08011550
 800bedc:	7ff00000 	.word	0x7ff00000
 800bee0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800bee2:	1c51      	adds	r1, r2, #1
 800bee4:	9119      	str	r1, [sp, #100]	@ 0x64
 800bee6:	7852      	ldrb	r2, [r2, #1]
 800bee8:	2a30      	cmp	r2, #48	@ 0x30
 800beea:	d0f9      	beq.n	800bee0 <_strtod_l+0x298>
 800beec:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800bef0:	2908      	cmp	r1, #8
 800bef2:	f63f af78 	bhi.w	800bde6 <_strtod_l+0x19e>
 800bef6:	3a30      	subs	r2, #48	@ 0x30
 800bef8:	920e      	str	r2, [sp, #56]	@ 0x38
 800befa:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800befc:	920f      	str	r2, [sp, #60]	@ 0x3c
 800befe:	f04f 080a 	mov.w	r8, #10
 800bf02:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800bf04:	1c56      	adds	r6, r2, #1
 800bf06:	9619      	str	r6, [sp, #100]	@ 0x64
 800bf08:	7852      	ldrb	r2, [r2, #1]
 800bf0a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800bf0e:	f1be 0f09 	cmp.w	lr, #9
 800bf12:	d939      	bls.n	800bf88 <_strtod_l+0x340>
 800bf14:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800bf16:	1a76      	subs	r6, r6, r1
 800bf18:	2e08      	cmp	r6, #8
 800bf1a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800bf1e:	dc03      	bgt.n	800bf28 <_strtod_l+0x2e0>
 800bf20:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800bf22:	4588      	cmp	r8, r1
 800bf24:	bfa8      	it	ge
 800bf26:	4688      	movge	r8, r1
 800bf28:	f1bc 0f00 	cmp.w	ip, #0
 800bf2c:	d001      	beq.n	800bf32 <_strtod_l+0x2ea>
 800bf2e:	f1c8 0800 	rsb	r8, r8, #0
 800bf32:	2d00      	cmp	r5, #0
 800bf34:	d14e      	bne.n	800bfd4 <_strtod_l+0x38c>
 800bf36:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800bf38:	4308      	orrs	r0, r1
 800bf3a:	f47f aebe 	bne.w	800bcba <_strtod_l+0x72>
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	f47f aed6 	bne.w	800bcf0 <_strtod_l+0xa8>
 800bf44:	2a69      	cmp	r2, #105	@ 0x69
 800bf46:	d028      	beq.n	800bf9a <_strtod_l+0x352>
 800bf48:	dc25      	bgt.n	800bf96 <_strtod_l+0x34e>
 800bf4a:	2a49      	cmp	r2, #73	@ 0x49
 800bf4c:	d025      	beq.n	800bf9a <_strtod_l+0x352>
 800bf4e:	2a4e      	cmp	r2, #78	@ 0x4e
 800bf50:	f47f aece 	bne.w	800bcf0 <_strtod_l+0xa8>
 800bf54:	499b      	ldr	r1, [pc, #620]	@ (800c1c4 <_strtod_l+0x57c>)
 800bf56:	a819      	add	r0, sp, #100	@ 0x64
 800bf58:	f001 fb96 	bl	800d688 <__match>
 800bf5c:	2800      	cmp	r0, #0
 800bf5e:	f43f aec7 	beq.w	800bcf0 <_strtod_l+0xa8>
 800bf62:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800bf64:	781b      	ldrb	r3, [r3, #0]
 800bf66:	2b28      	cmp	r3, #40	@ 0x28
 800bf68:	d12e      	bne.n	800bfc8 <_strtod_l+0x380>
 800bf6a:	4997      	ldr	r1, [pc, #604]	@ (800c1c8 <_strtod_l+0x580>)
 800bf6c:	aa1c      	add	r2, sp, #112	@ 0x70
 800bf6e:	a819      	add	r0, sp, #100	@ 0x64
 800bf70:	f001 fb9e 	bl	800d6b0 <__hexnan>
 800bf74:	2805      	cmp	r0, #5
 800bf76:	d127      	bne.n	800bfc8 <_strtod_l+0x380>
 800bf78:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800bf7a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800bf7e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800bf82:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800bf86:	e698      	b.n	800bcba <_strtod_l+0x72>
 800bf88:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800bf8a:	fb08 2101 	mla	r1, r8, r1, r2
 800bf8e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800bf92:	920e      	str	r2, [sp, #56]	@ 0x38
 800bf94:	e7b5      	b.n	800bf02 <_strtod_l+0x2ba>
 800bf96:	2a6e      	cmp	r2, #110	@ 0x6e
 800bf98:	e7da      	b.n	800bf50 <_strtod_l+0x308>
 800bf9a:	498c      	ldr	r1, [pc, #560]	@ (800c1cc <_strtod_l+0x584>)
 800bf9c:	a819      	add	r0, sp, #100	@ 0x64
 800bf9e:	f001 fb73 	bl	800d688 <__match>
 800bfa2:	2800      	cmp	r0, #0
 800bfa4:	f43f aea4 	beq.w	800bcf0 <_strtod_l+0xa8>
 800bfa8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800bfaa:	4989      	ldr	r1, [pc, #548]	@ (800c1d0 <_strtod_l+0x588>)
 800bfac:	3b01      	subs	r3, #1
 800bfae:	a819      	add	r0, sp, #100	@ 0x64
 800bfb0:	9319      	str	r3, [sp, #100]	@ 0x64
 800bfb2:	f001 fb69 	bl	800d688 <__match>
 800bfb6:	b910      	cbnz	r0, 800bfbe <_strtod_l+0x376>
 800bfb8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800bfba:	3301      	adds	r3, #1
 800bfbc:	9319      	str	r3, [sp, #100]	@ 0x64
 800bfbe:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800c1e0 <_strtod_l+0x598>
 800bfc2:	f04f 0a00 	mov.w	sl, #0
 800bfc6:	e678      	b.n	800bcba <_strtod_l+0x72>
 800bfc8:	4882      	ldr	r0, [pc, #520]	@ (800c1d4 <_strtod_l+0x58c>)
 800bfca:	f001 f899 	bl	800d100 <nan>
 800bfce:	ec5b ab10 	vmov	sl, fp, d0
 800bfd2:	e672      	b.n	800bcba <_strtod_l+0x72>
 800bfd4:	eba8 0309 	sub.w	r3, r8, r9
 800bfd8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800bfda:	9309      	str	r3, [sp, #36]	@ 0x24
 800bfdc:	2f00      	cmp	r7, #0
 800bfde:	bf08      	it	eq
 800bfe0:	462f      	moveq	r7, r5
 800bfe2:	2d10      	cmp	r5, #16
 800bfe4:	462c      	mov	r4, r5
 800bfe6:	bfa8      	it	ge
 800bfe8:	2410      	movge	r4, #16
 800bfea:	f7f4 faab 	bl	8000544 <__aeabi_ui2d>
 800bfee:	2d09      	cmp	r5, #9
 800bff0:	4682      	mov	sl, r0
 800bff2:	468b      	mov	fp, r1
 800bff4:	dc13      	bgt.n	800c01e <_strtod_l+0x3d6>
 800bff6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	f43f ae5e 	beq.w	800bcba <_strtod_l+0x72>
 800bffe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c000:	dd78      	ble.n	800c0f4 <_strtod_l+0x4ac>
 800c002:	2b16      	cmp	r3, #22
 800c004:	dc5f      	bgt.n	800c0c6 <_strtod_l+0x47e>
 800c006:	4974      	ldr	r1, [pc, #464]	@ (800c1d8 <_strtod_l+0x590>)
 800c008:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c00c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c010:	4652      	mov	r2, sl
 800c012:	465b      	mov	r3, fp
 800c014:	f7f4 fb10 	bl	8000638 <__aeabi_dmul>
 800c018:	4682      	mov	sl, r0
 800c01a:	468b      	mov	fp, r1
 800c01c:	e64d      	b.n	800bcba <_strtod_l+0x72>
 800c01e:	4b6e      	ldr	r3, [pc, #440]	@ (800c1d8 <_strtod_l+0x590>)
 800c020:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c024:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800c028:	f7f4 fb06 	bl	8000638 <__aeabi_dmul>
 800c02c:	4682      	mov	sl, r0
 800c02e:	9808      	ldr	r0, [sp, #32]
 800c030:	468b      	mov	fp, r1
 800c032:	f7f4 fa87 	bl	8000544 <__aeabi_ui2d>
 800c036:	4602      	mov	r2, r0
 800c038:	460b      	mov	r3, r1
 800c03a:	4650      	mov	r0, sl
 800c03c:	4659      	mov	r1, fp
 800c03e:	f7f4 f945 	bl	80002cc <__adddf3>
 800c042:	2d0f      	cmp	r5, #15
 800c044:	4682      	mov	sl, r0
 800c046:	468b      	mov	fp, r1
 800c048:	ddd5      	ble.n	800bff6 <_strtod_l+0x3ae>
 800c04a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c04c:	1b2c      	subs	r4, r5, r4
 800c04e:	441c      	add	r4, r3
 800c050:	2c00      	cmp	r4, #0
 800c052:	f340 8096 	ble.w	800c182 <_strtod_l+0x53a>
 800c056:	f014 030f 	ands.w	r3, r4, #15
 800c05a:	d00a      	beq.n	800c072 <_strtod_l+0x42a>
 800c05c:	495e      	ldr	r1, [pc, #376]	@ (800c1d8 <_strtod_l+0x590>)
 800c05e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c062:	4652      	mov	r2, sl
 800c064:	465b      	mov	r3, fp
 800c066:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c06a:	f7f4 fae5 	bl	8000638 <__aeabi_dmul>
 800c06e:	4682      	mov	sl, r0
 800c070:	468b      	mov	fp, r1
 800c072:	f034 040f 	bics.w	r4, r4, #15
 800c076:	d073      	beq.n	800c160 <_strtod_l+0x518>
 800c078:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800c07c:	dd48      	ble.n	800c110 <_strtod_l+0x4c8>
 800c07e:	2400      	movs	r4, #0
 800c080:	46a0      	mov	r8, r4
 800c082:	940a      	str	r4, [sp, #40]	@ 0x28
 800c084:	46a1      	mov	r9, r4
 800c086:	9a05      	ldr	r2, [sp, #20]
 800c088:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800c1e0 <_strtod_l+0x598>
 800c08c:	2322      	movs	r3, #34	@ 0x22
 800c08e:	6013      	str	r3, [r2, #0]
 800c090:	f04f 0a00 	mov.w	sl, #0
 800c094:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c096:	2b00      	cmp	r3, #0
 800c098:	f43f ae0f 	beq.w	800bcba <_strtod_l+0x72>
 800c09c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c09e:	9805      	ldr	r0, [sp, #20]
 800c0a0:	f7ff f940 	bl	800b324 <_Bfree>
 800c0a4:	9805      	ldr	r0, [sp, #20]
 800c0a6:	4649      	mov	r1, r9
 800c0a8:	f7ff f93c 	bl	800b324 <_Bfree>
 800c0ac:	9805      	ldr	r0, [sp, #20]
 800c0ae:	4641      	mov	r1, r8
 800c0b0:	f7ff f938 	bl	800b324 <_Bfree>
 800c0b4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c0b6:	9805      	ldr	r0, [sp, #20]
 800c0b8:	f7ff f934 	bl	800b324 <_Bfree>
 800c0bc:	9805      	ldr	r0, [sp, #20]
 800c0be:	4621      	mov	r1, r4
 800c0c0:	f7ff f930 	bl	800b324 <_Bfree>
 800c0c4:	e5f9      	b.n	800bcba <_strtod_l+0x72>
 800c0c6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c0c8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800c0cc:	4293      	cmp	r3, r2
 800c0ce:	dbbc      	blt.n	800c04a <_strtod_l+0x402>
 800c0d0:	4c41      	ldr	r4, [pc, #260]	@ (800c1d8 <_strtod_l+0x590>)
 800c0d2:	f1c5 050f 	rsb	r5, r5, #15
 800c0d6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800c0da:	4652      	mov	r2, sl
 800c0dc:	465b      	mov	r3, fp
 800c0de:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c0e2:	f7f4 faa9 	bl	8000638 <__aeabi_dmul>
 800c0e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c0e8:	1b5d      	subs	r5, r3, r5
 800c0ea:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800c0ee:	e9d4 2300 	ldrd	r2, r3, [r4]
 800c0f2:	e78f      	b.n	800c014 <_strtod_l+0x3cc>
 800c0f4:	3316      	adds	r3, #22
 800c0f6:	dba8      	blt.n	800c04a <_strtod_l+0x402>
 800c0f8:	4b37      	ldr	r3, [pc, #220]	@ (800c1d8 <_strtod_l+0x590>)
 800c0fa:	eba9 0808 	sub.w	r8, r9, r8
 800c0fe:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800c102:	e9d8 2300 	ldrd	r2, r3, [r8]
 800c106:	4650      	mov	r0, sl
 800c108:	4659      	mov	r1, fp
 800c10a:	f7f4 fbbf 	bl	800088c <__aeabi_ddiv>
 800c10e:	e783      	b.n	800c018 <_strtod_l+0x3d0>
 800c110:	4b32      	ldr	r3, [pc, #200]	@ (800c1dc <_strtod_l+0x594>)
 800c112:	9308      	str	r3, [sp, #32]
 800c114:	2300      	movs	r3, #0
 800c116:	1124      	asrs	r4, r4, #4
 800c118:	4650      	mov	r0, sl
 800c11a:	4659      	mov	r1, fp
 800c11c:	461e      	mov	r6, r3
 800c11e:	2c01      	cmp	r4, #1
 800c120:	dc21      	bgt.n	800c166 <_strtod_l+0x51e>
 800c122:	b10b      	cbz	r3, 800c128 <_strtod_l+0x4e0>
 800c124:	4682      	mov	sl, r0
 800c126:	468b      	mov	fp, r1
 800c128:	492c      	ldr	r1, [pc, #176]	@ (800c1dc <_strtod_l+0x594>)
 800c12a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800c12e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800c132:	4652      	mov	r2, sl
 800c134:	465b      	mov	r3, fp
 800c136:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c13a:	f7f4 fa7d 	bl	8000638 <__aeabi_dmul>
 800c13e:	4b28      	ldr	r3, [pc, #160]	@ (800c1e0 <_strtod_l+0x598>)
 800c140:	460a      	mov	r2, r1
 800c142:	400b      	ands	r3, r1
 800c144:	4927      	ldr	r1, [pc, #156]	@ (800c1e4 <_strtod_l+0x59c>)
 800c146:	428b      	cmp	r3, r1
 800c148:	4682      	mov	sl, r0
 800c14a:	d898      	bhi.n	800c07e <_strtod_l+0x436>
 800c14c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800c150:	428b      	cmp	r3, r1
 800c152:	bf86      	itte	hi
 800c154:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800c1e8 <_strtod_l+0x5a0>
 800c158:	f04f 3aff 	movhi.w	sl, #4294967295
 800c15c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800c160:	2300      	movs	r3, #0
 800c162:	9308      	str	r3, [sp, #32]
 800c164:	e07a      	b.n	800c25c <_strtod_l+0x614>
 800c166:	07e2      	lsls	r2, r4, #31
 800c168:	d505      	bpl.n	800c176 <_strtod_l+0x52e>
 800c16a:	9b08      	ldr	r3, [sp, #32]
 800c16c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c170:	f7f4 fa62 	bl	8000638 <__aeabi_dmul>
 800c174:	2301      	movs	r3, #1
 800c176:	9a08      	ldr	r2, [sp, #32]
 800c178:	3208      	adds	r2, #8
 800c17a:	3601      	adds	r6, #1
 800c17c:	1064      	asrs	r4, r4, #1
 800c17e:	9208      	str	r2, [sp, #32]
 800c180:	e7cd      	b.n	800c11e <_strtod_l+0x4d6>
 800c182:	d0ed      	beq.n	800c160 <_strtod_l+0x518>
 800c184:	4264      	negs	r4, r4
 800c186:	f014 020f 	ands.w	r2, r4, #15
 800c18a:	d00a      	beq.n	800c1a2 <_strtod_l+0x55a>
 800c18c:	4b12      	ldr	r3, [pc, #72]	@ (800c1d8 <_strtod_l+0x590>)
 800c18e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c192:	4650      	mov	r0, sl
 800c194:	4659      	mov	r1, fp
 800c196:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c19a:	f7f4 fb77 	bl	800088c <__aeabi_ddiv>
 800c19e:	4682      	mov	sl, r0
 800c1a0:	468b      	mov	fp, r1
 800c1a2:	1124      	asrs	r4, r4, #4
 800c1a4:	d0dc      	beq.n	800c160 <_strtod_l+0x518>
 800c1a6:	2c1f      	cmp	r4, #31
 800c1a8:	dd20      	ble.n	800c1ec <_strtod_l+0x5a4>
 800c1aa:	2400      	movs	r4, #0
 800c1ac:	46a0      	mov	r8, r4
 800c1ae:	940a      	str	r4, [sp, #40]	@ 0x28
 800c1b0:	46a1      	mov	r9, r4
 800c1b2:	9a05      	ldr	r2, [sp, #20]
 800c1b4:	2322      	movs	r3, #34	@ 0x22
 800c1b6:	f04f 0a00 	mov.w	sl, #0
 800c1ba:	f04f 0b00 	mov.w	fp, #0
 800c1be:	6013      	str	r3, [r2, #0]
 800c1c0:	e768      	b.n	800c094 <_strtod_l+0x44c>
 800c1c2:	bf00      	nop
 800c1c4:	08011341 	.word	0x08011341
 800c1c8:	08011554 	.word	0x08011554
 800c1cc:	08011339 	.word	0x08011339
 800c1d0:	08011370 	.word	0x08011370
 800c1d4:	080116fd 	.word	0x080116fd
 800c1d8:	08011488 	.word	0x08011488
 800c1dc:	08011460 	.word	0x08011460
 800c1e0:	7ff00000 	.word	0x7ff00000
 800c1e4:	7ca00000 	.word	0x7ca00000
 800c1e8:	7fefffff 	.word	0x7fefffff
 800c1ec:	f014 0310 	ands.w	r3, r4, #16
 800c1f0:	bf18      	it	ne
 800c1f2:	236a      	movne	r3, #106	@ 0x6a
 800c1f4:	4ea9      	ldr	r6, [pc, #676]	@ (800c49c <_strtod_l+0x854>)
 800c1f6:	9308      	str	r3, [sp, #32]
 800c1f8:	4650      	mov	r0, sl
 800c1fa:	4659      	mov	r1, fp
 800c1fc:	2300      	movs	r3, #0
 800c1fe:	07e2      	lsls	r2, r4, #31
 800c200:	d504      	bpl.n	800c20c <_strtod_l+0x5c4>
 800c202:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c206:	f7f4 fa17 	bl	8000638 <__aeabi_dmul>
 800c20a:	2301      	movs	r3, #1
 800c20c:	1064      	asrs	r4, r4, #1
 800c20e:	f106 0608 	add.w	r6, r6, #8
 800c212:	d1f4      	bne.n	800c1fe <_strtod_l+0x5b6>
 800c214:	b10b      	cbz	r3, 800c21a <_strtod_l+0x5d2>
 800c216:	4682      	mov	sl, r0
 800c218:	468b      	mov	fp, r1
 800c21a:	9b08      	ldr	r3, [sp, #32]
 800c21c:	b1b3      	cbz	r3, 800c24c <_strtod_l+0x604>
 800c21e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800c222:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800c226:	2b00      	cmp	r3, #0
 800c228:	4659      	mov	r1, fp
 800c22a:	dd0f      	ble.n	800c24c <_strtod_l+0x604>
 800c22c:	2b1f      	cmp	r3, #31
 800c22e:	dd55      	ble.n	800c2dc <_strtod_l+0x694>
 800c230:	2b34      	cmp	r3, #52	@ 0x34
 800c232:	bfde      	ittt	le
 800c234:	f04f 33ff 	movle.w	r3, #4294967295
 800c238:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800c23c:	4093      	lslle	r3, r2
 800c23e:	f04f 0a00 	mov.w	sl, #0
 800c242:	bfcc      	ite	gt
 800c244:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800c248:	ea03 0b01 	andle.w	fp, r3, r1
 800c24c:	2200      	movs	r2, #0
 800c24e:	2300      	movs	r3, #0
 800c250:	4650      	mov	r0, sl
 800c252:	4659      	mov	r1, fp
 800c254:	f7f4 fc58 	bl	8000b08 <__aeabi_dcmpeq>
 800c258:	2800      	cmp	r0, #0
 800c25a:	d1a6      	bne.n	800c1aa <_strtod_l+0x562>
 800c25c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c25e:	9300      	str	r3, [sp, #0]
 800c260:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800c262:	9805      	ldr	r0, [sp, #20]
 800c264:	462b      	mov	r3, r5
 800c266:	463a      	mov	r2, r7
 800c268:	f7ff f8c4 	bl	800b3f4 <__s2b>
 800c26c:	900a      	str	r0, [sp, #40]	@ 0x28
 800c26e:	2800      	cmp	r0, #0
 800c270:	f43f af05 	beq.w	800c07e <_strtod_l+0x436>
 800c274:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c276:	2a00      	cmp	r2, #0
 800c278:	eba9 0308 	sub.w	r3, r9, r8
 800c27c:	bfa8      	it	ge
 800c27e:	2300      	movge	r3, #0
 800c280:	9312      	str	r3, [sp, #72]	@ 0x48
 800c282:	2400      	movs	r4, #0
 800c284:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800c288:	9316      	str	r3, [sp, #88]	@ 0x58
 800c28a:	46a0      	mov	r8, r4
 800c28c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c28e:	9805      	ldr	r0, [sp, #20]
 800c290:	6859      	ldr	r1, [r3, #4]
 800c292:	f7ff f807 	bl	800b2a4 <_Balloc>
 800c296:	4681      	mov	r9, r0
 800c298:	2800      	cmp	r0, #0
 800c29a:	f43f aef4 	beq.w	800c086 <_strtod_l+0x43e>
 800c29e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c2a0:	691a      	ldr	r2, [r3, #16]
 800c2a2:	3202      	adds	r2, #2
 800c2a4:	f103 010c 	add.w	r1, r3, #12
 800c2a8:	0092      	lsls	r2, r2, #2
 800c2aa:	300c      	adds	r0, #12
 800c2ac:	f7fe f94d 	bl	800a54a <memcpy>
 800c2b0:	ec4b ab10 	vmov	d0, sl, fp
 800c2b4:	9805      	ldr	r0, [sp, #20]
 800c2b6:	aa1c      	add	r2, sp, #112	@ 0x70
 800c2b8:	a91b      	add	r1, sp, #108	@ 0x6c
 800c2ba:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800c2be:	f7ff fbd5 	bl	800ba6c <__d2b>
 800c2c2:	901a      	str	r0, [sp, #104]	@ 0x68
 800c2c4:	2800      	cmp	r0, #0
 800c2c6:	f43f aede 	beq.w	800c086 <_strtod_l+0x43e>
 800c2ca:	9805      	ldr	r0, [sp, #20]
 800c2cc:	2101      	movs	r1, #1
 800c2ce:	f7ff f927 	bl	800b520 <__i2b>
 800c2d2:	4680      	mov	r8, r0
 800c2d4:	b948      	cbnz	r0, 800c2ea <_strtod_l+0x6a2>
 800c2d6:	f04f 0800 	mov.w	r8, #0
 800c2da:	e6d4      	b.n	800c086 <_strtod_l+0x43e>
 800c2dc:	f04f 32ff 	mov.w	r2, #4294967295
 800c2e0:	fa02 f303 	lsl.w	r3, r2, r3
 800c2e4:	ea03 0a0a 	and.w	sl, r3, sl
 800c2e8:	e7b0      	b.n	800c24c <_strtod_l+0x604>
 800c2ea:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800c2ec:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800c2ee:	2d00      	cmp	r5, #0
 800c2f0:	bfab      	itete	ge
 800c2f2:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800c2f4:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800c2f6:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800c2f8:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800c2fa:	bfac      	ite	ge
 800c2fc:	18ef      	addge	r7, r5, r3
 800c2fe:	1b5e      	sublt	r6, r3, r5
 800c300:	9b08      	ldr	r3, [sp, #32]
 800c302:	1aed      	subs	r5, r5, r3
 800c304:	4415      	add	r5, r2
 800c306:	4b66      	ldr	r3, [pc, #408]	@ (800c4a0 <_strtod_l+0x858>)
 800c308:	3d01      	subs	r5, #1
 800c30a:	429d      	cmp	r5, r3
 800c30c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800c310:	da50      	bge.n	800c3b4 <_strtod_l+0x76c>
 800c312:	1b5b      	subs	r3, r3, r5
 800c314:	2b1f      	cmp	r3, #31
 800c316:	eba2 0203 	sub.w	r2, r2, r3
 800c31a:	f04f 0101 	mov.w	r1, #1
 800c31e:	dc3d      	bgt.n	800c39c <_strtod_l+0x754>
 800c320:	fa01 f303 	lsl.w	r3, r1, r3
 800c324:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c326:	2300      	movs	r3, #0
 800c328:	9310      	str	r3, [sp, #64]	@ 0x40
 800c32a:	18bd      	adds	r5, r7, r2
 800c32c:	9b08      	ldr	r3, [sp, #32]
 800c32e:	42af      	cmp	r7, r5
 800c330:	4416      	add	r6, r2
 800c332:	441e      	add	r6, r3
 800c334:	463b      	mov	r3, r7
 800c336:	bfa8      	it	ge
 800c338:	462b      	movge	r3, r5
 800c33a:	42b3      	cmp	r3, r6
 800c33c:	bfa8      	it	ge
 800c33e:	4633      	movge	r3, r6
 800c340:	2b00      	cmp	r3, #0
 800c342:	bfc2      	ittt	gt
 800c344:	1aed      	subgt	r5, r5, r3
 800c346:	1af6      	subgt	r6, r6, r3
 800c348:	1aff      	subgt	r7, r7, r3
 800c34a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800c34c:	2b00      	cmp	r3, #0
 800c34e:	dd16      	ble.n	800c37e <_strtod_l+0x736>
 800c350:	4641      	mov	r1, r8
 800c352:	9805      	ldr	r0, [sp, #20]
 800c354:	461a      	mov	r2, r3
 800c356:	f7ff f9a3 	bl	800b6a0 <__pow5mult>
 800c35a:	4680      	mov	r8, r0
 800c35c:	2800      	cmp	r0, #0
 800c35e:	d0ba      	beq.n	800c2d6 <_strtod_l+0x68e>
 800c360:	4601      	mov	r1, r0
 800c362:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800c364:	9805      	ldr	r0, [sp, #20]
 800c366:	f7ff f8f1 	bl	800b54c <__multiply>
 800c36a:	900e      	str	r0, [sp, #56]	@ 0x38
 800c36c:	2800      	cmp	r0, #0
 800c36e:	f43f ae8a 	beq.w	800c086 <_strtod_l+0x43e>
 800c372:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c374:	9805      	ldr	r0, [sp, #20]
 800c376:	f7fe ffd5 	bl	800b324 <_Bfree>
 800c37a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c37c:	931a      	str	r3, [sp, #104]	@ 0x68
 800c37e:	2d00      	cmp	r5, #0
 800c380:	dc1d      	bgt.n	800c3be <_strtod_l+0x776>
 800c382:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c384:	2b00      	cmp	r3, #0
 800c386:	dd23      	ble.n	800c3d0 <_strtod_l+0x788>
 800c388:	4649      	mov	r1, r9
 800c38a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800c38c:	9805      	ldr	r0, [sp, #20]
 800c38e:	f7ff f987 	bl	800b6a0 <__pow5mult>
 800c392:	4681      	mov	r9, r0
 800c394:	b9e0      	cbnz	r0, 800c3d0 <_strtod_l+0x788>
 800c396:	f04f 0900 	mov.w	r9, #0
 800c39a:	e674      	b.n	800c086 <_strtod_l+0x43e>
 800c39c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800c3a0:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800c3a4:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800c3a8:	35e2      	adds	r5, #226	@ 0xe2
 800c3aa:	fa01 f305 	lsl.w	r3, r1, r5
 800c3ae:	9310      	str	r3, [sp, #64]	@ 0x40
 800c3b0:	9113      	str	r1, [sp, #76]	@ 0x4c
 800c3b2:	e7ba      	b.n	800c32a <_strtod_l+0x6e2>
 800c3b4:	2300      	movs	r3, #0
 800c3b6:	9310      	str	r3, [sp, #64]	@ 0x40
 800c3b8:	2301      	movs	r3, #1
 800c3ba:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c3bc:	e7b5      	b.n	800c32a <_strtod_l+0x6e2>
 800c3be:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c3c0:	9805      	ldr	r0, [sp, #20]
 800c3c2:	462a      	mov	r2, r5
 800c3c4:	f7ff f9c6 	bl	800b754 <__lshift>
 800c3c8:	901a      	str	r0, [sp, #104]	@ 0x68
 800c3ca:	2800      	cmp	r0, #0
 800c3cc:	d1d9      	bne.n	800c382 <_strtod_l+0x73a>
 800c3ce:	e65a      	b.n	800c086 <_strtod_l+0x43e>
 800c3d0:	2e00      	cmp	r6, #0
 800c3d2:	dd07      	ble.n	800c3e4 <_strtod_l+0x79c>
 800c3d4:	4649      	mov	r1, r9
 800c3d6:	9805      	ldr	r0, [sp, #20]
 800c3d8:	4632      	mov	r2, r6
 800c3da:	f7ff f9bb 	bl	800b754 <__lshift>
 800c3de:	4681      	mov	r9, r0
 800c3e0:	2800      	cmp	r0, #0
 800c3e2:	d0d8      	beq.n	800c396 <_strtod_l+0x74e>
 800c3e4:	2f00      	cmp	r7, #0
 800c3e6:	dd08      	ble.n	800c3fa <_strtod_l+0x7b2>
 800c3e8:	4641      	mov	r1, r8
 800c3ea:	9805      	ldr	r0, [sp, #20]
 800c3ec:	463a      	mov	r2, r7
 800c3ee:	f7ff f9b1 	bl	800b754 <__lshift>
 800c3f2:	4680      	mov	r8, r0
 800c3f4:	2800      	cmp	r0, #0
 800c3f6:	f43f ae46 	beq.w	800c086 <_strtod_l+0x43e>
 800c3fa:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c3fc:	9805      	ldr	r0, [sp, #20]
 800c3fe:	464a      	mov	r2, r9
 800c400:	f7ff fa30 	bl	800b864 <__mdiff>
 800c404:	4604      	mov	r4, r0
 800c406:	2800      	cmp	r0, #0
 800c408:	f43f ae3d 	beq.w	800c086 <_strtod_l+0x43e>
 800c40c:	68c3      	ldr	r3, [r0, #12]
 800c40e:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c410:	2300      	movs	r3, #0
 800c412:	60c3      	str	r3, [r0, #12]
 800c414:	4641      	mov	r1, r8
 800c416:	f7ff fa09 	bl	800b82c <__mcmp>
 800c41a:	2800      	cmp	r0, #0
 800c41c:	da46      	bge.n	800c4ac <_strtod_l+0x864>
 800c41e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c420:	ea53 030a 	orrs.w	r3, r3, sl
 800c424:	d16c      	bne.n	800c500 <_strtod_l+0x8b8>
 800c426:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c42a:	2b00      	cmp	r3, #0
 800c42c:	d168      	bne.n	800c500 <_strtod_l+0x8b8>
 800c42e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c432:	0d1b      	lsrs	r3, r3, #20
 800c434:	051b      	lsls	r3, r3, #20
 800c436:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800c43a:	d961      	bls.n	800c500 <_strtod_l+0x8b8>
 800c43c:	6963      	ldr	r3, [r4, #20]
 800c43e:	b913      	cbnz	r3, 800c446 <_strtod_l+0x7fe>
 800c440:	6923      	ldr	r3, [r4, #16]
 800c442:	2b01      	cmp	r3, #1
 800c444:	dd5c      	ble.n	800c500 <_strtod_l+0x8b8>
 800c446:	4621      	mov	r1, r4
 800c448:	2201      	movs	r2, #1
 800c44a:	9805      	ldr	r0, [sp, #20]
 800c44c:	f7ff f982 	bl	800b754 <__lshift>
 800c450:	4641      	mov	r1, r8
 800c452:	4604      	mov	r4, r0
 800c454:	f7ff f9ea 	bl	800b82c <__mcmp>
 800c458:	2800      	cmp	r0, #0
 800c45a:	dd51      	ble.n	800c500 <_strtod_l+0x8b8>
 800c45c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c460:	9a08      	ldr	r2, [sp, #32]
 800c462:	0d1b      	lsrs	r3, r3, #20
 800c464:	051b      	lsls	r3, r3, #20
 800c466:	2a00      	cmp	r2, #0
 800c468:	d06b      	beq.n	800c542 <_strtod_l+0x8fa>
 800c46a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800c46e:	d868      	bhi.n	800c542 <_strtod_l+0x8fa>
 800c470:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800c474:	f67f ae9d 	bls.w	800c1b2 <_strtod_l+0x56a>
 800c478:	4b0a      	ldr	r3, [pc, #40]	@ (800c4a4 <_strtod_l+0x85c>)
 800c47a:	4650      	mov	r0, sl
 800c47c:	4659      	mov	r1, fp
 800c47e:	2200      	movs	r2, #0
 800c480:	f7f4 f8da 	bl	8000638 <__aeabi_dmul>
 800c484:	4b08      	ldr	r3, [pc, #32]	@ (800c4a8 <_strtod_l+0x860>)
 800c486:	400b      	ands	r3, r1
 800c488:	4682      	mov	sl, r0
 800c48a:	468b      	mov	fp, r1
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	f47f ae05 	bne.w	800c09c <_strtod_l+0x454>
 800c492:	9a05      	ldr	r2, [sp, #20]
 800c494:	2322      	movs	r3, #34	@ 0x22
 800c496:	6013      	str	r3, [r2, #0]
 800c498:	e600      	b.n	800c09c <_strtod_l+0x454>
 800c49a:	bf00      	nop
 800c49c:	08011580 	.word	0x08011580
 800c4a0:	fffffc02 	.word	0xfffffc02
 800c4a4:	39500000 	.word	0x39500000
 800c4a8:	7ff00000 	.word	0x7ff00000
 800c4ac:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800c4b0:	d165      	bne.n	800c57e <_strtod_l+0x936>
 800c4b2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800c4b4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c4b8:	b35a      	cbz	r2, 800c512 <_strtod_l+0x8ca>
 800c4ba:	4a9f      	ldr	r2, [pc, #636]	@ (800c738 <_strtod_l+0xaf0>)
 800c4bc:	4293      	cmp	r3, r2
 800c4be:	d12b      	bne.n	800c518 <_strtod_l+0x8d0>
 800c4c0:	9b08      	ldr	r3, [sp, #32]
 800c4c2:	4651      	mov	r1, sl
 800c4c4:	b303      	cbz	r3, 800c508 <_strtod_l+0x8c0>
 800c4c6:	4b9d      	ldr	r3, [pc, #628]	@ (800c73c <_strtod_l+0xaf4>)
 800c4c8:	465a      	mov	r2, fp
 800c4ca:	4013      	ands	r3, r2
 800c4cc:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800c4d0:	f04f 32ff 	mov.w	r2, #4294967295
 800c4d4:	d81b      	bhi.n	800c50e <_strtod_l+0x8c6>
 800c4d6:	0d1b      	lsrs	r3, r3, #20
 800c4d8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800c4dc:	fa02 f303 	lsl.w	r3, r2, r3
 800c4e0:	4299      	cmp	r1, r3
 800c4e2:	d119      	bne.n	800c518 <_strtod_l+0x8d0>
 800c4e4:	4b96      	ldr	r3, [pc, #600]	@ (800c740 <_strtod_l+0xaf8>)
 800c4e6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c4e8:	429a      	cmp	r2, r3
 800c4ea:	d102      	bne.n	800c4f2 <_strtod_l+0x8aa>
 800c4ec:	3101      	adds	r1, #1
 800c4ee:	f43f adca 	beq.w	800c086 <_strtod_l+0x43e>
 800c4f2:	4b92      	ldr	r3, [pc, #584]	@ (800c73c <_strtod_l+0xaf4>)
 800c4f4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c4f6:	401a      	ands	r2, r3
 800c4f8:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800c4fc:	f04f 0a00 	mov.w	sl, #0
 800c500:	9b08      	ldr	r3, [sp, #32]
 800c502:	2b00      	cmp	r3, #0
 800c504:	d1b8      	bne.n	800c478 <_strtod_l+0x830>
 800c506:	e5c9      	b.n	800c09c <_strtod_l+0x454>
 800c508:	f04f 33ff 	mov.w	r3, #4294967295
 800c50c:	e7e8      	b.n	800c4e0 <_strtod_l+0x898>
 800c50e:	4613      	mov	r3, r2
 800c510:	e7e6      	b.n	800c4e0 <_strtod_l+0x898>
 800c512:	ea53 030a 	orrs.w	r3, r3, sl
 800c516:	d0a1      	beq.n	800c45c <_strtod_l+0x814>
 800c518:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800c51a:	b1db      	cbz	r3, 800c554 <_strtod_l+0x90c>
 800c51c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c51e:	4213      	tst	r3, r2
 800c520:	d0ee      	beq.n	800c500 <_strtod_l+0x8b8>
 800c522:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c524:	9a08      	ldr	r2, [sp, #32]
 800c526:	4650      	mov	r0, sl
 800c528:	4659      	mov	r1, fp
 800c52a:	b1bb      	cbz	r3, 800c55c <_strtod_l+0x914>
 800c52c:	f7ff fb6c 	bl	800bc08 <sulp>
 800c530:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c534:	ec53 2b10 	vmov	r2, r3, d0
 800c538:	f7f3 fec8 	bl	80002cc <__adddf3>
 800c53c:	4682      	mov	sl, r0
 800c53e:	468b      	mov	fp, r1
 800c540:	e7de      	b.n	800c500 <_strtod_l+0x8b8>
 800c542:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800c546:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800c54a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800c54e:	f04f 3aff 	mov.w	sl, #4294967295
 800c552:	e7d5      	b.n	800c500 <_strtod_l+0x8b8>
 800c554:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800c556:	ea13 0f0a 	tst.w	r3, sl
 800c55a:	e7e1      	b.n	800c520 <_strtod_l+0x8d8>
 800c55c:	f7ff fb54 	bl	800bc08 <sulp>
 800c560:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c564:	ec53 2b10 	vmov	r2, r3, d0
 800c568:	f7f3 feae 	bl	80002c8 <__aeabi_dsub>
 800c56c:	2200      	movs	r2, #0
 800c56e:	2300      	movs	r3, #0
 800c570:	4682      	mov	sl, r0
 800c572:	468b      	mov	fp, r1
 800c574:	f7f4 fac8 	bl	8000b08 <__aeabi_dcmpeq>
 800c578:	2800      	cmp	r0, #0
 800c57a:	d0c1      	beq.n	800c500 <_strtod_l+0x8b8>
 800c57c:	e619      	b.n	800c1b2 <_strtod_l+0x56a>
 800c57e:	4641      	mov	r1, r8
 800c580:	4620      	mov	r0, r4
 800c582:	f7ff facb 	bl	800bb1c <__ratio>
 800c586:	ec57 6b10 	vmov	r6, r7, d0
 800c58a:	2200      	movs	r2, #0
 800c58c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800c590:	4630      	mov	r0, r6
 800c592:	4639      	mov	r1, r7
 800c594:	f7f4 facc 	bl	8000b30 <__aeabi_dcmple>
 800c598:	2800      	cmp	r0, #0
 800c59a:	d06f      	beq.n	800c67c <_strtod_l+0xa34>
 800c59c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	d17a      	bne.n	800c698 <_strtod_l+0xa50>
 800c5a2:	f1ba 0f00 	cmp.w	sl, #0
 800c5a6:	d158      	bne.n	800c65a <_strtod_l+0xa12>
 800c5a8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c5aa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c5ae:	2b00      	cmp	r3, #0
 800c5b0:	d15a      	bne.n	800c668 <_strtod_l+0xa20>
 800c5b2:	4b64      	ldr	r3, [pc, #400]	@ (800c744 <_strtod_l+0xafc>)
 800c5b4:	2200      	movs	r2, #0
 800c5b6:	4630      	mov	r0, r6
 800c5b8:	4639      	mov	r1, r7
 800c5ba:	f7f4 faaf 	bl	8000b1c <__aeabi_dcmplt>
 800c5be:	2800      	cmp	r0, #0
 800c5c0:	d159      	bne.n	800c676 <_strtod_l+0xa2e>
 800c5c2:	4630      	mov	r0, r6
 800c5c4:	4639      	mov	r1, r7
 800c5c6:	4b60      	ldr	r3, [pc, #384]	@ (800c748 <_strtod_l+0xb00>)
 800c5c8:	2200      	movs	r2, #0
 800c5ca:	f7f4 f835 	bl	8000638 <__aeabi_dmul>
 800c5ce:	4606      	mov	r6, r0
 800c5d0:	460f      	mov	r7, r1
 800c5d2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800c5d6:	9606      	str	r6, [sp, #24]
 800c5d8:	9307      	str	r3, [sp, #28]
 800c5da:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c5de:	4d57      	ldr	r5, [pc, #348]	@ (800c73c <_strtod_l+0xaf4>)
 800c5e0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800c5e4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c5e6:	401d      	ands	r5, r3
 800c5e8:	4b58      	ldr	r3, [pc, #352]	@ (800c74c <_strtod_l+0xb04>)
 800c5ea:	429d      	cmp	r5, r3
 800c5ec:	f040 80b2 	bne.w	800c754 <_strtod_l+0xb0c>
 800c5f0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c5f2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800c5f6:	ec4b ab10 	vmov	d0, sl, fp
 800c5fa:	f7ff f9c7 	bl	800b98c <__ulp>
 800c5fe:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c602:	ec51 0b10 	vmov	r0, r1, d0
 800c606:	f7f4 f817 	bl	8000638 <__aeabi_dmul>
 800c60a:	4652      	mov	r2, sl
 800c60c:	465b      	mov	r3, fp
 800c60e:	f7f3 fe5d 	bl	80002cc <__adddf3>
 800c612:	460b      	mov	r3, r1
 800c614:	4949      	ldr	r1, [pc, #292]	@ (800c73c <_strtod_l+0xaf4>)
 800c616:	4a4e      	ldr	r2, [pc, #312]	@ (800c750 <_strtod_l+0xb08>)
 800c618:	4019      	ands	r1, r3
 800c61a:	4291      	cmp	r1, r2
 800c61c:	4682      	mov	sl, r0
 800c61e:	d942      	bls.n	800c6a6 <_strtod_l+0xa5e>
 800c620:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800c622:	4b47      	ldr	r3, [pc, #284]	@ (800c740 <_strtod_l+0xaf8>)
 800c624:	429a      	cmp	r2, r3
 800c626:	d103      	bne.n	800c630 <_strtod_l+0x9e8>
 800c628:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c62a:	3301      	adds	r3, #1
 800c62c:	f43f ad2b 	beq.w	800c086 <_strtod_l+0x43e>
 800c630:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800c740 <_strtod_l+0xaf8>
 800c634:	f04f 3aff 	mov.w	sl, #4294967295
 800c638:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c63a:	9805      	ldr	r0, [sp, #20]
 800c63c:	f7fe fe72 	bl	800b324 <_Bfree>
 800c640:	9805      	ldr	r0, [sp, #20]
 800c642:	4649      	mov	r1, r9
 800c644:	f7fe fe6e 	bl	800b324 <_Bfree>
 800c648:	9805      	ldr	r0, [sp, #20]
 800c64a:	4641      	mov	r1, r8
 800c64c:	f7fe fe6a 	bl	800b324 <_Bfree>
 800c650:	9805      	ldr	r0, [sp, #20]
 800c652:	4621      	mov	r1, r4
 800c654:	f7fe fe66 	bl	800b324 <_Bfree>
 800c658:	e618      	b.n	800c28c <_strtod_l+0x644>
 800c65a:	f1ba 0f01 	cmp.w	sl, #1
 800c65e:	d103      	bne.n	800c668 <_strtod_l+0xa20>
 800c660:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c662:	2b00      	cmp	r3, #0
 800c664:	f43f ada5 	beq.w	800c1b2 <_strtod_l+0x56a>
 800c668:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800c718 <_strtod_l+0xad0>
 800c66c:	4f35      	ldr	r7, [pc, #212]	@ (800c744 <_strtod_l+0xafc>)
 800c66e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800c672:	2600      	movs	r6, #0
 800c674:	e7b1      	b.n	800c5da <_strtod_l+0x992>
 800c676:	4f34      	ldr	r7, [pc, #208]	@ (800c748 <_strtod_l+0xb00>)
 800c678:	2600      	movs	r6, #0
 800c67a:	e7aa      	b.n	800c5d2 <_strtod_l+0x98a>
 800c67c:	4b32      	ldr	r3, [pc, #200]	@ (800c748 <_strtod_l+0xb00>)
 800c67e:	4630      	mov	r0, r6
 800c680:	4639      	mov	r1, r7
 800c682:	2200      	movs	r2, #0
 800c684:	f7f3 ffd8 	bl	8000638 <__aeabi_dmul>
 800c688:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c68a:	4606      	mov	r6, r0
 800c68c:	460f      	mov	r7, r1
 800c68e:	2b00      	cmp	r3, #0
 800c690:	d09f      	beq.n	800c5d2 <_strtod_l+0x98a>
 800c692:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800c696:	e7a0      	b.n	800c5da <_strtod_l+0x992>
 800c698:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800c720 <_strtod_l+0xad8>
 800c69c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800c6a0:	ec57 6b17 	vmov	r6, r7, d7
 800c6a4:	e799      	b.n	800c5da <_strtod_l+0x992>
 800c6a6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800c6aa:	9b08      	ldr	r3, [sp, #32]
 800c6ac:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800c6b0:	2b00      	cmp	r3, #0
 800c6b2:	d1c1      	bne.n	800c638 <_strtod_l+0x9f0>
 800c6b4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c6b8:	0d1b      	lsrs	r3, r3, #20
 800c6ba:	051b      	lsls	r3, r3, #20
 800c6bc:	429d      	cmp	r5, r3
 800c6be:	d1bb      	bne.n	800c638 <_strtod_l+0x9f0>
 800c6c0:	4630      	mov	r0, r6
 800c6c2:	4639      	mov	r1, r7
 800c6c4:	f7f4 fb18 	bl	8000cf8 <__aeabi_d2lz>
 800c6c8:	f7f3 ff88 	bl	80005dc <__aeabi_l2d>
 800c6cc:	4602      	mov	r2, r0
 800c6ce:	460b      	mov	r3, r1
 800c6d0:	4630      	mov	r0, r6
 800c6d2:	4639      	mov	r1, r7
 800c6d4:	f7f3 fdf8 	bl	80002c8 <__aeabi_dsub>
 800c6d8:	460b      	mov	r3, r1
 800c6da:	4602      	mov	r2, r0
 800c6dc:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800c6e0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800c6e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c6e6:	ea46 060a 	orr.w	r6, r6, sl
 800c6ea:	431e      	orrs	r6, r3
 800c6ec:	d06f      	beq.n	800c7ce <_strtod_l+0xb86>
 800c6ee:	a30e      	add	r3, pc, #56	@ (adr r3, 800c728 <_strtod_l+0xae0>)
 800c6f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6f4:	f7f4 fa12 	bl	8000b1c <__aeabi_dcmplt>
 800c6f8:	2800      	cmp	r0, #0
 800c6fa:	f47f accf 	bne.w	800c09c <_strtod_l+0x454>
 800c6fe:	a30c      	add	r3, pc, #48	@ (adr r3, 800c730 <_strtod_l+0xae8>)
 800c700:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c704:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c708:	f7f4 fa26 	bl	8000b58 <__aeabi_dcmpgt>
 800c70c:	2800      	cmp	r0, #0
 800c70e:	d093      	beq.n	800c638 <_strtod_l+0x9f0>
 800c710:	e4c4      	b.n	800c09c <_strtod_l+0x454>
 800c712:	bf00      	nop
 800c714:	f3af 8000 	nop.w
 800c718:	00000000 	.word	0x00000000
 800c71c:	bff00000 	.word	0xbff00000
 800c720:	00000000 	.word	0x00000000
 800c724:	3ff00000 	.word	0x3ff00000
 800c728:	94a03595 	.word	0x94a03595
 800c72c:	3fdfffff 	.word	0x3fdfffff
 800c730:	35afe535 	.word	0x35afe535
 800c734:	3fe00000 	.word	0x3fe00000
 800c738:	000fffff 	.word	0x000fffff
 800c73c:	7ff00000 	.word	0x7ff00000
 800c740:	7fefffff 	.word	0x7fefffff
 800c744:	3ff00000 	.word	0x3ff00000
 800c748:	3fe00000 	.word	0x3fe00000
 800c74c:	7fe00000 	.word	0x7fe00000
 800c750:	7c9fffff 	.word	0x7c9fffff
 800c754:	9b08      	ldr	r3, [sp, #32]
 800c756:	b323      	cbz	r3, 800c7a2 <_strtod_l+0xb5a>
 800c758:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800c75c:	d821      	bhi.n	800c7a2 <_strtod_l+0xb5a>
 800c75e:	a328      	add	r3, pc, #160	@ (adr r3, 800c800 <_strtod_l+0xbb8>)
 800c760:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c764:	4630      	mov	r0, r6
 800c766:	4639      	mov	r1, r7
 800c768:	f7f4 f9e2 	bl	8000b30 <__aeabi_dcmple>
 800c76c:	b1a0      	cbz	r0, 800c798 <_strtod_l+0xb50>
 800c76e:	4639      	mov	r1, r7
 800c770:	4630      	mov	r0, r6
 800c772:	f7f4 fa39 	bl	8000be8 <__aeabi_d2uiz>
 800c776:	2801      	cmp	r0, #1
 800c778:	bf38      	it	cc
 800c77a:	2001      	movcc	r0, #1
 800c77c:	f7f3 fee2 	bl	8000544 <__aeabi_ui2d>
 800c780:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c782:	4606      	mov	r6, r0
 800c784:	460f      	mov	r7, r1
 800c786:	b9fb      	cbnz	r3, 800c7c8 <_strtod_l+0xb80>
 800c788:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800c78c:	9014      	str	r0, [sp, #80]	@ 0x50
 800c78e:	9315      	str	r3, [sp, #84]	@ 0x54
 800c790:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800c794:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800c798:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800c79a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800c79e:	1b5b      	subs	r3, r3, r5
 800c7a0:	9311      	str	r3, [sp, #68]	@ 0x44
 800c7a2:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800c7a6:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800c7aa:	f7ff f8ef 	bl	800b98c <__ulp>
 800c7ae:	4650      	mov	r0, sl
 800c7b0:	ec53 2b10 	vmov	r2, r3, d0
 800c7b4:	4659      	mov	r1, fp
 800c7b6:	f7f3 ff3f 	bl	8000638 <__aeabi_dmul>
 800c7ba:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800c7be:	f7f3 fd85 	bl	80002cc <__adddf3>
 800c7c2:	4682      	mov	sl, r0
 800c7c4:	468b      	mov	fp, r1
 800c7c6:	e770      	b.n	800c6aa <_strtod_l+0xa62>
 800c7c8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800c7cc:	e7e0      	b.n	800c790 <_strtod_l+0xb48>
 800c7ce:	a30e      	add	r3, pc, #56	@ (adr r3, 800c808 <_strtod_l+0xbc0>)
 800c7d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7d4:	f7f4 f9a2 	bl	8000b1c <__aeabi_dcmplt>
 800c7d8:	e798      	b.n	800c70c <_strtod_l+0xac4>
 800c7da:	2300      	movs	r3, #0
 800c7dc:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c7de:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800c7e0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c7e2:	6013      	str	r3, [r2, #0]
 800c7e4:	f7ff ba6d 	b.w	800bcc2 <_strtod_l+0x7a>
 800c7e8:	2a65      	cmp	r2, #101	@ 0x65
 800c7ea:	f43f ab66 	beq.w	800beba <_strtod_l+0x272>
 800c7ee:	2a45      	cmp	r2, #69	@ 0x45
 800c7f0:	f43f ab63 	beq.w	800beba <_strtod_l+0x272>
 800c7f4:	2301      	movs	r3, #1
 800c7f6:	f7ff bb9e 	b.w	800bf36 <_strtod_l+0x2ee>
 800c7fa:	bf00      	nop
 800c7fc:	f3af 8000 	nop.w
 800c800:	ffc00000 	.word	0xffc00000
 800c804:	41dfffff 	.word	0x41dfffff
 800c808:	94a03595 	.word	0x94a03595
 800c80c:	3fcfffff 	.word	0x3fcfffff

0800c810 <_strtod_r>:
 800c810:	4b01      	ldr	r3, [pc, #4]	@ (800c818 <_strtod_r+0x8>)
 800c812:	f7ff ba19 	b.w	800bc48 <_strtod_l>
 800c816:	bf00      	nop
 800c818:	200000a0 	.word	0x200000a0

0800c81c <_strtol_l.constprop.0>:
 800c81c:	2b24      	cmp	r3, #36	@ 0x24
 800c81e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c822:	4686      	mov	lr, r0
 800c824:	4690      	mov	r8, r2
 800c826:	d801      	bhi.n	800c82c <_strtol_l.constprop.0+0x10>
 800c828:	2b01      	cmp	r3, #1
 800c82a:	d106      	bne.n	800c83a <_strtol_l.constprop.0+0x1e>
 800c82c:	f7fd fe58 	bl	800a4e0 <__errno>
 800c830:	2316      	movs	r3, #22
 800c832:	6003      	str	r3, [r0, #0]
 800c834:	2000      	movs	r0, #0
 800c836:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c83a:	4834      	ldr	r0, [pc, #208]	@ (800c90c <_strtol_l.constprop.0+0xf0>)
 800c83c:	460d      	mov	r5, r1
 800c83e:	462a      	mov	r2, r5
 800c840:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c844:	5d06      	ldrb	r6, [r0, r4]
 800c846:	f016 0608 	ands.w	r6, r6, #8
 800c84a:	d1f8      	bne.n	800c83e <_strtol_l.constprop.0+0x22>
 800c84c:	2c2d      	cmp	r4, #45	@ 0x2d
 800c84e:	d12d      	bne.n	800c8ac <_strtol_l.constprop.0+0x90>
 800c850:	782c      	ldrb	r4, [r5, #0]
 800c852:	2601      	movs	r6, #1
 800c854:	1c95      	adds	r5, r2, #2
 800c856:	f033 0210 	bics.w	r2, r3, #16
 800c85a:	d109      	bne.n	800c870 <_strtol_l.constprop.0+0x54>
 800c85c:	2c30      	cmp	r4, #48	@ 0x30
 800c85e:	d12a      	bne.n	800c8b6 <_strtol_l.constprop.0+0x9a>
 800c860:	782a      	ldrb	r2, [r5, #0]
 800c862:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800c866:	2a58      	cmp	r2, #88	@ 0x58
 800c868:	d125      	bne.n	800c8b6 <_strtol_l.constprop.0+0x9a>
 800c86a:	786c      	ldrb	r4, [r5, #1]
 800c86c:	2310      	movs	r3, #16
 800c86e:	3502      	adds	r5, #2
 800c870:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800c874:	f10c 3cff 	add.w	ip, ip, #4294967295
 800c878:	2200      	movs	r2, #0
 800c87a:	fbbc f9f3 	udiv	r9, ip, r3
 800c87e:	4610      	mov	r0, r2
 800c880:	fb03 ca19 	mls	sl, r3, r9, ip
 800c884:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800c888:	2f09      	cmp	r7, #9
 800c88a:	d81b      	bhi.n	800c8c4 <_strtol_l.constprop.0+0xa8>
 800c88c:	463c      	mov	r4, r7
 800c88e:	42a3      	cmp	r3, r4
 800c890:	dd27      	ble.n	800c8e2 <_strtol_l.constprop.0+0xc6>
 800c892:	1c57      	adds	r7, r2, #1
 800c894:	d007      	beq.n	800c8a6 <_strtol_l.constprop.0+0x8a>
 800c896:	4581      	cmp	r9, r0
 800c898:	d320      	bcc.n	800c8dc <_strtol_l.constprop.0+0xc0>
 800c89a:	d101      	bne.n	800c8a0 <_strtol_l.constprop.0+0x84>
 800c89c:	45a2      	cmp	sl, r4
 800c89e:	db1d      	blt.n	800c8dc <_strtol_l.constprop.0+0xc0>
 800c8a0:	fb00 4003 	mla	r0, r0, r3, r4
 800c8a4:	2201      	movs	r2, #1
 800c8a6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c8aa:	e7eb      	b.n	800c884 <_strtol_l.constprop.0+0x68>
 800c8ac:	2c2b      	cmp	r4, #43	@ 0x2b
 800c8ae:	bf04      	itt	eq
 800c8b0:	782c      	ldrbeq	r4, [r5, #0]
 800c8b2:	1c95      	addeq	r5, r2, #2
 800c8b4:	e7cf      	b.n	800c856 <_strtol_l.constprop.0+0x3a>
 800c8b6:	2b00      	cmp	r3, #0
 800c8b8:	d1da      	bne.n	800c870 <_strtol_l.constprop.0+0x54>
 800c8ba:	2c30      	cmp	r4, #48	@ 0x30
 800c8bc:	bf0c      	ite	eq
 800c8be:	2308      	moveq	r3, #8
 800c8c0:	230a      	movne	r3, #10
 800c8c2:	e7d5      	b.n	800c870 <_strtol_l.constprop.0+0x54>
 800c8c4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800c8c8:	2f19      	cmp	r7, #25
 800c8ca:	d801      	bhi.n	800c8d0 <_strtol_l.constprop.0+0xb4>
 800c8cc:	3c37      	subs	r4, #55	@ 0x37
 800c8ce:	e7de      	b.n	800c88e <_strtol_l.constprop.0+0x72>
 800c8d0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800c8d4:	2f19      	cmp	r7, #25
 800c8d6:	d804      	bhi.n	800c8e2 <_strtol_l.constprop.0+0xc6>
 800c8d8:	3c57      	subs	r4, #87	@ 0x57
 800c8da:	e7d8      	b.n	800c88e <_strtol_l.constprop.0+0x72>
 800c8dc:	f04f 32ff 	mov.w	r2, #4294967295
 800c8e0:	e7e1      	b.n	800c8a6 <_strtol_l.constprop.0+0x8a>
 800c8e2:	1c53      	adds	r3, r2, #1
 800c8e4:	d108      	bne.n	800c8f8 <_strtol_l.constprop.0+0xdc>
 800c8e6:	2322      	movs	r3, #34	@ 0x22
 800c8e8:	f8ce 3000 	str.w	r3, [lr]
 800c8ec:	4660      	mov	r0, ip
 800c8ee:	f1b8 0f00 	cmp.w	r8, #0
 800c8f2:	d0a0      	beq.n	800c836 <_strtol_l.constprop.0+0x1a>
 800c8f4:	1e69      	subs	r1, r5, #1
 800c8f6:	e006      	b.n	800c906 <_strtol_l.constprop.0+0xea>
 800c8f8:	b106      	cbz	r6, 800c8fc <_strtol_l.constprop.0+0xe0>
 800c8fa:	4240      	negs	r0, r0
 800c8fc:	f1b8 0f00 	cmp.w	r8, #0
 800c900:	d099      	beq.n	800c836 <_strtol_l.constprop.0+0x1a>
 800c902:	2a00      	cmp	r2, #0
 800c904:	d1f6      	bne.n	800c8f4 <_strtol_l.constprop.0+0xd8>
 800c906:	f8c8 1000 	str.w	r1, [r8]
 800c90a:	e794      	b.n	800c836 <_strtol_l.constprop.0+0x1a>
 800c90c:	080115a9 	.word	0x080115a9

0800c910 <_strtol_r>:
 800c910:	f7ff bf84 	b.w	800c81c <_strtol_l.constprop.0>

0800c914 <__ssputs_r>:
 800c914:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c918:	688e      	ldr	r6, [r1, #8]
 800c91a:	461f      	mov	r7, r3
 800c91c:	42be      	cmp	r6, r7
 800c91e:	680b      	ldr	r3, [r1, #0]
 800c920:	4682      	mov	sl, r0
 800c922:	460c      	mov	r4, r1
 800c924:	4690      	mov	r8, r2
 800c926:	d82d      	bhi.n	800c984 <__ssputs_r+0x70>
 800c928:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c92c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800c930:	d026      	beq.n	800c980 <__ssputs_r+0x6c>
 800c932:	6965      	ldr	r5, [r4, #20]
 800c934:	6909      	ldr	r1, [r1, #16]
 800c936:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c93a:	eba3 0901 	sub.w	r9, r3, r1
 800c93e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c942:	1c7b      	adds	r3, r7, #1
 800c944:	444b      	add	r3, r9
 800c946:	106d      	asrs	r5, r5, #1
 800c948:	429d      	cmp	r5, r3
 800c94a:	bf38      	it	cc
 800c94c:	461d      	movcc	r5, r3
 800c94e:	0553      	lsls	r3, r2, #21
 800c950:	d527      	bpl.n	800c9a2 <__ssputs_r+0x8e>
 800c952:	4629      	mov	r1, r5
 800c954:	f7fc fc40 	bl	80091d8 <_malloc_r>
 800c958:	4606      	mov	r6, r0
 800c95a:	b360      	cbz	r0, 800c9b6 <__ssputs_r+0xa2>
 800c95c:	6921      	ldr	r1, [r4, #16]
 800c95e:	464a      	mov	r2, r9
 800c960:	f7fd fdf3 	bl	800a54a <memcpy>
 800c964:	89a3      	ldrh	r3, [r4, #12]
 800c966:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800c96a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c96e:	81a3      	strh	r3, [r4, #12]
 800c970:	6126      	str	r6, [r4, #16]
 800c972:	6165      	str	r5, [r4, #20]
 800c974:	444e      	add	r6, r9
 800c976:	eba5 0509 	sub.w	r5, r5, r9
 800c97a:	6026      	str	r6, [r4, #0]
 800c97c:	60a5      	str	r5, [r4, #8]
 800c97e:	463e      	mov	r6, r7
 800c980:	42be      	cmp	r6, r7
 800c982:	d900      	bls.n	800c986 <__ssputs_r+0x72>
 800c984:	463e      	mov	r6, r7
 800c986:	6820      	ldr	r0, [r4, #0]
 800c988:	4632      	mov	r2, r6
 800c98a:	4641      	mov	r1, r8
 800c98c:	f000 fb6a 	bl	800d064 <memmove>
 800c990:	68a3      	ldr	r3, [r4, #8]
 800c992:	1b9b      	subs	r3, r3, r6
 800c994:	60a3      	str	r3, [r4, #8]
 800c996:	6823      	ldr	r3, [r4, #0]
 800c998:	4433      	add	r3, r6
 800c99a:	6023      	str	r3, [r4, #0]
 800c99c:	2000      	movs	r0, #0
 800c99e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c9a2:	462a      	mov	r2, r5
 800c9a4:	f000 ff31 	bl	800d80a <_realloc_r>
 800c9a8:	4606      	mov	r6, r0
 800c9aa:	2800      	cmp	r0, #0
 800c9ac:	d1e0      	bne.n	800c970 <__ssputs_r+0x5c>
 800c9ae:	6921      	ldr	r1, [r4, #16]
 800c9b0:	4650      	mov	r0, sl
 800c9b2:	f7fe fc2d 	bl	800b210 <_free_r>
 800c9b6:	230c      	movs	r3, #12
 800c9b8:	f8ca 3000 	str.w	r3, [sl]
 800c9bc:	89a3      	ldrh	r3, [r4, #12]
 800c9be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c9c2:	81a3      	strh	r3, [r4, #12]
 800c9c4:	f04f 30ff 	mov.w	r0, #4294967295
 800c9c8:	e7e9      	b.n	800c99e <__ssputs_r+0x8a>
	...

0800c9cc <_svfiprintf_r>:
 800c9cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9d0:	4698      	mov	r8, r3
 800c9d2:	898b      	ldrh	r3, [r1, #12]
 800c9d4:	061b      	lsls	r3, r3, #24
 800c9d6:	b09d      	sub	sp, #116	@ 0x74
 800c9d8:	4607      	mov	r7, r0
 800c9da:	460d      	mov	r5, r1
 800c9dc:	4614      	mov	r4, r2
 800c9de:	d510      	bpl.n	800ca02 <_svfiprintf_r+0x36>
 800c9e0:	690b      	ldr	r3, [r1, #16]
 800c9e2:	b973      	cbnz	r3, 800ca02 <_svfiprintf_r+0x36>
 800c9e4:	2140      	movs	r1, #64	@ 0x40
 800c9e6:	f7fc fbf7 	bl	80091d8 <_malloc_r>
 800c9ea:	6028      	str	r0, [r5, #0]
 800c9ec:	6128      	str	r0, [r5, #16]
 800c9ee:	b930      	cbnz	r0, 800c9fe <_svfiprintf_r+0x32>
 800c9f0:	230c      	movs	r3, #12
 800c9f2:	603b      	str	r3, [r7, #0]
 800c9f4:	f04f 30ff 	mov.w	r0, #4294967295
 800c9f8:	b01d      	add	sp, #116	@ 0x74
 800c9fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c9fe:	2340      	movs	r3, #64	@ 0x40
 800ca00:	616b      	str	r3, [r5, #20]
 800ca02:	2300      	movs	r3, #0
 800ca04:	9309      	str	r3, [sp, #36]	@ 0x24
 800ca06:	2320      	movs	r3, #32
 800ca08:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ca0c:	f8cd 800c 	str.w	r8, [sp, #12]
 800ca10:	2330      	movs	r3, #48	@ 0x30
 800ca12:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800cbb0 <_svfiprintf_r+0x1e4>
 800ca16:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ca1a:	f04f 0901 	mov.w	r9, #1
 800ca1e:	4623      	mov	r3, r4
 800ca20:	469a      	mov	sl, r3
 800ca22:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ca26:	b10a      	cbz	r2, 800ca2c <_svfiprintf_r+0x60>
 800ca28:	2a25      	cmp	r2, #37	@ 0x25
 800ca2a:	d1f9      	bne.n	800ca20 <_svfiprintf_r+0x54>
 800ca2c:	ebba 0b04 	subs.w	fp, sl, r4
 800ca30:	d00b      	beq.n	800ca4a <_svfiprintf_r+0x7e>
 800ca32:	465b      	mov	r3, fp
 800ca34:	4622      	mov	r2, r4
 800ca36:	4629      	mov	r1, r5
 800ca38:	4638      	mov	r0, r7
 800ca3a:	f7ff ff6b 	bl	800c914 <__ssputs_r>
 800ca3e:	3001      	adds	r0, #1
 800ca40:	f000 80a7 	beq.w	800cb92 <_svfiprintf_r+0x1c6>
 800ca44:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ca46:	445a      	add	r2, fp
 800ca48:	9209      	str	r2, [sp, #36]	@ 0x24
 800ca4a:	f89a 3000 	ldrb.w	r3, [sl]
 800ca4e:	2b00      	cmp	r3, #0
 800ca50:	f000 809f 	beq.w	800cb92 <_svfiprintf_r+0x1c6>
 800ca54:	2300      	movs	r3, #0
 800ca56:	f04f 32ff 	mov.w	r2, #4294967295
 800ca5a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ca5e:	f10a 0a01 	add.w	sl, sl, #1
 800ca62:	9304      	str	r3, [sp, #16]
 800ca64:	9307      	str	r3, [sp, #28]
 800ca66:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ca6a:	931a      	str	r3, [sp, #104]	@ 0x68
 800ca6c:	4654      	mov	r4, sl
 800ca6e:	2205      	movs	r2, #5
 800ca70:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ca74:	484e      	ldr	r0, [pc, #312]	@ (800cbb0 <_svfiprintf_r+0x1e4>)
 800ca76:	f7f3 fbcb 	bl	8000210 <memchr>
 800ca7a:	9a04      	ldr	r2, [sp, #16]
 800ca7c:	b9d8      	cbnz	r0, 800cab6 <_svfiprintf_r+0xea>
 800ca7e:	06d0      	lsls	r0, r2, #27
 800ca80:	bf44      	itt	mi
 800ca82:	2320      	movmi	r3, #32
 800ca84:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ca88:	0711      	lsls	r1, r2, #28
 800ca8a:	bf44      	itt	mi
 800ca8c:	232b      	movmi	r3, #43	@ 0x2b
 800ca8e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ca92:	f89a 3000 	ldrb.w	r3, [sl]
 800ca96:	2b2a      	cmp	r3, #42	@ 0x2a
 800ca98:	d015      	beq.n	800cac6 <_svfiprintf_r+0xfa>
 800ca9a:	9a07      	ldr	r2, [sp, #28]
 800ca9c:	4654      	mov	r4, sl
 800ca9e:	2000      	movs	r0, #0
 800caa0:	f04f 0c0a 	mov.w	ip, #10
 800caa4:	4621      	mov	r1, r4
 800caa6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800caaa:	3b30      	subs	r3, #48	@ 0x30
 800caac:	2b09      	cmp	r3, #9
 800caae:	d94b      	bls.n	800cb48 <_svfiprintf_r+0x17c>
 800cab0:	b1b0      	cbz	r0, 800cae0 <_svfiprintf_r+0x114>
 800cab2:	9207      	str	r2, [sp, #28]
 800cab4:	e014      	b.n	800cae0 <_svfiprintf_r+0x114>
 800cab6:	eba0 0308 	sub.w	r3, r0, r8
 800caba:	fa09 f303 	lsl.w	r3, r9, r3
 800cabe:	4313      	orrs	r3, r2
 800cac0:	9304      	str	r3, [sp, #16]
 800cac2:	46a2      	mov	sl, r4
 800cac4:	e7d2      	b.n	800ca6c <_svfiprintf_r+0xa0>
 800cac6:	9b03      	ldr	r3, [sp, #12]
 800cac8:	1d19      	adds	r1, r3, #4
 800caca:	681b      	ldr	r3, [r3, #0]
 800cacc:	9103      	str	r1, [sp, #12]
 800cace:	2b00      	cmp	r3, #0
 800cad0:	bfbb      	ittet	lt
 800cad2:	425b      	neglt	r3, r3
 800cad4:	f042 0202 	orrlt.w	r2, r2, #2
 800cad8:	9307      	strge	r3, [sp, #28]
 800cada:	9307      	strlt	r3, [sp, #28]
 800cadc:	bfb8      	it	lt
 800cade:	9204      	strlt	r2, [sp, #16]
 800cae0:	7823      	ldrb	r3, [r4, #0]
 800cae2:	2b2e      	cmp	r3, #46	@ 0x2e
 800cae4:	d10a      	bne.n	800cafc <_svfiprintf_r+0x130>
 800cae6:	7863      	ldrb	r3, [r4, #1]
 800cae8:	2b2a      	cmp	r3, #42	@ 0x2a
 800caea:	d132      	bne.n	800cb52 <_svfiprintf_r+0x186>
 800caec:	9b03      	ldr	r3, [sp, #12]
 800caee:	1d1a      	adds	r2, r3, #4
 800caf0:	681b      	ldr	r3, [r3, #0]
 800caf2:	9203      	str	r2, [sp, #12]
 800caf4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800caf8:	3402      	adds	r4, #2
 800cafa:	9305      	str	r3, [sp, #20]
 800cafc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800cbc0 <_svfiprintf_r+0x1f4>
 800cb00:	7821      	ldrb	r1, [r4, #0]
 800cb02:	2203      	movs	r2, #3
 800cb04:	4650      	mov	r0, sl
 800cb06:	f7f3 fb83 	bl	8000210 <memchr>
 800cb0a:	b138      	cbz	r0, 800cb1c <_svfiprintf_r+0x150>
 800cb0c:	9b04      	ldr	r3, [sp, #16]
 800cb0e:	eba0 000a 	sub.w	r0, r0, sl
 800cb12:	2240      	movs	r2, #64	@ 0x40
 800cb14:	4082      	lsls	r2, r0
 800cb16:	4313      	orrs	r3, r2
 800cb18:	3401      	adds	r4, #1
 800cb1a:	9304      	str	r3, [sp, #16]
 800cb1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cb20:	4824      	ldr	r0, [pc, #144]	@ (800cbb4 <_svfiprintf_r+0x1e8>)
 800cb22:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800cb26:	2206      	movs	r2, #6
 800cb28:	f7f3 fb72 	bl	8000210 <memchr>
 800cb2c:	2800      	cmp	r0, #0
 800cb2e:	d036      	beq.n	800cb9e <_svfiprintf_r+0x1d2>
 800cb30:	4b21      	ldr	r3, [pc, #132]	@ (800cbb8 <_svfiprintf_r+0x1ec>)
 800cb32:	bb1b      	cbnz	r3, 800cb7c <_svfiprintf_r+0x1b0>
 800cb34:	9b03      	ldr	r3, [sp, #12]
 800cb36:	3307      	adds	r3, #7
 800cb38:	f023 0307 	bic.w	r3, r3, #7
 800cb3c:	3308      	adds	r3, #8
 800cb3e:	9303      	str	r3, [sp, #12]
 800cb40:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cb42:	4433      	add	r3, r6
 800cb44:	9309      	str	r3, [sp, #36]	@ 0x24
 800cb46:	e76a      	b.n	800ca1e <_svfiprintf_r+0x52>
 800cb48:	fb0c 3202 	mla	r2, ip, r2, r3
 800cb4c:	460c      	mov	r4, r1
 800cb4e:	2001      	movs	r0, #1
 800cb50:	e7a8      	b.n	800caa4 <_svfiprintf_r+0xd8>
 800cb52:	2300      	movs	r3, #0
 800cb54:	3401      	adds	r4, #1
 800cb56:	9305      	str	r3, [sp, #20]
 800cb58:	4619      	mov	r1, r3
 800cb5a:	f04f 0c0a 	mov.w	ip, #10
 800cb5e:	4620      	mov	r0, r4
 800cb60:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cb64:	3a30      	subs	r2, #48	@ 0x30
 800cb66:	2a09      	cmp	r2, #9
 800cb68:	d903      	bls.n	800cb72 <_svfiprintf_r+0x1a6>
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	d0c6      	beq.n	800cafc <_svfiprintf_r+0x130>
 800cb6e:	9105      	str	r1, [sp, #20]
 800cb70:	e7c4      	b.n	800cafc <_svfiprintf_r+0x130>
 800cb72:	fb0c 2101 	mla	r1, ip, r1, r2
 800cb76:	4604      	mov	r4, r0
 800cb78:	2301      	movs	r3, #1
 800cb7a:	e7f0      	b.n	800cb5e <_svfiprintf_r+0x192>
 800cb7c:	ab03      	add	r3, sp, #12
 800cb7e:	9300      	str	r3, [sp, #0]
 800cb80:	462a      	mov	r2, r5
 800cb82:	4b0e      	ldr	r3, [pc, #56]	@ (800cbbc <_svfiprintf_r+0x1f0>)
 800cb84:	a904      	add	r1, sp, #16
 800cb86:	4638      	mov	r0, r7
 800cb88:	f7fc fc52 	bl	8009430 <_printf_float>
 800cb8c:	1c42      	adds	r2, r0, #1
 800cb8e:	4606      	mov	r6, r0
 800cb90:	d1d6      	bne.n	800cb40 <_svfiprintf_r+0x174>
 800cb92:	89ab      	ldrh	r3, [r5, #12]
 800cb94:	065b      	lsls	r3, r3, #25
 800cb96:	f53f af2d 	bmi.w	800c9f4 <_svfiprintf_r+0x28>
 800cb9a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800cb9c:	e72c      	b.n	800c9f8 <_svfiprintf_r+0x2c>
 800cb9e:	ab03      	add	r3, sp, #12
 800cba0:	9300      	str	r3, [sp, #0]
 800cba2:	462a      	mov	r2, r5
 800cba4:	4b05      	ldr	r3, [pc, #20]	@ (800cbbc <_svfiprintf_r+0x1f0>)
 800cba6:	a904      	add	r1, sp, #16
 800cba8:	4638      	mov	r0, r7
 800cbaa:	f7fc fed9 	bl	8009960 <_printf_i>
 800cbae:	e7ed      	b.n	800cb8c <_svfiprintf_r+0x1c0>
 800cbb0:	080116a9 	.word	0x080116a9
 800cbb4:	080116b3 	.word	0x080116b3
 800cbb8:	08009431 	.word	0x08009431
 800cbbc:	0800c915 	.word	0x0800c915
 800cbc0:	080116af 	.word	0x080116af

0800cbc4 <__sfputc_r>:
 800cbc4:	6893      	ldr	r3, [r2, #8]
 800cbc6:	3b01      	subs	r3, #1
 800cbc8:	2b00      	cmp	r3, #0
 800cbca:	b410      	push	{r4}
 800cbcc:	6093      	str	r3, [r2, #8]
 800cbce:	da08      	bge.n	800cbe2 <__sfputc_r+0x1e>
 800cbd0:	6994      	ldr	r4, [r2, #24]
 800cbd2:	42a3      	cmp	r3, r4
 800cbd4:	db01      	blt.n	800cbda <__sfputc_r+0x16>
 800cbd6:	290a      	cmp	r1, #10
 800cbd8:	d103      	bne.n	800cbe2 <__sfputc_r+0x1e>
 800cbda:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cbde:	f7fd bb88 	b.w	800a2f2 <__swbuf_r>
 800cbe2:	6813      	ldr	r3, [r2, #0]
 800cbe4:	1c58      	adds	r0, r3, #1
 800cbe6:	6010      	str	r0, [r2, #0]
 800cbe8:	7019      	strb	r1, [r3, #0]
 800cbea:	4608      	mov	r0, r1
 800cbec:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cbf0:	4770      	bx	lr

0800cbf2 <__sfputs_r>:
 800cbf2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cbf4:	4606      	mov	r6, r0
 800cbf6:	460f      	mov	r7, r1
 800cbf8:	4614      	mov	r4, r2
 800cbfa:	18d5      	adds	r5, r2, r3
 800cbfc:	42ac      	cmp	r4, r5
 800cbfe:	d101      	bne.n	800cc04 <__sfputs_r+0x12>
 800cc00:	2000      	movs	r0, #0
 800cc02:	e007      	b.n	800cc14 <__sfputs_r+0x22>
 800cc04:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cc08:	463a      	mov	r2, r7
 800cc0a:	4630      	mov	r0, r6
 800cc0c:	f7ff ffda 	bl	800cbc4 <__sfputc_r>
 800cc10:	1c43      	adds	r3, r0, #1
 800cc12:	d1f3      	bne.n	800cbfc <__sfputs_r+0xa>
 800cc14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800cc18 <_vfiprintf_r>:
 800cc18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc1c:	460d      	mov	r5, r1
 800cc1e:	b09d      	sub	sp, #116	@ 0x74
 800cc20:	4614      	mov	r4, r2
 800cc22:	4698      	mov	r8, r3
 800cc24:	4606      	mov	r6, r0
 800cc26:	b118      	cbz	r0, 800cc30 <_vfiprintf_r+0x18>
 800cc28:	6a03      	ldr	r3, [r0, #32]
 800cc2a:	b90b      	cbnz	r3, 800cc30 <_vfiprintf_r+0x18>
 800cc2c:	f7fd fa58 	bl	800a0e0 <__sinit>
 800cc30:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cc32:	07d9      	lsls	r1, r3, #31
 800cc34:	d405      	bmi.n	800cc42 <_vfiprintf_r+0x2a>
 800cc36:	89ab      	ldrh	r3, [r5, #12]
 800cc38:	059a      	lsls	r2, r3, #22
 800cc3a:	d402      	bmi.n	800cc42 <_vfiprintf_r+0x2a>
 800cc3c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cc3e:	f7fd fc7a 	bl	800a536 <__retarget_lock_acquire_recursive>
 800cc42:	89ab      	ldrh	r3, [r5, #12]
 800cc44:	071b      	lsls	r3, r3, #28
 800cc46:	d501      	bpl.n	800cc4c <_vfiprintf_r+0x34>
 800cc48:	692b      	ldr	r3, [r5, #16]
 800cc4a:	b99b      	cbnz	r3, 800cc74 <_vfiprintf_r+0x5c>
 800cc4c:	4629      	mov	r1, r5
 800cc4e:	4630      	mov	r0, r6
 800cc50:	f7fd fb8e 	bl	800a370 <__swsetup_r>
 800cc54:	b170      	cbz	r0, 800cc74 <_vfiprintf_r+0x5c>
 800cc56:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cc58:	07dc      	lsls	r4, r3, #31
 800cc5a:	d504      	bpl.n	800cc66 <_vfiprintf_r+0x4e>
 800cc5c:	f04f 30ff 	mov.w	r0, #4294967295
 800cc60:	b01d      	add	sp, #116	@ 0x74
 800cc62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc66:	89ab      	ldrh	r3, [r5, #12]
 800cc68:	0598      	lsls	r0, r3, #22
 800cc6a:	d4f7      	bmi.n	800cc5c <_vfiprintf_r+0x44>
 800cc6c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cc6e:	f7fd fc63 	bl	800a538 <__retarget_lock_release_recursive>
 800cc72:	e7f3      	b.n	800cc5c <_vfiprintf_r+0x44>
 800cc74:	2300      	movs	r3, #0
 800cc76:	9309      	str	r3, [sp, #36]	@ 0x24
 800cc78:	2320      	movs	r3, #32
 800cc7a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800cc7e:	f8cd 800c 	str.w	r8, [sp, #12]
 800cc82:	2330      	movs	r3, #48	@ 0x30
 800cc84:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800ce34 <_vfiprintf_r+0x21c>
 800cc88:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800cc8c:	f04f 0901 	mov.w	r9, #1
 800cc90:	4623      	mov	r3, r4
 800cc92:	469a      	mov	sl, r3
 800cc94:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cc98:	b10a      	cbz	r2, 800cc9e <_vfiprintf_r+0x86>
 800cc9a:	2a25      	cmp	r2, #37	@ 0x25
 800cc9c:	d1f9      	bne.n	800cc92 <_vfiprintf_r+0x7a>
 800cc9e:	ebba 0b04 	subs.w	fp, sl, r4
 800cca2:	d00b      	beq.n	800ccbc <_vfiprintf_r+0xa4>
 800cca4:	465b      	mov	r3, fp
 800cca6:	4622      	mov	r2, r4
 800cca8:	4629      	mov	r1, r5
 800ccaa:	4630      	mov	r0, r6
 800ccac:	f7ff ffa1 	bl	800cbf2 <__sfputs_r>
 800ccb0:	3001      	adds	r0, #1
 800ccb2:	f000 80a7 	beq.w	800ce04 <_vfiprintf_r+0x1ec>
 800ccb6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ccb8:	445a      	add	r2, fp
 800ccba:	9209      	str	r2, [sp, #36]	@ 0x24
 800ccbc:	f89a 3000 	ldrb.w	r3, [sl]
 800ccc0:	2b00      	cmp	r3, #0
 800ccc2:	f000 809f 	beq.w	800ce04 <_vfiprintf_r+0x1ec>
 800ccc6:	2300      	movs	r3, #0
 800ccc8:	f04f 32ff 	mov.w	r2, #4294967295
 800cccc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ccd0:	f10a 0a01 	add.w	sl, sl, #1
 800ccd4:	9304      	str	r3, [sp, #16]
 800ccd6:	9307      	str	r3, [sp, #28]
 800ccd8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ccdc:	931a      	str	r3, [sp, #104]	@ 0x68
 800ccde:	4654      	mov	r4, sl
 800cce0:	2205      	movs	r2, #5
 800cce2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cce6:	4853      	ldr	r0, [pc, #332]	@ (800ce34 <_vfiprintf_r+0x21c>)
 800cce8:	f7f3 fa92 	bl	8000210 <memchr>
 800ccec:	9a04      	ldr	r2, [sp, #16]
 800ccee:	b9d8      	cbnz	r0, 800cd28 <_vfiprintf_r+0x110>
 800ccf0:	06d1      	lsls	r1, r2, #27
 800ccf2:	bf44      	itt	mi
 800ccf4:	2320      	movmi	r3, #32
 800ccf6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ccfa:	0713      	lsls	r3, r2, #28
 800ccfc:	bf44      	itt	mi
 800ccfe:	232b      	movmi	r3, #43	@ 0x2b
 800cd00:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cd04:	f89a 3000 	ldrb.w	r3, [sl]
 800cd08:	2b2a      	cmp	r3, #42	@ 0x2a
 800cd0a:	d015      	beq.n	800cd38 <_vfiprintf_r+0x120>
 800cd0c:	9a07      	ldr	r2, [sp, #28]
 800cd0e:	4654      	mov	r4, sl
 800cd10:	2000      	movs	r0, #0
 800cd12:	f04f 0c0a 	mov.w	ip, #10
 800cd16:	4621      	mov	r1, r4
 800cd18:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cd1c:	3b30      	subs	r3, #48	@ 0x30
 800cd1e:	2b09      	cmp	r3, #9
 800cd20:	d94b      	bls.n	800cdba <_vfiprintf_r+0x1a2>
 800cd22:	b1b0      	cbz	r0, 800cd52 <_vfiprintf_r+0x13a>
 800cd24:	9207      	str	r2, [sp, #28]
 800cd26:	e014      	b.n	800cd52 <_vfiprintf_r+0x13a>
 800cd28:	eba0 0308 	sub.w	r3, r0, r8
 800cd2c:	fa09 f303 	lsl.w	r3, r9, r3
 800cd30:	4313      	orrs	r3, r2
 800cd32:	9304      	str	r3, [sp, #16]
 800cd34:	46a2      	mov	sl, r4
 800cd36:	e7d2      	b.n	800ccde <_vfiprintf_r+0xc6>
 800cd38:	9b03      	ldr	r3, [sp, #12]
 800cd3a:	1d19      	adds	r1, r3, #4
 800cd3c:	681b      	ldr	r3, [r3, #0]
 800cd3e:	9103      	str	r1, [sp, #12]
 800cd40:	2b00      	cmp	r3, #0
 800cd42:	bfbb      	ittet	lt
 800cd44:	425b      	neglt	r3, r3
 800cd46:	f042 0202 	orrlt.w	r2, r2, #2
 800cd4a:	9307      	strge	r3, [sp, #28]
 800cd4c:	9307      	strlt	r3, [sp, #28]
 800cd4e:	bfb8      	it	lt
 800cd50:	9204      	strlt	r2, [sp, #16]
 800cd52:	7823      	ldrb	r3, [r4, #0]
 800cd54:	2b2e      	cmp	r3, #46	@ 0x2e
 800cd56:	d10a      	bne.n	800cd6e <_vfiprintf_r+0x156>
 800cd58:	7863      	ldrb	r3, [r4, #1]
 800cd5a:	2b2a      	cmp	r3, #42	@ 0x2a
 800cd5c:	d132      	bne.n	800cdc4 <_vfiprintf_r+0x1ac>
 800cd5e:	9b03      	ldr	r3, [sp, #12]
 800cd60:	1d1a      	adds	r2, r3, #4
 800cd62:	681b      	ldr	r3, [r3, #0]
 800cd64:	9203      	str	r2, [sp, #12]
 800cd66:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800cd6a:	3402      	adds	r4, #2
 800cd6c:	9305      	str	r3, [sp, #20]
 800cd6e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800ce44 <_vfiprintf_r+0x22c>
 800cd72:	7821      	ldrb	r1, [r4, #0]
 800cd74:	2203      	movs	r2, #3
 800cd76:	4650      	mov	r0, sl
 800cd78:	f7f3 fa4a 	bl	8000210 <memchr>
 800cd7c:	b138      	cbz	r0, 800cd8e <_vfiprintf_r+0x176>
 800cd7e:	9b04      	ldr	r3, [sp, #16]
 800cd80:	eba0 000a 	sub.w	r0, r0, sl
 800cd84:	2240      	movs	r2, #64	@ 0x40
 800cd86:	4082      	lsls	r2, r0
 800cd88:	4313      	orrs	r3, r2
 800cd8a:	3401      	adds	r4, #1
 800cd8c:	9304      	str	r3, [sp, #16]
 800cd8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cd92:	4829      	ldr	r0, [pc, #164]	@ (800ce38 <_vfiprintf_r+0x220>)
 800cd94:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800cd98:	2206      	movs	r2, #6
 800cd9a:	f7f3 fa39 	bl	8000210 <memchr>
 800cd9e:	2800      	cmp	r0, #0
 800cda0:	d03f      	beq.n	800ce22 <_vfiprintf_r+0x20a>
 800cda2:	4b26      	ldr	r3, [pc, #152]	@ (800ce3c <_vfiprintf_r+0x224>)
 800cda4:	bb1b      	cbnz	r3, 800cdee <_vfiprintf_r+0x1d6>
 800cda6:	9b03      	ldr	r3, [sp, #12]
 800cda8:	3307      	adds	r3, #7
 800cdaa:	f023 0307 	bic.w	r3, r3, #7
 800cdae:	3308      	adds	r3, #8
 800cdb0:	9303      	str	r3, [sp, #12]
 800cdb2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cdb4:	443b      	add	r3, r7
 800cdb6:	9309      	str	r3, [sp, #36]	@ 0x24
 800cdb8:	e76a      	b.n	800cc90 <_vfiprintf_r+0x78>
 800cdba:	fb0c 3202 	mla	r2, ip, r2, r3
 800cdbe:	460c      	mov	r4, r1
 800cdc0:	2001      	movs	r0, #1
 800cdc2:	e7a8      	b.n	800cd16 <_vfiprintf_r+0xfe>
 800cdc4:	2300      	movs	r3, #0
 800cdc6:	3401      	adds	r4, #1
 800cdc8:	9305      	str	r3, [sp, #20]
 800cdca:	4619      	mov	r1, r3
 800cdcc:	f04f 0c0a 	mov.w	ip, #10
 800cdd0:	4620      	mov	r0, r4
 800cdd2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cdd6:	3a30      	subs	r2, #48	@ 0x30
 800cdd8:	2a09      	cmp	r2, #9
 800cdda:	d903      	bls.n	800cde4 <_vfiprintf_r+0x1cc>
 800cddc:	2b00      	cmp	r3, #0
 800cdde:	d0c6      	beq.n	800cd6e <_vfiprintf_r+0x156>
 800cde0:	9105      	str	r1, [sp, #20]
 800cde2:	e7c4      	b.n	800cd6e <_vfiprintf_r+0x156>
 800cde4:	fb0c 2101 	mla	r1, ip, r1, r2
 800cde8:	4604      	mov	r4, r0
 800cdea:	2301      	movs	r3, #1
 800cdec:	e7f0      	b.n	800cdd0 <_vfiprintf_r+0x1b8>
 800cdee:	ab03      	add	r3, sp, #12
 800cdf0:	9300      	str	r3, [sp, #0]
 800cdf2:	462a      	mov	r2, r5
 800cdf4:	4b12      	ldr	r3, [pc, #72]	@ (800ce40 <_vfiprintf_r+0x228>)
 800cdf6:	a904      	add	r1, sp, #16
 800cdf8:	4630      	mov	r0, r6
 800cdfa:	f7fc fb19 	bl	8009430 <_printf_float>
 800cdfe:	4607      	mov	r7, r0
 800ce00:	1c78      	adds	r0, r7, #1
 800ce02:	d1d6      	bne.n	800cdb2 <_vfiprintf_r+0x19a>
 800ce04:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ce06:	07d9      	lsls	r1, r3, #31
 800ce08:	d405      	bmi.n	800ce16 <_vfiprintf_r+0x1fe>
 800ce0a:	89ab      	ldrh	r3, [r5, #12]
 800ce0c:	059a      	lsls	r2, r3, #22
 800ce0e:	d402      	bmi.n	800ce16 <_vfiprintf_r+0x1fe>
 800ce10:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ce12:	f7fd fb91 	bl	800a538 <__retarget_lock_release_recursive>
 800ce16:	89ab      	ldrh	r3, [r5, #12]
 800ce18:	065b      	lsls	r3, r3, #25
 800ce1a:	f53f af1f 	bmi.w	800cc5c <_vfiprintf_r+0x44>
 800ce1e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ce20:	e71e      	b.n	800cc60 <_vfiprintf_r+0x48>
 800ce22:	ab03      	add	r3, sp, #12
 800ce24:	9300      	str	r3, [sp, #0]
 800ce26:	462a      	mov	r2, r5
 800ce28:	4b05      	ldr	r3, [pc, #20]	@ (800ce40 <_vfiprintf_r+0x228>)
 800ce2a:	a904      	add	r1, sp, #16
 800ce2c:	4630      	mov	r0, r6
 800ce2e:	f7fc fd97 	bl	8009960 <_printf_i>
 800ce32:	e7e4      	b.n	800cdfe <_vfiprintf_r+0x1e6>
 800ce34:	080116a9 	.word	0x080116a9
 800ce38:	080116b3 	.word	0x080116b3
 800ce3c:	08009431 	.word	0x08009431
 800ce40:	0800cbf3 	.word	0x0800cbf3
 800ce44:	080116af 	.word	0x080116af

0800ce48 <__sflush_r>:
 800ce48:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ce4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce50:	0716      	lsls	r6, r2, #28
 800ce52:	4605      	mov	r5, r0
 800ce54:	460c      	mov	r4, r1
 800ce56:	d454      	bmi.n	800cf02 <__sflush_r+0xba>
 800ce58:	684b      	ldr	r3, [r1, #4]
 800ce5a:	2b00      	cmp	r3, #0
 800ce5c:	dc02      	bgt.n	800ce64 <__sflush_r+0x1c>
 800ce5e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800ce60:	2b00      	cmp	r3, #0
 800ce62:	dd48      	ble.n	800cef6 <__sflush_r+0xae>
 800ce64:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ce66:	2e00      	cmp	r6, #0
 800ce68:	d045      	beq.n	800cef6 <__sflush_r+0xae>
 800ce6a:	2300      	movs	r3, #0
 800ce6c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800ce70:	682f      	ldr	r7, [r5, #0]
 800ce72:	6a21      	ldr	r1, [r4, #32]
 800ce74:	602b      	str	r3, [r5, #0]
 800ce76:	d030      	beq.n	800ceda <__sflush_r+0x92>
 800ce78:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ce7a:	89a3      	ldrh	r3, [r4, #12]
 800ce7c:	0759      	lsls	r1, r3, #29
 800ce7e:	d505      	bpl.n	800ce8c <__sflush_r+0x44>
 800ce80:	6863      	ldr	r3, [r4, #4]
 800ce82:	1ad2      	subs	r2, r2, r3
 800ce84:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ce86:	b10b      	cbz	r3, 800ce8c <__sflush_r+0x44>
 800ce88:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ce8a:	1ad2      	subs	r2, r2, r3
 800ce8c:	2300      	movs	r3, #0
 800ce8e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ce90:	6a21      	ldr	r1, [r4, #32]
 800ce92:	4628      	mov	r0, r5
 800ce94:	47b0      	blx	r6
 800ce96:	1c43      	adds	r3, r0, #1
 800ce98:	89a3      	ldrh	r3, [r4, #12]
 800ce9a:	d106      	bne.n	800ceaa <__sflush_r+0x62>
 800ce9c:	6829      	ldr	r1, [r5, #0]
 800ce9e:	291d      	cmp	r1, #29
 800cea0:	d82b      	bhi.n	800cefa <__sflush_r+0xb2>
 800cea2:	4a2a      	ldr	r2, [pc, #168]	@ (800cf4c <__sflush_r+0x104>)
 800cea4:	410a      	asrs	r2, r1
 800cea6:	07d6      	lsls	r6, r2, #31
 800cea8:	d427      	bmi.n	800cefa <__sflush_r+0xb2>
 800ceaa:	2200      	movs	r2, #0
 800ceac:	6062      	str	r2, [r4, #4]
 800ceae:	04d9      	lsls	r1, r3, #19
 800ceb0:	6922      	ldr	r2, [r4, #16]
 800ceb2:	6022      	str	r2, [r4, #0]
 800ceb4:	d504      	bpl.n	800cec0 <__sflush_r+0x78>
 800ceb6:	1c42      	adds	r2, r0, #1
 800ceb8:	d101      	bne.n	800cebe <__sflush_r+0x76>
 800ceba:	682b      	ldr	r3, [r5, #0]
 800cebc:	b903      	cbnz	r3, 800cec0 <__sflush_r+0x78>
 800cebe:	6560      	str	r0, [r4, #84]	@ 0x54
 800cec0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800cec2:	602f      	str	r7, [r5, #0]
 800cec4:	b1b9      	cbz	r1, 800cef6 <__sflush_r+0xae>
 800cec6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ceca:	4299      	cmp	r1, r3
 800cecc:	d002      	beq.n	800ced4 <__sflush_r+0x8c>
 800cece:	4628      	mov	r0, r5
 800ced0:	f7fe f99e 	bl	800b210 <_free_r>
 800ced4:	2300      	movs	r3, #0
 800ced6:	6363      	str	r3, [r4, #52]	@ 0x34
 800ced8:	e00d      	b.n	800cef6 <__sflush_r+0xae>
 800ceda:	2301      	movs	r3, #1
 800cedc:	4628      	mov	r0, r5
 800cede:	47b0      	blx	r6
 800cee0:	4602      	mov	r2, r0
 800cee2:	1c50      	adds	r0, r2, #1
 800cee4:	d1c9      	bne.n	800ce7a <__sflush_r+0x32>
 800cee6:	682b      	ldr	r3, [r5, #0]
 800cee8:	2b00      	cmp	r3, #0
 800ceea:	d0c6      	beq.n	800ce7a <__sflush_r+0x32>
 800ceec:	2b1d      	cmp	r3, #29
 800ceee:	d001      	beq.n	800cef4 <__sflush_r+0xac>
 800cef0:	2b16      	cmp	r3, #22
 800cef2:	d11e      	bne.n	800cf32 <__sflush_r+0xea>
 800cef4:	602f      	str	r7, [r5, #0]
 800cef6:	2000      	movs	r0, #0
 800cef8:	e022      	b.n	800cf40 <__sflush_r+0xf8>
 800cefa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cefe:	b21b      	sxth	r3, r3
 800cf00:	e01b      	b.n	800cf3a <__sflush_r+0xf2>
 800cf02:	690f      	ldr	r7, [r1, #16]
 800cf04:	2f00      	cmp	r7, #0
 800cf06:	d0f6      	beq.n	800cef6 <__sflush_r+0xae>
 800cf08:	0793      	lsls	r3, r2, #30
 800cf0a:	680e      	ldr	r6, [r1, #0]
 800cf0c:	bf08      	it	eq
 800cf0e:	694b      	ldreq	r3, [r1, #20]
 800cf10:	600f      	str	r7, [r1, #0]
 800cf12:	bf18      	it	ne
 800cf14:	2300      	movne	r3, #0
 800cf16:	eba6 0807 	sub.w	r8, r6, r7
 800cf1a:	608b      	str	r3, [r1, #8]
 800cf1c:	f1b8 0f00 	cmp.w	r8, #0
 800cf20:	dde9      	ble.n	800cef6 <__sflush_r+0xae>
 800cf22:	6a21      	ldr	r1, [r4, #32]
 800cf24:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800cf26:	4643      	mov	r3, r8
 800cf28:	463a      	mov	r2, r7
 800cf2a:	4628      	mov	r0, r5
 800cf2c:	47b0      	blx	r6
 800cf2e:	2800      	cmp	r0, #0
 800cf30:	dc08      	bgt.n	800cf44 <__sflush_r+0xfc>
 800cf32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cf36:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cf3a:	81a3      	strh	r3, [r4, #12]
 800cf3c:	f04f 30ff 	mov.w	r0, #4294967295
 800cf40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cf44:	4407      	add	r7, r0
 800cf46:	eba8 0800 	sub.w	r8, r8, r0
 800cf4a:	e7e7      	b.n	800cf1c <__sflush_r+0xd4>
 800cf4c:	dfbffffe 	.word	0xdfbffffe

0800cf50 <_fflush_r>:
 800cf50:	b538      	push	{r3, r4, r5, lr}
 800cf52:	690b      	ldr	r3, [r1, #16]
 800cf54:	4605      	mov	r5, r0
 800cf56:	460c      	mov	r4, r1
 800cf58:	b913      	cbnz	r3, 800cf60 <_fflush_r+0x10>
 800cf5a:	2500      	movs	r5, #0
 800cf5c:	4628      	mov	r0, r5
 800cf5e:	bd38      	pop	{r3, r4, r5, pc}
 800cf60:	b118      	cbz	r0, 800cf6a <_fflush_r+0x1a>
 800cf62:	6a03      	ldr	r3, [r0, #32]
 800cf64:	b90b      	cbnz	r3, 800cf6a <_fflush_r+0x1a>
 800cf66:	f7fd f8bb 	bl	800a0e0 <__sinit>
 800cf6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cf6e:	2b00      	cmp	r3, #0
 800cf70:	d0f3      	beq.n	800cf5a <_fflush_r+0xa>
 800cf72:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800cf74:	07d0      	lsls	r0, r2, #31
 800cf76:	d404      	bmi.n	800cf82 <_fflush_r+0x32>
 800cf78:	0599      	lsls	r1, r3, #22
 800cf7a:	d402      	bmi.n	800cf82 <_fflush_r+0x32>
 800cf7c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cf7e:	f7fd fada 	bl	800a536 <__retarget_lock_acquire_recursive>
 800cf82:	4628      	mov	r0, r5
 800cf84:	4621      	mov	r1, r4
 800cf86:	f7ff ff5f 	bl	800ce48 <__sflush_r>
 800cf8a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800cf8c:	07da      	lsls	r2, r3, #31
 800cf8e:	4605      	mov	r5, r0
 800cf90:	d4e4      	bmi.n	800cf5c <_fflush_r+0xc>
 800cf92:	89a3      	ldrh	r3, [r4, #12]
 800cf94:	059b      	lsls	r3, r3, #22
 800cf96:	d4e1      	bmi.n	800cf5c <_fflush_r+0xc>
 800cf98:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cf9a:	f7fd facd 	bl	800a538 <__retarget_lock_release_recursive>
 800cf9e:	e7dd      	b.n	800cf5c <_fflush_r+0xc>

0800cfa0 <__swhatbuf_r>:
 800cfa0:	b570      	push	{r4, r5, r6, lr}
 800cfa2:	460c      	mov	r4, r1
 800cfa4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cfa8:	2900      	cmp	r1, #0
 800cfaa:	b096      	sub	sp, #88	@ 0x58
 800cfac:	4615      	mov	r5, r2
 800cfae:	461e      	mov	r6, r3
 800cfb0:	da0d      	bge.n	800cfce <__swhatbuf_r+0x2e>
 800cfb2:	89a3      	ldrh	r3, [r4, #12]
 800cfb4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800cfb8:	f04f 0100 	mov.w	r1, #0
 800cfbc:	bf14      	ite	ne
 800cfbe:	2340      	movne	r3, #64	@ 0x40
 800cfc0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800cfc4:	2000      	movs	r0, #0
 800cfc6:	6031      	str	r1, [r6, #0]
 800cfc8:	602b      	str	r3, [r5, #0]
 800cfca:	b016      	add	sp, #88	@ 0x58
 800cfcc:	bd70      	pop	{r4, r5, r6, pc}
 800cfce:	466a      	mov	r2, sp
 800cfd0:	f000 f874 	bl	800d0bc <_fstat_r>
 800cfd4:	2800      	cmp	r0, #0
 800cfd6:	dbec      	blt.n	800cfb2 <__swhatbuf_r+0x12>
 800cfd8:	9901      	ldr	r1, [sp, #4]
 800cfda:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800cfde:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800cfe2:	4259      	negs	r1, r3
 800cfe4:	4159      	adcs	r1, r3
 800cfe6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cfea:	e7eb      	b.n	800cfc4 <__swhatbuf_r+0x24>

0800cfec <__smakebuf_r>:
 800cfec:	898b      	ldrh	r3, [r1, #12]
 800cfee:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cff0:	079d      	lsls	r5, r3, #30
 800cff2:	4606      	mov	r6, r0
 800cff4:	460c      	mov	r4, r1
 800cff6:	d507      	bpl.n	800d008 <__smakebuf_r+0x1c>
 800cff8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800cffc:	6023      	str	r3, [r4, #0]
 800cffe:	6123      	str	r3, [r4, #16]
 800d000:	2301      	movs	r3, #1
 800d002:	6163      	str	r3, [r4, #20]
 800d004:	b003      	add	sp, #12
 800d006:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d008:	ab01      	add	r3, sp, #4
 800d00a:	466a      	mov	r2, sp
 800d00c:	f7ff ffc8 	bl	800cfa0 <__swhatbuf_r>
 800d010:	9f00      	ldr	r7, [sp, #0]
 800d012:	4605      	mov	r5, r0
 800d014:	4639      	mov	r1, r7
 800d016:	4630      	mov	r0, r6
 800d018:	f7fc f8de 	bl	80091d8 <_malloc_r>
 800d01c:	b948      	cbnz	r0, 800d032 <__smakebuf_r+0x46>
 800d01e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d022:	059a      	lsls	r2, r3, #22
 800d024:	d4ee      	bmi.n	800d004 <__smakebuf_r+0x18>
 800d026:	f023 0303 	bic.w	r3, r3, #3
 800d02a:	f043 0302 	orr.w	r3, r3, #2
 800d02e:	81a3      	strh	r3, [r4, #12]
 800d030:	e7e2      	b.n	800cff8 <__smakebuf_r+0xc>
 800d032:	89a3      	ldrh	r3, [r4, #12]
 800d034:	6020      	str	r0, [r4, #0]
 800d036:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d03a:	81a3      	strh	r3, [r4, #12]
 800d03c:	9b01      	ldr	r3, [sp, #4]
 800d03e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800d042:	b15b      	cbz	r3, 800d05c <__smakebuf_r+0x70>
 800d044:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d048:	4630      	mov	r0, r6
 800d04a:	f000 f849 	bl	800d0e0 <_isatty_r>
 800d04e:	b128      	cbz	r0, 800d05c <__smakebuf_r+0x70>
 800d050:	89a3      	ldrh	r3, [r4, #12]
 800d052:	f023 0303 	bic.w	r3, r3, #3
 800d056:	f043 0301 	orr.w	r3, r3, #1
 800d05a:	81a3      	strh	r3, [r4, #12]
 800d05c:	89a3      	ldrh	r3, [r4, #12]
 800d05e:	431d      	orrs	r5, r3
 800d060:	81a5      	strh	r5, [r4, #12]
 800d062:	e7cf      	b.n	800d004 <__smakebuf_r+0x18>

0800d064 <memmove>:
 800d064:	4288      	cmp	r0, r1
 800d066:	b510      	push	{r4, lr}
 800d068:	eb01 0402 	add.w	r4, r1, r2
 800d06c:	d902      	bls.n	800d074 <memmove+0x10>
 800d06e:	4284      	cmp	r4, r0
 800d070:	4623      	mov	r3, r4
 800d072:	d807      	bhi.n	800d084 <memmove+0x20>
 800d074:	1e43      	subs	r3, r0, #1
 800d076:	42a1      	cmp	r1, r4
 800d078:	d008      	beq.n	800d08c <memmove+0x28>
 800d07a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d07e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d082:	e7f8      	b.n	800d076 <memmove+0x12>
 800d084:	4402      	add	r2, r0
 800d086:	4601      	mov	r1, r0
 800d088:	428a      	cmp	r2, r1
 800d08a:	d100      	bne.n	800d08e <memmove+0x2a>
 800d08c:	bd10      	pop	{r4, pc}
 800d08e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d092:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d096:	e7f7      	b.n	800d088 <memmove+0x24>

0800d098 <strncmp>:
 800d098:	b510      	push	{r4, lr}
 800d09a:	b16a      	cbz	r2, 800d0b8 <strncmp+0x20>
 800d09c:	3901      	subs	r1, #1
 800d09e:	1884      	adds	r4, r0, r2
 800d0a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d0a4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800d0a8:	429a      	cmp	r2, r3
 800d0aa:	d103      	bne.n	800d0b4 <strncmp+0x1c>
 800d0ac:	42a0      	cmp	r0, r4
 800d0ae:	d001      	beq.n	800d0b4 <strncmp+0x1c>
 800d0b0:	2a00      	cmp	r2, #0
 800d0b2:	d1f5      	bne.n	800d0a0 <strncmp+0x8>
 800d0b4:	1ad0      	subs	r0, r2, r3
 800d0b6:	bd10      	pop	{r4, pc}
 800d0b8:	4610      	mov	r0, r2
 800d0ba:	e7fc      	b.n	800d0b6 <strncmp+0x1e>

0800d0bc <_fstat_r>:
 800d0bc:	b538      	push	{r3, r4, r5, lr}
 800d0be:	4d07      	ldr	r5, [pc, #28]	@ (800d0dc <_fstat_r+0x20>)
 800d0c0:	2300      	movs	r3, #0
 800d0c2:	4604      	mov	r4, r0
 800d0c4:	4608      	mov	r0, r1
 800d0c6:	4611      	mov	r1, r2
 800d0c8:	602b      	str	r3, [r5, #0]
 800d0ca:	f7f5 fc21 	bl	8002910 <_fstat>
 800d0ce:	1c43      	adds	r3, r0, #1
 800d0d0:	d102      	bne.n	800d0d8 <_fstat_r+0x1c>
 800d0d2:	682b      	ldr	r3, [r5, #0]
 800d0d4:	b103      	cbz	r3, 800d0d8 <_fstat_r+0x1c>
 800d0d6:	6023      	str	r3, [r4, #0]
 800d0d8:	bd38      	pop	{r3, r4, r5, pc}
 800d0da:	bf00      	nop
 800d0dc:	2000070c 	.word	0x2000070c

0800d0e0 <_isatty_r>:
 800d0e0:	b538      	push	{r3, r4, r5, lr}
 800d0e2:	4d06      	ldr	r5, [pc, #24]	@ (800d0fc <_isatty_r+0x1c>)
 800d0e4:	2300      	movs	r3, #0
 800d0e6:	4604      	mov	r4, r0
 800d0e8:	4608      	mov	r0, r1
 800d0ea:	602b      	str	r3, [r5, #0]
 800d0ec:	f7f5 fc20 	bl	8002930 <_isatty>
 800d0f0:	1c43      	adds	r3, r0, #1
 800d0f2:	d102      	bne.n	800d0fa <_isatty_r+0x1a>
 800d0f4:	682b      	ldr	r3, [r5, #0]
 800d0f6:	b103      	cbz	r3, 800d0fa <_isatty_r+0x1a>
 800d0f8:	6023      	str	r3, [r4, #0]
 800d0fa:	bd38      	pop	{r3, r4, r5, pc}
 800d0fc:	2000070c 	.word	0x2000070c

0800d100 <nan>:
 800d100:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800d108 <nan+0x8>
 800d104:	4770      	bx	lr
 800d106:	bf00      	nop
 800d108:	00000000 	.word	0x00000000
 800d10c:	7ff80000 	.word	0x7ff80000

0800d110 <__assert_func>:
 800d110:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d112:	4614      	mov	r4, r2
 800d114:	461a      	mov	r2, r3
 800d116:	4b09      	ldr	r3, [pc, #36]	@ (800d13c <__assert_func+0x2c>)
 800d118:	681b      	ldr	r3, [r3, #0]
 800d11a:	4605      	mov	r5, r0
 800d11c:	68d8      	ldr	r0, [r3, #12]
 800d11e:	b954      	cbnz	r4, 800d136 <__assert_func+0x26>
 800d120:	4b07      	ldr	r3, [pc, #28]	@ (800d140 <__assert_func+0x30>)
 800d122:	461c      	mov	r4, r3
 800d124:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d128:	9100      	str	r1, [sp, #0]
 800d12a:	462b      	mov	r3, r5
 800d12c:	4905      	ldr	r1, [pc, #20]	@ (800d144 <__assert_func+0x34>)
 800d12e:	f000 fba7 	bl	800d880 <fiprintf>
 800d132:	f000 fbb7 	bl	800d8a4 <abort>
 800d136:	4b04      	ldr	r3, [pc, #16]	@ (800d148 <__assert_func+0x38>)
 800d138:	e7f4      	b.n	800d124 <__assert_func+0x14>
 800d13a:	bf00      	nop
 800d13c:	20000050 	.word	0x20000050
 800d140:	080116fd 	.word	0x080116fd
 800d144:	080116cf 	.word	0x080116cf
 800d148:	080116c2 	.word	0x080116c2

0800d14c <_calloc_r>:
 800d14c:	b570      	push	{r4, r5, r6, lr}
 800d14e:	fba1 5402 	umull	r5, r4, r1, r2
 800d152:	b93c      	cbnz	r4, 800d164 <_calloc_r+0x18>
 800d154:	4629      	mov	r1, r5
 800d156:	f7fc f83f 	bl	80091d8 <_malloc_r>
 800d15a:	4606      	mov	r6, r0
 800d15c:	b928      	cbnz	r0, 800d16a <_calloc_r+0x1e>
 800d15e:	2600      	movs	r6, #0
 800d160:	4630      	mov	r0, r6
 800d162:	bd70      	pop	{r4, r5, r6, pc}
 800d164:	220c      	movs	r2, #12
 800d166:	6002      	str	r2, [r0, #0]
 800d168:	e7f9      	b.n	800d15e <_calloc_r+0x12>
 800d16a:	462a      	mov	r2, r5
 800d16c:	4621      	mov	r1, r4
 800d16e:	f7fd f955 	bl	800a41c <memset>
 800d172:	e7f5      	b.n	800d160 <_calloc_r+0x14>

0800d174 <rshift>:
 800d174:	6903      	ldr	r3, [r0, #16]
 800d176:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800d17a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d17e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800d182:	f100 0414 	add.w	r4, r0, #20
 800d186:	dd45      	ble.n	800d214 <rshift+0xa0>
 800d188:	f011 011f 	ands.w	r1, r1, #31
 800d18c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800d190:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800d194:	d10c      	bne.n	800d1b0 <rshift+0x3c>
 800d196:	f100 0710 	add.w	r7, r0, #16
 800d19a:	4629      	mov	r1, r5
 800d19c:	42b1      	cmp	r1, r6
 800d19e:	d334      	bcc.n	800d20a <rshift+0x96>
 800d1a0:	1a9b      	subs	r3, r3, r2
 800d1a2:	009b      	lsls	r3, r3, #2
 800d1a4:	1eea      	subs	r2, r5, #3
 800d1a6:	4296      	cmp	r6, r2
 800d1a8:	bf38      	it	cc
 800d1aa:	2300      	movcc	r3, #0
 800d1ac:	4423      	add	r3, r4
 800d1ae:	e015      	b.n	800d1dc <rshift+0x68>
 800d1b0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800d1b4:	f1c1 0820 	rsb	r8, r1, #32
 800d1b8:	40cf      	lsrs	r7, r1
 800d1ba:	f105 0e04 	add.w	lr, r5, #4
 800d1be:	46a1      	mov	r9, r4
 800d1c0:	4576      	cmp	r6, lr
 800d1c2:	46f4      	mov	ip, lr
 800d1c4:	d815      	bhi.n	800d1f2 <rshift+0x7e>
 800d1c6:	1a9a      	subs	r2, r3, r2
 800d1c8:	0092      	lsls	r2, r2, #2
 800d1ca:	3a04      	subs	r2, #4
 800d1cc:	3501      	adds	r5, #1
 800d1ce:	42ae      	cmp	r6, r5
 800d1d0:	bf38      	it	cc
 800d1d2:	2200      	movcc	r2, #0
 800d1d4:	18a3      	adds	r3, r4, r2
 800d1d6:	50a7      	str	r7, [r4, r2]
 800d1d8:	b107      	cbz	r7, 800d1dc <rshift+0x68>
 800d1da:	3304      	adds	r3, #4
 800d1dc:	1b1a      	subs	r2, r3, r4
 800d1de:	42a3      	cmp	r3, r4
 800d1e0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800d1e4:	bf08      	it	eq
 800d1e6:	2300      	moveq	r3, #0
 800d1e8:	6102      	str	r2, [r0, #16]
 800d1ea:	bf08      	it	eq
 800d1ec:	6143      	streq	r3, [r0, #20]
 800d1ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d1f2:	f8dc c000 	ldr.w	ip, [ip]
 800d1f6:	fa0c fc08 	lsl.w	ip, ip, r8
 800d1fa:	ea4c 0707 	orr.w	r7, ip, r7
 800d1fe:	f849 7b04 	str.w	r7, [r9], #4
 800d202:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d206:	40cf      	lsrs	r7, r1
 800d208:	e7da      	b.n	800d1c0 <rshift+0x4c>
 800d20a:	f851 cb04 	ldr.w	ip, [r1], #4
 800d20e:	f847 cf04 	str.w	ip, [r7, #4]!
 800d212:	e7c3      	b.n	800d19c <rshift+0x28>
 800d214:	4623      	mov	r3, r4
 800d216:	e7e1      	b.n	800d1dc <rshift+0x68>

0800d218 <__hexdig_fun>:
 800d218:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800d21c:	2b09      	cmp	r3, #9
 800d21e:	d802      	bhi.n	800d226 <__hexdig_fun+0xe>
 800d220:	3820      	subs	r0, #32
 800d222:	b2c0      	uxtb	r0, r0
 800d224:	4770      	bx	lr
 800d226:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800d22a:	2b05      	cmp	r3, #5
 800d22c:	d801      	bhi.n	800d232 <__hexdig_fun+0x1a>
 800d22e:	3847      	subs	r0, #71	@ 0x47
 800d230:	e7f7      	b.n	800d222 <__hexdig_fun+0xa>
 800d232:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800d236:	2b05      	cmp	r3, #5
 800d238:	d801      	bhi.n	800d23e <__hexdig_fun+0x26>
 800d23a:	3827      	subs	r0, #39	@ 0x27
 800d23c:	e7f1      	b.n	800d222 <__hexdig_fun+0xa>
 800d23e:	2000      	movs	r0, #0
 800d240:	4770      	bx	lr
	...

0800d244 <__gethex>:
 800d244:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d248:	b085      	sub	sp, #20
 800d24a:	468a      	mov	sl, r1
 800d24c:	9302      	str	r3, [sp, #8]
 800d24e:	680b      	ldr	r3, [r1, #0]
 800d250:	9001      	str	r0, [sp, #4]
 800d252:	4690      	mov	r8, r2
 800d254:	1c9c      	adds	r4, r3, #2
 800d256:	46a1      	mov	r9, r4
 800d258:	f814 0b01 	ldrb.w	r0, [r4], #1
 800d25c:	2830      	cmp	r0, #48	@ 0x30
 800d25e:	d0fa      	beq.n	800d256 <__gethex+0x12>
 800d260:	eba9 0303 	sub.w	r3, r9, r3
 800d264:	f1a3 0b02 	sub.w	fp, r3, #2
 800d268:	f7ff ffd6 	bl	800d218 <__hexdig_fun>
 800d26c:	4605      	mov	r5, r0
 800d26e:	2800      	cmp	r0, #0
 800d270:	d168      	bne.n	800d344 <__gethex+0x100>
 800d272:	49a0      	ldr	r1, [pc, #640]	@ (800d4f4 <__gethex+0x2b0>)
 800d274:	2201      	movs	r2, #1
 800d276:	4648      	mov	r0, r9
 800d278:	f7ff ff0e 	bl	800d098 <strncmp>
 800d27c:	4607      	mov	r7, r0
 800d27e:	2800      	cmp	r0, #0
 800d280:	d167      	bne.n	800d352 <__gethex+0x10e>
 800d282:	f899 0001 	ldrb.w	r0, [r9, #1]
 800d286:	4626      	mov	r6, r4
 800d288:	f7ff ffc6 	bl	800d218 <__hexdig_fun>
 800d28c:	2800      	cmp	r0, #0
 800d28e:	d062      	beq.n	800d356 <__gethex+0x112>
 800d290:	4623      	mov	r3, r4
 800d292:	7818      	ldrb	r0, [r3, #0]
 800d294:	2830      	cmp	r0, #48	@ 0x30
 800d296:	4699      	mov	r9, r3
 800d298:	f103 0301 	add.w	r3, r3, #1
 800d29c:	d0f9      	beq.n	800d292 <__gethex+0x4e>
 800d29e:	f7ff ffbb 	bl	800d218 <__hexdig_fun>
 800d2a2:	fab0 f580 	clz	r5, r0
 800d2a6:	096d      	lsrs	r5, r5, #5
 800d2a8:	f04f 0b01 	mov.w	fp, #1
 800d2ac:	464a      	mov	r2, r9
 800d2ae:	4616      	mov	r6, r2
 800d2b0:	3201      	adds	r2, #1
 800d2b2:	7830      	ldrb	r0, [r6, #0]
 800d2b4:	f7ff ffb0 	bl	800d218 <__hexdig_fun>
 800d2b8:	2800      	cmp	r0, #0
 800d2ba:	d1f8      	bne.n	800d2ae <__gethex+0x6a>
 800d2bc:	498d      	ldr	r1, [pc, #564]	@ (800d4f4 <__gethex+0x2b0>)
 800d2be:	2201      	movs	r2, #1
 800d2c0:	4630      	mov	r0, r6
 800d2c2:	f7ff fee9 	bl	800d098 <strncmp>
 800d2c6:	2800      	cmp	r0, #0
 800d2c8:	d13f      	bne.n	800d34a <__gethex+0x106>
 800d2ca:	b944      	cbnz	r4, 800d2de <__gethex+0x9a>
 800d2cc:	1c74      	adds	r4, r6, #1
 800d2ce:	4622      	mov	r2, r4
 800d2d0:	4616      	mov	r6, r2
 800d2d2:	3201      	adds	r2, #1
 800d2d4:	7830      	ldrb	r0, [r6, #0]
 800d2d6:	f7ff ff9f 	bl	800d218 <__hexdig_fun>
 800d2da:	2800      	cmp	r0, #0
 800d2dc:	d1f8      	bne.n	800d2d0 <__gethex+0x8c>
 800d2de:	1ba4      	subs	r4, r4, r6
 800d2e0:	00a7      	lsls	r7, r4, #2
 800d2e2:	7833      	ldrb	r3, [r6, #0]
 800d2e4:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800d2e8:	2b50      	cmp	r3, #80	@ 0x50
 800d2ea:	d13e      	bne.n	800d36a <__gethex+0x126>
 800d2ec:	7873      	ldrb	r3, [r6, #1]
 800d2ee:	2b2b      	cmp	r3, #43	@ 0x2b
 800d2f0:	d033      	beq.n	800d35a <__gethex+0x116>
 800d2f2:	2b2d      	cmp	r3, #45	@ 0x2d
 800d2f4:	d034      	beq.n	800d360 <__gethex+0x11c>
 800d2f6:	1c71      	adds	r1, r6, #1
 800d2f8:	2400      	movs	r4, #0
 800d2fa:	7808      	ldrb	r0, [r1, #0]
 800d2fc:	f7ff ff8c 	bl	800d218 <__hexdig_fun>
 800d300:	1e43      	subs	r3, r0, #1
 800d302:	b2db      	uxtb	r3, r3
 800d304:	2b18      	cmp	r3, #24
 800d306:	d830      	bhi.n	800d36a <__gethex+0x126>
 800d308:	f1a0 0210 	sub.w	r2, r0, #16
 800d30c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800d310:	f7ff ff82 	bl	800d218 <__hexdig_fun>
 800d314:	f100 3cff 	add.w	ip, r0, #4294967295
 800d318:	fa5f fc8c 	uxtb.w	ip, ip
 800d31c:	f1bc 0f18 	cmp.w	ip, #24
 800d320:	f04f 030a 	mov.w	r3, #10
 800d324:	d91e      	bls.n	800d364 <__gethex+0x120>
 800d326:	b104      	cbz	r4, 800d32a <__gethex+0xe6>
 800d328:	4252      	negs	r2, r2
 800d32a:	4417      	add	r7, r2
 800d32c:	f8ca 1000 	str.w	r1, [sl]
 800d330:	b1ed      	cbz	r5, 800d36e <__gethex+0x12a>
 800d332:	f1bb 0f00 	cmp.w	fp, #0
 800d336:	bf0c      	ite	eq
 800d338:	2506      	moveq	r5, #6
 800d33a:	2500      	movne	r5, #0
 800d33c:	4628      	mov	r0, r5
 800d33e:	b005      	add	sp, #20
 800d340:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d344:	2500      	movs	r5, #0
 800d346:	462c      	mov	r4, r5
 800d348:	e7b0      	b.n	800d2ac <__gethex+0x68>
 800d34a:	2c00      	cmp	r4, #0
 800d34c:	d1c7      	bne.n	800d2de <__gethex+0x9a>
 800d34e:	4627      	mov	r7, r4
 800d350:	e7c7      	b.n	800d2e2 <__gethex+0x9e>
 800d352:	464e      	mov	r6, r9
 800d354:	462f      	mov	r7, r5
 800d356:	2501      	movs	r5, #1
 800d358:	e7c3      	b.n	800d2e2 <__gethex+0x9e>
 800d35a:	2400      	movs	r4, #0
 800d35c:	1cb1      	adds	r1, r6, #2
 800d35e:	e7cc      	b.n	800d2fa <__gethex+0xb6>
 800d360:	2401      	movs	r4, #1
 800d362:	e7fb      	b.n	800d35c <__gethex+0x118>
 800d364:	fb03 0002 	mla	r0, r3, r2, r0
 800d368:	e7ce      	b.n	800d308 <__gethex+0xc4>
 800d36a:	4631      	mov	r1, r6
 800d36c:	e7de      	b.n	800d32c <__gethex+0xe8>
 800d36e:	eba6 0309 	sub.w	r3, r6, r9
 800d372:	3b01      	subs	r3, #1
 800d374:	4629      	mov	r1, r5
 800d376:	2b07      	cmp	r3, #7
 800d378:	dc0a      	bgt.n	800d390 <__gethex+0x14c>
 800d37a:	9801      	ldr	r0, [sp, #4]
 800d37c:	f7fd ff92 	bl	800b2a4 <_Balloc>
 800d380:	4604      	mov	r4, r0
 800d382:	b940      	cbnz	r0, 800d396 <__gethex+0x152>
 800d384:	4b5c      	ldr	r3, [pc, #368]	@ (800d4f8 <__gethex+0x2b4>)
 800d386:	4602      	mov	r2, r0
 800d388:	21e4      	movs	r1, #228	@ 0xe4
 800d38a:	485c      	ldr	r0, [pc, #368]	@ (800d4fc <__gethex+0x2b8>)
 800d38c:	f7ff fec0 	bl	800d110 <__assert_func>
 800d390:	3101      	adds	r1, #1
 800d392:	105b      	asrs	r3, r3, #1
 800d394:	e7ef      	b.n	800d376 <__gethex+0x132>
 800d396:	f100 0a14 	add.w	sl, r0, #20
 800d39a:	2300      	movs	r3, #0
 800d39c:	4655      	mov	r5, sl
 800d39e:	469b      	mov	fp, r3
 800d3a0:	45b1      	cmp	r9, r6
 800d3a2:	d337      	bcc.n	800d414 <__gethex+0x1d0>
 800d3a4:	f845 bb04 	str.w	fp, [r5], #4
 800d3a8:	eba5 050a 	sub.w	r5, r5, sl
 800d3ac:	10ad      	asrs	r5, r5, #2
 800d3ae:	6125      	str	r5, [r4, #16]
 800d3b0:	4658      	mov	r0, fp
 800d3b2:	f7fe f869 	bl	800b488 <__hi0bits>
 800d3b6:	016d      	lsls	r5, r5, #5
 800d3b8:	f8d8 6000 	ldr.w	r6, [r8]
 800d3bc:	1a2d      	subs	r5, r5, r0
 800d3be:	42b5      	cmp	r5, r6
 800d3c0:	dd54      	ble.n	800d46c <__gethex+0x228>
 800d3c2:	1bad      	subs	r5, r5, r6
 800d3c4:	4629      	mov	r1, r5
 800d3c6:	4620      	mov	r0, r4
 800d3c8:	f7fe fbfd 	bl	800bbc6 <__any_on>
 800d3cc:	4681      	mov	r9, r0
 800d3ce:	b178      	cbz	r0, 800d3f0 <__gethex+0x1ac>
 800d3d0:	1e6b      	subs	r3, r5, #1
 800d3d2:	1159      	asrs	r1, r3, #5
 800d3d4:	f003 021f 	and.w	r2, r3, #31
 800d3d8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800d3dc:	f04f 0901 	mov.w	r9, #1
 800d3e0:	fa09 f202 	lsl.w	r2, r9, r2
 800d3e4:	420a      	tst	r2, r1
 800d3e6:	d003      	beq.n	800d3f0 <__gethex+0x1ac>
 800d3e8:	454b      	cmp	r3, r9
 800d3ea:	dc36      	bgt.n	800d45a <__gethex+0x216>
 800d3ec:	f04f 0902 	mov.w	r9, #2
 800d3f0:	4629      	mov	r1, r5
 800d3f2:	4620      	mov	r0, r4
 800d3f4:	f7ff febe 	bl	800d174 <rshift>
 800d3f8:	442f      	add	r7, r5
 800d3fa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d3fe:	42bb      	cmp	r3, r7
 800d400:	da42      	bge.n	800d488 <__gethex+0x244>
 800d402:	9801      	ldr	r0, [sp, #4]
 800d404:	4621      	mov	r1, r4
 800d406:	f7fd ff8d 	bl	800b324 <_Bfree>
 800d40a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d40c:	2300      	movs	r3, #0
 800d40e:	6013      	str	r3, [r2, #0]
 800d410:	25a3      	movs	r5, #163	@ 0xa3
 800d412:	e793      	b.n	800d33c <__gethex+0xf8>
 800d414:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800d418:	2a2e      	cmp	r2, #46	@ 0x2e
 800d41a:	d012      	beq.n	800d442 <__gethex+0x1fe>
 800d41c:	2b20      	cmp	r3, #32
 800d41e:	d104      	bne.n	800d42a <__gethex+0x1e6>
 800d420:	f845 bb04 	str.w	fp, [r5], #4
 800d424:	f04f 0b00 	mov.w	fp, #0
 800d428:	465b      	mov	r3, fp
 800d42a:	7830      	ldrb	r0, [r6, #0]
 800d42c:	9303      	str	r3, [sp, #12]
 800d42e:	f7ff fef3 	bl	800d218 <__hexdig_fun>
 800d432:	9b03      	ldr	r3, [sp, #12]
 800d434:	f000 000f 	and.w	r0, r0, #15
 800d438:	4098      	lsls	r0, r3
 800d43a:	ea4b 0b00 	orr.w	fp, fp, r0
 800d43e:	3304      	adds	r3, #4
 800d440:	e7ae      	b.n	800d3a0 <__gethex+0x15c>
 800d442:	45b1      	cmp	r9, r6
 800d444:	d8ea      	bhi.n	800d41c <__gethex+0x1d8>
 800d446:	492b      	ldr	r1, [pc, #172]	@ (800d4f4 <__gethex+0x2b0>)
 800d448:	9303      	str	r3, [sp, #12]
 800d44a:	2201      	movs	r2, #1
 800d44c:	4630      	mov	r0, r6
 800d44e:	f7ff fe23 	bl	800d098 <strncmp>
 800d452:	9b03      	ldr	r3, [sp, #12]
 800d454:	2800      	cmp	r0, #0
 800d456:	d1e1      	bne.n	800d41c <__gethex+0x1d8>
 800d458:	e7a2      	b.n	800d3a0 <__gethex+0x15c>
 800d45a:	1ea9      	subs	r1, r5, #2
 800d45c:	4620      	mov	r0, r4
 800d45e:	f7fe fbb2 	bl	800bbc6 <__any_on>
 800d462:	2800      	cmp	r0, #0
 800d464:	d0c2      	beq.n	800d3ec <__gethex+0x1a8>
 800d466:	f04f 0903 	mov.w	r9, #3
 800d46a:	e7c1      	b.n	800d3f0 <__gethex+0x1ac>
 800d46c:	da09      	bge.n	800d482 <__gethex+0x23e>
 800d46e:	1b75      	subs	r5, r6, r5
 800d470:	4621      	mov	r1, r4
 800d472:	9801      	ldr	r0, [sp, #4]
 800d474:	462a      	mov	r2, r5
 800d476:	f7fe f96d 	bl	800b754 <__lshift>
 800d47a:	1b7f      	subs	r7, r7, r5
 800d47c:	4604      	mov	r4, r0
 800d47e:	f100 0a14 	add.w	sl, r0, #20
 800d482:	f04f 0900 	mov.w	r9, #0
 800d486:	e7b8      	b.n	800d3fa <__gethex+0x1b6>
 800d488:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800d48c:	42bd      	cmp	r5, r7
 800d48e:	dd6f      	ble.n	800d570 <__gethex+0x32c>
 800d490:	1bed      	subs	r5, r5, r7
 800d492:	42ae      	cmp	r6, r5
 800d494:	dc34      	bgt.n	800d500 <__gethex+0x2bc>
 800d496:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d49a:	2b02      	cmp	r3, #2
 800d49c:	d022      	beq.n	800d4e4 <__gethex+0x2a0>
 800d49e:	2b03      	cmp	r3, #3
 800d4a0:	d024      	beq.n	800d4ec <__gethex+0x2a8>
 800d4a2:	2b01      	cmp	r3, #1
 800d4a4:	d115      	bne.n	800d4d2 <__gethex+0x28e>
 800d4a6:	42ae      	cmp	r6, r5
 800d4a8:	d113      	bne.n	800d4d2 <__gethex+0x28e>
 800d4aa:	2e01      	cmp	r6, #1
 800d4ac:	d10b      	bne.n	800d4c6 <__gethex+0x282>
 800d4ae:	9a02      	ldr	r2, [sp, #8]
 800d4b0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800d4b4:	6013      	str	r3, [r2, #0]
 800d4b6:	2301      	movs	r3, #1
 800d4b8:	6123      	str	r3, [r4, #16]
 800d4ba:	f8ca 3000 	str.w	r3, [sl]
 800d4be:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d4c0:	2562      	movs	r5, #98	@ 0x62
 800d4c2:	601c      	str	r4, [r3, #0]
 800d4c4:	e73a      	b.n	800d33c <__gethex+0xf8>
 800d4c6:	1e71      	subs	r1, r6, #1
 800d4c8:	4620      	mov	r0, r4
 800d4ca:	f7fe fb7c 	bl	800bbc6 <__any_on>
 800d4ce:	2800      	cmp	r0, #0
 800d4d0:	d1ed      	bne.n	800d4ae <__gethex+0x26a>
 800d4d2:	9801      	ldr	r0, [sp, #4]
 800d4d4:	4621      	mov	r1, r4
 800d4d6:	f7fd ff25 	bl	800b324 <_Bfree>
 800d4da:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d4dc:	2300      	movs	r3, #0
 800d4de:	6013      	str	r3, [r2, #0]
 800d4e0:	2550      	movs	r5, #80	@ 0x50
 800d4e2:	e72b      	b.n	800d33c <__gethex+0xf8>
 800d4e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d4e6:	2b00      	cmp	r3, #0
 800d4e8:	d1f3      	bne.n	800d4d2 <__gethex+0x28e>
 800d4ea:	e7e0      	b.n	800d4ae <__gethex+0x26a>
 800d4ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d4ee:	2b00      	cmp	r3, #0
 800d4f0:	d1dd      	bne.n	800d4ae <__gethex+0x26a>
 800d4f2:	e7ee      	b.n	800d4d2 <__gethex+0x28e>
 800d4f4:	08011550 	.word	0x08011550
 800d4f8:	080113e9 	.word	0x080113e9
 800d4fc:	080116fe 	.word	0x080116fe
 800d500:	1e6f      	subs	r7, r5, #1
 800d502:	f1b9 0f00 	cmp.w	r9, #0
 800d506:	d130      	bne.n	800d56a <__gethex+0x326>
 800d508:	b127      	cbz	r7, 800d514 <__gethex+0x2d0>
 800d50a:	4639      	mov	r1, r7
 800d50c:	4620      	mov	r0, r4
 800d50e:	f7fe fb5a 	bl	800bbc6 <__any_on>
 800d512:	4681      	mov	r9, r0
 800d514:	117a      	asrs	r2, r7, #5
 800d516:	2301      	movs	r3, #1
 800d518:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800d51c:	f007 071f 	and.w	r7, r7, #31
 800d520:	40bb      	lsls	r3, r7
 800d522:	4213      	tst	r3, r2
 800d524:	4629      	mov	r1, r5
 800d526:	4620      	mov	r0, r4
 800d528:	bf18      	it	ne
 800d52a:	f049 0902 	orrne.w	r9, r9, #2
 800d52e:	f7ff fe21 	bl	800d174 <rshift>
 800d532:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800d536:	1b76      	subs	r6, r6, r5
 800d538:	2502      	movs	r5, #2
 800d53a:	f1b9 0f00 	cmp.w	r9, #0
 800d53e:	d047      	beq.n	800d5d0 <__gethex+0x38c>
 800d540:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d544:	2b02      	cmp	r3, #2
 800d546:	d015      	beq.n	800d574 <__gethex+0x330>
 800d548:	2b03      	cmp	r3, #3
 800d54a:	d017      	beq.n	800d57c <__gethex+0x338>
 800d54c:	2b01      	cmp	r3, #1
 800d54e:	d109      	bne.n	800d564 <__gethex+0x320>
 800d550:	f019 0f02 	tst.w	r9, #2
 800d554:	d006      	beq.n	800d564 <__gethex+0x320>
 800d556:	f8da 3000 	ldr.w	r3, [sl]
 800d55a:	ea49 0903 	orr.w	r9, r9, r3
 800d55e:	f019 0f01 	tst.w	r9, #1
 800d562:	d10e      	bne.n	800d582 <__gethex+0x33e>
 800d564:	f045 0510 	orr.w	r5, r5, #16
 800d568:	e032      	b.n	800d5d0 <__gethex+0x38c>
 800d56a:	f04f 0901 	mov.w	r9, #1
 800d56e:	e7d1      	b.n	800d514 <__gethex+0x2d0>
 800d570:	2501      	movs	r5, #1
 800d572:	e7e2      	b.n	800d53a <__gethex+0x2f6>
 800d574:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d576:	f1c3 0301 	rsb	r3, r3, #1
 800d57a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d57c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d57e:	2b00      	cmp	r3, #0
 800d580:	d0f0      	beq.n	800d564 <__gethex+0x320>
 800d582:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800d586:	f104 0314 	add.w	r3, r4, #20
 800d58a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800d58e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800d592:	f04f 0c00 	mov.w	ip, #0
 800d596:	4618      	mov	r0, r3
 800d598:	f853 2b04 	ldr.w	r2, [r3], #4
 800d59c:	f1b2 3fff 	cmp.w	r2, #4294967295
 800d5a0:	d01b      	beq.n	800d5da <__gethex+0x396>
 800d5a2:	3201      	adds	r2, #1
 800d5a4:	6002      	str	r2, [r0, #0]
 800d5a6:	2d02      	cmp	r5, #2
 800d5a8:	f104 0314 	add.w	r3, r4, #20
 800d5ac:	d13c      	bne.n	800d628 <__gethex+0x3e4>
 800d5ae:	f8d8 2000 	ldr.w	r2, [r8]
 800d5b2:	3a01      	subs	r2, #1
 800d5b4:	42b2      	cmp	r2, r6
 800d5b6:	d109      	bne.n	800d5cc <__gethex+0x388>
 800d5b8:	1171      	asrs	r1, r6, #5
 800d5ba:	2201      	movs	r2, #1
 800d5bc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d5c0:	f006 061f 	and.w	r6, r6, #31
 800d5c4:	fa02 f606 	lsl.w	r6, r2, r6
 800d5c8:	421e      	tst	r6, r3
 800d5ca:	d13a      	bne.n	800d642 <__gethex+0x3fe>
 800d5cc:	f045 0520 	orr.w	r5, r5, #32
 800d5d0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d5d2:	601c      	str	r4, [r3, #0]
 800d5d4:	9b02      	ldr	r3, [sp, #8]
 800d5d6:	601f      	str	r7, [r3, #0]
 800d5d8:	e6b0      	b.n	800d33c <__gethex+0xf8>
 800d5da:	4299      	cmp	r1, r3
 800d5dc:	f843 cc04 	str.w	ip, [r3, #-4]
 800d5e0:	d8d9      	bhi.n	800d596 <__gethex+0x352>
 800d5e2:	68a3      	ldr	r3, [r4, #8]
 800d5e4:	459b      	cmp	fp, r3
 800d5e6:	db17      	blt.n	800d618 <__gethex+0x3d4>
 800d5e8:	6861      	ldr	r1, [r4, #4]
 800d5ea:	9801      	ldr	r0, [sp, #4]
 800d5ec:	3101      	adds	r1, #1
 800d5ee:	f7fd fe59 	bl	800b2a4 <_Balloc>
 800d5f2:	4681      	mov	r9, r0
 800d5f4:	b918      	cbnz	r0, 800d5fe <__gethex+0x3ba>
 800d5f6:	4b1a      	ldr	r3, [pc, #104]	@ (800d660 <__gethex+0x41c>)
 800d5f8:	4602      	mov	r2, r0
 800d5fa:	2184      	movs	r1, #132	@ 0x84
 800d5fc:	e6c5      	b.n	800d38a <__gethex+0x146>
 800d5fe:	6922      	ldr	r2, [r4, #16]
 800d600:	3202      	adds	r2, #2
 800d602:	f104 010c 	add.w	r1, r4, #12
 800d606:	0092      	lsls	r2, r2, #2
 800d608:	300c      	adds	r0, #12
 800d60a:	f7fc ff9e 	bl	800a54a <memcpy>
 800d60e:	4621      	mov	r1, r4
 800d610:	9801      	ldr	r0, [sp, #4]
 800d612:	f7fd fe87 	bl	800b324 <_Bfree>
 800d616:	464c      	mov	r4, r9
 800d618:	6923      	ldr	r3, [r4, #16]
 800d61a:	1c5a      	adds	r2, r3, #1
 800d61c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d620:	6122      	str	r2, [r4, #16]
 800d622:	2201      	movs	r2, #1
 800d624:	615a      	str	r2, [r3, #20]
 800d626:	e7be      	b.n	800d5a6 <__gethex+0x362>
 800d628:	6922      	ldr	r2, [r4, #16]
 800d62a:	455a      	cmp	r2, fp
 800d62c:	dd0b      	ble.n	800d646 <__gethex+0x402>
 800d62e:	2101      	movs	r1, #1
 800d630:	4620      	mov	r0, r4
 800d632:	f7ff fd9f 	bl	800d174 <rshift>
 800d636:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d63a:	3701      	adds	r7, #1
 800d63c:	42bb      	cmp	r3, r7
 800d63e:	f6ff aee0 	blt.w	800d402 <__gethex+0x1be>
 800d642:	2501      	movs	r5, #1
 800d644:	e7c2      	b.n	800d5cc <__gethex+0x388>
 800d646:	f016 061f 	ands.w	r6, r6, #31
 800d64a:	d0fa      	beq.n	800d642 <__gethex+0x3fe>
 800d64c:	4453      	add	r3, sl
 800d64e:	f1c6 0620 	rsb	r6, r6, #32
 800d652:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800d656:	f7fd ff17 	bl	800b488 <__hi0bits>
 800d65a:	42b0      	cmp	r0, r6
 800d65c:	dbe7      	blt.n	800d62e <__gethex+0x3ea>
 800d65e:	e7f0      	b.n	800d642 <__gethex+0x3fe>
 800d660:	080113e9 	.word	0x080113e9

0800d664 <L_shift>:
 800d664:	f1c2 0208 	rsb	r2, r2, #8
 800d668:	0092      	lsls	r2, r2, #2
 800d66a:	b570      	push	{r4, r5, r6, lr}
 800d66c:	f1c2 0620 	rsb	r6, r2, #32
 800d670:	6843      	ldr	r3, [r0, #4]
 800d672:	6804      	ldr	r4, [r0, #0]
 800d674:	fa03 f506 	lsl.w	r5, r3, r6
 800d678:	432c      	orrs	r4, r5
 800d67a:	40d3      	lsrs	r3, r2
 800d67c:	6004      	str	r4, [r0, #0]
 800d67e:	f840 3f04 	str.w	r3, [r0, #4]!
 800d682:	4288      	cmp	r0, r1
 800d684:	d3f4      	bcc.n	800d670 <L_shift+0xc>
 800d686:	bd70      	pop	{r4, r5, r6, pc}

0800d688 <__match>:
 800d688:	b530      	push	{r4, r5, lr}
 800d68a:	6803      	ldr	r3, [r0, #0]
 800d68c:	3301      	adds	r3, #1
 800d68e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d692:	b914      	cbnz	r4, 800d69a <__match+0x12>
 800d694:	6003      	str	r3, [r0, #0]
 800d696:	2001      	movs	r0, #1
 800d698:	bd30      	pop	{r4, r5, pc}
 800d69a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d69e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800d6a2:	2d19      	cmp	r5, #25
 800d6a4:	bf98      	it	ls
 800d6a6:	3220      	addls	r2, #32
 800d6a8:	42a2      	cmp	r2, r4
 800d6aa:	d0f0      	beq.n	800d68e <__match+0x6>
 800d6ac:	2000      	movs	r0, #0
 800d6ae:	e7f3      	b.n	800d698 <__match+0x10>

0800d6b0 <__hexnan>:
 800d6b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d6b4:	680b      	ldr	r3, [r1, #0]
 800d6b6:	6801      	ldr	r1, [r0, #0]
 800d6b8:	115e      	asrs	r6, r3, #5
 800d6ba:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800d6be:	f013 031f 	ands.w	r3, r3, #31
 800d6c2:	b087      	sub	sp, #28
 800d6c4:	bf18      	it	ne
 800d6c6:	3604      	addne	r6, #4
 800d6c8:	2500      	movs	r5, #0
 800d6ca:	1f37      	subs	r7, r6, #4
 800d6cc:	4682      	mov	sl, r0
 800d6ce:	4690      	mov	r8, r2
 800d6d0:	9301      	str	r3, [sp, #4]
 800d6d2:	f846 5c04 	str.w	r5, [r6, #-4]
 800d6d6:	46b9      	mov	r9, r7
 800d6d8:	463c      	mov	r4, r7
 800d6da:	9502      	str	r5, [sp, #8]
 800d6dc:	46ab      	mov	fp, r5
 800d6de:	784a      	ldrb	r2, [r1, #1]
 800d6e0:	1c4b      	adds	r3, r1, #1
 800d6e2:	9303      	str	r3, [sp, #12]
 800d6e4:	b342      	cbz	r2, 800d738 <__hexnan+0x88>
 800d6e6:	4610      	mov	r0, r2
 800d6e8:	9105      	str	r1, [sp, #20]
 800d6ea:	9204      	str	r2, [sp, #16]
 800d6ec:	f7ff fd94 	bl	800d218 <__hexdig_fun>
 800d6f0:	2800      	cmp	r0, #0
 800d6f2:	d151      	bne.n	800d798 <__hexnan+0xe8>
 800d6f4:	9a04      	ldr	r2, [sp, #16]
 800d6f6:	9905      	ldr	r1, [sp, #20]
 800d6f8:	2a20      	cmp	r2, #32
 800d6fa:	d818      	bhi.n	800d72e <__hexnan+0x7e>
 800d6fc:	9b02      	ldr	r3, [sp, #8]
 800d6fe:	459b      	cmp	fp, r3
 800d700:	dd13      	ble.n	800d72a <__hexnan+0x7a>
 800d702:	454c      	cmp	r4, r9
 800d704:	d206      	bcs.n	800d714 <__hexnan+0x64>
 800d706:	2d07      	cmp	r5, #7
 800d708:	dc04      	bgt.n	800d714 <__hexnan+0x64>
 800d70a:	462a      	mov	r2, r5
 800d70c:	4649      	mov	r1, r9
 800d70e:	4620      	mov	r0, r4
 800d710:	f7ff ffa8 	bl	800d664 <L_shift>
 800d714:	4544      	cmp	r4, r8
 800d716:	d952      	bls.n	800d7be <__hexnan+0x10e>
 800d718:	2300      	movs	r3, #0
 800d71a:	f1a4 0904 	sub.w	r9, r4, #4
 800d71e:	f844 3c04 	str.w	r3, [r4, #-4]
 800d722:	f8cd b008 	str.w	fp, [sp, #8]
 800d726:	464c      	mov	r4, r9
 800d728:	461d      	mov	r5, r3
 800d72a:	9903      	ldr	r1, [sp, #12]
 800d72c:	e7d7      	b.n	800d6de <__hexnan+0x2e>
 800d72e:	2a29      	cmp	r2, #41	@ 0x29
 800d730:	d157      	bne.n	800d7e2 <__hexnan+0x132>
 800d732:	3102      	adds	r1, #2
 800d734:	f8ca 1000 	str.w	r1, [sl]
 800d738:	f1bb 0f00 	cmp.w	fp, #0
 800d73c:	d051      	beq.n	800d7e2 <__hexnan+0x132>
 800d73e:	454c      	cmp	r4, r9
 800d740:	d206      	bcs.n	800d750 <__hexnan+0xa0>
 800d742:	2d07      	cmp	r5, #7
 800d744:	dc04      	bgt.n	800d750 <__hexnan+0xa0>
 800d746:	462a      	mov	r2, r5
 800d748:	4649      	mov	r1, r9
 800d74a:	4620      	mov	r0, r4
 800d74c:	f7ff ff8a 	bl	800d664 <L_shift>
 800d750:	4544      	cmp	r4, r8
 800d752:	d936      	bls.n	800d7c2 <__hexnan+0x112>
 800d754:	f1a8 0204 	sub.w	r2, r8, #4
 800d758:	4623      	mov	r3, r4
 800d75a:	f853 1b04 	ldr.w	r1, [r3], #4
 800d75e:	f842 1f04 	str.w	r1, [r2, #4]!
 800d762:	429f      	cmp	r7, r3
 800d764:	d2f9      	bcs.n	800d75a <__hexnan+0xaa>
 800d766:	1b3b      	subs	r3, r7, r4
 800d768:	f023 0303 	bic.w	r3, r3, #3
 800d76c:	3304      	adds	r3, #4
 800d76e:	3401      	adds	r4, #1
 800d770:	3e03      	subs	r6, #3
 800d772:	42b4      	cmp	r4, r6
 800d774:	bf88      	it	hi
 800d776:	2304      	movhi	r3, #4
 800d778:	4443      	add	r3, r8
 800d77a:	2200      	movs	r2, #0
 800d77c:	f843 2b04 	str.w	r2, [r3], #4
 800d780:	429f      	cmp	r7, r3
 800d782:	d2fb      	bcs.n	800d77c <__hexnan+0xcc>
 800d784:	683b      	ldr	r3, [r7, #0]
 800d786:	b91b      	cbnz	r3, 800d790 <__hexnan+0xe0>
 800d788:	4547      	cmp	r7, r8
 800d78a:	d128      	bne.n	800d7de <__hexnan+0x12e>
 800d78c:	2301      	movs	r3, #1
 800d78e:	603b      	str	r3, [r7, #0]
 800d790:	2005      	movs	r0, #5
 800d792:	b007      	add	sp, #28
 800d794:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d798:	3501      	adds	r5, #1
 800d79a:	2d08      	cmp	r5, #8
 800d79c:	f10b 0b01 	add.w	fp, fp, #1
 800d7a0:	dd06      	ble.n	800d7b0 <__hexnan+0x100>
 800d7a2:	4544      	cmp	r4, r8
 800d7a4:	d9c1      	bls.n	800d72a <__hexnan+0x7a>
 800d7a6:	2300      	movs	r3, #0
 800d7a8:	f844 3c04 	str.w	r3, [r4, #-4]
 800d7ac:	2501      	movs	r5, #1
 800d7ae:	3c04      	subs	r4, #4
 800d7b0:	6822      	ldr	r2, [r4, #0]
 800d7b2:	f000 000f 	and.w	r0, r0, #15
 800d7b6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800d7ba:	6020      	str	r0, [r4, #0]
 800d7bc:	e7b5      	b.n	800d72a <__hexnan+0x7a>
 800d7be:	2508      	movs	r5, #8
 800d7c0:	e7b3      	b.n	800d72a <__hexnan+0x7a>
 800d7c2:	9b01      	ldr	r3, [sp, #4]
 800d7c4:	2b00      	cmp	r3, #0
 800d7c6:	d0dd      	beq.n	800d784 <__hexnan+0xd4>
 800d7c8:	f1c3 0320 	rsb	r3, r3, #32
 800d7cc:	f04f 32ff 	mov.w	r2, #4294967295
 800d7d0:	40da      	lsrs	r2, r3
 800d7d2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800d7d6:	4013      	ands	r3, r2
 800d7d8:	f846 3c04 	str.w	r3, [r6, #-4]
 800d7dc:	e7d2      	b.n	800d784 <__hexnan+0xd4>
 800d7de:	3f04      	subs	r7, #4
 800d7e0:	e7d0      	b.n	800d784 <__hexnan+0xd4>
 800d7e2:	2004      	movs	r0, #4
 800d7e4:	e7d5      	b.n	800d792 <__hexnan+0xe2>

0800d7e6 <__ascii_mbtowc>:
 800d7e6:	b082      	sub	sp, #8
 800d7e8:	b901      	cbnz	r1, 800d7ec <__ascii_mbtowc+0x6>
 800d7ea:	a901      	add	r1, sp, #4
 800d7ec:	b142      	cbz	r2, 800d800 <__ascii_mbtowc+0x1a>
 800d7ee:	b14b      	cbz	r3, 800d804 <__ascii_mbtowc+0x1e>
 800d7f0:	7813      	ldrb	r3, [r2, #0]
 800d7f2:	600b      	str	r3, [r1, #0]
 800d7f4:	7812      	ldrb	r2, [r2, #0]
 800d7f6:	1e10      	subs	r0, r2, #0
 800d7f8:	bf18      	it	ne
 800d7fa:	2001      	movne	r0, #1
 800d7fc:	b002      	add	sp, #8
 800d7fe:	4770      	bx	lr
 800d800:	4610      	mov	r0, r2
 800d802:	e7fb      	b.n	800d7fc <__ascii_mbtowc+0x16>
 800d804:	f06f 0001 	mvn.w	r0, #1
 800d808:	e7f8      	b.n	800d7fc <__ascii_mbtowc+0x16>

0800d80a <_realloc_r>:
 800d80a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d80e:	4680      	mov	r8, r0
 800d810:	4615      	mov	r5, r2
 800d812:	460c      	mov	r4, r1
 800d814:	b921      	cbnz	r1, 800d820 <_realloc_r+0x16>
 800d816:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d81a:	4611      	mov	r1, r2
 800d81c:	f7fb bcdc 	b.w	80091d8 <_malloc_r>
 800d820:	b92a      	cbnz	r2, 800d82e <_realloc_r+0x24>
 800d822:	f7fd fcf5 	bl	800b210 <_free_r>
 800d826:	2400      	movs	r4, #0
 800d828:	4620      	mov	r0, r4
 800d82a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d82e:	f000 f840 	bl	800d8b2 <_malloc_usable_size_r>
 800d832:	4285      	cmp	r5, r0
 800d834:	4606      	mov	r6, r0
 800d836:	d802      	bhi.n	800d83e <_realloc_r+0x34>
 800d838:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800d83c:	d8f4      	bhi.n	800d828 <_realloc_r+0x1e>
 800d83e:	4629      	mov	r1, r5
 800d840:	4640      	mov	r0, r8
 800d842:	f7fb fcc9 	bl	80091d8 <_malloc_r>
 800d846:	4607      	mov	r7, r0
 800d848:	2800      	cmp	r0, #0
 800d84a:	d0ec      	beq.n	800d826 <_realloc_r+0x1c>
 800d84c:	42b5      	cmp	r5, r6
 800d84e:	462a      	mov	r2, r5
 800d850:	4621      	mov	r1, r4
 800d852:	bf28      	it	cs
 800d854:	4632      	movcs	r2, r6
 800d856:	f7fc fe78 	bl	800a54a <memcpy>
 800d85a:	4621      	mov	r1, r4
 800d85c:	4640      	mov	r0, r8
 800d85e:	f7fd fcd7 	bl	800b210 <_free_r>
 800d862:	463c      	mov	r4, r7
 800d864:	e7e0      	b.n	800d828 <_realloc_r+0x1e>

0800d866 <__ascii_wctomb>:
 800d866:	4603      	mov	r3, r0
 800d868:	4608      	mov	r0, r1
 800d86a:	b141      	cbz	r1, 800d87e <__ascii_wctomb+0x18>
 800d86c:	2aff      	cmp	r2, #255	@ 0xff
 800d86e:	d904      	bls.n	800d87a <__ascii_wctomb+0x14>
 800d870:	228a      	movs	r2, #138	@ 0x8a
 800d872:	601a      	str	r2, [r3, #0]
 800d874:	f04f 30ff 	mov.w	r0, #4294967295
 800d878:	4770      	bx	lr
 800d87a:	700a      	strb	r2, [r1, #0]
 800d87c:	2001      	movs	r0, #1
 800d87e:	4770      	bx	lr

0800d880 <fiprintf>:
 800d880:	b40e      	push	{r1, r2, r3}
 800d882:	b503      	push	{r0, r1, lr}
 800d884:	4601      	mov	r1, r0
 800d886:	ab03      	add	r3, sp, #12
 800d888:	4805      	ldr	r0, [pc, #20]	@ (800d8a0 <fiprintf+0x20>)
 800d88a:	f853 2b04 	ldr.w	r2, [r3], #4
 800d88e:	6800      	ldr	r0, [r0, #0]
 800d890:	9301      	str	r3, [sp, #4]
 800d892:	f7ff f9c1 	bl	800cc18 <_vfiprintf_r>
 800d896:	b002      	add	sp, #8
 800d898:	f85d eb04 	ldr.w	lr, [sp], #4
 800d89c:	b003      	add	sp, #12
 800d89e:	4770      	bx	lr
 800d8a0:	20000050 	.word	0x20000050

0800d8a4 <abort>:
 800d8a4:	b508      	push	{r3, lr}
 800d8a6:	2006      	movs	r0, #6
 800d8a8:	f000 f834 	bl	800d914 <raise>
 800d8ac:	2001      	movs	r0, #1
 800d8ae:	f7f4 ffdf 	bl	8002870 <_exit>

0800d8b2 <_malloc_usable_size_r>:
 800d8b2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d8b6:	1f18      	subs	r0, r3, #4
 800d8b8:	2b00      	cmp	r3, #0
 800d8ba:	bfbc      	itt	lt
 800d8bc:	580b      	ldrlt	r3, [r1, r0]
 800d8be:	18c0      	addlt	r0, r0, r3
 800d8c0:	4770      	bx	lr

0800d8c2 <_raise_r>:
 800d8c2:	291f      	cmp	r1, #31
 800d8c4:	b538      	push	{r3, r4, r5, lr}
 800d8c6:	4605      	mov	r5, r0
 800d8c8:	460c      	mov	r4, r1
 800d8ca:	d904      	bls.n	800d8d6 <_raise_r+0x14>
 800d8cc:	2316      	movs	r3, #22
 800d8ce:	6003      	str	r3, [r0, #0]
 800d8d0:	f04f 30ff 	mov.w	r0, #4294967295
 800d8d4:	bd38      	pop	{r3, r4, r5, pc}
 800d8d6:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800d8d8:	b112      	cbz	r2, 800d8e0 <_raise_r+0x1e>
 800d8da:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d8de:	b94b      	cbnz	r3, 800d8f4 <_raise_r+0x32>
 800d8e0:	4628      	mov	r0, r5
 800d8e2:	f000 f831 	bl	800d948 <_getpid_r>
 800d8e6:	4622      	mov	r2, r4
 800d8e8:	4601      	mov	r1, r0
 800d8ea:	4628      	mov	r0, r5
 800d8ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d8f0:	f000 b818 	b.w	800d924 <_kill_r>
 800d8f4:	2b01      	cmp	r3, #1
 800d8f6:	d00a      	beq.n	800d90e <_raise_r+0x4c>
 800d8f8:	1c59      	adds	r1, r3, #1
 800d8fa:	d103      	bne.n	800d904 <_raise_r+0x42>
 800d8fc:	2316      	movs	r3, #22
 800d8fe:	6003      	str	r3, [r0, #0]
 800d900:	2001      	movs	r0, #1
 800d902:	e7e7      	b.n	800d8d4 <_raise_r+0x12>
 800d904:	2100      	movs	r1, #0
 800d906:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800d90a:	4620      	mov	r0, r4
 800d90c:	4798      	blx	r3
 800d90e:	2000      	movs	r0, #0
 800d910:	e7e0      	b.n	800d8d4 <_raise_r+0x12>
	...

0800d914 <raise>:
 800d914:	4b02      	ldr	r3, [pc, #8]	@ (800d920 <raise+0xc>)
 800d916:	4601      	mov	r1, r0
 800d918:	6818      	ldr	r0, [r3, #0]
 800d91a:	f7ff bfd2 	b.w	800d8c2 <_raise_r>
 800d91e:	bf00      	nop
 800d920:	20000050 	.word	0x20000050

0800d924 <_kill_r>:
 800d924:	b538      	push	{r3, r4, r5, lr}
 800d926:	4d07      	ldr	r5, [pc, #28]	@ (800d944 <_kill_r+0x20>)
 800d928:	2300      	movs	r3, #0
 800d92a:	4604      	mov	r4, r0
 800d92c:	4608      	mov	r0, r1
 800d92e:	4611      	mov	r1, r2
 800d930:	602b      	str	r3, [r5, #0]
 800d932:	f7f4 ff8d 	bl	8002850 <_kill>
 800d936:	1c43      	adds	r3, r0, #1
 800d938:	d102      	bne.n	800d940 <_kill_r+0x1c>
 800d93a:	682b      	ldr	r3, [r5, #0]
 800d93c:	b103      	cbz	r3, 800d940 <_kill_r+0x1c>
 800d93e:	6023      	str	r3, [r4, #0]
 800d940:	bd38      	pop	{r3, r4, r5, pc}
 800d942:	bf00      	nop
 800d944:	2000070c 	.word	0x2000070c

0800d948 <_getpid_r>:
 800d948:	f7f4 bf7a 	b.w	8002840 <_getpid>

0800d94c <_init>:
 800d94c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d94e:	bf00      	nop
 800d950:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d952:	bc08      	pop	{r3}
 800d954:	469e      	mov	lr, r3
 800d956:	4770      	bx	lr

0800d958 <_fini>:
 800d958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d95a:	bf00      	nop
 800d95c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d95e:	bc08      	pop	{r3}
 800d960:	469e      	mov	lr, r3
 800d962:	4770      	bx	lr
